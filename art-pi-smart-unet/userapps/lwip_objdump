
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e397 	bl	138e90 <__libc_start_main>
  100030:	00145368 	.word	0x00145368
  100034:	00103c5c 	.word	0x00103c5c
  100038:	0014535c 	.word	0x0014535c

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3f0 	.word	0x0014d3f0
  100060:	0014d3f0 	.word	0x0014d3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3f0 	.word	0x0014d3f0
  100098:	0014d3f0 	.word	0x0014d3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3f0 	.word	0x0014d3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014cfac 	.word	0x0014cfac

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3f4 	.word	0x0014d3f4
  100114:	0014cfac 	.word	0x0014cfac

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00f0c4 	bl	13c450 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00f0b9 	bl	13c450 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00f0a8 	bl	13c450 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00f096 	bl	13c450 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00f089 	bl	13c450 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00f07c 	bl	13c450 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00f06e 	bl	13c450 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00f05f 	bl	13c450 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00f051 	bl	13c450 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e3050374 	movw	r0, #21364	; 0x5374
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00f00e 	bl	13c450 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00effe 	bl	13c450 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00efef 	bl	13c450 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00efe4 	bl	13c450 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00efd5 	bl	13c450 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00efca 	bl	13c450 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00efb8 	bl	13c450 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00efa6 	bl	13c450 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00ef9b 	bl	13c450 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f349 	bl	13d344 <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00ef7c 	bl	13c450 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f4e4 	bl	13da34 <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00ef54 	bl	13c450 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e236 	bl	139008 <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e22e 	bl	139008 <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3050380 	movw	r0, #21376	; 0x5380
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f79e 	bl	13e5e0 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f610 	bl	13e030 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e1b2 	bl	138ecc <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e1d0 	bl	138f54 <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e1ac 	bl	138ecc <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e3050398 	movw	r0, #21400	; 0x5398
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f75c 	bl	13e5a8 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb01093a 	bl	142d38 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f640 	bl	13e164 <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f645 	bl	13e17c <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb01026d 	bl	141264 <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb010268 	bl	141264 <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f5a2 	bl	13df68 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f599 	bl	13df54 <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f5ad 	bl	13dfcc <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e30503c8 	movw	r0, #21448	; 0x53c8
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f6d5 	bl	13e484 <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f55e 	bl	13dec0 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e15d 	bl	138ecc <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e17b 	bl	138f54 <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e157 	bl	138ecc <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e30503e4 	movw	r0, #21476	; 0x53e4
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f707 	bl	13e5a8 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f578 	bl	13df7c <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e148 	bl	138ecc <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e166 	bl	138f54 <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e142 	bl	138ecc <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3050410 	movw	r0, #21520	; 0x5410
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f6f2 	bl	13e5a8 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f58f 	bl	13e030 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e131 	bl	138ecc <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e14f 	bl	138f54 <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e12b 	bl	138ecc <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e3050434 	movw	r0, #21556	; 0x5434
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f6db 	bl	13e5a8 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb010201 	bl	141264 <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f53b 	bl	13df68 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f532 	bl	13df54 <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f51c 	bl	13df18 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f588 	bl	13e1c4 <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e3050464 	movw	r0, #21604	; 0x5464
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f62e 	bl	13e484 <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e3050474 	movw	r0, #21620	; 0x5474
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f62a 	bl	13e484 <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f498 	bl	13de84 <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb01084b 	bl	142d68 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e0ef 	bl	139008 <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb010838 	bl	142d68 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb010833 	bl	142d68 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f19e 	bl	13d344 <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00edd5 	bl	13c450 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f340 	bl	13da34 <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00edb0 	bl	13c450 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00ed87 	bl	13c450 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f2f8 	bl	13da34 <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00ed63 	bl	13c450 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00ed39 	bl	13c450 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ed1d 	bl	13c450 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00f0cd 	bl	13d344 <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ed04 	bl	13c450 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f26f 	bl	13da34 <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ecdf 	bl	13c450 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ecb6 	bl	13c450 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f227 	bl	13da34 <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ec92 	bl	13c450 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00ec6a 	bl	13c450 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00ec4c 	bl	13c450 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00effc 	bl	13d344 <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00ec33 	bl	13c450 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f19e 	bl	13da34 <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00ec0e 	bl	13c450 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00ebe5 	bl	13c450 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f156 	bl	13da34 <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00ebc1 	bl	13c450 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00eb96 	bl	13c450 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00eb78 	bl	13c450 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00eb59 	bl	13c450 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ef09 	bl	13d344 <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00eb3e 	bl	13c450 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00f0a9 	bl	13da34 <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00dc21 	bl	138868 <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00eb12 	bl	13c450 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00eae9 	bl	13c450 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00f05a 	bl	13da34 <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00eac5 	bl	13c450 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00ea9a 	bl	13c450 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00ea7b 	bl	13c450 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00ea59 	bl	13c450 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ee0a 	bl	13d344 <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00ea41 	bl	13c450 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00efac 	bl	13da34 <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00ea1c 	bl	13c450 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e9f3 	bl	13c450 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00ef64 	bl	13da34 <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e9cf 	bl	13c450 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e9a5 	bl	13c450 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e97f 	bl	13c450 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e977 	bl	13c450 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e96d 	bl	13c450 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e95e 	bl	13c450 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e953 	bl	13c450 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e946 	bl	13c450 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e93b 	bl	13c450 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e929 	bl	13c450 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e91c 	bl	13c450 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e90f 	bl	13c450 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e900 	bl	13c450 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e8f8 	bl	13c450 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e8ee 	bl	13c450 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb0102b4 	bl	142bbc <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e8ac 	bl	13c450 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e89a 	bl	13c450 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e892 	bl	13c450 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e888 	bl	13c450 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e880 	bl	13c450 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e87a 	bl	13c450 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e86d 	bl	13c450 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3410 	movw	r3, #54288	; 0xd410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3410 	movw	r3, #54288	; 0xd410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00eb49 	bl	13d344 <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3410 	movw	r3, #54288	; 0xd410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ece1 	bl	13da34 <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3410 	movw	r3, #54288	; 0xd410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3410 	movw	r3, #54288	; 0xd410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3410 	movw	r3, #54288	; 0xd410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3418 	movw	r3, #54296	; 0xd418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3420 	movw	r3, #54304	; 0xd420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3410 	movw	r3, #54288	; 0xd410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3410 	movw	r3, #54288	; 0xd410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3410 	movw	r3, #54288	; 0xd410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3410 	movw	r3, #54288	; 0xd410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3410 	movw	r3, #54288	; 0xd410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3418 	movw	r3, #54296	; 0xd418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3410 	movw	r3, #54288	; 0xd410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0418 	movw	r0, #54296	; 0xd418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e5bd 	bl	13c450 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e5b2 	bl	13c450 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e5ac 	bl	13c450 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d3414 	movw	r3, #54292	; 0xd414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d3414 	movw	r3, #54292	; 0xd414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3050480 	movw	r0, #21632	; 0x5480
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d3414 	movw	r3, #54292	; 0xd414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3410 	movw	r3, #54288	; 0xd410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e3050488 	movw	r0, #21640	; 0x5488
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3410 	movw	r3, #54288	; 0xd410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d3414 	movw	r3, #54292	; 0xd414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3051480 	movw	r1, #21632	; 0x5480
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e54c 	bl	13c450 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d340c 	movw	r3, #54284	; 0xd40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3050480 	movw	r0, #21632	; 0x5480
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e8e5 	bl	13d344 <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00ea97 	bl	13da34 <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00ea9c 	bl	13da70 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00ea4a 	bl	13d958 <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f6dd 	bl	140be8 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f702 	bl	140cc4 <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f6b8 	bl	140be8 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f6a9 	bl	140be8 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e3050494 	movw	r0, #21652	; 0x5494
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ed10 	bl	13e5a8 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f8b9 	bl	141478 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f9f4 	bl	141994 <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f88b 	bl	141420 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f8a3 	bl	1414a8 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f8c1 	bl	141558 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f8d8 	bl	1415ec <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f831 	bl	141380 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f7dc 	bl	141264 <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f696 	bl	140d84 <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f747 	bl	141080 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f74c 	bl	1410cc <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e3050498 	movw	r0, #21656	; 0x5498
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00ebf7 	bl	13e5a8 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d686 	bl	138fec <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e3051824 	movw	r1, #22564	; 0x5824
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e30504d8 	movw	r0, #21720	; 0x54d8
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e30517fc 	movw	r1, #22524	; 0x57fc
  103658:	e3401014 	movt	r1, #20
  10365c:	e30504d8 	movw	r0, #21720	; 0x54d8
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <channel_cmd_reply+0x38>
  1036b0:	e3a02032 	mov	r2, #50	; 0x32
  1036b4:	e3051810 	movw	r1, #22544	; 0x5810
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e30504d8 	movw	r0, #21720	; 0x54d8
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_CREAT);
  1036fc:	e30d3014 	movw	r3, #53268	; 0xd014
  103700:	e3403014 	movt	r3, #20
  103704:	e5933000 	ldr	r3, [r3]
  103708:	e3a01040 	mov	r1, #64	; 0x40
  10370c:	e1a00003 	mov	r0, r3
  103710:	ebfff280 	bl	100118 <rt_channel_open>
  103714:	e1a02000 	mov	r2, r0
  103718:	e30d3010 	movw	r3, #53264	; 0xd010
  10371c:	e3403014 	movt	r3, #20
  103720:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103724:	e30d3010 	movw	r3, #53264	; 0xd010
  103728:	e3403014 	movt	r3, #20
  10372c:	e5933000 	ldr	r3, [r3]
  103730:	e3530000 	cmp	r3, #0
  103734:	aa000001 	bge	103740 <stack_init+0x4c>
  103738:	e3a03001 	mov	r3, #1
  10373c:	ea000001 	b	103748 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  103740:	eb001b6e 	bl	10a500 <lwip_system_init>
    return 0;
  103744:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  103748:	e1a00003 	mov	r0, r3
  10374c:	e8bd8800 	pop	{fp, pc}

00103750 <stack_run>:
};
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  103750:	e92d4800 	push	{fp, lr}
  103754:	e28db004 	add	fp, sp, #4
  103758:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  10375c:	e30d3010 	movw	r3, #53264	; 0xd010
  103760:	e3403014 	movt	r3, #20
  103764:	e5933000 	ldr	r3, [r3]
  103768:	e1a00003 	mov	r0, r3
  10376c:	ebffffb0 	bl	103634 <channel_cmd_recv>
  103770:	e1a03000 	mov	r3, r0
  103774:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103778:	e51b300c 	ldr	r3, [fp, #-12]
  10377c:	e3530000 	cmp	r3, #0
  103780:	ba000124 	blt	103c18 <stack_run+0x4c8>
        {
            cmd = lwp_shmat(shmid, NULL);
  103784:	e3a01000 	mov	r1, #0
  103788:	e51b000c 	ldr	r0, [fp, #-12]
  10378c:	ebfff9df 	bl	101f10 <lwp_shmat>
  103790:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e3530000 	cmp	r3, #0
  10379c:	1a000002 	bne	1037ac <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  1037a0:	e51b000c 	ldr	r0, [fp, #-12]
  1037a4:	ebfff9ce 	bl	101ee4 <lwp_shmrm>
                continue;
  1037a8:	ea00011d 	b	103c24 <stack_run+0x4d4>
            }

            switch (cmd->cmd)
  1037ac:	e51b3010 	ldr	r3, [fp, #-16]
  1037b0:	e5933000 	ldr	r3, [r3]
  1037b4:	e2433014 	sub	r3, r3, #20
  1037b8:	e3530009 	cmp	r3, #9
  1037bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1037c0:	ea000116 	b	103c20 <stack_run+0x4d0>
  1037c4:	001037ec 	.word	0x001037ec
  1037c8:	00103c20 	.word	0x00103c20
  1037cc:	0010384c 	.word	0x0010384c
  1037d0:	001038b0 	.word	0x001038b0
  1037d4:	001038fc 	.word	0x001038fc
  1037d8:	00103960 	.word	0x00103960
  1037dc:	001039bc 	.word	0x001039bc
  1037e0:	00103ac8 	.word	0x00103ac8
  1037e4:	00103c20 	.word	0x00103c20
  1037e8:	00103b94 	.word	0x00103b94
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  1037ec:	e51b3010 	ldr	r3, [fp, #-16]
  1037f0:	e5933004 	ldr	r3, [r3, #4]
  1037f4:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  1037f8:	e51b3010 	ldr	r3, [fp, #-16]
  1037fc:	e5933008 	ldr	r3, [r3, #8]
  103800:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e593300c 	ldr	r3, [r3, #12]
  10380c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103810:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103814:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103818:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10381c:	eb001823 	bl	1098b0 <socket_internal>
  103820:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  10382c:	e30d3010 	movw	r3, #53264	; 0xd010
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff91 	bl	103690 <channel_cmd_reply>
                break;
  103848:	ea0000f5 	b	103c24 <stack_run+0x4d4>
            //     lwp_shmdt(cmd);
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e283301c 	add	r3, r3, #28
  103860:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103864:	e51b3010 	ldr	r3, [fp, #-16]
  103868:	e5933008 	ldr	r3, [r3, #8]
  10386c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  103870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103874:	e1a02003 	mov	r2, r3
  103878:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10387c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103880:	eb001768 	bl	109628 <bind_internal>
  103884:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103888:	e51b0010 	ldr	r0, [fp, #-16]
  10388c:	ebfff9ac 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103890:	e30d3010 	movw	r3, #53264	; 0xd010
  103894:	e3403014 	movt	r3, #20
  103898:	e5933000 	ldr	r3, [r3]
  10389c:	e51b2008 	ldr	r2, [fp, #-8]
  1038a0:	e1a01002 	mov	r1, r2
  1038a4:	e1a00003 	mov	r0, r3
  1038a8:	ebffff78 	bl	103690 <channel_cmd_reply>
                break;
  1038ac:	ea0000dc 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  1038b0:	e51b3010 	ldr	r3, [fp, #-16]
  1038b4:	e5933004 	ldr	r3, [r3, #4]
  1038b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  1038bc:	e51b3010 	ldr	r3, [fp, #-16]
  1038c0:	e5933008 	ldr	r3, [r3, #8]
  1038c4:	e1a01003 	mov	r1, r3
  1038c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038cc:	eb00178c 	bl	109704 <listen_internal>
  1038d0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038d4:	e51b0010 	ldr	r0, [fp, #-16]
  1038d8:	ebfff999 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1038dc:	e30d3010 	movw	r3, #53264	; 0xd010
  1038e0:	e3403014 	movt	r3, #20
  1038e4:	e5933000 	ldr	r3, [r3]
  1038e8:	e51b2008 	ldr	r2, [fp, #-8]
  1038ec:	e1a01002 	mov	r1, r2
  1038f0:	e1a00003 	mov	r0, r3
  1038f4:	ebffff65 	bl	103690 <channel_cmd_reply>
                break;
  1038f8:	ea0000c9 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  1038fc:	e51b3010 	ldr	r3, [fp, #-16]
  103900:	e5933004 	ldr	r3, [r3, #4]
  103904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103908:	e51b3010 	ldr	r3, [fp, #-16]
  10390c:	e283301c 	add	r3, r3, #28
  103910:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103914:	e51b3010 	ldr	r3, [fp, #-16]
  103918:	e5933008 	ldr	r3, [r3, #8]
  10391c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  103920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103924:	e1a02003 	mov	r2, r3
  103928:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10392c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103930:	eb00174d 	bl	10966c <connect_internal>
  103934:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103938:	e51b0010 	ldr	r0, [fp, #-16]
  10393c:	ebfff980 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103940:	e30d3010 	movw	r3, #53264	; 0xd010
  103944:	e3403014 	movt	r3, #20
  103948:	e5933000 	ldr	r3, [r3]
  10394c:	e51b2008 	ldr	r2, [fp, #-8]
  103950:	e1a01002 	mov	r1, r2
  103954:	e1a00003 	mov	r0, r3
  103958:	ebffff4c 	bl	103690 <channel_cmd_reply>
                break;
  10395c:	ea0000b0 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  103960:	e51b3010 	ldr	r3, [fp, #-16]
  103964:	e5933004 	ldr	r3, [r3, #4]
  103968:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  10396c:	e51b3010 	ldr	r3, [fp, #-16]
  103970:	e283301c 	add	r3, r3, #28
  103974:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103978:	e51b3010 	ldr	r3, [fp, #-16]
  10397c:	e2833008 	add	r3, r3, #8
  103980:	e1a02003 	mov	r2, r3
  103984:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103988:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10398c:	eb0016bd 	bl	109488 <accept_internal>
  103990:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103994:	e51b0010 	ldr	r0, [fp, #-16]
  103998:	ebfff969 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10399c:	e30d3010 	movw	r3, #53264	; 0xd010
  1039a0:	e3403014 	movt	r3, #20
  1039a4:	e5933000 	ldr	r3, [r3]
  1039a8:	e51b2008 	ldr	r2, [fp, #-8]
  1039ac:	e1a01002 	mov	r1, r2
  1039b0:	e1a00003 	mov	r0, r3
  1039b4:	ebffff35 	bl	103690 <channel_cmd_reply>
                break;
  1039b8:	ea000099 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  1039bc:	e51b3010 	ldr	r3, [fp, #-16]
  1039c0:	e5933004 	ldr	r3, [r3, #4]
  1039c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  1039c8:	e51b3010 	ldr	r3, [fp, #-16]
  1039cc:	e5933008 	ldr	r3, [r3, #8]
  1039d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  1039d4:	e51b3010 	ldr	r3, [fp, #-16]
  1039d8:	e593300c 	ldr	r3, [r3, #12]
  1039dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  1039e0:	e51b3010 	ldr	r3, [fp, #-16]
  1039e4:	e5933010 	ldr	r3, [r3, #16]
  1039e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1039ec:	e51b3010 	ldr	r3, [fp, #-16]
  1039f0:	e283301c 	add	r3, r3, #28
  1039f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  1039f8:	e30d3424 	movw	r3, #54308	; 0xd424
  1039fc:	e3403014 	movt	r3, #20
  103a00:	e5933000 	ldr	r3, [r3]
  103a04:	e2832001 	add	r2, r3, #1
  103a08:	e30d3424 	movw	r3, #54308	; 0xd424
  103a0c:	e3403014 	movt	r3, #20
  103a10:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103a14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a18:	e3530000 	cmp	r3, #0
  103a1c:	1a000006 	bne	103a3c <stack_run+0x2ec>
                {
                    result = send_internal(socket, data, size, flags);
  103a20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a24:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a2c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a30:	eb001770 	bl	1097f8 <send_internal>
  103a34:	e50b0008 	str	r0, [fp, #-8]
  103a38:	ea00000f 	b	103a7c <stack_run+0x32c>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103a3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103a40:	e283301c 	add	r3, r3, #28
  103a44:	e51b2010 	ldr	r2, [fp, #-16]
  103a48:	e0823003 	add	r3, r2, r3
  103a4c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103a50:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103a54:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a58:	e58d3004 	str	r3, [sp, #4]
  103a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103a60:	e58d3000 	str	r3, [sp]
  103a64:	e1a03002 	mov	r3, r2
  103a68:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a6c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a74:	eb001776 	bl	109854 <sendto_internal>
  103a78:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103a7c:	e51b3008 	ldr	r3, [fp, #-8]
  103a80:	e3530000 	cmp	r3, #0
  103a84:	ca000005 	bgt	103aa0 <stack_run+0x350>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103a88:	e3a02f53 	mov	r2, #332	; 0x14c
  103a8c:	e30517f0 	movw	r1, #22512	; 0x57f0
  103a90:	e3401014 	movt	r1, #20
  103a94:	e30504f8 	movw	r0, #21752	; 0x54f8
  103a98:	e3400014 	movt	r0, #20
  103a9c:	ebfffd9c 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103aa0:	e51b0010 	ldr	r0, [fp, #-16]
  103aa4:	ebfff926 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103aa8:	e30d3010 	movw	r3, #53264	; 0xd010
  103aac:	e3403014 	movt	r3, #20
  103ab0:	e5933000 	ldr	r3, [r3]
  103ab4:	e51b2008 	ldr	r2, [fp, #-8]
  103ab8:	e1a01002 	mov	r1, r2
  103abc:	e1a00003 	mov	r0, r3
  103ac0:	ebfffef2 	bl	103690 <channel_cmd_reply>
                break;
  103ac4:	ea000056 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103ac8:	e51b3010 	ldr	r3, [fp, #-16]
  103acc:	e5933004 	ldr	r3, [r3, #4]
  103ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103ad4:	e51b3010 	ldr	r3, [fp, #-16]
  103ad8:	e5933008 	ldr	r3, [r3, #8]
  103adc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103ae0:	e51b3010 	ldr	r3, [fp, #-16]
  103ae4:	e593300c 	ldr	r3, [r3, #12]
  103ae8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103aec:	e51b3010 	ldr	r3, [fp, #-16]
  103af0:	e5933010 	ldr	r3, [r3, #16]
  103af4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103af8:	e51b3010 	ldr	r3, [fp, #-16]
  103afc:	e283301c 	add	r3, r3, #28
  103b00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b08:	e3530000 	cmp	r3, #0
  103b0c:	1a000006 	bne	103b2c <stack_run+0x3dc>
                {
                    result = recv_internal(socket, data, size, flags);
  103b10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103b14:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b18:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b20:	eb001706 	bl	109740 <recv_internal>
  103b24:	e50b0008 	str	r0, [fp, #-8]
  103b28:	ea00000f 	b	103b6c <stack_run+0x41c>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103b2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103b30:	e283301c 	add	r3, r3, #28
  103b34:	e51b2010 	ldr	r2, [fp, #-16]
  103b38:	e0823003 	add	r3, r2, r3
  103b3c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103b40:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103b44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b48:	e58d3004 	str	r3, [sp, #4]
  103b4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103b50:	e58d3000 	str	r3, [sp]
  103b54:	e1a03002 	mov	r3, r2
  103b58:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b5c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b64:	eb00170c 	bl	10979c <recvfrom_internal>
  103b68:	e50b0008 	str	r0, [fp, #-8]
                }

                lwp_shmdt(cmd);
  103b6c:	e51b0010 	ldr	r0, [fp, #-16]
  103b70:	ebfff8f3 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b74:	e30d3010 	movw	r3, #53264	; 0xd010
  103b78:	e3403014 	movt	r3, #20
  103b7c:	e5933000 	ldr	r3, [r3]
  103b80:	e51b2008 	ldr	r2, [fp, #-8]
  103b84:	e1a01002 	mov	r1, r2
  103b88:	e1a00003 	mov	r0, r3
  103b8c:	ebfffebf 	bl	103690 <channel_cmd_reply>
                break;
  103b90:	ea000023 	b	103c24 <stack_run+0x4d4>
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103b94:	e51b3010 	ldr	r3, [fp, #-16]
  103b98:	e5933004 	ldr	r3, [r3, #4]
  103b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103ba0:	e51b3010 	ldr	r3, [fp, #-16]
  103ba4:	e5933008 	ldr	r3, [r3, #8]
  103ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103bac:	e51b3010 	ldr	r3, [fp, #-16]
  103bb0:	e593300c 	ldr	r3, [r3, #12]
  103bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103bb8:	e51b3010 	ldr	r3, [fp, #-16]
  103bbc:	e5933010 	ldr	r3, [r3, #16]
  103bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103bc4:	e51b3010 	ldr	r3, [fp, #-16]
  103bc8:	e283301c 	add	r3, r3, #28
  103bcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103bd4:	e58d3000 	str	r3, [sp]
  103bd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103bdc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103be0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103be4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103be8:	eb0016b0 	bl	1096b0 <setsockopt_internal>
  103bec:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103bf0:	e51b0010 	ldr	r0, [fp, #-16]
  103bf4:	ebfff8d2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103bf8:	e30d3010 	movw	r3, #53264	; 0xd010
  103bfc:	e3403014 	movt	r3, #20
  103c00:	e5933000 	ldr	r3, [r3]
  103c04:	e51b2008 	ldr	r2, [fp, #-8]
  103c08:	e1a01002 	mov	r1, r2
  103c0c:	e1a00003 	mov	r0, r3
  103c10:	ebfffe9e 	bl	103690 <channel_cmd_reply>
                break;
  103c14:	ea000002 	b	103c24 <stack_run+0x4d4>
    //             break;

            default :
                break;
            }
        }
  103c18:	e320f000 	nop	{0}
  103c1c:	eafffece 	b	10375c <stack_run+0xc>
                break;
  103c20:	e320f000 	nop	{0}
    {
  103c24:	eafffecc 	b	10375c <stack_run+0xc>

00103c28 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103c2c:	e28db000 	add	fp, sp, #0
}
  103c30:	e320f000 	nop	{0}
  103c34:	e28bd000 	add	sp, fp, #0
  103c38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c3c:	e12fff1e 	bx	lr

00103c40 <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103c40:	e92d4800 	push	{fp, lr}
  103c44:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103c48:	e3050514 	movw	r0, #21780	; 0x5514
  103c4c:	e3400014 	movt	r0, #20
  103c50:	eb00ea62 	bl	13e5e0 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103c54:	e320f000 	nop	{0}
  103c58:	e8bd8800 	pop	{fp, pc}

00103c5c <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103c5c:	e92d4810 	push	{r4, fp, lr}
  103c60:	e28db008 	add	fp, sp, #8
  103c64:	e24dd034 	sub	sp, sp, #52	; 0x34
  103c68:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103c6c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103c70:	e3a03000 	mov	r3, #0
  103c74:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103c78:	e3e03000 	mvn	r3, #0
  103c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103c80:	e3e03000 	mvn	r3, #0
  103c84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103c88:	e3a03000 	mov	r3, #0
  103c8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103c90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103c94:	e3530001 	cmp	r3, #1
  103c98:	ca000035 	bgt	103d74 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103c9c:	e305065c 	movw	r0, #22108	; 0x565c
  103ca0:	e3400014 	movt	r0, #20
  103ca4:	eb00ea3f 	bl	13e5a8 <printf>
        initialized = stack_init();
  103ca8:	ebfffe91 	bl	1036f4 <stack_init>
  103cac:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103cb0:	e51b3010 	ldr	r3, [fp, #-16]
  103cb4:	e3530000 	cmp	r3, #0
  103cb8:	aa000004 	bge	103cd0 <main+0x74>
        {
            printf(" ...failed!\n");
  103cbc:	e3050684 	movw	r0, #22148	; 0x5684
  103cc0:	e3400014 	movt	r0, #20
  103cc4:	eb00ea45 	bl	13e5e0 <puts>
            return -1;
  103cc8:	e3e03000 	mvn	r3, #0
  103ccc:	ea0000f7 	b	1040b0 <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103cd0:	e51b3010 	ldr	r3, [fp, #-16]
  103cd4:	e3530000 	cmp	r3, #0
  103cd8:	da000004 	ble	103cf0 <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103cdc:	e3050690 	movw	r0, #22160	; 0x5690
  103ce0:	e3400014 	movt	r0, #20
  103ce4:	eb00ea3d 	bl	13e5e0 <puts>
            return 0;
  103ce8:	e3a03000 	mov	r3, #0
  103cec:	ea0000ef 	b	1040b0 <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103cf0:	e30506b4 	movw	r0, #22196	; 0x56b4
  103cf4:	e3400014 	movt	r0, #20
  103cf8:	eb00ea38 	bl	13e5e0 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103cfc:	e30506c4 	movw	r0, #22212	; 0x56c4
  103d00:	e3400014 	movt	r0, #20
  103d04:	eb00ea27 	bl	13e5a8 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d08:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d0c:	e1a01003 	mov	r1, r3
  103d10:	e3a00000 	mov	r0, #0
  103d14:	eb00c6ad 	bl	1357d0 <imx6ul_eth_init>
  103d18:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103d1c:	e51b3010 	ldr	r3, [fp, #-16]
  103d20:	e3530000 	cmp	r3, #0
  103d24:	aa000004 	bge	103d3c <main+0xe0>
            {
                printf(" ...failed!\n");
  103d28:	e3050684 	movw	r0, #22148	; 0x5684
  103d2c:	e3400014 	movt	r0, #20
  103d30:	eb00ea2a 	bl	13e5e0 <puts>
                return -1;
  103d34:	e3e03000 	mvn	r3, #0
  103d38:	ea0000dc 	b	1040b0 <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103d3c:	e51b3010 	ldr	r3, [fp, #-16]
  103d40:	e3530000 	cmp	r3, #0
  103d44:	da000004 	ble	103d5c <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103d48:	e3050690 	movw	r0, #22160	; 0x5690
  103d4c:	e3400014 	movt	r0, #20
  103d50:	eb00ea22 	bl	13e5e0 <puts>
                return 0;
  103d54:	e3a03000 	mov	r3, #0
  103d58:	ea0000d4 	b	1040b0 <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103d5c:	e30506e0 	movw	r0, #22240	; 0x56e0
  103d60:	e3400014 	movt	r0, #20
  103d64:	eb00ea1d 	bl	13e5e0 <puts>
                dfs_init();
  103d68:	eb001730 	bl	109a30 <dfs_init>
                sal_init();
  103d6c:	eb000c20 	bl	106df4 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103d70:	ebfffe76 	bl	103750 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d78:	e3530002 	cmp	r3, #2
  103d7c:	da000050 	ble	103ec4 <main+0x268>
  103d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103d84:	e2833004 	add	r3, r3, #4
  103d88:	e5933000 	ldr	r3, [r3]
  103d8c:	e3a02006 	mov	r2, #6
  103d90:	e30516ec 	movw	r1, #22252	; 0x56ec
  103d94:	e3401014 	movt	r1, #20
  103d98:	e1a00003 	mov	r0, r3
  103d9c:	eb00f5ed 	bl	141558 <strncmp>
  103da0:	e1a03000 	mov	r3, r0
  103da4:	e3530000 	cmp	r3, #0
  103da8:	1a000045 	bne	103ec4 <main+0x268>
    {
        int static_ip = 0;
  103dac:	e3a03000 	mov	r3, #0
  103db0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103db4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103db8:	e2833008 	add	r3, r3, #8
  103dbc:	e5933000 	ldr	r3, [r3]
  103dc0:	e1a01003 	mov	r1, r3
  103dc4:	e30506f4 	movw	r0, #22260	; 0x56f4
  103dc8:	e3400014 	movt	r0, #20
  103dcc:	eb00e9f5 	bl	13e5a8 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103dd0:	e30d3018 	movw	r3, #53272	; 0xd018
  103dd4:	e3403014 	movt	r3, #20
  103dd8:	e5933000 	ldr	r3, [r3]
  103ddc:	e3a01002 	mov	r1, #2
  103de0:	e1a00003 	mov	r0, r3
  103de4:	ebfff0cb 	bl	100118 <rt_channel_open>
  103de8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103df0:	e3530000 	cmp	r3, #0
  103df4:	aa000004 	bge	103e0c <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103df8:	e3050710 	movw	r0, #22288	; 0x5710
  103dfc:	e3400014 	movt	r0, #20
  103e00:	eb00e9f6 	bl	13e5e0 <puts>
            return -1;
  103e04:	e3e03000 	mvn	r3, #0
  103e08:	ea0000a8 	b	1040b0 <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e0c:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e14:	e2833008 	add	r3, r3, #8
  103e18:	e5933000 	ldr	r3, [r3]
  103e1c:	e1a00003 	mov	r0, r3
  103e20:	eb00f5a0 	bl	1414a8 <strlen>
  103e24:	e1a03000 	mov	r3, r0
  103e28:	e2833001 	add	r3, r3, #1
  103e2c:	e58d300c 	str	r3, [sp, #12]
  103e30:	e3a03000 	mov	r3, #0
  103e34:	e58d3008 	str	r3, [sp, #8]
  103e38:	e3a03000 	mov	r3, #0
  103e3c:	e58d3004 	str	r3, [sp, #4]
  103e40:	e3a03000 	mov	r3, #0
  103e44:	e58d3000 	str	r3, [sp]
  103e48:	e3a03000 	mov	r3, #0
  103e4c:	e3a02000 	mov	r2, #0
  103e50:	e1a01004 	mov	r1, r4
  103e54:	e3a00065 	mov	r0, #101	; 0x65
  103e58:	eb000097 	bl	1040bc <channel_compose_cmd>
  103e5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103e60:	e3a01000 	mov	r1, #0
  103e64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103e68:	ebfff828 	bl	101f10 <lwp_shmat>
  103e6c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103e70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e74:	e3530000 	cmp	r3, #0
  103e78:	0a000009 	beq	103ea4 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103e7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e80:	e283201c 	add	r2, r3, #28
  103e84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e88:	e2833008 	add	r3, r3, #8
  103e8c:	e5933000 	ldr	r3, [r3]
  103e90:	e1a01003 	mov	r1, r3
  103e94:	e1a00002 	mov	r0, r2
  103e98:	eb00f571 	bl	141464 <strcpy>
            lwp_shmdt(cmd);
  103e9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103ea0:	ebfff827 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ea8:	e1a01003 	mov	r1, r3
  103eac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb0:	ebfffdc6 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103eb4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb8:	ebfff0a3 	bl	10014c <rt_channel_close>

        return 0;
  103ebc:	e3a03000 	mov	r3, #0
  103ec0:	ea00007a 	b	1040b0 <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ec8:	e3530003 	cmp	r3, #3
  103ecc:	1a000061 	bne	104058 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103ed0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ed4:	e2833004 	add	r3, r3, #4
  103ed8:	e5933000 	ldr	r3, [r3]
  103edc:	e3a02008 	mov	r2, #8
  103ee0:	e3051758 	movw	r1, #22360	; 0x5758
  103ee4:	e3401014 	movt	r1, #20
  103ee8:	e1a00003 	mov	r0, r3
  103eec:	eb00f599 	bl	141558 <strncmp>
  103ef0:	e1a03000 	mov	r3, r0
  103ef4:	e3530000 	cmp	r3, #0
  103ef8:	1a000042 	bne	104008 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103efc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f00:	e2833008 	add	r3, r3, #8
  103f04:	e5933000 	ldr	r3, [r3]
  103f08:	e1a01003 	mov	r1, r3
  103f0c:	e3050764 	movw	r0, #22372	; 0x5764
  103f10:	e3400014 	movt	r0, #20
  103f14:	eb00e9a3 	bl	13e5a8 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103f18:	e30d3018 	movw	r3, #53272	; 0xd018
  103f1c:	e3403014 	movt	r3, #20
  103f20:	e5933000 	ldr	r3, [r3]
  103f24:	e3a01002 	mov	r1, #2
  103f28:	e1a00003 	mov	r0, r3
  103f2c:	ebfff079 	bl	100118 <rt_channel_open>
  103f30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f38:	e3530000 	cmp	r3, #0
  103f3c:	aa000004 	bge	103f54 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103f40:	e3050710 	movw	r0, #22288	; 0x5710
  103f44:	e3400014 	movt	r0, #20
  103f48:	eb00e9a4 	bl	13e5e0 <puts>
                return -1;
  103f4c:	e3e03000 	mvn	r3, #0
  103f50:	ea000056 	b	1040b0 <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103f54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f58:	e2833008 	add	r3, r3, #8
  103f5c:	e5933000 	ldr	r3, [r3]
  103f60:	e1a00003 	mov	r0, r3
  103f64:	eb00f54f 	bl	1414a8 <strlen>
  103f68:	e1a03000 	mov	r3, r0
  103f6c:	e2833001 	add	r3, r3, #1
  103f70:	e58d300c 	str	r3, [sp, #12]
  103f74:	e3a03000 	mov	r3, #0
  103f78:	e58d3008 	str	r3, [sp, #8]
  103f7c:	e3a03000 	mov	r3, #0
  103f80:	e58d3004 	str	r3, [sp, #4]
  103f84:	e3a03000 	mov	r3, #0
  103f88:	e58d3000 	str	r3, [sp]
  103f8c:	e3a03000 	mov	r3, #0
  103f90:	e3a02000 	mov	r2, #0
  103f94:	e3a01000 	mov	r1, #0
  103f98:	e3a00066 	mov	r0, #102	; 0x66
  103f9c:	eb000046 	bl	1040bc <channel_compose_cmd>
  103fa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103fa4:	e3a01000 	mov	r1, #0
  103fa8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103fac:	ebfff7d7 	bl	101f10 <lwp_shmat>
  103fb0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  103fb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fb8:	e3530000 	cmp	r3, #0
  103fbc:	0a000009 	beq	103fe8 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103fc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fc4:	e283201c 	add	r2, r3, #28
  103fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fcc:	e2833008 	add	r3, r3, #8
  103fd0:	e5933000 	ldr	r3, [r3]
  103fd4:	e1a01003 	mov	r1, r3
  103fd8:	e1a00002 	mov	r0, r2
  103fdc:	eb00f520 	bl	141464 <strcpy>
                lwp_shmdt(cmd);
  103fe0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103fe4:	ebfff7d6 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103fec:	e1a01003 	mov	r1, r3
  103ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ff4:	ebfffd75 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  103ff8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ffc:	ebfff052 	bl	10014c <rt_channel_close>

            return 0;
  104000:	e3a03000 	mov	r3, #0
  104004:	ea000029 	b	1040b0 <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10400c:	e2833004 	add	r3, r3, #4
  104010:	e5933000 	ldr	r3, [r3]
  104014:	e3a02008 	mov	r2, #8
  104018:	e3051784 	movw	r1, #22404	; 0x5784
  10401c:	e3401014 	movt	r1, #20
  104020:	e1a00003 	mov	r0, r3
  104024:	eb00f54b 	bl	141558 <strncmp>
  104028:	e1a03000 	mov	r3, r0
  10402c:	e3530000 	cmp	r3, #0
  104030:	1a000008 	bne	104058 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  104034:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104038:	e2833008 	add	r3, r3, #8
  10403c:	e5933000 	ldr	r3, [r3]
  104040:	e1a01003 	mov	r1, r3
  104044:	e305078c 	movw	r0, #22412	; 0x578c
  104048:	e3400014 	movt	r0, #20
  10404c:	eb00e955 	bl	13e5a8 <printf>
            //eth_set_default(argv[2]);
            return 0;
  104050:	e3a03000 	mov	r3, #0
  104054:	ea000015 	b	1040b0 <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  104058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10405c:	e3530002 	cmp	r3, #2
  104060:	1a000010 	bne	1040a8 <main+0x44c>
  104064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104068:	e2833004 	add	r3, r3, #4
  10406c:	e5933000 	ldr	r3, [r3]
  104070:	e3a02006 	mov	r2, #6
  104074:	e30517b0 	movw	r1, #22448	; 0x57b0
  104078:	e3401014 	movt	r1, #20
  10407c:	e1a00003 	mov	r0, r3
  104080:	eb00f534 	bl	141558 <strncmp>
  104084:	e1a03000 	mov	r3, r0
  104088:	e3530000 	cmp	r3, #0
  10408c:	1a000005 	bne	1040a8 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  104090:	e30507b8 	movw	r0, #22456	; 0x57b8
  104094:	e3400014 	movt	r0, #20
  104098:	eb00e950 	bl	13e5e0 <puts>
        lwipkit_status();
  10409c:	ebfffee1 	bl	103c28 <lwipkit_status>
        return 0;
  1040a0:	e3a03000 	mov	r3, #0
  1040a4:	ea000001 	b	1040b0 <main+0x454>
    }

    lwipkit_usage();
  1040a8:	ebfffee4 	bl	103c40 <lwipkit_usage>
    return -1;
  1040ac:	e3e03000 	mvn	r3, #0
}
  1040b0:	e1a00003 	mov	r0, r3
  1040b4:	e24bd008 	sub	sp, fp, #8
  1040b8:	e8bd8810 	pop	{r4, fp, pc}

001040bc <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  1040bc:	e92d4800 	push	{fp, lr}
  1040c0:	e28db004 	add	fp, sp, #4
  1040c4:	e24dd020 	sub	sp, sp, #32
  1040c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1040d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  1040d8:	e3a03000 	mov	r3, #0
  1040dc:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  1040e0:	e3a03000 	mov	r3, #0
  1040e4:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  1040e8:	e59b3010 	ldr	r3, [fp, #16]
  1040ec:	e283301c 	add	r3, r3, #28
  1040f0:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  1040f4:	e30d301c 	movw	r3, #53276	; 0xd01c
  1040f8:	e3403014 	movt	r3, #20
  1040fc:	e5933000 	ldr	r3, [r3]
  104100:	e3730001 	cmn	r3, #1
  104104:	1a000005 	bne	104120 <channel_compose_cmd+0x64>
  104108:	ebfff839 	bl	1021f4 <rt_thread_self>
  10410c:	e1a03000 	mov	r3, r0
  104110:	e1a02003 	mov	r2, r3
  104114:	e30d301c 	movw	r3, #53276	; 0xd01c
  104118:	e3403014 	movt	r3, #20
  10411c:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  104120:	e30d301c 	movw	r3, #53276	; 0xd01c
  104124:	e3403014 	movt	r3, #20
  104128:	e5933000 	ldr	r3, [r3]
  10412c:	e2832002 	add	r2, r3, #2
  104130:	e30d301c 	movw	r3, #53276	; 0xd01c
  104134:	e3403014 	movt	r3, #20
  104138:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  10413c:	e30d301c 	movw	r3, #53276	; 0xd01c
  104140:	e3403014 	movt	r3, #20
  104144:	e5933000 	ldr	r3, [r3]
  104148:	e3a02001 	mov	r2, #1
  10414c:	e51b1010 	ldr	r1, [fp, #-16]
  104150:	e1a00003 	mov	r0, r3
  104154:	ebfff753 	bl	101ea8 <lwp_shmget>
  104158:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  10415c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104160:	e3730001 	cmn	r3, #1
  104164:	1a00000a 	bne	104194 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  104168:	e30d301c 	movw	r3, #53276	; 0xd01c
  10416c:	e3403014 	movt	r3, #20
  104170:	e5933000 	ldr	r3, [r3]
  104174:	e1a02003 	mov	r2, r3
  104178:	e30518a8 	movw	r1, #22696	; 0x58a8
  10417c:	e3401014 	movt	r1, #20
  104180:	e3050838 	movw	r0, #22584	; 0x5838
  104184:	e3400014 	movt	r0, #20
  104188:	ebfffbe1 	bl	103114 <rt_kprintf>
        return -1;
  10418c:	e3e03000 	mvn	r3, #0
  104190:	ea000027 	b	104234 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  104194:	e3a01000 	mov	r1, #0
  104198:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10419c:	ebfff75b 	bl	101f10 <lwp_shmat>
  1041a0:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  1041a4:	e51b3008 	ldr	r3, [fp, #-8]
  1041a8:	e3530000 	cmp	r3, #0
  1041ac:	1a000006 	bne	1041cc <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  1041b0:	e305086c 	movw	r0, #22636	; 0x586c
  1041b4:	e3400014 	movt	r0, #20
  1041b8:	eb00e908 	bl	13e5e0 <puts>
        lwp_shmrm(shmid);
  1041bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041c0:	ebfff747 	bl	101ee4 <lwp_shmrm>
        return -1;
  1041c4:	e3e03000 	mvn	r3, #0
  1041c8:	ea000019 	b	104234 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  1041cc:	e51b3008 	ldr	r3, [fp, #-8]
  1041d0:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  1041d4:	e51b300c 	ldr	r3, [fp, #-12]
  1041d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1041dc:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  1041e0:	e51b300c 	ldr	r3, [fp, #-12]
  1041e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1041e8:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  1041ec:	e51b300c 	ldr	r3, [fp, #-12]
  1041f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1041f4:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  1041f8:	e51b300c 	ldr	r3, [fp, #-12]
  1041fc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  104200:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104204:	e51b300c 	ldr	r3, [fp, #-12]
  104208:	e59b2004 	ldr	r2, [fp, #4]
  10420c:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  104210:	e51b300c 	ldr	r3, [fp, #-12]
  104214:	e59b2008 	ldr	r2, [fp, #8]
  104218:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  10421c:	e51b300c 	ldr	r3, [fp, #-12]
  104220:	e59b200c 	ldr	r2, [fp, #12]
  104224:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  104228:	e51b0008 	ldr	r0, [fp, #-8]
  10422c:	ebfff744 	bl	101f44 <lwp_shmdt>

    return shmid;
  104230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  104234:	e1a00003 	mov	r0, r3
  104238:	e24bd004 	sub	sp, fp, #4
  10423c:	e8bd8800 	pop	{fp, pc}

00104240 <channel_cmd_send_recv>:
{
  104240:	e92d4800 	push	{fp, lr}
  104244:	e28db004 	add	fp, sp, #4
  104248:	e24dd018 	sub	sp, sp, #24
  10424c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  104254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104258:	e3530000 	cmp	r3, #0
  10425c:	aa000005 	bge	104278 <channel_cmd_send_recv+0x38>
  104260:	e3a0200a 	mov	r2, #10
  104264:	e3051908 	movw	r1, #22792	; 0x5908
  104268:	e3401014 	movt	r1, #20
  10426c:	e30508bc 	movw	r0, #22716	; 0x58bc
  104270:	e3400014 	movt	r0, #20
  104274:	ebfffcc7 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104278:	e3a03000 	mov	r3, #0
  10427c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  104280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104284:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  104288:	e24b2014 	sub	r2, fp, #20
  10428c:	e24b3014 	sub	r3, fp, #20
  104290:	e1a01003 	mov	r1, r3
  104294:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104298:	ebffefb6 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  10429c:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042a0:	e1a00003 	mov	r0, r3
  1042a4:	e24bd004 	sub	sp, fp, #4
  1042a8:	e8bd8800 	pop	{fp, pc}

001042ac <channel_cmd_recv>:
{
  1042ac:	e92d4800 	push	{fp, lr}
  1042b0:	e28db004 	add	fp, sp, #4
  1042b4:	e24dd018 	sub	sp, sp, #24
  1042b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1042bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042c0:	e3530000 	cmp	r3, #0
  1042c4:	aa000005 	bge	1042e0 <channel_cmd_recv+0x34>
  1042c8:	e3a02027 	mov	r2, #39	; 0x27
  1042cc:	e30518f4 	movw	r1, #22772	; 0x58f4
  1042d0:	e3401014 	movt	r1, #20
  1042d4:	e30508bc 	movw	r0, #22716	; 0x58bc
  1042d8:	e3400014 	movt	r0, #20
  1042dc:	ebfffcad 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  1042e0:	e3a03000 	mov	r3, #0
  1042e4:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  1042e8:	e24b3014 	sub	r3, fp, #20
  1042ec:	e1a01003 	mov	r1, r3
  1042f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1042f4:	ebffefdc 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  1042f8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042fc:	e1a00003 	mov	r0, r3
  104300:	e24bd004 	sub	sp, fp, #4
  104304:	e8bd8800 	pop	{fp, pc}

00104308 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104308:	e92d4800 	push	{fp, lr}
  10430c:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  104310:	e30d3024 	movw	r3, #53284	; 0xd024
  104314:	e3403014 	movt	r3, #20
  104318:	e5933000 	ldr	r3, [r3]
  10431c:	e3a01002 	mov	r1, #2
  104320:	e1a00003 	mov	r0, r3
  104324:	ebffef7b 	bl	100118 <rt_channel_open>
  104328:	e1a02000 	mov	r2, r0
  10432c:	e30d3020 	movw	r3, #53280	; 0xd020
  104330:	e3403014 	movt	r3, #20
  104334:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  104338:	e30d3020 	movw	r3, #53280	; 0xd020
  10433c:	e3403014 	movt	r3, #20
  104340:	e5933000 	ldr	r3, [r3]
  104344:	e3530000 	cmp	r3, #0
  104348:	aa000008 	bge	104370 <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  10434c:	e30d3024 	movw	r3, #53284	; 0xd024
  104350:	e3403014 	movt	r3, #20
  104354:	e5933000 	ldr	r3, [r3]
  104358:	e1a01003 	mov	r1, r3
  10435c:	e30508e4 	movw	r0, #22756	; 0x58e4
  104360:	e3400014 	movt	r0, #20
  104364:	eb00e88f 	bl	13e5a8 <printf>
        return RT_ERROR;
  104368:	e3a03001 	mov	r3, #1
  10436c:	ea000018 	b	1043d4 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  104370:	e30d302c 	movw	r3, #53292	; 0xd02c
  104374:	e3403014 	movt	r3, #20
  104378:	e5933000 	ldr	r3, [r3]
  10437c:	e3a01002 	mov	r1, #2
  104380:	e1a00003 	mov	r0, r3
  104384:	ebffef63 	bl	100118 <rt_channel_open>
  104388:	e1a02000 	mov	r2, r0
  10438c:	e30d3028 	movw	r3, #53288	; 0xd028
  104390:	e3403014 	movt	r3, #20
  104394:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  104398:	e30d3028 	movw	r3, #53288	; 0xd028
  10439c:	e3403014 	movt	r3, #20
  1043a0:	e5933000 	ldr	r3, [r3]
  1043a4:	e3530000 	cmp	r3, #0
  1043a8:	aa000008 	bge	1043d0 <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  1043ac:	e30d302c 	movw	r3, #53292	; 0xd02c
  1043b0:	e3403014 	movt	r3, #20
  1043b4:	e5933000 	ldr	r3, [r3]
  1043b8:	e1a01003 	mov	r1, r3
  1043bc:	e30508e4 	movw	r0, #22756	; 0x58e4
  1043c0:	e3400014 	movt	r0, #20
  1043c4:	eb00e877 	bl	13e5a8 <printf>
        return RT_ERROR;
  1043c8:	e3a03001 	mov	r3, #1
  1043cc:	ea000000 	b	1043d4 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  1043d0:	e3a03000 	mov	r3, #0
}
  1043d4:	e1a00003 	mov	r0, r3
  1043d8:	e8bd8800 	pop	{fp, pc}

001043dc <ueth_int_recv>:

void ueth_int_recv(void)
{
  1043dc:	e92d4800 	push	{fp, lr}
  1043e0:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  1043e4:	e30d3028 	movw	r3, #53288	; 0xd028
  1043e8:	e3403014 	movt	r3, #20
  1043ec:	e5933000 	ldr	r3, [r3]
  1043f0:	e1a00003 	mov	r0, r3
  1043f4:	ebffffac 	bl	1042ac <channel_cmd_recv>
}
  1043f8:	e320f000 	nop	{0}
  1043fc:	e8bd8800 	pop	{fp, pc}

00104400 <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  104400:	e92d4800 	push	{fp, lr}
  104404:	e28db004 	add	fp, sp, #4
  104408:	e24dd028 	sub	sp, sp, #40	; 0x28
  10440c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  104410:	ebfff777 	bl	1021f4 <rt_thread_self>
  104414:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104418:	e3a03000 	mov	r3, #0
  10441c:	e58d300c 	str	r3, [sp, #12]
  104420:	e3a03000 	mov	r3, #0
  104424:	e58d3008 	str	r3, [sp, #8]
  104428:	e3a03000 	mov	r3, #0
  10442c:	e58d3004 	str	r3, [sp, #4]
  104430:	e3a03000 	mov	r3, #0
  104434:	e58d3000 	str	r3, [sp]
  104438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10443c:	e51b200c 	ldr	r2, [fp, #-12]
  104440:	e3a01000 	mov	r1, #0
  104444:	e3a00005 	mov	r0, #5
  104448:	ebffff1b 	bl	1040bc <channel_compose_cmd>
  10444c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104450:	e3a03000 	mov	r3, #0
  104454:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104458:	e3a01000 	mov	r1, #0
  10445c:	e51b0010 	ldr	r0, [fp, #-16]
  104460:	ebfff6aa 	bl	101f10 <lwp_shmat>
  104464:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10446c:	e3530000 	cmp	r3, #0
  104470:	0a000009 	beq	10449c <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104474:	e30d3020 	movw	r3, #53280	; 0xd020
  104478:	e3403014 	movt	r3, #20
  10447c:	e5933000 	ldr	r3, [r3]
  104480:	e51b2010 	ldr	r2, [fp, #-16]
  104484:	e1a01002 	mov	r1, r2
  104488:	e1a00003 	mov	r0, r3
  10448c:	ebffff6b 	bl	104240 <channel_cmd_send_recv>
  104490:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104494:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104498:	ebfff6a9 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10449c:	e51b0010 	ldr	r0, [fp, #-16]
  1044a0:	ebfff68f 	bl	101ee4 <lwp_shmrm>
    return res;
  1044a4:	e51b3008 	ldr	r3, [fp, #-8]

}
  1044a8:	e1a00003 	mov	r0, r3
  1044ac:	e24bd004 	sub	sp, fp, #4
  1044b0:	e8bd8800 	pop	{fp, pc}

001044b4 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1044b4:	e92d4800 	push	{fp, lr}
  1044b8:	e28db004 	add	fp, sp, #4
  1044bc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1044c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1044c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1044c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1044cc:	ebfff748 	bl	1021f4 <rt_thread_self>
  1044d0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1044d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1044d8:	e3a03004 	mov	r3, #4
  1044dc:	e58d300c 	str	r3, [sp, #12]
  1044e0:	e3a03000 	mov	r3, #0
  1044e4:	e58d3008 	str	r3, [sp, #8]
  1044e8:	e3a03000 	mov	r3, #0
  1044ec:	e58d3004 	str	r3, [sp, #4]
  1044f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1044f4:	e58d3000 	str	r3, [sp]
  1044f8:	e1a03002 	mov	r3, r2
  1044fc:	e51b200c 	ldr	r2, [fp, #-12]
  104500:	e3a01000 	mov	r1, #0
  104504:	e3a00001 	mov	r0, #1
  104508:	ebfffeeb 	bl	1040bc <channel_compose_cmd>
  10450c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104510:	e3a03000 	mov	r3, #0
  104514:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104518:	e3a01000 	mov	r1, #0
  10451c:	e51b0010 	ldr	r0, [fp, #-16]
  104520:	ebfff67a 	bl	101f10 <lwp_shmat>
  104524:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10452c:	e3530000 	cmp	r3, #0
  104530:	0a00000d 	beq	10456c <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104538:	e283301c 	add	r3, r3, #28
  10453c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104540:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104544:	e30d3020 	movw	r3, #53280	; 0xd020
  104548:	e3403014 	movt	r3, #20
  10454c:	e5933000 	ldr	r3, [r3]
  104550:	e51b2010 	ldr	r2, [fp, #-16]
  104554:	e1a01002 	mov	r1, r2
  104558:	e1a00003 	mov	r0, r3
  10455c:	ebffff37 	bl	104240 <channel_cmd_send_recv>
  104560:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104564:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104568:	ebfff675 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10456c:	e51b0010 	ldr	r0, [fp, #-16]
  104570:	ebfff65b 	bl	101ee4 <lwp_shmrm>
    return res;
  104574:	e51b3008 	ldr	r3, [fp, #-8]
}
  104578:	e1a00003 	mov	r0, r3
  10457c:	e24bd004 	sub	sp, fp, #4
  104580:	e8bd8800 	pop	{fp, pc}

00104584 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104584:	e92d4800 	push	{fp, lr}
  104588:	e28db004 	add	fp, sp, #4
  10458c:	e24dd020 	sub	sp, sp, #32
  104590:	e50b0010 	str	r0, [fp, #-16]
  104594:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  104598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10459c:	e58d300c 	str	r3, [sp, #12]
  1045a0:	e3a03000 	mov	r3, #0
  1045a4:	e58d3008 	str	r3, [sp, #8]
  1045a8:	e3a03000 	mov	r3, #0
  1045ac:	e58d3004 	str	r3, [sp, #4]
  1045b0:	e3a03000 	mov	r3, #0
  1045b4:	e58d3000 	str	r3, [sp]
  1045b8:	e3a03000 	mov	r3, #0
  1045bc:	e3a02000 	mov	r2, #0
  1045c0:	e3a01000 	mov	r1, #0
  1045c4:	e3a00002 	mov	r0, #2
  1045c8:	ebfffebb 	bl	1040bc <channel_compose_cmd>
  1045cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1045d0:	e3a01000 	mov	r1, #0
  1045d4:	e51b0008 	ldr	r0, [fp, #-8]
  1045d8:	ebfff64c 	bl	101f10 <lwp_shmat>
  1045dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1045e0:	e51b300c 	ldr	r3, [fp, #-12]
  1045e4:	e3530000 	cmp	r3, #0
  1045e8:	0a00000e 	beq	104628 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  1045ec:	e51b300c 	ldr	r3, [fp, #-12]
  1045f0:	e283301c 	add	r3, r3, #28
  1045f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1045f8:	e51b1010 	ldr	r1, [fp, #-16]
  1045fc:	e1a00003 	mov	r0, r3
  104600:	eb00f1df 	bl	140d84 <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104604:	e30d3020 	movw	r3, #53280	; 0xd020
  104608:	e3403014 	movt	r3, #20
  10460c:	e5933000 	ldr	r3, [r3]
  104610:	e51b2008 	ldr	r2, [fp, #-8]
  104614:	e1a01002 	mov	r1, r2
  104618:	e1a00003 	mov	r0, r3
  10461c:	ebffff07 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104620:	e51b000c 	ldr	r0, [fp, #-12]
  104624:	ebfff646 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104628:	e51b0008 	ldr	r0, [fp, #-8]
  10462c:	ebfff62c 	bl	101ee4 <lwp_shmrm>
}
  104630:	e320f000 	nop	{0}
  104634:	e24bd004 	sub	sp, fp, #4
  104638:	e8bd8800 	pop	{fp, pc}

0010463c <ueth_init_clock>:

void ueth_init_clock() 
{
  10463c:	e92d4800 	push	{fp, lr}
  104640:	e28db004 	add	fp, sp, #4
  104644:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104648:	e3a03000 	mov	r3, #0
  10464c:	e58d300c 	str	r3, [sp, #12]
  104650:	e3a03000 	mov	r3, #0
  104654:	e58d3008 	str	r3, [sp, #8]
  104658:	e3a03000 	mov	r3, #0
  10465c:	e58d3004 	str	r3, [sp, #4]
  104660:	e3a03000 	mov	r3, #0
  104664:	e58d3000 	str	r3, [sp]
  104668:	e3a03000 	mov	r3, #0
  10466c:	e3a02000 	mov	r2, #0
  104670:	e3a01000 	mov	r1, #0
  104674:	e3a00003 	mov	r0, #3
  104678:	ebfffe8f 	bl	1040bc <channel_compose_cmd>
  10467c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104680:	e3a01000 	mov	r1, #0
  104684:	e51b0008 	ldr	r0, [fp, #-8]
  104688:	ebfff620 	bl	101f10 <lwp_shmat>
  10468c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104690:	e51b300c 	ldr	r3, [fp, #-12]
  104694:	e3530000 	cmp	r3, #0
  104698:	0a000008 	beq	1046c0 <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10469c:	e30d3020 	movw	r3, #53280	; 0xd020
  1046a0:	e3403014 	movt	r3, #20
  1046a4:	e5933000 	ldr	r3, [r3]
  1046a8:	e51b2008 	ldr	r2, [fp, #-8]
  1046ac:	e1a01002 	mov	r1, r2
  1046b0:	e1a00003 	mov	r0, r3
  1046b4:	ebfffee1 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046b8:	e51b000c 	ldr	r0, [fp, #-12]
  1046bc:	ebfff620 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046c0:	e51b0008 	ldr	r0, [fp, #-8]
  1046c4:	ebfff606 	bl	101ee4 <lwp_shmrm>
}
  1046c8:	e320f000 	nop	{0}
  1046cc:	e24bd004 	sub	sp, fp, #4
  1046d0:	e8bd8800 	pop	{fp, pc}

001046d4 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  1046d4:	e92d4800 	push	{fp, lr}
  1046d8:	e28db004 	add	fp, sp, #4
  1046dc:	e24dd020 	sub	sp, sp, #32
  1046e0:	e50b0010 	str	r0, [fp, #-16]
  1046e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  1046e8:	e3a03004 	mov	r3, #4
  1046ec:	e58d300c 	str	r3, [sp, #12]
  1046f0:	e3a03000 	mov	r3, #0
  1046f4:	e58d3008 	str	r3, [sp, #8]
  1046f8:	e3a03000 	mov	r3, #0
  1046fc:	e58d3004 	str	r3, [sp, #4]
  104700:	e3a03000 	mov	r3, #0
  104704:	e58d3000 	str	r3, [sp]
  104708:	e51b3010 	ldr	r3, [fp, #-16]
  10470c:	e3a02001 	mov	r2, #1
  104710:	e3a01000 	mov	r1, #0
  104714:	e3a00004 	mov	r0, #4
  104718:	ebfffe67 	bl	1040bc <channel_compose_cmd>
  10471c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104720:	e3a01000 	mov	r1, #0
  104724:	e51b0008 	ldr	r0, [fp, #-8]
  104728:	ebfff5f8 	bl	101f10 <lwp_shmat>
  10472c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104730:	e51b300c 	ldr	r3, [fp, #-12]
  104734:	e3530000 	cmp	r3, #0
  104738:	0a00000c 	beq	104770 <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  10473c:	e51b300c 	ldr	r3, [fp, #-12]
  104740:	e283301c 	add	r3, r3, #28
  104744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104748:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10474c:	e30d3020 	movw	r3, #53280	; 0xd020
  104750:	e3403014 	movt	r3, #20
  104754:	e5933000 	ldr	r3, [r3]
  104758:	e51b2008 	ldr	r2, [fp, #-8]
  10475c:	e1a01002 	mov	r1, r2
  104760:	e1a00003 	mov	r0, r3
  104764:	ebfffeb5 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104768:	e51b000c 	ldr	r0, [fp, #-12]
  10476c:	ebfff5f4 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104770:	e51b0008 	ldr	r0, [fp, #-8]
  104774:	ebfff5da 	bl	101ee4 <lwp_shmrm>
    return;
  104778:	e320f000 	nop	{0}
}
  10477c:	e24bd004 	sub	sp, fp, #4
  104780:	e8bd8800 	pop	{fp, pc}

00104784 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  104784:	e92d4800 	push	{fp, lr}
  104788:	e28db004 	add	fp, sp, #4
  10478c:	e24dd020 	sub	sp, sp, #32
  104790:	e50b0010 	str	r0, [fp, #-16]
  104794:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  104798:	e3a03004 	mov	r3, #4
  10479c:	e58d300c 	str	r3, [sp, #12]
  1047a0:	e3a03000 	mov	r3, #0
  1047a4:	e58d3008 	str	r3, [sp, #8]
  1047a8:	e3a03000 	mov	r3, #0
  1047ac:	e58d3004 	str	r3, [sp, #4]
  1047b0:	e3a03000 	mov	r3, #0
  1047b4:	e58d3000 	str	r3, [sp]
  1047b8:	e51b3010 	ldr	r3, [fp, #-16]
  1047bc:	e3a02002 	mov	r2, #2
  1047c0:	e3a01000 	mov	r1, #0
  1047c4:	e3a00004 	mov	r0, #4
  1047c8:	ebfffe3b 	bl	1040bc <channel_compose_cmd>
  1047cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047d0:	e3a01000 	mov	r1, #0
  1047d4:	e51b0008 	ldr	r0, [fp, #-8]
  1047d8:	ebfff5cc 	bl	101f10 <lwp_shmat>
  1047dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047e0:	e51b300c 	ldr	r3, [fp, #-12]
  1047e4:	e3530000 	cmp	r3, #0
  1047e8:	0a00000c 	beq	104820 <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1047ec:	e51b300c 	ldr	r3, [fp, #-12]
  1047f0:	e283301c 	add	r3, r3, #28
  1047f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1047f8:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1047fc:	e30d3020 	movw	r3, #53280	; 0xd020
  104800:	e3403014 	movt	r3, #20
  104804:	e5933000 	ldr	r3, [r3]
  104808:	e51b2008 	ldr	r2, [fp, #-8]
  10480c:	e1a01002 	mov	r1, r2
  104810:	e1a00003 	mov	r0, r3
  104814:	ebfffe89 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104818:	e51b000c 	ldr	r0, [fp, #-12]
  10481c:	ebfff5c8 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104820:	e51b0008 	ldr	r0, [fp, #-8]
  104824:	ebfff5ae 	bl	101ee4 <lwp_shmrm>
    return;
  104828:	e320f000 	nop	{0}
}
  10482c:	e24bd004 	sub	sp, fp, #4
  104830:	e8bd8800 	pop	{fp, pc}

00104834 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  104834:	e92d4800 	push	{fp, lr}
  104838:	e28db004 	add	fp, sp, #4
  10483c:	e24dd020 	sub	sp, sp, #32
  104840:	e50b0010 	str	r0, [fp, #-16]
  104844:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  104848:	e51b2010 	ldr	r2, [fp, #-16]
  10484c:	e3a03000 	mov	r3, #0
  104850:	e58d300c 	str	r3, [sp, #12]
  104854:	e3a03000 	mov	r3, #0
  104858:	e58d3008 	str	r3, [sp, #8]
  10485c:	e3a03000 	mov	r3, #0
  104860:	e58d3004 	str	r3, [sp, #4]
  104864:	e3a03000 	mov	r3, #0
  104868:	e58d3000 	str	r3, [sp]
  10486c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104870:	e3a01000 	mov	r1, #0
  104874:	e3a00006 	mov	r0, #6
  104878:	ebfffe0f 	bl	1040bc <channel_compose_cmd>
  10487c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104880:	e3a01000 	mov	r1, #0
  104884:	e51b0008 	ldr	r0, [fp, #-8]
  104888:	ebfff5a0 	bl	101f10 <lwp_shmat>
  10488c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104890:	e51b300c 	ldr	r3, [fp, #-12]
  104894:	e3530000 	cmp	r3, #0
  104898:	0a000008 	beq	1048c0 <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10489c:	e30d3020 	movw	r3, #53280	; 0xd020
  1048a0:	e3403014 	movt	r3, #20
  1048a4:	e5933000 	ldr	r3, [r3]
  1048a8:	e51b2008 	ldr	r2, [fp, #-8]
  1048ac:	e1a01002 	mov	r1, r2
  1048b0:	e1a00003 	mov	r0, r3
  1048b4:	ebfffe61 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048b8:	e51b000c 	ldr	r0, [fp, #-12]
  1048bc:	ebfff5a0 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  1048c0:	e51b0008 	ldr	r0, [fp, #-8]
  1048c4:	ebfff586 	bl	101ee4 <lwp_shmrm>
  1048c8:	e320f000 	nop	{0}
  1048cc:	e24bd004 	sub	sp, fp, #4
  1048d0:	e8bd8800 	pop	{fp, pc}

001048d4 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  1048d4:	e92d4800 	push	{fp, lr}
  1048d8:	e28db004 	add	fp, sp, #4
  1048dc:	e24dd010 	sub	sp, sp, #16
  1048e0:	e50b0008 	str	r0, [fp, #-8]
  1048e4:	e50b100c 	str	r1, [fp, #-12]
  1048e8:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  1048ec:	e51b300c 	ldr	r3, [fp, #-12]
  1048f0:	e2433003 	sub	r3, r3, #3
  1048f4:	e3530001 	cmp	r3, #1
  1048f8:	8a000006 	bhi	104918 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  1048fc:	e51b3010 	ldr	r3, [fp, #-16]
  104900:	e1a02003 	mov	r2, r3
  104904:	e51b100c 	ldr	r1, [fp, #-12]
  104908:	e51b0008 	ldr	r0, [fp, #-8]
  10490c:	eb00123d 	bl	109208 <unet_fcntl>
  104910:	e1a03000 	mov	r3, r0
  104914:	ea000004 	b	10492c <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  104918:	e51b2010 	ldr	r2, [fp, #-16]
  10491c:	e51b100c 	ldr	r1, [fp, #-12]
  104920:	e51b0008 	ldr	r0, [fp, #-8]
  104924:	eb001245 	bl	109240 <unet_ioctl>
  104928:	e1a03000 	mov	r3, r0
    }
}
  10492c:	e1a00003 	mov	r0, r3
  104930:	e24bd004 	sub	sp, fp, #4
  104934:	e8bd8800 	pop	{fp, pc}

00104938 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  104938:	e92d4800 	push	{fp, lr}
  10493c:	e28db004 	add	fp, sp, #4
  104940:	e24dd008 	sub	sp, sp, #8
  104944:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  104948:	e51b3008 	ldr	r3, [fp, #-8]
  10494c:	e3530000 	cmp	r3, #0
  104950:	1a000005 	bne	10496c <sal_unet_netdev_set_pf_info+0x34>
  104954:	e3a02086 	mov	r2, #134	; 0x86
  104958:	e3051984 	movw	r1, #22916	; 0x5984
  10495c:	e3401014 	movt	r1, #20
  104960:	e305097c 	movw	r0, #22908	; 0x597c
  104964:	e3400014 	movt	r0, #20
  104968:	ebfffb0a 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  10496c:	e51b2008 	ldr	r2, [fp, #-8]
  104970:	e305396c 	movw	r3, #22892	; 0x596c
  104974:	e3403014 	movt	r3, #20
  104978:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  10497c:	e3a03000 	mov	r3, #0
}
  104980:	e1a00003 	mov	r0, r3
  104984:	e24bd004 	sub	sp, fp, #4
  104988:	e8bd8800 	pop	{fp, pc}

0010498c <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  10498c:	e92d4800 	push	{fp, lr}
  104990:	e28db004 	add	fp, sp, #4
  104994:	e24dd010 	sub	sp, sp, #16
  104998:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  10499c:	e3a03000 	mov	r3, #0
  1049a0:	e50b3008 	str	r3, [fp, #-8]
  1049a4:	ea00001f 	b	104a28 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  1049a8:	e30d344c 	movw	r3, #54348	; 0xd44c
  1049ac:	e3403014 	movt	r3, #20
  1049b0:	e51b2008 	ldr	r2, [fp, #-8]
  1049b4:	e0833002 	add	r3, r3, r2
  1049b8:	e5d33000 	ldrb	r3, [r3]
  1049bc:	e3530000 	cmp	r3, #0
  1049c0:	0a000015 	beq	104a1c <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  1049c4:	e51b3008 	ldr	r3, [fp, #-8]
  1049c8:	e3a0200c 	mov	r2, #12
  1049cc:	e0020392 	mul	r2, r2, r3
  1049d0:	e30d3428 	movw	r3, #54312	; 0xd428
  1049d4:	e3403014 	movt	r3, #20
  1049d8:	e0823003 	add	r3, r2, r3
  1049dc:	e2833004 	add	r3, r3, #4
  1049e0:	e3a02008 	mov	r2, #8
  1049e4:	e51b1010 	ldr	r1, [fp, #-16]
  1049e8:	e1a00003 	mov	r0, r3
  1049ec:	eb00f2d9 	bl	141558 <strncmp>
  1049f0:	e1a03000 	mov	r3, r0
  1049f4:	e3530000 	cmp	r3, #0
  1049f8:	1a000007 	bne	104a1c <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  1049fc:	e30d3428 	movw	r3, #54312	; 0xd428
  104a00:	e3403014 	movt	r3, #20
  104a04:	e51b2008 	ldr	r2, [fp, #-8]
  104a08:	e3a0100c 	mov	r1, #12
  104a0c:	e0020291 	mul	r2, r1, r2
  104a10:	e0833002 	add	r3, r3, r2
  104a14:	e5933000 	ldr	r3, [r3]
  104a18:	ea000006 	b	104a38 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a1c:	e51b3008 	ldr	r3, [fp, #-8]
  104a20:	e2833001 	add	r3, r3, #1
  104a24:	e50b3008 	str	r3, [fp, #-8]
  104a28:	e51b3008 	ldr	r3, [fp, #-8]
  104a2c:	e3530002 	cmp	r3, #2
  104a30:	daffffdc 	ble	1049a8 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104a34:	e3a03000 	mov	r3, #0
}
  104a38:	e1a00003 	mov	r0, r3
  104a3c:	e24bd004 	sub	sp, fp, #4
  104a40:	e8bd8800 	pop	{fp, pc}

00104a44 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104a44:	e92d4800 	push	{fp, lr}
  104a48:	e28db004 	add	fp, sp, #4
  104a4c:	e24dd018 	sub	sp, sp, #24
  104a50:	e50b0010 	str	r0, [fp, #-16]
  104a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104a58:	e1a03002 	mov	r3, r2
  104a5c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104a60:	e51b3010 	ldr	r3, [fp, #-16]
  104a64:	e3530000 	cmp	r3, #0
  104a68:	1a000001 	bne	104a74 <ueth_device_register+0x30>
        return -RT_ERROR;
  104a6c:	e3e03000 	mvn	r3, #0
  104a70:	ea000042 	b	104b80 <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104a74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104a78:	ebffffc3 	bl	10498c <ueth_device_find>
  104a7c:	e1a03000 	mov	r3, r0
  104a80:	e3530000 	cmp	r3, #0
  104a84:	0a000001 	beq	104a90 <ueth_device_register+0x4c>
        return -RT_ERROR;
  104a88:	e3e03000 	mvn	r3, #0
  104a8c:	ea00003b 	b	104b80 <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104a90:	e3a03000 	mov	r3, #0
  104a94:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104a98:	ea000009 	b	104ac4 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104a9c:	e30d344c 	movw	r3, #54348	; 0xd44c
  104aa0:	e3403014 	movt	r3, #20
  104aa4:	e51b2008 	ldr	r2, [fp, #-8]
  104aa8:	e0833002 	add	r3, r3, r2
  104aac:	e5d33000 	ldrb	r3, [r3]
  104ab0:	e3530000 	cmp	r3, #0
  104ab4:	0a000006 	beq	104ad4 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104ab8:	e51b3008 	ldr	r3, [fp, #-8]
  104abc:	e2833001 	add	r3, r3, #1
  104ac0:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ac4:	e51b3008 	ldr	r3, [fp, #-8]
  104ac8:	e3530002 	cmp	r3, #2
  104acc:	dafffff2 	ble	104a9c <ueth_device_register+0x58>
  104ad0:	ea000000 	b	104ad8 <ueth_device_register+0x94>
            break;
  104ad4:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104ad8:	e51b3008 	ldr	r3, [fp, #-8]
  104adc:	e3530003 	cmp	r3, #3
  104ae0:	1a000001 	bne	104aec <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104ae4:	e3e03000 	mvn	r3, #0
  104ae8:	ea000024 	b	104b80 <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104aec:	e51b3008 	ldr	r3, [fp, #-8]
  104af0:	e3a0200c 	mov	r2, #12
  104af4:	e0020392 	mul	r2, r2, r3
  104af8:	e30d3428 	movw	r3, #54312	; 0xd428
  104afc:	e3403014 	movt	r3, #20
  104b00:	e0823003 	add	r3, r2, r3
  104b04:	e2833004 	add	r3, r3, #4
  104b08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b0c:	e1a00003 	mov	r0, r3
  104b10:	eb00f253 	bl	141464 <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104b14:	e30d3428 	movw	r3, #54312	; 0xd428
  104b18:	e3403014 	movt	r3, #20
  104b1c:	e51b2008 	ldr	r2, [fp, #-8]
  104b20:	e3a0100c 	mov	r1, #12
  104b24:	e0020291 	mul	r2, r1, r2
  104b28:	e0833002 	add	r3, r3, r2
  104b2c:	e51b2010 	ldr	r2, [fp, #-16]
  104b30:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104b34:	e30d344c 	movw	r3, #54348	; 0xd44c
  104b38:	e3403014 	movt	r3, #20
  104b3c:	e51b2008 	ldr	r2, [fp, #-8]
  104b40:	e0833002 	add	r3, r3, r2
  104b44:	e3a02001 	mov	r2, #1
  104b48:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104b4c:	e51b3010 	ldr	r3, [fp, #-16]
  104b50:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104b54:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104b58:	e51b3010 	ldr	r3, [fp, #-16]
  104b5c:	e3a02000 	mov	r2, #0
  104b60:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104b64:	e51b3010 	ldr	r3, [fp, #-16]
  104b68:	e3a02000 	mov	r2, #0
  104b6c:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104b70:	e51b3010 	ldr	r3, [fp, #-16]
  104b74:	e3a02009 	mov	r2, #9
  104b78:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104b7c:	e3a03000 	mov	r3, #0
}
  104b80:	e1a00003 	mov	r0, r3
  104b84:	e24bd004 	sub	sp, fp, #4
  104b88:	e8bd8800 	pop	{fp, pc}

00104b8c <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104b8c:	e92d4800 	push	{fp, lr}
  104b90:	e28db004 	add	fp, sp, #4
  104b94:	e24dd010 	sub	sp, sp, #16
  104b98:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104b9c:	e51b3010 	ldr	r3, [fp, #-16]
  104ba0:	e3530000 	cmp	r3, #0
  104ba4:	1a000005 	bne	104bc0 <ueth_device_unregister+0x34>
  104ba8:	e3a02048 	mov	r2, #72	; 0x48
  104bac:	e3051a14 	movw	r1, #23060	; 0x5a14
  104bb0:	e3401014 	movt	r1, #20
  104bb4:	e30509a0 	movw	r0, #22944	; 0x59a0
  104bb8:	e3400014 	movt	r0, #20
  104bbc:	ebfffa75 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104bc0:	e51b3010 	ldr	r3, [fp, #-16]
  104bc4:	e5d33008 	ldrb	r3, [r3, #8]
  104bc8:	e3530009 	cmp	r3, #9
  104bcc:	0a000005 	beq	104be8 <ueth_device_unregister+0x5c>
  104bd0:	e3a02049 	mov	r2, #73	; 0x49
  104bd4:	e3051a14 	movw	r1, #23060	; 0x5a14
  104bd8:	e3401014 	movt	r1, #20
  104bdc:	e30509b0 	movw	r0, #22960	; 0x59b0
  104be0:	e3400014 	movt	r0, #20
  104be4:	ebfffa6b 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104be8:	e3a03000 	mov	r3, #0
  104bec:	e50b3008 	str	r3, [fp, #-8]
  104bf0:	ea000019 	b	104c5c <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104bf4:	e30d344c 	movw	r3, #54348	; 0xd44c
  104bf8:	e3403014 	movt	r3, #20
  104bfc:	e51b2008 	ldr	r2, [fp, #-8]
  104c00:	e0833002 	add	r3, r3, r2
  104c04:	e5d33000 	ldrb	r3, [r3]
  104c08:	e3530000 	cmp	r3, #0
  104c0c:	0a00000f 	beq	104c50 <ueth_device_unregister+0xc4>
  104c10:	e30d3428 	movw	r3, #54312	; 0xd428
  104c14:	e3403014 	movt	r3, #20
  104c18:	e51b2008 	ldr	r2, [fp, #-8]
  104c1c:	e3a0100c 	mov	r1, #12
  104c20:	e0020291 	mul	r2, r1, r2
  104c24:	e0833002 	add	r3, r3, r2
  104c28:	e5933000 	ldr	r3, [r3]
  104c2c:	e51b2010 	ldr	r2, [fp, #-16]
  104c30:	e1520003 	cmp	r2, r3
  104c34:	1a000005 	bne	104c50 <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104c38:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c3c:	e3403014 	movt	r3, #20
  104c40:	e51b2008 	ldr	r2, [fp, #-8]
  104c44:	e0833002 	add	r3, r3, r2
  104c48:	e3a02000 	mov	r2, #0
  104c4c:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c50:	e51b3008 	ldr	r3, [fp, #-8]
  104c54:	e2833001 	add	r3, r3, #1
  104c58:	e50b3008 	str	r3, [fp, #-8]
  104c5c:	e51b3008 	ldr	r3, [fp, #-8]
  104c60:	e3530002 	cmp	r3, #2
  104c64:	daffffe2 	ble	104bf4 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104c68:	e3a03000 	mov	r3, #0
}
  104c6c:	e1a00003 	mov	r0, r3
  104c70:	e24bd004 	sub	sp, fp, #4
  104c74:	e8bd8800 	pop	{fp, pc}

00104c78 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104c78:	e92d4800 	push	{fp, lr}
  104c7c:	e28db004 	add	fp, sp, #4
  104c80:	e24dd010 	sub	sp, sp, #16
  104c84:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104c88:	e3a03000 	mov	r3, #0
  104c8c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104c90:	e51b3010 	ldr	r3, [fp, #-16]
  104c94:	e3530000 	cmp	r3, #0
  104c98:	1a000005 	bne	104cb4 <ueth_device_init+0x3c>
  104c9c:	e3a0205a 	mov	r2, #90	; 0x5a
  104ca0:	e3051a2c 	movw	r1, #23084	; 0x5a2c
  104ca4:	e3401014 	movt	r1, #20
  104ca8:	e30509a0 	movw	r0, #22944	; 0x59a0
  104cac:	e3400014 	movt	r0, #20
  104cb0:	ebfffa38 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104cb4:	e51b3010 	ldr	r3, [fp, #-16]
  104cb8:	e5d33008 	ldrb	r3, [r3, #8]
  104cbc:	e3530009 	cmp	r3, #9
  104cc0:	0a000005 	beq	104cdc <ueth_device_init+0x64>
  104cc4:	e3a0205b 	mov	r2, #91	; 0x5b
  104cc8:	e3051a2c 	movw	r1, #23084	; 0x5a2c
  104ccc:	e3401014 	movt	r1, #20
  104cd0:	e30509b0 	movw	r0, #22960	; 0x59b0
  104cd4:	e3400014 	movt	r0, #20
  104cd8:	ebfffa2e 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104cdc:	e51b3010 	ldr	r3, [fp, #-16]
  104ce0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ce4:	e5933000 	ldr	r3, [r3]
  104ce8:	e3530000 	cmp	r3, #0
  104cec:	0a00001a 	beq	104d5c <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104cf0:	e51b3010 	ldr	r3, [fp, #-16]
  104cf4:	e1d331bc 	ldrh	r3, [r3, #28]
  104cf8:	e2033010 	and	r3, r3, #16
  104cfc:	e3530000 	cmp	r3, #0
  104d00:	1a000015 	bne	104d5c <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d04:	e51b3010 	ldr	r3, [fp, #-16]
  104d08:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d0c:	e5933000 	ldr	r3, [r3]
  104d10:	e51b0010 	ldr	r0, [fp, #-16]
  104d14:	e12fff33 	blx	r3
  104d18:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104d1c:	e51b3008 	ldr	r3, [fp, #-8]
  104d20:	e3530000 	cmp	r3, #0
  104d24:	0a000006 	beq	104d44 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104d28:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104d2c:	e51b2008 	ldr	r2, [fp, #-8]
  104d30:	e1a01003 	mov	r1, r3
  104d34:	e30509dc 	movw	r0, #23004	; 0x59dc
  104d38:	e3400014 	movt	r0, #20
  104d3c:	eb00e619 	bl	13e5a8 <printf>
  104d40:	ea000005 	b	104d5c <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104d44:	e51b3010 	ldr	r3, [fp, #-16]
  104d48:	e1d331bc 	ldrh	r3, [r3, #28]
  104d4c:	e3833010 	orr	r3, r3, #16
  104d50:	e6ff2073 	uxth	r2, r3
  104d54:	e51b3010 	ldr	r3, [fp, #-16]
  104d58:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104d5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  104d60:	e1a00003 	mov	r0, r3
  104d64:	e24bd004 	sub	sp, fp, #4
  104d68:	e8bd8800 	pop	{fp, pc}

00104d6c <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104d6c:	e92d4800 	push	{fp, lr}
  104d70:	e28db004 	add	fp, sp, #4
  104d74:	e24dd010 	sub	sp, sp, #16
  104d78:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d7c:	e3a03000 	mov	r3, #0
  104d80:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104d84:	e51b3010 	ldr	r3, [fp, #-16]
  104d88:	e3530000 	cmp	r3, #0
  104d8c:	1a000005 	bne	104da8 <ueth_device_close+0x3c>
  104d90:	e3a02076 	mov	r2, #118	; 0x76
  104d94:	e3051a40 	movw	r1, #23104	; 0x5a40
  104d98:	e3401014 	movt	r1, #20
  104d9c:	e30509a0 	movw	r0, #22944	; 0x59a0
  104da0:	e3400014 	movt	r0, #20
  104da4:	ebfff9fb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104da8:	e51b3010 	ldr	r3, [fp, #-16]
  104dac:	e5d33008 	ldrb	r3, [r3, #8]
  104db0:	e3530009 	cmp	r3, #9
  104db4:	0a000005 	beq	104dd0 <ueth_device_close+0x64>
  104db8:	e3a02077 	mov	r2, #119	; 0x77
  104dbc:	e3051a40 	movw	r1, #23104	; 0x5a40
  104dc0:	e3401014 	movt	r1, #20
  104dc4:	e30509b0 	movw	r0, #22960	; 0x59b0
  104dc8:	e3400014 	movt	r0, #20
  104dcc:	ebfff9f1 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e5d33020 	ldrb	r3, [r3, #32]
  104dd8:	e3530000 	cmp	r3, #0
  104ddc:	1a000001 	bne	104de8 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104de0:	e3e03000 	mvn	r3, #0
  104de4:	ea000020 	b	104e6c <ueth_device_close+0x100>

    dev->ref_count--;
  104de8:	e51b3010 	ldr	r3, [fp, #-16]
  104dec:	e5d33020 	ldrb	r3, [r3, #32]
  104df0:	e2433001 	sub	r3, r3, #1
  104df4:	e6ef2073 	uxtb	r2, r3
  104df8:	e51b3010 	ldr	r3, [fp, #-16]
  104dfc:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e00:	e51b3010 	ldr	r3, [fp, #-16]
  104e04:	e5d33020 	ldrb	r3, [r3, #32]
  104e08:	e3530000 	cmp	r3, #0
  104e0c:	0a000001 	beq	104e18 <ueth_device_close+0xac>
        return RT_EOK;
  104e10:	e3a03000 	mov	r3, #0
  104e14:	ea000014 	b	104e6c <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104e18:	e51b3010 	ldr	r3, [fp, #-16]
  104e1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e20:	e5933008 	ldr	r3, [r3, #8]
  104e24:	e3530000 	cmp	r3, #0
  104e28:	0a000005 	beq	104e44 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104e2c:	e51b3010 	ldr	r3, [fp, #-16]
  104e30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e34:	e5933008 	ldr	r3, [r3, #8]
  104e38:	e51b0010 	ldr	r0, [fp, #-16]
  104e3c:	e12fff33 	blx	r3
  104e40:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104e44:	e51b3008 	ldr	r3, [fp, #-8]
  104e48:	e3530000 	cmp	r3, #0
  104e4c:	0a000002 	beq	104e5c <ueth_device_close+0xf0>
  104e50:	e51b3008 	ldr	r3, [fp, #-8]
  104e54:	e3730006 	cmn	r3, #6
  104e58:	1a000002 	bne	104e68 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104e5c:	e51b3010 	ldr	r3, [fp, #-16]
  104e60:	e3a02000 	mov	r2, #0
  104e64:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104e68:	e51b3008 	ldr	r3, [fp, #-8]
}
  104e6c:	e1a00003 	mov	r0, r3
  104e70:	e24bd004 	sub	sp, fp, #4
  104e74:	e8bd8800 	pop	{fp, pc}

00104e78 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104e78:	e92d4800 	push	{fp, lr}
  104e7c:	e28db004 	add	fp, sp, #4
  104e80:	e24dd010 	sub	sp, sp, #16
  104e84:	e50b0008 	str	r0, [fp, #-8]
  104e88:	e50b100c 	str	r1, [fp, #-12]
  104e8c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104e90:	e51b3008 	ldr	r3, [fp, #-8]
  104e94:	e3530000 	cmp	r3, #0
  104e98:	1a000005 	bne	104eb4 <ueth_device_control+0x3c>
  104e9c:	e3a02090 	mov	r2, #144	; 0x90
  104ea0:	e3051a54 	movw	r1, #23124	; 0x5a54
  104ea4:	e3401014 	movt	r1, #20
  104ea8:	e30509a0 	movw	r0, #22944	; 0x59a0
  104eac:	e3400014 	movt	r0, #20
  104eb0:	ebfff9b8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104eb4:	e51b3008 	ldr	r3, [fp, #-8]
  104eb8:	e5d33008 	ldrb	r3, [r3, #8]
  104ebc:	e3530009 	cmp	r3, #9
  104ec0:	0a000005 	beq	104edc <ueth_device_control+0x64>
  104ec4:	e3a02091 	mov	r2, #145	; 0x91
  104ec8:	e3051a54 	movw	r1, #23124	; 0x5a54
  104ecc:	e3401014 	movt	r1, #20
  104ed0:	e30509b0 	movw	r0, #22960	; 0x59b0
  104ed4:	e3400014 	movt	r0, #20
  104ed8:	ebfff9ae 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ee4:	e5933014 	ldr	r3, [r3, #20]
  104ee8:	e3530000 	cmp	r3, #0
  104eec:	0a000008 	beq	104f14 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104ef0:	e51b3008 	ldr	r3, [fp, #-8]
  104ef4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ef8:	e5933014 	ldr	r3, [r3, #20]
  104efc:	e51b2010 	ldr	r2, [fp, #-16]
  104f00:	e51b100c 	ldr	r1, [fp, #-12]
  104f04:	e51b0008 	ldr	r0, [fp, #-8]
  104f08:	e12fff33 	blx	r3
  104f0c:	e1a03000 	mov	r3, r0
  104f10:	ea000000 	b	104f18 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104f14:	e3e03005 	mvn	r3, #5
  104f18:	e1a00003 	mov	r0, r3
  104f1c:	e24bd004 	sub	sp, fp, #4
  104f20:	e8bd8800 	pop	{fp, pc}

00104f24 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104f24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f28:	e28db000 	add	fp, sp, #0
  104f2c:	e24dd00c 	sub	sp, sp, #12
  104f30:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104f34:	e51b3008 	ldr	r3, [fp, #-8]
  104f38:	e3a02000 	mov	r2, #0
  104f3c:	e5832000 	str	r2, [r3]
}
  104f40:	e320f000 	nop	{0}
  104f44:	e28bd000 	add	sp, fp, #0
  104f48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104f4c:	e12fff1e 	bx	lr

00104f50 <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f54:	e28db000 	add	fp, sp, #0
  104f58:	e24dd014 	sub	sp, sp, #20
  104f5c:	e50b0010 	str	r0, [fp, #-16]
  104f60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104f64:	e51b3010 	ldr	r3, [fp, #-16]
  104f68:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104f6c:	ea000002 	b	104f7c <rt_slist_append+0x2c>
  104f70:	e51b3008 	ldr	r3, [fp, #-8]
  104f74:	e5933000 	ldr	r3, [r3]
  104f78:	e50b3008 	str	r3, [fp, #-8]
  104f7c:	e51b3008 	ldr	r3, [fp, #-8]
  104f80:	e5933000 	ldr	r3, [r3]
  104f84:	e3530000 	cmp	r3, #0
  104f88:	1afffff8 	bne	104f70 <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104f8c:	e51b3008 	ldr	r3, [fp, #-8]
  104f90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104f94:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104f9c:	e3a02000 	mov	r2, #0
  104fa0:	e5832000 	str	r2, [r3]
}
  104fa4:	e320f000 	nop	{0}
  104fa8:	e28bd000 	add	sp, fp, #0
  104fac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fb0:	e12fff1e 	bx	lr

00104fb4 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104fb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fb8:	e28db000 	add	fp, sp, #0
  104fbc:	e24dd014 	sub	sp, sp, #20
  104fc0:	e50b0010 	str	r0, [fp, #-16]
  104fc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104fc8:	e51b3010 	ldr	r3, [fp, #-16]
  104fcc:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104fd0:	ea000002 	b	104fe0 <rt_slist_remove+0x2c>
  104fd4:	e51b3008 	ldr	r3, [fp, #-8]
  104fd8:	e5933000 	ldr	r3, [r3]
  104fdc:	e50b3008 	str	r3, [fp, #-8]
  104fe0:	e51b3008 	ldr	r3, [fp, #-8]
  104fe4:	e5933000 	ldr	r3, [r3]
  104fe8:	e3530000 	cmp	r3, #0
  104fec:	0a000004 	beq	105004 <rt_slist_remove+0x50>
  104ff0:	e51b3008 	ldr	r3, [fp, #-8]
  104ff4:	e5933000 	ldr	r3, [r3]
  104ff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104ffc:	e1520003 	cmp	r2, r3
  105000:	1afffff3 	bne	104fd4 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105004:	e51b3008 	ldr	r3, [fp, #-8]
  105008:	e5933000 	ldr	r3, [r3]
  10500c:	e3530000 	cmp	r3, #0
  105010:	0a000004 	beq	105028 <rt_slist_remove+0x74>
  105014:	e51b3008 	ldr	r3, [fp, #-8]
  105018:	e5933000 	ldr	r3, [r3]
  10501c:	e5932000 	ldr	r2, [r3]
  105020:	e51b3008 	ldr	r3, [fp, #-8]
  105024:	e5832000 	str	r2, [r3]

    return l;
  105028:	e51b3010 	ldr	r3, [fp, #-16]
}
  10502c:	e1a00003 	mov	r0, r3
  105030:	e28bd000 	add	sp, fp, #0
  105034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105038:	e12fff1e 	bx	lr

0010503c <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  10503c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105040:	e28db000 	add	fp, sp, #0
  105044:	e24dd00c 	sub	sp, sp, #12
  105048:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  10504c:	e51b3008 	ldr	r3, [fp, #-8]
  105050:	e5933000 	ldr	r3, [r3]
}
  105054:	e1a00003 	mov	r0, r3
  105058:	e28bd000 	add	sp, fp, #0
  10505c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105060:	e12fff1e 	bx	lr

00105064 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  105064:	e92d4810 	push	{r4, fp, lr}
  105068:	e28db008 	add	fp, sp, #8
  10506c:	e24dd01c 	sub	sp, sp, #28
  105070:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105074:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105078:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  10507c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105080:	e3530000 	cmp	r3, #0
  105084:	1a000005 	bne	1050a0 <netdev_register+0x3c>
  105088:	e3a02032 	mov	r2, #50	; 0x32
  10508c:	e3051dc8 	movw	r1, #24008	; 0x5dc8
  105090:	e3401014 	movt	r1, #20
  105094:	e3050a68 	movw	r0, #23144	; 0x5a68
  105098:	e3400014 	movt	r0, #20
  10509c:	ebfff93d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  1050a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1050a4:	e3530000 	cmp	r3, #0
  1050a8:	1a000005 	bne	1050c4 <netdev_register+0x60>
  1050ac:	e3a02033 	mov	r2, #51	; 0x33
  1050b0:	e3051dc8 	movw	r1, #24008	; 0x5dc8
  1050b4:	e3401014 	movt	r1, #20
  1050b8:	e3050a70 	movw	r0, #23152	; 0x5a70
  1050bc:	e3400014 	movt	r0, #20
  1050c0:	ebfff934 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  1050c4:	e3003185 	movw	r3, #389	; 0x185
  1050c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  1050cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050d0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1050d4:	e6bf2073 	sxth	r2, r3
  1050d8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  1050dc:	e1e03003 	mvn	r3, r3
  1050e0:	e6bf3073 	sxth	r3, r3
  1050e4:	e0033002 	and	r3, r3, r2
  1050e8:	e6bf3073 	sxth	r3, r3
  1050ec:	e6ff2073 	uxth	r2, r3
  1050f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050f4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  1050f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050fc:	e3a02000 	mov	r2, #0
  105100:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105108:	e3a02000 	mov	r2, #0
  10510c:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  105110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105114:	e3a02000 	mov	r2, #0
  105118:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10511c:	e3a03000 	mov	r3, #0
  105120:	e50b3010 	str	r3, [fp, #-16]
  105124:	ea000007 	b	105148 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  105128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10512c:	e51b2010 	ldr	r2, [fp, #-16]
  105130:	e2822006 	add	r2, r2, #6
  105134:	e3a01000 	mov	r1, #0
  105138:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10513c:	e51b3010 	ldr	r3, [fp, #-16]
  105140:	e2833001 	add	r3, r3, #1
  105144:	e50b3010 	str	r3, [fp, #-16]
  105148:	e51b3010 	ldr	r3, [fp, #-16]
  10514c:	e3530001 	cmp	r3, #1
  105150:	9afffff4 	bls	105128 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  105154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105158:	e3a02000 	mov	r2, #0
  10515c:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  105160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105164:	e3a02000 	mov	r2, #0
  105168:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  10516c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105170:	e2834004 	add	r4, r3, #4
  105174:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105178:	ebfff820 	bl	103200 <rt_strlen>
  10517c:	e1a03000 	mov	r3, r0
  105180:	e1a02003 	mov	r2, r3
  105184:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  105188:	e1a00004 	mov	r0, r4
  10518c:	ebfff833 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  105190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105194:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  105198:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  10519c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051a0:	e1a00003 	mov	r0, r3
  1051a4:	ebffff5e 	bl	104f24 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  1051a8:	e30f3598 	movw	r3, #62872	; 0xf598
  1051ac:	e3403014 	movt	r3, #20
  1051b0:	e5933000 	ldr	r3, [r3]
  1051b4:	e3530000 	cmp	r3, #0
  1051b8:	1a000008 	bne	1051e0 <netdev_register+0x17c>
    {
        netdev_list = netdev;
  1051bc:	e30f3598 	movw	r3, #62872	; 0xf598
  1051c0:	e3403014 	movt	r3, #20
  1051c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051c8:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  1051cc:	e30f3594 	movw	r3, #62868	; 0xf594
  1051d0:	e3403014 	movt	r3, #20
  1051d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051d8:	e5832000 	str	r2, [r3]
  1051dc:	ea000007 	b	105200 <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  1051e0:	e30f3598 	movw	r3, #62872	; 0xf598
  1051e4:	e3403014 	movt	r3, #20
  1051e8:	e5933000 	ldr	r3, [r3]
  1051ec:	e1a02003 	mov	r2, r3
  1051f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051f4:	e1a01003 	mov	r1, r3
  1051f8:	e1a00002 	mov	r0, r2
  1051fc:	ebffff53 	bl	104f50 <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  105200:	e3a03000 	mov	r3, #0
}
  105204:	e1a00003 	mov	r0, r3
  105208:	e24bd008 	sub	sp, fp, #8
  10520c:	e8bd8810 	pop	{r4, fp, pc}

00105210 <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  105210:	e92d4800 	push	{fp, lr}
  105214:	e28db004 	add	fp, sp, #4
  105218:	e24dd010 	sub	sp, sp, #16
  10521c:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105220:	e3a03000 	mov	r3, #0
  105224:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  105228:	e3a03000 	mov	r3, #0
  10522c:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  105230:	e51b3010 	ldr	r3, [fp, #-16]
  105234:	e3530000 	cmp	r3, #0
  105238:	1a000005 	bne	105254 <netdev_unregister+0x44>
  10523c:	e3a02077 	mov	r2, #119	; 0x77
  105240:	e3051dd8 	movw	r1, #24024	; 0x5dd8
  105244:	e3401014 	movt	r1, #20
  105248:	e3050a68 	movw	r0, #23144	; 0x5a68
  10524c:	e3400014 	movt	r0, #20
  105250:	ebfff8d0 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  105254:	e30f3598 	movw	r3, #62872	; 0xf598
  105258:	e3403014 	movt	r3, #20
  10525c:	e5933000 	ldr	r3, [r3]
  105260:	e3530000 	cmp	r3, #0
  105264:	1a000001 	bne	105270 <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  105268:	e3e03000 	mvn	r3, #0
  10526c:	ea000045 	b	105388 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105270:	e30f3598 	movw	r3, #62872	; 0xf598
  105274:	e3403014 	movt	r3, #20
  105278:	e5933000 	ldr	r3, [r3]
  10527c:	e50b3008 	str	r3, [fp, #-8]
  105280:	ea000030 	b	105348 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  105284:	e51b3008 	ldr	r3, [fp, #-8]
  105288:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  10528c:	e51b200c 	ldr	r2, [fp, #-12]
  105290:	e51b3010 	ldr	r3, [fp, #-16]
  105294:	e1520003 	cmp	r2, r3
  105298:	1a000027 	bne	10533c <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  10529c:	e30f3598 	movw	r3, #62872	; 0xf598
  1052a0:	e3403014 	movt	r3, #20
  1052a4:	e5933000 	ldr	r3, [r3]
  1052a8:	e51b2010 	ldr	r2, [fp, #-16]
  1052ac:	e1520003 	cmp	r2, r3
  1052b0:	1a00000c 	bne	1052e8 <netdev_unregister+0xd8>
  1052b4:	e30f3598 	movw	r3, #62872	; 0xf598
  1052b8:	e3403014 	movt	r3, #20
  1052bc:	e5933000 	ldr	r3, [r3]
  1052c0:	e1a00003 	mov	r0, r3
  1052c4:	ebffff5c 	bl	10503c <rt_slist_next>
  1052c8:	e1a03000 	mov	r3, r0
  1052cc:	e3530000 	cmp	r3, #0
  1052d0:	1a000004 	bne	1052e8 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  1052d4:	e30f3598 	movw	r3, #62872	; 0xf598
  1052d8:	e3403014 	movt	r3, #20
  1052dc:	e3a02000 	mov	r2, #0
  1052e0:	e5832000 	str	r2, [r3]
  1052e4:	ea000007 	b	105308 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  1052e8:	e30f3598 	movw	r3, #62872	; 0xf598
  1052ec:	e3403014 	movt	r3, #20
  1052f0:	e5933000 	ldr	r3, [r3]
  1052f4:	e1a02003 	mov	r2, r3
  1052f8:	e51b300c 	ldr	r3, [fp, #-12]
  1052fc:	e1a01003 	mov	r1, r3
  105300:	e1a00002 	mov	r0, r2
  105304:	ebffff2a 	bl	104fb4 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105308:	e30f3594 	movw	r3, #62868	; 0xf594
  10530c:	e3403014 	movt	r3, #20
  105310:	e5933000 	ldr	r3, [r3]
  105314:	e51b2010 	ldr	r2, [fp, #-16]
  105318:	e1520003 	cmp	r2, r3
  10531c:	1a00000d 	bne	105358 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  105320:	e30f3598 	movw	r3, #62872	; 0xf598
  105324:	e3403014 	movt	r3, #20
  105328:	e5932000 	ldr	r2, [r3]
  10532c:	e30f3594 	movw	r3, #62868	; 0xf594
  105330:	e3403014 	movt	r3, #20
  105334:	e5832000 	str	r2, [r3]
            }
            break;
  105338:	ea000006 	b	105358 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10533c:	e51b0008 	ldr	r0, [fp, #-8]
  105340:	ebffff3d 	bl	10503c <rt_slist_next>
  105344:	e50b0008 	str	r0, [fp, #-8]
  105348:	e51b3008 	ldr	r3, [fp, #-8]
  10534c:	e3530000 	cmp	r3, #0
  105350:	1affffcb 	bne	105284 <netdev_unregister+0x74>
  105354:	ea000000 	b	10535c <netdev_unregister+0x14c>
            break;
  105358:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  10535c:	e51b200c 	ldr	r2, [fp, #-12]
  105360:	e51b3010 	ldr	r3, [fp, #-16]
  105364:	e1520003 	cmp	r2, r3
  105368:	1a000005 	bne	105384 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  10536c:	e51b0010 	ldr	r0, [fp, #-16]
  105370:	eb000823 	bl	107404 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105374:	e3a02044 	mov	r2, #68	; 0x44
  105378:	e3a01000 	mov	r1, #0
  10537c:	e51b0010 	ldr	r0, [fp, #-16]
  105380:	ebfff7d0 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  105384:	e3e03000 	mvn	r3, #0
}
  105388:	e1a00003 	mov	r0, r3
  10538c:	e24bd004 	sub	sp, fp, #4
  105390:	e8bd8800 	pop	{fp, pc}

00105394 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  105394:	e92d4800 	push	{fp, lr}
  105398:	e28db004 	add	fp, sp, #4
  10539c:	e24dd010 	sub	sp, sp, #16
  1053a0:	e1a03000 	mov	r3, r0
  1053a4:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1053a8:	e3a03000 	mov	r3, #0
  1053ac:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1053b0:	e3a03000 	mov	r3, #0
  1053b4:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1053b8:	e30f3598 	movw	r3, #62872	; 0xf598
  1053bc:	e3403014 	movt	r3, #20
  1053c0:	e5933000 	ldr	r3, [r3]
  1053c4:	e3530000 	cmp	r3, #0
  1053c8:	1a000001 	bne	1053d4 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  1053cc:	e3a03000 	mov	r3, #0
  1053d0:	ea000019 	b	10543c <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053d4:	e30f3598 	movw	r3, #62872	; 0xf598
  1053d8:	e3403014 	movt	r3, #20
  1053dc:	e5933000 	ldr	r3, [r3]
  1053e0:	e50b3008 	str	r3, [fp, #-8]
  1053e4:	ea000010 	b	10542c <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1053e8:	e51b3008 	ldr	r3, [fp, #-8]
  1053ec:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  1053f0:	e51b300c 	ldr	r3, [fp, #-12]
  1053f4:	e3530000 	cmp	r3, #0
  1053f8:	0a000008 	beq	105420 <netdev_get_first_by_flags+0x8c>
  1053fc:	e51b300c 	ldr	r3, [fp, #-12]
  105400:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105404:	e15b30be 	ldrh	r3, [fp, #-14]
  105408:	e0033002 	and	r3, r3, r2
  10540c:	e6ff3073 	uxth	r3, r3
  105410:	e3530000 	cmp	r3, #0
  105414:	0a000001 	beq	105420 <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105418:	e51b300c 	ldr	r3, [fp, #-12]
  10541c:	ea000006 	b	10543c <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105420:	e51b0008 	ldr	r0, [fp, #-8]
  105424:	ebffff04 	bl	10503c <rt_slist_next>
  105428:	e50b0008 	str	r0, [fp, #-8]
  10542c:	e51b3008 	ldr	r3, [fp, #-8]
  105430:	e3530000 	cmp	r3, #0
  105434:	1affffeb 	bne	1053e8 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105438:	e3a03000 	mov	r3, #0
}
  10543c:	e1a00003 	mov	r0, r3
  105440:	e24bd004 	sub	sp, fp, #4
  105444:	e8bd8800 	pop	{fp, pc}

00105448 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  105448:	e92d4800 	push	{fp, lr}
  10544c:	e28db004 	add	fp, sp, #4
  105450:	e24dd010 	sub	sp, sp, #16
  105454:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105458:	e3a03000 	mov	r3, #0
  10545c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105460:	e3a03000 	mov	r3, #0
  105464:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105468:	e30f3598 	movw	r3, #62872	; 0xf598
  10546c:	e3403014 	movt	r3, #20
  105470:	e5933000 	ldr	r3, [r3]
  105474:	e3530000 	cmp	r3, #0
  105478:	1a000001 	bne	105484 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  10547c:	e3a03000 	mov	r3, #0
  105480:	ea000018 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105484:	e30f3598 	movw	r3, #62872	; 0xf598
  105488:	e3403014 	movt	r3, #20
  10548c:	e5933000 	ldr	r3, [r3]
  105490:	e50b3008 	str	r3, [fp, #-8]
  105494:	ea00000f 	b	1054d8 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105498:	e51b3008 	ldr	r3, [fp, #-8]
  10549c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  1054a0:	e51b300c 	ldr	r3, [fp, #-12]
  1054a4:	e3530000 	cmp	r3, #0
  1054a8:	0a000007 	beq	1054cc <netdev_get_by_ipaddr+0x84>
  1054ac:	e51b300c 	ldr	r3, [fp, #-12]
  1054b0:	e593200c 	ldr	r2, [r3, #12]
  1054b4:	e51b3010 	ldr	r3, [fp, #-16]
  1054b8:	e5933000 	ldr	r3, [r3]
  1054bc:	e1520003 	cmp	r2, r3
  1054c0:	1a000001 	bne	1054cc <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054c4:	e51b300c 	ldr	r3, [fp, #-12]
  1054c8:	ea000006 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054cc:	e51b0008 	ldr	r0, [fp, #-8]
  1054d0:	ebfffed9 	bl	10503c <rt_slist_next>
  1054d4:	e50b0008 	str	r0, [fp, #-8]
  1054d8:	e51b3008 	ldr	r3, [fp, #-8]
  1054dc:	e3530000 	cmp	r3, #0
  1054e0:	1affffec 	bne	105498 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1054e4:	e3a03000 	mov	r3, #0
}
  1054e8:	e1a00003 	mov	r0, r3
  1054ec:	e24bd004 	sub	sp, fp, #4
  1054f0:	e8bd8800 	pop	{fp, pc}

001054f4 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  1054f4:	e92d4810 	push	{r4, fp, lr}
  1054f8:	e28db008 	add	fp, sp, #8
  1054fc:	e24dd014 	sub	sp, sp, #20
  105500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105504:	e3a03000 	mov	r3, #0
  105508:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  10550c:	e3a03000 	mov	r3, #0
  105510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  105514:	e30f3598 	movw	r3, #62872	; 0xf598
  105518:	e3403014 	movt	r3, #20
  10551c:	e5933000 	ldr	r3, [r3]
  105520:	e3530000 	cmp	r3, #0
  105524:	1a000001 	bne	105530 <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  105528:	e3a03000 	mov	r3, #0
  10552c:	ea000020 	b	1055b4 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105530:	e30f3598 	movw	r3, #62872	; 0xf598
  105534:	e3403014 	movt	r3, #20
  105538:	e5933000 	ldr	r3, [r3]
  10553c:	e50b3010 	str	r3, [fp, #-16]
  105540:	ea000017 	b	1055a4 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105544:	e51b3010 	ldr	r3, [fp, #-16]
  105548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  10554c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105550:	e3530000 	cmp	r3, #0
  105554:	0a00000f 	beq	105598 <netdev_get_by_name+0xa4>
  105558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10555c:	e2834004 	add	r4, r3, #4
  105560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105564:	e2833004 	add	r3, r3, #4
  105568:	e1a00003 	mov	r0, r3
  10556c:	ebfff723 	bl	103200 <rt_strlen>
  105570:	e1a03000 	mov	r3, r0
  105574:	e1a02003 	mov	r2, r3
  105578:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10557c:	e1a00004 	mov	r0, r4
  105580:	ebfff728 	bl	103228 <rt_strncmp>
  105584:	e1a03000 	mov	r3, r0
  105588:	e3530000 	cmp	r3, #0
  10558c:	1a000001 	bne	105598 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105594:	ea000006 	b	1055b4 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105598:	e51b0010 	ldr	r0, [fp, #-16]
  10559c:	ebfffea6 	bl	10503c <rt_slist_next>
  1055a0:	e50b0010 	str	r0, [fp, #-16]
  1055a4:	e51b3010 	ldr	r3, [fp, #-16]
  1055a8:	e3530000 	cmp	r3, #0
  1055ac:	1affffe4 	bne	105544 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1055b0:	e3a03000 	mov	r3, #0
}
  1055b4:	e1a00003 	mov	r0, r3
  1055b8:	e24bd008 	sub	sp, fp, #8
  1055bc:	e8bd8810 	pop	{r4, fp, pc}

001055c0 <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  1055c0:	e92d4800 	push	{fp, lr}
  1055c4:	e28db004 	add	fp, sp, #4
  1055c8:	e24dd018 	sub	sp, sp, #24
  1055cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1055d0:	e3a03000 	mov	r3, #0
  1055d4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1055d8:	e3a03000 	mov	r3, #0
  1055dc:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  1055e0:	e3a03000 	mov	r3, #0
  1055e4:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  1055e8:	e30f3598 	movw	r3, #62872	; 0xf598
  1055ec:	e3403014 	movt	r3, #20
  1055f0:	e5933000 	ldr	r3, [r3]
  1055f4:	e3530000 	cmp	r3, #0
  1055f8:	1a000001 	bne	105604 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  1055fc:	e3a03000 	mov	r3, #0
  105600:	ea000048 	b	105728 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105604:	e30f3598 	movw	r3, #62872	; 0xf598
  105608:	e3403014 	movt	r3, #20
  10560c:	e5933000 	ldr	r3, [r3]
  105610:	e50b3008 	str	r3, [fp, #-8]
  105614:	ea00001b 	b	105688 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105618:	e51b3008 	ldr	r3, [fp, #-8]
  10561c:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  105620:	e51b300c 	ldr	r3, [fp, #-12]
  105624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105628:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  10562c:	e51b3010 	ldr	r3, [fp, #-16]
  105630:	e3530000 	cmp	r3, #0
  105634:	0a000010 	beq	10567c <netdev_get_by_family+0xbc>
  105638:	e51b3010 	ldr	r3, [fp, #-16]
  10563c:	e5933008 	ldr	r3, [r3, #8]
  105640:	e3530000 	cmp	r3, #0
  105644:	0a00000c 	beq	10567c <netdev_get_by_family+0xbc>
  105648:	e51b3010 	ldr	r3, [fp, #-16]
  10564c:	e5933000 	ldr	r3, [r3]
  105650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105654:	e1520003 	cmp	r2, r3
  105658:	1a000007 	bne	10567c <netdev_get_by_family+0xbc>
  10565c:	e51b300c 	ldr	r3, [fp, #-12]
  105660:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105664:	e2033001 	and	r3, r3, #1
  105668:	e6ef3073 	uxtb	r3, r3
  10566c:	e3530000 	cmp	r3, #0
  105670:	0a000001 	beq	10567c <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105674:	e51b300c 	ldr	r3, [fp, #-12]
  105678:	ea00002a 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10567c:	e51b0008 	ldr	r0, [fp, #-8]
  105680:	ebfffe6d 	bl	10503c <rt_slist_next>
  105684:	e50b0008 	str	r0, [fp, #-8]
  105688:	e51b3008 	ldr	r3, [fp, #-8]
  10568c:	e3530000 	cmp	r3, #0
  105690:	1affffe0 	bne	105618 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105694:	e30f3598 	movw	r3, #62872	; 0xf598
  105698:	e3403014 	movt	r3, #20
  10569c:	e5933000 	ldr	r3, [r3]
  1056a0:	e50b3008 	str	r3, [fp, #-8]
  1056a4:	ea00001b 	b	105718 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056a8:	e51b3008 	ldr	r3, [fp, #-8]
  1056ac:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056b0:	e51b300c 	ldr	r3, [fp, #-12]
  1056b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056b8:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  1056bc:	e51b3010 	ldr	r3, [fp, #-16]
  1056c0:	e3530000 	cmp	r3, #0
  1056c4:	0a000010 	beq	10570c <netdev_get_by_family+0x14c>
  1056c8:	e51b3010 	ldr	r3, [fp, #-16]
  1056cc:	e5933008 	ldr	r3, [r3, #8]
  1056d0:	e3530000 	cmp	r3, #0
  1056d4:	0a00000c 	beq	10570c <netdev_get_by_family+0x14c>
  1056d8:	e51b3010 	ldr	r3, [fp, #-16]
  1056dc:	e5933004 	ldr	r3, [r3, #4]
  1056e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1056e4:	e1520003 	cmp	r2, r3
  1056e8:	1a000007 	bne	10570c <netdev_get_by_family+0x14c>
  1056ec:	e51b300c 	ldr	r3, [fp, #-12]
  1056f0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1056f4:	e2033001 	and	r3, r3, #1
  1056f8:	e6ef3073 	uxtb	r3, r3
  1056fc:	e3530000 	cmp	r3, #0
  105700:	0a000001 	beq	10570c <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105704:	e51b300c 	ldr	r3, [fp, #-12]
  105708:	ea000006 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10570c:	e51b0008 	ldr	r0, [fp, #-8]
  105710:	ebfffe49 	bl	10503c <rt_slist_next>
  105714:	e50b0008 	str	r0, [fp, #-8]
  105718:	e51b3008 	ldr	r3, [fp, #-8]
  10571c:	e3530000 	cmp	r3, #0
  105720:	1affffe0 	bne	1056a8 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105724:	e3a03000 	mov	r3, #0
}
  105728:	e1a00003 	mov	r0, r3
  10572c:	e24bd004 	sub	sp, fp, #4
  105730:	e8bd8800 	pop	{fp, pc}

00105734 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  105734:	e92d4800 	push	{fp, lr}
  105738:	e28db004 	add	fp, sp, #4
  10573c:	e24dd008 	sub	sp, sp, #8
  105740:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105744:	e51b3008 	ldr	r3, [fp, #-8]
  105748:	e3530000 	cmp	r3, #0
  10574c:	1a000005 	bne	105768 <netdev_family_get+0x34>
  105750:	e300214e 	movw	r2, #334	; 0x14e
  105754:	e3051dec 	movw	r1, #24044	; 0x5dec
  105758:	e3401014 	movt	r1, #20
  10575c:	e3050a68 	movw	r0, #23144	; 0x5a68
  105760:	e3400014 	movt	r0, #20
  105764:	ebfff78b 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105768:	e51b3008 	ldr	r3, [fp, #-8]
  10576c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105770:	e5933000 	ldr	r3, [r3]
}
  105774:	e1a00003 	mov	r0, r3
  105778:	e24bd004 	sub	sp, fp, #4
  10577c:	e8bd8800 	pop	{fp, pc}

00105780 <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  105780:	e92d4800 	push	{fp, lr}
  105784:	e28db004 	add	fp, sp, #4
  105788:	e24dd008 	sub	sp, sp, #8
  10578c:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  105790:	e51b3008 	ldr	r3, [fp, #-8]
  105794:	e3530000 	cmp	r3, #0
  105798:	0a00000d 	beq	1057d4 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  10579c:	e30f3594 	movw	r3, #62868	; 0xf594
  1057a0:	e3403014 	movt	r3, #20
  1057a4:	e51b2008 	ldr	r2, [fp, #-8]
  1057a8:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  1057ac:	e51b3008 	ldr	r3, [fp, #-8]
  1057b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057b4:	e593301c 	ldr	r3, [r3, #28]
  1057b8:	e3530000 	cmp	r3, #0
  1057bc:	0a000004 	beq	1057d4 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  1057c0:	e51b3008 	ldr	r3, [fp, #-8]
  1057c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057c8:	e593301c 	ldr	r3, [r3, #28]
  1057cc:	e51b0008 	ldr	r0, [fp, #-8]
  1057d0:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  1057d4:	e320f000 	nop	{0}
  1057d8:	e24bd004 	sub	sp, fp, #4
  1057dc:	e8bd8800 	pop	{fp, pc}

001057e0 <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  1057e0:	e92d4800 	push	{fp, lr}
  1057e4:	e28db004 	add	fp, sp, #4
  1057e8:	e24dd008 	sub	sp, sp, #8
  1057ec:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1057f0:	e51b3008 	ldr	r3, [fp, #-8]
  1057f4:	e3530000 	cmp	r3, #0
  1057f8:	1a000005 	bne	105814 <netdev_set_up+0x34>
  1057fc:	e3002173 	movw	r2, #371	; 0x173
  105800:	e3051e00 	movw	r1, #24064	; 0x5e00
  105804:	e3401014 	movt	r1, #20
  105808:	e3050a68 	movw	r0, #23144	; 0x5a68
  10580c:	e3400014 	movt	r0, #20
  105810:	ebfff760 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  105814:	e51b3008 	ldr	r3, [fp, #-8]
  105818:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10581c:	e3530000 	cmp	r3, #0
  105820:	0a000004 	beq	105838 <netdev_set_up+0x58>
  105824:	e51b3008 	ldr	r3, [fp, #-8]
  105828:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10582c:	e5933000 	ldr	r3, [r3]
  105830:	e3530000 	cmp	r3, #0
  105834:	1a00000d 	bne	105870 <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105838:	e3050a78 	movw	r0, #23160	; 0x5a78
  10583c:	e3400014 	movt	r0, #20
  105840:	ebfff633 	bl	103114 <rt_kprintf>
  105844:	e51b3008 	ldr	r3, [fp, #-8]
  105848:	e2833004 	add	r3, r3, #4
  10584c:	e1a01003 	mov	r1, r3
  105850:	e3050a8c 	movw	r0, #23180	; 0x5a8c
  105854:	e3400014 	movt	r0, #20
  105858:	ebfff62d 	bl	103114 <rt_kprintf>
  10585c:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105860:	e3400014 	movt	r0, #20
  105864:	ebfff62a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105868:	e3e03000 	mvn	r3, #0
  10586c:	ea00000d 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  105870:	e51b3008 	ldr	r3, [fp, #-8]
  105874:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105878:	e2033001 	and	r3, r3, #1
  10587c:	e6ef3073 	uxtb	r3, r3
  105880:	e3530000 	cmp	r3, #0
  105884:	0a000001 	beq	105890 <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105888:	e3a03000 	mov	r3, #0
  10588c:	ea000005 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  105890:	e51b3008 	ldr	r3, [fp, #-8]
  105894:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105898:	e5933000 	ldr	r3, [r3]
  10589c:	e51b0008 	ldr	r0, [fp, #-8]
  1058a0:	e12fff33 	blx	r3
  1058a4:	e1a03000 	mov	r3, r0
}
  1058a8:	e1a00003 	mov	r0, r3
  1058ac:	e24bd004 	sub	sp, fp, #4
  1058b0:	e8bd8800 	pop	{fp, pc}

001058b4 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  1058b4:	e92d4800 	push	{fp, lr}
  1058b8:	e28db004 	add	fp, sp, #4
  1058bc:	e24dd008 	sub	sp, sp, #8
  1058c0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1058c4:	e51b3008 	ldr	r3, [fp, #-8]
  1058c8:	e3530000 	cmp	r3, #0
  1058cc:	1a000005 	bne	1058e8 <netdev_set_down+0x34>
  1058d0:	e300218e 	movw	r2, #398	; 0x18e
  1058d4:	e3051e10 	movw	r1, #24080	; 0x5e10
  1058d8:	e3401014 	movt	r1, #20
  1058dc:	e3050a68 	movw	r0, #23144	; 0x5a68
  1058e0:	e3400014 	movt	r0, #20
  1058e4:	ebfff72b 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  1058e8:	e51b3008 	ldr	r3, [fp, #-8]
  1058ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058f0:	e3530000 	cmp	r3, #0
  1058f4:	0a000004 	beq	10590c <netdev_set_down+0x58>
  1058f8:	e51b3008 	ldr	r3, [fp, #-8]
  1058fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105900:	e5933004 	ldr	r3, [r3, #4]
  105904:	e3530000 	cmp	r3, #0
  105908:	1a00000d 	bne	105944 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  10590c:	e3050a78 	movw	r0, #23160	; 0x5a78
  105910:	e3400014 	movt	r0, #20
  105914:	ebfff5fe 	bl	103114 <rt_kprintf>
  105918:	e51b3008 	ldr	r3, [fp, #-8]
  10591c:	e2833004 	add	r3, r3, #4
  105920:	e1a01003 	mov	r1, r3
  105924:	e3050a8c 	movw	r0, #23180	; 0x5a8c
  105928:	e3400014 	movt	r0, #20
  10592c:	ebfff5f8 	bl	103114 <rt_kprintf>
  105930:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105934:	e3400014 	movt	r0, #20
  105938:	ebfff5f5 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10593c:	e3e03000 	mvn	r3, #0
  105940:	ea00000c 	b	105978 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  105944:	e51b3008 	ldr	r3, [fp, #-8]
  105948:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10594c:	e2033001 	and	r3, r3, #1
  105950:	e3530000 	cmp	r3, #0
  105954:	1a000001 	bne	105960 <netdev_set_down+0xac>
    {
        return RT_EOK;
  105958:	e3a03000 	mov	r3, #0
  10595c:	ea000005 	b	105978 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  105960:	e51b3008 	ldr	r3, [fp, #-8]
  105964:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105968:	e5933004 	ldr	r3, [r3, #4]
  10596c:	e51b0008 	ldr	r0, [fp, #-8]
  105970:	e12fff33 	blx	r3
  105974:	e1a03000 	mov	r3, r0
}
  105978:	e1a00003 	mov	r0, r3
  10597c:	e24bd004 	sub	sp, fp, #4
  105980:	e8bd8800 	pop	{fp, pc}

00105984 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105984:	e92d4800 	push	{fp, lr}
  105988:	e28db004 	add	fp, sp, #4
  10598c:	e24dd008 	sub	sp, sp, #8
  105990:	e50b0008 	str	r0, [fp, #-8]
  105994:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105998:	e51b3008 	ldr	r3, [fp, #-8]
  10599c:	e3530000 	cmp	r3, #0
  1059a0:	1a000005 	bne	1059bc <netdev_dhcp_enabled+0x38>
  1059a4:	e30021ab 	movw	r2, #427	; 0x1ab
  1059a8:	e3051e20 	movw	r1, #24096	; 0x5e20
  1059ac:	e3401014 	movt	r1, #20
  1059b0:	e3050a68 	movw	r0, #23144	; 0x5a68
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff6f6 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  1059bc:	e51b3008 	ldr	r3, [fp, #-8]
  1059c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059c4:	e3530000 	cmp	r3, #0
  1059c8:	0a000004 	beq	1059e0 <netdev_dhcp_enabled+0x5c>
  1059cc:	e51b3008 	ldr	r3, [fp, #-8]
  1059d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059d4:	e5933010 	ldr	r3, [r3, #16]
  1059d8:	e3530000 	cmp	r3, #0
  1059dc:	1a00000d 	bne	105a18 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  1059e0:	e3050a78 	movw	r0, #23160	; 0x5a78
  1059e4:	e3400014 	movt	r0, #20
  1059e8:	ebfff5c9 	bl	103114 <rt_kprintf>
  1059ec:	e51b3008 	ldr	r3, [fp, #-8]
  1059f0:	e2833004 	add	r3, r3, #4
  1059f4:	e1a01003 	mov	r1, r3
  1059f8:	e3050ad0 	movw	r0, #23248	; 0x5ad0
  1059fc:	e3400014 	movt	r0, #20
  105a00:	ebfff5c3 	bl	103114 <rt_kprintf>
  105a04:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105a08:	e3400014 	movt	r0, #20
  105a0c:	ebfff5c0 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a10:	e3e03000 	mvn	r3, #0
  105a14:	ea00000f 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105a18:	e51b3008 	ldr	r3, [fp, #-8]
  105a1c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105a20:	e1a03423 	lsr	r3, r3, #8
  105a24:	e2033001 	and	r3, r3, #1
  105a28:	e51b200c 	ldr	r2, [fp, #-12]
  105a2c:	e1520003 	cmp	r2, r3
  105a30:	1a000001 	bne	105a3c <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105a34:	e3a03000 	mov	r3, #0
  105a38:	ea000006 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105a3c:	e51b3008 	ldr	r3, [fp, #-8]
  105a40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a44:	e5933010 	ldr	r3, [r3, #16]
  105a48:	e51b100c 	ldr	r1, [fp, #-12]
  105a4c:	e51b0008 	ldr	r0, [fp, #-8]
  105a50:	e12fff33 	blx	r3
  105a54:	e1a03000 	mov	r3, r0
}
  105a58:	e1a00003 	mov	r0, r3
  105a5c:	e24bd004 	sub	sp, fp, #4
  105a60:	e8bd8800 	pop	{fp, pc}

00105a64 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105a64:	e92d4810 	push	{r4, fp, lr}
  105a68:	e28db008 	add	fp, sp, #8
  105a6c:	e24dd00c 	sub	sp, sp, #12
  105a70:	e50b0010 	str	r0, [fp, #-16]
  105a74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105a78:	e51b3010 	ldr	r3, [fp, #-16]
  105a7c:	e3530000 	cmp	r3, #0
  105a80:	1a000005 	bne	105a9c <netdev_set_ipaddr+0x38>
  105a84:	e3a02f72 	mov	r2, #456	; 0x1c8
  105a88:	e3051e34 	movw	r1, #24116	; 0x5e34
  105a8c:	e3401014 	movt	r1, #20
  105a90:	e3050a68 	movw	r0, #23144	; 0x5a68
  105a94:	e3400014 	movt	r0, #20
  105a98:	ebfff6be 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105aa0:	e3530000 	cmp	r3, #0
  105aa4:	1a000005 	bne	105ac0 <netdev_set_ipaddr+0x5c>
  105aa8:	e30021c9 	movw	r2, #457	; 0x1c9
  105aac:	e3051e34 	movw	r1, #24116	; 0x5e34
  105ab0:	e3401014 	movt	r1, #20
  105ab4:	e3050b14 	movw	r0, #23316	; 0x5b14
  105ab8:	e3400014 	movt	r0, #20
  105abc:	ebfff6b5 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105ac0:	e51b3010 	ldr	r3, [fp, #-16]
  105ac4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ac8:	e3530000 	cmp	r3, #0
  105acc:	0a000004 	beq	105ae4 <netdev_set_ipaddr+0x80>
  105ad0:	e51b3010 	ldr	r3, [fp, #-16]
  105ad4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ad8:	e5933008 	ldr	r3, [r3, #8]
  105adc:	e3530000 	cmp	r3, #0
  105ae0:	1a00000d 	bne	105b1c <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105ae4:	e3050a78 	movw	r0, #23160	; 0x5a78
  105ae8:	e3400014 	movt	r0, #20
  105aec:	ebfff588 	bl	103114 <rt_kprintf>
  105af0:	e51b3010 	ldr	r3, [fp, #-16]
  105af4:	e2833004 	add	r3, r3, #4
  105af8:	e1a01003 	mov	r1, r3
  105afc:	e3050b1c 	movw	r0, #23324	; 0x5b1c
  105b00:	e3400014 	movt	r0, #20
  105b04:	ebfff582 	bl	103114 <rt_kprintf>
  105b08:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105b0c:	e3400014 	movt	r0, #20
  105b10:	ebfff57f 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b14:	e3e03000 	mvn	r3, #0
  105b18:	ea00001d 	b	105b94 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105b1c:	e51b3010 	ldr	r3, [fp, #-16]
  105b20:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b24:	e1a03423 	lsr	r3, r3, #8
  105b28:	e2033001 	and	r3, r3, #1
  105b2c:	e6ef3073 	uxtb	r3, r3
  105b30:	e3530000 	cmp	r3, #0
  105b34:	0a00000d 	beq	105b70 <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105b38:	e3050a78 	movw	r0, #23160	; 0x5a78
  105b3c:	e3400014 	movt	r0, #20
  105b40:	ebfff573 	bl	103114 <rt_kprintf>
  105b44:	e51b3010 	ldr	r3, [fp, #-16]
  105b48:	e2833004 	add	r3, r3, #4
  105b4c:	e1a01003 	mov	r1, r3
  105b50:	e3050b5c 	movw	r0, #23388	; 0x5b5c
  105b54:	e3400014 	movt	r0, #20
  105b58:	ebfff56d 	bl	103114 <rt_kprintf>
  105b5c:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105b60:	e3400014 	movt	r0, #20
  105b64:	ebfff56a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b68:	e3e03000 	mvn	r3, #0
  105b6c:	ea000008 	b	105b94 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105b70:	e51b3010 	ldr	r3, [fp, #-16]
  105b74:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b78:	e5934008 	ldr	r4, [r3, #8]
  105b7c:	e3a03000 	mov	r3, #0
  105b80:	e3a02000 	mov	r2, #0
  105b84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105b88:	e51b0010 	ldr	r0, [fp, #-16]
  105b8c:	e12fff34 	blx	r4
  105b90:	e1a03000 	mov	r3, r0
}
  105b94:	e1a00003 	mov	r0, r3
  105b98:	e24bd008 	sub	sp, fp, #8
  105b9c:	e8bd8810 	pop	{r4, fp, pc}

00105ba0 <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105ba0:	e92d4810 	push	{r4, fp, lr}
  105ba4:	e28db008 	add	fp, sp, #8
  105ba8:	e24dd00c 	sub	sp, sp, #12
  105bac:	e50b0010 	str	r0, [fp, #-16]
  105bb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105bb4:	e51b3010 	ldr	r3, [fp, #-16]
  105bb8:	e3530000 	cmp	r3, #0
  105bbc:	1a000005 	bne	105bd8 <netdev_set_netmask+0x38>
  105bc0:	e30021e6 	movw	r2, #486	; 0x1e6
  105bc4:	e3051e48 	movw	r1, #24136	; 0x5e48
  105bc8:	e3401014 	movt	r1, #20
  105bcc:	e3050a68 	movw	r0, #23144	; 0x5a68
  105bd0:	e3400014 	movt	r0, #20
  105bd4:	ebfff66f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bdc:	e3530000 	cmp	r3, #0
  105be0:	1a000005 	bne	105bfc <netdev_set_netmask+0x5c>
  105be4:	e30021e7 	movw	r2, #487	; 0x1e7
  105be8:	e3051e48 	movw	r1, #24136	; 0x5e48
  105bec:	e3401014 	movt	r1, #20
  105bf0:	e3050bb4 	movw	r0, #23476	; 0x5bb4
  105bf4:	e3400014 	movt	r0, #20
  105bf8:	ebfff666 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105bfc:	e51b3010 	ldr	r3, [fp, #-16]
  105c00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c04:	e3530000 	cmp	r3, #0
  105c08:	0a000004 	beq	105c20 <netdev_set_netmask+0x80>
  105c0c:	e51b3010 	ldr	r3, [fp, #-16]
  105c10:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c14:	e5933008 	ldr	r3, [r3, #8]
  105c18:	e3530000 	cmp	r3, #0
  105c1c:	1a00000d 	bne	105c58 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105c20:	e3050a78 	movw	r0, #23160	; 0x5a78
  105c24:	e3400014 	movt	r0, #20
  105c28:	ebfff539 	bl	103114 <rt_kprintf>
  105c2c:	e51b3010 	ldr	r3, [fp, #-16]
  105c30:	e2833004 	add	r3, r3, #4
  105c34:	e1a01003 	mov	r1, r3
  105c38:	e3050bbc 	movw	r0, #23484	; 0x5bbc
  105c3c:	e3400014 	movt	r0, #20
  105c40:	ebfff533 	bl	103114 <rt_kprintf>
  105c44:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105c48:	e3400014 	movt	r0, #20
  105c4c:	ebfff530 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105c50:	e3e03000 	mvn	r3, #0
  105c54:	ea00001d 	b	105cd0 <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105c58:	e51b3010 	ldr	r3, [fp, #-16]
  105c5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c60:	e1a03423 	lsr	r3, r3, #8
  105c64:	e2033001 	and	r3, r3, #1
  105c68:	e6ef3073 	uxtb	r3, r3
  105c6c:	e3530000 	cmp	r3, #0
  105c70:	0a00000d 	beq	105cac <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105c74:	e3050a78 	movw	r0, #23160	; 0x5a78
  105c78:	e3400014 	movt	r0, #20
  105c7c:	ebfff524 	bl	103114 <rt_kprintf>
  105c80:	e51b3010 	ldr	r3, [fp, #-16]
  105c84:	e2833004 	add	r3, r3, #4
  105c88:	e1a01003 	mov	r1, r3
  105c8c:	e3050c04 	movw	r0, #23556	; 0x5c04
  105c90:	e3400014 	movt	r0, #20
  105c94:	ebfff51e 	bl	103114 <rt_kprintf>
  105c98:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105c9c:	e3400014 	movt	r0, #20
  105ca0:	ebfff51b 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ca4:	e3e03000 	mvn	r3, #0
  105ca8:	ea000008 	b	105cd0 <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105cac:	e51b3010 	ldr	r3, [fp, #-16]
  105cb0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105cb4:	e5934008 	ldr	r4, [r3, #8]
  105cb8:	e3a03000 	mov	r3, #0
  105cbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105cc0:	e3a01000 	mov	r1, #0
  105cc4:	e51b0010 	ldr	r0, [fp, #-16]
  105cc8:	e12fff34 	blx	r4
  105ccc:	e1a03000 	mov	r3, r0
}
  105cd0:	e1a00003 	mov	r0, r3
  105cd4:	e24bd008 	sub	sp, fp, #8
  105cd8:	e8bd8810 	pop	{r4, fp, pc}

00105cdc <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cdc:	e92d4810 	push	{r4, fp, lr}
  105ce0:	e28db008 	add	fp, sp, #8
  105ce4:	e24dd00c 	sub	sp, sp, #12
  105ce8:	e50b0010 	str	r0, [fp, #-16]
  105cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105cf0:	e51b3010 	ldr	r3, [fp, #-16]
  105cf4:	e3530000 	cmp	r3, #0
  105cf8:	1a000005 	bne	105d14 <netdev_set_gw+0x38>
  105cfc:	e3a02f81 	mov	r2, #516	; 0x204
  105d00:	e3051e5c 	movw	r1, #24156	; 0x5e5c
  105d04:	e3401014 	movt	r1, #20
  105d08:	e3050a68 	movw	r0, #23144	; 0x5a68
  105d0c:	e3400014 	movt	r0, #20
  105d10:	ebfff620 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d18:	e3530000 	cmp	r3, #0
  105d1c:	1a000005 	bne	105d38 <netdev_set_gw+0x5c>
  105d20:	e3002205 	movw	r2, #517	; 0x205
  105d24:	e3051e5c 	movw	r1, #24156	; 0x5e5c
  105d28:	e3401014 	movt	r1, #20
  105d2c:	e3050c64 	movw	r0, #23652	; 0x5c64
  105d30:	e3400014 	movt	r0, #20
  105d34:	ebfff617 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105d38:	e51b3010 	ldr	r3, [fp, #-16]
  105d3c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d40:	e3530000 	cmp	r3, #0
  105d44:	0a000004 	beq	105d5c <netdev_set_gw+0x80>
  105d48:	e51b3010 	ldr	r3, [fp, #-16]
  105d4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d50:	e5933008 	ldr	r3, [r3, #8]
  105d54:	e3530000 	cmp	r3, #0
  105d58:	1a00000d 	bne	105d94 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105d5c:	e3050a78 	movw	r0, #23160	; 0x5a78
  105d60:	e3400014 	movt	r0, #20
  105d64:	ebfff4ea 	bl	103114 <rt_kprintf>
  105d68:	e51b3010 	ldr	r3, [fp, #-16]
  105d6c:	e2833004 	add	r3, r3, #4
  105d70:	e1a01003 	mov	r1, r3
  105d74:	e3050c68 	movw	r0, #23656	; 0x5c68
  105d78:	e3400014 	movt	r0, #20
  105d7c:	ebfff4e4 	bl	103114 <rt_kprintf>
  105d80:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105d84:	e3400014 	movt	r0, #20
  105d88:	ebfff4e1 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105d8c:	e3e03000 	mvn	r3, #0
  105d90:	ea00001d 	b	105e0c <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105d94:	e51b3010 	ldr	r3, [fp, #-16]
  105d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d9c:	e1a03423 	lsr	r3, r3, #8
  105da0:	e2033001 	and	r3, r3, #1
  105da4:	e6ef3073 	uxtb	r3, r3
  105da8:	e3530000 	cmp	r3, #0
  105dac:	0a00000d 	beq	105de8 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105db0:	e3050a78 	movw	r0, #23160	; 0x5a78
  105db4:	e3400014 	movt	r0, #20
  105db8:	ebfff4d5 	bl	103114 <rt_kprintf>
  105dbc:	e51b3010 	ldr	r3, [fp, #-16]
  105dc0:	e2833004 	add	r3, r3, #4
  105dc4:	e1a01003 	mov	r1, r3
  105dc8:	e3050cb0 	movw	r0, #23728	; 0x5cb0
  105dcc:	e3400014 	movt	r0, #20
  105dd0:	ebfff4cf 	bl	103114 <rt_kprintf>
  105dd4:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105dd8:	e3400014 	movt	r0, #20
  105ddc:	ebfff4cc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105de0:	e3e03000 	mvn	r3, #0
  105de4:	ea000008 	b	105e0c <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105de8:	e51b3010 	ldr	r3, [fp, #-16]
  105dec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105df0:	e5934008 	ldr	r4, [r3, #8]
  105df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105df8:	e3a02000 	mov	r2, #0
  105dfc:	e3a01000 	mov	r1, #0
  105e00:	e51b0010 	ldr	r0, [fp, #-16]
  105e04:	e12fff34 	blx	r4
  105e08:	e1a03000 	mov	r3, r0
}
  105e0c:	e1a00003 	mov	r0, r3
  105e10:	e24bd008 	sub	sp, fp, #8
  105e14:	e8bd8810 	pop	{r4, fp, pc}

00105e18 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105e18:	e92d4800 	push	{fp, lr}
  105e1c:	e28db004 	add	fp, sp, #4
  105e20:	e24dd010 	sub	sp, sp, #16
  105e24:	e50b0008 	str	r0, [fp, #-8]
  105e28:	e1a03001 	mov	r3, r1
  105e2c:	e50b2010 	str	r2, [fp, #-16]
  105e30:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105e34:	e51b3008 	ldr	r3, [fp, #-8]
  105e38:	e3530000 	cmp	r3, #0
  105e3c:	1a000005 	bne	105e58 <netdev_set_dns_server+0x40>
  105e40:	e3002222 	movw	r2, #546	; 0x222
  105e44:	e3051e6c 	movw	r1, #24172	; 0x5e6c
  105e48:	e3401014 	movt	r1, #20
  105e4c:	e3050a68 	movw	r0, #23144	; 0x5a68
  105e50:	e3400014 	movt	r0, #20
  105e54:	ebfff5cf 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105e58:	e51b3010 	ldr	r3, [fp, #-16]
  105e5c:	e3530000 	cmp	r3, #0
  105e60:	1a000005 	bne	105e7c <netdev_set_dns_server+0x64>
  105e64:	e3002223 	movw	r2, #547	; 0x223
  105e68:	e3051e6c 	movw	r1, #24172	; 0x5e6c
  105e6c:	e3401014 	movt	r1, #20
  105e70:	e3050d10 	movw	r0, #23824	; 0x5d10
  105e74:	e3400014 	movt	r0, #20
  105e78:	ebfff5c6 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105e7c:	e55b3009 	ldrb	r3, [fp, #-9]
  105e80:	e3530001 	cmp	r3, #1
  105e84:	9a00000e 	bls	105ec4 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105e88:	e3050a78 	movw	r0, #23160	; 0x5a78
  105e8c:	e3400014 	movt	r0, #20
  105e90:	ebfff49f 	bl	103114 <rt_kprintf>
  105e94:	e55b3009 	ldrb	r3, [fp, #-9]
  105e98:	e2833001 	add	r3, r3, #1
  105e9c:	e3a02002 	mov	r2, #2
  105ea0:	e1a01003 	mov	r1, r3
  105ea4:	e3050d1c 	movw	r0, #23836	; 0x5d1c
  105ea8:	e3400014 	movt	r0, #20
  105eac:	ebfff498 	bl	103114 <rt_kprintf>
  105eb0:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105eb4:	e3400014 	movt	r0, #20
  105eb8:	ebfff495 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ebc:	e3e03000 	mvn	r3, #0
  105ec0:	ea00001e 	b	105f40 <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105ec4:	e51b3008 	ldr	r3, [fp, #-8]
  105ec8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ecc:	e3530000 	cmp	r3, #0
  105ed0:	0a000004 	beq	105ee8 <netdev_set_dns_server+0xd0>
  105ed4:	e51b3008 	ldr	r3, [fp, #-8]
  105ed8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105edc:	e593300c 	ldr	r3, [r3, #12]
  105ee0:	e3530000 	cmp	r3, #0
  105ee4:	1a00000d 	bne	105f20 <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105ee8:	e3050a78 	movw	r0, #23160	; 0x5a78
  105eec:	e3400014 	movt	r0, #20
  105ef0:	ebfff487 	bl	103114 <rt_kprintf>
  105ef4:	e51b3008 	ldr	r3, [fp, #-8]
  105ef8:	e2833004 	add	r3, r3, #4
  105efc:	e1a01003 	mov	r1, r3
  105f00:	e3050d60 	movw	r0, #23904	; 0x5d60
  105f04:	e3400014 	movt	r0, #20
  105f08:	ebfff481 	bl	103114 <rt_kprintf>
  105f0c:	e3050ac8 	movw	r0, #23240	; 0x5ac8
  105f10:	e3400014 	movt	r0, #20
  105f14:	ebfff47e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f18:	e3e03000 	mvn	r3, #0
  105f1c:	ea000007 	b	105f40 <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105f20:	e51b3008 	ldr	r3, [fp, #-8]
  105f24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f28:	e593300c 	ldr	r3, [r3, #12]
  105f2c:	e55b1009 	ldrb	r1, [fp, #-9]
  105f30:	e51b2010 	ldr	r2, [fp, #-16]
  105f34:	e51b0008 	ldr	r0, [fp, #-8]
  105f38:	e12fff33 	blx	r3
  105f3c:	e1a03000 	mov	r3, r0
}
  105f40:	e1a00003 	mov	r0, r3
  105f44:	e24bd004 	sub	sp, fp, #4
  105f48:	e8bd8800 	pop	{fp, pc}

00105f4c <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105f4c:	e92d4800 	push	{fp, lr}
  105f50:	e28db004 	add	fp, sp, #4
  105f54:	e24dd008 	sub	sp, sp, #8
  105f58:	e50b0008 	str	r0, [fp, #-8]
  105f5c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105f60:	e51b3008 	ldr	r3, [fp, #-8]
  105f64:	e3530000 	cmp	r3, #0
  105f68:	1a000005 	bne	105f84 <netdev_set_status_callback+0x38>
  105f6c:	e300223d 	movw	r2, #573	; 0x23d
  105f70:	e3051e84 	movw	r1, #24196	; 0x5e84
  105f74:	e3401014 	movt	r1, #20
  105f78:	e3050a68 	movw	r0, #23144	; 0x5a68
  105f7c:	e3400014 	movt	r0, #20
  105f80:	ebfff584 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105f84:	e51b300c 	ldr	r3, [fp, #-12]
  105f88:	e3530000 	cmp	r3, #0
  105f8c:	1a000005 	bne	105fa8 <netdev_set_status_callback+0x5c>
  105f90:	e300223e 	movw	r2, #574	; 0x23e
  105f94:	e3051e84 	movw	r1, #24196	; 0x5e84
  105f98:	e3401014 	movt	r1, #20
  105f9c:	e3050da8 	movw	r0, #23976	; 0x5da8
  105fa0:	e3400014 	movt	r0, #20
  105fa4:	ebfff57b 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105fa8:	e51b3008 	ldr	r3, [fp, #-8]
  105fac:	e51b200c 	ldr	r2, [fp, #-12]
  105fb0:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105fb4:	e320f000 	nop	{0}
  105fb8:	e24bd004 	sub	sp, fp, #4
  105fbc:	e8bd8800 	pop	{fp, pc}

00105fc0 <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105fc0:	e92d4800 	push	{fp, lr}
  105fc4:	e28db004 	add	fp, sp, #4
  105fc8:	e24dd008 	sub	sp, sp, #8
  105fcc:	e50b0008 	str	r0, [fp, #-8]
  105fd0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105fd4:	e51b3008 	ldr	r3, [fp, #-8]
  105fd8:	e3530000 	cmp	r3, #0
  105fdc:	1a000005 	bne	105ff8 <netdev_set_addr_callback+0x38>
  105fe0:	e300224b 	movw	r2, #587	; 0x24b
  105fe4:	e3051ea0 	movw	r1, #24224	; 0x5ea0
  105fe8:	e3401014 	movt	r1, #20
  105fec:	e3050a68 	movw	r0, #23144	; 0x5a68
  105ff0:	e3400014 	movt	r0, #20
  105ff4:	ebfff567 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  105ff8:	e51b300c 	ldr	r3, [fp, #-12]
  105ffc:	e3530000 	cmp	r3, #0
  106000:	1a000005 	bne	10601c <netdev_set_addr_callback+0x5c>
  106004:	e3a02f93 	mov	r2, #588	; 0x24c
  106008:	e3051ea0 	movw	r1, #24224	; 0x5ea0
  10600c:	e3401014 	movt	r1, #20
  106010:	e3050db8 	movw	r0, #23992	; 0x5db8
  106014:	e3400014 	movt	r0, #20
  106018:	ebfff55e 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  10601c:	e51b3008 	ldr	r3, [fp, #-8]
  106020:	e51b200c 	ldr	r2, [fp, #-12]
  106024:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  106028:	e320f000 	nop	{0}
  10602c:	e24bd004 	sub	sp, fp, #4
  106030:	e8bd8800 	pop	{fp, pc}

00106034 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  106034:	e92d4800 	push	{fp, lr}
  106038:	e28db004 	add	fp, sp, #4
  10603c:	e24dd008 	sub	sp, sp, #8
  106040:	e50b0008 	str	r0, [fp, #-8]
  106044:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  106048:	e51b300c 	ldr	r3, [fp, #-12]
  10604c:	e3530000 	cmp	r3, #0
  106050:	1a000005 	bne	10606c <netdev_low_level_set_ipaddr+0x38>
  106054:	e300225b 	movw	r2, #603	; 0x25b
  106058:	e3051ebc 	movw	r1, #24252	; 0x5ebc
  10605c:	e3401014 	movt	r1, #20
  106060:	e3050b14 	movw	r0, #23316	; 0x5b14
  106064:	e3400014 	movt	r0, #20
  106068:	ebfff54a 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  10606c:	e51b3008 	ldr	r3, [fp, #-8]
  106070:	e3530000 	cmp	r3, #0
  106074:	0a000025 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
  106078:	e51b3008 	ldr	r3, [fp, #-8]
  10607c:	e593200c 	ldr	r2, [r3, #12]
  106080:	e51b300c 	ldr	r3, [fp, #-12]
  106084:	e5933000 	ldr	r3, [r3]
  106088:	e1520003 	cmp	r2, r3
  10608c:	0a00001f 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  106090:	e51b300c 	ldr	r3, [fp, #-12]
  106094:	e5932000 	ldr	r2, [r3]
  106098:	e51b3008 	ldr	r3, [fp, #-8]
  10609c:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  1060a0:	e51b3008 	ldr	r3, [fp, #-8]
  1060a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060a8:	e2033001 	and	r3, r3, #1
  1060ac:	e6ef3073 	uxtb	r3, r3
  1060b0:	e3530000 	cmp	r3, #0
  1060b4:	0a00000c 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
  1060b8:	e51b3008 	ldr	r3, [fp, #-8]
  1060bc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060c0:	e1a03123 	lsr	r3, r3, #2
  1060c4:	e2033001 	and	r3, r3, #1
  1060c8:	e6ef3073 	uxtb	r3, r3
  1060cc:	e3530000 	cmp	r3, #0
  1060d0:	0a000005 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1060d4:	e51b3008 	ldr	r3, [fp, #-8]
  1060d8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060dc:	e3833080 	orr	r3, r3, #128	; 0x80
  1060e0:	e6ff2073 	uxth	r2, r3
  1060e4:	e51b3008 	ldr	r3, [fp, #-8]
  1060e8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  1060ec:	e51b3008 	ldr	r3, [fp, #-8]
  1060f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1060f4:	e3530000 	cmp	r3, #0
  1060f8:	0a000004 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  1060fc:	e51b3008 	ldr	r3, [fp, #-8]
  106100:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106104:	e3a01000 	mov	r1, #0
  106108:	e51b0008 	ldr	r0, [fp, #-8]
  10610c:	e12fff33 	blx	r3
        }
    }
}
  106110:	e320f000 	nop	{0}
  106114:	e24bd004 	sub	sp, fp, #4
  106118:	e8bd8800 	pop	{fp, pc}

0010611c <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  10611c:	e92d4800 	push	{fp, lr}
  106120:	e28db004 	add	fp, sp, #4
  106124:	e24dd008 	sub	sp, sp, #8
  106128:	e50b0008 	str	r0, [fp, #-8]
  10612c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  106130:	e51b300c 	ldr	r3, [fp, #-12]
  106134:	e3530000 	cmp	r3, #0
  106138:	1a000005 	bne	106154 <netdev_low_level_set_netmask+0x38>
  10613c:	e3a02f9f 	mov	r2, #636	; 0x27c
  106140:	e3051ed8 	movw	r1, #24280	; 0x5ed8
  106144:	e3401014 	movt	r1, #20
  106148:	e3050bb4 	movw	r0, #23476	; 0x5bb4
  10614c:	e3400014 	movt	r0, #20
  106150:	ebfff510 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  106154:	e51b3008 	ldr	r3, [fp, #-8]
  106158:	e3530000 	cmp	r3, #0
  10615c:	0a00002d 	beq	106218 <netdev_low_level_set_netmask+0xfc>
  106160:	e51b3008 	ldr	r3, [fp, #-8]
  106164:	e5932010 	ldr	r2, [r3, #16]
  106168:	e51b300c 	ldr	r3, [fp, #-12]
  10616c:	e5933000 	ldr	r3, [r3]
  106170:	e1520003 	cmp	r2, r3
  106174:	0a000027 	beq	106218 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106178:	e51b300c 	ldr	r3, [fp, #-12]
  10617c:	e5932000 	ldr	r2, [r3]
  106180:	e51b3008 	ldr	r3, [fp, #-8]
  106184:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106188:	e51b3008 	ldr	r3, [fp, #-8]
  10618c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106190:	e2033001 	and	r3, r3, #1
  106194:	e6ef3073 	uxtb	r3, r3
  106198:	e3530000 	cmp	r3, #0
  10619c:	0a000014 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
  1061a0:	e51b3008 	ldr	r3, [fp, #-8]
  1061a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061a8:	e1a03123 	lsr	r3, r3, #2
  1061ac:	e2033001 	and	r3, r3, #1
  1061b0:	e6ef3073 	uxtb	r3, r3
  1061b4:	e3530000 	cmp	r3, #0
  1061b8:	0a00000d 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061bc:	e51b3008 	ldr	r3, [fp, #-8]
  1061c0:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061c4:	e3530000 	cmp	r3, #0
  1061c8:	0a000009 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061cc:	e51b3008 	ldr	r3, [fp, #-8]
  1061d0:	e593300c 	ldr	r3, [r3, #12]
  1061d4:	e3530000 	cmp	r3, #0
  1061d8:	0a000005 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1061dc:	e51b3008 	ldr	r3, [fp, #-8]
  1061e0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061e4:	e3833080 	orr	r3, r3, #128	; 0x80
  1061e8:	e6ff2073 	uxth	r2, r3
  1061ec:	e51b3008 	ldr	r3, [fp, #-8]
  1061f0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  1061f4:	e51b3008 	ldr	r3, [fp, #-8]
  1061f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1061fc:	e3530000 	cmp	r3, #0
  106200:	0a000004 	beq	106218 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106204:	e51b3008 	ldr	r3, [fp, #-8]
  106208:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10620c:	e3a01001 	mov	r1, #1
  106210:	e51b0008 	ldr	r0, [fp, #-8]
  106214:	e12fff33 	blx	r3
        }
    }
}
  106218:	e320f000 	nop	{0}
  10621c:	e24bd004 	sub	sp, fp, #4
  106220:	e8bd8800 	pop	{fp, pc}

00106224 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  106224:	e92d4800 	push	{fp, lr}
  106228:	e28db004 	add	fp, sp, #4
  10622c:	e24dd008 	sub	sp, sp, #8
  106230:	e50b0008 	str	r0, [fp, #-8]
  106234:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  106238:	e51b300c 	ldr	r3, [fp, #-12]
  10623c:	e3530000 	cmp	r3, #0
  106240:	1a000005 	bne	10625c <netdev_low_level_set_gw+0x38>
  106244:	e300229e 	movw	r2, #670	; 0x29e
  106248:	e3051ef8 	movw	r1, #24312	; 0x5ef8
  10624c:	e3401014 	movt	r1, #20
  106250:	e3050c64 	movw	r0, #23652	; 0x5c64
  106254:	e3400014 	movt	r0, #20
  106258:	ebfff4ce 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  10625c:	e51b3008 	ldr	r3, [fp, #-8]
  106260:	e3530000 	cmp	r3, #0
  106264:	0a00002d 	beq	106320 <netdev_low_level_set_gw+0xfc>
  106268:	e51b3008 	ldr	r3, [fp, #-8]
  10626c:	e5932014 	ldr	r2, [r3, #20]
  106270:	e51b300c 	ldr	r3, [fp, #-12]
  106274:	e5933000 	ldr	r3, [r3]
  106278:	e1520003 	cmp	r2, r3
  10627c:	0a000027 	beq	106320 <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  106280:	e51b300c 	ldr	r3, [fp, #-12]
  106284:	e5932000 	ldr	r2, [r3]
  106288:	e51b3008 	ldr	r3, [fp, #-8]
  10628c:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106290:	e51b3008 	ldr	r3, [fp, #-8]
  106294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106298:	e2033001 	and	r3, r3, #1
  10629c:	e6ef3073 	uxtb	r3, r3
  1062a0:	e3530000 	cmp	r3, #0
  1062a4:	0a000014 	beq	1062fc <netdev_low_level_set_gw+0xd8>
  1062a8:	e51b3008 	ldr	r3, [fp, #-8]
  1062ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062b0:	e1a03123 	lsr	r3, r3, #2
  1062b4:	e2033001 	and	r3, r3, #1
  1062b8:	e6ef3073 	uxtb	r3, r3
  1062bc:	e3530000 	cmp	r3, #0
  1062c0:	0a00000d 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062c4:	e51b3008 	ldr	r3, [fp, #-8]
  1062c8:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062cc:	e3530000 	cmp	r3, #0
  1062d0:	0a000009 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062d4:	e51b3008 	ldr	r3, [fp, #-8]
  1062d8:	e593300c 	ldr	r3, [r3, #12]
  1062dc:	e3530000 	cmp	r3, #0
  1062e0:	0a000005 	beq	1062fc <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1062e4:	e51b3008 	ldr	r3, [fp, #-8]
  1062e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062ec:	e3833080 	orr	r3, r3, #128	; 0x80
  1062f0:	e6ff2073 	uxth	r2, r3
  1062f4:	e51b3008 	ldr	r3, [fp, #-8]
  1062f8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  1062fc:	e51b3008 	ldr	r3, [fp, #-8]
  106300:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106304:	e3530000 	cmp	r3, #0
  106308:	0a000004 	beq	106320 <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  10630c:	e51b3008 	ldr	r3, [fp, #-8]
  106310:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106314:	e3a01002 	mov	r1, #2
  106318:	e51b0008 	ldr	r0, [fp, #-8]
  10631c:	e12fff33 	blx	r3
        }
    }
}
  106320:	e320f000 	nop	{0}
  106324:	e24bd004 	sub	sp, fp, #4
  106328:	e8bd8800 	pop	{fp, pc}

0010632c <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  10632c:	e92d4800 	push	{fp, lr}
  106330:	e28db004 	add	fp, sp, #4
  106334:	e24dd018 	sub	sp, sp, #24
  106338:	e50b0010 	str	r0, [fp, #-16]
  10633c:	e1a03001 	mov	r3, r1
  106340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106344:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  106348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10634c:	e3530000 	cmp	r3, #0
  106350:	1a000005 	bne	10636c <netdev_low_level_set_dns_server+0x40>
  106354:	e30022c3 	movw	r2, #707	; 0x2c3
  106358:	e3051f10 	movw	r1, #24336	; 0x5f10
  10635c:	e3401014 	movt	r1, #20
  106360:	e3050d10 	movw	r0, #23824	; 0x5d10
  106364:	e3400014 	movt	r0, #20
  106368:	ebfff48a 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  10636c:	e51b3010 	ldr	r3, [fp, #-16]
  106370:	e3530000 	cmp	r3, #0
  106374:	0a000023 	beq	106408 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106378:	e3a03000 	mov	r3, #0
  10637c:	e50b3008 	str	r3, [fp, #-8]
  106380:	ea00000a 	b	1063b0 <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  106384:	e51b3010 	ldr	r3, [fp, #-16]
  106388:	e51b2008 	ldr	r2, [fp, #-8]
  10638c:	e2822006 	add	r2, r2, #6
  106390:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  106394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106398:	e5933000 	ldr	r3, [r3]
  10639c:	e1520003 	cmp	r2, r3
  1063a0:	0a00001a 	beq	106410 <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1063a4:	e51b3008 	ldr	r3, [fp, #-8]
  1063a8:	e2833001 	add	r3, r3, #1
  1063ac:	e50b3008 	str	r3, [fp, #-8]
  1063b0:	e51b3008 	ldr	r3, [fp, #-8]
  1063b4:	e3530001 	cmp	r3, #1
  1063b8:	9afffff1 	bls	106384 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  1063bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1063c0:	e3530001 	cmp	r3, #1
  1063c4:	8a000012 	bhi	106414 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  1063c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1063cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063d0:	e5931000 	ldr	r1, [r3]
  1063d4:	e51b3010 	ldr	r3, [fp, #-16]
  1063d8:	e2822006 	add	r2, r2, #6
  1063dc:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  1063e0:	e51b3010 	ldr	r3, [fp, #-16]
  1063e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063e8:	e3530000 	cmp	r3, #0
  1063ec:	0a000008 	beq	106414 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  1063f0:	e51b3010 	ldr	r3, [fp, #-16]
  1063f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063f8:	e3a01003 	mov	r1, #3
  1063fc:	e51b0010 	ldr	r0, [fp, #-16]
  106400:	e12fff33 	blx	r3
  106404:	ea000002 	b	106414 <netdev_low_level_set_dns_server+0xe8>
        return;
  106408:	e320f000 	nop	{0}
  10640c:	ea000000 	b	106414 <netdev_low_level_set_dns_server+0xe8>
            return;
  106410:	e320f000 	nop	{0}
        }
    }
}
  106414:	e24bd004 	sub	sp, fp, #4
  106418:	e8bd8800 	pop	{fp, pc}

0010641c <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  10641c:	e92d4800 	push	{fp, lr}
  106420:	e28db004 	add	fp, sp, #4
  106424:	e24dd008 	sub	sp, sp, #8
  106428:	e50b0008 	str	r0, [fp, #-8]
  10642c:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e3530000 	cmp	r3, #0
  106438:	0a000024 	beq	1064d0 <netdev_low_level_set_status+0xb4>
  10643c:	e51b3008 	ldr	r3, [fp, #-8]
  106440:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106444:	e2033001 	and	r3, r3, #1
  106448:	e51b200c 	ldr	r2, [fp, #-12]
  10644c:	e1520003 	cmp	r2, r3
  106450:	0a00001e 	beq	1064d0 <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  106454:	e51b300c 	ldr	r3, [fp, #-12]
  106458:	e3530000 	cmp	r3, #0
  10645c:	0a000006 	beq	10647c <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  106460:	e51b3008 	ldr	r3, [fp, #-8]
  106464:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106468:	e3833001 	orr	r3, r3, #1
  10646c:	e6ff2073 	uxth	r2, r3
  106470:	e51b3008 	ldr	r3, [fp, #-8]
  106474:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106478:	ea000005 	b	106494 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  10647c:	e51b3008 	ldr	r3, [fp, #-8]
  106480:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106484:	e3c33001 	bic	r3, r3, #1
  106488:	e6ff2073 	uxth	r2, r3
  10648c:	e51b3008 	ldr	r3, [fp, #-8]
  106490:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  106494:	e51b3008 	ldr	r3, [fp, #-8]
  106498:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10649c:	e3530000 	cmp	r3, #0
  1064a0:	0a00000a 	beq	1064d0 <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  1064a4:	e51b3008 	ldr	r3, [fp, #-8]
  1064a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064ac:	e51b200c 	ldr	r2, [fp, #-12]
  1064b0:	e3520000 	cmp	r2, #0
  1064b4:	0a000001 	beq	1064c0 <netdev_low_level_set_status+0xa4>
  1064b8:	e3a02004 	mov	r2, #4
  1064bc:	ea000000 	b	1064c4 <netdev_low_level_set_status+0xa8>
  1064c0:	e3a02005 	mov	r2, #5
  1064c4:	e1a01002 	mov	r1, r2
  1064c8:	e51b0008 	ldr	r0, [fp, #-8]
  1064cc:	e12fff33 	blx	r3
        }
    }
}
  1064d0:	e320f000 	nop	{0}
  1064d4:	e24bd004 	sub	sp, fp, #4
  1064d8:	e8bd8800 	pop	{fp, pc}

001064dc <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064dc:	e92d4800 	push	{fp, lr}
  1064e0:	e28db004 	add	fp, sp, #4
  1064e4:	e24dd008 	sub	sp, sp, #8
  1064e8:	e50b0008 	str	r0, [fp, #-8]
  1064ec:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  1064f0:	e51b3008 	ldr	r3, [fp, #-8]
  1064f4:	e3530000 	cmp	r3, #0
  1064f8:	0a00003f 	beq	1065fc <netdev_low_level_set_link_status+0x120>
  1064fc:	e51b3008 	ldr	r3, [fp, #-8]
  106500:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106504:	e1a03123 	lsr	r3, r3, #2
  106508:	e2033001 	and	r3, r3, #1
  10650c:	e51b200c 	ldr	r2, [fp, #-12]
  106510:	e1520003 	cmp	r2, r3
  106514:	0a000038 	beq	1065fc <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  106518:	e51b300c 	ldr	r3, [fp, #-12]
  10651c:	e3530000 	cmp	r3, #0
  106520:	0a00001a 	beq	106590 <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  106524:	e51b3008 	ldr	r3, [fp, #-8]
  106528:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10652c:	e3833004 	orr	r3, r3, #4
  106530:	e6ff2073 	uxth	r2, r3
  106534:	e51b3008 	ldr	r3, [fp, #-8]
  106538:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  10653c:	e51b3008 	ldr	r3, [fp, #-8]
  106540:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106544:	e2033001 	and	r3, r3, #1
  106548:	e6ef3073 	uxtb	r3, r3
  10654c:	e3530000 	cmp	r3, #0
  106550:	0a00001a 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106554:	e51b3008 	ldr	r3, [fp, #-8]
  106558:	e283300c 	add	r3, r3, #12
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a000016 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106564:	e51b3008 	ldr	r3, [fp, #-8]
  106568:	e593300c 	ldr	r3, [r3, #12]
  10656c:	e3530000 	cmp	r3, #0
  106570:	0a000012 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106574:	e51b3008 	ldr	r3, [fp, #-8]
  106578:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10657c:	e3833080 	orr	r3, r3, #128	; 0x80
  106580:	e6ff2073 	uxth	r2, r3
  106584:	e51b3008 	ldr	r3, [fp, #-8]
  106588:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  10658c:	ea00000b 	b	1065c0 <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  106590:	e51b3008 	ldr	r3, [fp, #-8]
  106594:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106598:	e3c33004 	bic	r3, r3, #4
  10659c:	e6ff2073 	uxth	r2, r3
  1065a0:	e51b3008 	ldr	r3, [fp, #-8]
  1065a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1065a8:	e51b3008 	ldr	r3, [fp, #-8]
  1065ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b0:	e3c33080 	bic	r3, r3, #128	; 0x80
  1065b4:	e6ff2073 	uxth	r2, r3
  1065b8:	e51b3008 	ldr	r3, [fp, #-8]
  1065bc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  1065c0:	e51b3008 	ldr	r3, [fp, #-8]
  1065c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065c8:	e3530000 	cmp	r3, #0
  1065cc:	0a00000a 	beq	1065fc <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  1065d0:	e51b3008 	ldr	r3, [fp, #-8]
  1065d4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065d8:	e51b200c 	ldr	r2, [fp, #-12]
  1065dc:	e3520000 	cmp	r2, #0
  1065e0:	0a000001 	beq	1065ec <netdev_low_level_set_link_status+0x110>
  1065e4:	e3a02006 	mov	r2, #6
  1065e8:	ea000000 	b	1065f0 <netdev_low_level_set_link_status+0x114>
  1065ec:	e3a02007 	mov	r2, #7
  1065f0:	e1a01002 	mov	r1, r2
  1065f4:	e51b0008 	ldr	r0, [fp, #-8]
  1065f8:	e12fff33 	blx	r3
        }
    }
}
  1065fc:	e320f000 	nop	{0}
  106600:	e24bd004 	sub	sp, fp, #4
  106604:	e8bd8800 	pop	{fp, pc}

00106608 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106608:	e92d4800 	push	{fp, lr}
  10660c:	e28db004 	add	fp, sp, #4
  106610:	e24dd008 	sub	sp, sp, #8
  106614:	e50b0008 	str	r0, [fp, #-8]
  106618:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  10661c:	e51b3008 	ldr	r3, [fp, #-8]
  106620:	e3530000 	cmp	r3, #0
  106624:	0a000025 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
  106628:	e51b3008 	ldr	r3, [fp, #-8]
  10662c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106630:	e1a03423 	lsr	r3, r3, #8
  106634:	e2033001 	and	r3, r3, #1
  106638:	e51b200c 	ldr	r2, [fp, #-12]
  10663c:	e1520003 	cmp	r2, r3
  106640:	0a00001e 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  106644:	e51b300c 	ldr	r3, [fp, #-12]
  106648:	e3530000 	cmp	r3, #0
  10664c:	0a000006 	beq	10666c <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  106650:	e51b3008 	ldr	r3, [fp, #-8]
  106654:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106658:	e3833c01 	orr	r3, r3, #256	; 0x100
  10665c:	e6ff2073 	uxth	r2, r3
  106660:	e51b3008 	ldr	r3, [fp, #-8]
  106664:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106668:	ea000005 	b	106684 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  10666c:	e51b3008 	ldr	r3, [fp, #-8]
  106670:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106674:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106678:	e6ff2073 	uxth	r2, r3
  10667c:	e51b3008 	ldr	r3, [fp, #-8]
  106680:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106684:	e51b3008 	ldr	r3, [fp, #-8]
  106688:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10668c:	e3530000 	cmp	r3, #0
  106690:	0a00000a 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106694:	e51b3008 	ldr	r3, [fp, #-8]
  106698:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10669c:	e51b200c 	ldr	r2, [fp, #-12]
  1066a0:	e3520000 	cmp	r2, #0
  1066a4:	0a000001 	beq	1066b0 <netdev_low_level_set_dhcp_status+0xa8>
  1066a8:	e3a0200a 	mov	r2, #10
  1066ac:	ea000000 	b	1066b4 <netdev_low_level_set_dhcp_status+0xac>
  1066b0:	e3a0200b 	mov	r2, #11
  1066b4:	e1a01002 	mov	r1, r2
  1066b8:	e51b0008 	ldr	r0, [fp, #-8]
  1066bc:	e12fff33 	blx	r3
        }
    }
}
  1066c0:	e320f000 	nop	{0}
  1066c4:	e24bd004 	sub	sp, fp, #4
  1066c8:	e8bd8800 	pop	{fp, pc}

001066cc <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1066cc:	e92d4800 	push	{fp, lr}
  1066d0:	e28db004 	add	fp, sp, #4
  1066d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1066d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1066dc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  1066e0:	e24b3020 	sub	r3, fp, #32
  1066e4:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  1066e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1066ec:	e5d33000 	ldrb	r3, [r3]
  1066f0:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  1066f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1066f8:	e353002f 	cmp	r3, #47	; 0x2f
  1066fc:	9a000002 	bls	10670c <netdev_ip4addr_aton+0x40>
  106700:	e55b300a 	ldrb	r3, [fp, #-10]
  106704:	e3530039 	cmp	r3, #57	; 0x39
  106708:	9a000001 	bls	106714 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  10670c:	e3a03000 	mov	r3, #0
  106710:	ea0000f7 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  106714:	e3a03000 	mov	r3, #0
  106718:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  10671c:	e3a0300a 	mov	r3, #10
  106720:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  106724:	e55b300a 	ldrb	r3, [fp, #-10]
  106728:	e3530030 	cmp	r3, #48	; 0x30
  10672c:	1a000016 	bne	10678c <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  106730:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106734:	e2833001 	add	r3, r3, #1
  106738:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10673c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106740:	e5d33000 	ldrb	r3, [r3]
  106744:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  106748:	e55b300a 	ldrb	r3, [fp, #-10]
  10674c:	e3530078 	cmp	r3, #120	; 0x78
  106750:	0a000002 	beq	106760 <netdev_ip4addr_aton+0x94>
  106754:	e55b300a 	ldrb	r3, [fp, #-10]
  106758:	e3530058 	cmp	r3, #88	; 0x58
  10675c:	1a000008 	bne	106784 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  106760:	e3a03010 	mov	r3, #16
  106764:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10676c:	e2833001 	add	r3, r3, #1
  106770:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106778:	e5d33000 	ldrb	r3, [r3]
  10677c:	e54b300a 	strb	r3, [fp, #-10]
  106780:	ea000001 	b	10678c <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106784:	e3a03008 	mov	r3, #8
  106788:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  10678c:	e55b300a 	ldrb	r3, [fp, #-10]
  106790:	e353002f 	cmp	r3, #47	; 0x2f
  106794:	9a000010 	bls	1067dc <netdev_ip4addr_aton+0x110>
  106798:	e55b300a 	ldrb	r3, [fp, #-10]
  10679c:	e3530039 	cmp	r3, #57	; 0x39
  1067a0:	8a00000d 	bhi	1067dc <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  1067a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1067a8:	e51b2008 	ldr	r2, [fp, #-8]
  1067ac:	e0020392 	mul	r2, r2, r3
  1067b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b4:	e0823003 	add	r3, r2, r3
  1067b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1067bc:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1067c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067c4:	e2833001 	add	r3, r3, #1
  1067c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067d0:	e5d33000 	ldrb	r3, [r3]
  1067d4:	e54b300a 	strb	r3, [fp, #-10]
  1067d8:	ea00002a 	b	106888 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  1067dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1067e0:	e3530010 	cmp	r3, #16
  1067e4:	1a000028 	bne	10688c <netdev_ip4addr_aton+0x1c0>
  1067e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1067ec:	e353002f 	cmp	r3, #47	; 0x2f
  1067f0:	9a000002 	bls	106800 <netdev_ip4addr_aton+0x134>
  1067f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067f8:	e3530039 	cmp	r3, #57	; 0x39
  1067fc:	9a00000b 	bls	106830 <netdev_ip4addr_aton+0x164>
  106800:	e55b300a 	ldrb	r3, [fp, #-10]
  106804:	e3530060 	cmp	r3, #96	; 0x60
  106808:	9a000002 	bls	106818 <netdev_ip4addr_aton+0x14c>
  10680c:	e55b300a 	ldrb	r3, [fp, #-10]
  106810:	e3530066 	cmp	r3, #102	; 0x66
  106814:	9a000005 	bls	106830 <netdev_ip4addr_aton+0x164>
  106818:	e55b300a 	ldrb	r3, [fp, #-10]
  10681c:	e3530040 	cmp	r3, #64	; 0x40
  106820:	9a000019 	bls	10688c <netdev_ip4addr_aton+0x1c0>
  106824:	e55b300a 	ldrb	r3, [fp, #-10]
  106828:	e3530046 	cmp	r3, #70	; 0x46
  10682c:	8a000016 	bhi	10688c <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  106830:	e51b3008 	ldr	r3, [fp, #-8]
  106834:	e1a03203 	lsl	r3, r3, #4
  106838:	e55b200a 	ldrb	r2, [fp, #-10]
  10683c:	e282100a 	add	r1, r2, #10
  106840:	e55b200a 	ldrb	r2, [fp, #-10]
  106844:	e3520060 	cmp	r2, #96	; 0x60
  106848:	9a000004 	bls	106860 <netdev_ip4addr_aton+0x194>
  10684c:	e55b200a 	ldrb	r2, [fp, #-10]
  106850:	e352007a 	cmp	r2, #122	; 0x7a
  106854:	8a000001 	bhi	106860 <netdev_ip4addr_aton+0x194>
  106858:	e3a02061 	mov	r2, #97	; 0x61
  10685c:	ea000000 	b	106864 <netdev_ip4addr_aton+0x198>
  106860:	e3a02041 	mov	r2, #65	; 0x41
  106864:	e0412002 	sub	r2, r1, r2
  106868:	e1833002 	orr	r3, r3, r2
  10686c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106874:	e2833001 	add	r3, r3, #1
  106878:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10687c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106880:	e5d33000 	ldrb	r3, [r3]
  106884:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106888:	eaffffbf 	b	10678c <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  10688c:	e55b300a 	ldrb	r3, [fp, #-10]
  106890:	e353002e 	cmp	r3, #46	; 0x2e
  106894:	1a000012 	bne	1068e4 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106898:	e24b3020 	sub	r3, fp, #32
  10689c:	e283300c 	add	r3, r3, #12
  1068a0:	e51b2010 	ldr	r2, [fp, #-16]
  1068a4:	e1520003 	cmp	r2, r3
  1068a8:	3a000001 	bcc	1068b4 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  1068ac:	e3a03000 	mov	r3, #0
  1068b0:	ea00008f 	b	106af4 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  1068b4:	e51b3010 	ldr	r3, [fp, #-16]
  1068b8:	e2832004 	add	r2, r3, #4
  1068bc:	e50b2010 	str	r2, [fp, #-16]
  1068c0:	e51b2008 	ldr	r2, [fp, #-8]
  1068c4:	e5832000 	str	r2, [r3]
            c = *++cp;
  1068c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068cc:	e2833001 	add	r3, r3, #1
  1068d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1068d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068d8:	e5d33000 	ldrb	r3, [r3]
  1068dc:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  1068e0:	eaffff83 	b	1066f4 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  1068e4:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  1068e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1068ec:	e3530000 	cmp	r3, #0
  1068f0:	0a000013 	beq	106944 <netdev_ip4addr_aton+0x278>
  1068f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1068f8:	e3530020 	cmp	r3, #32
  1068fc:	0a000010 	beq	106944 <netdev_ip4addr_aton+0x278>
  106900:	e55b300a 	ldrb	r3, [fp, #-10]
  106904:	e353000c 	cmp	r3, #12
  106908:	0a00000d 	beq	106944 <netdev_ip4addr_aton+0x278>
  10690c:	e55b300a 	ldrb	r3, [fp, #-10]
  106910:	e353000a 	cmp	r3, #10
  106914:	0a00000a 	beq	106944 <netdev_ip4addr_aton+0x278>
  106918:	e55b300a 	ldrb	r3, [fp, #-10]
  10691c:	e353000d 	cmp	r3, #13
  106920:	0a000007 	beq	106944 <netdev_ip4addr_aton+0x278>
  106924:	e55b300a 	ldrb	r3, [fp, #-10]
  106928:	e3530009 	cmp	r3, #9
  10692c:	0a000004 	beq	106944 <netdev_ip4addr_aton+0x278>
  106930:	e55b300a 	ldrb	r3, [fp, #-10]
  106934:	e353000b 	cmp	r3, #11
  106938:	0a000001 	beq	106944 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  10693c:	e3a03000 	mov	r3, #0
  106940:	ea00006b 	b	106af4 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  106944:	e51b2010 	ldr	r2, [fp, #-16]
  106948:	e24b3020 	sub	r3, fp, #32
  10694c:	e0423003 	sub	r3, r2, r3
  106950:	e1a03143 	asr	r3, r3, #2
  106954:	e2833001 	add	r3, r3, #1
  106958:	e3530004 	cmp	r3, #4
  10695c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  106960:	ea000048 	b	106a88 <netdev_ip4addr_aton+0x3bc>
  106964:	00106978 	.word	0x00106978
  106968:	00106aa4 	.word	0x00106aa4
  10696c:	00106980 	.word	0x00106980
  106970:	001069c0 	.word	0x001069c0
  106974:	00106a18 	.word	0x00106a18
    {

    case 0:
        return 0; /* initial nondigit */
  106978:	e3a03000 	mov	r3, #0
  10697c:	ea00005c 	b	106af4 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106980:	e51b3008 	ldr	r3, [fp, #-8]
  106984:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106988:	3a000001 	bcc	106994 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  10698c:	e3a03000 	mov	r3, #0
  106990:	ea000057 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106998:	e35300ff 	cmp	r3, #255	; 0xff
  10699c:	9a000001 	bls	1069a8 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  1069a0:	e3a03000 	mov	r3, #0
  1069a4:	ea000052 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  1069a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069ac:	e1a03c03 	lsl	r3, r3, #24
  1069b0:	e51b2008 	ldr	r2, [fp, #-8]
  1069b4:	e1823003 	orr	r3, r2, r3
  1069b8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1069bc:	ea000039 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  1069c0:	e51b3008 	ldr	r3, [fp, #-8]
  1069c4:	e3530801 	cmp	r3, #65536	; 0x10000
  1069c8:	3a000001 	bcc	1069d4 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  1069cc:	e3a03000 	mov	r3, #0
  1069d0:	ea000047 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  1069d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069d8:	e35300ff 	cmp	r3, #255	; 0xff
  1069dc:	8a000002 	bhi	1069ec <netdev_ip4addr_aton+0x320>
  1069e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1069e4:	e35300ff 	cmp	r3, #255	; 0xff
  1069e8:	9a000001 	bls	1069f4 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  1069ec:	e3a03000 	mov	r3, #0
  1069f0:	ea00003f 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  1069f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f8:	e1a02c03 	lsl	r2, r3, #24
  1069fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a00:	e1a03803 	lsl	r3, r3, #16
  106a04:	e1823003 	orr	r3, r2, r3
  106a08:	e51b2008 	ldr	r2, [fp, #-8]
  106a0c:	e1823003 	orr	r3, r2, r3
  106a10:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a14:	ea000023 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106a18:	e51b3008 	ldr	r3, [fp, #-8]
  106a1c:	e35300ff 	cmp	r3, #255	; 0xff
  106a20:	9a000001 	bls	106a2c <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106a24:	e3a03000 	mov	r3, #0
  106a28:	ea000031 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a30:	e35300ff 	cmp	r3, #255	; 0xff
  106a34:	8a000005 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a3c:	e35300ff 	cmp	r3, #255	; 0xff
  106a40:	8a000002 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a48:	e35300ff 	cmp	r3, #255	; 0xff
  106a4c:	9a000001 	bls	106a58 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106a50:	e3a03000 	mov	r3, #0
  106a54:	ea000026 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a5c:	e1a02c03 	lsl	r2, r3, #24
  106a60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a64:	e1a03803 	lsl	r3, r3, #16
  106a68:	e1822003 	orr	r2, r2, r3
  106a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a70:	e1a03403 	lsl	r3, r3, #8
  106a74:	e1823003 	orr	r3, r2, r3
  106a78:	e51b2008 	ldr	r2, [fp, #-8]
  106a7c:	e1823003 	orr	r3, r2, r3
  106a80:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a84:	ea000007 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106a88:	e3a020a7 	mov	r2, #167	; 0xa7
  106a8c:	e3051f34 	movw	r1, #24372	; 0x5f34
  106a90:	e3401014 	movt	r1, #20
  106a94:	e3050f30 	movw	r0, #24368	; 0x5f30
  106a98:	e3400014 	movt	r0, #20
  106a9c:	ebfff2bd 	bl	103598 <rt_assert_handler>
        break;
  106aa0:	ea000000 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
        break;
  106aa4:	e320f000 	nop	{0}
    }
    if (addr)
  106aa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aac:	e3530000 	cmp	r3, #0
  106ab0:	0a00000e 	beq	106af0 <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106ab4:	e51b3008 	ldr	r3, [fp, #-8]
  106ab8:	e1a02c03 	lsl	r2, r3, #24
  106abc:	e51b3008 	ldr	r3, [fp, #-8]
  106ac0:	e1a03403 	lsl	r3, r3, #8
  106ac4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106ac8:	e1822003 	orr	r2, r2, r3
  106acc:	e51b3008 	ldr	r3, [fp, #-8]
  106ad0:	e1a03423 	lsr	r3, r3, #8
  106ad4:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106ad8:	e1822003 	orr	r2, r2, r3
  106adc:	e51b3008 	ldr	r3, [fp, #-8]
  106ae0:	e1a03c23 	lsr	r3, r3, #24
  106ae4:	e1822003 	orr	r2, r2, r3
  106ae8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aec:	e5832000 	str	r2, [r3]
    }
    return 1;
  106af0:	e3a03001 	mov	r3, #1
}
  106af4:	e1a00003 	mov	r0, r3
  106af8:	e24bd004 	sub	sp, fp, #4
  106afc:	e8bd8800 	pop	{fp, pc}

00106b00 <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b04:	e28db000 	add	fp, sp, #0
  106b08:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b10:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106b14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106b18:	e3a03000 	mov	r3, #0
  106b1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106b24:	e5933000 	ldr	r3, [r3]
  106b28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106b2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b30:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106b34:	e24b301c 	sub	r3, fp, #28
  106b38:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106b3c:	e3a03000 	mov	r3, #0
  106b40:	e54b300d 	strb	r3, [fp, #-13]
  106b44:	ea00004b 	b	106c78 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106b48:	e3a03000 	mov	r3, #0
  106b4c:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106b50:	e51b300c 	ldr	r3, [fp, #-12]
  106b54:	e5d31000 	ldrb	r1, [r3]
  106b58:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b5c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b60:	e0832391 	umull	r2, r3, r1, r3
  106b64:	e1a031a3 	lsr	r3, r3, #3
  106b68:	e3a0200a 	mov	r2, #10
  106b6c:	e0030392 	mul	r3, r2, r3
  106b70:	e0413003 	sub	r3, r1, r3
  106b74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106b78:	e51b300c 	ldr	r3, [fp, #-12]
  106b7c:	e5d32000 	ldrb	r2, [r3]
  106b80:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b84:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b88:	e0832392 	umull	r2, r3, r2, r3
  106b8c:	e1a031a3 	lsr	r3, r3, #3
  106b90:	e6ef2073 	uxtb	r2, r3
  106b94:	e51b300c 	ldr	r3, [fp, #-12]
  106b98:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106b9c:	e55b300e 	ldrb	r3, [fp, #-14]
  106ba0:	e2832001 	add	r2, r3, #1
  106ba4:	e54b200e 	strb	r2, [fp, #-14]
  106ba8:	e1a01003 	mov	r1, r3
  106bac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106bb0:	e2833030 	add	r3, r3, #48	; 0x30
  106bb4:	e6ef2073 	uxtb	r2, r3
  106bb8:	e24b3004 	sub	r3, fp, #4
  106bbc:	e0833001 	add	r3, r3, r1
  106bc0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106bc4:	e51b300c 	ldr	r3, [fp, #-12]
  106bc8:	e5d33000 	ldrb	r3, [r3]
  106bcc:	e3530000 	cmp	r3, #0
  106bd0:	1affffde 	bne	106b50 <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106bd4:	ea00000f 	b	106c18 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106bdc:	e2832001 	add	r2, r3, #1
  106be0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106be8:	e1520003 	cmp	r2, r3
  106bec:	ca000001 	bgt	106bf8 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106bf0:	e3a03000 	mov	r3, #0
  106bf4:	ea000029 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106bf8:	e55b200e 	ldrb	r2, [fp, #-14]
  106bfc:	e51b3008 	ldr	r3, [fp, #-8]
  106c00:	e2831001 	add	r1, r3, #1
  106c04:	e50b1008 	str	r1, [fp, #-8]
  106c08:	e24b1004 	sub	r1, fp, #4
  106c0c:	e0812002 	add	r2, r1, r2
  106c10:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106c14:	e5c32000 	strb	r2, [r3]
        while (i--)
  106c18:	e55b300e 	ldrb	r3, [fp, #-14]
  106c1c:	e2432001 	sub	r2, r3, #1
  106c20:	e54b200e 	strb	r2, [fp, #-14]
  106c24:	e3530000 	cmp	r3, #0
  106c28:	1affffea 	bne	106bd8 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c30:	e2832001 	add	r2, r3, #1
  106c34:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c38:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c3c:	e1520003 	cmp	r2, r3
  106c40:	ca000001 	bgt	106c4c <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106c44:	e3a03000 	mov	r3, #0
  106c48:	ea000014 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106c4c:	e51b3008 	ldr	r3, [fp, #-8]
  106c50:	e2832001 	add	r2, r3, #1
  106c54:	e50b2008 	str	r2, [fp, #-8]
  106c58:	e3a0202e 	mov	r2, #46	; 0x2e
  106c5c:	e5c32000 	strb	r2, [r3]
        ap++;
  106c60:	e51b300c 	ldr	r3, [fp, #-12]
  106c64:	e2833001 	add	r3, r3, #1
  106c68:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106c6c:	e55b300d 	ldrb	r3, [fp, #-13]
  106c70:	e2833001 	add	r3, r3, #1
  106c74:	e54b300d 	strb	r3, [fp, #-13]
  106c78:	e55b300d 	ldrb	r3, [fp, #-13]
  106c7c:	e3530003 	cmp	r3, #3
  106c80:	9affffb0 	bls	106b48 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106c84:	e51b3008 	ldr	r3, [fp, #-8]
  106c88:	e2433001 	sub	r3, r3, #1
  106c8c:	e50b3008 	str	r3, [fp, #-8]
  106c90:	e51b3008 	ldr	r3, [fp, #-8]
  106c94:	e3a02000 	mov	r2, #0
  106c98:	e5c32000 	strb	r2, [r3]
    return buf;
  106c9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106ca0:	e1a00003 	mov	r0, r3
  106ca4:	e28bd000 	add	sp, fp, #0
  106ca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106cac:	e12fff1e 	bx	lr

00106cb0 <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106cb0:	e92d4800 	push	{fp, lr}
  106cb4:	e28db004 	add	fp, sp, #4
  106cb8:	e24dd008 	sub	sp, sp, #8
  106cbc:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106cc0:	e3a02010 	mov	r2, #16
  106cc4:	e30d1450 	movw	r1, #54352	; 0xd450
  106cc8:	e3401014 	movt	r1, #20
  106ccc:	e51b0008 	ldr	r0, [fp, #-8]
  106cd0:	ebffff8a 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106cd4:	e1a03000 	mov	r3, r0
}
  106cd8:	e1a00003 	mov	r0, r3
  106cdc:	e24bd004 	sub	sp, fp, #4
  106ce0:	e8bd8800 	pop	{fp, pc}

00106ce4 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106ce4:	e92d4800 	push	{fp, lr}
  106ce8:	e28db004 	add	fp, sp, #4
  106cec:	e24dd010 	sub	sp, sp, #16
  106cf0:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106cf4:	e24b3008 	sub	r3, fp, #8
  106cf8:	e1a01003 	mov	r1, r3
  106cfc:	e51b0010 	ldr	r0, [fp, #-16]
  106d00:	ebfffe71 	bl	1066cc <netdev_ip4addr_aton>
  106d04:	e1a03000 	mov	r3, r0
  106d08:	e3530000 	cmp	r3, #0
  106d0c:	0a000001 	beq	106d18 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d10:	e51b3008 	ldr	r3, [fp, #-8]
  106d14:	ea000000 	b	106d1c <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106d18:	e3e03000 	mvn	r3, #0
}
  106d1c:	e1a00003 	mov	r0, r3
  106d20:	e24bd004 	sub	sp, fp, #4
  106d24:	e8bd8800 	pop	{fp, pc}

00106d28 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106d28:	e92d4800 	push	{fp, lr}
  106d2c:	e28db004 	add	fp, sp, #4
  106d30:	e24dd018 	sub	sp, sp, #24
  106d34:	e50b0010 	str	r0, [fp, #-16]
  106d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106d3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106d40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106d44:	e3a03000 	mov	r3, #0
  106d48:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106d4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106d50:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106d54:	e51b300c 	ldr	r3, [fp, #-12]
  106d58:	e3530000 	cmp	r3, #0
  106d5c:	aa000001 	bge	106d68 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106d60:	e3a03000 	mov	r3, #0
  106d64:	ea00000a 	b	106d94 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106d68:	e51b3010 	ldr	r3, [fp, #-16]
  106d6c:	e3530002 	cmp	r3, #2
  106d70:	0a000002 	beq	106d80 <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106d74:	e320f000 	nop	{0}
    }
    return ret;
  106d78:	e51b3008 	ldr	r3, [fp, #-8]
  106d7c:	ea000004 	b	106d94 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106d80:	e51b200c 	ldr	r2, [fp, #-12]
  106d84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106d88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106d8c:	ebffff5b 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106d90:	e1a03000 	mov	r3, r0
}
  106d94:	e1a00003 	mov	r0, r3
  106d98:	e24bd004 	sub	sp, fp, #4
  106d9c:	e8bd8800 	pop	{fp, pc}

00106da0 <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106da0:	e92d4800 	push	{fp, lr}
  106da4:	e28db004 	add	fp, sp, #4
  106da8:	e24dd018 	sub	sp, sp, #24
  106dac:	e50b0010 	str	r0, [fp, #-16]
  106db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106db4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106db8:	e51b3010 	ldr	r3, [fp, #-16]
  106dbc:	e3530002 	cmp	r3, #2
  106dc0:	1a000004 	bne	106dd8 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106dc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106dc8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106dcc:	ebfffe3e 	bl	1066cc <netdev_ip4addr_aton>
  106dd0:	e50b0008 	str	r0, [fp, #-8]
        break;
  106dd4:	ea000002 	b	106de4 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106dd8:	e3e03000 	mvn	r3, #0
  106ddc:	e50b3008 	str	r3, [fp, #-8]
        break;
  106de0:	e320f000 	nop	{0}
    }
    return err;
  106de4:	e51b3008 	ldr	r3, [fp, #-8]
}
  106de8:	e1a00003 	mov	r0, r3
  106dec:	e24bd004 	sub	sp, fp, #4
  106df0:	e8bd8800 	pop	{fp, pc}

00106df4 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106df4:	e92d4800 	push	{fp, lr}
  106df8:	e28db004 	add	fp, sp, #4
  106dfc:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e00:	e30d3490 	movw	r3, #54416	; 0xd490
  106e04:	e3403014 	movt	r3, #20
  106e08:	e5933000 	ldr	r3, [r3]
  106e0c:	e3530000 	cmp	r3, #0
  106e10:	0a000001 	beq	106e1c <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106e14:	e3a03000 	mov	r3, #0
  106e18:	ea000032 	b	106ee8 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106e1c:	e3a03004 	mov	r3, #4
  106e20:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106e24:	e51b2008 	ldr	r2, [fp, #-8]
  106e28:	e30d3460 	movw	r3, #54368	; 0xd460
  106e2c:	e3403014 	movt	r3, #20
  106e30:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106e34:	e51b3008 	ldr	r3, [fp, #-8]
  106e38:	e1a03103 	lsl	r3, r3, #2
  106e3c:	e1a01003 	mov	r1, r3
  106e40:	e3a00001 	mov	r0, #1
  106e44:	ebfff070 	bl	10300c <rt_calloc>
  106e48:	e1a02000 	mov	r2, r0
  106e4c:	e30d3460 	movw	r3, #54368	; 0xd460
  106e50:	e3403014 	movt	r3, #20
  106e54:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106e58:	e30d3460 	movw	r3, #54368	; 0xd460
  106e5c:	e3403014 	movt	r3, #20
  106e60:	e5933004 	ldr	r3, [r3, #4]
  106e64:	e3530000 	cmp	r3, #0
  106e68:	1a00000a 	bne	106e98 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106e6c:	e3050f48 	movw	r0, #24392	; 0x5f48
  106e70:	e3400014 	movt	r0, #20
  106e74:	ebfff0a6 	bl	103114 <rt_kprintf>
  106e78:	e3050f5c 	movw	r0, #24412	; 0x5f5c
  106e7c:	e3400014 	movt	r0, #20
  106e80:	ebfff0a3 	bl	103114 <rt_kprintf>
  106e84:	e3050f7c 	movw	r0, #24444	; 0x5f7c
  106e88:	e3400014 	movt	r0, #20
  106e8c:	ebfff0a0 	bl	103114 <rt_kprintf>
        return -1;
  106e90:	e3e03000 	mvn	r3, #0
  106e94:	ea000013 	b	106ee8 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106e98:	e3a02000 	mov	r2, #0
  106e9c:	e3051f84 	movw	r1, #24452	; 0x5f84
  106ea0:	e3401014 	movt	r1, #20
  106ea4:	e30d0468 	movw	r0, #54376	; 0xd468
  106ea8:	e3400014 	movt	r0, #20
  106eac:	ebffe7a5 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106eb0:	e3050f90 	movw	r0, #24464	; 0x5f90
  106eb4:	e3400014 	movt	r0, #20
  106eb8:	ebfff095 	bl	103114 <rt_kprintf>
  106ebc:	e3050fa4 	movw	r0, #24484	; 0x5fa4
  106ec0:	e3400014 	movt	r0, #20
  106ec4:	ebfff092 	bl	103114 <rt_kprintf>
  106ec8:	e3050f7c 	movw	r0, #24444	; 0x5f7c
  106ecc:	e3400014 	movt	r0, #20
  106ed0:	ebfff08f 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106ed4:	e30d3490 	movw	r3, #54416	; 0xd490
  106ed8:	e3403014 	movt	r3, #20
  106edc:	e3a02001 	mov	r2, #1
  106ee0:	e5832000 	str	r2, [r3]

    return 0;
  106ee4:	e3a03000 	mov	r3, #0
}
  106ee8:	e1a00003 	mov	r0, r3
  106eec:	e24bd004 	sub	sp, fp, #4
  106ef0:	e8bd8800 	pop	{fp, pc}

00106ef4 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106ef4:	e92d4810 	push	{r4, fp, lr}
  106ef8:	e28db008 	add	fp, sp, #8
  106efc:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f00:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f04:	e3e03000 	mvn	r3, #0
  106f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f0c:	e3a03000 	mov	r3, #0
  106f10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106f14:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106f1c:	e3a03010 	mov	r3, #16
  106f20:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106f24:	e3a03000 	mov	r3, #0
  106f28:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106f2c:	e3053ff8 	movw	r3, #24568	; 0x5ff8
  106f30:	e3403014 	movt	r3, #20
  106f34:	e24bc090 	sub	ip, fp, #144	; 0x90
  106f38:	e1a0e003 	mov	lr, r3
  106f3c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f40:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f44:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f48:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f4c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106f50:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106f54:	e3a03000 	mov	r3, #0
  106f58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106f5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106f60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106f64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106f68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f6c:	e3530000 	cmp	r3, #0
  106f70:	0a000003 	beq	106f84 <check_netdev_internet_up_work+0x90>
  106f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f78:	e5933008 	ldr	r3, [r3, #8]
  106f7c:	e3530000 	cmp	r3, #0
  106f80:	1a000002 	bne	106f90 <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106f84:	e3e03000 	mvn	r3, #0
  106f88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106f8c:	ea0000bc 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106f90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f94:	e593300c 	ldr	r3, [r3, #12]
  106f98:	e5933000 	ldr	r3, [r3]
  106f9c:	e3050fd4 	movw	r0, #24532	; 0x5fd4
  106fa0:	e3400014 	movt	r0, #20
  106fa4:	e12fff33 	blx	r3
  106fa8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106fb0:	e3530000 	cmp	r3, #0
  106fb4:	1a000002 	bne	106fc4 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106fb8:	e3e03000 	mvn	r3, #0
  106fbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fc0:	ea0000af 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106fc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fc8:	e5933008 	ldr	r3, [r3, #8]
  106fcc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106fd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fd4:	e5933000 	ldr	r3, [r3]
  106fd8:	e3a02000 	mov	r2, #0
  106fdc:	e3a01002 	mov	r1, #2
  106fe0:	e3a00002 	mov	r0, #2
  106fe4:	e12fff33 	blx	r3
  106fe8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  106fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106ff0:	e3530000 	cmp	r3, #0
  106ff4:	aa000002 	bge	107004 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  106ff8:	e3e03000 	mvn	r3, #0
  106ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107000:	ea00009f 	b	107284 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107004:	e3a03002 	mov	r3, #2
  107008:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  10700c:	e30a351f 	movw	r3, #42271	; 0xa51f
  107010:	e34f3fff 	movt	r3, #65535	; 0xffff
  107014:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  107018:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10701c:	e5933010 	ldr	r3, [r3, #16]
  107020:	e5933000 	ldr	r3, [r3]
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  10702c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107030:	e2833008 	add	r3, r3, #8
  107034:	e3a02008 	mov	r2, #8
  107038:	e3a01000 	mov	r1, #0
  10703c:	e1a00003 	mov	r0, r3
  107040:	ebfff0a0 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  107044:	e3a02002 	mov	r2, #2
  107048:	e3a03000 	mov	r3, #0
  10704c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  107050:	e3a03000 	mov	r3, #0
  107054:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  107058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10705c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107060:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107064:	e3a03010 	mov	r3, #16
  107068:	e58d3000 	str	r3, [sp]
  10706c:	e1a03002 	mov	r3, r2
  107070:	e3012006 	movw	r2, #4102	; 0x1006
  107074:	e3001fff 	movw	r1, #4095	; 0xfff
  107078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10707c:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  107080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107084:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107088:	e24b204c 	sub	r2, fp, #76	; 0x4c
  10708c:	e3a03010 	mov	r3, #16
  107090:	e58d3000 	str	r3, [sp]
  107094:	e1a03002 	mov	r3, r2
  107098:	e3012005 	movw	r2, #4101	; 0x1005
  10709c:	e3001fff 	movw	r1, #4095	; 0xfff
  1070a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1070a4:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  1070a8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070ac:	e3a02010 	mov	r2, #16
  1070b0:	e3a01000 	mov	r1, #0
  1070b4:	e1a00003 	mov	r0, r3
  1070b8:	ebfff082 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  1070bc:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  1070c0:	e3053fe8 	movw	r3, #24552	; 0x5fe8
  1070c4:	e3403014 	movt	r3, #20
  1070c8:	e3052ff4 	movw	r2, #24564	; 0x5ff4
  1070cc:	e3402014 	movt	r2, #20
  1070d0:	e3a01010 	mov	r1, #16
  1070d4:	ebffefd8 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1070d8:	e3a03000 	mov	r3, #0
  1070dc:	e50b3010 	str	r3, [fp, #-16]
  1070e0:	ea000011 	b	10712c <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  1070e4:	e24b2090 	sub	r2, fp, #144	; 0x90
  1070e8:	e51b3010 	ldr	r3, [fp, #-16]
  1070ec:	e1a03103 	lsl	r3, r3, #2
  1070f0:	e0821003 	add	r1, r2, r3
  1070f4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070f8:	e3a02003 	mov	r2, #3
  1070fc:	e1a00003 	mov	r0, r3
  107100:	ebfff08c 	bl	103338 <rt_memcmp>
  107104:	e1a03000 	mov	r3, r0
  107108:	e3530000 	cmp	r3, #0
  10710c:	1a000003 	bne	107120 <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  107110:	e51b3010 	ldr	r3, [fp, #-16]
  107114:	e2833001 	add	r3, r3, #1
  107118:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  10711c:	ea000005 	b	107138 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  107120:	e51b3010 	ldr	r3, [fp, #-16]
  107124:	e2833001 	add	r3, r3, #1
  107128:	e50b3010 	str	r3, [fp, #-16]
  10712c:	e51b3010 	ldr	r3, [fp, #-16]
  107130:	e353000b 	cmp	r3, #11
  107134:	9affffea 	bls	1070e4 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  107138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10713c:	e3530000 	cmp	r3, #0
  107140:	0a000002 	beq	107150 <check_netdev_internet_up_work+0x25c>
  107144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107148:	e353000c 	cmp	r3, #12
  10714c:	9a000002 	bls	10715c <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  107150:	e3e03000 	mvn	r3, #0
  107154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107158:	ea000049 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  10715c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  107160:	e3a0200c 	mov	r2, #12
  107164:	e3a01000 	mov	r1, #0
  107168:	e1a00003 	mov	r0, r3
  10716c:	ebfff055 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  107170:	e3a03000 	mov	r3, #0
  107174:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107178:	e3a03000 	mov	r3, #0
  10717c:	e50b3010 	str	r3, [fp, #-16]
  107180:	ea000010 	b	1071c8 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  107184:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107188:	e51b3010 	ldr	r3, [fp, #-16]
  10718c:	e0823003 	add	r3, r2, r3
  107190:	e2833021 	add	r3, r3, #33	; 0x21
  107194:	e5d31000 	ldrb	r1, [r3]
  107198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10719c:	e6ef2073 	uxtb	r2, r3
  1071a0:	e51b3010 	ldr	r3, [fp, #-16]
  1071a4:	e2833001 	add	r3, r3, #1
  1071a8:	e0812002 	add	r2, r1, r2
  1071ac:	e6ef2072 	uxtb	r2, r2
  1071b0:	e24b100c 	sub	r1, fp, #12
  1071b4:	e0813003 	add	r3, r1, r3
  1071b8:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e2833001 	add	r3, r3, #1
  1071c4:	e50b3010 	str	r3, [fp, #-16]
  1071c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1071cc:	e5d33020 	ldrb	r3, [r3, #32]
  1071d0:	e1a02003 	mov	r2, r3
  1071d4:	e51b3010 	ldr	r3, [fp, #-16]
  1071d8:	e1530002 	cmp	r3, r2
  1071dc:	baffffe8 	blt	107184 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  1071e0:	e3a03005 	mov	r3, #5
  1071e4:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  1071e8:	e3a03000 	mov	r3, #0
  1071ec:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  1071f0:	e3a03000 	mov	r3, #0
  1071f4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  1071f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071fc:	e5934018 	ldr	r4, [r3, #24]
  107200:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107204:	e3a03010 	mov	r3, #16
  107208:	e58d3004 	str	r3, [sp, #4]
  10720c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107210:	e58d3000 	str	r3, [sp]
  107214:	e3a03000 	mov	r3, #0
  107218:	e3a0200c 	mov	r2, #12
  10721c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107220:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  107224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107228:	e593401c 	ldr	r4, [r3, #28]
  10722c:	e24b105d 	sub	r1, fp, #93	; 0x5d
  107230:	e24b3050 	sub	r3, fp, #80	; 0x50
  107234:	e58d3004 	str	r3, [sp, #4]
  107238:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10723c:	e58d3000 	str	r3, [sp]
  107240:	e3a03000 	mov	r3, #0
  107244:	e3a02001 	mov	r2, #1
  107248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10724c:	e12fff34 	blx	r4
  107250:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  107254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107258:	e3530000 	cmp	r3, #0
  10725c:	ba000005 	blt	107278 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  107260:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  107264:	e3530000 	cmp	r3, #0
  107268:	1a000004 	bne	107280 <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  10726c:	e3e03000 	mvn	r3, #0
  107270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107274:	ea000002 	b	107284 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107278:	e320f000 	nop	{0}
  10727c:	ea000000 	b	107284 <check_netdev_internet_up_work+0x390>
    }

__exit:
  107280:	e320f000 	nop	{0}
    if (result > 0)
  107284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107288:	e3530000 	cmp	r3, #0
  10728c:	da000006 	ble	1072ac <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  107290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107298:	e3833080 	orr	r3, r3, #128	; 0x80
  10729c:	e6ff2073 	uxth	r2, r3
  1072a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1072a8:	ea000005 	b	1072c4 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1072ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072b4:	e3c33080 	bic	r3, r3, #128	; 0x80
  1072b8:	e6ff2073 	uxth	r2, r3
  1072bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  1072c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1072c8:	e3530000 	cmp	r3, #0
  1072cc:	ba000003 	blt	1072e0 <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  1072d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072d4:	e5933004 	ldr	r3, [r3, #4]
  1072d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072dc:	e12fff33 	blx	r3
    }
}
  1072e0:	e320f000 	nop	{0}
  1072e4:	e24bd008 	sub	sp, fp, #8
  1072e8:	e8bd8810 	pop	{r4, fp, pc}

001072ec <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  1072ec:	e92d4800 	push	{fp, lr}
  1072f0:	e28db004 	add	fp, sp, #4
  1072f4:	e24dd010 	sub	sp, sp, #16
  1072f8:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  1072fc:	e30d3460 	movw	r3, #54368	; 0xd460
  107300:	e3403014 	movt	r3, #20
  107304:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107308:	e51b3010 	ldr	r3, [fp, #-16]
  10730c:	e3530000 	cmp	r3, #0
  107310:	ba000005 	blt	10732c <sal_get_socket+0x40>
  107314:	e51b3008 	ldr	r3, [fp, #-8]
  107318:	e5933000 	ldr	r3, [r3]
  10731c:	e1a02003 	mov	r2, r3
  107320:	e51b3010 	ldr	r3, [fp, #-16]
  107324:	e1530002 	cmp	r3, r2
  107328:	ba000001 	blt	107334 <sal_get_socket+0x48>
    {
        return RT_NULL;
  10732c:	e3a03000 	mov	r3, #0
  107330:	ea000015 	b	10738c <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  107334:	e51b3008 	ldr	r3, [fp, #-8]
  107338:	e5932004 	ldr	r2, [r3, #4]
  10733c:	e51b3010 	ldr	r3, [fp, #-16]
  107340:	e1a03103 	lsl	r3, r3, #2
  107344:	e0823003 	add	r3, r2, r3
  107348:	e5933000 	ldr	r3, [r3]
  10734c:	e5933000 	ldr	r3, [r3]
  107350:	e3052a10 	movw	r2, #23056	; 0x5a10
  107354:	e1530002 	cmp	r3, r2
  107358:	0a000005 	beq	107374 <sal_get_socket+0x88>
  10735c:	e300213b 	movw	r2, #315	; 0x13b
  107360:	e306111c 	movw	r1, #24860	; 0x611c
  107364:	e3401014 	movt	r1, #20
  107368:	e3060028 	movw	r0, #24616	; 0x6028
  10736c:	e3400014 	movt	r0, #20
  107370:	ebfff088 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107374:	e51b3008 	ldr	r3, [fp, #-8]
  107378:	e5932004 	ldr	r2, [r3, #4]
  10737c:	e51b3010 	ldr	r3, [fp, #-16]
  107380:	e1a03103 	lsl	r3, r3, #2
  107384:	e0823003 	add	r3, r2, r3
  107388:	e5933000 	ldr	r3, [r3]
}
  10738c:	e1a00003 	mov	r0, r3
  107390:	e24bd004 	sub	sp, fp, #4
  107394:	e8bd8800 	pop	{fp, pc}

00107398 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  107398:	e92d4800 	push	{fp, lr}
  10739c:	e28db004 	add	fp, sp, #4
  1073a0:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  1073a4:	e3e01000 	mvn	r1, #0
  1073a8:	e30d0468 	movw	r0, #54376	; 0xd468
  1073ac:	e3400014 	movt	r0, #20
  1073b0:	ebffe6d2 	bl	100f00 <rt_mutex_take>
  1073b4:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  1073b8:	e51b3008 	ldr	r3, [fp, #-8]
  1073bc:	e3530000 	cmp	r3, #0
  1073c0:	0a000005 	beq	1073dc <sal_lock+0x44>
    {
        RT_ASSERT(0);
  1073c4:	e3a02f53 	mov	r2, #332	; 0x14c
  1073c8:	e306112c 	movw	r1, #24876	; 0x612c
  1073cc:	e3401014 	movt	r1, #20
  1073d0:	e3060058 	movw	r0, #24664	; 0x6058
  1073d4:	e3400014 	movt	r0, #20
  1073d8:	ebfff06e 	bl	103598 <rt_assert_handler>
    }
}
  1073dc:	e320f000 	nop	{0}
  1073e0:	e24bd004 	sub	sp, fp, #4
  1073e4:	e8bd8800 	pop	{fp, pc}

001073e8 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  1073e8:	e92d4800 	push	{fp, lr}
  1073ec:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  1073f0:	e30d0468 	movw	r0, #54376	; 0xd468
  1073f4:	e3400014 	movt	r0, #20
  1073f8:	ebffe6de 	bl	100f78 <rt_mutex_release>
}
  1073fc:	e320f000 	nop	{0}
  107400:	e8bd8800 	pop	{fp, pc}

00107404 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107404:	e92d4800 	push	{fp, lr}
  107408:	e28db004 	add	fp, sp, #4
  10740c:	e24dd010 	sub	sp, sp, #16
  107410:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  107414:	e3a03000 	mov	r3, #0
  107418:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  10741c:	e3a03000 	mov	r3, #0
  107420:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  107424:	ebffffdb 	bl	107398 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107428:	e3a03000 	mov	r3, #0
  10742c:	e50b3008 	str	r3, [fp, #-8]
  107430:	ea000019 	b	10749c <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  107434:	e30d3460 	movw	r3, #54368	; 0xd460
  107438:	e3403014 	movt	r3, #20
  10743c:	e5932004 	ldr	r2, [r3, #4]
  107440:	e51b3008 	ldr	r3, [fp, #-8]
  107444:	e1a03103 	lsl	r3, r3, #2
  107448:	e0823003 	add	r3, r2, r3
  10744c:	e5933000 	ldr	r3, [r3]
  107450:	e3530000 	cmp	r3, #0
  107454:	0a00000d 	beq	107490 <sal_netdev_cleanup+0x8c>
  107458:	e30d3460 	movw	r3, #54368	; 0xd460
  10745c:	e3403014 	movt	r3, #20
  107460:	e5932004 	ldr	r2, [r3, #4]
  107464:	e51b3008 	ldr	r3, [fp, #-8]
  107468:	e1a03103 	lsl	r3, r3, #2
  10746c:	e0823003 	add	r3, r2, r3
  107470:	e5933000 	ldr	r3, [r3]
  107474:	e5933014 	ldr	r3, [r3, #20]
  107478:	e51b2010 	ldr	r2, [fp, #-16]
  10747c:	e1520003 	cmp	r2, r3
  107480:	1a000002 	bne	107490 <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  107484:	e3a03001 	mov	r3, #1
  107488:	e50b300c 	str	r3, [fp, #-12]
                break;
  10748c:	ea000008 	b	1074b4 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107490:	e51b3008 	ldr	r3, [fp, #-8]
  107494:	e2833001 	add	r3, r3, #1
  107498:	e50b3008 	str	r3, [fp, #-8]
  10749c:	e30d3460 	movw	r3, #54368	; 0xd460
  1074a0:	e3403014 	movt	r3, #20
  1074a4:	e5932000 	ldr	r2, [r3]
  1074a8:	e51b3008 	ldr	r3, [fp, #-8]
  1074ac:	e1520003 	cmp	r2, r3
  1074b0:	8affffdf 	bhi	107434 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  1074b4:	ebffffcb 	bl	1073e8 <sal_unlock>
        if (find_dev)
  1074b8:	e51b300c 	ldr	r3, [fp, #-12]
  1074bc:	e3530000 	cmp	r3, #0
  1074c0:	0a000001 	beq	1074cc <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  1074c4:	e3a00064 	mov	r0, #100	; 0x64
  1074c8:	ebffea6b 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  1074cc:	e51b300c 	ldr	r3, [fp, #-12]
  1074d0:	e3530000 	cmp	r3, #0
  1074d4:	1affffd0 	bne	10741c <sal_netdev_cleanup+0x18>

    return 0;
  1074d8:	e3a03000 	mov	r3, #0
}
  1074dc:	e1a00003 	mov	r0, r3
  1074e0:	e24bd004 	sub	sp, fp, #4
  1074e4:	e8bd8800 	pop	{fp, pc}

001074e8 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  1074e8:	e92d4800 	push	{fp, lr}
  1074ec:	e28db004 	add	fp, sp, #4
  1074f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1074f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1074f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1074fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  107500:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107504:	e30f3594 	movw	r3, #62868	; 0xf594
  107508:	e3403014 	movt	r3, #20
  10750c:	e5933000 	ldr	r3, [r3]
  107510:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  107514:	e3a03000 	mov	r3, #0
  107518:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  10751c:	e3a03000 	mov	r3, #0
  107520:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  107524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107528:	e3530000 	cmp	r3, #0
  10752c:	ba000002 	blt	10753c <socket_init+0x54>
  107530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107534:	e353002f 	cmp	r3, #47	; 0x2f
  107538:	da000001 	ble	107544 <socket_init+0x5c>
    {
        return -1;
  10753c:	e3e03000 	mvn	r3, #0
  107540:	ea000050 	b	107688 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  107544:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107548:	e3530000 	cmp	r3, #0
  10754c:	ba000004 	blt	107564 <socket_init+0x7c>
  107550:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107554:	e3a03001 	mov	r3, #1
  107558:	e3403008 	movt	r3, #8
  10755c:	e1520003 	cmp	r2, r3
  107560:	da000001 	ble	10756c <socket_init+0x84>
    {
        return -2;
  107564:	e3e03001 	mvn	r3, #1
  107568:	ea000046 	b	107688 <socket_init+0x1a0>
    }

    sock = *res;
  10756c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107570:	e5933000 	ldr	r3, [r3]
  107574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10757c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107580:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107588:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10758c:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  107590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107594:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107598:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  10759c:	e51b300c 	ldr	r3, [fp, #-12]
  1075a0:	e3530000 	cmp	r3, #0
  1075a4:	0a00001e 	beq	107624 <socket_init+0x13c>
  1075a8:	e51b300c 	ldr	r3, [fp, #-12]
  1075ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1075b0:	e2033001 	and	r3, r3, #1
  1075b4:	e6ef3073 	uxtb	r3, r3
  1075b8:	e3530000 	cmp	r3, #0
  1075bc:	0a000018 	beq	107624 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  1075c0:	e51b300c 	ldr	r3, [fp, #-12]
  1075c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1075c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  1075cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075d0:	e3530000 	cmp	r3, #0
  1075d4:	0a000012 	beq	107624 <socket_init+0x13c>
  1075d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075dc:	e5933008 	ldr	r3, [r3, #8]
  1075e0:	e3530000 	cmp	r3, #0
  1075e4:	0a00000e 	beq	107624 <socket_init+0x13c>
  1075e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075ec:	e5933000 	ldr	r3, [r3]
  1075f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1075f4:	e1520003 	cmp	r2, r3
  1075f8:	0a000004 	beq	107610 <socket_init+0x128>
  1075fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107600:	e5933004 	ldr	r3, [r3, #4]
  107604:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107608:	e1520003 	cmp	r2, r3
  10760c:	1a000004 	bne	107624 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  107610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107614:	e51b200c 	ldr	r2, [fp, #-12]
  107618:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  10761c:	e3a03001 	mov	r3, #1
  107620:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  107624:	e51b3008 	ldr	r3, [fp, #-8]
  107628:	e3530000 	cmp	r3, #0
  10762c:	1a000014 	bne	107684 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  107630:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107634:	ebfff7e1 	bl	1055c0 <netdev_get_by_family>
  107638:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  10763c:	e51b3010 	ldr	r3, [fp, #-16]
  107640:	e3530000 	cmp	r3, #0
  107644:	1a00000b 	bne	107678 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  107648:	e3050f48 	movw	r0, #24392	; 0x5f48
  10764c:	e3400014 	movt	r0, #20
  107650:	ebffeeaf 	bl	103114 <rt_kprintf>
  107654:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107658:	e306005c 	movw	r0, #24668	; 0x605c
  10765c:	e3400014 	movt	r0, #20
  107660:	ebffeeab 	bl	103114 <rt_kprintf>
  107664:	e3050f7c 	movw	r0, #24444	; 0x5f7c
  107668:	e3400014 	movt	r0, #20
  10766c:	ebffeea8 	bl	103114 <rt_kprintf>
            return -3;
  107670:	e3e03002 	mvn	r3, #2
  107674:	ea000003 	b	107688 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10767c:	e51b2010 	ldr	r2, [fp, #-16]
  107680:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107684:	e3a03000 	mov	r3, #0
}
  107688:	e1a00003 	mov	r0, r3
  10768c:	e24bd004 	sub	sp, fp, #4
  107690:	e8bd8800 	pop	{fp, pc}

00107694 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107694:	e92d4810 	push	{r4, fp, lr}
  107698:	e28db008 	add	fp, sp, #8
  10769c:	e24dd01c 	sub	sp, sp, #28
  1076a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1076a4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1076ac:	e50b3010 	str	r3, [fp, #-16]
  1076b0:	ea00000a 	b	1076e0 <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  1076b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076b8:	e5932004 	ldr	r2, [r3, #4]
  1076bc:	e51b3010 	ldr	r3, [fp, #-16]
  1076c0:	e1a03103 	lsl	r3, r3, #2
  1076c4:	e0823003 	add	r3, r2, r3
  1076c8:	e5933000 	ldr	r3, [r3]
  1076cc:	e3530000 	cmp	r3, #0
  1076d0:	0a000009 	beq	1076fc <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076d4:	e51b3010 	ldr	r3, [fp, #-16]
  1076d8:	e2833001 	add	r3, r3, #1
  1076dc:	e50b3010 	str	r3, [fp, #-16]
  1076e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076e4:	e5933000 	ldr	r3, [r3]
  1076e8:	e1a02003 	mov	r2, r3
  1076ec:	e51b3010 	ldr	r3, [fp, #-16]
  1076f0:	e1530002 	cmp	r3, r2
  1076f4:	baffffee 	blt	1076b4 <socket_alloc+0x20>
  1076f8:	ea000000 	b	107700 <socket_alloc+0x6c>
        {
            break;
  1076fc:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  107700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107704:	e5933000 	ldr	r3, [r3]
  107708:	e1a02003 	mov	r2, r3
  10770c:	e51b3010 	ldr	r3, [fp, #-16]
  107710:	e1530002 	cmp	r3, r2
  107714:	1a00002e 	bne	1077d4 <socket_alloc+0x140>
  107718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10771c:	e5933000 	ldr	r3, [r3]
  107720:	e353001f 	cmp	r3, #31
  107724:	8a00002a 	bhi	1077d4 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  107728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10772c:	e5933000 	ldr	r3, [r3]
  107730:	e2833004 	add	r3, r3, #4
  107734:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  107738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10773c:	e3530020 	cmp	r3, #32
  107740:	b1a03003 	movlt	r3, r3
  107744:	a3a03020 	movge	r3, #32
  107748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  10774c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107750:	e5932004 	ldr	r2, [r3, #4]
  107754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107758:	e1a03103 	lsl	r3, r3, #2
  10775c:	e1a01003 	mov	r1, r3
  107760:	e1a00002 	mov	r0, r2
  107764:	ebffee1c 	bl	102fdc <rt_realloc>
  107768:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  10776c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107770:	e3530000 	cmp	r3, #0
  107774:	0a00003a 	beq	107864 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10777c:	e5933000 	ldr	r3, [r3]
  107780:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107784:	ea000008 	b	1077ac <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10778c:	e1a03103 	lsl	r3, r3, #2
  107790:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107794:	e0823003 	add	r3, r2, r3
  107798:	e3a02000 	mov	r2, #0
  10779c:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  1077a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077a4:	e2833001 	add	r3, r3, #1
  1077a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1077b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077b4:	e1520003 	cmp	r2, r3
  1077b8:	bafffff2 	blt	107788 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  1077bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077c4:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  1077c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1077cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d0:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  1077d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d8:	e5933000 	ldr	r3, [r3]
  1077dc:	e1a02003 	mov	r2, r3
  1077e0:	e51b3010 	ldr	r3, [fp, #-16]
  1077e4:	e1530002 	cmp	r3, r2
  1077e8:	aa00001f 	bge	10786c <socket_alloc+0x1d8>
  1077ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077f0:	e5932004 	ldr	r2, [r3, #4]
  1077f4:	e51b3010 	ldr	r3, [fp, #-16]
  1077f8:	e1a03103 	lsl	r3, r3, #2
  1077fc:	e0823003 	add	r3, r2, r3
  107800:	e5933000 	ldr	r3, [r3]
  107804:	e3530000 	cmp	r3, #0
  107808:	1a000017 	bne	10786c <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  10780c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107810:	e5932004 	ldr	r2, [r3, #4]
  107814:	e51b3010 	ldr	r3, [fp, #-16]
  107818:	e1a03103 	lsl	r3, r3, #2
  10781c:	e0824003 	add	r4, r2, r3
  107820:	e3a0101c 	mov	r1, #28
  107824:	e3a00001 	mov	r0, #1
  107828:	ebffedf7 	bl	10300c <rt_calloc>
  10782c:	e1a03000 	mov	r3, r0
  107830:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  107834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107838:	e5932004 	ldr	r2, [r3, #4]
  10783c:	e51b3010 	ldr	r3, [fp, #-16]
  107840:	e1a03103 	lsl	r3, r3, #2
  107844:	e0823003 	add	r3, r2, r3
  107848:	e5933000 	ldr	r3, [r3]
  10784c:	e3530000 	cmp	r3, #0
  107850:	1a000005 	bne	10786c <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107858:	e5933000 	ldr	r3, [r3]
  10785c:	e50b3010 	str	r3, [fp, #-16]
  107860:	ea000002 	b	107870 <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107864:	e320f000 	nop	{0}
  107868:	ea000000 	b	107870 <socket_alloc+0x1dc>
        }
    }

__result:
  10786c:	e320f000 	nop	{0}
    return idx;
  107870:	e51b3010 	ldr	r3, [fp, #-16]
}
  107874:	e1a00003 	mov	r0, r3
  107878:	e24bd008 	sub	sp, fp, #8
  10787c:	e8bd8810 	pop	{r4, fp, pc}

00107880 <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  107880:	e92d4800 	push	{fp, lr}
  107884:	e28db004 	add	fp, sp, #4
  107888:	e24dd010 	sub	sp, sp, #16
  10788c:	e50b0010 	str	r0, [fp, #-16]
  107890:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107894:	e51b3010 	ldr	r3, [fp, #-16]
  107898:	e5932004 	ldr	r2, [r3, #4]
  10789c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078a0:	e1a03103 	lsl	r3, r3, #2
  1078a4:	e0823003 	add	r3, r2, r3
  1078a8:	e5933000 	ldr	r3, [r3]
  1078ac:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  1078b0:	e51b3010 	ldr	r3, [fp, #-16]
  1078b4:	e5932004 	ldr	r2, [r3, #4]
  1078b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078bc:	e1a03103 	lsl	r3, r3, #2
  1078c0:	e0823003 	add	r3, r2, r3
  1078c4:	e3a02000 	mov	r2, #0
  1078c8:	e5832000 	str	r2, [r3]
    rt_free(sock);
  1078cc:	e51b0008 	ldr	r0, [fp, #-8]
  1078d0:	ebffedb9 	bl	102fbc <rt_free>
}
  1078d4:	e320f000 	nop	{0}
  1078d8:	e24bd004 	sub	sp, fp, #4
  1078dc:	e8bd8800 	pop	{fp, pc}

001078e0 <socket_new>:

static int socket_new(void)
{
  1078e0:	e92d4800 	push	{fp, lr}
  1078e4:	e28db004 	add	fp, sp, #4
  1078e8:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1078ec:	e30d3460 	movw	r3, #54368	; 0xd460
  1078f0:	e3403014 	movt	r3, #20
  1078f4:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  1078f8:	ebfffea6 	bl	107398 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  1078fc:	e3a01000 	mov	r1, #0
  107900:	e51b000c 	ldr	r0, [fp, #-12]
  107904:	ebffff62 	bl	107694 <socket_alloc>
  107908:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  10790c:	e51b300c 	ldr	r3, [fp, #-12]
  107910:	e5933000 	ldr	r3, [r3]
  107914:	e1a02003 	mov	r2, r3
  107918:	e51b3008 	ldr	r3, [fp, #-8]
  10791c:	e1530002 	cmp	r3, r2
  107920:	1a000002 	bne	107930 <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  107924:	e3e03000 	mvn	r3, #0
  107928:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  10792c:	ea000012 	b	10797c <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  107930:	e51b300c 	ldr	r3, [fp, #-12]
  107934:	e5932004 	ldr	r2, [r3, #4]
  107938:	e51b3008 	ldr	r3, [fp, #-8]
  10793c:	e1a03103 	lsl	r3, r3, #2
  107940:	e0823003 	add	r3, r2, r3
  107944:	e5933000 	ldr	r3, [r3]
  107948:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  10794c:	e51b3010 	ldr	r3, [fp, #-16]
  107950:	e51b2008 	ldr	r2, [fp, #-8]
  107954:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107958:	e51b3010 	ldr	r3, [fp, #-16]
  10795c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107960:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107964:	e51b3010 	ldr	r3, [fp, #-16]
  107968:	e3a02000 	mov	r2, #0
  10796c:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  107970:	e51b3010 	ldr	r3, [fp, #-16]
  107974:	e3a02000 	mov	r2, #0
  107978:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  10797c:	ebfffe99 	bl	1073e8 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107980:	e51b3008 	ldr	r3, [fp, #-8]
}
  107984:	e1a00003 	mov	r0, r3
  107988:	e24bd004 	sub	sp, fp, #4
  10798c:	e8bd8800 	pop	{fp, pc}

00107990 <socket_delete>:

static void socket_delete(int socket)
{
  107990:	e92d4800 	push	{fp, lr}
  107994:	e28db004 	add	fp, sp, #4
  107998:	e24dd018 	sub	sp, sp, #24
  10799c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1079a0:	e30d3460 	movw	r3, #54368	; 0xd460
  1079a4:	e3403014 	movt	r3, #20
  1079a8:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  1079ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1079b0:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  1079b4:	e51b300c 	ldr	r3, [fp, #-12]
  1079b8:	e3530000 	cmp	r3, #0
  1079bc:	ba00001d 	blt	107a38 <socket_delete+0xa8>
  1079c0:	e51b3008 	ldr	r3, [fp, #-8]
  1079c4:	e5933000 	ldr	r3, [r3]
  1079c8:	e1a02003 	mov	r2, r3
  1079cc:	e51b300c 	ldr	r3, [fp, #-12]
  1079d0:	e1530002 	cmp	r3, r2
  1079d4:	aa000017 	bge	107a38 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  1079d8:	ebfffe6e 	bl	107398 <sal_lock>
    sock = sal_get_socket(socket);
  1079dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1079e0:	ebfffe41 	bl	1072ec <sal_get_socket>
  1079e4:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  1079e8:	e51b3010 	ldr	r3, [fp, #-16]
  1079ec:	e3530000 	cmp	r3, #0
  1079f0:	1a000005 	bne	107a0c <socket_delete+0x7c>
  1079f4:	e3002223 	movw	r2, #547	; 0x223
  1079f8:	e3061138 	movw	r1, #24888	; 0x6138
  1079fc:	e3401014 	movt	r1, #20
  107a00:	e3060098 	movw	r0, #24728	; 0x6098
  107a04:	e3400014 	movt	r0, #20
  107a08:	ebffeee2 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a0c:	e51b3010 	ldr	r3, [fp, #-16]
  107a10:	e3a02000 	mov	r2, #0
  107a14:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107a18:	e51b3010 	ldr	r3, [fp, #-16]
  107a1c:	e3a02000 	mov	r2, #0
  107a20:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107a24:	e51b100c 	ldr	r1, [fp, #-12]
  107a28:	e51b0008 	ldr	r0, [fp, #-8]
  107a2c:	ebffff93 	bl	107880 <socket_free>
    sal_unlock();
  107a30:	ebfffe6c 	bl	1073e8 <sal_unlock>
  107a34:	ea000000 	b	107a3c <socket_delete+0xac>
        return;
  107a38:	e320f000 	nop	{0}
}
  107a3c:	e24bd004 	sub	sp, fp, #4
  107a40:	e8bd8800 	pop	{fp, pc}

00107a44 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107a44:	e92d4800 	push	{fp, lr}
  107a48:	e28db004 	add	fp, sp, #4
  107a4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107a50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107a54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107a58:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107a60:	ebfffe21 	bl	1072ec <sal_get_socket>
  107a64:	e50b0008 	str	r0, [fp, #-8]
  107a68:	e51b3008 	ldr	r3, [fp, #-8]
  107a6c:	e3530000 	cmp	r3, #0
  107a70:	1a000001 	bne	107a7c <sal_accept+0x38>
  107a74:	e3e03000 	mvn	r3, #0
  107a78:	ea000059 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107a7c:	e51b3008 	ldr	r3, [fp, #-8]
  107a80:	e5933014 	ldr	r3, [r3, #20]
  107a84:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107a88:	e2033001 	and	r3, r3, #1
  107a8c:	e3530000 	cmp	r3, #0
  107a90:	1a000001 	bne	107a9c <sal_accept+0x58>
  107a94:	e3e03000 	mvn	r3, #0
  107a98:	ea000051 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107a9c:	e51b3008 	ldr	r3, [fp, #-8]
  107aa0:	e5933014 	ldr	r3, [r3, #20]
  107aa4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107aa8:	e50b300c 	str	r3, [fp, #-12]
  107aac:	e51b300c 	ldr	r3, [fp, #-12]
  107ab0:	e5933008 	ldr	r3, [r3, #8]
  107ab4:	e5933014 	ldr	r3, [r3, #20]
  107ab8:	e3530000 	cmp	r3, #0
  107abc:	1a000001 	bne	107ac8 <sal_accept+0x84>
  107ac0:	e3e03000 	mvn	r3, #0
  107ac4:	ea000046 	b	107be4 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107ac8:	e51b300c 	ldr	r3, [fp, #-12]
  107acc:	e5933008 	ldr	r3, [r3, #8]
  107ad0:	e5933014 	ldr	r3, [r3, #20]
  107ad4:	e51b2008 	ldr	r2, [fp, #-8]
  107ad8:	e5922018 	ldr	r2, [r2, #24]
  107adc:	e1a00002 	mov	r0, r2
  107ae0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107ae4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107ae8:	e12fff33 	blx	r3
  107aec:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107af0:	e51b3010 	ldr	r3, [fp, #-16]
  107af4:	e3730001 	cmn	r3, #1
  107af8:	0a000038 	beq	107be0 <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107afc:	ebffff77 	bl	1078e0 <socket_new>
  107b00:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b08:	ebfffdf7 	bl	1072ec <sal_get_socket>
  107b0c:	e1a03000 	mov	r3, r0
  107b10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b18:	e3530000 	cmp	r3, #0
  107b1c:	1a000006 	bne	107b3c <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107b20:	e51b300c 	ldr	r3, [fp, #-12]
  107b24:	e5933008 	ldr	r3, [r3, #8]
  107b28:	e5933004 	ldr	r3, [r3, #4]
  107b2c:	e51b0010 	ldr	r0, [fp, #-16]
  107b30:	e12fff33 	blx	r3
            return -1;
  107b34:	e3e03000 	mvn	r3, #0
  107b38:	ea000029 	b	107be4 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107b3c:	e51b3008 	ldr	r3, [fp, #-8]
  107b40:	e5930008 	ldr	r0, [r3, #8]
  107b44:	e51b3008 	ldr	r3, [fp, #-8]
  107b48:	e593100c 	ldr	r1, [r3, #12]
  107b4c:	e51b3008 	ldr	r3, [fp, #-8]
  107b50:	e5932010 	ldr	r2, [r3, #16]
  107b54:	e24b301c 	sub	r3, fp, #28
  107b58:	ebfffe62 	bl	1074e8 <socket_init>
  107b5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107b64:	e3530000 	cmp	r3, #0
  107b68:	aa000017 	bge	107bcc <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107b6c:	e51b300c 	ldr	r3, [fp, #-12]
  107b70:	e5933008 	ldr	r3, [r3, #8]
  107b74:	e5933004 	ldr	r3, [r3, #4]
  107b78:	e51b0010 	ldr	r0, [fp, #-16]
  107b7c:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b84:	e3a0201c 	mov	r2, #28
  107b88:	e3a01000 	mov	r1, #0
  107b8c:	e1a00003 	mov	r0, r3
  107b90:	ebffedcc 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107b94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b98:	ebffff7c 	bl	107990 <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107b9c:	e3050f48 	movw	r0, #24392	; 0x5f48
  107ba0:	e3400014 	movt	r0, #20
  107ba4:	ebffed5a 	bl	103114 <rt_kprintf>
  107ba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107bac:	e30600a8 	movw	r0, #24744	; 0x60a8
  107bb0:	e3400014 	movt	r0, #20
  107bb4:	ebffed56 	bl	103114 <rt_kprintf>
  107bb8:	e3050f7c 	movw	r0, #24444	; 0x5f7c
  107bbc:	e3400014 	movt	r0, #20
  107bc0:	ebffed53 	bl	103114 <rt_kprintf>
            return -1;
  107bc4:	e3e03000 	mvn	r3, #0
  107bc8:	ea000005 	b	107be4 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107bcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107bd0:	e51b2010 	ldr	r2, [fp, #-16]
  107bd4:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bdc:	ea000000 	b	107be4 <sal_accept+0x1a0>
    }

    return -1;
  107be0:	e3e03000 	mvn	r3, #0
}
  107be4:	e1a00003 	mov	r0, r3
  107be8:	e24bd004 	sub	sp, fp, #4
  107bec:	e8bd8800 	pop	{fp, pc}

00107bf0 <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107bf4:	e28db000 	add	fp, sp, #0
  107bf8:	e24dd014 	sub	sp, sp, #20
  107bfc:	e50b0010 	str	r0, [fp, #-16]
  107c00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c04:	e51b3010 	ldr	r3, [fp, #-16]
  107c08:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c0c:	e51b3008 	ldr	r3, [fp, #-8]
  107c10:	e5932004 	ldr	r2, [r3, #4]
  107c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c18:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107c1c:	e320f000 	nop	{0}
  107c20:	e28bd000 	add	sp, fp, #0
  107c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107c28:	e12fff1e 	bx	lr

00107c2c <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c2c:	e92d4800 	push	{fp, lr}
  107c30:	e28db004 	add	fp, sp, #4
  107c34:	e24dd030 	sub	sp, sp, #48	; 0x30
  107c38:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107c3c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107c40:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107c44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c48:	e3530000 	cmp	r3, #0
  107c4c:	1a000005 	bne	107c68 <sal_bind+0x3c>
  107c50:	e3002271 	movw	r2, #625	; 0x271
  107c54:	e3061148 	movw	r1, #24904	; 0x6148
  107c58:	e3401014 	movt	r1, #20
  107c5c:	e30600d8 	movw	r0, #24792	; 0x60d8
  107c60:	e3400014 	movt	r0, #20
  107c64:	ebffee4b 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107c6c:	ebfffd9e 	bl	1072ec <sal_get_socket>
  107c70:	e50b0008 	str	r0, [fp, #-8]
  107c74:	e51b3008 	ldr	r3, [fp, #-8]
  107c78:	e3530000 	cmp	r3, #0
  107c7c:	1a000001 	bne	107c88 <sal_bind+0x5c>
  107c80:	e3e03000 	mvn	r3, #0
  107c84:	ea000062 	b	107e14 <sal_bind+0x1e8>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107c88:	e24b3020 	sub	r3, fp, #32
  107c8c:	e1a01003 	mov	r1, r3
  107c90:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107c94:	ebffffd5 	bl	107bf0 <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107c9c:	e3530000 	cmp	r3, #0
  107ca0:	0a000046 	beq	107dc0 <sal_bind+0x194>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107ca4:	e3a03000 	mov	r3, #0
  107ca8:	e50b300c 	str	r3, [fp, #-12]
  107cac:	e3a03000 	mov	r3, #0
  107cb0:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107cb4:	e3a03000 	mov	r3, #0
  107cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107cbc:	e24b3020 	sub	r3, fp, #32
  107cc0:	e1a00003 	mov	r0, r3
  107cc4:	ebfff5df 	bl	105448 <netdev_get_by_ipaddr>
  107cc8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107cd0:	e3530000 	cmp	r3, #0
  107cd4:	1a000001 	bne	107ce0 <sal_bind+0xb4>
        {
            return -1;
  107cd8:	e3e03000 	mvn	r3, #0
  107cdc:	ea00004c 	b	107e14 <sal_bind+0x1e8>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107ce0:	e51b3008 	ldr	r3, [fp, #-8]
  107ce4:	e5933014 	ldr	r3, [r3, #20]
  107ce8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107cec:	e50b3010 	str	r3, [fp, #-16]
  107cf0:	e51b3010 	ldr	r3, [fp, #-16]
  107cf4:	e5933008 	ldr	r3, [r3, #8]
  107cf8:	e5933008 	ldr	r3, [r3, #8]
  107cfc:	e3530000 	cmp	r3, #0
  107d00:	1a000001 	bne	107d0c <sal_bind+0xe0>
  107d04:	e3e03000 	mvn	r3, #0
  107d08:	ea000041 	b	107e14 <sal_bind+0x1e8>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d14:	e50b300c 	str	r3, [fp, #-12]
  107d18:	e51b300c 	ldr	r3, [fp, #-12]
  107d1c:	e5933008 	ldr	r3, [r3, #8]
  107d20:	e5933008 	ldr	r3, [r3, #8]
  107d24:	e3530000 	cmp	r3, #0
  107d28:	1a000001 	bne	107d34 <sal_bind+0x108>
  107d2c:	e3e03000 	mvn	r3, #0
  107d30:	ea000037 	b	107e14 <sal_bind+0x1e8>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107d34:	e51b300c 	ldr	r3, [fp, #-12]
  107d38:	e5932000 	ldr	r2, [r3]
  107d3c:	e51b3010 	ldr	r3, [fp, #-16]
  107d40:	e5933000 	ldr	r3, [r3]
  107d44:	e1520003 	cmp	r2, r3
  107d48:	0a00001c 	beq	107dc0 <sal_bind+0x194>
        {
            int new_socket = -1;
  107d4c:	e3e03000 	mvn	r3, #0
  107d50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107d54:	e51b3010 	ldr	r3, [fp, #-16]
  107d58:	e5933008 	ldr	r3, [r3, #8]
  107d5c:	e5933004 	ldr	r3, [r3, #4]
  107d60:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107d64:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107d68:	e51b300c 	ldr	r3, [fp, #-12]
  107d6c:	e5933008 	ldr	r3, [r3, #8]
  107d70:	e5933000 	ldr	r3, [r3]
  107d74:	e51b200c 	ldr	r2, [fp, #-12]
  107d78:	e5920000 	ldr	r0, [r2]
  107d7c:	e51b2008 	ldr	r2, [fp, #-8]
  107d80:	e592100c 	ldr	r1, [r2, #12]
  107d84:	e51b2008 	ldr	r2, [fp, #-8]
  107d88:	e5922010 	ldr	r2, [r2, #16]
  107d8c:	e12fff33 	blx	r3
  107d90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107d98:	e3530000 	cmp	r3, #0
  107d9c:	aa000001 	bge	107da8 <sal_bind+0x17c>
            {
                return -1;
  107da0:	e3e03000 	mvn	r3, #0
  107da4:	ea00001a 	b	107e14 <sal_bind+0x1e8>
            }
            sock->netdev = new_netdev;
  107da8:	e51b3008 	ldr	r3, [fp, #-8]
  107dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107db0:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107db8:	e51b3008 	ldr	r3, [fp, #-8]
  107dbc:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107dc0:	e51b3008 	ldr	r3, [fp, #-8]
  107dc4:	e5933014 	ldr	r3, [r3, #20]
  107dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107dd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107dd4:	e5933008 	ldr	r3, [r3, #8]
  107dd8:	e5933008 	ldr	r3, [r3, #8]
  107ddc:	e3530000 	cmp	r3, #0
  107de0:	1a000001 	bne	107dec <sal_bind+0x1c0>
  107de4:	e3e03000 	mvn	r3, #0
  107de8:	ea000009 	b	107e14 <sal_bind+0x1e8>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107dec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107df0:	e5933008 	ldr	r3, [r3, #8]
  107df4:	e5933008 	ldr	r3, [r3, #8]
  107df8:	e51b2008 	ldr	r2, [fp, #-8]
  107dfc:	e5922018 	ldr	r2, [r2, #24]
  107e00:	e1a00002 	mov	r0, r2
  107e04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107e08:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107e0c:	e12fff33 	blx	r3
  107e10:	e1a03000 	mov	r3, r0
}
  107e14:	e1a00003 	mov	r0, r3
  107e18:	e24bd004 	sub	sp, fp, #4
  107e1c:	e8bd8800 	pop	{fp, pc}

00107e20 <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107e20:	e92d4800 	push	{fp, lr}
  107e24:	e28db004 	add	fp, sp, #4
  107e28:	e24dd018 	sub	sp, sp, #24
  107e2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107e34:	e3a03000 	mov	r3, #0
  107e38:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e40:	ebfffd29 	bl	1072ec <sal_get_socket>
  107e44:	e50b000c 	str	r0, [fp, #-12]
  107e48:	e51b300c 	ldr	r3, [fp, #-12]
  107e4c:	e3530000 	cmp	r3, #0
  107e50:	1a000001 	bne	107e5c <sal_shutdown+0x3c>
  107e54:	e3e03000 	mvn	r3, #0
  107e58:	ea00001b 	b	107ecc <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107e5c:	e51b300c 	ldr	r3, [fp, #-12]
  107e60:	e5933014 	ldr	r3, [r3, #20]
  107e64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e68:	e50b3010 	str	r3, [fp, #-16]
  107e6c:	e51b3010 	ldr	r3, [fp, #-16]
  107e70:	e5933008 	ldr	r3, [r3, #8]
  107e74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e78:	e3530000 	cmp	r3, #0
  107e7c:	1a000001 	bne	107e88 <sal_shutdown+0x68>
  107e80:	e3e03000 	mvn	r3, #0
  107e84:	ea000010 	b	107ecc <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107e88:	e51b3010 	ldr	r3, [fp, #-16]
  107e8c:	e5933008 	ldr	r3, [r3, #8]
  107e90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e94:	e51b200c 	ldr	r2, [fp, #-12]
  107e98:	e5922018 	ldr	r2, [r2, #24]
  107e9c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107ea0:	e1a00002 	mov	r0, r2
  107ea4:	e12fff33 	blx	r3
  107ea8:	e1a03000 	mov	r3, r0
  107eac:	e3530000 	cmp	r3, #0
  107eb0:	1a000002 	bne	107ec0 <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107eb4:	e3a03000 	mov	r3, #0
  107eb8:	e50b3008 	str	r3, [fp, #-8]
  107ebc:	ea000001 	b	107ec8 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107ec0:	e3e03000 	mvn	r3, #0
  107ec4:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107ec8:	e51b3008 	ldr	r3, [fp, #-8]
}
  107ecc:	e1a00003 	mov	r0, r3
  107ed0:	e24bd004 	sub	sp, fp, #4
  107ed4:	e8bd8800 	pop	{fp, pc}

00107ed8 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107ed8:	e92d4800 	push	{fp, lr}
  107edc:	e28db004 	add	fp, sp, #4
  107ee0:	e24dd018 	sub	sp, sp, #24
  107ee4:	e50b0010 	str	r0, [fp, #-16]
  107ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ef0:	e51b0010 	ldr	r0, [fp, #-16]
  107ef4:	ebfffcfc 	bl	1072ec <sal_get_socket>
  107ef8:	e50b0008 	str	r0, [fp, #-8]
  107efc:	e51b3008 	ldr	r3, [fp, #-8]
  107f00:	e3530000 	cmp	r3, #0
  107f04:	1a000001 	bne	107f10 <sal_getpeername+0x38>
  107f08:	e3e03000 	mvn	r3, #0
  107f0c:	ea000014 	b	107f64 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107f10:	e51b3008 	ldr	r3, [fp, #-8]
  107f14:	e5933014 	ldr	r3, [r3, #20]
  107f18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f1c:	e50b300c 	str	r3, [fp, #-12]
  107f20:	e51b300c 	ldr	r3, [fp, #-12]
  107f24:	e5933008 	ldr	r3, [r3, #8]
  107f28:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f2c:	e3530000 	cmp	r3, #0
  107f30:	1a000001 	bne	107f3c <sal_getpeername+0x64>
  107f34:	e3e03000 	mvn	r3, #0
  107f38:	ea000009 	b	107f64 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107f3c:	e51b300c 	ldr	r3, [fp, #-12]
  107f40:	e5933008 	ldr	r3, [r3, #8]
  107f44:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f48:	e51b2008 	ldr	r2, [fp, #-8]
  107f4c:	e5922018 	ldr	r2, [r2, #24]
  107f50:	e1a00002 	mov	r0, r2
  107f54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107f58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107f5c:	e12fff33 	blx	r3
  107f60:	e1a03000 	mov	r3, r0
}
  107f64:	e1a00003 	mov	r0, r3
  107f68:	e24bd004 	sub	sp, fp, #4
  107f6c:	e8bd8800 	pop	{fp, pc}

00107f70 <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f70:	e92d4800 	push	{fp, lr}
  107f74:	e28db004 	add	fp, sp, #4
  107f78:	e24dd018 	sub	sp, sp, #24
  107f7c:	e50b0010 	str	r0, [fp, #-16]
  107f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107f88:	e51b0010 	ldr	r0, [fp, #-16]
  107f8c:	ebfffcd6 	bl	1072ec <sal_get_socket>
  107f90:	e50b0008 	str	r0, [fp, #-8]
  107f94:	e51b3008 	ldr	r3, [fp, #-8]
  107f98:	e3530000 	cmp	r3, #0
  107f9c:	1a000001 	bne	107fa8 <sal_getsockname+0x38>
  107fa0:	e3e03000 	mvn	r3, #0
  107fa4:	ea000014 	b	107ffc <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107fa8:	e51b3008 	ldr	r3, [fp, #-8]
  107fac:	e5933014 	ldr	r3, [r3, #20]
  107fb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fb4:	e50b300c 	str	r3, [fp, #-12]
  107fb8:	e51b300c 	ldr	r3, [fp, #-12]
  107fbc:	e5933008 	ldr	r3, [r3, #8]
  107fc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fc4:	e3530000 	cmp	r3, #0
  107fc8:	1a000001 	bne	107fd4 <sal_getsockname+0x64>
  107fcc:	e3e03000 	mvn	r3, #0
  107fd0:	ea000009 	b	107ffc <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  107fd4:	e51b300c 	ldr	r3, [fp, #-12]
  107fd8:	e5933008 	ldr	r3, [r3, #8]
  107fdc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fe0:	e51b2008 	ldr	r2, [fp, #-8]
  107fe4:	e5922018 	ldr	r2, [r2, #24]
  107fe8:	e1a00002 	mov	r0, r2
  107fec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107ff0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107ff4:	e12fff33 	blx	r3
  107ff8:	e1a03000 	mov	r3, r0
}
  107ffc:	e1a00003 	mov	r0, r3
  108000:	e24bd004 	sub	sp, fp, #4
  108004:	e8bd8800 	pop	{fp, pc}

00108008 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108008:	e92d4810 	push	{r4, fp, lr}
  10800c:	e28db008 	add	fp, sp, #8
  108010:	e24dd024 	sub	sp, sp, #36	; 0x24
  108014:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108018:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10801c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108020:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108024:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108028:	ebfffcaf 	bl	1072ec <sal_get_socket>
  10802c:	e50b0010 	str	r0, [fp, #-16]
  108030:	e51b3010 	ldr	r3, [fp, #-16]
  108034:	e3530000 	cmp	r3, #0
  108038:	1a000001 	bne	108044 <sal_getsockopt+0x3c>
  10803c:	e3e03000 	mvn	r3, #0
  108040:	ea000017 	b	1080a4 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108044:	e51b3010 	ldr	r3, [fp, #-16]
  108048:	e5933014 	ldr	r3, [r3, #20]
  10804c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108050:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108058:	e5933008 	ldr	r3, [r3, #8]
  10805c:	e5933020 	ldr	r3, [r3, #32]
  108060:	e3530000 	cmp	r3, #0
  108064:	1a000001 	bne	108070 <sal_getsockopt+0x68>
  108068:	e3e03000 	mvn	r3, #0
  10806c:	ea00000c 	b	1080a4 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108074:	e5933008 	ldr	r3, [r3, #8]
  108078:	e5934020 	ldr	r4, [r3, #32]
  10807c:	e51b3010 	ldr	r3, [fp, #-16]
  108080:	e5933018 	ldr	r3, [r3, #24]
  108084:	e1a00003 	mov	r0, r3
  108088:	e59b3004 	ldr	r3, [fp, #4]
  10808c:	e58d3000 	str	r3, [sp]
  108090:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108094:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108098:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10809c:	e12fff34 	blx	r4
  1080a0:	e1a03000 	mov	r3, r0
}
  1080a4:	e1a00003 	mov	r0, r3
  1080a8:	e24bd008 	sub	sp, fp, #8
  1080ac:	e8bd8810 	pop	{r4, fp, pc}

001080b0 <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1080b0:	e92d4810 	push	{r4, fp, lr}
  1080b4:	e28db008 	add	fp, sp, #8
  1080b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1080bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1080c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1080c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1080c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1080cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080d0:	ebfffc85 	bl	1072ec <sal_get_socket>
  1080d4:	e50b0010 	str	r0, [fp, #-16]
  1080d8:	e51b3010 	ldr	r3, [fp, #-16]
  1080dc:	e3530000 	cmp	r3, #0
  1080e0:	1a000001 	bne	1080ec <sal_setsockopt+0x3c>
  1080e4:	e3e03000 	mvn	r3, #0
  1080e8:	ea000017 	b	10814c <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  1080ec:	e51b3010 	ldr	r3, [fp, #-16]
  1080f0:	e5933014 	ldr	r3, [r3, #20]
  1080f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1080f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1080fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108100:	e5933008 	ldr	r3, [r3, #8]
  108104:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108108:	e3530000 	cmp	r3, #0
  10810c:	1a000001 	bne	108118 <sal_setsockopt+0x68>
  108110:	e3e03000 	mvn	r3, #0
  108114:	ea00000c 	b	10814c <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10811c:	e5933008 	ldr	r3, [r3, #8]
  108120:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e5933018 	ldr	r3, [r3, #24]
  10812c:	e1a00003 	mov	r0, r3
  108130:	e59b3004 	ldr	r3, [fp, #4]
  108134:	e58d3000 	str	r3, [sp]
  108138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10813c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108140:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108144:	e12fff34 	blx	r4
  108148:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  10814c:	e1a00003 	mov	r0, r3
  108150:	e24bd008 	sub	sp, fp, #8
  108154:	e8bd8810 	pop	{r4, fp, pc}

00108158 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108158:	e92d4800 	push	{fp, lr}
  10815c:	e28db004 	add	fp, sp, #4
  108160:	e24dd020 	sub	sp, sp, #32
  108164:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108168:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10816c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108170:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108174:	ebfffc5c 	bl	1072ec <sal_get_socket>
  108178:	e50b0008 	str	r0, [fp, #-8]
  10817c:	e51b3008 	ldr	r3, [fp, #-8]
  108180:	e3530000 	cmp	r3, #0
  108184:	1a000001 	bne	108190 <sal_connect+0x38>
  108188:	e3e03000 	mvn	r3, #0
  10818c:	ea00001d 	b	108208 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  108190:	e51b3008 	ldr	r3, [fp, #-8]
  108194:	e5933014 	ldr	r3, [r3, #20]
  108198:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10819c:	e2033001 	and	r3, r3, #1
  1081a0:	e3530000 	cmp	r3, #0
  1081a4:	1a000001 	bne	1081b0 <sal_connect+0x58>
  1081a8:	e3e03000 	mvn	r3, #0
  1081ac:	ea000015 	b	108208 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  1081b0:	e51b3008 	ldr	r3, [fp, #-8]
  1081b4:	e5933014 	ldr	r3, [r3, #20]
  1081b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1081bc:	e50b300c 	str	r3, [fp, #-12]
  1081c0:	e51b300c 	ldr	r3, [fp, #-12]
  1081c4:	e5933008 	ldr	r3, [r3, #8]
  1081c8:	e5933010 	ldr	r3, [r3, #16]
  1081cc:	e3530000 	cmp	r3, #0
  1081d0:	1a000001 	bne	1081dc <sal_connect+0x84>
  1081d4:	e3e03000 	mvn	r3, #0
  1081d8:	ea00000a 	b	108208 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  1081dc:	e51b300c 	ldr	r3, [fp, #-12]
  1081e0:	e5933008 	ldr	r3, [r3, #8]
  1081e4:	e5933010 	ldr	r3, [r3, #16]
  1081e8:	e51b2008 	ldr	r2, [fp, #-8]
  1081ec:	e5922018 	ldr	r2, [r2, #24]
  1081f0:	e1a00002 	mov	r0, r2
  1081f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1081fc:	e12fff33 	blx	r3
  108200:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  108204:	e51b3010 	ldr	r3, [fp, #-16]
}
  108208:	e1a00003 	mov	r0, r3
  10820c:	e24bd004 	sub	sp, fp, #4
  108210:	e8bd8800 	pop	{fp, pc}

00108214 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  108214:	e92d4800 	push	{fp, lr}
  108218:	e28db004 	add	fp, sp, #4
  10821c:	e24dd010 	sub	sp, sp, #16
  108220:	e50b0010 	str	r0, [fp, #-16]
  108224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108228:	e51b0010 	ldr	r0, [fp, #-16]
  10822c:	ebfffc2e 	bl	1072ec <sal_get_socket>
  108230:	e50b0008 	str	r0, [fp, #-8]
  108234:	e51b3008 	ldr	r3, [fp, #-8]
  108238:	e3530000 	cmp	r3, #0
  10823c:	1a000001 	bne	108248 <sal_listen+0x34>
  108240:	e3e03000 	mvn	r3, #0
  108244:	ea000013 	b	108298 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108248:	e51b3008 	ldr	r3, [fp, #-8]
  10824c:	e5933014 	ldr	r3, [r3, #20]
  108250:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108254:	e50b300c 	str	r3, [fp, #-12]
  108258:	e51b300c 	ldr	r3, [fp, #-12]
  10825c:	e5933008 	ldr	r3, [r3, #8]
  108260:	e593300c 	ldr	r3, [r3, #12]
  108264:	e3530000 	cmp	r3, #0
  108268:	1a000001 	bne	108274 <sal_listen+0x60>
  10826c:	e3e03000 	mvn	r3, #0
  108270:	ea000008 	b	108298 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  108274:	e51b300c 	ldr	r3, [fp, #-12]
  108278:	e5933008 	ldr	r3, [r3, #8]
  10827c:	e593300c 	ldr	r3, [r3, #12]
  108280:	e51b2008 	ldr	r2, [fp, #-8]
  108284:	e5922018 	ldr	r2, [r2, #24]
  108288:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10828c:	e1a00002 	mov	r0, r2
  108290:	e12fff33 	blx	r3
  108294:	e1a03000 	mov	r3, r0
}
  108298:	e1a00003 	mov	r0, r3
  10829c:	e24bd004 	sub	sp, fp, #4
  1082a0:	e8bd8800 	pop	{fp, pc}

001082a4 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  1082a4:	e92d4810 	push	{r4, fp, lr}
  1082a8:	e28db008 	add	fp, sp, #8
  1082ac:	e24dd024 	sub	sp, sp, #36	; 0x24
  1082b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1082b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1082b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1082bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1082c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1082c4:	ebfffc08 	bl	1072ec <sal_get_socket>
  1082c8:	e50b0010 	str	r0, [fp, #-16]
  1082cc:	e51b3010 	ldr	r3, [fp, #-16]
  1082d0:	e3530000 	cmp	r3, #0
  1082d4:	1a000001 	bne	1082e0 <sal_recvfrom+0x3c>
  1082d8:	e3e03000 	mvn	r3, #0
  1082dc:	ea000021 	b	108368 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1082e0:	e51b3010 	ldr	r3, [fp, #-16]
  1082e4:	e5933014 	ldr	r3, [r3, #20]
  1082e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1082ec:	e2033001 	and	r3, r3, #1
  1082f0:	e3530000 	cmp	r3, #0
  1082f4:	1a000001 	bne	108300 <sal_recvfrom+0x5c>
  1082f8:	e3e03000 	mvn	r3, #0
  1082fc:	ea000019 	b	108368 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  108300:	e51b3010 	ldr	r3, [fp, #-16]
  108304:	e5933014 	ldr	r3, [r3, #20]
  108308:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10830c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108314:	e5933008 	ldr	r3, [r3, #8]
  108318:	e593301c 	ldr	r3, [r3, #28]
  10831c:	e3530000 	cmp	r3, #0
  108320:	1a000001 	bne	10832c <sal_recvfrom+0x88>
  108324:	e3e03000 	mvn	r3, #0
  108328:	ea00000e 	b	108368 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  10832c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108330:	e5933008 	ldr	r3, [r3, #8]
  108334:	e593401c 	ldr	r4, [r3, #28]
  108338:	e51b3010 	ldr	r3, [fp, #-16]
  10833c:	e5933018 	ldr	r3, [r3, #24]
  108340:	e1a00003 	mov	r0, r3
  108344:	e59b3008 	ldr	r3, [fp, #8]
  108348:	e58d3004 	str	r3, [sp, #4]
  10834c:	e59b3004 	ldr	r3, [fp, #4]
  108350:	e58d3000 	str	r3, [sp]
  108354:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108358:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10835c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108360:	e12fff34 	blx	r4
  108364:	e1a03000 	mov	r3, r0
#endif
}
  108368:	e1a00003 	mov	r0, r3
  10836c:	e24bd008 	sub	sp, fp, #8
  108370:	e8bd8810 	pop	{r4, fp, pc}

00108374 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  108374:	e92d4810 	push	{r4, fp, lr}
  108378:	e28db008 	add	fp, sp, #8
  10837c:	e24dd024 	sub	sp, sp, #36	; 0x24
  108380:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108384:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108388:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10838c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108390:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108394:	ebfffbd4 	bl	1072ec <sal_get_socket>
  108398:	e50b0010 	str	r0, [fp, #-16]
  10839c:	e51b3010 	ldr	r3, [fp, #-16]
  1083a0:	e3530000 	cmp	r3, #0
  1083a4:	1a000001 	bne	1083b0 <sal_sendto+0x3c>
  1083a8:	e3e03000 	mvn	r3, #0
  1083ac:	ea000021 	b	108438 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083b0:	e51b3010 	ldr	r3, [fp, #-16]
  1083b4:	e5933014 	ldr	r3, [r3, #20]
  1083b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083bc:	e2033001 	and	r3, r3, #1
  1083c0:	e3530000 	cmp	r3, #0
  1083c4:	1a000001 	bne	1083d0 <sal_sendto+0x5c>
  1083c8:	e3e03000 	mvn	r3, #0
  1083cc:	ea000019 	b	108438 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  1083d0:	e51b3010 	ldr	r3, [fp, #-16]
  1083d4:	e5933014 	ldr	r3, [r3, #20]
  1083d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1083e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083e4:	e5933008 	ldr	r3, [r3, #8]
  1083e8:	e5933018 	ldr	r3, [r3, #24]
  1083ec:	e3530000 	cmp	r3, #0
  1083f0:	1a000001 	bne	1083fc <sal_sendto+0x88>
  1083f4:	e3e03000 	mvn	r3, #0
  1083f8:	ea00000e 	b	108438 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  1083fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108400:	e5933008 	ldr	r3, [r3, #8]
  108404:	e5934018 	ldr	r4, [r3, #24]
  108408:	e51b3010 	ldr	r3, [fp, #-16]
  10840c:	e5933018 	ldr	r3, [r3, #24]
  108410:	e1a00003 	mov	r0, r3
  108414:	e59b3008 	ldr	r3, [fp, #8]
  108418:	e58d3004 	str	r3, [sp, #4]
  10841c:	e59b3004 	ldr	r3, [fp, #4]
  108420:	e58d3000 	str	r3, [sp]
  108424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10842c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108430:	e12fff34 	blx	r4
  108434:	e1a03000 	mov	r3, r0
#endif
}
  108438:	e1a00003 	mov	r0, r3
  10843c:	e24bd008 	sub	sp, fp, #8
  108440:	e8bd8810 	pop	{r4, fp, pc}

00108444 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108444:	e92d4800 	push	{fp, lr}
  108448:	e28db004 	add	fp, sp, #4
  10844c:	e24dd028 	sub	sp, sp, #40	; 0x28
  108450:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108454:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108458:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  10845c:	ebfffd1f 	bl	1078e0 <socket_new>
  108460:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  108464:	e51b3008 	ldr	r3, [fp, #-8]
  108468:	e3530000 	cmp	r3, #0
  10846c:	aa000001 	bge	108478 <sal_socket+0x34>
    {
        return -1;
  108470:	e3e03000 	mvn	r3, #0
  108474:	ea000040 	b	10857c <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  108478:	e51b0008 	ldr	r0, [fp, #-8]
  10847c:	ebfffb9a 	bl	1072ec <sal_get_socket>
  108480:	e1a03000 	mov	r3, r0
  108484:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  108488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10848c:	e3530000 	cmp	r3, #0
  108490:	1a000003 	bne	1084a4 <sal_socket+0x60>
    {
        socket_delete(socket);
  108494:	e51b0008 	ldr	r0, [fp, #-8]
  108498:	ebfffd3c 	bl	107990 <socket_delete>
        return -1;
  10849c:	e3e03000 	mvn	r3, #0
  1084a0:	ea000035 	b	10857c <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  1084a4:	e24b3018 	sub	r3, fp, #24
  1084a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1084ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1084b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1084b4:	ebfffc0b 	bl	1074e8 <socket_init>
  1084b8:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  1084bc:	e51b300c 	ldr	r3, [fp, #-12]
  1084c0:	e3530000 	cmp	r3, #0
  1084c4:	aa00000d 	bge	108500 <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  1084c8:	e3050f48 	movw	r0, #24392	; 0x5f48
  1084cc:	e3400014 	movt	r0, #20
  1084d0:	ebffeb0f 	bl	103114 <rt_kprintf>
  1084d4:	e51b100c 	ldr	r1, [fp, #-12]
  1084d8:	e30600e0 	movw	r0, #24800	; 0x60e0
  1084dc:	e3400014 	movt	r0, #20
  1084e0:	ebffeb0b 	bl	103114 <rt_kprintf>
  1084e4:	e3050f7c 	movw	r0, #24444	; 0x5f7c
  1084e8:	e3400014 	movt	r0, #20
  1084ec:	ebffeb08 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  1084f0:	e51b0008 	ldr	r0, [fp, #-8]
  1084f4:	ebfffd25 	bl	107990 <socket_delete>
        return -1;
  1084f8:	e3e03000 	mvn	r3, #0
  1084fc:	ea00001e 	b	10857c <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  108500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108504:	e5933014 	ldr	r3, [r3, #20]
  108508:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10850c:	e50b3010 	str	r3, [fp, #-16]
  108510:	e51b3010 	ldr	r3, [fp, #-16]
  108514:	e5933008 	ldr	r3, [r3, #8]
  108518:	e5933000 	ldr	r3, [r3]
  10851c:	e3530000 	cmp	r3, #0
  108520:	1a000001 	bne	10852c <sal_socket+0xe8>
  108524:	e3e03000 	mvn	r3, #0
  108528:	ea000013 	b	10857c <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  10852c:	e51b3010 	ldr	r3, [fp, #-16]
  108530:	e5933008 	ldr	r3, [r3, #8]
  108534:	e5933000 	ldr	r3, [r3]
  108538:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10853c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108540:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108544:	e12fff33 	blx	r3
  108548:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  10854c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108550:	e3530000 	cmp	r3, #0
  108554:	ba000005 	blt	108570 <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10855c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  108560:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108568:	e5933004 	ldr	r3, [r3, #4]
  10856c:	ea000002 	b	10857c <sal_socket+0x138>
    }
    socket_delete(socket);
  108570:	e51b0008 	ldr	r0, [fp, #-8]
  108574:	ebfffd05 	bl	107990 <socket_delete>
    return -1;
  108578:	e3e03000 	mvn	r3, #0
}
  10857c:	e1a00003 	mov	r0, r3
  108580:	e24bd004 	sub	sp, fp, #4
  108584:	e8bd8800 	pop	{fp, pc}

00108588 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108588:	e92d4800 	push	{fp, lr}
  10858c:	e28db004 	add	fp, sp, #4
  108590:	e24dd018 	sub	sp, sp, #24
  108594:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108598:	e3a03000 	mov	r3, #0
  10859c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1085a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085a4:	ebfffb50 	bl	1072ec <sal_get_socket>
  1085a8:	e50b000c 	str	r0, [fp, #-12]
  1085ac:	e51b300c 	ldr	r3, [fp, #-12]
  1085b0:	e3530000 	cmp	r3, #0
  1085b4:	1a000001 	bne	1085c0 <sal_closesocket+0x38>
  1085b8:	e3e03000 	mvn	r3, #0
  1085bc:	ea00001c 	b	108634 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  1085c0:	e51b300c 	ldr	r3, [fp, #-12]
  1085c4:	e5933014 	ldr	r3, [r3, #20]
  1085c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1085cc:	e50b3010 	str	r3, [fp, #-16]
  1085d0:	e51b3010 	ldr	r3, [fp, #-16]
  1085d4:	e5933008 	ldr	r3, [r3, #8]
  1085d8:	e5933000 	ldr	r3, [r3]
  1085dc:	e3530000 	cmp	r3, #0
  1085e0:	1a000001 	bne	1085ec <sal_closesocket+0x64>
  1085e4:	e3e03000 	mvn	r3, #0
  1085e8:	ea000011 	b	108634 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  1085ec:	e51b3010 	ldr	r3, [fp, #-16]
  1085f0:	e5933008 	ldr	r3, [r3, #8]
  1085f4:	e5933004 	ldr	r3, [r3, #4]
  1085f8:	e51b200c 	ldr	r2, [fp, #-12]
  1085fc:	e5922018 	ldr	r2, [r2, #24]
  108600:	e1a00002 	mov	r0, r2
  108604:	e12fff33 	blx	r3
  108608:	e1a03000 	mov	r3, r0
  10860c:	e3530000 	cmp	r3, #0
  108610:	1a000002 	bne	108620 <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  108614:	e3a03000 	mov	r3, #0
  108618:	e50b3008 	str	r3, [fp, #-8]
  10861c:	ea000001 	b	108628 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  108620:	e3e03000 	mvn	r3, #0
  108624:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  108628:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10862c:	ebfffcd7 	bl	107990 <socket_delete>

    return error;
  108630:	e51b3008 	ldr	r3, [fp, #-8]
}
  108634:	e1a00003 	mov	r0, r3
  108638:	e24bd004 	sub	sp, fp, #4
  10863c:	e8bd8800 	pop	{fp, pc}

00108640 <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  108640:	e92d4800 	push	{fp, lr}
  108644:	e28db004 	add	fp, sp, #4
  108648:	e24dd028 	sub	sp, sp, #40	; 0x28
  10864c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108650:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108654:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108658:	e3a03000 	mov	r3, #0
  10865c:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  108660:	e3a03000 	mov	r3, #0
  108664:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108668:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10866c:	ebfffb1e 	bl	1072ec <sal_get_socket>
  108670:	e50b0010 	str	r0, [fp, #-16]
  108674:	e51b3010 	ldr	r3, [fp, #-16]
  108678:	e3530000 	cmp	r3, #0
  10867c:	1a000001 	bne	108688 <sal_ioctlsocket+0x48>
  108680:	e3e03000 	mvn	r3, #0
  108684:	ea000086 	b	1088a4 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108688:	e51b3010 	ldr	r3, [fp, #-16]
  10868c:	e5933014 	ldr	r3, [r3, #20]
  108690:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10869c:	e5933008 	ldr	r3, [r3, #8]
  1086a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1086a4:	e3530000 	cmp	r3, #0
  1086a8:	1a000001 	bne	1086b4 <sal_ioctlsocket+0x74>
  1086ac:	e3e03000 	mvn	r3, #0
  1086b0:	ea00007b 	b	1088a4 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  1086b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1086b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  1086bc:	e51b3010 	ldr	r3, [fp, #-16]
  1086c0:	e5933008 	ldr	r3, [r3, #8]
  1086c4:	e3530002 	cmp	r3, #2
  1086c8:	1a000068 	bne	108870 <sal_ioctlsocket+0x230>
  1086cc:	e51b3010 	ldr	r3, [fp, #-16]
  1086d0:	e5933014 	ldr	r3, [r3, #20]
  1086d4:	e3530000 	cmp	r3, #0
  1086d8:	0a000064 	beq	108870 <sal_ioctlsocket+0x230>
  1086dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1086e0:	e3530000 	cmp	r3, #0
  1086e4:	0a000061 	beq	108870 <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  1086e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1086ec:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1086f0:	e2433015 	sub	r3, r3, #21
  1086f4:	e3530012 	cmp	r3, #18
  1086f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1086fc:	ea00005d 	b	108878 <sal_ioctlsocket+0x238>
  108700:	0010874c 	.word	0x0010874c
  108704:	00108774 	.word	0x00108774
  108708:	00108878 	.word	0x00108878
  10870c:	00108878 	.word	0x00108878
  108710:	00108878 	.word	0x00108878
  108714:	00108878 	.word	0x00108878
  108718:	001087b0 	.word	0x001087b0
  10871c:	001087d8 	.word	0x001087d8
  108720:	00108878 	.word	0x00108878
  108724:	00108878 	.word	0x00108878
  108728:	00108878 	.word	0x00108878
  10872c:	00108878 	.word	0x00108878
  108730:	00108850 	.word	0x00108850
  108734:	00108878 	.word	0x00108878
  108738:	00108878 	.word	0x00108878
  10873c:	00108878 	.word	0x00108878
  108740:	00108878 	.word	0x00108878
  108744:	00108878 	.word	0x00108878
  108748:	00108814 	.word	0x00108814
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  10874c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108750:	e2833010 	add	r3, r3, #16
  108754:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108758:	e51b3010 	ldr	r3, [fp, #-16]
  10875c:	e5933014 	ldr	r3, [r3, #20]
  108760:	e593200c 	ldr	r2, [r3, #12]
  108764:	e51b3008 	ldr	r3, [fp, #-8]
  108768:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10876c:	e3a03000 	mov	r3, #0
  108770:	ea00004b 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108778:	e2833010 	add	r3, r3, #16
  10877c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108780:	e24b301c 	sub	r3, fp, #28
  108784:	e1a01003 	mov	r1, r3
  108788:	e51b000c 	ldr	r0, [fp, #-12]
  10878c:	ebfffd17 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  108790:	e51b3010 	ldr	r3, [fp, #-16]
  108794:	e5933014 	ldr	r3, [r3, #20]
  108798:	e24b201c 	sub	r2, fp, #28
  10879c:	e1a01002 	mov	r1, r2
  1087a0:	e1a00003 	mov	r0, r3
  1087a4:	ebfff4ae 	bl	105a64 <netdev_set_ipaddr>
            return 0;    
  1087a8:	e3a03000 	mov	r3, #0
  1087ac:	ea00003c 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  1087b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087b4:	e2833010 	add	r3, r3, #16
  1087b8:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  1087bc:	e51b3010 	ldr	r3, [fp, #-16]
  1087c0:	e5933014 	ldr	r3, [r3, #20]
  1087c4:	e5932010 	ldr	r2, [r3, #16]
  1087c8:	e51b3008 	ldr	r3, [fp, #-8]
  1087cc:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  1087d0:	e3a03000 	mov	r3, #0
  1087d4:	ea000032 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  1087d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087dc:	e2833010 	add	r3, r3, #16
  1087e0:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1087e4:	e24b301c 	sub	r3, fp, #28
  1087e8:	e1a01003 	mov	r1, r3
  1087ec:	e51b000c 	ldr	r0, [fp, #-12]
  1087f0:	ebfffcfe 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1087f4:	e51b3010 	ldr	r3, [fp, #-16]
  1087f8:	e5933014 	ldr	r3, [r3, #20]
  1087fc:	e24b201c 	sub	r2, fp, #28
  108800:	e1a01002 	mov	r1, r2
  108804:	e1a00003 	mov	r0, r3
  108808:	ebfff4e4 	bl	105ba0 <netdev_set_netmask>
            return 0;            
  10880c:	e3a03000 	mov	r3, #0
  108810:	ea000023 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  108814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108818:	e2833010 	add	r3, r3, #16
  10881c:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  108820:	e51b300c 	ldr	r3, [fp, #-12]
  108824:	e2830002 	add	r0, r3, #2
  108828:	e51b3010 	ldr	r3, [fp, #-16]
  10882c:	e5933014 	ldr	r3, [r3, #20]
  108830:	e2831021 	add	r1, r3, #33	; 0x21
  108834:	e51b3010 	ldr	r3, [fp, #-16]
  108838:	e5933014 	ldr	r3, [r3, #20]
  10883c:	e5d33020 	ldrb	r3, [r3, #32]
  108840:	e1a02003 	mov	r2, r3
  108844:	ebffeaad 	bl	103300 <rt_memcpy>
            return 0;
  108848:	e3a03000 	mov	r3, #0
  10884c:	ea000014 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  108850:	e51b3010 	ldr	r3, [fp, #-16]
  108854:	e5933014 	ldr	r3, [r3, #20]
  108858:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  10885c:	e1a02003 	mov	r2, r3
  108860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108864:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108868:	e3a03000 	mov	r3, #0
  10886c:	ea00000c 	b	1088a4 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  108870:	e320f000 	nop	{0}
  108874:	ea000000 	b	10887c <sal_ioctlsocket+0x23c>
            break;
  108878:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  10887c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108880:	e5933008 	ldr	r3, [r3, #8]
  108884:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108888:	e51b2010 	ldr	r2, [fp, #-16]
  10888c:	e5922018 	ldr	r2, [r2, #24]
  108890:	e1a00002 	mov	r0, r2
  108894:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108898:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10889c:	e12fff33 	blx	r3
  1088a0:	e1a03000 	mov	r3, r0
}
  1088a4:	e1a00003 	mov	r0, r3
  1088a8:	e24bd004 	sub	sp, fp, #4
  1088ac:	e8bd8800 	pop	{fp, pc}

001088b0 <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  1088b0:	e92d4800 	push	{fp, lr}
  1088b4:	e28db004 	add	fp, sp, #4
  1088b8:	e24dd018 	sub	sp, sp, #24
  1088bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1088c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  1088c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088c8:	e5933018 	ldr	r3, [r3, #24]
  1088cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1088d0:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1088d4:	e51b0008 	ldr	r0, [fp, #-8]
  1088d8:	ebfffa83 	bl	1072ec <sal_get_socket>
  1088dc:	e50b000c 	str	r0, [fp, #-12]
  1088e0:	e51b300c 	ldr	r3, [fp, #-12]
  1088e4:	e3530000 	cmp	r3, #0
  1088e8:	1a000001 	bne	1088f4 <sal_poll+0x44>
  1088ec:	e3e03000 	mvn	r3, #0
  1088f0:	ea000019 	b	10895c <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1088f4:	e51b300c 	ldr	r3, [fp, #-12]
  1088f8:	e5933014 	ldr	r3, [r3, #20]
  1088fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108900:	e2033001 	and	r3, r3, #1
  108904:	e3530000 	cmp	r3, #0
  108908:	1a000001 	bne	108914 <sal_poll+0x64>
  10890c:	e3e03000 	mvn	r3, #0
  108910:	ea000011 	b	10895c <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  108914:	e51b300c 	ldr	r3, [fp, #-12]
  108918:	e5933014 	ldr	r3, [r3, #20]
  10891c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108920:	e50b3010 	str	r3, [fp, #-16]
  108924:	e51b3010 	ldr	r3, [fp, #-16]
  108928:	e5933008 	ldr	r3, [r3, #8]
  10892c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108930:	e3530000 	cmp	r3, #0
  108934:	1a000001 	bne	108940 <sal_poll+0x90>
  108938:	e3e03000 	mvn	r3, #0
  10893c:	ea000006 	b	10895c <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  108940:	e51b3010 	ldr	r3, [fp, #-16]
  108944:	e5933008 	ldr	r3, [r3, #8]
  108948:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10894c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108950:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108954:	e12fff33 	blx	r3
  108958:	e1a03000 	mov	r3, r0
}
  10895c:	e1a00003 	mov	r0, r3
  108960:	e24bd004 	sub	sp, fp, #4
  108964:	e8bd8800 	pop	{fp, pc}

00108968 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108968:	e92d4800 	push	{fp, lr}
  10896c:	e28db004 	add	fp, sp, #4
  108970:	e24dd010 	sub	sp, sp, #16
  108974:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108978:	e30f3594 	movw	r3, #62868	; 0xf594
  10897c:	e3403014 	movt	r3, #20
  108980:	e5933000 	ldr	r3, [r3]
  108984:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108988:	e51b3008 	ldr	r3, [fp, #-8]
  10898c:	e3530000 	cmp	r3, #0
  108990:	0a000017 	beq	1089f4 <sal_gethostbyname+0x8c>
  108994:	e51b3008 	ldr	r3, [fp, #-8]
  108998:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10899c:	e2033001 	and	r3, r3, #1
  1089a0:	e6ef3073 	uxtb	r3, r3
  1089a4:	e3530000 	cmp	r3, #0
  1089a8:	0a000011 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089ac:	e51b3008 	ldr	r3, [fp, #-8]
  1089b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1089b4:	e50b300c 	str	r3, [fp, #-12]
  1089b8:	e51b300c 	ldr	r3, [fp, #-12]
  1089bc:	e3530000 	cmp	r3, #0
  1089c0:	0a00000b 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089c4:	e51b300c 	ldr	r3, [fp, #-12]
  1089c8:	e593300c 	ldr	r3, [r3, #12]
  1089cc:	e5933000 	ldr	r3, [r3]
  1089d0:	e3530000 	cmp	r3, #0
  1089d4:	0a000006 	beq	1089f4 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  1089d8:	e51b300c 	ldr	r3, [fp, #-12]
  1089dc:	e593300c 	ldr	r3, [r3, #12]
  1089e0:	e5933000 	ldr	r3, [r3]
  1089e4:	e51b0010 	ldr	r0, [fp, #-16]
  1089e8:	e12fff33 	blx	r3
  1089ec:	e1a03000 	mov	r3, r0
  1089f0:	ea00001e 	b	108a70 <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1089f4:	e3a00001 	mov	r0, #1
  1089f8:	ebfff265 	bl	105394 <netdev_get_first_by_flags>
  1089fc:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a00:	e51b3008 	ldr	r3, [fp, #-8]
  108a04:	e3530000 	cmp	r3, #0
  108a08:	0a000017 	beq	108a6c <sal_gethostbyname+0x104>
  108a0c:	e51b3008 	ldr	r3, [fp, #-8]
  108a10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a14:	e2033001 	and	r3, r3, #1
  108a18:	e6ef3073 	uxtb	r3, r3
  108a1c:	e3530000 	cmp	r3, #0
  108a20:	0a000011 	beq	108a6c <sal_gethostbyname+0x104>
  108a24:	e51b3008 	ldr	r3, [fp, #-8]
  108a28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a2c:	e50b300c 	str	r3, [fp, #-12]
  108a30:	e51b300c 	ldr	r3, [fp, #-12]
  108a34:	e3530000 	cmp	r3, #0
  108a38:	0a00000b 	beq	108a6c <sal_gethostbyname+0x104>
  108a3c:	e51b300c 	ldr	r3, [fp, #-12]
  108a40:	e593300c 	ldr	r3, [r3, #12]
  108a44:	e5933000 	ldr	r3, [r3]
  108a48:	e3530000 	cmp	r3, #0
  108a4c:	0a000006 	beq	108a6c <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108a50:	e51b300c 	ldr	r3, [fp, #-12]
  108a54:	e593300c 	ldr	r3, [r3, #12]
  108a58:	e5933000 	ldr	r3, [r3]
  108a5c:	e51b0010 	ldr	r0, [fp, #-16]
  108a60:	e12fff33 	blx	r3
  108a64:	e1a03000 	mov	r3, r0
  108a68:	ea000000 	b	108a70 <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108a6c:	e3a03000 	mov	r3, #0
}
  108a70:	e1a00003 	mov	r0, r3
  108a74:	e24bd004 	sub	sp, fp, #4
  108a78:	e8bd8800 	pop	{fp, pc}

00108a7c <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108a7c:	e92d4810 	push	{r4, fp, lr}
  108a80:	e28db008 	add	fp, sp, #8
  108a84:	e24dd024 	sub	sp, sp, #36	; 0x24
  108a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108a8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108a90:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108a94:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108a98:	e30f3594 	movw	r3, #62868	; 0xf594
  108a9c:	e3403014 	movt	r3, #20
  108aa0:	e5933000 	ldr	r3, [r3]
  108aa4:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108aa8:	e51b3010 	ldr	r3, [fp, #-16]
  108aac:	e3530000 	cmp	r3, #0
  108ab0:	0a00001e 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ab4:	e51b3010 	ldr	r3, [fp, #-16]
  108ab8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108abc:	e2033001 	and	r3, r3, #1
  108ac0:	e6ef3073 	uxtb	r3, r3
  108ac4:	e3530000 	cmp	r3, #0
  108ac8:	0a000018 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108acc:	e51b3010 	ldr	r3, [fp, #-16]
  108ad0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108adc:	e3530000 	cmp	r3, #0
  108ae0:	0a000012 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ae8:	e593300c 	ldr	r3, [r3, #12]
  108aec:	e5933004 	ldr	r3, [r3, #4]
  108af0:	e3530000 	cmp	r3, #0
  108af4:	0a00000d 	beq	108b30 <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108afc:	e593300c 	ldr	r3, [r3, #12]
  108b00:	e5934004 	ldr	r4, [r3, #4]
  108b04:	e59b3008 	ldr	r3, [fp, #8]
  108b08:	e58d3004 	str	r3, [sp, #4]
  108b0c:	e59b3004 	ldr	r3, [fp, #4]
  108b10:	e58d3000 	str	r3, [sp]
  108b14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108b18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108b1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108b24:	e12fff34 	blx	r4
  108b28:	e1a03000 	mov	r3, r0
  108b2c:	ea000025 	b	108bc8 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108b30:	e3a00001 	mov	r0, #1
  108b34:	ebfff216 	bl	105394 <netdev_get_first_by_flags>
  108b38:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b3c:	e51b3010 	ldr	r3, [fp, #-16]
  108b40:	e3530000 	cmp	r3, #0
  108b44:	0a00001e 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b48:	e51b3010 	ldr	r3, [fp, #-16]
  108b4c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b50:	e2033001 	and	r3, r3, #1
  108b54:	e6ef3073 	uxtb	r3, r3
  108b58:	e3530000 	cmp	r3, #0
  108b5c:	0a000018 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b60:	e51b3010 	ldr	r3, [fp, #-16]
  108b64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b70:	e3530000 	cmp	r3, #0
  108b74:	0a000012 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b7c:	e593300c 	ldr	r3, [r3, #12]
  108b80:	e5933004 	ldr	r3, [r3, #4]
  108b84:	e3530000 	cmp	r3, #0
  108b88:	0a00000d 	beq	108bc4 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b90:	e593300c 	ldr	r3, [r3, #12]
  108b94:	e5934004 	ldr	r4, [r3, #4]
  108b98:	e59b3008 	ldr	r3, [fp, #8]
  108b9c:	e58d3004 	str	r3, [sp, #4]
  108ba0:	e59b3004 	ldr	r3, [fp, #4]
  108ba4:	e58d3000 	str	r3, [sp]
  108ba8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108bb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108bb8:	e12fff34 	blx	r4
  108bbc:	e1a03000 	mov	r3, r0
  108bc0:	ea000000 	b	108bc8 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108bc4:	e3e03000 	mvn	r3, #0
}
  108bc8:	e1a00003 	mov	r0, r3
  108bcc:	e24bd008 	sub	sp, fp, #8
  108bd0:	e8bd8810 	pop	{r4, fp, pc}

00108bd4 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108bd4:	e92d4810 	push	{r4, fp, lr}
  108bd8:	e28db008 	add	fp, sp, #8
  108bdc:	e24dd01c 	sub	sp, sp, #28
  108be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108be8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108bec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108bf0:	e30f3594 	movw	r3, #62868	; 0xf594
  108bf4:	e3403014 	movt	r3, #20
  108bf8:	e5933000 	ldr	r3, [r3]
  108bfc:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c00:	e51b3010 	ldr	r3, [fp, #-16]
  108c04:	e3530000 	cmp	r3, #0
  108c08:	0a00001a 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c0c:	e51b3010 	ldr	r3, [fp, #-16]
  108c10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c14:	e2033001 	and	r3, r3, #1
  108c18:	e6ef3073 	uxtb	r3, r3
  108c1c:	e3530000 	cmp	r3, #0
  108c20:	0a000014 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c24:	e51b3010 	ldr	r3, [fp, #-16]
  108c28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c34:	e3530000 	cmp	r3, #0
  108c38:	0a00000e 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c40:	e593300c 	ldr	r3, [r3, #12]
  108c44:	e5933008 	ldr	r3, [r3, #8]
  108c48:	e3530000 	cmp	r3, #0
  108c4c:	0a000009 	beq	108c78 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c54:	e593300c 	ldr	r3, [r3, #12]
  108c58:	e5934008 	ldr	r4, [r3, #8]
  108c5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108c60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108c64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c6c:	e12fff34 	blx	r4
  108c70:	e1a03000 	mov	r3, r0
  108c74:	ea000021 	b	108d00 <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108c78:	e3a00001 	mov	r0, #1
  108c7c:	ebfff1c4 	bl	105394 <netdev_get_first_by_flags>
  108c80:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c84:	e51b3010 	ldr	r3, [fp, #-16]
  108c88:	e3530000 	cmp	r3, #0
  108c8c:	0a00001a 	beq	108cfc <sal_getaddrinfo+0x128>
  108c90:	e51b3010 	ldr	r3, [fp, #-16]
  108c94:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c98:	e2033001 	and	r3, r3, #1
  108c9c:	e6ef3073 	uxtb	r3, r3
  108ca0:	e3530000 	cmp	r3, #0
  108ca4:	0a000014 	beq	108cfc <sal_getaddrinfo+0x128>
  108ca8:	e51b3010 	ldr	r3, [fp, #-16]
  108cac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108cb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cb8:	e3530000 	cmp	r3, #0
  108cbc:	0a00000e 	beq	108cfc <sal_getaddrinfo+0x128>
  108cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cc4:	e593300c 	ldr	r3, [r3, #12]
  108cc8:	e5933008 	ldr	r3, [r3, #8]
  108ccc:	e3530000 	cmp	r3, #0
  108cd0:	0a000009 	beq	108cfc <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cd8:	e593300c 	ldr	r3, [r3, #12]
  108cdc:	e5934008 	ldr	r4, [r3, #8]
  108ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108ce4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108ce8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108cec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108cf0:	e12fff34 	blx	r4
  108cf4:	e1a03000 	mov	r3, r0
  108cf8:	ea000000 	b	108d00 <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108cfc:	e3e03000 	mvn	r3, #0
}
  108d00:	e1a00003 	mov	r0, r3
  108d04:	e24bd008 	sub	sp, fp, #8
  108d08:	e8bd8810 	pop	{r4, fp, pc}

00108d0c <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108d0c:	e92d4800 	push	{fp, lr}
  108d10:	e28db004 	add	fp, sp, #4
  108d14:	e24dd010 	sub	sp, sp, #16
  108d18:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108d1c:	e30f3594 	movw	r3, #62868	; 0xf594
  108d20:	e3403014 	movt	r3, #20
  108d24:	e5933000 	ldr	r3, [r3]
  108d28:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108d2c:	e51b3008 	ldr	r3, [fp, #-8]
  108d30:	e3530000 	cmp	r3, #0
  108d34:	0a000016 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d38:	e51b3008 	ldr	r3, [fp, #-8]
  108d3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d40:	e2033001 	and	r3, r3, #1
  108d44:	e6ef3073 	uxtb	r3, r3
  108d48:	e3530000 	cmp	r3, #0
  108d4c:	0a000010 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d50:	e51b3008 	ldr	r3, [fp, #-8]
  108d54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108d58:	e50b300c 	str	r3, [fp, #-12]
  108d5c:	e51b300c 	ldr	r3, [fp, #-12]
  108d60:	e3530000 	cmp	r3, #0
  108d64:	0a00000a 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d68:	e51b300c 	ldr	r3, [fp, #-12]
  108d6c:	e593300c 	ldr	r3, [r3, #12]
  108d70:	e593300c 	ldr	r3, [r3, #12]
  108d74:	e3530000 	cmp	r3, #0
  108d78:	0a000005 	beq	108d94 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108d7c:	e51b300c 	ldr	r3, [fp, #-12]
  108d80:	e593300c 	ldr	r3, [r3, #12]
  108d84:	e593300c 	ldr	r3, [r3, #12]
  108d88:	e51b0010 	ldr	r0, [fp, #-16]
  108d8c:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108d90:	ea00001b 	b	108e04 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108d94:	e3a00001 	mov	r0, #1
  108d98:	ebfff17d 	bl	105394 <netdev_get_first_by_flags>
  108d9c:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108da0:	e51b3008 	ldr	r3, [fp, #-8]
  108da4:	e3530000 	cmp	r3, #0
  108da8:	0a000015 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dac:	e51b3008 	ldr	r3, [fp, #-8]
  108db0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108db4:	e2033001 	and	r3, r3, #1
  108db8:	e6ef3073 	uxtb	r3, r3
  108dbc:	e3530000 	cmp	r3, #0
  108dc0:	0a00000f 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dc4:	e51b3008 	ldr	r3, [fp, #-8]
  108dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108dcc:	e50b300c 	str	r3, [fp, #-12]
  108dd0:	e51b300c 	ldr	r3, [fp, #-12]
  108dd4:	e3530000 	cmp	r3, #0
  108dd8:	0a000009 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108ddc:	e51b300c 	ldr	r3, [fp, #-12]
  108de0:	e593300c 	ldr	r3, [r3, #12]
  108de4:	e593300c 	ldr	r3, [r3, #12]
  108de8:	e3530000 	cmp	r3, #0
  108dec:	0a000004 	beq	108e04 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108df0:	e51b300c 	ldr	r3, [fp, #-12]
  108df4:	e593300c 	ldr	r3, [r3, #12]
  108df8:	e593300c 	ldr	r3, [r3, #12]
  108dfc:	e51b0010 	ldr	r0, [fp, #-16]
  108e00:	e12fff33 	blx	r3
}
  108e04:	e320f000 	nop	{0}
  108e08:	e24bd004 	sub	sp, fp, #4
  108e0c:	e8bd8800 	pop	{fp, pc}

00108e10 <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108e10:	e92d4800 	push	{fp, lr}
  108e14:	e28db004 	add	fp, sp, #4
  108e18:	e24dd018 	sub	sp, sp, #24
  108e1c:	e50b0010 	str	r0, [fp, #-16]
  108e20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108e24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e2c:	e2033b02 	and	r3, r3, #2048	; 0x800
  108e30:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e38:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108e40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108e44:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108e48:	e51b0010 	ldr	r0, [fp, #-16]
  108e4c:	eb0027a0 	bl	112cd4 <lwip_socket>
  108e50:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108e54:	e51b300c 	ldr	r3, [fp, #-12]
  108e58:	e3530000 	cmp	r3, #0
  108e5c:	ba000006 	blt	108e7c <unet_socket+0x6c>
  108e60:	e51b3008 	ldr	r3, [fp, #-8]
  108e64:	e3530000 	cmp	r3, #0
  108e68:	0a000003 	beq	108e7c <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108e6c:	e51b2008 	ldr	r2, [fp, #-8]
  108e70:	e3a01004 	mov	r1, #4
  108e74:	e51b000c 	ldr	r0, [fp, #-12]
  108e78:	eb0000e2 	bl	109208 <unet_fcntl>

    return socket;
  108e7c:	e51b300c 	ldr	r3, [fp, #-12]
}
  108e80:	e1a00003 	mov	r0, r3
  108e84:	e24bd004 	sub	sp, fp, #4
  108e88:	e8bd8800 	pop	{fp, pc}

00108e8c <unet_close>:

int unet_close(int socket)
{
  108e8c:	e92d4800 	push	{fp, lr}
  108e90:	e28db004 	add	fp, sp, #4
  108e94:	e24dd010 	sub	sp, sp, #16
  108e98:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108e9c:	e51b0010 	ldr	r0, [fp, #-16]
  108ea0:	eb002275 	bl	11187c <lwip_close>
  108ea4:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108ea8:	e51b3008 	ldr	r3, [fp, #-8]
}
  108eac:	e1a00003 	mov	r0, r3
  108eb0:	e24bd004 	sub	sp, fp, #4
  108eb4:	e8bd8800 	pop	{fp, pc}

00108eb8 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108eb8:	e92d4800 	push	{fp, lr}
  108ebc:	e28db004 	add	fp, sp, #4
  108ec0:	e24dd010 	sub	sp, sp, #16
  108ec4:	e50b0008 	str	r0, [fp, #-8]
  108ec8:	e50b100c 	str	r1, [fp, #-12]
  108ecc:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108ed0:	e51b2010 	ldr	r2, [fp, #-16]
  108ed4:	e51b100c 	ldr	r1, [fp, #-12]
  108ed8:	e51b0008 	ldr	r0, [fp, #-8]
  108edc:	eb002200 	bl	1116e4 <lwip_bind>
  108ee0:	e1a03000 	mov	r3, r0
}
  108ee4:	e1a00003 	mov	r0, r3
  108ee8:	e24bd004 	sub	sp, fp, #4
  108eec:	e8bd8800 	pop	{fp, pc}

00108ef0 <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108ef0:	e92d4800 	push	{fp, lr}
  108ef4:	e28db004 	add	fp, sp, #4
  108ef8:	e24dd008 	sub	sp, sp, #8
  108efc:	e50b0008 	str	r0, [fp, #-8]
  108f00:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108f04:	e51b100c 	ldr	r1, [fp, #-12]
  108f08:	e51b0008 	ldr	r0, [fp, #-8]
  108f0c:	eb002319 	bl	111b78 <lwip_listen>
  108f10:	e1a03000 	mov	r3, r0
}
  108f14:	e1a00003 	mov	r0, r3
  108f18:	e24bd004 	sub	sp, fp, #4
  108f1c:	e8bd8800 	pop	{fp, pc}

00108f20 <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f20:	e92d4800 	push	{fp, lr}
  108f24:	e28db004 	add	fp, sp, #4
  108f28:	e24dd010 	sub	sp, sp, #16
  108f2c:	e50b0008 	str	r0, [fp, #-8]
  108f30:	e50b100c 	str	r1, [fp, #-12]
  108f34:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108f38:	e51b2010 	ldr	r2, [fp, #-16]
  108f3c:	e51b100c 	ldr	r1, [fp, #-12]
  108f40:	e51b0008 	ldr	r0, [fp, #-8]
  108f44:	eb002296 	bl	1119a4 <lwip_connect>
  108f48:	e1a03000 	mov	r3, r0
}
  108f4c:	e1a00003 	mov	r0, r3
  108f50:	e24bd004 	sub	sp, fp, #4
  108f54:	e8bd8800 	pop	{fp, pc}

00108f58 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108f58:	e92d4800 	push	{fp, lr}
  108f5c:	e28db004 	add	fp, sp, #4
  108f60:	e24dd010 	sub	sp, sp, #16
  108f64:	e50b0008 	str	r0, [fp, #-8]
  108f68:	e50b100c 	str	r1, [fp, #-12]
  108f6c:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108f70:	e51b2010 	ldr	r2, [fp, #-16]
  108f74:	e51b100c 	ldr	r1, [fp, #-12]
  108f78:	e51b0008 	ldr	r0, [fp, #-8]
  108f7c:	eb0020ca 	bl	1112ac <lwip_accept>
  108f80:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  108f84:	e51b3008 	ldr	r3, [fp, #-8]
}
  108f88:	e1a00003 	mov	r0, r3
  108f8c:	e24bd004 	sub	sp, fp, #4
  108f90:	e8bd8800 	pop	{fp, pc}

00108f94 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108f94:	e92d4800 	push	{fp, lr}
  108f98:	e28db004 	add	fp, sp, #4
  108f9c:	e24dd020 	sub	sp, sp, #32
  108fa0:	e50b0010 	str	r0, [fp, #-16]
  108fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108fa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108fac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108fb0:	e59b3008 	ldr	r3, [fp, #8]
  108fb4:	e3530000 	cmp	r3, #0
  108fb8:	1a00000a 	bne	108fe8 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  108fbc:	e3a03000 	mov	r3, #0
  108fc0:	e58d3004 	str	r3, [sp, #4]
  108fc4:	e3a03000 	mov	r3, #0
  108fc8:	e58d3000 	str	r3, [sp]
  108fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108fd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108fd8:	e51b0010 	ldr	r0, [fp, #-16]
  108fdc:	eb0026a8 	bl	112a84 <lwip_sendto>
  108fe0:	e50b0008 	str	r0, [fp, #-8]
  108fe4:	ea000009 	b	109010 <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  108fe8:	e59b3008 	ldr	r3, [fp, #8]
  108fec:	e58d3004 	str	r3, [sp, #4]
  108ff0:	e59b3004 	ldr	r3, [fp, #4]
  108ff4:	e58d3000 	str	r3, [sp]
  108ff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108ffc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109000:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109004:	e51b0010 	ldr	r0, [fp, #-16]
  109008:	eb00269d 	bl	112a84 <lwip_sendto>
  10900c:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  109010:	e51b3008 	ldr	r3, [fp, #-8]
  109014:	e3530000 	cmp	r3, #0
  109018:	ca000005 	bgt	109034 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  10901c:	e3a02058 	mov	r2, #88	; 0x58
  109020:	e3061170 	movw	r1, #24944	; 0x6170
  109024:	e3401014 	movt	r1, #20
  109028:	e3060154 	movw	r0, #24916	; 0x6154
  10902c:	e3400014 	movt	r0, #20
  109030:	ebffe837 	bl	103114 <rt_kprintf>
    }
    return result;
  109034:	e51b3008 	ldr	r3, [fp, #-8]
}
  109038:	e1a00003 	mov	r0, r3
  10903c:	e24bd004 	sub	sp, fp, #4
  109040:	e8bd8800 	pop	{fp, pc}

00109044 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109044:	e92d4800 	push	{fp, lr}
  109048:	e28db004 	add	fp, sp, #4
  10904c:	e24dd018 	sub	sp, sp, #24
  109050:	e50b0008 	str	r0, [fp, #-8]
  109054:	e50b100c 	str	r1, [fp, #-12]
  109058:	e50b2010 	str	r2, [fp, #-16]
  10905c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  109060:	e59b3004 	ldr	r3, [fp, #4]
  109064:	e3530000 	cmp	r3, #0
  109068:	0a00000d 	beq	1090a4 <unet_recvfrom+0x60>
  10906c:	e59b3008 	ldr	r3, [fp, #8]
  109070:	e3530000 	cmp	r3, #0
  109074:	0a00000a 	beq	1090a4 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  109078:	e59b3008 	ldr	r3, [fp, #8]
  10907c:	e58d3004 	str	r3, [sp, #4]
  109080:	e59b3004 	ldr	r3, [fp, #4]
  109084:	e58d3000 	str	r3, [sp]
  109088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10908c:	e51b2010 	ldr	r2, [fp, #-16]
  109090:	e51b100c 	ldr	r1, [fp, #-12]
  109094:	e51b0008 	ldr	r0, [fp, #-8]
  109098:	eb00230e 	bl	111cd8 <lwip_recvfrom>
  10909c:	e1a03000 	mov	r3, r0
  1090a0:	ea000009 	b	1090cc <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  1090a4:	e3a03000 	mov	r3, #0
  1090a8:	e58d3004 	str	r3, [sp, #4]
  1090ac:	e3a03000 	mov	r3, #0
  1090b0:	e58d3000 	str	r3, [sp]
  1090b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1090b8:	e51b2010 	ldr	r2, [fp, #-16]
  1090bc:	e51b100c 	ldr	r1, [fp, #-12]
  1090c0:	e51b0008 	ldr	r0, [fp, #-8]
  1090c4:	eb002303 	bl	111cd8 <lwip_recvfrom>
  1090c8:	e1a03000 	mov	r3, r0
    }
}
  1090cc:	e1a00003 	mov	r0, r3
  1090d0:	e24bd004 	sub	sp, fp, #4
  1090d4:	e8bd8800 	pop	{fp, pc}

001090d8 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  1090d8:	e92d4800 	push	{fp, lr}
  1090dc:	e28db004 	add	fp, sp, #4
  1090e0:	e24dd018 	sub	sp, sp, #24
  1090e4:	e50b0008 	str	r0, [fp, #-8]
  1090e8:	e50b100c 	str	r1, [fp, #-12]
  1090ec:	e50b2010 	str	r2, [fp, #-16]
  1090f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  1090f4:	e59b3004 	ldr	r3, [fp, #4]
  1090f8:	e58d3000 	str	r3, [sp]
  1090fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109100:	e51b2010 	ldr	r2, [fp, #-16]
  109104:	e51b100c 	ldr	r1, [fp, #-12]
  109108:	e51b0008 	ldr	r0, [fp, #-8]
  10910c:	eb002c06 	bl	11412c <lwip_getsockopt>
  109110:	e1a03000 	mov	r3, r0
}
  109114:	e1a00003 	mov	r0, r3
  109118:	e24bd004 	sub	sp, fp, #4
  10911c:	e8bd8800 	pop	{fp, pc}

00109120 <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  109120:	e92d4800 	push	{fp, lr}
  109124:	e28db004 	add	fp, sp, #4
  109128:	e24dd018 	sub	sp, sp, #24
  10912c:	e50b0008 	str	r0, [fp, #-8]
  109130:	e50b100c 	str	r1, [fp, #-12]
  109134:	e50b2010 	str	r2, [fp, #-16]
  109138:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  10913c:	e59b3004 	ldr	r3, [fp, #4]
  109140:	e58d3000 	str	r3, [sp]
  109144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109148:	e51b2010 	ldr	r2, [fp, #-16]
  10914c:	e51b100c 	ldr	r1, [fp, #-12]
  109150:	e51b0008 	ldr	r0, [fp, #-8]
  109154:	eb002ebc 	bl	114c4c <lwip_setsockopt>
  109158:	e1a03000 	mov	r3, r0
}
  10915c:	e1a00003 	mov	r0, r3
  109160:	e24bd004 	sub	sp, fp, #4
  109164:	e8bd8800 	pop	{fp, pc}

00109168 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  109168:	e92d4800 	push	{fp, lr}
  10916c:	e28db004 	add	fp, sp, #4
  109170:	e24dd008 	sub	sp, sp, #8
  109174:	e50b0008 	str	r0, [fp, #-8]
  109178:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  10917c:	e51b100c 	ldr	r1, [fp, #-12]
  109180:	e51b0008 	ldr	r0, [fp, #-8]
  109184:	eb002aee 	bl	113d44 <lwip_shutdown>
  109188:	e1a03000 	mov	r3, r0
}
  10918c:	e1a00003 	mov	r0, r3
  109190:	e24bd004 	sub	sp, fp, #4
  109194:	e8bd8800 	pop	{fp, pc}

00109198 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  109198:	e92d4800 	push	{fp, lr}
  10919c:	e28db004 	add	fp, sp, #4
  1091a0:	e24dd010 	sub	sp, sp, #16
  1091a4:	e50b0008 	str	r0, [fp, #-8]
  1091a8:	e50b100c 	str	r1, [fp, #-12]
  1091ac:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  1091b0:	e51b2010 	ldr	r2, [fp, #-16]
  1091b4:	e51b100c 	ldr	r1, [fp, #-12]
  1091b8:	e51b0008 	ldr	r0, [fp, #-8]
  1091bc:	eb002bbc 	bl	1140b4 <lwip_getpeername>
  1091c0:	e1a03000 	mov	r3, r0
}
  1091c4:	e1a00003 	mov	r0, r3
  1091c8:	e24bd004 	sub	sp, fp, #4
  1091cc:	e8bd8800 	pop	{fp, pc}

001091d0 <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  1091d0:	e92d4800 	push	{fp, lr}
  1091d4:	e28db004 	add	fp, sp, #4
  1091d8:	e24dd010 	sub	sp, sp, #16
  1091dc:	e50b0008 	str	r0, [fp, #-8]
  1091e0:	e50b100c 	str	r1, [fp, #-12]
  1091e4:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  1091e8:	e51b2010 	ldr	r2, [fp, #-16]
  1091ec:	e51b100c 	ldr	r1, [fp, #-12]
  1091f0:	e51b0008 	ldr	r0, [fp, #-8]
  1091f4:	eb002bbd 	bl	1140f0 <lwip_getsockname>
  1091f8:	e1a03000 	mov	r3, r0
}
  1091fc:	e1a00003 	mov	r0, r3
  109200:	e24bd004 	sub	sp, fp, #4
  109204:	e8bd8800 	pop	{fp, pc}

00109208 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  109208:	e92d4800 	push	{fp, lr}
  10920c:	e28db004 	add	fp, sp, #4
  109210:	e24dd010 	sub	sp, sp, #16
  109214:	e50b0008 	str	r0, [fp, #-8]
  109218:	e50b100c 	str	r1, [fp, #-12]
  10921c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  109220:	e51b2010 	ldr	r2, [fp, #-16]
  109224:	e51b100c 	ldr	r1, [fp, #-12]
  109228:	e51b0008 	ldr	r0, [fp, #-8]
  10922c:	eb0031d2 	bl	11597c <lwip_fcntl>
  109230:	e1a03000 	mov	r3, r0
}
  109234:	e1a00003 	mov	r0, r3
  109238:	e24bd004 	sub	sp, fp, #4
  10923c:	e8bd8800 	pop	{fp, pc}

00109240 <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  109240:	e92d4800 	push	{fp, lr}
  109244:	e28db004 	add	fp, sp, #4
  109248:	e24dd010 	sub	sp, sp, #16
  10924c:	e50b0008 	str	r0, [fp, #-8]
  109250:	e50b100c 	str	r1, [fp, #-12]
  109254:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  109258:	e51b2010 	ldr	r2, [fp, #-16]
  10925c:	e51b100c 	ldr	r1, [fp, #-12]
  109260:	e51b0008 	ldr	r0, [fp, #-8]
  109264:	eb00311d 	bl	1156e0 <lwip_ioctl>
  109268:	e1a03000 	mov	r3, r0
}
  10926c:	e1a00003 	mov	r0, r3
  109270:	e24bd004 	sub	sp, fp, #4
  109274:	e8bd8800 	pop	{fp, pc}

00109278 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  109278:	e92d4800 	push	{fp, lr}
  10927c:	e28db004 	add	fp, sp, #4
  109280:	e24dd008 	sub	sp, sp, #8
  109284:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  109288:	e51b0008 	ldr	r0, [fp, #-8]
  10928c:	eb001c81 	bl	110498 <lwip_gethostbyname>
  109290:	e1a02000 	mov	r2, r0
  109294:	e30d3494 	movw	r3, #54420	; 0xd494
  109298:	e3403014 	movt	r3, #20
  10929c:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  1092a0:	e3a02014 	mov	r2, #20
  1092a4:	e3a01000 	mov	r1, #0
  1092a8:	e30d0498 	movw	r0, #54424	; 0xd498
  1092ac:	e3400014 	movt	r0, #20
  1092b0:	eb00dfeb 	bl	141264 <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  1092b4:	e30d3494 	movw	r3, #54420	; 0xd494
  1092b8:	e3403014 	movt	r3, #20
  1092bc:	e5933000 	ldr	r3, [r3]
  1092c0:	e5933010 	ldr	r3, [r3, #16]
  1092c4:	e5932000 	ldr	r2, [r3]
  1092c8:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  1092cc:	e3403014 	movt	r3, #20
  1092d0:	e5922000 	ldr	r2, [r2]
  1092d4:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  1092d8:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092dc:	e3403014 	movt	r3, #20
  1092e0:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  1092e4:	e3402014 	movt	r2, #20
  1092e8:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  1092ec:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092f0:	e3403014 	movt	r3, #20
  1092f4:	e3a02000 	mov	r2, #0
  1092f8:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1092fc:	e3a02c01 	mov	r2, #256	; 0x100
  109300:	e51b1008 	ldr	r1, [fp, #-8]
  109304:	e30d04b8 	movw	r0, #54456	; 0xd4b8
  109308:	e3400014 	movt	r0, #20
  10930c:	eb00e0b6 	bl	1415ec <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  109310:	e30d34b8 	movw	r3, #54456	; 0xd4b8
  109314:	e3403014 	movt	r3, #20
  109318:	e3a02000 	mov	r2, #0
  10931c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  109320:	e30d3498 	movw	r3, #54424	; 0xd498
  109324:	e3403014 	movt	r3, #20
  109328:	e30d24b8 	movw	r2, #54456	; 0xd4b8
  10932c:	e3402014 	movt	r2, #20
  109330:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  109334:	e30d35bc 	movw	r3, #54716	; 0xd5bc
  109338:	e3403014 	movt	r3, #20
  10933c:	e3a02000 	mov	r2, #0
  109340:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109344:	e30d3498 	movw	r3, #54424	; 0xd498
  109348:	e3403014 	movt	r3, #20
  10934c:	e30d25bc 	movw	r2, #54716	; 0xd5bc
  109350:	e3402014 	movt	r2, #20
  109354:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  109358:	e30d3498 	movw	r3, #54424	; 0xd498
  10935c:	e3403014 	movt	r3, #20
  109360:	e3a02002 	mov	r2, #2
  109364:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  109368:	e30d3498 	movw	r3, #54424	; 0xd498
  10936c:	e3403014 	movt	r3, #20
  109370:	e3a02004 	mov	r2, #4
  109374:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  109378:	e30d3498 	movw	r3, #54424	; 0xd498
  10937c:	e3403014 	movt	r3, #20
  109380:	e30d24b0 	movw	r2, #54448	; 0xd4b0
  109384:	e3402014 	movt	r2, #20
  109388:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  10938c:	e30d3494 	movw	r3, #54420	; 0xd494
  109390:	e3403014 	movt	r3, #20
  109394:	e30d2498 	movw	r2, #54424	; 0xd498
  109398:	e3402014 	movt	r2, #20
  10939c:	e5832000 	str	r2, [r3]

    return p_hostent;
  1093a0:	e30d3494 	movw	r3, #54420	; 0xd494
  1093a4:	e3403014 	movt	r3, #20
  1093a8:	e5933000 	ldr	r3, [r3]
}
  1093ac:	e1a00003 	mov	r0, r3
  1093b0:	e24bd004 	sub	sp, fp, #4
  1093b4:	e8bd8800 	pop	{fp, pc}

001093b8 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  1093b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1093bc:	e28db000 	add	fp, sp, #0
  1093c0:	e24dd014 	sub	sp, sp, #20
  1093c4:	e50b0008 	str	r0, [fp, #-8]
  1093c8:	e50b100c 	str	r1, [fp, #-12]
  1093cc:	e50b2010 	str	r2, [fp, #-16]
  1093d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  1093d4:	e3a03000 	mov	r3, #0
}
  1093d8:	e1a00003 	mov	r0, r3
  1093dc:	e28bd000 	add	sp, fp, #0
  1093e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1093e4:	e12fff1e 	bx	lr

001093e8 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  1093e8:	e92d4800 	push	{fp, lr}
  1093ec:	e28db004 	add	fp, sp, #4
  1093f0:	e24dd010 	sub	sp, sp, #16
  1093f4:	e50b0008 	str	r0, [fp, #-8]
  1093f8:	e50b100c 	str	r1, [fp, #-12]
  1093fc:	e50b2010 	str	r2, [fp, #-16]
  109400:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  109404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109408:	e51b2010 	ldr	r2, [fp, #-16]
  10940c:	e51b100c 	ldr	r1, [fp, #-12]
  109410:	e51b0008 	ldr	r0, [fp, #-8]
  109414:	eb001ced 	bl	1107d0 <lwip_getaddrinfo>
  109418:	e1a03000 	mov	r3, r0
}
  10941c:	e1a00003 	mov	r0, r3
  109420:	e24bd004 	sub	sp, fp, #4
  109424:	e8bd8800 	pop	{fp, pc}

00109428 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  109428:	e92d4800 	push	{fp, lr}
  10942c:	e28db004 	add	fp, sp, #4
  109430:	e24dd008 	sub	sp, sp, #8
  109434:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  109438:	e51b0008 	ldr	r0, [fp, #-8]
  10943c:	eb001cd0 	bl	110784 <lwip_freeaddrinfo>
}
  109440:	e320f000 	nop	{0}
  109444:	e24bd004 	sub	sp, fp, #4
  109448:	e8bd8800 	pop	{fp, pc}

0010944c <rt_list_init>:
{
  10944c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109450:	e28db000 	add	fp, sp, #0
  109454:	e24dd00c 	sub	sp, sp, #12
  109458:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10945c:	e51b3008 	ldr	r3, [fp, #-8]
  109460:	e51b2008 	ldr	r2, [fp, #-8]
  109464:	e5832004 	str	r2, [r3, #4]
  109468:	e51b3008 	ldr	r3, [fp, #-8]
  10946c:	e5932004 	ldr	r2, [r3, #4]
  109470:	e51b3008 	ldr	r3, [fp, #-8]
  109474:	e5832000 	str	r2, [r3]
}
  109478:	e320f000 	nop	{0}
  10947c:	e28bd000 	add	sp, fp, #0
  109480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109484:	e12fff1e 	bx	lr

00109488 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  109488:	e92d4810 	push	{r4, fp, lr}
  10948c:	e28db008 	add	fp, sp, #8
  109490:	e24dd024 	sub	sp, sp, #36	; 0x24
  109494:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109498:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10949c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  1094a0:	e3e03000 	mvn	r3, #0
  1094a4:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  1094a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1094ac:	eb000352 	bl	10a1fc <dfs_net_getsocket>
  1094b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  1094b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1094b8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1094bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1094c0:	ebfff95f 	bl	107a44 <sal_accept>
  1094c4:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  1094c8:	e51b3010 	ldr	r3, [fp, #-16]
  1094cc:	e3730001 	cmn	r3, #1
  1094d0:	0a000050 	beq	109618 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  1094d4:	eb000272 	bl	109ea4 <fd_new>
  1094d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  1094dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1094e0:	e3530000 	cmp	r3, #0
  1094e4:	aa000003 	bge	1094f8 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  1094e8:	e51b0010 	ldr	r0, [fp, #-16]
  1094ec:	ebfffc25 	bl	108588 <sal_closesocket>
            return -ENOMEM;
  1094f0:	e3e0300b 	mvn	r3, #11
  1094f4:	ea000048 	b	10961c <accept_internal+0x194>
        }

        d = fd_get(fd);
  1094f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1094fc:	eb00029d 	bl	109f78 <fd_get>
  109500:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  109504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109508:	e3530000 	cmp	r3, #0
  10950c:	0a00003d 	beq	109608 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  109510:	e3a00028 	mov	r0, #40	; 0x28
  109514:	ebffe69e 	bl	102f94 <rt_malloc>
  109518:	e1a02000 	mov	r2, r0
  10951c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109520:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  109524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109528:	e5933018 	ldr	r3, [r3, #24]
  10952c:	e3530000 	cmp	r3, #0
  109530:	1a000003 	bne	109544 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  109534:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109538:	eb0002ed 	bl	10a0f4 <fd_release>
                return -ENOMEM;
  10953c:	e3e0300b 	mvn	r3, #11
  109540:	ea000035 	b	10961c <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109548:	e5933018 	ldr	r3, [r3, #24]
  10954c:	e3a02028 	mov	r2, #40	; 0x28
  109550:	e3a01000 	mov	r1, #0
  109554:	e1a00003 	mov	r0, r3
  109558:	ebffe75a 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  10955c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109560:	e5933018 	ldr	r3, [r3, #24]
  109564:	e2833010 	add	r3, r3, #16
  109568:	e1a00003 	mov	r0, r3
  10956c:	ebffffb6 	bl	10944c <rt_list_init>

            d->fnode->type = FT_SOCKET;
  109570:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109574:	e5933018 	ldr	r3, [r3, #24]
  109578:	e3a02001 	mov	r2, #1
  10957c:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  109580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109584:	e5933018 	ldr	r3, [r3, #24]
  109588:	e3a02000 	mov	r2, #0
  10958c:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  109590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109594:	e5933018 	ldr	r3, [r3, #24]
  109598:	e3a02000 	mov	r2, #0
  10959c:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  1095a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095a4:	e5933018 	ldr	r3, [r3, #24]
  1095a8:	e3a02001 	mov	r2, #1
  1095ac:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  1095b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095b4:	e5934018 	ldr	r4, [r3, #24]
  1095b8:	eb0003ae 	bl	10a478 <dfs_net_get_fops>
  1095bc:	e1a03000 	mov	r3, r0
  1095c0:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  1095c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c8:	e3a02002 	mov	r2, #2
  1095cc:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  1095d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095d4:	e5933018 	ldr	r3, [r3, #24]
  1095d8:	e3a02000 	mov	r2, #0
  1095dc:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  1095e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1095e4:	e3a02000 	mov	r2, #0
  1095e8:	e3a03000 	mov	r3, #0
  1095ec:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1095f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095f4:	e5933018 	ldr	r3, [r3, #24]
  1095f8:	e51b2010 	ldr	r2, [fp, #-16]
  1095fc:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  109600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109604:	ea000004 	b	10961c <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  109608:	e51b0010 	ldr	r0, [fp, #-16]
  10960c:	ebfffbdd 	bl	108588 <sal_closesocket>
        return -ENOMEM;
  109610:	e3e0300b 	mvn	r3, #11
  109614:	ea000000 	b	10961c <accept_internal+0x194>
    }

    return -1;
  109618:	e3e03000 	mvn	r3, #0
}
  10961c:	e1a00003 	mov	r0, r3
  109620:	e24bd008 	sub	sp, fp, #8
  109624:	e8bd8810 	pop	{r4, fp, pc}

00109628 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109628:	e92d4800 	push	{fp, lr}
  10962c:	e28db004 	add	fp, sp, #4
  109630:	e24dd018 	sub	sp, sp, #24
  109634:	e50b0010 	str	r0, [fp, #-16]
  109638:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10963c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109640:	e51b0010 	ldr	r0, [fp, #-16]
  109644:	eb0002ec 	bl	10a1fc <dfs_net_getsocket>
  109648:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  10964c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109650:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109654:	e51b0008 	ldr	r0, [fp, #-8]
  109658:	ebfff973 	bl	107c2c <sal_bind>
  10965c:	e1a03000 	mov	r3, r0
}
  109660:	e1a00003 	mov	r0, r3
  109664:	e24bd004 	sub	sp, fp, #4
  109668:	e8bd8800 	pop	{fp, pc}

0010966c <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  10966c:	e92d4800 	push	{fp, lr}
  109670:	e28db004 	add	fp, sp, #4
  109674:	e24dd018 	sub	sp, sp, #24
  109678:	e50b0010 	str	r0, [fp, #-16]
  10967c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109680:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109684:	e51b0010 	ldr	r0, [fp, #-16]
  109688:	eb0002db 	bl	10a1fc <dfs_net_getsocket>
  10968c:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  109690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109694:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109698:	e51b0008 	ldr	r0, [fp, #-8]
  10969c:	ebfffaad 	bl	108158 <sal_connect>
  1096a0:	e1a03000 	mov	r3, r0
}
  1096a4:	e1a00003 	mov	r0, r3
  1096a8:	e24bd004 	sub	sp, fp, #4
  1096ac:	e8bd8800 	pop	{fp, pc}

001096b0 <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1096b0:	e92d4800 	push	{fp, lr}
  1096b4:	e28db004 	add	fp, sp, #4
  1096b8:	e24dd020 	sub	sp, sp, #32
  1096bc:	e50b0010 	str	r0, [fp, #-16]
  1096c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1096c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1096cc:	e51b0010 	ldr	r0, [fp, #-16]
  1096d0:	eb0002c9 	bl	10a1fc <dfs_net_getsocket>
  1096d4:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  1096d8:	e59b3004 	ldr	r3, [fp, #4]
  1096dc:	e58d3000 	str	r3, [sp]
  1096e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1096e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096ec:	e51b0008 	ldr	r0, [fp, #-8]
  1096f0:	ebfffa6e 	bl	1080b0 <sal_setsockopt>
  1096f4:	e1a03000 	mov	r3, r0
}
  1096f8:	e1a00003 	mov	r0, r3
  1096fc:	e24bd004 	sub	sp, fp, #4
  109700:	e8bd8800 	pop	{fp, pc}

00109704 <listen_internal>:

int listen_internal(int s, int backlog)
{
  109704:	e92d4800 	push	{fp, lr}
  109708:	e28db004 	add	fp, sp, #4
  10970c:	e24dd010 	sub	sp, sp, #16
  109710:	e50b0010 	str	r0, [fp, #-16]
  109714:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  109718:	e51b0010 	ldr	r0, [fp, #-16]
  10971c:	eb0002b6 	bl	10a1fc <dfs_net_getsocket>
  109720:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  109724:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109728:	e51b0008 	ldr	r0, [fp, #-8]
  10972c:	ebfffab8 	bl	108214 <sal_listen>
  109730:	e1a03000 	mov	r3, r0
}
  109734:	e1a00003 	mov	r0, r3
  109738:	e24bd004 	sub	sp, fp, #4
  10973c:	e8bd8800 	pop	{fp, pc}

00109740 <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  109740:	e92d4800 	push	{fp, lr}
  109744:	e28db004 	add	fp, sp, #4
  109748:	e24dd020 	sub	sp, sp, #32
  10974c:	e50b0010 	str	r0, [fp, #-16]
  109750:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109754:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109758:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10975c:	e51b0010 	ldr	r0, [fp, #-16]
  109760:	eb0002a5 	bl	10a1fc <dfs_net_getsocket>
  109764:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109768:	e3a03000 	mov	r3, #0
  10976c:	e58d3004 	str	r3, [sp, #4]
  109770:	e3a03000 	mov	r3, #0
  109774:	e58d3000 	str	r3, [sp]
  109778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10977c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109780:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109784:	e51b0008 	ldr	r0, [fp, #-8]
  109788:	ebfffac5 	bl	1082a4 <sal_recvfrom>
  10978c:	e1a03000 	mov	r3, r0
}
  109790:	e1a00003 	mov	r0, r3
  109794:	e24bd004 	sub	sp, fp, #4
  109798:	e8bd8800 	pop	{fp, pc}

0010979c <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  10979c:	e92d4800 	push	{fp, lr}
  1097a0:	e28db004 	add	fp, sp, #4
  1097a4:	e24dd020 	sub	sp, sp, #32
  1097a8:	e50b0010 	str	r0, [fp, #-16]
  1097ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1097b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1097b8:	e51b0010 	ldr	r0, [fp, #-16]
  1097bc:	eb00028e 	bl	10a1fc <dfs_net_getsocket>
  1097c0:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  1097c4:	e59b3008 	ldr	r3, [fp, #8]
  1097c8:	e58d3004 	str	r3, [sp, #4]
  1097cc:	e59b3004 	ldr	r3, [fp, #4]
  1097d0:	e58d3000 	str	r3, [sp]
  1097d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097e0:	e51b0008 	ldr	r0, [fp, #-8]
  1097e4:	ebfffaae 	bl	1082a4 <sal_recvfrom>
  1097e8:	e1a03000 	mov	r3, r0
}
  1097ec:	e1a00003 	mov	r0, r3
  1097f0:	e24bd004 	sub	sp, fp, #4
  1097f4:	e8bd8800 	pop	{fp, pc}

001097f8 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1097f8:	e92d4800 	push	{fp, lr}
  1097fc:	e28db004 	add	fp, sp, #4
  109800:	e24dd020 	sub	sp, sp, #32
  109804:	e50b0010 	str	r0, [fp, #-16]
  109808:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10980c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109814:	e51b0010 	ldr	r0, [fp, #-16]
  109818:	eb000277 	bl	10a1fc <dfs_net_getsocket>
  10981c:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  109820:	e3a03000 	mov	r3, #0
  109824:	e58d3004 	str	r3, [sp, #4]
  109828:	e3a03000 	mov	r3, #0
  10982c:	e58d3000 	str	r3, [sp]
  109830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109834:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109838:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10983c:	e51b0008 	ldr	r0, [fp, #-8]
  109840:	ebfffacb 	bl	108374 <sal_sendto>
  109844:	e1a03000 	mov	r3, r0
}
  109848:	e1a00003 	mov	r0, r3
  10984c:	e24bd004 	sub	sp, fp, #4
  109850:	e8bd8800 	pop	{fp, pc}

00109854 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109854:	e92d4800 	push	{fp, lr}
  109858:	e28db004 	add	fp, sp, #4
  10985c:	e24dd020 	sub	sp, sp, #32
  109860:	e50b0010 	str	r0, [fp, #-16]
  109864:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109868:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10986c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109870:	e51b0010 	ldr	r0, [fp, #-16]
  109874:	eb000260 	bl	10a1fc <dfs_net_getsocket>
  109878:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  10987c:	e59b3008 	ldr	r3, [fp, #8]
  109880:	e58d3004 	str	r3, [sp, #4]
  109884:	e59b3004 	ldr	r3, [fp, #4]
  109888:	e58d3000 	str	r3, [sp]
  10988c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109890:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109894:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109898:	e51b0008 	ldr	r0, [fp, #-8]
  10989c:	ebfffab4 	bl	108374 <sal_sendto>
  1098a0:	e1a03000 	mov	r3, r0
}
  1098a4:	e1a00003 	mov	r0, r3
  1098a8:	e24bd004 	sub	sp, fp, #4
  1098ac:	e8bd8800 	pop	{fp, pc}

001098b0 <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  1098b0:	e92d4810 	push	{r4, fp, lr}
  1098b4:	e28db008 	add	fp, sp, #8
  1098b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1098bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1098c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1098c4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  1098c8:	eb000175 	bl	109ea4 <fd_new>
  1098cc:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  1098d0:	e51b3010 	ldr	r3, [fp, #-16]
  1098d4:	e3530000 	cmp	r3, #0
  1098d8:	aa000001 	bge	1098e4 <socket_internal+0x34>
    {
        return -ENOMEM;
  1098dc:	e3e0300b 	mvn	r3, #11
  1098e0:	ea00004f 	b	109a24 <socket_internal+0x174>
    }
    d = fd_get(fd);
  1098e4:	e51b0010 	ldr	r0, [fp, #-16]
  1098e8:	eb0001a2 	bl	109f78 <fd_get>
  1098ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1098f0:	e3a00028 	mov	r0, #40	; 0x28
  1098f4:	ebffe5a6 	bl	102f94 <rt_malloc>
  1098f8:	e1a02000 	mov	r2, r0
  1098fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109900:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  109904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109908:	e5933018 	ldr	r3, [r3, #24]
  10990c:	e3530000 	cmp	r3, #0
  109910:	1a000003 	bne	109924 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  109914:	e51b0010 	ldr	r0, [fp, #-16]
  109918:	eb0001f5 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  10991c:	e3e0300b 	mvn	r3, #11
  109920:	ea00003f 	b	109a24 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  109924:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109928:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10992c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  109930:	ebfffac3 	bl	108444 <sal_socket>
  109934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  109938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10993c:	e3530000 	cmp	r3, #0
  109940:	ba000030 	blt	109a08 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109948:	e5933018 	ldr	r3, [r3, #24]
  10994c:	e3a02028 	mov	r2, #40	; 0x28
  109950:	e3a01000 	mov	r1, #0
  109954:	e1a00003 	mov	r0, r3
  109958:	ebffe65a 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  10995c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109960:	e5933018 	ldr	r3, [r3, #24]
  109964:	e2833010 	add	r3, r3, #16
  109968:	e1a00003 	mov	r0, r3
  10996c:	ebfffeb6 	bl	10944c <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109974:	e5933018 	ldr	r3, [r3, #24]
  109978:	e3a02001 	mov	r2, #1
  10997c:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109984:	e5933018 	ldr	r3, [r3, #24]
  109988:	e3a02000 	mov	r2, #0
  10998c:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109994:	e5933018 	ldr	r3, [r3, #24]
  109998:	e3a02000 	mov	r2, #0
  10999c:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  1099a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099a4:	e5933018 	ldr	r3, [r3, #24]
  1099a8:	e3a02001 	mov	r2, #1
  1099ac:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  1099b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099b4:	e5934018 	ldr	r4, [r3, #24]
  1099b8:	eb0002ae 	bl	10a478 <dfs_net_get_fops>
  1099bc:	e1a03000 	mov	r3, r0
  1099c0:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  1099c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c8:	e3a02002 	mov	r2, #2
  1099cc:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  1099d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d4:	e5933018 	ldr	r3, [r3, #24]
  1099d8:	e3a02000 	mov	r2, #0
  1099dc:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  1099e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1099e4:	e3a02000 	mov	r2, #0
  1099e8:	e3a03000 	mov	r3, #0
  1099ec:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  1099f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099f4:	e5933018 	ldr	r3, [r3, #24]
  1099f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1099fc:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109a00:	e51b3010 	ldr	r3, [fp, #-16]
  109a04:	ea000006 	b	109a24 <socket_internal+0x174>
        rt_free(d->fnode);
  109a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a0c:	e5933018 	ldr	r3, [r3, #24]
  109a10:	e1a00003 	mov	r0, r3
  109a14:	ebffe568 	bl	102fbc <rt_free>
        fd_release(fd);
  109a18:	e51b0010 	ldr	r0, [fp, #-16]
  109a1c:	eb0001b4 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  109a20:	e3e0300b 	mvn	r3, #11
  109a24:	e1a00003 	mov	r0, r3
  109a28:	e24bd008 	sub	sp, fp, #8
  109a2c:	e8bd8810 	pop	{r4, fp, pc}

00109a30 <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109a30:	e92d4800 	push	{fp, lr}
  109a34:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109a38:	e30d3618 	movw	r3, #54808	; 0xd618
  109a3c:	e3403014 	movt	r3, #20
  109a40:	e5933000 	ldr	r3, [r3]
  109a44:	e3530000 	cmp	r3, #0
  109a48:	0a000004 	beq	109a60 <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109a4c:	e306017c 	movw	r0, #24956	; 0x617c
  109a50:	e3400014 	movt	r0, #20
  109a54:	ebffe5ae 	bl	103114 <rt_kprintf>
        return 0;
  109a58:	e3a03000 	mov	r3, #0
  109a5c:	ea000016 	b	109abc <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109a60:	eb0001c6 	bl	10a180 <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109a64:	e3a02008 	mov	r2, #8
  109a68:	e3a01000 	mov	r1, #0
  109a6c:	e30d0610 	movw	r0, #54800	; 0xd610
  109a70:	e3400014 	movt	r0, #20
  109a74:	eb00ddfa 	bl	141264 <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109a78:	e3a02000 	mov	r2, #0
  109a7c:	e3061190 	movw	r1, #24976	; 0x6190
  109a80:	e3401014 	movt	r1, #20
  109a84:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109a88:	e3400014 	movt	r0, #20
  109a8c:	ebffdcad 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109a90:	e3a02000 	mov	r2, #0
  109a94:	e3061198 	movw	r1, #24984	; 0x6198
  109a98:	e3401014 	movt	r1, #20
  109a9c:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109aa0:	e3400014 	movt	r0, #20
  109aa4:	ebffdca7 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109aa8:	e30d3618 	movw	r3, #54808	; 0xd618
  109aac:	e3403014 	movt	r3, #20
  109ab0:	e3a02001 	mov	r2, #1
  109ab4:	e5832000 	str	r2, [r3]

    return 0;
  109ab8:	e3a03000 	mov	r3, #0
}
  109abc:	e1a00003 	mov	r0, r3
  109ac0:	e8bd8800 	pop	{fp, pc}

00109ac4 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109ac4:	e92d4800 	push	{fp, lr}
  109ac8:	e28db004 	add	fp, sp, #4
  109acc:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109ad0:	e3e03006 	mvn	r3, #6
  109ad4:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109ad8:	ea000004 	b	109af0 <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109adc:	e3e01000 	mvn	r1, #0
  109ae0:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ae4:	e3400014 	movt	r0, #20
  109ae8:	ebffdd04 	bl	100f00 <rt_mutex_take>
  109aec:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109af0:	e51b3008 	ldr	r3, [fp, #-8]
  109af4:	e3730007 	cmn	r3, #7
  109af8:	0afffff7 	beq	109adc <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109afc:	e51b3008 	ldr	r3, [fp, #-8]
  109b00:	e3530000 	cmp	r3, #0
  109b04:	0a000005 	beq	109b20 <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109b08:	e3a0203d 	mov	r2, #61	; 0x3d
  109b0c:	e306120c 	movw	r1, #25100	; 0x620c
  109b10:	e3401014 	movt	r1, #20
  109b14:	e30601a0 	movw	r0, #24992	; 0x61a0
  109b18:	e3400014 	movt	r0, #20
  109b1c:	ebffe69d 	bl	103598 <rt_assert_handler>
    }
}
  109b20:	e320f000 	nop	{0}
  109b24:	e24bd004 	sub	sp, fp, #4
  109b28:	e8bd8800 	pop	{fp, pc}

00109b2c <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109b2c:	e92d4800 	push	{fp, lr}
  109b30:	e28db004 	add	fp, sp, #4
  109b34:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b38:	e3e03006 	mvn	r3, #6
  109b3c:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b40:	ea000004 	b	109b58 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109b44:	e3e01000 	mvn	r1, #0
  109b48:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109b4c:	e3400014 	movt	r0, #20
  109b50:	ebffdcea 	bl	100f00 <rt_mutex_take>
  109b54:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109b58:	e51b3008 	ldr	r3, [fp, #-8]
  109b5c:	e3730007 	cmn	r3, #7
  109b60:	0afffff7 	beq	109b44 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109b64:	e51b3008 	ldr	r3, [fp, #-8]
  109b68:	e3530000 	cmp	r3, #0
  109b6c:	0a000005 	beq	109b88 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109b70:	e3a0204c 	mov	r2, #76	; 0x4c
  109b74:	e3061218 	movw	r1, #25112	; 0x6218
  109b78:	e3401014 	movt	r1, #20
  109b7c:	e30601a0 	movw	r0, #24992	; 0x61a0
  109b80:	e3400014 	movt	r0, #20
  109b84:	ebffe683 	bl	103598 <rt_assert_handler>
    }
}
  109b88:	e320f000 	nop	{0}
  109b8c:	e24bd004 	sub	sp, fp, #4
  109b90:	e8bd8800 	pop	{fp, pc}

00109b94 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109b94:	e92d4800 	push	{fp, lr}
  109b98:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109b9c:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ba0:	e3400014 	movt	r0, #20
  109ba4:	ebffdcf3 	bl	100f78 <rt_mutex_release>
}
  109ba8:	e320f000 	nop	{0}
  109bac:	e8bd8800 	pop	{fp, pc}

00109bb0 <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109bb0:	e92d4800 	push	{fp, lr}
  109bb4:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109bb8:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109bbc:	e3400014 	movt	r0, #20
  109bc0:	ebffdcec 	bl	100f78 <rt_mutex_release>
}
  109bc4:	e320f000 	nop	{0}
  109bc8:	e8bd8800 	pop	{fp, pc}

00109bcc <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109bcc:	e92d4800 	push	{fp, lr}
  109bd0:	e28db004 	add	fp, sp, #4
  109bd4:	e24dd018 	sub	sp, sp, #24
  109bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109bdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109be0:	e3a03000 	mov	r3, #0
  109be4:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109bec:	e5932000 	ldr	r2, [r3]
  109bf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109bf4:	e1520003 	cmp	r2, r3
  109bf8:	9a000001 	bls	109c04 <fd_slot_expand+0x38>
    {
        return fd;
  109bfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c00:	ea000032 	b	109cd0 <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c08:	e353001f 	cmp	r3, #31
  109c0c:	da000001 	ble	109c18 <fd_slot_expand+0x4c>
    {
        return -1;
  109c10:	e3e03000 	mvn	r3, #0
  109c14:	ea00002d 	b	109cd0 <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c1c:	e2833004 	add	r3, r3, #4
  109c20:	e3c33003 	bic	r3, r3, #3
  109c24:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109c28:	e51b3008 	ldr	r3, [fp, #-8]
  109c2c:	e3530020 	cmp	r3, #32
  109c30:	da000001 	ble	109c3c <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109c34:	e3a03020 	mov	r3, #32
  109c38:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c40:	e5932004 	ldr	r2, [r3, #4]
  109c44:	e51b3008 	ldr	r3, [fp, #-8]
  109c48:	e1a03103 	lsl	r3, r3, #2
  109c4c:	e1a01003 	mov	r1, r3
  109c50:	e1a00002 	mov	r0, r2
  109c54:	ebffe4e0 	bl	102fdc <rt_realloc>
  109c58:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109c5c:	e51b3010 	ldr	r3, [fp, #-16]
  109c60:	e3530000 	cmp	r3, #0
  109c64:	1a000001 	bne	109c70 <fd_slot_expand+0xa4>
    {
        return -1;
  109c68:	e3e03000 	mvn	r3, #0
  109c6c:	ea000017 	b	109cd0 <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c74:	e5933000 	ldr	r3, [r3]
  109c78:	e50b300c 	str	r3, [fp, #-12]
  109c7c:	ea000008 	b	109ca4 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109c80:	e51b300c 	ldr	r3, [fp, #-12]
  109c84:	e1a03103 	lsl	r3, r3, #2
  109c88:	e51b2010 	ldr	r2, [fp, #-16]
  109c8c:	e0823003 	add	r3, r2, r3
  109c90:	e3a02000 	mov	r2, #0
  109c94:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109c98:	e51b300c 	ldr	r3, [fp, #-12]
  109c9c:	e2833001 	add	r3, r3, #1
  109ca0:	e50b300c 	str	r3, [fp, #-12]
  109ca4:	e51b200c 	ldr	r2, [fp, #-12]
  109ca8:	e51b3008 	ldr	r3, [fp, #-8]
  109cac:	e1520003 	cmp	r2, r3
  109cb0:	bafffff2 	blt	109c80 <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cb8:	e51b2010 	ldr	r2, [fp, #-16]
  109cbc:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109cc0:	e51b2008 	ldr	r2, [fp, #-8]
  109cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cc8:	e5832000 	str	r2, [r3]

    return fd;
  109ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109cd0:	e1a00003 	mov	r0, r3
  109cd4:	e24bd004 	sub	sp, fp, #4
  109cd8:	e8bd8800 	pop	{fp, pc}

00109cdc <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109cdc:	e92d4800 	push	{fp, lr}
  109ce0:	e28db004 	add	fp, sp, #4
  109ce4:	e24dd010 	sub	sp, sp, #16
  109ce8:	e50b0010 	str	r0, [fp, #-16]
  109cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109cf4:	e50b3008 	str	r3, [fp, #-8]
  109cf8:	ea00000c 	b	109d30 <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109cfc:	e51b3010 	ldr	r3, [fp, #-16]
  109d00:	e5932004 	ldr	r2, [r3, #4]
  109d04:	e51b3008 	ldr	r3, [fp, #-8]
  109d08:	e1a03103 	lsl	r3, r3, #2
  109d0c:	e0823003 	add	r3, r2, r3
  109d10:	e5933000 	ldr	r3, [r3]
  109d14:	e3530000 	cmp	r3, #0
  109d18:	1a000001 	bne	109d24 <fd_slot_alloc+0x48>
        {
            return idx;
  109d1c:	e51b3008 	ldr	r3, [fp, #-8]
  109d20:	ea00001a 	b	109d90 <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d24:	e51b3008 	ldr	r3, [fp, #-8]
  109d28:	e2833001 	add	r3, r3, #1
  109d2c:	e50b3008 	str	r3, [fp, #-8]
  109d30:	e51b3010 	ldr	r3, [fp, #-16]
  109d34:	e5933000 	ldr	r3, [r3]
  109d38:	e1a02003 	mov	r2, r3
  109d3c:	e51b3008 	ldr	r3, [fp, #-8]
  109d40:	e1530002 	cmp	r3, r2
  109d44:	baffffec 	blt	109cfc <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109d48:	e51b3010 	ldr	r3, [fp, #-16]
  109d4c:	e5933000 	ldr	r3, [r3]
  109d50:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109d54:	e51b2008 	ldr	r2, [fp, #-8]
  109d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d5c:	e1520003 	cmp	r2, r3
  109d60:	aa000001 	bge	109d6c <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d68:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109d6c:	e51b1008 	ldr	r1, [fp, #-8]
  109d70:	e51b0010 	ldr	r0, [fp, #-16]
  109d74:	ebffff94 	bl	109bcc <fd_slot_expand>
  109d78:	e1a03000 	mov	r3, r0
  109d7c:	e3530000 	cmp	r3, #0
  109d80:	aa000001 	bge	109d8c <fd_slot_alloc+0xb0>
    {
        return -1;
  109d84:	e3e03000 	mvn	r3, #0
  109d88:	ea000000 	b	109d90 <fd_slot_alloc+0xb4>
    }
    return idx;
  109d8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109d90:	e1a00003 	mov	r0, r3
  109d94:	e24bd004 	sub	sp, fp, #4
  109d98:	e8bd8800 	pop	{fp, pc}

00109d9c <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d9c:	e92d4800 	push	{fp, lr}
  109da0:	e28db004 	add	fp, sp, #4
  109da4:	e24dd010 	sub	sp, sp, #16
  109da8:	e50b0010 	str	r0, [fp, #-16]
  109dac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109db0:	e3a03000 	mov	r3, #0
  109db4:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109db8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109dbc:	e51b0010 	ldr	r0, [fp, #-16]
  109dc0:	ebffffc5 	bl	109cdc <fd_slot_alloc>
  109dc4:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109dc8:	e51b300c 	ldr	r3, [fp, #-12]
  109dcc:	e3530000 	cmp	r3, #0
  109dd0:	aa000001 	bge	109ddc <fd_alloc+0x40>
    {
        return -1;
  109dd4:	e3e03000 	mvn	r3, #0
  109dd8:	ea00001a 	b	109e48 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109ddc:	e3a01020 	mov	r1, #32
  109de0:	e3a00001 	mov	r0, #1
  109de4:	ebffe488 	bl	10300c <rt_calloc>
  109de8:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109dec:	e51b3008 	ldr	r3, [fp, #-8]
  109df0:	e3530000 	cmp	r3, #0
  109df4:	1a000001 	bne	109e00 <fd_alloc+0x64>
    {
        return -1;
  109df8:	e3e03000 	mvn	r3, #0
  109dfc:	ea000011 	b	109e48 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109e00:	e51b3008 	ldr	r3, [fp, #-8]
  109e04:	e3a02001 	mov	r2, #1
  109e08:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109e0c:	e51b2008 	ldr	r2, [fp, #-8]
  109e10:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109e14:	e34f3fff 	movt	r3, #65535	; 0xffff
  109e18:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109e1c:	e51b3008 	ldr	r3, [fp, #-8]
  109e20:	e3a02000 	mov	r2, #0
  109e24:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109e28:	e51b3010 	ldr	r3, [fp, #-16]
  109e2c:	e5932004 	ldr	r2, [r3, #4]
  109e30:	e51b300c 	ldr	r3, [fp, #-12]
  109e34:	e1a03103 	lsl	r3, r3, #2
  109e38:	e0823003 	add	r3, r2, r3
  109e3c:	e51b2008 	ldr	r2, [fp, #-8]
  109e40:	e5832000 	str	r2, [r3]

    return idx;
  109e44:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e48:	e1a00003 	mov	r0, r3
  109e4c:	e24bd004 	sub	sp, fp, #4
  109e50:	e8bd8800 	pop	{fp, pc}

00109e54 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109e54:	e92d4800 	push	{fp, lr}
  109e58:	e28db004 	add	fp, sp, #4
  109e5c:	e24dd010 	sub	sp, sp, #16
  109e60:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109e64:	ebffff30 	bl	109b2c <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109e68:	e3a01003 	mov	r1, #3
  109e6c:	e51b0010 	ldr	r0, [fp, #-16]
  109e70:	ebffffc9 	bl	109d9c <fd_alloc>
  109e74:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109e78:	e51b3008 	ldr	r3, [fp, #-8]
  109e7c:	e3530000 	cmp	r3, #0
  109e80:	aa000002 	bge	109e90 <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109e84:	e30601a4 	movw	r0, #24996	; 0x61a4
  109e88:	e3400014 	movt	r0, #20
  109e8c:	ebffe4a0 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109e90:	ebffff46 	bl	109bb0 <dfs_fd_unlock>
    return idx;
  109e94:	e51b3008 	ldr	r3, [fp, #-8]
}
  109e98:	e1a00003 	mov	r0, r3
  109e9c:	e24bd004 	sub	sp, fp, #4
  109ea0:	e8bd8800 	pop	{fp, pc}

00109ea4 <fd_new>:

int fd_new(void)
{
  109ea4:	e92d4800 	push	{fp, lr}
  109ea8:	e28db004 	add	fp, sp, #4
  109eac:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109eb0:	e3a03000 	mov	r3, #0
  109eb4:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109eb8:	eb000099 	bl	10a124 <dfs_fdtable_get>
  109ebc:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109ec0:	e51b0008 	ldr	r0, [fp, #-8]
  109ec4:	ebffffe2 	bl	109e54 <fdt_fd_new>
  109ec8:	e1a03000 	mov	r3, r0
}
  109ecc:	e1a00003 	mov	r0, r3
  109ed0:	e24bd004 	sub	sp, fp, #4
  109ed4:	e8bd8800 	pop	{fp, pc}

00109ed8 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109ed8:	e92d4800 	push	{fp, lr}
  109edc:	e28db004 	add	fp, sp, #4
  109ee0:	e24dd010 	sub	sp, sp, #16
  109ee4:	e50b0010 	str	r0, [fp, #-16]
  109ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ef0:	e3530000 	cmp	r3, #0
  109ef4:	ba000005 	blt	109f10 <fdt_fd_get+0x38>
  109ef8:	e51b3010 	ldr	r3, [fp, #-16]
  109efc:	e5933000 	ldr	r3, [r3]
  109f00:	e1a02003 	mov	r2, r3
  109f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f08:	e1530002 	cmp	r3, r2
  109f0c:	ba000001 	blt	109f18 <fdt_fd_get+0x40>
    {
        return NULL;
  109f10:	e3a03000 	mov	r3, #0
  109f14:	ea000014 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109f18:	ebffff03 	bl	109b2c <dfs_fd_lock>
    d = fdt->fds[fd];
  109f1c:	e51b3010 	ldr	r3, [fp, #-16]
  109f20:	e5932004 	ldr	r2, [r3, #4]
  109f24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f28:	e1a03103 	lsl	r3, r3, #2
  109f2c:	e0823003 	add	r3, r2, r3
  109f30:	e5933000 	ldr	r3, [r3]
  109f34:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109f38:	e51b3008 	ldr	r3, [fp, #-8]
  109f3c:	e3530000 	cmp	r3, #0
  109f40:	0a000004 	beq	109f58 <fdt_fd_get+0x80>
  109f44:	e51b3008 	ldr	r3, [fp, #-8]
  109f48:	e1d330b0 	ldrh	r3, [r3]
  109f4c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109f50:	e1530002 	cmp	r3, r2
  109f54:	0a000002 	beq	109f64 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109f58:	ebffff14 	bl	109bb0 <dfs_fd_unlock>
        return NULL;
  109f5c:	e3a03000 	mov	r3, #0
  109f60:	ea000001 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109f64:	ebffff11 	bl	109bb0 <dfs_fd_unlock>

    return d;
  109f68:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f6c:	e1a00003 	mov	r0, r3
  109f70:	e24bd004 	sub	sp, fp, #4
  109f74:	e8bd8800 	pop	{fp, pc}

00109f78 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109f78:	e92d4800 	push	{fp, lr}
  109f7c:	e28db004 	add	fp, sp, #4
  109f80:	e24dd010 	sub	sp, sp, #16
  109f84:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109f88:	eb000065 	bl	10a124 <dfs_fdtable_get>
  109f8c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109f90:	e51b1010 	ldr	r1, [fp, #-16]
  109f94:	e51b0008 	ldr	r0, [fp, #-8]
  109f98:	ebffffce 	bl	109ed8 <fdt_fd_get>
  109f9c:	e1a03000 	mov	r3, r0
}
  109fa0:	e1a00003 	mov	r0, r3
  109fa4:	e24bd004 	sub	sp, fp, #4
  109fa8:	e8bd8800 	pop	{fp, pc}

00109fac <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109fac:	e92d4800 	push	{fp, lr}
  109fb0:	e28db004 	add	fp, sp, #4
  109fb4:	e24dd010 	sub	sp, sp, #16
  109fb8:	e50b0010 	str	r0, [fp, #-16]
  109fbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  109fc0:	e3a03000 	mov	r3, #0
  109fc4:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  109fc8:	e51b3010 	ldr	r3, [fp, #-16]
  109fcc:	e3530000 	cmp	r3, #0
  109fd0:	1a000005 	bne	109fec <fdt_fd_release+0x40>
  109fd4:	e300210b 	movw	r2, #267	; 0x10b
  109fd8:	e3061224 	movw	r1, #25124	; 0x6224
  109fdc:	e3401014 	movt	r1, #20
  109fe0:	e30601e0 	movw	r0, #25056	; 0x61e0
  109fe4:	e3400014 	movt	r0, #20
  109fe8:	ebffe56a 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  109fec:	ebfffece 	bl	109b2c <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  109ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ff4:	e3530000 	cmp	r3, #0
  109ff8:	ba000004 	blt	10a010 <fdt_fd_release+0x64>
  109ffc:	e51b3010 	ldr	r3, [fp, #-16]
  10a000:	e5932000 	ldr	r2, [r3]
  10a004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a008:	e1520003 	cmp	r2, r3
  10a00c:	8a000001 	bhi	10a018 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a010:	ebfffee6 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a014:	ea000034 	b	10a0ec <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a018:	e51b3010 	ldr	r3, [fp, #-16]
  10a01c:	e5932004 	ldr	r2, [r3, #4]
  10a020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a024:	e1a03103 	lsl	r3, r3, #2
  10a028:	e0823003 	add	r3, r2, r3
  10a02c:	e5933000 	ldr	r3, [r3]
  10a030:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a034:	e51b3008 	ldr	r3, [fp, #-8]
  10a038:	e3530000 	cmp	r3, #0
  10a03c:	1a000001 	bne	10a048 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a040:	ebfffeda 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a044:	ea000028 	b	10a0ec <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a048:	e51b3010 	ldr	r3, [fp, #-16]
  10a04c:	e5932004 	ldr	r2, [r3, #4]
  10a050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a054:	e1a03103 	lsl	r3, r3, #2
  10a058:	e0823003 	add	r3, r2, r3
  10a05c:	e3a02000 	mov	r2, #0
  10a060:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a064:	e51b3008 	ldr	r3, [fp, #-8]
  10a068:	e1d330b0 	ldrh	r3, [r3]
  10a06c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a070:	e1530002 	cmp	r3, r2
  10a074:	0a000005 	beq	10a090 <fdt_fd_release+0xe4>
  10a078:	e300211e 	movw	r2, #286	; 0x11e
  10a07c:	e3061224 	movw	r1, #25124	; 0x6224
  10a080:	e3401014 	movt	r1, #20
  10a084:	e30601ec 	movw	r0, #25068	; 0x61ec
  10a088:	e3400014 	movt	r0, #20
  10a08c:	ebffe541 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a090:	e51b3008 	ldr	r3, [fp, #-8]
  10a094:	e5933008 	ldr	r3, [r3, #8]
  10a098:	e2432001 	sub	r2, r3, #1
  10a09c:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a0:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a8:	e5933008 	ldr	r3, [r3, #8]
  10a0ac:	e3530000 	cmp	r3, #0
  10a0b0:	1a00000c 	bne	10a0e8 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a0b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0b8:	e5933018 	ldr	r3, [r3, #24]
  10a0bc:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a0c4:	e3530000 	cmp	r3, #0
  10a0c8:	0a000004 	beq	10a0e0 <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a0d0:	e593300c 	ldr	r3, [r3, #12]
  10a0d4:	e2432001 	sub	r2, r3, #1
  10a0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10a0dc:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a0e0:	e51b0008 	ldr	r0, [fp, #-8]
  10a0e4:	ebffe3b4 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a0e8:	ebfffeb0 	bl	109bb0 <dfs_fd_unlock>
}
  10a0ec:	e24bd004 	sub	sp, fp, #4
  10a0f0:	e8bd8800 	pop	{fp, pc}

0010a0f4 <fd_release>:

void fd_release(int fd)
{
  10a0f4:	e92d4800 	push	{fp, lr}
  10a0f8:	e28db004 	add	fp, sp, #4
  10a0fc:	e24dd010 	sub	sp, sp, #16
  10a100:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a104:	eb000006 	bl	10a124 <dfs_fdtable_get>
  10a108:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a10c:	e51b1010 	ldr	r1, [fp, #-16]
  10a110:	e51b0008 	ldr	r0, [fp, #-8]
  10a114:	ebffffa4 	bl	109fac <fdt_fd_release>
}
  10a118:	e320f000 	nop	{0}
  10a11c:	e24bd004 	sub	sp, fp, #4
  10a120:	e8bd8800 	pop	{fp, pc}

0010a124 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a124:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a128:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a12c:	e30d3610 	movw	r3, #54800	; 0xd610
  10a130:	e3403014 	movt	r3, #20
}
  10a134:	e1a00003 	mov	r0, r3
  10a138:	e28bd000 	add	sp, fp, #0
  10a13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a140:	e12fff1e 	bx	lr

0010a144 <rt_list_init>:
{
  10a144:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a148:	e28db000 	add	fp, sp, #0
  10a14c:	e24dd00c 	sub	sp, sp, #12
  10a150:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a154:	e51b3008 	ldr	r3, [fp, #-8]
  10a158:	e51b2008 	ldr	r2, [fp, #-8]
  10a15c:	e5832004 	str	r2, [r3, #4]
  10a160:	e51b3008 	ldr	r3, [fp, #-8]
  10a164:	e5932004 	ldr	r2, [r3, #4]
  10a168:	e51b3008 	ldr	r3, [fp, #-8]
  10a16c:	e5832000 	str	r2, [r3]
}
  10a170:	e320f000 	nop	{0}
  10a174:	e28bd000 	add	sp, fp, #0
  10a178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a17c:	e12fff1e 	bx	lr

0010a180 <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a180:	e92d4800 	push	{fp, lr}
  10a184:	e28db004 	add	fp, sp, #4
  10a188:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a18c:	e3a03000 	mov	r3, #0
  10a190:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a194:	e3a02001 	mov	r2, #1
  10a198:	e3061234 	movw	r1, #25140	; 0x6234
  10a19c:	e3401014 	movt	r1, #20
  10a1a0:	e30d061c 	movw	r0, #54812	; 0xd61c
  10a1a4:	e3400014 	movt	r0, #20
  10a1a8:	ebffdae6 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1ac:	e3a03000 	mov	r3, #0
  10a1b0:	e50b3008 	str	r3, [fp, #-8]
  10a1b4:	ea00000a 	b	10a1e4 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a1b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1bc:	e2833005 	add	r3, r3, #5
  10a1c0:	e1a02183 	lsl	r2, r3, #3
  10a1c4:	e30d361c 	movw	r3, #54812	; 0xd61c
  10a1c8:	e3403014 	movt	r3, #20
  10a1cc:	e0823003 	add	r3, r2, r3
  10a1d0:	e1a00003 	mov	r0, r3
  10a1d4:	ebffffda 	bl	10a144 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1dc:	e2833001 	add	r3, r3, #1
  10a1e0:	e50b3008 	str	r3, [fp, #-8]
  10a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1e8:	e353007f 	cmp	r3, #127	; 0x7f
  10a1ec:	dafffff1 	ble	10a1b8 <dfs_fnode_mgr_init+0x38>
    }
  10a1f0:	e320f000 	nop	{0}
  10a1f4:	e24bd004 	sub	sp, fp, #4
  10a1f8:	e8bd8800 	pop	{fp, pc}

0010a1fc <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a1fc:	e92d4800 	push	{fp, lr}
  10a200:	e28db004 	add	fp, sp, #4
  10a204:	e24dd010 	sub	sp, sp, #16
  10a208:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a20c:	e51b0010 	ldr	r0, [fp, #-16]
  10a210:	ebffff58 	bl	109f78 <fd_get>
  10a214:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a218:	e51b300c 	ldr	r3, [fp, #-12]
  10a21c:	e3530000 	cmp	r3, #0
  10a220:	1a000001 	bne	10a22c <dfs_net_getsocket+0x30>
  10a224:	e3e03000 	mvn	r3, #0
  10a228:	ea00000c 	b	10a260 <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a22c:	e51b300c 	ldr	r3, [fp, #-12]
  10a230:	e5933018 	ldr	r3, [r3, #24]
  10a234:	e1d330b0 	ldrh	r3, [r3]
  10a238:	e3530001 	cmp	r3, #1
  10a23c:	0a000002 	beq	10a24c <dfs_net_getsocket+0x50>
  10a240:	e3e03000 	mvn	r3, #0
  10a244:	e50b3008 	str	r3, [fp, #-8]
  10a248:	ea000003 	b	10a25c <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a24c:	e51b300c 	ldr	r3, [fp, #-12]
  10a250:	e5933018 	ldr	r3, [r3, #24]
  10a254:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a258:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a25c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a260:	e1a00003 	mov	r0, r3
  10a264:	e24bd004 	sub	sp, fp, #4
  10a268:	e8bd8800 	pop	{fp, pc}

0010a26c <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a26c:	e92d4800 	push	{fp, lr}
  10a270:	e28db004 	add	fp, sp, #4
  10a274:	e24dd018 	sub	sp, sp, #24
  10a278:	e50b0010 	str	r0, [fp, #-16]
  10a27c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a280:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a284:	e51b3010 	ldr	r3, [fp, #-16]
  10a288:	e5933018 	ldr	r3, [r3, #24]
  10a28c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a290:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a294:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a298:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a29c:	e51b0008 	ldr	r0, [fp, #-8]
  10a2a0:	ebfff8e6 	bl	108640 <sal_ioctlsocket>
  10a2a4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ac:	e3530000 	cmp	r3, #0
  10a2b0:	aa000006 	bge	10a2d0 <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a2b4:	ebffdf68 	bl	10205c <rt_get_errno>
  10a2b8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a2c0:	e3530000 	cmp	r3, #0
  10a2c4:	b2633000 	rsblt	r3, r3, #0
  10a2c8:	e2633000 	rsb	r3, r3, #0
  10a2cc:	ea000000 	b	10a2d4 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a2d0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a2d4:	e1a00003 	mov	r0, r3
  10a2d8:	e24bd004 	sub	sp, fp, #4
  10a2dc:	e8bd8800 	pop	{fp, pc}

0010a2e0 <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a2e0:	e92d4800 	push	{fp, lr}
  10a2e4:	e28db004 	add	fp, sp, #4
  10a2e8:	e24dd020 	sub	sp, sp, #32
  10a2ec:	e50b0010 	str	r0, [fp, #-16]
  10a2f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a2f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a2f8:	e51b3010 	ldr	r3, [fp, #-16]
  10a2fc:	e5933018 	ldr	r3, [r3, #24]
  10a300:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a304:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a308:	e3a03000 	mov	r3, #0
  10a30c:	e58d3004 	str	r3, [sp, #4]
  10a310:	e3a03000 	mov	r3, #0
  10a314:	e58d3000 	str	r3, [sp]
  10a318:	e3a03000 	mov	r3, #0
  10a31c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a320:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a324:	e51b0008 	ldr	r0, [fp, #-8]
  10a328:	ebfff7dd 	bl	1082a4 <sal_recvfrom>
  10a32c:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a330:	e51b300c 	ldr	r3, [fp, #-12]
  10a334:	e3530000 	cmp	r3, #0
  10a338:	aa000006 	bge	10a358 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a33c:	ebffdf46 	bl	10205c <rt_get_errno>
  10a340:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a344:	e51b300c 	ldr	r3, [fp, #-12]
  10a348:	e3530000 	cmp	r3, #0
  10a34c:	b2633000 	rsblt	r3, r3, #0
  10a350:	e2633000 	rsb	r3, r3, #0
  10a354:	ea000000 	b	10a35c <dfs_net_read+0x7c>
    }
    return ret;
  10a358:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a35c:	e1a00003 	mov	r0, r3
  10a360:	e24bd004 	sub	sp, fp, #4
  10a364:	e8bd8800 	pop	{fp, pc}

0010a368 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a368:	e92d4800 	push	{fp, lr}
  10a36c:	e28db004 	add	fp, sp, #4
  10a370:	e24dd020 	sub	sp, sp, #32
  10a374:	e50b0010 	str	r0, [fp, #-16]
  10a378:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a37c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a380:	e51b3010 	ldr	r3, [fp, #-16]
  10a384:	e5933018 	ldr	r3, [r3, #24]
  10a388:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a38c:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a390:	e3a03000 	mov	r3, #0
  10a394:	e58d3004 	str	r3, [sp, #4]
  10a398:	e3a03000 	mov	r3, #0
  10a39c:	e58d3000 	str	r3, [sp]
  10a3a0:	e3a03000 	mov	r3, #0
  10a3a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a3b0:	ebfff7ef 	bl	108374 <sal_sendto>
  10a3b4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a3b8:	e51b300c 	ldr	r3, [fp, #-12]
  10a3bc:	e3530000 	cmp	r3, #0
  10a3c0:	aa000006 	bge	10a3e0 <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a3c4:	ebffdf24 	bl	10205c <rt_get_errno>
  10a3c8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a3cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a3d0:	e3530000 	cmp	r3, #0
  10a3d4:	b2633000 	rsblt	r3, r3, #0
  10a3d8:	e2633000 	rsb	r3, r3, #0
  10a3dc:	ea000000 	b	10a3e4 <dfs_net_write+0x7c>
    }
    return ret;
  10a3e0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a3e4:	e1a00003 	mov	r0, r3
  10a3e8:	e24bd004 	sub	sp, fp, #4
  10a3ec:	e8bd8800 	pop	{fp, pc}

0010a3f0 <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a3f0:	e92d4800 	push	{fp, lr}
  10a3f4:	e28db004 	add	fp, sp, #4
  10a3f8:	e24dd010 	sub	sp, sp, #16
  10a3fc:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a400:	e3a03000 	mov	r3, #0
  10a404:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a408:	e51b3010 	ldr	r3, [fp, #-16]
  10a40c:	e5933018 	ldr	r3, [r3, #24]
  10a410:	e593300c 	ldr	r3, [r3, #12]
  10a414:	e3530001 	cmp	r3, #1
  10a418:	1a000006 	bne	10a438 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a41c:	e51b3010 	ldr	r3, [fp, #-16]
  10a420:	e5933018 	ldr	r3, [r3, #24]
  10a424:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a428:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a42c:	e51b000c 	ldr	r0, [fp, #-12]
  10a430:	ebfff854 	bl	108588 <sal_closesocket>
  10a434:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a438:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a43c:	e1a00003 	mov	r0, r3
  10a440:	e24bd004 	sub	sp, fp, #4
  10a444:	e8bd8800 	pop	{fp, pc}

0010a448 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a448:	e92d4800 	push	{fp, lr}
  10a44c:	e28db004 	add	fp, sp, #4
  10a450:	e24dd008 	sub	sp, sp, #8
  10a454:	e50b0008 	str	r0, [fp, #-8]
  10a458:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a45c:	e51b100c 	ldr	r1, [fp, #-12]
  10a460:	e51b0008 	ldr	r0, [fp, #-8]
  10a464:	ebfff911 	bl	1088b0 <sal_poll>
  10a468:	e1a03000 	mov	r3, r0
}
  10a46c:	e1a00003 	mov	r0, r3
  10a470:	e24bd004 	sub	sp, fp, #4
  10a474:	e8bd8800 	pop	{fp, pc}

0010a478 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a47c:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a480:	e306323c 	movw	r3, #25148	; 0x623c
  10a484:	e3403014 	movt	r3, #20
}
  10a488:	e1a00003 	mov	r0, r3
  10a48c:	e28bd000 	add	sp, fp, #0
  10a490:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a494:	e12fff1e 	bx	lr

0010a498 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a498:	e92d4800 	push	{fp, lr}
  10a49c:	e28db004 	add	fp, sp, #4
  10a4a0:	e24dd008 	sub	sp, sp, #8
  10a4a4:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a4a8:	e51b0008 	ldr	r0, [fp, #-8]
  10a4ac:	ebffdb64 	bl	101244 <rt_sem_release>
}
  10a4b0:	e320f000 	nop	{0}
  10a4b4:	e24bd004 	sub	sp, fp, #4
  10a4b8:	e8bd8800 	pop	{fp, pc}

0010a4bc <tcpip_input_timer_entry>:
 * LwIP system initialization
 */
#define INPUT_NOTIFICATION 0x01
sys_mbox_t * mbox_global = 0;
void tcpip_input_timer_entry()
{
  10a4bc:	e92d4800 	push	{fp, lr}
  10a4c0:	e28db004 	add	fp, sp, #4
    while (1)
    {
        if (mbox_global)
  10a4c4:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a4c8:	e3403014 	movt	r3, #20
  10a4cc:	e5933000 	ldr	r3, [r3]
  10a4d0:	e3530000 	cmp	r3, #0
  10a4d4:	0afffffa 	beq	10a4c4 <tcpip_input_timer_entry+0x8>
        {
            rt_thread_mdelay(100);
  10a4d8:	e3a00064 	mov	r0, #100	; 0x64
  10a4dc:	ebffde66 	bl	101e7c <rt_thread_mdelay>
            rt_mb_send(*mbox_global, INPUT_NOTIFICATION);
  10a4e0:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a4e4:	e3403014 	movt	r3, #20
  10a4e8:	e5933000 	ldr	r3, [r3]
  10a4ec:	e5933000 	ldr	r3, [r3]
  10a4f0:	e3a01001 	mov	r1, #1
  10a4f4:	e1a00003 	mov	r0, r3
  10a4f8:	ebffdc41 	bl	101604 <rt_mb_send>
        if (mbox_global)
  10a4fc:	eafffff0 	b	10a4c4 <tcpip_input_timer_entry+0x8>

0010a500 <lwip_system_init>:
    }
}

extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a500:	e92d4800 	push	{fp, lr}
  10a504:	e28db004 	add	fp, sp, #4
  10a508:	e24dd010 	sub	sp, sp, #16
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a50c:	e30d3a78 	movw	r3, #55928	; 0xda78
  10a510:	e3403014 	movt	r3, #20
  10a514:	e5933000 	ldr	r3, [r3]
  10a518:	e3530000 	cmp	r3, #0
  10a51c:	0a000004 	beq	10a534 <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a520:	e3060250 	movw	r0, #25168	; 0x6250
  10a524:	e3400014 	movt	r0, #20
  10a528:	ebffe2f9 	bl	103114 <rt_kprintf>
        return 0;
  10a52c:	e3a03000 	mov	r3, #0
  10a530:	ea00003c 	b	10a628 <lwip_system_init+0x128>
    }

    eth_system_device_init_private();
  10a534:	eb007e06 	bl	129d54 <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a538:	e30c3a48 	movw	r3, #51784	; 0xca48
  10a53c:	e3403015 	movt	r3, #21
  10a540:	e3a02000 	mov	r2, #0
  10a544:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a548:	e3a02000 	mov	r2, #0
  10a54c:	e3a01000 	mov	r1, #0
  10a550:	e306026c 	movw	r0, #25196	; 0x626c
  10a554:	e3400014 	movt	r0, #20
  10a558:	ebffdaa2 	bl	100fe8 <rt_sem_create>
  10a55c:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a560:	e51b3008 	ldr	r3, [fp, #-8]
  10a564:	e3530000 	cmp	r3, #0
  10a568:	1a000008 	bne	10a590 <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a56c:	e3060274 	movw	r0, #25204	; 0x6274
  10a570:	e3400014 	movt	r0, #20
  10a574:	ebffe2e6 	bl	103114 <rt_kprintf>
  10a578:	e3a0106a 	mov	r1, #106	; 0x6a
  10a57c:	e3060290 	movw	r0, #25232	; 0x6290
  10a580:	e3400014 	movt	r0, #20
  10a584:	eb0002d5 	bl	10b0e0 <sys_arch_assert>

        return -1;
  10a588:	e3e03000 	mvn	r3, #0
  10a58c:	ea000025 	b	10a628 <lwip_system_init+0x128>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a590:	e51b1008 	ldr	r1, [fp, #-8]
  10a594:	e30a0498 	movw	r0, #42136	; 0xa498
  10a598:	e3400010 	movt	r0, #16
  10a59c:	eb002fae 	bl	11645c <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a5a0:	e3e01000 	mvn	r1, #0
  10a5a4:	e51b0008 	ldr	r0, [fp, #-8]
  10a5a8:	ebffdb41 	bl	1012b4 <rt_sem_take>
  10a5ac:	e1a03000 	mov	r3, r0
  10a5b0:	e3530000 	cmp	r3, #0
  10a5b4:	0a000003 	beq	10a5c8 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a5b8:	e51b0008 	ldr	r0, [fp, #-8]
  10a5bc:	ebffdad4 	bl	101114 <rt_sem_delete>

        return -1;
  10a5c0:	e3e03000 	mvn	r3, #0
  10a5c4:	ea000017 	b	10a628 <lwip_system_init+0x128>
    }
    rt_sem_delete(done_sem);
  10a5c8:	e51b0008 	ldr	r0, [fp, #-8]
  10a5cc:	ebffdad0 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    rt_thread_t tid = rt_thread_create("tcpip_input_timer", tcpip_input_timer_entry, NULL, 1024, 25, 10); 
  10a5d0:	e3a0300a 	mov	r3, #10
  10a5d4:	e58d3004 	str	r3, [sp, #4]
  10a5d8:	e3a03019 	mov	r3, #25
  10a5dc:	e58d3000 	str	r3, [sp]
  10a5e0:	e3a03b01 	mov	r3, #1024	; 0x400
  10a5e4:	e3a02000 	mov	r2, #0
  10a5e8:	e30a14bc 	movw	r1, #42172	; 0xa4bc
  10a5ec:	e3401010 	movt	r1, #16
  10a5f0:	e30602c0 	movw	r0, #25280	; 0x62c0
  10a5f4:	e3400014 	movt	r0, #20
  10a5f8:	ebffdebd 	bl	1020f4 <rt_thread_create>
  10a5fc:	e50b000c 	str	r0, [fp, #-12]
    if (tid) rt_thread_startup(tid);
  10a600:	e51b300c 	ldr	r3, [fp, #-12]
  10a604:	e3530000 	cmp	r3, #0
  10a608:	0a000001 	beq	10a614 <lwip_system_init+0x114>
  10a60c:	e51b000c 	ldr	r0, [fp, #-12]
  10a610:	ebffdeec 	bl	1021c8 <rt_thread_startup>

    init_ok = RT_TRUE;
  10a614:	e30d3a78 	movw	r3, #55928	; 0xda78
  10a618:	e3403014 	movt	r3, #20
  10a61c:	e3a02001 	mov	r2, #1
  10a620:	e5832000 	str	r2, [r3]

    return 0;
  10a624:	e3a03000 	mov	r3, #0
}
  10a628:	e1a00003 	mov	r0, r3
  10a62c:	e24bd004 	sub	sp, fp, #4
  10a630:	e8bd8800 	pop	{fp, pc}

0010a634 <sys_init>:

void sys_init(void)
{
  10a634:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a638:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a63c:	e320f000 	nop	{0}
  10a640:	e28bd000 	add	sp, fp, #0
  10a644:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a648:	e12fff1e 	bx	lr

0010a64c <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a64c:	e92d4800 	push	{fp, lr}
  10a650:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a654:	ebffffa9 	bl	10a500 <lwip_system_init>
}
  10a658:	e320f000 	nop	{0}
  10a65c:	e8bd8800 	pop	{fp, pc}

0010a660 <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a660:	e92d4800 	push	{fp, lr}
  10a664:	e28db004 	add	fp, sp, #4
  10a668:	e24dd020 	sub	sp, sp, #32
  10a66c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a670:	e1a03001 	mov	r3, r1
  10a674:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a678:	e30d3a7c 	movw	r3, #55932	; 0xda7c
  10a67c:	e3403014 	movt	r3, #20
  10a680:	e1d330b0 	ldrh	r3, [r3]
  10a684:	e24b0010 	sub	r0, fp, #16
  10a688:	e58d3000 	str	r3, [sp]
  10a68c:	e30632d4 	movw	r3, #25300	; 0x62d4
  10a690:	e3403014 	movt	r3, #20
  10a694:	e30622d8 	movw	r2, #25304	; 0x62d8
  10a698:	e3402014 	movt	r2, #20
  10a69c:	e3a01008 	mov	r1, #8
  10a6a0:	ebffe265 	bl	10303c <rt_snprintf>
    counter ++;
  10a6a4:	e30d3a7c 	movw	r3, #55932	; 0xda7c
  10a6a8:	e3403014 	movt	r3, #20
  10a6ac:	e1d330b0 	ldrh	r3, [r3]
  10a6b0:	e2833001 	add	r3, r3, #1
  10a6b4:	e6ff2073 	uxth	r2, r3
  10a6b8:	e30d3a7c 	movw	r3, #55932	; 0xda7c
  10a6bc:	e3403014 	movt	r3, #20
  10a6c0:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a6c4:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a6c8:	e24b3010 	sub	r3, fp, #16
  10a6cc:	e3a02000 	mov	r2, #0
  10a6d0:	e1a00003 	mov	r0, r3
  10a6d4:	ebffda43 	bl	100fe8 <rt_sem_create>
  10a6d8:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a6dc:	e51b3008 	ldr	r3, [fp, #-8]
  10a6e0:	e3530000 	cmp	r3, #0
  10a6e4:	1a000001 	bne	10a6f0 <sys_sem_new+0x90>
        return ERR_MEM;
  10a6e8:	e3e03000 	mvn	r3, #0
  10a6ec:	ea000003 	b	10a700 <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a6f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a6f4:	e51b2008 	ldr	r2, [fp, #-8]
  10a6f8:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a6fc:	e3a03000 	mov	r3, #0
    }
}
  10a700:	e1a00003 	mov	r0, r3
  10a704:	e24bd004 	sub	sp, fp, #4
  10a708:	e8bd8800 	pop	{fp, pc}

0010a70c <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a70c:	e92d4800 	push	{fp, lr}
  10a710:	e28db004 	add	fp, sp, #4
  10a714:	e24dd008 	sub	sp, sp, #8
  10a718:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a71c:	e51b3008 	ldr	r3, [fp, #-8]
  10a720:	e5933000 	ldr	r3, [r3]
  10a724:	e1a00003 	mov	r0, r3
  10a728:	ebffda79 	bl	101114 <rt_sem_delete>
}
  10a72c:	e320f000 	nop	{0}
  10a730:	e24bd004 	sub	sp, fp, #4
  10a734:	e8bd8800 	pop	{fp, pc}

0010a738 <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a738:	e92d4800 	push	{fp, lr}
  10a73c:	e28db004 	add	fp, sp, #4
  10a740:	e24dd008 	sub	sp, sp, #8
  10a744:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a748:	e51b3008 	ldr	r3, [fp, #-8]
  10a74c:	e5933000 	ldr	r3, [r3]
  10a750:	e1a00003 	mov	r0, r3
  10a754:	ebffdaba 	bl	101244 <rt_sem_release>
}
  10a758:	e320f000 	nop	{0}
  10a75c:	e24bd004 	sub	sp, fp, #4
  10a760:	e8bd8800 	pop	{fp, pc}

0010a764 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a764:	e92d4800 	push	{fp, lr}
  10a768:	e28db004 	add	fp, sp, #4
  10a76c:	e24dd018 	sub	sp, sp, #24
  10a770:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a774:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a778:	ebffddb8 	bl	101e60 <rt_tick_get>
  10a77c:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a780:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a784:	e3530000 	cmp	r3, #0
  10a788:	1a000002 	bne	10a798 <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a78c:	e3e03000 	mvn	r3, #0
  10a790:	e50b3008 	str	r3, [fp, #-8]
  10a794:	ea000007 	b	10a7b8 <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a798:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a79c:	e3530000 	cmp	r3, #0
  10a7a0:	1a000002 	bne	10a7b0 <sys_arch_sem_wait+0x4c>
            t = 1;
  10a7a4:	e3a03001 	mov	r3, #1
  10a7a8:	e50b3008 	str	r3, [fp, #-8]
  10a7ac:	ea000001 	b	10a7b8 <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a7b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a7b4:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a7b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a7bc:	e5933000 	ldr	r3, [r3]
  10a7c0:	e51b1008 	ldr	r1, [fp, #-8]
  10a7c4:	e1a00003 	mov	r0, r3
  10a7c8:	ebffdab9 	bl	1012b4 <rt_sem_take>
  10a7cc:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a7d0:	e51b3010 	ldr	r3, [fp, #-16]
  10a7d4:	e3730002 	cmn	r3, #2
  10a7d8:	1a000001 	bne	10a7e4 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a7dc:	e3e03000 	mvn	r3, #0
  10a7e0:	ea00000f 	b	10a824 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a7e4:	e51b3010 	ldr	r3, [fp, #-16]
  10a7e8:	e3530000 	cmp	r3, #0
  10a7ec:	1a000001 	bne	10a7f8 <sys_arch_sem_wait+0x94>
            ret = 1;
  10a7f0:	e3a03001 	mov	r3, #1
  10a7f4:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a7f8:	ebffdd98 	bl	101e60 <rt_tick_get>
  10a7fc:	e1a02000 	mov	r2, r0
  10a800:	e51b300c 	ldr	r3, [fp, #-12]
  10a804:	e0423003 	sub	r3, r2, r3
  10a808:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a80c:	e51b300c 	ldr	r3, [fp, #-12]
  10a810:	e3530000 	cmp	r3, #0
  10a814:	1a000001 	bne	10a820 <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a818:	e3a03001 	mov	r3, #1
  10a81c:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a820:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a824:	e1a00003 	mov	r0, r3
  10a828:	e24bd004 	sub	sp, fp, #4
  10a82c:	e8bd8800 	pop	{fp, pc}

0010a830 <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10a830:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a834:	e28db000 	add	fp, sp, #0
  10a838:	e24dd00c 	sub	sp, sp, #12
  10a83c:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10a840:	e51b3008 	ldr	r3, [fp, #-8]
  10a844:	e5933000 	ldr	r3, [r3]
}
  10a848:	e1a00003 	mov	r0, r3
  10a84c:	e28bd000 	add	sp, fp, #0
  10a850:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a854:	e12fff1e 	bx	lr

0010a858 <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10a858:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a85c:	e28db000 	add	fp, sp, #0
  10a860:	e24dd00c 	sub	sp, sp, #12
  10a864:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10a868:	e51b3008 	ldr	r3, [fp, #-8]
  10a86c:	e3a02000 	mov	r2, #0
  10a870:	e5832000 	str	r2, [r3]
}
  10a874:	e320f000 	nop	{0}
  10a878:	e28bd000 	add	sp, fp, #0
  10a87c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a880:	e12fff1e 	bx	lr

0010a884 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10a884:	e92d4800 	push	{fp, lr}
  10a888:	e28db004 	add	fp, sp, #4
  10a88c:	e24dd020 	sub	sp, sp, #32
  10a890:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10a894:	e30d3a7e 	movw	r3, #55934	; 0xda7e
  10a898:	e3403014 	movt	r3, #20
  10a89c:	e1d330b0 	ldrh	r3, [r3]
  10a8a0:	e24b0010 	sub	r0, fp, #16
  10a8a4:	e58d3000 	str	r3, [sp]
  10a8a8:	e30632e0 	movw	r3, #25312	; 0x62e0
  10a8ac:	e3403014 	movt	r3, #20
  10a8b0:	e30622d8 	movw	r2, #25304	; 0x62d8
  10a8b4:	e3402014 	movt	r2, #20
  10a8b8:	e3a01008 	mov	r1, #8
  10a8bc:	ebffe1de 	bl	10303c <rt_snprintf>
    counter ++;
  10a8c0:	e30d3a7e 	movw	r3, #55934	; 0xda7e
  10a8c4:	e3403014 	movt	r3, #20
  10a8c8:	e1d330b0 	ldrh	r3, [r3]
  10a8cc:	e2833001 	add	r3, r3, #1
  10a8d0:	e6ff2073 	uxth	r2, r3
  10a8d4:	e30d3a7e 	movw	r3, #55934	; 0xda7e
  10a8d8:	e3403014 	movt	r3, #20
  10a8dc:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10a8e0:	e24b3010 	sub	r3, fp, #16
  10a8e4:	e3a01000 	mov	r1, #0
  10a8e8:	e1a00003 	mov	r0, r3
  10a8ec:	ebffd8ed 	bl	100ca8 <rt_mutex_create>
  10a8f0:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10a8f4:	e51b3008 	ldr	r3, [fp, #-8]
  10a8f8:	e3530000 	cmp	r3, #0
  10a8fc:	1a000001 	bne	10a908 <sys_mutex_new+0x84>
        return ERR_MEM;
  10a900:	e3e03000 	mvn	r3, #0
  10a904:	ea000003 	b	10a918 <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10a908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a90c:	e51b2008 	ldr	r2, [fp, #-8]
  10a910:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a914:	e3a03000 	mov	r3, #0
    }
}
  10a918:	e1a00003 	mov	r0, r3
  10a91c:	e24bd004 	sub	sp, fp, #4
  10a920:	e8bd8800 	pop	{fp, pc}

0010a924 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10a924:	e92d4800 	push	{fp, lr}
  10a928:	e28db004 	add	fp, sp, #4
  10a92c:	e24dd008 	sub	sp, sp, #8
  10a930:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10a934:	e51b3008 	ldr	r3, [fp, #-8]
  10a938:	e5933000 	ldr	r3, [r3]
  10a93c:	e3e01000 	mvn	r1, #0
  10a940:	e1a00003 	mov	r0, r3
  10a944:	ebffd96d 	bl	100f00 <rt_mutex_take>

    return;
  10a948:	e320f000 	nop	{0}
}
  10a94c:	e24bd004 	sub	sp, fp, #4
  10a950:	e8bd8800 	pop	{fp, pc}

0010a954 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10a954:	e92d4800 	push	{fp, lr}
  10a958:	e28db004 	add	fp, sp, #4
  10a95c:	e24dd008 	sub	sp, sp, #8
  10a960:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10a964:	e51b3008 	ldr	r3, [fp, #-8]
  10a968:	e5933000 	ldr	r3, [r3]
  10a96c:	e1a00003 	mov	r0, r3
  10a970:	ebffd980 	bl	100f78 <rt_mutex_release>
}
  10a974:	e320f000 	nop	{0}
  10a978:	e24bd004 	sub	sp, fp, #4
  10a97c:	e8bd8800 	pop	{fp, pc}

0010a980 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10a980:	e92d4800 	push	{fp, lr}
  10a984:	e28db004 	add	fp, sp, #4
  10a988:	e24dd008 	sub	sp, sp, #8
  10a98c:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10a990:	e51b3008 	ldr	r3, [fp, #-8]
  10a994:	e5933000 	ldr	r3, [r3]
  10a998:	e1a00003 	mov	r0, r3
  10a99c:	ebffd90b 	bl	100dd0 <rt_mutex_delete>
}
  10a9a0:	e320f000 	nop	{0}
  10a9a4:	e24bd004 	sub	sp, fp, #4
  10a9a8:	e8bd8800 	pop	{fp, pc}

0010a9ac <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10a9ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a9b0:	e28db000 	add	fp, sp, #0
  10a9b4:	e24dd00c 	sub	sp, sp, #12
  10a9b8:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10a9bc:	e51b3008 	ldr	r3, [fp, #-8]
  10a9c0:	e5933000 	ldr	r3, [r3]
}
  10a9c4:	e1a00003 	mov	r0, r3
  10a9c8:	e28bd000 	add	sp, fp, #0
  10a9cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a9d0:	e12fff1e 	bx	lr

0010a9d4 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10a9d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a9d8:	e28db000 	add	fp, sp, #0
  10a9dc:	e24dd00c 	sub	sp, sp, #12
  10a9e0:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10a9e4:	e51b3008 	ldr	r3, [fp, #-8]
  10a9e8:	e3a02000 	mov	r2, #0
  10a9ec:	e5832000 	str	r2, [r3]
}
  10a9f0:	e320f000 	nop	{0}
  10a9f4:	e28bd000 	add	sp, fp, #0
  10a9f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a9fc:	e12fff1e 	bx	lr

0010aa00 <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10aa00:	e92d4800 	push	{fp, lr}
  10aa04:	e28db004 	add	fp, sp, #4
  10aa08:	e24dd020 	sub	sp, sp, #32
  10aa0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10aa10:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    if (size == RT_LWIP_TCPTHREAD_MBOX_SIZE)
  10aa14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10aa18:	e3002101 	movw	r2, #257	; 0x101
  10aa1c:	e1530002 	cmp	r3, r2
  10aa20:	1a000006 	bne	10aa40 <sys_mbox_new+0x40>
    {
        printf("set mbox_global\n");
  10aa24:	e30602e4 	movw	r0, #25316	; 0x62e4
  10aa28:	e3400014 	movt	r0, #20
  10aa2c:	eb00ceeb 	bl	13e5e0 <puts>
        mbox_global = mbox;
  10aa30:	e30d3a44 	movw	r3, #55876	; 0xda44
  10aa34:	e3403014 	movt	r3, #20
  10aa38:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10aa3c:	e5832000 	str	r2, [r3]
    char tname[RT_NAME_MAX];
    sys_mbox_t tmpmbox;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10aa40:	e30d3a80 	movw	r3, #55936	; 0xda80
  10aa44:	e3403014 	movt	r3, #20
  10aa48:	e1d330b0 	ldrh	r3, [r3]
  10aa4c:	e24b0010 	sub	r0, fp, #16
  10aa50:	e58d3000 	str	r3, [sp]
  10aa54:	e30632f4 	movw	r3, #25332	; 0x62f4
  10aa58:	e3403014 	movt	r3, #20
  10aa5c:	e30622d8 	movw	r2, #25304	; 0x62d8
  10aa60:	e3402014 	movt	r2, #20
  10aa64:	e3a01008 	mov	r1, #8
  10aa68:	ebffe173 	bl	10303c <rt_snprintf>
    counter ++;
  10aa6c:	e30d3a80 	movw	r3, #55936	; 0xda80
  10aa70:	e3403014 	movt	r3, #20
  10aa74:	e1d330b0 	ldrh	r3, [r3]
  10aa78:	e2833001 	add	r3, r3, #1
  10aa7c:	e6ff2073 	uxth	r2, r3
  10aa80:	e30d3a80 	movw	r3, #55936	; 0xda80
  10aa84:	e3403014 	movt	r3, #20
  10aa88:	e1c320b0 	strh	r2, [r3]

    tmpmbox = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10aa8c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aa90:	e24b3010 	sub	r3, fp, #16
  10aa94:	e3a02000 	mov	r2, #0
  10aa98:	e1a00003 	mov	r0, r3
  10aa9c:	ebffda22 	bl	10132c <rt_mb_create>
  10aaa0:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmbox != RT_NULL)
  10aaa4:	e51b3008 	ldr	r3, [fp, #-8]
  10aaa8:	e3530000 	cmp	r3, #0
  10aaac:	0a000004 	beq	10aac4 <sys_mbox_new+0xc4>
    {
        *mbox = tmpmbox;
  10aab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aab4:	e51b2008 	ldr	r2, [fp, #-8]
  10aab8:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10aabc:	e3a03000 	mov	r3, #0
  10aac0:	ea000000 	b	10aac8 <sys_mbox_new+0xc8>
    }

    return ERR_MEM;
  10aac4:	e3e03000 	mvn	r3, #0
}
  10aac8:	e1a00003 	mov	r0, r3
  10aacc:	e24bd004 	sub	sp, fp, #4
  10aad0:	e8bd8800 	pop	{fp, pc}

0010aad4 <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10aad4:	e92d4800 	push	{fp, lr}
  10aad8:	e28db004 	add	fp, sp, #4
  10aadc:	e24dd008 	sub	sp, sp, #8
  10aae0:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete(*mbox);
  10aae4:	e51b3008 	ldr	r3, [fp, #-8]
  10aae8:	e5933000 	ldr	r3, [r3]
  10aaec:	e1a00003 	mov	r0, r3
  10aaf0:	ebffda58 	bl	101458 <rt_mb_delete>

    return;
  10aaf4:	e320f000 	nop	{0}
}
  10aaf8:	e24bd004 	sub	sp, fp, #4
  10aafc:	e8bd8800 	pop	{fp, pc}

0010ab00 <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10ab00:	e92d4800 	push	{fp, lr}
  10ab04:	e28db004 	add	fp, sp, #4
  10ab08:	e24dd008 	sub	sp, sp, #8
  10ab0c:	e50b0008 	str	r0, [fp, #-8]
  10ab10:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    // rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
    sys_mbox_trypost(mbox, msg);
  10ab14:	e51b100c 	ldr	r1, [fp, #-12]
  10ab18:	e51b0008 	ldr	r0, [fp, #-8]
  10ab1c:	eb0000c8 	bl	10ae44 <sys_mbox_trypost>

    return;
  10ab20:	e320f000 	nop	{0}
}
  10ab24:	e24bd004 	sub	sp, fp, #4
  10ab28:	e8bd8800 	pop	{fp, pc}

0010ab2c <buffer_full>:
#define INPUT_BUF_LEN 10
static void* INPUT_buffer[INPUT_BUF_LEN];
static int input_ptr = 0;
static int output_ptr = 0;
static int buffer_full()
{
  10ab2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ab30:	e28db000 	add	fp, sp, #0
    return input_ptr == ((output_ptr + 1) % INPUT_BUF_LEN);
  10ab34:	e30d3a74 	movw	r3, #55924	; 0xda74
  10ab38:	e3403014 	movt	r3, #20
  10ab3c:	e5933000 	ldr	r3, [r3]
  10ab40:	e2832001 	add	r2, r3, #1
  10ab44:	e3063667 	movw	r3, #26215	; 0x6667
  10ab48:	e3463666 	movt	r3, #26214	; 0x6666
  10ab4c:	e0c10392 	smull	r0, r1, r2, r3
  10ab50:	e1a01141 	asr	r1, r1, #2
  10ab54:	e1a03fc2 	asr	r3, r2, #31
  10ab58:	e0413003 	sub	r3, r1, r3
  10ab5c:	e3a0100a 	mov	r1, #10
  10ab60:	e0030391 	mul	r3, r1, r3
  10ab64:	e0423003 	sub	r3, r2, r3
  10ab68:	e30d2a70 	movw	r2, #55920	; 0xda70
  10ab6c:	e3402014 	movt	r2, #20
  10ab70:	e5922000 	ldr	r2, [r2]
  10ab74:	e1530002 	cmp	r3, r2
  10ab78:	03a03001 	moveq	r3, #1
  10ab7c:	13a03000 	movne	r3, #0
  10ab80:	e6ef3073 	uxtb	r3, r3
}
  10ab84:	e1a00003 	mov	r0, r3
  10ab88:	e28bd000 	add	sp, fp, #0
  10ab8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ab90:	e12fff1e 	bx	lr

0010ab94 <buffer_empty>:

static int buffer_empty()
{
  10ab94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ab98:	e28db000 	add	fp, sp, #0
    return input_ptr == output_ptr;
  10ab9c:	e30d3a70 	movw	r3, #55920	; 0xda70
  10aba0:	e3403014 	movt	r3, #20
  10aba4:	e5932000 	ldr	r2, [r3]
  10aba8:	e30d3a74 	movw	r3, #55924	; 0xda74
  10abac:	e3403014 	movt	r3, #20
  10abb0:	e5933000 	ldr	r3, [r3]
  10abb4:	e1520003 	cmp	r2, r3
  10abb8:	03a03001 	moveq	r3, #1
  10abbc:	13a03000 	movne	r3, #0
  10abc0:	e6ef3073 	uxtb	r3, r3
}
  10abc4:	e1a00003 	mov	r0, r3
  10abc8:	e28bd000 	add	sp, fp, #0
  10abcc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10abd0:	e12fff1e 	bx	lr

0010abd4 <buffer_enqueue>:

static int buffer_enqueue(void *data)
{
  10abd4:	e92d4800 	push	{fp, lr}
  10abd8:	e28db004 	add	fp, sp, #4
  10abdc:	e24dd008 	sub	sp, sp, #8
  10abe0:	e50b0008 	str	r0, [fp, #-8]
    if (buffer_full())
  10abe4:	ebffffd0 	bl	10ab2c <buffer_full>
  10abe8:	e1a03000 	mov	r3, r0
  10abec:	e3530000 	cmp	r3, #0
  10abf0:	0a000001 	beq	10abfc <buffer_enqueue+0x28>
    {
        return -1;
  10abf4:	e3e03000 	mvn	r3, #0
  10abf8:	ea000017 	b	10ac5c <buffer_enqueue+0x88>
    }

    INPUT_buffer[input_ptr] = data;
  10abfc:	e30d3a70 	movw	r3, #55920	; 0xda70
  10ac00:	e3403014 	movt	r3, #20
  10ac04:	e5932000 	ldr	r2, [r3]
  10ac08:	e30d3a48 	movw	r3, #55880	; 0xda48
  10ac0c:	e3403014 	movt	r3, #20
  10ac10:	e51b1008 	ldr	r1, [fp, #-8]
  10ac14:	e7831102 	str	r1, [r3, r2, lsl #2]
    input_ptr = (input_ptr + 1) % INPUT_BUF_LEN;
  10ac18:	e30d3a70 	movw	r3, #55920	; 0xda70
  10ac1c:	e3403014 	movt	r3, #20
  10ac20:	e5933000 	ldr	r3, [r3]
  10ac24:	e2832001 	add	r2, r3, #1
  10ac28:	e3063667 	movw	r3, #26215	; 0x6667
  10ac2c:	e3463666 	movt	r3, #26214	; 0x6666
  10ac30:	e0c10392 	smull	r0, r1, r2, r3
  10ac34:	e1a01141 	asr	r1, r1, #2
  10ac38:	e1a03fc2 	asr	r3, r2, #31
  10ac3c:	e0413003 	sub	r3, r1, r3
  10ac40:	e3a0100a 	mov	r1, #10
  10ac44:	e0030391 	mul	r3, r1, r3
  10ac48:	e0423003 	sub	r3, r2, r3
  10ac4c:	e30d2a70 	movw	r2, #55920	; 0xda70
  10ac50:	e3402014 	movt	r2, #20
  10ac54:	e5823000 	str	r3, [r2]
    return 0;
  10ac58:	e3a03000 	mov	r3, #0
}
  10ac5c:	e1a00003 	mov	r0, r3
  10ac60:	e24bd004 	sub	sp, fp, #4
  10ac64:	e8bd8800 	pop	{fp, pc}

0010ac68 <buffer_dequeue>:

static void* buffer_dequeue()
{
  10ac68:	e92d4800 	push	{fp, lr}
  10ac6c:	e28db004 	add	fp, sp, #4
  10ac70:	e24dd008 	sub	sp, sp, #8
    if (buffer_empty())
  10ac74:	ebffffc6 	bl	10ab94 <buffer_empty>
  10ac78:	e1a03000 	mov	r3, r0
  10ac7c:	e3530000 	cmp	r3, #0
  10ac80:	0a000001 	beq	10ac8c <buffer_dequeue+0x24>
    {
        return RT_NULL;
  10ac84:	e3a03000 	mov	r3, #0
  10ac88:	ea000017 	b	10acec <buffer_dequeue+0x84>
    }

    void *res = INPUT_buffer[output_ptr];
  10ac8c:	e30d3a74 	movw	r3, #55924	; 0xda74
  10ac90:	e3403014 	movt	r3, #20
  10ac94:	e5932000 	ldr	r2, [r3]
  10ac98:	e30d3a48 	movw	r3, #55880	; 0xda48
  10ac9c:	e3403014 	movt	r3, #20
  10aca0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  10aca4:	e50b3008 	str	r3, [fp, #-8]
    output_ptr = (output_ptr + 1) % INPUT_BUF_LEN;
  10aca8:	e30d3a74 	movw	r3, #55924	; 0xda74
  10acac:	e3403014 	movt	r3, #20
  10acb0:	e5933000 	ldr	r3, [r3]
  10acb4:	e2832001 	add	r2, r3, #1
  10acb8:	e3063667 	movw	r3, #26215	; 0x6667
  10acbc:	e3463666 	movt	r3, #26214	; 0x6666
  10acc0:	e0c10392 	smull	r0, r1, r2, r3
  10acc4:	e1a01141 	asr	r1, r1, #2
  10acc8:	e1a03fc2 	asr	r3, r2, #31
  10accc:	e0413003 	sub	r3, r1, r3
  10acd0:	e3a0100a 	mov	r1, #10
  10acd4:	e0030391 	mul	r3, r1, r3
  10acd8:	e0423003 	sub	r3, r2, r3
  10acdc:	e30d2a74 	movw	r2, #55924	; 0xda74
  10ace0:	e3402014 	movt	r2, #20
  10ace4:	e5823000 	str	r3, [r2]
    return res;
  10ace8:	e51b3008 	ldr	r3, [fp, #-8]
}
  10acec:	e1a00003 	mov	r0, r3
  10acf0:	e24bd004 	sub	sp, fp, #4
  10acf4:	e8bd8800 	pop	{fp, pc}

0010acf8 <post_msg>:

rt_err_t post_msg(sys_mbox_t *mbox, void **msg)
{
  10acf8:	e92d4800 	push	{fp, lr}
  10acfc:	e28db004 	add	fp, sp, #4
  10ad00:	e24dd008 	sub	sp, sp, #8
  10ad04:	e50b0008 	str	r0, [fp, #-8]
  10ad08:	e50b100c 	str	r1, [fp, #-12]
    if (mbox == mbox_global)
  10ad0c:	e30d3a44 	movw	r3, #55876	; 0xda44
  10ad10:	e3403014 	movt	r3, #20
  10ad14:	e5933000 	ldr	r3, [r3]
  10ad18:	e51b2008 	ldr	r2, [fp, #-8]
  10ad1c:	e1520003 	cmp	r2, r3
  10ad20:	1a000010 	bne	10ad68 <post_msg+0x70>
    {
        if (((struct tcpip_msg*)msg)->type == TCPIP_MSG_INPKT)
  10ad24:	e51b300c 	ldr	r3, [fp, #-12]
  10ad28:	e5933000 	ldr	r3, [r3]
  10ad2c:	e3530002 	cmp	r3, #2
  10ad30:	1a00000c 	bne	10ad68 <post_msg+0x70>
        {
            while (buffer_enqueue(msg) == -1)
  10ad34:	ea000004 	b	10ad4c <post_msg+0x54>
            {
                rt_mb_send(*mbox, INPUT_NOTIFICATION);
  10ad38:	e51b3008 	ldr	r3, [fp, #-8]
  10ad3c:	e5933000 	ldr	r3, [r3]
  10ad40:	e3a01001 	mov	r1, #1
  10ad44:	e1a00003 	mov	r0, r3
  10ad48:	ebffda2d 	bl	101604 <rt_mb_send>
            while (buffer_enqueue(msg) == -1)
  10ad4c:	e51b000c 	ldr	r0, [fp, #-12]
  10ad50:	ebffff9f 	bl	10abd4 <buffer_enqueue>
  10ad54:	e1a03000 	mov	r3, r0
  10ad58:	e3730001 	cmn	r3, #1
  10ad5c:	0afffff5 	beq	10ad38 <post_msg+0x40>
            }

            return ERR_OK;
  10ad60:	e3a03000 	mov	r3, #0
  10ad64:	ea000006 	b	10ad84 <post_msg+0x8c>
        } 
    }

    return rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
  10ad68:	e51b3008 	ldr	r3, [fp, #-8]
  10ad6c:	e5933000 	ldr	r3, [r3]
  10ad70:	e51b100c 	ldr	r1, [fp, #-12]
  10ad74:	e3e02000 	mvn	r2, #0
  10ad78:	e1a00003 	mov	r0, r3
  10ad7c:	ebffda01 	bl	101588 <rt_mb_send_wait>
  10ad80:	e1a03000 	mov	r3, r0
}
  10ad84:	e1a00003 	mov	r0, r3
  10ad88:	e24bd004 	sub	sp, fp, #4
  10ad8c:	e8bd8800 	pop	{fp, pc}

0010ad90 <fetch_msg>:

rt_err_t fetch_msg(sys_mbox_t *mbox, void **msg, u32_t t)
{
  10ad90:	e92d4800 	push	{fp, lr}
  10ad94:	e28db004 	add	fp, sp, #4
  10ad98:	e24dd018 	sub	sp, sp, #24
  10ad9c:	e50b0010 	str	r0, [fp, #-16]
  10ada0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ada4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    if (mbox == mbox_global)
  10ada8:	e30d3a44 	movw	r3, #55876	; 0xda44
  10adac:	e3403014 	movt	r3, #20
  10adb0:	e5933000 	ldr	r3, [r3]
  10adb4:	e51b2010 	ldr	r2, [fp, #-16]
  10adb8:	e1520003 	cmp	r2, r3
  10adbc:	1a000016 	bne	10ae1c <fetch_msg+0x8c>
    {
        rt_err_t ret;
        do
        {
            *msg = buffer_dequeue();
  10adc0:	ebffffa8 	bl	10ac68 <buffer_dequeue>
  10adc4:	e1a02000 	mov	r2, r0
  10adc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adcc:	e5832000 	str	r2, [r3]
            if (*msg)
  10add0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10add4:	e5933000 	ldr	r3, [r3]
  10add8:	e3530000 	cmp	r3, #0
  10addc:	0a000001 	beq	10ade8 <fetch_msg+0x58>
            {
                return RT_EOK;
  10ade0:	e3a03000 	mov	r3, #0
  10ade4:	ea000013 	b	10ae38 <fetch_msg+0xa8>
            } 
            ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, t);
  10ade8:	e51b3010 	ldr	r3, [fp, #-16]
  10adec:	e5933000 	ldr	r3, [r3]
  10adf0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10adf4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10adf8:	e1a00003 	mov	r0, r3
  10adfc:	ebffda1e 	bl	10167c <rt_mb_recv>
  10ae00:	e50b0008 	str	r0, [fp, #-8]
        } while (*msg == (void*)INPUT_NOTIFICATION);
  10ae04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ae08:	e5933000 	ldr	r3, [r3]
  10ae0c:	e3530001 	cmp	r3, #1
  10ae10:	0affffea 	beq	10adc0 <fetch_msg+0x30>

        return ret;
  10ae14:	e51b3008 	ldr	r3, [fp, #-8]
  10ae18:	ea000006 	b	10ae38 <fetch_msg+0xa8>
    }
    else 
    {
        return rt_mb_recv(*mbox, (rt_ubase_t *)msg, t); 
  10ae1c:	e51b3010 	ldr	r3, [fp, #-16]
  10ae20:	e5933000 	ldr	r3, [r3]
  10ae24:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ae28:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ae2c:	e1a00003 	mov	r0, r3
  10ae30:	ebffda11 	bl	10167c <rt_mb_recv>
  10ae34:	e1a03000 	mov	r3, r0
    }
}
  10ae38:	e1a00003 	mov	r0, r3
  10ae3c:	e24bd004 	sub	sp, fp, #4
  10ae40:	e8bd8800 	pop	{fp, pc}

0010ae44 <sys_mbox_trypost>:

err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10ae44:	e92d4800 	push	{fp, lr}
  10ae48:	e28db004 	add	fp, sp, #4
  10ae4c:	e24dd008 	sub	sp, sp, #8
  10ae50:	e50b0008 	str	r0, [fp, #-8]
  10ae54:	e50b100c 	str	r1, [fp, #-12]
    return post_msg(mbox, msg);
  10ae58:	e51b100c 	ldr	r1, [fp, #-12]
  10ae5c:	e51b0008 	ldr	r0, [fp, #-8]
  10ae60:	ebffffa4 	bl	10acf8 <post_msg>
  10ae64:	e1a03000 	mov	r3, r0
  10ae68:	e6af3073 	sxtb	r3, r3
}
  10ae6c:	e1a00003 	mov	r0, r3
  10ae70:	e24bd004 	sub	sp, fp, #4
  10ae74:	e8bd8800 	pop	{fp, pc}

0010ae78 <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10ae78:	e92d4800 	push	{fp, lr}
  10ae7c:	e28db004 	add	fp, sp, #4
  10ae80:	e24dd020 	sub	sp, sp, #32
  10ae84:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ae88:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ae8c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10ae90:	ebffdbf2 	bl	101e60 <rt_tick_get>
  10ae94:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10ae98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ae9c:	e3530000 	cmp	r3, #0
  10aea0:	1a000002 	bne	10aeb0 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10aea4:	e3e03000 	mvn	r3, #0
  10aea8:	e50b3008 	str	r3, [fp, #-8]
  10aeac:	ea000007 	b	10aed0 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10aeb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aeb4:	e3530000 	cmp	r3, #0
  10aeb8:	1a000002 	bne	10aec8 <sys_arch_mbox_fetch+0x50>
            t = 1;
  10aebc:	e3a03001 	mov	r3, #1
  10aec0:	e50b3008 	str	r3, [fp, #-8]
  10aec4:	ea000001 	b	10aed0 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10aec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aecc:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = fetch_msg(mbox, msg, t);
  10aed0:	e51b3008 	ldr	r3, [fp, #-8]
  10aed4:	e1a02003 	mov	r2, r3
  10aed8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aedc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10aee0:	ebffffaa 	bl	10ad90 <fetch_msg>
  10aee4:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10aee8:	e51b3010 	ldr	r3, [fp, #-16]
  10aeec:	e3730002 	cmn	r3, #2
  10aef0:	1a000001 	bne	10aefc <sys_arch_mbox_fetch+0x84>
        return SYS_ARCH_TIMEOUT;
  10aef4:	e3e03000 	mvn	r3, #0
  10aef8:	ea000014 	b	10af50 <sys_arch_mbox_fetch+0xd8>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10aefc:	e51b3010 	ldr	r3, [fp, #-16]
  10af00:	e3530000 	cmp	r3, #0
  10af04:	0a000006 	beq	10af24 <sys_arch_mbox_fetch+0xac>
  10af08:	e30602fc 	movw	r0, #25340	; 0x62fc
  10af0c:	e3400014 	movt	r0, #20
  10af10:	ebffe07f 	bl	103114 <rt_kprintf>
  10af14:	e3001212 	movw	r1, #530	; 0x212
  10af18:	e3060290 	movw	r0, #25232	; 0x6290
  10af1c:	e3400014 	movt	r0, #20
  10af20:	eb00006e 	bl	10b0e0 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10af24:	ebffdbcd 	bl	101e60 <rt_tick_get>
  10af28:	e1a02000 	mov	r2, r0
  10af2c:	e51b300c 	ldr	r3, [fp, #-12]
  10af30:	e0423003 	sub	r3, r2, r3
  10af34:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10af38:	e51b300c 	ldr	r3, [fp, #-12]
  10af3c:	e3530000 	cmp	r3, #0
  10af40:	1a000001 	bne	10af4c <sys_arch_mbox_fetch+0xd4>
        tick = 1;
  10af44:	e3a03001 	mov	r3, #1
  10af48:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10af4c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10af50:	e1a00003 	mov	r0, r3
  10af54:	e24bd004 	sub	sp, fp, #4
  10af58:	e8bd8800 	pop	{fp, pc}

0010af5c <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10af5c:	e92d4800 	push	{fp, lr}
  10af60:	e28db004 	add	fp, sp, #4
  10af64:	e24dd010 	sub	sp, sp, #16
  10af68:	e50b0010 	str	r0, [fp, #-16]
  10af6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = fetch_msg(mbox, msg, 0);
  10af70:	e3a02000 	mov	r2, #0
  10af74:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10af78:	e51b0010 	ldr	r0, [fp, #-16]
  10af7c:	ebffff83 	bl	10ad90 <fetch_msg>
  10af80:	e50b0008 	str	r0, [fp, #-8]
       
    if(ret == -RT_ETIMEOUT)
  10af84:	e51b3008 	ldr	r3, [fp, #-8]
  10af88:	e3730002 	cmn	r3, #2
  10af8c:	1a000001 	bne	10af98 <sys_arch_mbox_tryfetch+0x3c>
        return SYS_ARCH_TIMEOUT;
  10af90:	e3e03000 	mvn	r3, #0
  10af94:	ea000005 	b	10afb0 <sys_arch_mbox_tryfetch+0x54>
    else
    {
        if (ret == RT_EOK)
  10af98:	e51b3008 	ldr	r3, [fp, #-8]
  10af9c:	e3530000 	cmp	r3, #0
  10afa0:	1a000001 	bne	10afac <sys_arch_mbox_tryfetch+0x50>
            ret = 1;
  10afa4:	e3a03001 	mov	r3, #1
  10afa8:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10afac:	e51b3008 	ldr	r3, [fp, #-8]
}
  10afb0:	e1a00003 	mov	r0, r3
  10afb4:	e24bd004 	sub	sp, fp, #4
  10afb8:	e8bd8800 	pop	{fp, pc}

0010afbc <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10afbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10afc0:	e28db000 	add	fp, sp, #0
  10afc4:	e24dd00c 	sub	sp, sp, #12
  10afc8:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10afcc:	e51b3008 	ldr	r3, [fp, #-8]
  10afd0:	e5933000 	ldr	r3, [r3]
}
  10afd4:	e1a00003 	mov	r0, r3
  10afd8:	e28bd000 	add	sp, fp, #0
  10afdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10afe0:	e12fff1e 	bx	lr

0010afe4 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10afe4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10afe8:	e28db000 	add	fp, sp, #0
  10afec:	e24dd00c 	sub	sp, sp, #12
  10aff0:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10aff4:	e51b3008 	ldr	r3, [fp, #-8]
  10aff8:	e3a02000 	mov	r2, #0
  10affc:	e5832000 	str	r2, [r3]
}
  10b000:	e320f000 	nop	{0}
  10b004:	e28bd000 	add	sp, fp, #0
  10b008:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b00c:	e12fff1e 	bx	lr

0010b010 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10b010:	e92d4800 	push	{fp, lr}
  10b014:	e28db004 	add	fp, sp, #4
  10b018:	e24dd020 	sub	sp, sp, #32
  10b01c:	e50b0010 	str	r0, [fp, #-16]
  10b020:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10b024:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10b028:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10b02c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10b030:	e59b3004 	ldr	r3, [fp, #4]
  10b034:	e6ef3073 	uxtb	r3, r3
  10b038:	e3a02014 	mov	r2, #20
  10b03c:	e58d2004 	str	r2, [sp, #4]
  10b040:	e58d3000 	str	r3, [sp]
  10b044:	e1a03001 	mov	r3, r1
  10b048:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10b04c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b050:	e51b0010 	ldr	r0, [fp, #-16]
  10b054:	ebffdc26 	bl	1020f4 <rt_thread_create>
  10b058:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10b05c:	e51b3008 	ldr	r3, [fp, #-8]
  10b060:	e3530000 	cmp	r3, #0
  10b064:	1a000005 	bne	10b080 <sys_thread_new+0x70>
  10b068:	e300225f 	movw	r2, #607	; 0x25f
  10b06c:	e3061348 	movw	r1, #25416	; 0x6348
  10b070:	e3401014 	movt	r1, #20
  10b074:	e306031c 	movw	r0, #25372	; 0x631c
  10b078:	e3400014 	movt	r0, #20
  10b07c:	ebffe145 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10b080:	e51b0008 	ldr	r0, [fp, #-8]
  10b084:	ebffdc4f 	bl	1021c8 <rt_thread_startup>

    return t;
  10b088:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b08c:	e1a00003 	mov	r0, r3
  10b090:	e24bd004 	sub	sp, fp, #4
  10b094:	e8bd8800 	pop	{fp, pc}

0010b098 <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10b098:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b09c:	e28db000 	add	fp, sp, #0
  10b0a0:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10b0a4:	e3a03000 	mov	r3, #0
  10b0a8:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10b0ac:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b0b0:	e1a00003 	mov	r0, r3
  10b0b4:	e28bd000 	add	sp, fp, #0
  10b0b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0bc:	e12fff1e 	bx	lr

0010b0c0 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10b0c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b0c4:	e28db000 	add	fp, sp, #0
  10b0c8:	e24dd00c 	sub	sp, sp, #12
  10b0cc:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10b0d0:	e320f000 	nop	{0}
}
  10b0d4:	e28bd000 	add	sp, fp, #0
  10b0d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0dc:	e12fff1e 	bx	lr

0010b0e0 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10b0e0:	e92d4800 	push	{fp, lr}
  10b0e4:	e28db004 	add	fp, sp, #4
  10b0e8:	e24dd008 	sub	sp, sp, #8
  10b0ec:	e50b0008 	str	r0, [fp, #-8]
  10b0f0:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10b0f4:	e51b2008 	ldr	r2, [fp, #-8]
  10b0f8:	e51b100c 	ldr	r1, [fp, #-12]
  10b0fc:	e306032c 	movw	r0, #25388	; 0x632c
  10b100:	e3400014 	movt	r0, #20
  10b104:	ebffe002 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10b108:	e300227d 	movw	r2, #637	; 0x27d
  10b10c:	e3061358 	movw	r1, #25432	; 0x6358
  10b110:	e3401014 	movt	r1, #20
  10b114:	e3060344 	movw	r0, #25412	; 0x6344
  10b118:	e3400014 	movt	r0, #20
  10b11c:	ebffe11d 	bl	103598 <rt_assert_handler>
}
  10b120:	e320f000 	nop	{0}
  10b124:	e24bd004 	sub	sp, fp, #4
  10b128:	e8bd8800 	pop	{fp, pc}

0010b12c <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10b12c:	e92d4800 	push	{fp, lr}
  10b130:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10b134:	ebffdb49 	bl	101e60 <rt_tick_get>
  10b138:	e1a03000 	mov	r3, r0
}
  10b13c:	e1a00003 	mov	r0, r3
  10b140:	e8bd8800 	pop	{fp, pc}

0010b144 <sys_now>:

u32_t sys_now(void)
{
  10b144:	e92d4800 	push	{fp, lr}
  10b148:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10b14c:	ebffdb43 	bl	101e60 <rt_tick_get>
  10b150:	e1a03000 	mov	r3, r0
}
  10b154:	e1a00003 	mov	r0, r3
  10b158:	e8bd8800 	pop	{fp, pc}

0010b15c <mem_init>:


RT_WEAK
void mem_init(void)
{
  10b15c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b160:	e28db000 	add	fp, sp, #0
}
  10b164:	e320f000 	nop	{0}
  10b168:	e28bd000 	add	sp, fp, #0
  10b16c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b170:	e12fff1e 	bx	lr

0010b174 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10b174:	e92d4800 	push	{fp, lr}
  10b178:	e28db004 	add	fp, sp, #4
  10b17c:	e24dd008 	sub	sp, sp, #8
  10b180:	e1a03000 	mov	r3, r0
  10b184:	e1a02001 	mov	r2, r1
  10b188:	e14b30b6 	strh	r3, [fp, #-6]
  10b18c:	e1a03002 	mov	r3, r2
  10b190:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10b194:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b198:	e15b20b8 	ldrh	r2, [fp, #-8]
  10b19c:	e1a01002 	mov	r1, r2
  10b1a0:	e1a00003 	mov	r0, r3
  10b1a4:	ebffdf98 	bl	10300c <rt_calloc>
  10b1a8:	e1a03000 	mov	r3, r0
}
  10b1ac:	e1a00003 	mov	r0, r3
  10b1b0:	e24bd004 	sub	sp, fp, #4
  10b1b4:	e8bd8800 	pop	{fp, pc}

0010b1b8 <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10b1b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b1bc:	e28db000 	add	fp, sp, #0
  10b1c0:	e24dd00c 	sub	sp, sp, #12
  10b1c4:	e50b0008 	str	r0, [fp, #-8]
  10b1c8:	e1a03001 	mov	r3, r1
  10b1cc:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10b1d0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b1d4:	e1a00003 	mov	r0, r3
  10b1d8:	e28bd000 	add	sp, fp, #0
  10b1dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b1e0:	e12fff1e 	bx	lr

0010b1e4 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10b1e4:	e92d4800 	push	{fp, lr}
  10b1e8:	e28db004 	add	fp, sp, #4
  10b1ec:	e24dd008 	sub	sp, sp, #8
  10b1f0:	e1a03000 	mov	r3, r0
  10b1f4:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10b1f8:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b1fc:	e1a00003 	mov	r0, r3
  10b200:	ebffdf63 	bl	102f94 <rt_malloc>
  10b204:	e1a03000 	mov	r3, r0
}
  10b208:	e1a00003 	mov	r0, r3
  10b20c:	e24bd004 	sub	sp, fp, #4
  10b210:	e8bd8800 	pop	{fp, pc}

0010b214 <mem_free>:

void  mem_free(void *mem)
{
  10b214:	e92d4800 	push	{fp, lr}
  10b218:	e28db004 	add	fp, sp, #4
  10b21c:	e24dd008 	sub	sp, sp, #8
  10b220:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10b224:	e51b0008 	ldr	r0, [fp, #-8]
  10b228:	ebffdf63 	bl	102fbc <rt_free>
}
  10b22c:	e320f000 	nop	{0}
  10b230:	e24bd004 	sub	sp, fp, #4
  10b234:	e8bd8800 	pop	{fp, pc}

0010b238 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10b238:	e92d4800 	push	{fp, lr}
  10b23c:	e28db004 	add	fp, sp, #4
  10b240:	e24dd010 	sub	sp, sp, #16
  10b244:	e50b0010 	str	r0, [fp, #-16]
  10b248:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10b24c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b250:	e5933000 	ldr	r3, [r3]
  10b254:	e2833010 	add	r3, r3, #16
  10b258:	e1a02003 	mov	r2, r3
  10b25c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b260:	e51b0010 	ldr	r0, [fp, #-16]
  10b264:	eb002c15 	bl	1162c0 <tcpip_send_msg_wait_sem>
  10b268:	e1a03000 	mov	r3, r0
  10b26c:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10b270:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b274:	e3530000 	cmp	r3, #0
  10b278:	1a000002 	bne	10b288 <netconn_apimsg+0x50>
    return apimsg->err;
  10b27c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b280:	e1d330d4 	ldrsb	r3, [r3, #4]
  10b284:	ea000000 	b	10b28c <netconn_apimsg+0x54>
  }
  return err;
  10b288:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b28c:	e1a00003 	mov	r0, r3
  10b290:	e24bd004 	sub	sp, fp, #4
  10b294:	e8bd8800 	pop	{fp, pc}

0010b298 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10b298:	e92d4800 	push	{fp, lr}
  10b29c:	e28db004 	add	fp, sp, #4
  10b2a0:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b2a4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b2a8:	e1a03001 	mov	r3, r1
  10b2ac:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b2b0:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10b2b4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10b2b8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b2bc:	eb000878 	bl	10d4a4 <netconn_alloc>
  10b2c0:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10b2c4:	e51b3008 	ldr	r3, [fp, #-8]
  10b2c8:	e3530000 	cmp	r3, #0
  10b2cc:	0a00004f 	beq	10b410 <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10b2d0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10b2d4:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10b2d8:	e51b3008 	ldr	r3, [fp, #-8]
  10b2dc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10b2e0:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b2e4:	e1a01003 	mov	r1, r3
  10b2e8:	e30d0418 	movw	r0, #54296	; 0xd418
  10b2ec:	e3400010 	movt	r0, #16
  10b2f0:	ebffffd0 	bl	10b238 <netconn_apimsg>
  10b2f4:	e1a03000 	mov	r3, r0
  10b2f8:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10b2fc:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10b300:	e3530000 	cmp	r3, #0
  10b304:	0a000041 	beq	10b410 <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10b308:	e51b3008 	ldr	r3, [fp, #-8]
  10b30c:	e5933008 	ldr	r3, [r3, #8]
  10b310:	e3530000 	cmp	r3, #0
  10b314:	0a000006 	beq	10b334 <netconn_new_with_proto_and_callback+0x9c>
  10b318:	e3060368 	movw	r0, #25448	; 0x6368
  10b31c:	e3400014 	movt	r0, #20
  10b320:	ebffdf7b 	bl	103114 <rt_kprintf>
  10b324:	e3a01089 	mov	r1, #137	; 0x89
  10b328:	e306038c 	movw	r0, #25484	; 0x638c
  10b32c:	e3400014 	movt	r0, #20
  10b330:	ebffff6a 	bl	10b0e0 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10b334:	e51b3008 	ldr	r3, [fp, #-8]
  10b338:	e2833014 	add	r3, r3, #20
  10b33c:	e1a00003 	mov	r0, r3
  10b340:	ebffff1d 	bl	10afbc <sys_mbox_valid>
  10b344:	e1a03000 	mov	r3, r0
  10b348:	e3530000 	cmp	r3, #0
  10b34c:	1a000006 	bne	10b36c <netconn_new_with_proto_and_callback+0xd4>
  10b350:	e30603bc 	movw	r0, #25532	; 0x63bc
  10b354:	e3400014 	movt	r0, #20
  10b358:	ebffdf6d 	bl	103114 <rt_kprintf>
  10b35c:	e3a0108a 	mov	r1, #138	; 0x8a
  10b360:	e306038c 	movw	r0, #25484	; 0x638c
  10b364:	e3400014 	movt	r0, #20
  10b368:	ebffff5c 	bl	10b0e0 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b36c:	e51b3008 	ldr	r3, [fp, #-8]
  10b370:	e2833018 	add	r3, r3, #24
  10b374:	e1a00003 	mov	r0, r3
  10b378:	ebffff0f 	bl	10afbc <sys_mbox_valid>
  10b37c:	e1a03000 	mov	r3, r0
  10b380:	e3530000 	cmp	r3, #0
  10b384:	0a000006 	beq	10b3a4 <netconn_new_with_proto_and_callback+0x10c>
  10b388:	e30603d4 	movw	r0, #25556	; 0x63d4
  10b38c:	e3400014 	movt	r0, #20
  10b390:	ebffdf5f 	bl	103114 <rt_kprintf>
  10b394:	e3a0108c 	mov	r1, #140	; 0x8c
  10b398:	e306038c 	movw	r0, #25484	; 0x638c
  10b39c:	e3400014 	movt	r0, #20
  10b3a0:	ebffff4e 	bl	10b0e0 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b3a4:	e51b3008 	ldr	r3, [fp, #-8]
  10b3a8:	e2833010 	add	r3, r3, #16
  10b3ac:	e1a00003 	mov	r0, r3
  10b3b0:	ebfffd1e 	bl	10a830 <sys_sem_valid>
  10b3b4:	e1a03000 	mov	r3, r0
  10b3b8:	e3530000 	cmp	r3, #0
  10b3bc:	1a000006 	bne	10b3dc <netconn_new_with_proto_and_callback+0x144>
  10b3c0:	e30603f8 	movw	r0, #25592	; 0x63f8
  10b3c4:	e3400014 	movt	r0, #20
  10b3c8:	ebffdf51 	bl	103114 <rt_kprintf>
  10b3cc:	e3a0108f 	mov	r1, #143	; 0x8f
  10b3d0:	e306038c 	movw	r0, #25484	; 0x638c
  10b3d4:	e3400014 	movt	r0, #20
  10b3d8:	ebffff40 	bl	10b0e0 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b3dc:	e51b3008 	ldr	r3, [fp, #-8]
  10b3e0:	e2833010 	add	r3, r3, #16
  10b3e4:	e1a00003 	mov	r0, r3
  10b3e8:	ebfffcc7 	bl	10a70c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b3ec:	e51b3008 	ldr	r3, [fp, #-8]
  10b3f0:	e2833014 	add	r3, r3, #20
  10b3f4:	e1a00003 	mov	r0, r3
  10b3f8:	ebfffdb5 	bl	10aad4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b3fc:	e51b1008 	ldr	r1, [fp, #-8]
  10b400:	e3a00008 	mov	r0, #8
  10b404:	eb003797 	bl	119268 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b408:	e3a03000 	mov	r3, #0
  10b40c:	ea000000 	b	10b414 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b410:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b414:	e1a00003 	mov	r0, r3
  10b418:	e24bd004 	sub	sp, fp, #4
  10b41c:	e8bd8800 	pop	{fp, pc}

0010b420 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b420:	e92d4800 	push	{fp, lr}
  10b424:	e28db004 	add	fp, sp, #4
  10b428:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b42c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b430:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b434:	e3530000 	cmp	r3, #0
  10b438:	1a000001 	bne	10b444 <netconn_delete+0x24>
    return ERR_OK;
  10b43c:	e3a03000 	mov	r3, #0
  10b440:	ea000013 	b	10b494 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b444:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b448:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b44c:	ebffff3c 	bl	10b144 <sys_now>
  10b450:	e1a03000 	mov	r3, r0
  10b454:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b458:	e24b3020 	sub	r3, fp, #32
  10b45c:	e1a01003 	mov	r1, r3
  10b460:	e30d0e40 	movw	r0, #56896	; 0xde40
  10b464:	e3400010 	movt	r0, #16
  10b468:	ebffff72 	bl	10b238 <netconn_apimsg>
  10b46c:	e1a03000 	mov	r3, r0
  10b470:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b474:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b478:	e3530000 	cmp	r3, #0
  10b47c:	0a000001 	beq	10b488 <netconn_delete+0x68>
    return err;
  10b480:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b484:	ea000002 	b	10b494 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b488:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b48c:	eb000878 	bl	10d674 <netconn_free>

  return ERR_OK;
  10b490:	e3a03000 	mov	r3, #0
}
  10b494:	e1a00003 	mov	r0, r3
  10b498:	e24bd004 	sub	sp, fp, #4
  10b49c:	e8bd8800 	pop	{fp, pc}

0010b4a0 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b4a0:	e92d4800 	push	{fp, lr}
  10b4a4:	e28db004 	add	fp, sp, #4
  10b4a8:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b4ac:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b4b0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b4b4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b4b8:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b4bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b4c0:	e3530000 	cmp	r3, #0
  10b4c4:	1a000008 	bne	10b4ec <netconn_getaddr+0x4c>
  10b4c8:	e3060414 	movw	r0, #25620	; 0x6414
  10b4cc:	e3400014 	movt	r0, #20
  10b4d0:	ebffdf0f 	bl	103114 <rt_kprintf>
  10b4d4:	e3a010d9 	mov	r1, #217	; 0xd9
  10b4d8:	e306038c 	movw	r0, #25484	; 0x638c
  10b4dc:	e3400014 	movt	r0, #20
  10b4e0:	ebfffefe 	bl	10b0e0 <sys_arch_assert>
  10b4e4:	e3e0300f 	mvn	r3, #15
  10b4e8:	ea000027 	b	10b58c <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b4ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b4f0:	e3530000 	cmp	r3, #0
  10b4f4:	1a000008 	bne	10b51c <netconn_getaddr+0x7c>
  10b4f8:	e3060434 	movw	r0, #25652	; 0x6434
  10b4fc:	e3400014 	movt	r0, #20
  10b500:	ebffdf03 	bl	103114 <rt_kprintf>
  10b504:	e3a010da 	mov	r1, #218	; 0xda
  10b508:	e306038c 	movw	r0, #25484	; 0x638c
  10b50c:	e3400014 	movt	r0, #20
  10b510:	ebfffef2 	bl	10b0e0 <sys_arch_assert>
  10b514:	e3e0300f 	mvn	r3, #15
  10b518:	ea00001b 	b	10b58c <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b51c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b520:	e3530000 	cmp	r3, #0
  10b524:	1a000008 	bne	10b54c <netconn_getaddr+0xac>
  10b528:	e3060454 	movw	r0, #25684	; 0x6454
  10b52c:	e3400014 	movt	r0, #20
  10b530:	ebffdef7 	bl	103114 <rt_kprintf>
  10b534:	e3a010db 	mov	r1, #219	; 0xdb
  10b538:	e306038c 	movw	r0, #25484	; 0x638c
  10b53c:	e3400014 	movt	r0, #20
  10b540:	ebfffee6 	bl	10b0e0 <sys_arch_assert>
  10b544:	e3e0300f 	mvn	r3, #15
  10b548:	ea00000f 	b	10b58c <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b54c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b550:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b554:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b558:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b55c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b560:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b564:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b56c:	e24b3020 	sub	r3, fp, #32
  10b570:	e1a01003 	mov	r1, r3
  10b574:	e30f0760 	movw	r0, #63328	; 0xf760
  10b578:	e3400010 	movt	r0, #16
  10b57c:	ebffff2d 	bl	10b238 <netconn_apimsg>
  10b580:	e1a03000 	mov	r3, r0
  10b584:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b588:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b58c:	e1a00003 	mov	r0, r3
  10b590:	e24bd004 	sub	sp, fp, #4
  10b594:	e8bd8800 	pop	{fp, pc}

0010b598 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b598:	e92d4800 	push	{fp, lr}
  10b59c:	e28db004 	add	fp, sp, #4
  10b5a0:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b5a4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b5a8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b5ac:	e1a03002 	mov	r3, r2
  10b5b0:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b5b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b5b8:	e3530000 	cmp	r3, #0
  10b5bc:	1a000008 	bne	10b5e4 <netconn_bind+0x4c>
  10b5c0:	e3060474 	movw	r0, #25716	; 0x6474
  10b5c4:	e3400014 	movt	r0, #20
  10b5c8:	ebffded1 	bl	103114 <rt_kprintf>
  10b5cc:	e3a010ff 	mov	r1, #255	; 0xff
  10b5d0:	e306038c 	movw	r0, #25484	; 0x638c
  10b5d4:	e3400014 	movt	r0, #20
  10b5d8:	ebfffec0 	bl	10b0e0 <sys_arch_assert>
  10b5dc:	e3e0300f 	mvn	r3, #15
  10b5e0:	ea000013 	b	10b634 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b5e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b5e8:	e3530000 	cmp	r3, #0
  10b5ec:	1a000002 	bne	10b5fc <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b5f0:	e30938f8 	movw	r3, #39160	; 0x98f8
  10b5f4:	e3403014 	movt	r3, #20
  10b5f8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b5fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b600:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b604:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b608:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b60c:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b610:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b614:	e24b3020 	sub	r3, fp, #32
  10b618:	e1a01003 	mov	r1, r3
  10b61c:	e30e01ec 	movw	r0, #57836	; 0xe1ec
  10b620:	e3400010 	movt	r0, #16
  10b624:	ebffff03 	bl	10b238 <netconn_apimsg>
  10b628:	e1a03000 	mov	r3, r0
  10b62c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b630:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b634:	e1a00003 	mov	r0, r3
  10b638:	e24bd004 	sub	sp, fp, #4
  10b63c:	e8bd8800 	pop	{fp, pc}

0010b640 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b640:	e92d4800 	push	{fp, lr}
  10b644:	e28db004 	add	fp, sp, #4
  10b648:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b64c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b650:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b654:	e1a03002 	mov	r3, r2
  10b658:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b65c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b660:	e3530000 	cmp	r3, #0
  10b664:	1a000008 	bne	10b68c <netconn_connect+0x4c>
  10b668:	e3060490 	movw	r0, #25744	; 0x6490
  10b66c:	e3400014 	movt	r0, #20
  10b670:	ebffdea7 	bl	103114 <rt_kprintf>
  10b674:	e300112b 	movw	r1, #299	; 0x12b
  10b678:	e306038c 	movw	r0, #25484	; 0x638c
  10b67c:	e3400014 	movt	r0, #20
  10b680:	ebfffe96 	bl	10b0e0 <sys_arch_assert>
  10b684:	e3e0300f 	mvn	r3, #15
  10b688:	ea000013 	b	10b6dc <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b68c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b690:	e3530000 	cmp	r3, #0
  10b694:	1a000002 	bne	10b6a4 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b698:	e30938f8 	movw	r3, #39160	; 0x98f8
  10b69c:	e3403014 	movt	r3, #20
  10b6a0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b6a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6a8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b6ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b6b4:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b6b8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b6bc:	e24b3020 	sub	r3, fp, #32
  10b6c0:	e1a01003 	mov	r1, r3
  10b6c4:	e30e0590 	movw	r0, #58768	; 0xe590
  10b6c8:	e3400010 	movt	r0, #16
  10b6cc:	ebfffed9 	bl	10b238 <netconn_apimsg>
  10b6d0:	e1a03000 	mov	r3, r0
  10b6d4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b6d8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b6dc:	e1a00003 	mov	r0, r3
  10b6e0:	e24bd004 	sub	sp, fp, #4
  10b6e4:	e8bd8800 	pop	{fp, pc}

0010b6e8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b6e8:	e92d4800 	push	{fp, lr}
  10b6ec:	e28db004 	add	fp, sp, #4
  10b6f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b6f4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b6f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6fc:	e3530000 	cmp	r3, #0
  10b700:	1a000008 	bne	10b728 <netconn_disconnect+0x40>
  10b704:	e30604b0 	movw	r0, #25776	; 0x64b0
  10b708:	e3400014 	movt	r0, #20
  10b70c:	ebffde80 	bl	103114 <rt_kprintf>
  10b710:	e300114b 	movw	r1, #331	; 0x14b
  10b714:	e306038c 	movw	r0, #25484	; 0x638c
  10b718:	e3400014 	movt	r0, #20
  10b71c:	ebfffe6f 	bl	10b0e0 <sys_arch_assert>
  10b720:	e3e0300f 	mvn	r3, #15
  10b724:	ea000009 	b	10b750 <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b728:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b72c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b730:	e24b3020 	sub	r3, fp, #32
  10b734:	e1a01003 	mov	r1, r3
  10b738:	e30e08c8 	movw	r0, #59592	; 0xe8c8
  10b73c:	e3400010 	movt	r0, #16
  10b740:	ebfffebc 	bl	10b238 <netconn_apimsg>
  10b744:	e1a03000 	mov	r3, r0
  10b748:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b74c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b750:	e1a00003 	mov	r0, r3
  10b754:	e24bd004 	sub	sp, fp, #4
  10b758:	e8bd8800 	pop	{fp, pc}

0010b75c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b75c:	e92d4800 	push	{fp, lr}
  10b760:	e28db004 	add	fp, sp, #4
  10b764:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b768:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b76c:	e1a03001 	mov	r3, r1
  10b770:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b778:	e3530000 	cmp	r3, #0
  10b77c:	1a000008 	bne	10b7a4 <netconn_listen_with_backlog+0x48>
  10b780:	e30604d4 	movw	r0, #25812	; 0x64d4
  10b784:	e3400014 	movt	r0, #20
  10b788:	ebffde61 	bl	103114 <rt_kprintf>
  10b78c:	e3a01f5a 	mov	r1, #360	; 0x168
  10b790:	e306038c 	movw	r0, #25484	; 0x638c
  10b794:	e3400014 	movt	r0, #20
  10b798:	ebfffe50 	bl	10b0e0 <sys_arch_assert>
  10b79c:	e3e0300f 	mvn	r3, #15
  10b7a0:	ea000009 	b	10b7cc <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b7a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7a8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b7ac:	e24b3020 	sub	r3, fp, #32
  10b7b0:	e1a01003 	mov	r1, r3
  10b7b4:	e30e0974 	movw	r0, #59764	; 0xe974
  10b7b8:	e3400010 	movt	r0, #16
  10b7bc:	ebfffe9d 	bl	10b238 <netconn_apimsg>
  10b7c0:	e1a03000 	mov	r3, r0
  10b7c4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b7c8:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b7cc:	e1a00003 	mov	r0, r3
  10b7d0:	e24bd004 	sub	sp, fp, #4
  10b7d4:	e8bd8800 	pop	{fp, pc}

0010b7d8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b7d8:	e92d4800 	push	{fp, lr}
  10b7dc:	e28db004 	add	fp, sp, #4
  10b7e0:	e24dd010 	sub	sp, sp, #16
  10b7e4:	e50b0010 	str	r0, [fp, #-16]
  10b7e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b7ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b7f0:	e3530000 	cmp	r3, #0
  10b7f4:	1a000008 	bne	10b81c <netconn_accept+0x44>
  10b7f8:	e30604f4 	movw	r0, #25844	; 0x64f4
  10b7fc:	e3400014 	movt	r0, #20
  10b800:	ebffde43 	bl	103114 <rt_kprintf>
  10b804:	e300118d 	movw	r1, #397	; 0x18d
  10b808:	e306038c 	movw	r0, #25484	; 0x638c
  10b80c:	e3400014 	movt	r0, #20
  10b810:	ebfffe32 	bl	10b0e0 <sys_arch_assert>
  10b814:	e3e0300f 	mvn	r3, #15
  10b818:	ea000053 	b	10b96c <netconn_accept+0x194>
  *new_conn = NULL;
  10b81c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b820:	e3a02000 	mov	r2, #0
  10b824:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b828:	e51b3010 	ldr	r3, [fp, #-16]
  10b82c:	e3530000 	cmp	r3, #0
  10b830:	1a000008 	bne	10b858 <netconn_accept+0x80>
  10b834:	e3060514 	movw	r0, #25876	; 0x6514
  10b838:	e3400014 	movt	r0, #20
  10b83c:	ebffde34 	bl	103114 <rt_kprintf>
  10b840:	e300118f 	movw	r1, #399	; 0x18f
  10b844:	e306038c 	movw	r0, #25484	; 0x638c
  10b848:	e3400014 	movt	r0, #20
  10b84c:	ebfffe23 	bl	10b0e0 <sys_arch_assert>
  10b850:	e3e0300f 	mvn	r3, #15
  10b854:	ea000044 	b	10b96c <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b858:	e51b3010 	ldr	r3, [fp, #-16]
  10b85c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b860:	e373000c 	cmn	r3, #12
  10b864:	aa000002 	bge	10b874 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b868:	e51b3010 	ldr	r3, [fp, #-16]
  10b86c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b870:	ea00003d 	b	10b96c <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b874:	e51b3010 	ldr	r3, [fp, #-16]
  10b878:	e2833018 	add	r3, r3, #24
  10b87c:	e1a00003 	mov	r0, r3
  10b880:	ebfffdcd 	bl	10afbc <sys_mbox_valid>
  10b884:	e1a03000 	mov	r3, r0
  10b888:	e3530000 	cmp	r3, #0
  10b88c:	1a000001 	bne	10b898 <netconn_accept+0xc0>
    return ERR_CLSD;
  10b890:	e3e0300e 	mvn	r3, #14
  10b894:	ea000034 	b	10b96c <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b898:	e51b3010 	ldr	r3, [fp, #-16]
  10b89c:	e2830018 	add	r0, r3, #24
  10b8a0:	e51b3010 	ldr	r3, [fp, #-16]
  10b8a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b8a8:	e1a02003 	mov	r2, r3
  10b8ac:	e24b300c 	sub	r3, fp, #12
  10b8b0:	e1a01003 	mov	r1, r3
  10b8b4:	ebfffd6f 	bl	10ae78 <sys_arch_mbox_fetch>
  10b8b8:	e1a03000 	mov	r3, r0
  10b8bc:	e3730001 	cmn	r3, #1
  10b8c0:	1a000001 	bne	10b8cc <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b8c4:	e3e03002 	mvn	r3, #2
  10b8c8:	ea000027 	b	10b96c <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b8cc:	e51b300c 	ldr	r3, [fp, #-12]
  10b8d0:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b8d4:	e51b3010 	ldr	r3, [fp, #-16]
  10b8d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8dc:	e3530000 	cmp	r3, #0
  10b8e0:	0a000005 	beq	10b8fc <netconn_accept+0x124>
  10b8e4:	e51b3010 	ldr	r3, [fp, #-16]
  10b8e8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8ec:	e3a02000 	mov	r2, #0
  10b8f0:	e3a01001 	mov	r1, #1
  10b8f4:	e51b0010 	ldr	r0, [fp, #-16]
  10b8f8:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b8fc:	e51b200c 	ldr	r2, [fp, #-12]
  10b900:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  10b904:	e3403014 	movt	r3, #20
  10b908:	e1520003 	cmp	r2, r3
  10b90c:	1a000001 	bne	10b918 <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b910:	e3e0300c 	mvn	r3, #12
  10b914:	ea000014 	b	10b96c <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b918:	e51b3008 	ldr	r3, [fp, #-8]
  10b91c:	e3530000 	cmp	r3, #0
  10b920:	1a00000d 	bne	10b95c <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b924:	e51b3010 	ldr	r3, [fp, #-16]
  10b928:	e3530000 	cmp	r3, #0
  10b92c:	0a000008 	beq	10b954 <netconn_accept+0x17c>
  10b930:	ebffda41 	bl	10223c <rt_enter_critical>
  10b934:	e51b3010 	ldr	r3, [fp, #-16]
  10b938:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b93c:	e373000c 	cmn	r3, #12
  10b940:	ba000002 	blt	10b950 <netconn_accept+0x178>
  10b944:	e51b3010 	ldr	r3, [fp, #-16]
  10b948:	e3e0200e 	mvn	r2, #14
  10b94c:	e5c3200c 	strb	r2, [r3, #12]
  10b950:	ebffda3f 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b954:	e3e0300e 	mvn	r3, #14
  10b958:	ea000003 	b	10b96c <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b95c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b960:	e51b2008 	ldr	r2, [fp, #-8]
  10b964:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b968:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b96c:	e1a00003 	mov	r0, r3
  10b970:	e24bd004 	sub	sp, fp, #4
  10b974:	e8bd8800 	pop	{fp, pc}

0010b978 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b978:	e92d4800 	push	{fp, lr}
  10b97c:	e28db004 	add	fp, sp, #4
  10b980:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b984:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b988:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b98c:	e3a03000 	mov	r3, #0
  10b990:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b994:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b998:	e3530000 	cmp	r3, #0
  10b99c:	1a000008 	bne	10b9c4 <netconn_recv_data+0x4c>
  10b9a0:	e3060534 	movw	r0, #25908	; 0x6534
  10b9a4:	e3400014 	movt	r0, #20
  10b9a8:	ebffddd9 	bl	103114 <rt_kprintf>
  10b9ac:	e30011e7 	movw	r1, #487	; 0x1e7
  10b9b0:	e306038c 	movw	r0, #25484	; 0x638c
  10b9b4:	e3400014 	movt	r0, #20
  10b9b8:	ebfffdc8 	bl	10b0e0 <sys_arch_assert>
  10b9bc:	e3e0300f 	mvn	r3, #15
  10b9c0:	ea0000a5 	b	10bc5c <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b9c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b9c8:	e3a02000 	mov	r2, #0
  10b9cc:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b9d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b9d4:	e3530000 	cmp	r3, #0
  10b9d8:	1a000008 	bne	10ba00 <netconn_recv_data+0x88>
  10b9dc:	e3060554 	movw	r0, #25940	; 0x6554
  10b9e0:	e3400014 	movt	r0, #20
  10b9e4:	ebffddca 	bl	103114 <rt_kprintf>
  10b9e8:	e30011e9 	movw	r1, #489	; 0x1e9
  10b9ec:	e306038c 	movw	r0, #25484	; 0x638c
  10b9f0:	e3400014 	movt	r0, #20
  10b9f4:	ebfffdb9 	bl	10b0e0 <sys_arch_assert>
  10b9f8:	e3e0300f 	mvn	r3, #15
  10b9fc:	ea000096 	b	10bc5c <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10ba00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba04:	e5933000 	ldr	r3, [r3]
  10ba08:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ba0c:	e3530010 	cmp	r3, #16
  10ba10:	1a000011 	bne	10ba5c <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10ba14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba18:	e2833014 	add	r3, r3, #20
  10ba1c:	e1a00003 	mov	r0, r3
  10ba20:	ebfffd65 	bl	10afbc <sys_mbox_valid>
  10ba24:	e1a03000 	mov	r3, r0
  10ba28:	e3530000 	cmp	r3, #0
  10ba2c:	1a00000a 	bne	10ba5c <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10ba30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba34:	e2833018 	add	r3, r3, #24
  10ba38:	e1a00003 	mov	r0, r3
  10ba3c:	ebfffd5e 	bl	10afbc <sys_mbox_valid>
  10ba40:	e1a03000 	mov	r3, r0
  10ba44:	e3530000 	cmp	r3, #0
  10ba48:	0a000001 	beq	10ba54 <netconn_recv_data+0xdc>
  10ba4c:	e3e0300a 	mvn	r3, #10
  10ba50:	ea000081 	b	10bc5c <netconn_recv_data+0x2e4>
  10ba54:	e3e0300e 	mvn	r3, #14
  10ba58:	ea00007f 	b	10bc5c <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10ba5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba60:	e2833014 	add	r3, r3, #20
  10ba64:	e1a00003 	mov	r0, r3
  10ba68:	ebfffd53 	bl	10afbc <sys_mbox_valid>
  10ba6c:	e1a03000 	mov	r3, r0
  10ba70:	e3530000 	cmp	r3, #0
  10ba74:	1a000008 	bne	10ba9c <netconn_recv_data+0x124>
  10ba78:	e3060570 	movw	r0, #25968	; 0x6570
  10ba7c:	e3400014 	movt	r0, #20
  10ba80:	ebffdda3 	bl	103114 <rt_kprintf>
  10ba84:	e30011f5 	movw	r1, #501	; 0x1f5
  10ba88:	e306038c 	movw	r0, #25484	; 0x638c
  10ba8c:	e3400014 	movt	r0, #20
  10ba90:	ebfffd92 	bl	10b0e0 <sys_arch_assert>
  10ba94:	e3e0300a 	mvn	r3, #10
  10ba98:	ea00006f 	b	10bc5c <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10ba9c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10baa0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10baa4:	e373000c 	cmn	r3, #12
  10baa8:	aa000002 	bge	10bab8 <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10baac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bab0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bab4:	ea000068 	b	10bc5c <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10bab8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10babc:	e2830014 	add	r0, r3, #20
  10bac0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bac4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10bac8:	e1a02003 	mov	r2, r3
  10bacc:	e24b300c 	sub	r3, fp, #12
  10bad0:	e1a01003 	mov	r1, r3
  10bad4:	ebfffce7 	bl	10ae78 <sys_arch_mbox_fetch>
  10bad8:	e1a03000 	mov	r3, r0
  10badc:	e3730001 	cmn	r3, #1
  10bae0:	1a000001 	bne	10baec <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10bae4:	e3e03002 	mvn	r3, #2
  10bae8:	ea00005b 	b	10bc5c <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10baec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10baf0:	e5933000 	ldr	r3, [r3]
  10baf4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10baf8:	e3530010 	cmp	r3, #16
  10bafc:	1a000032 	bne	10bbcc <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10bb00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb04:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10bb08:	e51b300c 	ldr	r3, [fp, #-12]
  10bb0c:	e3530000 	cmp	r3, #0
  10bb10:	0a000003 	beq	10bb24 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10bb14:	e51b300c 	ldr	r3, [fp, #-12]
  10bb18:	e1d330b8 	ldrh	r3, [r3, #8]
  10bb1c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10bb20:	ea000001 	b	10bb2c <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10bb24:	e3a03001 	mov	r3, #1
  10bb28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10bb2c:	e24b3024 	sub	r3, fp, #36	; 0x24
  10bb30:	e1a01003 	mov	r1, r3
  10bb34:	e30e0e20 	movw	r0, #60960	; 0xee20
  10bb38:	e3400010 	movt	r0, #16
  10bb3c:	ebfffdbd 	bl	10b238 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10bb40:	e51b300c 	ldr	r3, [fp, #-12]
  10bb44:	e3530000 	cmp	r3, #0
  10bb48:	1a00001b 	bne	10bbbc <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10bb4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb50:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb54:	e3530000 	cmp	r3, #0
  10bb58:	0a000005 	beq	10bb74 <netconn_recv_data+0x1fc>
  10bb5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb64:	e3a02000 	mov	r2, #0
  10bb68:	e3a01001 	mov	r1, #1
  10bb6c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bb70:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10bb74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb78:	e5933008 	ldr	r3, [r3, #8]
  10bb7c:	e3530000 	cmp	r3, #0
  10bb80:	1a000008 	bne	10bba8 <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10bb84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb88:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bb8c:	e3530000 	cmp	r3, #0
  10bb90:	0a000002 	beq	10bba0 <netconn_recv_data+0x228>
  10bb94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb98:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bb9c:	ea00002e 	b	10bc5c <netconn_recv_data+0x2e4>
  10bba0:	e3e0300d 	mvn	r3, #13
  10bba4:	ea00002c 	b	10bc5c <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10bba8:	e3a01001 	mov	r1, #1
  10bbac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bbb0:	eb00015a 	bl	10c120 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10bbb4:	e3e0300e 	mvn	r3, #14
  10bbb8:	ea000027 	b	10bc5c <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10bbbc:	e51b300c 	ldr	r3, [fp, #-12]
  10bbc0:	e1d330b8 	ldrh	r3, [r3, #8]
  10bbc4:	e14b30b6 	strh	r3, [fp, #-6]
  10bbc8:	ea00000d 	b	10bc04 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10bbcc:	e51b300c 	ldr	r3, [fp, #-12]
  10bbd0:	e3530000 	cmp	r3, #0
  10bbd4:	1a000006 	bne	10bbf4 <netconn_recv_data+0x27c>
  10bbd8:	e3060590 	movw	r0, #26000	; 0x6590
  10bbdc:	e3400014 	movt	r0, #20
  10bbe0:	ebffdd4b 	bl	103114 <rt_kprintf>
  10bbe4:	e300123e 	movw	r1, #574	; 0x23e
  10bbe8:	e306038c 	movw	r0, #25484	; 0x638c
  10bbec:	e3400014 	movt	r0, #20
  10bbf0:	ebfffd3a 	bl	10b0e0 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10bbf4:	e51b300c 	ldr	r3, [fp, #-12]
  10bbf8:	e5933000 	ldr	r3, [r3]
  10bbfc:	e1d330b8 	ldrh	r3, [r3, #8]
  10bc00:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10bc04:	ebffd98c 	bl	10223c <rt_enter_critical>
  10bc08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc0c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10bc10:	e15b30b6 	ldrh	r3, [fp, #-6]
  10bc14:	e0422003 	sub	r2, r2, r3
  10bc18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc1c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10bc20:	ebffd98b 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10bc24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc2c:	e3530000 	cmp	r3, #0
  10bc30:	0a000005 	beq	10bc4c <netconn_recv_data+0x2d4>
  10bc34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc38:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc3c:	e15b20b6 	ldrh	r2, [fp, #-6]
  10bc40:	e3a01001 	mov	r1, #1
  10bc44:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bc48:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10bc4c:	e51b200c 	ldr	r2, [fp, #-12]
  10bc50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bc54:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10bc58:	e3a03000 	mov	r3, #0
}
  10bc5c:	e1a00003 	mov	r0, r3
  10bc60:	e24bd004 	sub	sp, fp, #4
  10bc64:	e8bd8800 	pop	{fp, pc}

0010bc68 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10bc68:	e92d4800 	push	{fp, lr}
  10bc6c:	e28db004 	add	fp, sp, #4
  10bc70:	e24dd008 	sub	sp, sp, #8
  10bc74:	e50b0008 	str	r0, [fp, #-8]
  10bc78:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10bc7c:	e51b3008 	ldr	r3, [fp, #-8]
  10bc80:	e3530000 	cmp	r3, #0
  10bc84:	0a000004 	beq	10bc9c <netconn_recv_tcp_pbuf+0x34>
  10bc88:	e51b3008 	ldr	r3, [fp, #-8]
  10bc8c:	e5933000 	ldr	r3, [r3]
  10bc90:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bc94:	e3530010 	cmp	r3, #16
  10bc98:	0a000008 	beq	10bcc0 <netconn_recv_tcp_pbuf+0x58>
  10bc9c:	e3060554 	movw	r0, #25940	; 0x6554
  10bca0:	e3400014 	movt	r0, #20
  10bca4:	ebffdd1a 	bl	103114 <rt_kprintf>
  10bca8:	e300125e 	movw	r1, #606	; 0x25e
  10bcac:	e306038c 	movw	r0, #25484	; 0x638c
  10bcb0:	e3400014 	movt	r0, #20
  10bcb4:	ebfffd09 	bl	10b0e0 <sys_arch_assert>
  10bcb8:	e3e0300f 	mvn	r3, #15
  10bcbc:	ea000003 	b	10bcd0 <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10bcc0:	e51b100c 	ldr	r1, [fp, #-12]
  10bcc4:	e51b0008 	ldr	r0, [fp, #-8]
  10bcc8:	ebffff2a 	bl	10b978 <netconn_recv_data>
  10bccc:	e1a03000 	mov	r3, r0
}
  10bcd0:	e1a00003 	mov	r0, r3
  10bcd4:	e24bd004 	sub	sp, fp, #4
  10bcd8:	e8bd8800 	pop	{fp, pc}

0010bcdc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10bcdc:	e92d4800 	push	{fp, lr}
  10bce0:	e28db004 	add	fp, sp, #4
  10bce4:	e24dd018 	sub	sp, sp, #24
  10bce8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10bcec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10bcf0:	e3a03000 	mov	r3, #0
  10bcf4:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10bcf8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bcfc:	e3530000 	cmp	r3, #0
  10bd00:	1a000008 	bne	10bd28 <netconn_recv+0x4c>
  10bd04:	e3060534 	movw	r0, #25908	; 0x6534
  10bd08:	e3400014 	movt	r0, #20
  10bd0c:	ebffdd00 	bl	103114 <rt_kprintf>
  10bd10:	e3a01f9d 	mov	r1, #628	; 0x274
  10bd14:	e306038c 	movw	r0, #25484	; 0x638c
  10bd18:	e3400014 	movt	r0, #20
  10bd1c:	ebfffcef 	bl	10b0e0 <sys_arch_assert>
  10bd20:	e3e0300f 	mvn	r3, #15
  10bd24:	ea00004d 	b	10be60 <netconn_recv+0x184>
  *new_buf = NULL;
  10bd28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd2c:	e3a02000 	mov	r2, #0
  10bd30:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10bd34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd38:	e3530000 	cmp	r3, #0
  10bd3c:	1a000008 	bne	10bd64 <netconn_recv+0x88>
  10bd40:	e3060554 	movw	r0, #25940	; 0x6554
  10bd44:	e3400014 	movt	r0, #20
  10bd48:	ebffdcf1 	bl	103114 <rt_kprintf>
  10bd4c:	e3001276 	movw	r1, #630	; 0x276
  10bd50:	e306038c 	movw	r0, #25484	; 0x638c
  10bd54:	e3400014 	movt	r0, #20
  10bd58:	ebfffce0 	bl	10b0e0 <sys_arch_assert>
  10bd5c:	e3e0300f 	mvn	r3, #15
  10bd60:	ea00003e 	b	10be60 <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bd64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd68:	e5933000 	ldr	r3, [r3]
  10bd6c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bd70:	e3530010 	cmp	r3, #16
  10bd74:	1a000035 	bne	10be50 <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10bd78:	e3a03000 	mov	r3, #0
  10bd7c:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10bd80:	e3a02d0a 	mov	r2, #640	; 0x280
  10bd84:	e306138c 	movw	r1, #25484	; 0x638c
  10bd88:	e3401014 	movt	r1, #20
  10bd8c:	e3a00007 	mov	r0, #7
  10bd90:	eb0034cc 	bl	1190c8 <memp_malloc_fn>
  10bd94:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10bd98:	e51b3008 	ldr	r3, [fp, #-8]
  10bd9c:	e3530000 	cmp	r3, #0
  10bda0:	1a000001 	bne	10bdac <netconn_recv+0xd0>
      return ERR_MEM;
  10bda4:	e3e03000 	mvn	r3, #0
  10bda8:	ea00002c 	b	10be60 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10bdac:	e24b3010 	sub	r3, fp, #16
  10bdb0:	e1a01003 	mov	r1, r3
  10bdb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bdb8:	ebfffeee 	bl	10b978 <netconn_recv_data>
  10bdbc:	e1a03000 	mov	r3, r0
  10bdc0:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10bdc4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bdc8:	e3530000 	cmp	r3, #0
  10bdcc:	0a000004 	beq	10bde4 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10bdd0:	e51b1008 	ldr	r1, [fp, #-8]
  10bdd4:	e3a00007 	mov	r0, #7
  10bdd8:	eb003522 	bl	119268 <memp_free>
      return err;
  10bddc:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bde0:	ea00001e 	b	10be60 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10bde4:	e51b3010 	ldr	r3, [fp, #-16]
  10bde8:	e3530000 	cmp	r3, #0
  10bdec:	1a000006 	bne	10be0c <netconn_recv+0x130>
  10bdf0:	e306059c 	movw	r0, #26012	; 0x659c
  10bdf4:	e3400014 	movt	r0, #20
  10bdf8:	ebffdcc5 	bl	103114 <rt_kprintf>
  10bdfc:	e300128a 	movw	r1, #650	; 0x28a
  10be00:	e306038c 	movw	r0, #25484	; 0x638c
  10be04:	e3400014 	movt	r0, #20
  10be08:	ebfffcb4 	bl	10b0e0 <sys_arch_assert>

    buf->p = p;
  10be0c:	e51b2010 	ldr	r2, [fp, #-16]
  10be10:	e51b3008 	ldr	r3, [fp, #-8]
  10be14:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10be18:	e51b2010 	ldr	r2, [fp, #-16]
  10be1c:	e51b3008 	ldr	r3, [fp, #-8]
  10be20:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10be24:	e51b3008 	ldr	r3, [fp, #-8]
  10be28:	e3a02000 	mov	r2, #0
  10be2c:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10be30:	e51b3008 	ldr	r3, [fp, #-8]
  10be34:	e3a02000 	mov	r2, #0
  10be38:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10be3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10be40:	e51b2008 	ldr	r2, [fp, #-8]
  10be44:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10be48:	e3a03000 	mov	r3, #0
  10be4c:	ea000003 	b	10be60 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10be50:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10be54:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10be58:	ebfffec6 	bl	10b978 <netconn_recv_data>
  10be5c:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10be60:	e1a00003 	mov	r0, r3
  10be64:	e24bd004 	sub	sp, fp, #4
  10be68:	e8bd8800 	pop	{fp, pc}

0010be6c <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10be6c:	e92d4800 	push	{fp, lr}
  10be70:	e28db004 	add	fp, sp, #4
  10be74:	e24dd010 	sub	sp, sp, #16
  10be78:	e50b0008 	str	r0, [fp, #-8]
  10be7c:	e50b100c 	str	r1, [fp, #-12]
  10be80:	e50b2010 	str	r2, [fp, #-16]
  10be84:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10be88:	e51b300c 	ldr	r3, [fp, #-12]
  10be8c:	e3530000 	cmp	r3, #0
  10be90:	0a000010 	beq	10bed8 <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10be94:	e51b3010 	ldr	r3, [fp, #-16]
  10be98:	e3530000 	cmp	r3, #0
  10be9c:	0a000002 	beq	10beac <netconn_sendto+0x40>
  10bea0:	e51b3010 	ldr	r3, [fp, #-16]
  10bea4:	e5933000 	ldr	r3, [r3]
  10bea8:	ea000000 	b	10beb0 <netconn_sendto+0x44>
  10beac:	e3a03000 	mov	r3, #0
  10beb0:	e51b200c 	ldr	r2, [fp, #-12]
  10beb4:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10beb8:	e51b300c 	ldr	r3, [fp, #-12]
  10bebc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10bec0:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10bec4:	e51b100c 	ldr	r1, [fp, #-12]
  10bec8:	e51b0008 	ldr	r0, [fp, #-8]
  10becc:	eb000005 	bl	10bee8 <netconn_send>
  10bed0:	e1a03000 	mov	r3, r0
  10bed4:	ea000000 	b	10bedc <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10bed8:	e3e03005 	mvn	r3, #5
}
  10bedc:	e1a00003 	mov	r0, r3
  10bee0:	e24bd004 	sub	sp, fp, #4
  10bee4:	e8bd8800 	pop	{fp, pc}

0010bee8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bee8:	e92d4800 	push	{fp, lr}
  10beec:	e28db004 	add	fp, sp, #4
  10bef0:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bef4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bef8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10befc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf00:	e3530000 	cmp	r3, #0
  10bf04:	1a000008 	bne	10bf2c <netconn_send+0x44>
  10bf08:	e30605a8 	movw	r0, #26024	; 0x65a8
  10bf0c:	e3400014 	movt	r0, #20
  10bf10:	ebffdc7f 	bl	103114 <rt_kprintf>
  10bf14:	e30012c3 	movw	r1, #707	; 0x2c3
  10bf18:	e306038c 	movw	r0, #25484	; 0x638c
  10bf1c:	e3400014 	movt	r0, #20
  10bf20:	ebfffc6e 	bl	10b0e0 <sys_arch_assert>
  10bf24:	e3e0300f 	mvn	r3, #15
  10bf28:	ea00000b 	b	10bf5c <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bf2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf30:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bf34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bf3c:	e24b3020 	sub	r3, fp, #32
  10bf40:	e1a01003 	mov	r1, r3
  10bf44:	e30e0c14 	movw	r0, #60436	; 0xec14
  10bf48:	e3400010 	movt	r0, #16
  10bf4c:	ebfffcb9 	bl	10b238 <netconn_apimsg>
  10bf50:	e1a03000 	mov	r3, r0
  10bf54:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bf58:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bf5c:	e1a00003 	mov	r0, r3
  10bf60:	e24bd004 	sub	sp, fp, #4
  10bf64:	e8bd8800 	pop	{fp, pc}

0010bf68 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bf68:	e92d4800 	push	{fp, lr}
  10bf6c:	e28db004 	add	fp, sp, #4
  10bf70:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bf74:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf78:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bf7c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bf80:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf88:	e3530000 	cmp	r3, #0
  10bf8c:	1a000008 	bne	10bfb4 <netconn_write_partly+0x4c>
  10bf90:	e30605c4 	movw	r0, #26052	; 0x65c4
  10bf94:	e3400014 	movt	r0, #20
  10bf98:	ebffdc5d 	bl	103114 <rt_kprintf>
  10bf9c:	e30012e6 	movw	r1, #742	; 0x2e6
  10bfa0:	e306038c 	movw	r0, #25484	; 0x638c
  10bfa4:	e3400014 	movt	r0, #20
  10bfa8:	ebfffc4c 	bl	10b0e0 <sys_arch_assert>
  10bfac:	e3e0300f 	mvn	r3, #15
  10bfb0:	ea000057 	b	10c114 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bfb4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bfb8:	e5933000 	ldr	r3, [r3]
  10bfbc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bfc0:	e3530010 	cmp	r3, #16
  10bfc4:	0a000008 	beq	10bfec <netconn_write_partly+0x84>
  10bfc8:	e30605e0 	movw	r0, #26080	; 0x65e0
  10bfcc:	e3400014 	movt	r0, #20
  10bfd0:	ebffdc4f 	bl	103114 <rt_kprintf>
  10bfd4:	e30012e7 	movw	r1, #743	; 0x2e7
  10bfd8:	e306038c 	movw	r0, #25484	; 0x638c
  10bfdc:	e3400014 	movt	r0, #20
  10bfe0:	ebfffc3e 	bl	10b0e0 <sys_arch_assert>
  10bfe4:	e3e03005 	mvn	r3, #5
  10bfe8:	ea000049 	b	10c114 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bfec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bff0:	e3530000 	cmp	r3, #0
  10bff4:	1a000001 	bne	10c000 <netconn_write_partly+0x98>
    return ERR_OK;
  10bff8:	e3a03000 	mov	r3, #0
  10bffc:	ea000044 	b	10c114 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10c000:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c004:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c008:	e2033002 	and	r3, r3, #2
  10c00c:	e3530000 	cmp	r3, #0
  10c010:	1a000003 	bne	10c024 <netconn_write_partly+0xbc>
  10c014:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c018:	e2033004 	and	r3, r3, #4
  10c01c:	e3530000 	cmp	r3, #0
  10c020:	0a000001 	beq	10c02c <netconn_write_partly+0xc4>
  10c024:	e3a03001 	mov	r3, #1
  10c028:	ea000000 	b	10c030 <netconn_write_partly+0xc8>
  10c02c:	e3a03000 	mov	r3, #0
  10c030:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c034:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c038:	e5933020 	ldr	r3, [r3, #32]
  10c03c:	e3530000 	cmp	r3, #0
  10c040:	0a000001 	beq	10c04c <netconn_write_partly+0xe4>
    dontblock = 1;
  10c044:	e3a03001 	mov	r3, #1
  10c048:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10c04c:	e55b3005 	ldrb	r3, [fp, #-5]
  10c050:	e3530000 	cmp	r3, #0
  10c054:	0a000004 	beq	10c06c <netconn_write_partly+0x104>
  10c058:	e59b3004 	ldr	r3, [fp, #4]
  10c05c:	e3530000 	cmp	r3, #0
  10c060:	1a000001 	bne	10c06c <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10c064:	e3e03005 	mvn	r3, #5
  10c068:	ea000029 	b	10c114 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10c06c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c070:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10c074:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c078:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10c07c:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c080:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10c084:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c088:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c08c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c090:	e5933020 	ldr	r3, [r3, #32]
  10c094:	e3530000 	cmp	r3, #0
  10c098:	0a000003 	beq	10c0ac <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10c09c:	ebfffc28 	bl	10b144 <sys_now>
  10c0a0:	e1a03000 	mov	r3, r0
  10c0a4:	e50b300c 	str	r3, [fp, #-12]
  10c0a8:	ea000001 	b	10c0b4 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10c0ac:	e3a03000 	mov	r3, #0
  10c0b0:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10c0b4:	e24b3020 	sub	r3, fp, #32
  10c0b8:	e1a01003 	mov	r1, r3
  10c0bc:	e30f050c 	movw	r0, #62732	; 0xf50c
  10c0c0:	e3400010 	movt	r0, #16
  10c0c4:	ebfffc5b 	bl	10b238 <netconn_apimsg>
  10c0c8:	e1a03000 	mov	r3, r0
  10c0cc:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10c0d0:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10c0d4:	e3530000 	cmp	r3, #0
  10c0d8:	1a00000c 	bne	10c110 <netconn_write_partly+0x1a8>
  10c0dc:	e59b3004 	ldr	r3, [fp, #4]
  10c0e0:	e3530000 	cmp	r3, #0
  10c0e4:	0a000009 	beq	10c110 <netconn_write_partly+0x1a8>
    if (dontblock) {
  10c0e8:	e55b3005 	ldrb	r3, [fp, #-5]
  10c0ec:	e3530000 	cmp	r3, #0
  10c0f0:	0a000003 	beq	10c104 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10c0f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c0f8:	e59b3004 	ldr	r3, [fp, #4]
  10c0fc:	e5832000 	str	r2, [r3]
  10c100:	ea000002 	b	10c110 <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10c104:	e59b3004 	ldr	r3, [fp, #4]
  10c108:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10c10c:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10c110:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10c114:	e1a00003 	mov	r0, r3
  10c118:	e24bd004 	sub	sp, fp, #4
  10c11c:	e8bd8800 	pop	{fp, pc}

0010c120 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10c120:	e92d4800 	push	{fp, lr}
  10c124:	e28db004 	add	fp, sp, #4
  10c128:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c12c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c130:	e1a03001 	mov	r3, r1
  10c134:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c138:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c13c:	e3530000 	cmp	r3, #0
  10c140:	1a000008 	bne	10c168 <netconn_close_shutdown+0x48>
  10c144:	e3060604 	movw	r0, #26116	; 0x6604
  10c148:	e3400014 	movt	r0, #20
  10c14c:	ebffdbf0 	bl	103114 <rt_kprintf>
  10c150:	e3a01fca 	mov	r1, #808	; 0x328
  10c154:	e306038c 	movw	r0, #25484	; 0x638c
  10c158:	e3400014 	movt	r0, #20
  10c15c:	ebfffbdf 	bl	10b0e0 <sys_arch_assert>
  10c160:	e3e0300f 	mvn	r3, #15
  10c164:	ea00000e 	b	10c1a4 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10c168:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c16c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10c170:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10c174:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10c178:	ebfffbf1 	bl	10b144 <sys_now>
  10c17c:	e1a03000 	mov	r3, r0
  10c180:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10c184:	e24b3020 	sub	r3, fp, #32
  10c188:	e1a01003 	mov	r1, r3
  10c18c:	e30f09e0 	movw	r0, #63968	; 0xf9e0
  10c190:	e3400010 	movt	r0, #16
  10c194:	ebfffc27 	bl	10b238 <netconn_apimsg>
  10c198:	e1a03000 	mov	r3, r0
  10c19c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c1a0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c1a4:	e1a00003 	mov	r0, r3
  10c1a8:	e24bd004 	sub	sp, fp, #4
  10c1ac:	e8bd8800 	pop	{fp, pc}

0010c1b0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10c1b0:	e92d4800 	push	{fp, lr}
  10c1b4:	e28db004 	add	fp, sp, #4
  10c1b8:	e24dd008 	sub	sp, sp, #8
  10c1bc:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10c1c0:	e3a01003 	mov	r1, #3
  10c1c4:	e51b0008 	ldr	r0, [fp, #-8]
  10c1c8:	ebffffd4 	bl	10c120 <netconn_close_shutdown>
  10c1cc:	e1a03000 	mov	r3, r0
}
  10c1d0:	e1a00003 	mov	r0, r3
  10c1d4:	e24bd004 	sub	sp, fp, #4
  10c1d8:	e8bd8800 	pop	{fp, pc}

0010c1dc <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10c1dc:	e92d4800 	push	{fp, lr}
  10c1e0:	e28db004 	add	fp, sp, #4
  10c1e4:	e24dd008 	sub	sp, sp, #8
  10c1e8:	e50b0008 	str	r0, [fp, #-8]
  10c1ec:	e1a03001 	mov	r3, r1
  10c1f0:	e54b3009 	strb	r3, [fp, #-9]
  10c1f4:	e1a03002 	mov	r3, r2
  10c1f8:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10c1fc:	e55b3009 	ldrb	r3, [fp, #-9]
  10c200:	e3530000 	cmp	r3, #0
  10c204:	13a03001 	movne	r3, #1
  10c208:	03a03000 	moveq	r3, #0
  10c20c:	e6ef3073 	uxtb	r3, r3
  10c210:	e6af3073 	sxtb	r3, r3
  10c214:	e55b200a 	ldrb	r2, [fp, #-10]
  10c218:	e3520000 	cmp	r2, #0
  10c21c:	0a000001 	beq	10c228 <netconn_shutdown+0x4c>
  10c220:	e3a02002 	mov	r2, #2
  10c224:	ea000000 	b	10c22c <netconn_shutdown+0x50>
  10c228:	e3a02000 	mov	r2, #0
  10c22c:	e1823003 	orr	r3, r2, r3
  10c230:	e6af3073 	sxtb	r3, r3
  10c234:	e6ef3073 	uxtb	r3, r3
  10c238:	e1a01003 	mov	r1, r3
  10c23c:	e51b0008 	ldr	r0, [fp, #-8]
  10c240:	ebffffb6 	bl	10c120 <netconn_close_shutdown>
  10c244:	e1a03000 	mov	r3, r0
}
  10c248:	e1a00003 	mov	r0, r3
  10c24c:	e24bd004 	sub	sp, fp, #4
  10c250:	e8bd8800 	pop	{fp, pc}

0010c254 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10c254:	e92d4800 	push	{fp, lr}
  10c258:	e28db004 	add	fp, sp, #4
  10c25c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10c260:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c264:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10c268:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10c26c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c274:	e3530000 	cmp	r3, #0
  10c278:	1a000008 	bne	10c2a0 <netconn_join_leave_group+0x4c>
  10c27c:	e3060620 	movw	r0, #26144	; 0x6620
  10c280:	e3400014 	movt	r0, #20
  10c284:	ebffdba2 	bl	103114 <rt_kprintf>
  10c288:	e3a01e37 	mov	r1, #880	; 0x370
  10c28c:	e306038c 	movw	r0, #25484	; 0x638c
  10c290:	e3400014 	movt	r0, #20
  10c294:	ebfffb91 	bl	10b0e0 <sys_arch_assert>
  10c298:	e3e0300f 	mvn	r3, #15
  10c29c:	ea00001b 	b	10c310 <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10c2a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c2a4:	e3530000 	cmp	r3, #0
  10c2a8:	1a000002 	bne	10c2b8 <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10c2ac:	e30938f8 	movw	r3, #39160	; 0x98f8
  10c2b0:	e3403014 	movt	r3, #20
  10c2b4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10c2b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c2bc:	e3530000 	cmp	r3, #0
  10c2c0:	1a000002 	bne	10c2d0 <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10c2c4:	e30938f8 	movw	r3, #39160	; 0x98f8
  10c2c8:	e3403014 	movt	r3, #20
  10c2cc:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10c2d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c2d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10c2d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c2dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10c2e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c2e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10c2e8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10c2ec:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10c2f0:	e24b3020 	sub	r3, fp, #32
  10c2f4:	e1a01003 	mov	r1, r3
  10c2f8:	e30f0c20 	movw	r0, #64544	; 0xfc20
  10c2fc:	e3400010 	movt	r0, #16
  10c300:	ebfffbcc 	bl	10b238 <netconn_apimsg>
  10c304:	e1a03000 	mov	r3, r0
  10c308:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c30c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c310:	e1a00003 	mov	r0, r3
  10c314:	e24bd004 	sub	sp, fp, #4
  10c318:	e8bd8800 	pop	{fp, pc}

0010c31c <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10c31c:	e92d4800 	push	{fp, lr}
  10c320:	e28db004 	add	fp, sp, #4
  10c324:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c328:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c32c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10c330:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c334:	e3530000 	cmp	r3, #0
  10c338:	1a000008 	bne	10c360 <netconn_gethostbyname+0x44>
  10c33c:	e3060648 	movw	r0, #26184	; 0x6648
  10c340:	e3400014 	movt	r0, #20
  10c344:	ebffdb72 	bl	103114 <rt_kprintf>
  10c348:	e30013a5 	movw	r1, #933	; 0x3a5
  10c34c:	e306038c 	movw	r0, #25484	; 0x638c
  10c350:	e3400014 	movt	r0, #20
  10c354:	ebfffb61 	bl	10b0e0 <sys_arch_assert>
  10c358:	e3e0300f 	mvn	r3, #15
  10c35c:	ea000036 	b	10c43c <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c360:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c364:	e3530000 	cmp	r3, #0
  10c368:	1a000008 	bne	10c390 <netconn_gethostbyname+0x74>
  10c36c:	e306066c 	movw	r0, #26220	; 0x666c
  10c370:	e3400014 	movt	r0, #20
  10c374:	ebffdb66 	bl	103114 <rt_kprintf>
  10c378:	e30013a6 	movw	r1, #934	; 0x3a6
  10c37c:	e306038c 	movw	r0, #25484	; 0x638c
  10c380:	e3400014 	movt	r0, #20
  10c384:	ebfffb55 	bl	10b0e0 <sys_arch_assert>
  10c388:	e3e0300f 	mvn	r3, #15
  10c38c:	ea00002a 	b	10c43c <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c390:	e24b301d 	sub	r3, fp, #29
  10c394:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c398:	e24b301c 	sub	r3, fp, #28
  10c39c:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c3a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c3a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c3a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c3ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c3b0:	e51b3010 	ldr	r3, [fp, #-16]
  10c3b4:	e3a01000 	mov	r1, #0
  10c3b8:	e1a00003 	mov	r0, r3
  10c3bc:	ebfff8a7 	bl	10a660 <sys_sem_new>
  10c3c0:	e1a03000 	mov	r3, r0
  10c3c4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c3c8:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3cc:	e3530000 	cmp	r3, #0
  10c3d0:	0a000001 	beq	10c3dc <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c3d4:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3d8:	ea000017 	b	10c43c <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c3dc:	e24b3018 	sub	r3, fp, #24
  10c3e0:	e3a02001 	mov	r2, #1
  10c3e4:	e1a01003 	mov	r1, r3
  10c3e8:	e30f0de8 	movw	r0, #65000	; 0xfde8
  10c3ec:	e3400010 	movt	r0, #16
  10c3f0:	eb002772 	bl	1161c0 <tcpip_callback_with_block>
  10c3f4:	e1a03000 	mov	r3, r0
  10c3f8:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c3fc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c400:	e3530000 	cmp	r3, #0
  10c404:	0a000004 	beq	10c41c <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c408:	e51b3010 	ldr	r3, [fp, #-16]
  10c40c:	e1a00003 	mov	r0, r3
  10c410:	ebfff8bd 	bl	10a70c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c414:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c418:	ea000007 	b	10c43c <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c41c:	e51b3010 	ldr	r3, [fp, #-16]
  10c420:	e3a01000 	mov	r1, #0
  10c424:	e1a00003 	mov	r0, r3
  10c428:	ebfff8cd 	bl	10a764 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c42c:	e51b3010 	ldr	r3, [fp, #-16]
  10c430:	e1a00003 	mov	r0, r3
  10c434:	ebfff8b4 	bl	10a70c <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c438:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c43c:	e1a00003 	mov	r0, r3
  10c440:	e24bd004 	sub	sp, fp, #4
  10c444:	e8bd8800 	pop	{fp, pc}

0010c448 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c448:	e92d4800 	push	{fp, lr}
  10c44c:	e28db004 	add	fp, sp, #4
  10c450:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c454:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c458:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c45c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c460:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c464:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c468:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c46c:	e51b300c 	ldr	r3, [fp, #-12]
  10c470:	e3530000 	cmp	r3, #0
  10c474:	0a00006b 	beq	10c628 <recv_raw+0x1e0>
  10c478:	e51b300c 	ldr	r3, [fp, #-12]
  10c47c:	e2833014 	add	r3, r3, #20
  10c480:	e1a00003 	mov	r0, r3
  10c484:	ebfffacc 	bl	10afbc <sys_mbox_valid>
  10c488:	e1a03000 	mov	r3, r0
  10c48c:	e3530000 	cmp	r3, #0
  10c490:	0a000064 	beq	10c628 <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c494:	ebffd768 	bl	10223c <rt_enter_critical>
  10c498:	e51b300c 	ldr	r3, [fp, #-12]
  10c49c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c4a0:	e50b3010 	str	r3, [fp, #-16]
  10c4a4:	ebffd76a 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c4a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4ac:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4b0:	e1a02003 	mov	r2, r3
  10c4b4:	e51b3010 	ldr	r3, [fp, #-16]
  10c4b8:	e0822003 	add	r2, r2, r3
  10c4bc:	e51b300c 	ldr	r3, [fp, #-12]
  10c4c0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c4c4:	e1520003 	cmp	r2, r3
  10c4c8:	da000001 	ble	10c4d4 <recv_raw+0x8c>
      return 0;
  10c4cc:	e3a03000 	mov	r3, #0
  10c4d0:	ea000055 	b	10c62c <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c4d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4d8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4dc:	e3a02000 	mov	r2, #0
  10c4e0:	e1a01003 	mov	r1, r3
  10c4e4:	e3a00004 	mov	r0, #4
  10c4e8:	eb003765 	bl	11a284 <pbuf_alloc>
  10c4ec:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c4f0:	e51b3008 	ldr	r3, [fp, #-8]
  10c4f4:	e3530000 	cmp	r3, #0
  10c4f8:	0a000009 	beq	10c524 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c4fc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c500:	e51b0008 	ldr	r0, [fp, #-8]
  10c504:	eb003bba 	bl	11b3f4 <pbuf_copy>
  10c508:	e1a03000 	mov	r3, r0
  10c50c:	e3530000 	cmp	r3, #0
  10c510:	0a000003 	beq	10c524 <recv_raw+0xdc>
        pbuf_free(q);
  10c514:	e51b0008 	ldr	r0, [fp, #-8]
  10c518:	eb003a60 	bl	11aea0 <pbuf_free>
        q = NULL;
  10c51c:	e3a03000 	mov	r3, #0
  10c520:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c524:	e51b3008 	ldr	r3, [fp, #-8]
  10c528:	e3530000 	cmp	r3, #0
  10c52c:	0a00003d 	beq	10c628 <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c530:	e3a02081 	mov	r2, #129	; 0x81
  10c534:	e3061690 	movw	r1, #26256	; 0x6690
  10c538:	e3401014 	movt	r1, #20
  10c53c:	e3a00007 	mov	r0, #7
  10c540:	eb0032e0 	bl	1190c8 <memp_malloc_fn>
  10c544:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c54c:	e3530000 	cmp	r3, #0
  10c550:	1a000003 	bne	10c564 <recv_raw+0x11c>
        pbuf_free(q);
  10c554:	e51b0008 	ldr	r0, [fp, #-8]
  10c558:	eb003a50 	bl	11aea0 <pbuf_free>
        return 0;
  10c55c:	e3a03000 	mov	r3, #0
  10c560:	ea000031 	b	10c62c <recv_raw+0x1e4>
      }

      buf->p = q;
  10c564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c568:	e51b2008 	ldr	r2, [fp, #-8]
  10c56c:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c570:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c574:	e51b2008 	ldr	r2, [fp, #-8]
  10c578:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c57c:	e30f3618 	movw	r3, #63000	; 0xf618
  10c580:	e3403014 	movt	r3, #20
  10c584:	e5932010 	ldr	r2, [r3, #16]
  10c588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c58c:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c590:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c594:	e5d33010 	ldrb	r3, [r3, #16]
  10c598:	e6ff2073 	uxth	r2, r3
  10c59c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c5a0:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c5a4:	e51b3008 	ldr	r3, [fp, #-8]
  10c5a8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c5ac:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c5b0:	e51b300c 	ldr	r3, [fp, #-12]
  10c5b4:	e2833014 	add	r3, r3, #20
  10c5b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c5bc:	e1a00003 	mov	r0, r3
  10c5c0:	ebfffa1f 	bl	10ae44 <sys_mbox_trypost>
  10c5c4:	e1a03000 	mov	r3, r0
  10c5c8:	e3530000 	cmp	r3, #0
  10c5cc:	0a000003 	beq	10c5e0 <recv_raw+0x198>
        netbuf_delete(buf);
  10c5d0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c5d4:	eb000e50 	bl	10ff1c <netbuf_delete>
        return 0;
  10c5d8:	e3a03000 	mov	r3, #0
  10c5dc:	ea000012 	b	10c62c <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c5e0:	ebffd715 	bl	10223c <rt_enter_critical>
  10c5e4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5e8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c5ec:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c5f0:	e0822003 	add	r2, r2, r3
  10c5f4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5f8:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c5fc:	ebffd714 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c600:	e51b300c 	ldr	r3, [fp, #-12]
  10c604:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c608:	e3530000 	cmp	r3, #0
  10c60c:	0a000005 	beq	10c628 <recv_raw+0x1e0>
  10c610:	e51b300c 	ldr	r3, [fp, #-12]
  10c614:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c618:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c61c:	e3a01000 	mov	r1, #0
  10c620:	e51b000c 	ldr	r0, [fp, #-12]
  10c624:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c628:	e3a03000 	mov	r3, #0
}
  10c62c:	e1a00003 	mov	r0, r3
  10c630:	e24bd004 	sub	sp, fp, #4
  10c634:	e8bd8800 	pop	{fp, pc}

0010c638 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c638:	e92d4800 	push	{fp, lr}
  10c63c:	e28db004 	add	fp, sp, #4
  10c640:	e24dd020 	sub	sp, sp, #32
  10c644:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c648:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c64c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c650:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c654:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c658:	e3530000 	cmp	r3, #0
  10c65c:	1a000006 	bne	10c67c <recv_udp+0x44>
  10c660:	e30606c0 	movw	r0, #26304	; 0x66c0
  10c664:	e3400014 	movt	r0, #20
  10c668:	ebffdaa9 	bl	103114 <rt_kprintf>
  10c66c:	e3a010b1 	mov	r1, #177	; 0xb1
  10c670:	e3060690 	movw	r0, #26256	; 0x6690
  10c674:	e3400014 	movt	r0, #20
  10c678:	ebfffa98 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c67c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c680:	e3530000 	cmp	r3, #0
  10c684:	1a000006 	bne	10c6a4 <recv_udp+0x6c>
  10c688:	e30606e4 	movw	r0, #26340	; 0x66e4
  10c68c:	e3400014 	movt	r0, #20
  10c690:	ebffda9f 	bl	103114 <rt_kprintf>
  10c694:	e3a010b2 	mov	r1, #178	; 0xb2
  10c698:	e3060690 	movw	r0, #26256	; 0x6690
  10c69c:	e3400014 	movt	r0, #20
  10c6a0:	ebfffa8e 	bl	10b0e0 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c6a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c6a8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c6ac:	e51b3008 	ldr	r3, [fp, #-8]
  10c6b0:	e5933008 	ldr	r3, [r3, #8]
  10c6b4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c6b8:	e1520003 	cmp	r2, r3
  10c6bc:	0a000006 	beq	10c6dc <recv_udp+0xa4>
  10c6c0:	e3060704 	movw	r0, #26372	; 0x6704
  10c6c4:	e3400014 	movt	r0, #20
  10c6c8:	ebffda91 	bl	103114 <rt_kprintf>
  10c6cc:	e3a010b4 	mov	r1, #180	; 0xb4
  10c6d0:	e3060690 	movw	r0, #26256	; 0x6690
  10c6d4:	e3400014 	movt	r0, #20
  10c6d8:	ebfffa80 	bl	10b0e0 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c6dc:	ebffd6d6 	bl	10223c <rt_enter_critical>
  10c6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10c6e4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c6e8:	e50b300c 	str	r3, [fp, #-12]
  10c6ec:	ebffd6d8 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c6f0:	e51b3008 	ldr	r3, [fp, #-8]
  10c6f4:	e3530000 	cmp	r3, #0
  10c6f8:	0a00000f 	beq	10c73c <recv_udp+0x104>
  10c6fc:	e51b3008 	ldr	r3, [fp, #-8]
  10c700:	e2833014 	add	r3, r3, #20
  10c704:	e1a00003 	mov	r0, r3
  10c708:	ebfffa2b 	bl	10afbc <sys_mbox_valid>
  10c70c:	e1a03000 	mov	r3, r0
  10c710:	e3530000 	cmp	r3, #0
  10c714:	0a000008 	beq	10c73c <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c71c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c720:	e1a02003 	mov	r2, r3
  10c724:	e51b300c 	ldr	r3, [fp, #-12]
  10c728:	e0822003 	add	r2, r2, r3
  10c72c:	e51b3008 	ldr	r3, [fp, #-8]
  10c730:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c734:	e1520003 	cmp	r2, r3
  10c738:	da000002 	ble	10c748 <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c73c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c740:	eb0039d6 	bl	11aea0 <pbuf_free>
    return;
  10c744:	ea00003d 	b	10c840 <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c748:	e3a020c1 	mov	r2, #193	; 0xc1
  10c74c:	e3061690 	movw	r1, #26256	; 0x6690
  10c750:	e3401014 	movt	r1, #20
  10c754:	e3a00007 	mov	r0, #7
  10c758:	eb00325a 	bl	1190c8 <memp_malloc_fn>
  10c75c:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c760:	e51b3010 	ldr	r3, [fp, #-16]
  10c764:	e3530000 	cmp	r3, #0
  10c768:	1a000002 	bne	10c778 <recv_udp+0x140>
    pbuf_free(p);
  10c76c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c770:	eb0039ca 	bl	11aea0 <pbuf_free>
    return;
  10c774:	ea000031 	b	10c840 <recv_udp+0x208>
  } else {
    buf->p = p;
  10c778:	e51b3010 	ldr	r3, [fp, #-16]
  10c77c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c780:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c784:	e51b3010 	ldr	r3, [fp, #-16]
  10c788:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c78c:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c790:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c794:	e3530000 	cmp	r3, #0
  10c798:	0a000002 	beq	10c7a8 <recv_udp+0x170>
  10c79c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c7a0:	e5933000 	ldr	r3, [r3]
  10c7a4:	ea000000 	b	10c7ac <recv_udp+0x174>
  10c7a8:	e3a03000 	mov	r3, #0
  10c7ac:	e51b2010 	ldr	r2, [fp, #-16]
  10c7b0:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c7b4:	e51b3010 	ldr	r3, [fp, #-16]
  10c7b8:	e1db20b4 	ldrh	r2, [fp, #4]
  10c7bc:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c7c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c7c4:	e1d330b8 	ldrh	r3, [r3, #8]
  10c7c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c7cc:	e51b3008 	ldr	r3, [fp, #-8]
  10c7d0:	e2833014 	add	r3, r3, #20
  10c7d4:	e51b1010 	ldr	r1, [fp, #-16]
  10c7d8:	e1a00003 	mov	r0, r3
  10c7dc:	ebfff998 	bl	10ae44 <sys_mbox_trypost>
  10c7e0:	e1a03000 	mov	r3, r0
  10c7e4:	e3530000 	cmp	r3, #0
  10c7e8:	0a000002 	beq	10c7f8 <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c7ec:	e51b0010 	ldr	r0, [fp, #-16]
  10c7f0:	eb000dc9 	bl	10ff1c <netbuf_delete>
    return;
  10c7f4:	ea000011 	b	10c840 <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c7f8:	ebffd68f 	bl	10223c <rt_enter_critical>
  10c7fc:	e51b3008 	ldr	r3, [fp, #-8]
  10c800:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c804:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c808:	e0822003 	add	r2, r2, r3
  10c80c:	e51b3008 	ldr	r3, [fp, #-8]
  10c810:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c814:	ebffd68e 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c818:	e51b3008 	ldr	r3, [fp, #-8]
  10c81c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c820:	e3530000 	cmp	r3, #0
  10c824:	0a000005 	beq	10c840 <recv_udp+0x208>
  10c828:	e51b3008 	ldr	r3, [fp, #-8]
  10c82c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c830:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c834:	e3a01000 	mov	r1, #0
  10c838:	e51b0008 	ldr	r0, [fp, #-8]
  10c83c:	e12fff33 	blx	r3
  }
}
  10c840:	e24bd004 	sub	sp, fp, #4
  10c844:	e8bd8800 	pop	{fp, pc}

0010c848 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c848:	e92d4800 	push	{fp, lr}
  10c84c:	e28db004 	add	fp, sp, #4
  10c850:	e24dd018 	sub	sp, sp, #24
  10c854:	e50b0010 	str	r0, [fp, #-16]
  10c858:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c85c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c860:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c864:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c868:	e3530000 	cmp	r3, #0
  10c86c:	1a000006 	bne	10c88c <recv_tcp+0x44>
  10c870:	e3060724 	movw	r0, #26404	; 0x6724
  10c874:	e3400014 	movt	r0, #20
  10c878:	ebffda25 	bl	103114 <rt_kprintf>
  10c87c:	e3a010f3 	mov	r1, #243	; 0xf3
  10c880:	e3060690 	movw	r0, #26256	; 0x6690
  10c884:	e3400014 	movt	r0, #20
  10c888:	ebfffa14 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c88c:	e51b3010 	ldr	r3, [fp, #-16]
  10c890:	e3530000 	cmp	r3, #0
  10c894:	1a000006 	bne	10c8b4 <recv_tcp+0x6c>
  10c898:	e3060748 	movw	r0, #26440	; 0x6748
  10c89c:	e3400014 	movt	r0, #20
  10c8a0:	ebffda1b 	bl	103114 <rt_kprintf>
  10c8a4:	e3a010f4 	mov	r1, #244	; 0xf4
  10c8a8:	e3060690 	movw	r0, #26256	; 0x6690
  10c8ac:	e3400014 	movt	r0, #20
  10c8b0:	ebfffa0a 	bl	10b0e0 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c8b4:	e51b3010 	ldr	r3, [fp, #-16]
  10c8b8:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c8bc:	e51b300c 	ldr	r3, [fp, #-12]
  10c8c0:	e3530000 	cmp	r3, #0
  10c8c4:	1a000001 	bne	10c8d0 <recv_tcp+0x88>
    return ERR_VAL;
  10c8c8:	e3e03005 	mvn	r3, #5
  10c8cc:	ea000053 	b	10ca20 <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c8d0:	e51b300c 	ldr	r3, [fp, #-12]
  10c8d4:	e5933008 	ldr	r3, [r3, #8]
  10c8d8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c8dc:	e1520003 	cmp	r2, r3
  10c8e0:	0a000006 	beq	10c900 <recv_tcp+0xb8>
  10c8e4:	e3060768 	movw	r0, #26472	; 0x6768
  10c8e8:	e3400014 	movt	r0, #20
  10c8ec:	ebffda08 	bl	103114 <rt_kprintf>
  10c8f0:	e3a010fa 	mov	r1, #250	; 0xfa
  10c8f4:	e3060690 	movw	r0, #26256	; 0x6690
  10c8f8:	e3400014 	movt	r0, #20
  10c8fc:	ebfff9f7 	bl	10b0e0 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c900:	e51b300c 	ldr	r3, [fp, #-12]
  10c904:	e2833014 	add	r3, r3, #20
  10c908:	e1a00003 	mov	r0, r3
  10c90c:	ebfff9aa 	bl	10afbc <sys_mbox_valid>
  10c910:	e1a03000 	mov	r3, r0
  10c914:	e3530000 	cmp	r3, #0
  10c918:	1a00000b 	bne	10c94c <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c91c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c920:	e3530000 	cmp	r3, #0
  10c924:	0a000006 	beq	10c944 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c928:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c92c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c930:	e1a01003 	mov	r1, r3
  10c934:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c938:	eb0045e0 	bl	11e0c0 <tcp_recved>
      pbuf_free(p);
  10c93c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c940:	eb003956 	bl	11aea0 <pbuf_free>
    }
    return ERR_OK;
  10c944:	e3a03000 	mov	r3, #0
  10c948:	ea000034 	b	10ca20 <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c94c:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c950:	e3530000 	cmp	r3, #0
  10c954:	0a00000b 	beq	10c988 <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c958:	e51b300c 	ldr	r3, [fp, #-12]
  10c95c:	e3530000 	cmp	r3, #0
  10c960:	0a000008 	beq	10c988 <recv_tcp+0x140>
  10c964:	ebffd634 	bl	10223c <rt_enter_critical>
  10c968:	e51b300c 	ldr	r3, [fp, #-12]
  10c96c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c970:	e373000c 	cmn	r3, #12
  10c974:	ba000002 	blt	10c984 <recv_tcp+0x13c>
  10c978:	e51b300c 	ldr	r3, [fp, #-12]
  10c97c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c980:	e5c3200c 	strb	r2, [r3, #12]
  10c984:	ebffd632 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c98c:	e3530000 	cmp	r3, #0
  10c990:	0a000003 	beq	10c9a4 <recv_tcp+0x15c>
    len = p->tot_len;
  10c994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c998:	e1d330b8 	ldrh	r3, [r3, #8]
  10c99c:	e14b30b6 	strh	r3, [fp, #-6]
  10c9a0:	ea000001 	b	10c9ac <recv_tcp+0x164>
  } else {
    len = 0;
  10c9a4:	e3a03000 	mov	r3, #0
  10c9a8:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c9ac:	e51b300c 	ldr	r3, [fp, #-12]
  10c9b0:	e2833014 	add	r3, r3, #20
  10c9b4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c9b8:	e1a00003 	mov	r0, r3
  10c9bc:	ebfff920 	bl	10ae44 <sys_mbox_trypost>
  10c9c0:	e1a03000 	mov	r3, r0
  10c9c4:	e3530000 	cmp	r3, #0
  10c9c8:	0a000001 	beq	10c9d4 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c9cc:	e3e03000 	mvn	r3, #0
  10c9d0:	ea000012 	b	10ca20 <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c9d4:	ebffd618 	bl	10223c <rt_enter_critical>
  10c9d8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9dc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c9e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c9e4:	e0822003 	add	r2, r2, r3
  10c9e8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9ec:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c9f0:	ebffd617 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c9f4:	e51b300c 	ldr	r3, [fp, #-12]
  10c9f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9fc:	e3530000 	cmp	r3, #0
  10ca00:	0a000005 	beq	10ca1c <recv_tcp+0x1d4>
  10ca04:	e51b300c 	ldr	r3, [fp, #-12]
  10ca08:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca0c:	e15b20b6 	ldrh	r2, [fp, #-6]
  10ca10:	e3a01000 	mov	r1, #0
  10ca14:	e51b000c 	ldr	r0, [fp, #-12]
  10ca18:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10ca1c:	e3a03000 	mov	r3, #0
}
  10ca20:	e1a00003 	mov	r0, r3
  10ca24:	e24bd004 	sub	sp, fp, #4
  10ca28:	e8bd8800 	pop	{fp, pc}

0010ca2c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10ca2c:	e92d4800 	push	{fp, lr}
  10ca30:	e28db004 	add	fp, sp, #4
  10ca34:	e24dd010 	sub	sp, sp, #16
  10ca38:	e50b0010 	str	r0, [fp, #-16]
  10ca3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10ca40:	e51b3010 	ldr	r3, [fp, #-16]
  10ca44:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10ca48:	e51b3008 	ldr	r3, [fp, #-8]
  10ca4c:	e3530000 	cmp	r3, #0
  10ca50:	1a000006 	bne	10ca70 <poll_tcp+0x44>
  10ca54:	e3060788 	movw	r0, #26504	; 0x6788
  10ca58:	e3400014 	movt	r0, #20
  10ca5c:	ebffd9ac 	bl	103114 <rt_kprintf>
  10ca60:	e3001132 	movw	r1, #306	; 0x132
  10ca64:	e3060690 	movw	r0, #26256	; 0x6690
  10ca68:	e3400014 	movt	r0, #20
  10ca6c:	ebfff99b 	bl	10b0e0 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10ca70:	e51b3008 	ldr	r3, [fp, #-8]
  10ca74:	e5933004 	ldr	r3, [r3, #4]
  10ca78:	e3530001 	cmp	r3, #1
  10ca7c:	1a000003 	bne	10ca90 <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10ca80:	e3a01001 	mov	r1, #1
  10ca84:	e51b0008 	ldr	r0, [fp, #-8]
  10ca88:	eb000924 	bl	10ef20 <lwip_netconn_do_writemore>
  10ca8c:	ea000006 	b	10caac <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10ca90:	e51b3008 	ldr	r3, [fp, #-8]
  10ca94:	e5933004 	ldr	r3, [r3, #4]
  10ca98:	e3530004 	cmp	r3, #4
  10ca9c:	1a000002 	bne	10caac <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10caa0:	e3a01001 	mov	r1, #1
  10caa4:	e51b0008 	ldr	r0, [fp, #-8]
  10caa8:	eb000394 	bl	10d900 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10caac:	e51b3008 	ldr	r3, [fp, #-8]
  10cab0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cab4:	e2033010 	and	r3, r3, #16
  10cab8:	e3530000 	cmp	r3, #0
  10cabc:	0a00001d 	beq	10cb38 <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cac0:	e51b3008 	ldr	r3, [fp, #-8]
  10cac4:	e5933008 	ldr	r3, [r3, #8]
  10cac8:	e3530000 	cmp	r3, #0
  10cacc:	0a000019 	beq	10cb38 <poll_tcp+0x10c>
  10cad0:	e51b3008 	ldr	r3, [fp, #-8]
  10cad4:	e5933008 	ldr	r3, [r3, #8]
  10cad8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10cadc:	e3530a01 	cmp	r3, #4096	; 0x1000
  10cae0:	9a000014 	bls	10cb38 <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cae4:	e51b3008 	ldr	r3, [fp, #-8]
  10cae8:	e5933008 	ldr	r3, [r3, #8]
  10caec:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10caf0:	e353000a 	cmp	r3, #10
  10caf4:	8a00000f 	bhi	10cb38 <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10caf8:	e51b3008 	ldr	r3, [fp, #-8]
  10cafc:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cb00:	e3c33010 	bic	r3, r3, #16
  10cb04:	e6ef2073 	uxtb	r2, r3
  10cb08:	e51b3008 	ldr	r3, [fp, #-8]
  10cb0c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cb10:	e51b3008 	ldr	r3, [fp, #-8]
  10cb14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cb18:	e3530000 	cmp	r3, #0
  10cb1c:	0a000005 	beq	10cb38 <poll_tcp+0x10c>
  10cb20:	e51b3008 	ldr	r3, [fp, #-8]
  10cb24:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cb28:	e3a02000 	mov	r2, #0
  10cb2c:	e3a01002 	mov	r1, #2
  10cb30:	e51b0008 	ldr	r0, [fp, #-8]
  10cb34:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cb38:	e3a03000 	mov	r3, #0
}
  10cb3c:	e1a00003 	mov	r0, r3
  10cb40:	e24bd004 	sub	sp, fp, #4
  10cb44:	e8bd8800 	pop	{fp, pc}

0010cb48 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10cb48:	e92d4800 	push	{fp, lr}
  10cb4c:	e28db004 	add	fp, sp, #4
  10cb50:	e24dd018 	sub	sp, sp, #24
  10cb54:	e50b0010 	str	r0, [fp, #-16]
  10cb58:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10cb5c:	e1a03002 	mov	r3, r2
  10cb60:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10cb64:	e51b3010 	ldr	r3, [fp, #-16]
  10cb68:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cb6c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb70:	e3530000 	cmp	r3, #0
  10cb74:	1a000006 	bne	10cb94 <sent_tcp+0x4c>
  10cb78:	e3060788 	movw	r0, #26504	; 0x6788
  10cb7c:	e3400014 	movt	r0, #20
  10cb80:	ebffd963 	bl	103114 <rt_kprintf>
  10cb84:	e300115b 	movw	r1, #347	; 0x15b
  10cb88:	e3060690 	movw	r0, #26256	; 0x6690
  10cb8c:	e3400014 	movt	r0, #20
  10cb90:	ebfff952 	bl	10b0e0 <sys_arch_assert>

  if (conn) {
  10cb94:	e51b3008 	ldr	r3, [fp, #-8]
  10cb98:	e3530000 	cmp	r3, #0
  10cb9c:	0a00002c 	beq	10cc54 <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10cba0:	e51b3008 	ldr	r3, [fp, #-8]
  10cba4:	e5933004 	ldr	r3, [r3, #4]
  10cba8:	e3530001 	cmp	r3, #1
  10cbac:	1a000003 	bne	10cbc0 <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10cbb0:	e3a01001 	mov	r1, #1
  10cbb4:	e51b0008 	ldr	r0, [fp, #-8]
  10cbb8:	eb0008d8 	bl	10ef20 <lwip_netconn_do_writemore>
  10cbbc:	ea000006 	b	10cbdc <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10cbc0:	e51b3008 	ldr	r3, [fp, #-8]
  10cbc4:	e5933004 	ldr	r3, [r3, #4]
  10cbc8:	e3530004 	cmp	r3, #4
  10cbcc:	1a000002 	bne	10cbdc <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cbd0:	e3a01001 	mov	r1, #1
  10cbd4:	e51b0008 	ldr	r0, [fp, #-8]
  10cbd8:	eb000348 	bl	10d900 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cbdc:	e51b3008 	ldr	r3, [fp, #-8]
  10cbe0:	e5933008 	ldr	r3, [r3, #8]
  10cbe4:	e3530000 	cmp	r3, #0
  10cbe8:	0a000019 	beq	10cc54 <sent_tcp+0x10c>
  10cbec:	e51b3008 	ldr	r3, [fp, #-8]
  10cbf0:	e5933008 	ldr	r3, [r3, #8]
  10cbf4:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10cbf8:	e3530a01 	cmp	r3, #4096	; 0x1000
  10cbfc:	9a000014 	bls	10cc54 <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cc00:	e51b3008 	ldr	r3, [fp, #-8]
  10cc04:	e5933008 	ldr	r3, [r3, #8]
  10cc08:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cc0c:	e353000a 	cmp	r3, #10
  10cc10:	8a00000f 	bhi	10cc54 <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10cc14:	e51b3008 	ldr	r3, [fp, #-8]
  10cc18:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cc1c:	e3c33010 	bic	r3, r3, #16
  10cc20:	e6ef2073 	uxtb	r2, r3
  10cc24:	e51b3008 	ldr	r3, [fp, #-8]
  10cc28:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10cc2c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc30:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc34:	e3530000 	cmp	r3, #0
  10cc38:	0a000005 	beq	10cc54 <sent_tcp+0x10c>
  10cc3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc44:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10cc48:	e3a01002 	mov	r1, #2
  10cc4c:	e51b0008 	ldr	r0, [fp, #-8]
  10cc50:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cc54:	e3a03000 	mov	r3, #0
}
  10cc58:	e1a00003 	mov	r0, r3
  10cc5c:	e24bd004 	sub	sp, fp, #4
  10cc60:	e8bd8800 	pop	{fp, pc}

0010cc64 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10cc64:	e92d4800 	push	{fp, lr}
  10cc68:	e28db004 	add	fp, sp, #4
  10cc6c:	e24dd018 	sub	sp, sp, #24
  10cc70:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cc74:	e1a03001 	mov	r3, r1
  10cc78:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10cc7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cc80:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cc84:	e51b3008 	ldr	r3, [fp, #-8]
  10cc88:	e3530000 	cmp	r3, #0
  10cc8c:	1a000006 	bne	10ccac <err_tcp+0x48>
  10cc90:	e3060788 	movw	r0, #26504	; 0x6788
  10cc94:	e3400014 	movt	r0, #20
  10cc98:	ebffd91d 	bl	103114 <rt_kprintf>
  10cc9c:	e300117e 	movw	r1, #382	; 0x17e
  10cca0:	e3060690 	movw	r0, #26256	; 0x6690
  10cca4:	e3400014 	movt	r0, #20
  10cca8:	ebfff90c 	bl	10b0e0 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10ccac:	e51b3008 	ldr	r3, [fp, #-8]
  10ccb0:	e3a02000 	mov	r2, #0
  10ccb4:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10ccb8:	e51b3008 	ldr	r3, [fp, #-8]
  10ccbc:	e5933004 	ldr	r3, [r3, #4]
  10ccc0:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10ccc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ccc8:	e3a02000 	mov	r2, #0
  10cccc:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10ccd0:	e51b300c 	ldr	r3, [fp, #-12]
  10ccd4:	e3530004 	cmp	r3, #4
  10ccd8:	1a00000e 	bne	10cd18 <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10ccdc:	e3a03000 	mov	r3, #0
  10cce0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10cce4:	e51b3008 	ldr	r3, [fp, #-8]
  10cce8:	e3530000 	cmp	r3, #0
  10ccec:	0a00000e 	beq	10cd2c <err_tcp+0xc8>
  10ccf0:	ebffd551 	bl	10223c <rt_enter_critical>
  10ccf4:	e51b3008 	ldr	r3, [fp, #-8]
  10ccf8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ccfc:	e373000c 	cmn	r3, #12
  10cd00:	ba000002 	blt	10cd10 <err_tcp+0xac>
  10cd04:	e51b3008 	ldr	r3, [fp, #-8]
  10cd08:	e3a02000 	mov	r2, #0
  10cd0c:	e5c3200c 	strb	r2, [r3, #12]
  10cd10:	ebffd54f 	bl	102254 <rt_exit_critical>
  10cd14:	ea000004 	b	10cd2c <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10cd18:	ebffd547 	bl	10223c <rt_enter_critical>
  10cd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd20:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cd24:	e5c3200c 	strb	r2, [r3, #12]
  10cd28:	ebffd549 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10cd2c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd30:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd34:	e3530000 	cmp	r3, #0
  10cd38:	0a000005 	beq	10cd54 <err_tcp+0xf0>
  10cd3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd44:	e3a02000 	mov	r2, #0
  10cd48:	e3a01004 	mov	r1, #4
  10cd4c:	e51b0008 	ldr	r0, [fp, #-8]
  10cd50:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd54:	e51b3008 	ldr	r3, [fp, #-8]
  10cd58:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd5c:	e3530000 	cmp	r3, #0
  10cd60:	0a000005 	beq	10cd7c <err_tcp+0x118>
  10cd64:	e51b3008 	ldr	r3, [fp, #-8]
  10cd68:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd6c:	e3a02000 	mov	r2, #0
  10cd70:	e3a01000 	mov	r1, #0
  10cd74:	e51b0008 	ldr	r0, [fp, #-8]
  10cd78:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cd7c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd80:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd84:	e3530000 	cmp	r3, #0
  10cd88:	0a000005 	beq	10cda4 <err_tcp+0x140>
  10cd8c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd90:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd94:	e3a02000 	mov	r2, #0
  10cd98:	e3a01002 	mov	r1, #2
  10cd9c:	e51b0008 	ldr	r0, [fp, #-8]
  10cda0:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10cda4:	e51b3008 	ldr	r3, [fp, #-8]
  10cda8:	e2833014 	add	r3, r3, #20
  10cdac:	e1a00003 	mov	r0, r3
  10cdb0:	ebfff881 	bl	10afbc <sys_mbox_valid>
  10cdb4:	e1a03000 	mov	r3, r0
  10cdb8:	e3530000 	cmp	r3, #0
  10cdbc:	0a000004 	beq	10cdd4 <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10cdc0:	e51b3008 	ldr	r3, [fp, #-8]
  10cdc4:	e2833014 	add	r3, r3, #20
  10cdc8:	e3a01000 	mov	r1, #0
  10cdcc:	e1a00003 	mov	r0, r3
  10cdd0:	ebfff81b 	bl	10ae44 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10cdd4:	e51b3008 	ldr	r3, [fp, #-8]
  10cdd8:	e2833018 	add	r3, r3, #24
  10cddc:	e1a00003 	mov	r0, r3
  10cde0:	ebfff875 	bl	10afbc <sys_mbox_valid>
  10cde4:	e1a03000 	mov	r3, r0
  10cde8:	e3530000 	cmp	r3, #0
  10cdec:	0a000004 	beq	10ce04 <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10cdf0:	e51b3008 	ldr	r3, [fp, #-8]
  10cdf4:	e2833018 	add	r3, r3, #24
  10cdf8:	e3a01000 	mov	r1, #0
  10cdfc:	e1a00003 	mov	r0, r3
  10ce00:	ebfff80f 	bl	10ae44 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10ce04:	e51b300c 	ldr	r3, [fp, #-12]
  10ce08:	e3530001 	cmp	r3, #1
  10ce0c:	0a000005 	beq	10ce28 <err_tcp+0x1c4>
  10ce10:	e51b300c 	ldr	r3, [fp, #-12]
  10ce14:	e3530004 	cmp	r3, #4
  10ce18:	0a000002 	beq	10ce28 <err_tcp+0x1c4>
  10ce1c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce20:	e3530003 	cmp	r3, #3
  10ce24:	1a000042 	bne	10cf34 <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10ce28:	e51b3008 	ldr	r3, [fp, #-8]
  10ce2c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce30:	e2033004 	and	r3, r3, #4
  10ce34:	e3530000 	cmp	r3, #0
  10ce38:	13a03001 	movne	r3, #1
  10ce3c:	03a03000 	moveq	r3, #0
  10ce40:	e6ef3073 	uxtb	r3, r3
  10ce44:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10ce48:	e51b3008 	ldr	r3, [fp, #-8]
  10ce4c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce50:	e3c33004 	bic	r3, r3, #4
  10ce54:	e6ef2073 	uxtb	r2, r3
  10ce58:	e51b3008 	ldr	r3, [fp, #-8]
  10ce5c:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10ce60:	e51b3010 	ldr	r3, [fp, #-16]
  10ce64:	e3530000 	cmp	r3, #0
  10ce68:	1a00003d 	bne	10cf64 <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ce6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce70:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ce74:	e3530000 	cmp	r3, #0
  10ce78:	1a000006 	bne	10ce98 <err_tcp+0x234>
  10ce7c:	e3060798 	movw	r0, #26520	; 0x6798
  10ce80:	e3400014 	movt	r0, #20
  10ce84:	ebffd8a2 	bl	103114 <rt_kprintf>
  10ce88:	e30011ad 	movw	r1, #429	; 0x1ad
  10ce8c:	e3060690 	movw	r0, #26256	; 0x6690
  10ce90:	e3400014 	movt	r0, #20
  10ce94:	ebfff891 	bl	10b0e0 <sys_arch_assert>
      conn->current_msg->err = err;
  10ce98:	e51b3008 	ldr	r3, [fp, #-8]
  10ce9c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cea0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cea4:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10cea8:	e51b3008 	ldr	r3, [fp, #-8]
  10ceac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ceb0:	e5933000 	ldr	r3, [r3]
  10ceb4:	e2833010 	add	r3, r3, #16
  10ceb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10cebc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cec0:	ebfff65a 	bl	10a830 <sys_sem_valid>
  10cec4:	e1a03000 	mov	r3, r0
  10cec8:	e3530000 	cmp	r3, #0
  10cecc:	1a000006 	bne	10ceec <err_tcp+0x288>
  10ced0:	e30607b4 	movw	r0, #26548	; 0x67b4
  10ced4:	e3400014 	movt	r0, #20
  10ced8:	ebffd88d 	bl	103114 <rt_kprintf>
  10cedc:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10cee0:	e3060690 	movw	r0, #26256	; 0x6690
  10cee4:	e3400014 	movt	r0, #20
  10cee8:	ebfff87c 	bl	10b0e0 <sys_arch_assert>
      conn->current_msg = NULL;
  10ceec:	e51b3008 	ldr	r3, [fp, #-8]
  10cef0:	e3a02000 	mov	r2, #0
  10cef4:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cef8:	e51b3008 	ldr	r3, [fp, #-8]
  10cefc:	e3530000 	cmp	r3, #0
  10cf00:	0a000008 	beq	10cf28 <err_tcp+0x2c4>
  10cf04:	ebffd4cc 	bl	10223c <rt_enter_critical>
  10cf08:	e51b3008 	ldr	r3, [fp, #-8]
  10cf0c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cf10:	e373000c 	cmn	r3, #12
  10cf14:	ba000002 	blt	10cf24 <err_tcp+0x2c0>
  10cf18:	e51b3008 	ldr	r3, [fp, #-8]
  10cf1c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cf20:	e5c3200c 	strb	r2, [r3, #12]
  10cf24:	ebffd4ca 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cf28:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cf2c:	ebfff601 	bl	10a738 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cf30:	ea00000b 	b	10cf64 <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cf34:	e51b3008 	ldr	r3, [fp, #-8]
  10cf38:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cf3c:	e3530000 	cmp	r3, #0
  10cf40:	0a000008 	beq	10cf68 <err_tcp+0x304>
  10cf44:	e30607d0 	movw	r0, #26576	; 0x67d0
  10cf48:	e3400014 	movt	r0, #20
  10cf4c:	ebffd870 	bl	103114 <rt_kprintf>
  10cf50:	e30011b7 	movw	r1, #439	; 0x1b7
  10cf54:	e3060690 	movw	r0, #26256	; 0x6690
  10cf58:	e3400014 	movt	r0, #20
  10cf5c:	ebfff85f 	bl	10b0e0 <sys_arch_assert>
  }
}
  10cf60:	ea000000 	b	10cf68 <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cf64:	e320f000 	nop	{0}
}
  10cf68:	e320f000 	nop	{0}
  10cf6c:	e24bd004 	sub	sp, fp, #4
  10cf70:	e8bd8800 	pop	{fp, pc}

0010cf74 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cf74:	e92d4800 	push	{fp, lr}
  10cf78:	e28db004 	add	fp, sp, #4
  10cf7c:	e24dd010 	sub	sp, sp, #16
  10cf80:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cf84:	e51b3010 	ldr	r3, [fp, #-16]
  10cf88:	e5933008 	ldr	r3, [r3, #8]
  10cf8c:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10cf90:	e51b1010 	ldr	r1, [fp, #-16]
  10cf94:	e51b0008 	ldr	r0, [fp, #-8]
  10cf98:	eb004aef 	bl	11fb5c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10cf9c:	e30c1848 	movw	r1, #51272	; 0xc848
  10cfa0:	e3401010 	movt	r1, #16
  10cfa4:	e51b0008 	ldr	r0, [fp, #-8]
  10cfa8:	eb004afa 	bl	11fb98 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10cfac:	e30c1b48 	movw	r1, #52040	; 0xcb48
  10cfb0:	e3401010 	movt	r1, #16
  10cfb4:	e51b0008 	ldr	r0, [fp, #-8]
  10cfb8:	eb004b0f 	bl	11fbfc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cfbc:	e3a02002 	mov	r2, #2
  10cfc0:	e30c1a2c 	movw	r1, #51756	; 0xca2c
  10cfc4:	e3401010 	movt	r1, #16
  10cfc8:	e51b0008 	ldr	r0, [fp, #-8]
  10cfcc:	eb004b51 	bl	11fd18 <tcp_poll>
  tcp_err(pcb, err_tcp);
  10cfd0:	e30c1c64 	movw	r1, #52324	; 0xcc64
  10cfd4:	e3401010 	movt	r1, #16
  10cfd8:	e51b0008 	ldr	r0, [fp, #-8]
  10cfdc:	eb004b1f 	bl	11fc60 <tcp_err>
}
  10cfe0:	e320f000 	nop	{0}
  10cfe4:	e24bd004 	sub	sp, fp, #4
  10cfe8:	e8bd8800 	pop	{fp, pc}

0010cfec <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10cfec:	e92d4800 	push	{fp, lr}
  10cff0:	e28db004 	add	fp, sp, #4
  10cff4:	e24dd020 	sub	sp, sp, #32
  10cff8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cffc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10d000:	e1a03002 	mov	r3, r2
  10d004:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10d008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d00c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10d010:	e51b3008 	ldr	r3, [fp, #-8]
  10d014:	e3530000 	cmp	r3, #0
  10d018:	1a000001 	bne	10d024 <accept_function+0x38>
    return ERR_VAL;
  10d01c:	e3e03005 	mvn	r3, #5
  10d020:	ea00007d 	b	10d21c <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10d024:	e51b3008 	ldr	r3, [fp, #-8]
  10d028:	e2833018 	add	r3, r3, #24
  10d02c:	e1a00003 	mov	r0, r3
  10d030:	ebfff7e1 	bl	10afbc <sys_mbox_valid>
  10d034:	e1a03000 	mov	r3, r0
  10d038:	e3530000 	cmp	r3, #0
  10d03c:	1a000001 	bne	10d048 <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10d040:	e3e03005 	mvn	r3, #5
  10d044:	ea000074 	b	10d21c <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10d048:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10d04c:	e3530000 	cmp	r3, #0
  10d050:	1a000014 	bne	10d0a8 <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d054:	e51b3008 	ldr	r3, [fp, #-8]
  10d058:	e2833018 	add	r3, r3, #24
  10d05c:	e30f15ac 	movw	r1, #62892	; 0xf5ac
  10d060:	e3401014 	movt	r1, #20
  10d064:	e1a00003 	mov	r0, r3
  10d068:	ebfff775 	bl	10ae44 <sys_mbox_trypost>
  10d06c:	e1a03000 	mov	r3, r0
  10d070:	e3530000 	cmp	r3, #0
  10d074:	1a000009 	bne	10d0a0 <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d078:	e51b3008 	ldr	r3, [fp, #-8]
  10d07c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d080:	e3530000 	cmp	r3, #0
  10d084:	0a000005 	beq	10d0a0 <accept_function+0xb4>
  10d088:	e51b3008 	ldr	r3, [fp, #-8]
  10d08c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d090:	e3a02000 	mov	r2, #0
  10d094:	e3a01000 	mov	r1, #0
  10d098:	e51b0008 	ldr	r0, [fp, #-8]
  10d09c:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10d0a0:	e3e03005 	mvn	r3, #5
  10d0a4:	ea00005c 	b	10d21c <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10d0a8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0ac:	e5932000 	ldr	r2, [r3]
  10d0b0:	e51b3008 	ldr	r3, [fp, #-8]
  10d0b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d0b8:	e1a01003 	mov	r1, r3
  10d0bc:	e1a00002 	mov	r0, r2
  10d0c0:	eb0000f7 	bl	10d4a4 <netconn_alloc>
  10d0c4:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10d0c8:	e51b300c 	ldr	r3, [fp, #-12]
  10d0cc:	e3530000 	cmp	r3, #0
  10d0d0:	1a000014 	bne	10d128 <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d0d4:	e51b3008 	ldr	r3, [fp, #-8]
  10d0d8:	e2833018 	add	r3, r3, #24
  10d0dc:	e30f15ac 	movw	r1, #62892	; 0xf5ac
  10d0e0:	e3401014 	movt	r1, #20
  10d0e4:	e1a00003 	mov	r0, r3
  10d0e8:	ebfff755 	bl	10ae44 <sys_mbox_trypost>
  10d0ec:	e1a03000 	mov	r3, r0
  10d0f0:	e3530000 	cmp	r3, #0
  10d0f4:	1a000009 	bne	10d120 <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d0f8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0fc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d100:	e3530000 	cmp	r3, #0
  10d104:	0a000005 	beq	10d120 <accept_function+0x134>
  10d108:	e51b3008 	ldr	r3, [fp, #-8]
  10d10c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d110:	e3a02000 	mov	r2, #0
  10d114:	e3a01000 	mov	r1, #0
  10d118:	e51b0008 	ldr	r0, [fp, #-8]
  10d11c:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10d120:	e3e03000 	mvn	r3, #0
  10d124:	ea00003c 	b	10d21c <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10d128:	e51b300c 	ldr	r3, [fp, #-12]
  10d12c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10d130:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10d134:	e51b000c 	ldr	r0, [fp, #-12]
  10d138:	ebffff8d 	bl	10cf74 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10d13c:	e51b300c 	ldr	r3, [fp, #-12]
  10d140:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10d144:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10d148:	e51b3008 	ldr	r3, [fp, #-8]
  10d14c:	e2833018 	add	r3, r3, #24
  10d150:	e51b100c 	ldr	r1, [fp, #-12]
  10d154:	e1a00003 	mov	r0, r3
  10d158:	ebfff739 	bl	10ae44 <sys_mbox_trypost>
  10d15c:	e1a03000 	mov	r3, r0
  10d160:	e3530000 	cmp	r3, #0
  10d164:	0a000021 	beq	10d1f0 <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10d168:	e51b300c 	ldr	r3, [fp, #-12]
  10d16c:	e5933008 	ldr	r3, [r3, #8]
  10d170:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10d174:	e3a01000 	mov	r1, #0
  10d178:	e51b0010 	ldr	r0, [fp, #-16]
  10d17c:	eb004a76 	bl	11fb5c <tcp_arg>
    tcp_recv(pcb, NULL);
  10d180:	e3a01000 	mov	r1, #0
  10d184:	e51b0010 	ldr	r0, [fp, #-16]
  10d188:	eb004a82 	bl	11fb98 <tcp_recv>
    tcp_sent(pcb, NULL);
  10d18c:	e3a01000 	mov	r1, #0
  10d190:	e51b0010 	ldr	r0, [fp, #-16]
  10d194:	eb004a98 	bl	11fbfc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10d198:	e3a02000 	mov	r2, #0
  10d19c:	e3a01000 	mov	r1, #0
  10d1a0:	e51b0010 	ldr	r0, [fp, #-16]
  10d1a4:	eb004adb 	bl	11fd18 <tcp_poll>
    tcp_err(pcb, NULL);
  10d1a8:	e3a01000 	mov	r1, #0
  10d1ac:	e51b0010 	ldr	r0, [fp, #-16]
  10d1b0:	eb004aaa 	bl	11fc60 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10d1b4:	e51b300c 	ldr	r3, [fp, #-12]
  10d1b8:	e3a02000 	mov	r2, #0
  10d1bc:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10d1c0:	e51b300c 	ldr	r3, [fp, #-12]
  10d1c4:	e2833014 	add	r3, r3, #20
  10d1c8:	e1a00003 	mov	r0, r3
  10d1cc:	ebfff640 	bl	10aad4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10d1d0:	e51b300c 	ldr	r3, [fp, #-12]
  10d1d4:	e2833014 	add	r3, r3, #20
  10d1d8:	e1a00003 	mov	r0, r3
  10d1dc:	ebfff780 	bl	10afe4 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10d1e0:	e51b000c 	ldr	r0, [fp, #-12]
  10d1e4:	eb000122 	bl	10d674 <netconn_free>
    return ERR_MEM;
  10d1e8:	e3e03000 	mvn	r3, #0
  10d1ec:	ea00000a 	b	10d21c <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d1f0:	e51b3008 	ldr	r3, [fp, #-8]
  10d1f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d1f8:	e3530000 	cmp	r3, #0
  10d1fc:	0a000005 	beq	10d218 <accept_function+0x22c>
  10d200:	e51b3008 	ldr	r3, [fp, #-8]
  10d204:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d208:	e3a02000 	mov	r2, #0
  10d20c:	e3a01000 	mov	r1, #0
  10d210:	e51b0008 	ldr	r0, [fp, #-8]
  10d214:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10d218:	e3a03000 	mov	r3, #0
}
  10d21c:	e1a00003 	mov	r0, r3
  10d220:	e24bd004 	sub	sp, fp, #4
  10d224:	e8bd8800 	pop	{fp, pc}

0010d228 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10d228:	e92d4810 	push	{r4, fp, lr}
  10d22c:	e28db008 	add	fp, sp, #8
  10d230:	e24dd014 	sub	sp, sp, #20
  10d234:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10d238:	e3a03000 	mov	r3, #0
  10d23c:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10d240:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d244:	e5933000 	ldr	r3, [r3]
  10d248:	e5933008 	ldr	r3, [r3, #8]
  10d24c:	e3530000 	cmp	r3, #0
  10d250:	0a000006 	beq	10d270 <pcb_new+0x48>
  10d254:	e30607ec 	movw	r0, #26604	; 0x67ec
  10d258:	e3400014 	movt	r0, #20
  10d25c:	ebffd7ac 	bl	103114 <rt_kprintf>
  10d260:	e3001226 	movw	r1, #550	; 0x226
  10d264:	e3060690 	movw	r0, #26256	; 0x6690
  10d268:	e3400014 	movt	r0, #20
  10d26c:	ebfff79b 	bl	10b0e0 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10d270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d274:	e5933000 	ldr	r3, [r3]
  10d278:	e5933000 	ldr	r3, [r3]
  10d27c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d280:	e3530020 	cmp	r3, #32
  10d284:	0a00001d 	beq	10d300 <pcb_new+0xd8>
  10d288:	e3530040 	cmp	r3, #64	; 0x40
  10d28c:	0a000002 	beq	10d29c <pcb_new+0x74>
  10d290:	e3530010 	cmp	r3, #16
  10d294:	0a00003a 	beq	10d384 <pcb_new+0x15c>
  10d298:	ea00004b 	b	10d3cc <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10d29c:	e51b3010 	ldr	r3, [fp, #-16]
  10d2a0:	e6ef2073 	uxtb	r2, r3
  10d2a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2a8:	e5d31008 	ldrb	r1, [r3, #8]
  10d2ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2b0:	e5934000 	ldr	r4, [r3]
  10d2b4:	e1a00002 	mov	r0, r2
  10d2b8:	eb003d6a 	bl	11c868 <raw_new_ip_type>
  10d2bc:	e1a03000 	mov	r3, r0
  10d2c0:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10d2c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2c8:	e5933000 	ldr	r3, [r3]
  10d2cc:	e5933008 	ldr	r3, [r3, #8]
  10d2d0:	e3530000 	cmp	r3, #0
  10d2d4:	0a000040 	beq	10d3dc <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10d2d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2dc:	e5933000 	ldr	r3, [r3]
  10d2e0:	e5930008 	ldr	r0, [r3, #8]
  10d2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2e8:	e5933000 	ldr	r3, [r3]
  10d2ec:	e1a02003 	mov	r2, r3
  10d2f0:	e30c1448 	movw	r1, #50248	; 0xc448
  10d2f4:	e3401010 	movt	r1, #16
  10d2f8:	eb003c57 	bl	11c45c <raw_recv>
    }
    break;
  10d2fc:	ea000036 	b	10d3dc <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10d300:	e51b3010 	ldr	r3, [fp, #-16]
  10d304:	e6ef2073 	uxtb	r2, r3
  10d308:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d30c:	e5934000 	ldr	r4, [r3]
  10d310:	e1a00002 	mov	r0, r2
  10d314:	eb006dff 	bl	128b18 <udp_new_ip_type>
  10d318:	e1a03000 	mov	r3, r0
  10d31c:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10d320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d324:	e5933000 	ldr	r3, [r3]
  10d328:	e5933008 	ldr	r3, [r3, #8]
  10d32c:	e3530000 	cmp	r3, #0
  10d330:	0a00002b 	beq	10d3e4 <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10d334:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d338:	e5933000 	ldr	r3, [r3]
  10d33c:	e5933000 	ldr	r3, [r3]
  10d340:	e3530022 	cmp	r3, #34	; 0x22
  10d344:	1a000004 	bne	10d35c <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10d348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d34c:	e5933000 	ldr	r3, [r3]
  10d350:	e5933008 	ldr	r3, [r3, #8]
  10d354:	e3a02001 	mov	r2, #1
  10d358:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d35c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d360:	e5933000 	ldr	r3, [r3]
  10d364:	e5930008 	ldr	r0, [r3, #8]
  10d368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d36c:	e5933000 	ldr	r3, [r3]
  10d370:	e1a02003 	mov	r2, r3
  10d374:	e30c1638 	movw	r1, #50744	; 0xc638
  10d378:	e3401010 	movt	r1, #16
  10d37c:	eb006d8a 	bl	1289ac <udp_recv>
    }
    break;
  10d380:	ea000017 	b	10d3e4 <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d384:	e51b3010 	ldr	r3, [fp, #-16]
  10d388:	e6ef2073 	uxtb	r2, r3
  10d38c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d390:	e5934000 	ldr	r4, [r3]
  10d394:	e1a00002 	mov	r0, r2
  10d398:	eb0049e3 	bl	11fb2c <tcp_new_ip_type>
  10d39c:	e1a03000 	mov	r3, r0
  10d3a0:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d3a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3a8:	e5933000 	ldr	r3, [r3]
  10d3ac:	e5933008 	ldr	r3, [r3, #8]
  10d3b0:	e3530000 	cmp	r3, #0
  10d3b4:	0a00000c 	beq	10d3ec <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d3b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3bc:	e5933000 	ldr	r3, [r3]
  10d3c0:	e1a00003 	mov	r0, r3
  10d3c4:	ebfffeea 	bl	10cf74 <setup_tcp>
    }
    break;
  10d3c8:	ea000007 	b	10d3ec <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d3cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3d0:	e3e02005 	mvn	r2, #5
  10d3d4:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d3d8:	ea00000c 	b	10d410 <pcb_new+0x1e8>
    break;
  10d3dc:	e320f000 	nop	{0}
  10d3e0:	ea000002 	b	10d3f0 <pcb_new+0x1c8>
    break;
  10d3e4:	e320f000 	nop	{0}
  10d3e8:	ea000000 	b	10d3f0 <pcb_new+0x1c8>
    break;
  10d3ec:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d3f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3f4:	e5933000 	ldr	r3, [r3]
  10d3f8:	e5933008 	ldr	r3, [r3, #8]
  10d3fc:	e3530000 	cmp	r3, #0
  10d400:	1a000002 	bne	10d410 <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d408:	e3e02000 	mvn	r2, #0
  10d40c:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d410:	e24bd008 	sub	sp, fp, #8
  10d414:	e8bd8810 	pop	{r4, fp, pc}

0010d418 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d418:	e92d4800 	push	{fp, lr}
  10d41c:	e28db004 	add	fp, sp, #4
  10d420:	e24dd010 	sub	sp, sp, #16
  10d424:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d428:	e51b3010 	ldr	r3, [fp, #-16]
  10d42c:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d430:	e51b3008 	ldr	r3, [fp, #-8]
  10d434:	e3a02000 	mov	r2, #0
  10d438:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d43c:	e51b3008 	ldr	r3, [fp, #-8]
  10d440:	e5933000 	ldr	r3, [r3]
  10d444:	e5933008 	ldr	r3, [r3, #8]
  10d448:	e3530000 	cmp	r3, #0
  10d44c:	1a000001 	bne	10d458 <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d450:	e51b0008 	ldr	r0, [fp, #-8]
  10d454:	ebffff73 	bl	10d228 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d458:	e51b3008 	ldr	r3, [fp, #-8]
  10d45c:	e5933000 	ldr	r3, [r3]
  10d460:	e3530000 	cmp	r3, #0
  10d464:	0a00000b 	beq	10d498 <lwip_netconn_do_newconn+0x80>
  10d468:	ebffd373 	bl	10223c <rt_enter_critical>
  10d46c:	e51b3008 	ldr	r3, [fp, #-8]
  10d470:	e5933000 	ldr	r3, [r3]
  10d474:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d478:	e373000c 	cmn	r3, #12
  10d47c:	ba000004 	blt	10d494 <lwip_netconn_do_newconn+0x7c>
  10d480:	e51b3008 	ldr	r3, [fp, #-8]
  10d484:	e5933000 	ldr	r3, [r3]
  10d488:	e51b2008 	ldr	r2, [fp, #-8]
  10d48c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d490:	e5c3200c 	strb	r2, [r3, #12]
  10d494:	ebffd36e 	bl	102254 <rt_exit_critical>
}
  10d498:	e320f000 	nop	{0}
  10d49c:	e24bd004 	sub	sp, fp, #4
  10d4a0:	e8bd8800 	pop	{fp, pc}

0010d4a4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d4a4:	e92d4800 	push	{fp, lr}
  10d4a8:	e28db004 	add	fp, sp, #4
  10d4ac:	e24dd010 	sub	sp, sp, #16
  10d4b0:	e50b0010 	str	r0, [fp, #-16]
  10d4b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d4b8:	e3002287 	movw	r2, #647	; 0x287
  10d4bc:	e3061690 	movw	r1, #26256	; 0x6690
  10d4c0:	e3401014 	movt	r1, #20
  10d4c4:	e3a00008 	mov	r0, #8
  10d4c8:	eb002efe 	bl	1190c8 <memp_malloc_fn>
  10d4cc:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d4d0:	e51b300c 	ldr	r3, [fp, #-12]
  10d4d4:	e3530000 	cmp	r3, #0
  10d4d8:	1a000001 	bne	10d4e4 <netconn_alloc+0x40>
    return NULL;
  10d4dc:	e3a03000 	mov	r3, #0
  10d4e0:	ea000060 	b	10d668 <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d4e4:	e51b300c 	ldr	r3, [fp, #-12]
  10d4e8:	e3a02000 	mov	r2, #0
  10d4ec:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d4f0:	e51b300c 	ldr	r3, [fp, #-12]
  10d4f4:	e51b2010 	ldr	r2, [fp, #-16]
  10d4f8:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d4fc:	e51b300c 	ldr	r3, [fp, #-12]
  10d500:	e3a02000 	mov	r2, #0
  10d504:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d508:	e51b3010 	ldr	r3, [fp, #-16]
  10d50c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d510:	e3530020 	cmp	r3, #32
  10d514:	0a000007 	beq	10d538 <netconn_alloc+0x94>
  10d518:	e3530040 	cmp	r3, #64	; 0x40
  10d51c:	0a000002 	beq	10d52c <netconn_alloc+0x88>
  10d520:	e3530010 	cmp	r3, #16
  10d524:	0a000006 	beq	10d544 <netconn_alloc+0xa0>
  10d528:	ea000008 	b	10d550 <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d52c:	e3a03001 	mov	r3, #1
  10d530:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d534:	ea00000d 	b	10d570 <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d538:	e3a03040 	mov	r3, #64	; 0x40
  10d53c:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d540:	ea00000a 	b	10d570 <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d544:	e3a03040 	mov	r3, #64	; 0x40
  10d548:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d54c:	ea000007 	b	10d570 <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d550:	e306080c 	movw	r0, #26636	; 0x680c
  10d554:	e3400014 	movt	r0, #20
  10d558:	ebffd6ed 	bl	103114 <rt_kprintf>
  10d55c:	e30012a2 	movw	r1, #674	; 0x2a2
  10d560:	e3060690 	movw	r0, #26256	; 0x6690
  10d564:	e3400014 	movt	r0, #20
  10d568:	ebfff6dc 	bl	10b0e0 <sys_arch_assert>
    goto free_and_return;
  10d56c:	ea000039 	b	10d658 <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d570:	e51b300c 	ldr	r3, [fp, #-12]
  10d574:	e2833014 	add	r3, r3, #20
  10d578:	e51b1008 	ldr	r1, [fp, #-8]
  10d57c:	e1a00003 	mov	r0, r3
  10d580:	ebfff51e 	bl	10aa00 <sys_mbox_new>
  10d584:	e1a03000 	mov	r3, r0
  10d588:	e3530000 	cmp	r3, #0
  10d58c:	1a000030 	bne	10d654 <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d590:	e51b300c 	ldr	r3, [fp, #-12]
  10d594:	e2833010 	add	r3, r3, #16
  10d598:	e3a01000 	mov	r1, #0
  10d59c:	e1a00003 	mov	r0, r3
  10d5a0:	ebfff42e 	bl	10a660 <sys_sem_new>
  10d5a4:	e1a03000 	mov	r3, r0
  10d5a8:	e3530000 	cmp	r3, #0
  10d5ac:	0a000004 	beq	10d5c4 <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d5b0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5b4:	e2833014 	add	r3, r3, #20
  10d5b8:	e1a00003 	mov	r0, r3
  10d5bc:	ebfff544 	bl	10aad4 <sys_mbox_free>
    goto free_and_return;
  10d5c0:	ea000024 	b	10d658 <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d5c4:	e51b300c 	ldr	r3, [fp, #-12]
  10d5c8:	e2833018 	add	r3, r3, #24
  10d5cc:	e1a00003 	mov	r0, r3
  10d5d0:	ebfff683 	bl	10afe4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d5d4:	e51b300c 	ldr	r3, [fp, #-12]
  10d5d8:	e3a02000 	mov	r2, #0
  10d5dc:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d5e0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5e4:	e3e02000 	mvn	r2, #0
  10d5e8:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d5ec:	e51b300c 	ldr	r3, [fp, #-12]
  10d5f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d5f4:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d5f8:	e51b300c 	ldr	r3, [fp, #-12]
  10d5fc:	e3a02000 	mov	r2, #0
  10d600:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d604:	e51b300c 	ldr	r3, [fp, #-12]
  10d608:	e3a02000 	mov	r2, #0
  10d60c:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d610:	e51b300c 	ldr	r3, [fp, #-12]
  10d614:	e3a02000 	mov	r2, #0
  10d618:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d61c:	e51b300c 	ldr	r3, [fp, #-12]
  10d620:	e3a02000 	mov	r2, #0
  10d624:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d628:	e51b300c 	ldr	r3, [fp, #-12]
  10d62c:	e3a02601 	mov	r2, #1048576	; 0x100000
  10d630:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d634:	e51b300c 	ldr	r3, [fp, #-12]
  10d638:	e3a02000 	mov	r2, #0
  10d63c:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d640:	e51b300c 	ldr	r3, [fp, #-12]
  10d644:	e3a02000 	mov	r2, #0
  10d648:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d64c:	e51b300c 	ldr	r3, [fp, #-12]
  10d650:	ea000004 	b	10d668 <netconn_alloc+0x1c4>
    goto free_and_return;
  10d654:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d658:	e51b100c 	ldr	r1, [fp, #-12]
  10d65c:	e3a00008 	mov	r0, #8
  10d660:	eb002f00 	bl	119268 <memp_free>
  return NULL;
  10d664:	e3a03000 	mov	r3, #0
}
  10d668:	e1a00003 	mov	r0, r3
  10d66c:	e24bd004 	sub	sp, fp, #4
  10d670:	e8bd8800 	pop	{fp, pc}

0010d674 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d674:	e92d4800 	push	{fp, lr}
  10d678:	e28db004 	add	fp, sp, #4
  10d67c:	e24dd008 	sub	sp, sp, #8
  10d680:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d684:	e51b3008 	ldr	r3, [fp, #-8]
  10d688:	e5933008 	ldr	r3, [r3, #8]
  10d68c:	e3530000 	cmp	r3, #0
  10d690:	0a000006 	beq	10d6b0 <netconn_free+0x3c>
  10d694:	e3060834 	movw	r0, #26676	; 0x6834
  10d698:	e3400014 	movt	r0, #20
  10d69c:	ebffd69c 	bl	103114 <rt_kprintf>
  10d6a0:	e30012da 	movw	r1, #730	; 0x2da
  10d6a4:	e3060690 	movw	r0, #26256	; 0x6690
  10d6a8:	e3400014 	movt	r0, #20
  10d6ac:	ebfff68b 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d6b0:	e51b3008 	ldr	r3, [fp, #-8]
  10d6b4:	e2833014 	add	r3, r3, #20
  10d6b8:	e1a00003 	mov	r0, r3
  10d6bc:	ebfff63e 	bl	10afbc <sys_mbox_valid>
  10d6c0:	e1a03000 	mov	r3, r0
  10d6c4:	e3530000 	cmp	r3, #0
  10d6c8:	0a000006 	beq	10d6e8 <netconn_free+0x74>
  10d6cc:	e3060864 	movw	r0, #26724	; 0x6864
  10d6d0:	e3400014 	movt	r0, #20
  10d6d4:	ebffd68e 	bl	103114 <rt_kprintf>
  10d6d8:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d6dc:	e3060690 	movw	r0, #26256	; 0x6690
  10d6e0:	e3400014 	movt	r0, #20
  10d6e4:	ebfff67d 	bl	10b0e0 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d6e8:	e51b3008 	ldr	r3, [fp, #-8]
  10d6ec:	e2833018 	add	r3, r3, #24
  10d6f0:	e1a00003 	mov	r0, r3
  10d6f4:	ebfff630 	bl	10afbc <sys_mbox_valid>
  10d6f8:	e1a03000 	mov	r3, r0
  10d6fc:	e3530000 	cmp	r3, #0
  10d700:	0a000006 	beq	10d720 <netconn_free+0xac>
  10d704:	e30608a0 	movw	r0, #26784	; 0x68a0
  10d708:	e3400014 	movt	r0, #20
  10d70c:	ebffd680 	bl	103114 <rt_kprintf>
  10d710:	e30012df 	movw	r1, #735	; 0x2df
  10d714:	e3060690 	movw	r0, #26256	; 0x6690
  10d718:	e3400014 	movt	r0, #20
  10d71c:	ebfff66f 	bl	10b0e0 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d720:	e51b3008 	ldr	r3, [fp, #-8]
  10d724:	e2833010 	add	r3, r3, #16
  10d728:	e1a00003 	mov	r0, r3
  10d72c:	ebfff3f6 	bl	10a70c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d730:	e51b3008 	ldr	r3, [fp, #-8]
  10d734:	e2833010 	add	r3, r3, #16
  10d738:	e1a00003 	mov	r0, r3
  10d73c:	ebfff445 	bl	10a858 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d740:	e51b1008 	ldr	r1, [fp, #-8]
  10d744:	e3a00008 	mov	r0, #8
  10d748:	eb002ec6 	bl	119268 <memp_free>
}
  10d74c:	e320f000 	nop	{0}
  10d750:	e24bd004 	sub	sp, fp, #4
  10d754:	e8bd8800 	pop	{fp, pc}

0010d758 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d758:	e92d4800 	push	{fp, lr}
  10d75c:	e28db004 	add	fp, sp, #4
  10d760:	e24dd018 	sub	sp, sp, #24
  10d764:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d76c:	e2833014 	add	r3, r3, #20
  10d770:	e1a00003 	mov	r0, r3
  10d774:	ebfff610 	bl	10afbc <sys_mbox_valid>
  10d778:	e1a03000 	mov	r3, r0
  10d77c:	e3530000 	cmp	r3, #0
  10d780:	0a00002c 	beq	10d838 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d784:	ea00001a 	b	10d7f4 <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d78c:	e5933000 	ldr	r3, [r3]
  10d790:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d794:	e3530010 	cmp	r3, #16
  10d798:	1a000012 	bne	10d7e8 <netconn_drain+0x90>
        if (mem != NULL) {
  10d79c:	e51b3010 	ldr	r3, [fp, #-16]
  10d7a0:	e3530000 	cmp	r3, #0
  10d7a4:	0a000012 	beq	10d7f4 <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d7a8:	e51b3010 	ldr	r3, [fp, #-16]
  10d7ac:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d7b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7b4:	e5933008 	ldr	r3, [r3, #8]
  10d7b8:	e3530000 	cmp	r3, #0
  10d7bc:	0a000006 	beq	10d7dc <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d7c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7c4:	e5932008 	ldr	r2, [r3, #8]
  10d7c8:	e51b3008 	ldr	r3, [fp, #-8]
  10d7cc:	e1d330b8 	ldrh	r3, [r3, #8]
  10d7d0:	e1a01003 	mov	r1, r3
  10d7d4:	e1a00002 	mov	r0, r2
  10d7d8:	eb004238 	bl	11e0c0 <tcp_recved>
          }
          pbuf_free(p);
  10d7dc:	e51b0008 	ldr	r0, [fp, #-8]
  10d7e0:	eb0035ae 	bl	11aea0 <pbuf_free>
  10d7e4:	ea000002 	b	10d7f4 <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d7e8:	e51b3010 	ldr	r3, [fp, #-16]
  10d7ec:	e1a00003 	mov	r0, r3
  10d7f0:	eb0009c9 	bl	10ff1c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d7f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7f8:	e2833014 	add	r3, r3, #20
  10d7fc:	e24b2010 	sub	r2, fp, #16
  10d800:	e1a01002 	mov	r1, r2
  10d804:	e1a00003 	mov	r0, r3
  10d808:	ebfff5d3 	bl	10af5c <sys_arch_mbox_tryfetch>
  10d80c:	e1a03000 	mov	r3, r0
  10d810:	e3730001 	cmn	r3, #1
  10d814:	1affffdb 	bne	10d788 <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d818:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d81c:	e2833014 	add	r3, r3, #20
  10d820:	e1a00003 	mov	r0, r3
  10d824:	ebfff4aa 	bl	10aad4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d82c:	e2833014 	add	r3, r3, #20
  10d830:	e1a00003 	mov	r0, r3
  10d834:	ebfff5ea 	bl	10afe4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d83c:	e2833018 	add	r3, r3, #24
  10d840:	e1a00003 	mov	r0, r3
  10d844:	ebfff5dc 	bl	10afbc <sys_mbox_valid>
  10d848:	e1a03000 	mov	r3, r0
  10d84c:	e3530000 	cmp	r3, #0
  10d850:	0a000027 	beq	10d8f4 <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d854:	ea000015 	b	10d8b0 <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d858:	e51b2010 	ldr	r2, [fp, #-16]
  10d85c:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  10d860:	e3403014 	movt	r3, #20
  10d864:	e1520003 	cmp	r2, r3
  10d868:	0a000010 	beq	10d8b0 <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d86c:	e51b3010 	ldr	r3, [fp, #-16]
  10d870:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d874:	e51b000c 	ldr	r0, [fp, #-12]
  10d878:	ebffffb6 	bl	10d758 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d87c:	e51b300c 	ldr	r3, [fp, #-12]
  10d880:	e5933008 	ldr	r3, [r3, #8]
  10d884:	e3530000 	cmp	r3, #0
  10d888:	0a000006 	beq	10d8a8 <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d88c:	e51b300c 	ldr	r3, [fp, #-12]
  10d890:	e5933008 	ldr	r3, [r3, #8]
  10d894:	e1a00003 	mov	r0, r3
  10d898:	eb004059 	bl	11da04 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d89c:	e51b300c 	ldr	r3, [fp, #-12]
  10d8a0:	e3a02000 	mov	r2, #0
  10d8a4:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d8a8:	e51b000c 	ldr	r0, [fp, #-12]
  10d8ac:	ebffff70 	bl	10d674 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d8b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8b4:	e2833018 	add	r3, r3, #24
  10d8b8:	e24b2010 	sub	r2, fp, #16
  10d8bc:	e1a01002 	mov	r1, r2
  10d8c0:	e1a00003 	mov	r0, r3
  10d8c4:	ebfff5a4 	bl	10af5c <sys_arch_mbox_tryfetch>
  10d8c8:	e1a03000 	mov	r3, r0
  10d8cc:	e3730001 	cmn	r3, #1
  10d8d0:	1affffe0 	bne	10d858 <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d8d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8d8:	e2833018 	add	r3, r3, #24
  10d8dc:	e1a00003 	mov	r0, r3
  10d8e0:	ebfff47b 	bl	10aad4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d8e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8e8:	e2833018 	add	r3, r3, #24
  10d8ec:	e1a00003 	mov	r0, r3
  10d8f0:	ebfff5bb 	bl	10afe4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d8f4:	e320f000 	nop	{0}
  10d8f8:	e24bd004 	sub	sp, fp, #4
  10d8fc:	e8bd8800 	pop	{fp, pc}

0010d900 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d900:	e92d4800 	push	{fp, lr}
  10d904:	e28db004 	add	fp, sp, #4
  10d908:	e24dd020 	sub	sp, sp, #32
  10d90c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d910:	e1a03001 	mov	r3, r1
  10d914:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d918:	e3a03000 	mov	r3, #0
  10d91c:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d920:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d924:	e3530000 	cmp	r3, #0
  10d928:	1a000006 	bne	10d948 <lwip_netconn_do_close_internal+0x48>
  10d92c:	e30608dc 	movw	r0, #26844	; 0x68dc
  10d930:	e3400014 	movt	r0, #20
  10d934:	ebffd5f6 	bl	103114 <rt_kprintf>
  10d938:	e300133d 	movw	r1, #829	; 0x33d
  10d93c:	e3060690 	movw	r0, #26256	; 0x6690
  10d940:	e3400014 	movt	r0, #20
  10d944:	ebfff5e5 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d948:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d94c:	e5933000 	ldr	r3, [r3]
  10d950:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d954:	e3530010 	cmp	r3, #16
  10d958:	0a000006 	beq	10d978 <lwip_netconn_do_close_internal+0x78>
  10d95c:	e30608ec 	movw	r0, #26860	; 0x68ec
  10d960:	e3400014 	movt	r0, #20
  10d964:	ebffd5ea 	bl	103114 <rt_kprintf>
  10d968:	e300133e 	movw	r1, #830	; 0x33e
  10d96c:	e3060690 	movw	r0, #26256	; 0x6690
  10d970:	e3400014 	movt	r0, #20
  10d974:	ebfff5d9 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d978:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d97c:	e5933004 	ldr	r3, [r3, #4]
  10d980:	e3530004 	cmp	r3, #4
  10d984:	0a000006 	beq	10d9a4 <lwip_netconn_do_close_internal+0xa4>
  10d988:	e306090c 	movw	r0, #26892	; 0x690c
  10d98c:	e3400014 	movt	r0, #20
  10d990:	ebffd5df 	bl	103114 <rt_kprintf>
  10d994:	e300133f 	movw	r1, #831	; 0x33f
  10d998:	e3060690 	movw	r0, #26256	; 0x6690
  10d99c:	e3400014 	movt	r0, #20
  10d9a0:	ebfff5ce 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d9a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9a8:	e5933008 	ldr	r3, [r3, #8]
  10d9ac:	e3530000 	cmp	r3, #0
  10d9b0:	1a000006 	bne	10d9d0 <lwip_netconn_do_close_internal+0xd0>
  10d9b4:	e3060930 	movw	r0, #26928	; 0x6930
  10d9b8:	e3400014 	movt	r0, #20
  10d9bc:	ebffd5d4 	bl	103114 <rt_kprintf>
  10d9c0:	e3a01d0d 	mov	r1, #832	; 0x340
  10d9c4:	e3060690 	movw	r0, #26256	; 0x6690
  10d9c8:	e3400014 	movt	r0, #20
  10d9cc:	ebfff5c3 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d9d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9d4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d9d8:	e3530000 	cmp	r3, #0
  10d9dc:	1a000006 	bne	10d9fc <lwip_netconn_do_close_internal+0xfc>
  10d9e0:	e3060798 	movw	r0, #26520	; 0x6798
  10d9e4:	e3400014 	movt	r0, #20
  10d9e8:	ebffd5c9 	bl	103114 <rt_kprintf>
  10d9ec:	e3001341 	movw	r1, #833	; 0x341
  10d9f0:	e3060690 	movw	r0, #26256	; 0x6690
  10d9f4:	e3400014 	movt	r0, #20
  10d9f8:	ebfff5b8 	bl	10b0e0 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10d9fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da00:	e5933008 	ldr	r3, [r3, #8]
  10da04:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10da08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da0c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10da10:	e5d33008 	ldrb	r3, [r3, #8]
  10da14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10da18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da1c:	e2033001 	and	r3, r3, #1
  10da20:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10da24:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da28:	e2033002 	and	r3, r3, #2
  10da2c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10da30:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da34:	e3530003 	cmp	r3, #3
  10da38:	1a000002 	bne	10da48 <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10da3c:	e3a03001 	mov	r3, #1
  10da40:	e54b3006 	strb	r3, [fp, #-6]
  10da44:	ea00001e 	b	10dac4 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10da48:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10da4c:	e3530000 	cmp	r3, #0
  10da50:	0a00000e 	beq	10da90 <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10da54:	e51b3010 	ldr	r3, [fp, #-16]
  10da58:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10da5c:	e3530005 	cmp	r3, #5
  10da60:	0a000007 	beq	10da84 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10da64:	e51b3010 	ldr	r3, [fp, #-16]
  10da68:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10da6c:	e3530006 	cmp	r3, #6
  10da70:	0a000003 	beq	10da84 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10da74:	e51b3010 	ldr	r3, [fp, #-16]
  10da78:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10da7c:	e3530008 	cmp	r3, #8
  10da80:	1a000002 	bne	10da90 <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10da84:	e3a03001 	mov	r3, #1
  10da88:	e54b3006 	strb	r3, [fp, #-6]
  10da8c:	ea00000c 	b	10dac4 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10da90:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10da94:	e3530000 	cmp	r3, #0
  10da98:	0a000007 	beq	10dabc <lwip_netconn_do_close_internal+0x1bc>
  10da9c:	e51b3010 	ldr	r3, [fp, #-16]
  10daa0:	e5d3301e 	ldrb	r3, [r3, #30]
  10daa4:	e2033010 	and	r3, r3, #16
  10daa8:	e3530000 	cmp	r3, #0
  10daac:	0a000002 	beq	10dabc <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10dab0:	e3a03001 	mov	r3, #1
  10dab4:	e54b3006 	strb	r3, [fp, #-6]
  10dab8:	ea000001 	b	10dac4 <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10dabc:	e3a03000 	mov	r3, #0
  10dac0:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10dac4:	e55b3006 	ldrb	r3, [fp, #-6]
  10dac8:	e3530000 	cmp	r3, #0
  10dacc:	0a000002 	beq	10dadc <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10dad0:	e3a01000 	mov	r1, #0
  10dad4:	e51b0010 	ldr	r0, [fp, #-16]
  10dad8:	eb00481f 	bl	11fb5c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10dadc:	e51b3010 	ldr	r3, [fp, #-16]
  10dae0:	e5933014 	ldr	r3, [r3, #20]
  10dae4:	e3530001 	cmp	r3, #1
  10dae8:	1a000003 	bne	10dafc <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10daec:	e3a01000 	mov	r1, #0
  10daf0:	e51b0010 	ldr	r0, [fp, #-16]
  10daf4:	eb004872 	bl	11fcc4 <tcp_accept>
  10daf8:	ea000018 	b	10db60 <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10dafc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10db00:	e3530000 	cmp	r3, #0
  10db04:	0a000005 	beq	10db20 <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10db08:	e3a01000 	mov	r1, #0
  10db0c:	e51b0010 	ldr	r0, [fp, #-16]
  10db10:	eb004820 	bl	11fb98 <tcp_recv>
      tcp_accept(tpcb, NULL);
  10db14:	e3a01000 	mov	r1, #0
  10db18:	e51b0010 	ldr	r0, [fp, #-16]
  10db1c:	eb004868 	bl	11fcc4 <tcp_accept>
    }
    if (shut_tx) {
  10db20:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10db24:	e3530000 	cmp	r3, #0
  10db28:	0a000002 	beq	10db38 <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10db2c:	e3a01000 	mov	r1, #0
  10db30:	e51b0010 	ldr	r0, [fp, #-16]
  10db34:	eb004830 	bl	11fbfc <tcp_sent>
    }
    if (close) {
  10db38:	e55b3006 	ldrb	r3, [fp, #-6]
  10db3c:	e3530000 	cmp	r3, #0
  10db40:	0a000006 	beq	10db60 <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10db44:	e3a02000 	mov	r2, #0
  10db48:	e3a01000 	mov	r1, #0
  10db4c:	e51b0010 	ldr	r0, [fp, #-16]
  10db50:	eb004870 	bl	11fd18 <tcp_poll>
      tcp_err(tpcb, NULL);
  10db54:	e3a01000 	mov	r1, #0
  10db58:	e51b0010 	ldr	r0, [fp, #-16]
  10db5c:	eb00483f 	bl	11fc60 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10db60:	e55b3006 	ldrb	r3, [fp, #-6]
  10db64:	e3530000 	cmp	r3, #0
  10db68:	0a000004 	beq	10db80 <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10db6c:	e51b0010 	ldr	r0, [fp, #-16]
  10db70:	eb003eaf 	bl	11d634 <tcp_close>
  10db74:	e1a03000 	mov	r3, r0
  10db78:	e54b3005 	strb	r3, [fp, #-5]
  10db7c:	ea000006 	b	10db9c <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10db80:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10db84:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10db88:	e1a01003 	mov	r1, r3
  10db8c:	e51b0010 	ldr	r0, [fp, #-16]
  10db90:	eb003ebc 	bl	11d688 <tcp_shutdown>
  10db94:	e1a03000 	mov	r3, r0
  10db98:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10db9c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dba0:	e3530000 	cmp	r3, #0
  10dba4:	1a000002 	bne	10dbb4 <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10dba8:	e3a03001 	mov	r3, #1
  10dbac:	e54b3007 	strb	r3, [fp, #-7]
  10dbb0:	ea000021 	b	10dc3c <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10dbb4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dbb8:	e3730001 	cmn	r3, #1
  10dbbc:	1a00001c 	bne	10dc34 <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10dbc0:	e3043e20 	movw	r3, #20000	; 0x4e20
  10dbc4:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10dbc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbcc:	e5933020 	ldr	r3, [r3, #32]
  10dbd0:	e3530000 	cmp	r3, #0
  10dbd4:	da000002 	ble	10dbe4 <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10dbd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbdc:	e5933020 	ldr	r3, [r3, #32]
  10dbe0:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10dbe4:	ebfff556 	bl	10b144 <sys_now>
  10dbe8:	e1a02000 	mov	r2, r0
  10dbec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbf0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dbf4:	e593300c 	ldr	r3, [r3, #12]
  10dbf8:	e0423003 	sub	r3, r2, r3
  10dbfc:	e1a02003 	mov	r2, r3
  10dc00:	e51b300c 	ldr	r3, [fp, #-12]
  10dc04:	e1530002 	cmp	r3, r2
  10dc08:	ca00000b 	bgt	10dc3c <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10dc0c:	e3a03001 	mov	r3, #1
  10dc10:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10dc14:	e55b3006 	ldrb	r3, [fp, #-6]
  10dc18:	e3530000 	cmp	r3, #0
  10dc1c:	0a000006 	beq	10dc3c <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10dc20:	e51b0010 	ldr	r0, [fp, #-16]
  10dc24:	eb003f76 	bl	11da04 <tcp_abort>
          err = ERR_OK;
  10dc28:	e3a03000 	mov	r3, #0
  10dc2c:	e54b3005 	strb	r3, [fp, #-5]
  10dc30:	ea000001 	b	10dc3c <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10dc34:	e3a03001 	mov	r3, #1
  10dc38:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10dc3c:	e55b3007 	ldrb	r3, [fp, #-7]
  10dc40:	e3530000 	cmp	r3, #0
  10dc44:	0a00004e 	beq	10dd84 <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10dc48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc4c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc50:	e5933000 	ldr	r3, [r3]
  10dc54:	e2833010 	add	r3, r3, #16
  10dc58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10dc5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc60:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc64:	e55b2005 	ldrb	r2, [fp, #-5]
  10dc68:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10dc6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc70:	e3a02000 	mov	r2, #0
  10dc74:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10dc78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc7c:	e3a02000 	mov	r2, #0
  10dc80:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10dc84:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dc88:	e3530000 	cmp	r3, #0
  10dc8c:	1a000029 	bne	10dd38 <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10dc90:	e55b3006 	ldrb	r3, [fp, #-6]
  10dc94:	e3530000 	cmp	r3, #0
  10dc98:	0a00000c 	beq	10dcd0 <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10dc9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dca0:	e3a02000 	mov	r2, #0
  10dca4:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10dca8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcb0:	e3530000 	cmp	r3, #0
  10dcb4:	0a000005 	beq	10dcd0 <lwip_netconn_do_close_internal+0x3d0>
  10dcb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcbc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcc0:	e3a02000 	mov	r2, #0
  10dcc4:	e3a01004 	mov	r1, #4
  10dcc8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dccc:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10dcd0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dcd4:	e3530000 	cmp	r3, #0
  10dcd8:	0a000009 	beq	10dd04 <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10dcdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dce0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dce4:	e3530000 	cmp	r3, #0
  10dce8:	0a000005 	beq	10dd04 <lwip_netconn_do_close_internal+0x404>
  10dcec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcf0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcf4:	e3a02000 	mov	r2, #0
  10dcf8:	e3a01000 	mov	r1, #0
  10dcfc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dd00:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10dd04:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dd08:	e3530000 	cmp	r3, #0
  10dd0c:	0a000009 	beq	10dd38 <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10dd10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd18:	e3530000 	cmp	r3, #0
  10dd1c:	0a000005 	beq	10dd38 <lwip_netconn_do_close_internal+0x438>
  10dd20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd24:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd28:	e3a02000 	mov	r2, #0
  10dd2c:	e3a01002 	mov	r1, #2
  10dd30:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dd34:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10dd38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd3c:	e3530000 	cmp	r3, #0
  10dd40:	0a000008 	beq	10dd68 <lwip_netconn_do_close_internal+0x468>
  10dd44:	ebffd13c 	bl	10223c <rt_enter_critical>
  10dd48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd4c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dd50:	e373000c 	cmn	r3, #12
  10dd54:	ba000002 	blt	10dd64 <lwip_netconn_do_close_internal+0x464>
  10dd58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd5c:	e55b2005 	ldrb	r2, [fp, #-5]
  10dd60:	e5c3200c 	strb	r2, [r3, #12]
  10dd64:	ebffd13a 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10dd68:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10dd6c:	e3530000 	cmp	r3, #0
  10dd70:	0a000001 	beq	10dd7c <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10dd74:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10dd78:	ebfff26e 	bl	10a738 <sys_sem_signal>
    }
    return ERR_OK;
  10dd7c:	e3a03000 	mov	r3, #0
  10dd80:	ea00002b 	b	10de34 <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10dd84:	e55b3007 	ldrb	r3, [fp, #-7]
  10dd88:	e3530000 	cmp	r3, #0
  10dd8c:	1a00001d 	bne	10de08 <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10dd90:	e51b3010 	ldr	r3, [fp, #-16]
  10dd94:	e5933014 	ldr	r3, [r3, #20]
  10dd98:	e3530001 	cmp	r3, #1
  10dd9c:	1a000006 	bne	10ddbc <lwip_netconn_do_close_internal+0x4bc>
  10dda0:	e3060944 	movw	r0, #26948	; 0x6944
  10dda4:	e3400014 	movt	r0, #20
  10dda8:	ebffd4d9 	bl	103114 <rt_kprintf>
  10ddac:	e30013dd 	movw	r1, #989	; 0x3dd
  10ddb0:	e3060690 	movw	r0, #26256	; 0x6690
  10ddb4:	e3400014 	movt	r0, #20
  10ddb8:	ebfff4c8 	bl	10b0e0 <sys_arch_assert>
    if (shut_tx) {
  10ddbc:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10ddc0:	e3530000 	cmp	r3, #0
  10ddc4:	0a000003 	beq	10ddd8 <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10ddc8:	e30c1b48 	movw	r1, #52040	; 0xcb48
  10ddcc:	e3401010 	movt	r1, #16
  10ddd0:	e51b0010 	ldr	r0, [fp, #-16]
  10ddd4:	eb004788 	bl	11fbfc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10ddd8:	e3a02001 	mov	r2, #1
  10dddc:	e30c1a2c 	movw	r1, #51756	; 0xca2c
  10dde0:	e3401010 	movt	r1, #16
  10dde4:	e51b0010 	ldr	r0, [fp, #-16]
  10dde8:	eb0047ca 	bl	11fd18 <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10ddec:	e30c1c64 	movw	r1, #52324	; 0xcc64
  10ddf0:	e3401010 	movt	r1, #16
  10ddf4:	e51b0010 	ldr	r0, [fp, #-16]
  10ddf8:	eb004798 	bl	11fc60 <tcp_err>
    tcp_arg(tpcb, conn);
  10ddfc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10de00:	e51b0010 	ldr	r0, [fp, #-16]
  10de04:	eb004754 	bl	11fb5c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10de08:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10de0c:	e3530000 	cmp	r3, #0
  10de10:	1a000006 	bne	10de30 <lwip_netconn_do_close_internal+0x530>
  10de14:	e3060968 	movw	r0, #26984	; 0x6968
  10de18:	e3400014 	movt	r0, #20
  10de1c:	ebffd4bc 	bl	103114 <rt_kprintf>
  10de20:	e30013e9 	movw	r1, #1001	; 0x3e9
  10de24:	e3060690 	movw	r0, #26256	; 0x6690
  10de28:	e3400014 	movt	r0, #20
  10de2c:	ebfff4ab 	bl	10b0e0 <sys_arch_assert>
  return err;
  10de30:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10de34:	e1a00003 	mov	r0, r3
  10de38:	e24bd004 	sub	sp, fp, #4
  10de3c:	e8bd8800 	pop	{fp, pc}

0010de40 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10de40:	e92d4800 	push	{fp, lr}
  10de44:	e28db004 	add	fp, sp, #4
  10de48:	e24dd010 	sub	sp, sp, #16
  10de4c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10de50:	e51b3010 	ldr	r3, [fp, #-16]
  10de54:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10de58:	e51b3008 	ldr	r3, [fp, #-8]
  10de5c:	e5933000 	ldr	r3, [r3]
  10de60:	e5933004 	ldr	r3, [r3, #4]
  10de64:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10de68:	e51b300c 	ldr	r3, [fp, #-12]
  10de6c:	e3530000 	cmp	r3, #0
  10de70:	0a00000c 	beq	10dea8 <lwip_netconn_do_delconn+0x68>
  10de74:	e51b3008 	ldr	r3, [fp, #-8]
  10de78:	e5933000 	ldr	r3, [r3]
  10de7c:	e5933000 	ldr	r3, [r3]
  10de80:	e20330f0 	and	r3, r3, #240	; 0xf0
  10de84:	e3530010 	cmp	r3, #16
  10de88:	0a000006 	beq	10dea8 <lwip_netconn_do_delconn+0x68>
  10de8c:	e3060978 	movw	r0, #27000	; 0x6978
  10de90:	e3400014 	movt	r0, #20
  10de94:	ebffd49e 	bl	103114 <rt_kprintf>
  10de98:	e30013fb 	movw	r1, #1019	; 0x3fb
  10de9c:	e3060690 	movw	r0, #26256	; 0x6690
  10dea0:	e3400014 	movt	r0, #20
  10dea4:	ebfff48d 	bl	10b0e0 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10dea8:	e51b300c 	ldr	r3, [fp, #-12]
  10deac:	e3530000 	cmp	r3, #0
  10deb0:	0a000005 	beq	10decc <lwip_netconn_do_delconn+0x8c>
  10deb4:	e51b300c 	ldr	r3, [fp, #-12]
  10deb8:	e3530002 	cmp	r3, #2
  10debc:	0a000002 	beq	10decc <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10dec0:	e51b300c 	ldr	r3, [fp, #-12]
  10dec4:	e3530003 	cmp	r3, #3
  10dec8:	1a000008 	bne	10def0 <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10decc:	e51b300c 	ldr	r3, [fp, #-12]
  10ded0:	e3530003 	cmp	r3, #3
  10ded4:	1a000009 	bne	10df00 <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10ded8:	e51b3008 	ldr	r3, [fp, #-8]
  10dedc:	e5933000 	ldr	r3, [r3]
  10dee0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10dee4:	e2033004 	and	r3, r3, #4
  10dee8:	e3530000 	cmp	r3, #0
  10deec:	1a000003 	bne	10df00 <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10def0:	e51b3008 	ldr	r3, [fp, #-8]
  10def4:	e3e02004 	mvn	r2, #4
  10def8:	e5c32004 	strb	r2, [r3, #4]
  10defc:	ea00009e 	b	10e17c <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10df00:	e51b300c 	ldr	r3, [fp, #-12]
  10df04:	e3530003 	cmp	r3, #3
  10df08:	1a00000c 	bne	10df40 <lwip_netconn_do_delconn+0x100>
  10df0c:	e51b3008 	ldr	r3, [fp, #-8]
  10df10:	e5933000 	ldr	r3, [r3]
  10df14:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10df18:	e2033004 	and	r3, r3, #4
  10df1c:	e3530000 	cmp	r3, #0
  10df20:	1a000006 	bne	10df40 <lwip_netconn_do_delconn+0x100>
  10df24:	e306098c 	movw	r0, #27020	; 0x698c
  10df28:	e3400014 	movt	r0, #20
  10df2c:	ebffd478 	bl	103114 <rt_kprintf>
  10df30:	e3001419 	movw	r1, #1049	; 0x419
  10df34:	e3060690 	movw	r0, #26256	; 0x6690
  10df38:	e3400014 	movt	r0, #20
  10df3c:	ebfff467 	bl	10b0e0 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10df40:	e51b3008 	ldr	r3, [fp, #-8]
  10df44:	e3a02000 	mov	r2, #0
  10df48:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10df4c:	e51b3008 	ldr	r3, [fp, #-8]
  10df50:	e5933000 	ldr	r3, [r3]
  10df54:	e1a00003 	mov	r0, r3
  10df58:	ebfffdfe 	bl	10d758 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10df5c:	e51b3008 	ldr	r3, [fp, #-8]
  10df60:	e5933000 	ldr	r3, [r3]
  10df64:	e5933008 	ldr	r3, [r3, #8]
  10df68:	e3530000 	cmp	r3, #0
  10df6c:	0a000068 	beq	10e114 <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10df70:	e51b3008 	ldr	r3, [fp, #-8]
  10df74:	e5933000 	ldr	r3, [r3]
  10df78:	e5933000 	ldr	r3, [r3]
  10df7c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10df80:	e3530020 	cmp	r3, #32
  10df84:	0a00000a 	beq	10dfb4 <lwip_netconn_do_delconn+0x174>
  10df88:	e3530040 	cmp	r3, #64	; 0x40
  10df8c:	0a000002 	beq	10df9c <lwip_netconn_do_delconn+0x15c>
  10df90:	e3530010 	cmp	r3, #16
  10df94:	0a000011 	beq	10dfe0 <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10df98:	ea000059 	b	10e104 <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10df9c:	e51b3008 	ldr	r3, [fp, #-8]
  10dfa0:	e5933000 	ldr	r3, [r3]
  10dfa4:	e5933008 	ldr	r3, [r3, #8]
  10dfa8:	e1a00003 	mov	r0, r3
  10dfac:	eb0039d7 	bl	11c710 <raw_remove>
        break;
  10dfb0:	ea000053 	b	10e104 <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10dfb4:	e51b3008 	ldr	r3, [fp, #-8]
  10dfb8:	e5933000 	ldr	r3, [r3]
  10dfbc:	e5933008 	ldr	r3, [r3, #8]
  10dfc0:	e3a02000 	mov	r2, #0
  10dfc4:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10dfc8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfcc:	e5933000 	ldr	r3, [r3]
  10dfd0:	e5933008 	ldr	r3, [r3, #8]
  10dfd4:	e1a00003 	mov	r0, r3
  10dfd8:	eb006a83 	bl	1289ec <udp_remove>
        break;
  10dfdc:	ea000048 	b	10e104 <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dfe0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfe4:	e5933000 	ldr	r3, [r3]
  10dfe8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dfec:	e3530000 	cmp	r3, #0
  10dff0:	1a000004 	bne	10e008 <lwip_netconn_do_delconn+0x1c8>
  10dff4:	e51b3008 	ldr	r3, [fp, #-8]
  10dff8:	e5933000 	ldr	r3, [r3]
  10dffc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10e000:	e3530000 	cmp	r3, #0
  10e004:	0a000006 	beq	10e024 <lwip_netconn_do_delconn+0x1e4>
  10e008:	e30609ac 	movw	r0, #27052	; 0x69ac
  10e00c:	e3400014 	movt	r0, #20
  10e010:	ebffd43f 	bl	103114 <rt_kprintf>
  10e014:	e300142f 	movw	r1, #1071	; 0x42f
  10e018:	e3060690 	movw	r0, #26256	; 0x6690
  10e01c:	e3400014 	movt	r0, #20
  10e020:	ebfff42e 	bl	10b0e0 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10e024:	e51b3008 	ldr	r3, [fp, #-8]
  10e028:	e5933000 	ldr	r3, [r3]
  10e02c:	e3a02004 	mov	r2, #4
  10e030:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10e034:	e51b3008 	ldr	r3, [fp, #-8]
  10e038:	e3a02003 	mov	r2, #3
  10e03c:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10e040:	e51b3008 	ldr	r3, [fp, #-8]
  10e044:	e5933000 	ldr	r3, [r3]
  10e048:	e51b2008 	ldr	r2, [fp, #-8]
  10e04c:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10e050:	e51b3008 	ldr	r3, [fp, #-8]
  10e054:	e5933000 	ldr	r3, [r3]
  10e058:	e3a01000 	mov	r1, #0
  10e05c:	e1a00003 	mov	r0, r3
  10e060:	ebfffe26 	bl	10d900 <lwip_netconn_do_close_internal>
  10e064:	e1a03000 	mov	r3, r0
  10e068:	e3530000 	cmp	r3, #0
  10e06c:	0a00005b 	beq	10e1e0 <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10e070:	e51b3008 	ldr	r3, [fp, #-8]
  10e074:	e5933000 	ldr	r3, [r3]
  10e078:	e5933004 	ldr	r3, [r3, #4]
  10e07c:	e3530004 	cmp	r3, #4
  10e080:	0a000006 	beq	10e0a0 <lwip_netconn_do_delconn+0x260>
  10e084:	e30609c8 	movw	r0, #27080	; 0x69c8
  10e088:	e3400014 	movt	r0, #20
  10e08c:	ebffd420 	bl	103114 <rt_kprintf>
  10e090:	e3001435 	movw	r1, #1077	; 0x435
  10e094:	e3060690 	movw	r0, #26256	; 0x6690
  10e098:	e3400014 	movt	r0, #20
  10e09c:	ebfff40f 	bl	10b0e0 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10e0a0:	e30f0614 	movw	r0, #62996	; 0xf614
  10e0a4:	e3400014 	movt	r0, #20
  10e0a8:	ebfff229 	bl	10a954 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e0ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e0b0:	e5933000 	ldr	r3, [r3]
  10e0b4:	e2833010 	add	r3, r3, #16
  10e0b8:	e3a01000 	mov	r1, #0
  10e0bc:	e1a00003 	mov	r0, r3
  10e0c0:	ebfff1a7 	bl	10a764 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10e0c4:	e30f0614 	movw	r0, #62996	; 0xf614
  10e0c8:	e3400014 	movt	r0, #20
  10e0cc:	ebfff214 	bl	10a924 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10e0d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e0d4:	e5933000 	ldr	r3, [r3]
  10e0d8:	e5933004 	ldr	r3, [r3, #4]
  10e0dc:	e3530000 	cmp	r3, #0
  10e0e0:	0a00003e 	beq	10e1e0 <lwip_netconn_do_delconn+0x3a0>
  10e0e4:	e30609c8 	movw	r0, #27080	; 0x69c8
  10e0e8:	e3400014 	movt	r0, #20
  10e0ec:	ebffd408 	bl	103114 <rt_kprintf>
  10e0f0:	e3001439 	movw	r1, #1081	; 0x439
  10e0f4:	e3060690 	movw	r0, #26256	; 0x6690
  10e0f8:	e3400014 	movt	r0, #20
  10e0fc:	ebfff3f7 	bl	10b0e0 <sys_arch_assert>
        return;
  10e100:	ea000036 	b	10e1e0 <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10e104:	e51b3008 	ldr	r3, [fp, #-8]
  10e108:	e5933000 	ldr	r3, [r3]
  10e10c:	e3a02000 	mov	r2, #0
  10e110:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10e114:	e51b3008 	ldr	r3, [fp, #-8]
  10e118:	e5933000 	ldr	r3, [r3]
  10e11c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e120:	e3530000 	cmp	r3, #0
  10e124:	0a000007 	beq	10e148 <lwip_netconn_do_delconn+0x308>
  10e128:	e51b3008 	ldr	r3, [fp, #-8]
  10e12c:	e5933000 	ldr	r3, [r3]
  10e130:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e134:	e51b2008 	ldr	r2, [fp, #-8]
  10e138:	e5920000 	ldr	r0, [r2]
  10e13c:	e3a02000 	mov	r2, #0
  10e140:	e3a01000 	mov	r1, #0
  10e144:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10e148:	e51b3008 	ldr	r3, [fp, #-8]
  10e14c:	e5933000 	ldr	r3, [r3]
  10e150:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e154:	e3530000 	cmp	r3, #0
  10e158:	0a000007 	beq	10e17c <lwip_netconn_do_delconn+0x33c>
  10e15c:	e51b3008 	ldr	r3, [fp, #-8]
  10e160:	e5933000 	ldr	r3, [r3]
  10e164:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e168:	e51b2008 	ldr	r2, [fp, #-8]
  10e16c:	e5920000 	ldr	r0, [r2]
  10e170:	e3a02000 	mov	r2, #0
  10e174:	e3a01002 	mov	r1, #2
  10e178:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10e17c:	e51b3008 	ldr	r3, [fp, #-8]
  10e180:	e5933000 	ldr	r3, [r3]
  10e184:	e2833010 	add	r3, r3, #16
  10e188:	e1a00003 	mov	r0, r3
  10e18c:	ebfff1a7 	bl	10a830 <sys_sem_valid>
  10e190:	e1a03000 	mov	r3, r0
  10e194:	e3530000 	cmp	r3, #0
  10e198:	0a000011 	beq	10e1e4 <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10e19c:	e51b3008 	ldr	r3, [fp, #-8]
  10e1a0:	e5933000 	ldr	r3, [r3]
  10e1a4:	e3530000 	cmp	r3, #0
  10e1a8:	0a00000d 	beq	10e1e4 <lwip_netconn_do_delconn+0x3a4>
  10e1ac:	ebffd022 	bl	10223c <rt_enter_critical>
  10e1b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e1b4:	e5933000 	ldr	r3, [r3]
  10e1b8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e1bc:	e373000c 	cmn	r3, #12
  10e1c0:	ba000004 	blt	10e1d8 <lwip_netconn_do_delconn+0x398>
  10e1c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e1c8:	e5933000 	ldr	r3, [r3]
  10e1cc:	e51b2008 	ldr	r2, [fp, #-8]
  10e1d0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e1d4:	e5c3200c 	strb	r2, [r3, #12]
  10e1d8:	ebffd01d 	bl	102254 <rt_exit_critical>
  10e1dc:	ea000000 	b	10e1e4 <lwip_netconn_do_delconn+0x3a4>
        return;
  10e1e0:	e320f000 	nop	{0}
  }
}
  10e1e4:	e24bd004 	sub	sp, fp, #4
  10e1e8:	e8bd8800 	pop	{fp, pc}

0010e1ec <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10e1ec:	e92d4800 	push	{fp, lr}
  10e1f0:	e28db004 	add	fp, sp, #4
  10e1f4:	e24dd010 	sub	sp, sp, #16
  10e1f8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e1fc:	e51b3010 	ldr	r3, [fp, #-16]
  10e200:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e204:	e51b3008 	ldr	r3, [fp, #-8]
  10e208:	e5933000 	ldr	r3, [r3]
  10e20c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e210:	e373000c 	cmn	r3, #12
  10e214:	aa000005 	bge	10e230 <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10e218:	e51b3008 	ldr	r3, [fp, #-8]
  10e21c:	e5933000 	ldr	r3, [r3]
  10e220:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e224:	e51b3008 	ldr	r3, [fp, #-8]
  10e228:	e5c32004 	strb	r2, [r3, #4]
  10e22c:	ea00003c 	b	10e324 <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10e230:	e51b3008 	ldr	r3, [fp, #-8]
  10e234:	e3e02005 	mvn	r2, #5
  10e238:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e23c:	e51b3008 	ldr	r3, [fp, #-8]
  10e240:	e5933000 	ldr	r3, [r3]
  10e244:	e5933008 	ldr	r3, [r3, #8]
  10e248:	e3530000 	cmp	r3, #0
  10e24c:	0a000033 	beq	10e320 <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e250:	e51b3008 	ldr	r3, [fp, #-8]
  10e254:	e5933000 	ldr	r3, [r3]
  10e258:	e5933000 	ldr	r3, [r3]
  10e25c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e260:	e3530020 	cmp	r3, #32
  10e264:	0a000011 	beq	10e2b0 <lwip_netconn_do_bind+0xc4>
  10e268:	e3530040 	cmp	r3, #64	; 0x40
  10e26c:	0a000002 	beq	10e27c <lwip_netconn_do_bind+0x90>
  10e270:	e3530010 	cmp	r3, #16
  10e274:	0a00001b 	beq	10e2e8 <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10e278:	ea000029 	b	10e324 <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e27c:	e51b3008 	ldr	r3, [fp, #-8]
  10e280:	e5933000 	ldr	r3, [r3]
  10e284:	e5932008 	ldr	r2, [r3, #8]
  10e288:	e51b3008 	ldr	r3, [fp, #-8]
  10e28c:	e5933008 	ldr	r3, [r3, #8]
  10e290:	e1a01003 	mov	r1, r3
  10e294:	e1a00002 	mov	r0, r2
  10e298:	eb003839 	bl	11c384 <raw_bind>
  10e29c:	e1a03000 	mov	r3, r0
  10e2a0:	e1a02003 	mov	r2, r3
  10e2a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2a8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2ac:	ea00001c 	b	10e324 <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2b4:	e5933000 	ldr	r3, [r3]
  10e2b8:	e5930008 	ldr	r0, [r3, #8]
  10e2bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2c0:	e5931008 	ldr	r1, [r3, #8]
  10e2c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2c8:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2cc:	e1a02003 	mov	r2, r3
  10e2d0:	eb0068db 	bl	128644 <udp_bind>
  10e2d4:	e1a03000 	mov	r3, r0
  10e2d8:	e1a02003 	mov	r2, r3
  10e2dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2e0:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2e4:	ea00000e 	b	10e324 <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2ec:	e5933000 	ldr	r3, [r3]
  10e2f0:	e5930008 	ldr	r0, [r3, #8]
  10e2f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f8:	e5931008 	ldr	r1, [r3, #8]
  10e2fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e300:	e1d330bc 	ldrh	r3, [r3, #12]
  10e304:	e1a02003 	mov	r2, r3
  10e308:	eb003dc7 	bl	11da2c <tcp_bind>
  10e30c:	e1a03000 	mov	r3, r0
  10e310:	e1a02003 	mov	r2, r3
  10e314:	e51b3008 	ldr	r3, [fp, #-8]
  10e318:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e31c:	ea000000 	b	10e324 <lwip_netconn_do_bind+0x138>
      }
    }
  10e320:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10e324:	e51b3008 	ldr	r3, [fp, #-8]
  10e328:	e5933000 	ldr	r3, [r3]
  10e32c:	e3530000 	cmp	r3, #0
  10e330:	0a00000b 	beq	10e364 <lwip_netconn_do_bind+0x178>
  10e334:	ebffcfc0 	bl	10223c <rt_enter_critical>
  10e338:	e51b3008 	ldr	r3, [fp, #-8]
  10e33c:	e5933000 	ldr	r3, [r3]
  10e340:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e344:	e373000c 	cmn	r3, #12
  10e348:	ba000004 	blt	10e360 <lwip_netconn_do_bind+0x174>
  10e34c:	e51b3008 	ldr	r3, [fp, #-8]
  10e350:	e5933000 	ldr	r3, [r3]
  10e354:	e51b2008 	ldr	r2, [fp, #-8]
  10e358:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e35c:	e5c3200c 	strb	r2, [r3, #12]
  10e360:	ebffcfbb 	bl	102254 <rt_exit_critical>
}
  10e364:	e320f000 	nop	{0}
  10e368:	e24bd004 	sub	sp, fp, #4
  10e36c:	e8bd8800 	pop	{fp, pc}

0010e370 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e370:	e92d4800 	push	{fp, lr}
  10e374:	e28db004 	add	fp, sp, #4
  10e378:	e24dd020 	sub	sp, sp, #32
  10e37c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e380:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e384:	e1a03002 	mov	r3, r2
  10e388:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e38c:	e3a03000 	mov	r3, #0
  10e390:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e398:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e39c:	e51b300c 	ldr	r3, [fp, #-12]
  10e3a0:	e3530000 	cmp	r3, #0
  10e3a4:	1a000001 	bne	10e3b0 <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e3a8:	e3e03005 	mvn	r3, #5
  10e3ac:	ea000074 	b	10e584 <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e3b0:	e51b300c 	ldr	r3, [fp, #-12]
  10e3b4:	e5933004 	ldr	r3, [r3, #4]
  10e3b8:	e3530003 	cmp	r3, #3
  10e3bc:	0a000006 	beq	10e3dc <lwip_netconn_do_connected+0x6c>
  10e3c0:	e30609d0 	movw	r0, #27088	; 0x69d0
  10e3c4:	e3400014 	movt	r0, #20
  10e3c8:	ebffd351 	bl	103114 <rt_kprintf>
  10e3cc:	e3001492 	movw	r1, #1170	; 0x492
  10e3d0:	e3060690 	movw	r0, #26256	; 0x6690
  10e3d4:	e3400014 	movt	r0, #20
  10e3d8:	ebfff340 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e3dc:	e51b300c 	ldr	r3, [fp, #-12]
  10e3e0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e3e4:	e3530000 	cmp	r3, #0
  10e3e8:	1a00000b 	bne	10e41c <lwip_netconn_do_connected+0xac>
  10e3ec:	e51b300c 	ldr	r3, [fp, #-12]
  10e3f0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e3f4:	e2033004 	and	r3, r3, #4
  10e3f8:	e3530000 	cmp	r3, #0
  10e3fc:	1a000006 	bne	10e41c <lwip_netconn_do_connected+0xac>
  10e400:	e30609f0 	movw	r0, #27120	; 0x69f0
  10e404:	e3400014 	movt	r0, #20
  10e408:	ebffd341 	bl	103114 <rt_kprintf>
  10e40c:	e3001494 	movw	r1, #1172	; 0x494
  10e410:	e3060690 	movw	r0, #26256	; 0x6690
  10e414:	e3400014 	movt	r0, #20
  10e418:	ebfff330 	bl	10b0e0 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e41c:	e51b300c 	ldr	r3, [fp, #-12]
  10e420:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e424:	e3530000 	cmp	r3, #0
  10e428:	0a000008 	beq	10e450 <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e42c:	e51b300c 	ldr	r3, [fp, #-12]
  10e430:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e434:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e438:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e43c:	e51b300c 	ldr	r3, [fp, #-12]
  10e440:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e444:	e5933000 	ldr	r3, [r3]
  10e448:	e2833010 	add	r3, r3, #16
  10e44c:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e450:	e51b300c 	ldr	r3, [fp, #-12]
  10e454:	e5933000 	ldr	r3, [r3]
  10e458:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e45c:	e3530010 	cmp	r3, #16
  10e460:	1a000004 	bne	10e478 <lwip_netconn_do_connected+0x108>
  10e464:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e468:	e3530000 	cmp	r3, #0
  10e46c:	1a000001 	bne	10e478 <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e470:	e51b000c 	ldr	r0, [fp, #-12]
  10e474:	ebfffabe 	bl	10cf74 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e478:	e51b300c 	ldr	r3, [fp, #-12]
  10e47c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e480:	e2033004 	and	r3, r3, #4
  10e484:	e3530000 	cmp	r3, #0
  10e488:	03a03001 	moveq	r3, #1
  10e48c:	13a03000 	movne	r3, #0
  10e490:	e6ef3073 	uxtb	r3, r3
  10e494:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e498:	e51b300c 	ldr	r3, [fp, #-12]
  10e49c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e4a0:	e3c33004 	bic	r3, r3, #4
  10e4a4:	e6ef2073 	uxtb	r2, r3
  10e4a8:	e51b300c 	ldr	r3, [fp, #-12]
  10e4ac:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e4b0:	e51b3010 	ldr	r3, [fp, #-16]
  10e4b4:	e3530000 	cmp	r3, #0
  10e4b8:	0a000002 	beq	10e4c8 <lwip_netconn_do_connected+0x158>
  10e4bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e4c0:	e3530000 	cmp	r3, #0
  10e4c4:	1a00000c 	bne	10e4fc <lwip_netconn_do_connected+0x18c>
  10e4c8:	e51b3010 	ldr	r3, [fp, #-16]
  10e4cc:	e3530000 	cmp	r3, #0
  10e4d0:	1a000002 	bne	10e4e0 <lwip_netconn_do_connected+0x170>
  10e4d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e4d8:	e3530000 	cmp	r3, #0
  10e4dc:	0a000006 	beq	10e4fc <lwip_netconn_do_connected+0x18c>
  10e4e0:	e3060a30 	movw	r0, #27184	; 0x6a30
  10e4e4:	e3400014 	movt	r0, #20
  10e4e8:	ebffd309 	bl	103114 <rt_kprintf>
  10e4ec:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e4f0:	e3060690 	movw	r0, #26256	; 0x6690
  10e4f4:	e3400014 	movt	r0, #20
  10e4f8:	ebfff2f8 	bl	10b0e0 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e4fc:	e51b300c 	ldr	r3, [fp, #-12]
  10e500:	e3a02000 	mov	r2, #0
  10e504:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e508:	e51b300c 	ldr	r3, [fp, #-12]
  10e50c:	e3a02000 	mov	r2, #0
  10e510:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e514:	e51b300c 	ldr	r3, [fp, #-12]
  10e518:	e3530000 	cmp	r3, #0
  10e51c:	0a000008 	beq	10e544 <lwip_netconn_do_connected+0x1d4>
  10e520:	ebffcf45 	bl	10223c <rt_enter_critical>
  10e524:	e51b300c 	ldr	r3, [fp, #-12]
  10e528:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e52c:	e373000c 	cmn	r3, #12
  10e530:	ba000002 	blt	10e540 <lwip_netconn_do_connected+0x1d0>
  10e534:	e51b300c 	ldr	r3, [fp, #-12]
  10e538:	e3a02000 	mov	r2, #0
  10e53c:	e5c3200c 	strb	r2, [r3, #12]
  10e540:	ebffcf43 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e544:	e51b300c 	ldr	r3, [fp, #-12]
  10e548:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e54c:	e3530000 	cmp	r3, #0
  10e550:	0a000005 	beq	10e56c <lwip_netconn_do_connected+0x1fc>
  10e554:	e51b300c 	ldr	r3, [fp, #-12]
  10e558:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e55c:	e3a02000 	mov	r2, #0
  10e560:	e3a01002 	mov	r1, #2
  10e564:	e51b000c 	ldr	r0, [fp, #-12]
  10e568:	e12fff33 	blx	r3

  if (was_blocking) {
  10e56c:	e51b3010 	ldr	r3, [fp, #-16]
  10e570:	e3530000 	cmp	r3, #0
  10e574:	0a000001 	beq	10e580 <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e578:	e51b0008 	ldr	r0, [fp, #-8]
  10e57c:	ebfff06d 	bl	10a738 <sys_sem_signal>
  }
  return ERR_OK;
  10e580:	e3a03000 	mov	r3, #0
}
  10e584:	e1a00003 	mov	r0, r3
  10e588:	e24bd004 	sub	sp, fp, #4
  10e58c:	e8bd8800 	pop	{fp, pc}

0010e590 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e590:	e92d4800 	push	{fp, lr}
  10e594:	e28db004 	add	fp, sp, #4
  10e598:	e24dd010 	sub	sp, sp, #16
  10e59c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e5a0:	e51b3010 	ldr	r3, [fp, #-16]
  10e5a4:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e5a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5ac:	e5933000 	ldr	r3, [r3]
  10e5b0:	e5933008 	ldr	r3, [r3, #8]
  10e5b4:	e3530000 	cmp	r3, #0
  10e5b8:	1a000003 	bne	10e5cc <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e5bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e5c0:	e3e0200e 	mvn	r2, #14
  10e5c4:	e5c32004 	strb	r2, [r3, #4]
  10e5c8:	ea0000aa 	b	10e878 <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e5cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e5d0:	e5933000 	ldr	r3, [r3]
  10e5d4:	e5933000 	ldr	r3, [r3]
  10e5d8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e5dc:	e3530020 	cmp	r3, #32
  10e5e0:	0a000011 	beq	10e62c <lwip_netconn_do_connect+0x9c>
  10e5e4:	e3530040 	cmp	r3, #64	; 0x40
  10e5e8:	0a000002 	beq	10e5f8 <lwip_netconn_do_connect+0x68>
  10e5ec:	e3530010 	cmp	r3, #16
  10e5f0:	0a00001b 	beq	10e664 <lwip_netconn_do_connect+0xd4>
  10e5f4:	ea000093 	b	10e848 <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e5f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5fc:	e5933000 	ldr	r3, [r3]
  10e600:	e5932008 	ldr	r2, [r3, #8]
  10e604:	e51b3008 	ldr	r3, [fp, #-8]
  10e608:	e5933008 	ldr	r3, [r3, #8]
  10e60c:	e1a01003 	mov	r1, r3
  10e610:	e1a00002 	mov	r0, r2
  10e614:	eb003775 	bl	11c3f0 <raw_connect>
  10e618:	e1a03000 	mov	r3, r0
  10e61c:	e1a02003 	mov	r2, r3
  10e620:	e51b3008 	ldr	r3, [fp, #-8]
  10e624:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e628:	ea000092 	b	10e878 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e62c:	e51b3008 	ldr	r3, [fp, #-8]
  10e630:	e5933000 	ldr	r3, [r3]
  10e634:	e5930008 	ldr	r0, [r3, #8]
  10e638:	e51b3008 	ldr	r3, [fp, #-8]
  10e63c:	e5931008 	ldr	r1, [r3, #8]
  10e640:	e51b3008 	ldr	r3, [fp, #-8]
  10e644:	e1d330bc 	ldrh	r3, [r3, #12]
  10e648:	e1a02003 	mov	r2, r3
  10e64c:	eb006872 	bl	12881c <udp_connect>
  10e650:	e1a03000 	mov	r3, r0
  10e654:	e1a02003 	mov	r2, r3
  10e658:	e51b3008 	ldr	r3, [fp, #-8]
  10e65c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e660:	ea000084 	b	10e878 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e664:	e51b3008 	ldr	r3, [fp, #-8]
  10e668:	e5933000 	ldr	r3, [r3]
  10e66c:	e5933004 	ldr	r3, [r3, #4]
  10e670:	e3530003 	cmp	r3, #3
  10e674:	1a000003 	bne	10e688 <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e678:	e51b3008 	ldr	r3, [fp, #-8]
  10e67c:	e3e02008 	mvn	r2, #8
  10e680:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e684:	ea00007a 	b	10e874 <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e688:	e51b3008 	ldr	r3, [fp, #-8]
  10e68c:	e5933000 	ldr	r3, [r3]
  10e690:	e5933004 	ldr	r3, [r3, #4]
  10e694:	e3530000 	cmp	r3, #0
  10e698:	0a000003 	beq	10e6ac <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e69c:	e51b3008 	ldr	r3, [fp, #-8]
  10e6a0:	e3e02009 	mvn	r2, #9
  10e6a4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e6a8:	ea000071 	b	10e874 <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e6ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e6b0:	e5933000 	ldr	r3, [r3]
  10e6b4:	e1a00003 	mov	r0, r3
  10e6b8:	ebfffa2d 	bl	10cf74 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e6bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e6c0:	e5933000 	ldr	r3, [r3]
  10e6c4:	e5930008 	ldr	r0, [r3, #8]
  10e6c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6cc:	e5931008 	ldr	r1, [r3, #8]
  10e6d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6d4:	e1d320bc 	ldrh	r2, [r3, #12]
  10e6d8:	e30e3370 	movw	r3, #58224	; 0xe370
  10e6dc:	e3403010 	movt	r3, #16
  10e6e0:	eb003eff 	bl	11e2e4 <tcp_connect>
  10e6e4:	e1a03000 	mov	r3, r0
  10e6e8:	e1a02003 	mov	r2, r3
  10e6ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e6f0:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e6f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e6f8:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e6fc:	e3530000 	cmp	r3, #0
  10e700:	1a00005b 	bne	10e874 <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e704:	e51b3008 	ldr	r3, [fp, #-8]
  10e708:	e5933000 	ldr	r3, [r3]
  10e70c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e710:	e2033002 	and	r3, r3, #2
  10e714:	e3530000 	cmp	r3, #0
  10e718:	13a03001 	movne	r3, #1
  10e71c:	03a03000 	moveq	r3, #0
  10e720:	e6ef3073 	uxtb	r3, r3
  10e724:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e728:	e51b3008 	ldr	r3, [fp, #-8]
  10e72c:	e5933000 	ldr	r3, [r3]
  10e730:	e3a02003 	mov	r2, #3
  10e734:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e738:	e55b3009 	ldrb	r3, [fp, #-9]
  10e73c:	e3530000 	cmp	r3, #0
  10e740:	0a000008 	beq	10e768 <lwip_netconn_do_connect+0x1d8>
  10e744:	e51b3008 	ldr	r3, [fp, #-8]
  10e748:	e5933000 	ldr	r3, [r3]
  10e74c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e750:	e51b3008 	ldr	r3, [fp, #-8]
  10e754:	e5933000 	ldr	r3, [r3]
  10e758:	e3822004 	orr	r2, r2, #4
  10e75c:	e6ef2072 	uxtb	r2, r2
  10e760:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e764:	ea000007 	b	10e788 <lwip_netconn_do_connect+0x1f8>
  10e768:	e51b3008 	ldr	r3, [fp, #-8]
  10e76c:	e5933000 	ldr	r3, [r3]
  10e770:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e774:	e51b3008 	ldr	r3, [fp, #-8]
  10e778:	e5933000 	ldr	r3, [r3]
  10e77c:	e3c22004 	bic	r2, r2, #4
  10e780:	e6ef2072 	uxtb	r2, r2
  10e784:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e788:	e55b3009 	ldrb	r3, [fp, #-9]
  10e78c:	e3530000 	cmp	r3, #0
  10e790:	0a000003 	beq	10e7a4 <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e794:	e51b3008 	ldr	r3, [fp, #-8]
  10e798:	e3e02004 	mvn	r2, #4
  10e79c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e7a0:	ea000033 	b	10e874 <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e7a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7a8:	e5933000 	ldr	r3, [r3]
  10e7ac:	e51b2008 	ldr	r2, [fp, #-8]
  10e7b0:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e7b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7b8:	e5933000 	ldr	r3, [r3]
  10e7bc:	e5933004 	ldr	r3, [r3, #4]
  10e7c0:	e3530003 	cmp	r3, #3
  10e7c4:	0a000006 	beq	10e7e4 <lwip_netconn_do_connect+0x254>
  10e7c8:	e30609c8 	movw	r0, #27080	; 0x69c8
  10e7cc:	e3400014 	movt	r0, #20
  10e7d0:	ebffd24f 	bl	103114 <rt_kprintf>
  10e7d4:	e30014df 	movw	r1, #1247	; 0x4df
  10e7d8:	e3060690 	movw	r0, #26256	; 0x6690
  10e7dc:	e3400014 	movt	r0, #20
  10e7e0:	ebfff23e 	bl	10b0e0 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e7e4:	e30f0614 	movw	r0, #62996	; 0xf614
  10e7e8:	e3400014 	movt	r0, #20
  10e7ec:	ebfff058 	bl	10a954 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e7f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e7f4:	e5933000 	ldr	r3, [r3]
  10e7f8:	e2833010 	add	r3, r3, #16
  10e7fc:	e3a01000 	mov	r1, #0
  10e800:	e1a00003 	mov	r0, r3
  10e804:	ebffefd6 	bl	10a764 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e808:	e30f0614 	movw	r0, #62996	; 0xf614
  10e80c:	e3400014 	movt	r0, #20
  10e810:	ebfff043 	bl	10a924 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e814:	e51b3008 	ldr	r3, [fp, #-8]
  10e818:	e5933000 	ldr	r3, [r3]
  10e81c:	e5933004 	ldr	r3, [r3, #4]
  10e820:	e3530003 	cmp	r3, #3
  10e824:	1a000024 	bne	10e8bc <lwip_netconn_do_connect+0x32c>
  10e828:	e30609c8 	movw	r0, #27080	; 0x69c8
  10e82c:	e3400014 	movt	r0, #20
  10e830:	ebffd237 	bl	103114 <rt_kprintf>
  10e834:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e838:	e3060690 	movw	r0, #26256	; 0x6690
  10e83c:	e3400014 	movt	r0, #20
  10e840:	ebfff226 	bl	10b0e0 <sys_arch_assert>
            return;
  10e844:	ea00001c 	b	10e8bc <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e848:	e3060a50 	movw	r0, #27216	; 0x6a50
  10e84c:	e3400014 	movt	r0, #20
  10e850:	ebffd22f 	bl	103114 <rt_kprintf>
  10e854:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e858:	e3060690 	movw	r0, #26256	; 0x6690
  10e85c:	e3400014 	movt	r0, #20
  10e860:	ebfff21e 	bl	10b0e0 <sys_arch_assert>
  10e864:	e51b3008 	ldr	r3, [fp, #-8]
  10e868:	e3e02005 	mvn	r2, #5
  10e86c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e870:	ea000000 	b	10e878 <lwip_netconn_do_connect+0x2e8>
      break;
  10e874:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e878:	e51b3008 	ldr	r3, [fp, #-8]
  10e87c:	e5933000 	ldr	r3, [r3]
  10e880:	e3530000 	cmp	r3, #0
  10e884:	0a00000d 	beq	10e8c0 <lwip_netconn_do_connect+0x330>
  10e888:	ebffce6b 	bl	10223c <rt_enter_critical>
  10e88c:	e51b3008 	ldr	r3, [fp, #-8]
  10e890:	e5933000 	ldr	r3, [r3]
  10e894:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e898:	e373000c 	cmn	r3, #12
  10e89c:	ba000004 	blt	10e8b4 <lwip_netconn_do_connect+0x324>
  10e8a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8a4:	e5933000 	ldr	r3, [r3]
  10e8a8:	e51b2008 	ldr	r2, [fp, #-8]
  10e8ac:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e8b0:	e5c3200c 	strb	r2, [r3, #12]
  10e8b4:	ebffce66 	bl	102254 <rt_exit_critical>
  10e8b8:	ea000000 	b	10e8c0 <lwip_netconn_do_connect+0x330>
            return;
  10e8bc:	e320f000 	nop	{0}
}
  10e8c0:	e24bd004 	sub	sp, fp, #4
  10e8c4:	e8bd8800 	pop	{fp, pc}

0010e8c8 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e8c8:	e92d4800 	push	{fp, lr}
  10e8cc:	e28db004 	add	fp, sp, #4
  10e8d0:	e24dd010 	sub	sp, sp, #16
  10e8d4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e8d8:	e51b3010 	ldr	r3, [fp, #-16]
  10e8dc:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8e4:	e5933000 	ldr	r3, [r3]
  10e8e8:	e5933000 	ldr	r3, [r3]
  10e8ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e8f0:	e3530020 	cmp	r3, #32
  10e8f4:	1a000008 	bne	10e91c <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8fc:	e5933000 	ldr	r3, [r3]
  10e900:	e5933008 	ldr	r3, [r3, #8]
  10e904:	e1a00003 	mov	r0, r3
  10e908:	eb006813 	bl	12895c <udp_disconnect>
    msg->err = ERR_OK;
  10e90c:	e51b3008 	ldr	r3, [fp, #-8]
  10e910:	e3a02000 	mov	r2, #0
  10e914:	e5c32004 	strb	r2, [r3, #4]
  10e918:	ea000002 	b	10e928 <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e91c:	e51b3008 	ldr	r3, [fp, #-8]
  10e920:	e3e02005 	mvn	r2, #5
  10e924:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e928:	e51b3008 	ldr	r3, [fp, #-8]
  10e92c:	e5933000 	ldr	r3, [r3]
  10e930:	e3530000 	cmp	r3, #0
  10e934:	0a00000b 	beq	10e968 <lwip_netconn_do_disconnect+0xa0>
  10e938:	ebffce3f 	bl	10223c <rt_enter_critical>
  10e93c:	e51b3008 	ldr	r3, [fp, #-8]
  10e940:	e5933000 	ldr	r3, [r3]
  10e944:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e948:	e373000c 	cmn	r3, #12
  10e94c:	ba000004 	blt	10e964 <lwip_netconn_do_disconnect+0x9c>
  10e950:	e51b3008 	ldr	r3, [fp, #-8]
  10e954:	e5933000 	ldr	r3, [r3]
  10e958:	e51b2008 	ldr	r2, [fp, #-8]
  10e95c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e960:	e5c3200c 	strb	r2, [r3, #12]
  10e964:	ebffce3a 	bl	102254 <rt_exit_critical>
}
  10e968:	e320f000 	nop	{0}
  10e96c:	e24bd004 	sub	sp, fp, #4
  10e970:	e8bd8800 	pop	{fp, pc}

0010e974 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e974:	e92d4800 	push	{fp, lr}
  10e978:	e28db004 	add	fp, sp, #4
  10e97c:	e24dd018 	sub	sp, sp, #24
  10e980:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e988:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e98c:	e51b3008 	ldr	r3, [fp, #-8]
  10e990:	e5933000 	ldr	r3, [r3]
  10e994:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e998:	e373000c 	cmn	r3, #12
  10e99c:	aa000005 	bge	10e9b8 <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e9a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a4:	e5933000 	ldr	r3, [r3]
  10e9a8:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e9ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e9b0:	e5c32004 	strb	r2, [r3, #4]
  10e9b4:	ea000083 	b	10ebc8 <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e9b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9bc:	e3e0200a 	mvn	r2, #10
  10e9c0:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c8:	e5933000 	ldr	r3, [r3]
  10e9cc:	e5933008 	ldr	r3, [r3, #8]
  10e9d0:	e3530000 	cmp	r3, #0
  10e9d4:	0a00007b 	beq	10ebc8 <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e9d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9dc:	e5933000 	ldr	r3, [r3]
  10e9e0:	e5933000 	ldr	r3, [r3]
  10e9e4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e9e8:	e3530010 	cmp	r3, #16
  10e9ec:	1a000072 	bne	10ebbc <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10e9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9f4:	e5933000 	ldr	r3, [r3]
  10e9f8:	e5933004 	ldr	r3, [r3, #4]
  10e9fc:	e3530000 	cmp	r3, #0
  10ea00:	1a000064 	bne	10eb98 <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10ea04:	e51b3008 	ldr	r3, [fp, #-8]
  10ea08:	e5933000 	ldr	r3, [r3]
  10ea0c:	e5933008 	ldr	r3, [r3, #8]
  10ea10:	e5933014 	ldr	r3, [r3, #20]
  10ea14:	e3530000 	cmp	r3, #0
  10ea18:	0a000003 	beq	10ea2c <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10ea1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea20:	e3e02005 	mvn	r2, #5
  10ea24:	e5c32004 	strb	r2, [r3, #4]
  10ea28:	ea000066 	b	10ebc8 <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10ea2c:	e3e03000 	mvn	r3, #0
  10ea30:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10ea34:	e51b3008 	ldr	r3, [fp, #-8]
  10ea38:	e5933000 	ldr	r3, [r3]
  10ea3c:	e5933008 	ldr	r3, [r3, #8]
  10ea40:	e24b2011 	sub	r2, fp, #17
  10ea44:	e55b1009 	ldrb	r1, [fp, #-9]
  10ea48:	e1a00003 	mov	r0, r3
  10ea4c:	eb003ca5 	bl	11dce8 <tcp_listen_with_backlog_and_err>
  10ea50:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10ea54:	e51b3010 	ldr	r3, [fp, #-16]
  10ea58:	e3530000 	cmp	r3, #0
  10ea5c:	1a000003 	bne	10ea70 <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10ea60:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10ea64:	e51b3008 	ldr	r3, [fp, #-8]
  10ea68:	e5c32004 	strb	r2, [r3, #4]
  10ea6c:	ea000055 	b	10ebc8 <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10ea70:	e51b3008 	ldr	r3, [fp, #-8]
  10ea74:	e5933000 	ldr	r3, [r3]
  10ea78:	e2833014 	add	r3, r3, #20
  10ea7c:	e1a00003 	mov	r0, r3
  10ea80:	ebfff14d 	bl	10afbc <sys_mbox_valid>
  10ea84:	e1a03000 	mov	r3, r0
  10ea88:	e3530000 	cmp	r3, #0
  10ea8c:	0a000009 	beq	10eab8 <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10ea90:	e51b3008 	ldr	r3, [fp, #-8]
  10ea94:	e5933000 	ldr	r3, [r3]
  10ea98:	e2833014 	add	r3, r3, #20
  10ea9c:	e1a00003 	mov	r0, r3
  10eaa0:	ebfff00b 	bl	10aad4 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10eaa4:	e51b3008 	ldr	r3, [fp, #-8]
  10eaa8:	e5933000 	ldr	r3, [r3]
  10eaac:	e2833014 	add	r3, r3, #20
  10eab0:	e1a00003 	mov	r0, r3
  10eab4:	ebfff14a 	bl	10afe4 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10eab8:	e51b3008 	ldr	r3, [fp, #-8]
  10eabc:	e3a02000 	mov	r2, #0
  10eac0:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10eac4:	e51b3008 	ldr	r3, [fp, #-8]
  10eac8:	e5933000 	ldr	r3, [r3]
  10eacc:	e2833018 	add	r3, r3, #24
  10ead0:	e1a00003 	mov	r0, r3
  10ead4:	ebfff138 	bl	10afbc <sys_mbox_valid>
  10ead8:	e1a03000 	mov	r3, r0
  10eadc:	e3530000 	cmp	r3, #0
  10eae0:	1a000009 	bne	10eb0c <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10eae4:	e51b3008 	ldr	r3, [fp, #-8]
  10eae8:	e5933000 	ldr	r3, [r3]
  10eaec:	e2833018 	add	r3, r3, #24
  10eaf0:	e3a0100a 	mov	r1, #10
  10eaf4:	e1a00003 	mov	r0, r3
  10eaf8:	ebffefc0 	bl	10aa00 <sys_mbox_new>
  10eafc:	e1a03000 	mov	r3, r0
  10eb00:	e1a02003 	mov	r2, r3
  10eb04:	e51b3008 	ldr	r3, [fp, #-8]
  10eb08:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10eb0c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb10:	e1d330d4 	ldrsb	r3, [r3, #4]
  10eb14:	e3530000 	cmp	r3, #0
  10eb18:	1a000017 	bne	10eb7c <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10eb1c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb20:	e5933000 	ldr	r3, [r3]
  10eb24:	e3a02002 	mov	r2, #2
  10eb28:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10eb2c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb30:	e5933000 	ldr	r3, [r3]
  10eb34:	e51b2010 	ldr	r2, [fp, #-16]
  10eb38:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10eb3c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb40:	e5933000 	ldr	r3, [r3]
  10eb44:	e5932008 	ldr	r2, [r3, #8]
  10eb48:	e51b3008 	ldr	r3, [fp, #-8]
  10eb4c:	e5933000 	ldr	r3, [r3]
  10eb50:	e1a01003 	mov	r1, r3
  10eb54:	e1a00002 	mov	r0, r2
  10eb58:	eb0043ff 	bl	11fb5c <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10eb5c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb60:	e5933000 	ldr	r3, [r3]
  10eb64:	e5933008 	ldr	r3, [r3, #8]
  10eb68:	e30c1fec 	movw	r1, #53228	; 0xcfec
  10eb6c:	e3401010 	movt	r1, #16
  10eb70:	e1a00003 	mov	r0, r3
  10eb74:	eb004452 	bl	11fcc4 <tcp_accept>
  10eb78:	ea000012 	b	10ebc8 <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10eb7c:	e51b0010 	ldr	r0, [fp, #-16]
  10eb80:	eb003aab 	bl	11d634 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10eb84:	e51b3008 	ldr	r3, [fp, #-8]
  10eb88:	e5933000 	ldr	r3, [r3]
  10eb8c:	e3a02000 	mov	r2, #0
  10eb90:	e5832008 	str	r2, [r3, #8]
  10eb94:	ea00000b 	b	10ebc8 <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10eb98:	e51b3008 	ldr	r3, [fp, #-8]
  10eb9c:	e5933000 	ldr	r3, [r3]
  10eba0:	e5933004 	ldr	r3, [r3, #4]
  10eba4:	e3530002 	cmp	r3, #2
  10eba8:	1a000006 	bne	10ebc8 <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10ebac:	e51b3008 	ldr	r3, [fp, #-8]
  10ebb0:	e3a02000 	mov	r2, #0
  10ebb4:	e5c32004 	strb	r2, [r3, #4]
  10ebb8:	ea000002 	b	10ebc8 <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10ebbc:	e51b3008 	ldr	r3, [fp, #-8]
  10ebc0:	e3e0200f 	mvn	r2, #15
  10ebc4:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10ebc8:	e51b3008 	ldr	r3, [fp, #-8]
  10ebcc:	e5933000 	ldr	r3, [r3]
  10ebd0:	e3530000 	cmp	r3, #0
  10ebd4:	0a00000b 	beq	10ec08 <lwip_netconn_do_listen+0x294>
  10ebd8:	ebffcd97 	bl	10223c <rt_enter_critical>
  10ebdc:	e51b3008 	ldr	r3, [fp, #-8]
  10ebe0:	e5933000 	ldr	r3, [r3]
  10ebe4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ebe8:	e373000c 	cmn	r3, #12
  10ebec:	ba000004 	blt	10ec04 <lwip_netconn_do_listen+0x290>
  10ebf0:	e51b3008 	ldr	r3, [fp, #-8]
  10ebf4:	e5933000 	ldr	r3, [r3]
  10ebf8:	e51b2008 	ldr	r2, [fp, #-8]
  10ebfc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ec00:	e5c3200c 	strb	r2, [r3, #12]
  10ec04:	ebffcd92 	bl	102254 <rt_exit_critical>
}
  10ec08:	e320f000 	nop	{0}
  10ec0c:	e24bd004 	sub	sp, fp, #4
  10ec10:	e8bd8800 	pop	{fp, pc}

0010ec14 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10ec14:	e92d4800 	push	{fp, lr}
  10ec18:	e28db004 	add	fp, sp, #4
  10ec1c:	e24dd010 	sub	sp, sp, #16
  10ec20:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10ec24:	e51b3010 	ldr	r3, [fp, #-16]
  10ec28:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10ec2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec30:	e5933000 	ldr	r3, [r3]
  10ec34:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ec38:	e373000c 	cmn	r3, #12
  10ec3c:	aa000005 	bge	10ec58 <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10ec40:	e51b3008 	ldr	r3, [fp, #-8]
  10ec44:	e5933000 	ldr	r3, [r3]
  10ec48:	e1d320dc 	ldrsb	r2, [r3, #12]
  10ec4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec50:	e5c32004 	strb	r2, [r3, #4]
  10ec54:	ea00005e 	b	10edd4 <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10ec58:	e51b3008 	ldr	r3, [fp, #-8]
  10ec5c:	e3e0200a 	mvn	r2, #10
  10ec60:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10ec64:	e51b3008 	ldr	r3, [fp, #-8]
  10ec68:	e5933000 	ldr	r3, [r3]
  10ec6c:	e5933008 	ldr	r3, [r3, #8]
  10ec70:	e3530000 	cmp	r3, #0
  10ec74:	0a000055 	beq	10edd0 <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10ec78:	e51b3008 	ldr	r3, [fp, #-8]
  10ec7c:	e5933000 	ldr	r3, [r3]
  10ec80:	e5933000 	ldr	r3, [r3]
  10ec84:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ec88:	e3530020 	cmp	r3, #32
  10ec8c:	0a00002a 	beq	10ed3c <lwip_netconn_do_send+0x128>
  10ec90:	e3530040 	cmp	r3, #64	; 0x40
  10ec94:	0a000000 	beq	10ec9c <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10ec98:	ea00004d 	b	10edd4 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ec9c:	e51b3008 	ldr	r3, [fp, #-8]
  10eca0:	e5933008 	ldr	r3, [r3, #8]
  10eca4:	e2833008 	add	r3, r3, #8
  10eca8:	e3530000 	cmp	r3, #0
  10ecac:	0a000004 	beq	10ecc4 <lwip_netconn_do_send+0xb0>
  10ecb0:	e51b3008 	ldr	r3, [fp, #-8]
  10ecb4:	e5933008 	ldr	r3, [r3, #8]
  10ecb8:	e5933008 	ldr	r3, [r3, #8]
  10ecbc:	e3530000 	cmp	r3, #0
  10ecc0:	1a00000d 	bne	10ecfc <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10ecc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ecc8:	e5933000 	ldr	r3, [r3]
  10eccc:	e5932008 	ldr	r2, [r3, #8]
  10ecd0:	e51b3008 	ldr	r3, [fp, #-8]
  10ecd4:	e5933008 	ldr	r3, [r3, #8]
  10ecd8:	e5933000 	ldr	r3, [r3]
  10ecdc:	e1a01003 	mov	r1, r3
  10ece0:	e1a00002 	mov	r0, r2
  10ece4:	eb00367a 	bl	11c6d4 <raw_send>
  10ece8:	e1a03000 	mov	r3, r0
  10ecec:	e1a02003 	mov	r2, r3
  10ecf0:	e51b3008 	ldr	r3, [fp, #-8]
  10ecf4:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ecf8:	ea000035 	b	10edd4 <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10ecfc:	e51b3008 	ldr	r3, [fp, #-8]
  10ed00:	e5933000 	ldr	r3, [r3]
  10ed04:	e5930008 	ldr	r0, [r3, #8]
  10ed08:	e51b3008 	ldr	r3, [fp, #-8]
  10ed0c:	e5933008 	ldr	r3, [r3, #8]
  10ed10:	e5931000 	ldr	r1, [r3]
  10ed14:	e51b3008 	ldr	r3, [fp, #-8]
  10ed18:	e5933008 	ldr	r3, [r3, #8]
  10ed1c:	e2833008 	add	r3, r3, #8
  10ed20:	e1a02003 	mov	r2, r3
  10ed24:	eb0035dc 	bl	11c49c <raw_sendto>
  10ed28:	e1a03000 	mov	r3, r0
  10ed2c:	e1a02003 	mov	r2, r3
  10ed30:	e51b3008 	ldr	r3, [fp, #-8]
  10ed34:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed38:	ea000025 	b	10edd4 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ed3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed40:	e5933008 	ldr	r3, [r3, #8]
  10ed44:	e5933008 	ldr	r3, [r3, #8]
  10ed48:	e3530000 	cmp	r3, #0
  10ed4c:	1a00000d 	bne	10ed88 <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10ed50:	e51b3008 	ldr	r3, [fp, #-8]
  10ed54:	e5933000 	ldr	r3, [r3]
  10ed58:	e5932008 	ldr	r2, [r3, #8]
  10ed5c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed60:	e5933008 	ldr	r3, [r3, #8]
  10ed64:	e5933000 	ldr	r3, [r3]
  10ed68:	e1a01003 	mov	r1, r3
  10ed6c:	e1a00002 	mov	r0, r2
  10ed70:	eb0064d5 	bl	1280cc <udp_send>
  10ed74:	e1a03000 	mov	r3, r0
  10ed78:	e1a02003 	mov	r2, r3
  10ed7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed80:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed84:	ea000012 	b	10edd4 <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10ed88:	e51b3008 	ldr	r3, [fp, #-8]
  10ed8c:	e5933000 	ldr	r3, [r3]
  10ed90:	e5930008 	ldr	r0, [r3, #8]
  10ed94:	e51b3008 	ldr	r3, [fp, #-8]
  10ed98:	e5933008 	ldr	r3, [r3, #8]
  10ed9c:	e5931000 	ldr	r1, [r3]
  10eda0:	e51b3008 	ldr	r3, [fp, #-8]
  10eda4:	e5933008 	ldr	r3, [r3, #8]
  10eda8:	e2832008 	add	r2, r3, #8
  10edac:	e51b3008 	ldr	r3, [fp, #-8]
  10edb0:	e5933008 	ldr	r3, [r3, #8]
  10edb4:	e1d330bc 	ldrh	r3, [r3, #12]
  10edb8:	eb0064d8 	bl	128120 <udp_sendto>
  10edbc:	e1a03000 	mov	r3, r0
  10edc0:	e1a02003 	mov	r2, r3
  10edc4:	e51b3008 	ldr	r3, [fp, #-8]
  10edc8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10edcc:	ea000000 	b	10edd4 <lwip_netconn_do_send+0x1c0>
      }
    }
  10edd0:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10edd4:	e51b3008 	ldr	r3, [fp, #-8]
  10edd8:	e5933000 	ldr	r3, [r3]
  10eddc:	e3530000 	cmp	r3, #0
  10ede0:	0a00000b 	beq	10ee14 <lwip_netconn_do_send+0x200>
  10ede4:	ebffcd14 	bl	10223c <rt_enter_critical>
  10ede8:	e51b3008 	ldr	r3, [fp, #-8]
  10edec:	e5933000 	ldr	r3, [r3]
  10edf0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10edf4:	e373000c 	cmn	r3, #12
  10edf8:	ba000004 	blt	10ee10 <lwip_netconn_do_send+0x1fc>
  10edfc:	e51b3008 	ldr	r3, [fp, #-8]
  10ee00:	e5933000 	ldr	r3, [r3]
  10ee04:	e51b2008 	ldr	r2, [fp, #-8]
  10ee08:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ee0c:	e5c3200c 	strb	r2, [r3, #12]
  10ee10:	ebffcd0f 	bl	102254 <rt_exit_critical>
}
  10ee14:	e320f000 	nop	{0}
  10ee18:	e24bd004 	sub	sp, fp, #4
  10ee1c:	e8bd8800 	pop	{fp, pc}

0010ee20 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10ee20:	e92d4800 	push	{fp, lr}
  10ee24:	e28db004 	add	fp, sp, #4
  10ee28:	e24dd018 	sub	sp, sp, #24
  10ee2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10ee30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ee34:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10ee38:	e51b300c 	ldr	r3, [fp, #-12]
  10ee3c:	e3a02000 	mov	r2, #0
  10ee40:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10ee44:	e51b300c 	ldr	r3, [fp, #-12]
  10ee48:	e5933000 	ldr	r3, [r3]
  10ee4c:	e5933008 	ldr	r3, [r3, #8]
  10ee50:	e3530000 	cmp	r3, #0
  10ee54:	0a00001e 	beq	10eed4 <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10ee58:	e51b300c 	ldr	r3, [fp, #-12]
  10ee5c:	e5933000 	ldr	r3, [r3]
  10ee60:	e5933000 	ldr	r3, [r3]
  10ee64:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ee68:	e3530010 	cmp	r3, #16
  10ee6c:	1a000018 	bne	10eed4 <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10ee70:	e51b300c 	ldr	r3, [fp, #-12]
  10ee74:	e5933008 	ldr	r3, [r3, #8]
  10ee78:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10ee7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ee80:	e3530801 	cmp	r3, #65536	; 0x10000
  10ee84:	2a000002 	bcs	10ee94 <lwip_netconn_do_recv+0x74>
  10ee88:	e51b3008 	ldr	r3, [fp, #-8]
  10ee8c:	e6ff3073 	uxth	r3, r3
  10ee90:	ea000000 	b	10ee98 <lwip_netconn_do_recv+0x78>
  10ee94:	e30f3fff 	movw	r3, #65535	; 0xffff
  10ee98:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10ee9c:	e51b300c 	ldr	r3, [fp, #-12]
  10eea0:	e5933000 	ldr	r3, [r3]
  10eea4:	e5933008 	ldr	r3, [r3, #8]
  10eea8:	e15b20be 	ldrh	r2, [fp, #-14]
  10eeac:	e1a01002 	mov	r1, r2
  10eeb0:	e1a00003 	mov	r0, r3
  10eeb4:	eb003c81 	bl	11e0c0 <tcp_recved>
        remaining -= recved;
  10eeb8:	e15b30be 	ldrh	r3, [fp, #-14]
  10eebc:	e51b2008 	ldr	r2, [fp, #-8]
  10eec0:	e0423003 	sub	r3, r2, r3
  10eec4:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10eec8:	e51b3008 	ldr	r3, [fp, #-8]
  10eecc:	e3530000 	cmp	r3, #0
  10eed0:	1affffe9 	bne	10ee7c <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eed4:	e51b300c 	ldr	r3, [fp, #-12]
  10eed8:	e5933000 	ldr	r3, [r3]
  10eedc:	e3530000 	cmp	r3, #0
  10eee0:	0a00000b 	beq	10ef14 <lwip_netconn_do_recv+0xf4>
  10eee4:	ebffccd4 	bl	10223c <rt_enter_critical>
  10eee8:	e51b300c 	ldr	r3, [fp, #-12]
  10eeec:	e5933000 	ldr	r3, [r3]
  10eef0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eef4:	e373000c 	cmn	r3, #12
  10eef8:	ba000004 	blt	10ef10 <lwip_netconn_do_recv+0xf0>
  10eefc:	e51b300c 	ldr	r3, [fp, #-12]
  10ef00:	e5933000 	ldr	r3, [r3]
  10ef04:	e51b200c 	ldr	r2, [fp, #-12]
  10ef08:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ef0c:	e5c3200c 	strb	r2, [r3, #12]
  10ef10:	ebffcccf 	bl	102254 <rt_exit_critical>
}
  10ef14:	e320f000 	nop	{0}
  10ef18:	e24bd004 	sub	sp, fp, #4
  10ef1c:	e8bd8800 	pop	{fp, pc}

0010ef20 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10ef20:	e92d4800 	push	{fp, lr}
  10ef24:	e28db004 	add	fp, sp, #4
  10ef28:	e24dd020 	sub	sp, sp, #32
  10ef2c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10ef30:	e1a03001 	mov	r3, r1
  10ef34:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10ef38:	e3a03000 	mov	r3, #0
  10ef3c:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10ef40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef44:	e3530000 	cmp	r3, #0
  10ef48:	1a000006 	bne	10ef68 <lwip_netconn_do_writemore+0x48>
  10ef4c:	e3060788 	movw	r0, #26504	; 0x6788
  10ef50:	e3400014 	movt	r0, #20
  10ef54:	ebffd06e 	bl	103114 <rt_kprintf>
  10ef58:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ef5c:	e3060690 	movw	r0, #26256	; 0x6690
  10ef60:	e3400014 	movt	r0, #20
  10ef64:	ebfff05d 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ef68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef6c:	e5933004 	ldr	r3, [r3, #4]
  10ef70:	e3530001 	cmp	r3, #1
  10ef74:	0a000006 	beq	10ef94 <lwip_netconn_do_writemore+0x74>
  10ef78:	e3060a68 	movw	r0, #27240	; 0x6a68
  10ef7c:	e3400014 	movt	r0, #20
  10ef80:	ebffd063 	bl	103114 <rt_kprintf>
  10ef84:	e30015de 	movw	r1, #1502	; 0x5de
  10ef88:	e3060690 	movw	r0, #26256	; 0x6690
  10ef8c:	e3400014 	movt	r0, #20
  10ef90:	ebfff052 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ef94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef98:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ef9c:	e3530000 	cmp	r3, #0
  10efa0:	1a000006 	bne	10efc0 <lwip_netconn_do_writemore+0xa0>
  10efa4:	e3060798 	movw	r0, #26520	; 0x6798
  10efa8:	e3400014 	movt	r0, #20
  10efac:	ebffd058 	bl	103114 <rt_kprintf>
  10efb0:	e30015df 	movw	r1, #1503	; 0x5df
  10efb4:	e3060690 	movw	r0, #26256	; 0x6690
  10efb8:	e3400014 	movt	r0, #20
  10efbc:	ebfff047 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10efc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efc4:	e5933008 	ldr	r3, [r3, #8]
  10efc8:	e3530000 	cmp	r3, #0
  10efcc:	1a000006 	bne	10efec <lwip_netconn_do_writemore+0xcc>
  10efd0:	e3060a88 	movw	r0, #27272	; 0x6a88
  10efd4:	e3400014 	movt	r0, #20
  10efd8:	ebffd04d 	bl	103114 <rt_kprintf>
  10efdc:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10efe0:	e3060690 	movw	r0, #26256	; 0x6690
  10efe4:	e3400014 	movt	r0, #20
  10efe8:	ebfff03c 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10efec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eff0:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10eff4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eff8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10effc:	e593300c 	ldr	r3, [r3, #12]
  10f000:	e1520003 	cmp	r2, r3
  10f004:	3a000006 	bcc	10f024 <lwip_netconn_do_writemore+0x104>
  10f008:	e3060aa0 	movw	r0, #27296	; 0x6aa0
  10f00c:	e3400014 	movt	r0, #20
  10f010:	ebffd03f 	bl	103114 <rt_kprintf>
  10f014:	e30015e2 	movw	r1, #1506	; 0x5e2
  10f018:	e3060690 	movw	r0, #26256	; 0x6690
  10f01c:	e3400014 	movt	r0, #20
  10f020:	ebfff02e 	bl	10b0e0 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10f024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f028:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f02c:	e5d33010 	ldrb	r3, [r3, #16]
  10f030:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10f034:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f038:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f03c:	e2033002 	and	r3, r3, #2
  10f040:	e3530000 	cmp	r3, #0
  10f044:	1a000003 	bne	10f058 <lwip_netconn_do_writemore+0x138>
  10f048:	e55b300a 	ldrb	r3, [fp, #-10]
  10f04c:	e2033004 	and	r3, r3, #4
  10f050:	e3530000 	cmp	r3, #0
  10f054:	0a000001 	beq	10f060 <lwip_netconn_do_writemore+0x140>
  10f058:	e3a03001 	mov	r3, #1
  10f05c:	ea000000 	b	10f064 <lwip_netconn_do_writemore+0x144>
  10f060:	e3a03000 	mov	r3, #0
  10f064:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10f068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f06c:	e5933020 	ldr	r3, [r3, #32]
  10f070:	e3530000 	cmp	r3, #0
  10f074:	0a000022 	beq	10f104 <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10f078:	ebfff031 	bl	10b144 <sys_now>
  10f07c:	e1a02000 	mov	r2, r0
  10f080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f084:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f088:	e5933014 	ldr	r3, [r3, #20]
  10f08c:	e0423003 	sub	r3, r2, r3
  10f090:	e1a02003 	mov	r2, r3
  10f094:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f098:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10f09c:	e1520003 	cmp	r2, r3
  10f0a0:	ba000017 	blt	10f104 <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10f0a4:	e3a03001 	mov	r3, #1
  10f0a8:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10f0ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0b0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f0b4:	e3530000 	cmp	r3, #0
  10f0b8:	1a000006 	bne	10f0d8 <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10f0bc:	e3e03006 	mvn	r3, #6
  10f0c0:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10f0c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0c8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0cc:	e3a02000 	mov	r2, #0
  10f0d0:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10f0d4:	ea0000df 	b	10f458 <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10f0d8:	e3a03000 	mov	r3, #0
  10f0dc:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10f0e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f0ec:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f0f0:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10f0f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0f8:	e3a02000 	mov	r2, #0
  10f0fc:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10f100:	ea0000d4 	b	10f458 <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10f104:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f108:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f10c:	e5932008 	ldr	r2, [r3, #8]
  10f110:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f114:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f118:	e0823003 	add	r3, r2, r3
  10f11c:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10f120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f124:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f128:	e593200c 	ldr	r2, [r3, #12]
  10f12c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f130:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f134:	e0423003 	sub	r3, r2, r3
  10f138:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10f13c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f140:	e3530801 	cmp	r3, #65536	; 0x10000
  10f144:	3a000005 	bcc	10f160 <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10f148:	e3e03000 	mvn	r3, #0
  10f14c:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10f150:	e55b300a 	ldrb	r3, [fp, #-10]
  10f154:	e3833002 	orr	r3, r3, #2
  10f158:	e54b300a 	strb	r3, [fp, #-10]
  10f15c:	ea000001 	b	10f168 <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10f160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f164:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10f168:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f16c:	e5933008 	ldr	r3, [r3, #8]
  10f170:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f174:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10f178:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10f17c:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f180:	e1520003 	cmp	r2, r3
  10f184:	2a00000d 	bcs	10f1c0 <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10f188:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10f18c:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10f190:	e55b300b 	ldrb	r3, [fp, #-11]
  10f194:	e3530000 	cmp	r3, #0
  10f198:	0a000005 	beq	10f1b4 <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10f19c:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f1a0:	e3530000 	cmp	r3, #0
  10f1a4:	1a000005 	bne	10f1c0 <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10f1a8:	e3e03006 	mvn	r3, #6
  10f1ac:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10f1b0:	ea000021 	b	10f23c <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10f1b4:	e55b300a 	ldrb	r3, [fp, #-10]
  10f1b8:	e3833002 	orr	r3, r3, #2
  10f1bc:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10f1c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1c4:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f1c8:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f1cc:	e0822003 	add	r2, r2, r3
  10f1d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1d4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f1d8:	e593300c 	ldr	r3, [r3, #12]
  10f1dc:	e1520003 	cmp	r2, r3
  10f1e0:	9a000006 	bls	10f200 <lwip_netconn_do_writemore+0x2e0>
  10f1e4:	e3060ad4 	movw	r0, #27348	; 0x6ad4
  10f1e8:	e3400014 	movt	r0, #20
  10f1ec:	ebffcfc8 	bl	103114 <rt_kprintf>
  10f1f0:	e300160d 	movw	r1, #1549	; 0x60d
  10f1f4:	e3060690 	movw	r0, #26256	; 0x6690
  10f1f8:	e3400014 	movt	r0, #20
  10f1fc:	ebffefb7 	bl	10b0e0 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10f200:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f204:	e5930008 	ldr	r0, [r3, #8]
  10f208:	e55b300a 	ldrb	r3, [fp, #-10]
  10f20c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f210:	e51b1010 	ldr	r1, [fp, #-16]
  10f214:	eb00571b 	bl	124e88 <tcp_write>
  10f218:	e1a03000 	mov	r3, r0
  10f21c:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10f220:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f224:	e3530000 	cmp	r3, #0
  10f228:	0a000002 	beq	10f238 <lwip_netconn_do_writemore+0x318>
  10f22c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f230:	e3730001 	cmn	r3, #1
  10f234:	1a00002e 	bne	10f2f4 <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10f238:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10f23c:	e55b300b 	ldrb	r3, [fp, #-11]
  10f240:	e3530000 	cmp	r3, #0
  10f244:	0a000016 	beq	10f2a4 <lwip_netconn_do_writemore+0x384>
  10f248:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f24c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f250:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f254:	e593300c 	ldr	r3, [r3, #12]
  10f258:	e1520003 	cmp	r2, r3
  10f25c:	2a000010 	bcs	10f2a4 <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f260:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f264:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f268:	e3530000 	cmp	r3, #0
  10f26c:	0a000005 	beq	10f288 <lwip_netconn_do_writemore+0x368>
  10f270:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f274:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f278:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f27c:	e3a01003 	mov	r1, #3
  10f280:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f284:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10f288:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f28c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f290:	e3833010 	orr	r3, r3, #16
  10f294:	e6ef2073 	uxtb	r2, r3
  10f298:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f29c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10f2a0:	ea000013 	b	10f2f4 <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f2a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2a8:	e5933008 	ldr	r3, [r3, #8]
  10f2ac:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f2b0:	e3530a01 	cmp	r3, #4096	; 0x1000
  10f2b4:	9a000004 	bls	10f2cc <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10f2b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2bc:	e5933008 	ldr	r3, [r3, #8]
  10f2c0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f2c4:	e353000a 	cmp	r3, #10
  10f2c8:	9a000009 	bls	10f2f4 <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f2cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f2d4:	e3530000 	cmp	r3, #0
  10f2d8:	0a000005 	beq	10f2f4 <lwip_netconn_do_writemore+0x3d4>
  10f2dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2e0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f2e4:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f2e8:	e3a01003 	mov	r1, #3
  10f2ec:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f2f0:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10f2f4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f2f8:	e3530000 	cmp	r3, #0
  10f2fc:	1a00002b 	bne	10f3b0 <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10f300:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f304:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f308:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f30c:	e0822003 	add	r2, r2, r3
  10f310:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f314:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10f318:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f31c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f320:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f324:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f328:	e593300c 	ldr	r3, [r3, #12]
  10f32c:	e1520003 	cmp	r2, r3
  10f330:	0a000002 	beq	10f340 <lwip_netconn_do_writemore+0x420>
  10f334:	e55b300b 	ldrb	r3, [fp, #-11]
  10f338:	e3530000 	cmp	r3, #0
  10f33c:	0a000006 	beq	10f35c <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10f340:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f344:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f348:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f34c:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f350:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f354:	e3a03001 	mov	r3, #1
  10f358:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f35c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f360:	e5933008 	ldr	r3, [r3, #8]
  10f364:	e1a00003 	mov	r0, r3
  10f368:	eb005af7 	bl	125f4c <tcp_output>
  10f36c:	e1a03000 	mov	r3, r0
  10f370:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f374:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f378:	e373000c 	cmn	r3, #12
  10f37c:	ba000002 	blt	10f38c <lwip_netconn_do_writemore+0x46c>
  10f380:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f384:	e3730004 	cmn	r3, #4
  10f388:	1a000032 	bne	10f458 <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f38c:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f390:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f394:	e3a03001 	mov	r3, #1
  10f398:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f39c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3a0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f3a4:	e3a02000 	mov	r2, #0
  10f3a8:	e583200c 	str	r2, [r3, #12]
  10f3ac:	ea000029 	b	10f458 <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f3b0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f3b4:	e3730001 	cmn	r3, #1
  10f3b8:	1a000020 	bne	10f440 <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f3bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3c0:	e5933008 	ldr	r3, [r3, #8]
  10f3c4:	e1a00003 	mov	r0, r3
  10f3c8:	eb005adf 	bl	125f4c <tcp_output>
  10f3cc:	e1a03000 	mov	r3, r0
  10f3d0:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f3d4:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f3d8:	e373000c 	cmn	r3, #12
  10f3dc:	ba000002 	blt	10f3ec <lwip_netconn_do_writemore+0x4cc>
  10f3e0:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f3e4:	e3730004 	cmn	r3, #4
  10f3e8:	1a000008 	bne	10f410 <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f3ec:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f3f0:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f3f4:	e3a03001 	mov	r3, #1
  10f3f8:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f3fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f400:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f404:	e3a02000 	mov	r2, #0
  10f408:	e583200c 	str	r2, [r3, #12]
  10f40c:	ea000011 	b	10f458 <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f410:	e55b300b 	ldrb	r3, [fp, #-11]
  10f414:	e3530000 	cmp	r3, #0
  10f418:	0a00000e 	beq	10f458 <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f41c:	e3e03006 	mvn	r3, #6
  10f420:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f424:	e3a03001 	mov	r3, #1
  10f428:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f42c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f430:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f434:	e3a02000 	mov	r2, #0
  10f438:	e583200c 	str	r2, [r3, #12]
  10f43c:	ea000005 	b	10f458 <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f440:	e3a03001 	mov	r3, #1
  10f444:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f448:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f44c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f450:	e3a02000 	mov	r2, #0
  10f454:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f458:	e55b3009 	ldrb	r3, [fp, #-9]
  10f45c:	e3530000 	cmp	r3, #0
  10f460:	0a000023 	beq	10f4f4 <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f464:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f468:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f46c:	e5933000 	ldr	r3, [r3]
  10f470:	e2833010 	add	r3, r3, #16
  10f474:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f478:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f47c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f480:	e55b2005 	ldrb	r2, [fp, #-5]
  10f484:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f48c:	e3a02000 	mov	r2, #0
  10f490:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f498:	e3a02000 	mov	r2, #0
  10f49c:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f4a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4a4:	e3a02000 	mov	r2, #0
  10f4a8:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f4ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4b0:	e3530000 	cmp	r3, #0
  10f4b4:	0a000008 	beq	10f4dc <lwip_netconn_do_writemore+0x5bc>
  10f4b8:	ebffcb5f 	bl	10223c <rt_enter_critical>
  10f4bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4c0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f4c4:	e373000c 	cmn	r3, #12
  10f4c8:	ba000002 	blt	10f4d8 <lwip_netconn_do_writemore+0x5b8>
  10f4cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4d0:	e55b2005 	ldrb	r2, [fp, #-5]
  10f4d4:	e5c3200c 	strb	r2, [r3, #12]
  10f4d8:	ebffcb5d 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f4dc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f4e0:	e3530000 	cmp	r3, #0
  10f4e4:	0a000004 	beq	10f4fc <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f4e8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f4ec:	ebffec91 	bl	10a738 <sys_sem_signal>
  10f4f0:	ea000001 	b	10f4fc <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f4f4:	e3e03000 	mvn	r3, #0
  10f4f8:	ea000000 	b	10f500 <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f4fc:	e3a03000 	mov	r3, #0
}
  10f500:	e1a00003 	mov	r0, r3
  10f504:	e24bd004 	sub	sp, fp, #4
  10f508:	e8bd8800 	pop	{fp, pc}

0010f50c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f50c:	e92d4800 	push	{fp, lr}
  10f510:	e28db004 	add	fp, sp, #4
  10f514:	e24dd010 	sub	sp, sp, #16
  10f518:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f51c:	e51b3010 	ldr	r3, [fp, #-16]
  10f520:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f524:	e51b3008 	ldr	r3, [fp, #-8]
  10f528:	e5933000 	ldr	r3, [r3]
  10f52c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f530:	e373000c 	cmn	r3, #12
  10f534:	aa000005 	bge	10f550 <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f538:	e51b3008 	ldr	r3, [fp, #-8]
  10f53c:	e5933000 	ldr	r3, [r3]
  10f540:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f544:	e51b3008 	ldr	r3, [fp, #-8]
  10f548:	e5c32004 	strb	r2, [r3, #4]
  10f54c:	ea00006f 	b	10f710 <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f550:	e51b3008 	ldr	r3, [fp, #-8]
  10f554:	e5933000 	ldr	r3, [r3]
  10f558:	e5933000 	ldr	r3, [r3]
  10f55c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f560:	e3530010 	cmp	r3, #16
  10f564:	1a000066 	bne	10f704 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f568:	e51b3008 	ldr	r3, [fp, #-8]
  10f56c:	e5933000 	ldr	r3, [r3]
  10f570:	e5933004 	ldr	r3, [r3, #4]
  10f574:	e3530000 	cmp	r3, #0
  10f578:	0a000003 	beq	10f58c <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f57c:	e51b3008 	ldr	r3, [fp, #-8]
  10f580:	e3e02004 	mvn	r2, #4
  10f584:	e5c32004 	strb	r2, [r3, #4]
  10f588:	ea000060 	b	10f710 <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f58c:	e51b3008 	ldr	r3, [fp, #-8]
  10f590:	e5933000 	ldr	r3, [r3]
  10f594:	e5933008 	ldr	r3, [r3, #8]
  10f598:	e3530000 	cmp	r3, #0
  10f59c:	0a000054 	beq	10f6f4 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f5a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5a4:	e5933000 	ldr	r3, [r3]
  10f5a8:	e3a02001 	mov	r2, #1
  10f5ac:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f5b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5b4:	e5933000 	ldr	r3, [r3]
  10f5b8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f5bc:	e3530000 	cmp	r3, #0
  10f5c0:	1a000004 	bne	10f5d8 <lwip_netconn_do_write+0xcc>
  10f5c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5c8:	e5933000 	ldr	r3, [r3]
  10f5cc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f5d0:	e3530000 	cmp	r3, #0
  10f5d4:	0a000006 	beq	10f5f4 <lwip_netconn_do_write+0xe8>
  10f5d8:	e30609ac 	movw	r0, #27052	; 0x69ac
  10f5dc:	e3400014 	movt	r0, #20
  10f5e0:	ebffcecb 	bl	103114 <rt_kprintf>
  10f5e4:	e300167d 	movw	r1, #1661	; 0x67d
  10f5e8:	e3060690 	movw	r0, #26256	; 0x6690
  10f5ec:	e3400014 	movt	r0, #20
  10f5f0:	ebffeeba 	bl	10b0e0 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f5f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5f8:	e593300c 	ldr	r3, [r3, #12]
  10f5fc:	e3530000 	cmp	r3, #0
  10f600:	1a000006 	bne	10f620 <lwip_netconn_do_write+0x114>
  10f604:	e3060b00 	movw	r0, #27392	; 0x6b00
  10f608:	e3400014 	movt	r0, #20
  10f60c:	ebffcec0 	bl	103114 <rt_kprintf>
  10f610:	e300167e 	movw	r1, #1662	; 0x67e
  10f614:	e3060690 	movw	r0, #26256	; 0x6690
  10f618:	e3400014 	movt	r0, #20
  10f61c:	ebffeeaf 	bl	10b0e0 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f620:	e51b3008 	ldr	r3, [fp, #-8]
  10f624:	e5933000 	ldr	r3, [r3]
  10f628:	e51b2008 	ldr	r2, [fp, #-8]
  10f62c:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f630:	e51b3008 	ldr	r3, [fp, #-8]
  10f634:	e5933000 	ldr	r3, [r3]
  10f638:	e3a02000 	mov	r2, #0
  10f63c:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f640:	e51b3008 	ldr	r3, [fp, #-8]
  10f644:	e5933000 	ldr	r3, [r3]
  10f648:	e3a01000 	mov	r1, #0
  10f64c:	e1a00003 	mov	r0, r3
  10f650:	ebfffe32 	bl	10ef20 <lwip_netconn_do_writemore>
  10f654:	e1a03000 	mov	r3, r0
  10f658:	e3530000 	cmp	r3, #0
  10f65c:	0a00003c 	beq	10f754 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f660:	e51b3008 	ldr	r3, [fp, #-8]
  10f664:	e5933000 	ldr	r3, [r3]
  10f668:	e5933004 	ldr	r3, [r3, #4]
  10f66c:	e3530001 	cmp	r3, #1
  10f670:	0a000006 	beq	10f690 <lwip_netconn_do_write+0x184>
  10f674:	e30609c8 	movw	r0, #27080	; 0x69c8
  10f678:	e3400014 	movt	r0, #20
  10f67c:	ebffcea4 	bl	103114 <rt_kprintf>
  10f680:	e3001683 	movw	r1, #1667	; 0x683
  10f684:	e3060690 	movw	r0, #26256	; 0x6690
  10f688:	e3400014 	movt	r0, #20
  10f68c:	ebffee93 	bl	10b0e0 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f690:	e30f0614 	movw	r0, #62996	; 0xf614
  10f694:	e3400014 	movt	r0, #20
  10f698:	ebffecad 	bl	10a954 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f69c:	e51b3008 	ldr	r3, [fp, #-8]
  10f6a0:	e5933000 	ldr	r3, [r3]
  10f6a4:	e2833010 	add	r3, r3, #16
  10f6a8:	e3a01000 	mov	r1, #0
  10f6ac:	e1a00003 	mov	r0, r3
  10f6b0:	ebffec2b 	bl	10a764 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f6b4:	e30f0614 	movw	r0, #62996	; 0xf614
  10f6b8:	e3400014 	movt	r0, #20
  10f6bc:	ebffec98 	bl	10a924 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f6c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f6c4:	e5933000 	ldr	r3, [r3]
  10f6c8:	e5933004 	ldr	r3, [r3, #4]
  10f6cc:	e3530001 	cmp	r3, #1
  10f6d0:	1a00001f 	bne	10f754 <lwip_netconn_do_write+0x248>
  10f6d4:	e30609c8 	movw	r0, #27080	; 0x69c8
  10f6d8:	e3400014 	movt	r0, #20
  10f6dc:	ebffce8c 	bl	103114 <rt_kprintf>
  10f6e0:	e3001687 	movw	r1, #1671	; 0x687
  10f6e4:	e3060690 	movw	r0, #26256	; 0x6690
  10f6e8:	e3400014 	movt	r0, #20
  10f6ec:	ebffee7b 	bl	10b0e0 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f6f0:	ea000017 	b	10f754 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f6f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f6f8:	e3e0200a 	mvn	r2, #10
  10f6fc:	e5c32004 	strb	r2, [r3, #4]
  10f700:	ea000002 	b	10f710 <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f704:	e51b3008 	ldr	r3, [fp, #-8]
  10f708:	e3e02005 	mvn	r2, #5
  10f70c:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f710:	e51b3008 	ldr	r3, [fp, #-8]
  10f714:	e5933000 	ldr	r3, [r3]
  10f718:	e3530000 	cmp	r3, #0
  10f71c:	0a00000d 	beq	10f758 <lwip_netconn_do_write+0x24c>
  10f720:	ebffcac5 	bl	10223c <rt_enter_critical>
  10f724:	e51b3008 	ldr	r3, [fp, #-8]
  10f728:	e5933000 	ldr	r3, [r3]
  10f72c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f730:	e373000c 	cmn	r3, #12
  10f734:	ba000004 	blt	10f74c <lwip_netconn_do_write+0x240>
  10f738:	e51b3008 	ldr	r3, [fp, #-8]
  10f73c:	e5933000 	ldr	r3, [r3]
  10f740:	e51b2008 	ldr	r2, [fp, #-8]
  10f744:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f748:	e5c3200c 	strb	r2, [r3, #12]
  10f74c:	ebffcac0 	bl	102254 <rt_exit_critical>
  10f750:	ea000000 	b	10f758 <lwip_netconn_do_write+0x24c>
        return;
  10f754:	e320f000 	nop	{0}
}
  10f758:	e24bd004 	sub	sp, fp, #4
  10f75c:	e8bd8800 	pop	{fp, pc}

0010f760 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f760:	e92d4800 	push	{fp, lr}
  10f764:	e28db004 	add	fp, sp, #4
  10f768:	e24dd010 	sub	sp, sp, #16
  10f76c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f770:	e51b3010 	ldr	r3, [fp, #-16]
  10f774:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f778:	e51b3008 	ldr	r3, [fp, #-8]
  10f77c:	e5933000 	ldr	r3, [r3]
  10f780:	e5933008 	ldr	r3, [r3, #8]
  10f784:	e3530000 	cmp	r3, #0
  10f788:	0a00007e 	beq	10f988 <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f78c:	e51b3008 	ldr	r3, [fp, #-8]
  10f790:	e5d33010 	ldrb	r3, [r3, #16]
  10f794:	e3530000 	cmp	r3, #0
  10f798:	0a000007 	beq	10f7bc <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f79c:	e51b3008 	ldr	r3, [fp, #-8]
  10f7a0:	e5933000 	ldr	r3, [r3]
  10f7a4:	e5932008 	ldr	r2, [r3, #8]
  10f7a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7ac:	e5933008 	ldr	r3, [r3, #8]
  10f7b0:	e5922000 	ldr	r2, [r2]
  10f7b4:	e5832000 	str	r2, [r3]
  10f7b8:	ea000006 	b	10f7d8 <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f7bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f7c0:	e5933000 	ldr	r3, [r3]
  10f7c4:	e5932008 	ldr	r2, [r3, #8]
  10f7c8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7cc:	e5933008 	ldr	r3, [r3, #8]
  10f7d0:	e5922004 	ldr	r2, [r2, #4]
  10f7d4:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f7d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7dc:	e3a02000 	mov	r2, #0
  10f7e0:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f7e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7e8:	e5933000 	ldr	r3, [r3]
  10f7ec:	e5933000 	ldr	r3, [r3]
  10f7f0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f7f4:	e3530020 	cmp	r3, #32
  10f7f8:	0a000015 	beq	10f854 <lwip_netconn_do_getaddr+0xf4>
  10f7fc:	e3530040 	cmp	r3, #64	; 0x40
  10f800:	0a000002 	beq	10f810 <lwip_netconn_do_getaddr+0xb0>
  10f804:	e3530010 	cmp	r3, #16
  10f808:	0a000030 	beq	10f8d0 <lwip_netconn_do_getaddr+0x170>
  10f80c:	ea000054 	b	10f964 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f810:	e51b3008 	ldr	r3, [fp, #-8]
  10f814:	e5d33010 	ldrb	r3, [r3, #16]
  10f818:	e3530000 	cmp	r3, #0
  10f81c:	0a000008 	beq	10f844 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f820:	e51b3008 	ldr	r3, [fp, #-8]
  10f824:	e5933000 	ldr	r3, [r3]
  10f828:	e5933008 	ldr	r3, [r3, #8]
  10f82c:	e5d32010 	ldrb	r2, [r3, #16]
  10f830:	e51b3008 	ldr	r3, [fp, #-8]
  10f834:	e593300c 	ldr	r3, [r3, #12]
  10f838:	e6ff2072 	uxth	r2, r2
  10f83c:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f840:	ea000053 	b	10f994 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f844:	e51b3008 	ldr	r3, [fp, #-8]
  10f848:	e3e0200a 	mvn	r2, #10
  10f84c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f850:	ea00004f 	b	10f994 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f854:	e51b3008 	ldr	r3, [fp, #-8]
  10f858:	e5d33010 	ldrb	r3, [r3, #16]
  10f85c:	e3530000 	cmp	r3, #0
  10f860:	0a000007 	beq	10f884 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f864:	e51b3008 	ldr	r3, [fp, #-8]
  10f868:	e5933000 	ldr	r3, [r3]
  10f86c:	e5932008 	ldr	r2, [r3, #8]
  10f870:	e51b3008 	ldr	r3, [fp, #-8]
  10f874:	e593300c 	ldr	r3, [r3, #12]
  10f878:	e1d221b2 	ldrh	r2, [r2, #18]
  10f87c:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f880:	ea000043 	b	10f994 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f884:	e51b3008 	ldr	r3, [fp, #-8]
  10f888:	e5933000 	ldr	r3, [r3]
  10f88c:	e5933008 	ldr	r3, [r3, #8]
  10f890:	e5d33010 	ldrb	r3, [r3, #16]
  10f894:	e2033004 	and	r3, r3, #4
  10f898:	e3530000 	cmp	r3, #0
  10f89c:	1a000003 	bne	10f8b0 <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f8a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8a4:	e3e0200a 	mvn	r2, #10
  10f8a8:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f8ac:	ea000038 	b	10f994 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f8b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8b4:	e5933000 	ldr	r3, [r3]
  10f8b8:	e5932008 	ldr	r2, [r3, #8]
  10f8bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f8c0:	e593300c 	ldr	r3, [r3, #12]
  10f8c4:	e1d221b4 	ldrh	r2, [r2, #20]
  10f8c8:	e1c320b0 	strh	r2, [r3]
      break;
  10f8cc:	ea000030 	b	10f994 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f8d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8d4:	e5d33010 	ldrb	r3, [r3, #16]
  10f8d8:	e3530000 	cmp	r3, #0
  10f8dc:	1a00000f 	bne	10f920 <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8e4:	e5933000 	ldr	r3, [r3]
  10f8e8:	e5933008 	ldr	r3, [r3, #8]
  10f8ec:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f8f0:	e3530000 	cmp	r3, #0
  10f8f4:	0a000005 	beq	10f910 <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f8fc:	e5933000 	ldr	r3, [r3]
  10f900:	e5933008 	ldr	r3, [r3, #8]
  10f904:	e5933014 	ldr	r3, [r3, #20]
  10f908:	e3530001 	cmp	r3, #1
  10f90c:	1a000003 	bne	10f920 <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f910:	e51b3008 	ldr	r3, [fp, #-8]
  10f914:	e3e0200a 	mvn	r2, #10
  10f918:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f91c:	ea00001c 	b	10f994 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f920:	e51b3008 	ldr	r3, [fp, #-8]
  10f924:	e5d33010 	ldrb	r3, [r3, #16]
  10f928:	e3530000 	cmp	r3, #0
  10f92c:	0a000004 	beq	10f944 <lwip_netconn_do_getaddr+0x1e4>
  10f930:	e51b3008 	ldr	r3, [fp, #-8]
  10f934:	e5933000 	ldr	r3, [r3]
  10f938:	e5933008 	ldr	r3, [r3, #8]
  10f93c:	e1d331ba 	ldrh	r3, [r3, #26]
  10f940:	ea000003 	b	10f954 <lwip_netconn_do_getaddr+0x1f4>
  10f944:	e51b3008 	ldr	r3, [fp, #-8]
  10f948:	e5933000 	ldr	r3, [r3]
  10f94c:	e5933008 	ldr	r3, [r3, #8]
  10f950:	e1d331bc 	ldrh	r3, [r3, #28]
  10f954:	e51b2008 	ldr	r2, [fp, #-8]
  10f958:	e592200c 	ldr	r2, [r2, #12]
  10f95c:	e1c230b0 	strh	r3, [r2]
      break;
  10f960:	ea00000b 	b	10f994 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f964:	e3060b14 	movw	r0, #27412	; 0x6b14
  10f968:	e3400014 	movt	r0, #20
  10f96c:	ebffcde8 	bl	103114 <rt_kprintf>
  10f970:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f974:	e3060690 	movw	r0, #26256	; 0x6690
  10f978:	e3400014 	movt	r0, #20
  10f97c:	ebffedd7 	bl	10b0e0 <sys_arch_assert>
      break;
  10f980:	e320f000 	nop	{0}
  10f984:	ea000002 	b	10f994 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f988:	e51b3008 	ldr	r3, [fp, #-8]
  10f98c:	e3e0200a 	mvn	r2, #10
  10f990:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f994:	e51b3008 	ldr	r3, [fp, #-8]
  10f998:	e5933000 	ldr	r3, [r3]
  10f99c:	e3530000 	cmp	r3, #0
  10f9a0:	0a00000b 	beq	10f9d4 <lwip_netconn_do_getaddr+0x274>
  10f9a4:	ebffca24 	bl	10223c <rt_enter_critical>
  10f9a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9ac:	e5933000 	ldr	r3, [r3]
  10f9b0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f9b4:	e373000c 	cmn	r3, #12
  10f9b8:	ba000004 	blt	10f9d0 <lwip_netconn_do_getaddr+0x270>
  10f9bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f9c0:	e5933000 	ldr	r3, [r3]
  10f9c4:	e51b2008 	ldr	r2, [fp, #-8]
  10f9c8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f9cc:	e5c3200c 	strb	r2, [r3, #12]
  10f9d0:	ebffca1f 	bl	102254 <rt_exit_critical>
}
  10f9d4:	e320f000 	nop	{0}
  10f9d8:	e24bd004 	sub	sp, fp, #4
  10f9dc:	e8bd8800 	pop	{fp, pc}

0010f9e0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f9e0:	e92d4800 	push	{fp, lr}
  10f9e4:	e28db004 	add	fp, sp, #4
  10f9e8:	e24dd010 	sub	sp, sp, #16
  10f9ec:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f9f0:	e51b3010 	ldr	r3, [fp, #-16]
  10f9f4:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10f9f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9fc:	e5933000 	ldr	r3, [r3]
  10fa00:	e5933004 	ldr	r3, [r3, #4]
  10fa04:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10fa08:	e51b3008 	ldr	r3, [fp, #-8]
  10fa0c:	e5933000 	ldr	r3, [r3]
  10fa10:	e5933008 	ldr	r3, [r3, #8]
  10fa14:	e3530000 	cmp	r3, #0
  10fa18:	0a000069 	beq	10fbc4 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fa1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa20:	e5933000 	ldr	r3, [r3]
  10fa24:	e5933000 	ldr	r3, [r3]
  10fa28:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10fa2c:	e3530010 	cmp	r3, #16
  10fa30:	1a000063 	bne	10fbc4 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa34:	e51b3008 	ldr	r3, [fp, #-8]
  10fa38:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fa3c:	e3530003 	cmp	r3, #3
  10fa40:	0a000002 	beq	10fa50 <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa44:	e51b300c 	ldr	r3, [fp, #-12]
  10fa48:	e3530002 	cmp	r3, #2
  10fa4c:	0a00005c 	beq	10fbc4 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10fa50:	e51b300c 	ldr	r3, [fp, #-12]
  10fa54:	e3530003 	cmp	r3, #3
  10fa58:	1a000003 	bne	10fa6c <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10fa5c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa60:	e3e0200a 	mvn	r2, #10
  10fa64:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fa68:	ea000058 	b	10fbd0 <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10fa6c:	e51b300c 	ldr	r3, [fp, #-12]
  10fa70:	e3530001 	cmp	r3, #1
  10fa74:	1a000003 	bne	10fa88 <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10fa78:	e51b3008 	ldr	r3, [fp, #-8]
  10fa7c:	e3e02004 	mvn	r2, #4
  10fa80:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fa84:	ea000051 	b	10fbd0 <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10fa88:	e51b3008 	ldr	r3, [fp, #-8]
  10fa8c:	e5d33008 	ldrb	r3, [r3, #8]
  10fa90:	e2033001 	and	r3, r3, #1
  10fa94:	e3530000 	cmp	r3, #0
  10fa98:	0a000003 	beq	10faac <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10fa9c:	e51b3008 	ldr	r3, [fp, #-8]
  10faa0:	e5933000 	ldr	r3, [r3]
  10faa4:	e1a00003 	mov	r0, r3
  10faa8:	ebfff72a 	bl	10d758 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10faac:	e51b3008 	ldr	r3, [fp, #-8]
  10fab0:	e5933000 	ldr	r3, [r3]
  10fab4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10fab8:	e3530000 	cmp	r3, #0
  10fabc:	1a000004 	bne	10fad4 <lwip_netconn_do_close+0xf4>
  10fac0:	e51b3008 	ldr	r3, [fp, #-8]
  10fac4:	e5933000 	ldr	r3, [r3]
  10fac8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10facc:	e3530000 	cmp	r3, #0
  10fad0:	0a000006 	beq	10faf0 <lwip_netconn_do_close+0x110>
  10fad4:	e30609ac 	movw	r0, #27052	; 0x69ac
  10fad8:	e3400014 	movt	r0, #20
  10fadc:	ebffcd8c 	bl	103114 <rt_kprintf>
  10fae0:	e3001716 	movw	r1, #1814	; 0x716
  10fae4:	e3060690 	movw	r0, #26256	; 0x6690
  10fae8:	e3400014 	movt	r0, #20
  10faec:	ebffed7b 	bl	10b0e0 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10faf0:	e51b3008 	ldr	r3, [fp, #-8]
  10faf4:	e5933000 	ldr	r3, [r3]
  10faf8:	e3a02004 	mov	r2, #4
  10fafc:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10fb00:	e51b3008 	ldr	r3, [fp, #-8]
  10fb04:	e5933000 	ldr	r3, [r3]
  10fb08:	e51b2008 	ldr	r2, [fp, #-8]
  10fb0c:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10fb10:	e51b3008 	ldr	r3, [fp, #-8]
  10fb14:	e5933000 	ldr	r3, [r3]
  10fb18:	e3a01000 	mov	r1, #0
  10fb1c:	e1a00003 	mov	r0, r3
  10fb20:	ebfff776 	bl	10d900 <lwip_netconn_do_close_internal>
  10fb24:	e1a03000 	mov	r3, r0
  10fb28:	e3530000 	cmp	r3, #0
  10fb2c:	0a000038 	beq	10fc14 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10fb30:	e51b3008 	ldr	r3, [fp, #-8]
  10fb34:	e5933000 	ldr	r3, [r3]
  10fb38:	e5933004 	ldr	r3, [r3, #4]
  10fb3c:	e3530004 	cmp	r3, #4
  10fb40:	0a000006 	beq	10fb60 <lwip_netconn_do_close+0x180>
  10fb44:	e30609c8 	movw	r0, #27080	; 0x69c8
  10fb48:	e3400014 	movt	r0, #20
  10fb4c:	ebffcd70 	bl	103114 <rt_kprintf>
  10fb50:	e300171b 	movw	r1, #1819	; 0x71b
  10fb54:	e3060690 	movw	r0, #26256	; 0x6690
  10fb58:	e3400014 	movt	r0, #20
  10fb5c:	ebffed5f 	bl	10b0e0 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10fb60:	e30f0614 	movw	r0, #62996	; 0xf614
  10fb64:	e3400014 	movt	r0, #20
  10fb68:	ebffeb79 	bl	10a954 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10fb6c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb70:	e5933000 	ldr	r3, [r3]
  10fb74:	e2833010 	add	r3, r3, #16
  10fb78:	e3a01000 	mov	r1, #0
  10fb7c:	e1a00003 	mov	r0, r3
  10fb80:	ebffeaf7 	bl	10a764 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10fb84:	e30f0614 	movw	r0, #62996	; 0xf614
  10fb88:	e3400014 	movt	r0, #20
  10fb8c:	ebffeb64 	bl	10a924 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10fb90:	e51b3008 	ldr	r3, [fp, #-8]
  10fb94:	e5933000 	ldr	r3, [r3]
  10fb98:	e5933004 	ldr	r3, [r3, #4]
  10fb9c:	e3530000 	cmp	r3, #0
  10fba0:	0a00001b 	beq	10fc14 <lwip_netconn_do_close+0x234>
  10fba4:	e30609c8 	movw	r0, #27080	; 0x69c8
  10fba8:	e3400014 	movt	r0, #20
  10fbac:	ebffcd58 	bl	103114 <rt_kprintf>
  10fbb0:	e300171f 	movw	r1, #1823	; 0x71f
  10fbb4:	e3060690 	movw	r0, #26256	; 0x6690
  10fbb8:	e3400014 	movt	r0, #20
  10fbbc:	ebffed47 	bl	10b0e0 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10fbc0:	ea000013 	b	10fc14 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10fbc4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbc8:	e3e0200a 	mvn	r2, #10
  10fbcc:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10fbd0:	e51b3008 	ldr	r3, [fp, #-8]
  10fbd4:	e5933000 	ldr	r3, [r3]
  10fbd8:	e3530000 	cmp	r3, #0
  10fbdc:	0a00000d 	beq	10fc18 <lwip_netconn_do_close+0x238>
  10fbe0:	ebffc995 	bl	10223c <rt_enter_critical>
  10fbe4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbe8:	e5933000 	ldr	r3, [r3]
  10fbec:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fbf0:	e373000c 	cmn	r3, #12
  10fbf4:	ba000004 	blt	10fc0c <lwip_netconn_do_close+0x22c>
  10fbf8:	e51b3008 	ldr	r3, [fp, #-8]
  10fbfc:	e5933000 	ldr	r3, [r3]
  10fc00:	e51b2008 	ldr	r2, [fp, #-8]
  10fc04:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fc08:	e5c3200c 	strb	r2, [r3, #12]
  10fc0c:	ebffc990 	bl	102254 <rt_exit_critical>
  10fc10:	ea000000 	b	10fc18 <lwip_netconn_do_close+0x238>
      return;
  10fc14:	e320f000 	nop	{0}
}
  10fc18:	e24bd004 	sub	sp, fp, #4
  10fc1c:	e8bd8800 	pop	{fp, pc}

0010fc20 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10fc20:	e92d4800 	push	{fp, lr}
  10fc24:	e28db004 	add	fp, sp, #4
  10fc28:	e24dd010 	sub	sp, sp, #16
  10fc2c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fc30:	e51b3010 	ldr	r3, [fp, #-16]
  10fc34:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10fc38:	e51b3008 	ldr	r3, [fp, #-8]
  10fc3c:	e5933000 	ldr	r3, [r3]
  10fc40:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fc44:	e373000c 	cmn	r3, #12
  10fc48:	aa000005 	bge	10fc64 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10fc4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc50:	e5933000 	ldr	r3, [r3]
  10fc54:	e1d320dc 	ldrsb	r2, [r3, #12]
  10fc58:	e51b3008 	ldr	r3, [fp, #-8]
  10fc5c:	e5c32004 	strb	r2, [r3, #4]
  10fc60:	ea00002d 	b	10fd1c <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10fc64:	e51b3008 	ldr	r3, [fp, #-8]
  10fc68:	e5933000 	ldr	r3, [r3]
  10fc6c:	e5933008 	ldr	r3, [r3, #8]
  10fc70:	e3530000 	cmp	r3, #0
  10fc74:	0a000025 	beq	10fd10 <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10fc78:	e51b3008 	ldr	r3, [fp, #-8]
  10fc7c:	e5933000 	ldr	r3, [r3]
  10fc80:	e5933000 	ldr	r3, [r3]
  10fc84:	e20330f0 	and	r3, r3, #240	; 0xf0
  10fc88:	e3530020 	cmp	r3, #32
  10fc8c:	1a00001b 	bne	10fd00 <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10fc90:	e51b3008 	ldr	r3, [fp, #-8]
  10fc94:	e5933010 	ldr	r3, [r3, #16]
  10fc98:	e3530000 	cmp	r3, #0
  10fc9c:	1a00000b 	bne	10fcd0 <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fca0:	e51b3008 	ldr	r3, [fp, #-8]
  10fca4:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fca8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcac:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcb0:	e1a01003 	mov	r1, r3
  10fcb4:	e1a00002 	mov	r0, r2
  10fcb8:	eb00828f 	bl	1306fc <igmp_joingroup>
  10fcbc:	e1a03000 	mov	r3, r0
  10fcc0:	e1a02003 	mov	r2, r3
  10fcc4:	e51b3008 	ldr	r3, [fp, #-8]
  10fcc8:	e5c32004 	strb	r2, [r3, #4]
  10fccc:	ea000012 	b	10fd1c <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcd0:	e51b3008 	ldr	r3, [fp, #-8]
  10fcd4:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fcd8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcdc:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fce0:	e1a01003 	mov	r1, r3
  10fce4:	e1a00002 	mov	r0, r2
  10fce8:	eb00833c 	bl	1309e0 <igmp_leavegroup>
  10fcec:	e1a03000 	mov	r3, r0
  10fcf0:	e1a02003 	mov	r2, r3
  10fcf4:	e51b3008 	ldr	r3, [fp, #-8]
  10fcf8:	e5c32004 	strb	r2, [r3, #4]
  10fcfc:	ea000006 	b	10fd1c <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10fd00:	e51b3008 	ldr	r3, [fp, #-8]
  10fd04:	e3e02005 	mvn	r2, #5
  10fd08:	e5c32004 	strb	r2, [r3, #4]
  10fd0c:	ea000002 	b	10fd1c <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10fd10:	e51b3008 	ldr	r3, [fp, #-8]
  10fd14:	e3e0200a 	mvn	r2, #10
  10fd18:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10fd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd20:	e5933000 	ldr	r3, [r3]
  10fd24:	e3530000 	cmp	r3, #0
  10fd28:	0a00000b 	beq	10fd5c <lwip_netconn_do_join_leave_group+0x13c>
  10fd2c:	ebffc942 	bl	10223c <rt_enter_critical>
  10fd30:	e51b3008 	ldr	r3, [fp, #-8]
  10fd34:	e5933000 	ldr	r3, [r3]
  10fd38:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fd3c:	e373000c 	cmn	r3, #12
  10fd40:	ba000004 	blt	10fd58 <lwip_netconn_do_join_leave_group+0x138>
  10fd44:	e51b3008 	ldr	r3, [fp, #-8]
  10fd48:	e5933000 	ldr	r3, [r3]
  10fd4c:	e51b2008 	ldr	r2, [fp, #-8]
  10fd50:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fd54:	e5c3200c 	strb	r2, [r3, #12]
  10fd58:	ebffc93d 	bl	102254 <rt_exit_critical>
}
  10fd5c:	e320f000 	nop	{0}
  10fd60:	e24bd004 	sub	sp, fp, #4
  10fd64:	e8bd8800 	pop	{fp, pc}

0010fd68 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10fd68:	e92d4800 	push	{fp, lr}
  10fd6c:	e28db004 	add	fp, sp, #4
  10fd70:	e24dd018 	sub	sp, sp, #24
  10fd74:	e50b0010 	str	r0, [fp, #-16]
  10fd78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10fd7c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fd80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fd84:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10fd88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10fd8c:	e3530000 	cmp	r3, #0
  10fd90:	1a000004 	bne	10fda8 <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10fd94:	e51b3008 	ldr	r3, [fp, #-8]
  10fd98:	e593300c 	ldr	r3, [r3, #12]
  10fd9c:	e3e02005 	mvn	r2, #5
  10fda0:	e5c32000 	strb	r2, [r3]
  10fda4:	ea000008 	b	10fdcc <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10fda8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdac:	e593300c 	ldr	r3, [r3, #12]
  10fdb0:	e3a02000 	mov	r2, #0
  10fdb4:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fdb8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdbc:	e5933004 	ldr	r3, [r3, #4]
  10fdc0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fdc4:	e5922000 	ldr	r2, [r2]
  10fdc8:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fdcc:	e51b3008 	ldr	r3, [fp, #-8]
  10fdd0:	e5933008 	ldr	r3, [r3, #8]
  10fdd4:	e1a00003 	mov	r0, r3
  10fdd8:	ebffea56 	bl	10a738 <sys_sem_signal>
}
  10fddc:	e320f000 	nop	{0}
  10fde0:	e24bd004 	sub	sp, fp, #4
  10fde4:	e8bd8800 	pop	{fp, pc}

0010fde8 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fde8:	e92d4810 	push	{r4, fp, lr}
  10fdec:	e28db008 	add	fp, sp, #8
  10fdf0:	e24dd01c 	sub	sp, sp, #28
  10fdf4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fdf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fdfc:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fe00:	e3a03000 	mov	r3, #0
  10fe04:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fe08:	e51b3010 	ldr	r3, [fp, #-16]
  10fe0c:	e5930000 	ldr	r0, [r3]
  10fe10:	e51b3010 	ldr	r3, [fp, #-16]
  10fe14:	e5931004 	ldr	r1, [r3, #4]
  10fe18:	e51b3010 	ldr	r3, [fp, #-16]
  10fe1c:	e593400c 	ldr	r4, [r3, #12]
  10fe20:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fe24:	e58d3000 	str	r3, [sp]
  10fe28:	e51b3010 	ldr	r3, [fp, #-16]
  10fe2c:	e30f2d68 	movw	r2, #64872	; 0xfd68
  10fe30:	e3402010 	movt	r2, #16
  10fe34:	eb0020d2 	bl	118184 <dns_gethostbyname_addrtype>
  10fe38:	e1a03000 	mov	r3, r0
  10fe3c:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10fe40:	e51b3010 	ldr	r3, [fp, #-16]
  10fe44:	e593300c 	ldr	r3, [r3, #12]
  10fe48:	e1d330d0 	ldrsb	r3, [r3]
  10fe4c:	e3730005 	cmn	r3, #5
  10fe50:	0a000003 	beq	10fe64 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fe54:	e51b3010 	ldr	r3, [fp, #-16]
  10fe58:	e5933008 	ldr	r3, [r3, #8]
  10fe5c:	e1a00003 	mov	r0, r3
  10fe60:	ebffea34 	bl	10a738 <sys_sem_signal>
  }
}
  10fe64:	e320f000 	nop	{0}
  10fe68:	e24bd008 	sub	sp, fp, #8
  10fe6c:	e8bd8810 	pop	{r4, fp, pc}

0010fe70 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fe70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fe74:	e28db000 	add	fp, sp, #0
  10fe78:	e24dd00c 	sub	sp, sp, #12
  10fe7c:	e1a03000 	mov	r3, r0
  10fe80:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10fe84:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fe88:	e3530000 	cmp	r3, #0
  10fe8c:	ca000003 	bgt	10fea0 <err_to_errno+0x30>
  10fe90:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fe94:	e2633000 	rsb	r3, r3, #0
  10fe98:	e3530010 	cmp	r3, #16
  10fe9c:	da000001 	ble	10fea8 <err_to_errno+0x38>
    return EIO;
  10fea0:	e3a03005 	mov	r3, #5
  10fea4:	ea000004 	b	10febc <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10fea8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10feac:	e2632000 	rsb	r2, r3, #0
  10feb0:	e3063b2c 	movw	r3, #27436	; 0x6b2c
  10feb4:	e3403014 	movt	r3, #20
  10feb8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10febc:	e1a00003 	mov	r0, r3
  10fec0:	e28bd000 	add	sp, fp, #0
  10fec4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fec8:	e12fff1e 	bx	lr

0010fecc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fecc:	e92d4800 	push	{fp, lr}
  10fed0:	e28db004 	add	fp, sp, #4
  10fed4:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10fed8:	e3a02043 	mov	r2, #67	; 0x43
  10fedc:	e3061b70 	movw	r1, #27504	; 0x6b70
  10fee0:	e3401014 	movt	r1, #20
  10fee4:	e3a00007 	mov	r0, #7
  10fee8:	eb002476 	bl	1190c8 <memp_malloc_fn>
  10feec:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fef0:	e51b3008 	ldr	r3, [fp, #-8]
  10fef4:	e3530000 	cmp	r3, #0
  10fef8:	0a000003 	beq	10ff0c <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10fefc:	e3a02010 	mov	r2, #16
  10ff00:	e3a01000 	mov	r1, #0
  10ff04:	e51b0008 	ldr	r0, [fp, #-8]
  10ff08:	eb00c4d5 	bl	141264 <memset>
  }
  return buf;
  10ff0c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ff10:	e1a00003 	mov	r0, r3
  10ff14:	e24bd004 	sub	sp, fp, #4
  10ff18:	e8bd8800 	pop	{fp, pc}

0010ff1c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10ff1c:	e92d4800 	push	{fp, lr}
  10ff20:	e28db004 	add	fp, sp, #4
  10ff24:	e24dd008 	sub	sp, sp, #8
  10ff28:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10ff2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff30:	e3530000 	cmp	r3, #0
  10ff34:	0a000011 	beq	10ff80 <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10ff38:	e51b3008 	ldr	r3, [fp, #-8]
  10ff3c:	e5933000 	ldr	r3, [r3]
  10ff40:	e3530000 	cmp	r3, #0
  10ff44:	0a00000a 	beq	10ff74 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10ff48:	e51b3008 	ldr	r3, [fp, #-8]
  10ff4c:	e5933000 	ldr	r3, [r3]
  10ff50:	e1a00003 	mov	r0, r3
  10ff54:	eb002bd1 	bl	11aea0 <pbuf_free>
      buf->p = buf->ptr = NULL;
  10ff58:	e51b3008 	ldr	r3, [fp, #-8]
  10ff5c:	e3a02000 	mov	r2, #0
  10ff60:	e5832004 	str	r2, [r3, #4]
  10ff64:	e51b3008 	ldr	r3, [fp, #-8]
  10ff68:	e5932004 	ldr	r2, [r3, #4]
  10ff6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff70:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10ff74:	e51b1008 	ldr	r1, [fp, #-8]
  10ff78:	e3a00007 	mov	r0, #7
  10ff7c:	eb0024b9 	bl	119268 <memp_free>
  }
}
  10ff80:	e320f000 	nop	{0}
  10ff84:	e24bd004 	sub	sp, fp, #4
  10ff88:	e8bd8800 	pop	{fp, pc}

0010ff8c <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10ff8c:	e92d4800 	push	{fp, lr}
  10ff90:	e28db004 	add	fp, sp, #4
  10ff94:	e24dd008 	sub	sp, sp, #8
  10ff98:	e50b0008 	str	r0, [fp, #-8]
  10ff9c:	e1a03001 	mov	r3, r1
  10ffa0:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10ffa4:	e51b3008 	ldr	r3, [fp, #-8]
  10ffa8:	e3530000 	cmp	r3, #0
  10ffac:	1a000008 	bne	10ffd4 <netbuf_alloc+0x48>
  10ffb0:	e3060ba0 	movw	r0, #27552	; 0x6ba0
  10ffb4:	e3400014 	movt	r0, #20
  10ffb8:	ebffcc55 	bl	103114 <rt_kprintf>
  10ffbc:	e3a01068 	mov	r1, #104	; 0x68
  10ffc0:	e3060b70 	movw	r0, #27504	; 0x6b70
  10ffc4:	e3400014 	movt	r0, #20
  10ffc8:	ebffec44 	bl	10b0e0 <sys_arch_assert>
  10ffcc:	e3a03000 	mov	r3, #0
  10ffd0:	ea000029 	b	11007c <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10ffd4:	e51b3008 	ldr	r3, [fp, #-8]
  10ffd8:	e5933000 	ldr	r3, [r3]
  10ffdc:	e3530000 	cmp	r3, #0
  10ffe0:	0a000003 	beq	10fff4 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  10ffe4:	e51b3008 	ldr	r3, [fp, #-8]
  10ffe8:	e5933000 	ldr	r3, [r3]
  10ffec:	e1a00003 	mov	r0, r3
  10fff0:	eb002baa 	bl	11aea0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  10fff4:	e15b30ba 	ldrh	r3, [fp, #-10]
  10fff8:	e3a02000 	mov	r2, #0
  10fffc:	e1a01003 	mov	r1, r3
  110000:	e3a00000 	mov	r0, #0
  110004:	eb00289e 	bl	11a284 <pbuf_alloc>
  110008:	e1a02000 	mov	r2, r0
  11000c:	e51b3008 	ldr	r3, [fp, #-8]
  110010:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  110014:	e51b3008 	ldr	r3, [fp, #-8]
  110018:	e5933000 	ldr	r3, [r3]
  11001c:	e3530000 	cmp	r3, #0
  110020:	1a000001 	bne	11002c <netbuf_alloc+0xa0>
     return NULL;
  110024:	e3a03000 	mov	r3, #0
  110028:	ea000013 	b	11007c <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  11002c:	e51b3008 	ldr	r3, [fp, #-8]
  110030:	e5933000 	ldr	r3, [r3]
  110034:	e1d330ba 	ldrh	r3, [r3, #10]
  110038:	e15b20ba 	ldrh	r2, [fp, #-10]
  11003c:	e1520003 	cmp	r2, r3
  110040:	9a000006 	bls	110060 <netbuf_alloc+0xd4>
  110044:	e3060bbc 	movw	r0, #27580	; 0x6bbc
  110048:	e3400014 	movt	r0, #20
  11004c:	ebffcc30 	bl	103114 <rt_kprintf>
  110050:	e3a01073 	mov	r1, #115	; 0x73
  110054:	e3060b70 	movw	r0, #27504	; 0x6b70
  110058:	e3400014 	movt	r0, #20
  11005c:	ebffec1f 	bl	10b0e0 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  110060:	e51b3008 	ldr	r3, [fp, #-8]
  110064:	e5932000 	ldr	r2, [r3]
  110068:	e51b3008 	ldr	r3, [fp, #-8]
  11006c:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  110070:	e51b3008 	ldr	r3, [fp, #-8]
  110074:	e5933000 	ldr	r3, [r3]
  110078:	e5933004 	ldr	r3, [r3, #4]
}
  11007c:	e1a00003 	mov	r0, r3
  110080:	e24bd004 	sub	sp, fp, #4
  110084:	e8bd8800 	pop	{fp, pc}

00110088 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  110088:	e92d4800 	push	{fp, lr}
  11008c:	e28db004 	add	fp, sp, #4
  110090:	e24dd008 	sub	sp, sp, #8
  110094:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  110098:	e51b3008 	ldr	r3, [fp, #-8]
  11009c:	e3530000 	cmp	r3, #0
  1100a0:	1a000007 	bne	1100c4 <netbuf_free+0x3c>
  1100a4:	e3060be0 	movw	r0, #27616	; 0x6be0
  1100a8:	e3400014 	movt	r0, #20
  1100ac:	ebffcc18 	bl	103114 <rt_kprintf>
  1100b0:	e3a01081 	mov	r1, #129	; 0x81
  1100b4:	e3060b70 	movw	r0, #27504	; 0x6b70
  1100b8:	e3400014 	movt	r0, #20
  1100bc:	ebffec07 	bl	10b0e0 <sys_arch_assert>
  1100c0:	ea00000e 	b	110100 <netbuf_free+0x78>
  if (buf->p != NULL) {
  1100c4:	e51b3008 	ldr	r3, [fp, #-8]
  1100c8:	e5933000 	ldr	r3, [r3]
  1100cc:	e3530000 	cmp	r3, #0
  1100d0:	0a000003 	beq	1100e4 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  1100d4:	e51b3008 	ldr	r3, [fp, #-8]
  1100d8:	e5933000 	ldr	r3, [r3]
  1100dc:	e1a00003 	mov	r0, r3
  1100e0:	eb002b6e 	bl	11aea0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  1100e4:	e51b3008 	ldr	r3, [fp, #-8]
  1100e8:	e3a02000 	mov	r2, #0
  1100ec:	e5832004 	str	r2, [r3, #4]
  1100f0:	e51b3008 	ldr	r3, [fp, #-8]
  1100f4:	e5932004 	ldr	r2, [r3, #4]
  1100f8:	e51b3008 	ldr	r3, [fp, #-8]
  1100fc:	e5832000 	str	r2, [r3]
}
  110100:	e24bd004 	sub	sp, fp, #4
  110104:	e8bd8800 	pop	{fp, pc}

00110108 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  110108:	e92d4800 	push	{fp, lr}
  11010c:	e28db004 	add	fp, sp, #4
  110110:	e24dd010 	sub	sp, sp, #16
  110114:	e50b0008 	str	r0, [fp, #-8]
  110118:	e50b100c 	str	r1, [fp, #-12]
  11011c:	e1a03002 	mov	r3, r2
  110120:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  110124:	e51b3008 	ldr	r3, [fp, #-8]
  110128:	e3530000 	cmp	r3, #0
  11012c:	1a000008 	bne	110154 <netbuf_ref+0x4c>
  110130:	e3060bfc 	movw	r0, #27644	; 0x6bfc
  110134:	e3400014 	movt	r0, #20
  110138:	ebffcbf5 	bl	103114 <rt_kprintf>
  11013c:	e3a01095 	mov	r1, #149	; 0x95
  110140:	e3060b70 	movw	r0, #27504	; 0x6b70
  110144:	e3400014 	movt	r0, #20
  110148:	ebffebe4 	bl	10b0e0 <sys_arch_assert>
  11014c:	e3e0300f 	mvn	r3, #15
  110150:	ea000028 	b	1101f8 <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  110154:	e51b3008 	ldr	r3, [fp, #-8]
  110158:	e5933000 	ldr	r3, [r3]
  11015c:	e3530000 	cmp	r3, #0
  110160:	0a000003 	beq	110174 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  110164:	e51b3008 	ldr	r3, [fp, #-8]
  110168:	e5933000 	ldr	r3, [r3]
  11016c:	e1a00003 	mov	r0, r3
  110170:	eb002b4a 	bl	11aea0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  110174:	e3a02002 	mov	r2, #2
  110178:	e3a01000 	mov	r1, #0
  11017c:	e3a00000 	mov	r0, #0
  110180:	eb00283f 	bl	11a284 <pbuf_alloc>
  110184:	e1a02000 	mov	r2, r0
  110188:	e51b3008 	ldr	r3, [fp, #-8]
  11018c:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  110190:	e51b3008 	ldr	r3, [fp, #-8]
  110194:	e5933000 	ldr	r3, [r3]
  110198:	e3530000 	cmp	r3, #0
  11019c:	1a000004 	bne	1101b4 <netbuf_ref+0xac>
    buf->ptr = NULL;
  1101a0:	e51b3008 	ldr	r3, [fp, #-8]
  1101a4:	e3a02000 	mov	r2, #0
  1101a8:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  1101ac:	e3e03000 	mvn	r3, #0
  1101b0:	ea000010 	b	1101f8 <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  1101b4:	e51b3008 	ldr	r3, [fp, #-8]
  1101b8:	e5933000 	ldr	r3, [r3]
  1101bc:	e51b200c 	ldr	r2, [fp, #-12]
  1101c0:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  1101c4:	e51b3008 	ldr	r3, [fp, #-8]
  1101c8:	e5933000 	ldr	r3, [r3]
  1101cc:	e15b20be 	ldrh	r2, [fp, #-14]
  1101d0:	e1c320b8 	strh	r2, [r3, #8]
  1101d4:	e51b2008 	ldr	r2, [fp, #-8]
  1101d8:	e5922000 	ldr	r2, [r2]
  1101dc:	e1d330b8 	ldrh	r3, [r3, #8]
  1101e0:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  1101e4:	e51b3008 	ldr	r3, [fp, #-8]
  1101e8:	e5932000 	ldr	r2, [r3]
  1101ec:	e51b3008 	ldr	r3, [fp, #-8]
  1101f0:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  1101f4:	e3a03000 	mov	r3, #0
}
  1101f8:	e1a00003 	mov	r0, r3
  1101fc:	e24bd004 	sub	sp, fp, #4
  110200:	e8bd8800 	pop	{fp, pc}

00110204 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  110204:	e92d4800 	push	{fp, lr}
  110208:	e28db004 	add	fp, sp, #4
  11020c:	e24dd008 	sub	sp, sp, #8
  110210:	e50b0008 	str	r0, [fp, #-8]
  110214:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  110218:	e51b3008 	ldr	r3, [fp, #-8]
  11021c:	e3530000 	cmp	r3, #0
  110220:	1a000007 	bne	110244 <netbuf_chain+0x40>
  110224:	e3060c14 	movw	r0, #27668	; 0x6c14
  110228:	e3400014 	movt	r0, #20
  11022c:	ebffcbb8 	bl	103114 <rt_kprintf>
  110230:	e3a010ae 	mov	r1, #174	; 0xae
  110234:	e3060b70 	movw	r0, #27504	; 0x6b70
  110238:	e3400014 	movt	r0, #20
  11023c:	ebffeba7 	bl	10b0e0 <sys_arch_assert>
  110240:	ea000018 	b	1102a8 <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  110244:	e51b300c 	ldr	r3, [fp, #-12]
  110248:	e3530000 	cmp	r3, #0
  11024c:	1a000007 	bne	110270 <netbuf_chain+0x6c>
  110250:	e3060c30 	movw	r0, #27696	; 0x6c30
  110254:	e3400014 	movt	r0, #20
  110258:	ebffcbad 	bl	103114 <rt_kprintf>
  11025c:	e3a010af 	mov	r1, #175	; 0xaf
  110260:	e3060b70 	movw	r0, #27504	; 0x6b70
  110264:	e3400014 	movt	r0, #20
  110268:	ebffeb9c 	bl	10b0e0 <sys_arch_assert>
  11026c:	ea00000d 	b	1102a8 <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  110270:	e51b3008 	ldr	r3, [fp, #-8]
  110274:	e5932000 	ldr	r2, [r3]
  110278:	e51b300c 	ldr	r3, [fp, #-12]
  11027c:	e5933000 	ldr	r3, [r3]
  110280:	e1a01003 	mov	r1, r3
  110284:	e1a00002 	mov	r0, r2
  110288:	eb002bbb 	bl	11b17c <pbuf_cat>
  head->ptr = head->p;
  11028c:	e51b3008 	ldr	r3, [fp, #-8]
  110290:	e5932000 	ldr	r2, [r3]
  110294:	e51b3008 	ldr	r3, [fp, #-8]
  110298:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  11029c:	e51b100c 	ldr	r1, [fp, #-12]
  1102a0:	e3a00007 	mov	r0, #7
  1102a4:	eb0023ef 	bl	119268 <memp_free>
}
  1102a8:	e24bd004 	sub	sp, fp, #4
  1102ac:	e8bd8800 	pop	{fp, pc}

001102b0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  1102b0:	e92d4800 	push	{fp, lr}
  1102b4:	e28db004 	add	fp, sp, #4
  1102b8:	e24dd010 	sub	sp, sp, #16
  1102bc:	e50b0008 	str	r0, [fp, #-8]
  1102c0:	e50b100c 	str	r1, [fp, #-12]
  1102c4:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  1102c8:	e51b3008 	ldr	r3, [fp, #-8]
  1102cc:	e3530000 	cmp	r3, #0
  1102d0:	1a000008 	bne	1102f8 <netbuf_data+0x48>
  1102d4:	e3060c4c 	movw	r0, #27724	; 0x6c4c
  1102d8:	e3400014 	movt	r0, #20
  1102dc:	ebffcb8c 	bl	103114 <rt_kprintf>
  1102e0:	e3a010c2 	mov	r1, #194	; 0xc2
  1102e4:	e3060b70 	movw	r0, #27504	; 0x6b70
  1102e8:	e3400014 	movt	r0, #20
  1102ec:	ebffeb7b 	bl	10b0e0 <sys_arch_assert>
  1102f0:	e3e0300f 	mvn	r3, #15
  1102f4:	ea000028 	b	11039c <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  1102f8:	e51b300c 	ldr	r3, [fp, #-12]
  1102fc:	e3530000 	cmp	r3, #0
  110300:	1a000008 	bne	110328 <netbuf_data+0x78>
  110304:	e3060c68 	movw	r0, #27752	; 0x6c68
  110308:	e3400014 	movt	r0, #20
  11030c:	ebffcb80 	bl	103114 <rt_kprintf>
  110310:	e3a010c3 	mov	r1, #195	; 0xc3
  110314:	e3060b70 	movw	r0, #27504	; 0x6b70
  110318:	e3400014 	movt	r0, #20
  11031c:	ebffeb6f 	bl	10b0e0 <sys_arch_assert>
  110320:	e3e0300f 	mvn	r3, #15
  110324:	ea00001c 	b	11039c <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  110328:	e51b3010 	ldr	r3, [fp, #-16]
  11032c:	e3530000 	cmp	r3, #0
  110330:	1a000008 	bne	110358 <netbuf_data+0xa8>
  110334:	e3060c88 	movw	r0, #27784	; 0x6c88
  110338:	e3400014 	movt	r0, #20
  11033c:	ebffcb74 	bl	103114 <rt_kprintf>
  110340:	e3a010c4 	mov	r1, #196	; 0xc4
  110344:	e3060b70 	movw	r0, #27504	; 0x6b70
  110348:	e3400014 	movt	r0, #20
  11034c:	ebffeb63 	bl	10b0e0 <sys_arch_assert>
  110350:	e3e0300f 	mvn	r3, #15
  110354:	ea000010 	b	11039c <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  110358:	e51b3008 	ldr	r3, [fp, #-8]
  11035c:	e5933004 	ldr	r3, [r3, #4]
  110360:	e3530000 	cmp	r3, #0
  110364:	1a000001 	bne	110370 <netbuf_data+0xc0>
    return ERR_BUF;
  110368:	e3e03001 	mvn	r3, #1
  11036c:	ea00000a 	b	11039c <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  110370:	e51b3008 	ldr	r3, [fp, #-8]
  110374:	e5933004 	ldr	r3, [r3, #4]
  110378:	e5932004 	ldr	r2, [r3, #4]
  11037c:	e51b300c 	ldr	r3, [fp, #-12]
  110380:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  110384:	e51b3008 	ldr	r3, [fp, #-8]
  110388:	e5933004 	ldr	r3, [r3, #4]
  11038c:	e1d320ba 	ldrh	r2, [r3, #10]
  110390:	e51b3010 	ldr	r3, [fp, #-16]
  110394:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  110398:	e3a03000 	mov	r3, #0
}
  11039c:	e1a00003 	mov	r0, r3
  1103a0:	e24bd004 	sub	sp, fp, #4
  1103a4:	e8bd8800 	pop	{fp, pc}

001103a8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  1103a8:	e92d4800 	push	{fp, lr}
  1103ac:	e28db004 	add	fp, sp, #4
  1103b0:	e24dd008 	sub	sp, sp, #8
  1103b4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  1103b8:	e51b3008 	ldr	r3, [fp, #-8]
  1103bc:	e3530000 	cmp	r3, #0
  1103c0:	1a000008 	bne	1103e8 <netbuf_next+0x40>
  1103c4:	e3060ca4 	movw	r0, #27812	; 0x6ca4
  1103c8:	e3400014 	movt	r0, #20
  1103cc:	ebffcb50 	bl	103114 <rt_kprintf>
  1103d0:	e3a010dc 	mov	r1, #220	; 0xdc
  1103d4:	e3060b70 	movw	r0, #27504	; 0x6b70
  1103d8:	e3400014 	movt	r0, #20
  1103dc:	ebffeb3f 	bl	10b0e0 <sys_arch_assert>
  1103e0:	e3e03000 	mvn	r3, #0
  1103e4:	ea000013 	b	110438 <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  1103e8:	e51b3008 	ldr	r3, [fp, #-8]
  1103ec:	e5933004 	ldr	r3, [r3, #4]
  1103f0:	e5933000 	ldr	r3, [r3]
  1103f4:	e3530000 	cmp	r3, #0
  1103f8:	1a000001 	bne	110404 <netbuf_next+0x5c>
    return -1;
  1103fc:	e3e03000 	mvn	r3, #0
  110400:	ea00000c 	b	110438 <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  110404:	e51b3008 	ldr	r3, [fp, #-8]
  110408:	e5933004 	ldr	r3, [r3, #4]
  11040c:	e5932000 	ldr	r2, [r3]
  110410:	e51b3008 	ldr	r3, [fp, #-8]
  110414:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  110418:	e51b3008 	ldr	r3, [fp, #-8]
  11041c:	e5933004 	ldr	r3, [r3, #4]
  110420:	e5933000 	ldr	r3, [r3]
  110424:	e3530000 	cmp	r3, #0
  110428:	1a000001 	bne	110434 <netbuf_next+0x8c>
    return 1;
  11042c:	e3a03001 	mov	r3, #1
  110430:	ea000000 	b	110438 <netbuf_next+0x90>
  }
  return 0;
  110434:	e3a03000 	mov	r3, #0
}
  110438:	e1a00003 	mov	r0, r3
  11043c:	e24bd004 	sub	sp, fp, #4
  110440:	e8bd8800 	pop	{fp, pc}

00110444 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  110444:	e92d4800 	push	{fp, lr}
  110448:	e28db004 	add	fp, sp, #4
  11044c:	e24dd008 	sub	sp, sp, #8
  110450:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110454:	e51b3008 	ldr	r3, [fp, #-8]
  110458:	e3530000 	cmp	r3, #0
  11045c:	1a000007 	bne	110480 <netbuf_first+0x3c>
  110460:	e3060cc0 	movw	r0, #27840	; 0x6cc0
  110464:	e3400014 	movt	r0, #20
  110468:	ebffcb29 	bl	103114 <rt_kprintf>
  11046c:	e3a010f2 	mov	r1, #242	; 0xf2
  110470:	e3060b70 	movw	r0, #27504	; 0x6b70
  110474:	e3400014 	movt	r0, #20
  110478:	ebffeb18 	bl	10b0e0 <sys_arch_assert>
  11047c:	ea000003 	b	110490 <netbuf_first+0x4c>
  buf->ptr = buf->p;
  110480:	e51b3008 	ldr	r3, [fp, #-8]
  110484:	e5932000 	ldr	r2, [r3]
  110488:	e51b3008 	ldr	r3, [fp, #-8]
  11048c:	e5832004 	str	r2, [r3, #4]
}
  110490:	e24bd004 	sub	sp, fp, #4
  110494:	e8bd8800 	pop	{fp, pc}

00110498 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  110498:	e92d4800 	push	{fp, lr}
  11049c:	e28db004 	add	fp, sp, #4
  1104a0:	e24dd010 	sub	sp, sp, #16
  1104a4:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  1104a8:	e24b300c 	sub	r3, fp, #12
  1104ac:	e1a01003 	mov	r1, r3
  1104b0:	e51b0010 	ldr	r0, [fp, #-16]
  1104b4:	ebffef98 	bl	10c31c <netconn_gethostbyname>
  1104b8:	e1a03000 	mov	r3, r0
  1104bc:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  1104c0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1104c4:	e3530000 	cmp	r3, #0
  1104c8:	0a000005 	beq	1104e4 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  1104cc:	e30f35b0 	movw	r3, #62896	; 0xf5b0
  1104d0:	e3403014 	movt	r3, #20
  1104d4:	e3a020d2 	mov	r2, #210	; 0xd2
  1104d8:	e5832000 	str	r2, [r3]
    return NULL;
  1104dc:	e3a03000 	mov	r3, #0
  1104e0:	ea000032 	b	1105b0 <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  1104e4:	e30d3a84 	movw	r3, #55940	; 0xda84
  1104e8:	e3403014 	movt	r3, #20
  1104ec:	e51b200c 	ldr	r2, [fp, #-12]
  1104f0:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  1104f4:	e30d3a88 	movw	r3, #55944	; 0xda88
  1104f8:	e3403014 	movt	r3, #20
  1104fc:	e30d2a84 	movw	r2, #55940	; 0xda84
  110500:	e3402014 	movt	r2, #20
  110504:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  110508:	e30d3a88 	movw	r3, #55944	; 0xda88
  11050c:	e3403014 	movt	r3, #20
  110510:	e3a02000 	mov	r2, #0
  110514:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  110518:	e3a02c01 	mov	r2, #256	; 0x100
  11051c:	e51b1010 	ldr	r1, [fp, #-16]
  110520:	e30d0a90 	movw	r0, #55952	; 0xda90
  110524:	e3400014 	movt	r0, #20
  110528:	eb00c42f 	bl	1415ec <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  11052c:	e30d3a90 	movw	r3, #55952	; 0xda90
  110530:	e3403014 	movt	r3, #20
  110534:	e3a02000 	mov	r2, #0
  110538:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  11053c:	e30d3b94 	movw	r3, #56212	; 0xdb94
  110540:	e3403014 	movt	r3, #20
  110544:	e30d2a90 	movw	r2, #55952	; 0xda90
  110548:	e3402014 	movt	r2, #20
  11054c:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  110550:	e30d3ba8 	movw	r3, #56232	; 0xdba8
  110554:	e3403014 	movt	r3, #20
  110558:	e3a02000 	mov	r2, #0
  11055c:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  110560:	e30d3b94 	movw	r3, #56212	; 0xdb94
  110564:	e3403014 	movt	r3, #20
  110568:	e30d2ba8 	movw	r2, #56232	; 0xdba8
  11056c:	e3402014 	movt	r2, #20
  110570:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110574:	e30d3b94 	movw	r3, #56212	; 0xdb94
  110578:	e3403014 	movt	r3, #20
  11057c:	e3a02002 	mov	r2, #2
  110580:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  110584:	e30d3b94 	movw	r3, #56212	; 0xdb94
  110588:	e3403014 	movt	r3, #20
  11058c:	e3a02004 	mov	r2, #4
  110590:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  110594:	e30d3b94 	movw	r3, #56212	; 0xdb94
  110598:	e3403014 	movt	r3, #20
  11059c:	e30d2a88 	movw	r2, #55944	; 0xda88
  1105a0:	e3402014 	movt	r2, #20
  1105a4:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  1105a8:	e30d3b94 	movw	r3, #56212	; 0xdb94
  1105ac:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  1105b0:	e1a00003 	mov	r0, r3
  1105b4:	e24bd004 	sub	sp, fp, #4
  1105b8:	e8bd8800 	pop	{fp, pc}

001105bc <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  1105bc:	e92d4800 	push	{fp, lr}
  1105c0:	e28db004 	add	fp, sp, #4
  1105c4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1105c8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1105cc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1105d0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1105d4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  1105d8:	e59b3008 	ldr	r3, [fp, #8]
  1105dc:	e3530000 	cmp	r3, #0
  1105e0:	1a000001 	bne	1105ec <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  1105e4:	e24b3018 	sub	r3, fp, #24
  1105e8:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  1105ec:	e59b3004 	ldr	r3, [fp, #4]
  1105f0:	e3530000 	cmp	r3, #0
  1105f4:	1a000004 	bne	11060c <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1105f8:	e59b3008 	ldr	r3, [fp, #8]
  1105fc:	e3a02016 	mov	r2, #22
  110600:	e5832000 	str	r2, [r3]
    return -1;
  110604:	e3e03000 	mvn	r3, #0
  110608:	ea00005a 	b	110778 <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  11060c:	e59b3004 	ldr	r3, [fp, #4]
  110610:	e3a02000 	mov	r2, #0
  110614:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  110618:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11061c:	e3530000 	cmp	r3, #0
  110620:	0a000005 	beq	11063c <lwip_gethostbyname_r+0x80>
  110624:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110628:	e3530000 	cmp	r3, #0
  11062c:	0a000002 	beq	11063c <lwip_gethostbyname_r+0x80>
  110630:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110634:	e3530000 	cmp	r3, #0
  110638:	1a000004 	bne	110650 <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  11063c:	e59b3008 	ldr	r3, [fp, #8]
  110640:	e3a02016 	mov	r2, #22
  110644:	e5832000 	str	r2, [r3]
    return -1;
  110648:	e3e03000 	mvn	r3, #0
  11064c:	ea000049 	b	110778 <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  110650:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110654:	eb00c393 	bl	1414a8 <strlen>
  110658:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  11065c:	e51b3008 	ldr	r3, [fp, #-8]
  110660:	e2833014 	add	r3, r3, #20
  110664:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  110668:	e1520003 	cmp	r2, r3
  11066c:	2a000004 	bcs	110684 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  110670:	e59b3008 	ldr	r3, [fp, #8]
  110674:	e3a02022 	mov	r2, #34	; 0x22
  110678:	e5832000 	str	r2, [r3]
    return -1;
  11067c:	e3e03000 	mvn	r3, #0
  110680:	ea00003c 	b	110778 <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  110684:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110688:	e2833003 	add	r3, r3, #3
  11068c:	e3c33003 	bic	r3, r3, #3
  110690:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  110694:	e51b300c 	ldr	r3, [fp, #-12]
  110698:	e2833010 	add	r3, r3, #16
  11069c:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  1106a0:	e51b300c 	ldr	r3, [fp, #-12]
  1106a4:	e2833008 	add	r3, r3, #8
  1106a8:	e1a01003 	mov	r1, r3
  1106ac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1106b0:	ebffef19 	bl	10c31c <netconn_gethostbyname>
  1106b4:	e1a03000 	mov	r3, r0
  1106b8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  1106bc:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1106c0:	e3530000 	cmp	r3, #0
  1106c4:	0a000004 	beq	1106dc <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  1106c8:	e59b3008 	ldr	r3, [fp, #8]
  1106cc:	e3a020d2 	mov	r2, #210	; 0xd2
  1106d0:	e5832000 	str	r2, [r3]
    return -1;
  1106d4:	e3e03000 	mvn	r3, #0
  1106d8:	ea000026 	b	110778 <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  1106dc:	e51b2008 	ldr	r2, [fp, #-8]
  1106e0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1106e4:	e51b0010 	ldr	r0, [fp, #-16]
  1106e8:	eb00c1a5 	bl	140d84 <memcpy>
  hostname[namelen] = 0;
  1106ec:	e51b2010 	ldr	r2, [fp, #-16]
  1106f0:	e51b3008 	ldr	r3, [fp, #-8]
  1106f4:	e0823003 	add	r3, r2, r3
  1106f8:	e3a02000 	mov	r2, #0
  1106fc:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  110700:	e51b300c 	ldr	r3, [fp, #-12]
  110704:	e2832008 	add	r2, r3, #8
  110708:	e51b300c 	ldr	r3, [fp, #-12]
  11070c:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  110710:	e51b300c 	ldr	r3, [fp, #-12]
  110714:	e3a02000 	mov	r2, #0
  110718:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  11071c:	e51b300c 	ldr	r3, [fp, #-12]
  110720:	e3a02000 	mov	r2, #0
  110724:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  110728:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11072c:	e51b2010 	ldr	r2, [fp, #-16]
  110730:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  110734:	e51b300c 	ldr	r3, [fp, #-12]
  110738:	e283200c 	add	r2, r3, #12
  11073c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110740:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  110744:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110748:	e3a02002 	mov	r2, #2
  11074c:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  110750:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110754:	e3a02004 	mov	r2, #4
  110758:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  11075c:	e51b200c 	ldr	r2, [fp, #-12]
  110760:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110764:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  110768:	e59b3004 	ldr	r3, [fp, #4]
  11076c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  110770:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110774:	e3a03000 	mov	r3, #0
}
  110778:	e1a00003 	mov	r0, r3
  11077c:	e24bd004 	sub	sp, fp, #4
  110780:	e8bd8800 	pop	{fp, pc}

00110784 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  110784:	e92d4800 	push	{fp, lr}
  110788:	e28db004 	add	fp, sp, #4
  11078c:	e24dd010 	sub	sp, sp, #16
  110790:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  110794:	ea000007 	b	1107b8 <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  110798:	e51b3010 	ldr	r3, [fp, #-16]
  11079c:	e593301c 	ldr	r3, [r3, #28]
  1107a0:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  1107a4:	e51b1010 	ldr	r1, [fp, #-16]
  1107a8:	e3a0000e 	mov	r0, #14
  1107ac:	eb0022ad 	bl	119268 <memp_free>
    ai = next;
  1107b0:	e51b3008 	ldr	r3, [fp, #-8]
  1107b4:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  1107b8:	e51b3010 	ldr	r3, [fp, #-16]
  1107bc:	e3530000 	cmp	r3, #0
  1107c0:	1afffff4 	bne	110798 <lwip_freeaddrinfo+0x14>
  }
}
  1107c4:	e320f000 	nop	{0}
  1107c8:	e24bd004 	sub	sp, fp, #4
  1107cc:	e8bd8800 	pop	{fp, pc}

001107d0 <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  1107d0:	e92d4800 	push	{fp, lr}
  1107d4:	e28db004 	add	fp, sp, #4
  1107d8:	e24dd038 	sub	sp, sp, #56	; 0x38
  1107dc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1107e0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1107e4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  1107e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  1107ec:	e3a03000 	mov	r3, #0
  1107f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  1107f4:	e3a03000 	mov	r3, #0
  1107f8:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  1107fc:	e3a03000 	mov	r3, #0
  110800:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  110804:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110808:	e3530000 	cmp	r3, #0
  11080c:	1a000001 	bne	110818 <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  110810:	e3a030ca 	mov	r3, #202	; 0xca
  110814:	ea0000d0 	b	110b5c <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  110818:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11081c:	e3a02000 	mov	r2, #0
  110820:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  110824:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110828:	e3530000 	cmp	r3, #0
  11082c:	1a000004 	bne	110844 <lwip_getaddrinfo+0x74>
  110830:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110834:	e3530000 	cmp	r3, #0
  110838:	1a000001 	bne	110844 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  11083c:	e3a030c8 	mov	r3, #200	; 0xc8
  110840:	ea0000c5 	b	110b5c <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  110844:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110848:	e3530000 	cmp	r3, #0
  11084c:	0a00000a 	beq	11087c <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  110850:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110854:	e5933004 	ldr	r3, [r3, #4]
  110858:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  11085c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110860:	e3530000 	cmp	r3, #0
  110864:	0a000006 	beq	110884 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  110868:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11086c:	e3530002 	cmp	r3, #2
  110870:	0a000003 	beq	110884 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110874:	e3a030cc 	mov	r3, #204	; 0xcc
  110878:	ea0000b7 	b	110b5c <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  11087c:	e3a03000 	mov	r3, #0
  110880:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  110884:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110888:	e3530000 	cmp	r3, #0
  11088c:	0a00000a 	beq	1108bc <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  110890:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  110894:	eb00c10e 	bl	140cd4 <atoi>
  110898:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  11089c:	e51b3008 	ldr	r3, [fp, #-8]
  1108a0:	e3530000 	cmp	r3, #0
  1108a4:	da000002 	ble	1108b4 <lwip_getaddrinfo+0xe4>
  1108a8:	e51b3008 	ldr	r3, [fp, #-8]
  1108ac:	e3530801 	cmp	r3, #65536	; 0x10000
  1108b0:	ba000001 	blt	1108bc <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  1108b4:	e3a030c9 	mov	r3, #201	; 0xc9
  1108b8:	ea0000a7 	b	110b5c <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  1108bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1108c0:	e3530000 	cmp	r3, #0
  1108c4:	0a00001b 	beq	110938 <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  1108c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108cc:	e3530000 	cmp	r3, #0
  1108d0:	0a00000d 	beq	11090c <lwip_getaddrinfo+0x13c>
  1108d4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108d8:	e5933000 	ldr	r3, [r3]
  1108dc:	e2033004 	and	r3, r3, #4
  1108e0:	e3530000 	cmp	r3, #0
  1108e4:	0a000008 	beq	11090c <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  1108e8:	e24b3028 	sub	r3, fp, #40	; 0x28
  1108ec:	e1a01003 	mov	r1, r3
  1108f0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1108f4:	eb008777 	bl	1326d8 <ip4addr_aton>
  1108f8:	e1a03000 	mov	r3, r0
  1108fc:	e3530000 	cmp	r3, #0
  110900:	1a00001a 	bne	110970 <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  110904:	e3a030c8 	mov	r3, #200	; 0xc8
  110908:	ea000093 	b	110b5c <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  11090c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110910:	e1a01003 	mov	r1, r3
  110914:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110918:	ebffee7f 	bl	10c31c <netconn_gethostbyname>
  11091c:	e1a03000 	mov	r3, r0
  110920:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  110924:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  110928:	e3530000 	cmp	r3, #0
  11092c:	0a00000f 	beq	110970 <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  110930:	e3a030ca 	mov	r3, #202	; 0xca
  110934:	ea000088 	b	110b5c <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  110938:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11093c:	e3530000 	cmp	r3, #0
  110940:	0a000007 	beq	110964 <lwip_getaddrinfo+0x194>
  110944:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110948:	e5933000 	ldr	r3, [r3]
  11094c:	e2033001 	and	r3, r3, #1
  110950:	e3530000 	cmp	r3, #0
  110954:	0a000002 	beq	110964 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  110958:	e3a03000 	mov	r3, #0
  11095c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  110960:	ea000002 	b	110970 <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110964:	e3a0307f 	mov	r3, #127	; 0x7f
  110968:	e3403100 	movt	r3, #256	; 0x100
  11096c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  110970:	e3a03030 	mov	r3, #48	; 0x30
  110974:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  110978:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11097c:	e3530000 	cmp	r3, #0
  110980:	0a00001a 	beq	1109f0 <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  110984:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110988:	eb00c2c6 	bl	1414a8 <strlen>
  11098c:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  110990:	e51b3010 	ldr	r3, [fp, #-16]
  110994:	e3530c01 	cmp	r3, #256	; 0x100
  110998:	9a000001 	bls	1109a4 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  11099c:	e3a030ca 	mov	r3, #202	; 0xca
  1109a0:	ea00006d 	b	110b5c <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  1109a4:	e51b200c 	ldr	r2, [fp, #-12]
  1109a8:	e51b3010 	ldr	r3, [fp, #-16]
  1109ac:	e0823003 	add	r3, r2, r3
  1109b0:	e2833001 	add	r3, r3, #1
  1109b4:	e51b200c 	ldr	r2, [fp, #-12]
  1109b8:	e1520003 	cmp	r2, r3
  1109bc:	3a000006 	bcc	1109dc <lwip_getaddrinfo+0x20c>
  1109c0:	e3060cdc 	movw	r0, #27868	; 0x6cdc
  1109c4:	e3400014 	movt	r0, #20
  1109c8:	ebffc9d1 	bl	103114 <rt_kprintf>
  1109cc:	e3001166 	movw	r1, #358	; 0x166
  1109d0:	e3060cf0 	movw	r0, #27888	; 0x6cf0
  1109d4:	e3400014 	movt	r0, #20
  1109d8:	ebffe9c0 	bl	10b0e0 <sys_arch_assert>
    total_size += namelen + 1;
  1109dc:	e51b2010 	ldr	r2, [fp, #-16]
  1109e0:	e51b300c 	ldr	r3, [fp, #-12]
  1109e4:	e0823003 	add	r3, r2, r3
  1109e8:	e2833001 	add	r3, r3, #1
  1109ec:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  1109f0:	e51b300c 	ldr	r3, [fp, #-12]
  1109f4:	e3002131 	movw	r2, #305	; 0x131
  1109f8:	e1530002 	cmp	r3, r2
  1109fc:	9a000006 	bls	110a1c <lwip_getaddrinfo+0x24c>
  110a00:	e3060d1c 	movw	r0, #27932	; 0x6d1c
  110a04:	e3400014 	movt	r0, #20
  110a08:	ebffc9c1 	bl	103114 <rt_kprintf>
  110a0c:	e300116b 	movw	r1, #363	; 0x16b
  110a10:	e3060cf0 	movw	r0, #27888	; 0x6cf0
  110a14:	e3400014 	movt	r0, #20
  110a18:	ebffe9b0 	bl	10b0e0 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  110a1c:	e3a02f5b 	mov	r2, #364	; 0x16c
  110a20:	e3061cf0 	movw	r1, #27888	; 0x6cf0
  110a24:	e3401014 	movt	r1, #20
  110a28:	e3a0000e 	mov	r0, #14
  110a2c:	eb0021a5 	bl	1190c8 <memp_malloc_fn>
  110a30:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  110a34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a38:	e3530000 	cmp	r3, #0
  110a3c:	1a000001 	bne	110a48 <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  110a40:	e3a030cb 	mov	r3, #203	; 0xcb
  110a44:	ea000044 	b	110b5c <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  110a48:	e51b200c 	ldr	r2, [fp, #-12]
  110a4c:	e3a01000 	mov	r1, #0
  110a50:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110a54:	eb00c202 	bl	141264 <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  110a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a5c:	e2833020 	add	r3, r3, #32
  110a60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110a64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110a68:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110a6c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  110a70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a74:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  110a78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a7c:	e3a02002 	mov	r2, #2
  110a80:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  110a84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a88:	e3a02010 	mov	r2, #16
  110a8c:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  110a90:	e51b3008 	ldr	r3, [fp, #-8]
  110a94:	e6ff3073 	uxth	r3, r3
  110a98:	e1a00003 	mov	r0, r3
  110a9c:	eb0016c8 	bl	1165c4 <lwip_htons>
  110aa0:	e1a03000 	mov	r3, r0
  110aa4:	e1a02003 	mov	r2, r3
  110aa8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110aac:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  110ab0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ab4:	e3a02002 	mov	r2, #2
  110ab8:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110abc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ac0:	e3530000 	cmp	r3, #0
  110ac4:	0a000007 	beq	110ae8 <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  110ac8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110acc:	e5932008 	ldr	r2, [r3, #8]
  110ad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ad4:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  110ad8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110adc:	e593200c 	ldr	r2, [r3, #12]
  110ae0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ae4:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  110ae8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110aec:	e3530000 	cmp	r3, #0
  110af0:	0a00000f 	beq	110b34 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  110af4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110af8:	e2832030 	add	r2, r3, #48	; 0x30
  110afc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b00:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  110b04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b08:	e5933018 	ldr	r3, [r3, #24]
  110b0c:	e51b2010 	ldr	r2, [fp, #-16]
  110b10:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  110b14:	e1a00003 	mov	r0, r3
  110b18:	eb00c099 	bl	140d84 <memcpy>
    ai->ai_canonname[namelen] = 0;
  110b1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b20:	e5932018 	ldr	r2, [r3, #24]
  110b24:	e51b3010 	ldr	r3, [fp, #-16]
  110b28:	e0823003 	add	r3, r2, r3
  110b2c:	e3a02000 	mov	r2, #0
  110b30:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  110b34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b38:	e3a02010 	mov	r2, #16
  110b3c:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  110b40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b44:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  110b48:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  110b4c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110b50:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110b54:	e5832000 	str	r2, [r3]

  return 0;
  110b58:	e3a03000 	mov	r3, #0
}
  110b5c:	e1a00003 	mov	r0, r3
  110b60:	e24bd004 	sub	sp, fp, #4
  110b64:	e8bd8800 	pop	{fp, pc}

00110b68 <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  110b68:	e92d4810 	push	{r4, fp, lr}
  110b6c:	e28db008 	add	fp, sp, #8
  110b70:	e24dd024 	sub	sp, sp, #36	; 0x24
  110b74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110b78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110b7c:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  110b80:	e51b3010 	ldr	r3, [fp, #-16]
  110b84:	e5930004 	ldr	r0, [r3, #4]
  110b88:	e51b3010 	ldr	r3, [fp, #-16]
  110b8c:	e593c008 	ldr	ip, [r3, #8]
  110b90:	e51b3010 	ldr	r3, [fp, #-16]
  110b94:	e593e00c 	ldr	lr, [r3, #12]
  110b98:	e51b3010 	ldr	r3, [fp, #-16]
  110b9c:	e5934010 	ldr	r4, [r3, #16]
  110ba0:	e51b3010 	ldr	r3, [fp, #-16]
  110ba4:	e5933014 	ldr	r3, [r3, #20]
  110ba8:	e51b2010 	ldr	r2, [fp, #-16]
  110bac:	e5922018 	ldr	r2, [r2, #24]
  110bb0:	e51b1010 	ldr	r1, [fp, #-16]
  110bb4:	e591101c 	ldr	r1, [r1, #28]
  110bb8:	e58d1008 	str	r1, [sp, #8]
  110bbc:	e58d2004 	str	r2, [sp, #4]
  110bc0:	e58d3000 	str	r3, [sp]
  110bc4:	e1a03004 	mov	r3, r4
  110bc8:	e1a0200e 	mov	r2, lr
  110bcc:	e1a0100c 	mov	r1, ip
  110bd0:	eb0021de 	bl	119350 <netif_add>
  110bd4:	e1a03000 	mov	r3, r0
  110bd8:	e3530000 	cmp	r3, #0
  110bdc:	1a000001 	bne	110be8 <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110be0:	e3e0300b 	mvn	r3, #11
  110be4:	ea000000 	b	110bec <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  110be8:	e3a03000 	mov	r3, #0
  }
}
  110bec:	e1a00003 	mov	r0, r3
  110bf0:	e24bd008 	sub	sp, fp, #8
  110bf4:	e8bd8810 	pop	{r4, fp, pc}

00110bf8 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  110bf8:	e92d4800 	push	{fp, lr}
  110bfc:	e28db004 	add	fp, sp, #4
  110c00:	e24dd010 	sub	sp, sp, #16
  110c04:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110c08:	e51b3010 	ldr	r3, [fp, #-16]
  110c0c:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  110c10:	e51b3008 	ldr	r3, [fp, #-8]
  110c14:	e5930004 	ldr	r0, [r3, #4]
  110c18:	e51b3008 	ldr	r3, [fp, #-8]
  110c1c:	e5931008 	ldr	r1, [r3, #8]
  110c20:	e51b3008 	ldr	r3, [fp, #-8]
  110c24:	e593200c 	ldr	r2, [r3, #12]
  110c28:	e51b3008 	ldr	r3, [fp, #-8]
  110c2c:	e5933010 	ldr	r3, [r3, #16]
  110c30:	eb00222c 	bl	1194e8 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  110c34:	e3a03000 	mov	r3, #0
}
  110c38:	e1a00003 	mov	r0, r3
  110c3c:	e24bd004 	sub	sp, fp, #4
  110c40:	e8bd8800 	pop	{fp, pc}

00110c44 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  110c44:	e92d4800 	push	{fp, lr}
  110c48:	e28db004 	add	fp, sp, #4
  110c4c:	e24dd010 	sub	sp, sp, #16
  110c50:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110c54:	e51b3010 	ldr	r3, [fp, #-16]
  110c58:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110c5c:	e51b3008 	ldr	r3, [fp, #-8]
  110c60:	e593300c 	ldr	r3, [r3, #12]
  110c64:	e3530000 	cmp	r3, #0
  110c68:	0a000007 	beq	110c8c <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110c6c:	e51b3008 	ldr	r3, [fp, #-8]
  110c70:	e593300c 	ldr	r3, [r3, #12]
  110c74:	e51b2008 	ldr	r2, [fp, #-8]
  110c78:	e5922004 	ldr	r2, [r2, #4]
  110c7c:	e1a00002 	mov	r0, r2
  110c80:	e12fff33 	blx	r3
  110c84:	e1a03000 	mov	r3, r0
  110c88:	ea000006 	b	110ca8 <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  110c8c:	e51b3008 	ldr	r3, [fp, #-8]
  110c90:	e5933008 	ldr	r3, [r3, #8]
  110c94:	e51b2008 	ldr	r2, [fp, #-8]
  110c98:	e5922004 	ldr	r2, [r2, #4]
  110c9c:	e1a00002 	mov	r0, r2
  110ca0:	e12fff33 	blx	r3
    return ERR_OK;
  110ca4:	e3a03000 	mov	r3, #0
  }
}
  110ca8:	e1a00003 	mov	r0, r3
  110cac:	e24bd004 	sub	sp, fp, #4
  110cb0:	e8bd8800 	pop	{fp, pc}

00110cb4 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  110cb4:	e92d4800 	push	{fp, lr}
  110cb8:	e28db004 	add	fp, sp, #4
  110cbc:	e24dd038 	sub	sp, sp, #56	; 0x38
  110cc0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110cc4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110cc8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110ccc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  110cd0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110cd4:	e3530000 	cmp	r3, #0
  110cd8:	1a000002 	bne	110ce8 <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110cdc:	e30938f8 	movw	r3, #39160	; 0x98f8
  110ce0:	e3403014 	movt	r3, #20
  110ce4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110ce8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110cec:	e3530000 	cmp	r3, #0
  110cf0:	1a000002 	bne	110d00 <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  110cf4:	e30938f8 	movw	r3, #39160	; 0x98f8
  110cf8:	e3403014 	movt	r3, #20
  110cfc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110d00:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d04:	e3530000 	cmp	r3, #0
  110d08:	1a000002 	bne	110d18 <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  110d0c:	e30938f8 	movw	r3, #39160	; 0x98f8
  110d10:	e3403014 	movt	r3, #20
  110d14:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  110d18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110d1c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110d20:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110d24:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110d28:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110d2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110d30:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  110d38:	e59b3004 	ldr	r3, [fp, #4]
  110d3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  110d40:	e59b3008 	ldr	r3, [fp, #8]
  110d44:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  110d48:	e59b300c 	ldr	r3, [fp, #12]
  110d4c:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  110d50:	e24b3028 	sub	r3, fp, #40	; 0x28
  110d54:	e1a01003 	mov	r1, r3
  110d58:	e3000b68 	movw	r0, #2920	; 0xb68
  110d5c:	e3400011 	movt	r0, #17
  110d60:	eb001569 	bl	11630c <tcpip_api_call>
  110d64:	e1a03000 	mov	r3, r0
  110d68:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110d6c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110d70:	e1a00003 	mov	r0, r3
  110d74:	e24bd004 	sub	sp, fp, #4
  110d78:	e8bd8800 	pop	{fp, pc}

00110d7c <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110d7c:	e92d4800 	push	{fp, lr}
  110d80:	e28db004 	add	fp, sp, #4
  110d84:	e24dd038 	sub	sp, sp, #56	; 0x38
  110d88:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110d8c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110d90:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110d94:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110d98:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110d9c:	e3530000 	cmp	r3, #0
  110da0:	1a000002 	bne	110db0 <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110da4:	e30938f8 	movw	r3, #39160	; 0x98f8
  110da8:	e3403014 	movt	r3, #20
  110dac:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110db0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110db4:	e3530000 	cmp	r3, #0
  110db8:	1a000002 	bne	110dc8 <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110dbc:	e30938f8 	movw	r3, #39160	; 0x98f8
  110dc0:	e3403014 	movt	r3, #20
  110dc4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110dc8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110dcc:	e3530000 	cmp	r3, #0
  110dd0:	1a000002 	bne	110de0 <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110dd4:	e30938f8 	movw	r3, #39160	; 0x98f8
  110dd8:	e3403014 	movt	r3, #20
  110ddc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110de0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110de4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110de8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110dec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110df0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110df4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110df8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110dfc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110e00:	e24b3028 	sub	r3, fp, #40	; 0x28
  110e04:	e1a01003 	mov	r1, r3
  110e08:	e3000bf8 	movw	r0, #3064	; 0xbf8
  110e0c:	e3400011 	movt	r0, #17
  110e10:	eb00153d 	bl	11630c <tcpip_api_call>
  110e14:	e1a03000 	mov	r3, r0
  110e18:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110e1c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110e20:	e1a00003 	mov	r0, r3
  110e24:	e24bd004 	sub	sp, fp, #4
  110e28:	e8bd8800 	pop	{fp, pc}

00110e2c <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110e2c:	e92d4800 	push	{fp, lr}
  110e30:	e28db004 	add	fp, sp, #4
  110e34:	e24dd038 	sub	sp, sp, #56	; 0x38
  110e38:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110e3c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110e40:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110e44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110e48:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110e4c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110e50:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110e54:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110e58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110e5c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110e60:	e1a01003 	mov	r1, r3
  110e64:	e3000c44 	movw	r0, #3140	; 0xc44
  110e68:	e3400011 	movt	r0, #17
  110e6c:	eb001526 	bl	11630c <tcpip_api_call>
  110e70:	e1a03000 	mov	r3, r0
  110e74:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110e78:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110e7c:	e1a00003 	mov	r0, r3
  110e80:	e24bd004 	sub	sp, fp, #4
  110e84:	e8bd8800 	pop	{fp, pc}

00110e88 <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110e88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110e8c:	e28db000 	add	fp, sp, #0
  110e90:	e24dd00c 	sub	sp, sp, #12
  110e94:	e50b0008 	str	r0, [fp, #-8]
  110e98:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110e9c:	e51b3008 	ldr	r3, [fp, #-8]
  110ea0:	e2033008 	and	r3, r3, #8
  110ea4:	e3530000 	cmp	r3, #0
  110ea8:	1a000007 	bne	110ecc <access_is_blocking+0x44>
  110eac:	e51b300c 	ldr	r3, [fp, #-12]
  110eb0:	e5933000 	ldr	r3, [r3]
  110eb4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110eb8:	e2033002 	and	r3, r3, #2
  110ebc:	e3530000 	cmp	r3, #0
  110ec0:	1a000001 	bne	110ecc <access_is_blocking+0x44>
  110ec4:	e3a03001 	mov	r3, #1
  110ec8:	ea000000 	b	110ed0 <access_is_blocking+0x48>
  110ecc:	e3a03000 	mov	r3, #0
}
  110ed0:	e1a00003 	mov	r0, r3
  110ed4:	e28bd000 	add	sp, fp, #0
  110ed8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110edc:	e12fff1e 	bx	lr

00110ee0 <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110ee0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110ee4:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110ee8:	e320f000 	nop	{0}
  110eec:	e28bd000 	add	sp, fp, #0
  110ef0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110ef4:	e12fff1e 	bx	lr

00110ef8 <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110ef8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110efc:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110f00:	e320f000 	nop	{0}
  110f04:	e28bd000 	add	sp, fp, #0
  110f08:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110f0c:	e12fff1e 	bx	lr

00110f10 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110f10:	e92d4800 	push	{fp, lr}
  110f14:	e28db004 	add	fp, sp, #4
  110f18:	e24dd010 	sub	sp, sp, #16
  110f1c:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110f20:	e51b3010 	ldr	r3, [fp, #-16]
  110f24:	e3530000 	cmp	r3, #0
  110f28:	ba000002 	blt	110f38 <get_socket+0x28>
  110f2c:	e51b3010 	ldr	r3, [fp, #-16]
  110f30:	e3530007 	cmp	r3, #7
  110f34:	da000005 	ble	110f50 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f38:	eb009fe3 	bl	138ecc <__errno_location>
  110f3c:	e1a02000 	mov	r2, r0
  110f40:	e3a03009 	mov	r3, #9
  110f44:	e5823000 	str	r3, [r2]
    return NULL;
  110f48:	e3a03000 	mov	r3, #0
  110f4c:	ea000011 	b	110f98 <get_socket+0x88>
  }

  sock = &sockets[s];
  110f50:	e51b3010 	ldr	r3, [fp, #-16]
  110f54:	e3a02014 	mov	r2, #20
  110f58:	e0020392 	mul	r2, r2, r3
  110f5c:	e30d3bac 	movw	r3, #56236	; 0xdbac
  110f60:	e3403014 	movt	r3, #20
  110f64:	e0823003 	add	r3, r2, r3
  110f68:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110f6c:	e51b3008 	ldr	r3, [fp, #-8]
  110f70:	e5933000 	ldr	r3, [r3]
  110f74:	e3530000 	cmp	r3, #0
  110f78:	1a000005 	bne	110f94 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f7c:	eb009fd2 	bl	138ecc <__errno_location>
  110f80:	e1a02000 	mov	r2, r0
  110f84:	e3a03009 	mov	r3, #9
  110f88:	e5823000 	str	r3, [r2]
    return NULL;
  110f8c:	e3a03000 	mov	r3, #0
  110f90:	ea000000 	b	110f98 <get_socket+0x88>
  }

  return sock;
  110f94:	e51b3008 	ldr	r3, [fp, #-8]
}
  110f98:	e1a00003 	mov	r0, r3
  110f9c:	e24bd004 	sub	sp, fp, #4
  110fa0:	e8bd8800 	pop	{fp, pc}

00110fa4 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110fa4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110fa8:	e28db000 	add	fp, sp, #0
  110fac:	e24dd00c 	sub	sp, sp, #12
  110fb0:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110fb4:	e51b3008 	ldr	r3, [fp, #-8]
  110fb8:	e3530000 	cmp	r3, #0
  110fbc:	ba000002 	blt	110fcc <tryget_socket+0x28>
  110fc0:	e51b3008 	ldr	r3, [fp, #-8]
  110fc4:	e3530007 	cmp	r3, #7
  110fc8:	da000001 	ble	110fd4 <tryget_socket+0x30>
    return NULL;
  110fcc:	e3a03000 	mov	r3, #0
  110fd0:	ea000010 	b	111018 <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110fd4:	e30d3bac 	movw	r3, #56236	; 0xdbac
  110fd8:	e3403014 	movt	r3, #20
  110fdc:	e51b2008 	ldr	r2, [fp, #-8]
  110fe0:	e3a01014 	mov	r1, #20
  110fe4:	e0020291 	mul	r2, r1, r2
  110fe8:	e0833002 	add	r3, r3, r2
  110fec:	e5933000 	ldr	r3, [r3]
  110ff0:	e3530000 	cmp	r3, #0
  110ff4:	1a000001 	bne	111000 <tryget_socket+0x5c>
    return NULL;
  110ff8:	e3a03000 	mov	r3, #0
  110ffc:	ea000005 	b	111018 <tryget_socket+0x74>
  }
  return &sockets[s];
  111000:	e51b3008 	ldr	r3, [fp, #-8]
  111004:	e3a02014 	mov	r2, #20
  111008:	e0020392 	mul	r2, r2, r3
  11100c:	e30d3bac 	movw	r3, #56236	; 0xdbac
  111010:	e3403014 	movt	r3, #20
  111014:	e0823003 	add	r3, r2, r3
}
  111018:	e1a00003 	mov	r0, r3
  11101c:	e28bd000 	add	sp, fp, #0
  111020:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  111024:	e12fff1e 	bx	lr

00111028 <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  111028:	e92d4800 	push	{fp, lr}
  11102c:	e28db004 	add	fp, sp, #4
  111030:	e24dd008 	sub	sp, sp, #8
  111034:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  111038:	e51b0008 	ldr	r0, [fp, #-8]
  11103c:	ebffffd8 	bl	110fa4 <tryget_socket>
  111040:	e1a03000 	mov	r3, r0
}
  111044:	e1a00003 	mov	r0, r3
  111048:	e24bd004 	sub	sp, fp, #4
  11104c:	e8bd8800 	pop	{fp, pc}

00111050 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  111050:	e92d4800 	push	{fp, lr}
  111054:	e28db004 	add	fp, sp, #4
  111058:	e24dd010 	sub	sp, sp, #16
  11105c:	e50b0010 	str	r0, [fp, #-16]
  111060:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  111064:	e3a03000 	mov	r3, #0
  111068:	e50b3008 	str	r3, [fp, #-8]
  11106c:	ea000063 	b	111200 <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  111070:	ebffc471 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  111074:	e30d3bac 	movw	r3, #56236	; 0xdbac
  111078:	e3403014 	movt	r3, #20
  11107c:	e51b2008 	ldr	r2, [fp, #-8]
  111080:	e3a01014 	mov	r1, #20
  111084:	e0020291 	mul	r2, r1, r2
  111088:	e0833002 	add	r3, r3, r2
  11108c:	e5933000 	ldr	r3, [r3]
  111090:	e3530000 	cmp	r3, #0
  111094:	1a000055 	bne	1111f0 <alloc_socket+0x1a0>
  111098:	e30d3bac 	movw	r3, #56236	; 0xdbac
  11109c:	e3403014 	movt	r3, #20
  1110a0:	e51b2008 	ldr	r2, [fp, #-8]
  1110a4:	e3a01014 	mov	r1, #20
  1110a8:	e0020291 	mul	r2, r1, r2
  1110ac:	e0833002 	add	r3, r3, r2
  1110b0:	e2833011 	add	r3, r3, #17
  1110b4:	e5d33000 	ldrb	r3, [r3]
  1110b8:	e3530000 	cmp	r3, #0
  1110bc:	1a00004b 	bne	1111f0 <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  1110c0:	e30d3bac 	movw	r3, #56236	; 0xdbac
  1110c4:	e3403014 	movt	r3, #20
  1110c8:	e51b2008 	ldr	r2, [fp, #-8]
  1110cc:	e3a01014 	mov	r1, #20
  1110d0:	e0020291 	mul	r2, r1, r2
  1110d4:	e0833002 	add	r3, r3, r2
  1110d8:	e51b2010 	ldr	r2, [fp, #-16]
  1110dc:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  1110e0:	ebffc45b 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  1110e4:	e30d3bac 	movw	r3, #56236	; 0xdbac
  1110e8:	e3403014 	movt	r3, #20
  1110ec:	e51b2008 	ldr	r2, [fp, #-8]
  1110f0:	e3a01014 	mov	r1, #20
  1110f4:	e0020291 	mul	r2, r1, r2
  1110f8:	e0833002 	add	r3, r3, r2
  1110fc:	e2833004 	add	r3, r3, #4
  111100:	e3a02000 	mov	r2, #0
  111104:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  111108:	e30d3bac 	movw	r3, #56236	; 0xdbac
  11110c:	e3403014 	movt	r3, #20
  111110:	e51b2008 	ldr	r2, [fp, #-8]
  111114:	e3a01014 	mov	r1, #20
  111118:	e0020291 	mul	r2, r1, r2
  11111c:	e0833002 	add	r3, r3, r2
  111120:	e2833008 	add	r3, r3, #8
  111124:	e3a02000 	mov	r2, #0
  111128:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  11112c:	e30d3bac 	movw	r3, #56236	; 0xdbac
  111130:	e3403014 	movt	r3, #20
  111134:	e51b2008 	ldr	r2, [fp, #-8]
  111138:	e3a01014 	mov	r1, #20
  11113c:	e0020291 	mul	r2, r1, r2
  111140:	e0833002 	add	r3, r3, r2
  111144:	e283300a 	add	r3, r3, #10
  111148:	e3a02000 	mov	r2, #0
  11114c:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  111150:	e51b3010 	ldr	r3, [fp, #-16]
  111154:	e5933000 	ldr	r3, [r3]
  111158:	e20330f0 	and	r3, r3, #240	; 0xf0
  11115c:	e3530010 	cmp	r3, #16
  111160:	1a000002 	bne	111170 <alloc_socket+0x120>
  111164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111168:	e3530000 	cmp	r3, #0
  11116c:	0a000001 	beq	111178 <alloc_socket+0x128>
  111170:	e3a03001 	mov	r3, #1
  111174:	ea000000 	b	11117c <alloc_socket+0x12c>
  111178:	e3a03000 	mov	r3, #0
  11117c:	e6ff2073 	uxth	r2, r3
  111180:	e30d3bac 	movw	r3, #56236	; 0xdbac
  111184:	e3403014 	movt	r3, #20
  111188:	e51b1008 	ldr	r1, [fp, #-8]
  11118c:	e3a00014 	mov	r0, #20
  111190:	e0010190 	mul	r1, r0, r1
  111194:	e0833001 	add	r3, r3, r1
  111198:	e283300c 	add	r3, r3, #12
  11119c:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  1111a0:	e30d3bac 	movw	r3, #56236	; 0xdbac
  1111a4:	e3403014 	movt	r3, #20
  1111a8:	e51b2008 	ldr	r2, [fp, #-8]
  1111ac:	e3a01014 	mov	r1, #20
  1111b0:	e0020291 	mul	r2, r1, r2
  1111b4:	e0833002 	add	r3, r3, r2
  1111b8:	e283300e 	add	r3, r3, #14
  1111bc:	e3a02000 	mov	r2, #0
  1111c0:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  1111c4:	e30d3bac 	movw	r3, #56236	; 0xdbac
  1111c8:	e3403014 	movt	r3, #20
  1111cc:	e51b2008 	ldr	r2, [fp, #-8]
  1111d0:	e3a01014 	mov	r1, #20
  1111d4:	e0020291 	mul	r2, r1, r2
  1111d8:	e0833002 	add	r3, r3, r2
  1111dc:	e2833010 	add	r3, r3, #16
  1111e0:	e3a02000 	mov	r2, #0
  1111e4:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  1111e8:	e51b3008 	ldr	r3, [fp, #-8]
  1111ec:	ea000007 	b	111210 <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  1111f0:	ebffc417 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  1111f4:	e51b3008 	ldr	r3, [fp, #-8]
  1111f8:	e2833001 	add	r3, r3, #1
  1111fc:	e50b3008 	str	r3, [fp, #-8]
  111200:	e51b3008 	ldr	r3, [fp, #-8]
  111204:	e3530007 	cmp	r3, #7
  111208:	daffff98 	ble	111070 <alloc_socket+0x20>
  }
  return -1;
  11120c:	e3e03000 	mvn	r3, #0
}
  111210:	e1a00003 	mov	r0, r3
  111214:	e24bd004 	sub	sp, fp, #4
  111218:	e8bd8800 	pop	{fp, pc}

0011121c <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  11121c:	e92d4800 	push	{fp, lr}
  111220:	e28db004 	add	fp, sp, #4
  111224:	e24dd010 	sub	sp, sp, #16
  111228:	e50b0010 	str	r0, [fp, #-16]
  11122c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  111230:	e51b3010 	ldr	r3, [fp, #-16]
  111234:	e5933004 	ldr	r3, [r3, #4]
  111238:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  11123c:	e51b3010 	ldr	r3, [fp, #-16]
  111240:	e3a02000 	mov	r2, #0
  111244:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  111248:	e51b3010 	ldr	r3, [fp, #-16]
  11124c:	e3a02000 	mov	r2, #0
  111250:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  111254:	e51b3010 	ldr	r3, [fp, #-16]
  111258:	e3a02000 	mov	r2, #0
  11125c:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  111260:	ebffc3f5 	bl	10223c <rt_enter_critical>
  111264:	e51b3010 	ldr	r3, [fp, #-16]
  111268:	e3a02000 	mov	r2, #0
  11126c:	e5832000 	str	r2, [r3]
  111270:	ebffc3f7 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  111274:	e51b3008 	ldr	r3, [fp, #-8]
  111278:	e3530000 	cmp	r3, #0
  11127c:	0a000007 	beq	1112a0 <free_socket+0x84>
    if (is_tcp) {
  111280:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111284:	e3530000 	cmp	r3, #0
  111288:	0a000002 	beq	111298 <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  11128c:	e51b0008 	ldr	r0, [fp, #-8]
  111290:	eb002702 	bl	11aea0 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  111294:	ea000001 	b	1112a0 <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  111298:	e51b0008 	ldr	r0, [fp, #-8]
  11129c:	ebfffb1e 	bl	10ff1c <netbuf_delete>
}
  1112a0:	e320f000 	nop	{0}
  1112a4:	e24bd004 	sub	sp, fp, #4
  1112a8:	e8bd8800 	pop	{fp, pc}

001112ac <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  1112ac:	e92d4810 	push	{r4, fp, lr}
  1112b0:	e28db008 	add	fp, sp, #8
  1112b4:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  1112b8:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  1112bc:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  1112c0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  1112c4:	e3a03000 	mov	r3, #0
  1112c8:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  1112cc:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1112d0:	ebffff0e 	bl	110f10 <get_socket>
  1112d4:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  1112d8:	e51b3010 	ldr	r3, [fp, #-16]
  1112dc:	e3530000 	cmp	r3, #0
  1112e0:	1a000001 	bne	1112ec <lwip_accept+0x40>
    return -1;
  1112e4:	e3e03000 	mvn	r3, #0
  1112e8:	ea0000fa 	b	1116d8 <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  1112ec:	e51b3010 	ldr	r3, [fp, #-16]
  1112f0:	e5933000 	ldr	r3, [r3]
  1112f4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1112f8:	e2033002 	and	r3, r3, #2
  1112fc:	e3530000 	cmp	r3, #0
  111300:	0a000009 	beq	11132c <lwip_accept+0x80>
  111304:	e51b3010 	ldr	r3, [fp, #-16]
  111308:	e1d330fa 	ldrsh	r3, [r3, #10]
  11130c:	e3530000 	cmp	r3, #0
  111310:	ca000005 	bgt	11132c <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  111314:	eb009eec 	bl	138ecc <__errno_location>
  111318:	e1a02000 	mov	r2, r0
  11131c:	e3a0300b 	mov	r3, #11
  111320:	e5823000 	str	r3, [r2]
    return -1;
  111324:	e3e03000 	mvn	r3, #0
  111328:	ea0000ea 	b	1116d8 <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  11132c:	e51b3010 	ldr	r3, [fp, #-16]
  111330:	e5933000 	ldr	r3, [r3]
  111334:	e24b2038 	sub	r2, fp, #56	; 0x38
  111338:	e1a01002 	mov	r1, r2
  11133c:	e1a00003 	mov	r0, r3
  111340:	ebffe924 	bl	10b7d8 <netconn_accept>
  111344:	e1a03000 	mov	r3, r0
  111348:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  11134c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111350:	e3530000 	cmp	r3, #0
  111354:	0a000035 	beq	111430 <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111358:	e51b3010 	ldr	r3, [fp, #-16]
  11135c:	e5933000 	ldr	r3, [r3]
  111360:	e5933000 	ldr	r3, [r3]
  111364:	e20330f0 	and	r3, r3, #240	; 0xf0
  111368:	e3530010 	cmp	r3, #16
  11136c:	0a00000d 	beq	1113a8 <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  111370:	e3a0305f 	mov	r3, #95	; 0x5f
  111374:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  111378:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11137c:	e6ef2073 	uxtb	r2, r3
  111380:	e51b3010 	ldr	r3, [fp, #-16]
  111384:	e5c32010 	strb	r2, [r3, #16]
  111388:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11138c:	e3530000 	cmp	r3, #0
  111390:	0a000024 	beq	111428 <lwip_accept+0x17c>
  111394:	eb009ecc 	bl	138ecc <__errno_location>
  111398:	e1a02000 	mov	r2, r0
  11139c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1113a0:	e5823000 	str	r3, [r2]
  1113a4:	ea00001f 	b	111428 <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  1113a8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1113ac:	e373000f 	cmn	r3, #15
  1113b0:	1a00000d 	bne	1113ec <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  1113b4:	e3a03016 	mov	r3, #22
  1113b8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  1113bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113c0:	e6ef2073 	uxtb	r2, r3
  1113c4:	e51b3010 	ldr	r3, [fp, #-16]
  1113c8:	e5c32010 	strb	r2, [r3, #16]
  1113cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113d0:	e3530000 	cmp	r3, #0
  1113d4:	0a000013 	beq	111428 <lwip_accept+0x17c>
  1113d8:	eb009ebb 	bl	138ecc <__errno_location>
  1113dc:	e1a02000 	mov	r2, r0
  1113e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113e4:	e5823000 	str	r3, [r2]
  1113e8:	ea00000e 	b	111428 <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  1113ec:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1113f0:	e1a00003 	mov	r0, r3
  1113f4:	ebfffa9d 	bl	10fe70 <err_to_errno>
  1113f8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  1113fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111400:	e6ef2073 	uxtb	r2, r3
  111404:	e51b3010 	ldr	r3, [fp, #-16]
  111408:	e5c32010 	strb	r2, [r3, #16]
  11140c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111410:	e3530000 	cmp	r3, #0
  111414:	0a000003 	beq	111428 <lwip_accept+0x17c>
  111418:	eb009eab 	bl	138ecc <__errno_location>
  11141c:	e1a02000 	mov	r2, r0
  111420:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111424:	e5823000 	str	r3, [r2]
    }
    return -1;
  111428:	e3e03000 	mvn	r3, #0
  11142c:	ea0000a9 	b	1116d8 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  111430:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111434:	e3530000 	cmp	r3, #0
  111438:	1a000006 	bne	111458 <lwip_accept+0x1ac>
  11143c:	e3060d50 	movw	r0, #27984	; 0x6d50
  111440:	e3400014 	movt	r0, #20
  111444:	ebffc732 	bl	103114 <rt_kprintf>
  111448:	e300120a 	movw	r1, #522	; 0x20a
  11144c:	e3060d60 	movw	r0, #28000	; 0x6d60
  111450:	e3400014 	movt	r0, #20
  111454:	ebffe721 	bl	10b0e0 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  111458:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11145c:	e3a01001 	mov	r1, #1
  111460:	e1a00003 	mov	r0, r3
  111464:	ebfffef9 	bl	111050 <alloc_socket>
  111468:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  11146c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111470:	e3730001 	cmn	r3, #1
  111474:	1a000011 	bne	1114c0 <lwip_accept+0x214>
    netconn_delete(newconn);
  111478:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11147c:	e1a00003 	mov	r0, r3
  111480:	ebffe7e6 	bl	10b420 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  111484:	e3a03017 	mov	r3, #23
  111488:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  11148c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111490:	e6ef2073 	uxtb	r2, r3
  111494:	e51b3010 	ldr	r3, [fp, #-16]
  111498:	e5c32010 	strb	r2, [r3, #16]
  11149c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114a0:	e3530000 	cmp	r3, #0
  1114a4:	0a000003 	beq	1114b8 <lwip_accept+0x20c>
  1114a8:	eb009e87 	bl	138ecc <__errno_location>
  1114ac:	e1a02000 	mov	r2, r0
  1114b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114b4:	e5823000 	str	r3, [r2]
    return -1;
  1114b8:	e3e03000 	mvn	r3, #0
  1114bc:	ea000085 	b	1116d8 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  1114c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114c4:	e3530000 	cmp	r3, #0
  1114c8:	ba000002 	blt	1114d8 <lwip_accept+0x22c>
  1114cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114d0:	e3530007 	cmp	r3, #7
  1114d4:	da000006 	ble	1114f4 <lwip_accept+0x248>
  1114d8:	e3060d90 	movw	r0, #28048	; 0x6d90
  1114dc:	e3400014 	movt	r0, #20
  1114e0:	ebffc70b 	bl	103114 <rt_kprintf>
  1114e4:	e3001212 	movw	r1, #530	; 0x212
  1114e8:	e3060d60 	movw	r0, #28000	; 0x6d60
  1114ec:	e3400014 	movt	r0, #20
  1114f0:	ebffe6fa 	bl	10b0e0 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  1114f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114f8:	e3a02014 	mov	r2, #20
  1114fc:	e0020392 	mul	r2, r2, r3
  111500:	e30d3bac 	movw	r3, #56236	; 0xdbac
  111504:	e3403014 	movt	r3, #20
  111508:	e0823003 	add	r3, r2, r3
  11150c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  111510:	ebffc349 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  111514:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111518:	e1d330fa 	ldrsh	r3, [r3, #10]
  11151c:	e6ff2073 	uxth	r2, r3
  111520:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111524:	e593301c 	ldr	r3, [r3, #28]
  111528:	e6ff3073 	uxth	r3, r3
  11152c:	e0423003 	sub	r3, r2, r3
  111530:	e6ff3073 	uxth	r3, r3
  111534:	e2433001 	sub	r3, r3, #1
  111538:	e6ff3073 	uxth	r3, r3
  11153c:	e6bf2073 	sxth	r2, r3
  111540:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111544:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  111548:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11154c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111550:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111554:	ebffc33e 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  111558:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  11155c:	e3530000 	cmp	r3, #0
  111560:	0a00004e 	beq	1116a0 <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111564:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  111568:	e24b203e 	sub	r2, fp, #62	; 0x3e
  11156c:	e24b103c 	sub	r1, fp, #60	; 0x3c
  111570:	e3a03000 	mov	r3, #0
  111574:	ebffe7c9 	bl	10b4a0 <netconn_getaddr>
  111578:	e1a03000 	mov	r3, r0
  11157c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  111580:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111584:	e3530000 	cmp	r3, #0
  111588:	0a000016 	beq	1115e8 <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  11158c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111590:	e1a00003 	mov	r0, r3
  111594:	ebffe7a1 	bl	10b420 <netconn_delete>
      free_socket(nsock, 1);
  111598:	e3a01001 	mov	r1, #1
  11159c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1115a0:	ebffff1d 	bl	11121c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  1115a4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1115a8:	e1a00003 	mov	r0, r3
  1115ac:	ebfffa2f 	bl	10fe70 <err_to_errno>
  1115b0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1115b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115b8:	e6ef2073 	uxtb	r2, r3
  1115bc:	e51b3010 	ldr	r3, [fp, #-16]
  1115c0:	e5c32010 	strb	r2, [r3, #16]
  1115c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115c8:	e3530000 	cmp	r3, #0
  1115cc:	0a000003 	beq	1115e0 <lwip_accept+0x334>
  1115d0:	eb009e3d 	bl	138ecc <__errno_location>
  1115d4:	e1a02000 	mov	r2, r0
  1115d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115dc:	e5823000 	str	r3, [r2]
      return -1;
  1115e0:	e3e03000 	mvn	r3, #0
  1115e4:	ea00003b 	b	1116d8 <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  1115e8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1115ec:	e3530000 	cmp	r3, #0
  1115f0:	1a000006 	bne	111610 <lwip_accept+0x364>
  1115f4:	e3060da8 	movw	r0, #28072	; 0x6da8
  1115f8:	e3400014 	movt	r0, #20
  1115fc:	ebffc6c4 	bl	103114 <rt_kprintf>
  111600:	e300122e 	movw	r1, #558	; 0x22e
  111604:	e3060d60 	movw	r0, #28000	; 0x6d60
  111608:	e3400014 	movt	r0, #20
  11160c:	ebffe6b3 	bl	10b0e0 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  111610:	e24b3050 	sub	r3, fp, #80	; 0x50
  111614:	e3a02010 	mov	r2, #16
  111618:	e5c32000 	strb	r2, [r3]
  11161c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111620:	e3a02002 	mov	r2, #2
  111624:	e5c32001 	strb	r2, [r3, #1]
  111628:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  11162c:	e24b4050 	sub	r4, fp, #80	; 0x50
  111630:	e1a00003 	mov	r0, r3
  111634:	eb0013e2 	bl	1165c4 <lwip_htons>
  111638:	e1a03000 	mov	r3, r0
  11163c:	e1c430b2 	strh	r3, [r4, #2]
  111640:	e24b3050 	sub	r3, fp, #80	; 0x50
  111644:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111648:	e5832004 	str	r2, [r3, #4]
  11164c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111650:	e2833008 	add	r3, r3, #8
  111654:	e3a02008 	mov	r2, #8
  111658:	e3a01000 	mov	r1, #0
  11165c:	e1a00003 	mov	r0, r3
  111660:	eb00beff 	bl	141264 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111664:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111668:	e5933000 	ldr	r3, [r3]
  11166c:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  111670:	e1530002 	cmp	r3, r2
  111674:	9a000003 	bls	111688 <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  111678:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  11167c:	e1a02003 	mov	r2, r3
  111680:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111684:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  111688:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  11168c:	e5932000 	ldr	r2, [r3]
  111690:	e24b3050 	sub	r3, fp, #80	; 0x50
  111694:	e1a01003 	mov	r1, r3
  111698:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  11169c:	eb00bdb8 	bl	140d84 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  1116a0:	e3a03000 	mov	r3, #0
  1116a4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1116a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116ac:	e6ef2073 	uxtb	r2, r3
  1116b0:	e51b3010 	ldr	r3, [fp, #-16]
  1116b4:	e5c32010 	strb	r2, [r3, #16]
  1116b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116bc:	e3530000 	cmp	r3, #0
  1116c0:	0a000003 	beq	1116d4 <lwip_accept+0x428>
  1116c4:	eb009e00 	bl	138ecc <__errno_location>
  1116c8:	e1a02000 	mov	r2, r0
  1116cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116d0:	e5823000 	str	r3, [r2]
  return newsock;
  1116d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1116d8:	e1a00003 	mov	r0, r3
  1116dc:	e24bd008 	sub	sp, fp, #8
  1116e0:	e8bd8810 	pop	{r4, fp, pc}

001116e4 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  1116e4:	e92d4800 	push	{fp, lr}
  1116e8:	e28db004 	add	fp, sp, #4
  1116ec:	e24dd028 	sub	sp, sp, #40	; 0x28
  1116f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1116f4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1116f8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  1116fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111700:	ebfffe02 	bl	110f10 <get_socket>
  111704:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111708:	e51b3008 	ldr	r3, [fp, #-8]
  11170c:	e3530000 	cmp	r3, #0
  111710:	1a000001 	bne	11171c <lwip_bind+0x38>
    return -1;
  111714:	e3e03000 	mvn	r3, #0
  111718:	ea000054 	b	111870 <lwip_bind+0x18c>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  11171c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111720:	e3530010 	cmp	r3, #16
  111724:	1a000007 	bne	111748 <lwip_bind+0x64>
  111728:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11172c:	e5d33001 	ldrb	r3, [r3, #1]
  111730:	e3530002 	cmp	r3, #2
  111734:	1a000003 	bne	111748 <lwip_bind+0x64>
  111738:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11173c:	e2033003 	and	r3, r3, #3
  111740:	e3530000 	cmp	r3, #0
  111744:	0a000016 	beq	1117a4 <lwip_bind+0xc0>
  111748:	e3060dc4 	movw	r0, #28100	; 0x6dc4
  11174c:	e3400014 	movt	r0, #20
  111750:	ebffc66f 	bl	103114 <rt_kprintf>
  111754:	e3001257 	movw	r1, #599	; 0x257
  111758:	e3060d60 	movw	r0, #28000	; 0x6d60
  11175c:	e3400014 	movt	r0, #20
  111760:	ebffe65e 	bl	10b0e0 <sys_arch_assert>
  111764:	e3e0000f 	mvn	r0, #15
  111768:	ebfff9c0 	bl	10fe70 <err_to_errno>
  11176c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  111770:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111774:	e6ef2073 	uxtb	r2, r3
  111778:	e51b3008 	ldr	r3, [fp, #-8]
  11177c:	e5c32010 	strb	r2, [r3, #16]
  111780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111784:	e3530000 	cmp	r3, #0
  111788:	0a000003 	beq	11179c <lwip_bind+0xb8>
  11178c:	eb009dce 	bl	138ecc <__errno_location>
  111790:	e1a02000 	mov	r2, r0
  111794:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111798:	e5823000 	str	r3, [r2]
  11179c:	e3e03000 	mvn	r3, #0
  1117a0:	ea000032 	b	111870 <lwip_bind+0x18c>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  1117a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1117a8:	e5933004 	ldr	r3, [r3, #4]
  1117ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1117b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1117b4:	e1d330b2 	ldrh	r3, [r3, #2]
  1117b8:	e1a00003 	mov	r0, r3
  1117bc:	eb001380 	bl	1165c4 <lwip_htons>
  1117c0:	e1a03000 	mov	r3, r0
  1117c4:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  1117c8:	e51b3008 	ldr	r3, [fp, #-8]
  1117cc:	e5933000 	ldr	r3, [r3]
  1117d0:	e15b20ba 	ldrh	r2, [fp, #-10]
  1117d4:	e24b101c 	sub	r1, fp, #28
  1117d8:	e1a00003 	mov	r0, r3
  1117dc:	ebffe76d 	bl	10b598 <netconn_bind>
  1117e0:	e1a03000 	mov	r3, r0
  1117e4:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  1117e8:	e15b30db 	ldrsb	r3, [fp, #-11]
  1117ec:	e3530000 	cmp	r3, #0
  1117f0:	0a000010 	beq	111838 <lwip_bind+0x154>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  1117f4:	e15b30db 	ldrsb	r3, [fp, #-11]
  1117f8:	e1a00003 	mov	r0, r3
  1117fc:	ebfff99b 	bl	10fe70 <err_to_errno>
  111800:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111808:	e6ef2073 	uxtb	r2, r3
  11180c:	e51b3008 	ldr	r3, [fp, #-8]
  111810:	e5c32010 	strb	r2, [r3, #16]
  111814:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111818:	e3530000 	cmp	r3, #0
  11181c:	0a000003 	beq	111830 <lwip_bind+0x14c>
  111820:	eb009da9 	bl	138ecc <__errno_location>
  111824:	e1a02000 	mov	r2, r0
  111828:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11182c:	e5823000 	str	r3, [r2]
    return -1;
  111830:	e3e03000 	mvn	r3, #0
  111834:	ea00000d 	b	111870 <lwip_bind+0x18c>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111838:	e3a03000 	mov	r3, #0
  11183c:	e50b3010 	str	r3, [fp, #-16]
  111840:	e51b3010 	ldr	r3, [fp, #-16]
  111844:	e6ef2073 	uxtb	r2, r3
  111848:	e51b3008 	ldr	r3, [fp, #-8]
  11184c:	e5c32010 	strb	r2, [r3, #16]
  111850:	e51b3010 	ldr	r3, [fp, #-16]
  111854:	e3530000 	cmp	r3, #0
  111858:	0a000003 	beq	11186c <lwip_bind+0x188>
  11185c:	eb009d9a 	bl	138ecc <__errno_location>
  111860:	e1a02000 	mov	r2, r0
  111864:	e51b3010 	ldr	r3, [fp, #-16]
  111868:	e5823000 	str	r3, [r2]
  return 0;
  11186c:	e3a03000 	mov	r3, #0
}
  111870:	e1a00003 	mov	r0, r3
  111874:	e24bd004 	sub	sp, fp, #4
  111878:	e8bd8800 	pop	{fp, pc}

0011187c <lwip_close>:

int
lwip_close(int s)
{
  11187c:	e92d4800 	push	{fp, lr}
  111880:	e28db004 	add	fp, sp, #4
  111884:	e24dd018 	sub	sp, sp, #24
  111888:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  11188c:	e3a03000 	mov	r3, #0
  111890:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  111894:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111898:	ebfffd9c 	bl	110f10 <get_socket>
  11189c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1118a0:	e51b300c 	ldr	r3, [fp, #-12]
  1118a4:	e3530000 	cmp	r3, #0
  1118a8:	1a000001 	bne	1118b4 <lwip_close+0x38>
    return -1;
  1118ac:	e3e03000 	mvn	r3, #0
  1118b0:	ea000038 	b	111998 <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  1118b4:	e51b300c 	ldr	r3, [fp, #-12]
  1118b8:	e5933000 	ldr	r3, [r3]
  1118bc:	e3530000 	cmp	r3, #0
  1118c0:	0a000009 	beq	1118ec <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  1118c4:	e51b300c 	ldr	r3, [fp, #-12]
  1118c8:	e5933000 	ldr	r3, [r3]
  1118cc:	e5933000 	ldr	r3, [r3]
  1118d0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1118d4:	e3530010 	cmp	r3, #16
  1118d8:	03a03001 	moveq	r3, #1
  1118dc:	13a03000 	movne	r3, #0
  1118e0:	e6ef3073 	uxtb	r3, r3
  1118e4:	e50b3008 	str	r3, [fp, #-8]
  1118e8:	ea00000a 	b	111918 <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  1118ec:	e51b300c 	ldr	r3, [fp, #-12]
  1118f0:	e5933004 	ldr	r3, [r3, #4]
  1118f4:	e3530000 	cmp	r3, #0
  1118f8:	0a000006 	beq	111918 <lwip_close+0x9c>
  1118fc:	e3060de0 	movw	r0, #28128	; 0x6de0
  111900:	e3400014 	movt	r0, #20
  111904:	ebffc602 	bl	103114 <rt_kprintf>
  111908:	e3001285 	movw	r1, #645	; 0x285
  11190c:	e3060d60 	movw	r0, #28000	; 0x6d60
  111910:	e3400014 	movt	r0, #20
  111914:	ebffe5f1 	bl	10b0e0 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  111918:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11191c:	eb001126 	bl	115dbc <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  111920:	e51b300c 	ldr	r3, [fp, #-12]
  111924:	e5933000 	ldr	r3, [r3]
  111928:	e1a00003 	mov	r0, r3
  11192c:	ebffe6bb 	bl	10b420 <netconn_delete>
  111930:	e1a03000 	mov	r3, r0
  111934:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  111938:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11193c:	e3530000 	cmp	r3, #0
  111940:	0a000010 	beq	111988 <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  111944:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111948:	e1a00003 	mov	r0, r3
  11194c:	ebfff947 	bl	10fe70 <err_to_errno>
  111950:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111958:	e6ef2073 	uxtb	r2, r3
  11195c:	e51b300c 	ldr	r3, [fp, #-12]
  111960:	e5c32010 	strb	r2, [r3, #16]
  111964:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111968:	e3530000 	cmp	r3, #0
  11196c:	0a000003 	beq	111980 <lwip_close+0x104>
  111970:	eb009d55 	bl	138ecc <__errno_location>
  111974:	e1a02000 	mov	r2, r0
  111978:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11197c:	e5823000 	str	r3, [r2]
    return -1;
  111980:	e3e03000 	mvn	r3, #0
  111984:	ea000003 	b	111998 <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  111988:	e51b1008 	ldr	r1, [fp, #-8]
  11198c:	e51b000c 	ldr	r0, [fp, #-12]
  111990:	ebfffe21 	bl	11121c <free_socket>
  set_errno(0);
  return 0;
  111994:	e3a03000 	mov	r3, #0
}
  111998:	e1a00003 	mov	r0, r3
  11199c:	e24bd004 	sub	sp, fp, #4
  1119a0:	e8bd8800 	pop	{fp, pc}

001119a4 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  1119a4:	e92d4800 	push	{fp, lr}
  1119a8:	e28db004 	add	fp, sp, #4
  1119ac:	e24dd030 	sub	sp, sp, #48	; 0x30
  1119b0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1119b4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1119b8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  1119bc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1119c0:	ebfffd52 	bl	110f10 <get_socket>
  1119c4:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1119c8:	e51b300c 	ldr	r3, [fp, #-12]
  1119cc:	e3530000 	cmp	r3, #0
  1119d0:	1a000001 	bne	1119dc <lwip_connect+0x38>
    return -1;
  1119d4:	e3e03000 	mvn	r3, #0
  1119d8:	ea000063 	b	111b6c <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  1119dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1119e0:	e5d33001 	ldrb	r3, [r3, #1]
  1119e4:	e3530000 	cmp	r3, #0
  1119e8:	1a000006 	bne	111a08 <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  1119ec:	e51b300c 	ldr	r3, [fp, #-12]
  1119f0:	e5933000 	ldr	r3, [r3]
  1119f4:	e1a00003 	mov	r0, r3
  1119f8:	ebffe73a 	bl	10b6e8 <netconn_disconnect>
  1119fc:	e1a03000 	mov	r3, r0
  111a00:	e54b3005 	strb	r3, [fp, #-5]
  111a04:	ea000036 	b	111ae4 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111a08:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111a0c:	e3530010 	cmp	r3, #16
  111a10:	1a00000b 	bne	111a44 <lwip_connect+0xa0>
  111a14:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a18:	e5d33001 	ldrb	r3, [r3, #1]
  111a1c:	e3530000 	cmp	r3, #0
  111a20:	0a000003 	beq	111a34 <lwip_connect+0x90>
  111a24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a28:	e5d33001 	ldrb	r3, [r3, #1]
  111a2c:	e3530002 	cmp	r3, #2
  111a30:	1a000003 	bne	111a44 <lwip_connect+0xa0>
  111a34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a38:	e2033003 	and	r3, r3, #3
  111a3c:	e3530000 	cmp	r3, #0
  111a40:	0a000016 	beq	111aa0 <lwip_connect+0xfc>
  111a44:	e3060df8 	movw	r0, #28152	; 0x6df8
  111a48:	e3400014 	movt	r0, #20
  111a4c:	ebffc5b0 	bl	103114 <rt_kprintf>
  111a50:	e3a01fad 	mov	r1, #692	; 0x2b4
  111a54:	e3060d60 	movw	r0, #28000	; 0x6d60
  111a58:	e3400014 	movt	r0, #20
  111a5c:	ebffe59f 	bl	10b0e0 <sys_arch_assert>
  111a60:	e3e0000f 	mvn	r0, #15
  111a64:	ebfff901 	bl	10fe70 <err_to_errno>
  111a68:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a70:	e6ef2073 	uxtb	r2, r3
  111a74:	e51b300c 	ldr	r3, [fp, #-12]
  111a78:	e5c32010 	strb	r2, [r3, #16]
  111a7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a80:	e3530000 	cmp	r3, #0
  111a84:	0a000003 	beq	111a98 <lwip_connect+0xf4>
  111a88:	eb009d0f 	bl	138ecc <__errno_location>
  111a8c:	e1a02000 	mov	r2, r0
  111a90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a94:	e5823000 	str	r3, [r2]
  111a98:	e3e03000 	mvn	r3, #0
  111a9c:	ea000032 	b	111b6c <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  111aa0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111aa4:	e5933004 	ldr	r3, [r3, #4]
  111aa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111aac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ab0:	e1d330b2 	ldrh	r3, [r3, #2]
  111ab4:	e1a00003 	mov	r0, r3
  111ab8:	eb0012c1 	bl	1165c4 <lwip_htons>
  111abc:	e1a03000 	mov	r3, r0
  111ac0:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  111ac4:	e51b300c 	ldr	r3, [fp, #-12]
  111ac8:	e5933000 	ldr	r3, [r3]
  111acc:	e15b20be 	ldrh	r2, [fp, #-14]
  111ad0:	e24b1020 	sub	r1, fp, #32
  111ad4:	e1a00003 	mov	r0, r3
  111ad8:	ebffe6d8 	bl	10b640 <netconn_connect>
  111adc:	e1a03000 	mov	r3, r0
  111ae0:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  111ae4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111ae8:	e3530000 	cmp	r3, #0
  111aec:	0a000010 	beq	111b34 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111af0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111af4:	e1a00003 	mov	r0, r3
  111af8:	ebfff8dc 	bl	10fe70 <err_to_errno>
  111afc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  111b00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b04:	e6ef2073 	uxtb	r2, r3
  111b08:	e51b300c 	ldr	r3, [fp, #-12]
  111b0c:	e5c32010 	strb	r2, [r3, #16]
  111b10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b14:	e3530000 	cmp	r3, #0
  111b18:	0a000003 	beq	111b2c <lwip_connect+0x188>
  111b1c:	eb009cea 	bl	138ecc <__errno_location>
  111b20:	e1a02000 	mov	r2, r0
  111b24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b28:	e5823000 	str	r3, [r2]
    return -1;
  111b2c:	e3e03000 	mvn	r3, #0
  111b30:	ea00000d 	b	111b6c <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111b34:	e3a03000 	mov	r3, #0
  111b38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111b3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b40:	e6ef2073 	uxtb	r2, r3
  111b44:	e51b300c 	ldr	r3, [fp, #-12]
  111b48:	e5c32010 	strb	r2, [r3, #16]
  111b4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b50:	e3530000 	cmp	r3, #0
  111b54:	0a000003 	beq	111b68 <lwip_connect+0x1c4>
  111b58:	eb009cdb 	bl	138ecc <__errno_location>
  111b5c:	e1a02000 	mov	r2, r0
  111b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b64:	e5823000 	str	r3, [r2]
  return 0;
  111b68:	e3a03000 	mov	r3, #0
}
  111b6c:	e1a00003 	mov	r0, r3
  111b70:	e24bd004 	sub	sp, fp, #4
  111b74:	e8bd8800 	pop	{fp, pc}

00111b78 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  111b78:	e92d4800 	push	{fp, lr}
  111b7c:	e28db004 	add	fp, sp, #4
  111b80:	e24dd020 	sub	sp, sp, #32
  111b84:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111b88:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  111b8c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111b90:	ebfffcde 	bl	110f10 <get_socket>
  111b94:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111b98:	e51b3008 	ldr	r3, [fp, #-8]
  111b9c:	e3530000 	cmp	r3, #0
  111ba0:	1a000001 	bne	111bac <lwip_listen+0x34>
    return -1;
  111ba4:	e3e03000 	mvn	r3, #0
  111ba8:	ea000047 	b	111ccc <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111bac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bb0:	e35300fe 	cmp	r3, #254	; 0xfe
  111bb4:	ca000002 	bgt	111bc4 <lwip_listen+0x4c>
  111bb8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bbc:	e1c33fc3 	bic	r3, r3, r3, asr #31
  111bc0:	ea000000 	b	111bc8 <lwip_listen+0x50>
  111bc4:	e3a030ff 	mov	r3, #255	; 0xff
  111bc8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111bcc:	e51b3008 	ldr	r3, [fp, #-8]
  111bd0:	e5933000 	ldr	r3, [r3]
  111bd4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  111bd8:	e6ef2072 	uxtb	r2, r2
  111bdc:	e1a01002 	mov	r1, r2
  111be0:	e1a00003 	mov	r0, r3
  111be4:	ebffe6dc 	bl	10b75c <netconn_listen_with_backlog>
  111be8:	e1a03000 	mov	r3, r0
  111bec:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  111bf0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111bf4:	e3530000 	cmp	r3, #0
  111bf8:	0a000025 	beq	111c94 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111bfc:	e51b3008 	ldr	r3, [fp, #-8]
  111c00:	e5933000 	ldr	r3, [r3]
  111c04:	e5933000 	ldr	r3, [r3]
  111c08:	e20330f0 	and	r3, r3, #240	; 0xf0
  111c0c:	e3530010 	cmp	r3, #16
  111c10:	0a00000e 	beq	111c50 <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  111c14:	e3a0305f 	mov	r3, #95	; 0x5f
  111c18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111c1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c20:	e6ef2073 	uxtb	r2, r3
  111c24:	e51b3008 	ldr	r3, [fp, #-8]
  111c28:	e5c32010 	strb	r2, [r3, #16]
  111c2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c30:	e3530000 	cmp	r3, #0
  111c34:	0a000003 	beq	111c48 <lwip_listen+0xd0>
  111c38:	eb009ca3 	bl	138ecc <__errno_location>
  111c3c:	e1a02000 	mov	r2, r0
  111c40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c44:	e5823000 	str	r3, [r2]
      return -1;
  111c48:	e3e03000 	mvn	r3, #0
  111c4c:	ea00001e 	b	111ccc <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  111c50:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111c54:	e1a00003 	mov	r0, r3
  111c58:	ebfff884 	bl	10fe70 <err_to_errno>
  111c5c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111c60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c64:	e6ef2073 	uxtb	r2, r3
  111c68:	e51b3008 	ldr	r3, [fp, #-8]
  111c6c:	e5c32010 	strb	r2, [r3, #16]
  111c70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c74:	e3530000 	cmp	r3, #0
  111c78:	0a000003 	beq	111c8c <lwip_listen+0x114>
  111c7c:	eb009c92 	bl	138ecc <__errno_location>
  111c80:	e1a02000 	mov	r2, r0
  111c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c88:	e5823000 	str	r3, [r2]
    return -1;
  111c8c:	e3e03000 	mvn	r3, #0
  111c90:	ea00000d 	b	111ccc <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  111c94:	e3a03000 	mov	r3, #0
  111c98:	e50b3010 	str	r3, [fp, #-16]
  111c9c:	e51b3010 	ldr	r3, [fp, #-16]
  111ca0:	e6ef2073 	uxtb	r2, r3
  111ca4:	e51b3008 	ldr	r3, [fp, #-8]
  111ca8:	e5c32010 	strb	r2, [r3, #16]
  111cac:	e51b3010 	ldr	r3, [fp, #-16]
  111cb0:	e3530000 	cmp	r3, #0
  111cb4:	0a000003 	beq	111cc8 <lwip_listen+0x150>
  111cb8:	eb009c83 	bl	138ecc <__errno_location>
  111cbc:	e1a02000 	mov	r2, r0
  111cc0:	e51b3010 	ldr	r3, [fp, #-16]
  111cc4:	e5823000 	str	r3, [r2]
  return 0;
  111cc8:	e3a03000 	mov	r3, #0
}
  111ccc:	e1a00003 	mov	r0, r3
  111cd0:	e24bd004 	sub	sp, fp, #4
  111cd4:	e8bd8800 	pop	{fp, pc}

00111cd8 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111cd8:	e92d4810 	push	{r4, fp, lr}
  111cdc:	e28db008 	add	fp, sp, #8
  111ce0:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  111ce4:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111ce8:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111cec:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  111cf0:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  111cf4:	e3a03000 	mov	r3, #0
  111cf8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  111cfc:	e3a03000 	mov	r3, #0
  111d00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  111d04:	e3a03000 	mov	r3, #0
  111d08:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  111d0c:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  111d10:	ebfffc7e 	bl	110f10 <get_socket>
  111d14:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  111d18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d1c:	e3530000 	cmp	r3, #0
  111d20:	1a000001 	bne	111d2c <lwip_recvfrom+0x54>
    return -1;
  111d24:	e3e03000 	mvn	r3, #0
  111d28:	ea00015b 	b	11229c <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111d2c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d30:	e5933004 	ldr	r3, [r3, #4]
  111d34:	e3530000 	cmp	r3, #0
  111d38:	0a000003 	beq	111d4c <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  111d3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d40:	e5933004 	ldr	r3, [r3, #4]
  111d44:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  111d48:	ea00007d 	b	111f44 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d4c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111d50:	e2033008 	and	r3, r3, #8
  111d54:	e3530000 	cmp	r3, #0
  111d58:	1a000005 	bne	111d74 <lwip_recvfrom+0x9c>
  111d5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d60:	e5933000 	ldr	r3, [r3]
  111d64:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111d68:	e2033002 	and	r3, r3, #2
  111d6c:	e3530000 	cmp	r3, #0
  111d70:	0a00001b 	beq	111de4 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111d74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d78:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d7c:	e3530000 	cmp	r3, #0
  111d80:	ca000017 	bgt	111de4 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111d84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d88:	e3530000 	cmp	r3, #0
  111d8c:	da00000e 	ble	111dcc <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111d90:	e3a03000 	mov	r3, #0
  111d94:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111d98:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111d9c:	e6ef2073 	uxtb	r2, r3
  111da0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111da4:	e5c32010 	strb	r2, [r3, #16]
  111da8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111dac:	e3530000 	cmp	r3, #0
  111db0:	0a000003 	beq	111dc4 <lwip_recvfrom+0xec>
  111db4:	eb009c44 	bl	138ecc <__errno_location>
  111db8:	e1a02000 	mov	r2, r0
  111dbc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111dc0:	e5823000 	str	r3, [r2]
          return off;
  111dc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111dc8:	ea000133 	b	11229c <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111dcc:	eb009c3e 	bl	138ecc <__errno_location>
  111dd0:	e1a02000 	mov	r2, r0
  111dd4:	e3a0300b 	mov	r3, #11
  111dd8:	e5823000 	str	r3, [r2]
        return -1;
  111ddc:	e3e03000 	mvn	r3, #0
  111de0:	ea00012d 	b	11229c <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111de4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111de8:	e5933000 	ldr	r3, [r3]
  111dec:	e5933000 	ldr	r3, [r3]
  111df0:	e20330f0 	and	r3, r3, #240	; 0xf0
  111df4:	e3530010 	cmp	r3, #16
  111df8:	1a000008 	bne	111e20 <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111dfc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e00:	e5933000 	ldr	r3, [r3]
  111e04:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111e08:	e1a01002 	mov	r1, r2
  111e0c:	e1a00003 	mov	r0, r3
  111e10:	ebffe794 	bl	10bc68 <netconn_recv_tcp_pbuf>
  111e14:	e1a03000 	mov	r3, r0
  111e18:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111e1c:	ea000007 	b	111e40 <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111e20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e24:	e5933000 	ldr	r3, [r3]
  111e28:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111e2c:	e1a01002 	mov	r1, r2
  111e30:	e1a00003 	mov	r0, r3
  111e34:	ebffe7a8 	bl	10bcdc <netconn_recv>
  111e38:	e1a03000 	mov	r3, r0
  111e3c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111e40:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e44:	e3530000 	cmp	r3, #0
  111e48:	0a000030 	beq	111f10 <lwip_recvfrom+0x238>
        if (off > 0) {
  111e4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e50:	e3530000 	cmp	r3, #0
  111e54:	da000017 	ble	111eb8 <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111e58:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e5c:	e373000f 	cmn	r3, #15
  111e60:	1a000005 	bne	111e7c <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111e64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e68:	e5933000 	ldr	r3, [r3]
  111e6c:	e3a02000 	mov	r2, #0
  111e70:	e3a01000 	mov	r1, #0
  111e74:	e1a00003 	mov	r0, r3
  111e78:	eb0006bc 	bl	113970 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111e7c:	e3a03000 	mov	r3, #0
  111e80:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111e84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111e88:	e6ef2073 	uxtb	r2, r3
  111e8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e90:	e5c32010 	strb	r2, [r3, #16]
  111e94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111e98:	e3530000 	cmp	r3, #0
  111e9c:	0a000003 	beq	111eb0 <lwip_recvfrom+0x1d8>
  111ea0:	eb009c09 	bl	138ecc <__errno_location>
  111ea4:	e1a02000 	mov	r2, r0
  111ea8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111eac:	e5823000 	str	r3, [r2]
          return off;
  111eb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111eb4:	ea0000f8 	b	11229c <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111eb8:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ebc:	e1a00003 	mov	r0, r3
  111ec0:	ebfff7ea 	bl	10fe70 <err_to_errno>
  111ec4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111ec8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ecc:	e6ef2073 	uxtb	r2, r3
  111ed0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ed4:	e5c32010 	strb	r2, [r3, #16]
  111ed8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111edc:	e3530000 	cmp	r3, #0
  111ee0:	0a000003 	beq	111ef4 <lwip_recvfrom+0x21c>
  111ee4:	eb009bf8 	bl	138ecc <__errno_location>
  111ee8:	e1a02000 	mov	r2, r0
  111eec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ef0:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111ef4:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ef8:	e373000f 	cmn	r3, #15
  111efc:	1a000001 	bne	111f08 <lwip_recvfrom+0x230>
          return 0;
  111f00:	e3a03000 	mov	r3, #0
  111f04:	ea0000e4 	b	11229c <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111f08:	e3e03000 	mvn	r3, #0
  111f0c:	ea0000e2 	b	11229c <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111f10:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f14:	e3530000 	cmp	r3, #0
  111f18:	1a000006 	bne	111f38 <lwip_recvfrom+0x260>
  111f1c:	e3060e18 	movw	r0, #28184	; 0x6e18
  111f20:	e3400014 	movt	r0, #20
  111f24:	ebffc47a 	bl	103114 <rt_kprintf>
  111f28:	e3a01fcf 	mov	r1, #828	; 0x33c
  111f2c:	e3060d60 	movw	r0, #28000	; 0x6d60
  111f30:	e3400014 	movt	r0, #20
  111f34:	ebffe469 	bl	10b0e0 <sys_arch_assert>
      sock->lastdata = buf;
  111f38:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111f3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f40:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111f44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f48:	e5933000 	ldr	r3, [r3]
  111f4c:	e5933000 	ldr	r3, [r3]
  111f50:	e20330f0 	and	r3, r3, #240	; 0xf0
  111f54:	e3530010 	cmp	r3, #16
  111f58:	1a000002 	bne	111f68 <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111f5c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f60:	e50b3010 	str	r3, [fp, #-16]
  111f64:	ea000002 	b	111f74 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111f68:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f6c:	e5933000 	ldr	r3, [r3]
  111f70:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111f74:	e51b3010 	ldr	r3, [fp, #-16]
  111f78:	e1d330b8 	ldrh	r3, [r3, #8]
  111f7c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111f80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f84:	e1d330b8 	ldrh	r3, [r3, #8]
  111f88:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111f8c:	e0423003 	sub	r3, r2, r3
  111f90:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111f94:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111f98:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111f9c:	e1520003 	cmp	r2, r3
  111fa0:	9a000002 	bls	111fb0 <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111fa4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111fa8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111fac:	ea000001 	b	111fb8 <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111fb0:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111fb4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111fb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111fbc:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111fc0:	e0821003 	add	r1, r2, r3
  111fc4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fc8:	e1d330b8 	ldrh	r3, [r3, #8]
  111fcc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111fd0:	e51b0010 	ldr	r0, [fp, #-16]
  111fd4:	eb0025bc 	bl	11b6cc <pbuf_copy_partial>

    off += copylen;
  111fd8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111fdc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111fe0:	e0823003 	add	r3, r2, r3
  111fe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fec:	e5933000 	ldr	r3, [r3]
  111ff0:	e5933000 	ldr	r3, [r3]
  111ff4:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ff8:	e3530010 	cmp	r3, #16
  111ffc:	1a000021 	bne	112088 <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  112000:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112004:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112008:	e1520003 	cmp	r2, r3
  11200c:	2a000006 	bcs	11202c <lwip_recvfrom+0x354>
  112010:	e3060e24 	movw	r0, #28196	; 0x6e24
  112014:	e3400014 	movt	r0, #20
  112018:	ebffc43d 	bl	103114 <rt_kprintf>
  11201c:	e3a01fd6 	mov	r1, #856	; 0x358
  112020:	e3060d60 	movw	r0, #28000	; 0x6d60
  112024:	e3400014 	movt	r0, #20
  112028:	ebffe42c 	bl	10b0e0 <sys_arch_assert>
      len -= copylen;
  11202c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112030:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112034:	e0423003 	sub	r3, r2, r3
  112038:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  11203c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  112040:	e3530000 	cmp	r3, #0
  112044:	0a00000c 	beq	11207c <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  112048:	e51b3010 	ldr	r3, [fp, #-16]
  11204c:	e5d3300d 	ldrb	r3, [r3, #13]
  112050:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  112054:	e3530000 	cmp	r3, #0
  112058:	1a000007 	bne	11207c <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  11205c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112060:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  112064:	e3530000 	cmp	r3, #0
  112068:	da000003 	ble	11207c <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  11206c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  112070:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  112074:	e3530000 	cmp	r3, #0
  112078:	0a000004 	beq	112090 <lwip_recvfrom+0x3b8>
        done = 1;
  11207c:	e3a03001 	mov	r3, #1
  112080:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  112084:	ea000001 	b	112090 <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  112088:	e3a03001 	mov	r3, #1
  11208c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  112090:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  112094:	e3530000 	cmp	r3, #0
  112098:	0a00003f 	beq	11219c <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  11209c:	e59b3004 	ldr	r3, [fp, #4]
  1120a0:	e3530000 	cmp	r3, #0
  1120a4:	0a00003c 	beq	11219c <lwip_recvfrom+0x4c4>
  1120a8:	e59b3008 	ldr	r3, [fp, #8]
  1120ac:	e3530000 	cmp	r3, #0
  1120b0:	0a000039 	beq	11219c <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1120b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120b8:	e5933000 	ldr	r3, [r3]
  1120bc:	e5933000 	ldr	r3, [r3]
  1120c0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1120c4:	e3530010 	cmp	r3, #16
  1120c8:	1a000008 	bne	1120f0 <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  1120cc:	e24b3044 	sub	r3, fp, #68	; 0x44
  1120d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  1120d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120d8:	e5930000 	ldr	r0, [r3]
  1120dc:	e24b203e 	sub	r2, fp, #62	; 0x3e
  1120e0:	e3a03000 	mov	r3, #0
  1120e4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1120e8:	ebffe4ec 	bl	10b4a0 <netconn_getaddr>
  1120ec:	ea000005 	b	112108 <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  1120f0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1120f4:	e1d330bc 	ldrh	r3, [r3, #12]
  1120f8:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  1120fc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112100:	e2833008 	add	r3, r3, #8
  112104:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  112108:	e24b3054 	sub	r3, fp, #84	; 0x54
  11210c:	e3a02010 	mov	r2, #16
  112110:	e5c32000 	strb	r2, [r3]
  112114:	e24b3054 	sub	r3, fp, #84	; 0x54
  112118:	e3a02002 	mov	r2, #2
  11211c:	e5c32001 	strb	r2, [r3, #1]
  112120:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  112124:	e24b4054 	sub	r4, fp, #84	; 0x54
  112128:	e1a00003 	mov	r0, r3
  11212c:	eb001124 	bl	1165c4 <lwip_htons>
  112130:	e1a03000 	mov	r3, r0
  112134:	e1c430b2 	strh	r3, [r4, #2]
  112138:	e24b3054 	sub	r3, fp, #84	; 0x54
  11213c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112140:	e5922000 	ldr	r2, [r2]
  112144:	e5832004 	str	r2, [r3, #4]
  112148:	e24b3054 	sub	r3, fp, #84	; 0x54
  11214c:	e2833008 	add	r3, r3, #8
  112150:	e3a02008 	mov	r2, #8
  112154:	e3a01000 	mov	r1, #0
  112158:	e1a00003 	mov	r0, r3
  11215c:	eb00bc40 	bl	141264 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  112160:	e59b3008 	ldr	r3, [fp, #8]
  112164:	e5933000 	ldr	r3, [r3]
  112168:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  11216c:	e1530002 	cmp	r3, r2
  112170:	9a000003 	bls	112184 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  112174:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  112178:	e1a02003 	mov	r2, r3
  11217c:	e59b3008 	ldr	r3, [fp, #8]
  112180:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  112184:	e59b3008 	ldr	r3, [fp, #8]
  112188:	e5932000 	ldr	r2, [r3]
  11218c:	e24b3054 	sub	r3, fp, #84	; 0x54
  112190:	e1a01003 	mov	r1, r3
  112194:	e59b0004 	ldr	r0, [fp, #4]
  112198:	eb00baf9 	bl	140d84 <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  11219c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  1121a0:	e2033001 	and	r3, r3, #1
  1121a4:	e3530000 	cmp	r3, #0
  1121a8:	1a00002a 	bne	112258 <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  1121ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121b0:	e5933000 	ldr	r3, [r3]
  1121b4:	e5933000 	ldr	r3, [r3]
  1121b8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1121bc:	e3530010 	cmp	r3, #16
  1121c0:	1a00000f 	bne	112204 <lwip_recvfrom+0x52c>
  1121c4:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  1121c8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1121cc:	e0423003 	sub	r3, r2, r3
  1121d0:	e3530000 	cmp	r3, #0
  1121d4:	da00000a 	ble	112204 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  1121d8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1121dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121e0:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  1121e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121e8:	e1d320b8 	ldrh	r2, [r3, #8]
  1121ec:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1121f0:	e0823003 	add	r3, r2, r3
  1121f4:	e6ff2073 	uxth	r2, r3
  1121f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121fc:	e1c320b8 	strh	r2, [r3, #8]
  112200:	ea000014 	b	112258 <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  112204:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112208:	e3a02000 	mov	r2, #0
  11220c:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  112210:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112214:	e3a02000 	mov	r2, #0
  112218:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  11221c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112220:	e5933000 	ldr	r3, [r3]
  112224:	e5933000 	ldr	r3, [r3]
  112228:	e20330f0 	and	r3, r3, #240	; 0xf0
  11222c:	e3530010 	cmp	r3, #16
  112230:	1a000003 	bne	112244 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  112234:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112238:	e1a00003 	mov	r0, r3
  11223c:	eb002317 	bl	11aea0 <pbuf_free>
  112240:	ea000002 	b	112250 <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  112244:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112248:	e1a00003 	mov	r0, r3
  11224c:	ebfff732 	bl	10ff1c <netbuf_delete>
        }
        buf = NULL;
  112250:	e3a03000 	mov	r3, #0
  112254:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  112258:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  11225c:	e3530000 	cmp	r3, #0
  112260:	0afffeb1 	beq	111d2c <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  112264:	e3a03000 	mov	r3, #0
  112268:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  11226c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112270:	e6ef2073 	uxtb	r2, r3
  112274:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112278:	e5c32010 	strb	r2, [r3, #16]
  11227c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112280:	e3530000 	cmp	r3, #0
  112284:	0a000003 	beq	112298 <lwip_recvfrom+0x5c0>
  112288:	eb009b0f 	bl	138ecc <__errno_location>
  11228c:	e1a02000 	mov	r2, r0
  112290:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112294:	e5823000 	str	r3, [r2]
  return off;
  112298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  11229c:	e1a00003 	mov	r0, r3
  1122a0:	e24bd008 	sub	sp, fp, #8
  1122a4:	e8bd8810 	pop	{r4, fp, pc}

001122a8 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  1122a8:	e92d4800 	push	{fp, lr}
  1122ac:	e28db004 	add	fp, sp, #4
  1122b0:	e24dd018 	sub	sp, sp, #24
  1122b4:	e50b0008 	str	r0, [fp, #-8]
  1122b8:	e50b100c 	str	r1, [fp, #-12]
  1122bc:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  1122c0:	e3a03000 	mov	r3, #0
  1122c4:	e58d3004 	str	r3, [sp, #4]
  1122c8:	e3a03000 	mov	r3, #0
  1122cc:	e58d3000 	str	r3, [sp]
  1122d0:	e3a03000 	mov	r3, #0
  1122d4:	e51b2010 	ldr	r2, [fp, #-16]
  1122d8:	e51b100c 	ldr	r1, [fp, #-12]
  1122dc:	e51b0008 	ldr	r0, [fp, #-8]
  1122e0:	ebfffe7c 	bl	111cd8 <lwip_recvfrom>
  1122e4:	e1a03000 	mov	r3, r0
}
  1122e8:	e1a00003 	mov	r0, r3
  1122ec:	e24bd004 	sub	sp, fp, #4
  1122f0:	e8bd8800 	pop	{fp, pc}

001122f4 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  1122f4:	e92d4800 	push	{fp, lr}
  1122f8:	e28db004 	add	fp, sp, #4
  1122fc:	e24dd018 	sub	sp, sp, #24
  112300:	e50b0008 	str	r0, [fp, #-8]
  112304:	e50b100c 	str	r1, [fp, #-12]
  112308:	e50b2010 	str	r2, [fp, #-16]
  11230c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  112310:	e3a03000 	mov	r3, #0
  112314:	e58d3004 	str	r3, [sp, #4]
  112318:	e3a03000 	mov	r3, #0
  11231c:	e58d3000 	str	r3, [sp]
  112320:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112324:	e51b2010 	ldr	r2, [fp, #-16]
  112328:	e51b100c 	ldr	r1, [fp, #-12]
  11232c:	e51b0008 	ldr	r0, [fp, #-8]
  112330:	ebfffe68 	bl	111cd8 <lwip_recvfrom>
  112334:	e1a03000 	mov	r3, r0
}
  112338:	e1a00003 	mov	r0, r3
  11233c:	e24bd004 	sub	sp, fp, #4
  112340:	e8bd8800 	pop	{fp, pc}

00112344 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  112344:	e92d4800 	push	{fp, lr}
  112348:	e28db004 	add	fp, sp, #4
  11234c:	e24dd028 	sub	sp, sp, #40	; 0x28
  112350:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112354:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  112358:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11235c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  112360:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112364:	ebfffae9 	bl	110f10 <get_socket>
  112368:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  11236c:	e51b3008 	ldr	r3, [fp, #-8]
  112370:	e3530000 	cmp	r3, #0
  112374:	1a000001 	bne	112380 <lwip_send+0x3c>
    return -1;
  112378:	e3e03000 	mvn	r3, #0
  11237c:	ea000041 	b	112488 <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  112380:	e51b3008 	ldr	r3, [fp, #-8]
  112384:	e5933000 	ldr	r3, [r3]
  112388:	e5933000 	ldr	r3, [r3]
  11238c:	e20330f0 	and	r3, r3, #240	; 0xf0
  112390:	e3530010 	cmp	r3, #16
  112394:	0a00000a 	beq	1123c4 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  112398:	e3a03000 	mov	r3, #0
  11239c:	e58d3004 	str	r3, [sp, #4]
  1123a0:	e3a03000 	mov	r3, #0
  1123a4:	e58d3000 	str	r3, [sp]
  1123a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123ac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1123b0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1123b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1123b8:	eb0001b1 	bl	112a84 <lwip_sendto>
  1123bc:	e1a03000 	mov	r3, r0
  1123c0:	ea000030 	b	112488 <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1123c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123c8:	e1a031c3 	asr	r3, r3, #3
  1123cc:	e6af3073 	sxtb	r3, r3
  1123d0:	e2033002 	and	r3, r3, #2
  1123d4:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1123d8:	e3833001 	orr	r3, r3, #1
  1123dc:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1123e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123e4:	e1a030c3 	asr	r3, r3, #1
  1123e8:	e6af3073 	sxtb	r3, r3
  1123ec:	e2033004 	and	r3, r3, #4
  1123f0:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1123f4:	e1823003 	orr	r3, r2, r3
  1123f8:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1123fc:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  112400:	e3a03000 	mov	r3, #0
  112404:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  112408:	e51b3008 	ldr	r3, [fp, #-8]
  11240c:	e5930000 	ldr	r0, [r3]
  112410:	e55b2009 	ldrb	r2, [fp, #-9]
  112414:	e24b3014 	sub	r3, fp, #20
  112418:	e58d3000 	str	r3, [sp]
  11241c:	e1a03002 	mov	r3, r2
  112420:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112424:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112428:	ebffe6ce 	bl	10bf68 <netconn_write_partly>
  11242c:	e1a03000 	mov	r3, r0
  112430:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  112434:	e15b30da 	ldrsb	r3, [fp, #-10]
  112438:	e1a00003 	mov	r0, r3
  11243c:	ebfff68b 	bl	10fe70 <err_to_errno>
  112440:	e50b0010 	str	r0, [fp, #-16]
  112444:	e51b3010 	ldr	r3, [fp, #-16]
  112448:	e6ef2073 	uxtb	r2, r3
  11244c:	e51b3008 	ldr	r3, [fp, #-8]
  112450:	e5c32010 	strb	r2, [r3, #16]
  112454:	e51b3010 	ldr	r3, [fp, #-16]
  112458:	e3530000 	cmp	r3, #0
  11245c:	0a000003 	beq	112470 <lwip_send+0x12c>
  112460:	eb009a99 	bl	138ecc <__errno_location>
  112464:	e1a02000 	mov	r2, r0
  112468:	e51b3010 	ldr	r3, [fp, #-16]
  11246c:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  112470:	e15b30da 	ldrsb	r3, [fp, #-10]
  112474:	e3530000 	cmp	r3, #0
  112478:	1a000001 	bne	112484 <lwip_send+0x140>
  11247c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112480:	ea000000 	b	112488 <lwip_send+0x144>
  112484:	e3e03000 	mvn	r3, #0
}
  112488:	e1a00003 	mov	r0, r3
  11248c:	e24bd004 	sub	sp, fp, #4
  112490:	e8bd8800 	pop	{fp, pc}

00112494 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  112494:	e92d4800 	push	{fp, lr}
  112498:	e28db004 	add	fp, sp, #4
  11249c:	e24dd058 	sub	sp, sp, #88	; 0x58
  1124a0:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  1124a4:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  1124a8:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  1124ac:	e3a03000 	mov	r3, #0
  1124b0:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  1124b4:	e3a03000 	mov	r3, #0
  1124b8:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  1124bc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1124c0:	ebfffa92 	bl	110f10 <get_socket>
  1124c4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  1124c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124cc:	e3530000 	cmp	r3, #0
  1124d0:	1a000001 	bne	1124dc <lwip_sendmsg+0x48>
    return -1;
  1124d4:	e3e03000 	mvn	r3, #0
  1124d8:	ea000166 	b	112a78 <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  1124dc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124e0:	e3530000 	cmp	r3, #0
  1124e4:	1a000016 	bne	112544 <lwip_sendmsg+0xb0>
  1124e8:	e3060e4c 	movw	r0, #28236	; 0x6e4c
  1124ec:	e3400014 	movt	r0, #20
  1124f0:	ebffc307 	bl	103114 <rt_kprintf>
  1124f4:	e30013eb 	movw	r1, #1003	; 0x3eb
  1124f8:	e3060d60 	movw	r0, #28000	; 0x6d60
  1124fc:	e3400014 	movt	r0, #20
  112500:	ebffe2f6 	bl	10b0e0 <sys_arch_assert>
  112504:	e3e0000f 	mvn	r0, #15
  112508:	ebfff658 	bl	10fe70 <err_to_errno>
  11250c:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  112510:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112514:	e6ef2073 	uxtb	r2, r3
  112518:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11251c:	e5c32010 	strb	r2, [r3, #16]
  112520:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112524:	e3530000 	cmp	r3, #0
  112528:	0a000003 	beq	11253c <lwip_sendmsg+0xa8>
  11252c:	eb009a66 	bl	138ecc <__errno_location>
  112530:	e1a02000 	mov	r2, r0
  112534:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112538:	e5823000 	str	r3, [r2]
  11253c:	e3e03000 	mvn	r3, #0
  112540:	ea00014c 	b	112a78 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  112544:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112548:	e5933008 	ldr	r3, [r3, #8]
  11254c:	e3530000 	cmp	r3, #0
  112550:	0a000003 	beq	112564 <lwip_sendmsg+0xd0>
  112554:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112558:	e593300c 	ldr	r3, [r3, #12]
  11255c:	e3530000 	cmp	r3, #0
  112560:	1a000016 	bne	1125c0 <lwip_sendmsg+0x12c>
  112564:	e3060e6c 	movw	r0, #28268	; 0x6e6c
  112568:	e3400014 	movt	r0, #20
  11256c:	ebffc2e8 	bl	103114 <rt_kprintf>
  112570:	e30013f1 	movw	r1, #1009	; 0x3f1
  112574:	e3060d60 	movw	r0, #28000	; 0x6d60
  112578:	e3400014 	movt	r0, #20
  11257c:	ebffe2d7 	bl	10b0e0 <sys_arch_assert>
  112580:	e3e0000f 	mvn	r0, #15
  112584:	ebfff639 	bl	10fe70 <err_to_errno>
  112588:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  11258c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112590:	e6ef2073 	uxtb	r2, r3
  112594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112598:	e5c32010 	strb	r2, [r3, #16]
  11259c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125a0:	e3530000 	cmp	r3, #0
  1125a4:	0a000003 	beq	1125b8 <lwip_sendmsg+0x124>
  1125a8:	eb009a47 	bl	138ecc <__errno_location>
  1125ac:	e1a02000 	mov	r2, r0
  1125b0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125b4:	e5823000 	str	r3, [r2]
  1125b8:	e3e03000 	mvn	r3, #0
  1125bc:	ea00012d 	b	112a78 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1125c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1125c4:	e5933000 	ldr	r3, [r3]
  1125c8:	e5933000 	ldr	r3, [r3]
  1125cc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1125d0:	e3530010 	cmp	r3, #16
  1125d4:	1a000069 	bne	112780 <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1125d8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1125dc:	e1a031c3 	asr	r3, r3, #3
  1125e0:	e6af3073 	sxtb	r3, r3
  1125e4:	e2033002 	and	r3, r3, #2
  1125e8:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1125ec:	e3833001 	orr	r3, r3, #1
  1125f0:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1125f4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1125f8:	e1a030c3 	asr	r3, r3, #1
  1125fc:	e6af3073 	sxtb	r3, r3
  112600:	e2033004 	and	r3, r3, #4
  112604:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112608:	e1823003 	orr	r3, r2, r3
  11260c:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112610:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  112614:	e3a03000 	mov	r3, #0
  112618:	e50b3008 	str	r3, [fp, #-8]
  11261c:	ea000041 	b	112728 <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  112620:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  112624:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  112628:	e51b3008 	ldr	r3, [fp, #-8]
  11262c:	e2832001 	add	r2, r3, #1
  112630:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112634:	e593300c 	ldr	r3, [r3, #12]
  112638:	e1520003 	cmp	r2, r3
  11263c:	aa000002 	bge	11264c <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  112640:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  112644:	e3833002 	orr	r3, r3, #2
  112648:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  11264c:	e3a03000 	mov	r3, #0
  112650:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  112654:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112658:	e5930000 	ldr	r0, [r3]
  11265c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112660:	e5932008 	ldr	r2, [r3, #8]
  112664:	e51b3008 	ldr	r3, [fp, #-8]
  112668:	e1a03183 	lsl	r3, r3, #3
  11266c:	e0823003 	add	r3, r2, r3
  112670:	e5931000 	ldr	r1, [r3]
  112674:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112678:	e5932008 	ldr	r2, [r3, #8]
  11267c:	e51b3008 	ldr	r3, [fp, #-8]
  112680:	e1a03183 	lsl	r3, r3, #3
  112684:	e0823003 	add	r3, r2, r3
  112688:	e5932004 	ldr	r2, [r3, #4]
  11268c:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  112690:	e24b3040 	sub	r3, fp, #64	; 0x40
  112694:	e58d3000 	str	r3, [sp]
  112698:	e1a0300c 	mov	r3, ip
  11269c:	ebffe631 	bl	10bf68 <netconn_write_partly>
  1126a0:	e1a03000 	mov	r3, r0
  1126a4:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  1126a8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126ac:	e3530000 	cmp	r3, #0
  1126b0:	1a00000d 	bne	1126ec <lwip_sendmsg+0x258>
        size += written;
  1126b4:	e51b200c 	ldr	r2, [fp, #-12]
  1126b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1126bc:	e0823003 	add	r3, r2, r3
  1126c0:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  1126c4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1126c8:	e5932008 	ldr	r2, [r3, #8]
  1126cc:	e51b3008 	ldr	r3, [fp, #-8]
  1126d0:	e1a03183 	lsl	r3, r3, #3
  1126d4:	e0823003 	add	r3, r2, r3
  1126d8:	e5932004 	ldr	r2, [r3, #4]
  1126dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1126e0:	e1520003 	cmp	r2, r3
  1126e4:	0a00000c 	beq	11271c <lwip_sendmsg+0x288>
          break;
  1126e8:	ea000013 	b	11273c <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  1126ec:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126f0:	e3730007 	cmn	r3, #7
  1126f4:	1a000005 	bne	112710 <lwip_sendmsg+0x27c>
  1126f8:	e51b300c 	ldr	r3, [fp, #-12]
  1126fc:	e3530000 	cmp	r3, #0
  112700:	da000002 	ble	112710 <lwip_sendmsg+0x27c>
        err = ERR_OK;
  112704:	e3a03000 	mov	r3, #0
  112708:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  11270c:	ea00000a 	b	11273c <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  112710:	e3e03000 	mvn	r3, #0
  112714:	e50b300c 	str	r3, [fp, #-12]
        break;
  112718:	ea000007 	b	11273c <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  11271c:	e51b3008 	ldr	r3, [fp, #-8]
  112720:	e2833001 	add	r3, r3, #1
  112724:	e50b3008 	str	r3, [fp, #-8]
  112728:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11272c:	e593300c 	ldr	r3, [r3, #12]
  112730:	e51b2008 	ldr	r2, [fp, #-8]
  112734:	e1520003 	cmp	r2, r3
  112738:	baffffb8 	blt	112620 <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  11273c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112740:	e1a00003 	mov	r0, r3
  112744:	ebfff5c9 	bl	10fe70 <err_to_errno>
  112748:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  11274c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112750:	e6ef2073 	uxtb	r2, r3
  112754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112758:	e5c32010 	strb	r2, [r3, #16]
  11275c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112760:	e3530000 	cmp	r3, #0
  112764:	0a000003 	beq	112778 <lwip_sendmsg+0x2e4>
  112768:	eb0099d7 	bl	138ecc <__errno_location>
  11276c:	e1a02000 	mov	r2, r0
  112770:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112774:	e5823000 	str	r3, [r2]
    return size;
  112778:	e51b300c 	ldr	r3, [fp, #-12]
  11277c:	ea0000bd 	b	112a78 <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  112780:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112784:	e5933000 	ldr	r3, [r3]
  112788:	e3530000 	cmp	r3, #0
  11278c:	1a000003 	bne	1127a0 <lwip_sendmsg+0x30c>
  112790:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112794:	e5933004 	ldr	r3, [r3, #4]
  112798:	e3530000 	cmp	r3, #0
  11279c:	0a00001a 	beq	11280c <lwip_sendmsg+0x378>
  1127a0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1127a4:	e5933004 	ldr	r3, [r3, #4]
  1127a8:	e3530010 	cmp	r3, #16
  1127ac:	0a000016 	beq	11280c <lwip_sendmsg+0x378>
  1127b0:	e3060e90 	movw	r0, #28304	; 0x6e90
  1127b4:	e3400014 	movt	r0, #20
  1127b8:	ebffc255 	bl	103114 <rt_kprintf>
  1127bc:	e300141f 	movw	r1, #1055	; 0x41f
  1127c0:	e3060d60 	movw	r0, #28000	; 0x6d60
  1127c4:	e3400014 	movt	r0, #20
  1127c8:	ebffe244 	bl	10b0e0 <sys_arch_assert>
  1127cc:	e3e0000f 	mvn	r0, #15
  1127d0:	ebfff5a6 	bl	10fe70 <err_to_errno>
  1127d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1127d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127dc:	e6ef2073 	uxtb	r2, r3
  1127e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1127e4:	e5c32010 	strb	r2, [r3, #16]
  1127e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127ec:	e3530000 	cmp	r3, #0
  1127f0:	0a000003 	beq	112804 <lwip_sendmsg+0x370>
  1127f4:	eb0099b4 	bl	138ecc <__errno_location>
  1127f8:	e1a02000 	mov	r2, r0
  1127fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112800:	e5823000 	str	r3, [r2]
  112804:	e3e03000 	mvn	r3, #0
  112808:	ea00009a 	b	112a78 <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  11280c:	ebfff5ae 	bl	10fecc <netbuf_new>
  112810:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  112814:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112818:	e3530000 	cmp	r3, #0
  11281c:	1a00000f 	bne	112860 <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  112820:	e3e00000 	mvn	r0, #0
  112824:	ebfff591 	bl	10fe70 <err_to_errno>
  112828:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  11282c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112830:	e6ef2073 	uxtb	r2, r3
  112834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112838:	e5c32010 	strb	r2, [r3, #16]
  11283c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112840:	e3530000 	cmp	r3, #0
  112844:	0a000003 	beq	112858 <lwip_sendmsg+0x3c4>
  112848:	eb00999f 	bl	138ecc <__errno_location>
  11284c:	e1a02000 	mov	r2, r0
  112850:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112854:	e5823000 	str	r3, [r2]
      return -1;
  112858:	e3e03000 	mvn	r3, #0
  11285c:	ea000085 	b	112a78 <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  112860:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112864:	e5933000 	ldr	r3, [r3]
  112868:	e3530000 	cmp	r3, #0
  11286c:	0a00000e 	beq	1128ac <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  112870:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112874:	e5933000 	ldr	r3, [r3]
  112878:	e5932004 	ldr	r2, [r3, #4]
  11287c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112880:	e5832008 	str	r2, [r3, #8]
  112884:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112888:	e5933000 	ldr	r3, [r3]
  11288c:	e1d330b2 	ldrh	r3, [r3, #2]
  112890:	e1a00003 	mov	r0, r3
  112894:	eb000f4a 	bl	1165c4 <lwip_htons>
  112898:	e1a03000 	mov	r3, r0
  11289c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  1128a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1128a4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  1128a8:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  1128ac:	e3a03000 	mov	r3, #0
  1128b0:	e50b3008 	str	r3, [fp, #-8]
  1128b4:	ea000042 	b	1129c4 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  1128b8:	e3a02002 	mov	r2, #2
  1128bc:	e3a01000 	mov	r1, #0
  1128c0:	e3a00000 	mov	r0, #0
  1128c4:	eb001e6e 	bl	11a284 <pbuf_alloc>
  1128c8:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  1128cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1128d0:	e3530000 	cmp	r3, #0
  1128d4:	1a000002 	bne	1128e4 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  1128d8:	e3e03000 	mvn	r3, #0
  1128dc:	e54b300d 	strb	r3, [fp, #-13]
        break;
  1128e0:	ea00003c 	b	1129d8 <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  1128e4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1128e8:	e5932008 	ldr	r2, [r3, #8]
  1128ec:	e51b3008 	ldr	r3, [fp, #-8]
  1128f0:	e1a03183 	lsl	r3, r3, #3
  1128f4:	e0823003 	add	r3, r2, r3
  1128f8:	e5932000 	ldr	r2, [r3]
  1128fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112900:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  112904:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112908:	e5932008 	ldr	r2, [r3, #8]
  11290c:	e51b3008 	ldr	r3, [fp, #-8]
  112910:	e1a03183 	lsl	r3, r3, #3
  112914:	e0823003 	add	r3, r2, r3
  112918:	e5933004 	ldr	r3, [r3, #4]
  11291c:	e3530801 	cmp	r3, #65536	; 0x10000
  112920:	3a000006 	bcc	112940 <lwip_sendmsg+0x4ac>
  112924:	e3060eb4 	movw	r0, #28340	; 0x6eb4
  112928:	e3400014 	movt	r0, #20
  11292c:	ebffc1f8 	bl	103114 <rt_kprintf>
  112930:	e300144d 	movw	r1, #1101	; 0x44d
  112934:	e3060d60 	movw	r0, #28000	; 0x6d60
  112938:	e3400014 	movt	r0, #20
  11293c:	ebffe1e7 	bl	10b0e0 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  112940:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112944:	e5932008 	ldr	r2, [r3, #8]
  112948:	e51b3008 	ldr	r3, [fp, #-8]
  11294c:	e1a03183 	lsl	r3, r3, #3
  112950:	e0823003 	add	r3, r2, r3
  112954:	e5933004 	ldr	r3, [r3, #4]
  112958:	e6ff2073 	uxth	r2, r3
  11295c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112960:	e1c320b8 	strh	r2, [r3, #8]
  112964:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112968:	e1d320b8 	ldrh	r2, [r3, #8]
  11296c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112970:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  112974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112978:	e5933000 	ldr	r3, [r3]
  11297c:	e3530000 	cmp	r3, #0
  112980:	1a000007 	bne	1129a4 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  112984:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112988:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  11298c:	e5832004 	str	r2, [r3, #4]
  112990:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112994:	e5932004 	ldr	r2, [r3, #4]
  112998:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11299c:	e5832000 	str	r2, [r3]
  1129a0:	ea000004 	b	1129b8 <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  1129a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129a8:	e5933000 	ldr	r3, [r3]
  1129ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1129b0:	e1a00003 	mov	r0, r3
  1129b4:	eb0021f0 	bl	11b17c <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  1129b8:	e51b3008 	ldr	r3, [fp, #-8]
  1129bc:	e2833001 	add	r3, r3, #1
  1129c0:	e50b3008 	str	r3, [fp, #-8]
  1129c4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1129c8:	e593300c 	ldr	r3, [r3, #12]
  1129cc:	e51b2008 	ldr	r2, [fp, #-8]
  1129d0:	e1520003 	cmp	r2, r3
  1129d4:	baffffb7 	blt	1128b8 <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  1129d8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1129dc:	e3530000 	cmp	r3, #0
  1129e0:	1a000003 	bne	1129f4 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  1129e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129e8:	e5933000 	ldr	r3, [r3]
  1129ec:	e1d330b8 	ldrh	r3, [r3, #8]
  1129f0:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  1129f4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1129f8:	e3530000 	cmp	r3, #0
  1129fc:	1a000006 	bne	112a1c <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  112a00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a04:	e5933000 	ldr	r3, [r3]
  112a08:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112a0c:	e1a00003 	mov	r0, r3
  112a10:	ebffe534 	bl	10bee8 <netconn_send>
  112a14:	e1a03000 	mov	r3, r0
  112a18:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  112a1c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  112a20:	ebfff53d 	bl	10ff1c <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  112a24:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a28:	e1a00003 	mov	r0, r3
  112a2c:	ebfff50f 	bl	10fe70 <err_to_errno>
  112a30:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112a34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a38:	e6ef2073 	uxtb	r2, r3
  112a3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a40:	e5c32010 	strb	r2, [r3, #16]
  112a44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a48:	e3530000 	cmp	r3, #0
  112a4c:	0a000003 	beq	112a60 <lwip_sendmsg+0x5cc>
  112a50:	eb00991d 	bl	138ecc <__errno_location>
  112a54:	e1a02000 	mov	r2, r0
  112a58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a5c:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  112a60:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a64:	e3530000 	cmp	r3, #0
  112a68:	1a000001 	bne	112a74 <lwip_sendmsg+0x5e0>
  112a6c:	e51b300c 	ldr	r3, [fp, #-12]
  112a70:	ea000000 	b	112a78 <lwip_sendmsg+0x5e4>
  112a74:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  112a78:	e1a00003 	mov	r0, r3
  112a7c:	e24bd004 	sub	sp, fp, #4
  112a80:	e8bd8800 	pop	{fp, pc}

00112a84 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  112a84:	e92d4800 	push	{fp, lr}
  112a88:	e28db004 	add	fp, sp, #4
  112a8c:	e24dd038 	sub	sp, sp, #56	; 0x38
  112a90:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  112a94:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  112a98:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112a9c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  112aa0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112aa4:	ebfff919 	bl	110f10 <get_socket>
  112aa8:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112aac:	e51b300c 	ldr	r3, [fp, #-12]
  112ab0:	e3530000 	cmp	r3, #0
  112ab4:	1a000001 	bne	112ac0 <lwip_sendto+0x3c>
    return -1;
  112ab8:	e3e03000 	mvn	r3, #0
  112abc:	ea000081 	b	112cc8 <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112ac0:	e51b300c 	ldr	r3, [fp, #-12]
  112ac4:	e5933000 	ldr	r3, [r3]
  112ac8:	e5933000 	ldr	r3, [r3]
  112acc:	e20330f0 	and	r3, r3, #240	; 0xf0
  112ad0:	e3530010 	cmp	r3, #16
  112ad4:	1a000006 	bne	112af4 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  112ad8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112adc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  112ae0:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112ae4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112ae8:	ebfffe15 	bl	112344 <lwip_send>
  112aec:	e1a03000 	mov	r3, r0
  112af0:	ea000074 	b	112cc8 <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  112af4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112af8:	e3530801 	cmp	r3, #65536	; 0x10000
  112afc:	3a000006 	bcc	112b1c <lwip_sendto+0x98>
  112b00:	e3060ec4 	movw	r0, #28356	; 0x6ec4
  112b04:	e3400014 	movt	r0, #20
  112b08:	ebffc181 	bl	103114 <rt_kprintf>
  112b0c:	e300148e 	movw	r1, #1166	; 0x48e
  112b10:	e3060d60 	movw	r0, #28000	; 0x6d60
  112b14:	e3400014 	movt	r0, #20
  112b18:	ebffe170 	bl	10b0e0 <sys_arch_assert>
  short_size = (u16_t)size;
  112b1c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112b20:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  112b24:	e59b3004 	ldr	r3, [fp, #4]
  112b28:	e3530000 	cmp	r3, #0
  112b2c:	1a000002 	bne	112b3c <lwip_sendto+0xb8>
  112b30:	e59b3008 	ldr	r3, [fp, #8]
  112b34:	e3530000 	cmp	r3, #0
  112b38:	0a000021 	beq	112bc4 <lwip_sendto+0x140>
  112b3c:	e59b3008 	ldr	r3, [fp, #8]
  112b40:	e3530010 	cmp	r3, #16
  112b44:	1a000007 	bne	112b68 <lwip_sendto+0xe4>
  112b48:	e59b3004 	ldr	r3, [fp, #4]
  112b4c:	e5d33001 	ldrb	r3, [r3, #1]
  112b50:	e3530002 	cmp	r3, #2
  112b54:	1a000003 	bne	112b68 <lwip_sendto+0xe4>
  112b58:	e59b3004 	ldr	r3, [fp, #4]
  112b5c:	e2033003 	and	r3, r3, #3
  112b60:	e3530000 	cmp	r3, #0
  112b64:	0a000016 	beq	112bc4 <lwip_sendto+0x140>
  112b68:	e3060ee8 	movw	r0, #28392	; 0x6ee8
  112b6c:	e3400014 	movt	r0, #20
  112b70:	ebffc167 	bl	103114 <rt_kprintf>
  112b74:	e3001493 	movw	r1, #1171	; 0x493
  112b78:	e3060d60 	movw	r0, #28000	; 0x6d60
  112b7c:	e3400014 	movt	r0, #20
  112b80:	ebffe156 	bl	10b0e0 <sys_arch_assert>
  112b84:	e3e0000f 	mvn	r0, #15
  112b88:	ebfff4b8 	bl	10fe70 <err_to_errno>
  112b8c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  112b90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112b94:	e6ef2073 	uxtb	r2, r3
  112b98:	e51b300c 	ldr	r3, [fp, #-12]
  112b9c:	e5c32010 	strb	r2, [r3, #16]
  112ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112ba4:	e3530000 	cmp	r3, #0
  112ba8:	0a000003 	beq	112bbc <lwip_sendto+0x138>
  112bac:	eb0098c6 	bl	138ecc <__errno_location>
  112bb0:	e1a02000 	mov	r2, r0
  112bb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112bb8:	e5823000 	str	r3, [r2]
  112bbc:	e3e03000 	mvn	r3, #0
  112bc0:	ea000040 	b	112cc8 <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  112bc4:	e3a03000 	mov	r3, #0
  112bc8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112bcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112bd0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  112bd4:	e59b3004 	ldr	r3, [fp, #4]
  112bd8:	e3530000 	cmp	r3, #0
  112bdc:	0a000009 	beq	112c08 <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  112be0:	e59b3004 	ldr	r3, [fp, #4]
  112be4:	e5933004 	ldr	r3, [r3, #4]
  112be8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112bec:	e59b3004 	ldr	r3, [fp, #4]
  112bf0:	e1d330b2 	ldrh	r3, [r3, #2]
  112bf4:	e1a00003 	mov	r0, r3
  112bf8:	eb000e71 	bl	1165c4 <lwip_htons>
  112bfc:	e1a03000 	mov	r3, r0
  112c00:	e14b30b8 	strh	r3, [fp, #-8]
  112c04:	ea000003 	b	112c18 <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  112c08:	e3a03000 	mov	r3, #0
  112c0c:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  112c10:	e3a03000 	mov	r3, #0
  112c14:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  112c18:	e15b30b8 	ldrh	r3, [fp, #-8]
  112c1c:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112c20:	e15b20be 	ldrh	r2, [fp, #-14]
  112c24:	e24b3028 	sub	r3, fp, #40	; 0x28
  112c28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112c2c:	e1a00003 	mov	r0, r3
  112c30:	ebfff534 	bl	110108 <netbuf_ref>
  112c34:	e1a03000 	mov	r3, r0
  112c38:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  112c3c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c40:	e3530000 	cmp	r3, #0
  112c44:	1a000007 	bne	112c68 <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  112c48:	e51b300c 	ldr	r3, [fp, #-12]
  112c4c:	e5933000 	ldr	r3, [r3]
  112c50:	e24b2028 	sub	r2, fp, #40	; 0x28
  112c54:	e1a01002 	mov	r1, r2
  112c58:	e1a00003 	mov	r0, r3
  112c5c:	ebffe4a1 	bl	10bee8 <netconn_send>
  112c60:	e1a03000 	mov	r3, r0
  112c64:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  112c68:	e24b3028 	sub	r3, fp, #40	; 0x28
  112c6c:	e1a00003 	mov	r0, r3
  112c70:	ebfff504 	bl	110088 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  112c74:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c78:	e1a00003 	mov	r0, r3
  112c7c:	ebfff47b 	bl	10fe70 <err_to_errno>
  112c80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112c84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c88:	e6ef2073 	uxtb	r2, r3
  112c8c:	e51b300c 	ldr	r3, [fp, #-12]
  112c90:	e5c32010 	strb	r2, [r3, #16]
  112c94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c98:	e3530000 	cmp	r3, #0
  112c9c:	0a000003 	beq	112cb0 <lwip_sendto+0x22c>
  112ca0:	eb009889 	bl	138ecc <__errno_location>
  112ca4:	e1a02000 	mov	r2, r0
  112ca8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112cac:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112cb0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112cb4:	e3530000 	cmp	r3, #0
  112cb8:	1a000001 	bne	112cc4 <lwip_sendto+0x240>
  112cbc:	e15b30be 	ldrh	r3, [fp, #-14]
  112cc0:	ea000000 	b	112cc8 <lwip_sendto+0x244>
  112cc4:	e3e03000 	mvn	r3, #0
}
  112cc8:	e1a00003 	mov	r0, r3
  112ccc:	e24bd004 	sub	sp, fp, #4
  112cd0:	e8bd8800 	pop	{fp, pc}

00112cd4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  112cd4:	e92d4800 	push	{fp, lr}
  112cd8:	e28db004 	add	fp, sp, #4
  112cdc:	e24dd018 	sub	sp, sp, #24
  112ce0:	e50b0010 	str	r0, [fp, #-16]
  112ce4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112ce8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112cec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112cf0:	e3530002 	cmp	r3, #2
  112cf4:	0a00000d 	beq	112d30 <lwip_socket+0x5c>
  112cf8:	e3530003 	cmp	r3, #3
  112cfc:	0a000002 	beq	112d0c <lwip_socket+0x38>
  112d00:	e3530001 	cmp	r3, #1
  112d04:	0a000016 	beq	112d64 <lwip_socket+0x90>
  112d08:	ea00001c 	b	112d80 <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  112d0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112d10:	e6ef3073 	uxtb	r3, r3
  112d14:	e3032970 	movw	r2, #14704	; 0x3970
  112d18:	e3402011 	movt	r2, #17
  112d1c:	e1a01003 	mov	r1, r3
  112d20:	e3a00040 	mov	r0, #64	; 0x40
  112d24:	ebffe15b 	bl	10b298 <netconn_new_with_proto_and_callback>
  112d28:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d2c:	ea000019 	b	112d98 <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112d30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112d34:	e3530088 	cmp	r3, #136	; 0x88
  112d38:	1a000001 	bne	112d44 <lwip_socket+0x70>
  112d3c:	e3a03021 	mov	r3, #33	; 0x21
  112d40:	ea000000 	b	112d48 <lwip_socket+0x74>
  112d44:	e3a03020 	mov	r3, #32
  112d48:	e3032970 	movw	r2, #14704	; 0x3970
  112d4c:	e3402011 	movt	r2, #17
  112d50:	e3a01000 	mov	r1, #0
  112d54:	e1a00003 	mov	r0, r3
  112d58:	ebffe14e 	bl	10b298 <netconn_new_with_proto_and_callback>
  112d5c:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d60:	ea00000c 	b	112d98 <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112d64:	e3032970 	movw	r2, #14704	; 0x3970
  112d68:	e3402011 	movt	r2, #17
  112d6c:	e3a01000 	mov	r1, #0
  112d70:	e3a00010 	mov	r0, #16
  112d74:	ebffe147 	bl	10b298 <netconn_new_with_proto_and_callback>
  112d78:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d7c:	ea000005 	b	112d98 <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112d80:	eb009851 	bl	138ecc <__errno_location>
  112d84:	e1a02000 	mov	r2, r0
  112d88:	e3a03016 	mov	r3, #22
  112d8c:	e5823000 	str	r3, [r2]
    return -1;
  112d90:	e3e03000 	mvn	r3, #0
  112d94:	ea00001b 	b	112e08 <lwip_socket+0x134>
  }

  if (!conn) {
  112d98:	e51b3008 	ldr	r3, [fp, #-8]
  112d9c:	e3530000 	cmp	r3, #0
  112da0:	1a000005 	bne	112dbc <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112da4:	eb009848 	bl	138ecc <__errno_location>
  112da8:	e1a02000 	mov	r2, r0
  112dac:	e3a03069 	mov	r3, #105	; 0x69
  112db0:	e5823000 	str	r3, [r2]
    return -1;
  112db4:	e3e03000 	mvn	r3, #0
  112db8:	ea000012 	b	112e08 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112dbc:	e3a01000 	mov	r1, #0
  112dc0:	e51b0008 	ldr	r0, [fp, #-8]
  112dc4:	ebfff8a1 	bl	111050 <alloc_socket>
  112dc8:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112dcc:	e51b300c 	ldr	r3, [fp, #-12]
  112dd0:	e3730001 	cmn	r3, #1
  112dd4:	1a000007 	bne	112df8 <lwip_socket+0x124>
    netconn_delete(conn);
  112dd8:	e51b0008 	ldr	r0, [fp, #-8]
  112ddc:	ebffe18f 	bl	10b420 <netconn_delete>
    set_errno(ENFILE);
  112de0:	eb009839 	bl	138ecc <__errno_location>
  112de4:	e1a02000 	mov	r2, r0
  112de8:	e3a03017 	mov	r3, #23
  112dec:	e5823000 	str	r3, [r2]
    return -1;
  112df0:	e3e03000 	mvn	r3, #0
  112df4:	ea000003 	b	112e08 <lwip_socket+0x134>
  }
  conn->socket = i;
  112df8:	e51b3008 	ldr	r3, [fp, #-8]
  112dfc:	e51b200c 	ldr	r2, [fp, #-12]
  112e00:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112e04:	e51b300c 	ldr	r3, [fp, #-12]
}
  112e08:	e1a00003 	mov	r0, r3
  112e0c:	e24bd004 	sub	sp, fp, #4
  112e10:	e8bd8800 	pop	{fp, pc}

00112e14 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112e14:	e92d4800 	push	{fp, lr}
  112e18:	e28db004 	add	fp, sp, #4
  112e1c:	e24dd010 	sub	sp, sp, #16
  112e20:	e50b0008 	str	r0, [fp, #-8]
  112e24:	e50b100c 	str	r1, [fp, #-12]
  112e28:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112e2c:	e3a03000 	mov	r3, #0
  112e30:	e51b2010 	ldr	r2, [fp, #-16]
  112e34:	e51b100c 	ldr	r1, [fp, #-12]
  112e38:	e51b0008 	ldr	r0, [fp, #-8]
  112e3c:	ebfffd40 	bl	112344 <lwip_send>
  112e40:	e1a03000 	mov	r3, r0
}
  112e44:	e1a00003 	mov	r0, r3
  112e48:	e24bd004 	sub	sp, fp, #4
  112e4c:	e8bd8800 	pop	{fp, pc}

00112e50 <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112e50:	e92d4800 	push	{fp, lr}
  112e54:	e28db004 	add	fp, sp, #4
  112e58:	e24dd030 	sub	sp, sp, #48	; 0x30
  112e5c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112e60:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112e64:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112e68:	e3a03000 	mov	r3, #0
  112e6c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112e70:	e3a03000 	mov	r3, #0
  112e74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112e78:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112e7c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112e80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112e84:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112e88:	e3a03000 	mov	r3, #0
  112e8c:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112e90:	e3a03000 	mov	r3, #0
  112e94:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112e98:	e3a03000 	mov	r3, #0
  112e9c:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112ea0:	e24b3020 	sub	r3, fp, #32
  112ea4:	e3a02000 	mov	r2, #0
  112ea8:	e1a01003 	mov	r1, r3
  112eac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112eb0:	ebfffd77 	bl	112494 <lwip_sendmsg>
  112eb4:	e1a03000 	mov	r3, r0
}
  112eb8:	e1a00003 	mov	r0, r3
  112ebc:	e24bd004 	sub	sp, fp, #4
  112ec0:	e8bd8800 	pop	{fp, pc}

00112ec4 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112ec4:	e92d4800 	push	{fp, lr}
  112ec8:	e28db004 	add	fp, sp, #4
  112ecc:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112ed0:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112ed4:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112ed8:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112edc:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112ee0:	e3a03000 	mov	r3, #0
  112ee4:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112ee8:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112eec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112ef0:	e3a03020 	mov	r3, #32
  112ef4:	e50b3010 	str	r3, [fp, #-16]
  112ef8:	ea000007 	b	112f1c <lwip_selscan+0x58>
  112efc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112f00:	e2832004 	add	r2, r3, #4
  112f04:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112f08:	e3a02000 	mov	r2, #0
  112f0c:	e5832000 	str	r2, [r3]
  112f10:	e51b3010 	ldr	r3, [fp, #-16]
  112f14:	e2433001 	sub	r3, r3, #1
  112f18:	e50b3010 	str	r3, [fp, #-16]
  112f1c:	e51b3010 	ldr	r3, [fp, #-16]
  112f20:	e3530000 	cmp	r3, #0
  112f24:	1afffff4 	bne	112efc <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112f28:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112f2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112f30:	e3a03020 	mov	r3, #32
  112f34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f38:	ea000007 	b	112f5c <lwip_selscan+0x98>
  112f3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112f40:	e2832004 	add	r2, r3, #4
  112f44:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112f48:	e3a02000 	mov	r2, #0
  112f4c:	e5832000 	str	r2, [r3]
  112f50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f54:	e2433001 	sub	r3, r3, #1
  112f58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f60:	e3530000 	cmp	r3, #0
  112f64:	1afffff4 	bne	112f3c <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112f68:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112f6c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112f70:	e3a03020 	mov	r3, #32
  112f74:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112f78:	ea000007 	b	112f9c <lwip_selscan+0xd8>
  112f7c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112f80:	e2832004 	add	r2, r3, #4
  112f84:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112f88:	e3a02000 	mov	r2, #0
  112f8c:	e5832000 	str	r2, [r3]
  112f90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112f94:	e2433001 	sub	r3, r3, #1
  112f98:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112f9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112fa0:	e3530000 	cmp	r3, #0
  112fa4:	1afffff4 	bne	112f7c <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112fa8:	e3a03000 	mov	r3, #0
  112fac:	e50b3008 	str	r3, [fp, #-8]
  112fb0:	ea0000aa 	b	113260 <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112fb4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112fb8:	e3530000 	cmp	r3, #0
  112fbc:	0a000009 	beq	112fe8 <lwip_selscan+0x124>
  112fc0:	e51b3008 	ldr	r3, [fp, #-8]
  112fc4:	e1a022a3 	lsr	r2, r3, #5
  112fc8:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112fcc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112fd0:	e51b3008 	ldr	r3, [fp, #-8]
  112fd4:	e203301f 	and	r3, r3, #31
  112fd8:	e1a03332 	lsr	r3, r2, r3
  112fdc:	e2033001 	and	r3, r3, #1
  112fe0:	e3530000 	cmp	r3, #0
  112fe4:	1a000019 	bne	113050 <lwip_selscan+0x18c>
  112fe8:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112fec:	e3530000 	cmp	r3, #0
  112ff0:	0a000009 	beq	11301c <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  112ff4:	e51b3008 	ldr	r3, [fp, #-8]
  112ff8:	e1a022a3 	lsr	r2, r3, #5
  112ffc:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113000:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113004:	e51b3008 	ldr	r3, [fp, #-8]
  113008:	e203301f 	and	r3, r3, #31
  11300c:	e1a03332 	lsr	r3, r2, r3
  113010:	e2033001 	and	r3, r3, #1
  113014:	e3530000 	cmp	r3, #0
  113018:	1a00000c 	bne	113050 <lwip_selscan+0x18c>
  11301c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113020:	e3530000 	cmp	r3, #0
  113024:	0a000089 	beq	113250 <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  113028:	e51b3008 	ldr	r3, [fp, #-8]
  11302c:	e1a022a3 	lsr	r2, r3, #5
  113030:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113034:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113038:	e51b3008 	ldr	r3, [fp, #-8]
  11303c:	e203301f 	and	r3, r3, #31
  113040:	e1a03332 	lsr	r3, r2, r3
  113044:	e2033001 	and	r3, r3, #1
  113048:	e3530000 	cmp	r3, #0
  11304c:	0a00007f 	beq	113250 <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  113050:	ebffbc79 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  113054:	e51b0008 	ldr	r0, [fp, #-8]
  113058:	ebfff7d1 	bl	110fa4 <tryget_socket>
  11305c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  113060:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113064:	e3530000 	cmp	r3, #0
  113068:	0a000076 	beq	113248 <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  11306c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113070:	e5933004 	ldr	r3, [r3, #4]
  113074:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  113078:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11307c:	e1d330ba 	ldrh	r3, [r3, #10]
  113080:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  113084:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113088:	e1d330bc 	ldrh	r3, [r3, #12]
  11308c:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  113090:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113094:	e1d330be 	ldrh	r3, [r3, #14]
  113098:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  11309c:	ebffbc6c 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  1130a0:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1130a4:	e3530000 	cmp	r3, #0
  1130a8:	0a000021 	beq	113134 <lwip_selscan+0x270>
  1130ac:	e51b3008 	ldr	r3, [fp, #-8]
  1130b0:	e1a022a3 	lsr	r2, r3, #5
  1130b4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1130b8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1130bc:	e51b3008 	ldr	r3, [fp, #-8]
  1130c0:	e203301f 	and	r3, r3, #31
  1130c4:	e1a03332 	lsr	r3, r2, r3
  1130c8:	e2033001 	and	r3, r3, #1
  1130cc:	e3530000 	cmp	r3, #0
  1130d0:	0a000017 	beq	113134 <lwip_selscan+0x270>
  1130d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1130d8:	e3530000 	cmp	r3, #0
  1130dc:	1a000002 	bne	1130ec <lwip_selscan+0x228>
  1130e0:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  1130e4:	e3530000 	cmp	r3, #0
  1130e8:	da000011 	ble	113134 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  1130ec:	e51b3008 	ldr	r3, [fp, #-8]
  1130f0:	e1a022a3 	lsr	r2, r3, #5
  1130f4:	e1a03102 	lsl	r3, r2, #2
  1130f8:	e24b1004 	sub	r1, fp, #4
  1130fc:	e0813003 	add	r3, r1, r3
  113100:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  113104:	e51b3008 	ldr	r3, [fp, #-8]
  113108:	e203301f 	and	r3, r3, #31
  11310c:	e3a00001 	mov	r0, #1
  113110:	e1a03310 	lsl	r3, r0, r3
  113114:	e1811003 	orr	r1, r1, r3
  113118:	e1a03102 	lsl	r3, r2, #2
  11311c:	e24b2004 	sub	r2, fp, #4
  113120:	e0823003 	add	r3, r2, r3
  113124:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  113128:	e51b300c 	ldr	r3, [fp, #-12]
  11312c:	e2833001 	add	r3, r3, #1
  113130:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  113134:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113138:	e3530000 	cmp	r3, #0
  11313c:	0a00001e 	beq	1131bc <lwip_selscan+0x2f8>
  113140:	e51b3008 	ldr	r3, [fp, #-8]
  113144:	e1a022a3 	lsr	r2, r3, #5
  113148:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  11314c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113150:	e51b3008 	ldr	r3, [fp, #-8]
  113154:	e203301f 	and	r3, r3, #31
  113158:	e1a03332 	lsr	r3, r2, r3
  11315c:	e2033001 	and	r3, r3, #1
  113160:	e3530000 	cmp	r3, #0
  113164:	0a000014 	beq	1131bc <lwip_selscan+0x2f8>
  113168:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  11316c:	e3530000 	cmp	r3, #0
  113170:	0a000011 	beq	1131bc <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  113174:	e51b3008 	ldr	r3, [fp, #-8]
  113178:	e1a022a3 	lsr	r2, r3, #5
  11317c:	e1a03102 	lsl	r3, r2, #2
  113180:	e24b1004 	sub	r1, fp, #4
  113184:	e0813003 	add	r3, r1, r3
  113188:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  11318c:	e51b3008 	ldr	r3, [fp, #-8]
  113190:	e203301f 	and	r3, r3, #31
  113194:	e3a00001 	mov	r0, #1
  113198:	e1a03310 	lsl	r3, r0, r3
  11319c:	e1811003 	orr	r1, r1, r3
  1131a0:	e1a03102 	lsl	r3, r2, #2
  1131a4:	e24b2004 	sub	r2, fp, #4
  1131a8:	e0823003 	add	r3, r2, r3
  1131ac:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  1131b0:	e51b300c 	ldr	r3, [fp, #-12]
  1131b4:	e2833001 	add	r3, r3, #1
  1131b8:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  1131bc:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131c0:	e3530000 	cmp	r3, #0
  1131c4:	0a000022 	beq	113254 <lwip_selscan+0x390>
  1131c8:	e51b3008 	ldr	r3, [fp, #-8]
  1131cc:	e1a022a3 	lsr	r2, r3, #5
  1131d0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131d4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1131d8:	e51b3008 	ldr	r3, [fp, #-8]
  1131dc:	e203301f 	and	r3, r3, #31
  1131e0:	e1a03332 	lsr	r3, r2, r3
  1131e4:	e2033001 	and	r3, r3, #1
  1131e8:	e3530000 	cmp	r3, #0
  1131ec:	0a000018 	beq	113254 <lwip_selscan+0x390>
  1131f0:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  1131f4:	e3530000 	cmp	r3, #0
  1131f8:	0a000015 	beq	113254 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  1131fc:	e51b3008 	ldr	r3, [fp, #-8]
  113200:	e1a022a3 	lsr	r2, r3, #5
  113204:	e1a03102 	lsl	r3, r2, #2
  113208:	e24b1004 	sub	r1, fp, #4
  11320c:	e0813003 	add	r3, r1, r3
  113210:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  113214:	e51b3008 	ldr	r3, [fp, #-8]
  113218:	e203301f 	and	r3, r3, #31
  11321c:	e3a00001 	mov	r0, #1
  113220:	e1a03310 	lsl	r3, r0, r3
  113224:	e1811003 	orr	r1, r1, r3
  113228:	e1a03102 	lsl	r3, r2, #2
  11322c:	e24b2004 	sub	r2, fp, #4
  113230:	e0823003 	add	r3, r2, r3
  113234:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  113238:	e51b300c 	ldr	r3, [fp, #-12]
  11323c:	e2833001 	add	r3, r3, #1
  113240:	e50b300c 	str	r3, [fp, #-12]
  113244:	ea000002 	b	113254 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  113248:	ebffbc01 	bl	102254 <rt_exit_critical>
  11324c:	ea000000 	b	113254 <lwip_selscan+0x390>
      continue;
  113250:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113254:	e51b3008 	ldr	r3, [fp, #-8]
  113258:	e2833001 	add	r3, r3, #1
  11325c:	e50b3008 	str	r3, [fp, #-8]
  113260:	e51b2008 	ldr	r2, [fp, #-8]
  113264:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113268:	e1520003 	cmp	r2, r3
  11326c:	baffff50 	blt	112fb4 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  113270:	e59b3004 	ldr	r3, [fp, #4]
  113274:	e1a00003 	mov	r0, r3
  113278:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  11327c:	e3a02080 	mov	r2, #128	; 0x80
  113280:	e1a01003 	mov	r1, r3
  113284:	eb00b6be 	bl	140d84 <memcpy>
  *writeset_out = lwriteset;
  113288:	e59b3008 	ldr	r3, [fp, #8]
  11328c:	e1a00003 	mov	r0, r3
  113290:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  113294:	e3a02080 	mov	r2, #128	; 0x80
  113298:	e1a01003 	mov	r1, r3
  11329c:	eb00b6b8 	bl	140d84 <memcpy>
  *exceptset_out = lexceptset;
  1132a0:	e59b300c 	ldr	r3, [fp, #12]
  1132a4:	e1a00003 	mov	r0, r3
  1132a8:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  1132ac:	e3a02080 	mov	r2, #128	; 0x80
  1132b0:	e1a01003 	mov	r1, r3
  1132b4:	eb00b6b2 	bl	140d84 <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  1132b8:	e51b300c 	ldr	r3, [fp, #-12]
  1132bc:	e3530000 	cmp	r3, #0
  1132c0:	aa000006 	bge	1132e0 <lwip_selscan+0x41c>
  1132c4:	e3060f08 	movw	r0, #28424	; 0x6f08
  1132c8:	e3400014 	movt	r0, #20
  1132cc:	ebffbf90 	bl	103114 <rt_kprintf>
  1132d0:	e3001569 	movw	r1, #1385	; 0x569
  1132d4:	e3060d60 	movw	r0, #28000	; 0x6d60
  1132d8:	e3400014 	movt	r0, #20
  1132dc:	ebffdf7f 	bl	10b0e0 <sys_arch_assert>
  return nready;
  1132e0:	e51b300c 	ldr	r3, [fp, #-12]
}
  1132e4:	e1a00003 	mov	r0, r3
  1132e8:	e24bd004 	sub	sp, fp, #4
  1132ec:	e8bd8800 	pop	{fp, pc}

001132f0 <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  1132f0:	e92d4800 	push	{fp, lr}
  1132f4:	e28db004 	add	fp, sp, #4
  1132f8:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  1132fc:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  113300:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  113304:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  113308:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  11330c:	e3a03000 	mov	r3, #0
  113310:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113314:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113318:	e58d3008 	str	r3, [sp, #8]
  11331c:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113320:	e58d3004 	str	r3, [sp, #4]
  113324:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113328:	e58d3000 	str	r3, [sp]
  11332c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113330:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113334:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113338:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  11333c:	ebfffee0 	bl	112ec4 <lwip_selscan>
  113340:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  113344:	e51b300c 	ldr	r3, [fp, #-12]
  113348:	e3530000 	cmp	r3, #0
  11334c:	1a000163 	bne	1138e0 <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  113350:	e59b3004 	ldr	r3, [fp, #4]
  113354:	e3530000 	cmp	r3, #0
  113358:	0a000007 	beq	11337c <lwip_select+0x8c>
  11335c:	e59b3004 	ldr	r3, [fp, #4]
  113360:	e1c320d0 	ldrd	r2, [r3]
  113364:	e1923003 	orrs	r3, r2, r3
  113368:	1a000003 	bne	11337c <lwip_select+0x8c>
  11336c:	e59b3004 	ldr	r3, [fp, #4]
  113370:	e5933008 	ldr	r3, [r3, #8]
  113374:	e3530000 	cmp	r3, #0
  113378:	0a00015a 	beq	1138e8 <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  11337c:	e3a03000 	mov	r3, #0
  113380:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  113384:	e3a03000 	mov	r3, #0
  113388:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  11338c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113390:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  113394:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113398:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  11339c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1133a0:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  1133a4:	e3a03000 	mov	r3, #0
  1133a8:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  1133ac:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1133b0:	e2833018 	add	r3, r3, #24
  1133b4:	e3a01000 	mov	r1, #0
  1133b8:	e1a00003 	mov	r0, r3
  1133bc:	ebffdca7 	bl	10a660 <sys_sem_new>
  1133c0:	e1a03000 	mov	r3, r0
  1133c4:	e3530000 	cmp	r3, #0
  1133c8:	0a000005 	beq	1133e4 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  1133cc:	eb0096be 	bl	138ecc <__errno_location>
  1133d0:	e1a02000 	mov	r2, r0
  1133d4:	e3a0300c 	mov	r3, #12
  1133d8:	e5823000 	str	r3, [r2]
      return -1;
  1133dc:	e3e03000 	mvn	r3, #0
  1133e0:	ea00015f 	b	113964 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  1133e4:	ebffbb94 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  1133e8:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  1133ec:	e3403014 	movt	r3, #20
  1133f0:	e5933000 	ldr	r3, [r3]
  1133f4:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  1133f8:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  1133fc:	e3403014 	movt	r3, #20
  113400:	e5933000 	ldr	r3, [r3]
  113404:	e3530000 	cmp	r3, #0
  113408:	0a000004 	beq	113420 <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  11340c:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  113410:	e3403014 	movt	r3, #20
  113414:	e5933000 	ldr	r3, [r3]
  113418:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  11341c:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  113420:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  113424:	e3403014 	movt	r3, #20
  113428:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  11342c:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113430:	e30d3c50 	movw	r3, #56400	; 0xdc50
  113434:	e3403014 	movt	r3, #20
  113438:	e5933000 	ldr	r3, [r3]
  11343c:	e2832001 	add	r2, r3, #1
  113440:	e30d3c50 	movw	r3, #56400	; 0xdc50
  113444:	e3403014 	movt	r3, #20
  113448:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  11344c:	ebffbb80 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  113450:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113454:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113458:	e3a03000 	mov	r3, #0
  11345c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113460:	ea000049 	b	11358c <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  113464:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113468:	e3530000 	cmp	r3, #0
  11346c:	0a000009 	beq	113498 <lwip_select+0x1a8>
  113470:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113474:	e1a022a3 	lsr	r2, r3, #5
  113478:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11347c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113484:	e203301f 	and	r3, r3, #31
  113488:	e1a03332 	lsr	r3, r2, r3
  11348c:	e2033001 	and	r3, r3, #1
  113490:	e3530000 	cmp	r3, #0
  113494:	1a000019 	bne	113500 <lwip_select+0x210>
  113498:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11349c:	e3530000 	cmp	r3, #0
  1134a0:	0a000009 	beq	1134cc <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  1134a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134a8:	e1a022a3 	lsr	r2, r3, #5
  1134ac:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1134b0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1134b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134b8:	e203301f 	and	r3, r3, #31
  1134bc:	e1a03332 	lsr	r3, r2, r3
  1134c0:	e2033001 	and	r3, r3, #1
  1134c4:	e3530000 	cmp	r3, #0
  1134c8:	1a00000c 	bne	113500 <lwip_select+0x210>
  1134cc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1134d0:	e3530000 	cmp	r3, #0
  1134d4:	0a000029 	beq	113580 <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  1134d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134dc:	e1a022a3 	lsr	r2, r3, #5
  1134e0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1134e4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1134e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134ec:	e203301f 	and	r3, r3, #31
  1134f0:	e1a03332 	lsr	r3, r2, r3
  1134f4:	e2033001 	and	r3, r3, #1
  1134f8:	e3530000 	cmp	r3, #0
  1134fc:	0a00001f 	beq	113580 <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113500:	ebffbb4d 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113504:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113508:	ebfff6a5 	bl	110fa4 <tryget_socket>
  11350c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  113510:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113514:	e3530000 	cmp	r3, #0
  113518:	0a000011 	beq	113564 <lwip_select+0x274>
          sock->select_waiting++;
  11351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113520:	e5d33011 	ldrb	r3, [r3, #17]
  113524:	e2833001 	add	r3, r3, #1
  113528:	e6ef2073 	uxtb	r2, r3
  11352c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113530:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113534:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113538:	e5d33011 	ldrb	r3, [r3, #17]
  11353c:	e3530000 	cmp	r3, #0
  113540:	1a00000d 	bne	11357c <lwip_select+0x28c>
  113544:	e3060f14 	movw	r0, #28436	; 0x6f14
  113548:	e3400014 	movt	r0, #20
  11354c:	ebffbef0 	bl	103114 <rt_kprintf>
  113550:	e30015be 	movw	r1, #1470	; 0x5be
  113554:	e3060d60 	movw	r0, #28000	; 0x6d60
  113558:	e3400014 	movt	r0, #20
  11355c:	ebffdedf 	bl	10b0e0 <sys_arch_assert>
  113560:	ea000005 	b	11357c <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  113564:	e3e03000 	mvn	r3, #0
  113568:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  11356c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113570:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  113574:	ebffbb36 	bl	102254 <rt_exit_critical>
          break;
  113578:	ea000007 	b	11359c <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  11357c:	ebffbb34 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113584:	e2833001 	add	r3, r3, #1
  113588:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11358c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113590:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113594:	e1520003 	cmp	r2, r3
  113598:	baffffb1 	blt	113464 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  11359c:	e51b300c 	ldr	r3, [fp, #-12]
  1135a0:	e3530000 	cmp	r3, #0
  1135a4:	ba00002e 	blt	113664 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1135a8:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1135ac:	e58d3008 	str	r3, [sp, #8]
  1135b0:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1135b4:	e58d3004 	str	r3, [sp, #4]
  1135b8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1135bc:	e58d3000 	str	r3, [sp]
  1135c0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135c4:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1135c8:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1135cc:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1135d0:	ebfffe3b 	bl	112ec4 <lwip_selscan>
  1135d4:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  1135d8:	e51b300c 	ldr	r3, [fp, #-12]
  1135dc:	e3530000 	cmp	r3, #0
  1135e0:	1a00001f 	bne	113664 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  1135e4:	e59b3004 	ldr	r3, [fp, #4]
  1135e8:	e3530000 	cmp	r3, #0
  1135ec:	1a000002 	bne	1135fc <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  1135f0:	e3a03000 	mov	r3, #0
  1135f4:	e50b3010 	str	r3, [fp, #-16]
  1135f8:	ea000013 	b	11364c <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  1135fc:	e59b3004 	ldr	r3, [fp, #4]
  113600:	e1c320d0 	ldrd	r2, [r3]
  113604:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  113608:	e0000293 	mul	r0, r3, r2
  11360c:	e59b3004 	ldr	r3, [fp, #4]
  113610:	e5933008 	ldr	r3, [r3, #8]
  113614:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  113618:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11361c:	e3413062 	movt	r3, #4194	; 0x1062
  113620:	e0c32391 	smull	r2, r3, r1, r3
  113624:	e1a02343 	asr	r2, r3, #6
  113628:	e1a03fc1 	asr	r3, r1, #31
  11362c:	e0423003 	sub	r3, r2, r3
  113630:	e0803003 	add	r3, r0, r3
  113634:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  113638:	e51b3010 	ldr	r3, [fp, #-16]
  11363c:	e3530000 	cmp	r3, #0
  113640:	1a000001 	bne	11364c <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  113644:	e3a03001 	mov	r3, #1
  113648:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  11364c:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113650:	e2833018 	add	r3, r3, #24
  113654:	e51b1010 	ldr	r1, [fp, #-16]
  113658:	e1a00003 	mov	r0, r3
  11365c:	ebffdc40 	bl	10a764 <sys_arch_sem_wait>
  113660:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113664:	e3a03000 	mov	r3, #0
  113668:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11366c:	ea000049 	b	113798 <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  113670:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113674:	e3530000 	cmp	r3, #0
  113678:	0a000009 	beq	1136a4 <lwip_select+0x3b4>
  11367c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113680:	e1a022a3 	lsr	r2, r3, #5
  113684:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113688:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11368c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113690:	e203301f 	and	r3, r3, #31
  113694:	e1a03332 	lsr	r3, r2, r3
  113698:	e2033001 	and	r3, r3, #1
  11369c:	e3530000 	cmp	r3, #0
  1136a0:	1a000019 	bne	11370c <lwip_select+0x41c>
  1136a4:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1136a8:	e3530000 	cmp	r3, #0
  1136ac:	0a000009 	beq	1136d8 <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  1136b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136b4:	e1a022a3 	lsr	r2, r3, #5
  1136b8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1136bc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136c4:	e203301f 	and	r3, r3, #31
  1136c8:	e1a03332 	lsr	r3, r2, r3
  1136cc:	e2033001 	and	r3, r3, #1
  1136d0:	e3530000 	cmp	r3, #0
  1136d4:	1a00000c 	bne	11370c <lwip_select+0x41c>
  1136d8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136dc:	e3530000 	cmp	r3, #0
  1136e0:	0a000029 	beq	11378c <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  1136e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136e8:	e1a022a3 	lsr	r2, r3, #5
  1136ec:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136f0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136f8:	e203301f 	and	r3, r3, #31
  1136fc:	e1a03332 	lsr	r3, r2, r3
  113700:	e2033001 	and	r3, r3, #1
  113704:	e3530000 	cmp	r3, #0
  113708:	0a00001f 	beq	11378c <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  11370c:	ebffbaca 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113710:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113714:	ebfff622 	bl	110fa4 <tryget_socket>
  113718:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  11371c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113720:	e3530000 	cmp	r3, #0
  113724:	0a000015 	beq	113780 <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11372c:	e5d33011 	ldrb	r3, [r3, #17]
  113730:	e3530000 	cmp	r3, #0
  113734:	1a000006 	bne	113754 <lwip_select+0x464>
  113738:	e3060f14 	movw	r0, #28436	; 0x6f14
  11373c:	e3400014 	movt	r0, #20
  113740:	ebffbe73 	bl	103114 <rt_kprintf>
  113744:	e30015ec 	movw	r1, #1516	; 0x5ec
  113748:	e3060d60 	movw	r0, #28000	; 0x6d60
  11374c:	e3400014 	movt	r0, #20
  113750:	ebffde62 	bl	10b0e0 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  113754:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113758:	e5d33011 	ldrb	r3, [r3, #17]
  11375c:	e3530000 	cmp	r3, #0
  113760:	0a000008 	beq	113788 <lwip_select+0x498>
            sock->select_waiting--;
  113764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113768:	e5d33011 	ldrb	r3, [r3, #17]
  11376c:	e2433001 	sub	r3, r3, #1
  113770:	e6ef2073 	uxtb	r2, r3
  113774:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113778:	e5c32011 	strb	r2, [r3, #17]
  11377c:	ea000001 	b	113788 <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  113780:	e3e03000 	mvn	r3, #0
  113784:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  113788:	ebffbab1 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  11378c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113790:	e2833001 	add	r3, r3, #1
  113794:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113798:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11379c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137a0:	e1520003 	cmp	r2, r3
  1137a4:	baffffb1 	blt	113670 <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  1137a8:	ebffbaa3 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  1137ac:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1137b0:	e3530000 	cmp	r3, #0
  1137b4:	0a000002 	beq	1137c4 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  1137b8:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1137bc:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  1137c0:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  1137c4:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  1137c8:	e3403014 	movt	r3, #20
  1137cc:	e5932000 	ldr	r2, [r3]
  1137d0:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1137d4:	e1520003 	cmp	r2, r3
  1137d8:	1a00000e 	bne	113818 <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  1137dc:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1137e0:	e3530000 	cmp	r3, #0
  1137e4:	0a000006 	beq	113804 <lwip_select+0x514>
  1137e8:	e3060f30 	movw	r0, #28464	; 0x6f30
  1137ec:	e3400014 	movt	r0, #20
  1137f0:	ebffbe47 	bl	103114 <rt_kprintf>
  1137f4:	e30015fd 	movw	r1, #1533	; 0x5fd
  1137f8:	e3060d60 	movw	r0, #28000	; 0x6d60
  1137fc:	e3400014 	movt	r0, #20
  113800:	ebffde36 	bl	10b0e0 <sys_arch_assert>
      select_cb_list = select_cb.next;
  113804:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113808:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  11380c:	e3403014 	movt	r3, #20
  113810:	e5832000 	str	r2, [r3]
  113814:	ea00000c 	b	11384c <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  113818:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  11381c:	e3530000 	cmp	r3, #0
  113820:	1a000006 	bne	113840 <lwip_select+0x550>
  113824:	e3060f48 	movw	r0, #28488	; 0x6f48
  113828:	e3400014 	movt	r0, #20
  11382c:	ebffbe38 	bl	103114 <rt_kprintf>
  113830:	e3a01c06 	mov	r1, #1536	; 0x600
  113834:	e3060d60 	movw	r0, #28000	; 0x6d60
  113838:	e3400014 	movt	r0, #20
  11383c:	ebffde27 	bl	10b0e0 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  113840:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113844:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113848:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  11384c:	e30d3c50 	movw	r3, #56400	; 0xdc50
  113850:	e3403014 	movt	r3, #20
  113854:	e5933000 	ldr	r3, [r3]
  113858:	e2832001 	add	r2, r3, #1
  11385c:	e30d3c50 	movw	r3, #56400	; 0xdc50
  113860:	e3403014 	movt	r3, #20
  113864:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  113868:	ebffba79 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  11386c:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113870:	e2833018 	add	r3, r3, #24
  113874:	e1a00003 	mov	r0, r3
  113878:	ebffdba3 	bl	10a70c <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  11387c:	e51b300c 	ldr	r3, [fp, #-12]
  113880:	e3530000 	cmp	r3, #0
  113884:	aa000005 	bge	1138a0 <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  113888:	eb00958f 	bl	138ecc <__errno_location>
  11388c:	e1a02000 	mov	r2, r0
  113890:	e3a03009 	mov	r3, #9
  113894:	e5823000 	str	r3, [r2]
      return -1;
  113898:	e3e03000 	mvn	r3, #0
  11389c:	ea000030 	b	113964 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  1138a0:	e51b3008 	ldr	r3, [fp, #-8]
  1138a4:	e3730001 	cmn	r3, #1
  1138a8:	0a000010 	beq	1138f0 <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1138ac:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1138b0:	e58d3008 	str	r3, [sp, #8]
  1138b4:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1138b8:	e58d3004 	str	r3, [sp, #4]
  1138bc:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1138c0:	e58d3000 	str	r3, [sp]
  1138c4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1138c8:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1138cc:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1138d0:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1138d4:	ebfffd7a 	bl	112ec4 <lwip_selscan>
  1138d8:	e50b000c 	str	r0, [fp, #-12]
  1138dc:	ea000004 	b	1138f4 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  1138e0:	e320f000 	nop	{0}
  1138e4:	ea000002 	b	1138f4 <lwip_select+0x604>
      goto return_copy_fdsets;
  1138e8:	e320f000 	nop	{0}
  1138ec:	ea000000 	b	1138f4 <lwip_select+0x604>
      goto return_copy_fdsets;
  1138f0:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  1138f4:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1138f8:	e3530000 	cmp	r3, #0
  1138fc:	0a000005 	beq	113918 <lwip_select+0x628>
    *readset = lreadset;
  113900:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113904:	e1a00003 	mov	r0, r3
  113908:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  11390c:	e3a02080 	mov	r2, #128	; 0x80
  113910:	e1a01003 	mov	r1, r3
  113914:	eb00b51a 	bl	140d84 <memcpy>
  }
  if (writeset) {
  113918:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11391c:	e3530000 	cmp	r3, #0
  113920:	0a000005 	beq	11393c <lwip_select+0x64c>
    *writeset = lwriteset;
  113924:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113928:	e1a00003 	mov	r0, r3
  11392c:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113930:	e3a02080 	mov	r2, #128	; 0x80
  113934:	e1a01003 	mov	r1, r3
  113938:	eb00b511 	bl	140d84 <memcpy>
  }
  if (exceptset) {
  11393c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113940:	e3530000 	cmp	r3, #0
  113944:	0a000005 	beq	113960 <lwip_select+0x670>
    *exceptset = lexceptset;
  113948:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11394c:	e1a00003 	mov	r0, r3
  113950:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113954:	e3a02080 	mov	r2, #128	; 0x80
  113958:	e1a01003 	mov	r1, r3
  11395c:	eb00b508 	bl	140d84 <memcpy>
  }
  return nready;
  113960:	e51b300c 	ldr	r3, [fp, #-12]
}
  113964:	e1a00003 	mov	r0, r3
  113968:	e24bd004 	sub	sp, fp, #4
  11396c:	e8bd8800 	pop	{fp, pc}

00113970 <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  113970:	e92d4800 	push	{fp, lr}
  113974:	e28db004 	add	fp, sp, #4
  113978:	e24dd028 	sub	sp, sp, #40	; 0x28
  11397c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113980:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113984:	e1a03002 	mov	r3, r2
  113988:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  11398c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113990:	e3530000 	cmp	r3, #0
  113994:	0a0000e5 	beq	113d30 <event_callback+0x3c0>
    s = conn->socket;
  113998:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11399c:	e593301c 	ldr	r3, [r3, #28]
  1139a0:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  1139a4:	e51b3008 	ldr	r3, [fp, #-8]
  1139a8:	e3530000 	cmp	r3, #0
  1139ac:	aa000012 	bge	1139fc <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  1139b0:	ebffba21 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  1139b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139b8:	e593301c 	ldr	r3, [r3, #28]
  1139bc:	e3530000 	cmp	r3, #0
  1139c0:	aa000009 	bge	1139ec <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  1139c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1139c8:	e3530000 	cmp	r3, #0
  1139cc:	1a000004 	bne	1139e4 <event_callback+0x74>
          conn->socket--;
  1139d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139d4:	e593301c 	ldr	r3, [r3, #28]
  1139d8:	e2432001 	sub	r2, r3, #1
  1139dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139e0:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  1139e4:	ebffba1a 	bl	102254 <rt_exit_critical>
        return;
  1139e8:	ea0000d3 	b	113d3c <event_callback+0x3cc>
      }
      s = conn->socket;
  1139ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139f0:	e593301c 	ldr	r3, [r3, #28]
  1139f4:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  1139f8:	ebffba15 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  1139fc:	e51b0008 	ldr	r0, [fp, #-8]
  113a00:	ebfff542 	bl	110f10 <get_socket>
  113a04:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  113a08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a0c:	e3530000 	cmp	r3, #0
  113a10:	0a0000c8 	beq	113d38 <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  113a14:	ebffba08 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  113a18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113a1c:	e3530004 	cmp	r3, #4
  113a20:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  113a24:	ea000022 	b	113ab4 <event_callback+0x144>
  113a28:	00113a3c 	.word	0x00113a3c
  113a2c:	00113a60 	.word	0x00113a60
  113a30:	00113a84 	.word	0x00113a84
  113a34:	00113a94 	.word	0x00113a94
  113a38:	00113aa4 	.word	0x00113aa4
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  113a3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a40:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a44:	e6ff3073 	uxth	r3, r3
  113a48:	e2833001 	add	r3, r3, #1
  113a4c:	e6ff3073 	uxth	r3, r3
  113a50:	e6bf2073 	sxth	r2, r3
  113a54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a58:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a5c:	ea00001c 	b	113ad4 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  113a60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a64:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a68:	e6ff3073 	uxth	r3, r3
  113a6c:	e2433001 	sub	r3, r3, #1
  113a70:	e6ff3073 	uxth	r3, r3
  113a74:	e6bf2073 	sxth	r2, r3
  113a78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a7c:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a80:	ea000013 	b	113ad4 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  113a84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a88:	e3a02001 	mov	r2, #1
  113a8c:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113a90:	ea00000f 	b	113ad4 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  113a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a98:	e3a02000 	mov	r2, #0
  113a9c:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113aa0:	ea00000b 	b	113ad4 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  113aa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113aa8:	e3a02001 	mov	r2, #1
  113aac:	e1c320be 	strh	r2, [r3, #14]
      break;
  113ab0:	ea000007 	b	113ad4 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113ab4:	e3060f60 	movw	r0, #28512	; 0x6f60
  113ab8:	e3400014 	movt	r0, #20
  113abc:	ebffbd94 	bl	103114 <rt_kprintf>
  113ac0:	e3001679 	movw	r1, #1657	; 0x679
  113ac4:	e3060d60 	movw	r0, #28000	; 0x6d60
  113ac8:	e3400014 	movt	r0, #20
  113acc:	ebffdd83 	bl	10b0e0 <sys_arch_assert>
      break;
  113ad0:	e320f000 	nop	{0}
  }

  int mask = 0;
  113ad4:	e3a03000 	mov	r3, #0
  113ad8:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113adc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ae0:	e3530000 	cmp	r3, #0
  113ae4:	0a00001b 	beq	113b58 <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  113ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113aec:	e5933004 	ldr	r3, [r3, #4]
  113af0:	e3530000 	cmp	r3, #0
  113af4:	1a000003 	bne	113b08 <event_callback+0x198>
  113af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113afc:	e1d330fa 	ldrsh	r3, [r3, #10]
  113b00:	e3530000 	cmp	r3, #0
  113b04:	0a000002 	beq	113b14 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  113b08:	e51b3010 	ldr	r3, [fp, #-16]
  113b0c:	e3833001 	orr	r3, r3, #1
  113b10:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  113b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b18:	e1d330bc 	ldrh	r3, [r3, #12]
  113b1c:	e3530000 	cmp	r3, #0
  113b20:	0a000002 	beq	113b30 <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  113b24:	e51b3010 	ldr	r3, [fp, #-16]
  113b28:	e3833002 	orr	r3, r3, #2
  113b2c:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113b30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b34:	e1d330be 	ldrh	r3, [r3, #14]
  113b38:	e3530000 	cmp	r3, #0
  113b3c:	0a000005 	beq	113b58 <event_callback+0x1e8>
      {
          mask |= POLLERR;
  113b40:	e51b3010 	ldr	r3, [fp, #-16]
  113b44:	e3833004 	orr	r3, r3, #4
  113b48:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  113b4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b50:	e3a02000 	mov	r2, #0
  113b54:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  113b58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b5c:	e5d33011 	ldrb	r3, [r3, #17]
  113b60:	e3530000 	cmp	r3, #0
  113b64:	1a000001 	bne	113b70 <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  113b68:	ebffb9b9 	bl	102254 <rt_exit_critical>
    return;
  113b6c:	ea000072 	b	113d3c <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  113b70:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113b74:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  113b78:	e3403014 	movt	r3, #20
  113b7c:	e5933000 	ldr	r3, [r3]
  113b80:	e50b300c 	str	r3, [fp, #-12]
  113b84:	ea000064 	b	113d1c <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  113b88:	e30d3c50 	movw	r3, #56400	; 0xdc50
  113b8c:	e3403014 	movt	r3, #20
  113b90:	e5933000 	ldr	r3, [r3]
  113b94:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  113b98:	e51b300c 	ldr	r3, [fp, #-12]
  113b9c:	e5933014 	ldr	r3, [r3, #20]
  113ba0:	e3530000 	cmp	r3, #0
  113ba4:	1a000050 	bne	113cec <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  113ba8:	e3a03000 	mov	r3, #0
  113bac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113bb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113bb4:	e1d330fa 	ldrsh	r3, [r3, #10]
  113bb8:	e3530000 	cmp	r3, #0
  113bbc:	da000010 	ble	113c04 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  113bc0:	e51b300c 	ldr	r3, [fp, #-12]
  113bc4:	e5933008 	ldr	r3, [r3, #8]
  113bc8:	e3530000 	cmp	r3, #0
  113bcc:	0a00000c 	beq	113c04 <event_callback+0x294>
  113bd0:	e51b300c 	ldr	r3, [fp, #-12]
  113bd4:	e5933008 	ldr	r3, [r3, #8]
  113bd8:	e51b2008 	ldr	r2, [fp, #-8]
  113bdc:	e1a022a2 	lsr	r2, r2, #5
  113be0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113be4:	e51b3008 	ldr	r3, [fp, #-8]
  113be8:	e203301f 	and	r3, r3, #31
  113bec:	e1a03332 	lsr	r3, r2, r3
  113bf0:	e2033001 	and	r3, r3, #1
  113bf4:	e3530000 	cmp	r3, #0
  113bf8:	0a000001 	beq	113c04 <event_callback+0x294>
          do_signal = 1;
  113bfc:	e3a03001 	mov	r3, #1
  113c00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  113c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c08:	e1d330bc 	ldrh	r3, [r3, #12]
  113c0c:	e3530000 	cmp	r3, #0
  113c10:	0a000013 	beq	113c64 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  113c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c18:	e3530000 	cmp	r3, #0
  113c1c:	1a000010 	bne	113c64 <event_callback+0x2f4>
  113c20:	e51b300c 	ldr	r3, [fp, #-12]
  113c24:	e593300c 	ldr	r3, [r3, #12]
  113c28:	e3530000 	cmp	r3, #0
  113c2c:	0a00000c 	beq	113c64 <event_callback+0x2f4>
  113c30:	e51b300c 	ldr	r3, [fp, #-12]
  113c34:	e593300c 	ldr	r3, [r3, #12]
  113c38:	e51b2008 	ldr	r2, [fp, #-8]
  113c3c:	e1a022a2 	lsr	r2, r2, #5
  113c40:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113c44:	e51b3008 	ldr	r3, [fp, #-8]
  113c48:	e203301f 	and	r3, r3, #31
  113c4c:	e1a03332 	lsr	r3, r2, r3
  113c50:	e2033001 	and	r3, r3, #1
  113c54:	e3530000 	cmp	r3, #0
  113c58:	0a000001 	beq	113c64 <event_callback+0x2f4>
          do_signal = 1;
  113c5c:	e3a03001 	mov	r3, #1
  113c60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  113c64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c68:	e1d330be 	ldrh	r3, [r3, #14]
  113c6c:	e3530000 	cmp	r3, #0
  113c70:	0a000013 	beq	113cc4 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  113c74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c78:	e3530000 	cmp	r3, #0
  113c7c:	1a000010 	bne	113cc4 <event_callback+0x354>
  113c80:	e51b300c 	ldr	r3, [fp, #-12]
  113c84:	e5933010 	ldr	r3, [r3, #16]
  113c88:	e3530000 	cmp	r3, #0
  113c8c:	0a00000c 	beq	113cc4 <event_callback+0x354>
  113c90:	e51b300c 	ldr	r3, [fp, #-12]
  113c94:	e5933010 	ldr	r3, [r3, #16]
  113c98:	e51b2008 	ldr	r2, [fp, #-8]
  113c9c:	e1a022a2 	lsr	r2, r2, #5
  113ca0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113ca4:	e51b3008 	ldr	r3, [fp, #-8]
  113ca8:	e203301f 	and	r3, r3, #31
  113cac:	e1a03332 	lsr	r3, r2, r3
  113cb0:	e2033001 	and	r3, r3, #1
  113cb4:	e3530000 	cmp	r3, #0
  113cb8:	0a000001 	beq	113cc4 <event_callback+0x354>
          do_signal = 1;
  113cbc:	e3a03001 	mov	r3, #1
  113cc0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  113cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113cc8:	e3530000 	cmp	r3, #0
  113ccc:	0a000006 	beq	113cec <event_callback+0x37c>
        scb->sem_signalled = 1;
  113cd0:	e51b300c 	ldr	r3, [fp, #-12]
  113cd4:	e3a02001 	mov	r2, #1
  113cd8:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113cdc:	e51b300c 	ldr	r3, [fp, #-12]
  113ce0:	e2833018 	add	r3, r3, #24
  113ce4:	e1a00003 	mov	r0, r3
  113ce8:	ebffda92 	bl	10a738 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113cec:	ebffb958 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  113cf0:	ebffb951 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  113cf4:	e30d3c50 	movw	r3, #56400	; 0xdc50
  113cf8:	e3403014 	movt	r3, #20
  113cfc:	e5933000 	ldr	r3, [r3]
  113d00:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  113d04:	e1520003 	cmp	r2, r3
  113d08:	0a000000 	beq	113d10 <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  113d0c:	eaffff98 	b	113b74 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113d10:	e51b300c 	ldr	r3, [fp, #-12]
  113d14:	e5933000 	ldr	r3, [r3]
  113d18:	e50b300c 	str	r3, [fp, #-12]
  113d1c:	e51b300c 	ldr	r3, [fp, #-12]
  113d20:	e3530000 	cmp	r3, #0
  113d24:	1affff97 	bne	113b88 <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113d28:	ebffb949 	bl	102254 <rt_exit_critical>
  113d2c:	ea000002 	b	113d3c <event_callback+0x3cc>
    return;
  113d30:	e320f000 	nop	{0}
  113d34:	ea000000 	b	113d3c <event_callback+0x3cc>
      return;
  113d38:	e320f000 	nop	{0}
}
  113d3c:	e24bd004 	sub	sp, fp, #4
  113d40:	e8bd8800 	pop	{fp, pc}

00113d44 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  113d44:	e92d4800 	push	{fp, lr}
  113d48:	e28db004 	add	fp, sp, #4
  113d4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  113d50:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113d54:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113d58:	e3a03000 	mov	r3, #0
  113d5c:	e54b3005 	strb	r3, [fp, #-5]
  113d60:	e3a03000 	mov	r3, #0
  113d64:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113d68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113d6c:	ebfff467 	bl	110f10 <get_socket>
  113d70:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113d74:	e51b300c 	ldr	r3, [fp, #-12]
  113d78:	e3530000 	cmp	r3, #0
  113d7c:	1a000001 	bne	113d88 <lwip_shutdown+0x44>
    return -1;
  113d80:	e3e03000 	mvn	r3, #0
  113d84:	ea000067 	b	113f28 <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113d88:	e51b300c 	ldr	r3, [fp, #-12]
  113d8c:	e5933000 	ldr	r3, [r3]
  113d90:	e3530000 	cmp	r3, #0
  113d94:	0a000014 	beq	113dec <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113d98:	e51b300c 	ldr	r3, [fp, #-12]
  113d9c:	e5933000 	ldr	r3, [r3]
  113da0:	e5933000 	ldr	r3, [r3]
  113da4:	e20330f0 	and	r3, r3, #240	; 0xf0
  113da8:	e3530010 	cmp	r3, #16
  113dac:	0a00001d 	beq	113e28 <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113db0:	e3a0305f 	mov	r3, #95	; 0x5f
  113db4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113db8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113dbc:	e6ef2073 	uxtb	r2, r3
  113dc0:	e51b300c 	ldr	r3, [fp, #-12]
  113dc4:	e5c32010 	strb	r2, [r3, #16]
  113dc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113dcc:	e3530000 	cmp	r3, #0
  113dd0:	0a000003 	beq	113de4 <lwip_shutdown+0xa0>
  113dd4:	eb00943c 	bl	138ecc <__errno_location>
  113dd8:	e1a02000 	mov	r2, r0
  113ddc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113de0:	e5823000 	str	r3, [r2]
      return -1;
  113de4:	e3e03000 	mvn	r3, #0
  113de8:	ea00004e 	b	113f28 <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113dec:	e3a0306b 	mov	r3, #107	; 0x6b
  113df0:	e50b3010 	str	r3, [fp, #-16]
  113df4:	e51b3010 	ldr	r3, [fp, #-16]
  113df8:	e6ef2073 	uxtb	r2, r3
  113dfc:	e51b300c 	ldr	r3, [fp, #-12]
  113e00:	e5c32010 	strb	r2, [r3, #16]
  113e04:	e51b3010 	ldr	r3, [fp, #-16]
  113e08:	e3530000 	cmp	r3, #0
  113e0c:	0a000003 	beq	113e20 <lwip_shutdown+0xdc>
  113e10:	eb00942d 	bl	138ecc <__errno_location>
  113e14:	e1a02000 	mov	r2, r0
  113e18:	e51b3010 	ldr	r3, [fp, #-16]
  113e1c:	e5823000 	str	r3, [r2]
    return -1;
  113e20:	e3e03000 	mvn	r3, #0
  113e24:	ea00003f 	b	113f28 <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113e28:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e2c:	e3530000 	cmp	r3, #0
  113e30:	1a000002 	bne	113e40 <lwip_shutdown+0xfc>
    shut_rx = 1;
  113e34:	e3a03001 	mov	r3, #1
  113e38:	e54b3005 	strb	r3, [fp, #-5]
  113e3c:	ea00001c 	b	113eb4 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113e40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e44:	e3530001 	cmp	r3, #1
  113e48:	1a000002 	bne	113e58 <lwip_shutdown+0x114>
    shut_tx = 1;
  113e4c:	e3a03001 	mov	r3, #1
  113e50:	e54b3006 	strb	r3, [fp, #-6]
  113e54:	ea000016 	b	113eb4 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113e58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e5c:	e3530002 	cmp	r3, #2
  113e60:	1a000004 	bne	113e78 <lwip_shutdown+0x134>
    shut_rx = 1;
  113e64:	e3a03001 	mov	r3, #1
  113e68:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113e6c:	e3a03001 	mov	r3, #1
  113e70:	e54b3006 	strb	r3, [fp, #-6]
  113e74:	ea00000e 	b	113eb4 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113e78:	e3a03016 	mov	r3, #22
  113e7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e84:	e6ef2073 	uxtb	r2, r3
  113e88:	e51b300c 	ldr	r3, [fp, #-12]
  113e8c:	e5c32010 	strb	r2, [r3, #16]
  113e90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e94:	e3530000 	cmp	r3, #0
  113e98:	0a000003 	beq	113eac <lwip_shutdown+0x168>
  113e9c:	eb00940a 	bl	138ecc <__errno_location>
  113ea0:	e1a02000 	mov	r2, r0
  113ea4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ea8:	e5823000 	str	r3, [r2]
    return -1;
  113eac:	e3e03000 	mvn	r3, #0
  113eb0:	ea00001c 	b	113f28 <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113eb4:	e51b300c 	ldr	r3, [fp, #-12]
  113eb8:	e5933000 	ldr	r3, [r3]
  113ebc:	e55b2006 	ldrb	r2, [fp, #-6]
  113ec0:	e55b1005 	ldrb	r1, [fp, #-5]
  113ec4:	e1a00003 	mov	r0, r3
  113ec8:	ebffe0c3 	bl	10c1dc <netconn_shutdown>
  113ecc:	e1a03000 	mov	r3, r0
  113ed0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113ed4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113ed8:	e1a00003 	mov	r0, r3
  113edc:	ebffefe3 	bl	10fe70 <err_to_errno>
  113ee0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113ee4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ee8:	e6ef2073 	uxtb	r2, r3
  113eec:	e51b300c 	ldr	r3, [fp, #-12]
  113ef0:	e5c32010 	strb	r2, [r3, #16]
  113ef4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ef8:	e3530000 	cmp	r3, #0
  113efc:	0a000003 	beq	113f10 <lwip_shutdown+0x1cc>
  113f00:	eb0093f1 	bl	138ecc <__errno_location>
  113f04:	e1a02000 	mov	r2, r0
  113f08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f0c:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113f10:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113f14:	e3530000 	cmp	r3, #0
  113f18:	1a000001 	bne	113f24 <lwip_shutdown+0x1e0>
  113f1c:	e3a03000 	mov	r3, #0
  113f20:	ea000000 	b	113f28 <lwip_shutdown+0x1e4>
  113f24:	e3e03000 	mvn	r3, #0
}
  113f28:	e1a00003 	mov	r0, r3
  113f2c:	e24bd004 	sub	sp, fp, #4
  113f30:	e8bd8800 	pop	{fp, pc}

00113f34 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113f34:	e92d4810 	push	{r4, fp, lr}
  113f38:	e28db008 	add	fp, sp, #8
  113f3c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113f40:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113f44:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113f48:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113f4c:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113f50:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113f54:	ebfff3ed 	bl	110f10 <get_socket>
  113f58:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113f5c:	e51b3010 	ldr	r3, [fp, #-16]
  113f60:	e3530000 	cmp	r3, #0
  113f64:	1a000001 	bne	113f70 <lwip_getaddrname+0x3c>
    return -1;
  113f68:	e3e03000 	mvn	r3, #0
  113f6c:	ea00004d 	b	1140a8 <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113f70:	e51b3010 	ldr	r3, [fp, #-16]
  113f74:	e5930000 	ldr	r0, [r3]
  113f78:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113f7c:	e24b2032 	sub	r2, fp, #50	; 0x32
  113f80:	e24b1030 	sub	r1, fp, #48	; 0x30
  113f84:	ebffdd45 	bl	10b4a0 <netconn_getaddr>
  113f88:	e1a03000 	mov	r3, r0
  113f8c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113f90:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113f94:	e3530000 	cmp	r3, #0
  113f98:	0a000010 	beq	113fe0 <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113f9c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113fa0:	e1a00003 	mov	r0, r3
  113fa4:	ebffefb1 	bl	10fe70 <err_to_errno>
  113fa8:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113fac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fb0:	e6ef2073 	uxtb	r2, r3
  113fb4:	e51b3010 	ldr	r3, [fp, #-16]
  113fb8:	e5c32010 	strb	r2, [r3, #16]
  113fbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fc0:	e3530000 	cmp	r3, #0
  113fc4:	0a000003 	beq	113fd8 <lwip_getaddrname+0xa4>
  113fc8:	eb0093bf 	bl	138ecc <__errno_location>
  113fcc:	e1a02000 	mov	r2, r0
  113fd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fd4:	e5823000 	str	r3, [r2]
    return -1;
  113fd8:	e3e03000 	mvn	r3, #0
  113fdc:	ea000031 	b	1140a8 <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113fe0:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113fe4:	e3a02010 	mov	r2, #16
  113fe8:	e5c32000 	strb	r2, [r3]
  113fec:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113ff0:	e3a02002 	mov	r2, #2
  113ff4:	e5c32001 	strb	r2, [r3, #1]
  113ff8:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113ffc:	e24b402c 	sub	r4, fp, #44	; 0x2c
  114000:	e1a00003 	mov	r0, r3
  114004:	eb00096e 	bl	1165c4 <lwip_htons>
  114008:	e1a03000 	mov	r3, r0
  11400c:	e1c430b2 	strh	r3, [r4, #2]
  114010:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114014:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  114018:	e5832004 	str	r2, [r3, #4]
  11401c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114020:	e2833008 	add	r3, r3, #8
  114024:	e3a02008 	mov	r2, #8
  114028:	e3a01000 	mov	r1, #0
  11402c:	e1a00003 	mov	r0, r3
  114030:	eb00b48b 	bl	141264 <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  114034:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114038:	e5933000 	ldr	r3, [r3]
  11403c:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  114040:	e1530002 	cmp	r3, r2
  114044:	9a000003 	bls	114058 <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  114048:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  11404c:	e1a02003 	mov	r2, r3
  114050:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114054:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  114058:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  11405c:	e5932000 	ldr	r2, [r3]
  114060:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114064:	e1a01003 	mov	r1, r3
  114068:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  11406c:	eb00b344 	bl	140d84 <memcpy>

  sock_set_errno(sock, 0);
  114070:	e3a03000 	mov	r3, #0
  114074:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11407c:	e6ef2073 	uxtb	r2, r3
  114080:	e51b3010 	ldr	r3, [fp, #-16]
  114084:	e5c32010 	strb	r2, [r3, #16]
  114088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11408c:	e3530000 	cmp	r3, #0
  114090:	0a000003 	beq	1140a4 <lwip_getaddrname+0x170>
  114094:	eb00938c 	bl	138ecc <__errno_location>
  114098:	e1a02000 	mov	r2, r0
  11409c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1140a0:	e5823000 	str	r3, [r2]
  return 0;
  1140a4:	e3a03000 	mov	r3, #0
}
  1140a8:	e1a00003 	mov	r0, r3
  1140ac:	e24bd008 	sub	sp, fp, #8
  1140b0:	e8bd8810 	pop	{r4, fp, pc}

001140b4 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  1140b4:	e92d4800 	push	{fp, lr}
  1140b8:	e28db004 	add	fp, sp, #4
  1140bc:	e24dd010 	sub	sp, sp, #16
  1140c0:	e50b0008 	str	r0, [fp, #-8]
  1140c4:	e50b100c 	str	r1, [fp, #-12]
  1140c8:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  1140cc:	e3a03000 	mov	r3, #0
  1140d0:	e51b2010 	ldr	r2, [fp, #-16]
  1140d4:	e51b100c 	ldr	r1, [fp, #-12]
  1140d8:	e51b0008 	ldr	r0, [fp, #-8]
  1140dc:	ebffff94 	bl	113f34 <lwip_getaddrname>
  1140e0:	e1a03000 	mov	r3, r0
}
  1140e4:	e1a00003 	mov	r0, r3
  1140e8:	e24bd004 	sub	sp, fp, #4
  1140ec:	e8bd8800 	pop	{fp, pc}

001140f0 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  1140f0:	e92d4800 	push	{fp, lr}
  1140f4:	e28db004 	add	fp, sp, #4
  1140f8:	e24dd010 	sub	sp, sp, #16
  1140fc:	e50b0008 	str	r0, [fp, #-8]
  114100:	e50b100c 	str	r1, [fp, #-12]
  114104:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  114108:	e3a03001 	mov	r3, #1
  11410c:	e51b2010 	ldr	r2, [fp, #-16]
  114110:	e51b100c 	ldr	r1, [fp, #-12]
  114114:	e51b0008 	ldr	r0, [fp, #-8]
  114118:	ebffff85 	bl	113f34 <lwip_getaddrname>
  11411c:	e1a03000 	mov	r3, r0
}
  114120:	e1a00003 	mov	r0, r3
  114124:	e24bd004 	sub	sp, fp, #4
  114128:	e8bd8800 	pop	{fp, pc}

0011412c <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  11412c:	e92d4800 	push	{fp, lr}
  114130:	e28db004 	add	fp, sp, #4
  114134:	e24dd028 	sub	sp, sp, #40	; 0x28
  114138:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11413c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114140:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114144:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  114148:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11414c:	ebfff36f 	bl	110f10 <get_socket>
  114150:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114154:	e51b3008 	ldr	r3, [fp, #-8]
  114158:	e3530000 	cmp	r3, #0
  11415c:	1a000001 	bne	114168 <lwip_getsockopt+0x3c>
    return -1;
  114160:	e3e03000 	mvn	r3, #0
  114164:	ea000036 	b	114244 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  114168:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11416c:	e3530000 	cmp	r3, #0
  114170:	0a000002 	beq	114180 <lwip_getsockopt+0x54>
  114174:	e59b3004 	ldr	r3, [fp, #4]
  114178:	e3530000 	cmp	r3, #0
  11417c:	1a00000e 	bne	1141bc <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  114180:	e3a0300e 	mov	r3, #14
  114184:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11418c:	e6ef2073 	uxtb	r2, r3
  114190:	e51b3008 	ldr	r3, [fp, #-8]
  114194:	e5c32010 	strb	r2, [r3, #16]
  114198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11419c:	e3530000 	cmp	r3, #0
  1141a0:	0a000003 	beq	1141b4 <lwip_getsockopt+0x88>
  1141a4:	eb009348 	bl	138ecc <__errno_location>
  1141a8:	e1a02000 	mov	r2, r0
  1141ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1141b0:	e5823000 	str	r3, [r2]
    return -1;
  1141b4:	e3e03000 	mvn	r3, #0
  1141b8:	ea000021 	b	114244 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  1141bc:	e30f0614 	movw	r0, #62996	; 0xf614
  1141c0:	e3400014 	movt	r0, #20
  1141c4:	ebffd9d6 	bl	10a924 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  1141c8:	e59b3004 	ldr	r3, [fp, #4]
  1141cc:	e58d3000 	str	r3, [sp]
  1141d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1141d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1141d8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1141dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1141e0:	eb00001a 	bl	114250 <lwip_getsockopt_impl>
  1141e4:	e1a03000 	mov	r3, r0
  1141e8:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  1141ec:	e30f0614 	movw	r0, #62996	; 0xf614
  1141f0:	e3400014 	movt	r0, #20
  1141f4:	ebffd9d6 	bl	10a954 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  1141f8:	e55b3009 	ldrb	r3, [fp, #-9]
  1141fc:	e50b3010 	str	r3, [fp, #-16]
  114200:	e51b3010 	ldr	r3, [fp, #-16]
  114204:	e6ef2073 	uxtb	r2, r3
  114208:	e51b3008 	ldr	r3, [fp, #-8]
  11420c:	e5c32010 	strb	r2, [r3, #16]
  114210:	e51b3010 	ldr	r3, [fp, #-16]
  114214:	e3530000 	cmp	r3, #0
  114218:	0a000003 	beq	11422c <lwip_getsockopt+0x100>
  11421c:	eb00932a 	bl	138ecc <__errno_location>
  114220:	e1a02000 	mov	r2, r0
  114224:	e51b3010 	ldr	r3, [fp, #-16]
  114228:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  11422c:	e55b3009 	ldrb	r3, [fp, #-9]
  114230:	e3530000 	cmp	r3, #0
  114234:	0a000001 	beq	114240 <lwip_getsockopt+0x114>
  114238:	e3e03000 	mvn	r3, #0
  11423c:	ea000000 	b	114244 <lwip_getsockopt+0x118>
  114240:	e3a03000 	mov	r3, #0
}
  114244:	e1a00003 	mov	r0, r3
  114248:	e24bd004 	sub	sp, fp, #4
  11424c:	e8bd8800 	pop	{fp, pc}

00114250 <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  114250:	e92d4800 	push	{fp, lr}
  114254:	e28db004 	add	fp, sp, #4
  114258:	e24dd028 	sub	sp, sp, #40	; 0x28
  11425c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114260:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114264:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114268:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  11426c:	e3a03000 	mov	r3, #0
  114270:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114274:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114278:	ebfff349 	bl	110fa4 <tryget_socket>
  11427c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114280:	e51b300c 	ldr	r3, [fp, #-12]
  114284:	e3530000 	cmp	r3, #0
  114288:	1a000001 	bne	114294 <lwip_getsockopt_impl+0x44>
    return EBADF;
  11428c:	e3a03009 	mov	r3, #9
  114290:	ea00026a 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  114294:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114298:	e3530006 	cmp	r3, #6
  11429c:	0a0001fb 	beq	114a90 <lwip_getsockopt_impl+0x840>
  1142a0:	e3530006 	cmp	r3, #6
  1142a4:	ca000002 	bgt	1142b4 <lwip_getsockopt_impl+0x64>
  1142a8:	e3530000 	cmp	r3, #0
  1142ac:	0a000155 	beq	114808 <lwip_getsockopt_impl+0x5b8>
  1142b0:	ea00025e 	b	114c30 <lwip_getsockopt_impl+0x9e0>
  1142b4:	e35300ff 	cmp	r3, #255	; 0xff
  1142b8:	0a000258 	beq	114c20 <lwip_getsockopt_impl+0x9d0>
  1142bc:	e3002fff 	movw	r2, #4095	; 0xfff
  1142c0:	e1530002 	cmp	r3, r2
  1142c4:	1a000259 	bne	114c30 <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  1142c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1142cc:	e3012002 	movw	r2, #4098	; 0x1002
  1142d0:	e1530002 	cmp	r3, r2
  1142d4:	0a000114 	beq	11472c <lwip_getsockopt_impl+0x4dc>
  1142d8:	e3012002 	movw	r2, #4098	; 0x1002
  1142dc:	e1530002 	cmp	r3, r2
  1142e0:	ca00000b 	bgt	114314 <lwip_getsockopt_impl+0xc4>
  1142e4:	e3530004 	cmp	r3, #4
  1142e8:	0a000049 	beq	114414 <lwip_getsockopt_impl+0x1c4>
  1142ec:	e3530004 	cmp	r3, #4
  1142f0:	ca000002 	bgt	114300 <lwip_getsockopt_impl+0xb0>
  1142f4:	e3530002 	cmp	r3, #2
  1142f8:	0a000019 	beq	114364 <lwip_getsockopt_impl+0x114>
  1142fc:	ea00013d 	b	1147f8 <lwip_getsockopt_impl+0x5a8>
  114300:	e3530008 	cmp	r3, #8
  114304:	0a000042 	beq	114414 <lwip_getsockopt_impl+0x1c4>
  114308:	e3530020 	cmp	r3, #32
  11430c:	0a000040 	beq	114414 <lwip_getsockopt_impl+0x1c4>
  114310:	ea000138 	b	1147f8 <lwip_getsockopt_impl+0x5a8>
  114314:	e3012007 	movw	r2, #4103	; 0x1007
  114318:	e1530002 	cmp	r3, r2
  11431c:	0a000082 	beq	11452c <lwip_getsockopt_impl+0x2dc>
  114320:	e3012007 	movw	r2, #4103	; 0x1007
  114324:	e1530002 	cmp	r3, r2
  114328:	ca000006 	bgt	114348 <lwip_getsockopt_impl+0xf8>
  11432c:	e3012005 	movw	r2, #4101	; 0x1005
  114330:	e1530002 	cmp	r3, r2
  114334:	0a0000ae 	beq	1145f4 <lwip_getsockopt_impl+0x3a4>
  114338:	e3012006 	movw	r2, #4102	; 0x1006
  11433c:	e1530002 	cmp	r3, r2
  114340:	0a0000d2 	beq	114690 <lwip_getsockopt_impl+0x440>
  114344:	ea00012b 	b	1147f8 <lwip_getsockopt_impl+0x5a8>
  114348:	e3012008 	movw	r2, #4104	; 0x1008
  11434c:	e1530002 	cmp	r3, r2
  114350:	0a00004a 	beq	114480 <lwip_getsockopt_impl+0x230>
  114354:	e301200a 	movw	r2, #4106	; 0x100a
  114358:	e1530002 	cmp	r3, r2
  11435c:	0a000104 	beq	114774 <lwip_getsockopt_impl+0x524>
  114360:	ea000124 	b	1147f8 <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114364:	e59b3004 	ldr	r3, [fp, #4]
  114368:	e5933000 	ldr	r3, [r3]
  11436c:	e3530003 	cmp	r3, #3
  114370:	8a000001 	bhi	11437c <lwip_getsockopt_impl+0x12c>
  114374:	e3a03016 	mov	r3, #22
  114378:	ea000230 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  11437c:	e51b300c 	ldr	r3, [fp, #-12]
  114380:	e5933000 	ldr	r3, [r3]
  114384:	e3530000 	cmp	r3, #0
  114388:	0a000004 	beq	1143a0 <lwip_getsockopt_impl+0x150>
  11438c:	e51b300c 	ldr	r3, [fp, #-12]
  114390:	e5933000 	ldr	r3, [r3]
  114394:	e5933008 	ldr	r3, [r3, #8]
  114398:	e3530000 	cmp	r3, #0
  11439c:	1a000001 	bne	1143a8 <lwip_getsockopt_impl+0x158>
  1143a0:	e3a03016 	mov	r3, #22
  1143a4:	ea000225 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  1143a8:	e51b300c 	ldr	r3, [fp, #-12]
  1143ac:	e5933000 	ldr	r3, [r3]
  1143b0:	e5933000 	ldr	r3, [r3]
  1143b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1143b8:	e3530010 	cmp	r3, #16
  1143bc:	0a000001 	beq	1143c8 <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  1143c0:	e3a0305c 	mov	r3, #92	; 0x5c
  1143c4:	ea00021d 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  1143c8:	e51b300c 	ldr	r3, [fp, #-12]
  1143cc:	e5933000 	ldr	r3, [r3]
  1143d0:	e5933008 	ldr	r3, [r3, #8]
  1143d4:	e3530000 	cmp	r3, #0
  1143d8:	0a000009 	beq	114404 <lwip_getsockopt_impl+0x1b4>
  1143dc:	e51b300c 	ldr	r3, [fp, #-12]
  1143e0:	e5933000 	ldr	r3, [r3]
  1143e4:	e5933008 	ldr	r3, [r3, #8]
  1143e8:	e5933014 	ldr	r3, [r3, #20]
  1143ec:	e3530001 	cmp	r3, #1
  1143f0:	1a000003 	bne	114404 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  1143f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1143f8:	e3a02001 	mov	r2, #1
  1143fc:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  114400:	ea0000ff 	b	114804 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  114404:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114408:	e3a02000 	mov	r2, #0
  11440c:	e5832000 	str	r2, [r3]
      break;
  114410:	ea0000fb 	b	114804 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114414:	e59b3004 	ldr	r3, [fp, #4]
  114418:	e5933000 	ldr	r3, [r3]
  11441c:	e3530003 	cmp	r3, #3
  114420:	8a000001 	bhi	11442c <lwip_getsockopt_impl+0x1dc>
  114424:	e3a03016 	mov	r3, #22
  114428:	ea000204 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  11442c:	e51b300c 	ldr	r3, [fp, #-12]
  114430:	e5933000 	ldr	r3, [r3]
  114434:	e3530000 	cmp	r3, #0
  114438:	0a000004 	beq	114450 <lwip_getsockopt_impl+0x200>
  11443c:	e51b300c 	ldr	r3, [fp, #-12]
  114440:	e5933000 	ldr	r3, [r3]
  114444:	e5933008 	ldr	r3, [r3, #8]
  114448:	e3530000 	cmp	r3, #0
  11444c:	1a000001 	bne	114458 <lwip_getsockopt_impl+0x208>
  114450:	e3a03016 	mov	r3, #22
  114454:	ea0001f9 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  114458:	e51b300c 	ldr	r3, [fp, #-12]
  11445c:	e5933000 	ldr	r3, [r3]
  114460:	e5933008 	ldr	r3, [r3, #8]
  114464:	e5d33008 	ldrb	r3, [r3, #8]
  114468:	e1a02003 	mov	r2, r3
  11446c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114470:	e0022003 	and	r2, r2, r3
  114474:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114478:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  11447c:	ea0000e0 	b	114804 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114480:	e59b3004 	ldr	r3, [fp, #4]
  114484:	e5933000 	ldr	r3, [r3]
  114488:	e3530003 	cmp	r3, #3
  11448c:	8a000001 	bhi	114498 <lwip_getsockopt_impl+0x248>
  114490:	e3a03016 	mov	r3, #22
  114494:	ea0001e9 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114498:	e51b300c 	ldr	r3, [fp, #-12]
  11449c:	e5933000 	ldr	r3, [r3]
  1144a0:	e3530000 	cmp	r3, #0
  1144a4:	1a000001 	bne	1144b0 <lwip_getsockopt_impl+0x260>
  1144a8:	e3a03016 	mov	r3, #22
  1144ac:	ea0001e3 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  1144b0:	e51b300c 	ldr	r3, [fp, #-12]
  1144b4:	e5933000 	ldr	r3, [r3]
  1144b8:	e5933000 	ldr	r3, [r3]
  1144bc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1144c0:	e3530020 	cmp	r3, #32
  1144c4:	0a00000c 	beq	1144fc <lwip_getsockopt_impl+0x2ac>
  1144c8:	e3530040 	cmp	r3, #64	; 0x40
  1144cc:	0a000002 	beq	1144dc <lwip_getsockopt_impl+0x28c>
  1144d0:	e3530010 	cmp	r3, #16
  1144d4:	0a000004 	beq	1144ec <lwip_getsockopt_impl+0x29c>
  1144d8:	ea00000b 	b	11450c <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  1144dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144e0:	e3a02003 	mov	r2, #3
  1144e4:	e5832000 	str	r2, [r3]
        break;
  1144e8:	ea00000e 	b	114528 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  1144ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144f0:	e3a02001 	mov	r2, #1
  1144f4:	e5832000 	str	r2, [r3]
        break;
  1144f8:	ea00000a 	b	114528 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  1144fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114500:	e3a02002 	mov	r2, #2
  114504:	e5832000 	str	r2, [r3]
        break;
  114508:	ea000006 	b	114528 <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  11450c:	e51b300c 	ldr	r3, [fp, #-12]
  114510:	e5933000 	ldr	r3, [r3]
  114514:	e5933000 	ldr	r3, [r3]
  114518:	e1a02003 	mov	r2, r3
  11451c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114520:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  114524:	ea0000b6 	b	114804 <lwip_getsockopt_impl+0x5b4>
  114528:	ea0000b5 	b	114804 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  11452c:	e59b3004 	ldr	r3, [fp, #4]
  114530:	e5933000 	ldr	r3, [r3]
  114534:	e3530003 	cmp	r3, #3
  114538:	8a000001 	bhi	114544 <lwip_getsockopt_impl+0x2f4>
  11453c:	e3a03016 	mov	r3, #22
  114540:	ea0001be 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  114544:	e51b300c 	ldr	r3, [fp, #-12]
  114548:	e5d33010 	ldrb	r3, [r3, #16]
  11454c:	e3530000 	cmp	r3, #0
  114550:	0a000003 	beq	114564 <lwip_getsockopt_impl+0x314>
  114554:	e51b300c 	ldr	r3, [fp, #-12]
  114558:	e5d33010 	ldrb	r3, [r3, #16]
  11455c:	e3530073 	cmp	r3, #115	; 0x73
  114560:	1a000014 	bne	1145b8 <lwip_getsockopt_impl+0x368>
  114564:	e51b300c 	ldr	r3, [fp, #-12]
  114568:	e5933000 	ldr	r3, [r3]
  11456c:	e3530000 	cmp	r3, #0
  114570:	0a000010 	beq	1145b8 <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  114574:	e51b300c 	ldr	r3, [fp, #-12]
  114578:	e5933000 	ldr	r3, [r3]
  11457c:	e1d330dc 	ldrsb	r3, [r3, #12]
  114580:	e1a00003 	mov	r0, r3
  114584:	ebffee39 	bl	10fe70 <err_to_errno>
  114588:	e50b0010 	str	r0, [fp, #-16]
  11458c:	e51b3010 	ldr	r3, [fp, #-16]
  114590:	e6ef2073 	uxtb	r2, r3
  114594:	e51b300c 	ldr	r3, [fp, #-12]
  114598:	e5c32010 	strb	r2, [r3, #16]
  11459c:	e51b3010 	ldr	r3, [fp, #-16]
  1145a0:	e3530000 	cmp	r3, #0
  1145a4:	0a000003 	beq	1145b8 <lwip_getsockopt_impl+0x368>
  1145a8:	eb009247 	bl	138ecc <__errno_location>
  1145ac:	e1a02000 	mov	r2, r0
  1145b0:	e51b3010 	ldr	r3, [fp, #-16]
  1145b4:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  1145b8:	e51b300c 	ldr	r3, [fp, #-12]
  1145bc:	e5d33010 	ldrb	r3, [r3, #16]
  1145c0:	e35300ff 	cmp	r3, #255	; 0xff
  1145c4:	0a000003 	beq	1145d8 <lwip_getsockopt_impl+0x388>
  1145c8:	e51b300c 	ldr	r3, [fp, #-12]
  1145cc:	e5d33010 	ldrb	r3, [r3, #16]
  1145d0:	e1a02003 	mov	r2, r3
  1145d4:	ea000000 	b	1145dc <lwip_getsockopt_impl+0x38c>
  1145d8:	e3e02000 	mvn	r2, #0
  1145dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145e0:	e5832000 	str	r2, [r3]
      sock->err = 0;
  1145e4:	e51b300c 	ldr	r3, [fp, #-12]
  1145e8:	e3a02000 	mov	r2, #0
  1145ec:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  1145f0:	ea000083 	b	114804 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1145f4:	e59b3004 	ldr	r3, [fp, #4]
  1145f8:	e5933000 	ldr	r3, [r3]
  1145fc:	e353000f 	cmp	r3, #15
  114600:	8a000001 	bhi	11460c <lwip_getsockopt_impl+0x3bc>
  114604:	e3a03016 	mov	r3, #22
  114608:	ea00018c 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  11460c:	e51b300c 	ldr	r3, [fp, #-12]
  114610:	e5933000 	ldr	r3, [r3]
  114614:	e3530000 	cmp	r3, #0
  114618:	1a000001 	bne	114624 <lwip_getsockopt_impl+0x3d4>
  11461c:	e3a03016 	mov	r3, #22
  114620:	ea000186 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  114624:	e51b300c 	ldr	r3, [fp, #-12]
  114628:	e5933000 	ldr	r3, [r3]
  11462c:	e5933020 	ldr	r3, [r3, #32]
  114630:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114634:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  114638:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11463c:	e3413062 	movt	r3, #4194	; 0x1062
  114640:	e0832392 	umull	r2, r3, r2, r3
  114644:	e1a03323 	lsr	r3, r3, #6
  114648:	e1a02003 	mov	r2, r3
  11464c:	e3a03000 	mov	r3, #0
  114650:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114654:	e1c120f0 	strd	r2, [r1]
  114658:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11465c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114660:	e3413062 	movt	r3, #4194	; 0x1062
  114664:	e0832391 	umull	r2, r3, r1, r3
  114668:	e1a03323 	lsr	r3, r3, #6
  11466c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114670:	e0030392 	mul	r3, r2, r3
  114674:	e0413003 	sub	r3, r1, r3
  114678:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11467c:	e0030392 	mul	r3, r2, r3
  114680:	e1a02003 	mov	r2, r3
  114684:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114688:	e5832008 	str	r2, [r3, #8]
      break;
  11468c:	ea00005c 	b	114804 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114690:	e59b3004 	ldr	r3, [fp, #4]
  114694:	e5933000 	ldr	r3, [r3]
  114698:	e353000f 	cmp	r3, #15
  11469c:	8a000001 	bhi	1146a8 <lwip_getsockopt_impl+0x458>
  1146a0:	e3a03016 	mov	r3, #22
  1146a4:	ea000165 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  1146a8:	e51b300c 	ldr	r3, [fp, #-12]
  1146ac:	e5933000 	ldr	r3, [r3]
  1146b0:	e3530000 	cmp	r3, #0
  1146b4:	1a000001 	bne	1146c0 <lwip_getsockopt_impl+0x470>
  1146b8:	e3a03016 	mov	r3, #22
  1146bc:	ea00015f 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  1146c0:	e51b300c 	ldr	r3, [fp, #-12]
  1146c4:	e5933000 	ldr	r3, [r3]
  1146c8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1146cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1146d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1146d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1146d8:	e3413062 	movt	r3, #4194	; 0x1062
  1146dc:	e0832392 	umull	r2, r3, r2, r3
  1146e0:	e1a03323 	lsr	r3, r3, #6
  1146e4:	e1a02003 	mov	r2, r3
  1146e8:	e3a03000 	mov	r3, #0
  1146ec:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1146f0:	e1c120f0 	strd	r2, [r1]
  1146f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1146f8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1146fc:	e3413062 	movt	r3, #4194	; 0x1062
  114700:	e0832391 	umull	r2, r3, r1, r3
  114704:	e1a03323 	lsr	r3, r3, #6
  114708:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11470c:	e0030392 	mul	r3, r2, r3
  114710:	e0413003 	sub	r3, r1, r3
  114714:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114718:	e0030392 	mul	r3, r2, r3
  11471c:	e1a02003 	mov	r2, r3
  114720:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114724:	e5832008 	str	r2, [r3, #8]
      break;
  114728:	ea000035 	b	114804 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  11472c:	e59b3004 	ldr	r3, [fp, #4]
  114730:	e5933000 	ldr	r3, [r3]
  114734:	e3530003 	cmp	r3, #3
  114738:	8a000001 	bhi	114744 <lwip_getsockopt_impl+0x4f4>
  11473c:	e3a03016 	mov	r3, #22
  114740:	ea00013e 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114744:	e51b300c 	ldr	r3, [fp, #-12]
  114748:	e5933000 	ldr	r3, [r3]
  11474c:	e3530000 	cmp	r3, #0
  114750:	1a000001 	bne	11475c <lwip_getsockopt_impl+0x50c>
  114754:	e3a03016 	mov	r3, #22
  114758:	ea000138 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  11475c:	e51b300c 	ldr	r3, [fp, #-12]
  114760:	e5933000 	ldr	r3, [r3]
  114764:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  114768:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11476c:	e5832000 	str	r2, [r3]
      break;
  114770:	ea000023 	b	114804 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  114774:	e59b3004 	ldr	r3, [fp, #4]
  114778:	e5933000 	ldr	r3, [r3]
  11477c:	e3530003 	cmp	r3, #3
  114780:	8a000001 	bhi	11478c <lwip_getsockopt_impl+0x53c>
  114784:	e3a03016 	mov	r3, #22
  114788:	ea00012c 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  11478c:	e51b300c 	ldr	r3, [fp, #-12]
  114790:	e5933000 	ldr	r3, [r3]
  114794:	e3530000 	cmp	r3, #0
  114798:	0a000004 	beq	1147b0 <lwip_getsockopt_impl+0x560>
  11479c:	e51b300c 	ldr	r3, [fp, #-12]
  1147a0:	e5933000 	ldr	r3, [r3]
  1147a4:	e5933008 	ldr	r3, [r3, #8]
  1147a8:	e3530000 	cmp	r3, #0
  1147ac:	1a000001 	bne	1147b8 <lwip_getsockopt_impl+0x568>
  1147b0:	e3a03016 	mov	r3, #22
  1147b4:	ea000121 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  1147b8:	e51b300c 	ldr	r3, [fp, #-12]
  1147bc:	e5933000 	ldr	r3, [r3]
  1147c0:	e5933000 	ldr	r3, [r3]
  1147c4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1147c8:	e3530020 	cmp	r3, #32
  1147cc:	0a000001 	beq	1147d8 <lwip_getsockopt_impl+0x588>
  1147d0:	e3a0305c 	mov	r3, #92	; 0x5c
  1147d4:	ea000119 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  1147d8:	e51b300c 	ldr	r3, [fp, #-12]
  1147dc:	e5933000 	ldr	r3, [r3]
  1147e0:	e5933008 	ldr	r3, [r3, #8]
  1147e4:	e5d33010 	ldrb	r3, [r3, #16]
  1147e8:	e2032001 	and	r2, r3, #1
  1147ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1147f0:	e5832000 	str	r2, [r3]
      break;
  1147f4:	ea000002 	b	114804 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1147f8:	e3a0305c 	mov	r3, #92	; 0x5c
  1147fc:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114800:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114804:	ea00010c 	b	114c3c <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114808:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11480c:	e2433001 	sub	r3, r3, #1
  114810:	e3530006 	cmp	r3, #6
  114814:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114818:	ea000098 	b	114a80 <lwip_getsockopt_impl+0x830>
  11481c:	0011489c 	.word	0x0011489c
  114820:	00114838 	.word	0x00114838
  114824:	00114a80 	.word	0x00114a80
  114828:	00114a80 	.word	0x00114a80
  11482c:	00114900 	.word	0x00114900
  114830:	00114980 	.word	0x00114980
  114834:	00114a00 	.word	0x00114a00
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114838:	e59b3004 	ldr	r3, [fp, #4]
  11483c:	e5933000 	ldr	r3, [r3]
  114840:	e3530003 	cmp	r3, #3
  114844:	8a000001 	bhi	114850 <lwip_getsockopt_impl+0x600>
  114848:	e3a03016 	mov	r3, #22
  11484c:	ea0000fb 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114850:	e51b300c 	ldr	r3, [fp, #-12]
  114854:	e5933000 	ldr	r3, [r3]
  114858:	e3530000 	cmp	r3, #0
  11485c:	0a000004 	beq	114874 <lwip_getsockopt_impl+0x624>
  114860:	e51b300c 	ldr	r3, [fp, #-12]
  114864:	e5933000 	ldr	r3, [r3]
  114868:	e5933008 	ldr	r3, [r3, #8]
  11486c:	e3530000 	cmp	r3, #0
  114870:	1a000001 	bne	11487c <lwip_getsockopt_impl+0x62c>
  114874:	e3a03016 	mov	r3, #22
  114878:	ea0000f0 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  11487c:	e51b300c 	ldr	r3, [fp, #-12]
  114880:	e5933000 	ldr	r3, [r3]
  114884:	e5933008 	ldr	r3, [r3, #8]
  114888:	e5d3300a 	ldrb	r3, [r3, #10]
  11488c:	e1a02003 	mov	r2, r3
  114890:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114894:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114898:	ea00007b 	b	114a8c <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  11489c:	e59b3004 	ldr	r3, [fp, #4]
  1148a0:	e5933000 	ldr	r3, [r3]
  1148a4:	e3530003 	cmp	r3, #3
  1148a8:	8a000001 	bhi	1148b4 <lwip_getsockopt_impl+0x664>
  1148ac:	e3a03016 	mov	r3, #22
  1148b0:	ea0000e2 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  1148b4:	e51b300c 	ldr	r3, [fp, #-12]
  1148b8:	e5933000 	ldr	r3, [r3]
  1148bc:	e3530000 	cmp	r3, #0
  1148c0:	0a000004 	beq	1148d8 <lwip_getsockopt_impl+0x688>
  1148c4:	e51b300c 	ldr	r3, [fp, #-12]
  1148c8:	e5933000 	ldr	r3, [r3]
  1148cc:	e5933008 	ldr	r3, [r3, #8]
  1148d0:	e3530000 	cmp	r3, #0
  1148d4:	1a000001 	bne	1148e0 <lwip_getsockopt_impl+0x690>
  1148d8:	e3a03016 	mov	r3, #22
  1148dc:	ea0000d7 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  1148e0:	e51b300c 	ldr	r3, [fp, #-12]
  1148e4:	e5933000 	ldr	r3, [r3]
  1148e8:	e5933008 	ldr	r3, [r3, #8]
  1148ec:	e5d33009 	ldrb	r3, [r3, #9]
  1148f0:	e1a02003 	mov	r2, r3
  1148f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148f8:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  1148fc:	ea000062 	b	114a8c <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114900:	e59b3004 	ldr	r3, [fp, #4]
  114904:	e5933000 	ldr	r3, [r3]
  114908:	e3530000 	cmp	r3, #0
  11490c:	1a000001 	bne	114918 <lwip_getsockopt_impl+0x6c8>
  114910:	e3a03016 	mov	r3, #22
  114914:	ea0000c9 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114918:	e51b300c 	ldr	r3, [fp, #-12]
  11491c:	e5933000 	ldr	r3, [r3]
  114920:	e3530000 	cmp	r3, #0
  114924:	0a000004 	beq	11493c <lwip_getsockopt_impl+0x6ec>
  114928:	e51b300c 	ldr	r3, [fp, #-12]
  11492c:	e5933000 	ldr	r3, [r3]
  114930:	e5933008 	ldr	r3, [r3, #8]
  114934:	e3530000 	cmp	r3, #0
  114938:	1a000001 	bne	114944 <lwip_getsockopt_impl+0x6f4>
  11493c:	e3a03016 	mov	r3, #22
  114940:	ea0000be 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114944:	e51b300c 	ldr	r3, [fp, #-12]
  114948:	e5933000 	ldr	r3, [r3]
  11494c:	e5933000 	ldr	r3, [r3]
  114950:	e20330f0 	and	r3, r3, #240	; 0xf0
  114954:	e3530020 	cmp	r3, #32
  114958:	0a000001 	beq	114964 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  11495c:	e3a0305c 	mov	r3, #92	; 0x5c
  114960:	ea0000b6 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  114964:	e51b300c 	ldr	r3, [fp, #-12]
  114968:	e5933000 	ldr	r3, [r3]
  11496c:	e5933008 	ldr	r3, [r3, #8]
  114970:	e5d3201c 	ldrb	r2, [r3, #28]
  114974:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114978:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  11497c:	ea000042 	b	114a8c <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  114980:	e59b3004 	ldr	r3, [fp, #4]
  114984:	e5933000 	ldr	r3, [r3]
  114988:	e3530003 	cmp	r3, #3
  11498c:	8a000001 	bhi	114998 <lwip_getsockopt_impl+0x748>
  114990:	e3a03016 	mov	r3, #22
  114994:	ea0000a9 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114998:	e51b300c 	ldr	r3, [fp, #-12]
  11499c:	e5933000 	ldr	r3, [r3]
  1149a0:	e3530000 	cmp	r3, #0
  1149a4:	0a000004 	beq	1149bc <lwip_getsockopt_impl+0x76c>
  1149a8:	e51b300c 	ldr	r3, [fp, #-12]
  1149ac:	e5933000 	ldr	r3, [r3]
  1149b0:	e5933008 	ldr	r3, [r3, #8]
  1149b4:	e3530000 	cmp	r3, #0
  1149b8:	1a000001 	bne	1149c4 <lwip_getsockopt_impl+0x774>
  1149bc:	e3a03016 	mov	r3, #22
  1149c0:	ea00009e 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  1149c4:	e51b300c 	ldr	r3, [fp, #-12]
  1149c8:	e5933000 	ldr	r3, [r3]
  1149cc:	e5933000 	ldr	r3, [r3]
  1149d0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1149d4:	e3530020 	cmp	r3, #32
  1149d8:	0a000001 	beq	1149e4 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  1149dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1149e0:	ea000096 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  1149e4:	e51b300c 	ldr	r3, [fp, #-12]
  1149e8:	e5933000 	ldr	r3, [r3]
  1149ec:	e5933008 	ldr	r3, [r3, #8]
  1149f0:	e5932018 	ldr	r2, [r3, #24]
  1149f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1149f8:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  1149fc:	ea000022 	b	114a8c <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114a00:	e59b3004 	ldr	r3, [fp, #4]
  114a04:	e5933000 	ldr	r3, [r3]
  114a08:	e3530000 	cmp	r3, #0
  114a0c:	1a000001 	bne	114a18 <lwip_getsockopt_impl+0x7c8>
  114a10:	e3a03016 	mov	r3, #22
  114a14:	ea000089 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114a18:	e51b300c 	ldr	r3, [fp, #-12]
  114a1c:	e5933000 	ldr	r3, [r3]
  114a20:	e3530000 	cmp	r3, #0
  114a24:	0a000004 	beq	114a3c <lwip_getsockopt_impl+0x7ec>
  114a28:	e51b300c 	ldr	r3, [fp, #-12]
  114a2c:	e5933000 	ldr	r3, [r3]
  114a30:	e5933008 	ldr	r3, [r3, #8]
  114a34:	e3530000 	cmp	r3, #0
  114a38:	1a000001 	bne	114a44 <lwip_getsockopt_impl+0x7f4>
  114a3c:	e3a03016 	mov	r3, #22
  114a40:	ea00007e 	b	114c40 <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  114a44:	e51b300c 	ldr	r3, [fp, #-12]
  114a48:	e5933000 	ldr	r3, [r3]
  114a4c:	e5933008 	ldr	r3, [r3, #8]
  114a50:	e5d33010 	ldrb	r3, [r3, #16]
  114a54:	e2033008 	and	r3, r3, #8
  114a58:	e3530000 	cmp	r3, #0
  114a5c:	0a000003 	beq	114a70 <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  114a60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a64:	e3a02001 	mov	r2, #1
  114a68:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  114a6c:	ea000006 	b	114a8c <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  114a70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a74:	e3a02000 	mov	r2, #0
  114a78:	e5c32000 	strb	r2, [r3]
      break;
  114a7c:	ea000002 	b	114a8c <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114a80:	e3a0305c 	mov	r3, #92	; 0x5c
  114a84:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114a88:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114a8c:	ea00006a 	b	114c3c <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  114a90:	e59b3004 	ldr	r3, [fp, #4]
  114a94:	e5933000 	ldr	r3, [r3]
  114a98:	e3530003 	cmp	r3, #3
  114a9c:	8a000001 	bhi	114aa8 <lwip_getsockopt_impl+0x858>
  114aa0:	e3a03016 	mov	r3, #22
  114aa4:	ea000065 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114aa8:	e51b300c 	ldr	r3, [fp, #-12]
  114aac:	e5933000 	ldr	r3, [r3]
  114ab0:	e3530000 	cmp	r3, #0
  114ab4:	0a000004 	beq	114acc <lwip_getsockopt_impl+0x87c>
  114ab8:	e51b300c 	ldr	r3, [fp, #-12]
  114abc:	e5933000 	ldr	r3, [r3]
  114ac0:	e5933008 	ldr	r3, [r3, #8]
  114ac4:	e3530000 	cmp	r3, #0
  114ac8:	1a000001 	bne	114ad4 <lwip_getsockopt_impl+0x884>
  114acc:	e3a03016 	mov	r3, #22
  114ad0:	ea00005a 	b	114c40 <lwip_getsockopt_impl+0x9f0>
  114ad4:	e51b300c 	ldr	r3, [fp, #-12]
  114ad8:	e5933000 	ldr	r3, [r3]
  114adc:	e5933000 	ldr	r3, [r3]
  114ae0:	e20330f0 	and	r3, r3, #240	; 0xf0
  114ae4:	e3530010 	cmp	r3, #16
  114ae8:	0a000001 	beq	114af4 <lwip_getsockopt_impl+0x8a4>
  114aec:	e3a0305c 	mov	r3, #92	; 0x5c
  114af0:	ea000052 	b	114c40 <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  114af4:	e51b300c 	ldr	r3, [fp, #-12]
  114af8:	e5933000 	ldr	r3, [r3]
  114afc:	e5933008 	ldr	r3, [r3, #8]
  114b00:	e5933014 	ldr	r3, [r3, #20]
  114b04:	e3530001 	cmp	r3, #1
  114b08:	1a000001 	bne	114b14 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  114b0c:	e3a03016 	mov	r3, #22
  114b10:	ea00004a 	b	114c40 <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  114b14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b18:	e2433001 	sub	r3, r3, #1
  114b1c:	e3530004 	cmp	r3, #4
  114b20:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114b24:	ea000039 	b	114c10 <lwip_getsockopt_impl+0x9c0>
  114b28:	00114b3c 	.word	0x00114b3c
  114b2c:	00114b70 	.word	0x00114b70
  114b30:	00114b90 	.word	0x00114b90
  114b34:	00114bc0 	.word	0x00114bc0
  114b38:	00114bf0 	.word	0x00114bf0
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  114b3c:	e51b300c 	ldr	r3, [fp, #-12]
  114b40:	e5933000 	ldr	r3, [r3]
  114b44:	e5933008 	ldr	r3, [r3, #8]
  114b48:	e5d3301e 	ldrb	r3, [r3, #30]
  114b4c:	e2033040 	and	r3, r3, #64	; 0x40
  114b50:	e3530000 	cmp	r3, #0
  114b54:	13a03001 	movne	r3, #1
  114b58:	03a03000 	moveq	r3, #0
  114b5c:	e6ef3073 	uxtb	r3, r3
  114b60:	e1a02003 	mov	r2, r3
  114b64:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b68:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  114b6c:	ea00002a 	b	114c1c <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  114b70:	e51b300c 	ldr	r3, [fp, #-12]
  114b74:	e5933000 	ldr	r3, [r3]
  114b78:	e5933008 	ldr	r3, [r3, #8]
  114b7c:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  114b80:	e1a02003 	mov	r2, r3
  114b84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b88:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  114b8c:	ea000022 	b	114c1c <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  114b90:	e51b300c 	ldr	r3, [fp, #-12]
  114b94:	e5933000 	ldr	r3, [r3]
  114b98:	e5933008 	ldr	r3, [r3, #8]
  114b9c:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  114ba0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114ba4:	e3413062 	movt	r3, #4194	; 0x1062
  114ba8:	e0832392 	umull	r2, r3, r2, r3
  114bac:	e1a03323 	lsr	r3, r3, #6
  114bb0:	e1a02003 	mov	r2, r3
  114bb4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bb8:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114bbc:	ea000016 	b	114c1c <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  114bc0:	e51b300c 	ldr	r3, [fp, #-12]
  114bc4:	e5933000 	ldr	r3, [r3]
  114bc8:	e5933008 	ldr	r3, [r3, #8]
  114bcc:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  114bd0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114bd4:	e3413062 	movt	r3, #4194	; 0x1062
  114bd8:	e0832392 	umull	r2, r3, r2, r3
  114bdc:	e1a03323 	lsr	r3, r3, #6
  114be0:	e1a02003 	mov	r2, r3
  114be4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114be8:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114bec:	ea00000a 	b	114c1c <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  114bf0:	e51b300c 	ldr	r3, [fp, #-12]
  114bf4:	e5933000 	ldr	r3, [r3]
  114bf8:	e5933008 	ldr	r3, [r3, #8]
  114bfc:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  114c00:	e1a02003 	mov	r2, r3
  114c04:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c08:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  114c0c:	ea000002 	b	114c1c <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114c10:	e3a0305c 	mov	r3, #92	; 0x5c
  114c14:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114c18:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c1c:	ea000006 	b	114c3c <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114c20:	e3a0305c 	mov	r3, #92	; 0x5c
  114c24:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114c28:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c2c:	ea000002 	b	114c3c <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114c30:	e3a0305c 	mov	r3, #92	; 0x5c
  114c34:	e54b3005 	strb	r3, [fp, #-5]
    break;
  114c38:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  114c3c:	e55b3005 	ldrb	r3, [fp, #-5]
}
  114c40:	e1a00003 	mov	r0, r3
  114c44:	e24bd004 	sub	sp, fp, #4
  114c48:	e8bd8800 	pop	{fp, pc}

00114c4c <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114c4c:	e92d4800 	push	{fp, lr}
  114c50:	e28db004 	add	fp, sp, #4
  114c54:	e24dd028 	sub	sp, sp, #40	; 0x28
  114c58:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114c5c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114c60:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114c64:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  114c68:	e3a03000 	mov	r3, #0
  114c6c:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  114c70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114c74:	ebfff0a5 	bl	110f10 <get_socket>
  114c78:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114c7c:	e51b300c 	ldr	r3, [fp, #-12]
  114c80:	e3530000 	cmp	r3, #0
  114c84:	1a000001 	bne	114c90 <lwip_setsockopt+0x44>
    return -1;
  114c88:	e3e03000 	mvn	r3, #0
  114c8c:	ea000033 	b	114d60 <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  114c90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114c94:	e3530000 	cmp	r3, #0
  114c98:	1a00000e 	bne	114cd8 <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114c9c:	e3a0300e 	mov	r3, #14
  114ca0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114ca4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114ca8:	e6ef2073 	uxtb	r2, r3
  114cac:	e51b300c 	ldr	r3, [fp, #-12]
  114cb0:	e5c32010 	strb	r2, [r3, #16]
  114cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114cb8:	e3530000 	cmp	r3, #0
  114cbc:	0a000003 	beq	114cd0 <lwip_setsockopt+0x84>
  114cc0:	eb009081 	bl	138ecc <__errno_location>
  114cc4:	e1a02000 	mov	r2, r0
  114cc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114ccc:	e5823000 	str	r3, [r2]
    return -1;
  114cd0:	e3e03000 	mvn	r3, #0
  114cd4:	ea000021 	b	114d60 <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114cd8:	e30f0614 	movw	r0, #62996	; 0xf614
  114cdc:	e3400014 	movt	r0, #20
  114ce0:	ebffd70f 	bl	10a924 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  114ce4:	e59b3004 	ldr	r3, [fp, #4]
  114ce8:	e58d3000 	str	r3, [sp]
  114cec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114cf0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  114cf4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  114cf8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114cfc:	eb00001a 	bl	114d6c <lwip_setsockopt_impl>
  114d00:	e1a03000 	mov	r3, r0
  114d04:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  114d08:	e30f0614 	movw	r0, #62996	; 0xf614
  114d0c:	e3400014 	movt	r0, #20
  114d10:	ebffd70f 	bl	10a954 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114d14:	e55b3005 	ldrb	r3, [fp, #-5]
  114d18:	e50b3010 	str	r3, [fp, #-16]
  114d1c:	e51b3010 	ldr	r3, [fp, #-16]
  114d20:	e6ef2073 	uxtb	r2, r3
  114d24:	e51b300c 	ldr	r3, [fp, #-12]
  114d28:	e5c32010 	strb	r2, [r3, #16]
  114d2c:	e51b3010 	ldr	r3, [fp, #-16]
  114d30:	e3530000 	cmp	r3, #0
  114d34:	0a000003 	beq	114d48 <lwip_setsockopt+0xfc>
  114d38:	eb009063 	bl	138ecc <__errno_location>
  114d3c:	e1a02000 	mov	r2, r0
  114d40:	e51b3010 	ldr	r3, [fp, #-16]
  114d44:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114d48:	e55b3005 	ldrb	r3, [fp, #-5]
  114d4c:	e3530000 	cmp	r3, #0
  114d50:	0a000001 	beq	114d5c <lwip_setsockopt+0x110>
  114d54:	e3e03000 	mvn	r3, #0
  114d58:	ea000000 	b	114d60 <lwip_setsockopt+0x114>
  114d5c:	e3a03000 	mov	r3, #0
}
  114d60:	e1a00003 	mov	r0, r3
  114d64:	e24bd004 	sub	sp, fp, #4
  114d68:	e8bd8800 	pop	{fp, pc}

00114d6c <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114d6c:	e92d4800 	push	{fp, lr}
  114d70:	e28db004 	add	fp, sp, #4
  114d74:	e24dd028 	sub	sp, sp, #40	; 0x28
  114d78:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114d7c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114d80:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114d84:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114d88:	e3a03000 	mov	r3, #0
  114d8c:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114d90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114d94:	ebfff082 	bl	110fa4 <tryget_socket>
  114d98:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114d9c:	e51b300c 	ldr	r3, [fp, #-12]
  114da0:	e3530000 	cmp	r3, #0
  114da4:	1a000001 	bne	114db0 <lwip_setsockopt_impl+0x44>
    return EBADF;
  114da8:	e3a03009 	mov	r3, #9
  114dac:	ea000248 	b	1156d4 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114db0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114db4:	e3530006 	cmp	r3, #6
  114db8:	0a0001d3 	beq	11550c <lwip_setsockopt_impl+0x7a0>
  114dbc:	e3530006 	cmp	r3, #6
  114dc0:	ca000002 	bgt	114dd0 <lwip_setsockopt_impl+0x64>
  114dc4:	e3530000 	cmp	r3, #0
  114dc8:	0a0000d2 	beq	115118 <lwip_setsockopt_impl+0x3ac>
  114dcc:	ea00023c 	b	1156c4 <lwip_setsockopt_impl+0x958>
  114dd0:	e35300ff 	cmp	r3, #255	; 0xff
  114dd4:	0a000236 	beq	1156b4 <lwip_setsockopt_impl+0x948>
  114dd8:	e3002fff 	movw	r2, #4095	; 0xfff
  114ddc:	e1530002 	cmp	r3, r2
  114de0:	1a000237 	bne	1156c4 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114de4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114de8:	e3012002 	movw	r2, #4098	; 0x1002
  114dec:	e1530002 	cmp	r3, r2
  114df0:	0a000081 	beq	114ffc <lwip_setsockopt_impl+0x290>
  114df4:	e3012002 	movw	r2, #4098	; 0x1002
  114df8:	e1530002 	cmp	r3, r2
  114dfc:	ca000006 	bgt	114e1c <lwip_setsockopt_impl+0xb0>
  114e00:	e3530008 	cmp	r3, #8
  114e04:	0a00000e 	beq	114e44 <lwip_setsockopt_impl+0xd8>
  114e08:	e3530020 	cmp	r3, #32
  114e0c:	0a00000c 	beq	114e44 <lwip_setsockopt_impl+0xd8>
  114e10:	e3530004 	cmp	r3, #4
  114e14:	0a00000a 	beq	114e44 <lwip_setsockopt_impl+0xd8>
  114e18:	ea0000ba 	b	115108 <lwip_setsockopt_impl+0x39c>
  114e1c:	e3012006 	movw	r2, #4102	; 0x1006
  114e20:	e1530002 	cmp	r3, r2
  114e24:	0a000057 	beq	114f88 <lwip_setsockopt_impl+0x21c>
  114e28:	e301200a 	movw	r2, #4106	; 0x100a
  114e2c:	e1530002 	cmp	r3, r2
  114e30:	0a000082 	beq	115040 <lwip_setsockopt_impl+0x2d4>
  114e34:	e3012005 	movw	r2, #4101	; 0x1005
  114e38:	e1530002 	cmp	r3, r2
  114e3c:	0a000034 	beq	114f14 <lwip_setsockopt_impl+0x1a8>
  114e40:	ea0000b0 	b	115108 <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e44:	e59b3004 	ldr	r3, [fp, #4]
  114e48:	e3530003 	cmp	r3, #3
  114e4c:	8a000001 	bhi	114e58 <lwip_setsockopt_impl+0xec>
  114e50:	e3a03016 	mov	r3, #22
  114e54:	ea00021e 	b	1156d4 <lwip_setsockopt_impl+0x968>
  114e58:	e51b300c 	ldr	r3, [fp, #-12]
  114e5c:	e5933000 	ldr	r3, [r3]
  114e60:	e3530000 	cmp	r3, #0
  114e64:	0a000004 	beq	114e7c <lwip_setsockopt_impl+0x110>
  114e68:	e51b300c 	ldr	r3, [fp, #-12]
  114e6c:	e5933000 	ldr	r3, [r3]
  114e70:	e5933008 	ldr	r3, [r3, #8]
  114e74:	e3530000 	cmp	r3, #0
  114e78:	1a000001 	bne	114e84 <lwip_setsockopt_impl+0x118>
  114e7c:	e3a03016 	mov	r3, #22
  114e80:	ea000213 	b	1156d4 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114e84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e88:	e5933000 	ldr	r3, [r3]
  114e8c:	e3530000 	cmp	r3, #0
  114e90:	0a00000e 	beq	114ed0 <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114e94:	e51b300c 	ldr	r3, [fp, #-12]
  114e98:	e5933000 	ldr	r3, [r3]
  114e9c:	e5933008 	ldr	r3, [r3, #8]
  114ea0:	e5d33008 	ldrb	r3, [r3, #8]
  114ea4:	e6af2073 	sxtb	r2, r3
  114ea8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114eac:	e6af3073 	sxtb	r3, r3
  114eb0:	e1823003 	orr	r3, r2, r3
  114eb4:	e6af2073 	sxtb	r2, r3
  114eb8:	e51b300c 	ldr	r3, [fp, #-12]
  114ebc:	e5933000 	ldr	r3, [r3]
  114ec0:	e5933008 	ldr	r3, [r3, #8]
  114ec4:	e6ef2072 	uxtb	r2, r2
  114ec8:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114ecc:	ea000090 	b	115114 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114ed0:	e51b300c 	ldr	r3, [fp, #-12]
  114ed4:	e5933000 	ldr	r3, [r3]
  114ed8:	e5933008 	ldr	r3, [r3, #8]
  114edc:	e5d33008 	ldrb	r3, [r3, #8]
  114ee0:	e6af2073 	sxtb	r2, r3
  114ee4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114ee8:	e6af3073 	sxtb	r3, r3
  114eec:	e1e03003 	mvn	r3, r3
  114ef0:	e6af3073 	sxtb	r3, r3
  114ef4:	e0033002 	and	r3, r3, r2
  114ef8:	e6af2073 	sxtb	r2, r3
  114efc:	e51b300c 	ldr	r3, [fp, #-12]
  114f00:	e5933000 	ldr	r3, [r3]
  114f04:	e5933008 	ldr	r3, [r3, #8]
  114f08:	e6ef2072 	uxtb	r2, r2
  114f0c:	e5c32008 	strb	r2, [r3, #8]
      break;
  114f10:	ea00007f 	b	115114 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114f14:	e59b3004 	ldr	r3, [fp, #4]
  114f18:	e353000f 	cmp	r3, #15
  114f1c:	8a000001 	bhi	114f28 <lwip_setsockopt_impl+0x1bc>
  114f20:	e3a03016 	mov	r3, #22
  114f24:	ea0001ea 	b	1156d4 <lwip_setsockopt_impl+0x968>
  114f28:	e51b300c 	ldr	r3, [fp, #-12]
  114f2c:	e5933000 	ldr	r3, [r3]
  114f30:	e3530000 	cmp	r3, #0
  114f34:	1a000001 	bne	114f40 <lwip_setsockopt_impl+0x1d4>
  114f38:	e3a03016 	mov	r3, #22
  114f3c:	ea0001e4 	b	1156d4 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114f40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f44:	e1c320d0 	ldrd	r2, [r3]
  114f48:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114f4c:	e0010293 	mul	r1, r3, r2
  114f50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f54:	e5933008 	ldr	r3, [r3, #8]
  114f58:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114f5c:	e2833003 	add	r3, r3, #3
  114f60:	e1a02003 	mov	r2, r3
  114f64:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114f68:	e3413062 	movt	r3, #4194	; 0x1062
  114f6c:	e0832392 	umull	r2, r3, r2, r3
  114f70:	e1a03323 	lsr	r3, r3, #6
  114f74:	e0812003 	add	r2, r1, r3
  114f78:	e51b300c 	ldr	r3, [fp, #-12]
  114f7c:	e5933000 	ldr	r3, [r3]
  114f80:	e5832020 	str	r2, [r3, #32]
      break;
  114f84:	ea000062 	b	115114 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114f88:	e59b3004 	ldr	r3, [fp, #4]
  114f8c:	e353000f 	cmp	r3, #15
  114f90:	8a000001 	bhi	114f9c <lwip_setsockopt_impl+0x230>
  114f94:	e3a03016 	mov	r3, #22
  114f98:	ea0001cd 	b	1156d4 <lwip_setsockopt_impl+0x968>
  114f9c:	e51b300c 	ldr	r3, [fp, #-12]
  114fa0:	e5933000 	ldr	r3, [r3]
  114fa4:	e3530000 	cmp	r3, #0
  114fa8:	1a000001 	bne	114fb4 <lwip_setsockopt_impl+0x248>
  114fac:	e3a03016 	mov	r3, #22
  114fb0:	ea0001c7 	b	1156d4 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114fb4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fb8:	e1c320d0 	ldrd	r2, [r3]
  114fbc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114fc0:	e0010293 	mul	r1, r3, r2
  114fc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fc8:	e5933008 	ldr	r3, [r3, #8]
  114fcc:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114fd0:	e2833003 	add	r3, r3, #3
  114fd4:	e1a02003 	mov	r2, r3
  114fd8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114fdc:	e3413062 	movt	r3, #4194	; 0x1062
  114fe0:	e0832392 	umull	r2, r3, r2, r3
  114fe4:	e1a03323 	lsr	r3, r3, #6
  114fe8:	e0812003 	add	r2, r1, r3
  114fec:	e51b300c 	ldr	r3, [fp, #-12]
  114ff0:	e5933000 	ldr	r3, [r3]
  114ff4:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  114ff8:	ea000045 	b	115114 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  114ffc:	e59b3004 	ldr	r3, [fp, #4]
  115000:	e3530003 	cmp	r3, #3
  115004:	8a000001 	bhi	115010 <lwip_setsockopt_impl+0x2a4>
  115008:	e3a03016 	mov	r3, #22
  11500c:	ea0001b0 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115010:	e51b300c 	ldr	r3, [fp, #-12]
  115014:	e5933000 	ldr	r3, [r3]
  115018:	e3530000 	cmp	r3, #0
  11501c:	1a000001 	bne	115028 <lwip_setsockopt_impl+0x2bc>
  115020:	e3a03016 	mov	r3, #22
  115024:	ea0001aa 	b	1156d4 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  115028:	e51b300c 	ldr	r3, [fp, #-12]
  11502c:	e5933000 	ldr	r3, [r3]
  115030:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115034:	e5922000 	ldr	r2, [r2]
  115038:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  11503c:	ea000034 	b	115114 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  115040:	e59b3004 	ldr	r3, [fp, #4]
  115044:	e3530003 	cmp	r3, #3
  115048:	8a000001 	bhi	115054 <lwip_setsockopt_impl+0x2e8>
  11504c:	e3a03016 	mov	r3, #22
  115050:	ea00019f 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115054:	e51b300c 	ldr	r3, [fp, #-12]
  115058:	e5933000 	ldr	r3, [r3]
  11505c:	e3530000 	cmp	r3, #0
  115060:	0a000004 	beq	115078 <lwip_setsockopt_impl+0x30c>
  115064:	e51b300c 	ldr	r3, [fp, #-12]
  115068:	e5933000 	ldr	r3, [r3]
  11506c:	e5933008 	ldr	r3, [r3, #8]
  115070:	e3530000 	cmp	r3, #0
  115074:	1a000001 	bne	115080 <lwip_setsockopt_impl+0x314>
  115078:	e3a03016 	mov	r3, #22
  11507c:	ea000194 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115080:	e51b300c 	ldr	r3, [fp, #-12]
  115084:	e5933000 	ldr	r3, [r3]
  115088:	e5933000 	ldr	r3, [r3]
  11508c:	e20330f0 	and	r3, r3, #240	; 0xf0
  115090:	e3530020 	cmp	r3, #32
  115094:	0a000001 	beq	1150a0 <lwip_setsockopt_impl+0x334>
  115098:	e3a0305c 	mov	r3, #92	; 0x5c
  11509c:	ea00018c 	b	1156d4 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  1150a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1150a4:	e5933000 	ldr	r3, [r3]
  1150a8:	e3530000 	cmp	r3, #0
  1150ac:	0a00000a 	beq	1150dc <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  1150b0:	e51b300c 	ldr	r3, [fp, #-12]
  1150b4:	e5933000 	ldr	r3, [r3]
  1150b8:	e5933008 	ldr	r3, [r3, #8]
  1150bc:	e5d32010 	ldrb	r2, [r3, #16]
  1150c0:	e51b300c 	ldr	r3, [fp, #-12]
  1150c4:	e5933000 	ldr	r3, [r3]
  1150c8:	e5933008 	ldr	r3, [r3, #8]
  1150cc:	e3822001 	orr	r2, r2, #1
  1150d0:	e6ef2072 	uxtb	r2, r2
  1150d4:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  1150d8:	ea00000d 	b	115114 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  1150dc:	e51b300c 	ldr	r3, [fp, #-12]
  1150e0:	e5933000 	ldr	r3, [r3]
  1150e4:	e5933008 	ldr	r3, [r3, #8]
  1150e8:	e5d32010 	ldrb	r2, [r3, #16]
  1150ec:	e51b300c 	ldr	r3, [fp, #-12]
  1150f0:	e5933000 	ldr	r3, [r3]
  1150f4:	e5933008 	ldr	r3, [r3, #8]
  1150f8:	e3c22001 	bic	r2, r2, #1
  1150fc:	e6ef2072 	uxtb	r2, r2
  115100:	e5c32010 	strb	r2, [r3, #16]
      break;
  115104:	ea000002 	b	115114 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115108:	e3a0305c 	mov	r3, #92	; 0x5c
  11510c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115110:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115114:	ea00016d 	b	1156d0 <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  115118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11511c:	e2433001 	sub	r3, r3, #1
  115120:	e3530006 	cmp	r3, #6
  115124:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115128:	ea0000f2 	b	1154f8 <lwip_setsockopt_impl+0x78c>
  11512c:	001151a8 	.word	0x001151a8
  115130:	00115148 	.word	0x00115148
  115134:	001153d0 	.word	0x001153d0
  115138:	001153d0 	.word	0x001153d0
  11513c:	00115208 	.word	0x00115208
  115140:	00115284 	.word	0x00115284
  115144:	00115308 	.word	0x00115308
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  115148:	e59b3004 	ldr	r3, [fp, #4]
  11514c:	e3530003 	cmp	r3, #3
  115150:	8a000001 	bhi	11515c <lwip_setsockopt_impl+0x3f0>
  115154:	e3a03016 	mov	r3, #22
  115158:	ea00015d 	b	1156d4 <lwip_setsockopt_impl+0x968>
  11515c:	e51b300c 	ldr	r3, [fp, #-12]
  115160:	e5933000 	ldr	r3, [r3]
  115164:	e3530000 	cmp	r3, #0
  115168:	0a000004 	beq	115180 <lwip_setsockopt_impl+0x414>
  11516c:	e51b300c 	ldr	r3, [fp, #-12]
  115170:	e5933000 	ldr	r3, [r3]
  115174:	e5933008 	ldr	r3, [r3, #8]
  115178:	e3530000 	cmp	r3, #0
  11517c:	1a000001 	bne	115188 <lwip_setsockopt_impl+0x41c>
  115180:	e3a03016 	mov	r3, #22
  115184:	ea000152 	b	1156d4 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  115188:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11518c:	e5932000 	ldr	r2, [r3]
  115190:	e51b300c 	ldr	r3, [fp, #-12]
  115194:	e5933000 	ldr	r3, [r3]
  115198:	e5933008 	ldr	r3, [r3, #8]
  11519c:	e6ef2072 	uxtb	r2, r2
  1151a0:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  1151a4:	ea0000d7 	b	115508 <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  1151a8:	e59b3004 	ldr	r3, [fp, #4]
  1151ac:	e3530003 	cmp	r3, #3
  1151b0:	8a000001 	bhi	1151bc <lwip_setsockopt_impl+0x450>
  1151b4:	e3a03016 	mov	r3, #22
  1151b8:	ea000145 	b	1156d4 <lwip_setsockopt_impl+0x968>
  1151bc:	e51b300c 	ldr	r3, [fp, #-12]
  1151c0:	e5933000 	ldr	r3, [r3]
  1151c4:	e3530000 	cmp	r3, #0
  1151c8:	0a000004 	beq	1151e0 <lwip_setsockopt_impl+0x474>
  1151cc:	e51b300c 	ldr	r3, [fp, #-12]
  1151d0:	e5933000 	ldr	r3, [r3]
  1151d4:	e5933008 	ldr	r3, [r3, #8]
  1151d8:	e3530000 	cmp	r3, #0
  1151dc:	1a000001 	bne	1151e8 <lwip_setsockopt_impl+0x47c>
  1151e0:	e3a03016 	mov	r3, #22
  1151e4:	ea00013a 	b	1156d4 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  1151e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1151ec:	e5932000 	ldr	r2, [r3]
  1151f0:	e51b300c 	ldr	r3, [fp, #-12]
  1151f4:	e5933000 	ldr	r3, [r3]
  1151f8:	e5933008 	ldr	r3, [r3, #8]
  1151fc:	e6ef2072 	uxtb	r2, r2
  115200:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  115204:	ea0000bf 	b	115508 <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115208:	e59b3004 	ldr	r3, [fp, #4]
  11520c:	e3530000 	cmp	r3, #0
  115210:	1a000001 	bne	11521c <lwip_setsockopt_impl+0x4b0>
  115214:	e3a03016 	mov	r3, #22
  115218:	ea00012d 	b	1156d4 <lwip_setsockopt_impl+0x968>
  11521c:	e51b300c 	ldr	r3, [fp, #-12]
  115220:	e5933000 	ldr	r3, [r3]
  115224:	e3530000 	cmp	r3, #0
  115228:	0a000004 	beq	115240 <lwip_setsockopt_impl+0x4d4>
  11522c:	e51b300c 	ldr	r3, [fp, #-12]
  115230:	e5933000 	ldr	r3, [r3]
  115234:	e5933008 	ldr	r3, [r3, #8]
  115238:	e3530000 	cmp	r3, #0
  11523c:	1a000001 	bne	115248 <lwip_setsockopt_impl+0x4dc>
  115240:	e3a03016 	mov	r3, #22
  115244:	ea000122 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115248:	e51b300c 	ldr	r3, [fp, #-12]
  11524c:	e5933000 	ldr	r3, [r3]
  115250:	e5933000 	ldr	r3, [r3]
  115254:	e20330f0 	and	r3, r3, #240	; 0xf0
  115258:	e3530020 	cmp	r3, #32
  11525c:	0a000001 	beq	115268 <lwip_setsockopt_impl+0x4fc>
  115260:	e3a0305c 	mov	r3, #92	; 0x5c
  115264:	ea00011a 	b	1156d4 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  115268:	e51b300c 	ldr	r3, [fp, #-12]
  11526c:	e5933000 	ldr	r3, [r3]
  115270:	e5933008 	ldr	r3, [r3, #8]
  115274:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115278:	e5d22000 	ldrb	r2, [r2]
  11527c:	e5c3201c 	strb	r2, [r3, #28]
      break;
  115280:	ea0000a0 	b	115508 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  115284:	e59b3004 	ldr	r3, [fp, #4]
  115288:	e3530003 	cmp	r3, #3
  11528c:	8a000001 	bhi	115298 <lwip_setsockopt_impl+0x52c>
  115290:	e3a03016 	mov	r3, #22
  115294:	ea00010e 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115298:	e51b300c 	ldr	r3, [fp, #-12]
  11529c:	e5933000 	ldr	r3, [r3]
  1152a0:	e3530000 	cmp	r3, #0
  1152a4:	0a000004 	beq	1152bc <lwip_setsockopt_impl+0x550>
  1152a8:	e51b300c 	ldr	r3, [fp, #-12]
  1152ac:	e5933000 	ldr	r3, [r3]
  1152b0:	e5933008 	ldr	r3, [r3, #8]
  1152b4:	e3530000 	cmp	r3, #0
  1152b8:	1a000001 	bne	1152c4 <lwip_setsockopt_impl+0x558>
  1152bc:	e3a03016 	mov	r3, #22
  1152c0:	ea000103 	b	1156d4 <lwip_setsockopt_impl+0x968>
  1152c4:	e51b300c 	ldr	r3, [fp, #-12]
  1152c8:	e5933000 	ldr	r3, [r3]
  1152cc:	e5933000 	ldr	r3, [r3]
  1152d0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1152d4:	e3530020 	cmp	r3, #32
  1152d8:	0a000001 	beq	1152e4 <lwip_setsockopt_impl+0x578>
  1152dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1152e0:	ea0000fb 	b	1156d4 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  1152e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152e8:	e5933000 	ldr	r3, [r3]
  1152ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  1152f0:	e51b300c 	ldr	r3, [fp, #-12]
  1152f4:	e5933000 	ldr	r3, [r3]
  1152f8:	e5933008 	ldr	r3, [r3, #8]
  1152fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115300:	e5832018 	str	r2, [r3, #24]
      }
      break;
  115304:	ea00007f 	b	115508 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115308:	e59b3004 	ldr	r3, [fp, #4]
  11530c:	e3530000 	cmp	r3, #0
  115310:	1a000001 	bne	11531c <lwip_setsockopt_impl+0x5b0>
  115314:	e3a03016 	mov	r3, #22
  115318:	ea0000ed 	b	1156d4 <lwip_setsockopt_impl+0x968>
  11531c:	e51b300c 	ldr	r3, [fp, #-12]
  115320:	e5933000 	ldr	r3, [r3]
  115324:	e3530000 	cmp	r3, #0
  115328:	0a000004 	beq	115340 <lwip_setsockopt_impl+0x5d4>
  11532c:	e51b300c 	ldr	r3, [fp, #-12]
  115330:	e5933000 	ldr	r3, [r3]
  115334:	e5933008 	ldr	r3, [r3, #8]
  115338:	e3530000 	cmp	r3, #0
  11533c:	1a000001 	bne	115348 <lwip_setsockopt_impl+0x5dc>
  115340:	e3a03016 	mov	r3, #22
  115344:	ea0000e2 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115348:	e51b300c 	ldr	r3, [fp, #-12]
  11534c:	e5933000 	ldr	r3, [r3]
  115350:	e5933000 	ldr	r3, [r3]
  115354:	e20330f0 	and	r3, r3, #240	; 0xf0
  115358:	e3530020 	cmp	r3, #32
  11535c:	0a000001 	beq	115368 <lwip_setsockopt_impl+0x5fc>
  115360:	e3a0305c 	mov	r3, #92	; 0x5c
  115364:	ea0000da 	b	1156d4 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  115368:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11536c:	e5d33000 	ldrb	r3, [r3]
  115370:	e3530000 	cmp	r3, #0
  115374:	0a00000a 	beq	1153a4 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  115378:	e51b300c 	ldr	r3, [fp, #-12]
  11537c:	e5933000 	ldr	r3, [r3]
  115380:	e5933008 	ldr	r3, [r3, #8]
  115384:	e5d32010 	ldrb	r2, [r3, #16]
  115388:	e51b300c 	ldr	r3, [fp, #-12]
  11538c:	e5933000 	ldr	r3, [r3]
  115390:	e5933008 	ldr	r3, [r3, #8]
  115394:	e3822008 	orr	r2, r2, #8
  115398:	e6ef2072 	uxtb	r2, r2
  11539c:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  1153a0:	ea000058 	b	115508 <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  1153a4:	e51b300c 	ldr	r3, [fp, #-12]
  1153a8:	e5933000 	ldr	r3, [r3]
  1153ac:	e5933008 	ldr	r3, [r3, #8]
  1153b0:	e5d32010 	ldrb	r2, [r3, #16]
  1153b4:	e51b300c 	ldr	r3, [fp, #-12]
  1153b8:	e5933000 	ldr	r3, [r3]
  1153bc:	e5933008 	ldr	r3, [r3, #8]
  1153c0:	e3c22008 	bic	r2, r2, #8
  1153c4:	e6ef2072 	uxtb	r2, r2
  1153c8:	e5c32010 	strb	r2, [r3, #16]
      break;
  1153cc:	ea00004d 	b	115508 <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  1153d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1153d4:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  1153d8:	e59b3004 	ldr	r3, [fp, #4]
  1153dc:	e3530007 	cmp	r3, #7
  1153e0:	8a000001 	bhi	1153ec <lwip_setsockopt_impl+0x680>
  1153e4:	e3a03016 	mov	r3, #22
  1153e8:	ea0000b9 	b	1156d4 <lwip_setsockopt_impl+0x968>
  1153ec:	e51b300c 	ldr	r3, [fp, #-12]
  1153f0:	e5933000 	ldr	r3, [r3]
  1153f4:	e3530000 	cmp	r3, #0
  1153f8:	0a000004 	beq	115410 <lwip_setsockopt_impl+0x6a4>
  1153fc:	e51b300c 	ldr	r3, [fp, #-12]
  115400:	e5933000 	ldr	r3, [r3]
  115404:	e5933008 	ldr	r3, [r3, #8]
  115408:	e3530000 	cmp	r3, #0
  11540c:	1a000001 	bne	115418 <lwip_setsockopt_impl+0x6ac>
  115410:	e3a03016 	mov	r3, #22
  115414:	ea0000ae 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115418:	e51b300c 	ldr	r3, [fp, #-12]
  11541c:	e5933000 	ldr	r3, [r3]
  115420:	e5933000 	ldr	r3, [r3]
  115424:	e20330f0 	and	r3, r3, #240	; 0xf0
  115428:	e3530020 	cmp	r3, #32
  11542c:	0a000001 	beq	115438 <lwip_setsockopt_impl+0x6cc>
  115430:	e3a0305c 	mov	r3, #92	; 0x5c
  115434:	ea0000a6 	b	1156d4 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  115438:	e51b3010 	ldr	r3, [fp, #-16]
  11543c:	e5933004 	ldr	r3, [r3, #4]
  115440:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  115444:	e51b3010 	ldr	r3, [fp, #-16]
  115448:	e5933000 	ldr	r3, [r3]
  11544c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  115450:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115454:	e3530003 	cmp	r3, #3
  115458:	1a000014 	bne	1154b0 <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  11545c:	e24b201c 	sub	r2, fp, #28
  115460:	e24b3018 	sub	r3, fp, #24
  115464:	e1a01003 	mov	r1, r3
  115468:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11546c:	eb0001ba 	bl	115b5c <lwip_socket_register_membership>
  115470:	e1a03000 	mov	r3, r0
  115474:	e3530000 	cmp	r3, #0
  115478:	1a000004 	bne	115490 <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  11547c:	e3a0300c 	mov	r3, #12
  115480:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  115484:	e3a03000 	mov	r3, #0
  115488:	e54b3006 	strb	r3, [fp, #-6]
  11548c:	ea000013 	b	1154e0 <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  115490:	e24b201c 	sub	r2, fp, #28
  115494:	e24b3018 	sub	r3, fp, #24
  115498:	e1a01002 	mov	r1, r2
  11549c:	e1a00003 	mov	r0, r3
  1154a0:	eb006c95 	bl	1306fc <igmp_joingroup>
  1154a4:	e1a03000 	mov	r3, r0
  1154a8:	e54b3006 	strb	r3, [fp, #-6]
  1154ac:	ea00000b 	b	1154e0 <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  1154b0:	e24b201c 	sub	r2, fp, #28
  1154b4:	e24b3018 	sub	r3, fp, #24
  1154b8:	e1a01002 	mov	r1, r2
  1154bc:	e1a00003 	mov	r0, r3
  1154c0:	eb006d46 	bl	1309e0 <igmp_leavegroup>
  1154c4:	e1a03000 	mov	r3, r0
  1154c8:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  1154cc:	e24b201c 	sub	r2, fp, #28
  1154d0:	e24b3018 	sub	r3, fp, #24
  1154d4:	e1a01003 	mov	r1, r3
  1154d8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1154dc:	eb0001e0 	bl	115c64 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  1154e0:	e15b30d6 	ldrsb	r3, [fp, #-6]
  1154e4:	e3530000 	cmp	r3, #0
  1154e8:	0a000005 	beq	115504 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  1154ec:	e3a03063 	mov	r3, #99	; 0x63
  1154f0:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  1154f4:	ea000002 	b	115504 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1154f8:	e3a0305c 	mov	r3, #92	; 0x5c
  1154fc:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115500:	ea000000 	b	115508 <lwip_setsockopt_impl+0x79c>
      break;
  115504:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115508:	ea000070 	b	1156d0 <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  11550c:	e59b3004 	ldr	r3, [fp, #4]
  115510:	e3530003 	cmp	r3, #3
  115514:	8a000001 	bhi	115520 <lwip_setsockopt_impl+0x7b4>
  115518:	e3a03016 	mov	r3, #22
  11551c:	ea00006c 	b	1156d4 <lwip_setsockopt_impl+0x968>
  115520:	e51b300c 	ldr	r3, [fp, #-12]
  115524:	e5933000 	ldr	r3, [r3]
  115528:	e3530000 	cmp	r3, #0
  11552c:	0a000004 	beq	115544 <lwip_setsockopt_impl+0x7d8>
  115530:	e51b300c 	ldr	r3, [fp, #-12]
  115534:	e5933000 	ldr	r3, [r3]
  115538:	e5933008 	ldr	r3, [r3, #8]
  11553c:	e3530000 	cmp	r3, #0
  115540:	1a000001 	bne	11554c <lwip_setsockopt_impl+0x7e0>
  115544:	e3a03016 	mov	r3, #22
  115548:	ea000061 	b	1156d4 <lwip_setsockopt_impl+0x968>
  11554c:	e51b300c 	ldr	r3, [fp, #-12]
  115550:	e5933000 	ldr	r3, [r3]
  115554:	e5933000 	ldr	r3, [r3]
  115558:	e20330f0 	and	r3, r3, #240	; 0xf0
  11555c:	e3530010 	cmp	r3, #16
  115560:	0a000001 	beq	11556c <lwip_setsockopt_impl+0x800>
  115564:	e3a0305c 	mov	r3, #92	; 0x5c
  115568:	ea000059 	b	1156d4 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  11556c:	e51b300c 	ldr	r3, [fp, #-12]
  115570:	e5933000 	ldr	r3, [r3]
  115574:	e5933008 	ldr	r3, [r3, #8]
  115578:	e5933014 	ldr	r3, [r3, #20]
  11557c:	e3530001 	cmp	r3, #1
  115580:	1a000001 	bne	11558c <lwip_setsockopt_impl+0x820>
      return EINVAL;
  115584:	e3a03016 	mov	r3, #22
  115588:	ea000051 	b	1156d4 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  11558c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115590:	e2433001 	sub	r3, r3, #1
  115594:	e3530004 	cmp	r3, #4
  115598:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11559c:	ea000040 	b	1156a4 <lwip_setsockopt_impl+0x938>
  1155a0:	001155b4 	.word	0x001155b4
  1155a4:	0011561c 	.word	0x0011561c
  1155a8:	00115638 	.word	0x00115638
  1155ac:	00115660 	.word	0x00115660
  1155b0:	00115688 	.word	0x00115688
    case TCP_NODELAY:
      if (*(const int*)optval) {
  1155b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1155b8:	e5933000 	ldr	r3, [r3]
  1155bc:	e3530000 	cmp	r3, #0
  1155c0:	0a00000a 	beq	1155f0 <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  1155c4:	e51b300c 	ldr	r3, [fp, #-12]
  1155c8:	e5933000 	ldr	r3, [r3]
  1155cc:	e5933008 	ldr	r3, [r3, #8]
  1155d0:	e5d3201e 	ldrb	r2, [r3, #30]
  1155d4:	e51b300c 	ldr	r3, [fp, #-12]
  1155d8:	e5933000 	ldr	r3, [r3]
  1155dc:	e5933008 	ldr	r3, [r3, #8]
  1155e0:	e3822040 	orr	r2, r2, #64	; 0x40
  1155e4:	e6ef2072 	uxtb	r2, r2
  1155e8:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  1155ec:	ea00002f 	b	1156b0 <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  1155f0:	e51b300c 	ldr	r3, [fp, #-12]
  1155f4:	e5933000 	ldr	r3, [r3]
  1155f8:	e5933008 	ldr	r3, [r3, #8]
  1155fc:	e5d3201e 	ldrb	r2, [r3, #30]
  115600:	e51b300c 	ldr	r3, [fp, #-12]
  115604:	e5933000 	ldr	r3, [r3]
  115608:	e5933008 	ldr	r3, [r3, #8]
  11560c:	e3c22040 	bic	r2, r2, #64	; 0x40
  115610:	e6ef2072 	uxtb	r2, r2
  115614:	e5c3201e 	strb	r2, [r3, #30]
      break;
  115618:	ea000024 	b	1156b0 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  11561c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115620:	e5932000 	ldr	r2, [r3]
  115624:	e51b300c 	ldr	r3, [fp, #-12]
  115628:	e5933000 	ldr	r3, [r3]
  11562c:	e5933008 	ldr	r3, [r3, #8]
  115630:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115634:	ea00001d 	b	1156b0 <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  115638:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11563c:	e5933000 	ldr	r3, [r3]
  115640:	e1a01003 	mov	r1, r3
  115644:	e51b300c 	ldr	r3, [fp, #-12]
  115648:	e5933000 	ldr	r3, [r3]
  11564c:	e5933008 	ldr	r3, [r3, #8]
  115650:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115654:	e0020192 	mul	r2, r2, r1
  115658:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  11565c:	ea000013 	b	1156b0 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  115660:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115664:	e5933000 	ldr	r3, [r3]
  115668:	e1a01003 	mov	r1, r3
  11566c:	e51b300c 	ldr	r3, [fp, #-12]
  115670:	e5933000 	ldr	r3, [r3]
  115674:	e5933008 	ldr	r3, [r3, #8]
  115678:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11567c:	e0020192 	mul	r2, r2, r1
  115680:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  115684:	ea000009 	b	1156b0 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  115688:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11568c:	e5932000 	ldr	r2, [r3]
  115690:	e51b300c 	ldr	r3, [fp, #-12]
  115694:	e5933000 	ldr	r3, [r3]
  115698:	e5933008 	ldr	r3, [r3, #8]
  11569c:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  1156a0:	ea000002 	b	1156b0 <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1156a4:	e3a0305c 	mov	r3, #92	; 0x5c
  1156a8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1156ac:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1156b0:	ea000006 	b	1156d0 <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  1156b4:	e3a0305c 	mov	r3, #92	; 0x5c
  1156b8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1156bc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1156c0:	ea000002 	b	1156d0 <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  1156c4:	e3a0305c 	mov	r3, #92	; 0x5c
  1156c8:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1156cc:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  1156d0:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1156d4:	e1a00003 	mov	r0, r3
  1156d8:	e24bd004 	sub	sp, fp, #4
  1156dc:	e8bd8800 	pop	{fp, pc}

001156e0 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  1156e0:	e92d4800 	push	{fp, lr}
  1156e4:	e28db004 	add	fp, sp, #4
  1156e8:	e24dd038 	sub	sp, sp, #56	; 0x38
  1156ec:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1156f0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1156f4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  1156f8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1156fc:	ebffee03 	bl	110f10 <get_socket>
  115700:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  115704:	e3a03000 	mov	r3, #0
  115708:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  11570c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115710:	e3530000 	cmp	r3, #0
  115714:	1a000001 	bne	115720 <lwip_ioctl+0x40>
    return -1;
  115718:	e3e03000 	mvn	r3, #0
  11571c:	ea000093 	b	115970 <lwip_ioctl+0x290>
  }

  switch (cmd) {
  115720:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  115724:	e306367f 	movw	r3, #26239	; 0x667f
  115728:	e3483004 	movt	r3, #32772	; 0x8004
  11572c:	e1520003 	cmp	r2, r3
  115730:	0a00000e 	beq	115770 <lwip_ioctl+0x90>
  115734:	e306367e 	movw	r3, #26238	; 0x667e
  115738:	e3443004 	movt	r3, #16388	; 0x4004
  11573c:	e1520003 	cmp	r2, r3
  115740:	0a000057 	beq	1158a4 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  115744:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115748:	e3a03026 	mov	r3, #38	; 0x26
  11574c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  115750:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115754:	e6ef2073 	uxtb	r2, r3
  115758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11575c:	e5c32010 	strb	r2, [r3, #16]
  115760:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115764:	e3530000 	cmp	r3, #0
  115768:	0a00007f 	beq	11596c <lwip_ioctl+0x28c>
  11576c:	ea00007a 	b	11595c <lwip_ioctl+0x27c>
    if (!argp) {
  115770:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115774:	e3530000 	cmp	r3, #0
  115778:	1a00000e 	bne	1157b8 <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  11577c:	e3a03016 	mov	r3, #22
  115780:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  115784:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115788:	e6ef2073 	uxtb	r2, r3
  11578c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115790:	e5c32010 	strb	r2, [r3, #16]
  115794:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115798:	e3530000 	cmp	r3, #0
  11579c:	0a000003 	beq	1157b0 <lwip_ioctl+0xd0>
  1157a0:	eb008dc9 	bl	138ecc <__errno_location>
  1157a4:	e1a02000 	mov	r2, r0
  1157a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1157ac:	e5823000 	str	r3, [r2]
      return -1;
  1157b0:	e3e03000 	mvn	r3, #0
  1157b4:	ea00006d 	b	115970 <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  1157b8:	ebffb29f 	bl	10223c <rt_enter_critical>
  1157bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157c0:	e5933000 	ldr	r3, [r3]
  1157c4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1157c8:	e50b300c 	str	r3, [fp, #-12]
  1157cc:	ebffb2a0 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  1157d0:	e51b300c 	ldr	r3, [fp, #-12]
  1157d4:	e3530000 	cmp	r3, #0
  1157d8:	aa000001 	bge	1157e4 <lwip_ioctl+0x104>
      recv_avail = 0;
  1157dc:	e3a03000 	mov	r3, #0
  1157e0:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  1157e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1157e8:	e51b200c 	ldr	r2, [fp, #-12]
  1157ec:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  1157f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157f4:	e5933004 	ldr	r3, [r3, #4]
  1157f8:	e3530000 	cmp	r3, #0
  1157fc:	0a000019 	beq	115868 <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  115800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115804:	e5933004 	ldr	r3, [r3, #4]
  115808:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11580c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115810:	e5933000 	ldr	r3, [r3]
  115814:	e5933000 	ldr	r3, [r3]
  115818:	e20330f0 	and	r3, r3, #240	; 0xf0
  11581c:	e3530010 	cmp	r3, #16
  115820:	0a000002 	beq	115830 <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  115824:	e51b3010 	ldr	r3, [fp, #-16]
  115828:	e5933000 	ldr	r3, [r3]
  11582c:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  115830:	e51b3010 	ldr	r3, [fp, #-16]
  115834:	e1d330b8 	ldrh	r3, [r3, #8]
  115838:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  11583c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115840:	e1d330b8 	ldrh	r3, [r3, #8]
  115844:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  115848:	e0423003 	sub	r3, r2, r3
  11584c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  115850:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115854:	e5932000 	ldr	r2, [r3]
  115858:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11585c:	e0822003 	add	r2, r2, r3
  115860:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115864:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  115868:	e3a03000 	mov	r3, #0
  11586c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  115870:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115874:	e6ef2073 	uxtb	r2, r3
  115878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11587c:	e5c32010 	strb	r2, [r3, #16]
  115880:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115884:	e3530000 	cmp	r3, #0
  115888:	0a000003 	beq	11589c <lwip_ioctl+0x1bc>
  11588c:	eb008d8e 	bl	138ecc <__errno_location>
  115890:	e1a02000 	mov	r2, r0
  115894:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115898:	e5823000 	str	r3, [r2]
    return 0;
  11589c:	e3a03000 	mov	r3, #0
  1158a0:	ea000032 	b	115970 <lwip_ioctl+0x290>
    val = 0;
  1158a4:	e3a03000 	mov	r3, #0
  1158a8:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  1158ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1158b0:	e3530000 	cmp	r3, #0
  1158b4:	0a000005 	beq	1158d0 <lwip_ioctl+0x1f0>
  1158b8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1158bc:	e5933000 	ldr	r3, [r3]
  1158c0:	e3530000 	cmp	r3, #0
  1158c4:	0a000001 	beq	1158d0 <lwip_ioctl+0x1f0>
      val = 1;
  1158c8:	e3a03001 	mov	r3, #1
  1158cc:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  1158d0:	e55b3005 	ldrb	r3, [fp, #-5]
  1158d4:	e3530000 	cmp	r3, #0
  1158d8:	0a000008 	beq	115900 <lwip_ioctl+0x220>
  1158dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158e0:	e5933000 	ldr	r3, [r3]
  1158e4:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1158e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158ec:	e5933000 	ldr	r3, [r3]
  1158f0:	e3822002 	orr	r2, r2, #2
  1158f4:	e6ef2072 	uxtb	r2, r2
  1158f8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  1158fc:	ea000007 	b	115920 <lwip_ioctl+0x240>
  115900:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115904:	e5933000 	ldr	r3, [r3]
  115908:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  11590c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115910:	e5933000 	ldr	r3, [r3]
  115914:	e3c22002 	bic	r2, r2, #2
  115918:	e6ef2072 	uxtb	r2, r2
  11591c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  115920:	e3a03000 	mov	r3, #0
  115924:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115928:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11592c:	e6ef2073 	uxtb	r2, r3
  115930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115934:	e5c32010 	strb	r2, [r3, #16]
  115938:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11593c:	e3530000 	cmp	r3, #0
  115940:	0a000003 	beq	115954 <lwip_ioctl+0x274>
  115944:	eb008d60 	bl	138ecc <__errno_location>
  115948:	e1a02000 	mov	r2, r0
  11594c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115950:	e5823000 	str	r3, [r2]
    return 0;
  115954:	e3a03000 	mov	r3, #0
  115958:	ea000004 	b	115970 <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  11595c:	eb008d5a 	bl	138ecc <__errno_location>
  115960:	e1a02000 	mov	r2, r0
  115964:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115968:	e5823000 	str	r3, [r2]
  return -1;
  11596c:	e3e03000 	mvn	r3, #0
}
  115970:	e1a00003 	mov	r0, r3
  115974:	e24bd004 	sub	sp, fp, #4
  115978:	e8bd8800 	pop	{fp, pc}

0011597c <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  11597c:	e92d4800 	push	{fp, lr}
  115980:	e28db004 	add	fp, sp, #4
  115984:	e24dd028 	sub	sp, sp, #40	; 0x28
  115988:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11598c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  115990:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  115994:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115998:	ebffed5c 	bl	110f10 <get_socket>
  11599c:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  1159a0:	e3e03000 	mvn	r3, #0
  1159a4:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  1159a8:	e51b300c 	ldr	r3, [fp, #-12]
  1159ac:	e3530000 	cmp	r3, #0
  1159b0:	1a000001 	bne	1159bc <lwip_fcntl+0x40>
    return -1;
  1159b4:	e3e03000 	mvn	r3, #0
  1159b8:	ea000064 	b	115b50 <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  1159bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1159c0:	e3530003 	cmp	r3, #3
  1159c4:	0a000002 	beq	1159d4 <lwip_fcntl+0x58>
  1159c8:	e3530004 	cmp	r3, #4
  1159cc:	0a000014 	beq	115a24 <lwip_fcntl+0xa8>
  1159d0:	ea00004a 	b	115b00 <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  1159d4:	e51b300c 	ldr	r3, [fp, #-12]
  1159d8:	e5933000 	ldr	r3, [r3]
  1159dc:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1159e0:	e1a03503 	lsl	r3, r3, #10
  1159e4:	e2033b02 	and	r3, r3, #2048	; 0x800
  1159e8:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  1159ec:	e3a03000 	mov	r3, #0
  1159f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1159f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1159f8:	e6ef2073 	uxtb	r2, r3
  1159fc:	e51b300c 	ldr	r3, [fp, #-12]
  115a00:	e5c32010 	strb	r2, [r3, #16]
  115a04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a08:	e3530000 	cmp	r3, #0
  115a0c:	0a000049 	beq	115b38 <lwip_fcntl+0x1bc>
  115a10:	eb008d2d 	bl	138ecc <__errno_location>
  115a14:	e1a02000 	mov	r2, r0
  115a18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a1c:	e5823000 	str	r3, [r2]
    break;
  115a20:	ea000044 	b	115b38 <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  115a24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115a28:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115a2c:	e3530000 	cmp	r3, #0
  115a30:	1a000024 	bne	115ac8 <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  115a34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115a38:	e2033b02 	and	r3, r3, #2048	; 0x800
  115a3c:	e3530000 	cmp	r3, #0
  115a40:	0a000008 	beq	115a68 <lwip_fcntl+0xec>
  115a44:	e51b300c 	ldr	r3, [fp, #-12]
  115a48:	e5933000 	ldr	r3, [r3]
  115a4c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a50:	e51b300c 	ldr	r3, [fp, #-12]
  115a54:	e5933000 	ldr	r3, [r3]
  115a58:	e3822002 	orr	r2, r2, #2
  115a5c:	e6ef2072 	uxtb	r2, r2
  115a60:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115a64:	ea000007 	b	115a88 <lwip_fcntl+0x10c>
  115a68:	e51b300c 	ldr	r3, [fp, #-12]
  115a6c:	e5933000 	ldr	r3, [r3]
  115a70:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a74:	e51b300c 	ldr	r3, [fp, #-12]
  115a78:	e5933000 	ldr	r3, [r3]
  115a7c:	e3c22002 	bic	r2, r2, #2
  115a80:	e6ef2072 	uxtb	r2, r2
  115a84:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  115a88:	e3a03000 	mov	r3, #0
  115a8c:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  115a90:	e3a03000 	mov	r3, #0
  115a94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  115a98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a9c:	e6ef2073 	uxtb	r2, r3
  115aa0:	e51b300c 	ldr	r3, [fp, #-12]
  115aa4:	e5c32010 	strb	r2, [r3, #16]
  115aa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115aac:	e3530000 	cmp	r3, #0
  115ab0:	0a000022 	beq	115b40 <lwip_fcntl+0x1c4>
  115ab4:	eb008d04 	bl	138ecc <__errno_location>
  115ab8:	e1a02000 	mov	r2, r0
  115abc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115ac0:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  115ac4:	ea00001d 	b	115b40 <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115ac8:	e3a03026 	mov	r3, #38	; 0x26
  115acc:	e50b3010 	str	r3, [fp, #-16]
  115ad0:	e51b3010 	ldr	r3, [fp, #-16]
  115ad4:	e6ef2073 	uxtb	r2, r3
  115ad8:	e51b300c 	ldr	r3, [fp, #-12]
  115adc:	e5c32010 	strb	r2, [r3, #16]
  115ae0:	e51b3010 	ldr	r3, [fp, #-16]
  115ae4:	e3530000 	cmp	r3, #0
  115ae8:	0a000014 	beq	115b40 <lwip_fcntl+0x1c4>
  115aec:	eb008cf6 	bl	138ecc <__errno_location>
  115af0:	e1a02000 	mov	r2, r0
  115af4:	e51b3010 	ldr	r3, [fp, #-16]
  115af8:	e5823000 	str	r3, [r2]
    break;
  115afc:	ea00000f 	b	115b40 <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115b00:	e3a03026 	mov	r3, #38	; 0x26
  115b04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115b08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b0c:	e6ef2073 	uxtb	r2, r3
  115b10:	e51b300c 	ldr	r3, [fp, #-12]
  115b14:	e5c32010 	strb	r2, [r3, #16]
  115b18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b1c:	e3530000 	cmp	r3, #0
  115b20:	0a000008 	beq	115b48 <lwip_fcntl+0x1cc>
  115b24:	eb008ce8 	bl	138ecc <__errno_location>
  115b28:	e1a02000 	mov	r2, r0
  115b2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b30:	e5823000 	str	r3, [r2]
    break;
  115b34:	ea000003 	b	115b48 <lwip_fcntl+0x1cc>
    break;
  115b38:	e320f000 	nop	{0}
  115b3c:	ea000002 	b	115b4c <lwip_fcntl+0x1d0>
    break;
  115b40:	e320f000 	nop	{0}
  115b44:	ea000000 	b	115b4c <lwip_fcntl+0x1d0>
    break;
  115b48:	e320f000 	nop	{0}
  }
  return ret;
  115b4c:	e51b3008 	ldr	r3, [fp, #-8]
}
  115b50:	e1a00003 	mov	r0, r3
  115b54:	e24bd004 	sub	sp, fp, #4
  115b58:	e8bd8800 	pop	{fp, pc}

00115b5c <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115b5c:	e92d4800 	push	{fp, lr}
  115b60:	e28db004 	add	fp, sp, #4
  115b64:	e24dd018 	sub	sp, sp, #24
  115b68:	e50b0010 	str	r0, [fp, #-16]
  115b6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115b70:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115b74:	e51b0010 	ldr	r0, [fp, #-16]
  115b78:	ebffece4 	bl	110f10 <get_socket>
  115b7c:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115b80:	e51b300c 	ldr	r3, [fp, #-12]
  115b84:	e3530000 	cmp	r3, #0
  115b88:	1a000001 	bne	115b94 <lwip_socket_register_membership+0x38>
    return 0;
  115b8c:	e3a03000 	mov	r3, #0
  115b90:	ea000030 	b	115c58 <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115b94:	e3a03000 	mov	r3, #0
  115b98:	e50b3008 	str	r3, [fp, #-8]
  115b9c:	ea000029 	b	115c48 <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  115ba0:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115ba4:	e3403014 	movt	r3, #20
  115ba8:	e51b2008 	ldr	r2, [fp, #-8]
  115bac:	e3a0100c 	mov	r1, #12
  115bb0:	e0020291 	mul	r2, r1, r2
  115bb4:	e0833002 	add	r3, r3, r2
  115bb8:	e5933000 	ldr	r3, [r3]
  115bbc:	e3530000 	cmp	r3, #0
  115bc0:	1a00001d 	bne	115c3c <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  115bc4:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115bc8:	e3403014 	movt	r3, #20
  115bcc:	e51b2008 	ldr	r2, [fp, #-8]
  115bd0:	e3a0100c 	mov	r1, #12
  115bd4:	e0020291 	mul	r2, r1, r2
  115bd8:	e0833002 	add	r3, r3, r2
  115bdc:	e51b200c 	ldr	r2, [fp, #-12]
  115be0:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  115be4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115be8:	e5932000 	ldr	r2, [r3]
  115bec:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115bf0:	e3403014 	movt	r3, #20
  115bf4:	e51b1008 	ldr	r1, [fp, #-8]
  115bf8:	e3a0000c 	mov	r0, #12
  115bfc:	e0010190 	mul	r1, r0, r1
  115c00:	e0833001 	add	r3, r3, r1
  115c04:	e2833004 	add	r3, r3, #4
  115c08:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  115c0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115c10:	e5932000 	ldr	r2, [r3]
  115c14:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115c18:	e3403014 	movt	r3, #20
  115c1c:	e51b1008 	ldr	r1, [fp, #-8]
  115c20:	e3a0000c 	mov	r0, #12
  115c24:	e0010190 	mul	r1, r0, r1
  115c28:	e0833001 	add	r3, r3, r1
  115c2c:	e2833008 	add	r3, r3, #8
  115c30:	e5832000 	str	r2, [r3]
      return 1;
  115c34:	e3a03001 	mov	r3, #1
  115c38:	ea000006 	b	115c58 <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115c3c:	e51b3008 	ldr	r3, [fp, #-8]
  115c40:	e2833001 	add	r3, r3, #1
  115c44:	e50b3008 	str	r3, [fp, #-8]
  115c48:	e51b3008 	ldr	r3, [fp, #-8]
  115c4c:	e3530007 	cmp	r3, #7
  115c50:	daffffd2 	ble	115ba0 <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  115c54:	e3a03000 	mov	r3, #0
}
  115c58:	e1a00003 	mov	r0, r3
  115c5c:	e24bd004 	sub	sp, fp, #4
  115c60:	e8bd8800 	pop	{fp, pc}

00115c64 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115c64:	e92d4800 	push	{fp, lr}
  115c68:	e28db004 	add	fp, sp, #4
  115c6c:	e24dd018 	sub	sp, sp, #24
  115c70:	e50b0010 	str	r0, [fp, #-16]
  115c74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115c78:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115c7c:	e51b0010 	ldr	r0, [fp, #-16]
  115c80:	ebffeca2 	bl	110f10 <get_socket>
  115c84:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115c88:	e51b300c 	ldr	r3, [fp, #-12]
  115c8c:	e3530000 	cmp	r3, #0
  115c90:	0a000046 	beq	115db0 <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115c94:	e3a03000 	mov	r3, #0
  115c98:	e50b3008 	str	r3, [fp, #-8]
  115c9c:	ea00003f 	b	115da0 <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115ca0:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115ca4:	e3403014 	movt	r3, #20
  115ca8:	e51b2008 	ldr	r2, [fp, #-8]
  115cac:	e3a0100c 	mov	r1, #12
  115cb0:	e0020291 	mul	r2, r1, r2
  115cb4:	e0833002 	add	r3, r3, r2
  115cb8:	e5933000 	ldr	r3, [r3]
  115cbc:	e51b200c 	ldr	r2, [fp, #-12]
  115cc0:	e1520003 	cmp	r2, r3
  115cc4:	1a000032 	bne	115d94 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115cc8:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115ccc:	e3403014 	movt	r3, #20
  115cd0:	e51b2008 	ldr	r2, [fp, #-8]
  115cd4:	e3a0100c 	mov	r1, #12
  115cd8:	e0020291 	mul	r2, r1, r2
  115cdc:	e0833002 	add	r3, r3, r2
  115ce0:	e2833004 	add	r3, r3, #4
  115ce4:	e5932000 	ldr	r2, [r3]
  115ce8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115cec:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115cf0:	e1520003 	cmp	r2, r3
  115cf4:	1a000026 	bne	115d94 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  115cf8:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115cfc:	e3403014 	movt	r3, #20
  115d00:	e51b2008 	ldr	r2, [fp, #-8]
  115d04:	e3a0100c 	mov	r1, #12
  115d08:	e0020291 	mul	r2, r1, r2
  115d0c:	e0833002 	add	r3, r3, r2
  115d10:	e2833008 	add	r3, r3, #8
  115d14:	e5932000 	ldr	r2, [r3]
  115d18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115d1c:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115d20:	e1520003 	cmp	r2, r3
  115d24:	1a00001a 	bne	115d94 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115d28:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115d2c:	e3403014 	movt	r3, #20
  115d30:	e51b2008 	ldr	r2, [fp, #-8]
  115d34:	e3a0100c 	mov	r1, #12
  115d38:	e0020291 	mul	r2, r1, r2
  115d3c:	e0833002 	add	r3, r3, r2
  115d40:	e3a02000 	mov	r2, #0
  115d44:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115d48:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115d4c:	e3403014 	movt	r3, #20
  115d50:	e51b2008 	ldr	r2, [fp, #-8]
  115d54:	e3a0100c 	mov	r1, #12
  115d58:	e0020291 	mul	r2, r1, r2
  115d5c:	e0833002 	add	r3, r3, r2
  115d60:	e2833004 	add	r3, r3, #4
  115d64:	e3a02000 	mov	r2, #0
  115d68:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115d6c:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115d70:	e3403014 	movt	r3, #20
  115d74:	e51b2008 	ldr	r2, [fp, #-8]
  115d78:	e3a0100c 	mov	r1, #12
  115d7c:	e0020291 	mul	r2, r1, r2
  115d80:	e0833002 	add	r3, r3, r2
  115d84:	e2833008 	add	r3, r3, #8
  115d88:	e3a02000 	mov	r2, #0
  115d8c:	e5832000 	str	r2, [r3]
      return;
  115d90:	ea000007 	b	115db4 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115d94:	e51b3008 	ldr	r3, [fp, #-8]
  115d98:	e2833001 	add	r3, r3, #1
  115d9c:	e50b3008 	str	r3, [fp, #-8]
  115da0:	e51b3008 	ldr	r3, [fp, #-8]
  115da4:	e3530007 	cmp	r3, #7
  115da8:	daffffbc 	ble	115ca0 <lwip_socket_unregister_membership+0x3c>
  115dac:	ea000000 	b	115db4 <lwip_socket_unregister_membership+0x150>
    return;
  115db0:	e320f000 	nop	{0}
    }
  }
}
  115db4:	e24bd004 	sub	sp, fp, #4
  115db8:	e8bd8800 	pop	{fp, pc}

00115dbc <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115dbc:	e92d4800 	push	{fp, lr}
  115dc0:	e28db004 	add	fp, sp, #4
  115dc4:	e24dd018 	sub	sp, sp, #24
  115dc8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115dcc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115dd0:	ebffec4e 	bl	110f10 <get_socket>
  115dd4:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115dd8:	e51b300c 	ldr	r3, [fp, #-12]
  115ddc:	e3530000 	cmp	r3, #0
  115de0:	0a000045 	beq	115efc <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115de4:	e3a03000 	mov	r3, #0
  115de8:	e50b3008 	str	r3, [fp, #-8]
  115dec:	ea00003e 	b	115eec <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115df0:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115df4:	e3403014 	movt	r3, #20
  115df8:	e51b2008 	ldr	r2, [fp, #-8]
  115dfc:	e3a0100c 	mov	r1, #12
  115e00:	e0020291 	mul	r2, r1, r2
  115e04:	e0833002 	add	r3, r3, r2
  115e08:	e5933000 	ldr	r3, [r3]
  115e0c:	e51b200c 	ldr	r2, [fp, #-12]
  115e10:	e1520003 	cmp	r2, r3
  115e14:	1a000031 	bne	115ee0 <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115e18:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115e1c:	e3403014 	movt	r3, #20
  115e20:	e51b2008 	ldr	r2, [fp, #-8]
  115e24:	e3a0100c 	mov	r1, #12
  115e28:	e0020291 	mul	r2, r1, r2
  115e2c:	e0833002 	add	r3, r3, r2
  115e30:	e2833008 	add	r3, r3, #8
  115e34:	e5933000 	ldr	r3, [r3]
  115e38:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115e3c:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115e40:	e3403014 	movt	r3, #20
  115e44:	e51b2008 	ldr	r2, [fp, #-8]
  115e48:	e3a0100c 	mov	r1, #12
  115e4c:	e0020291 	mul	r2, r1, r2
  115e50:	e0833002 	add	r3, r3, r2
  115e54:	e2833004 	add	r3, r3, #4
  115e58:	e5933000 	ldr	r3, [r3]
  115e5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115e60:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115e64:	e3403014 	movt	r3, #20
  115e68:	e51b2008 	ldr	r2, [fp, #-8]
  115e6c:	e3a0100c 	mov	r1, #12
  115e70:	e0020291 	mul	r2, r1, r2
  115e74:	e0833002 	add	r3, r3, r2
  115e78:	e3a02000 	mov	r2, #0
  115e7c:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115e80:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115e84:	e3403014 	movt	r3, #20
  115e88:	e51b2008 	ldr	r2, [fp, #-8]
  115e8c:	e3a0100c 	mov	r1, #12
  115e90:	e0020291 	mul	r2, r1, r2
  115e94:	e0833002 	add	r3, r3, r2
  115e98:	e2833004 	add	r3, r3, #4
  115e9c:	e3a02000 	mov	r2, #0
  115ea0:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115ea4:	e30f35b4 	movw	r3, #62900	; 0xf5b4
  115ea8:	e3403014 	movt	r3, #20
  115eac:	e51b2008 	ldr	r2, [fp, #-8]
  115eb0:	e3a0100c 	mov	r1, #12
  115eb4:	e0020291 	mul	r2, r1, r2
  115eb8:	e0833002 	add	r3, r3, r2
  115ebc:	e2833008 	add	r3, r3, #8
  115ec0:	e3a02000 	mov	r2, #0
  115ec4:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115ec8:	e51b300c 	ldr	r3, [fp, #-12]
  115ecc:	e5930000 	ldr	r0, [r3]
  115ed0:	e24b2014 	sub	r2, fp, #20
  115ed4:	e24b1010 	sub	r1, fp, #16
  115ed8:	e3a03001 	mov	r3, #1
  115edc:	ebffd8dc 	bl	10c254 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115ee0:	e51b3008 	ldr	r3, [fp, #-8]
  115ee4:	e2833001 	add	r3, r3, #1
  115ee8:	e50b3008 	str	r3, [fp, #-8]
  115eec:	e51b3008 	ldr	r3, [fp, #-8]
  115ef0:	e3530007 	cmp	r3, #7
  115ef4:	daffffbd 	ble	115df0 <lwip_socket_drop_registered_memberships+0x34>
  115ef8:	ea000000 	b	115f00 <lwip_socket_drop_registered_memberships+0x144>
    return;
  115efc:	e320f000 	nop	{0}
    }
  }
}
  115f00:	e24bd004 	sub	sp, fp, #4
  115f04:	e8bd8800 	pop	{fp, pc}

00115f08 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115f08:	e92d4800 	push	{fp, lr}
  115f0c:	e28db004 	add	fp, sp, #4
  115f10:	e24dd010 	sub	sp, sp, #16
  115f14:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115f18:	e30d3c54 	movw	r3, #56404	; 0xdc54
  115f1c:	e3403014 	movt	r3, #20
  115f20:	e5933000 	ldr	r3, [r3]
  115f24:	e3530000 	cmp	r3, #0
  115f28:	0a000007 	beq	115f4c <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115f2c:	e30d3c54 	movw	r3, #56404	; 0xdc54
  115f30:	e3403014 	movt	r3, #20
  115f34:	e5932000 	ldr	r2, [r3]
  115f38:	e30d3c58 	movw	r3, #56408	; 0xdc58
  115f3c:	e3403014 	movt	r3, #20
  115f40:	e5933000 	ldr	r3, [r3]
  115f44:	e1a00003 	mov	r0, r3
  115f48:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115f4c:	e30f0614 	movw	r0, #62996	; 0xf614
  115f50:	e3400014 	movt	r0, #20
  115f54:	ebffd272 	bl	10a924 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115f58:	e30f0614 	movw	r0, #62996	; 0xf614
  115f5c:	e3400014 	movt	r0, #20
  115f60:	ebffd27b 	bl	10a954 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115f64:	e24b3008 	sub	r3, fp, #8
  115f68:	e1a01003 	mov	r1, r3
  115f6c:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  115f70:	e3400014 	movt	r0, #20
  115f74:	eb004663 	bl	127908 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115f78:	e30f0614 	movw	r0, #62996	; 0xf614
  115f7c:	e3400014 	movt	r0, #20
  115f80:	ebffd267 	bl	10a924 <sys_mutex_lock>
    if (msg == NULL) {
  115f84:	e51b3008 	ldr	r3, [fp, #-8]
  115f88:	e3530000 	cmp	r3, #0
  115f8c:	1a000007 	bne	115fb0 <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115f90:	e3060f70 	movw	r0, #28528	; 0x6f70
  115f94:	e3400014 	movt	r0, #20
  115f98:	ebffb45d 	bl	103114 <rt_kprintf>
  115f9c:	e3a01069 	mov	r1, #105	; 0x69
  115fa0:	e3060f90 	movw	r0, #28560	; 0x6f90
  115fa4:	e3400014 	movt	r0, #20
  115fa8:	ebffd44c 	bl	10b0e0 <sys_arch_assert>
      continue;
  115fac:	ea00002e 	b	11606c <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115fb0:	e51b3008 	ldr	r3, [fp, #-8]
  115fb4:	e5933000 	ldr	r3, [r3]
  115fb8:	e3530003 	cmp	r3, #3
  115fbc:	0a000010 	beq	116004 <tcpip_thread+0xfc>
  115fc0:	e3530004 	cmp	r3, #4
  115fc4:	0a000019 	beq	116030 <tcpip_thread+0x128>
  115fc8:	e3530002 	cmp	r3, #2
  115fcc:	1a00001e 	bne	11604c <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115fd0:	e51b3008 	ldr	r3, [fp, #-8]
  115fd4:	e593300c 	ldr	r3, [r3, #12]
  115fd8:	e51b2008 	ldr	r2, [fp, #-8]
  115fdc:	e5920004 	ldr	r0, [r2, #4]
  115fe0:	e51b2008 	ldr	r2, [fp, #-8]
  115fe4:	e5922008 	ldr	r2, [r2, #8]
  115fe8:	e1a01002 	mov	r1, r2
  115fec:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115ff0:	e51b3008 	ldr	r3, [fp, #-8]
  115ff4:	e1a01003 	mov	r1, r3
  115ff8:	e3a0000a 	mov	r0, #10
  115ffc:	eb000c99 	bl	119268 <memp_free>
      break;
  116000:	ea000019 	b	11606c <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  116004:	e51b3008 	ldr	r3, [fp, #-8]
  116008:	e5933004 	ldr	r3, [r3, #4]
  11600c:	e51b2008 	ldr	r2, [fp, #-8]
  116010:	e5922008 	ldr	r2, [r2, #8]
  116014:	e1a00002 	mov	r0, r2
  116018:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  11601c:	e51b3008 	ldr	r3, [fp, #-8]
  116020:	e1a01003 	mov	r1, r3
  116024:	e3a00009 	mov	r0, #9
  116028:	eb000c8e 	bl	119268 <memp_free>
      break;
  11602c:	ea00000e 	b	11606c <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  116030:	e51b3008 	ldr	r3, [fp, #-8]
  116034:	e5933004 	ldr	r3, [r3, #4]
  116038:	e51b2008 	ldr	r2, [fp, #-8]
  11603c:	e5922008 	ldr	r2, [r2, #8]
  116040:	e1a00002 	mov	r0, r2
  116044:	e12fff33 	blx	r3
      break;
  116048:	ea000007 	b	11606c <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  11604c:	e3060f70 	movw	r0, #28528	; 0x6f70
  116050:	e3400014 	movt	r0, #20
  116054:	ebffb42e 	bl	103114 <rt_kprintf>
  116058:	e3a0109b 	mov	r1, #155	; 0x9b
  11605c:	e3060f90 	movw	r0, #28560	; 0x6f90
  116060:	e3400014 	movt	r0, #20
  116064:	ebffd41d 	bl	10b0e0 <sys_arch_assert>
      break;
  116068:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  11606c:	eaffffb9 	b	115f58 <tcpip_thread+0x50>

00116070 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  116070:	e92d4800 	push	{fp, lr}
  116074:	e28db004 	add	fp, sp, #4
  116078:	e24dd018 	sub	sp, sp, #24
  11607c:	e50b0010 	str	r0, [fp, #-16]
  116080:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116084:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116088:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  11608c:	e3400014 	movt	r0, #20
  116090:	ebffd3c9 	bl	10afbc <sys_mbox_valid>
  116094:	e1a03000 	mov	r3, r0
  116098:	e3530000 	cmp	r3, #0
  11609c:	1a000006 	bne	1160bc <tcpip_inpkt+0x4c>
  1160a0:	e3060fbc 	movw	r0, #28604	; 0x6fbc
  1160a4:	e3400014 	movt	r0, #20
  1160a8:	ebffb419 	bl	103114 <rt_kprintf>
  1160ac:	e3a010b5 	mov	r1, #181	; 0xb5
  1160b0:	e3060f90 	movw	r0, #28560	; 0x6f90
  1160b4:	e3400014 	movt	r0, #20
  1160b8:	ebffd408 	bl	10b0e0 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  1160bc:	e3a020b7 	mov	r2, #183	; 0xb7
  1160c0:	e3061f90 	movw	r1, #28560	; 0x6f90
  1160c4:	e3401014 	movt	r1, #20
  1160c8:	e3a0000a 	mov	r0, #10
  1160cc:	eb000bfd 	bl	1190c8 <memp_malloc_fn>
  1160d0:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1160d4:	e51b3008 	ldr	r3, [fp, #-8]
  1160d8:	e3530000 	cmp	r3, #0
  1160dc:	1a000001 	bne	1160e8 <tcpip_inpkt+0x78>
    return ERR_MEM;
  1160e0:	e3e03000 	mvn	r3, #0
  1160e4:	ea000018 	b	11614c <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  1160e8:	e51b3008 	ldr	r3, [fp, #-8]
  1160ec:	e3a02002 	mov	r2, #2
  1160f0:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  1160f4:	e51b3008 	ldr	r3, [fp, #-8]
  1160f8:	e51b2010 	ldr	r2, [fp, #-16]
  1160fc:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  116100:	e51b3008 	ldr	r3, [fp, #-8]
  116104:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116108:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  11610c:	e51b3008 	ldr	r3, [fp, #-8]
  116110:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  116114:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  116118:	e51b1008 	ldr	r1, [fp, #-8]
  11611c:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  116120:	e3400014 	movt	r0, #20
  116124:	ebffd346 	bl	10ae44 <sys_mbox_trypost>
  116128:	e1a03000 	mov	r3, r0
  11612c:	e3530000 	cmp	r3, #0
  116130:	0a000004 	beq	116148 <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  116134:	e51b1008 	ldr	r1, [fp, #-8]
  116138:	e3a0000a 	mov	r0, #10
  11613c:	eb000c49 	bl	119268 <memp_free>
    return ERR_MEM;
  116140:	e3e03000 	mvn	r3, #0
  116144:	ea000000 	b	11614c <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  116148:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  11614c:	e1a00003 	mov	r0, r3
  116150:	e24bd004 	sub	sp, fp, #4
  116154:	e8bd8800 	pop	{fp, pc}

00116158 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  116158:	e92d4800 	push	{fp, lr}
  11615c:	e28db004 	add	fp, sp, #4
  116160:	e24dd008 	sub	sp, sp, #8
  116164:	e50b0008 	str	r0, [fp, #-8]
  116168:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  11616c:	e51b300c 	ldr	r3, [fp, #-12]
  116170:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  116174:	e2033018 	and	r3, r3, #24
  116178:	e3530000 	cmp	r3, #0
  11617c:	0a000006 	beq	11619c <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  116180:	e3082bf4 	movw	r2, #35828	; 0x8bf4
  116184:	e3402012 	movt	r2, #18
  116188:	e51b100c 	ldr	r1, [fp, #-12]
  11618c:	e51b0008 	ldr	r0, [fp, #-8]
  116190:	ebffffb6 	bl	116070 <tcpip_inpkt>
  116194:	e1a03000 	mov	r3, r0
  116198:	ea000005 	b	1161b4 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  11619c:	e3012424 	movw	r2, #5156	; 0x1424
  1161a0:	e3402013 	movt	r2, #19
  1161a4:	e51b100c 	ldr	r1, [fp, #-12]
  1161a8:	e51b0008 	ldr	r0, [fp, #-8]
  1161ac:	ebffffaf 	bl	116070 <tcpip_inpkt>
  1161b0:	e1a03000 	mov	r3, r0
}
  1161b4:	e1a00003 	mov	r0, r3
  1161b8:	e24bd004 	sub	sp, fp, #4
  1161bc:	e8bd8800 	pop	{fp, pc}

001161c0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  1161c0:	e92d4800 	push	{fp, lr}
  1161c4:	e28db004 	add	fp, sp, #4
  1161c8:	e24dd018 	sub	sp, sp, #24
  1161cc:	e50b0010 	str	r0, [fp, #-16]
  1161d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1161d4:	e1a03002 	mov	r3, r2
  1161d8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1161dc:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  1161e0:	e3400014 	movt	r0, #20
  1161e4:	ebffd374 	bl	10afbc <sys_mbox_valid>
  1161e8:	e1a03000 	mov	r3, r0
  1161ec:	e3530000 	cmp	r3, #0
  1161f0:	1a000006 	bne	116210 <tcpip_callback_with_block+0x50>
  1161f4:	e3060fbc 	movw	r0, #28604	; 0x6fbc
  1161f8:	e3400014 	movt	r0, #20
  1161fc:	ebffb3c4 	bl	103114 <rt_kprintf>
  116200:	e3a010ee 	mov	r1, #238	; 0xee
  116204:	e3060f90 	movw	r0, #28560	; 0x6f90
  116208:	e3400014 	movt	r0, #20
  11620c:	ebffd3b3 	bl	10b0e0 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  116210:	e3a020f0 	mov	r2, #240	; 0xf0
  116214:	e3061f90 	movw	r1, #28560	; 0x6f90
  116218:	e3401014 	movt	r1, #20
  11621c:	e3a00009 	mov	r0, #9
  116220:	eb000ba8 	bl	1190c8 <memp_malloc_fn>
  116224:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116228:	e51b3008 	ldr	r3, [fp, #-8]
  11622c:	e3530000 	cmp	r3, #0
  116230:	1a000001 	bne	11623c <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  116234:	e3e03000 	mvn	r3, #0
  116238:	ea00001d 	b	1162b4 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  11623c:	e51b3008 	ldr	r3, [fp, #-8]
  116240:	e3a02003 	mov	r2, #3
  116244:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  116248:	e51b3008 	ldr	r3, [fp, #-8]
  11624c:	e51b2010 	ldr	r2, [fp, #-16]
  116250:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116254:	e51b3008 	ldr	r3, [fp, #-8]
  116258:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11625c:	e5832008 	str	r2, [r3, #8]
  if (block) {
  116260:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  116264:	e3530000 	cmp	r3, #0
  116268:	0a000004 	beq	116280 <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  11626c:	e51b1008 	ldr	r1, [fp, #-8]
  116270:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  116274:	e3400014 	movt	r0, #20
  116278:	ebffd220 	bl	10ab00 <sys_mbox_post>
  11627c:	ea00000b 	b	1162b0 <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  116280:	e51b1008 	ldr	r1, [fp, #-8]
  116284:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  116288:	e3400014 	movt	r0, #20
  11628c:	ebffd2ec 	bl	10ae44 <sys_mbox_trypost>
  116290:	e1a03000 	mov	r3, r0
  116294:	e3530000 	cmp	r3, #0
  116298:	0a000004 	beq	1162b0 <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  11629c:	e51b1008 	ldr	r1, [fp, #-8]
  1162a0:	e3a00009 	mov	r0, #9
  1162a4:	eb000bef 	bl	119268 <memp_free>
      return ERR_MEM;
  1162a8:	e3e03000 	mvn	r3, #0
  1162ac:	ea000000 	b	1162b4 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  1162b0:	e3a03000 	mov	r3, #0
}
  1162b4:	e1a00003 	mov	r0, r3
  1162b8:	e24bd004 	sub	sp, fp, #4
  1162bc:	e8bd8800 	pop	{fp, pc}

001162c0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  1162c0:	e92d4800 	push	{fp, lr}
  1162c4:	e28db004 	add	fp, sp, #4
  1162c8:	e24dd010 	sub	sp, sp, #16
  1162cc:	e50b0008 	str	r0, [fp, #-8]
  1162d0:	e50b100c 	str	r1, [fp, #-12]
  1162d4:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  1162d8:	e30f0614 	movw	r0, #62996	; 0xf614
  1162dc:	e3400014 	movt	r0, #20
  1162e0:	ebffd18f 	bl	10a924 <sys_mutex_lock>
  fn(apimsg);
  1162e4:	e51b3008 	ldr	r3, [fp, #-8]
  1162e8:	e51b000c 	ldr	r0, [fp, #-12]
  1162ec:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  1162f0:	e30f0614 	movw	r0, #62996	; 0xf614
  1162f4:	e3400014 	movt	r0, #20
  1162f8:	ebffd195 	bl	10a954 <sys_mutex_unlock>
  return ERR_OK;
  1162fc:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  116300:	e1a00003 	mov	r0, r3
  116304:	e24bd004 	sub	sp, fp, #4
  116308:	e8bd8800 	pop	{fp, pc}

0011630c <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  11630c:	e92d4800 	push	{fp, lr}
  116310:	e28db004 	add	fp, sp, #4
  116314:	e24dd010 	sub	sp, sp, #16
  116318:	e50b0010 	str	r0, [fp, #-16]
  11631c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  116320:	e30f0614 	movw	r0, #62996	; 0xf614
  116324:	e3400014 	movt	r0, #20
  116328:	ebffd17d 	bl	10a924 <sys_mutex_lock>
  err = fn(call);
  11632c:	e51b3010 	ldr	r3, [fp, #-16]
  116330:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116334:	e12fff33 	blx	r3
  116338:	e1a03000 	mov	r3, r0
  11633c:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  116340:	e30f0614 	movw	r0, #62996	; 0xf614
  116344:	e3400014 	movt	r0, #20
  116348:	ebffd181 	bl	10a954 <sys_mutex_unlock>
  return err;
  11634c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  116350:	e1a00003 	mov	r0, r3
  116354:	e24bd004 	sub	sp, fp, #4
  116358:	e8bd8800 	pop	{fp, pc}

0011635c <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  11635c:	e92d4800 	push	{fp, lr}
  116360:	e28db004 	add	fp, sp, #4
  116364:	e24dd010 	sub	sp, sp, #16
  116368:	e50b0010 	str	r0, [fp, #-16]
  11636c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  116370:	e30021a1 	movw	r2, #417	; 0x1a1
  116374:	e3061f90 	movw	r1, #28560	; 0x6f90
  116378:	e3401014 	movt	r1, #20
  11637c:	e3a00009 	mov	r0, #9
  116380:	eb000b50 	bl	1190c8 <memp_malloc_fn>
  116384:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116388:	e51b3008 	ldr	r3, [fp, #-8]
  11638c:	e3530000 	cmp	r3, #0
  116390:	1a000001 	bne	11639c <tcpip_callbackmsg_new+0x40>
    return NULL;
  116394:	e3a03000 	mov	r3, #0
  116398:	ea000009 	b	1163c4 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  11639c:	e51b3008 	ldr	r3, [fp, #-8]
  1163a0:	e3a02004 	mov	r2, #4
  1163a4:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  1163a8:	e51b3008 	ldr	r3, [fp, #-8]
  1163ac:	e51b2010 	ldr	r2, [fp, #-16]
  1163b0:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  1163b4:	e51b3008 	ldr	r3, [fp, #-8]
  1163b8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1163bc:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  1163c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1163c4:	e1a00003 	mov	r0, r3
  1163c8:	e24bd004 	sub	sp, fp, #4
  1163cc:	e8bd8800 	pop	{fp, pc}

001163d0 <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  1163d0:	e92d4800 	push	{fp, lr}
  1163d4:	e28db004 	add	fp, sp, #4
  1163d8:	e24dd008 	sub	sp, sp, #8
  1163dc:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  1163e0:	e51b1008 	ldr	r1, [fp, #-8]
  1163e4:	e3a00009 	mov	r0, #9
  1163e8:	eb000b9e 	bl	119268 <memp_free>
}
  1163ec:	e320f000 	nop	{0}
  1163f0:	e24bd004 	sub	sp, fp, #4
  1163f4:	e8bd8800 	pop	{fp, pc}

001163f8 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  1163f8:	e92d4800 	push	{fp, lr}
  1163fc:	e28db004 	add	fp, sp, #4
  116400:	e24dd008 	sub	sp, sp, #8
  116404:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116408:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  11640c:	e3400014 	movt	r0, #20
  116410:	ebffd2e9 	bl	10afbc <sys_mbox_valid>
  116414:	e1a03000 	mov	r3, r0
  116418:	e3530000 	cmp	r3, #0
  11641c:	1a000006 	bne	11643c <tcpip_trycallback+0x44>
  116420:	e3060fbc 	movw	r0, #28604	; 0x6fbc
  116424:	e3400014 	movt	r0, #20
  116428:	ebffb339 	bl	103114 <rt_kprintf>
  11642c:	e3a01d07 	mov	r1, #448	; 0x1c0
  116430:	e3060f90 	movw	r0, #28560	; 0x6f90
  116434:	e3400014 	movt	r0, #20
  116438:	ebffd328 	bl	10b0e0 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  11643c:	e51b1008 	ldr	r1, [fp, #-8]
  116440:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  116444:	e3400014 	movt	r0, #20
  116448:	ebffd27d 	bl	10ae44 <sys_mbox_trypost>
  11644c:	e1a03000 	mov	r3, r0
}
  116450:	e1a00003 	mov	r0, r3
  116454:	e24bd004 	sub	sp, fp, #4
  116458:	e8bd8800 	pop	{fp, pc}

0011645c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  11645c:	e92d4800 	push	{fp, lr}
  116460:	e28db004 	add	fp, sp, #4
  116464:	e24dd010 	sub	sp, sp, #16
  116468:	e50b0008 	str	r0, [fp, #-8]
  11646c:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  116470:	eb0009b8 	bl	118b58 <lwip_init>

  tcpip_init_done = initfunc;
  116474:	e30d3c54 	movw	r3, #56404	; 0xdc54
  116478:	e3403014 	movt	r3, #20
  11647c:	e51b2008 	ldr	r2, [fp, #-8]
  116480:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  116484:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116488:	e3403014 	movt	r3, #20
  11648c:	e51b200c 	ldr	r2, [fp, #-12]
  116490:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  116494:	e3001101 	movw	r1, #257	; 0x101
  116498:	e30d0c5c 	movw	r0, #56412	; 0xdc5c
  11649c:	e3400014 	movt	r0, #20
  1164a0:	ebffd156 	bl	10aa00 <sys_mbox_new>
  1164a4:	e1a03000 	mov	r3, r0
  1164a8:	e3530000 	cmp	r3, #0
  1164ac:	0a000006 	beq	1164cc <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  1164b0:	e3060fcc 	movw	r0, #28620	; 0x6fcc
  1164b4:	e3400014 	movt	r0, #20
  1164b8:	ebffb315 	bl	103114 <rt_kprintf>
  1164bc:	e30011d5 	movw	r1, #469	; 0x1d5
  1164c0:	e3060f90 	movw	r0, #28560	; 0x6f90
  1164c4:	e3400014 	movt	r0, #20
  1164c8:	ebffd304 	bl	10b0e0 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  1164cc:	e30f0614 	movw	r0, #62996	; 0xf614
  1164d0:	e3400014 	movt	r0, #20
  1164d4:	ebffd0ea 	bl	10a884 <sys_mutex_new>
  1164d8:	e1a03000 	mov	r3, r0
  1164dc:	e3530000 	cmp	r3, #0
  1164e0:	0a000006 	beq	116500 <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  1164e4:	e3060ff0 	movw	r0, #28656	; 0x6ff0
  1164e8:	e3400014 	movt	r0, #20
  1164ec:	ebffb308 	bl	103114 <rt_kprintf>
  1164f0:	e30011d9 	movw	r1, #473	; 0x1d9
  1164f4:	e3060f90 	movw	r0, #28560	; 0x6f90
  1164f8:	e3400014 	movt	r0, #20
  1164fc:	ebffd2f7 	bl	10b0e0 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  116500:	e3a03017 	mov	r3, #23
  116504:	e58d3000 	str	r3, [sp]
  116508:	e3a03a02 	mov	r3, #8192	; 0x2000
  11650c:	e3a02000 	mov	r2, #0
  116510:	e3051f08 	movw	r1, #24328	; 0x5f08
  116514:	e3401011 	movt	r1, #17
  116518:	e3070014 	movw	r0, #28692	; 0x7014
  11651c:	e3400014 	movt	r0, #20
  116520:	ebffd2ba 	bl	10b010 <sys_thread_new>
}
  116524:	e320f000 	nop	{0}
  116528:	e24bd004 	sub	sp, fp, #4
  11652c:	e8bd8800 	pop	{fp, pc}

00116530 <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  116530:	e92d4800 	push	{fp, lr}
  116534:	e28db004 	add	fp, sp, #4
  116538:	e24dd010 	sub	sp, sp, #16
  11653c:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  116540:	e51b3010 	ldr	r3, [fp, #-16]
  116544:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  116548:	e51b0008 	ldr	r0, [fp, #-8]
  11654c:	eb001253 	bl	11aea0 <pbuf_free>
}
  116550:	e320f000 	nop	{0}
  116554:	e24bd004 	sub	sp, fp, #4
  116558:	e8bd8800 	pop	{fp, pc}

0011655c <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  11655c:	e92d4800 	push	{fp, lr}
  116560:	e28db004 	add	fp, sp, #4
  116564:	e24dd008 	sub	sp, sp, #8
  116568:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  11656c:	e3a02000 	mov	r2, #0
  116570:	e51b1008 	ldr	r1, [fp, #-8]
  116574:	e3060530 	movw	r0, #25904	; 0x6530
  116578:	e3400011 	movt	r0, #17
  11657c:	ebffff0f 	bl	1161c0 <tcpip_callback_with_block>
  116580:	e1a03000 	mov	r3, r0
}
  116584:	e1a00003 	mov	r0, r3
  116588:	e24bd004 	sub	sp, fp, #4
  11658c:	e8bd8800 	pop	{fp, pc}

00116590 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  116590:	e92d4800 	push	{fp, lr}
  116594:	e28db004 	add	fp, sp, #4
  116598:	e24dd008 	sub	sp, sp, #8
  11659c:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  1165a0:	e3a02000 	mov	r2, #0
  1165a4:	e51b1008 	ldr	r1, [fp, #-8]
  1165a8:	e30b0214 	movw	r0, #45588	; 0xb214
  1165ac:	e3400010 	movt	r0, #16
  1165b0:	ebffff02 	bl	1161c0 <tcpip_callback_with_block>
  1165b4:	e1a03000 	mov	r3, r0
}
  1165b8:	e1a00003 	mov	r0, r3
  1165bc:	e24bd004 	sub	sp, fp, #4
  1165c0:	e8bd8800 	pop	{fp, pc}

001165c4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  1165c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1165c8:	e28db000 	add	fp, sp, #0
  1165cc:	e24dd00c 	sub	sp, sp, #12
  1165d0:	e1a03000 	mov	r3, r0
  1165d4:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  1165d8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1165dc:	e6bf3fb3 	rev16	r3, r3
  1165e0:	e6ff3073 	uxth	r3, r3
}
  1165e4:	e1a00003 	mov	r0, r3
  1165e8:	e28bd000 	add	sp, fp, #0
  1165ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1165f0:	e12fff1e 	bx	lr

001165f4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  1165f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1165f8:	e28db000 	add	fp, sp, #0
  1165fc:	e24dd00c 	sub	sp, sp, #12
  116600:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  116604:	e51b3008 	ldr	r3, [fp, #-8]
  116608:	e1a02c03 	lsl	r2, r3, #24
  11660c:	e51b3008 	ldr	r3, [fp, #-8]
  116610:	e1a03403 	lsl	r3, r3, #8
  116614:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  116618:	e1822003 	orr	r2, r2, r3
  11661c:	e51b3008 	ldr	r3, [fp, #-8]
  116620:	e1a03423 	lsr	r3, r3, #8
  116624:	e2033cff 	and	r3, r3, #65280	; 0xff00
  116628:	e1822003 	orr	r2, r2, r3
  11662c:	e51b3008 	ldr	r3, [fp, #-8]
  116630:	e1a03c23 	lsr	r3, r3, #24
  116634:	e1823003 	orr	r3, r2, r3
}
  116638:	e1a00003 	mov	r0, r3
  11663c:	e28bd000 	add	sp, fp, #0
  116640:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116644:	e12fff1e 	bx	lr

00116648 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  116648:	e92d4800 	push	{fp, lr}
  11664c:	e28db004 	add	fp, sp, #4
  116650:	e24dd018 	sub	sp, sp, #24
  116654:	e50b0010 	str	r0, [fp, #-16]
  116658:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11665c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  116660:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116664:	eb00ab8f 	bl	1414a8 <strlen>
  116668:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  11666c:	e51b300c 	ldr	r3, [fp, #-12]
  116670:	e3530000 	cmp	r3, #0
  116674:	1a000001 	bne	116680 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  116678:	e51b3010 	ldr	r3, [fp, #-16]
  11667c:	ea000021 	b	116708 <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  116680:	e51b3010 	ldr	r3, [fp, #-16]
  116684:	e50b3008 	str	r3, [fp, #-8]
  116688:	ea000011 	b	1166d4 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  11668c:	e51b3008 	ldr	r3, [fp, #-8]
  116690:	e5d32000 	ldrb	r2, [r3]
  116694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116698:	e5d33000 	ldrb	r3, [r3]
  11669c:	e1520003 	cmp	r2, r3
  1166a0:	1a000008 	bne	1166c8 <lwip_strnstr+0x80>
  1166a4:	e51b200c 	ldr	r2, [fp, #-12]
  1166a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1166ac:	e51b0008 	ldr	r0, [fp, #-8]
  1166b0:	eb00aba8 	bl	141558 <strncmp>
  1166b4:	e1a03000 	mov	r3, r0
  1166b8:	e3530000 	cmp	r3, #0
  1166bc:	1a000001 	bne	1166c8 <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  1166c0:	e51b3008 	ldr	r3, [fp, #-8]
  1166c4:	ea00000f 	b	116708 <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  1166c8:	e51b3008 	ldr	r3, [fp, #-8]
  1166cc:	e2833001 	add	r3, r3, #1
  1166d0:	e50b3008 	str	r3, [fp, #-8]
  1166d4:	e51b3008 	ldr	r3, [fp, #-8]
  1166d8:	e5d33000 	ldrb	r3, [r3]
  1166dc:	e3530000 	cmp	r3, #0
  1166e0:	0a000007 	beq	116704 <lwip_strnstr+0xbc>
  1166e4:	e51b2008 	ldr	r2, [fp, #-8]
  1166e8:	e51b300c 	ldr	r3, [fp, #-12]
  1166ec:	e0822003 	add	r2, r2, r3
  1166f0:	e51b1010 	ldr	r1, [fp, #-16]
  1166f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1166f8:	e0813003 	add	r3, r1, r3
  1166fc:	e1520003 	cmp	r2, r3
  116700:	9affffe1 	bls	11668c <lwip_strnstr+0x44>
    }
  }
  return NULL;
  116704:	e3a03000 	mov	r3, #0
}
  116708:	e1a00003 	mov	r0, r3
  11670c:	e24bd004 	sub	sp, fp, #4
  116710:	e8bd8800 	pop	{fp, pc}

00116714 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  116714:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116718:	e28db000 	add	fp, sp, #0
  11671c:	e24dd014 	sub	sp, sp, #20
  116720:	e50b0010 	str	r0, [fp, #-16]
  116724:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  116728:	e51b3010 	ldr	r3, [fp, #-16]
  11672c:	e2832001 	add	r2, r3, #1
  116730:	e50b2010 	str	r2, [fp, #-16]
  116734:	e5d33000 	ldrb	r3, [r3]
  116738:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  11673c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116740:	e2832001 	add	r2, r3, #1
  116744:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116748:	e5d33000 	ldrb	r3, [r3]
  11674c:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116750:	e55b2005 	ldrb	r2, [fp, #-5]
  116754:	e55b3006 	ldrb	r3, [fp, #-6]
  116758:	e1520003 	cmp	r2, r3
  11675c:	0a000014 	beq	1167b4 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  116760:	e55b3005 	ldrb	r3, [fp, #-5]
  116764:	e3833020 	orr	r3, r3, #32
  116768:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  11676c:	e55b3007 	ldrb	r3, [fp, #-7]
  116770:	e3530060 	cmp	r3, #96	; 0x60
  116774:	9a00000b 	bls	1167a8 <lwip_stricmp+0x94>
  116778:	e55b3007 	ldrb	r3, [fp, #-7]
  11677c:	e353007a 	cmp	r3, #122	; 0x7a
  116780:	8a000008 	bhi	1167a8 <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116784:	e55b3006 	ldrb	r3, [fp, #-6]
  116788:	e3833020 	orr	r3, r3, #32
  11678c:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116790:	e55b2007 	ldrb	r2, [fp, #-7]
  116794:	e55b3008 	ldrb	r3, [fp, #-8]
  116798:	e1520003 	cmp	r2, r3
  11679c:	0a000003 	beq	1167b0 <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  1167a0:	e3a03001 	mov	r3, #1
  1167a4:	ea000006 	b	1167c4 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  1167a8:	e3a03001 	mov	r3, #1
  1167ac:	ea000004 	b	1167c4 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1167b0:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  1167b4:	e55b3005 	ldrb	r3, [fp, #-5]
  1167b8:	e3530000 	cmp	r3, #0
  1167bc:	1affffd9 	bne	116728 <lwip_stricmp+0x14>
  return 0;
  1167c0:	e3a03000 	mov	r3, #0
}
  1167c4:	e1a00003 	mov	r0, r3
  1167c8:	e28bd000 	add	sp, fp, #0
  1167cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1167d0:	e12fff1e 	bx	lr

001167d4 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  1167d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1167d8:	e28db000 	add	fp, sp, #0
  1167dc:	e24dd01c 	sub	sp, sp, #28
  1167e0:	e50b0010 	str	r0, [fp, #-16]
  1167e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1167e8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  1167ec:	e51b3010 	ldr	r3, [fp, #-16]
  1167f0:	e2832001 	add	r2, r3, #1
  1167f4:	e50b2010 	str	r2, [fp, #-16]
  1167f8:	e5d33000 	ldrb	r3, [r3]
  1167fc:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116804:	e2832001 	add	r2, r3, #1
  116808:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  11680c:	e5d33000 	ldrb	r3, [r3]
  116810:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116814:	e55b2005 	ldrb	r2, [fp, #-5]
  116818:	e55b3006 	ldrb	r3, [fp, #-6]
  11681c:	e1520003 	cmp	r2, r3
  116820:	0a000014 	beq	116878 <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  116824:	e55b3005 	ldrb	r3, [fp, #-5]
  116828:	e3833020 	orr	r3, r3, #32
  11682c:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116830:	e55b3007 	ldrb	r3, [fp, #-7]
  116834:	e3530060 	cmp	r3, #96	; 0x60
  116838:	9a00000b 	bls	11686c <lwip_strnicmp+0x98>
  11683c:	e55b3007 	ldrb	r3, [fp, #-7]
  116840:	e353007a 	cmp	r3, #122	; 0x7a
  116844:	8a000008 	bhi	11686c <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116848:	e55b3006 	ldrb	r3, [fp, #-6]
  11684c:	e3833020 	orr	r3, r3, #32
  116850:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116854:	e55b2007 	ldrb	r2, [fp, #-7]
  116858:	e55b3008 	ldrb	r3, [fp, #-8]
  11685c:	e1520003 	cmp	r2, r3
  116860:	0a000003 	beq	116874 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116864:	e3a03001 	mov	r3, #1
  116868:	ea00000b 	b	11689c <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  11686c:	e3a03001 	mov	r3, #1
  116870:	ea000009 	b	11689c <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116874:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  116878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11687c:	e2432001 	sub	r2, r3, #1
  116880:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  116884:	e3530000 	cmp	r3, #0
  116888:	0a000002 	beq	116898 <lwip_strnicmp+0xc4>
  11688c:	e55b3005 	ldrb	r3, [fp, #-5]
  116890:	e3530000 	cmp	r3, #0
  116894:	1affffd4 	bne	1167ec <lwip_strnicmp+0x18>
  return 0;
  116898:	e3a03000 	mov	r3, #0
}
  11689c:	e1a00003 	mov	r0, r3
  1168a0:	e28bd000 	add	sp, fp, #0
  1168a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1168a8:	e12fff1e 	bx	lr

001168ac <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  1168ac:	e92d4800 	push	{fp, lr}
  1168b0:	e28db004 	add	fp, sp, #4
  1168b4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1168b8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1168bc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1168c0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  1168c4:	e3a0300a 	mov	r3, #10
  1168c8:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  1168cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168d0:	e50b3008 	str	r3, [fp, #-8]
  1168d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168d8:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  1168dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1168e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  1168e4:	e51b1010 	ldr	r1, [fp, #-16]
  1168e8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1168ec:	eb008860 	bl	138a74 <__divsi3>
  1168f0:	e1a03000 	mov	r3, r0
  1168f4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  1168f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1168fc:	e51b2010 	ldr	r2, [fp, #-16]
  116900:	e0030392 	mul	r3, r2, r3
  116904:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116908:	e0423003 	sub	r3, r2, r3
  11690c:	e2831023 	add	r1, r3, #35	; 0x23
  116910:	e51b2008 	ldr	r2, [fp, #-8]
  116914:	e2823001 	add	r3, r2, #1
  116918:	e50b3008 	str	r3, [fp, #-8]
  11691c:	e307301c 	movw	r3, #28700	; 0x701c
  116920:	e3403014 	movt	r3, #20
  116924:	e7d33001 	ldrb	r3, [r3, r1]
  116928:	e5c23000 	strb	r3, [r2]
  } while(number);
  11692c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116930:	e3530000 	cmp	r3, #0
  116934:	1affffe8 	bne	1168dc <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  116938:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11693c:	e3530000 	cmp	r3, #0
  116940:	aa000004 	bge	116958 <lwip_itoa+0xac>
     *ptr++ = '-';
  116944:	e51b3008 	ldr	r3, [fp, #-8]
  116948:	e2832001 	add	r2, r3, #1
  11694c:	e50b2008 	str	r2, [fp, #-8]
  116950:	e3a0202d 	mov	r2, #45	; 0x2d
  116954:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  116958:	e51b3008 	ldr	r3, [fp, #-8]
  11695c:	e2432001 	sub	r2, r3, #1
  116960:	e50b2008 	str	r2, [fp, #-8]
  116964:	e3a02000 	mov	r2, #0
  116968:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  11696c:	ea00000d 	b	1169a8 <lwip_itoa+0xfc>
    tmp_char = *ptr;
  116970:	e51b3008 	ldr	r3, [fp, #-8]
  116974:	e5d33000 	ldrb	r3, [r3]
  116978:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  11697c:	e51b3008 	ldr	r3, [fp, #-8]
  116980:	e2432001 	sub	r2, r3, #1
  116984:	e50b2008 	str	r2, [fp, #-8]
  116988:	e51b200c 	ldr	r2, [fp, #-12]
  11698c:	e5d22000 	ldrb	r2, [r2]
  116990:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  116994:	e51b300c 	ldr	r3, [fp, #-12]
  116998:	e2832001 	add	r2, r3, #1
  11699c:	e50b200c 	str	r2, [fp, #-12]
  1169a0:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1169a4:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  1169a8:	e51b200c 	ldr	r2, [fp, #-12]
  1169ac:	e51b3008 	ldr	r3, [fp, #-8]
  1169b0:	e1520003 	cmp	r2, r3
  1169b4:	3affffed 	bcc	116970 <lwip_itoa+0xc4>
  }
}
  1169b8:	e320f000 	nop	{0}
  1169bc:	e24bd004 	sub	sp, fp, #4
  1169c0:	e8bd8800 	pop	{fp, pc}

001169c4 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  1169c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1169c8:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  1169cc:	e320f000 	nop	{0}
  1169d0:	e28bd000 	add	sp, fp, #0
  1169d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1169d8:	e12fff1e 	bx	lr

001169dc <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  1169dc:	e92d4800 	push	{fp, lr}
  1169e0:	e28db004 	add	fp, sp, #4
  1169e4:	e24dd008 	sub	sp, sp, #8
  1169e8:	e1a03000 	mov	r3, r0
  1169ec:	e50b100c 	str	r1, [fp, #-12]
  1169f0:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  1169f4:	e55b3005 	ldrb	r3, [fp, #-5]
  1169f8:	e3530001 	cmp	r3, #1
  1169fc:	8a00001f 	bhi	116a80 <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  116a00:	e51b300c 	ldr	r3, [fp, #-12]
  116a04:	e3530000 	cmp	r3, #0
  116a08:	0a000015 	beq	116a64 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  116a0c:	e55b2005 	ldrb	r2, [fp, #-5]
  116a10:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  116a14:	e3403014 	movt	r3, #20
  116a18:	e51b100c 	ldr	r1, [fp, #-12]
  116a1c:	e5911000 	ldr	r1, [r1]
  116a20:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  116a24:	e30c3a48 	movw	r3, #51784	; 0xca48
  116a28:	e3403015 	movt	r3, #21
  116a2c:	e5933000 	ldr	r3, [r3]
  116a30:	e3530000 	cmp	r3, #0
  116a34:	0a000011 	beq	116a80 <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  116a38:	e30c3a48 	movw	r3, #51784	; 0xca48
  116a3c:	e3403015 	movt	r3, #21
  116a40:	e5933000 	ldr	r3, [r3]
  116a44:	e2833042 	add	r3, r3, #66	; 0x42
  116a48:	e1a00003 	mov	r0, r3
  116a4c:	ebffbaa8 	bl	1054f4 <netdev_get_by_name>
  116a50:	e55b3005 	ldrb	r3, [fp, #-5]
  116a54:	e51b200c 	ldr	r2, [fp, #-12]
  116a58:	e1a01003 	mov	r1, r3
  116a5c:	ebffbe32 	bl	10632c <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  116a60:	ea000006 	b	116a80 <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  116a64:	e55b1005 	ldrb	r1, [fp, #-5]
  116a68:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  116a6c:	e3403014 	movt	r3, #20
  116a70:	e30928f8 	movw	r2, #39160	; 0x98f8
  116a74:	e3402014 	movt	r2, #20
  116a78:	e5922000 	ldr	r2, [r2]
  116a7c:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  116a80:	e320f000 	nop	{0}
  116a84:	e24bd004 	sub	sp, fp, #4
  116a88:	e8bd8800 	pop	{fp, pc}

00116a8c <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  116a8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116a90:	e28db000 	add	fp, sp, #0
  116a94:	e24dd00c 	sub	sp, sp, #12
  116a98:	e1a03000 	mov	r3, r0
  116a9c:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116aa0:	e55b3005 	ldrb	r3, [fp, #-5]
  116aa4:	e3530001 	cmp	r3, #1
  116aa8:	8a000005 	bhi	116ac4 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116aac:	e55b3005 	ldrb	r3, [fp, #-5]
  116ab0:	e1a02103 	lsl	r2, r3, #2
  116ab4:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  116ab8:	e3403014 	movt	r3, #20
  116abc:	e0823003 	add	r3, r2, r3
  116ac0:	ea000001 	b	116acc <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  116ac4:	e30938f8 	movw	r3, #39160	; 0x98f8
  116ac8:	e3403014 	movt	r3, #20
  }
}
  116acc:	e1a00003 	mov	r0, r3
  116ad0:	e28bd000 	add	sp, fp, #0
  116ad4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116ad8:	e12fff1e 	bx	lr

00116adc <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116adc:	e92d4800 	push	{fp, lr}
  116ae0:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  116ae4:	eb000360 	bl	11786c <dns_check_entries>
}
  116ae8:	e320f000 	nop	{0}
  116aec:	e8bd8800 	pop	{fp, pc}

00116af0 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  116af0:	e92d4800 	push	{fp, lr}
  116af4:	e28db004 	add	fp, sp, #4
  116af8:	e24dd010 	sub	sp, sp, #16
  116afc:	e50b0010 	str	r0, [fp, #-16]
  116b00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116b04:	e3a03000 	mov	r3, #0
  116b08:	e54b3005 	strb	r3, [fp, #-5]
  116b0c:	ea000029 	b	116bb8 <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116b10:	e55b2005 	ldrb	r2, [fp, #-5]
  116b14:	e30d3c74 	movw	r3, #56436	; 0xdc74
  116b18:	e3403014 	movt	r3, #20
  116b1c:	e3a01e11 	mov	r1, #272	; 0x110
  116b20:	e0020291 	mul	r2, r1, r2
  116b24:	e0833002 	add	r3, r3, r2
  116b28:	e283300a 	add	r3, r3, #10
  116b2c:	e5d33000 	ldrb	r3, [r3]
  116b30:	e3530003 	cmp	r3, #3
  116b34:	1a00001c 	bne	116bac <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  116b38:	e55b3005 	ldrb	r3, [fp, #-5]
  116b3c:	e3a02e11 	mov	r2, #272	; 0x110
  116b40:	e0030392 	mul	r3, r2, r3
  116b44:	e2832010 	add	r2, r3, #16
  116b48:	e30d3c74 	movw	r3, #56436	; 0xdc74
  116b4c:	e3403014 	movt	r3, #20
  116b50:	e0823003 	add	r3, r2, r3
  116b54:	e3a02c01 	mov	r2, #256	; 0x100
  116b58:	e1a01003 	mov	r1, r3
  116b5c:	e51b0010 	ldr	r0, [fp, #-16]
  116b60:	ebffff1b 	bl	1167d4 <lwip_strnicmp>
  116b64:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116b68:	e3530000 	cmp	r3, #0
  116b6c:	1a00000e 	bne	116bac <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  116b70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b74:	e3530000 	cmp	r3, #0
  116b78:	0a000009 	beq	116ba4 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  116b7c:	e55b2005 	ldrb	r2, [fp, #-5]
  116b80:	e30d3c74 	movw	r3, #56436	; 0xdc74
  116b84:	e3403014 	movt	r3, #20
  116b88:	e3a01e11 	mov	r1, #272	; 0x110
  116b8c:	e0020291 	mul	r2, r1, r2
  116b90:	e0833002 	add	r3, r3, r2
  116b94:	e2833004 	add	r3, r3, #4
  116b98:	e5932000 	ldr	r2, [r3]
  116b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ba0:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  116ba4:	e3a03000 	mov	r3, #0
  116ba8:	ea000006 	b	116bc8 <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116bac:	e55b3005 	ldrb	r3, [fp, #-5]
  116bb0:	e2833001 	add	r3, r3, #1
  116bb4:	e54b3005 	strb	r3, [fp, #-5]
  116bb8:	e55b3005 	ldrb	r3, [fp, #-5]
  116bbc:	e3530003 	cmp	r3, #3
  116bc0:	9affffd2 	bls	116b10 <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  116bc4:	e3e0300f 	mvn	r3, #15
}
  116bc8:	e1a00003 	mov	r0, r3
  116bcc:	e24bd004 	sub	sp, fp, #4
  116bd0:	e8bd8800 	pop	{fp, pc}

00116bd4 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  116bd4:	e92d4800 	push	{fp, lr}
  116bd8:	e28db004 	add	fp, sp, #4
  116bdc:	e24dd020 	sub	sp, sp, #32
  116be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  116be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116be8:	e1a03002 	mov	r3, r2
  116bec:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  116bf0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  116bf4:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  116bf8:	e15b30ba 	ldrh	r3, [fp, #-10]
  116bfc:	e2832001 	add	r2, r3, #1
  116c00:	e14b20ba 	strh	r2, [fp, #-10]
  116c04:	e1a01003 	mov	r1, r3
  116c08:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116c0c:	eb001460 	bl	11bd94 <pbuf_try_get_at>
  116c10:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116c14:	e51b3008 	ldr	r3, [fp, #-8]
  116c18:	e3530000 	cmp	r3, #0
  116c1c:	aa000001 	bge	116c28 <dns_compare_name+0x54>
      return 0xFFFF;
  116c20:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c24:	ea000036 	b	116d04 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116c28:	e51b3008 	ldr	r3, [fp, #-8]
  116c2c:	e20330c0 	and	r3, r3, #192	; 0xc0
  116c30:	e35300c0 	cmp	r3, #192	; 0xc0
  116c34:	1a00001c 	bne	116cac <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  116c38:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c3c:	ea000030 	b	116d04 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  116c40:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c44:	e1a01003 	mov	r1, r3
  116c48:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116c4c:	eb001450 	bl	11bd94 <pbuf_try_get_at>
  116c50:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  116c54:	e51b3010 	ldr	r3, [fp, #-16]
  116c58:	e3530000 	cmp	r3, #0
  116c5c:	aa000001 	bge	116c68 <dns_compare_name+0x94>
          return 0xFFFF;
  116c60:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c64:	ea000026 	b	116d04 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  116c68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c6c:	e5d32000 	ldrb	r2, [r3]
  116c70:	e51b3010 	ldr	r3, [fp, #-16]
  116c74:	e6ef3073 	uxtb	r3, r3
  116c78:	e1520003 	cmp	r2, r3
  116c7c:	0a000001 	beq	116c88 <dns_compare_name+0xb4>
          return 0xFFFF;
  116c80:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c84:	ea00001e 	b	116d04 <dns_compare_name+0x130>
        }
        ++response_offset;
  116c88:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c8c:	e2833001 	add	r3, r3, #1
  116c90:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  116c94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c98:	e2833001 	add	r3, r3, #1
  116c9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  116ca0:	e51b3008 	ldr	r3, [fp, #-8]
  116ca4:	e2433001 	sub	r3, r3, #1
  116ca8:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116cac:	e51b3008 	ldr	r3, [fp, #-8]
  116cb0:	e3530000 	cmp	r3, #0
  116cb4:	caffffe1 	bgt	116c40 <dns_compare_name+0x6c>
      }
      ++query;
  116cb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116cbc:	e2833001 	add	r3, r3, #1
  116cc0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  116cc4:	e15b30ba 	ldrh	r3, [fp, #-10]
  116cc8:	e1a01003 	mov	r1, r3
  116ccc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116cd0:	eb00142f 	bl	11bd94 <pbuf_try_get_at>
  116cd4:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116cd8:	e51b3008 	ldr	r3, [fp, #-8]
  116cdc:	e3530000 	cmp	r3, #0
  116ce0:	aa000001 	bge	116cec <dns_compare_name+0x118>
      return 0xFFFF;
  116ce4:	e30f3fff 	movw	r3, #65535	; 0xffff
  116ce8:	ea000005 	b	116d04 <dns_compare_name+0x130>
    }
  } while (n != 0);
  116cec:	e51b3008 	ldr	r3, [fp, #-8]
  116cf0:	e3530000 	cmp	r3, #0
  116cf4:	1affffbf 	bne	116bf8 <dns_compare_name+0x24>

  return response_offset + 1;
  116cf8:	e15b30ba 	ldrh	r3, [fp, #-10]
  116cfc:	e2833001 	add	r3, r3, #1
  116d00:	e6ff3073 	uxth	r3, r3
}
  116d04:	e1a00003 	mov	r0, r3
  116d08:	e24bd004 	sub	sp, fp, #4
  116d0c:	e8bd8800 	pop	{fp, pc}

00116d10 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  116d10:	e92d4800 	push	{fp, lr}
  116d14:	e28db004 	add	fp, sp, #4
  116d18:	e24dd010 	sub	sp, sp, #16
  116d1c:	e50b0010 	str	r0, [fp, #-16]
  116d20:	e1a03001 	mov	r3, r1
  116d24:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116d28:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116d2c:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116d30:	e15b30b6 	ldrh	r3, [fp, #-6]
  116d34:	e2832001 	add	r2, r3, #1
  116d38:	e14b20b6 	strh	r2, [fp, #-6]
  116d3c:	e1a01003 	mov	r1, r3
  116d40:	e51b0010 	ldr	r0, [fp, #-16]
  116d44:	eb001412 	bl	11bd94 <pbuf_try_get_at>
  116d48:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116d4c:	e51b300c 	ldr	r3, [fp, #-12]
  116d50:	e3530000 	cmp	r3, #0
  116d54:	aa000001 	bge	116d60 <dns_skip_name+0x50>
      return 0xFFFF;
  116d58:	e30f3fff 	movw	r3, #65535	; 0xffff
  116d5c:	ea000023 	b	116df0 <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116d60:	e51b300c 	ldr	r3, [fp, #-12]
  116d64:	e20330c0 	and	r3, r3, #192	; 0xc0
  116d68:	e35300c0 	cmp	r3, #192	; 0xc0
  116d6c:	0a00001b 	beq	116de0 <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116d70:	e15b20b6 	ldrh	r2, [fp, #-6]
  116d74:	e51b300c 	ldr	r3, [fp, #-12]
  116d78:	e0823003 	add	r3, r2, r3
  116d7c:	e51b2010 	ldr	r2, [fp, #-16]
  116d80:	e1d220b8 	ldrh	r2, [r2, #8]
  116d84:	e1530002 	cmp	r3, r2
  116d88:	ba000001 	blt	116d94 <dns_skip_name+0x84>
        return 0xFFFF;
  116d8c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116d90:	ea000016 	b	116df0 <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116d94:	e51b300c 	ldr	r3, [fp, #-12]
  116d98:	e6ff2073 	uxth	r2, r3
  116d9c:	e15b30b6 	ldrh	r3, [fp, #-6]
  116da0:	e0823003 	add	r3, r2, r3
  116da4:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116da8:	e15b30b6 	ldrh	r3, [fp, #-6]
  116dac:	e1a01003 	mov	r1, r3
  116db0:	e51b0010 	ldr	r0, [fp, #-16]
  116db4:	eb0013f6 	bl	11bd94 <pbuf_try_get_at>
  116db8:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116dbc:	e51b300c 	ldr	r3, [fp, #-12]
  116dc0:	e3530000 	cmp	r3, #0
  116dc4:	aa000001 	bge	116dd0 <dns_skip_name+0xc0>
      return 0xFFFF;
  116dc8:	e30f3fff 	movw	r3, #65535	; 0xffff
  116dcc:	ea000007 	b	116df0 <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116dd0:	e51b300c 	ldr	r3, [fp, #-12]
  116dd4:	e3530000 	cmp	r3, #0
  116dd8:	1affffd4 	bne	116d30 <dns_skip_name+0x20>
  116ddc:	ea000000 	b	116de4 <dns_skip_name+0xd4>
      break;
  116de0:	e320f000 	nop	{0}

  return offset + 1;
  116de4:	e15b30b6 	ldrh	r3, [fp, #-6]
  116de8:	e2833001 	add	r3, r3, #1
  116dec:	e6ff3073 	uxth	r3, r3
}
  116df0:	e1a00003 	mov	r0, r3
  116df4:	e24bd004 	sub	sp, fp, #4
  116df8:	e8bd8800 	pop	{fp, pc}

00116dfc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116dfc:	e92d4800 	push	{fp, lr}
  116e00:	e28db004 	add	fp, sp, #4
  116e04:	e24dd040 	sub	sp, sp, #64	; 0x40
  116e08:	e1a03000 	mov	r3, r0
  116e0c:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116e10:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116e14:	e3a02e11 	mov	r2, #272	; 0x110
  116e18:	e0020392 	mul	r2, r2, r3
  116e1c:	e30d3c74 	movw	r3, #56436	; 0xdc74
  116e20:	e3403014 	movt	r3, #20
  116e24:	e0823003 	add	r3, r2, r3
  116e28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116e2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e30:	e5d3300b 	ldrb	r3, [r3, #11]
  116e34:	e3530001 	cmp	r3, #1
  116e38:	9a000006 	bls	116e58 <dns_send+0x5c>
  116e3c:	e3070068 	movw	r0, #28776	; 0x7068
  116e40:	e3400014 	movt	r0, #20
  116e44:	ebffb0b2 	bl	103114 <rt_kprintf>
  116e48:	e30012fa 	movw	r1, #762	; 0x2fa
  116e4c:	e3070080 	movw	r0, #28800	; 0x7080
  116e50:	e3400014 	movt	r0, #20
  116e54:	ebffd0a1 	bl	10b0e0 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116e58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e5c:	e5d3300b 	ldrb	r3, [r3, #11]
  116e60:	e1a02003 	mov	r2, r3
  116e64:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  116e68:	e3403014 	movt	r3, #20
  116e6c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e70:	e3530000 	cmp	r3, #0
  116e74:	1a000008 	bne	116e9c <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116e78:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116e7c:	e3a01000 	mov	r1, #0
  116e80:	e1a00003 	mov	r0, r3
  116e84:	eb00010f 	bl	1172c8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116e88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e8c:	e3a02000 	mov	r2, #0
  116e90:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116e94:	e3a03000 	mov	r3, #0
  116e98:	ea000089 	b	1170c4 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116e9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ea0:	e2833010 	add	r3, r3, #16
  116ea4:	e1a00003 	mov	r0, r3
  116ea8:	eb00a97e 	bl	1414a8 <strlen>
  116eac:	e1a03000 	mov	r3, r0
  116eb0:	e6ff3073 	uxth	r3, r3
  116eb4:	e2833012 	add	r3, r3, #18
  116eb8:	e6ff3073 	uxth	r3, r3
  116ebc:	e3a02000 	mov	r2, #0
  116ec0:	e1a01003 	mov	r1, r3
  116ec4:	e3a00000 	mov	r0, #0
  116ec8:	eb000ced 	bl	11a284 <pbuf_alloc>
  116ecc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116ed0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116ed4:	e3530000 	cmp	r3, #0
  116ed8:	0a000076 	beq	1170b8 <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116edc:	e24b3034 	sub	r3, fp, #52	; 0x34
  116ee0:	e3a0200c 	mov	r2, #12
  116ee4:	e3a01000 	mov	r1, #0
  116ee8:	e1a00003 	mov	r0, r3
  116eec:	eb00a8dc 	bl	141264 <memset>
    hdr.id = lwip_htons(entry->txid);
  116ef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ef4:	e1d330b8 	ldrh	r3, [r3, #8]
  116ef8:	e1a00003 	mov	r0, r3
  116efc:	ebfffdb0 	bl	1165c4 <lwip_htons>
  116f00:	e1a03000 	mov	r3, r0
  116f04:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116f08:	e3a03001 	mov	r3, #1
  116f0c:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116f10:	e3a03c01 	mov	r3, #256	; 0x100
  116f14:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116f18:	e24b3034 	sub	r3, fp, #52	; 0x34
  116f1c:	e3a0200c 	mov	r2, #12
  116f20:	e1a01003 	mov	r1, r3
  116f24:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116f28:	eb00128f 	bl	11b96c <pbuf_take>
    hostname = entry->name;
  116f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116f30:	e2833010 	add	r3, r3, #16
  116f34:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116f38:	e51b300c 	ldr	r3, [fp, #-12]
  116f3c:	e2433001 	sub	r3, r3, #1
  116f40:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116f44:	e3a0300c 	mov	r3, #12
  116f48:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116f4c:	e51b300c 	ldr	r3, [fp, #-12]
  116f50:	e2833001 	add	r3, r3, #1
  116f54:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116f58:	e51b300c 	ldr	r3, [fp, #-12]
  116f5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f60:	e3a03000 	mov	r3, #0
  116f64:	e54b300d 	strb	r3, [fp, #-13]
  116f68:	ea000005 	b	116f84 <dns_send+0x188>
        ++n;
  116f6c:	e55b300d 	ldrb	r3, [fp, #-13]
  116f70:	e2833001 	add	r3, r3, #1
  116f74:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f78:	e51b300c 	ldr	r3, [fp, #-12]
  116f7c:	e2833001 	add	r3, r3, #1
  116f80:	e50b300c 	str	r3, [fp, #-12]
  116f84:	e51b300c 	ldr	r3, [fp, #-12]
  116f88:	e5d33000 	ldrb	r3, [r3]
  116f8c:	e353002e 	cmp	r3, #46	; 0x2e
  116f90:	0a000003 	beq	116fa4 <dns_send+0x1a8>
  116f94:	e51b300c 	ldr	r3, [fp, #-12]
  116f98:	e5d33000 	ldrb	r3, [r3]
  116f9c:	e3530000 	cmp	r3, #0
  116fa0:	1afffff1 	bne	116f6c <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116fa4:	e51b200c 	ldr	r2, [fp, #-12]
  116fa8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116fac:	e0423003 	sub	r3, r2, r3
  116fb0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116fb4:	e55b200d 	ldrb	r2, [fp, #-13]
  116fb8:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fbc:	e1a01003 	mov	r1, r3
  116fc0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116fc4:	eb001390 	bl	11be0c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116fc8:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fcc:	e2833001 	add	r3, r3, #1
  116fd0:	e6ff3073 	uxth	r3, r3
  116fd4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116fd8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116fdc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116fe0:	eb0012de 	bl	11bb60 <pbuf_take_at>
      query_idx += n + 1;
  116fe4:	e55b300d 	ldrb	r3, [fp, #-13]
  116fe8:	e6ff2073 	uxth	r2, r3
  116fec:	e15b30b8 	ldrh	r3, [fp, #-8]
  116ff0:	e0823003 	add	r3, r2, r3
  116ff4:	e6ff3073 	uxth	r3, r3
  116ff8:	e2833001 	add	r3, r3, #1
  116ffc:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  117000:	e51b300c 	ldr	r3, [fp, #-12]
  117004:	e5d33000 	ldrb	r3, [r3]
  117008:	e3530000 	cmp	r3, #0
  11700c:	1affffce 	bne	116f4c <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  117010:	e15b30b8 	ldrh	r3, [fp, #-8]
  117014:	e3a02000 	mov	r2, #0
  117018:	e1a01003 	mov	r1, r3
  11701c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  117020:	eb001379 	bl	11be0c <pbuf_put_at>
    query_idx++;
  117024:	e15b30b8 	ldrh	r3, [fp, #-8]
  117028:	e2833001 	add	r3, r3, #1
  11702c:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  117030:	e3a03c01 	mov	r3, #256	; 0x100
  117034:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  117038:	e3a03c01 	mov	r3, #256	; 0x100
  11703c:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  117040:	e15b30b8 	ldrh	r3, [fp, #-8]
  117044:	e24b1038 	sub	r1, fp, #56	; 0x38
  117048:	e3a02004 	mov	r2, #4
  11704c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  117050:	eb0012c2 	bl	11bb60 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  117054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117058:	e5d3300f 	ldrb	r3, [r3, #15]
  11705c:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  117060:	e3a03035 	mov	r3, #53	; 0x35
  117064:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  117068:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11706c:	e5d3300b 	ldrb	r3, [r3, #11]
  117070:	e1a02103 	lsl	r2, r3, #2
  117074:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  117078:	e3403014 	movt	r3, #20
  11707c:	e0823003 	add	r3, r2, r3
  117080:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  117084:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  117088:	e30d3c60 	movw	r3, #56416	; 0xdc60
  11708c:	e3403014 	movt	r3, #20
  117090:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  117094:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117098:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11709c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1170a0:	eb00441e 	bl	128120 <udp_sendto>
  1170a4:	e1a03000 	mov	r3, r0
  1170a8:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  1170ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1170b0:	eb000f7a 	bl	11aea0 <pbuf_free>
  1170b4:	ea000001 	b	1170c0 <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  1170b8:	e3e03000 	mvn	r3, #0
  1170bc:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  1170c0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1170c4:	e1a00003 	mov	r0, r3
  1170c8:	e24bd004 	sub	sp, fp, #4
  1170cc:	e8bd8800 	pop	{fp, pc}

001170d0 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  1170d0:	e92d4800 	push	{fp, lr}
  1170d4:	e28db004 	add	fp, sp, #4
  1170d8:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  1170dc:	e3a0002e 	mov	r0, #46	; 0x2e
  1170e0:	eb00468c 	bl	128b18 <udp_new_ip_type>
  1170e4:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  1170e8:	e51b300c 	ldr	r3, [fp, #-12]
  1170ec:	e3530000 	cmp	r3, #0
  1170f0:	1a000001 	bne	1170fc <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  1170f4:	e3a03000 	mov	r3, #0
  1170f8:	ea000020 	b	117180 <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  1170fc:	eb009c1e 	bl	13e17c <rand>
  117100:	e1a03000 	mov	r3, r0
  117104:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  117108:	e15b30be 	ldrh	r3, [fp, #-14]
  11710c:	e3530b01 	cmp	r3, #1024	; 0x400
  117110:	2a000002 	bcs	117120 <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  117114:	e3e03007 	mvn	r3, #7
  117118:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  11711c:	ea000007 	b	117140 <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  117120:	e15b30be 	ldrh	r3, [fp, #-14]
  117124:	e1a02003 	mov	r2, r3
  117128:	e30918f8 	movw	r1, #39160	; 0x98f8
  11712c:	e3401014 	movt	r1, #20
  117130:	e51b000c 	ldr	r0, [fp, #-12]
  117134:	eb004542 	bl	128644 <udp_bind>
  117138:	e1a03000 	mov	r3, r0
  11713c:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  117140:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117144:	e3730008 	cmn	r3, #8
  117148:	0affffeb 	beq	1170fc <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  11714c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117150:	e3530000 	cmp	r3, #0
  117154:	0a000003 	beq	117168 <dns_alloc_random_port+0x98>
    udp_remove(ret);
  117158:	e51b000c 	ldr	r0, [fp, #-12]
  11715c:	eb004622 	bl	1289ec <udp_remove>
    return NULL;
  117160:	e3a03000 	mov	r3, #0
  117164:	ea000005 	b	117180 <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  117168:	e3a02000 	mov	r2, #0
  11716c:	e3071978 	movw	r1, #31096	; 0x7978
  117170:	e3401011 	movt	r1, #17
  117174:	e51b000c 	ldr	r0, [fp, #-12]
  117178:	eb00460b 	bl	1289ac <udp_recv>
  return ret;
  11717c:	e51b300c 	ldr	r3, [fp, #-12]
}
  117180:	e1a00003 	mov	r0, r3
  117184:	e24bd004 	sub	sp, fp, #4
  117188:	e8bd8800 	pop	{fp, pc}

0011718c <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  11718c:	e92d4810 	push	{r4, fp, lr}
  117190:	e28db008 	add	fp, sp, #8
  117194:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  117198:	e3a03000 	mov	r3, #0
  11719c:	e54b300d 	strb	r3, [fp, #-13]
  1171a0:	ea000008 	b	1171c8 <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  1171a4:	e55b200d 	ldrb	r2, [fp, #-13]
  1171a8:	e30d3c60 	movw	r3, #56416	; 0xdc60
  1171ac:	e3403014 	movt	r3, #20
  1171b0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1171b4:	e3530000 	cmp	r3, #0
  1171b8:	0a000006 	beq	1171d8 <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  1171bc:	e55b300d 	ldrb	r3, [fp, #-13]
  1171c0:	e2833001 	add	r3, r3, #1
  1171c4:	e54b300d 	strb	r3, [fp, #-13]
  1171c8:	e55b300d 	ldrb	r3, [fp, #-13]
  1171cc:	e3530003 	cmp	r3, #3
  1171d0:	9afffff3 	bls	1171a4 <dns_alloc_pcb+0x18>
  1171d4:	ea000000 	b	1171dc <dns_alloc_pcb+0x50>
      break;
  1171d8:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  1171dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1171e0:	e3530003 	cmp	r3, #3
  1171e4:	8a000011 	bhi	117230 <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  1171e8:	e55b400d 	ldrb	r4, [fp, #-13]
  1171ec:	ebffffb7 	bl	1170d0 <dns_alloc_random_port>
  1171f0:	e1a02000 	mov	r2, r0
  1171f4:	e30d3c60 	movw	r3, #56416	; 0xdc60
  1171f8:	e3403014 	movt	r3, #20
  1171fc:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  117200:	e55b200d 	ldrb	r2, [fp, #-13]
  117204:	e30d3c60 	movw	r3, #56416	; 0xdc60
  117208:	e3403014 	movt	r3, #20
  11720c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117210:	e3530000 	cmp	r3, #0
  117214:	0a000005 	beq	117230 <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  117218:	e30d3c70 	movw	r3, #56432	; 0xdc70
  11721c:	e3403014 	movt	r3, #20
  117220:	e55b200d 	ldrb	r2, [fp, #-13]
  117224:	e5c32000 	strb	r2, [r3]
      return i;
  117228:	e55b300d 	ldrb	r3, [fp, #-13]
  11722c:	ea000022 	b	1172bc <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  117230:	e3a03000 	mov	r3, #0
  117234:	e54b300d 	strb	r3, [fp, #-13]
  117238:	e30d3c70 	movw	r3, #56432	; 0xdc70
  11723c:	e3403014 	movt	r3, #20
  117240:	e5d33000 	ldrb	r3, [r3]
  117244:	e2833001 	add	r3, r3, #1
  117248:	e54b300e 	strb	r3, [fp, #-14]
  11724c:	ea000016 	b	1172ac <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  117250:	e55b300e 	ldrb	r3, [fp, #-14]
  117254:	e3530003 	cmp	r3, #3
  117258:	9a000001 	bls	117264 <dns_alloc_pcb+0xd8>
      idx = 0;
  11725c:	e3a03000 	mov	r3, #0
  117260:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  117264:	e55b200e 	ldrb	r2, [fp, #-14]
  117268:	e30d3c60 	movw	r3, #56416	; 0xdc60
  11726c:	e3403014 	movt	r3, #20
  117270:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117274:	e3530000 	cmp	r3, #0
  117278:	0a000005 	beq	117294 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  11727c:	e30d3c70 	movw	r3, #56432	; 0xdc70
  117280:	e3403014 	movt	r3, #20
  117284:	e55b200e 	ldrb	r2, [fp, #-14]
  117288:	e5c32000 	strb	r2, [r3]
      return idx;
  11728c:	e55b300e 	ldrb	r3, [fp, #-14]
  117290:	ea000009 	b	1172bc <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  117294:	e55b300d 	ldrb	r3, [fp, #-13]
  117298:	e2833001 	add	r3, r3, #1
  11729c:	e54b300d 	strb	r3, [fp, #-13]
  1172a0:	e55b300e 	ldrb	r3, [fp, #-14]
  1172a4:	e2833001 	add	r3, r3, #1
  1172a8:	e54b300e 	strb	r3, [fp, #-14]
  1172ac:	e55b300d 	ldrb	r3, [fp, #-13]
  1172b0:	e3530003 	cmp	r3, #3
  1172b4:	9affffe5 	bls	117250 <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  1172b8:	e3a03004 	mov	r3, #4
}
  1172bc:	e1a00003 	mov	r0, r3
  1172c0:	e24bd008 	sub	sp, fp, #8
  1172c4:	e8bd8810 	pop	{r4, fp, pc}

001172c8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  1172c8:	e92d4810 	push	{r4, fp, lr}
  1172cc:	e28db008 	add	fp, sp, #8
  1172d0:	e24dd014 	sub	sp, sp, #20
  1172d4:	e1a03000 	mov	r3, r0
  1172d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1172dc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1172e0:	e3a03000 	mov	r3, #0
  1172e4:	e54b300d 	strb	r3, [fp, #-13]
  1172e8:	ea000037 	b	1173cc <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  1172ec:	e55b200d 	ldrb	r2, [fp, #-13]
  1172f0:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  1172f4:	e3403014 	movt	r3, #20
  1172f8:	e3a0100c 	mov	r1, #12
  1172fc:	e0020291 	mul	r2, r1, r2
  117300:	e0833002 	add	r3, r3, r2
  117304:	e5933000 	ldr	r3, [r3]
  117308:	e3530000 	cmp	r3, #0
  11730c:	0a00002b 	beq	1173c0 <dns_call_found+0xf8>
  117310:	e55b200d 	ldrb	r2, [fp, #-13]
  117314:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117318:	e3403014 	movt	r3, #20
  11731c:	e3a0100c 	mov	r1, #12
  117320:	e0020291 	mul	r2, r1, r2
  117324:	e0833002 	add	r3, r3, r2
  117328:	e2833008 	add	r3, r3, #8
  11732c:	e5d33000 	ldrb	r3, [r3]
  117330:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117334:	e1520003 	cmp	r2, r3
  117338:	1a000020 	bne	1173c0 <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  11733c:	e55b200d 	ldrb	r2, [fp, #-13]
  117340:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117344:	e3403014 	movt	r3, #20
  117348:	e3a0100c 	mov	r1, #12
  11734c:	e0020291 	mul	r2, r1, r2
  117350:	e0833002 	add	r3, r3, r2
  117354:	e5934000 	ldr	r4, [r3]
  117358:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11735c:	e3a02e11 	mov	r2, #272	; 0x110
  117360:	e0030392 	mul	r3, r2, r3
  117364:	e2832010 	add	r2, r3, #16
  117368:	e30d3c74 	movw	r3, #56436	; 0xdc74
  11736c:	e3403014 	movt	r3, #20
  117370:	e0820003 	add	r0, r2, r3
  117374:	e55b200d 	ldrb	r2, [fp, #-13]
  117378:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  11737c:	e3403014 	movt	r3, #20
  117380:	e3a0100c 	mov	r1, #12
  117384:	e0020291 	mul	r2, r1, r2
  117388:	e0833002 	add	r3, r3, r2
  11738c:	e2833004 	add	r3, r3, #4
  117390:	e5933000 	ldr	r3, [r3]
  117394:	e1a02003 	mov	r2, r3
  117398:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11739c:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  1173a0:	e55b200d 	ldrb	r2, [fp, #-13]
  1173a4:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  1173a8:	e3403014 	movt	r3, #20
  1173ac:	e3a0100c 	mov	r1, #12
  1173b0:	e0020291 	mul	r2, r1, r2
  1173b4:	e0833002 	add	r3, r3, r2
  1173b8:	e3a02000 	mov	r2, #0
  1173bc:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1173c0:	e55b300d 	ldrb	r3, [fp, #-13]
  1173c4:	e2833001 	add	r3, r3, #1
  1173c8:	e54b300d 	strb	r3, [fp, #-13]
  1173cc:	e55b300d 	ldrb	r3, [fp, #-13]
  1173d0:	e3530003 	cmp	r3, #3
  1173d4:	9affffc4 	bls	1172ec <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1173d8:	e3a03000 	mov	r3, #0
  1173dc:	e54b300d 	strb	r3, [fp, #-13]
  1173e0:	ea00002d 	b	11749c <dns_call_found+0x1d4>
    if (i == idx) {
  1173e4:	e55b200d 	ldrb	r2, [fp, #-13]
  1173e8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1173ec:	e1520003 	cmp	r2, r3
  1173f0:	0a000025 	beq	11748c <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  1173f4:	e55b200d 	ldrb	r2, [fp, #-13]
  1173f8:	e30d3c74 	movw	r3, #56436	; 0xdc74
  1173fc:	e3403014 	movt	r3, #20
  117400:	e3a01e11 	mov	r1, #272	; 0x110
  117404:	e0020291 	mul	r2, r1, r2
  117408:	e0833002 	add	r3, r3, r2
  11740c:	e283300a 	add	r3, r3, #10
  117410:	e5d33000 	ldrb	r3, [r3]
  117414:	e3530002 	cmp	r3, #2
  117418:	1a00001c 	bne	117490 <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  11741c:	e55b200d 	ldrb	r2, [fp, #-13]
  117420:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117424:	e3403014 	movt	r3, #20
  117428:	e3a01e11 	mov	r1, #272	; 0x110
  11742c:	e0020291 	mul	r2, r1, r2
  117430:	e0833002 	add	r3, r3, r2
  117434:	e283300f 	add	r3, r3, #15
  117438:	e5d32000 	ldrb	r2, [r3]
  11743c:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  117440:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117444:	e3403014 	movt	r3, #20
  117448:	e3a00e11 	mov	r0, #272	; 0x110
  11744c:	e0010190 	mul	r1, r0, r1
  117450:	e0833001 	add	r3, r3, r1
  117454:	e283300f 	add	r3, r3, #15
  117458:	e5d33000 	ldrb	r3, [r3]
  11745c:	e1520003 	cmp	r2, r3
  117460:	1a00000a 	bne	117490 <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117464:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117468:	e30d3c74 	movw	r3, #56436	; 0xdc74
  11746c:	e3403014 	movt	r3, #20
  117470:	e3a01e11 	mov	r1, #272	; 0x110
  117474:	e0020291 	mul	r2, r1, r2
  117478:	e0833002 	add	r3, r3, r2
  11747c:	e283300f 	add	r3, r3, #15
  117480:	e3a02004 	mov	r2, #4
  117484:	e5c32000 	strb	r2, [r3]
        break;
  117488:	ea000006 	b	1174a8 <dns_call_found+0x1e0>
      continue; /* only check other requests */
  11748c:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117490:	e55b300d 	ldrb	r3, [fp, #-13]
  117494:	e2833001 	add	r3, r3, #1
  117498:	e54b300d 	strb	r3, [fp, #-13]
  11749c:	e55b300d 	ldrb	r3, [fp, #-13]
  1174a0:	e3530003 	cmp	r3, #3
  1174a4:	9affffce 	bls	1173e4 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  1174a8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174ac:	e30d3c74 	movw	r3, #56436	; 0xdc74
  1174b0:	e3403014 	movt	r3, #20
  1174b4:	e3a01e11 	mov	r1, #272	; 0x110
  1174b8:	e0020291 	mul	r2, r1, r2
  1174bc:	e0833002 	add	r3, r3, r2
  1174c0:	e283300f 	add	r3, r3, #15
  1174c4:	e5d33000 	ldrb	r3, [r3]
  1174c8:	e3530003 	cmp	r3, #3
  1174cc:	8a000023 	bhi	117560 <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  1174d0:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174d4:	e30d3c74 	movw	r3, #56436	; 0xdc74
  1174d8:	e3403014 	movt	r3, #20
  1174dc:	e3a01e11 	mov	r1, #272	; 0x110
  1174e0:	e0020291 	mul	r2, r1, r2
  1174e4:	e0833002 	add	r3, r3, r2
  1174e8:	e283300f 	add	r3, r3, #15
  1174ec:	e5d33000 	ldrb	r3, [r3]
  1174f0:	e1a02003 	mov	r2, r3
  1174f4:	e30d3c60 	movw	r3, #56416	; 0xdc60
  1174f8:	e3403014 	movt	r3, #20
  1174fc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117500:	e1a00003 	mov	r0, r3
  117504:	eb004538 	bl	1289ec <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  117508:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11750c:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117510:	e3403014 	movt	r3, #20
  117514:	e3a01e11 	mov	r1, #272	; 0x110
  117518:	e0020291 	mul	r2, r1, r2
  11751c:	e0833002 	add	r3, r3, r2
  117520:	e283300f 	add	r3, r3, #15
  117524:	e5d33000 	ldrb	r3, [r3]
  117528:	e1a01003 	mov	r1, r3
  11752c:	e30d3c60 	movw	r3, #56416	; 0xdc60
  117530:	e3403014 	movt	r3, #20
  117534:	e3a02000 	mov	r2, #0
  117538:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  11753c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117540:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117544:	e3403014 	movt	r3, #20
  117548:	e3a01e11 	mov	r1, #272	; 0x110
  11754c:	e0020291 	mul	r2, r1, r2
  117550:	e0833002 	add	r3, r3, r2
  117554:	e283300f 	add	r3, r3, #15
  117558:	e3a02004 	mov	r2, #4
  11755c:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  117560:	e320f000 	nop	{0}
  117564:	e24bd008 	sub	sp, fp, #8
  117568:	e8bd8810 	pop	{r4, fp, pc}

0011756c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  11756c:	e92d4800 	push	{fp, lr}
  117570:	e28db004 	add	fp, sp, #4
  117574:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  117578:	eb009aff 	bl	13e17c <rand>
  11757c:	e1a03000 	mov	r3, r0
  117580:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117584:	e3a03000 	mov	r3, #0
  117588:	e54b3005 	strb	r3, [fp, #-5]
  11758c:	ea000018 	b	1175f4 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117590:	e55b2005 	ldrb	r2, [fp, #-5]
  117594:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117598:	e3403014 	movt	r3, #20
  11759c:	e3a01e11 	mov	r1, #272	; 0x110
  1175a0:	e0020291 	mul	r2, r1, r2
  1175a4:	e0833002 	add	r3, r3, r2
  1175a8:	e283300a 	add	r3, r3, #10
  1175ac:	e5d33000 	ldrb	r3, [r3]
  1175b0:	e3530002 	cmp	r3, #2
  1175b4:	1a00000b 	bne	1175e8 <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  1175b8:	e55b2005 	ldrb	r2, [fp, #-5]
  1175bc:	e30d3c74 	movw	r3, #56436	; 0xdc74
  1175c0:	e3403014 	movt	r3, #20
  1175c4:	e3a01e11 	mov	r1, #272	; 0x110
  1175c8:	e0020291 	mul	r2, r1, r2
  1175cc:	e0833002 	add	r3, r3, r2
  1175d0:	e2833008 	add	r3, r3, #8
  1175d4:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1175d8:	e15b20b8 	ldrh	r2, [fp, #-8]
  1175dc:	e1520003 	cmp	r2, r3
  1175e0:	1a000000 	bne	1175e8 <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  1175e4:	eaffffe3 	b	117578 <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1175e8:	e55b3005 	ldrb	r3, [fp, #-5]
  1175ec:	e2833001 	add	r3, r3, #1
  1175f0:	e54b3005 	strb	r3, [fp, #-5]
  1175f4:	e55b3005 	ldrb	r3, [fp, #-5]
  1175f8:	e3530003 	cmp	r3, #3
  1175fc:	9affffe3 	bls	117590 <dns_create_txid+0x24>
    }
  }

  return txid;
  117600:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  117604:	e1a00003 	mov	r0, r3
  117608:	e24bd004 	sub	sp, fp, #4
  11760c:	e8bd8800 	pop	{fp, pc}

00117610 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  117610:	e92d4800 	push	{fp, lr}
  117614:	e28db004 	add	fp, sp, #4
  117618:	e24dd010 	sub	sp, sp, #16
  11761c:	e1a03000 	mov	r3, r0
  117620:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  117624:	e55b300d 	ldrb	r3, [fp, #-13]
  117628:	e3a02e11 	mov	r2, #272	; 0x110
  11762c:	e0020392 	mul	r2, r2, r3
  117630:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117634:	e3403014 	movt	r3, #20
  117638:	e0823003 	add	r3, r2, r3
  11763c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  117640:	e55b300d 	ldrb	r3, [fp, #-13]
  117644:	e3530003 	cmp	r3, #3
  117648:	9a000006 	bls	117668 <dns_check_entry+0x58>
  11764c:	e30700ac 	movw	r0, #28844	; 0x70ac
  117650:	e3400014 	movt	r0, #20
  117654:	ebffaeae 	bl	103114 <rt_kprintf>
  117658:	e3001405 	movw	r1, #1029	; 0x405
  11765c:	e3070080 	movw	r0, #28800	; 0x7080
  117660:	e3400014 	movt	r0, #20
  117664:	ebffce9d 	bl	10b0e0 <sys_arch_assert>

  switch (entry->state) {
  117668:	e51b3008 	ldr	r3, [fp, #-8]
  11766c:	e5d3300a 	ldrb	r3, [r3, #10]
  117670:	e3530003 	cmp	r3, #3
  117674:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  117678:	ea00006b 	b	11782c <dns_check_entry+0x21c>
  11767c:	0011784c 	.word	0x0011784c
  117680:	0011768c 	.word	0x0011768c
  117684:	001176e8 	.word	0x001176e8
  117688:	001177e8 	.word	0x001177e8
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  11768c:	ebffffb6 	bl	11756c <dns_create_txid>
  117690:	e1a03000 	mov	r3, r0
  117694:	e1a02003 	mov	r2, r3
  117698:	e51b3008 	ldr	r3, [fp, #-8]
  11769c:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  1176a0:	e51b3008 	ldr	r3, [fp, #-8]
  1176a4:	e3a02002 	mov	r2, #2
  1176a8:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  1176ac:	e51b3008 	ldr	r3, [fp, #-8]
  1176b0:	e3a02000 	mov	r2, #0
  1176b4:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  1176b8:	e51b3008 	ldr	r3, [fp, #-8]
  1176bc:	e3a02001 	mov	r2, #1
  1176c0:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  1176c4:	e51b3008 	ldr	r3, [fp, #-8]
  1176c8:	e3a02000 	mov	r2, #0
  1176cc:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  1176d0:	e55b300d 	ldrb	r3, [fp, #-13]
  1176d4:	e1a00003 	mov	r0, r3
  1176d8:	ebfffdc7 	bl	116dfc <dns_send>
  1176dc:	e1a03000 	mov	r3, r0
  1176e0:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  1176e4:	ea00005d 	b	117860 <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  1176e8:	e51b3008 	ldr	r3, [fp, #-8]
  1176ec:	e5d3300c 	ldrb	r3, [r3, #12]
  1176f0:	e2433001 	sub	r3, r3, #1
  1176f4:	e6ef2073 	uxtb	r2, r3
  1176f8:	e51b3008 	ldr	r3, [fp, #-8]
  1176fc:	e5c3200c 	strb	r2, [r3, #12]
  117700:	e51b3008 	ldr	r3, [fp, #-8]
  117704:	e5d3300c 	ldrb	r3, [r3, #12]
  117708:	e3530000 	cmp	r3, #0
  11770c:	1a000050 	bne	117854 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  117710:	e51b3008 	ldr	r3, [fp, #-8]
  117714:	e5d3300d 	ldrb	r3, [r3, #13]
  117718:	e2833001 	add	r3, r3, #1
  11771c:	e6ef2073 	uxtb	r2, r3
  117720:	e51b3008 	ldr	r3, [fp, #-8]
  117724:	e5c3200d 	strb	r2, [r3, #13]
  117728:	e51b3008 	ldr	r3, [fp, #-8]
  11772c:	e5d3300d 	ldrb	r3, [r3, #13]
  117730:	e3530004 	cmp	r3, #4
  117734:	1a000021 	bne	1177c0 <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  117738:	e51b3008 	ldr	r3, [fp, #-8]
  11773c:	e5d3300b 	ldrb	r3, [r3, #11]
  117740:	e2833001 	add	r3, r3, #1
  117744:	e3530001 	cmp	r3, #1
  117748:	ca000014 	bgt	1177a0 <dns_check_entry+0x190>
  11774c:	e51b3008 	ldr	r3, [fp, #-8]
  117750:	e5d3300b 	ldrb	r3, [r3, #11]
  117754:	e2832001 	add	r2, r3, #1
  117758:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  11775c:	e3403014 	movt	r3, #20
  117760:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117764:	e3530000 	cmp	r3, #0
  117768:	0a00000c 	beq	1177a0 <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  11776c:	e51b3008 	ldr	r3, [fp, #-8]
  117770:	e5d3300b 	ldrb	r3, [r3, #11]
  117774:	e2833001 	add	r3, r3, #1
  117778:	e6ef2073 	uxtb	r2, r3
  11777c:	e51b3008 	ldr	r3, [fp, #-8]
  117780:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  117784:	e51b3008 	ldr	r3, [fp, #-8]
  117788:	e3a02001 	mov	r2, #1
  11778c:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  117790:	e51b3008 	ldr	r3, [fp, #-8]
  117794:	e3a02000 	mov	r2, #0
  117798:	e5c3200d 	strb	r2, [r3, #13]
  11779c:	ea00000b 	b	1177d0 <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  1177a0:	e55b300d 	ldrb	r3, [fp, #-13]
  1177a4:	e3a01000 	mov	r1, #0
  1177a8:	e1a00003 	mov	r0, r3
  1177ac:	ebfffec5 	bl	1172c8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  1177b0:	e51b3008 	ldr	r3, [fp, #-8]
  1177b4:	e3a02000 	mov	r2, #0
  1177b8:	e5c3200a 	strb	r2, [r3, #10]
            break;
  1177bc:	ea000027 	b	117860 <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  1177c0:	e51b3008 	ldr	r3, [fp, #-8]
  1177c4:	e5d3200d 	ldrb	r2, [r3, #13]
  1177c8:	e51b3008 	ldr	r3, [fp, #-8]
  1177cc:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  1177d0:	e55b300d 	ldrb	r3, [fp, #-13]
  1177d4:	e1a00003 	mov	r0, r3
  1177d8:	ebfffd87 	bl	116dfc <dns_send>
  1177dc:	e1a03000 	mov	r3, r0
  1177e0:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  1177e4:	ea00001a 	b	117854 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  1177e8:	e51b3008 	ldr	r3, [fp, #-8]
  1177ec:	e5933000 	ldr	r3, [r3]
  1177f0:	e3530000 	cmp	r3, #0
  1177f4:	0a000008 	beq	11781c <dns_check_entry+0x20c>
  1177f8:	e51b3008 	ldr	r3, [fp, #-8]
  1177fc:	e5933000 	ldr	r3, [r3]
  117800:	e2432001 	sub	r2, r3, #1
  117804:	e51b3008 	ldr	r3, [fp, #-8]
  117808:	e5832000 	str	r2, [r3]
  11780c:	e51b3008 	ldr	r3, [fp, #-8]
  117810:	e5933000 	ldr	r3, [r3]
  117814:	e3530000 	cmp	r3, #0
  117818:	1a00000f 	bne	11785c <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  11781c:	e51b3008 	ldr	r3, [fp, #-8]
  117820:	e3a02000 	mov	r2, #0
  117824:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  117828:	ea00000b 	b	11785c <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  11782c:	e30700c8 	movw	r0, #28872	; 0x70c8
  117830:	e3400014 	movt	r0, #20
  117834:	ebffae36 	bl	103114 <rt_kprintf>
  117838:	e3001444 	movw	r1, #1092	; 0x444
  11783c:	e3070080 	movw	r0, #28800	; 0x7080
  117840:	e3400014 	movt	r0, #20
  117844:	ebffce25 	bl	10b0e0 <sys_arch_assert>
      break;
  117848:	ea000004 	b	117860 <dns_check_entry+0x250>
      break;
  11784c:	e320f000 	nop	{0}
  117850:	ea000002 	b	117860 <dns_check_entry+0x250>
      break;
  117854:	e320f000 	nop	{0}
  117858:	ea000000 	b	117860 <dns_check_entry+0x250>
      break;
  11785c:	e320f000 	nop	{0}
  }
}
  117860:	e320f000 	nop	{0}
  117864:	e24bd004 	sub	sp, fp, #4
  117868:	e8bd8800 	pop	{fp, pc}

0011786c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  11786c:	e92d4800 	push	{fp, lr}
  117870:	e28db004 	add	fp, sp, #4
  117874:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117878:	e3a03000 	mov	r3, #0
  11787c:	e54b3005 	strb	r3, [fp, #-5]
  117880:	ea000005 	b	11789c <dns_check_entries+0x30>
    dns_check_entry(i);
  117884:	e55b3005 	ldrb	r3, [fp, #-5]
  117888:	e1a00003 	mov	r0, r3
  11788c:	ebffff5f 	bl	117610 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117890:	e55b3005 	ldrb	r3, [fp, #-5]
  117894:	e2833001 	add	r3, r3, #1
  117898:	e54b3005 	strb	r3, [fp, #-5]
  11789c:	e55b3005 	ldrb	r3, [fp, #-5]
  1178a0:	e3530003 	cmp	r3, #3
  1178a4:	9afffff6 	bls	117884 <dns_check_entries+0x18>
  }
}
  1178a8:	e320f000 	nop	{0}
  1178ac:	e24bd004 	sub	sp, fp, #4
  1178b0:	e8bd8800 	pop	{fp, pc}

001178b4 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  1178b4:	e92d4800 	push	{fp, lr}
  1178b8:	e28db004 	add	fp, sp, #4
  1178bc:	e24dd010 	sub	sp, sp, #16
  1178c0:	e1a03000 	mov	r3, r0
  1178c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1178c8:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  1178cc:	e55b300d 	ldrb	r3, [fp, #-13]
  1178d0:	e3a02e11 	mov	r2, #272	; 0x110
  1178d4:	e0020392 	mul	r2, r2, r3
  1178d8:	e30d3c74 	movw	r3, #56436	; 0xdc74
  1178dc:	e3403014 	movt	r3, #20
  1178e0:	e0823003 	add	r3, r2, r3
  1178e4:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  1178e8:	e51b3008 	ldr	r3, [fp, #-8]
  1178ec:	e3a02003 	mov	r2, #3
  1178f0:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  1178f4:	e51b3008 	ldr	r3, [fp, #-8]
  1178f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1178fc:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  117900:	e51b3008 	ldr	r3, [fp, #-8]
  117904:	e5932000 	ldr	r2, [r3]
  117908:	e3a03dea 	mov	r3, #14976	; 0x3a80
  11790c:	e3403009 	movt	r3, #9
  117910:	e1520003 	cmp	r2, r3
  117914:	9a000003 	bls	117928 <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  117918:	e51b2008 	ldr	r2, [fp, #-8]
  11791c:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117920:	e3403009 	movt	r3, #9
  117924:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  117928:	e51b3008 	ldr	r3, [fp, #-8]
  11792c:	e2832004 	add	r2, r3, #4
  117930:	e55b300d 	ldrb	r3, [fp, #-13]
  117934:	e1a01002 	mov	r1, r2
  117938:	e1a00003 	mov	r0, r3
  11793c:	ebfffe61 	bl	1172c8 <dns_call_found>

  if (entry->ttl == 0) {
  117940:	e51b3008 	ldr	r3, [fp, #-8]
  117944:	e5933000 	ldr	r3, [r3]
  117948:	e3530000 	cmp	r3, #0
  11794c:	1a000006 	bne	11796c <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  117950:	e51b3008 	ldr	r3, [fp, #-8]
  117954:	e5d3300a 	ldrb	r3, [r3, #10]
  117958:	e3530003 	cmp	r3, #3
  11795c:	1a000002 	bne	11796c <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  117960:	e51b3008 	ldr	r3, [fp, #-8]
  117964:	e3a02000 	mov	r2, #0
  117968:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  11796c:	e320f000 	nop	{0}
  117970:	e24bd004 	sub	sp, fp, #4
  117974:	e8bd8800 	pop	{fp, pc}

00117978 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  117978:	e92d4810 	push	{r4, fp, lr}
  11797c:	e28db008 	add	fp, sp, #8
  117980:	e24dd044 	sub	sp, sp, #68	; 0x44
  117984:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  117988:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  11798c:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  117990:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  117994:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117998:	e1d330b8 	ldrh	r3, [r3, #8]
  11799c:	e353000f 	cmp	r3, #15
  1179a0:	9a0000c8 	bls	117cc8 <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  1179a4:	e24b1028 	sub	r1, fp, #40	; 0x28
  1179a8:	e3a03000 	mov	r3, #0
  1179ac:	e3a0200c 	mov	r2, #12
  1179b0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1179b4:	eb000f44 	bl	11b6cc <pbuf_copy_partial>
  1179b8:	e1a03000 	mov	r3, r0
  1179bc:	e353000c 	cmp	r3, #12
  1179c0:	1a0000c2 	bne	117cd0 <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  1179c4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1179c8:	e1a00003 	mov	r0, r3
  1179cc:	ebfffafc 	bl	1165c4 <lwip_htons>
  1179d0:	e1a03000 	mov	r3, r0
  1179d4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1179d8:	e3a03000 	mov	r3, #0
  1179dc:	e54b300d 	strb	r3, [fp, #-13]
  1179e0:	ea0000b4 	b	117cb8 <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  1179e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1179e8:	e3a02e11 	mov	r2, #272	; 0x110
  1179ec:	e0020392 	mul	r2, r2, r3
  1179f0:	e30d3c74 	movw	r3, #56436	; 0xdc74
  1179f4:	e3403014 	movt	r3, #20
  1179f8:	e0823003 	add	r3, r2, r3
  1179fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  117a00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a04:	e5d3300a 	ldrb	r3, [r3, #10]
  117a08:	e3530002 	cmp	r3, #2
  117a0c:	1a0000a6 	bne	117cac <dns_recv+0x334>
          (entry->txid == txid)) {
  117a10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a14:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  117a18:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  117a1c:	e1520003 	cmp	r2, r3
  117a20:	1a0000a1 	bne	117cac <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  117a24:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  117a28:	e1a00003 	mov	r0, r3
  117a2c:	ebfffae4 	bl	1165c4 <lwip_htons>
  117a30:	e1a03000 	mov	r3, r0
  117a34:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  117a38:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117a3c:	e1a00003 	mov	r0, r3
  117a40:	ebfffadf 	bl	1165c4 <lwip_htons>
  117a44:	e1a03000 	mov	r3, r0
  117a48:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  117a4c:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  117a50:	e6af3073 	sxtb	r3, r3
  117a54:	e3530000 	cmp	r3, #0
  117a58:	aa00009e 	bge	117cd8 <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  117a5c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  117a60:	e3530001 	cmp	r3, #1
  117a64:	1a00009d 	bne	117ce0 <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  117a68:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  117a6c:	e5932000 	ldr	r2, [r3]
  117a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a74:	e5d3300b 	ldrb	r3, [r3, #11]
  117a78:	e1a01003 	mov	r1, r3
  117a7c:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  117a80:	e3403014 	movt	r3, #20
  117a84:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  117a88:	e1520003 	cmp	r2, r3
  117a8c:	1a000095 	bne	117ce8 <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  117a90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a94:	e2833010 	add	r3, r3, #16
  117a98:	e3a0200c 	mov	r2, #12
  117a9c:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  117aa0:	e1a00003 	mov	r0, r3
  117aa4:	ebfffc4a 	bl	116bd4 <dns_compare_name>
  117aa8:	e1a03000 	mov	r3, r0
  117aac:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117ab0:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ab4:	e30f2fff 	movw	r2, #65535	; 0xffff
  117ab8:	e1530002 	cmp	r3, r2
  117abc:	0a00008b 	beq	117cf0 <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  117ac0:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ac4:	e24b1038 	sub	r1, fp, #56	; 0x38
  117ac8:	e3a02004 	mov	r2, #4
  117acc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117ad0:	eb000efd 	bl	11b6cc <pbuf_copy_partial>
  117ad4:	e1a03000 	mov	r3, r0
  117ad8:	e3530004 	cmp	r3, #4
  117adc:	1a000085 	bne	117cf8 <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  117ae0:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  117ae4:	e3530c01 	cmp	r3, #256	; 0x100
  117ae8:	1a000078 	bne	117cd0 <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117aec:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  117af0:	e3530c01 	cmp	r3, #256	; 0x100
  117af4:	1a000075 	bne	117cd0 <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  117af8:	e15b31b0 	ldrh	r3, [fp, #-16]
  117afc:	e2833004 	add	r3, r3, #4
  117b00:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  117b04:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  117b08:	e203300f 	and	r3, r3, #15
  117b0c:	e3530000 	cmp	r3, #0
  117b10:	1a000055 	bne	117c6c <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117b14:	ea00004c 	b	117c4c <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  117b18:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b1c:	e1a01003 	mov	r1, r3
  117b20:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b24:	ebfffc79 	bl	116d10 <dns_skip_name>
  117b28:	e1a03000 	mov	r3, r0
  117b2c:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117b30:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b34:	e30f2fff 	movw	r2, #65535	; 0xffff
  117b38:	e1530002 	cmp	r3, r2
  117b3c:	0a00006f 	beq	117d00 <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  117b40:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b44:	e24b1034 	sub	r1, fp, #52	; 0x34
  117b48:	e3a0200a 	mov	r2, #10
  117b4c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b50:	eb000edd 	bl	11b6cc <pbuf_copy_partial>
  117b54:	e1a03000 	mov	r3, r0
  117b58:	e353000a 	cmp	r3, #10
  117b5c:	1a000069 	bne	117d08 <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  117b60:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b64:	e283300a 	add	r3, r3, #10
  117b68:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  117b6c:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  117b70:	e3530c01 	cmp	r3, #256	; 0x100
  117b74:	1a000021 	bne	117c00 <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  117b78:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  117b7c:	e3530c01 	cmp	r3, #256	; 0x100
  117b80:	1a00001e 	bne	117c00 <dns_recv+0x288>
  117b84:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117b88:	e3530b01 	cmp	r3, #1024	; 0x400
  117b8c:	1a00001b 	bne	117c00 <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  117b90:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b94:	e24b103c 	sub	r1, fp, #60	; 0x3c
  117b98:	e3a02004 	mov	r2, #4
  117b9c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117ba0:	eb000ec9 	bl	11b6cc <pbuf_copy_partial>
  117ba4:	e1a03000 	mov	r3, r0
  117ba8:	e3530004 	cmp	r3, #4
  117bac:	1a000057 	bne	117d10 <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117bb0:	e55b100d 	ldrb	r1, [fp, #-13]
  117bb4:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  117bb8:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117bbc:	e3403014 	movt	r3, #20
  117bc0:	e3a00e11 	mov	r0, #272	; 0x110
  117bc4:	e0010190 	mul	r1, r0, r1
  117bc8:	e0833001 	add	r3, r3, r1
  117bcc:	e2833004 	add	r3, r3, #4
  117bd0:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  117bd4:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117bd8:	eb000cb0 	bl	11aea0 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117bdc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  117be0:	e1a00003 	mov	r0, r3
  117be4:	ebfffa82 	bl	1165f4 <lwip_htonl>
  117be8:	e1a02000 	mov	r2, r0
  117bec:	e55b300d 	ldrb	r3, [fp, #-13]
  117bf0:	e1a01002 	mov	r1, r2
  117bf4:	e1a00003 	mov	r0, r3
  117bf8:	ebffff2d 	bl	1178b4 <dns_correct_response>
  117bfc:	ea000049 	b	117d28 <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  117c00:	e15b41b0 	ldrh	r4, [fp, #-16]
  117c04:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117c08:	e1a00003 	mov	r0, r3
  117c0c:	ebfffa6c 	bl	1165c4 <lwip_htons>
  117c10:	e1a03000 	mov	r3, r0
  117c14:	e0843003 	add	r3, r4, r3
  117c18:	e3530801 	cmp	r3, #65536	; 0x10000
  117c1c:	aa00003d 	bge	117d18 <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117c20:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117c24:	e1a00003 	mov	r0, r3
  117c28:	ebfffa65 	bl	1165c4 <lwip_htons>
  117c2c:	e1a03000 	mov	r3, r0
  117c30:	e1a02003 	mov	r2, r3
  117c34:	e15b31b0 	ldrh	r3, [fp, #-16]
  117c38:	e0823003 	add	r3, r2, r3
  117c3c:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  117c40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c44:	e2433001 	sub	r3, r3, #1
  117c48:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117c4c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c50:	e3530000 	cmp	r3, #0
  117c54:	0a000004 	beq	117c6c <dns_recv+0x2f4>
  117c58:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117c5c:	e1d330b8 	ldrh	r3, [r3, #8]
  117c60:	e15b21b0 	ldrh	r2, [fp, #-16]
  117c64:	e1520003 	cmp	r2, r3
  117c68:	3affffaa 	bcc	117b18 <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  117c6c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117c70:	eb000c8a 	bl	11aea0 <pbuf_free>
        dns_call_found(i, NULL);
  117c74:	e55b300d 	ldrb	r3, [fp, #-13]
  117c78:	e3a01000 	mov	r1, #0
  117c7c:	e1a00003 	mov	r0, r3
  117c80:	ebfffd90 	bl	1172c8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  117c84:	e55b200d 	ldrb	r2, [fp, #-13]
  117c88:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117c8c:	e3403014 	movt	r3, #20
  117c90:	e3a01e11 	mov	r1, #272	; 0x110
  117c94:	e0020291 	mul	r2, r1, r2
  117c98:	e0833002 	add	r3, r3, r2
  117c9c:	e283300a 	add	r3, r3, #10
  117ca0:	e3a02000 	mov	r2, #0
  117ca4:	e5c32000 	strb	r2, [r3]
        return;
  117ca8:	ea00001e 	b	117d28 <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117cac:	e55b300d 	ldrb	r3, [fp, #-13]
  117cb0:	e2833001 	add	r3, r3, #1
  117cb4:	e54b300d 	strb	r3, [fp, #-13]
  117cb8:	e55b300d 	ldrb	r3, [fp, #-13]
  117cbc:	e3530003 	cmp	r3, #3
  117cc0:	9affff47 	bls	1179e4 <dns_recv+0x6c>
      }
    }
  }

memerr:
  117cc4:	ea000001 	b	117cd0 <dns_recv+0x358>
    goto memerr;
  117cc8:	e320f000 	nop	{0}
  117ccc:	ea000012 	b	117d1c <dns_recv+0x3a4>
memerr:
  117cd0:	e320f000 	nop	{0}
  117cd4:	ea000010 	b	117d1c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cd8:	e320f000 	nop	{0}
  117cdc:	ea00000e 	b	117d1c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117ce0:	e320f000 	nop	{0}
  117ce4:	ea00000c 	b	117d1c <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117ce8:	e320f000 	nop	{0}
  117cec:	ea00000a 	b	117d1c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cf0:	e320f000 	nop	{0}
  117cf4:	ea000008 	b	117d1c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cf8:	e320f000 	nop	{0}
  117cfc:	ea000006 	b	117d1c <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d00:	e320f000 	nop	{0}
  117d04:	ea000004 	b	117d1c <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d08:	e320f000 	nop	{0}
  117d0c:	ea000002 	b	117d1c <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  117d10:	e320f000 	nop	{0}
  117d14:	ea000000 	b	117d1c <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d18:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117d1c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117d20:	eb000c5e 	bl	11aea0 <pbuf_free>
  return;
  117d24:	e320f000 	nop	{0}
}
  117d28:	e24bd008 	sub	sp, fp, #8
  117d2c:	e8bd8810 	pop	{r4, fp, pc}

00117d30 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117d30:	e92d4800 	push	{fp, lr}
  117d34:	e28db004 	add	fp, sp, #4
  117d38:	e24dd028 	sub	sp, sp, #40	; 0x28
  117d3c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117d40:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  117d44:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  117d48:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  117d4c:	e3a03000 	mov	r3, #0
  117d50:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117d54:	e3a03000 	mov	r3, #0
  117d58:	e54b3005 	strb	r3, [fp, #-5]
  117d5c:	ea000048 	b	117e84 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117d60:	e55b2005 	ldrb	r2, [fp, #-5]
  117d64:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117d68:	e3403014 	movt	r3, #20
  117d6c:	e3a01e11 	mov	r1, #272	; 0x110
  117d70:	e0020291 	mul	r2, r1, r2
  117d74:	e0833002 	add	r3, r3, r2
  117d78:	e283300a 	add	r3, r3, #10
  117d7c:	e5d33000 	ldrb	r3, [r3]
  117d80:	e3530002 	cmp	r3, #2
  117d84:	1a00003b 	bne	117e78 <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117d88:	e55b3005 	ldrb	r3, [fp, #-5]
  117d8c:	e3a02e11 	mov	r2, #272	; 0x110
  117d90:	e0030392 	mul	r3, r2, r3
  117d94:	e2832010 	add	r2, r3, #16
  117d98:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117d9c:	e3403014 	movt	r3, #20
  117da0:	e0823003 	add	r3, r2, r3
  117da4:	e3a02c01 	mov	r2, #256	; 0x100
  117da8:	e1a01003 	mov	r1, r3
  117dac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117db0:	ebfffa87 	bl	1167d4 <lwip_strnicmp>
  117db4:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117db8:	e3530000 	cmp	r3, #0
  117dbc:	1a00002d 	bne	117e78 <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117dc0:	e3a03000 	mov	r3, #0
  117dc4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117dc8:	ea000027 	b	117e6c <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117dcc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117dd0:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117dd4:	e3403014 	movt	r3, #20
  117dd8:	e3a0100c 	mov	r1, #12
  117ddc:	e0020291 	mul	r2, r1, r2
  117de0:	e0833002 	add	r3, r3, r2
  117de4:	e5933000 	ldr	r3, [r3]
  117de8:	e3530000 	cmp	r3, #0
  117dec:	1a00001b 	bne	117e60 <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117df0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117df4:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117df8:	e3403014 	movt	r3, #20
  117dfc:	e3a0100c 	mov	r1, #12
  117e00:	e0020291 	mul	r2, r1, r2
  117e04:	e0833002 	add	r3, r3, r2
  117e08:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117e0c:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117e10:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e14:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117e18:	e3403014 	movt	r3, #20
  117e1c:	e3a0100c 	mov	r1, #12
  117e20:	e0020291 	mul	r2, r1, r2
  117e24:	e0833002 	add	r3, r3, r2
  117e28:	e2833004 	add	r3, r3, #4
  117e2c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117e30:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117e34:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e38:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117e3c:	e3403014 	movt	r3, #20
  117e40:	e3a0100c 	mov	r1, #12
  117e44:	e0020291 	mul	r2, r1, r2
  117e48:	e0833002 	add	r3, r3, r2
  117e4c:	e2833008 	add	r3, r3, #8
  117e50:	e55b2005 	ldrb	r2, [fp, #-5]
  117e54:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117e58:	e3e03004 	mvn	r3, #4
  117e5c:	ea0000b3 	b	118130 <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117e60:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e64:	e2833001 	add	r3, r3, #1
  117e68:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117e6c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e70:	e3530003 	cmp	r3, #3
  117e74:	9affffd4 	bls	117dcc <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117e78:	e55b3005 	ldrb	r3, [fp, #-5]
  117e7c:	e2833001 	add	r3, r3, #1
  117e80:	e54b3005 	strb	r3, [fp, #-5]
  117e84:	e55b3005 	ldrb	r3, [fp, #-5]
  117e88:	e3530003 	cmp	r3, #3
  117e8c:	9affffb3 	bls	117d60 <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117e90:	e3a03000 	mov	r3, #0
  117e94:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117e98:	e3a03004 	mov	r3, #4
  117e9c:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117ea0:	e3a03000 	mov	r3, #0
  117ea4:	e54b3005 	strb	r3, [fp, #-5]
  117ea8:	ea000020 	b	117f30 <dns_enqueue+0x200>
    entry = &dns_table[i];
  117eac:	e55b3005 	ldrb	r3, [fp, #-5]
  117eb0:	e3a02e11 	mov	r2, #272	; 0x110
  117eb4:	e0020392 	mul	r2, r2, r3
  117eb8:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117ebc:	e3403014 	movt	r3, #20
  117ec0:	e0823003 	add	r3, r2, r3
  117ec4:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117ec8:	e51b300c 	ldr	r3, [fp, #-12]
  117ecc:	e5d3300a 	ldrb	r3, [r3, #10]
  117ed0:	e3530000 	cmp	r3, #0
  117ed4:	0a000019 	beq	117f40 <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117ed8:	e51b300c 	ldr	r3, [fp, #-12]
  117edc:	e5d3300a 	ldrb	r3, [r3, #10]
  117ee0:	e3530003 	cmp	r3, #3
  117ee4:	1a00000e 	bne	117f24 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117ee8:	e30d3c71 	movw	r3, #56433	; 0xdc71
  117eec:	e3403014 	movt	r3, #20
  117ef0:	e5d32000 	ldrb	r2, [r3]
  117ef4:	e51b300c 	ldr	r3, [fp, #-12]
  117ef8:	e5d3300e 	ldrb	r3, [r3, #14]
  117efc:	e0423003 	sub	r3, r2, r3
  117f00:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117f04:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117f08:	e55b3006 	ldrb	r3, [fp, #-6]
  117f0c:	e1520003 	cmp	r2, r3
  117f10:	9a000003 	bls	117f24 <dns_enqueue+0x1f4>
        lseq = age;
  117f14:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117f18:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117f1c:	e55b3005 	ldrb	r3, [fp, #-5]
  117f20:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117f24:	e55b3005 	ldrb	r3, [fp, #-5]
  117f28:	e2833001 	add	r3, r3, #1
  117f2c:	e54b3005 	strb	r3, [fp, #-5]
  117f30:	e55b3005 	ldrb	r3, [fp, #-5]
  117f34:	e3530003 	cmp	r3, #3
  117f38:	9affffdb 	bls	117eac <dns_enqueue+0x17c>
  117f3c:	ea000000 	b	117f44 <dns_enqueue+0x214>
      break;
  117f40:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117f44:	e55b3005 	ldrb	r3, [fp, #-5]
  117f48:	e3530004 	cmp	r3, #4
  117f4c:	1a000017 	bne	117fb0 <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117f50:	e55b3007 	ldrb	r3, [fp, #-7]
  117f54:	e3530003 	cmp	r3, #3
  117f58:	8a000009 	bhi	117f84 <dns_enqueue+0x254>
  117f5c:	e55b2007 	ldrb	r2, [fp, #-7]
  117f60:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117f64:	e3403014 	movt	r3, #20
  117f68:	e3a01e11 	mov	r1, #272	; 0x110
  117f6c:	e0020291 	mul	r2, r1, r2
  117f70:	e0833002 	add	r3, r3, r2
  117f74:	e283300a 	add	r3, r3, #10
  117f78:	e5d33000 	ldrb	r3, [r3]
  117f7c:	e3530003 	cmp	r3, #3
  117f80:	0a000001 	beq	117f8c <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117f84:	e3e03000 	mvn	r3, #0
  117f88:	ea000068 	b	118130 <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117f8c:	e55b3007 	ldrb	r3, [fp, #-7]
  117f90:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117f94:	e55b3005 	ldrb	r3, [fp, #-5]
  117f98:	e3a02e11 	mov	r2, #272	; 0x110
  117f9c:	e0020392 	mul	r2, r2, r3
  117fa0:	e30d3c74 	movw	r3, #56436	; 0xdc74
  117fa4:	e3403014 	movt	r3, #20
  117fa8:	e0823003 	add	r3, r2, r3
  117fac:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117fb0:	e3a03000 	mov	r3, #0
  117fb4:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117fb8:	e3a03000 	mov	r3, #0
  117fbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117fc0:	ea000013 	b	118014 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117fc4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117fc8:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117fcc:	e3403014 	movt	r3, #20
  117fd0:	e3a0100c 	mov	r1, #12
  117fd4:	e0020291 	mul	r2, r1, r2
  117fd8:	e0833002 	add	r3, r3, r2
  117fdc:	e5933000 	ldr	r3, [r3]
  117fe0:	e3530000 	cmp	r3, #0
  117fe4:	1a000007 	bne	118008 <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  117fe8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117fec:	e3a0200c 	mov	r2, #12
  117ff0:	e0020392 	mul	r2, r2, r3
  117ff4:	e30e30b4 	movw	r3, #57524	; 0xe0b4
  117ff8:	e3403014 	movt	r3, #20
  117ffc:	e0823003 	add	r3, r2, r3
  118000:	e50b3010 	str	r3, [fp, #-16]
      break;
  118004:	ea000005 	b	118020 <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  118008:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11800c:	e2833001 	add	r3, r3, #1
  118010:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118014:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118018:	e3530003 	cmp	r3, #3
  11801c:	9affffe8 	bls	117fc4 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  118020:	e51b3010 	ldr	r3, [fp, #-16]
  118024:	e3530000 	cmp	r3, #0
  118028:	1a000001 	bne	118034 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  11802c:	e3e03000 	mvn	r3, #0
  118030:	ea00003e 	b	118130 <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  118034:	e51b3010 	ldr	r3, [fp, #-16]
  118038:	e55b2005 	ldrb	r2, [fp, #-5]
  11803c:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  118040:	e51b300c 	ldr	r3, [fp, #-12]
  118044:	e3a02001 	mov	r2, #1
  118048:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  11804c:	e30d3c71 	movw	r3, #56433	; 0xdc71
  118050:	e3403014 	movt	r3, #20
  118054:	e5d32000 	ldrb	r2, [r3]
  118058:	e51b300c 	ldr	r3, [fp, #-12]
  11805c:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  118060:	e51b3010 	ldr	r3, [fp, #-16]
  118064:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  118068:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  11806c:	e51b3010 	ldr	r3, [fp, #-16]
  118070:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  118074:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  118078:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11807c:	e35300ff 	cmp	r3, #255	; 0xff
  118080:	31a03003 	movcc	r3, r3
  118084:	23a030ff 	movcs	r3, #255	; 0xff
  118088:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  11808c:	e51b300c 	ldr	r3, [fp, #-12]
  118090:	e2833010 	add	r3, r3, #16
  118094:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118098:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  11809c:	e1a00003 	mov	r0, r3
  1180a0:	eb00a337 	bl	140d84 <memcpy>
  entry->name[namelen] = 0;
  1180a4:	e51b200c 	ldr	r2, [fp, #-12]
  1180a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180ac:	e0823003 	add	r3, r2, r3
  1180b0:	e2833010 	add	r3, r3, #16
  1180b4:	e3a02000 	mov	r2, #0
  1180b8:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  1180bc:	ebfffc32 	bl	11718c <dns_alloc_pcb>
  1180c0:	e1a03000 	mov	r3, r0
  1180c4:	e1a02003 	mov	r2, r3
  1180c8:	e51b300c 	ldr	r3, [fp, #-12]
  1180cc:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  1180d0:	e51b300c 	ldr	r3, [fp, #-12]
  1180d4:	e5d3300f 	ldrb	r3, [r3, #15]
  1180d8:	e3530003 	cmp	r3, #3
  1180dc:	9a000007 	bls	118100 <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  1180e0:	e51b300c 	ldr	r3, [fp, #-12]
  1180e4:	e3a02000 	mov	r2, #0
  1180e8:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  1180ec:	e51b3010 	ldr	r3, [fp, #-16]
  1180f0:	e3a02000 	mov	r2, #0
  1180f4:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  1180f8:	e3e03000 	mvn	r3, #0
  1180fc:	ea00000b 	b	118130 <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  118100:	e30d3c71 	movw	r3, #56433	; 0xdc71
  118104:	e3403014 	movt	r3, #20
  118108:	e5d33000 	ldrb	r3, [r3]
  11810c:	e2833001 	add	r3, r3, #1
  118110:	e6ef2073 	uxtb	r2, r3
  118114:	e30d3c71 	movw	r3, #56433	; 0xdc71
  118118:	e3403014 	movt	r3, #20
  11811c:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  118120:	e55b3005 	ldrb	r3, [fp, #-5]
  118124:	e1a00003 	mov	r0, r3
  118128:	ebfffd38 	bl	117610 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  11812c:	e3e03004 	mvn	r3, #4
}
  118130:	e1a00003 	mov	r0, r3
  118134:	e24bd004 	sub	sp, fp, #4
  118138:	e8bd8800 	pop	{fp, pc}

0011813c <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  11813c:	e92d4800 	push	{fp, lr}
  118140:	e28db004 	add	fp, sp, #4
  118144:	e24dd018 	sub	sp, sp, #24
  118148:	e50b0008 	str	r0, [fp, #-8]
  11814c:	e50b100c 	str	r1, [fp, #-12]
  118150:	e50b2010 	str	r2, [fp, #-16]
  118154:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  118158:	e3a03000 	mov	r3, #0
  11815c:	e58d3000 	str	r3, [sp]
  118160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118164:	e51b2010 	ldr	r2, [fp, #-16]
  118168:	e51b100c 	ldr	r1, [fp, #-12]
  11816c:	e51b0008 	ldr	r0, [fp, #-8]
  118170:	eb000003 	bl	118184 <dns_gethostbyname_addrtype>
  118174:	e1a03000 	mov	r3, r0
}
  118178:	e1a00003 	mov	r0, r3
  11817c:	e24bd004 	sub	sp, fp, #4
  118180:	e8bd8800 	pop	{fp, pc}

00118184 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  118184:	e92d4800 	push	{fp, lr}
  118188:	e28db004 	add	fp, sp, #4
  11818c:	e24dd018 	sub	sp, sp, #24
  118190:	e50b0010 	str	r0, [fp, #-16]
  118194:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118198:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11819c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  1181a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1181a4:	e3530000 	cmp	r3, #0
  1181a8:	0a000006 	beq	1181c8 <dns_gethostbyname_addrtype+0x44>
  1181ac:	e51b3010 	ldr	r3, [fp, #-16]
  1181b0:	e3530000 	cmp	r3, #0
  1181b4:	0a000003 	beq	1181c8 <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  1181b8:	e51b3010 	ldr	r3, [fp, #-16]
  1181bc:	e5d33000 	ldrb	r3, [r3]
  1181c0:	e3530000 	cmp	r3, #0
  1181c4:	1a000001 	bne	1181d0 <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  1181c8:	e3e0300f 	mvn	r3, #15
  1181cc:	ea000024 	b	118264 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  1181d0:	e51b0010 	ldr	r0, [fp, #-16]
  1181d4:	eb00a4b3 	bl	1414a8 <strlen>
  1181d8:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  1181dc:	e51b3008 	ldr	r3, [fp, #-8]
  1181e0:	e35300ff 	cmp	r3, #255	; 0xff
  1181e4:	9a000001 	bls	1181f0 <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  1181e8:	e3e0300f 	mvn	r3, #15
  1181ec:	ea00001c 	b	118264 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  1181f0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1181f4:	e51b0010 	ldr	r0, [fp, #-16]
  1181f8:	eb006936 	bl	1326d8 <ip4addr_aton>
  1181fc:	e1a03000 	mov	r3, r0
  118200:	e3530000 	cmp	r3, #0
  118204:	0a000001 	beq	118210 <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  118208:	e3a03000 	mov	r3, #0
  11820c:	ea000014 	b	118264 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  118210:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118214:	e51b0010 	ldr	r0, [fp, #-16]
  118218:	ebfffa34 	bl	116af0 <dns_lookup>
  11821c:	e1a03000 	mov	r3, r0
  118220:	e3530000 	cmp	r3, #0
  118224:	1a000001 	bne	118230 <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  118228:	e3a03000 	mov	r3, #0
  11822c:	ea00000c 	b	118264 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  118230:	e30e30e4 	movw	r3, #57572	; 0xe0e4
  118234:	e3403014 	movt	r3, #20
  118238:	e5933000 	ldr	r3, [r3]
  11823c:	e3530000 	cmp	r3, #0
  118240:	1a000001 	bne	11824c <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  118244:	e3e03005 	mvn	r3, #5
  118248:	ea000005 	b	118264 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  11824c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  118250:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118254:	e51b1008 	ldr	r1, [fp, #-8]
  118258:	e51b0010 	ldr	r0, [fp, #-16]
  11825c:	ebfffeb3 	bl	117d30 <dns_enqueue>
  118260:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  118264:	e1a00003 	mov	r0, r3
  118268:	e24bd004 	sub	sp, fp, #4
  11826c:	e8bd8800 	pop	{fp, pc}

00118270 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  118270:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118274:	e28db000 	add	fp, sp, #0
  118278:	e24dd024 	sub	sp, sp, #36	; 0x24
  11827c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  118280:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  118284:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  118288:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  11828c:	e3a03000 	mov	r3, #0
  118290:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  118294:	e3a03000 	mov	r3, #0
  118298:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  11829c:	e51b3008 	ldr	r3, [fp, #-8]
  1182a0:	e2033001 	and	r3, r3, #1
  1182a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  1182a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1182ac:	e3530000 	cmp	r3, #0
  1182b0:	0a00000c 	beq	1182e8 <lwip_standard_chksum+0x78>
  1182b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182b8:	e3530000 	cmp	r3, #0
  1182bc:	da000009 	ble	1182e8 <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  1182c0:	e51b2008 	ldr	r2, [fp, #-8]
  1182c4:	e2823001 	add	r3, r2, #1
  1182c8:	e50b3008 	str	r3, [fp, #-8]
  1182cc:	e24b3016 	sub	r3, fp, #22
  1182d0:	e2833001 	add	r3, r3, #1
  1182d4:	e5d22000 	ldrb	r2, [r2]
  1182d8:	e5c32000 	strb	r2, [r3]
    len--;
  1182dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182e0:	e2433001 	sub	r3, r3, #1
  1182e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  1182e8:	e51b3008 	ldr	r3, [fp, #-8]
  1182ec:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  1182f0:	ea00000a 	b	118320 <lwip_standard_chksum+0xb0>
    sum += *ps++;
  1182f4:	e51b300c 	ldr	r3, [fp, #-12]
  1182f8:	e2832002 	add	r2, r3, #2
  1182fc:	e50b200c 	str	r2, [fp, #-12]
  118300:	e1d330b0 	ldrh	r3, [r3]
  118304:	e1a02003 	mov	r2, r3
  118308:	e51b3010 	ldr	r3, [fp, #-16]
  11830c:	e0833002 	add	r3, r3, r2
  118310:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  118314:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118318:	e2433002 	sub	r3, r3, #2
  11831c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  118320:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118324:	e3530001 	cmp	r3, #1
  118328:	cafffff1 	bgt	1182f4 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  11832c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118330:	e3530000 	cmp	r3, #0
  118334:	da000003 	ble	118348 <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  118338:	e24b3016 	sub	r3, fp, #22
  11833c:	e51b200c 	ldr	r2, [fp, #-12]
  118340:	e5d22000 	ldrb	r2, [r2]
  118344:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  118348:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11834c:	e1a02003 	mov	r2, r3
  118350:	e51b3010 	ldr	r3, [fp, #-16]
  118354:	e0833002 	add	r3, r3, r2
  118358:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  11835c:	e51b3010 	ldr	r3, [fp, #-16]
  118360:	e1a02823 	lsr	r2, r3, #16
  118364:	e51b3010 	ldr	r3, [fp, #-16]
  118368:	e6ff3073 	uxth	r3, r3
  11836c:	e0823003 	add	r3, r2, r3
  118370:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  118374:	e51b3010 	ldr	r3, [fp, #-16]
  118378:	e1a02823 	lsr	r2, r3, #16
  11837c:	e51b3010 	ldr	r3, [fp, #-16]
  118380:	e6ff3073 	uxth	r3, r3
  118384:	e0823003 	add	r3, r2, r3
  118388:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  11838c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118390:	e3530000 	cmp	r3, #0
  118394:	0a000007 	beq	1183b8 <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  118398:	e51b3010 	ldr	r3, [fp, #-16]
  11839c:	e1a03403 	lsl	r3, r3, #8
  1183a0:	e6ff2073 	uxth	r2, r3
  1183a4:	e51b3010 	ldr	r3, [fp, #-16]
  1183a8:	e1a03423 	lsr	r3, r3, #8
  1183ac:	e6ef3073 	uxtb	r3, r3
  1183b0:	e1823003 	orr	r3, r2, r3
  1183b4:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  1183b8:	e51b3010 	ldr	r3, [fp, #-16]
  1183bc:	e6ff3073 	uxth	r3, r3
}
  1183c0:	e1a00003 	mov	r0, r3
  1183c4:	e28bd000 	add	sp, fp, #0
  1183c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1183cc:	e12fff1e 	bx	lr

001183d0 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  1183d0:	e92d4800 	push	{fp, lr}
  1183d4:	e28db004 	add	fp, sp, #4
  1183d8:	e24dd018 	sub	sp, sp, #24
  1183dc:	e50b0010 	str	r0, [fp, #-16]
  1183e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1183e4:	e1a03001 	mov	r3, r1
  1183e8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1183ec:	e1a03002 	mov	r3, r2
  1183f0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  1183f4:	e3a03000 	mov	r3, #0
  1183f8:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  1183fc:	e51b3010 	ldr	r3, [fp, #-16]
  118400:	e50b3008 	str	r3, [fp, #-8]
  118404:	ea000025 	b	1184a0 <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  118408:	e51b3008 	ldr	r3, [fp, #-8]
  11840c:	e5932004 	ldr	r2, [r3, #4]
  118410:	e51b3008 	ldr	r3, [fp, #-8]
  118414:	e1d330ba 	ldrh	r3, [r3, #10]
  118418:	e1a01003 	mov	r1, r3
  11841c:	e1a00002 	mov	r0, r2
  118420:	ebffff92 	bl	118270 <lwip_standard_chksum>
  118424:	e1a03000 	mov	r3, r0
  118428:	e1a02003 	mov	r2, r3
  11842c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118430:	e0833002 	add	r3, r3, r2
  118434:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  118438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11843c:	e1a02823 	lsr	r2, r3, #16
  118440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118444:	e6ff3073 	uxth	r3, r3
  118448:	e0823003 	add	r3, r2, r3
  11844c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  118450:	e51b3008 	ldr	r3, [fp, #-8]
  118454:	e1d330ba 	ldrh	r3, [r3, #10]
  118458:	e2033001 	and	r3, r3, #1
  11845c:	e6ff3073 	uxth	r3, r3
  118460:	e3530000 	cmp	r3, #0
  118464:	0a00000a 	beq	118494 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  118468:	e55b3009 	ldrb	r3, [fp, #-9]
  11846c:	e2633001 	rsb	r3, r3, #1
  118470:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118478:	e1a03403 	lsl	r3, r3, #8
  11847c:	e6ff2073 	uxth	r2, r3
  118480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118484:	e1a03423 	lsr	r3, r3, #8
  118488:	e6ef3073 	uxtb	r3, r3
  11848c:	e1823003 	orr	r3, r2, r3
  118490:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  118494:	e51b3008 	ldr	r3, [fp, #-8]
  118498:	e5933000 	ldr	r3, [r3]
  11849c:	e50b3008 	str	r3, [fp, #-8]
  1184a0:	e51b3008 	ldr	r3, [fp, #-8]
  1184a4:	e3530000 	cmp	r3, #0
  1184a8:	1affffd6 	bne	118408 <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1184ac:	e55b3009 	ldrb	r3, [fp, #-9]
  1184b0:	e3530000 	cmp	r3, #0
  1184b4:	0a000007 	beq	1184d8 <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  1184b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184bc:	e1a03403 	lsl	r3, r3, #8
  1184c0:	e6ff2073 	uxth	r2, r3
  1184c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184c8:	e1a03423 	lsr	r3, r3, #8
  1184cc:	e6ef3073 	uxtb	r3, r3
  1184d0:	e1823003 	orr	r3, r2, r3
  1184d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1184d8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1184dc:	e6ff3073 	uxth	r3, r3
  1184e0:	e1a00003 	mov	r0, r3
  1184e4:	ebfff836 	bl	1165c4 <lwip_htons>
  1184e8:	e1a03000 	mov	r3, r0
  1184ec:	e1a02003 	mov	r2, r3
  1184f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184f4:	e0833002 	add	r3, r3, r2
  1184f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  1184fc:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118500:	e1a00003 	mov	r0, r3
  118504:	ebfff82e 	bl	1165c4 <lwip_htons>
  118508:	e1a03000 	mov	r3, r0
  11850c:	e1a02003 	mov	r2, r3
  118510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118514:	e0833002 	add	r3, r3, r2
  118518:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  11851c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118520:	e1a02823 	lsr	r2, r3, #16
  118524:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118528:	e6ff3073 	uxth	r3, r3
  11852c:	e0823003 	add	r3, r2, r3
  118530:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  118534:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118538:	e1a02823 	lsr	r2, r3, #16
  11853c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118540:	e6ff3073 	uxth	r3, r3
  118544:	e0823003 	add	r3, r2, r3
  118548:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  11854c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118550:	e6ff3073 	uxth	r3, r3
  118554:	e1e03003 	mvn	r3, r3
  118558:	e6ff3073 	uxth	r3, r3
}
  11855c:	e1a00003 	mov	r0, r3
  118560:	e24bd004 	sub	sp, fp, #4
  118564:	e8bd8800 	pop	{fp, pc}

00118568 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118568:	e92d4800 	push	{fp, lr}
  11856c:	e28db004 	add	fp, sp, #4
  118570:	e24dd018 	sub	sp, sp, #24
  118574:	e50b0010 	str	r0, [fp, #-16]
  118578:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11857c:	e1a03001 	mov	r3, r1
  118580:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118584:	e1a03002 	mov	r3, r2
  118588:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  11858c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118590:	e5933000 	ldr	r3, [r3]
  118594:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  118598:	e51b3008 	ldr	r3, [fp, #-8]
  11859c:	e6ff3073 	uxth	r3, r3
  1185a0:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185a4:	e51b3008 	ldr	r3, [fp, #-8]
  1185a8:	e1a03823 	lsr	r3, r3, #16
  1185ac:	e51b200c 	ldr	r2, [fp, #-12]
  1185b0:	e0823003 	add	r3, r2, r3
  1185b4:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  1185b8:	e59b3004 	ldr	r3, [fp, #4]
  1185bc:	e5933000 	ldr	r3, [r3]
  1185c0:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1185c4:	e51b3008 	ldr	r3, [fp, #-8]
  1185c8:	e6ff3073 	uxth	r3, r3
  1185cc:	e51b200c 	ldr	r2, [fp, #-12]
  1185d0:	e0823003 	add	r3, r2, r3
  1185d4:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185d8:	e51b3008 	ldr	r3, [fp, #-8]
  1185dc:	e1a03823 	lsr	r3, r3, #16
  1185e0:	e51b200c 	ldr	r2, [fp, #-12]
  1185e4:	e0823003 	add	r3, r2, r3
  1185e8:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  1185ec:	e51b300c 	ldr	r3, [fp, #-12]
  1185f0:	e1a02823 	lsr	r2, r3, #16
  1185f4:	e51b300c 	ldr	r3, [fp, #-12]
  1185f8:	e6ff3073 	uxth	r3, r3
  1185fc:	e0823003 	add	r3, r2, r3
  118600:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118604:	e51b300c 	ldr	r3, [fp, #-12]
  118608:	e1a02823 	lsr	r2, r3, #16
  11860c:	e51b300c 	ldr	r3, [fp, #-12]
  118610:	e6ff3073 	uxth	r3, r3
  118614:	e0823003 	add	r3, r2, r3
  118618:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  11861c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118620:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118624:	e51b300c 	ldr	r3, [fp, #-12]
  118628:	e51b0010 	ldr	r0, [fp, #-16]
  11862c:	ebffff67 	bl	1183d0 <inet_cksum_pseudo_base>
  118630:	e1a03000 	mov	r3, r0
}
  118634:	e1a00003 	mov	r0, r3
  118638:	e24bd004 	sub	sp, fp, #4
  11863c:	e8bd8800 	pop	{fp, pc}

00118640 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  118640:	e92d4800 	push	{fp, lr}
  118644:	e28db004 	add	fp, sp, #4
  118648:	e24dd018 	sub	sp, sp, #24
  11864c:	e50b0008 	str	r0, [fp, #-8]
  118650:	e50b3010 	str	r3, [fp, #-16]
  118654:	e1a03001 	mov	r3, r1
  118658:	e54b3009 	strb	r3, [fp, #-9]
  11865c:	e1a03002 	mov	r3, r2
  118660:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  118664:	e15b20bc 	ldrh	r2, [fp, #-12]
  118668:	e55b1009 	ldrb	r1, [fp, #-9]
  11866c:	e59b3004 	ldr	r3, [fp, #4]
  118670:	e58d3000 	str	r3, [sp]
  118674:	e51b3010 	ldr	r3, [fp, #-16]
  118678:	e51b0008 	ldr	r0, [fp, #-8]
  11867c:	ebffffb9 	bl	118568 <inet_chksum_pseudo>
  118680:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118684:	e1a00003 	mov	r0, r3
  118688:	e24bd004 	sub	sp, fp, #4
  11868c:	e8bd8800 	pop	{fp, pc}

00118690 <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  118690:	e92d4800 	push	{fp, lr}
  118694:	e28db004 	add	fp, sp, #4
  118698:	e24dd018 	sub	sp, sp, #24
  11869c:	e50b0010 	str	r0, [fp, #-16]
  1186a0:	e1a00001 	mov	r0, r1
  1186a4:	e1a01002 	mov	r1, r2
  1186a8:	e1a02003 	mov	r2, r3
  1186ac:	e1a03000 	mov	r3, r0
  1186b0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1186b4:	e1a03001 	mov	r3, r1
  1186b8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1186bc:	e1a03002 	mov	r3, r2
  1186c0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  1186c4:	e3a03000 	mov	r3, #0
  1186c8:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1186cc:	e51b3010 	ldr	r3, [fp, #-16]
  1186d0:	e50b3008 	str	r3, [fp, #-8]
  1186d4:	ea00003c 	b	1187cc <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  1186d8:	e51b3008 	ldr	r3, [fp, #-8]
  1186dc:	e1d330ba 	ldrh	r3, [r3, #10]
  1186e0:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  1186e4:	e15b20bc 	ldrh	r2, [fp, #-12]
  1186e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1186ec:	e1520003 	cmp	r2, r3
  1186f0:	9a000001 	bls	1186fc <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  1186f4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1186f8:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  1186fc:	e51b3008 	ldr	r3, [fp, #-8]
  118700:	e5933004 	ldr	r3, [r3, #4]
  118704:	e15b20bc 	ldrh	r2, [fp, #-12]
  118708:	e1a01002 	mov	r1, r2
  11870c:	e1a00003 	mov	r0, r3
  118710:	ebfffed6 	bl	118270 <lwip_standard_chksum>
  118714:	e1a03000 	mov	r3, r0
  118718:	e1a02003 	mov	r2, r3
  11871c:	e59b3004 	ldr	r3, [fp, #4]
  118720:	e0833002 	add	r3, r3, r2
  118724:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  118728:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11872c:	e15b30bc 	ldrh	r3, [fp, #-12]
  118730:	e0423003 	sub	r3, r2, r3
  118734:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  118738:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11873c:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  118740:	e1530002 	cmp	r3, r2
  118744:	9a000006 	bls	118764 <inet_cksum_pseudo_partial_base+0xd4>
  118748:	e30700e8 	movw	r0, #28904	; 0x70e8
  11874c:	e3400014 	movt	r0, #20
  118750:	ebffaa6f 	bl	103114 <rt_kprintf>
  118754:	e3a01e1a 	mov	r1, #416	; 0x1a0
  118758:	e30700f4 	movw	r0, #28916	; 0x70f4
  11875c:	e3400014 	movt	r0, #20
  118760:	ebffca5e 	bl	10b0e0 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  118764:	e59b3004 	ldr	r3, [fp, #4]
  118768:	e1a02823 	lsr	r2, r3, #16
  11876c:	e59b3004 	ldr	r3, [fp, #4]
  118770:	e6ff3073 	uxth	r3, r3
  118774:	e0823003 	add	r3, r2, r3
  118778:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  11877c:	e51b3008 	ldr	r3, [fp, #-8]
  118780:	e1d330ba 	ldrh	r3, [r3, #10]
  118784:	e2033001 	and	r3, r3, #1
  118788:	e6ff3073 	uxth	r3, r3
  11878c:	e3530000 	cmp	r3, #0
  118790:	0a00000a 	beq	1187c0 <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  118794:	e55b3009 	ldrb	r3, [fp, #-9]
  118798:	e2633001 	rsb	r3, r3, #1
  11879c:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  1187a0:	e59b3004 	ldr	r3, [fp, #4]
  1187a4:	e1a03403 	lsl	r3, r3, #8
  1187a8:	e6ff2073 	uxth	r2, r3
  1187ac:	e59b3004 	ldr	r3, [fp, #4]
  1187b0:	e1a03423 	lsr	r3, r3, #8
  1187b4:	e6ef3073 	uxtb	r3, r3
  1187b8:	e1823003 	orr	r3, r2, r3
  1187bc:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1187c0:	e51b3008 	ldr	r3, [fp, #-8]
  1187c4:	e5933000 	ldr	r3, [r3]
  1187c8:	e50b3008 	str	r3, [fp, #-8]
  1187cc:	e51b3008 	ldr	r3, [fp, #-8]
  1187d0:	e3530000 	cmp	r3, #0
  1187d4:	0a000002 	beq	1187e4 <inet_cksum_pseudo_partial_base+0x154>
  1187d8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1187dc:	e3530000 	cmp	r3, #0
  1187e0:	1affffbc 	bne	1186d8 <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1187e4:	e55b3009 	ldrb	r3, [fp, #-9]
  1187e8:	e3530000 	cmp	r3, #0
  1187ec:	0a000007 	beq	118810 <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  1187f0:	e59b3004 	ldr	r3, [fp, #4]
  1187f4:	e1a03403 	lsl	r3, r3, #8
  1187f8:	e6ff2073 	uxth	r2, r3
  1187fc:	e59b3004 	ldr	r3, [fp, #4]
  118800:	e1a03423 	lsr	r3, r3, #8
  118804:	e6ef3073 	uxtb	r3, r3
  118808:	e1823003 	orr	r3, r2, r3
  11880c:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  118810:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118814:	e6ff3073 	uxth	r3, r3
  118818:	e1a00003 	mov	r0, r3
  11881c:	ebfff768 	bl	1165c4 <lwip_htons>
  118820:	e1a03000 	mov	r3, r0
  118824:	e1a02003 	mov	r2, r3
  118828:	e59b3004 	ldr	r3, [fp, #4]
  11882c:	e0833002 	add	r3, r3, r2
  118830:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  118834:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118838:	e1a00003 	mov	r0, r3
  11883c:	ebfff760 	bl	1165c4 <lwip_htons>
  118840:	e1a03000 	mov	r3, r0
  118844:	e1a02003 	mov	r2, r3
  118848:	e59b3004 	ldr	r3, [fp, #4]
  11884c:	e0833002 	add	r3, r3, r2
  118850:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118854:	e59b3004 	ldr	r3, [fp, #4]
  118858:	e1a02823 	lsr	r2, r3, #16
  11885c:	e59b3004 	ldr	r3, [fp, #4]
  118860:	e6ff3073 	uxth	r3, r3
  118864:	e0823003 	add	r3, r2, r3
  118868:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  11886c:	e59b3004 	ldr	r3, [fp, #4]
  118870:	e1a02823 	lsr	r2, r3, #16
  118874:	e59b3004 	ldr	r3, [fp, #4]
  118878:	e6ff3073 	uxth	r3, r3
  11887c:	e0823003 	add	r3, r2, r3
  118880:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118884:	e59b3004 	ldr	r3, [fp, #4]
  118888:	e6ff3073 	uxth	r3, r3
  11888c:	e1e03003 	mvn	r3, r3
  118890:	e6ff3073 	uxth	r3, r3
}
  118894:	e1a00003 	mov	r0, r3
  118898:	e24bd004 	sub	sp, fp, #4
  11889c:	e8bd8800 	pop	{fp, pc}

001188a0 <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  1188a0:	e92d4800 	push	{fp, lr}
  1188a4:	e28db004 	add	fp, sp, #4
  1188a8:	e24dd020 	sub	sp, sp, #32
  1188ac:	e50b0010 	str	r0, [fp, #-16]
  1188b0:	e1a00001 	mov	r0, r1
  1188b4:	e1a01002 	mov	r1, r2
  1188b8:	e1a02003 	mov	r2, r3
  1188bc:	e1a03000 	mov	r3, r0
  1188c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1188c4:	e1a03001 	mov	r3, r1
  1188c8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1188cc:	e1a03002 	mov	r3, r2
  1188d0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1188d4:	e59b3004 	ldr	r3, [fp, #4]
  1188d8:	e5933000 	ldr	r3, [r3]
  1188dc:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1188e0:	e51b3008 	ldr	r3, [fp, #-8]
  1188e4:	e6ff3073 	uxth	r3, r3
  1188e8:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1188ec:	e51b3008 	ldr	r3, [fp, #-8]
  1188f0:	e1a03823 	lsr	r3, r3, #16
  1188f4:	e51b200c 	ldr	r2, [fp, #-12]
  1188f8:	e0823003 	add	r3, r2, r3
  1188fc:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  118900:	e59b3008 	ldr	r3, [fp, #8]
  118904:	e5933000 	ldr	r3, [r3]
  118908:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  11890c:	e51b3008 	ldr	r3, [fp, #-8]
  118910:	e6ff3073 	uxth	r3, r3
  118914:	e51b200c 	ldr	r2, [fp, #-12]
  118918:	e0823003 	add	r3, r2, r3
  11891c:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118920:	e51b3008 	ldr	r3, [fp, #-8]
  118924:	e1a03823 	lsr	r3, r3, #16
  118928:	e51b200c 	ldr	r2, [fp, #-12]
  11892c:	e0823003 	add	r3, r2, r3
  118930:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118934:	e51b300c 	ldr	r3, [fp, #-12]
  118938:	e1a02823 	lsr	r2, r3, #16
  11893c:	e51b300c 	ldr	r3, [fp, #-12]
  118940:	e6ff3073 	uxth	r3, r3
  118944:	e0823003 	add	r3, r2, r3
  118948:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  11894c:	e51b300c 	ldr	r3, [fp, #-12]
  118950:	e1a02823 	lsr	r2, r3, #16
  118954:	e51b300c 	ldr	r3, [fp, #-12]
  118958:	e6ff3073 	uxth	r3, r3
  11895c:	e0823003 	add	r3, r2, r3
  118960:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  118964:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  118968:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11896c:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118970:	e51b300c 	ldr	r3, [fp, #-12]
  118974:	e58d3000 	str	r3, [sp]
  118978:	e1a03000 	mov	r3, r0
  11897c:	e51b0010 	ldr	r0, [fp, #-16]
  118980:	ebffff42 	bl	118690 <inet_cksum_pseudo_partial_base>
  118984:	e1a03000 	mov	r3, r0
}
  118988:	e1a00003 	mov	r0, r3
  11898c:	e24bd004 	sub	sp, fp, #4
  118990:	e8bd8800 	pop	{fp, pc}

00118994 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  118994:	e92d4800 	push	{fp, lr}
  118998:	e28db004 	add	fp, sp, #4
  11899c:	e24dd018 	sub	sp, sp, #24
  1189a0:	e50b0008 	str	r0, [fp, #-8]
  1189a4:	e1a00001 	mov	r0, r1
  1189a8:	e1a01002 	mov	r1, r2
  1189ac:	e1a02003 	mov	r2, r3
  1189b0:	e1a03000 	mov	r3, r0
  1189b4:	e54b3009 	strb	r3, [fp, #-9]
  1189b8:	e1a03001 	mov	r3, r1
  1189bc:	e14b30bc 	strh	r3, [fp, #-12]
  1189c0:	e1a03002 	mov	r3, r2
  1189c4:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  1189c8:	e15b00be 	ldrh	r0, [fp, #-14]
  1189cc:	e15b20bc 	ldrh	r2, [fp, #-12]
  1189d0:	e55b1009 	ldrb	r1, [fp, #-9]
  1189d4:	e59b3008 	ldr	r3, [fp, #8]
  1189d8:	e58d3004 	str	r3, [sp, #4]
  1189dc:	e59b3004 	ldr	r3, [fp, #4]
  1189e0:	e58d3000 	str	r3, [sp]
  1189e4:	e1a03000 	mov	r3, r0
  1189e8:	e51b0008 	ldr	r0, [fp, #-8]
  1189ec:	ebffffab 	bl	1188a0 <inet_chksum_pseudo_partial>
  1189f0:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  1189f4:	e1a00003 	mov	r0, r3
  1189f8:	e24bd004 	sub	sp, fp, #4
  1189fc:	e8bd8800 	pop	{fp, pc}

00118a00 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  118a00:	e92d4800 	push	{fp, lr}
  118a04:	e28db004 	add	fp, sp, #4
  118a08:	e24dd008 	sub	sp, sp, #8
  118a0c:	e50b0008 	str	r0, [fp, #-8]
  118a10:	e1a03001 	mov	r3, r1
  118a14:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  118a18:	e15b30ba 	ldrh	r3, [fp, #-10]
  118a1c:	e1a01003 	mov	r1, r3
  118a20:	e51b0008 	ldr	r0, [fp, #-8]
  118a24:	ebfffe11 	bl	118270 <lwip_standard_chksum>
  118a28:	e1a03000 	mov	r3, r0
  118a2c:	e1e03003 	mvn	r3, r3
  118a30:	e6ff3073 	uxth	r3, r3
}
  118a34:	e1a00003 	mov	r0, r3
  118a38:	e24bd004 	sub	sp, fp, #4
  118a3c:	e8bd8800 	pop	{fp, pc}

00118a40 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  118a40:	e92d4800 	push	{fp, lr}
  118a44:	e28db004 	add	fp, sp, #4
  118a48:	e24dd018 	sub	sp, sp, #24
  118a4c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  118a50:	e3a03000 	mov	r3, #0
  118a54:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  118a58:	e3a03000 	mov	r3, #0
  118a5c:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  118a60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118a64:	e50b300c 	str	r3, [fp, #-12]
  118a68:	ea000025 	b	118b04 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  118a6c:	e51b300c 	ldr	r3, [fp, #-12]
  118a70:	e5932004 	ldr	r2, [r3, #4]
  118a74:	e51b300c 	ldr	r3, [fp, #-12]
  118a78:	e1d330ba 	ldrh	r3, [r3, #10]
  118a7c:	e1a01003 	mov	r1, r3
  118a80:	e1a00002 	mov	r0, r2
  118a84:	ebfffdf9 	bl	118270 <lwip_standard_chksum>
  118a88:	e1a03000 	mov	r3, r0
  118a8c:	e1a02003 	mov	r2, r3
  118a90:	e51b3008 	ldr	r3, [fp, #-8]
  118a94:	e0833002 	add	r3, r3, r2
  118a98:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118a9c:	e51b3008 	ldr	r3, [fp, #-8]
  118aa0:	e1a02823 	lsr	r2, r3, #16
  118aa4:	e51b3008 	ldr	r3, [fp, #-8]
  118aa8:	e6ff3073 	uxth	r3, r3
  118aac:	e0823003 	add	r3, r2, r3
  118ab0:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118ab4:	e51b300c 	ldr	r3, [fp, #-12]
  118ab8:	e1d330ba 	ldrh	r3, [r3, #10]
  118abc:	e2033001 	and	r3, r3, #1
  118ac0:	e6ff3073 	uxth	r3, r3
  118ac4:	e3530000 	cmp	r3, #0
  118ac8:	0a00000a 	beq	118af8 <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118acc:	e55b300d 	ldrb	r3, [fp, #-13]
  118ad0:	e2633001 	rsb	r3, r3, #1
  118ad4:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  118ad8:	e51b3008 	ldr	r3, [fp, #-8]
  118adc:	e1a03403 	lsl	r3, r3, #8
  118ae0:	e6ff2073 	uxth	r2, r3
  118ae4:	e51b3008 	ldr	r3, [fp, #-8]
  118ae8:	e1a03423 	lsr	r3, r3, #8
  118aec:	e6ef3073 	uxtb	r3, r3
  118af0:	e1823003 	orr	r3, r2, r3
  118af4:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  118af8:	e51b300c 	ldr	r3, [fp, #-12]
  118afc:	e5933000 	ldr	r3, [r3]
  118b00:	e50b300c 	str	r3, [fp, #-12]
  118b04:	e51b300c 	ldr	r3, [fp, #-12]
  118b08:	e3530000 	cmp	r3, #0
  118b0c:	1affffd6 	bne	118a6c <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  118b10:	e55b300d 	ldrb	r3, [fp, #-13]
  118b14:	e3530000 	cmp	r3, #0
  118b18:	0a000007 	beq	118b3c <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118b1c:	e51b3008 	ldr	r3, [fp, #-8]
  118b20:	e1a03403 	lsl	r3, r3, #8
  118b24:	e6ff2073 	uxth	r2, r3
  118b28:	e51b3008 	ldr	r3, [fp, #-8]
  118b2c:	e1a03423 	lsr	r3, r3, #8
  118b30:	e6ef3073 	uxtb	r3, r3
  118b34:	e1823003 	orr	r3, r2, r3
  118b38:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  118b3c:	e51b3008 	ldr	r3, [fp, #-8]
  118b40:	e6ff3073 	uxth	r3, r3
  118b44:	e1e03003 	mvn	r3, r3
  118b48:	e6ff3073 	uxth	r3, r3
}
  118b4c:	e1a00003 	mov	r0, r3
  118b50:	e24bd004 	sub	sp, fp, #4
  118b54:	e8bd8800 	pop	{fp, pc}

00118b58 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  118b58:	e92d4800 	push	{fp, lr}
  118b5c:	e28db004 	add	fp, sp, #4
  118b60:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  118b64:	eb000f7b 	bl	11c958 <stats_init>
#if !NO_SYS
  sys_init();
  118b68:	ebffc6b1 	bl	10a634 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  118b6c:	ebffc97a 	bl	10b15c <mem_init>
  memp_init();
  118b70:	eb0000c6 	bl	118e90 <memp_init>
  pbuf_init();
  netif_init();
  118b74:	eb0001d9 	bl	1192e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  118b78:	eb003b81 	bl	127984 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  118b7c:	eb001109 	bl	11cfa8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  118b80:	eb005cde 	bl	12ff00 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  118b84:	ebfff78e 	bl	1169c4 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  118b88:	eb0039d8 	bl	1272f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  118b8c:	e320f000 	nop	{0}
  118b90:	e24bd004 	sub	sp, fp, #4
  118b94:	e8bd8800 	pop	{fp, pc}

00118b98 <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  118b98:	e92d4800 	push	{fp, lr}
  118b9c:	e28db004 	add	fp, sp, #4
  118ba0:	e24dd090 	sub	sp, sp, #144	; 0x90
  118ba4:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118ba8:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118bac:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118bb0:	e1d330b8 	ldrh	r3, [r3, #8]
  118bb4:	e283301c 	add	r3, r3, #28
  118bb8:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118bbc:	e0823003 	add	r3, r2, r3
  118bc0:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118bc4:	e3a03000 	mov	r3, #0
  118bc8:	e14b30b6 	strh	r3, [fp, #-6]
  118bcc:	ea000022 	b	118c5c <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  118bd0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118bd4:	e51b200c 	ldr	r2, [fp, #-12]
  118bd8:	e0823003 	add	r3, r2, r3
  118bdc:	e5d33000 	ldrb	r3, [r3]
  118be0:	e35300cd 	cmp	r3, #205	; 0xcd
  118be4:	0a000019 	beq	118c50 <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  118be8:	e30733ac 	movw	r3, #29612	; 0x73ac
  118bec:	e3403014 	movt	r3, #20
  118bf0:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118bf4:	e1a0e003 	mov	lr, r3
  118bf8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118bfc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118c00:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  118c04:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  118c08:	e24b306c 	sub	r3, fp, #108	; 0x6c
  118c0c:	e3a02060 	mov	r2, #96	; 0x60
  118c10:	e3a01000 	mov	r1, #0
  118c14:	e1a00003 	mov	r0, r3
  118c18:	eb00a191 	bl	141264 <memset>
      strcat(errstr, desc->desc);
  118c1c:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118c20:	e5932000 	ldr	r2, [r3]
  118c24:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118c28:	e1a01002 	mov	r1, r2
  118c2c:	e1a00003 	mov	r0, r3
  118c30:	eb00a1f1 	bl	1413fc <strcat>
      LWIP_ASSERT(errstr, 0);
  118c34:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118c38:	e1a00003 	mov	r0, r3
  118c3c:	ebffa934 	bl	103114 <rt_kprintf>
  118c40:	e3a0108a 	mov	r1, #138	; 0x8a
  118c44:	e3070380 	movw	r0, #29568	; 0x7380
  118c48:	e3400014 	movt	r0, #20
  118c4c:	ebffc923 	bl	10b0e0 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118c50:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c54:	e2833001 	add	r3, r3, #1
  118c58:	e14b30b6 	strh	r3, [fp, #-6]
  118c5c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c60:	e353000f 	cmp	r3, #15
  118c64:	9affffd9 	bls	118bd0 <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118c68:	e320f000 	nop	{0}
  118c6c:	e24bd004 	sub	sp, fp, #4
  118c70:	e8bd8800 	pop	{fp, pc}

00118c74 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  118c74:	e92d4800 	push	{fp, lr}
  118c78:	e28db004 	add	fp, sp, #4
  118c7c:	e24dd090 	sub	sp, sp, #144	; 0x90
  118c80:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118c84:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118c88:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  118c8c:	e283300c 	add	r3, r3, #12
  118c90:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118c94:	e3a03000 	mov	r3, #0
  118c98:	e14b30b6 	strh	r3, [fp, #-6]
  118c9c:	ea000024 	b	118d34 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  118ca0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ca4:	e51b200c 	ldr	r2, [fp, #-12]
  118ca8:	e0823003 	add	r3, r2, r3
  118cac:	e5d33000 	ldrb	r3, [r3]
  118cb0:	e35300cd 	cmp	r3, #205	; 0xcd
  118cb4:	0a00001b 	beq	118d28 <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118cb8:	e307342c 	movw	r3, #29740	; 0x742c
  118cbc:	e3403014 	movt	r3, #20
  118cc0:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118cc4:	e1a0e003 	mov	lr, r3
  118cc8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118ccc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118cd0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118cd4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118cd8:	e59e3000 	ldr	r3, [lr]
  118cdc:	e5cc3000 	strb	r3, [ip]
  118ce0:	e24b306b 	sub	r3, fp, #107	; 0x6b
  118ce4:	e3a0205f 	mov	r2, #95	; 0x5f
  118ce8:	e3a01000 	mov	r1, #0
  118cec:	e1a00003 	mov	r0, r3
  118cf0:	eb00a15b 	bl	141264 <memset>
      strcat(errstr, desc->desc);
  118cf4:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118cf8:	e5932000 	ldr	r2, [r3]
  118cfc:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118d00:	e1a01002 	mov	r1, r2
  118d04:	e1a00003 	mov	r0, r3
  118d08:	eb00a1bb 	bl	1413fc <strcat>
      LWIP_ASSERT(errstr, 0);
  118d0c:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118d10:	e1a00003 	mov	r0, r3
  118d14:	ebffa8fe 	bl	103114 <rt_kprintf>
  118d18:	e3a010a5 	mov	r1, #165	; 0xa5
  118d1c:	e3070380 	movw	r0, #29568	; 0x7380
  118d20:	e3400014 	movt	r0, #20
  118d24:	ebffc8ed 	bl	10b0e0 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118d28:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d2c:	e2833001 	add	r3, r3, #1
  118d30:	e14b30b6 	strh	r3, [fp, #-6]
  118d34:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d38:	e353000f 	cmp	r3, #15
  118d3c:	9affffd7 	bls	118ca0 <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  118d40:	e320f000 	nop	{0}
  118d44:	e24bd004 	sub	sp, fp, #4
  118d48:	e8bd8800 	pop	{fp, pc}

00118d4c <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  118d4c:	e92d4800 	push	{fp, lr}
  118d50:	e28db004 	add	fp, sp, #4
  118d54:	e24dd010 	sub	sp, sp, #16
  118d58:	e50b0010 	str	r0, [fp, #-16]
  118d5c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118d60:	e51b3010 	ldr	r3, [fp, #-16]
  118d64:	e283300c 	add	r3, r3, #12
  118d68:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118d6c:	e3a02010 	mov	r2, #16
  118d70:	e3a010cd 	mov	r1, #205	; 0xcd
  118d74:	e51b0008 	ldr	r0, [fp, #-8]
  118d78:	eb00a139 	bl	141264 <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118d7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118d80:	e1d330b8 	ldrh	r3, [r3, #8]
  118d84:	e283301c 	add	r3, r3, #28
  118d88:	e51b2010 	ldr	r2, [fp, #-16]
  118d8c:	e0823003 	add	r3, r2, r3
  118d90:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118d94:	e3a02010 	mov	r2, #16
  118d98:	e3a010cd 	mov	r1, #205	; 0xcd
  118d9c:	e51b0008 	ldr	r0, [fp, #-8]
  118da0:	eb00a12f 	bl	141264 <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118da4:	e320f000 	nop	{0}
  118da8:	e24bd004 	sub	sp, fp, #4
  118dac:	e8bd8800 	pop	{fp, pc}

00118db0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118db0:	e92d4800 	push	{fp, lr}
  118db4:	e28db004 	add	fp, sp, #4
  118db8:	e24dd010 	sub	sp, sp, #16
  118dbc:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118dc0:	e51b3010 	ldr	r3, [fp, #-16]
  118dc4:	e5933010 	ldr	r3, [r3, #16]
  118dc8:	e3a02000 	mov	r2, #0
  118dcc:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118dd0:	e51b3010 	ldr	r3, [fp, #-16]
  118dd4:	e593300c 	ldr	r3, [r3, #12]
  118dd8:	e2833003 	add	r3, r3, #3
  118ddc:	e3c33003 	bic	r3, r3, #3
  118de0:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118de4:	e3a03000 	mov	r3, #0
  118de8:	e50b3008 	str	r3, [fp, #-8]
  118dec:	ea000014 	b	118e44 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118df0:	e51b3010 	ldr	r3, [fp, #-16]
  118df4:	e5933010 	ldr	r3, [r3, #16]
  118df8:	e5932000 	ldr	r2, [r3]
  118dfc:	e51b300c 	ldr	r3, [fp, #-12]
  118e00:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118e04:	e51b3010 	ldr	r3, [fp, #-16]
  118e08:	e5933010 	ldr	r3, [r3, #16]
  118e0c:	e51b200c 	ldr	r2, [fp, #-12]
  118e10:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118e14:	e51b1010 	ldr	r1, [fp, #-16]
  118e18:	e51b000c 	ldr	r0, [fp, #-12]
  118e1c:	ebffffca 	bl	118d4c <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118e20:	e51b3010 	ldr	r3, [fp, #-16]
  118e24:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118e28:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118e2c:	e51b200c 	ldr	r2, [fp, #-12]
  118e30:	e0823003 	add	r3, r2, r3
  118e34:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118e38:	e51b3008 	ldr	r3, [fp, #-8]
  118e3c:	e2833001 	add	r3, r3, #1
  118e40:	e50b3008 	str	r3, [fp, #-8]
  118e44:	e51b3010 	ldr	r3, [fp, #-16]
  118e48:	e1d330ba 	ldrh	r3, [r3, #10]
  118e4c:	e1a02003 	mov	r2, r3
  118e50:	e51b3008 	ldr	r3, [fp, #-8]
  118e54:	e1530002 	cmp	r3, r2
  118e58:	baffffe4 	blt	118df0 <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118e5c:	e51b3010 	ldr	r3, [fp, #-16]
  118e60:	e5933004 	ldr	r3, [r3, #4]
  118e64:	e51b2010 	ldr	r2, [fp, #-16]
  118e68:	e1d220ba 	ldrh	r2, [r2, #10]
  118e6c:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118e70:	e51b3010 	ldr	r3, [fp, #-16]
  118e74:	e5933004 	ldr	r3, [r3, #4]
  118e78:	e51b2010 	ldr	r2, [fp, #-16]
  118e7c:	e5922000 	ldr	r2, [r2]
  118e80:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118e84:	e320f000 	nop	{0}
  118e88:	e24bd004 	sub	sp, fp, #4
  118e8c:	e8bd8800 	pop	{fp, pc}

00118e90 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118e90:	e92d4800 	push	{fp, lr}
  118e94:	e28db004 	add	fp, sp, #4
  118e98:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118e9c:	e3a03000 	mov	r3, #0
  118ea0:	e14b30b6 	strh	r3, [fp, #-6]
  118ea4:	ea000014 	b	118efc <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118ea8:	e15b20b6 	ldrh	r2, [fp, #-6]
  118eac:	e307333c 	movw	r3, #29500	; 0x733c
  118eb0:	e3403014 	movt	r3, #20
  118eb4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118eb8:	e1a00003 	mov	r0, r3
  118ebc:	ebffffbb 	bl	118db0 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118ec0:	e15b20b6 	ldrh	r2, [fp, #-6]
  118ec4:	e307333c 	movw	r3, #29500	; 0x733c
  118ec8:	e3403014 	movt	r3, #20
  118ecc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118ed0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ed4:	e5921004 	ldr	r1, [r2, #4]
  118ed8:	e30c2a50 	movw	r2, #51792	; 0xca50
  118edc:	e3402015 	movt	r2, #21
  118ee0:	e2833034 	add	r3, r3, #52	; 0x34
  118ee4:	e1a03103 	lsl	r3, r3, #2
  118ee8:	e0823003 	add	r3, r2, r3
  118eec:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118ef0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ef4:	e2833001 	add	r3, r3, #1
  118ef8:	e14b30b6 	strh	r3, [fp, #-6]
  118efc:	e15b30b6 	ldrh	r3, [fp, #-6]
  118f00:	e3530010 	cmp	r3, #16
  118f04:	9affffe7 	bls	118ea8 <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118f08:	e320f000 	nop	{0}
  118f0c:	e24bd004 	sub	sp, fp, #4
  118f10:	e8bd8800 	pop	{fp, pc}

00118f14 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118f14:	e92d4800 	push	{fp, lr}
  118f18:	e28db004 	add	fp, sp, #4
  118f1c:	e24dd018 	sub	sp, sp, #24
  118f20:	e50b0010 	str	r0, [fp, #-16]
  118f24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118f28:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118f2c:	ebffa4c2 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118f30:	e51b3010 	ldr	r3, [fp, #-16]
  118f34:	e5933010 	ldr	r3, [r3, #16]
  118f38:	e5933000 	ldr	r3, [r3]
  118f3c:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118f40:	e51b3008 	ldr	r3, [fp, #-8]
  118f44:	e3530000 	cmp	r3, #0
  118f48:	0a000036 	beq	119028 <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118f4c:	e51b1010 	ldr	r1, [fp, #-16]
  118f50:	e51b0008 	ldr	r0, [fp, #-8]
  118f54:	ebffff0f 	bl	118b98 <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118f58:	e51b1010 	ldr	r1, [fp, #-16]
  118f5c:	e51b0008 	ldr	r0, [fp, #-8]
  118f60:	ebffff43 	bl	118c74 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118f64:	e51b3010 	ldr	r3, [fp, #-16]
  118f68:	e5933010 	ldr	r3, [r3, #16]
  118f6c:	e51b2008 	ldr	r2, [fp, #-8]
  118f70:	e5922000 	ldr	r2, [r2]
  118f74:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118f78:	e51b3008 	ldr	r3, [fp, #-8]
  118f7c:	e3a02000 	mov	r2, #0
  118f80:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118f84:	e51b3008 	ldr	r3, [fp, #-8]
  118f88:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118f8c:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118f90:	e51b3008 	ldr	r3, [fp, #-8]
  118f94:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118f98:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118f9c:	e51b3008 	ldr	r3, [fp, #-8]
  118fa0:	e2033003 	and	r3, r3, #3
  118fa4:	e3530000 	cmp	r3, #0
  118fa8:	0a000006 	beq	118fc8 <do_memp_malloc_pool_fn+0xb4>
  118fac:	e30704ac 	movw	r0, #29868	; 0x74ac
  118fb0:	e3400014 	movt	r0, #20
  118fb4:	ebffa856 	bl	103114 <rt_kprintf>
  118fb8:	e3001149 	movw	r1, #329	; 0x149
  118fbc:	e3070380 	movw	r0, #29568	; 0x7380
  118fc0:	e3400014 	movt	r0, #20
  118fc4:	ebffc845 	bl	10b0e0 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118fc8:	e51b3010 	ldr	r3, [fp, #-16]
  118fcc:	e5933004 	ldr	r3, [r3, #4]
  118fd0:	e1d320b8 	ldrh	r2, [r3, #8]
  118fd4:	e2822001 	add	r2, r2, #1
  118fd8:	e6ff2072 	uxth	r2, r2
  118fdc:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118fe0:	e51b3010 	ldr	r3, [fp, #-16]
  118fe4:	e5933004 	ldr	r3, [r3, #4]
  118fe8:	e1d320b8 	ldrh	r2, [r3, #8]
  118fec:	e51b3010 	ldr	r3, [fp, #-16]
  118ff0:	e5933004 	ldr	r3, [r3, #4]
  118ff4:	e1d330ba 	ldrh	r3, [r3, #10]
  118ff8:	e1520003 	cmp	r2, r3
  118ffc:	9a000005 	bls	119018 <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  119000:	e51b3010 	ldr	r3, [fp, #-16]
  119004:	e5932004 	ldr	r2, [r3, #4]
  119008:	e51b3010 	ldr	r3, [fp, #-16]
  11900c:	e5933004 	ldr	r3, [r3, #4]
  119010:	e1d220b8 	ldrh	r2, [r2, #8]
  119014:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  119018:	ebffa48d 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  11901c:	e51b3008 	ldr	r3, [fp, #-8]
  119020:	e283301c 	add	r3, r3, #28
  119024:	ea000007 	b	119048 <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  119028:	e51b3010 	ldr	r3, [fp, #-16]
  11902c:	e5933004 	ldr	r3, [r3, #4]
  119030:	e1d320b4 	ldrh	r2, [r3, #4]
  119034:	e2822001 	add	r2, r2, #1
  119038:	e6ff2072 	uxth	r2, r2
  11903c:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  119040:	ebffa483 	bl	102254 <rt_exit_critical>
  return NULL;
  119044:	e3a03000 	mov	r3, #0
}
  119048:	e1a00003 	mov	r0, r3
  11904c:	e24bd004 	sub	sp, fp, #4
  119050:	e8bd8800 	pop	{fp, pc}

00119054 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  119054:	e92d4800 	push	{fp, lr}
  119058:	e28db004 	add	fp, sp, #4
  11905c:	e24dd010 	sub	sp, sp, #16
  119060:	e50b0008 	str	r0, [fp, #-8]
  119064:	e50b100c 	str	r1, [fp, #-12]
  119068:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  11906c:	e51b3008 	ldr	r3, [fp, #-8]
  119070:	e3530000 	cmp	r3, #0
  119074:	1a000006 	bne	119094 <memp_malloc_pool_fn+0x40>
  119078:	e30704d0 	movw	r0, #29904	; 0x74d0
  11907c:	e3400014 	movt	r0, #20
  119080:	ebffa823 	bl	103114 <rt_kprintf>
  119084:	e3a01f5b 	mov	r1, #364	; 0x16c
  119088:	e3070380 	movw	r0, #29568	; 0x7380
  11908c:	e3400014 	movt	r0, #20
  119090:	ebffc812 	bl	10b0e0 <sys_arch_assert>
  if (desc == NULL) {
  119094:	e51b3008 	ldr	r3, [fp, #-8]
  119098:	e3530000 	cmp	r3, #0
  11909c:	1a000001 	bne	1190a8 <memp_malloc_pool_fn+0x54>
    return NULL;
  1190a0:	e3a03000 	mov	r3, #0
  1190a4:	ea000004 	b	1190bc <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  1190a8:	e51b2010 	ldr	r2, [fp, #-16]
  1190ac:	e51b100c 	ldr	r1, [fp, #-12]
  1190b0:	e51b0008 	ldr	r0, [fp, #-8]
  1190b4:	ebffff96 	bl	118f14 <do_memp_malloc_pool_fn>
  1190b8:	e1a03000 	mov	r3, r0
#endif
}
  1190bc:	e1a00003 	mov	r0, r3
  1190c0:	e24bd004 	sub	sp, fp, #4
  1190c4:	e8bd8800 	pop	{fp, pc}

001190c8 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  1190c8:	e92d4800 	push	{fp, lr}
  1190cc:	e28db004 	add	fp, sp, #4
  1190d0:	e24dd018 	sub	sp, sp, #24
  1190d4:	e50b0010 	str	r0, [fp, #-16]
  1190d8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1190dc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  1190e0:	e51b3010 	ldr	r3, [fp, #-16]
  1190e4:	e3530010 	cmp	r3, #16
  1190e8:	9a000008 	bls	119110 <memp_malloc_fn+0x48>
  1190ec:	e30704e4 	movw	r0, #29924	; 0x74e4
  1190f0:	e3400014 	movt	r0, #20
  1190f4:	ebffa806 	bl	103114 <rt_kprintf>
  1190f8:	e3001187 	movw	r1, #391	; 0x187
  1190fc:	e3070380 	movw	r0, #29568	; 0x7380
  119100:	e3400014 	movt	r0, #20
  119104:	ebffc7f5 	bl	10b0e0 <sys_arch_assert>
  119108:	e3a03000 	mov	r3, #0
  11910c:	ea000009 	b	119138 <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  119110:	e307333c 	movw	r3, #29500	; 0x733c
  119114:	e3403014 	movt	r3, #20
  119118:	e51b2010 	ldr	r2, [fp, #-16]
  11911c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  119120:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  119124:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119128:	e1a00003 	mov	r0, r3
  11912c:	ebffff78 	bl	118f14 <do_memp_malloc_pool_fn>
  119130:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  119134:	e51b3008 	ldr	r3, [fp, #-8]
}
  119138:	e1a00003 	mov	r0, r3
  11913c:	e24bd004 	sub	sp, fp, #4
  119140:	e8bd8800 	pop	{fp, pc}

00119144 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  119144:	e92d4800 	push	{fp, lr}
  119148:	e28db004 	add	fp, sp, #4
  11914c:	e24dd010 	sub	sp, sp, #16
  119150:	e50b0010 	str	r0, [fp, #-16]
  119154:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  119158:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11915c:	e2033003 	and	r3, r3, #3
  119160:	e3530000 	cmp	r3, #0
  119164:	0a000006 	beq	119184 <do_memp_free_pool+0x40>
  119168:	e3070504 	movw	r0, #29956	; 0x7504
  11916c:	e3400014 	movt	r0, #20
  119170:	ebffa7e7 	bl	103114 <rt_kprintf>
  119174:	e300119d 	movw	r1, #413	; 0x19d
  119178:	e3070380 	movw	r0, #29568	; 0x7380
  11917c:	e3400014 	movt	r0, #20
  119180:	ebffc7d6 	bl	10b0e0 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  119184:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119188:	e243301c 	sub	r3, r3, #28
  11918c:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  119190:	ebffa429 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  119194:	e51b1010 	ldr	r1, [fp, #-16]
  119198:	e51b0008 	ldr	r0, [fp, #-8]
  11919c:	ebfffe7d 	bl	118b98 <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  1191a0:	e51b1010 	ldr	r1, [fp, #-16]
  1191a4:	e51b0008 	ldr	r0, [fp, #-8]
  1191a8:	ebfffeb1 	bl	118c74 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  1191ac:	e51b3010 	ldr	r3, [fp, #-16]
  1191b0:	e5933004 	ldr	r3, [r3, #4]
  1191b4:	e1d320b8 	ldrh	r2, [r3, #8]
  1191b8:	e2422001 	sub	r2, r2, #1
  1191bc:	e6ff2072 	uxth	r2, r2
  1191c0:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  1191c4:	e51b3010 	ldr	r3, [fp, #-16]
  1191c8:	e5933010 	ldr	r3, [r3, #16]
  1191cc:	e5932000 	ldr	r2, [r3]
  1191d0:	e51b3008 	ldr	r3, [fp, #-8]
  1191d4:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  1191d8:	e51b3010 	ldr	r3, [fp, #-16]
  1191dc:	e5933010 	ldr	r3, [r3, #16]
  1191e0:	e51b2008 	ldr	r2, [fp, #-8]
  1191e4:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  1191e8:	ebffa419 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  1191ec:	e320f000 	nop	{0}
  1191f0:	e24bd004 	sub	sp, fp, #4
  1191f4:	e8bd8800 	pop	{fp, pc}

001191f8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  1191f8:	e92d4800 	push	{fp, lr}
  1191fc:	e28db004 	add	fp, sp, #4
  119200:	e24dd008 	sub	sp, sp, #8
  119204:	e50b0008 	str	r0, [fp, #-8]
  119208:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  11920c:	e51b3008 	ldr	r3, [fp, #-8]
  119210:	e3530000 	cmp	r3, #0
  119214:	1a000006 	bne	119234 <memp_free_pool+0x3c>
  119218:	e30704d0 	movw	r0, #29904	; 0x74d0
  11921c:	e3400014 	movt	r0, #20
  119220:	ebffa7bb 	bl	103114 <rt_kprintf>
  119224:	e30011c6 	movw	r1, #454	; 0x1c6
  119228:	e3070380 	movw	r0, #29568	; 0x7380
  11922c:	e3400014 	movt	r0, #20
  119230:	ebffc7aa 	bl	10b0e0 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  119234:	e51b3008 	ldr	r3, [fp, #-8]
  119238:	e3530000 	cmp	r3, #0
  11923c:	0a000006 	beq	11925c <memp_free_pool+0x64>
  119240:	e51b300c 	ldr	r3, [fp, #-12]
  119244:	e3530000 	cmp	r3, #0
  119248:	0a000003 	beq	11925c <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  11924c:	e51b100c 	ldr	r1, [fp, #-12]
  119250:	e51b0008 	ldr	r0, [fp, #-8]
  119254:	ebffffba 	bl	119144 <do_memp_free_pool>
  119258:	ea000000 	b	119260 <memp_free_pool+0x68>
    return;
  11925c:	e320f000 	nop	{0}
}
  119260:	e24bd004 	sub	sp, fp, #4
  119264:	e8bd8800 	pop	{fp, pc}

00119268 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  119268:	e92d4800 	push	{fp, lr}
  11926c:	e28db004 	add	fp, sp, #4
  119270:	e24dd008 	sub	sp, sp, #8
  119274:	e50b0008 	str	r0, [fp, #-8]
  119278:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  11927c:	e51b3008 	ldr	r3, [fp, #-8]
  119280:	e3530010 	cmp	r3, #16
  119284:	9a000007 	bls	1192a8 <memp_free+0x40>
  119288:	e3070524 	movw	r0, #29988	; 0x7524
  11928c:	e3400014 	movt	r0, #20
  119290:	ebffa79f 	bl	103114 <rt_kprintf>
  119294:	e30011db 	movw	r1, #475	; 0x1db
  119298:	e3070380 	movw	r0, #29568	; 0x7380
  11929c:	e3400014 	movt	r0, #20
  1192a0:	ebffc78e 	bl	10b0e0 <sys_arch_assert>
  1192a4:	ea00000b 	b	1192d8 <memp_free+0x70>

  if (mem == NULL) {
  1192a8:	e51b300c 	ldr	r3, [fp, #-12]
  1192ac:	e3530000 	cmp	r3, #0
  1192b0:	0a000007 	beq	1192d4 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  1192b4:	e307333c 	movw	r3, #29500	; 0x733c
  1192b8:	e3403014 	movt	r3, #20
  1192bc:	e51b2008 	ldr	r2, [fp, #-8]
  1192c0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1192c4:	e51b100c 	ldr	r1, [fp, #-12]
  1192c8:	e1a00003 	mov	r0, r3
  1192cc:	ebffff9c 	bl	119144 <do_memp_free_pool>
  1192d0:	ea000000 	b	1192d8 <memp_free+0x70>
    return;
  1192d4:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  1192d8:	e24bd004 	sub	sp, fp, #4
  1192dc:	e8bd8800 	pop	{fp, pc}

001192e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  1192e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1192e4:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  1192e8:	e320f000 	nop	{0}
  1192ec:	e28bd000 	add	sp, fp, #0
  1192f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1192f4:	e12fff1e 	bx	lr

001192f8 <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  1192f8:	e92d4800 	push	{fp, lr}
  1192fc:	e28db004 	add	fp, sp, #4
  119300:	e24dd008 	sub	sp, sp, #8
  119304:	e50b0008 	str	r0, [fp, #-8]
  119308:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  11930c:	e51b300c 	ldr	r3, [fp, #-12]
  119310:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119314:	e2033018 	and	r3, r3, #24
  119318:	e3530000 	cmp	r3, #0
  11931c:	0a000004 	beq	119334 <netif_input+0x3c>
    return ethernet_input(p, inp);
  119320:	e51b100c 	ldr	r1, [fp, #-12]
  119324:	e51b0008 	ldr	r0, [fp, #-8]
  119328:	eb003e31 	bl	128bf4 <ethernet_input>
  11932c:	e1a03000 	mov	r3, r0
  119330:	ea000003 	b	119344 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  119334:	e51b100c 	ldr	r1, [fp, #-12]
  119338:	e51b0008 	ldr	r0, [fp, #-8]
  11933c:	eb006038 	bl	131424 <ip4_input>
  119340:	e1a03000 	mov	r3, r0
}
  119344:	e1a00003 	mov	r0, r3
  119348:	e24bd004 	sub	sp, fp, #4
  11934c:	e8bd8800 	pop	{fp, pc}

00119350 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  119350:	e92d4800 	push	{fp, lr}
  119354:	e28db004 	add	fp, sp, #4
  119358:	e24dd010 	sub	sp, sp, #16
  11935c:	e50b0008 	str	r0, [fp, #-8]
  119360:	e50b100c 	str	r1, [fp, #-12]
  119364:	e50b2010 	str	r2, [fp, #-16]
  119368:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  11936c:	e59b3008 	ldr	r3, [fp, #8]
  119370:	e3530000 	cmp	r3, #0
  119374:	1a000006 	bne	119394 <netif_add+0x44>
  119378:	e3070540 	movw	r0, #30016	; 0x7540
  11937c:	e3400014 	movt	r0, #20
  119380:	ebffa763 	bl	103114 <rt_kprintf>
  119384:	e3001105 	movw	r1, #261	; 0x105
  119388:	e3070558 	movw	r0, #30040	; 0x7558
  11938c:	e3400014 	movt	r0, #20
  119390:	ebffc752 	bl	10b0e0 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  119394:	e51b3008 	ldr	r3, [fp, #-8]
  119398:	e3a02000 	mov	r2, #0
  11939c:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  1193a0:	e51b3008 	ldr	r3, [fp, #-8]
  1193a4:	e3a02000 	mov	r2, #0
  1193a8:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  1193ac:	e51b3008 	ldr	r3, [fp, #-8]
  1193b0:	e3a02000 	mov	r2, #0
  1193b4:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  1193b8:	e51b3008 	ldr	r3, [fp, #-8]
  1193bc:	e3a02000 	mov	r2, #0
  1193c0:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  1193c4:	e51b3008 	ldr	r3, [fp, #-8]
  1193c8:	e2833028 	add	r3, r3, #40	; 0x28
  1193cc:	e3a02008 	mov	r2, #8
  1193d0:	e3a01000 	mov	r1, #0
  1193d4:	e1a00003 	mov	r0, r3
  1193d8:	eb009fa1 	bl	141264 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  1193dc:	e51b3008 	ldr	r3, [fp, #-8]
  1193e0:	e3a02003 	mov	r2, #3
  1193e4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  1193e8:	e51b3008 	ldr	r3, [fp, #-8]
  1193ec:	e3a02000 	mov	r2, #0
  1193f0:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  1193f4:	e51b3008 	ldr	r3, [fp, #-8]
  1193f8:	e3a02000 	mov	r2, #0
  1193fc:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  119400:	e51b3008 	ldr	r3, [fp, #-8]
  119404:	e3a02000 	mov	r2, #0
  119408:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  11940c:	e51b3008 	ldr	r3, [fp, #-8]
  119410:	e3a02000 	mov	r2, #0
  119414:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  119418:	e51b3008 	ldr	r3, [fp, #-8]
  11941c:	e3a02000 	mov	r2, #0
  119420:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  119424:	e51b3008 	ldr	r3, [fp, #-8]
  119428:	e59b2004 	ldr	r2, [fp, #4]
  11942c:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  119430:	e30e3240 	movw	r3, #57920	; 0xe240
  119434:	e3403014 	movt	r3, #20
  119438:	e5d32000 	ldrb	r2, [r3]
  11943c:	e2823001 	add	r3, r2, #1
  119440:	e6ef1073 	uxtb	r1, r3
  119444:	e30e3240 	movw	r3, #57920	; 0xe240
  119448:	e3403014 	movt	r3, #20
  11944c:	e5c31000 	strb	r1, [r3]
  119450:	e51b3008 	ldr	r3, [fp, #-8]
  119454:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  119458:	e51b3008 	ldr	r3, [fp, #-8]
  11945c:	e59b200c 	ldr	r2, [fp, #12]
  119460:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  119464:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119468:	e51b2010 	ldr	r2, [fp, #-16]
  11946c:	e51b100c 	ldr	r1, [fp, #-12]
  119470:	e51b0008 	ldr	r0, [fp, #-8]
  119474:	eb00001b 	bl	1194e8 <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  119478:	e59b3008 	ldr	r3, [fp, #8]
  11947c:	e51b0008 	ldr	r0, [fp, #-8]
  119480:	e12fff33 	blx	r3
  119484:	e1a03000 	mov	r3, r0
  119488:	e3530000 	cmp	r3, #0
  11948c:	0a000001 	beq	119498 <netif_add+0x148>
    return NULL;
  119490:	e3a03000 	mov	r3, #0
  119494:	ea000010 	b	1194dc <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  119498:	e30c3a44 	movw	r3, #51780	; 0xca44
  11949c:	e3403015 	movt	r3, #21
  1194a0:	e5932000 	ldr	r2, [r3]
  1194a4:	e51b3008 	ldr	r3, [fp, #-8]
  1194a8:	e5832000 	str	r2, [r3]
  netif_list = netif;
  1194ac:	e30c3a44 	movw	r3, #51780	; 0xca44
  1194b0:	e3403015 	movt	r3, #21
  1194b4:	e51b2008 	ldr	r2, [fp, #-8]
  1194b8:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1194bc:	e51b3008 	ldr	r3, [fp, #-8]
  1194c0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1194c4:	e2033020 	and	r3, r3, #32
  1194c8:	e3530000 	cmp	r3, #0
  1194cc:	0a000001 	beq	1194d8 <netif_add+0x188>
    igmp_start(netif);
  1194d0:	e51b0008 	ldr	r0, [fp, #-8]
  1194d4:	eb005a99 	bl	12ff40 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  1194d8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1194dc:	e1a00003 	mov	r0, r3
  1194e0:	e24bd004 	sub	sp, fp, #4
  1194e4:	e8bd8800 	pop	{fp, pc}

001194e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  1194e8:	e92d4800 	push	{fp, lr}
  1194ec:	e28db004 	add	fp, sp, #4
  1194f0:	e24dd010 	sub	sp, sp, #16
  1194f4:	e50b0008 	str	r0, [fp, #-8]
  1194f8:	e50b100c 	str	r1, [fp, #-12]
  1194fc:	e50b2010 	str	r2, [fp, #-16]
  119500:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  119504:	e51b300c 	ldr	r3, [fp, #-12]
  119508:	e3530000 	cmp	r3, #0
  11950c:	0a000003 	beq	119520 <netif_set_addr+0x38>
  119510:	e51b300c 	ldr	r3, [fp, #-12]
  119514:	e5933000 	ldr	r3, [r3]
  119518:	e3530000 	cmp	r3, #0
  11951c:	1a000009 	bne	119548 <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  119520:	e51b100c 	ldr	r1, [fp, #-12]
  119524:	e51b0008 	ldr	r0, [fp, #-8]
  119528:	eb00009d 	bl	1197a4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  11952c:	e51b1010 	ldr	r1, [fp, #-16]
  119530:	e51b0008 	ldr	r0, [fp, #-8]
  119534:	eb0000fa 	bl	119924 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119538:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11953c:	e51b0008 	ldr	r0, [fp, #-8]
  119540:	eb0000de 	bl	1198c0 <netif_set_gw>
  119544:	ea000008 	b	11956c <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  119548:	e51b1010 	ldr	r1, [fp, #-16]
  11954c:	e51b0008 	ldr	r0, [fp, #-8]
  119550:	eb0000f3 	bl	119924 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119554:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119558:	e51b0008 	ldr	r0, [fp, #-8]
  11955c:	eb0000d7 	bl	1198c0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  119560:	e51b100c 	ldr	r1, [fp, #-12]
  119564:	e51b0008 	ldr	r0, [fp, #-8]
  119568:	eb00008d 	bl	1197a4 <netif_set_ipaddr>
  }
}
  11956c:	e320f000 	nop	{0}
  119570:	e24bd004 	sub	sp, fp, #4
  119574:	e8bd8800 	pop	{fp, pc}

00119578 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  119578:	e92d4800 	push	{fp, lr}
  11957c:	e28db004 	add	fp, sp, #4
  119580:	e24dd010 	sub	sp, sp, #16
  119584:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  119588:	e51b3010 	ldr	r3, [fp, #-16]
  11958c:	e3530000 	cmp	r3, #0
  119590:	0a00004e 	beq	1196d0 <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119594:	e51b3010 	ldr	r3, [fp, #-16]
  119598:	e2833004 	add	r3, r3, #4
  11959c:	e5933000 	ldr	r3, [r3]
  1195a0:	e3530000 	cmp	r3, #0
  1195a4:	0a00000e 	beq	1195e4 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195a8:	e51b3010 	ldr	r3, [fp, #-16]
  1195ac:	e2833004 	add	r3, r3, #4
  1195b0:	e3a01000 	mov	r1, #0
  1195b4:	e1a00003 	mov	r0, r3
  1195b8:	eb001aec 	bl	120170 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195bc:	e51b3010 	ldr	r3, [fp, #-16]
  1195c0:	e2833004 	add	r3, r3, #4
  1195c4:	e3a01000 	mov	r1, #0
  1195c8:	e1a00003 	mov	r0, r3
  1195cc:	eb003d5c 	bl	128b44 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195d0:	e51b3010 	ldr	r3, [fp, #-16]
  1195d4:	e2833004 	add	r3, r3, #4
  1195d8:	e3a01000 	mov	r1, #0
  1195dc:	e1a00003 	mov	r0, r3
  1195e0:	eb000cb0 	bl	11c8a8 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1195e4:	e51b3010 	ldr	r3, [fp, #-16]
  1195e8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1195ec:	e2033020 	and	r3, r3, #32
  1195f0:	e3530000 	cmp	r3, #0
  1195f4:	0a000001 	beq	119600 <netif_remove+0x88>
    igmp_stop(netif);
  1195f8:	e51b0010 	ldr	r0, [fp, #-16]
  1195fc:	eb005a75 	bl	12ffd8 <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  119600:	e51b3010 	ldr	r3, [fp, #-16]
  119604:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119608:	e2033001 	and	r3, r3, #1
  11960c:	e6ef3073 	uxtb	r3, r3
  119610:	e3530000 	cmp	r3, #0
  119614:	0a000001 	beq	119620 <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  119618:	e51b0010 	ldr	r0, [fp, #-16]
  11961c:	eb00013a 	bl	119b0c <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  119620:	e30c3a48 	movw	r3, #51784	; 0xca48
  119624:	e3403015 	movt	r3, #21
  119628:	e5933000 	ldr	r3, [r3]
  11962c:	e51b2010 	ldr	r2, [fp, #-16]
  119630:	e1520003 	cmp	r2, r3
  119634:	1a000001 	bne	119640 <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  119638:	e3a00000 	mov	r0, #0
  11963c:	eb0000d1 	bl	119988 <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  119640:	e30c3a44 	movw	r3, #51780	; 0xca44
  119644:	e3403015 	movt	r3, #21
  119648:	e5933000 	ldr	r3, [r3]
  11964c:	e51b2010 	ldr	r2, [fp, #-16]
  119650:	e1520003 	cmp	r2, r3
  119654:	1a000005 	bne	119670 <netif_remove+0xf8>
    netif_list = netif->next;
  119658:	e51b3010 	ldr	r3, [fp, #-16]
  11965c:	e5932000 	ldr	r2, [r3]
  119660:	e30c3a44 	movw	r3, #51780	; 0xca44
  119664:	e3403015 	movt	r3, #21
  119668:	e5832000 	str	r2, [r3]
  11966c:	ea000018 	b	1196d4 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119670:	e30c3a44 	movw	r3, #51780	; 0xca44
  119674:	e3403015 	movt	r3, #21
  119678:	e5933000 	ldr	r3, [r3]
  11967c:	e50b3008 	str	r3, [fp, #-8]
  119680:	ea00000c 	b	1196b8 <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  119684:	e51b3008 	ldr	r3, [fp, #-8]
  119688:	e5933000 	ldr	r3, [r3]
  11968c:	e51b2010 	ldr	r2, [fp, #-16]
  119690:	e1520003 	cmp	r2, r3
  119694:	1a000004 	bne	1196ac <netif_remove+0x134>
        tmp_netif->next = netif->next;
  119698:	e51b3010 	ldr	r3, [fp, #-16]
  11969c:	e5932000 	ldr	r2, [r3]
  1196a0:	e51b3008 	ldr	r3, [fp, #-8]
  1196a4:	e5832000 	str	r2, [r3]
        break;
  1196a8:	ea000005 	b	1196c4 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  1196ac:	e51b3008 	ldr	r3, [fp, #-8]
  1196b0:	e5933000 	ldr	r3, [r3]
  1196b4:	e50b3008 	str	r3, [fp, #-8]
  1196b8:	e51b3008 	ldr	r3, [fp, #-8]
  1196bc:	e3530000 	cmp	r3, #0
  1196c0:	1affffef 	bne	119684 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  1196c4:	e51b3008 	ldr	r3, [fp, #-8]
  1196c8:	e3530000 	cmp	r3, #0
  1196cc:	ea000000 	b	1196d4 <netif_remove+0x15c>
    return;
  1196d0:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  1196d4:	e24bd004 	sub	sp, fp, #4
  1196d8:	e8bd8800 	pop	{fp, pc}

001196dc <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  1196dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1196e0:	e28db000 	add	fp, sp, #0
  1196e4:	e24dd014 	sub	sp, sp, #20
  1196e8:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  1196ec:	e51b3010 	ldr	r3, [fp, #-16]
  1196f0:	e3530000 	cmp	r3, #0
  1196f4:	1a000001 	bne	119700 <netif_find+0x24>
    return NULL;
  1196f8:	e3a03000 	mov	r3, #0
  1196fc:	ea000024 	b	119794 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  119700:	e51b3010 	ldr	r3, [fp, #-16]
  119704:	e2833002 	add	r3, r3, #2
  119708:	e5d33000 	ldrb	r3, [r3]
  11970c:	e2433030 	sub	r3, r3, #48	; 0x30
  119710:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119714:	e30c3a44 	movw	r3, #51780	; 0xca44
  119718:	e3403015 	movt	r3, #21
  11971c:	e5933000 	ldr	r3, [r3]
  119720:	e50b3008 	str	r3, [fp, #-8]
  119724:	ea000016 	b	119784 <netif_find+0xa8>
    if (num == netif->num &&
  119728:	e51b3008 	ldr	r3, [fp, #-8]
  11972c:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  119730:	e55b2009 	ldrb	r2, [fp, #-9]
  119734:	e1520003 	cmp	r2, r3
  119738:	1a00000e 	bne	119778 <netif_find+0x9c>
       name[0] == netif->name[0] &&
  11973c:	e51b3010 	ldr	r3, [fp, #-16]
  119740:	e5d32000 	ldrb	r2, [r3]
  119744:	e51b3008 	ldr	r3, [fp, #-8]
  119748:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  11974c:	e1520003 	cmp	r2, r3
  119750:	1a000008 	bne	119778 <netif_find+0x9c>
       name[1] == netif->name[1]) {
  119754:	e51b3010 	ldr	r3, [fp, #-16]
  119758:	e2833001 	add	r3, r3, #1
  11975c:	e5d32000 	ldrb	r2, [r3]
  119760:	e51b3008 	ldr	r3, [fp, #-8]
  119764:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  119768:	e1520003 	cmp	r2, r3
  11976c:	1a000001 	bne	119778 <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  119770:	e51b3008 	ldr	r3, [fp, #-8]
  119774:	ea000006 	b	119794 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119778:	e51b3008 	ldr	r3, [fp, #-8]
  11977c:	e5933000 	ldr	r3, [r3]
  119780:	e50b3008 	str	r3, [fp, #-8]
  119784:	e51b3008 	ldr	r3, [fp, #-8]
  119788:	e3530000 	cmp	r3, #0
  11978c:	1affffe5 	bne	119728 <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  119790:	e3a03000 	mov	r3, #0
}
  119794:	e1a00003 	mov	r0, r3
  119798:	e28bd000 	add	sp, fp, #0
  11979c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1197a0:	e12fff1e 	bx	lr

001197a4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  1197a4:	e92d4800 	push	{fp, lr}
  1197a8:	e28db004 	add	fp, sp, #4
  1197ac:	e24dd010 	sub	sp, sp, #16
  1197b0:	e50b0010 	str	r0, [fp, #-16]
  1197b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  1197b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1197bc:	e3530000 	cmp	r3, #0
  1197c0:	0a000003 	beq	1197d4 <netif_set_ipaddr+0x30>
  1197c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1197c8:	e5933000 	ldr	r3, [r3]
  1197cc:	e50b3008 	str	r3, [fp, #-8]
  1197d0:	ea000003 	b	1197e4 <netif_set_ipaddr+0x40>
  1197d4:	e30938f8 	movw	r3, #39160	; 0x98f8
  1197d8:	e3403014 	movt	r3, #20
  1197dc:	e5933000 	ldr	r3, [r3]
  1197e0:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  1197e4:	e51b2008 	ldr	r2, [fp, #-8]
  1197e8:	e51b3010 	ldr	r3, [fp, #-16]
  1197ec:	e2833004 	add	r3, r3, #4
  1197f0:	e5933000 	ldr	r3, [r3]
  1197f4:	e1520003 	cmp	r2, r3
  1197f8:	0a00002d 	beq	1198b4 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1197fc:	e51b3010 	ldr	r3, [fp, #-16]
  119800:	e2833004 	add	r3, r3, #4
  119804:	e24b2008 	sub	r2, fp, #8
  119808:	e1a01002 	mov	r1, r2
  11980c:	e1a00003 	mov	r0, r3
  119810:	eb001a56 	bl	120170 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119814:	e51b3010 	ldr	r3, [fp, #-16]
  119818:	e2833004 	add	r3, r3, #4
  11981c:	e24b2008 	sub	r2, fp, #8
  119820:	e1a01002 	mov	r1, r2
  119824:	e1a00003 	mov	r0, r3
  119828:	eb003cc5 	bl	128b44 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  11982c:	e51b3010 	ldr	r3, [fp, #-16]
  119830:	e2833004 	add	r3, r3, #4
  119834:	e24b2008 	sub	r2, fp, #8
  119838:	e1a01002 	mov	r1, r2
  11983c:	e1a00003 	mov	r0, r3
  119840:	eb000c18 	bl	11c8a8 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  119844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119848:	e3530000 	cmp	r3, #0
  11984c:	0a000002 	beq	11985c <netif_set_ipaddr+0xb8>
  119850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119854:	e5933000 	ldr	r3, [r3]
  119858:	ea000000 	b	119860 <netif_set_ipaddr+0xbc>
  11985c:	e3a03000 	mov	r3, #0
  119860:	e51b2010 	ldr	r2, [fp, #-16]
  119864:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  119868:	e3a01001 	mov	r1, #1
  11986c:	e51b0010 	ldr	r0, [fp, #-16]
  119870:	eb000082 	bl	119a80 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  119874:	e51b3010 	ldr	r3, [fp, #-16]
  119878:	e593301c 	ldr	r3, [r3, #28]
  11987c:	e3530000 	cmp	r3, #0
  119880:	0a000003 	beq	119894 <netif_set_ipaddr+0xf0>
  119884:	e51b3010 	ldr	r3, [fp, #-16]
  119888:	e593301c 	ldr	r3, [r3, #28]
  11988c:	e51b0010 	ldr	r0, [fp, #-16]
  119890:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  119894:	e51b3010 	ldr	r3, [fp, #-16]
  119898:	e2833042 	add	r3, r3, #66	; 0x42
  11989c:	e1a00003 	mov	r0, r3
  1198a0:	ebffaf13 	bl	1054f4 <netdev_get_by_name>
  1198a4:	e1a03000 	mov	r3, r0
  1198a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1198ac:	e1a00003 	mov	r0, r3
  1198b0:	ebffb1df 	bl	106034 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  1198b4:	e320f000 	nop	{0}
  1198b8:	e24bd004 	sub	sp, fp, #4
  1198bc:	e8bd8800 	pop	{fp, pc}

001198c0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  1198c0:	e92d4800 	push	{fp, lr}
  1198c4:	e28db004 	add	fp, sp, #4
  1198c8:	e24dd008 	sub	sp, sp, #8
  1198cc:	e50b0008 	str	r0, [fp, #-8]
  1198d0:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  1198d4:	e51b300c 	ldr	r3, [fp, #-12]
  1198d8:	e3530000 	cmp	r3, #0
  1198dc:	0a000002 	beq	1198ec <netif_set_gw+0x2c>
  1198e0:	e51b300c 	ldr	r3, [fp, #-12]
  1198e4:	e5933000 	ldr	r3, [r3]
  1198e8:	ea000000 	b	1198f0 <netif_set_gw+0x30>
  1198ec:	e3a03000 	mov	r3, #0
  1198f0:	e51b2008 	ldr	r2, [fp, #-8]
  1198f4:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  1198f8:	e51b3008 	ldr	r3, [fp, #-8]
  1198fc:	e2833042 	add	r3, r3, #66	; 0x42
  119900:	e1a00003 	mov	r0, r3
  119904:	ebffaefa 	bl	1054f4 <netdev_get_by_name>
  119908:	e1a03000 	mov	r3, r0
  11990c:	e51b100c 	ldr	r1, [fp, #-12]
  119910:	e1a00003 	mov	r0, r3
  119914:	ebffb242 	bl	106224 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  119918:	e320f000 	nop	{0}
  11991c:	e24bd004 	sub	sp, fp, #4
  119920:	e8bd8800 	pop	{fp, pc}

00119924 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  119924:	e92d4800 	push	{fp, lr}
  119928:	e28db004 	add	fp, sp, #4
  11992c:	e24dd008 	sub	sp, sp, #8
  119930:	e50b0008 	str	r0, [fp, #-8]
  119934:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  119938:	e51b300c 	ldr	r3, [fp, #-12]
  11993c:	e3530000 	cmp	r3, #0
  119940:	0a000002 	beq	119950 <netif_set_netmask+0x2c>
  119944:	e51b300c 	ldr	r3, [fp, #-12]
  119948:	e5933000 	ldr	r3, [r3]
  11994c:	ea000000 	b	119954 <netif_set_netmask+0x30>
  119950:	e3a03000 	mov	r3, #0
  119954:	e51b2008 	ldr	r2, [fp, #-8]
  119958:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  11995c:	e51b3008 	ldr	r3, [fp, #-8]
  119960:	e2833042 	add	r3, r3, #66	; 0x42
  119964:	e1a00003 	mov	r0, r3
  119968:	ebffaee1 	bl	1054f4 <netdev_get_by_name>
  11996c:	e1a03000 	mov	r3, r0
  119970:	e51b100c 	ldr	r1, [fp, #-12]
  119974:	e1a00003 	mov	r0, r3
  119978:	ebffb1e7 	bl	10611c <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  11997c:	e320f000 	nop	{0}
  119980:	e24bd004 	sub	sp, fp, #4
  119984:	e8bd8800 	pop	{fp, pc}

00119988 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  119988:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11998c:	e28db000 	add	fp, sp, #0
  119990:	e24dd00c 	sub	sp, sp, #12
  119994:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  119998:	e30c3a48 	movw	r3, #51784	; 0xca48
  11999c:	e3403015 	movt	r3, #21
  1199a0:	e51b2008 	ldr	r2, [fp, #-8]
  1199a4:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  1199a8:	e320f000 	nop	{0}
  1199ac:	e28bd000 	add	sp, fp, #0
  1199b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1199b4:	e12fff1e 	bx	lr

001199b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  1199b8:	e92d4800 	push	{fp, lr}
  1199bc:	e28db004 	add	fp, sp, #4
  1199c0:	e24dd008 	sub	sp, sp, #8
  1199c4:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  1199c8:	e51b3008 	ldr	r3, [fp, #-8]
  1199cc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199d0:	e2033001 	and	r3, r3, #1
  1199d4:	e3530000 	cmp	r3, #0
  1199d8:	1a000025 	bne	119a74 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  1199dc:	e51b3008 	ldr	r3, [fp, #-8]
  1199e0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199e4:	e3833001 	orr	r3, r3, #1
  1199e8:	e6ef2073 	uxtb	r2, r3
  1199ec:	e51b3008 	ldr	r3, [fp, #-8]
  1199f0:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  1199f4:	ebffc5d2 	bl	10b144 <sys_now>
  1199f8:	e1a02000 	mov	r2, r0
  1199fc:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119a00:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119a04:	e0832392 	umull	r2, r3, r2, r3
  119a08:	e1a021a3 	lsr	r2, r3, #3
  119a0c:	e51b3008 	ldr	r3, [fp, #-8]
  119a10:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  119a14:	e51b3008 	ldr	r3, [fp, #-8]
  119a18:	e593301c 	ldr	r3, [r3, #28]
  119a1c:	e3530000 	cmp	r3, #0
  119a20:	0a000003 	beq	119a34 <netif_set_up+0x7c>
  119a24:	e51b3008 	ldr	r3, [fp, #-8]
  119a28:	e593301c 	ldr	r3, [r3, #28]
  119a2c:	e51b0008 	ldr	r0, [fp, #-8]
  119a30:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  119a34:	e51b3008 	ldr	r3, [fp, #-8]
  119a38:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a3c:	e2033004 	and	r3, r3, #4
  119a40:	e3530000 	cmp	r3, #0
  119a44:	0a000002 	beq	119a54 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119a48:	e3a01003 	mov	r1, #3
  119a4c:	e51b0008 	ldr	r0, [fp, #-8]
  119a50:	eb00000a 	bl	119a80 <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  119a54:	e51b3008 	ldr	r3, [fp, #-8]
  119a58:	e2833042 	add	r3, r3, #66	; 0x42
  119a5c:	e1a00003 	mov	r0, r3
  119a60:	ebffaea3 	bl	1054f4 <netdev_get_by_name>
  119a64:	e1a03000 	mov	r3, r0
  119a68:	e3a01001 	mov	r1, #1
  119a6c:	e1a00003 	mov	r0, r3
  119a70:	ebffb269 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119a74:	e320f000 	nop	{0}
  119a78:	e24bd004 	sub	sp, fp, #4
  119a7c:	e8bd8800 	pop	{fp, pc}

00119a80 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  119a80:	e92d4800 	push	{fp, lr}
  119a84:	e28db004 	add	fp, sp, #4
  119a88:	e24dd008 	sub	sp, sp, #8
  119a8c:	e50b0008 	str	r0, [fp, #-8]
  119a90:	e1a03001 	mov	r3, r1
  119a94:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119a98:	e55b3009 	ldrb	r3, [fp, #-9]
  119a9c:	e2033001 	and	r3, r3, #1
  119aa0:	e3530000 	cmp	r3, #0
  119aa4:	0a000015 	beq	119b00 <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119aa8:	e51b3008 	ldr	r3, [fp, #-8]
  119aac:	e2833004 	add	r3, r3, #4
  119ab0:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119ab4:	e3530000 	cmp	r3, #0
  119ab8:	0a000010 	beq	119b00 <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119abc:	e51b3008 	ldr	r3, [fp, #-8]
  119ac0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ac4:	e2033008 	and	r3, r3, #8
  119ac8:	e3530000 	cmp	r3, #0
  119acc:	0a000004 	beq	119ae4 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  119ad0:	e51b3008 	ldr	r3, [fp, #-8]
  119ad4:	e2833004 	add	r3, r3, #4
  119ad8:	e1a01003 	mov	r1, r3
  119adc:	e51b0008 	ldr	r0, [fp, #-8]
  119ae0:	eb005681 	bl	12f4ec <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  119ae4:	e51b3008 	ldr	r3, [fp, #-8]
  119ae8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119aec:	e2033020 	and	r3, r3, #32
  119af0:	e3530000 	cmp	r3, #0
  119af4:	0a000001 	beq	119b00 <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  119af8:	e51b0008 	ldr	r0, [fp, #-8]
  119afc:	eb00595a 	bl	13006c <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  119b00:	e320f000 	nop	{0}
  119b04:	e24bd004 	sub	sp, fp, #4
  119b08:	e8bd8800 	pop	{fp, pc}

00119b0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  119b0c:	e92d4800 	push	{fp, lr}
  119b10:	e28db004 	add	fp, sp, #4
  119b14:	e24dd008 	sub	sp, sp, #8
  119b18:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119b1c:	e51b3008 	ldr	r3, [fp, #-8]
  119b20:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b24:	e2033001 	and	r3, r3, #1
  119b28:	e3530000 	cmp	r3, #0
  119b2c:	0a000024 	beq	119bc4 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119b30:	e51b3008 	ldr	r3, [fp, #-8]
  119b34:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b38:	e3c33001 	bic	r3, r3, #1
  119b3c:	e6ef2073 	uxtb	r2, r3
  119b40:	e51b3008 	ldr	r3, [fp, #-8]
  119b44:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119b48:	ebffc57d 	bl	10b144 <sys_now>
  119b4c:	e1a02000 	mov	r2, r0
  119b50:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119b54:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119b58:	e0832392 	umull	r2, r3, r2, r3
  119b5c:	e1a021a3 	lsr	r2, r3, #3
  119b60:	e51b3008 	ldr	r3, [fp, #-8]
  119b64:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  119b68:	e51b3008 	ldr	r3, [fp, #-8]
  119b6c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b70:	e2033008 	and	r3, r3, #8
  119b74:	e3530000 	cmp	r3, #0
  119b78:	0a000001 	beq	119b84 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  119b7c:	e51b0008 	ldr	r0, [fp, #-8]
  119b80:	eb00519f 	bl	12e204 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  119b84:	e51b3008 	ldr	r3, [fp, #-8]
  119b88:	e593301c 	ldr	r3, [r3, #28]
  119b8c:	e3530000 	cmp	r3, #0
  119b90:	0a000003 	beq	119ba4 <netif_set_down+0x98>
  119b94:	e51b3008 	ldr	r3, [fp, #-8]
  119b98:	e593301c 	ldr	r3, [r3, #28]
  119b9c:	e51b0008 	ldr	r0, [fp, #-8]
  119ba0:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  119ba4:	e51b3008 	ldr	r3, [fp, #-8]
  119ba8:	e2833042 	add	r3, r3, #66	; 0x42
  119bac:	e1a00003 	mov	r0, r3
  119bb0:	ebffae4f 	bl	1054f4 <netdev_get_by_name>
  119bb4:	e1a03000 	mov	r3, r0
  119bb8:	e3a01000 	mov	r1, #0
  119bbc:	e1a00003 	mov	r0, r3
  119bc0:	ebffb215 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119bc4:	e320f000 	nop	{0}
  119bc8:	e24bd004 	sub	sp, fp, #4
  119bcc:	e8bd8800 	pop	{fp, pc}

00119bd0 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  119bd0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119bd4:	e28db000 	add	fp, sp, #0
  119bd8:	e24dd00c 	sub	sp, sp, #12
  119bdc:	e50b0008 	str	r0, [fp, #-8]
  119be0:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119be4:	e51b3008 	ldr	r3, [fp, #-8]
  119be8:	e3530000 	cmp	r3, #0
  119bec:	0a000002 	beq	119bfc <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  119bf0:	e51b3008 	ldr	r3, [fp, #-8]
  119bf4:	e51b200c 	ldr	r2, [fp, #-12]
  119bf8:	e583201c 	str	r2, [r3, #28]
  }
}
  119bfc:	e320f000 	nop	{0}
  119c00:	e28bd000 	add	sp, fp, #0
  119c04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119c08:	e12fff1e 	bx	lr

00119c0c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  119c0c:	e92d4800 	push	{fp, lr}
  119c10:	e28db004 	add	fp, sp, #4
  119c14:	e24dd008 	sub	sp, sp, #8
  119c18:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119c1c:	e51b3008 	ldr	r3, [fp, #-8]
  119c20:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c24:	e2033004 	and	r3, r3, #4
  119c28:	e3530000 	cmp	r3, #0
  119c2c:	1a00001f 	bne	119cb0 <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119c30:	e51b3008 	ldr	r3, [fp, #-8]
  119c34:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c38:	e3833004 	orr	r3, r3, #4
  119c3c:	e6ef2073 	uxtb	r2, r3
  119c40:	e51b3008 	ldr	r3, [fp, #-8]
  119c44:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  119c48:	e51b0008 	ldr	r0, [fp, #-8]
  119c4c:	eb0044e0 	bl	12afd4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  119c50:	e51b3008 	ldr	r3, [fp, #-8]
  119c54:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c58:	e2033001 	and	r3, r3, #1
  119c5c:	e3530000 	cmp	r3, #0
  119c60:	0a000002 	beq	119c70 <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119c64:	e3a01003 	mov	r1, #3
  119c68:	e51b0008 	ldr	r0, [fp, #-8]
  119c6c:	ebffff83 	bl	119a80 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  119c70:	e51b3008 	ldr	r3, [fp, #-8]
  119c74:	e5933020 	ldr	r3, [r3, #32]
  119c78:	e3530000 	cmp	r3, #0
  119c7c:	0a000003 	beq	119c90 <netif_set_link_up+0x84>
  119c80:	e51b3008 	ldr	r3, [fp, #-8]
  119c84:	e5933020 	ldr	r3, [r3, #32]
  119c88:	e51b0008 	ldr	r0, [fp, #-8]
  119c8c:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  119c90:	e51b3008 	ldr	r3, [fp, #-8]
  119c94:	e2833042 	add	r3, r3, #66	; 0x42
  119c98:	e1a00003 	mov	r0, r3
  119c9c:	ebffae14 	bl	1054f4 <netdev_get_by_name>
  119ca0:	e1a03000 	mov	r3, r0
  119ca4:	e3a01001 	mov	r1, #1
  119ca8:	e1a00003 	mov	r0, r3
  119cac:	ebffb20a 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119cb0:	e320f000 	nop	{0}
  119cb4:	e24bd004 	sub	sp, fp, #4
  119cb8:	e8bd8800 	pop	{fp, pc}

00119cbc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119cbc:	e92d4800 	push	{fp, lr}
  119cc0:	e28db004 	add	fp, sp, #4
  119cc4:	e24dd008 	sub	sp, sp, #8
  119cc8:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119ccc:	e51b3008 	ldr	r3, [fp, #-8]
  119cd0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119cd4:	e2033004 	and	r3, r3, #4
  119cd8:	e3530000 	cmp	r3, #0
  119cdc:	0a000015 	beq	119d38 <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  119ce0:	e51b3008 	ldr	r3, [fp, #-8]
  119ce4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ce8:	e3c33004 	bic	r3, r3, #4
  119cec:	e6ef2073 	uxtb	r2, r3
  119cf0:	e51b3008 	ldr	r3, [fp, #-8]
  119cf4:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  119cf8:	e51b3008 	ldr	r3, [fp, #-8]
  119cfc:	e5933020 	ldr	r3, [r3, #32]
  119d00:	e3530000 	cmp	r3, #0
  119d04:	0a000003 	beq	119d18 <netif_set_link_down+0x5c>
  119d08:	e51b3008 	ldr	r3, [fp, #-8]
  119d0c:	e5933020 	ldr	r3, [r3, #32]
  119d10:	e51b0008 	ldr	r0, [fp, #-8]
  119d14:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  119d18:	e51b3008 	ldr	r3, [fp, #-8]
  119d1c:	e2833042 	add	r3, r3, #66	; 0x42
  119d20:	e1a00003 	mov	r0, r3
  119d24:	ebffadf2 	bl	1054f4 <netdev_get_by_name>
  119d28:	e1a03000 	mov	r3, r0
  119d2c:	e3a01000 	mov	r1, #0
  119d30:	e1a00003 	mov	r0, r3
  119d34:	ebffb1e8 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119d38:	e320f000 	nop	{0}
  119d3c:	e24bd004 	sub	sp, fp, #4
  119d40:	e8bd8800 	pop	{fp, pc}

00119d44 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  119d44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119d48:	e28db000 	add	fp, sp, #0
  119d4c:	e24dd00c 	sub	sp, sp, #12
  119d50:	e50b0008 	str	r0, [fp, #-8]
  119d54:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119d58:	e51b3008 	ldr	r3, [fp, #-8]
  119d5c:	e3530000 	cmp	r3, #0
  119d60:	0a000002 	beq	119d70 <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119d64:	e51b3008 	ldr	r3, [fp, #-8]
  119d68:	e51b200c 	ldr	r2, [fp, #-12]
  119d6c:	e5832020 	str	r2, [r3, #32]
  }
}
  119d70:	e320f000 	nop	{0}
  119d74:	e28bd000 	add	sp, fp, #0
  119d78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119d7c:	e12fff1e 	bx	lr

00119d80 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119d80:	e92d4800 	push	{fp, lr}
  119d84:	e28db004 	add	fp, sp, #4
  119d88:	e24dd018 	sub	sp, sp, #24
  119d8c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119d90:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d98:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119d9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119da0:	e1d330b8 	ldrh	r3, [r3, #8]
  119da4:	e3a02000 	mov	r2, #0
  119da8:	e1a01003 	mov	r1, r3
  119dac:	e3a00002 	mov	r0, #2
  119db0:	eb000133 	bl	11a284 <pbuf_alloc>
  119db4:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119db8:	e51b3010 	ldr	r3, [fp, #-16]
  119dbc:	e3530000 	cmp	r3, #0
  119dc0:	1a000016 	bne	119e20 <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119dc4:	e30c3a50 	movw	r3, #51792	; 0xca50
  119dc8:	e3403015 	movt	r3, #21
  119dcc:	e1d330bc 	ldrh	r3, [r3, #12]
  119dd0:	e2833001 	add	r3, r3, #1
  119dd4:	e6ff2073 	uxth	r2, r3
  119dd8:	e30c3a50 	movw	r3, #51792	; 0xca50
  119ddc:	e3403015 	movt	r3, #21
  119de0:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119de4:	e30c3a50 	movw	r3, #51792	; 0xca50
  119de8:	e3403015 	movt	r3, #21
  119dec:	e1d330b6 	ldrh	r3, [r3, #6]
  119df0:	e2833001 	add	r3, r3, #1
  119df4:	e6ff2073 	uxth	r2, r3
  119df8:	e30c3a50 	movw	r3, #51792	; 0xca50
  119dfc:	e3403015 	movt	r3, #21
  119e00:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119e04:	e51b300c 	ldr	r3, [fp, #-12]
  119e08:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e0c:	e2832001 	add	r2, r3, #1
  119e10:	e51b300c 	ldr	r3, [fp, #-12]
  119e14:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119e18:	e3e03000 	mvn	r3, #0
  119e1c:	ea000063 	b	119fb0 <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119e20:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119e24:	e51b0010 	ldr	r0, [fp, #-16]
  119e28:	eb000571 	bl	11b3f4 <pbuf_copy>
  119e2c:	e1a03000 	mov	r3, r0
  119e30:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119e34:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119e38:	e3530000 	cmp	r3, #0
  119e3c:	0a000018 	beq	119ea4 <netif_loop_output+0x124>
    pbuf_free(r);
  119e40:	e51b0010 	ldr	r0, [fp, #-16]
  119e44:	eb000415 	bl	11aea0 <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119e48:	e30c3a50 	movw	r3, #51792	; 0xca50
  119e4c:	e3403015 	movt	r3, #21
  119e50:	e1d330bc 	ldrh	r3, [r3, #12]
  119e54:	e2833001 	add	r3, r3, #1
  119e58:	e6ff2073 	uxth	r2, r3
  119e5c:	e30c3a50 	movw	r3, #51792	; 0xca50
  119e60:	e3403015 	movt	r3, #21
  119e64:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119e68:	e30c3a50 	movw	r3, #51792	; 0xca50
  119e6c:	e3403015 	movt	r3, #21
  119e70:	e1d330b6 	ldrh	r3, [r3, #6]
  119e74:	e2833001 	add	r3, r3, #1
  119e78:	e6ff2073 	uxth	r2, r3
  119e7c:	e30c3a50 	movw	r3, #51792	; 0xca50
  119e80:	e3403015 	movt	r3, #21
  119e84:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119e88:	e51b300c 	ldr	r3, [fp, #-12]
  119e8c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e90:	e2832001 	add	r2, r3, #1
  119e94:	e51b300c 	ldr	r3, [fp, #-12]
  119e98:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119e9c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119ea0:	ea000042 	b	119fb0 <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119ea4:	e51b3010 	ldr	r3, [fp, #-16]
  119ea8:	e50b3008 	str	r3, [fp, #-8]
  119eac:	ea000002 	b	119ebc <netif_loop_output+0x13c>
  119eb0:	e51b3008 	ldr	r3, [fp, #-8]
  119eb4:	e5933000 	ldr	r3, [r3]
  119eb8:	e50b3008 	str	r3, [fp, #-8]
  119ebc:	e51b3008 	ldr	r3, [fp, #-8]
  119ec0:	e5933000 	ldr	r3, [r3]
  119ec4:	e3530000 	cmp	r3, #0
  119ec8:	1afffff8 	bne	119eb0 <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119ecc:	ebffa0da 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119ed0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ed4:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119ed8:	e3530000 	cmp	r3, #0
  119edc:	0a000012 	beq	119f2c <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119ee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ee4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119ee8:	e3530000 	cmp	r3, #0
  119eec:	1a000006 	bne	119f0c <netif_loop_output+0x18c>
  119ef0:	e3070588 	movw	r0, #30088	; 0x7588
  119ef4:	e3400014 	movt	r0, #20
  119ef8:	ebffa485 	bl	103114 <rt_kprintf>
  119efc:	e3001382 	movw	r1, #898	; 0x382
  119f00:	e3070558 	movw	r0, #30040	; 0x7558
  119f04:	e3400014 	movt	r0, #20
  119f08:	ebffc474 	bl	10b0e0 <sys_arch_assert>
    netif->loop_last->next = r;
  119f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f10:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119f14:	e51b2010 	ldr	r2, [fp, #-16]
  119f18:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f20:	e51b2008 	ldr	r2, [fp, #-8]
  119f24:	e5832084 	str	r2, [r3, #132]	; 0x84
  119f28:	ea000005 	b	119f44 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f30:	e51b2010 	ldr	r2, [fp, #-16]
  119f34:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f3c:	e51b2008 	ldr	r2, [fp, #-8]
  119f40:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119f44:	ebffa0c2 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119f48:	e30c3a50 	movw	r3, #51792	; 0xca50
  119f4c:	e3403015 	movt	r3, #21
  119f50:	e1d330b0 	ldrh	r3, [r3]
  119f54:	e2833001 	add	r3, r3, #1
  119f58:	e6ff2073 	uxth	r2, r3
  119f5c:	e30c3a50 	movw	r3, #51792	; 0xca50
  119f60:	e3403015 	movt	r3, #21
  119f64:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119f68:	e51b300c 	ldr	r3, [fp, #-12]
  119f6c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119f70:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119f74:	e1d220b8 	ldrh	r2, [r2, #8]
  119f78:	e0832002 	add	r2, r3, r2
  119f7c:	e51b300c 	ldr	r3, [fp, #-12]
  119f80:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119f84:	e51b300c 	ldr	r3, [fp, #-12]
  119f88:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119f8c:	e2832001 	add	r2, r3, #1
  119f90:	e51b300c 	ldr	r3, [fp, #-12]
  119f94:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119f98:	e3a02000 	mov	r2, #0
  119f9c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119fa0:	e3090fbc 	movw	r0, #40892	; 0x9fbc
  119fa4:	e3400011 	movt	r0, #17
  119fa8:	ebfff084 	bl	1161c0 <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119fac:	e3a03000 	mov	r3, #0
}
  119fb0:	e1a00003 	mov	r0, r3
  119fb4:	e24bd004 	sub	sp, fp, #4
  119fb8:	e8bd8800 	pop	{fp, pc}

00119fbc <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119fbc:	e92d4800 	push	{fp, lr}
  119fc0:	e28db004 	add	fp, sp, #4
  119fc4:	e24dd018 	sub	sp, sp, #24
  119fc8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119fcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119fd0:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119fd4:	ebffa098 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119fd8:	ea000056 	b	11a138 <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119fdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119fe0:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119fe4:	e50b3008 	str	r3, [fp, #-8]
  119fe8:	e51b3008 	ldr	r3, [fp, #-8]
  119fec:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  119ff0:	ea00000d 	b	11a02c <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  119ff4:	e51b3008 	ldr	r3, [fp, #-8]
  119ff8:	e5933000 	ldr	r3, [r3]
  119ffc:	e3530000 	cmp	r3, #0
  11a000:	1a000006 	bne	11a020 <netif_poll+0x64>
  11a004:	e30705b4 	movw	r0, #30132	; 0x75b4
  11a008:	e3400014 	movt	r0, #20
  11a00c:	ebffa440 	bl	103114 <rt_kprintf>
  11a010:	e30013ca 	movw	r1, #970	; 0x3ca
  11a014:	e3070558 	movw	r0, #30040	; 0x7558
  11a018:	e3400014 	movt	r0, #20
  11a01c:	ebffc42f 	bl	10b0e0 <sys_arch_assert>
      in_end = in_end->next;
  11a020:	e51b3008 	ldr	r3, [fp, #-8]
  11a024:	e5933000 	ldr	r3, [r3]
  11a028:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  11a02c:	e51b3008 	ldr	r3, [fp, #-8]
  11a030:	e1d320ba 	ldrh	r2, [r3, #10]
  11a034:	e51b3008 	ldr	r3, [fp, #-8]
  11a038:	e1d330b8 	ldrh	r3, [r3, #8]
  11a03c:	e1520003 	cmp	r2, r3
  11a040:	1affffeb 	bne	119ff4 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  11a044:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a048:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11a04c:	e51b2008 	ldr	r2, [fp, #-8]
  11a050:	e1520003 	cmp	r2, r3
  11a054:	1a000007 	bne	11a078 <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  11a058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a05c:	e3a02000 	mov	r2, #0
  11a060:	e5832084 	str	r2, [r3, #132]	; 0x84
  11a064:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a068:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  11a06c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a070:	e5832080 	str	r2, [r3, #128]	; 0x80
  11a074:	ea00000e 	b	11a0b4 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  11a078:	e51b3008 	ldr	r3, [fp, #-8]
  11a07c:	e5932000 	ldr	r2, [r3]
  11a080:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a084:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  11a088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a08c:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a090:	e3530000 	cmp	r3, #0
  11a094:	1a000006 	bne	11a0b4 <netif_poll+0xf8>
  11a098:	e30705e4 	movw	r0, #30180	; 0x75e4
  11a09c:	e3400014 	movt	r0, #20
  11a0a0:	ebffa41b 	bl	103114 <rt_kprintf>
  11a0a4:	e30013de 	movw	r1, #990	; 0x3de
  11a0a8:	e3070558 	movw	r0, #30040	; 0x7558
  11a0ac:	e3400014 	movt	r0, #20
  11a0b0:	ebffc40a 	bl	10b0e0 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  11a0b4:	e51b3008 	ldr	r3, [fp, #-8]
  11a0b8:	e3a02000 	mov	r2, #0
  11a0bc:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  11a0c0:	ebffa063 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  11a0c4:	e30c3a50 	movw	r3, #51792	; 0xca50
  11a0c8:	e3403015 	movt	r3, #21
  11a0cc:	e1d330b2 	ldrh	r3, [r3, #2]
  11a0d0:	e2833001 	add	r3, r3, #1
  11a0d4:	e6ff2073 	uxth	r2, r3
  11a0d8:	e30c3a50 	movw	r3, #51792	; 0xca50
  11a0dc:	e3403015 	movt	r3, #21
  11a0e0:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  11a0e4:	e51b300c 	ldr	r3, [fp, #-12]
  11a0e8:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11a0ec:	e51b2010 	ldr	r2, [fp, #-16]
  11a0f0:	e1d220b8 	ldrh	r2, [r2, #8]
  11a0f4:	e0832002 	add	r2, r3, r2
  11a0f8:	e51b300c 	ldr	r3, [fp, #-12]
  11a0fc:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  11a100:	e51b300c 	ldr	r3, [fp, #-12]
  11a104:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  11a108:	e2832001 	add	r2, r3, #1
  11a10c:	e51b300c 	ldr	r3, [fp, #-12]
  11a110:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  11a114:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11a118:	e51b0010 	ldr	r0, [fp, #-16]
  11a11c:	eb005cc0 	bl	131424 <ip4_input>
  11a120:	e1a03000 	mov	r3, r0
  11a124:	e3530000 	cmp	r3, #0
  11a128:	0a000001 	beq	11a134 <netif_poll+0x178>
      pbuf_free(in);
  11a12c:	e51b0010 	ldr	r0, [fp, #-16]
  11a130:	eb00035a 	bl	11aea0 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  11a134:	ebffa040 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  11a138:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a13c:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a140:	e3530000 	cmp	r3, #0
  11a144:	1affffa4 	bne	119fdc <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  11a148:	ebffa041 	bl	102254 <rt_exit_critical>
}
  11a14c:	e320f000 	nop	{0}
  11a150:	e24bd004 	sub	sp, fp, #4
  11a154:	e8bd8800 	pop	{fp, pc}

0011a158 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  11a158:	e92d4800 	push	{fp, lr}
  11a15c:	e28db004 	add	fp, sp, #4
  11a160:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  11a164:	ebffa034 	bl	10223c <rt_enter_critical>
  11a168:	e30c3a4c 	movw	r3, #51788	; 0xca4c
  11a16c:	e3403015 	movt	r3, #21
  11a170:	e3a02000 	mov	r2, #0
  11a174:	e5c32000 	strb	r2, [r3]
  11a178:	ebffa035 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a17c:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11a180:	e3403015 	movt	r3, #21
  11a184:	e5933000 	ldr	r3, [r3]
  11a188:	e50b3008 	str	r3, [fp, #-8]
  11a18c:	ea00000e 	b	11a1cc <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  11a190:	e51b3008 	ldr	r3, [fp, #-8]
  11a194:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a198:	e3530000 	cmp	r3, #0
  11a19c:	0a000007 	beq	11a1c0 <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  11a1a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1a4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a1a8:	e1a00003 	mov	r0, r3
  11a1ac:	eb00149d 	bl	11f428 <tcp_segs_free>
      pcb->ooseq = NULL;
  11a1b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1b4:	e3a02000 	mov	r2, #0
  11a1b8:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  11a1bc:	ea000005 	b	11a1d8 <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a1c0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1c4:	e593300c 	ldr	r3, [r3, #12]
  11a1c8:	e50b3008 	str	r3, [fp, #-8]
  11a1cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a1d0:	e3530000 	cmp	r3, #0
  11a1d4:	1affffed 	bne	11a190 <pbuf_free_ooseq+0x38>
    }
  }
}
  11a1d8:	e24bd004 	sub	sp, fp, #4
  11a1dc:	e8bd8800 	pop	{fp, pc}

0011a1e0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  11a1e0:	e92d4800 	push	{fp, lr}
  11a1e4:	e28db004 	add	fp, sp, #4
  11a1e8:	e24dd008 	sub	sp, sp, #8
  11a1ec:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  11a1f0:	ebffffd8 	bl	11a158 <pbuf_free_ooseq>
}
  11a1f4:	e320f000 	nop	{0}
  11a1f8:	e24bd004 	sub	sp, fp, #4
  11a1fc:	e8bd8800 	pop	{fp, pc}

0011a200 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  11a200:	e92d4800 	push	{fp, lr}
  11a204:	e28db004 	add	fp, sp, #4
  11a208:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  11a20c:	ebffa00a 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  11a210:	e30c3a4c 	movw	r3, #51788	; 0xca4c
  11a214:	e3403015 	movt	r3, #21
  11a218:	e5d33000 	ldrb	r3, [r3]
  11a21c:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  11a220:	e30c3a4c 	movw	r3, #51788	; 0xca4c
  11a224:	e3403015 	movt	r3, #21
  11a228:	e3a02001 	mov	r2, #1
  11a22c:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  11a230:	ebffa007 	bl	102254 <rt_exit_critical>

  if (!queued) {
  11a234:	e55b3005 	ldrb	r3, [fp, #-5]
  11a238:	e3530000 	cmp	r3, #0
  11a23c:	1a00000d 	bne	11a278 <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  11a240:	e3a02000 	mov	r2, #0
  11a244:	e3a01000 	mov	r1, #0
  11a248:	e30a01e0 	movw	r0, #41440	; 0xa1e0
  11a24c:	e3400011 	movt	r0, #17
  11a250:	ebffefda 	bl	1161c0 <tcpip_callback_with_block>
  11a254:	e1a03000 	mov	r3, r0
  11a258:	e3530000 	cmp	r3, #0
  11a25c:	0a000005 	beq	11a278 <pbuf_pool_is_empty+0x78>
  11a260:	ebff9ff5 	bl	10223c <rt_enter_critical>
  11a264:	e30c3a4c 	movw	r3, #51788	; 0xca4c
  11a268:	e3403015 	movt	r3, #21
  11a26c:	e3a02000 	mov	r2, #0
  11a270:	e5c32000 	strb	r2, [r3]
  11a274:	ebff9ff6 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  11a278:	e320f000 	nop	{0}
  11a27c:	e24bd004 	sub	sp, fp, #4
  11a280:	e8bd8800 	pop	{fp, pc}

0011a284 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  11a284:	e92d4800 	push	{fp, lr}
  11a288:	e28db004 	add	fp, sp, #4
  11a28c:	e24dd028 	sub	sp, sp, #40	; 0x28
  11a290:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11a294:	e1a03001 	mov	r3, r1
  11a298:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  11a29c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  11a2a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11a2a4:	e3530004 	cmp	r3, #4
  11a2a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a2ac:	ea000013 	b	11a300 <pbuf_alloc+0x7c>
  11a2b0:	0011a2c4 	.word	0x0011a2c4
  11a2b4:	0011a2d0 	.word	0x0011a2d0
  11a2b8:	0011a2dc 	.word	0x0011a2dc
  11a2bc:	0011a2e8 	.word	0x0011a2e8
  11a2c0:	0011a2f4 	.word	0x0011a2f4
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a2c4:	e3a03038 	mov	r3, #56	; 0x38
  11a2c8:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2cc:	ea000014 	b	11a324 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a2d0:	e3a03024 	mov	r3, #36	; 0x24
  11a2d4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2d8:	ea000011 	b	11a324 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a2dc:	e3a03010 	mov	r3, #16
  11a2e0:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2e4:	ea00000e 	b	11a324 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a2e8:	e3a03000 	mov	r3, #0
  11a2ec:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2f0:	ea00000b 	b	11a324 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  11a2f4:	e3a03000 	mov	r3, #0
  11a2f8:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2fc:	ea000008 	b	11a324 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  11a300:	e307060c 	movw	r0, #30220	; 0x760c
  11a304:	e3400014 	movt	r0, #20
  11a308:	ebffa381 	bl	103114 <rt_kprintf>
  11a30c:	e3001117 	movw	r1, #279	; 0x117
  11a310:	e3070628 	movw	r0, #30248	; 0x7628
  11a314:	e3400014 	movt	r0, #20
  11a318:	ebffc370 	bl	10b0e0 <sys_arch_assert>
    return NULL;
  11a31c:	e3a03000 	mov	r3, #0
  11a320:	ea000139 	b	11a80c <pbuf_alloc+0x588>
  }

  switch (type) {
  11a324:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a328:	e3530003 	cmp	r3, #3
  11a32c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a330:	ea000124 	b	11a7c8 <pbuf_alloc+0x544>
  11a334:	0011a650 	.word	0x0011a650
  11a338:	0011a754 	.word	0x0011a754
  11a33c:	0011a754 	.word	0x0011a754
  11a340:	0011a344 	.word	0x0011a344
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a344:	e300211e 	movw	r2, #286	; 0x11e
  11a348:	e3071628 	movw	r1, #30248	; 0x7628
  11a34c:	e3401014 	movt	r1, #20
  11a350:	e3a00010 	mov	r0, #16
  11a354:	ebfffb5b 	bl	1190c8 <memp_malloc_fn>
  11a358:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a35c:	e51b3008 	ldr	r3, [fp, #-8]
  11a360:	e3530000 	cmp	r3, #0
  11a364:	1a000002 	bne	11a374 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a368:	ebffffa4 	bl	11a200 <pbuf_pool_is_empty>
      return NULL;
  11a36c:	e3a03000 	mov	r3, #0
  11a370:	ea000125 	b	11a80c <pbuf_alloc+0x588>
    }
    p->type = type;
  11a374:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a378:	e6ef2073 	uxtb	r2, r3
  11a37c:	e51b3008 	ldr	r3, [fp, #-8]
  11a380:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a384:	e51b3008 	ldr	r3, [fp, #-8]
  11a388:	e3a02000 	mov	r2, #0
  11a38c:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a390:	e15b30be 	ldrh	r3, [fp, #-14]
  11a394:	e2833010 	add	r3, r3, #16
  11a398:	e51b2008 	ldr	r2, [fp, #-8]
  11a39c:	e0823003 	add	r3, r2, r3
  11a3a0:	e2833003 	add	r3, r3, #3
  11a3a4:	e3c33003 	bic	r3, r3, #3
  11a3a8:	e1a02003 	mov	r2, r3
  11a3ac:	e51b3008 	ldr	r3, [fp, #-8]
  11a3b0:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a3b4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3b8:	e5933004 	ldr	r3, [r3, #4]
  11a3bc:	e2033003 	and	r3, r3, #3
  11a3c0:	e3530000 	cmp	r3, #0
  11a3c4:	0a000006 	beq	11a3e4 <pbuf_alloc+0x160>
  11a3c8:	e3070654 	movw	r0, #30292	; 0x7654
  11a3cc:	e3400014 	movt	r0, #20
  11a3d0:	ebffa34f 	bl	103114 <rt_kprintf>
  11a3d4:	e300112a 	movw	r1, #298	; 0x12a
  11a3d8:	e3070628 	movw	r0, #30248	; 0x7628
  11a3dc:	e3400014 	movt	r0, #20
  11a3e0:	ebffc33e 	bl	10b0e0 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a3e4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3e8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a3ec:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a3f0:	e15b30be 	ldrh	r3, [fp, #-14]
  11a3f4:	e2833003 	add	r3, r3, #3
  11a3f8:	e3c33003 	bic	r3, r3, #3
  11a3fc:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a400:	e283300c 	add	r3, r3, #12
  11a404:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a408:	e1530002 	cmp	r3, r2
  11a40c:	31a03003 	movcc	r3, r3
  11a410:	21a03002 	movcs	r3, r2
  11a414:	e6ff2073 	uxth	r2, r3
  11a418:	e51b3008 	ldr	r3, [fp, #-8]
  11a41c:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a420:	e51b3008 	ldr	r3, [fp, #-8]
  11a424:	e5933004 	ldr	r3, [r3, #4]
  11a428:	e51b2008 	ldr	r2, [fp, #-8]
  11a42c:	e1d220ba 	ldrh	r2, [r2, #10]
  11a430:	e0832002 	add	r2, r3, r2
  11a434:	e51b3008 	ldr	r3, [fp, #-8]
  11a438:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a43c:	e283300c 	add	r3, r3, #12
  11a440:	e1520003 	cmp	r2, r3
  11a444:	9a000006 	bls	11a464 <pbuf_alloc+0x1e0>
  11a448:	e3070684 	movw	r0, #30340	; 0x7684
  11a44c:	e3400014 	movt	r0, #20
  11a450:	ebffa32f 	bl	103114 <rt_kprintf>
  11a454:	e3001131 	movw	r1, #305	; 0x131
  11a458:	e3070628 	movw	r0, #30248	; 0x7628
  11a45c:	e3400014 	movt	r0, #20
  11a460:	ebffc31e 	bl	10b0e0 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a464:	e15b30be 	ldrh	r3, [fp, #-14]
  11a468:	e2833003 	add	r3, r3, #3
  11a46c:	e3c33003 	bic	r3, r3, #3
  11a470:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a474:	e1530002 	cmp	r3, r2
  11a478:	1a000006 	bne	11a498 <pbuf_alloc+0x214>
  11a47c:	e30706b8 	movw	r0, #30392	; 0x76b8
  11a480:	e3400014 	movt	r0, #20
  11a484:	ebffa322 	bl	103114 <rt_kprintf>
  11a488:	e3001133 	movw	r1, #307	; 0x133
  11a48c:	e3070628 	movw	r0, #30248	; 0x7628
  11a490:	e3400014 	movt	r0, #20
  11a494:	ebffc311 	bl	10b0e0 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a498:	e51b3008 	ldr	r3, [fp, #-8]
  11a49c:	e3a02001 	mov	r2, #1
  11a4a0:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a4a4:	e51b3008 	ldr	r3, [fp, #-8]
  11a4a8:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a4ac:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a4b0:	e51b2008 	ldr	r2, [fp, #-8]
  11a4b4:	e1d220ba 	ldrh	r2, [r2, #10]
  11a4b8:	e0433002 	sub	r3, r3, r2
  11a4bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a4c0:	ea00005e 	b	11a640 <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a4c4:	e300213f 	movw	r2, #319	; 0x13f
  11a4c8:	e3071628 	movw	r1, #30248	; 0x7628
  11a4cc:	e3401014 	movt	r1, #20
  11a4d0:	e3a00010 	mov	r0, #16
  11a4d4:	ebfffafb 	bl	1190c8 <memp_malloc_fn>
  11a4d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a4dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a4e0:	e3530000 	cmp	r3, #0
  11a4e4:	1a000004 	bne	11a4fc <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a4e8:	ebffff44 	bl	11a200 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a4ec:	e51b0008 	ldr	r0, [fp, #-8]
  11a4f0:	eb00026a 	bl	11aea0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a4f4:	e3a03000 	mov	r3, #0
  11a4f8:	ea0000c3 	b	11a80c <pbuf_alloc+0x588>
      }
      q->type = type;
  11a4fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a500:	e6ef2073 	uxtb	r2, r3
  11a504:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a508:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a50c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a510:	e3a02000 	mov	r2, #0
  11a514:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a51c:	e3a02000 	mov	r2, #0
  11a520:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a524:	e51b300c 	ldr	r3, [fp, #-12]
  11a528:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a52c:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a530:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a534:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a538:	e1530002 	cmp	r3, r2
  11a53c:	da000006 	ble	11a55c <pbuf_alloc+0x2d8>
  11a540:	e30706ec 	movw	r0, #30444	; 0x76ec
  11a544:	e3400014 	movt	r0, #20
  11a548:	ebffa2f1 	bl	103114 <rt_kprintf>
  11a54c:	e300114d 	movw	r1, #333	; 0x14d
  11a550:	e3070628 	movw	r0, #30248	; 0x7628
  11a554:	e3400014 	movt	r0, #20
  11a558:	ebffc2e0 	bl	10b0e0 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a55c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a560:	e6ff2073 	uxth	r2, r3
  11a564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a568:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a56c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a570:	e6ff3073 	uxth	r3, r3
  11a574:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a578:	e1530002 	cmp	r3, r2
  11a57c:	31a03003 	movcc	r3, r3
  11a580:	21a03002 	movcs	r3, r2
  11a584:	e6ff2073 	uxth	r2, r3
  11a588:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a58c:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a594:	e2832010 	add	r2, r3, #16
  11a598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a59c:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a5a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5a4:	e5933004 	ldr	r3, [r3, #4]
  11a5a8:	e2033003 	and	r3, r3, #3
  11a5ac:	e3530000 	cmp	r3, #0
  11a5b0:	0a000006 	beq	11a5d0 <pbuf_alloc+0x34c>
  11a5b4:	e3070700 	movw	r0, #30464	; 0x7700
  11a5b8:	e3400014 	movt	r0, #20
  11a5bc:	ebffa2d4 	bl	103114 <rt_kprintf>
  11a5c0:	e3001153 	movw	r1, #339	; 0x153
  11a5c4:	e3070628 	movw	r0, #30248	; 0x7628
  11a5c8:	e3400014 	movt	r0, #20
  11a5cc:	ebffc2c3 	bl	10b0e0 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a5d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a5d4:	e5933004 	ldr	r3, [r3, #4]
  11a5d8:	e51b2008 	ldr	r2, [fp, #-8]
  11a5dc:	e1d220ba 	ldrh	r2, [r2, #10]
  11a5e0:	e0832002 	add	r2, r3, r2
  11a5e4:	e51b3008 	ldr	r3, [fp, #-8]
  11a5e8:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a5ec:	e283300c 	add	r3, r3, #12
  11a5f0:	e1520003 	cmp	r2, r3
  11a5f4:	9a000006 	bls	11a614 <pbuf_alloc+0x390>
  11a5f8:	e3070684 	movw	r0, #30340	; 0x7684
  11a5fc:	e3400014 	movt	r0, #20
  11a600:	ebffa2c3 	bl	103114 <rt_kprintf>
  11a604:	e3001156 	movw	r1, #342	; 0x156
  11a608:	e3070628 	movw	r0, #30248	; 0x7628
  11a60c:	e3400014 	movt	r0, #20
  11a610:	ebffc2b2 	bl	10b0e0 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a614:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a618:	e3a02001 	mov	r2, #1
  11a61c:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a620:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a624:	e1d330ba 	ldrh	r3, [r3, #10]
  11a628:	e1a02003 	mov	r2, r3
  11a62c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a630:	e0433002 	sub	r3, r3, r2
  11a634:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a638:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a63c:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a644:	e3530000 	cmp	r3, #0
  11a648:	caffff9d 	bgt	11a4c4 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a64c:	ea000067 	b	11a7f0 <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a650:	e15b30be 	ldrh	r3, [fp, #-14]
  11a654:	e2833013 	add	r3, r3, #19
  11a658:	e6ff3073 	uxth	r3, r3
  11a65c:	e3c33003 	bic	r3, r3, #3
  11a660:	e6ff2073 	uxth	r2, r3
  11a664:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a668:	e2833003 	add	r3, r3, #3
  11a66c:	e6ff3073 	uxth	r3, r3
  11a670:	e3c33003 	bic	r3, r3, #3
  11a674:	e6ff3073 	uxth	r3, r3
  11a678:	e0823003 	add	r3, r2, r3
  11a67c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a680:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a684:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a688:	e2833003 	add	r3, r3, #3
  11a68c:	e3c33003 	bic	r3, r3, #3
  11a690:	e1520003 	cmp	r2, r3
  11a694:	2a000001 	bcs	11a6a0 <pbuf_alloc+0x41c>
        return NULL;
  11a698:	e3a03000 	mov	r3, #0
  11a69c:	ea00005a 	b	11a80c <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a6a0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a6a4:	e1a00003 	mov	r0, r3
  11a6a8:	ebffc2cd 	bl	10b1e4 <mem_malloc>
  11a6ac:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a6b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a6b4:	e3530000 	cmp	r3, #0
  11a6b8:	1a000001 	bne	11a6c4 <pbuf_alloc+0x440>
      return NULL;
  11a6bc:	e3a03000 	mov	r3, #0
  11a6c0:	ea000051 	b	11a80c <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a6c4:	e15b30be 	ldrh	r3, [fp, #-14]
  11a6c8:	e2833010 	add	r3, r3, #16
  11a6cc:	e51b2008 	ldr	r2, [fp, #-8]
  11a6d0:	e0823003 	add	r3, r2, r3
  11a6d4:	e2833003 	add	r3, r3, #3
  11a6d8:	e3c33003 	bic	r3, r3, #3
  11a6dc:	e1a02003 	mov	r2, r3
  11a6e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a6e4:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a6e8:	e51b3008 	ldr	r3, [fp, #-8]
  11a6ec:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a6f0:	e1c320b8 	strh	r2, [r3, #8]
  11a6f4:	e51b3008 	ldr	r3, [fp, #-8]
  11a6f8:	e1d320b8 	ldrh	r2, [r3, #8]
  11a6fc:	e51b3008 	ldr	r3, [fp, #-8]
  11a700:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a704:	e51b3008 	ldr	r3, [fp, #-8]
  11a708:	e3a02000 	mov	r2, #0
  11a70c:	e5832000 	str	r2, [r3]
    p->type = type;
  11a710:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a714:	e6ef2073 	uxtb	r2, r3
  11a718:	e51b3008 	ldr	r3, [fp, #-8]
  11a71c:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a720:	e51b3008 	ldr	r3, [fp, #-8]
  11a724:	e5933004 	ldr	r3, [r3, #4]
  11a728:	e2033003 	and	r3, r3, #3
  11a72c:	e3530000 	cmp	r3, #0
  11a730:	0a00002d 	beq	11a7ec <pbuf_alloc+0x568>
  11a734:	e3070730 	movw	r0, #30512	; 0x7730
  11a738:	e3400014 	movt	r0, #20
  11a73c:	ebffa274 	bl	103114 <rt_kprintf>
  11a740:	e3a01f5e 	mov	r1, #376	; 0x178
  11a744:	e3070628 	movw	r0, #30248	; 0x7628
  11a748:	e3400014 	movt	r0, #20
  11a74c:	ebffc263 	bl	10b0e0 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a750:	ea000025 	b	11a7ec <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a754:	e300217f 	movw	r2, #383	; 0x17f
  11a758:	e3071628 	movw	r1, #30248	; 0x7628
  11a75c:	e3401014 	movt	r1, #20
  11a760:	e3a0000f 	mov	r0, #15
  11a764:	ebfffa57 	bl	1190c8 <memp_malloc_fn>
  11a768:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a76c:	e51b3008 	ldr	r3, [fp, #-8]
  11a770:	e3530000 	cmp	r3, #0
  11a774:	1a000001 	bne	11a780 <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a778:	e3a03000 	mov	r3, #0
  11a77c:	ea000022 	b	11a80c <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a780:	e51b3008 	ldr	r3, [fp, #-8]
  11a784:	e3a02000 	mov	r2, #0
  11a788:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a78c:	e51b3008 	ldr	r3, [fp, #-8]
  11a790:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a794:	e1c320b8 	strh	r2, [r3, #8]
  11a798:	e51b3008 	ldr	r3, [fp, #-8]
  11a79c:	e1d320b8 	ldrh	r2, [r3, #8]
  11a7a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7a4:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7ac:	e3a02000 	mov	r2, #0
  11a7b0:	e5832000 	str	r2, [r3]
    p->type = type;
  11a7b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a7b8:	e6ef2073 	uxtb	r2, r3
  11a7bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a7c0:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a7c4:	ea000009 	b	11a7f0 <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a7c8:	e307075c 	movw	r0, #30556	; 0x775c
  11a7cc:	e3400014 	movt	r0, #20
  11a7d0:	ebffa24f 	bl	103114 <rt_kprintf>
  11a7d4:	e300118d 	movw	r1, #397	; 0x18d
  11a7d8:	e3070628 	movw	r0, #30248	; 0x7628
  11a7dc:	e3400014 	movt	r0, #20
  11a7e0:	ebffc23e 	bl	10b0e0 <sys_arch_assert>
    return NULL;
  11a7e4:	e3a03000 	mov	r3, #0
  11a7e8:	ea000007 	b	11a80c <pbuf_alloc+0x588>
    break;
  11a7ec:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a7f0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7f4:	e3a02001 	mov	r2, #1
  11a7f8:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a7fc:	e51b3008 	ldr	r3, [fp, #-8]
  11a800:	e3a02000 	mov	r2, #0
  11a804:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a808:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a80c:	e1a00003 	mov	r0, r3
  11a810:	e24bd004 	sub	sp, fp, #4
  11a814:	e8bd8800 	pop	{fp, pc}

0011a818 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a818:	e92d4800 	push	{fp, lr}
  11a81c:	e28db004 	add	fp, sp, #4
  11a820:	e24dd018 	sub	sp, sp, #24
  11a824:	e50b0010 	str	r0, [fp, #-16]
  11a828:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a82c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a830:	e1a03001 	mov	r3, r1
  11a834:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a838:	e51b3010 	ldr	r3, [fp, #-16]
  11a83c:	e3530004 	cmp	r3, #4
  11a840:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a844:	ea000013 	b	11a898 <pbuf_alloced_custom+0x80>
  11a848:	0011a85c 	.word	0x0011a85c
  11a84c:	0011a868 	.word	0x0011a868
  11a850:	0011a874 	.word	0x0011a874
  11a854:	0011a880 	.word	0x0011a880
  11a858:	0011a88c 	.word	0x0011a88c
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a85c:	e3a03038 	mov	r3, #56	; 0x38
  11a860:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a864:	ea000014 	b	11a8bc <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a868:	e3a03024 	mov	r3, #36	; 0x24
  11a86c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a870:	ea000011 	b	11a8bc <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a874:	e3a03010 	mov	r3, #16
  11a878:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a87c:	ea00000e 	b	11a8bc <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a880:	e3a03000 	mov	r3, #0
  11a884:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a888:	ea00000b 	b	11a8bc <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a88c:	e3a03000 	mov	r3, #0
  11a890:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a894:	ea000008 	b	11a8bc <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a898:	e3070778 	movw	r0, #30584	; 0x7778
  11a89c:	e3400014 	movt	r0, #20
  11a8a0:	ebffa21b 	bl	103114 <rt_kprintf>
  11a8a4:	e30011c6 	movw	r1, #454	; 0x1c6
  11a8a8:	e3070628 	movw	r0, #30248	; 0x7628
  11a8ac:	e3400014 	movt	r0, #20
  11a8b0:	ebffc20a 	bl	10b0e0 <sys_arch_assert>
    return NULL;
  11a8b4:	e3a03000 	mov	r3, #0
  11a8b8:	ea00002c 	b	11a970 <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a8bc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a8c0:	e2833003 	add	r3, r3, #3
  11a8c4:	e3c32003 	bic	r2, r3, #3
  11a8c8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a8cc:	e0822003 	add	r2, r2, r3
  11a8d0:	e1db30b8 	ldrh	r3, [fp, #8]
  11a8d4:	e1520003 	cmp	r2, r3
  11a8d8:	9a000001 	bls	11a8e4 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a8dc:	e3a03000 	mov	r3, #0
  11a8e0:	ea000022 	b	11a970 <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a8e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a8e8:	e3a02000 	mov	r2, #0
  11a8ec:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a8f0:	e59b3004 	ldr	r3, [fp, #4]
  11a8f4:	e3530000 	cmp	r3, #0
  11a8f8:	0a000007 	beq	11a91c <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a8fc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a900:	e2833003 	add	r3, r3, #3
  11a904:	e3c33003 	bic	r3, r3, #3
  11a908:	e59b2004 	ldr	r2, [fp, #4]
  11a90c:	e0822003 	add	r2, r2, r3
  11a910:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a914:	e5832004 	str	r2, [r3, #4]
  11a918:	ea000002 	b	11a928 <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a91c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a920:	e3a02000 	mov	r2, #0
  11a924:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a928:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a92c:	e3a02002 	mov	r2, #2
  11a930:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a934:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a938:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a93c:	e1c320b8 	strh	r2, [r3, #8]
  11a940:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a944:	e1d320b8 	ldrh	r2, [r3, #8]
  11a948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a94c:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a950:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a954:	e6ef2073 	uxtb	r2, r3
  11a958:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a95c:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a960:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a964:	e3a02001 	mov	r2, #1
  11a968:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a96c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a970:	e1a00003 	mov	r0, r3
  11a974:	e24bd004 	sub	sp, fp, #4
  11a978:	e8bd8800 	pop	{fp, pc}

0011a97c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a97c:	e92d4800 	push	{fp, lr}
  11a980:	e28db004 	add	fp, sp, #4
  11a984:	e24dd018 	sub	sp, sp, #24
  11a988:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a98c:	e1a03001 	mov	r3, r1
  11a990:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a998:	e3530000 	cmp	r3, #0
  11a99c:	1a000006 	bne	11a9bc <pbuf_realloc+0x40>
  11a9a0:	e307079c 	movw	r0, #30620	; 0x779c
  11a9a4:	e3400014 	movt	r0, #20
  11a9a8:	ebffa1d9 	bl	103114 <rt_kprintf>
  11a9ac:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a9b0:	e3070628 	movw	r0, #30248	; 0x7628
  11a9b4:	e3400014 	movt	r0, #20
  11a9b8:	ebffc1c8 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a9bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9c0:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9c4:	e3530003 	cmp	r3, #3
  11a9c8:	0a000012 	beq	11aa18 <pbuf_realloc+0x9c>
  11a9cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9d0:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9d4:	e3530001 	cmp	r3, #1
  11a9d8:	0a00000e 	beq	11aa18 <pbuf_realloc+0x9c>
  11a9dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9e0:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9e4:	e3530000 	cmp	r3, #0
  11a9e8:	0a00000a 	beq	11aa18 <pbuf_realloc+0x9c>
  11a9ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9f0:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9f4:	e3530002 	cmp	r3, #2
  11a9f8:	0a000006 	beq	11aa18 <pbuf_realloc+0x9c>
  11a9fc:	e30707b4 	movw	r0, #30644	; 0x77b4
  11aa00:	e3400014 	movt	r0, #20
  11aa04:	ebffa1c2 	bl	103114 <rt_kprintf>
  11aa08:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11aa0c:	e3070628 	movw	r0, #30248	; 0x7628
  11aa10:	e3400014 	movt	r0, #20
  11aa14:	ebffc1b1 	bl	10b0e0 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11aa18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa1c:	e1d330b8 	ldrh	r3, [r3, #8]
  11aa20:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11aa24:	e1520003 	cmp	r2, r3
  11aa28:	2a00006b 	bcs	11abdc <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11aa2c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa30:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11aa34:	e1d220b8 	ldrh	r2, [r2, #8]
  11aa38:	e0433002 	sub	r3, r3, r2
  11aa3c:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11aa40:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa44:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11aa48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa4c:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11aa50:	ea000024 	b	11aae8 <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11aa54:	e51b3008 	ldr	r3, [fp, #-8]
  11aa58:	e1d330ba 	ldrh	r3, [r3, #10]
  11aa5c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aa60:	e0423003 	sub	r3, r2, r3
  11aa64:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11aa68:	e51b3010 	ldr	r3, [fp, #-16]
  11aa6c:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11aa70:	e1530002 	cmp	r3, r2
  11aa74:	da000006 	ble	11aa94 <pbuf_realloc+0x118>
  11aa78:	e30707d0 	movw	r0, #30672	; 0x77d0
  11aa7c:	e3400014 	movt	r0, #20
  11aa80:	ebffa1a3 	bl	103114 <rt_kprintf>
  11aa84:	e3a01f83 	mov	r1, #524	; 0x20c
  11aa88:	e3070628 	movw	r0, #30248	; 0x7628
  11aa8c:	e3400014 	movt	r0, #20
  11aa90:	ebffc192 	bl	10b0e0 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11aa94:	e51b3008 	ldr	r3, [fp, #-8]
  11aa98:	e1d320b8 	ldrh	r2, [r3, #8]
  11aa9c:	e51b3010 	ldr	r3, [fp, #-16]
  11aaa0:	e6ff3073 	uxth	r3, r3
  11aaa4:	e0823003 	add	r3, r2, r3
  11aaa8:	e6ff2073 	uxth	r2, r3
  11aaac:	e51b3008 	ldr	r3, [fp, #-8]
  11aab0:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11aab4:	e51b3008 	ldr	r3, [fp, #-8]
  11aab8:	e5933000 	ldr	r3, [r3]
  11aabc:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11aac0:	e51b3008 	ldr	r3, [fp, #-8]
  11aac4:	e3530000 	cmp	r3, #0
  11aac8:	1a000006 	bne	11aae8 <pbuf_realloc+0x16c>
  11aacc:	e30707e4 	movw	r0, #30692	; 0x77e4
  11aad0:	e3400014 	movt	r0, #20
  11aad4:	ebffa18e 	bl	103114 <rt_kprintf>
  11aad8:	e3a01e21 	mov	r1, #528	; 0x210
  11aadc:	e3070628 	movw	r0, #30248	; 0x7628
  11aae0:	e3400014 	movt	r0, #20
  11aae4:	ebffc17d 	bl	10b0e0 <sys_arch_assert>
  while (rem_len > q->len) {
  11aae8:	e51b3008 	ldr	r3, [fp, #-8]
  11aaec:	e1d330ba 	ldrh	r3, [r3, #10]
  11aaf0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aaf4:	e1520003 	cmp	r2, r3
  11aaf8:	8affffd5 	bhi	11aa54 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11aafc:	e51b3008 	ldr	r3, [fp, #-8]
  11ab00:	e5d3300c 	ldrb	r3, [r3, #12]
  11ab04:	e3530000 	cmp	r3, #0
  11ab08:	1a000020 	bne	11ab90 <pbuf_realloc+0x214>
  11ab0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ab10:	e1d330ba 	ldrh	r3, [r3, #10]
  11ab14:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ab18:	e1520003 	cmp	r2, r3
  11ab1c:	0a00001b 	beq	11ab90 <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11ab20:	e51b3008 	ldr	r3, [fp, #-8]
  11ab24:	e5d3300d 	ldrb	r3, [r3, #13]
  11ab28:	e2033002 	and	r3, r3, #2
  11ab2c:	e3530000 	cmp	r3, #0
  11ab30:	1a000016 	bne	11ab90 <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11ab34:	e51b3008 	ldr	r3, [fp, #-8]
  11ab38:	e5933004 	ldr	r3, [r3, #4]
  11ab3c:	e1a02003 	mov	r2, r3
  11ab40:	e51b3008 	ldr	r3, [fp, #-8]
  11ab44:	e0423003 	sub	r3, r2, r3
  11ab48:	e6ff2073 	uxth	r2, r3
  11ab4c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11ab50:	e0823003 	add	r3, r2, r3
  11ab54:	e6ff3073 	uxth	r3, r3
  11ab58:	e1a01003 	mov	r1, r3
  11ab5c:	e51b0008 	ldr	r0, [fp, #-8]
  11ab60:	ebffc194 	bl	10b1b8 <mem_trim>
  11ab64:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11ab68:	e51b3008 	ldr	r3, [fp, #-8]
  11ab6c:	e3530000 	cmp	r3, #0
  11ab70:	1a000006 	bne	11ab90 <pbuf_realloc+0x214>
  11ab74:	e30707fc 	movw	r0, #30716	; 0x77fc
  11ab78:	e3400014 	movt	r0, #20
  11ab7c:	ebffa164 	bl	103114 <rt_kprintf>
  11ab80:	e300121e 	movw	r1, #542	; 0x21e
  11ab84:	e3070628 	movw	r0, #30248	; 0x7628
  11ab88:	e3400014 	movt	r0, #20
  11ab8c:	ebffc153 	bl	10b0e0 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11ab90:	e51b3008 	ldr	r3, [fp, #-8]
  11ab94:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ab98:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11ab9c:	e51b3008 	ldr	r3, [fp, #-8]
  11aba0:	e1d320ba 	ldrh	r2, [r3, #10]
  11aba4:	e51b3008 	ldr	r3, [fp, #-8]
  11aba8:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11abac:	e51b3008 	ldr	r3, [fp, #-8]
  11abb0:	e5933000 	ldr	r3, [r3]
  11abb4:	e3530000 	cmp	r3, #0
  11abb8:	0a000003 	beq	11abcc <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11abbc:	e51b3008 	ldr	r3, [fp, #-8]
  11abc0:	e5933000 	ldr	r3, [r3]
  11abc4:	e1a00003 	mov	r0, r3
  11abc8:	eb0000b4 	bl	11aea0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11abcc:	e51b3008 	ldr	r3, [fp, #-8]
  11abd0:	e3a02000 	mov	r2, #0
  11abd4:	e5832000 	str	r2, [r3]
  11abd8:	ea000000 	b	11abe0 <pbuf_realloc+0x264>
    return;
  11abdc:	e320f000 	nop	{0}

}
  11abe0:	e24bd004 	sub	sp, fp, #4
  11abe4:	e8bd8800 	pop	{fp, pc}

0011abe8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11abe8:	e92d4800 	push	{fp, lr}
  11abec:	e28db004 	add	fp, sp, #4
  11abf0:	e24dd010 	sub	sp, sp, #16
  11abf4:	e50b0010 	str	r0, [fp, #-16]
  11abf8:	e1a03001 	mov	r3, r1
  11abfc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11ac00:	e1a03002 	mov	r3, r2
  11ac04:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11ac08:	e51b3010 	ldr	r3, [fp, #-16]
  11ac0c:	e3530000 	cmp	r3, #0
  11ac10:	1a000006 	bne	11ac30 <pbuf_header_impl+0x48>
  11ac14:	e3070818 	movw	r0, #30744	; 0x7818
  11ac18:	e3400014 	movt	r0, #20
  11ac1c:	ebffa13c 	bl	103114 <rt_kprintf>
  11ac20:	e3a01d09 	mov	r1, #576	; 0x240
  11ac24:	e3070628 	movw	r0, #30248	; 0x7628
  11ac28:	e3400014 	movt	r0, #20
  11ac2c:	ebffc12b 	bl	10b0e0 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11ac30:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac34:	e3530000 	cmp	r3, #0
  11ac38:	0a000002 	beq	11ac48 <pbuf_header_impl+0x60>
  11ac3c:	e51b3010 	ldr	r3, [fp, #-16]
  11ac40:	e3530000 	cmp	r3, #0
  11ac44:	1a000001 	bne	11ac50 <pbuf_header_impl+0x68>
    return 0;
  11ac48:	e3a03000 	mov	r3, #0
  11ac4c:	ea000072 	b	11ae1c <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11ac50:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac54:	e3530000 	cmp	r3, #0
  11ac58:	aa000010 	bge	11aca0 <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11ac5c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ac60:	e2633000 	rsb	r3, r3, #0
  11ac64:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11ac68:	e51b3010 	ldr	r3, [fp, #-16]
  11ac6c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ac70:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ac74:	e1520003 	cmp	r2, r3
  11ac78:	9a00000a 	bls	11aca8 <pbuf_header_impl+0xc0>
  11ac7c:	e3070824 	movw	r0, #30756	; 0x7824
  11ac80:	e3400014 	movt	r0, #20
  11ac84:	ebffa122 	bl	103114 <rt_kprintf>
  11ac88:	e3a01f92 	mov	r1, #584	; 0x248
  11ac8c:	e3070628 	movw	r0, #30248	; 0x7628
  11ac90:	e3400014 	movt	r0, #20
  11ac94:	ebffc111 	bl	10b0e0 <sys_arch_assert>
  11ac98:	e3a03001 	mov	r3, #1
  11ac9c:	ea00005e 	b	11ae1c <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11aca0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aca4:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11aca8:	e51b3010 	ldr	r3, [fp, #-16]
  11acac:	e5d3300c 	ldrb	r3, [r3, #12]
  11acb0:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11acb4:	e51b3010 	ldr	r3, [fp, #-16]
  11acb8:	e5933004 	ldr	r3, [r3, #4]
  11acbc:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11acc0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11acc4:	e3530000 	cmp	r3, #0
  11acc8:	0a000002 	beq	11acd8 <pbuf_header_impl+0xf0>
  11accc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11acd0:	e3530003 	cmp	r3, #3
  11acd4:	1a000011 	bne	11ad20 <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11acd8:	e51b3010 	ldr	r3, [fp, #-16]
  11acdc:	e5932004 	ldr	r2, [r3, #4]
  11ace0:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ace4:	e2633000 	rsb	r3, r3, #0
  11ace8:	e0822003 	add	r2, r2, r3
  11acec:	e51b3010 	ldr	r3, [fp, #-16]
  11acf0:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11acf4:	e51b3010 	ldr	r3, [fp, #-16]
  11acf8:	e5932004 	ldr	r2, [r3, #4]
  11acfc:	e51b3010 	ldr	r3, [fp, #-16]
  11ad00:	e2833010 	add	r3, r3, #16
  11ad04:	e1520003 	cmp	r2, r3
  11ad08:	2a000034 	bcs	11ade0 <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11ad0c:	e51b3010 	ldr	r3, [fp, #-16]
  11ad10:	e51b200c 	ldr	r2, [fp, #-12]
  11ad14:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11ad18:	e3a03001 	mov	r3, #1
  11ad1c:	ea00003e 	b	11ae1c <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11ad20:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad24:	e3530002 	cmp	r3, #2
  11ad28:	0a000002 	beq	11ad38 <pbuf_header_impl+0x150>
  11ad2c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad30:	e3530001 	cmp	r3, #1
  11ad34:	1a000020 	bne	11adbc <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11ad38:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad3c:	e3530000 	cmp	r3, #0
  11ad40:	aa00000c 	bge	11ad78 <pbuf_header_impl+0x190>
  11ad44:	e51b3010 	ldr	r3, [fp, #-16]
  11ad48:	e1d330ba 	ldrh	r3, [r3, #10]
  11ad4c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ad50:	e1520003 	cmp	r2, r3
  11ad54:	8a000007 	bhi	11ad78 <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11ad58:	e51b3010 	ldr	r3, [fp, #-16]
  11ad5c:	e5932004 	ldr	r2, [r3, #4]
  11ad60:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad64:	e2633000 	rsb	r3, r3, #0
  11ad68:	e0822003 	add	r2, r2, r3
  11ad6c:	e51b3010 	ldr	r3, [fp, #-16]
  11ad70:	e5832004 	str	r2, [r3, #4]
  11ad74:	ea00000f 	b	11adb8 <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11ad78:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad7c:	e3530000 	cmp	r3, #0
  11ad80:	da00000a 	ble	11adb0 <pbuf_header_impl+0x1c8>
  11ad84:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11ad88:	e3530000 	cmp	r3, #0
  11ad8c:	0a000007 	beq	11adb0 <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11ad90:	e51b3010 	ldr	r3, [fp, #-16]
  11ad94:	e5932004 	ldr	r2, [r3, #4]
  11ad98:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad9c:	e2633000 	rsb	r3, r3, #0
  11ada0:	e0822003 	add	r2, r2, r3
  11ada4:	e51b3010 	ldr	r3, [fp, #-16]
  11ada8:	e5832004 	str	r2, [r3, #4]
  11adac:	ea000001 	b	11adb8 <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11adb0:	e3a03001 	mov	r3, #1
  11adb4:	ea000018 	b	11ae1c <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11adb8:	ea000008 	b	11ade0 <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11adbc:	e3070844 	movw	r0, #30788	; 0x7844
  11adc0:	e3400014 	movt	r0, #20
  11adc4:	ebffa0d2 	bl	103114 <rt_kprintf>
  11adc8:	e3a01f9e 	mov	r1, #632	; 0x278
  11adcc:	e3070628 	movw	r0, #30248	; 0x7628
  11add0:	e3400014 	movt	r0, #20
  11add4:	ebffc0c1 	bl	10b0e0 <sys_arch_assert>
    return 1;
  11add8:	e3a03001 	mov	r3, #1
  11addc:	ea00000e 	b	11ae1c <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11ade0:	e51b3010 	ldr	r3, [fp, #-16]
  11ade4:	e1d320ba 	ldrh	r2, [r3, #10]
  11ade8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11adec:	e0823003 	add	r3, r2, r3
  11adf0:	e6ff2073 	uxth	r2, r3
  11adf4:	e51b3010 	ldr	r3, [fp, #-16]
  11adf8:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11adfc:	e51b3010 	ldr	r3, [fp, #-16]
  11ae00:	e1d320b8 	ldrh	r2, [r3, #8]
  11ae04:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ae08:	e0823003 	add	r3, r2, r3
  11ae0c:	e6ff2073 	uxth	r2, r3
  11ae10:	e51b3010 	ldr	r3, [fp, #-16]
  11ae14:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11ae18:	e3a03000 	mov	r3, #0
}
  11ae1c:	e1a00003 	mov	r0, r3
  11ae20:	e24bd004 	sub	sp, fp, #4
  11ae24:	e8bd8800 	pop	{fp, pc}

0011ae28 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11ae28:	e92d4800 	push	{fp, lr}
  11ae2c:	e28db004 	add	fp, sp, #4
  11ae30:	e24dd008 	sub	sp, sp, #8
  11ae34:	e50b0008 	str	r0, [fp, #-8]
  11ae38:	e1a03001 	mov	r3, r1
  11ae3c:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11ae40:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae44:	e3a02000 	mov	r2, #0
  11ae48:	e1a01003 	mov	r1, r3
  11ae4c:	e51b0008 	ldr	r0, [fp, #-8]
  11ae50:	ebffff64 	bl	11abe8 <pbuf_header_impl>
  11ae54:	e1a03000 	mov	r3, r0
}
  11ae58:	e1a00003 	mov	r0, r3
  11ae5c:	e24bd004 	sub	sp, fp, #4
  11ae60:	e8bd8800 	pop	{fp, pc}

0011ae64 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11ae64:	e92d4800 	push	{fp, lr}
  11ae68:	e28db004 	add	fp, sp, #4
  11ae6c:	e24dd008 	sub	sp, sp, #8
  11ae70:	e50b0008 	str	r0, [fp, #-8]
  11ae74:	e1a03001 	mov	r3, r1
  11ae78:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11ae7c:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae80:	e3a02001 	mov	r2, #1
  11ae84:	e1a01003 	mov	r1, r3
  11ae88:	e51b0008 	ldr	r0, [fp, #-8]
  11ae8c:	ebffff55 	bl	11abe8 <pbuf_header_impl>
  11ae90:	e1a03000 	mov	r3, r0
}
  11ae94:	e1a00003 	mov	r0, r3
  11ae98:	e24bd004 	sub	sp, fp, #4
  11ae9c:	e8bd8800 	pop	{fp, pc}

0011aea0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11aea0:	e92d4800 	push	{fp, lr}
  11aea4:	e28db004 	add	fp, sp, #4
  11aea8:	e24dd018 	sub	sp, sp, #24
  11aeac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11aeb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aeb4:	e3530000 	cmp	r3, #0
  11aeb8:	1a00000b 	bne	11aeec <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11aebc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aec0:	e3530000 	cmp	r3, #0
  11aec4:	1a000006 	bne	11aee4 <pbuf_free+0x44>
  11aec8:	e3070818 	movw	r0, #30744	; 0x7818
  11aecc:	e3400014 	movt	r0, #20
  11aed0:	ebffa08f 	bl	103114 <rt_kprintf>
  11aed4:	e30012d3 	movw	r1, #723	; 0x2d3
  11aed8:	e3070628 	movw	r0, #30248	; 0x7628
  11aedc:	e3400014 	movt	r0, #20
  11aee0:	ebffc07e 	bl	10b0e0 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11aee4:	e3a03000 	mov	r3, #0
  11aee8:	ea00006e 	b	11b0a8 <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11aeec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aef0:	e5d3300c 	ldrb	r3, [r3, #12]
  11aef4:	e3530000 	cmp	r3, #0
  11aef8:	0a000012 	beq	11af48 <pbuf_free+0xa8>
  11aefc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af00:	e5d3300c 	ldrb	r3, [r3, #12]
  11af04:	e3530001 	cmp	r3, #1
  11af08:	0a00000e 	beq	11af48 <pbuf_free+0xa8>
  11af0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af10:	e5d3300c 	ldrb	r3, [r3, #12]
  11af14:	e3530002 	cmp	r3, #2
  11af18:	0a00000a 	beq	11af48 <pbuf_free+0xa8>
  11af1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af20:	e5d3300c 	ldrb	r3, [r3, #12]
  11af24:	e3530003 	cmp	r3, #3
  11af28:	0a000006 	beq	11af48 <pbuf_free+0xa8>
  11af2c:	e3070854 	movw	r0, #30804	; 0x7854
  11af30:	e3400014 	movt	r0, #20
  11af34:	ebffa076 	bl	103114 <rt_kprintf>
  11af38:	e30012df 	movw	r1, #735	; 0x2df
  11af3c:	e3070628 	movw	r0, #30248	; 0x7628
  11af40:	e3400014 	movt	r0, #20
  11af44:	ebffc065 	bl	10b0e0 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11af48:	e3a03000 	mov	r3, #0
  11af4c:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11af50:	ea000050 	b	11b098 <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11af54:	ebff9cb8 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11af58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af5c:	e1d330be 	ldrh	r3, [r3, #14]
  11af60:	e3530000 	cmp	r3, #0
  11af64:	1a000006 	bne	11af84 <pbuf_free+0xe4>
  11af68:	e307086c 	movw	r0, #30828	; 0x786c
  11af6c:	e3400014 	movt	r0, #20
  11af70:	ebffa067 	bl	103114 <rt_kprintf>
  11af74:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11af78:	e3070628 	movw	r0, #30248	; 0x7628
  11af7c:	e3400014 	movt	r0, #20
  11af80:	ebffc056 	bl	10b0e0 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11af84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af88:	e1d330be 	ldrh	r3, [r3, #14]
  11af8c:	e2433001 	sub	r3, r3, #1
  11af90:	e6ff2073 	uxth	r2, r3
  11af94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af98:	e1c320be 	strh	r2, [r3, #14]
  11af9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afa0:	e1d330be 	ldrh	r3, [r3, #14]
  11afa4:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11afa8:	ebff9ca9 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11afac:	e15b30b8 	ldrh	r3, [fp, #-8]
  11afb0:	e3530000 	cmp	r3, #0
  11afb4:	1a000035 	bne	11b090 <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11afb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afbc:	e5933000 	ldr	r3, [r3]
  11afc0:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11afc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afc8:	e5d3300c 	ldrb	r3, [r3, #12]
  11afcc:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11afd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afd4:	e5d3300d 	ldrb	r3, [r3, #13]
  11afd8:	e2033002 	and	r3, r3, #2
  11afdc:	e3530000 	cmp	r3, #0
  11afe0:	0a000011 	beq	11b02c <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11afe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afe8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11afec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11aff0:	e5933010 	ldr	r3, [r3, #16]
  11aff4:	e3530000 	cmp	r3, #0
  11aff8:	1a000006 	bne	11b018 <pbuf_free+0x178>
  11affc:	e3070884 	movw	r0, #30852	; 0x7884
  11b000:	e3400014 	movt	r0, #20
  11b004:	ebffa042 	bl	103114 <rt_kprintf>
  11b008:	e30012fa 	movw	r1, #762	; 0x2fa
  11b00c:	e3070628 	movw	r0, #30248	; 0x7628
  11b010:	e3400014 	movt	r0, #20
  11b014:	ebffc031 	bl	10b0e0 <sys_arch_assert>
        pc->custom_free_function(p);
  11b018:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b01c:	e5933010 	ldr	r3, [r3, #16]
  11b020:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b024:	e12fff33 	blx	r3
  11b028:	ea000012 	b	11b078 <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11b02c:	e15b30be 	ldrh	r3, [fp, #-14]
  11b030:	e3530003 	cmp	r3, #3
  11b034:	1a000003 	bne	11b048 <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11b038:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b03c:	e3a00010 	mov	r0, #16
  11b040:	ebfff888 	bl	119268 <memp_free>
  11b044:	ea00000b 	b	11b078 <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11b048:	e15b30be 	ldrh	r3, [fp, #-14]
  11b04c:	e3530001 	cmp	r3, #1
  11b050:	0a000002 	beq	11b060 <pbuf_free+0x1c0>
  11b054:	e15b30be 	ldrh	r3, [fp, #-14]
  11b058:	e3530002 	cmp	r3, #2
  11b05c:	1a000003 	bne	11b070 <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11b060:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b064:	e3a0000f 	mov	r0, #15
  11b068:	ebfff87e 	bl	119268 <memp_free>
  11b06c:	ea000001 	b	11b078 <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11b070:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b074:	ebffc066 	bl	10b214 <mem_free>
        }
      }
      count++;
  11b078:	e55b3005 	ldrb	r3, [fp, #-5]
  11b07c:	e2833001 	add	r3, r3, #1
  11b080:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11b084:	e51b300c 	ldr	r3, [fp, #-12]
  11b088:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11b08c:	ea000001 	b	11b098 <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11b090:	e3a03000 	mov	r3, #0
  11b094:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11b098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b09c:	e3530000 	cmp	r3, #0
  11b0a0:	1affffab 	bne	11af54 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11b0a4:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11b0a8:	e1a00003 	mov	r0, r3
  11b0ac:	e24bd004 	sub	sp, fp, #4
  11b0b0:	e8bd8800 	pop	{fp, pc}

0011b0b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11b0b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b0b8:	e28db000 	add	fp, sp, #0
  11b0bc:	e24dd014 	sub	sp, sp, #20
  11b0c0:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11b0c4:	e3a03000 	mov	r3, #0
  11b0c8:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11b0cc:	ea000005 	b	11b0e8 <pbuf_clen+0x34>
    ++len;
  11b0d0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b0d4:	e2833001 	add	r3, r3, #1
  11b0d8:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11b0dc:	e51b3010 	ldr	r3, [fp, #-16]
  11b0e0:	e5933000 	ldr	r3, [r3]
  11b0e4:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11b0e8:	e51b3010 	ldr	r3, [fp, #-16]
  11b0ec:	e3530000 	cmp	r3, #0
  11b0f0:	1afffff6 	bne	11b0d0 <pbuf_clen+0x1c>
  }
  return len;
  11b0f4:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11b0f8:	e1a00003 	mov	r0, r3
  11b0fc:	e28bd000 	add	sp, fp, #0
  11b100:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b104:	e12fff1e 	bx	lr

0011b108 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11b108:	e92d4800 	push	{fp, lr}
  11b10c:	e28db004 	add	fp, sp, #4
  11b110:	e24dd008 	sub	sp, sp, #8
  11b114:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11b118:	e51b3008 	ldr	r3, [fp, #-8]
  11b11c:	e3530000 	cmp	r3, #0
  11b120:	0a000012 	beq	11b170 <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11b124:	ebff9c44 	bl	10223c <rt_enter_critical>
  11b128:	e51b3008 	ldr	r3, [fp, #-8]
  11b12c:	e1d330be 	ldrh	r3, [r3, #14]
  11b130:	e2833001 	add	r3, r3, #1
  11b134:	e6ff2073 	uxth	r2, r3
  11b138:	e51b3008 	ldr	r3, [fp, #-8]
  11b13c:	e1c320be 	strh	r2, [r3, #14]
  11b140:	ebff9c43 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11b144:	e51b3008 	ldr	r3, [fp, #-8]
  11b148:	e1d330be 	ldrh	r3, [r3, #14]
  11b14c:	e3530000 	cmp	r3, #0
  11b150:	1a000006 	bne	11b170 <pbuf_ref+0x68>
  11b154:	e30708a8 	movw	r0, #30888	; 0x78a8
  11b158:	e3400014 	movt	r0, #20
  11b15c:	ebff9fec 	bl	103114 <rt_kprintf>
  11b160:	e300133a 	movw	r1, #826	; 0x33a
  11b164:	e3070628 	movw	r0, #30248	; 0x7628
  11b168:	e3400014 	movt	r0, #20
  11b16c:	ebffbfdb 	bl	10b0e0 <sys_arch_assert>
  }
}
  11b170:	e320f000 	nop	{0}
  11b174:	e24bd004 	sub	sp, fp, #4
  11b178:	e8bd8800 	pop	{fp, pc}

0011b17c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11b17c:	e92d4800 	push	{fp, lr}
  11b180:	e28db004 	add	fp, sp, #4
  11b184:	e24dd010 	sub	sp, sp, #16
  11b188:	e50b0010 	str	r0, [fp, #-16]
  11b18c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11b190:	e51b3010 	ldr	r3, [fp, #-16]
  11b194:	e3530000 	cmp	r3, #0
  11b198:	0a000002 	beq	11b1a8 <pbuf_cat+0x2c>
  11b19c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1a0:	e3530000 	cmp	r3, #0
  11b1a4:	1a000007 	bne	11b1c8 <pbuf_cat+0x4c>
  11b1a8:	e30708bc 	movw	r0, #30908	; 0x78bc
  11b1ac:	e3400014 	movt	r0, #20
  11b1b0:	ebff9fd7 	bl	103114 <rt_kprintf>
  11b1b4:	e300134e 	movw	r1, #846	; 0x34e
  11b1b8:	e3070628 	movw	r0, #30248	; 0x7628
  11b1bc:	e3400014 	movt	r0, #20
  11b1c0:	ebffbfc6 	bl	10b0e0 <sys_arch_assert>
  11b1c4:	ea000034 	b	11b29c <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11b1c8:	e51b3010 	ldr	r3, [fp, #-16]
  11b1cc:	e50b3008 	str	r3, [fp, #-8]
  11b1d0:	ea00000a 	b	11b200 <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11b1d4:	e51b3008 	ldr	r3, [fp, #-8]
  11b1d8:	e1d320b8 	ldrh	r2, [r3, #8]
  11b1dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1e0:	e1d330b8 	ldrh	r3, [r3, #8]
  11b1e4:	e0823003 	add	r3, r2, r3
  11b1e8:	e6ff2073 	uxth	r2, r3
  11b1ec:	e51b3008 	ldr	r3, [fp, #-8]
  11b1f0:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11b1f4:	e51b3008 	ldr	r3, [fp, #-8]
  11b1f8:	e5933000 	ldr	r3, [r3]
  11b1fc:	e50b3008 	str	r3, [fp, #-8]
  11b200:	e51b3008 	ldr	r3, [fp, #-8]
  11b204:	e5933000 	ldr	r3, [r3]
  11b208:	e3530000 	cmp	r3, #0
  11b20c:	1afffff0 	bne	11b1d4 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11b210:	e51b3008 	ldr	r3, [fp, #-8]
  11b214:	e1d320b8 	ldrh	r2, [r3, #8]
  11b218:	e51b3008 	ldr	r3, [fp, #-8]
  11b21c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b220:	e1520003 	cmp	r2, r3
  11b224:	0a000006 	beq	11b244 <pbuf_cat+0xc8>
  11b228:	e30708f4 	movw	r0, #30964	; 0x78f4
  11b22c:	e3400014 	movt	r0, #20
  11b230:	ebff9fb7 	bl	103114 <rt_kprintf>
  11b234:	e3001356 	movw	r1, #854	; 0x356
  11b238:	e3070628 	movw	r0, #30248	; 0x7628
  11b23c:	e3400014 	movt	r0, #20
  11b240:	ebffbfa6 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11b244:	e51b3008 	ldr	r3, [fp, #-8]
  11b248:	e5933000 	ldr	r3, [r3]
  11b24c:	e3530000 	cmp	r3, #0
  11b250:	0a000006 	beq	11b270 <pbuf_cat+0xf4>
  11b254:	e3070924 	movw	r0, #31012	; 0x7924
  11b258:	e3400014 	movt	r0, #20
  11b25c:	ebff9fac 	bl	103114 <rt_kprintf>
  11b260:	e3001357 	movw	r1, #855	; 0x357
  11b264:	e3070628 	movw	r0, #30248	; 0x7628
  11b268:	e3400014 	movt	r0, #20
  11b26c:	ebffbf9b 	bl	10b0e0 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11b270:	e51b3008 	ldr	r3, [fp, #-8]
  11b274:	e1d320b8 	ldrh	r2, [r3, #8]
  11b278:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b27c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b280:	e0823003 	add	r3, r2, r3
  11b284:	e6ff2073 	uxth	r2, r3
  11b288:	e51b3008 	ldr	r3, [fp, #-8]
  11b28c:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11b290:	e51b3008 	ldr	r3, [fp, #-8]
  11b294:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11b298:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11b29c:	e24bd004 	sub	sp, fp, #4
  11b2a0:	e8bd8800 	pop	{fp, pc}

0011b2a4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11b2a4:	e92d4800 	push	{fp, lr}
  11b2a8:	e28db004 	add	fp, sp, #4
  11b2ac:	e24dd008 	sub	sp, sp, #8
  11b2b0:	e50b0008 	str	r0, [fp, #-8]
  11b2b4:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11b2b8:	e51b100c 	ldr	r1, [fp, #-12]
  11b2bc:	e51b0008 	ldr	r0, [fp, #-8]
  11b2c0:	ebffffad 	bl	11b17c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11b2c4:	e51b000c 	ldr	r0, [fp, #-12]
  11b2c8:	ebffff8e 	bl	11b108 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11b2cc:	e320f000 	nop	{0}
  11b2d0:	e24bd004 	sub	sp, fp, #4
  11b2d4:	e8bd8800 	pop	{fp, pc}

0011b2d8 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11b2d8:	e92d4800 	push	{fp, lr}
  11b2dc:	e28db004 	add	fp, sp, #4
  11b2e0:	e24dd010 	sub	sp, sp, #16
  11b2e4:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11b2e8:	e3a03001 	mov	r3, #1
  11b2ec:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11b2f0:	e51b3010 	ldr	r3, [fp, #-16]
  11b2f4:	e5933000 	ldr	r3, [r3]
  11b2f8:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11b2fc:	e51b300c 	ldr	r3, [fp, #-12]
  11b300:	e3530000 	cmp	r3, #0
  11b304:	0a000024 	beq	11b39c <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11b308:	e51b300c 	ldr	r3, [fp, #-12]
  11b30c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b310:	e1a02003 	mov	r2, r3
  11b314:	e51b3010 	ldr	r3, [fp, #-16]
  11b318:	e1d330b8 	ldrh	r3, [r3, #8]
  11b31c:	e1a01003 	mov	r1, r3
  11b320:	e51b3010 	ldr	r3, [fp, #-16]
  11b324:	e1d330ba 	ldrh	r3, [r3, #10]
  11b328:	e0413003 	sub	r3, r1, r3
  11b32c:	e1520003 	cmp	r2, r3
  11b330:	0a000006 	beq	11b350 <pbuf_dechain+0x78>
  11b334:	e3070934 	movw	r0, #31028	; 0x7934
  11b338:	e3400014 	movt	r0, #20
  11b33c:	ebff9f74 	bl	103114 <rt_kprintf>
  11b340:	e300138d 	movw	r1, #909	; 0x38d
  11b344:	e3070628 	movw	r0, #30248	; 0x7628
  11b348:	e3400014 	movt	r0, #20
  11b34c:	ebffbf63 	bl	10b0e0 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11b350:	e51b3010 	ldr	r3, [fp, #-16]
  11b354:	e1d320b8 	ldrh	r2, [r3, #8]
  11b358:	e51b3010 	ldr	r3, [fp, #-16]
  11b35c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b360:	e0423003 	sub	r3, r2, r3
  11b364:	e6ff2073 	uxth	r2, r3
  11b368:	e51b300c 	ldr	r3, [fp, #-12]
  11b36c:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b370:	e51b3010 	ldr	r3, [fp, #-16]
  11b374:	e3a02000 	mov	r2, #0
  11b378:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b37c:	e51b3010 	ldr	r3, [fp, #-16]
  11b380:	e1d320ba 	ldrh	r2, [r3, #10]
  11b384:	e51b3010 	ldr	r3, [fp, #-16]
  11b388:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b38c:	e51b000c 	ldr	r0, [fp, #-12]
  11b390:	ebfffec2 	bl	11aea0 <pbuf_free>
  11b394:	e1a03000 	mov	r3, r0
  11b398:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b39c:	e51b3010 	ldr	r3, [fp, #-16]
  11b3a0:	e1d320b8 	ldrh	r2, [r3, #8]
  11b3a4:	e51b3010 	ldr	r3, [fp, #-16]
  11b3a8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b3ac:	e1520003 	cmp	r2, r3
  11b3b0:	0a000006 	beq	11b3d0 <pbuf_dechain+0xf8>
  11b3b4:	e3070958 	movw	r0, #31064	; 0x7958
  11b3b8:	e3400014 	movt	r0, #20
  11b3bc:	ebff9f54 	bl	103114 <rt_kprintf>
  11b3c0:	e300139e 	movw	r1, #926	; 0x39e
  11b3c4:	e3070628 	movw	r0, #30248	; 0x7628
  11b3c8:	e3400014 	movt	r0, #20
  11b3cc:	ebffbf43 	bl	10b0e0 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b3d0:	e55b3005 	ldrb	r3, [fp, #-5]
  11b3d4:	e3530000 	cmp	r3, #0
  11b3d8:	1a000001 	bne	11b3e4 <pbuf_dechain+0x10c>
  11b3dc:	e51b300c 	ldr	r3, [fp, #-12]
  11b3e0:	ea000000 	b	11b3e8 <pbuf_dechain+0x110>
  11b3e4:	e3a03000 	mov	r3, #0
}
  11b3e8:	e1a00003 	mov	r0, r3
  11b3ec:	e24bd004 	sub	sp, fp, #4
  11b3f0:	e8bd8800 	pop	{fp, pc}

0011b3f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b3f4:	e92d4800 	push	{fp, lr}
  11b3f8:	e28db004 	add	fp, sp, #4
  11b3fc:	e24dd010 	sub	sp, sp, #16
  11b400:	e50b0010 	str	r0, [fp, #-16]
  11b404:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b408:	e3a03000 	mov	r3, #0
  11b40c:	e14b30b6 	strh	r3, [fp, #-6]
  11b410:	e3a03000 	mov	r3, #0
  11b414:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b418:	e51b3010 	ldr	r3, [fp, #-16]
  11b41c:	e3530000 	cmp	r3, #0
  11b420:	0a000008 	beq	11b448 <pbuf_copy+0x54>
  11b424:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b428:	e3530000 	cmp	r3, #0
  11b42c:	0a000005 	beq	11b448 <pbuf_copy+0x54>
  11b430:	e51b3010 	ldr	r3, [fp, #-16]
  11b434:	e1d320b8 	ldrh	r2, [r3, #8]
  11b438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b43c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b440:	e1520003 	cmp	r2, r3
  11b444:	2a000008 	bcs	11b46c <pbuf_copy+0x78>
  11b448:	e3070970 	movw	r0, #31088	; 0x7970
  11b44c:	e3400014 	movt	r0, #20
  11b450:	ebff9f2f 	bl	103114 <rt_kprintf>
  11b454:	e30013be 	movw	r1, #958	; 0x3be
  11b458:	e3070628 	movw	r0, #30248	; 0x7628
  11b45c:	e3400014 	movt	r0, #20
  11b460:	ebffbf1e 	bl	10b0e0 <sys_arch_assert>
  11b464:	e3e0300f 	mvn	r3, #15
  11b468:	ea000094 	b	11b6c0 <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b46c:	e51b3010 	ldr	r3, [fp, #-16]
  11b470:	e1d330ba 	ldrh	r3, [r3, #10]
  11b474:	e1a02003 	mov	r2, r3
  11b478:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b47c:	e0422003 	sub	r2, r2, r3
  11b480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b484:	e1d330ba 	ldrh	r3, [r3, #10]
  11b488:	e1a01003 	mov	r1, r3
  11b48c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b490:	e0413003 	sub	r3, r1, r3
  11b494:	e1520003 	cmp	r2, r3
  11b498:	ba000005 	blt	11b4b4 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b49c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4a0:	e1d320ba 	ldrh	r2, [r3, #10]
  11b4a4:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4a8:	e0423003 	sub	r3, r2, r3
  11b4ac:	e14b30ba 	strh	r3, [fp, #-10]
  11b4b0:	ea000004 	b	11b4c8 <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b4b4:	e51b3010 	ldr	r3, [fp, #-16]
  11b4b8:	e1d320ba 	ldrh	r2, [r3, #10]
  11b4bc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b4c0:	e0423003 	sub	r3, r2, r3
  11b4c4:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b4c8:	e51b3010 	ldr	r3, [fp, #-16]
  11b4cc:	e5932004 	ldr	r2, [r3, #4]
  11b4d0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b4d4:	e0820003 	add	r0, r2, r3
  11b4d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4dc:	e5932004 	ldr	r2, [r3, #4]
  11b4e0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4e4:	e0823003 	add	r3, r2, r3
  11b4e8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b4ec:	e1a01003 	mov	r1, r3
  11b4f0:	eb009623 	bl	140d84 <memcpy>
    offset_to += len;
  11b4f4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b4f8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b4fc:	e0823003 	add	r3, r2, r3
  11b500:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b504:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b508:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b50c:	e0823003 	add	r3, r2, r3
  11b510:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b514:	e51b3010 	ldr	r3, [fp, #-16]
  11b518:	e1d330ba 	ldrh	r3, [r3, #10]
  11b51c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b520:	e1520003 	cmp	r2, r3
  11b524:	9a000006 	bls	11b544 <pbuf_copy+0x150>
  11b528:	e30709a0 	movw	r0, #31136	; 0x79a0
  11b52c:	e3400014 	movt	r0, #20
  11b530:	ebff9ef7 	bl	103114 <rt_kprintf>
  11b534:	e30013ce 	movw	r1, #974	; 0x3ce
  11b538:	e3070628 	movw	r0, #30248	; 0x7628
  11b53c:	e3400014 	movt	r0, #20
  11b540:	ebffbee6 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b548:	e1d330ba 	ldrh	r3, [r3, #10]
  11b54c:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b550:	e1520003 	cmp	r2, r3
  11b554:	9a000006 	bls	11b574 <pbuf_copy+0x180>
  11b558:	e30709b8 	movw	r0, #31160	; 0x79b8
  11b55c:	e3400014 	movt	r0, #20
  11b560:	ebff9eeb 	bl	103114 <rt_kprintf>
  11b564:	e30013cf 	movw	r1, #975	; 0x3cf
  11b568:	e3070628 	movw	r0, #30248	; 0x7628
  11b56c:	e3400014 	movt	r0, #20
  11b570:	ebffbeda 	bl	10b0e0 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b578:	e1d330ba 	ldrh	r3, [r3, #10]
  11b57c:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b580:	e1520003 	cmp	r2, r3
  11b584:	3a000004 	bcc	11b59c <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b588:	e3a03000 	mov	r3, #0
  11b58c:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b594:	e5933000 	ldr	r3, [r3]
  11b598:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b59c:	e51b3010 	ldr	r3, [fp, #-16]
  11b5a0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b5a4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5a8:	e1520003 	cmp	r2, r3
  11b5ac:	1a000013 	bne	11b600 <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b5b0:	e3a03000 	mov	r3, #0
  11b5b4:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b5b8:	e51b3010 	ldr	r3, [fp, #-16]
  11b5bc:	e5933000 	ldr	r3, [r3]
  11b5c0:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b5c4:	e51b3010 	ldr	r3, [fp, #-16]
  11b5c8:	e3530000 	cmp	r3, #0
  11b5cc:	1a00000b 	bne	11b600 <pbuf_copy+0x20c>
  11b5d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5d4:	e3530000 	cmp	r3, #0
  11b5d8:	0a000008 	beq	11b600 <pbuf_copy+0x20c>
  11b5dc:	e30709d4 	movw	r0, #31188	; 0x79d4
  11b5e0:	e3400014 	movt	r0, #20
  11b5e4:	ebff9eca 	bl	103114 <rt_kprintf>
  11b5e8:	e30013d9 	movw	r1, #985	; 0x3d9
  11b5ec:	e3070628 	movw	r0, #30248	; 0x7628
  11b5f0:	e3400014 	movt	r0, #20
  11b5f4:	ebffbeb9 	bl	10b0e0 <sys_arch_assert>
  11b5f8:	e3e0300f 	mvn	r3, #15
  11b5fc:	ea00002f 	b	11b6c0 <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b600:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b604:	e3530000 	cmp	r3, #0
  11b608:	0a000012 	beq	11b658 <pbuf_copy+0x264>
  11b60c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b610:	e1d320ba 	ldrh	r2, [r3, #10]
  11b614:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b618:	e1d330b8 	ldrh	r3, [r3, #8]
  11b61c:	e1520003 	cmp	r2, r3
  11b620:	1a00000c 	bne	11b658 <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b624:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b628:	e5933000 	ldr	r3, [r3]
  11b62c:	e3530000 	cmp	r3, #0
  11b630:	0a000008 	beq	11b658 <pbuf_copy+0x264>
  11b634:	e30709e4 	movw	r0, #31204	; 0x79e4
  11b638:	e3400014 	movt	r0, #20
  11b63c:	ebff9eb4 	bl	103114 <rt_kprintf>
  11b640:	e30013df 	movw	r1, #991	; 0x3df
  11b644:	e3070628 	movw	r0, #30248	; 0x7628
  11b648:	e3400014 	movt	r0, #20
  11b64c:	ebffbea3 	bl	10b0e0 <sys_arch_assert>
  11b650:	e3e03005 	mvn	r3, #5
  11b654:	ea000019 	b	11b6c0 <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b658:	e51b3010 	ldr	r3, [fp, #-16]
  11b65c:	e3530000 	cmp	r3, #0
  11b660:	0a000012 	beq	11b6b0 <pbuf_copy+0x2bc>
  11b664:	e51b3010 	ldr	r3, [fp, #-16]
  11b668:	e1d320ba 	ldrh	r2, [r3, #10]
  11b66c:	e51b3010 	ldr	r3, [fp, #-16]
  11b670:	e1d330b8 	ldrh	r3, [r3, #8]
  11b674:	e1520003 	cmp	r2, r3
  11b678:	1a00000c 	bne	11b6b0 <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b67c:	e51b3010 	ldr	r3, [fp, #-16]
  11b680:	e5933000 	ldr	r3, [r3]
  11b684:	e3530000 	cmp	r3, #0
  11b688:	0a000008 	beq	11b6b0 <pbuf_copy+0x2bc>
  11b68c:	e30709e4 	movw	r0, #31204	; 0x79e4
  11b690:	e3400014 	movt	r0, #20
  11b694:	ebff9e9e 	bl	103114 <rt_kprintf>
  11b698:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b69c:	e3070628 	movw	r0, #30248	; 0x7628
  11b6a0:	e3400014 	movt	r0, #20
  11b6a4:	ebffbe8d 	bl	10b0e0 <sys_arch_assert>
  11b6a8:	e3e03005 	mvn	r3, #5
  11b6ac:	ea000003 	b	11b6c0 <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b6b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b6b4:	e3530000 	cmp	r3, #0
  11b6b8:	1affff6b 	bne	11b46c <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b6bc:	e3a03000 	mov	r3, #0
}
  11b6c0:	e1a00003 	mov	r0, r3
  11b6c4:	e24bd004 	sub	sp, fp, #4
  11b6c8:	e8bd8800 	pop	{fp, pc}

0011b6cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b6cc:	e92d4800 	push	{fp, lr}
  11b6d0:	e28db004 	add	fp, sp, #4
  11b6d4:	e24dd020 	sub	sp, sp, #32
  11b6d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b6dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b6e0:	e1a01002 	mov	r1, r2
  11b6e4:	e1a02003 	mov	r2, r3
  11b6e8:	e1a03001 	mov	r3, r1
  11b6ec:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b6f0:	e1a03002 	mov	r3, r2
  11b6f4:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b6f8:	e3a03000 	mov	r3, #0
  11b6fc:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b700:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b704:	e3530000 	cmp	r3, #0
  11b708:	1a000008 	bne	11b730 <pbuf_copy_partial+0x64>
  11b70c:	e3070a10 	movw	r0, #31248	; 0x7a10
  11b710:	e3400014 	movt	r0, #20
  11b714:	ebff9e7e 	bl	103114 <rt_kprintf>
  11b718:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b71c:	e3070628 	movw	r0, #30248	; 0x7628
  11b720:	e3400014 	movt	r0, #20
  11b724:	ebffbe6d 	bl	10b0e0 <sys_arch_assert>
  11b728:	e3a03000 	mov	r3, #0
  11b72c:	ea000053 	b	11b880 <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b730:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b734:	e3530000 	cmp	r3, #0
  11b738:	1a000008 	bne	11b760 <pbuf_copy_partial+0x94>
  11b73c:	e3070a30 	movw	r0, #31280	; 0x7a30
  11b740:	e3400014 	movt	r0, #20
  11b744:	ebff9e72 	bl	103114 <rt_kprintf>
  11b748:	e3a01b01 	mov	r1, #1024	; 0x400
  11b74c:	e3070628 	movw	r0, #30248	; 0x7628
  11b750:	e3400014 	movt	r0, #20
  11b754:	ebffbe61 	bl	10b0e0 <sys_arch_assert>
  11b758:	e3a03000 	mov	r3, #0
  11b75c:	ea000047 	b	11b880 <pbuf_copy_partial+0x1b4>

  left = 0;
  11b760:	e3a03000 	mov	r3, #0
  11b764:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b76c:	e3530000 	cmp	r3, #0
  11b770:	0a000002 	beq	11b780 <pbuf_copy_partial+0xb4>
  11b774:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b778:	e3530000 	cmp	r3, #0
  11b77c:	1a000001 	bne	11b788 <pbuf_copy_partial+0xbc>
    return 0;
  11b780:	e3a03000 	mov	r3, #0
  11b784:	ea00003d 	b	11b880 <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b78c:	e50b3008 	str	r3, [fp, #-8]
  11b790:	ea000033 	b	11b864 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b794:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b798:	e3530000 	cmp	r3, #0
  11b79c:	0a00000a 	beq	11b7cc <pbuf_copy_partial+0x100>
  11b7a0:	e51b3008 	ldr	r3, [fp, #-8]
  11b7a4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7a8:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b7ac:	e1520003 	cmp	r2, r3
  11b7b0:	3a000005 	bcc	11b7cc <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11b7b8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7bc:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b7c0:	e0423003 	sub	r3, r2, r3
  11b7c4:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b7c8:	ea000022 	b	11b858 <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11b7d0:	e1d320ba 	ldrh	r2, [r3, #10]
  11b7d4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7d8:	e0423003 	sub	r3, r2, r3
  11b7dc:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b7e0:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b7e4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b7e8:	e1520003 	cmp	r2, r3
  11b7ec:	9a000001 	bls	11b7f8 <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b7f0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b7f4:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b7f8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b7fc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b800:	e0820003 	add	r0, r2, r3
  11b804:	e51b3008 	ldr	r3, [fp, #-8]
  11b808:	e5932004 	ldr	r2, [r3, #4]
  11b80c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b810:	e0823003 	add	r3, r2, r3
  11b814:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b818:	e1a01003 	mov	r1, r3
  11b81c:	eb009558 	bl	140d84 <memcpy>
      copied_total += buf_copy_len;
  11b820:	e15b20be 	ldrh	r2, [fp, #-14]
  11b824:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b828:	e0823003 	add	r3, r2, r3
  11b82c:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b830:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b834:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b838:	e0823003 	add	r3, r2, r3
  11b83c:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b840:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b844:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b848:	e0423003 	sub	r3, r2, r3
  11b84c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b850:	e3a03000 	mov	r3, #0
  11b854:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b858:	e51b3008 	ldr	r3, [fp, #-8]
  11b85c:	e5933000 	ldr	r3, [r3]
  11b860:	e50b3008 	str	r3, [fp, #-8]
  11b864:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b868:	e3530000 	cmp	r3, #0
  11b86c:	0a000002 	beq	11b87c <pbuf_copy_partial+0x1b0>
  11b870:	e51b3008 	ldr	r3, [fp, #-8]
  11b874:	e3530000 	cmp	r3, #0
  11b878:	1affffc5 	bne	11b794 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b87c:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b880:	e1a00003 	mov	r0, r3
  11b884:	e24bd004 	sub	sp, fp, #4
  11b888:	e8bd8800 	pop	{fp, pc}

0011b88c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b88c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b890:	e28db000 	add	fp, sp, #0
  11b894:	e24dd01c 	sub	sp, sp, #28
  11b898:	e50b0010 	str	r0, [fp, #-16]
  11b89c:	e1a03001 	mov	r3, r1
  11b8a0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b8a4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b8a8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b8ac:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b8b0:	e51b3010 	ldr	r3, [fp, #-16]
  11b8b4:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b8b8:	ea000007 	b	11b8dc <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b8bc:	e51b300c 	ldr	r3, [fp, #-12]
  11b8c0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b8c4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b8c8:	e0423003 	sub	r3, r2, r3
  11b8cc:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b8d0:	e51b300c 	ldr	r3, [fp, #-12]
  11b8d4:	e5933000 	ldr	r3, [r3]
  11b8d8:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b8dc:	e51b300c 	ldr	r3, [fp, #-12]
  11b8e0:	e3530000 	cmp	r3, #0
  11b8e4:	0a000004 	beq	11b8fc <pbuf_skip_const+0x70>
  11b8e8:	e51b300c 	ldr	r3, [fp, #-12]
  11b8ec:	e1d330ba 	ldrh	r3, [r3, #10]
  11b8f0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b8f4:	e1520003 	cmp	r2, r3
  11b8f8:	2affffef 	bcs	11b8bc <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b900:	e3530000 	cmp	r3, #0
  11b904:	0a000002 	beq	11b914 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b90c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b910:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b914:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b918:	e1a00003 	mov	r0, r3
  11b91c:	e28bd000 	add	sp, fp, #0
  11b920:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b924:	e12fff1e 	bx	lr

0011b928 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b928:	e92d4800 	push	{fp, lr}
  11b92c:	e28db004 	add	fp, sp, #4
  11b930:	e24dd018 	sub	sp, sp, #24
  11b934:	e50b0010 	str	r0, [fp, #-16]
  11b938:	e1a03001 	mov	r3, r1
  11b93c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b940:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b944:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b948:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b94c:	e1a01003 	mov	r1, r3
  11b950:	e51b0010 	ldr	r0, [fp, #-16]
  11b954:	ebffffcc 	bl	11b88c <pbuf_skip_const>
  11b958:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b95c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b960:	e1a00003 	mov	r0, r3
  11b964:	e24bd004 	sub	sp, fp, #4
  11b968:	e8bd8800 	pop	{fp, pc}

0011b96c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b96c:	e92d4800 	push	{fp, lr}
  11b970:	e28db004 	add	fp, sp, #4
  11b974:	e24dd020 	sub	sp, sp, #32
  11b978:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b97c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b980:	e1a03002 	mov	r3, r2
  11b984:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b988:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b98c:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b990:	e3a03000 	mov	r3, #0
  11b994:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b99c:	e3530000 	cmp	r3, #0
  11b9a0:	1a000008 	bne	11b9c8 <pbuf_take+0x5c>
  11b9a4:	e3070a54 	movw	r0, #31316	; 0x7a54
  11b9a8:	e3400014 	movt	r0, #20
  11b9ac:	ebff9dd8 	bl	103114 <rt_kprintf>
  11b9b0:	e3001485 	movw	r1, #1157	; 0x485
  11b9b4:	e3070628 	movw	r0, #30248	; 0x7628
  11b9b8:	e3400014 	movt	r0, #20
  11b9bc:	ebffbdc7 	bl	10b0e0 <sys_arch_assert>
  11b9c0:	e3e0300f 	mvn	r3, #15
  11b9c4:	ea000062 	b	11bb54 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b9c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b9cc:	e3530000 	cmp	r3, #0
  11b9d0:	1a000008 	bne	11b9f8 <pbuf_take+0x8c>
  11b9d4:	e3070a6c 	movw	r0, #31340	; 0x7a6c
  11b9d8:	e3400014 	movt	r0, #20
  11b9dc:	ebff9dcc 	bl	103114 <rt_kprintf>
  11b9e0:	e3001486 	movw	r1, #1158	; 0x486
  11b9e4:	e3070628 	movw	r0, #30248	; 0x7628
  11b9e8:	e3400014 	movt	r0, #20
  11b9ec:	ebffbdbb 	bl	10b0e0 <sys_arch_assert>
  11b9f0:	e3e0300f 	mvn	r3, #15
  11b9f4:	ea000056 	b	11bb54 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11b9f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b9fc:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba00:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba04:	e1520003 	cmp	r2, r3
  11ba08:	9a000008 	bls	11ba30 <pbuf_take+0xc4>
  11ba0c:	e3070a88 	movw	r0, #31368	; 0x7a88
  11ba10:	e3400014 	movt	r0, #20
  11ba14:	ebff9dbe 	bl	103114 <rt_kprintf>
  11ba18:	e3001487 	movw	r1, #1159	; 0x487
  11ba1c:	e3070628 	movw	r0, #30248	; 0x7628
  11ba20:	e3400014 	movt	r0, #20
  11ba24:	ebffbdad 	bl	10b0e0 <sys_arch_assert>
  11ba28:	e3e03000 	mvn	r3, #0
  11ba2c:	ea000048 	b	11bb54 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11ba30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba34:	e3530000 	cmp	r3, #0
  11ba38:	0a000007 	beq	11ba5c <pbuf_take+0xf0>
  11ba3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ba40:	e3530000 	cmp	r3, #0
  11ba44:	0a000004 	beq	11ba5c <pbuf_take+0xf0>
  11ba48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba4c:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba50:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba54:	e1520003 	cmp	r2, r3
  11ba58:	9a000001 	bls	11ba64 <pbuf_take+0xf8>
    return ERR_ARG;
  11ba5c:	e3e0300f 	mvn	r3, #15
  11ba60:	ea00003b 	b	11bb54 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11ba64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba68:	e50b3008 	str	r3, [fp, #-8]
  11ba6c:	ea000026 	b	11bb0c <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11ba70:	e51b3008 	ldr	r3, [fp, #-8]
  11ba74:	e3530000 	cmp	r3, #0
  11ba78:	1a000006 	bne	11ba98 <pbuf_take+0x12c>
  11ba7c:	e3070aa8 	movw	r0, #31400	; 0x7aa8
  11ba80:	e3400014 	movt	r0, #20
  11ba84:	ebff9da2 	bl	103114 <rt_kprintf>
  11ba88:	e300148f 	movw	r1, #1167	; 0x48f
  11ba8c:	e3070628 	movw	r0, #30248	; 0x7628
  11ba90:	e3400014 	movt	r0, #20
  11ba94:	ebffbd91 	bl	10b0e0 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11ba98:	e15b30bc 	ldrh	r3, [fp, #-12]
  11ba9c:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11baa0:	e51b3008 	ldr	r3, [fp, #-8]
  11baa4:	e1d330ba 	ldrh	r3, [r3, #10]
  11baa8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11baac:	e1520003 	cmp	r2, r3
  11bab0:	9a000002 	bls	11bac0 <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11bab4:	e51b3008 	ldr	r3, [fp, #-8]
  11bab8:	e1d330ba 	ldrh	r3, [r3, #10]
  11babc:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11bac0:	e51b3008 	ldr	r3, [fp, #-8]
  11bac4:	e5930004 	ldr	r0, [r3, #4]
  11bac8:	e15b30be 	ldrh	r3, [fp, #-14]
  11bacc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11bad0:	e0823003 	add	r3, r2, r3
  11bad4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bad8:	e1a01003 	mov	r1, r3
  11badc:	eb0094a8 	bl	140d84 <memcpy>
    total_copy_len -= buf_copy_len;
  11bae0:	e15b20bc 	ldrh	r2, [fp, #-12]
  11bae4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bae8:	e0423003 	sub	r3, r2, r3
  11baec:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11baf0:	e15b20be 	ldrh	r2, [fp, #-14]
  11baf4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11baf8:	e0823003 	add	r3, r2, r3
  11bafc:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11bb00:	e51b3008 	ldr	r3, [fp, #-8]
  11bb04:	e5933000 	ldr	r3, [r3]
  11bb08:	e50b3008 	str	r3, [fp, #-8]
  11bb0c:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bb10:	e3530000 	cmp	r3, #0
  11bb14:	1affffd5 	bne	11ba70 <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11bb18:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bb1c:	e3530000 	cmp	r3, #0
  11bb20:	1a000003 	bne	11bb34 <pbuf_take+0x1c8>
  11bb24:	e15b20be 	ldrh	r2, [fp, #-14]
  11bb28:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bb2c:	e1520003 	cmp	r2, r3
  11bb30:	0a000006 	beq	11bb50 <pbuf_take+0x1e4>
  11bb34:	e3070ac0 	movw	r0, #31424	; 0x7ac0
  11bb38:	e3400014 	movt	r0, #20
  11bb3c:	ebff9d74 	bl	103114 <rt_kprintf>
  11bb40:	e300149a 	movw	r1, #1178	; 0x49a
  11bb44:	e3070628 	movw	r0, #30248	; 0x7628
  11bb48:	e3400014 	movt	r0, #20
  11bb4c:	ebffbd63 	bl	10b0e0 <sys_arch_assert>
  return ERR_OK;
  11bb50:	e3a03000 	mov	r3, #0
}
  11bb54:	e1a00003 	mov	r0, r3
  11bb58:	e24bd004 	sub	sp, fp, #4
  11bb5c:	e8bd8800 	pop	{fp, pc}

0011bb60 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11bb60:	e92d4800 	push	{fp, lr}
  11bb64:	e28db004 	add	fp, sp, #4
  11bb68:	e24dd020 	sub	sp, sp, #32
  11bb6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb70:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11bb74:	e1a01002 	mov	r1, r2
  11bb78:	e1a02003 	mov	r2, r3
  11bb7c:	e1a03001 	mov	r3, r1
  11bb80:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11bb84:	e1a03002 	mov	r3, r2
  11bb88:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11bb8c:	e24b2014 	sub	r2, fp, #20
  11bb90:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11bb94:	e1a01003 	mov	r1, r3
  11bb98:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11bb9c:	ebffff61 	bl	11b928 <pbuf_skip>
  11bba0:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11bba4:	e51b3008 	ldr	r3, [fp, #-8]
  11bba8:	e3530000 	cmp	r3, #0
  11bbac:	0a000033 	beq	11bc80 <pbuf_take_at+0x120>
  11bbb0:	e51b3008 	ldr	r3, [fp, #-8]
  11bbb4:	e1d330b8 	ldrh	r3, [r3, #8]
  11bbb8:	e1a02003 	mov	r2, r3
  11bbbc:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bbc0:	e1a01003 	mov	r1, r3
  11bbc4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bbc8:	e0813003 	add	r3, r1, r3
  11bbcc:	e1520003 	cmp	r2, r3
  11bbd0:	ba00002a 	blt	11bc80 <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11bbd4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bbd8:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11bbdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11bbe0:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11bbe4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11bbe8:	e51b3008 	ldr	r3, [fp, #-8]
  11bbec:	e1d330ba 	ldrh	r3, [r3, #10]
  11bbf0:	e1a01003 	mov	r1, r3
  11bbf4:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bbf8:	e0413003 	sub	r3, r1, r3
  11bbfc:	e1520003 	cmp	r2, r3
  11bc00:	b1a03002 	movlt	r3, r2
  11bc04:	a1a03003 	movge	r3, r3
  11bc08:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11bc0c:	e51b3008 	ldr	r3, [fp, #-8]
  11bc10:	e5933004 	ldr	r3, [r3, #4]
  11bc14:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11bc18:	e0833002 	add	r3, r3, r2
  11bc1c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11bc20:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11bc24:	e1a00003 	mov	r0, r3
  11bc28:	eb009455 	bl	140d84 <memcpy>
    remaining_len -= first_copy_len;
  11bc2c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc30:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc34:	e0423003 	sub	r3, r2, r3
  11bc38:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11bc3c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc40:	e51b2010 	ldr	r2, [fp, #-16]
  11bc44:	e0823003 	add	r3, r2, r3
  11bc48:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11bc4c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bc50:	e3530000 	cmp	r3, #0
  11bc54:	0a000007 	beq	11bc78 <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11bc58:	e51b3008 	ldr	r3, [fp, #-8]
  11bc5c:	e5933000 	ldr	r3, [r3]
  11bc60:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc64:	e51b1010 	ldr	r1, [fp, #-16]
  11bc68:	e1a00003 	mov	r0, r3
  11bc6c:	ebffff3e 	bl	11b96c <pbuf_take>
  11bc70:	e1a03000 	mov	r3, r0
  11bc74:	ea000002 	b	11bc84 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11bc78:	e3a03000 	mov	r3, #0
  11bc7c:	ea000000 	b	11bc84 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11bc80:	e3e03000 	mvn	r3, #0
}
  11bc84:	e1a00003 	mov	r0, r3
  11bc88:	e24bd004 	sub	sp, fp, #4
  11bc8c:	e8bd8800 	pop	{fp, pc}

0011bc90 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11bc90:	e92d4800 	push	{fp, lr}
  11bc94:	e28db004 	add	fp, sp, #4
  11bc98:	e24dd010 	sub	sp, sp, #16
  11bc9c:	e50b0010 	str	r0, [fp, #-16]
  11bca0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11bca4:	e51b3010 	ldr	r3, [fp, #-16]
  11bca8:	e5933000 	ldr	r3, [r3]
  11bcac:	e3530000 	cmp	r3, #0
  11bcb0:	1a000001 	bne	11bcbc <pbuf_coalesce+0x2c>
    return p;
  11bcb4:	e51b3010 	ldr	r3, [fp, #-16]
  11bcb8:	ea00001d 	b	11bd34 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11bcbc:	e51b3010 	ldr	r3, [fp, #-16]
  11bcc0:	e1d330b8 	ldrh	r3, [r3, #8]
  11bcc4:	e3a02000 	mov	r2, #0
  11bcc8:	e1a01003 	mov	r1, r3
  11bccc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11bcd0:	ebfff96b 	bl	11a284 <pbuf_alloc>
  11bcd4:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11bcd8:	e51b3008 	ldr	r3, [fp, #-8]
  11bcdc:	e3530000 	cmp	r3, #0
  11bce0:	1a000001 	bne	11bcec <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11bce4:	e51b3010 	ldr	r3, [fp, #-16]
  11bce8:	ea000011 	b	11bd34 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11bcec:	e51b1010 	ldr	r1, [fp, #-16]
  11bcf0:	e51b0008 	ldr	r0, [fp, #-8]
  11bcf4:	ebfffdbe 	bl	11b3f4 <pbuf_copy>
  11bcf8:	e1a03000 	mov	r3, r0
  11bcfc:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11bd00:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11bd04:	e3530000 	cmp	r3, #0
  11bd08:	0a000006 	beq	11bd28 <pbuf_coalesce+0x98>
  11bd0c:	e3070ad8 	movw	r0, #31448	; 0x7ad8
  11bd10:	e3400014 	movt	r0, #20
  11bd14:	ebff9cfe 	bl	103114 <rt_kprintf>
  11bd18:	e30014dc 	movw	r1, #1244	; 0x4dc
  11bd1c:	e3070628 	movw	r0, #30248	; 0x7628
  11bd20:	e3400014 	movt	r0, #20
  11bd24:	ebffbced 	bl	10b0e0 <sys_arch_assert>
  pbuf_free(p);
  11bd28:	e51b0010 	ldr	r0, [fp, #-16]
  11bd2c:	ebfffc5b 	bl	11aea0 <pbuf_free>
  return q;
  11bd30:	e51b3008 	ldr	r3, [fp, #-8]
}
  11bd34:	e1a00003 	mov	r0, r3
  11bd38:	e24bd004 	sub	sp, fp, #4
  11bd3c:	e8bd8800 	pop	{fp, pc}

0011bd40 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11bd40:	e92d4800 	push	{fp, lr}
  11bd44:	e28db004 	add	fp, sp, #4
  11bd48:	e24dd010 	sub	sp, sp, #16
  11bd4c:	e50b0010 	str	r0, [fp, #-16]
  11bd50:	e1a03001 	mov	r3, r1
  11bd54:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11bd58:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bd5c:	e1a01003 	mov	r1, r3
  11bd60:	e51b0010 	ldr	r0, [fp, #-16]
  11bd64:	eb00000a 	bl	11bd94 <pbuf_try_get_at>
  11bd68:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11bd6c:	e51b3008 	ldr	r3, [fp, #-8]
  11bd70:	e3530000 	cmp	r3, #0
  11bd74:	ba000002 	blt	11bd84 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11bd78:	e51b3008 	ldr	r3, [fp, #-8]
  11bd7c:	e6ef3073 	uxtb	r3, r3
  11bd80:	ea000000 	b	11bd88 <pbuf_get_at+0x48>
  }
  return 0;
  11bd84:	e3a03000 	mov	r3, #0
}
  11bd88:	e1a00003 	mov	r0, r3
  11bd8c:	e24bd004 	sub	sp, fp, #4
  11bd90:	e8bd8800 	pop	{fp, pc}

0011bd94 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11bd94:	e92d4800 	push	{fp, lr}
  11bd98:	e28db004 	add	fp, sp, #4
  11bd9c:	e24dd010 	sub	sp, sp, #16
  11bda0:	e50b0010 	str	r0, [fp, #-16]
  11bda4:	e1a03001 	mov	r3, r1
  11bda8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11bdac:	e24b200a 	sub	r2, fp, #10
  11bdb0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bdb4:	e1a01003 	mov	r1, r3
  11bdb8:	e51b0010 	ldr	r0, [fp, #-16]
  11bdbc:	ebfffeb2 	bl	11b88c <pbuf_skip_const>
  11bdc0:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bdc4:	e51b3008 	ldr	r3, [fp, #-8]
  11bdc8:	e3530000 	cmp	r3, #0
  11bdcc:	0a00000a 	beq	11bdfc <pbuf_try_get_at+0x68>
  11bdd0:	e51b3008 	ldr	r3, [fp, #-8]
  11bdd4:	e1d320ba 	ldrh	r2, [r3, #10]
  11bdd8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bddc:	e1520003 	cmp	r2, r3
  11bde0:	9a000005 	bls	11bdfc <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11bde4:	e51b3008 	ldr	r3, [fp, #-8]
  11bde8:	e5933004 	ldr	r3, [r3, #4]
  11bdec:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bdf0:	e0833002 	add	r3, r3, r2
  11bdf4:	e5d33000 	ldrb	r3, [r3]
  11bdf8:	ea000000 	b	11be00 <pbuf_try_get_at+0x6c>
  }
  return -1;
  11bdfc:	e3e03000 	mvn	r3, #0
}
  11be00:	e1a00003 	mov	r0, r3
  11be04:	e24bd004 	sub	sp, fp, #4
  11be08:	e8bd8800 	pop	{fp, pc}

0011be0c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11be0c:	e92d4800 	push	{fp, lr}
  11be10:	e28db004 	add	fp, sp, #4
  11be14:	e24dd010 	sub	sp, sp, #16
  11be18:	e50b0010 	str	r0, [fp, #-16]
  11be1c:	e1a03001 	mov	r3, r1
  11be20:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11be24:	e1a03002 	mov	r3, r2
  11be28:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11be2c:	e24b200a 	sub	r2, fp, #10
  11be30:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11be34:	e1a01003 	mov	r1, r3
  11be38:	e51b0010 	ldr	r0, [fp, #-16]
  11be3c:	ebfffeb9 	bl	11b928 <pbuf_skip>
  11be40:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11be44:	e51b3008 	ldr	r3, [fp, #-8]
  11be48:	e3530000 	cmp	r3, #0
  11be4c:	0a00000a 	beq	11be7c <pbuf_put_at+0x70>
  11be50:	e51b3008 	ldr	r3, [fp, #-8]
  11be54:	e1d320ba 	ldrh	r2, [r3, #10]
  11be58:	e15b30ba 	ldrh	r3, [fp, #-10]
  11be5c:	e1520003 	cmp	r2, r3
  11be60:	9a000005 	bls	11be7c <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11be64:	e51b3008 	ldr	r3, [fp, #-8]
  11be68:	e5933004 	ldr	r3, [r3, #4]
  11be6c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be70:	e0833002 	add	r3, r3, r2
  11be74:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11be78:	e5c32000 	strb	r2, [r3]
  }
}
  11be7c:	e320f000 	nop	{0}
  11be80:	e24bd004 	sub	sp, fp, #4
  11be84:	e8bd8800 	pop	{fp, pc}

0011be88 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11be88:	e92d4800 	push	{fp, lr}
  11be8c:	e28db004 	add	fp, sp, #4
  11be90:	e24dd020 	sub	sp, sp, #32
  11be94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11be98:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11be9c:	e1a02003 	mov	r2, r3
  11bea0:	e1a03001 	mov	r3, r1
  11bea4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11bea8:	e1a03002 	mov	r3, r2
  11beac:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11beb0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11beb4:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11beb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bebc:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11bec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bec4:	e1d330b8 	ldrh	r3, [r3, #8]
  11bec8:	e1a01003 	mov	r1, r3
  11becc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11bed0:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bed4:	e0823003 	add	r3, r2, r3
  11bed8:	e1510003 	cmp	r1, r3
  11bedc:	aa000009 	bge	11bf08 <pbuf_memcmp+0x80>
    return 0xffff;
  11bee0:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bee4:	ea000030 	b	11bfac <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bee8:	e51b300c 	ldr	r3, [fp, #-12]
  11beec:	e1d330ba 	ldrh	r3, [r3, #10]
  11bef0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bef4:	e0423003 	sub	r3, r2, r3
  11bef8:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11befc:	e51b300c 	ldr	r3, [fp, #-12]
  11bf00:	e5933000 	ldr	r3, [r3]
  11bf04:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bf08:	e51b300c 	ldr	r3, [fp, #-12]
  11bf0c:	e3530000 	cmp	r3, #0
  11bf10:	0a000004 	beq	11bf28 <pbuf_memcmp+0xa0>
  11bf14:	e51b300c 	ldr	r3, [fp, #-12]
  11bf18:	e1d330ba 	ldrh	r3, [r3, #10]
  11bf1c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf20:	e1520003 	cmp	r2, r3
  11bf24:	2affffef 	bcs	11bee8 <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11bf28:	e3a03000 	mov	r3, #0
  11bf2c:	e14b30be 	strh	r3, [fp, #-14]
  11bf30:	ea000018 	b	11bf98 <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bf34:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf38:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf3c:	e0823003 	add	r3, r2, r3
  11bf40:	e6ff3073 	uxth	r3, r3
  11bf44:	e1a01003 	mov	r1, r3
  11bf48:	e51b000c 	ldr	r0, [fp, #-12]
  11bf4c:	ebffff7b 	bl	11bd40 <pbuf_get_at>
  11bf50:	e1a03000 	mov	r3, r0
  11bf54:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bf58:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bf60:	e0823003 	add	r3, r2, r3
  11bf64:	e5d33000 	ldrb	r3, [r3]
  11bf68:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bf6c:	e55b200f 	ldrb	r2, [fp, #-15]
  11bf70:	e55b3010 	ldrb	r3, [fp, #-16]
  11bf74:	e1520003 	cmp	r2, r3
  11bf78:	0a000003 	beq	11bf8c <pbuf_memcmp+0x104>
      return i+1;
  11bf7c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf80:	e2833001 	add	r3, r3, #1
  11bf84:	e6ff3073 	uxth	r3, r3
  11bf88:	ea000007 	b	11bfac <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bf8c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf90:	e2833001 	add	r3, r3, #1
  11bf94:	e14b30be 	strh	r3, [fp, #-14]
  11bf98:	e15b20be 	ldrh	r2, [fp, #-14]
  11bf9c:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bfa0:	e1520003 	cmp	r2, r3
  11bfa4:	3affffe2 	bcc	11bf34 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bfa8:	e3a03000 	mov	r3, #0
}
  11bfac:	e1a00003 	mov	r0, r3
  11bfb0:	e24bd004 	sub	sp, fp, #4
  11bfb4:	e8bd8800 	pop	{fp, pc}

0011bfb8 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bfb8:	e92d4800 	push	{fp, lr}
  11bfbc:	e28db004 	add	fp, sp, #4
  11bfc0:	e24dd018 	sub	sp, sp, #24
  11bfc4:	e50b0010 	str	r0, [fp, #-16]
  11bfc8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bfcc:	e1a01002 	mov	r1, r2
  11bfd0:	e1a02003 	mov	r2, r3
  11bfd4:	e1a03001 	mov	r3, r1
  11bfd8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bfdc:	e1a03002 	mov	r3, r2
  11bfe0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11bfe4:	e51b3010 	ldr	r3, [fp, #-16]
  11bfe8:	e1d320b8 	ldrh	r2, [r3, #8]
  11bfec:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bff0:	e0423003 	sub	r3, r2, r3
  11bff4:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11bff8:	e51b3010 	ldr	r3, [fp, #-16]
  11bffc:	e1d330b8 	ldrh	r3, [r3, #8]
  11c000:	e1a01003 	mov	r1, r3
  11c004:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11c008:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c00c:	e0823003 	add	r3, r2, r3
  11c010:	e1510003 	cmp	r1, r3
  11c014:	ba000015 	blt	11c070 <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11c018:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c01c:	e14b30b6 	strh	r3, [fp, #-6]
  11c020:	ea00000e 	b	11c060 <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11c024:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11c028:	e15b10b6 	ldrh	r1, [fp, #-6]
  11c02c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11c030:	e51b0010 	ldr	r0, [fp, #-16]
  11c034:	ebffff93 	bl	11be88 <pbuf_memcmp>
  11c038:	e1a03000 	mov	r3, r0
  11c03c:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11c040:	e15b30ba 	ldrh	r3, [fp, #-10]
  11c044:	e3530000 	cmp	r3, #0
  11c048:	1a000001 	bne	11c054 <pbuf_memfind+0x9c>
        return i;
  11c04c:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c050:	ea000007 	b	11c074 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11c054:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c058:	e2833001 	add	r3, r3, #1
  11c05c:	e14b30b6 	strh	r3, [fp, #-6]
  11c060:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c064:	e15b30b8 	ldrh	r3, [fp, #-8]
  11c068:	e1520003 	cmp	r2, r3
  11c06c:	9affffec 	bls	11c024 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11c070:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11c074:	e1a00003 	mov	r0, r3
  11c078:	e24bd004 	sub	sp, fp, #4
  11c07c:	e8bd8800 	pop	{fp, pc}

0011c080 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11c080:	e92d4800 	push	{fp, lr}
  11c084:	e28db004 	add	fp, sp, #4
  11c088:	e24dd010 	sub	sp, sp, #16
  11c08c:	e50b0010 	str	r0, [fp, #-16]
  11c090:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11c094:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c098:	e3530000 	cmp	r3, #0
  11c09c:	0a000008 	beq	11c0c4 <pbuf_strstr+0x44>
  11c0a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c0a4:	e5d33000 	ldrb	r3, [r3]
  11c0a8:	e3530000 	cmp	r3, #0
  11c0ac:	0a000004 	beq	11c0c4 <pbuf_strstr+0x44>
  11c0b0:	e51b3010 	ldr	r3, [fp, #-16]
  11c0b4:	e1d330b8 	ldrh	r3, [r3, #8]
  11c0b8:	e30f2fff 	movw	r2, #65535	; 0xffff
  11c0bc:	e1530002 	cmp	r3, r2
  11c0c0:	1a000001 	bne	11c0cc <pbuf_strstr+0x4c>
    return 0xFFFF;
  11c0c4:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c0c8:	ea00000f 	b	11c10c <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11c0cc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11c0d0:	eb0094f4 	bl	1414a8 <strlen>
  11c0d4:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11c0d8:	e51b3008 	ldr	r3, [fp, #-8]
  11c0dc:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11c0e0:	e1530002 	cmp	r3, r2
  11c0e4:	9a000001 	bls	11c0f0 <pbuf_strstr+0x70>
    return 0xFFFF;
  11c0e8:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c0ec:	ea000006 	b	11c10c <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11c0f0:	e51b3008 	ldr	r3, [fp, #-8]
  11c0f4:	e6ff2073 	uxth	r2, r3
  11c0f8:	e3a03000 	mov	r3, #0
  11c0fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c100:	e51b0010 	ldr	r0, [fp, #-16]
  11c104:	ebffffab 	bl	11bfb8 <pbuf_memfind>
  11c108:	e1a03000 	mov	r3, r0
}
  11c10c:	e1a00003 	mov	r0, r3
  11c110:	e24bd004 	sub	sp, fp, #4
  11c114:	e8bd8800 	pop	{fp, pc}

0011c118 <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11c118:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c11c:	e28db000 	add	fp, sp, #0
  11c120:	e24dd00c 	sub	sp, sp, #12
  11c124:	e50b0008 	str	r0, [fp, #-8]
  11c128:	e1a03001 	mov	r3, r1
  11c12c:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11c130:	e55b3009 	ldrb	r3, [fp, #-9]
  11c134:	e3530000 	cmp	r3, #0
  11c138:	0a00000d 	beq	11c174 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11c13c:	e51b3008 	ldr	r3, [fp, #-8]
  11c140:	e5d33008 	ldrb	r3, [r3, #8]
  11c144:	e2033020 	and	r3, r3, #32
  11c148:	e3530000 	cmp	r3, #0
  11c14c:	0a000018 	beq	11c1b4 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11c150:	e51b3008 	ldr	r3, [fp, #-8]
  11c154:	e3530000 	cmp	r3, #0
  11c158:	0a000003 	beq	11c16c <raw_input_match+0x54>
  11c15c:	e51b3008 	ldr	r3, [fp, #-8]
  11c160:	e5933000 	ldr	r3, [r3]
  11c164:	e3530000 	cmp	r3, #0
  11c168:	1a000011 	bne	11c1b4 <raw_input_match+0x9c>
          return 1;
  11c16c:	e3a03001 	mov	r3, #1
  11c170:	ea000010 	b	11c1b8 <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11c174:	e51b3008 	ldr	r3, [fp, #-8]
  11c178:	e3530000 	cmp	r3, #0
  11c17c:	0a00000a 	beq	11c1ac <raw_input_match+0x94>
  11c180:	e51b3008 	ldr	r3, [fp, #-8]
  11c184:	e5933000 	ldr	r3, [r3]
  11c188:	e3530000 	cmp	r3, #0
  11c18c:	0a000006 	beq	11c1ac <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11c190:	e51b3008 	ldr	r3, [fp, #-8]
  11c194:	e5932000 	ldr	r2, [r3]
  11c198:	e30f3618 	movw	r3, #63000	; 0xf618
  11c19c:	e3403014 	movt	r3, #20
  11c1a0:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11c1a4:	e1520003 	cmp	r2, r3
  11c1a8:	1a000001 	bne	11c1b4 <raw_input_match+0x9c>
      return 1;
  11c1ac:	e3a03001 	mov	r3, #1
  11c1b0:	ea000000 	b	11c1b8 <raw_input_match+0xa0>
    }
  }

  return 0;
  11c1b4:	e3a03000 	mov	r3, #0
}
  11c1b8:	e1a00003 	mov	r0, r3
  11c1bc:	e28bd000 	add	sp, fp, #0
  11c1c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c1c4:	e12fff1e 	bx	lr

0011c1c8 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11c1c8:	e92d4810 	push	{r4, fp, lr}
  11c1cc:	e28db008 	add	fp, sp, #8
  11c1d0:	e24dd01c 	sub	sp, sp, #28
  11c1d4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c1d8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11c1dc:	e3a03000 	mov	r3, #0
  11c1e0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11c1e4:	e30f3618 	movw	r3, #63000	; 0xf618
  11c1e8:	e3403014 	movt	r3, #20
  11c1ec:	e5932014 	ldr	r2, [r3, #20]
  11c1f0:	e30f3618 	movw	r3, #63000	; 0xf618
  11c1f4:	e3403014 	movt	r3, #20
  11c1f8:	e5933000 	ldr	r3, [r3]
  11c1fc:	e1a01003 	mov	r1, r3
  11c200:	e1a00002 	mov	r0, r2
  11c204:	eb0058bd 	bl	132500 <ip4_addr_isbroadcast_u32>
  11c208:	e1a03000 	mov	r3, r0
  11c20c:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11c210:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c214:	e5933004 	ldr	r3, [r3, #4]
  11c218:	e5d33009 	ldrb	r3, [r3, #9]
  11c21c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11c220:	e3a03000 	mov	r3, #0
  11c224:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11c228:	e30e3244 	movw	r3, #57924	; 0xe244
  11c22c:	e3403014 	movt	r3, #20
  11c230:	e5933000 	ldr	r3, [r3]
  11c234:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11c238:	ea000046 	b	11c358 <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11c23c:	e51b3010 	ldr	r3, [fp, #-16]
  11c240:	e5d33010 	ldrb	r3, [r3, #16]
  11c244:	e1a02003 	mov	r2, r3
  11c248:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11c24c:	e1520003 	cmp	r2, r3
  11c250:	1a00003b 	bne	11c344 <raw_input+0x17c>
  11c254:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11c258:	e1a01003 	mov	r1, r3
  11c25c:	e51b0010 	ldr	r0, [fp, #-16]
  11c260:	ebffffac 	bl	11c118 <raw_input_match>
  11c264:	e1a03000 	mov	r3, r0
  11c268:	e3530000 	cmp	r3, #0
  11c26c:	0a000034 	beq	11c344 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11c270:	e51b3010 	ldr	r3, [fp, #-16]
  11c274:	e5933014 	ldr	r3, [r3, #20]
  11c278:	e3530000 	cmp	r3, #0
  11c27c:	0a000030 	beq	11c344 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11c280:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c284:	e5933004 	ldr	r3, [r3, #4]
  11c288:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11c28c:	e51b3010 	ldr	r3, [fp, #-16]
  11c290:	e5934014 	ldr	r4, [r3, #20]
  11c294:	e51b3010 	ldr	r3, [fp, #-16]
  11c298:	e5930018 	ldr	r0, [r3, #24]
  11c29c:	e59f30dc 	ldr	r3, [pc, #220]	; 11c380 <raw_input+0x1b8>
  11c2a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c2a4:	e51b1010 	ldr	r1, [fp, #-16]
  11c2a8:	e12fff34 	blx	r4
  11c2ac:	e1a03000 	mov	r3, r0
  11c2b0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11c2b4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c2b8:	e3530000 	cmp	r3, #0
  11c2bc:	0a000014 	beq	11c314 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11c2c0:	e3a03000 	mov	r3, #0
  11c2c4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11c2c8:	e3a03001 	mov	r3, #1
  11c2cc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11c2d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2d4:	e3530000 	cmp	r3, #0
  11c2d8:	0a000019 	beq	11c344 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11c2dc:	e51b3010 	ldr	r3, [fp, #-16]
  11c2e0:	e593200c 	ldr	r2, [r3, #12]
  11c2e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2e8:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11c2ec:	e30e3244 	movw	r3, #57924	; 0xe244
  11c2f0:	e3403014 	movt	r3, #20
  11c2f4:	e5932000 	ldr	r2, [r3]
  11c2f8:	e51b3010 	ldr	r3, [fp, #-16]
  11c2fc:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11c300:	e30e3244 	movw	r3, #57924	; 0xe244
  11c304:	e3403014 	movt	r3, #20
  11c308:	e51b2010 	ldr	r2, [fp, #-16]
  11c30c:	e5832000 	str	r2, [r3]
  11c310:	ea00000b 	b	11c344 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11c314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c318:	e5933004 	ldr	r3, [r3, #4]
  11c31c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11c320:	e1520003 	cmp	r2, r3
  11c324:	0a000006 	beq	11c344 <raw_input+0x17c>
  11c328:	e3070aec 	movw	r0, #31468	; 0x7aec
  11c32c:	e3400014 	movt	r0, #20
  11c330:	ebff9b77 	bl	103114 <rt_kprintf>
  11c334:	e3a010b6 	mov	r1, #182	; 0xb6
  11c338:	e3070b38 	movw	r0, #31544	; 0x7b38
  11c33c:	e3400014 	movt	r0, #20
  11c340:	ebffbb66 	bl	10b0e0 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11c344:	e51b3010 	ldr	r3, [fp, #-16]
  11c348:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11c34c:	e51b3010 	ldr	r3, [fp, #-16]
  11c350:	e593300c 	ldr	r3, [r3, #12]
  11c354:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c358:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c35c:	e3530000 	cmp	r3, #0
  11c360:	1a000002 	bne	11c370 <raw_input+0x1a8>
  11c364:	e51b3010 	ldr	r3, [fp, #-16]
  11c368:	e3530000 	cmp	r3, #0
  11c36c:	1affffb2 	bne	11c23c <raw_input+0x74>
  }
  return eaten;
  11c370:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c374:	e1a00003 	mov	r0, r3
  11c378:	e24bd008 	sub	sp, fp, #8
  11c37c:	e8bd8810 	pop	{r4, fp, pc}
  11c380:	0014f628 	.word	0x0014f628

0011c384 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c384:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c388:	e28db000 	add	fp, sp, #0
  11c38c:	e24dd00c 	sub	sp, sp, #12
  11c390:	e50b0008 	str	r0, [fp, #-8]
  11c394:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c398:	e51b3008 	ldr	r3, [fp, #-8]
  11c39c:	e3530000 	cmp	r3, #0
  11c3a0:	0a000002 	beq	11c3b0 <raw_bind+0x2c>
  11c3a4:	e51b300c 	ldr	r3, [fp, #-12]
  11c3a8:	e3530000 	cmp	r3, #0
  11c3ac:	1a000001 	bne	11c3b8 <raw_bind+0x34>
    return ERR_VAL;
  11c3b0:	e3e03005 	mvn	r3, #5
  11c3b4:	ea000009 	b	11c3e0 <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c3b8:	e51b300c 	ldr	r3, [fp, #-12]
  11c3bc:	e3530000 	cmp	r3, #0
  11c3c0:	0a000002 	beq	11c3d0 <raw_bind+0x4c>
  11c3c4:	e51b300c 	ldr	r3, [fp, #-12]
  11c3c8:	e5933000 	ldr	r3, [r3]
  11c3cc:	ea000000 	b	11c3d4 <raw_bind+0x50>
  11c3d0:	e3a03000 	mov	r3, #0
  11c3d4:	e51b2008 	ldr	r2, [fp, #-8]
  11c3d8:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c3dc:	e3a03000 	mov	r3, #0
}
  11c3e0:	e1a00003 	mov	r0, r3
  11c3e4:	e28bd000 	add	sp, fp, #0
  11c3e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c3ec:	e12fff1e 	bx	lr

0011c3f0 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c3f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c3f4:	e28db000 	add	fp, sp, #0
  11c3f8:	e24dd00c 	sub	sp, sp, #12
  11c3fc:	e50b0008 	str	r0, [fp, #-8]
  11c400:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c404:	e51b3008 	ldr	r3, [fp, #-8]
  11c408:	e3530000 	cmp	r3, #0
  11c40c:	0a000002 	beq	11c41c <raw_connect+0x2c>
  11c410:	e51b300c 	ldr	r3, [fp, #-12]
  11c414:	e3530000 	cmp	r3, #0
  11c418:	1a000001 	bne	11c424 <raw_connect+0x34>
    return ERR_VAL;
  11c41c:	e3e03005 	mvn	r3, #5
  11c420:	ea000009 	b	11c44c <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c424:	e51b300c 	ldr	r3, [fp, #-12]
  11c428:	e3530000 	cmp	r3, #0
  11c42c:	0a000002 	beq	11c43c <raw_connect+0x4c>
  11c430:	e51b300c 	ldr	r3, [fp, #-12]
  11c434:	e5933000 	ldr	r3, [r3]
  11c438:	ea000000 	b	11c440 <raw_connect+0x50>
  11c43c:	e3a03000 	mov	r3, #0
  11c440:	e51b2008 	ldr	r2, [fp, #-8]
  11c444:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c448:	e3a03000 	mov	r3, #0
}
  11c44c:	e1a00003 	mov	r0, r3
  11c450:	e28bd000 	add	sp, fp, #0
  11c454:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c458:	e12fff1e 	bx	lr

0011c45c <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c45c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c460:	e28db000 	add	fp, sp, #0
  11c464:	e24dd014 	sub	sp, sp, #20
  11c468:	e50b0008 	str	r0, [fp, #-8]
  11c46c:	e50b100c 	str	r1, [fp, #-12]
  11c470:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c474:	e51b3008 	ldr	r3, [fp, #-8]
  11c478:	e51b200c 	ldr	r2, [fp, #-12]
  11c47c:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c480:	e51b3008 	ldr	r3, [fp, #-8]
  11c484:	e51b2010 	ldr	r2, [fp, #-16]
  11c488:	e5832018 	str	r2, [r3, #24]
}
  11c48c:	e320f000 	nop	{0}
  11c490:	e28bd000 	add	sp, fp, #0
  11c494:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c498:	e12fff1e 	bx	lr

0011c49c <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c49c:	e92d4800 	push	{fp, lr}
  11c4a0:	e28db004 	add	fp, sp, #4
  11c4a4:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c4a8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c4ac:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c4b0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c4b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c4b8:	e3530000 	cmp	r3, #0
  11c4bc:	0a000002 	beq	11c4cc <raw_sendto+0x30>
  11c4c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c4c4:	e3530000 	cmp	r3, #0
  11c4c8:	1a000001 	bne	11c4d4 <raw_sendto+0x38>
    return ERR_VAL;
  11c4cc:	e3e03005 	mvn	r3, #5
  11c4d0:	ea00007c 	b	11c6c8 <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c4d4:	e3a03014 	mov	r3, #20
  11c4d8:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c4dc:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c4e0:	e1a01003 	mov	r1, r3
  11c4e4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c4e8:	ebfffa4e 	bl	11ae28 <pbuf_header>
  11c4ec:	e1a03000 	mov	r3, r0
  11c4f0:	e3530000 	cmp	r3, #0
  11c4f4:	0a000011 	beq	11c540 <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c4f8:	e3a02000 	mov	r2, #0
  11c4fc:	e3a01000 	mov	r1, #0
  11c500:	e3a00001 	mov	r0, #1
  11c504:	ebfff75e 	bl	11a284 <pbuf_alloc>
  11c508:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c50c:	e51b300c 	ldr	r3, [fp, #-12]
  11c510:	e3530000 	cmp	r3, #0
  11c514:	1a000001 	bne	11c520 <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c518:	e3e03000 	mvn	r3, #0
  11c51c:	ea000069 	b	11c6c8 <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c520:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c524:	e1d330b8 	ldrh	r3, [r3, #8]
  11c528:	e3530000 	cmp	r3, #0
  11c52c:	0a000018 	beq	11c594 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c530:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c534:	e51b000c 	ldr	r0, [fp, #-12]
  11c538:	ebfffb59 	bl	11b2a4 <pbuf_chain>
  11c53c:	ea000014 	b	11c594 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c540:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c544:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c548:	e15b30be 	ldrh	r3, [fp, #-14]
  11c54c:	e2633000 	rsb	r3, r3, #0
  11c550:	e6ff3073 	uxth	r3, r3
  11c554:	e6bf3073 	sxth	r3, r3
  11c558:	e1a01003 	mov	r1, r3
  11c55c:	e51b000c 	ldr	r0, [fp, #-12]
  11c560:	ebfffa30 	bl	11ae28 <pbuf_header>
  11c564:	e1a03000 	mov	r3, r0
  11c568:	e3530000 	cmp	r3, #0
  11c56c:	0a000008 	beq	11c594 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c570:	e3070b64 	movw	r0, #31588	; 0x7b64
  11c574:	e3400014 	movt	r0, #20
  11c578:	ebff9ae5 	bl	103114 <rt_kprintf>
  11c57c:	e300113e 	movw	r1, #318	; 0x13e
  11c580:	e3070b38 	movw	r0, #31544	; 0x7b38
  11c584:	e3400014 	movt	r0, #20
  11c588:	ebffbad4 	bl	10b0e0 <sys_arch_assert>
      return ERR_MEM;
  11c58c:	e3e03000 	mvn	r3, #0
  11c590:	ea00004c 	b	11c6c8 <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c594:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c598:	eb0052f9 	bl	131184 <ip4_route>
  11c59c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c5a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c5a4:	e3530000 	cmp	r3, #0
  11c5a8:	1a000007 	bne	11c5cc <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c5ac:	e51b200c 	ldr	r2, [fp, #-12]
  11c5b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c5b4:	e1520003 	cmp	r2, r3
  11c5b8:	0a000001 	beq	11c5c4 <raw_sendto+0x128>
      pbuf_free(q);
  11c5bc:	e51b000c 	ldr	r0, [fp, #-12]
  11c5c0:	ebfffa36 	bl	11aea0 <pbuf_free>
    }
    return ERR_RTE;
  11c5c4:	e3e03003 	mvn	r3, #3
  11c5c8:	ea00003e 	b	11c6c8 <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c5cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c5d0:	e5d33008 	ldrb	r3, [r3, #8]
  11c5d4:	e2033020 	and	r3, r3, #32
  11c5d8:	e3530000 	cmp	r3, #0
  11c5dc:	1a00000f 	bne	11c620 <raw_sendto+0x184>
  11c5e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c5e4:	e5933000 	ldr	r3, [r3]
  11c5e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c5ec:	e1a00003 	mov	r0, r3
  11c5f0:	eb0057c2 	bl	132500 <ip4_addr_isbroadcast_u32>
  11c5f4:	e1a03000 	mov	r3, r0
  11c5f8:	e3530000 	cmp	r3, #0
  11c5fc:	0a000007 	beq	11c620 <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c600:	e51b200c 	ldr	r2, [fp, #-12]
  11c604:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c608:	e1520003 	cmp	r2, r3
  11c60c:	0a000001 	beq	11c618 <raw_sendto+0x17c>
        pbuf_free(q);
  11c610:	e51b000c 	ldr	r0, [fp, #-12]
  11c614:	ebfffa21 	bl	11aea0 <pbuf_free>
      }
      return ERR_VAL;
  11c618:	e3e03005 	mvn	r3, #5
  11c61c:	ea000029 	b	11c6c8 <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c620:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c624:	e3530000 	cmp	r3, #0
  11c628:	0a000003 	beq	11c63c <raw_sendto+0x1a0>
  11c62c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c630:	e5933000 	ldr	r3, [r3]
  11c634:	e3530000 	cmp	r3, #0
  11c638:	1a000008 	bne	11c660 <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c63c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c640:	e3530000 	cmp	r3, #0
  11c644:	0a000002 	beq	11c654 <raw_sendto+0x1b8>
  11c648:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c64c:	e2833004 	add	r3, r3, #4
  11c650:	ea000000 	b	11c658 <raw_sendto+0x1bc>
  11c654:	e3a03000 	mov	r3, #0
  11c658:	e50b3008 	str	r3, [fp, #-8]
  11c65c:	ea000001 	b	11c668 <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c660:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c664:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c668:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c66c:	e5d3000a 	ldrb	r0, [r3, #10]
  11c670:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c674:	e5d33009 	ldrb	r3, [r3, #9]
  11c678:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c67c:	e5d22010 	ldrb	r2, [r2, #16]
  11c680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c684:	e58d1008 	str	r1, [sp, #8]
  11c688:	e58d2004 	str	r2, [sp, #4]
  11c68c:	e58d3000 	str	r3, [sp]
  11c690:	e1a03000 	mov	r3, r0
  11c694:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c698:	e51b1008 	ldr	r1, [fp, #-8]
  11c69c:	e51b000c 	ldr	r0, [fp, #-12]
  11c6a0:	eb005590 	bl	131ce8 <ip4_output_if>
  11c6a4:	e1a03000 	mov	r3, r0
  11c6a8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c6ac:	e51b200c 	ldr	r2, [fp, #-12]
  11c6b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c6b4:	e1520003 	cmp	r2, r3
  11c6b8:	0a000001 	beq	11c6c4 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c6bc:	e51b000c 	ldr	r0, [fp, #-12]
  11c6c0:	ebfff9f6 	bl	11aea0 <pbuf_free>
  }
  return err;
  11c6c4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c6c8:	e1a00003 	mov	r0, r3
  11c6cc:	e24bd004 	sub	sp, fp, #4
  11c6d0:	e8bd8800 	pop	{fp, pc}

0011c6d4 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c6d4:	e92d4800 	push	{fp, lr}
  11c6d8:	e28db004 	add	fp, sp, #4
  11c6dc:	e24dd008 	sub	sp, sp, #8
  11c6e0:	e50b0008 	str	r0, [fp, #-8]
  11c6e4:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c6e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c6ec:	e2833004 	add	r3, r3, #4
  11c6f0:	e1a02003 	mov	r2, r3
  11c6f4:	e51b100c 	ldr	r1, [fp, #-12]
  11c6f8:	e51b0008 	ldr	r0, [fp, #-8]
  11c6fc:	ebffff66 	bl	11c49c <raw_sendto>
  11c700:	e1a03000 	mov	r3, r0
}
  11c704:	e1a00003 	mov	r0, r3
  11c708:	e24bd004 	sub	sp, fp, #4
  11c70c:	e8bd8800 	pop	{fp, pc}

0011c710 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c710:	e92d4800 	push	{fp, lr}
  11c714:	e28db004 	add	fp, sp, #4
  11c718:	e24dd010 	sub	sp, sp, #16
  11c71c:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c720:	e30e3244 	movw	r3, #57924	; 0xe244
  11c724:	e3403014 	movt	r3, #20
  11c728:	e5933000 	ldr	r3, [r3]
  11c72c:	e51b2010 	ldr	r2, [fp, #-16]
  11c730:	e1520003 	cmp	r2, r3
  11c734:	1a000007 	bne	11c758 <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c738:	e30e3244 	movw	r3, #57924	; 0xe244
  11c73c:	e3403014 	movt	r3, #20
  11c740:	e5933000 	ldr	r3, [r3]
  11c744:	e593200c 	ldr	r2, [r3, #12]
  11c748:	e30e3244 	movw	r3, #57924	; 0xe244
  11c74c:	e3403014 	movt	r3, #20
  11c750:	e5832000 	str	r2, [r3]
  11c754:	ea000018 	b	11c7bc <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c758:	e30e3244 	movw	r3, #57924	; 0xe244
  11c75c:	e3403014 	movt	r3, #20
  11c760:	e5933000 	ldr	r3, [r3]
  11c764:	e50b3008 	str	r3, [fp, #-8]
  11c768:	ea000010 	b	11c7b0 <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c76c:	e51b3008 	ldr	r3, [fp, #-8]
  11c770:	e593300c 	ldr	r3, [r3, #12]
  11c774:	e3530000 	cmp	r3, #0
  11c778:	0a000009 	beq	11c7a4 <raw_remove+0x94>
  11c77c:	e51b3008 	ldr	r3, [fp, #-8]
  11c780:	e593300c 	ldr	r3, [r3, #12]
  11c784:	e51b2010 	ldr	r2, [fp, #-16]
  11c788:	e1520003 	cmp	r2, r3
  11c78c:	1a000004 	bne	11c7a4 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c790:	e51b3010 	ldr	r3, [fp, #-16]
  11c794:	e593200c 	ldr	r2, [r3, #12]
  11c798:	e51b3008 	ldr	r3, [fp, #-8]
  11c79c:	e583200c 	str	r2, [r3, #12]
        break;
  11c7a0:	ea000005 	b	11c7bc <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c7a4:	e51b3008 	ldr	r3, [fp, #-8]
  11c7a8:	e593300c 	ldr	r3, [r3, #12]
  11c7ac:	e50b3008 	str	r3, [fp, #-8]
  11c7b0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7b4:	e3530000 	cmp	r3, #0
  11c7b8:	1affffeb 	bne	11c76c <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c7bc:	e51b1010 	ldr	r1, [fp, #-16]
  11c7c0:	e3a00000 	mov	r0, #0
  11c7c4:	ebfff2a7 	bl	119268 <memp_free>
}
  11c7c8:	e320f000 	nop	{0}
  11c7cc:	e24bd004 	sub	sp, fp, #4
  11c7d0:	e8bd8800 	pop	{fp, pc}

0011c7d4 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c7d4:	e92d4800 	push	{fp, lr}
  11c7d8:	e28db004 	add	fp, sp, #4
  11c7dc:	e24dd010 	sub	sp, sp, #16
  11c7e0:	e1a03000 	mov	r3, r0
  11c7e4:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c7e8:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c7ec:	e3071b38 	movw	r1, #31544	; 0x7b38
  11c7f0:	e3401014 	movt	r1, #20
  11c7f4:	e3a00000 	mov	r0, #0
  11c7f8:	ebfff232 	bl	1190c8 <memp_malloc_fn>
  11c7fc:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c800:	e51b3008 	ldr	r3, [fp, #-8]
  11c804:	e3530000 	cmp	r3, #0
  11c808:	0a000012 	beq	11c858 <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c80c:	e3a0201c 	mov	r2, #28
  11c810:	e3a01000 	mov	r1, #0
  11c814:	e51b0008 	ldr	r0, [fp, #-8]
  11c818:	eb009291 	bl	141264 <memset>
    pcb->protocol = proto;
  11c81c:	e51b3008 	ldr	r3, [fp, #-8]
  11c820:	e55b200d 	ldrb	r2, [fp, #-13]
  11c824:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c828:	e51b3008 	ldr	r3, [fp, #-8]
  11c82c:	e3e02000 	mvn	r2, #0
  11c830:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c834:	e30e3244 	movw	r3, #57924	; 0xe244
  11c838:	e3403014 	movt	r3, #20
  11c83c:	e5932000 	ldr	r2, [r3]
  11c840:	e51b3008 	ldr	r3, [fp, #-8]
  11c844:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c848:	e30e3244 	movw	r3, #57924	; 0xe244
  11c84c:	e3403014 	movt	r3, #20
  11c850:	e51b2008 	ldr	r2, [fp, #-8]
  11c854:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c858:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c85c:	e1a00003 	mov	r0, r3
  11c860:	e24bd004 	sub	sp, fp, #4
  11c864:	e8bd8800 	pop	{fp, pc}

0011c868 <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c868:	e92d4800 	push	{fp, lr}
  11c86c:	e28db004 	add	fp, sp, #4
  11c870:	e24dd010 	sub	sp, sp, #16
  11c874:	e1a03000 	mov	r3, r0
  11c878:	e1a02001 	mov	r2, r1
  11c87c:	e54b300d 	strb	r3, [fp, #-13]
  11c880:	e1a03002 	mov	r3, r2
  11c884:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c888:	e55b300e 	ldrb	r3, [fp, #-14]
  11c88c:	e1a00003 	mov	r0, r3
  11c890:	ebffffcf 	bl	11c7d4 <raw_new>
  11c894:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c898:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c89c:	e1a00003 	mov	r0, r3
  11c8a0:	e24bd004 	sub	sp, fp, #4
  11c8a4:	e8bd8800 	pop	{fp, pc}

0011c8a8 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c8a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c8ac:	e28db000 	add	fp, sp, #0
  11c8b0:	e24dd014 	sub	sp, sp, #20
  11c8b4:	e50b0010 	str	r0, [fp, #-16]
  11c8b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c8bc:	e51b3010 	ldr	r3, [fp, #-16]
  11c8c0:	e3530000 	cmp	r3, #0
  11c8c4:	0a00001f 	beq	11c948 <raw_netif_ip_addr_changed+0xa0>
  11c8c8:	e51b3010 	ldr	r3, [fp, #-16]
  11c8cc:	e5933000 	ldr	r3, [r3]
  11c8d0:	e3530000 	cmp	r3, #0
  11c8d4:	0a00001b 	beq	11c948 <raw_netif_ip_addr_changed+0xa0>
  11c8d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8dc:	e3530000 	cmp	r3, #0
  11c8e0:	0a000018 	beq	11c948 <raw_netif_ip_addr_changed+0xa0>
  11c8e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8e8:	e5933000 	ldr	r3, [r3]
  11c8ec:	e3530000 	cmp	r3, #0
  11c8f0:	0a000014 	beq	11c948 <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c8f4:	e30e3244 	movw	r3, #57924	; 0xe244
  11c8f8:	e3403014 	movt	r3, #20
  11c8fc:	e5933000 	ldr	r3, [r3]
  11c900:	e50b3008 	str	r3, [fp, #-8]
  11c904:	ea00000c 	b	11c93c <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c908:	e51b3008 	ldr	r3, [fp, #-8]
  11c90c:	e5932000 	ldr	r2, [r3]
  11c910:	e51b3010 	ldr	r3, [fp, #-16]
  11c914:	e5933000 	ldr	r3, [r3]
  11c918:	e1520003 	cmp	r2, r3
  11c91c:	1a000003 	bne	11c930 <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c920:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c924:	e5932000 	ldr	r2, [r3]
  11c928:	e51b3008 	ldr	r3, [fp, #-8]
  11c92c:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c930:	e51b3008 	ldr	r3, [fp, #-8]
  11c934:	e593300c 	ldr	r3, [r3, #12]
  11c938:	e50b3008 	str	r3, [fp, #-8]
  11c93c:	e51b3008 	ldr	r3, [fp, #-8]
  11c940:	e3530000 	cmp	r3, #0
  11c944:	1affffef 	bne	11c908 <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c948:	e320f000 	nop	{0}
  11c94c:	e28bd000 	add	sp, fp, #0
  11c950:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c954:	e12fff1e 	bx	lr

0011c958 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c958:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c95c:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c960:	e320f000 	nop	{0}
  11c964:	e28bd000 	add	sp, fp, #0
  11c968:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c96c:	e12fff1e 	bx	lr

0011c970 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c970:	e92d4800 	push	{fp, lr}
  11c974:	e28db004 	add	fp, sp, #4
  11c978:	e24dd008 	sub	sp, sp, #8
  11c97c:	e50b0008 	str	r0, [fp, #-8]
  11c980:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c984:	e51b100c 	ldr	r1, [fp, #-12]
  11c988:	e3070b8c 	movw	r0, #31628	; 0x7b8c
  11c98c:	e3400014 	movt	r0, #20
  11c990:	ebff99df 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c994:	e51b3008 	ldr	r3, [fp, #-8]
  11c998:	e1d330b0 	ldrh	r3, [r3]
  11c99c:	e1a01003 	mov	r1, r3
  11c9a0:	e3070b94 	movw	r0, #31636	; 0x7b94
  11c9a4:	e3400014 	movt	r0, #20
  11c9a8:	ebff99d9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c9ac:	e51b3008 	ldr	r3, [fp, #-8]
  11c9b0:	e1d330b2 	ldrh	r3, [r3, #2]
  11c9b4:	e1a01003 	mov	r1, r3
  11c9b8:	e3070ba0 	movw	r0, #31648	; 0x7ba0
  11c9bc:	e3400014 	movt	r0, #20
  11c9c0:	ebff99d3 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c9c4:	e51b3008 	ldr	r3, [fp, #-8]
  11c9c8:	e1d330b4 	ldrh	r3, [r3, #4]
  11c9cc:	e1a01003 	mov	r1, r3
  11c9d0:	e3070bac 	movw	r0, #31660	; 0x7bac
  11c9d4:	e3400014 	movt	r0, #20
  11c9d8:	ebff99cd 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c9dc:	e51b3008 	ldr	r3, [fp, #-8]
  11c9e0:	e1d330b6 	ldrh	r3, [r3, #6]
  11c9e4:	e1a01003 	mov	r1, r3
  11c9e8:	e3070bb8 	movw	r0, #31672	; 0x7bb8
  11c9ec:	e3400014 	movt	r0, #20
  11c9f0:	ebff99c7 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11c9f4:	e51b3008 	ldr	r3, [fp, #-8]
  11c9f8:	e1d330b8 	ldrh	r3, [r3, #8]
  11c9fc:	e1a01003 	mov	r1, r3
  11ca00:	e3070bc4 	movw	r0, #31684	; 0x7bc4
  11ca04:	e3400014 	movt	r0, #20
  11ca08:	ebff99c1 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11ca0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca10:	e1d330ba 	ldrh	r3, [r3, #10]
  11ca14:	e1a01003 	mov	r1, r3
  11ca18:	e3070bd4 	movw	r0, #31700	; 0x7bd4
  11ca1c:	e3400014 	movt	r0, #20
  11ca20:	ebff99bb 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11ca24:	e51b3008 	ldr	r3, [fp, #-8]
  11ca28:	e1d330bc 	ldrh	r3, [r3, #12]
  11ca2c:	e1a01003 	mov	r1, r3
  11ca30:	e3070be4 	movw	r0, #31716	; 0x7be4
  11ca34:	e3400014 	movt	r0, #20
  11ca38:	ebff99b5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11ca3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca40:	e1d330be 	ldrh	r3, [r3, #14]
  11ca44:	e1a01003 	mov	r1, r3
  11ca48:	e3070bf4 	movw	r0, #31732	; 0x7bf4
  11ca4c:	e3400014 	movt	r0, #20
  11ca50:	ebff99af 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11ca54:	e51b3008 	ldr	r3, [fp, #-8]
  11ca58:	e1d331b0 	ldrh	r3, [r3, #16]
  11ca5c:	e1a01003 	mov	r1, r3
  11ca60:	e3070c04 	movw	r0, #31748	; 0x7c04
  11ca64:	e3400014 	movt	r0, #20
  11ca68:	ebff99a9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11ca6c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca70:	e1d331b2 	ldrh	r3, [r3, #18]
  11ca74:	e1a01003 	mov	r1, r3
  11ca78:	e3070c14 	movw	r0, #31764	; 0x7c14
  11ca7c:	e3400014 	movt	r0, #20
  11ca80:	ebff99a3 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11ca84:	e51b3008 	ldr	r3, [fp, #-8]
  11ca88:	e1d331b4 	ldrh	r3, [r3, #20]
  11ca8c:	e1a01003 	mov	r1, r3
  11ca90:	e3070c24 	movw	r0, #31780	; 0x7c24
  11ca94:	e3400014 	movt	r0, #20
  11ca98:	ebff999d 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11ca9c:	e51b3008 	ldr	r3, [fp, #-8]
  11caa0:	e1d331b6 	ldrh	r3, [r3, #22]
  11caa4:	e1a01003 	mov	r1, r3
  11caa8:	e3070c30 	movw	r0, #31792	; 0x7c30
  11caac:	e3400014 	movt	r0, #20
  11cab0:	ebff9997 	bl	103114 <rt_kprintf>
}
  11cab4:	e320f000 	nop	{0}
  11cab8:	e24bd004 	sub	sp, fp, #4
  11cabc:	e8bd8800 	pop	{fp, pc}

0011cac0 <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11cac0:	e92d4800 	push	{fp, lr}
  11cac4:	e28db004 	add	fp, sp, #4
  11cac8:	e24dd008 	sub	sp, sp, #8
  11cacc:	e50b0008 	str	r0, [fp, #-8]
  11cad0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11cad4:	e51b100c 	ldr	r1, [fp, #-12]
  11cad8:	e3070b8c 	movw	r0, #31628	; 0x7b8c
  11cadc:	e3400014 	movt	r0, #20
  11cae0:	ebff998b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11cae4:	e51b3008 	ldr	r3, [fp, #-8]
  11cae8:	e1d330b0 	ldrh	r3, [r3]
  11caec:	e1a01003 	mov	r1, r3
  11caf0:	e3070b94 	movw	r0, #31636	; 0x7b94
  11caf4:	e3400014 	movt	r0, #20
  11caf8:	ebff9985 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11cafc:	e51b3008 	ldr	r3, [fp, #-8]
  11cb00:	e1d330b2 	ldrh	r3, [r3, #2]
  11cb04:	e1a01003 	mov	r1, r3
  11cb08:	e3070ba0 	movw	r0, #31648	; 0x7ba0
  11cb0c:	e3400014 	movt	r0, #20
  11cb10:	ebff997f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11cb14:	e51b3008 	ldr	r3, [fp, #-8]
  11cb18:	e1d330b4 	ldrh	r3, [r3, #4]
  11cb1c:	e1a01003 	mov	r1, r3
  11cb20:	e3070bb8 	movw	r0, #31672	; 0x7bb8
  11cb24:	e3400014 	movt	r0, #20
  11cb28:	ebff9979 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11cb2c:	e51b3008 	ldr	r3, [fp, #-8]
  11cb30:	e1d330b6 	ldrh	r3, [r3, #6]
  11cb34:	e1a01003 	mov	r1, r3
  11cb38:	e3070bc4 	movw	r0, #31684	; 0x7bc4
  11cb3c:	e3400014 	movt	r0, #20
  11cb40:	ebff9973 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11cb44:	e51b3008 	ldr	r3, [fp, #-8]
  11cb48:	e1d330b8 	ldrh	r3, [r3, #8]
  11cb4c:	e1a01003 	mov	r1, r3
  11cb50:	e3070bd4 	movw	r0, #31700	; 0x7bd4
  11cb54:	e3400014 	movt	r0, #20
  11cb58:	ebff996d 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11cb5c:	e51b3008 	ldr	r3, [fp, #-8]
  11cb60:	e1d330ba 	ldrh	r3, [r3, #10]
  11cb64:	e1a01003 	mov	r1, r3
  11cb68:	e3070be4 	movw	r0, #31716	; 0x7be4
  11cb6c:	e3400014 	movt	r0, #20
  11cb70:	ebff9967 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11cb74:	e51b3008 	ldr	r3, [fp, #-8]
  11cb78:	e1d330bc 	ldrh	r3, [r3, #12]
  11cb7c:	e1a01003 	mov	r1, r3
  11cb80:	e3070c04 	movw	r0, #31748	; 0x7c04
  11cb84:	e3400014 	movt	r0, #20
  11cb88:	ebff9961 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11cb8c:	e51b3008 	ldr	r3, [fp, #-8]
  11cb90:	e1d330be 	ldrh	r3, [r3, #14]
  11cb94:	e1a01003 	mov	r1, r3
  11cb98:	e3070c40 	movw	r0, #31808	; 0x7c40
  11cb9c:	e3400014 	movt	r0, #20
  11cba0:	ebff995b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11cba4:	e51b3008 	ldr	r3, [fp, #-8]
  11cba8:	e1d331b0 	ldrh	r3, [r3, #16]
  11cbac:	e1a01003 	mov	r1, r3
  11cbb0:	e3070c50 	movw	r0, #31824	; 0x7c50
  11cbb4:	e3400014 	movt	r0, #20
  11cbb8:	ebff9955 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11cbbc:	e51b3008 	ldr	r3, [fp, #-8]
  11cbc0:	e1d331b2 	ldrh	r3, [r3, #18]
  11cbc4:	e1a01003 	mov	r1, r3
  11cbc8:	e3070c60 	movw	r0, #31840	; 0x7c60
  11cbcc:	e3400014 	movt	r0, #20
  11cbd0:	ebff994f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11cbd4:	e51b3008 	ldr	r3, [fp, #-8]
  11cbd8:	e1d331b4 	ldrh	r3, [r3, #20]
  11cbdc:	e1a01003 	mov	r1, r3
  11cbe0:	e3070c74 	movw	r0, #31860	; 0x7c74
  11cbe4:	e3400014 	movt	r0, #20
  11cbe8:	ebff9949 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11cbec:	e51b3008 	ldr	r3, [fp, #-8]
  11cbf0:	e1d331b6 	ldrh	r3, [r3, #22]
  11cbf4:	e1a01003 	mov	r1, r3
  11cbf8:	e3070c88 	movw	r0, #31880	; 0x7c88
  11cbfc:	e3400014 	movt	r0, #20
  11cc00:	ebff9943 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11cc04:	e51b3008 	ldr	r3, [fp, #-8]
  11cc08:	e1d331b8 	ldrh	r3, [r3, #24]
  11cc0c:	e1a01003 	mov	r1, r3
  11cc10:	e3070c98 	movw	r0, #31896	; 0x7c98
  11cc14:	e3400014 	movt	r0, #20
  11cc18:	ebff993d 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11cc1c:	e51b3008 	ldr	r3, [fp, #-8]
  11cc20:	e1d331ba 	ldrh	r3, [r3, #26]
  11cc24:	e1a01003 	mov	r1, r3
  11cc28:	e3070ca8 	movw	r0, #31912	; 0x7ca8
  11cc2c:	e3400014 	movt	r0, #20
  11cc30:	ebff9937 	bl	103114 <rt_kprintf>
}
  11cc34:	e320f000 	nop	{0}
  11cc38:	e24bd004 	sub	sp, fp, #4
  11cc3c:	e8bd8800 	pop	{fp, pc}

0011cc40 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11cc40:	e92d4800 	push	{fp, lr}
  11cc44:	e28db004 	add	fp, sp, #4
  11cc48:	e24dd008 	sub	sp, sp, #8
  11cc4c:	e50b0008 	str	r0, [fp, #-8]
  11cc50:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11cc54:	e51b100c 	ldr	r1, [fp, #-12]
  11cc58:	e3070cb8 	movw	r0, #31928	; 0x7cb8
  11cc5c:	e3400014 	movt	r0, #20
  11cc60:	ebff992b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11cc64:	e51b3008 	ldr	r3, [fp, #-8]
  11cc68:	e1d330b6 	ldrh	r3, [r3, #6]
  11cc6c:	e1a01003 	mov	r1, r3
  11cc70:	e3070cc4 	movw	r0, #31940	; 0x7cc4
  11cc74:	e3400014 	movt	r0, #20
  11cc78:	ebff9925 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11cc7c:	e51b3008 	ldr	r3, [fp, #-8]
  11cc80:	e1d330b8 	ldrh	r3, [r3, #8]
  11cc84:	e1a01003 	mov	r1, r3
  11cc88:	e3070cd4 	movw	r0, #31956	; 0x7cd4
  11cc8c:	e3400014 	movt	r0, #20
  11cc90:	ebff991f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11cc94:	e51b3008 	ldr	r3, [fp, #-8]
  11cc98:	e1d330ba 	ldrh	r3, [r3, #10]
  11cc9c:	e1a01003 	mov	r1, r3
  11cca0:	e3070ce0 	movw	r0, #31968	; 0x7ce0
  11cca4:	e3400014 	movt	r0, #20
  11cca8:	ebff9919 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11ccac:	e51b3008 	ldr	r3, [fp, #-8]
  11ccb0:	e1d330b4 	ldrh	r3, [r3, #4]
  11ccb4:	e1a01003 	mov	r1, r3
  11ccb8:	e3070cec 	movw	r0, #31980	; 0x7cec
  11ccbc:	e3400014 	movt	r0, #20
  11ccc0:	ebff9913 	bl	103114 <rt_kprintf>
}
  11ccc4:	e320f000 	nop	{0}
  11ccc8:	e24bd004 	sub	sp, fp, #4
  11cccc:	e8bd8800 	pop	{fp, pc}

0011ccd0 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11ccd0:	e92d4800 	push	{fp, lr}
  11ccd4:	e28db004 	add	fp, sp, #4
  11ccd8:	e24dd008 	sub	sp, sp, #8
  11ccdc:	e50b0008 	str	r0, [fp, #-8]
  11cce0:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11cce4:	e51b300c 	ldr	r3, [fp, #-12]
  11cce8:	e3530010 	cmp	r3, #16
  11ccec:	ca000004 	bgt	11cd04 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11ccf0:	e51b3008 	ldr	r3, [fp, #-8]
  11ccf4:	e5933000 	ldr	r3, [r3]
  11ccf8:	e1a01003 	mov	r1, r3
  11ccfc:	e51b0008 	ldr	r0, [fp, #-8]
  11cd00:	ebffffce 	bl	11cc40 <stats_display_mem>
  }
}
  11cd04:	e320f000 	nop	{0}
  11cd08:	e24bd004 	sub	sp, fp, #4
  11cd0c:	e8bd8800 	pop	{fp, pc}

0011cd10 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11cd10:	e92d4800 	push	{fp, lr}
  11cd14:	e28db004 	add	fp, sp, #4
  11cd18:	e24dd008 	sub	sp, sp, #8
  11cd1c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11cd20:	e3070cf8 	movw	r0, #31992	; 0x7cf8
  11cd24:	e3400014 	movt	r0, #20
  11cd28:	ebff98f9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11cd2c:	e51b3008 	ldr	r3, [fp, #-8]
  11cd30:	e1d330b0 	ldrh	r3, [r3]
  11cd34:	e1a01003 	mov	r1, r3
  11cd38:	e3070d00 	movw	r0, #32000	; 0x7d00
  11cd3c:	e3400014 	movt	r0, #20
  11cd40:	ebff98f3 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11cd44:	e51b3008 	ldr	r3, [fp, #-8]
  11cd48:	e1d330b2 	ldrh	r3, [r3, #2]
  11cd4c:	e1a01003 	mov	r1, r3
  11cd50:	e3070d14 	movw	r0, #32020	; 0x7d14
  11cd54:	e3400014 	movt	r0, #20
  11cd58:	ebff98ed 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11cd5c:	e51b3008 	ldr	r3, [fp, #-8]
  11cd60:	e1d330b4 	ldrh	r3, [r3, #4]
  11cd64:	e1a01003 	mov	r1, r3
  11cd68:	e3070d28 	movw	r0, #32040	; 0x7d28
  11cd6c:	e3400014 	movt	r0, #20
  11cd70:	ebff98e7 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11cd74:	e51b3008 	ldr	r3, [fp, #-8]
  11cd78:	e1d330b6 	ldrh	r3, [r3, #6]
  11cd7c:	e1a01003 	mov	r1, r3
  11cd80:	e3070d3c 	movw	r0, #32060	; 0x7d3c
  11cd84:	e3400014 	movt	r0, #20
  11cd88:	ebff98e1 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11cd8c:	e51b3008 	ldr	r3, [fp, #-8]
  11cd90:	e1d330b8 	ldrh	r3, [r3, #8]
  11cd94:	e1a01003 	mov	r1, r3
  11cd98:	e3070d50 	movw	r0, #32080	; 0x7d50
  11cd9c:	e3400014 	movt	r0, #20
  11cda0:	ebff98db 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11cda4:	e51b3008 	ldr	r3, [fp, #-8]
  11cda8:	e1d330ba 	ldrh	r3, [r3, #10]
  11cdac:	e1a01003 	mov	r1, r3
  11cdb0:	e3070d64 	movw	r0, #32100	; 0x7d64
  11cdb4:	e3400014 	movt	r0, #20
  11cdb8:	ebff98d5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11cdbc:	e51b3008 	ldr	r3, [fp, #-8]
  11cdc0:	e1d330bc 	ldrh	r3, [r3, #12]
  11cdc4:	e1a01003 	mov	r1, r3
  11cdc8:	e3070d78 	movw	r0, #32120	; 0x7d78
  11cdcc:	e3400014 	movt	r0, #20
  11cdd0:	ebff98cf 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11cdd4:	e51b3008 	ldr	r3, [fp, #-8]
  11cdd8:	e1d330be 	ldrh	r3, [r3, #14]
  11cddc:	e1a01003 	mov	r1, r3
  11cde0:	e3070d8c 	movw	r0, #32140	; 0x7d8c
  11cde4:	e3400014 	movt	r0, #20
  11cde8:	ebff98c9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11cdec:	e51b3008 	ldr	r3, [fp, #-8]
  11cdf0:	e1d331b0 	ldrh	r3, [r3, #16]
  11cdf4:	e1a01003 	mov	r1, r3
  11cdf8:	e3070da0 	movw	r0, #32160	; 0x7da0
  11cdfc:	e3400014 	movt	r0, #20
  11ce00:	ebff98c3 	bl	103114 <rt_kprintf>
}
  11ce04:	e320f000 	nop	{0}
  11ce08:	e24bd004 	sub	sp, fp, #4
  11ce0c:	e8bd8800 	pop	{fp, pc}

0011ce10 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11ce10:	e92d4800 	push	{fp, lr}
  11ce14:	e28db004 	add	fp, sp, #4
  11ce18:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11ce1c:	e3071db4 	movw	r1, #32180	; 0x7db4
  11ce20:	e3401014 	movt	r1, #20
  11ce24:	e30c0a50 	movw	r0, #51792	; 0xca50
  11ce28:	e3400015 	movt	r0, #21
  11ce2c:	ebfffecf 	bl	11c970 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11ce30:	e3071dbc 	movw	r1, #32188	; 0x7dbc
  11ce34:	e3401014 	movt	r1, #20
  11ce38:	e59f00dc 	ldr	r0, [pc, #220]	; 11cf1c <stats_display+0x10c>
  11ce3c:	ebfffecb 	bl	11c970 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11ce40:	e3071dc4 	movw	r1, #32196	; 0x7dc4
  11ce44:	e3401014 	movt	r1, #20
  11ce48:	e59f00d0 	ldr	r0, [pc, #208]	; 11cf20 <stats_display+0x110>
  11ce4c:	ebfffec7 	bl	11c970 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11ce50:	e3071dcc 	movw	r1, #32204	; 0x7dcc
  11ce54:	e3401014 	movt	r1, #20
  11ce58:	e59f00c4 	ldr	r0, [pc, #196]	; 11cf24 <stats_display+0x114>
  11ce5c:	ebfffec3 	bl	11c970 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11ce60:	e3071dd0 	movw	r1, #32208	; 0x7dd0
  11ce64:	e3401014 	movt	r1, #20
  11ce68:	e59f00b8 	ldr	r0, [pc, #184]	; 11cf28 <stats_display+0x118>
  11ce6c:	ebffff13 	bl	11cac0 <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11ce70:	e3071dd8 	movw	r1, #32216	; 0x7dd8
  11ce74:	e3401014 	movt	r1, #20
  11ce78:	e59f00ac 	ldr	r0, [pc, #172]	; 11cf2c <stats_display+0x11c>
  11ce7c:	ebfffebb 	bl	11c970 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11ce80:	e3071de0 	movw	r1, #32224	; 0x7de0
  11ce84:	e3401014 	movt	r1, #20
  11ce88:	e59f00a0 	ldr	r0, [pc, #160]	; 11cf30 <stats_display+0x120>
  11ce8c:	ebfffeb7 	bl	11c970 <stats_display_proto>
  TCP_STATS_DISPLAY();
  11ce90:	e3071de4 	movw	r1, #32228	; 0x7de4
  11ce94:	e3401014 	movt	r1, #20
  11ce98:	e59f0094 	ldr	r0, [pc, #148]	; 11cf34 <stats_display+0x124>
  11ce9c:	ebfffeb3 	bl	11c970 <stats_display_proto>
  MEM_STATS_DISPLAY();
  11cea0:	e3071de8 	movw	r1, #32232	; 0x7de8
  11cea4:	e3401014 	movt	r1, #20
  11cea8:	e59f0088 	ldr	r0, [pc, #136]	; 11cf38 <stats_display+0x128>
  11ceac:	ebffff63 	bl	11cc40 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11ceb0:	e3a03000 	mov	r3, #0
  11ceb4:	e14b30b6 	strh	r3, [fp, #-6]
  11ceb8:	ea00000f 	b	11cefc <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11cebc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cec0:	e30c2a50 	movw	r2, #51792	; 0xca50
  11cec4:	e3402015 	movt	r2, #21
  11cec8:	e2833034 	add	r3, r3, #52	; 0x34
  11cecc:	e1a03103 	lsl	r3, r3, #2
  11ced0:	e0823003 	add	r3, r2, r3
  11ced4:	e5933004 	ldr	r3, [r3, #4]
  11ced8:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11cedc:	e1a01002 	mov	r1, r2
  11cee0:	e1a00003 	mov	r0, r3
  11cee4:	ebffff79 	bl	11ccd0 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cee8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11ceec:	e6ff3073 	uxth	r3, r3
  11cef0:	e2833001 	add	r3, r3, #1
  11cef4:	e6ff3073 	uxth	r3, r3
  11cef8:	e14b30b6 	strh	r3, [fp, #-6]
  11cefc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cf00:	e3530010 	cmp	r3, #16
  11cf04:	daffffec 	ble	11cebc <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cf08:	e59f002c 	ldr	r0, [pc, #44]	; 11cf3c <stats_display+0x12c>
  11cf0c:	ebffff7f 	bl	11cd10 <stats_display_sys>
}
  11cf10:	e320f000 	nop	{0}
  11cf14:	e24bd004 	sub	sp, fp, #4
  11cf18:	e8bd8800 	pop	{fp, pc}
  11cf1c:	0015ca68 	.word	0x0015ca68
  11cf20:	0015ca80 	.word	0x0015ca80
  11cf24:	0015ca98 	.word	0x0015ca98
  11cf28:	0015cac8 	.word	0x0015cac8
  11cf2c:	0015cab0 	.word	0x0015cab0
  11cf30:	0015cae4 	.word	0x0015cae4
  11cf34:	0015cafc 	.word	0x0015cafc
  11cf38:	0015cb14 	.word	0x0015cb14
  11cf3c:	0015cb68 	.word	0x0015cb68

0011cf40 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cf40:	e92d4800 	push	{fp, lr}
  11cf44:	e28db004 	add	fp, sp, #4
  11cf48:	e24dd010 	sub	sp, sp, #16
  11cf4c:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cf50:	e51b3010 	ldr	r3, [fp, #-16]
  11cf54:	e3530000 	cmp	r3, #0
  11cf58:	0a00000f 	beq	11cf9c <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11cf5c:	e24b300c 	sub	r3, fp, #12
  11cf60:	e3a01000 	mov	r1, #0
  11cf64:	e1a00003 	mov	r0, r3
  11cf68:	ebffb5bc 	bl	10a660 <sys_sem_new>
  11cf6c:	e1a03000 	mov	r3, r0
  11cf70:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11cf74:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cf78:	e3530000 	cmp	r3, #0
  11cf7c:	1a000006 	bne	11cf9c <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11cf80:	e24b300c 	sub	r3, fp, #12
  11cf84:	e51b1010 	ldr	r1, [fp, #-16]
  11cf88:	e1a00003 	mov	r0, r3
  11cf8c:	ebffb5f4 	bl	10a764 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cf90:	e24b300c 	sub	r3, fp, #12
  11cf94:	e1a00003 	mov	r0, r3
  11cf98:	ebffb5db 	bl	10a70c <sys_sem_free>
    }
  }
}
  11cf9c:	e320f000 	nop	{0}
  11cfa0:	e24bd004 	sub	sp, fp, #4
  11cfa4:	e8bd8800 	pop	{fp, pc}

0011cfa8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11cfa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cfac:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cfb0:	e320f000 	nop	{0}
  11cfb4:	e28bd000 	add	sp, fp, #0
  11cfb8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cfbc:	e12fff1e 	bx	lr

0011cfc0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cfc0:	e92d4800 	push	{fp, lr}
  11cfc4:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11cfc8:	eb00084a 	bl	11f0f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11cfcc:	e30e3248 	movw	r3, #57928	; 0xe248
  11cfd0:	e3403014 	movt	r3, #20
  11cfd4:	e5d33000 	ldrb	r3, [r3]
  11cfd8:	e2833001 	add	r3, r3, #1
  11cfdc:	e6ef2073 	uxtb	r2, r3
  11cfe0:	e30e3248 	movw	r3, #57928	; 0xe248
  11cfe4:	e3403014 	movt	r3, #20
  11cfe8:	e5c32000 	strb	r2, [r3]
  11cfec:	e30e3248 	movw	r3, #57928	; 0xe248
  11cff0:	e3403014 	movt	r3, #20
  11cff4:	e5d33000 	ldrb	r3, [r3]
  11cff8:	e2033001 	and	r3, r3, #1
  11cffc:	e3530000 	cmp	r3, #0
  11d000:	0a000000 	beq	11d008 <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11d004:	eb0005cb 	bl	11e738 <tcp_slowtmr>
  }
}
  11d008:	e320f000 	nop	{0}
  11d00c:	e8bd8800 	pop	{fp, pc}

0011d010 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11d010:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11d014:	e28db000 	add	fp, sp, #0
  11d018:	e24dd014 	sub	sp, sp, #20
  11d01c:	e50b0010 	str	r0, [fp, #-16]
  11d020:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d024:	e51b3010 	ldr	r3, [fp, #-16]
  11d028:	e50b3008 	str	r3, [fp, #-8]
  11d02c:	ea00000a 	b	11d05c <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11d030:	e51b3008 	ldr	r3, [fp, #-8]
  11d034:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11d038:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11d03c:	e1520003 	cmp	r2, r3
  11d040:	1a000002 	bne	11d050 <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11d044:	e51b3008 	ldr	r3, [fp, #-8]
  11d048:	e3a02000 	mov	r2, #0
  11d04c:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d050:	e51b3008 	ldr	r3, [fp, #-8]
  11d054:	e593300c 	ldr	r3, [r3, #12]
  11d058:	e50b3008 	str	r3, [fp, #-8]
  11d05c:	e51b3008 	ldr	r3, [fp, #-8]
  11d060:	e3530000 	cmp	r3, #0
  11d064:	1afffff1 	bne	11d030 <tcp_remove_listener+0x20>
      }
   }
}
  11d068:	e320f000 	nop	{0}
  11d06c:	e28bd000 	add	sp, fp, #0
  11d070:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11d074:	e12fff1e 	bx	lr

0011d078 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11d078:	e92d4800 	push	{fp, lr}
  11d07c:	e28db004 	add	fp, sp, #4
  11d080:	e24dd010 	sub	sp, sp, #16
  11d084:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d088:	e51b3010 	ldr	r3, [fp, #-16]
  11d08c:	e3530000 	cmp	r3, #0
  11d090:	1a000006 	bne	11d0b0 <tcp_listen_closed+0x38>
  11d094:	e3070ebc 	movw	r0, #32444	; 0x7ebc
  11d098:	e3400014 	movt	r0, #20
  11d09c:	ebff981c 	bl	103114 <rt_kprintf>
  11d0a0:	e3a010c0 	mov	r1, #192	; 0xc0
  11d0a4:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11d0a8:	e3400014 	movt	r0, #20
  11d0ac:	ebffb80b 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11d0b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d0b4:	e5933014 	ldr	r3, [r3, #20]
  11d0b8:	e3530001 	cmp	r3, #1
  11d0bc:	0a000006 	beq	11d0dc <tcp_listen_closed+0x64>
  11d0c0:	e3070ef4 	movw	r0, #32500	; 0x7ef4
  11d0c4:	e3400014 	movt	r0, #20
  11d0c8:	ebff9811 	bl	103114 <rt_kprintf>
  11d0cc:	e3a010c1 	mov	r1, #193	; 0xc1
  11d0d0:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11d0d4:	e3400014 	movt	r0, #20
  11d0d8:	ebffb800 	bl	10b0e0 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d0dc:	e3a03001 	mov	r3, #1
  11d0e0:	e50b3008 	str	r3, [fp, #-8]
  11d0e4:	ea00000a 	b	11d114 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11d0e8:	e3073eac 	movw	r3, #32428	; 0x7eac
  11d0ec:	e3403014 	movt	r3, #20
  11d0f0:	e51b2008 	ldr	r2, [fp, #-8]
  11d0f4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d0f8:	e5933000 	ldr	r3, [r3]
  11d0fc:	e51b1010 	ldr	r1, [fp, #-16]
  11d100:	e1a00003 	mov	r0, r3
  11d104:	ebffffc1 	bl	11d010 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d108:	e51b3008 	ldr	r3, [fp, #-8]
  11d10c:	e2833001 	add	r3, r3, #1
  11d110:	e50b3008 	str	r3, [fp, #-8]
  11d114:	e51b3008 	ldr	r3, [fp, #-8]
  11d118:	e3530003 	cmp	r3, #3
  11d11c:	9afffff1 	bls	11d0e8 <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11d120:	e320f000 	nop	{0}
  11d124:	e24bd004 	sub	sp, fp, #4
  11d128:	e8bd8800 	pop	{fp, pc}

0011d12c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11d12c:	e92d4800 	push	{fp, lr}
  11d130:	e28db004 	add	fp, sp, #4
  11d134:	e24dd018 	sub	sp, sp, #24
  11d138:	e50b0010 	str	r0, [fp, #-16]
  11d13c:	e1a03001 	mov	r3, r1
  11d140:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11d144:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11d148:	e3530000 	cmp	r3, #0
  11d14c:	0a000076 	beq	11d32c <tcp_close_shutdown+0x200>
  11d150:	e51b3010 	ldr	r3, [fp, #-16]
  11d154:	e5933014 	ldr	r3, [r3, #20]
  11d158:	e3530004 	cmp	r3, #4
  11d15c:	0a000003 	beq	11d170 <tcp_close_shutdown+0x44>
  11d160:	e51b3010 	ldr	r3, [fp, #-16]
  11d164:	e5933014 	ldr	r3, [r3, #20]
  11d168:	e3530007 	cmp	r3, #7
  11d16c:	1a00006e 	bne	11d32c <tcp_close_shutdown+0x200>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11d170:	e51b3010 	ldr	r3, [fp, #-16]
  11d174:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d178:	e3530000 	cmp	r3, #0
  11d17c:	1a000003 	bne	11d190 <tcp_close_shutdown+0x64>
  11d180:	e51b3010 	ldr	r3, [fp, #-16]
  11d184:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11d188:	e3530a02 	cmp	r3, #8192	; 0x2000
  11d18c:	0a000066 	beq	11d32c <tcp_close_shutdown+0x200>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11d190:	e51b3010 	ldr	r3, [fp, #-16]
  11d194:	e5d3301e 	ldrb	r3, [r3, #30]
  11d198:	e2033010 	and	r3, r3, #16
  11d19c:	e3530000 	cmp	r3, #0
  11d1a0:	1a000006 	bne	11d1c0 <tcp_close_shutdown+0x94>
  11d1a4:	e3070f0c 	movw	r0, #32524	; 0x7f0c
  11d1a8:	e3400014 	movt	r0, #20
  11d1ac:	ebff97d8 	bl	103114 <rt_kprintf>
  11d1b0:	e300110f 	movw	r1, #271	; 0x10f
  11d1b4:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11d1b8:	e3400014 	movt	r0, #20
  11d1bc:	ebffb7c7 	bl	10b0e0 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11d1c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d1c4:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11d1c8:	e51b3010 	ldr	r3, [fp, #-16]
  11d1cc:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11d1d0:	e51bc010 	ldr	ip, [fp, #-16]
  11d1d4:	e51b3010 	ldr	r3, [fp, #-16]
  11d1d8:	e283e004 	add	lr, r3, #4
  11d1dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d1e0:	e1d331ba 	ldrh	r3, [r3, #26]
  11d1e4:	e51b2010 	ldr	r2, [fp, #-16]
  11d1e8:	e1d221bc 	ldrh	r2, [r2, #28]
  11d1ec:	e58d2004 	str	r2, [sp, #4]
  11d1f0:	e58d3000 	str	r3, [sp]
  11d1f4:	e1a0300e 	mov	r3, lr
  11d1f8:	e1a0200c 	mov	r2, ip
  11d1fc:	eb0025b8 	bl	1268e4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11d200:	e51b0010 	ldr	r0, [fp, #-16]
  11d204:	eb000ade 	bl	11fd84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11d208:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11d20c:	e3403015 	movt	r3, #21
  11d210:	e5933000 	ldr	r3, [r3]
  11d214:	e51b2010 	ldr	r2, [fp, #-16]
  11d218:	e1520003 	cmp	r2, r3
  11d21c:	1a000007 	bne	11d240 <tcp_close_shutdown+0x114>
  11d220:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11d224:	e3403015 	movt	r3, #21
  11d228:	e5933000 	ldr	r3, [r3]
  11d22c:	e593200c 	ldr	r2, [r3, #12]
  11d230:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11d234:	e3403015 	movt	r3, #21
  11d238:	e5832000 	str	r2, [r3]
  11d23c:	ea000014 	b	11d294 <tcp_close_shutdown+0x168>
  11d240:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11d244:	e3403015 	movt	r3, #21
  11d248:	e5933000 	ldr	r3, [r3]
  11d24c:	e50b3008 	str	r3, [fp, #-8]
  11d250:	ea00000c 	b	11d288 <tcp_close_shutdown+0x15c>
  11d254:	e51b3008 	ldr	r3, [fp, #-8]
  11d258:	e593300c 	ldr	r3, [r3, #12]
  11d25c:	e51b2010 	ldr	r2, [fp, #-16]
  11d260:	e1520003 	cmp	r2, r3
  11d264:	1a000004 	bne	11d27c <tcp_close_shutdown+0x150>
  11d268:	e51b3010 	ldr	r3, [fp, #-16]
  11d26c:	e593200c 	ldr	r2, [r3, #12]
  11d270:	e51b3008 	ldr	r3, [fp, #-8]
  11d274:	e583200c 	str	r2, [r3, #12]
  11d278:	ea000005 	b	11d294 <tcp_close_shutdown+0x168>
  11d27c:	e51b3008 	ldr	r3, [fp, #-8]
  11d280:	e593300c 	ldr	r3, [r3, #12]
  11d284:	e50b3008 	str	r3, [fp, #-8]
  11d288:	e51b3008 	ldr	r3, [fp, #-8]
  11d28c:	e3530000 	cmp	r3, #0
  11d290:	1affffef 	bne	11d254 <tcp_close_shutdown+0x128>
  11d294:	e51b3010 	ldr	r3, [fp, #-16]
  11d298:	e3a02000 	mov	r2, #0
  11d29c:	e583200c 	str	r2, [r3, #12]
  11d2a0:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11d2a4:	e3403015 	movt	r3, #21
  11d2a8:	e3a02001 	mov	r2, #1
  11d2ac:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11d2b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2b4:	e5933014 	ldr	r3, [r3, #20]
  11d2b8:	e3530004 	cmp	r3, #4
  11d2bc:	1a00000d 	bne	11d2f8 <tcp_close_shutdown+0x1cc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11d2c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2c4:	e3a0200a 	mov	r2, #10
  11d2c8:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11d2cc:	e30c3c50 	movw	r3, #52304	; 0xcc50
  11d2d0:	e3403015 	movt	r3, #21
  11d2d4:	e5932000 	ldr	r2, [r3]
  11d2d8:	e51b3010 	ldr	r3, [fp, #-16]
  11d2dc:	e583200c 	str	r2, [r3, #12]
  11d2e0:	e30c3c50 	movw	r3, #52304	; 0xcc50
  11d2e4:	e3403015 	movt	r3, #21
  11d2e8:	e51b2010 	ldr	r2, [fp, #-16]
  11d2ec:	e5832000 	str	r2, [r3]
  11d2f0:	eb0027cf 	bl	127234 <tcp_timer_needed>
  11d2f4:	ea00000a 	b	11d324 <tcp_close_shutdown+0x1f8>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11d2f8:	e30c3c54 	movw	r3, #52308	; 0xcc54
  11d2fc:	e3403015 	movt	r3, #21
  11d300:	e5933000 	ldr	r3, [r3]
  11d304:	e51b2010 	ldr	r2, [fp, #-16]
  11d308:	e1520003 	cmp	r2, r3
  11d30c:	1a000001 	bne	11d318 <tcp_close_shutdown+0x1ec>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11d310:	eb001ce6 	bl	1246b0 <tcp_trigger_input_pcb_close>
  11d314:	ea000002 	b	11d324 <tcp_close_shutdown+0x1f8>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11d318:	e51b1010 	ldr	r1, [fp, #-16]
  11d31c:	e3a00002 	mov	r0, #2
  11d320:	ebffefd0 	bl	119268 <memp_free>
        }
      }
      return ERR_OK;
  11d324:	e3a03000 	mov	r3, #0
  11d328:	ea000058 	b	11d490 <tcp_close_shutdown+0x364>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11d32c:	e51b3010 	ldr	r3, [fp, #-16]
  11d330:	e5933014 	ldr	r3, [r3, #20]
  11d334:	e3530001 	cmp	r3, #1
  11d338:	0a000032 	beq	11d408 <tcp_close_shutdown+0x2dc>
  11d33c:	e3530001 	cmp	r3, #1
  11d340:	3a000002 	bcc	11d350 <tcp_close_shutdown+0x224>
  11d344:	e3530002 	cmp	r3, #2
  11d348:	0a000038 	beq	11d430 <tcp_close_shutdown+0x304>
  11d34c:	ea00004a 	b	11d47c <tcp_close_shutdown+0x350>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d350:	e51b3010 	ldr	r3, [fp, #-16]
  11d354:	e1d331ba 	ldrh	r3, [r3, #26]
  11d358:	e3530000 	cmp	r3, #0
  11d35c:	0a000025 	beq	11d3f8 <tcp_close_shutdown+0x2cc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d360:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d364:	e3403015 	movt	r3, #21
  11d368:	e5933000 	ldr	r3, [r3]
  11d36c:	e51b2010 	ldr	r2, [fp, #-16]
  11d370:	e1520003 	cmp	r2, r3
  11d374:	1a000007 	bne	11d398 <tcp_close_shutdown+0x26c>
  11d378:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d37c:	e3403015 	movt	r3, #21
  11d380:	e5933000 	ldr	r3, [r3]
  11d384:	e593200c 	ldr	r2, [r3, #12]
  11d388:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d38c:	e3403015 	movt	r3, #21
  11d390:	e5832000 	str	r2, [r3]
  11d394:	ea000014 	b	11d3ec <tcp_close_shutdown+0x2c0>
  11d398:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d39c:	e3403015 	movt	r3, #21
  11d3a0:	e5933000 	ldr	r3, [r3]
  11d3a4:	e50b300c 	str	r3, [fp, #-12]
  11d3a8:	ea00000c 	b	11d3e0 <tcp_close_shutdown+0x2b4>
  11d3ac:	e51b300c 	ldr	r3, [fp, #-12]
  11d3b0:	e593300c 	ldr	r3, [r3, #12]
  11d3b4:	e51b2010 	ldr	r2, [fp, #-16]
  11d3b8:	e1520003 	cmp	r2, r3
  11d3bc:	1a000004 	bne	11d3d4 <tcp_close_shutdown+0x2a8>
  11d3c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d3c4:	e593200c 	ldr	r2, [r3, #12]
  11d3c8:	e51b300c 	ldr	r3, [fp, #-12]
  11d3cc:	e583200c 	str	r2, [r3, #12]
  11d3d0:	ea000005 	b	11d3ec <tcp_close_shutdown+0x2c0>
  11d3d4:	e51b300c 	ldr	r3, [fp, #-12]
  11d3d8:	e593300c 	ldr	r3, [r3, #12]
  11d3dc:	e50b300c 	str	r3, [fp, #-12]
  11d3e0:	e51b300c 	ldr	r3, [fp, #-12]
  11d3e4:	e3530000 	cmp	r3, #0
  11d3e8:	1affffef 	bne	11d3ac <tcp_close_shutdown+0x280>
  11d3ec:	e51b3010 	ldr	r3, [fp, #-16]
  11d3f0:	e3a02000 	mov	r2, #0
  11d3f4:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d3f8:	e51b1010 	ldr	r1, [fp, #-16]
  11d3fc:	e3a00002 	mov	r0, #2
  11d400:	ebffef98 	bl	119268 <memp_free>
    break;
  11d404:	ea000020 	b	11d48c <tcp_close_shutdown+0x360>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d408:	e51b0010 	ldr	r0, [fp, #-16]
  11d40c:	ebffff19 	bl	11d078 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d410:	e51b1010 	ldr	r1, [fp, #-16]
  11d414:	e30c0c48 	movw	r0, #52296	; 0xcc48
  11d418:	e3400015 	movt	r0, #21
  11d41c:	eb000a92 	bl	11fe6c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d420:	e51b1010 	ldr	r1, [fp, #-16]
  11d424:	e3a00003 	mov	r0, #3
  11d428:	ebffef8e 	bl	119268 <memp_free>
    break;
  11d42c:	ea000016 	b	11d48c <tcp_close_shutdown+0x360>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d430:	e51b1010 	ldr	r1, [fp, #-16]
  11d434:	e30c0c40 	movw	r0, #52288	; 0xcc40
  11d438:	e3400015 	movt	r0, #21
  11d43c:	eb000a8a 	bl	11fe6c <tcp_pcb_remove>
  11d440:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11d444:	e3403015 	movt	r3, #21
  11d448:	e3a02001 	mov	r2, #1
  11d44c:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d450:	e51b1010 	ldr	r1, [fp, #-16]
  11d454:	e3a00002 	mov	r0, #2
  11d458:	ebffef82 	bl	119268 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d45c:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d460:	e3403015 	movt	r3, #21
  11d464:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d468:	e2832001 	add	r2, r3, #1
  11d46c:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d470:	e3403015 	movt	r3, #21
  11d474:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d478:	ea000003 	b	11d48c <tcp_close_shutdown+0x360>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d47c:	e51b0010 	ldr	r0, [fp, #-16]
  11d480:	eb000005 	bl	11d49c <tcp_close_shutdown_fin>
  11d484:	e1a03000 	mov	r3, r0
  11d488:	ea000000 	b	11d490 <tcp_close_shutdown+0x364>
  }
  return ERR_OK;
  11d48c:	e3a03000 	mov	r3, #0
}
  11d490:	e1a00003 	mov	r0, r3
  11d494:	e24bd004 	sub	sp, fp, #4
  11d498:	e8bd8800 	pop	{fp, pc}

0011d49c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d49c:	e92d4800 	push	{fp, lr}
  11d4a0:	e28db004 	add	fp, sp, #4
  11d4a4:	e24dd010 	sub	sp, sp, #16
  11d4a8:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d4ac:	e51b3010 	ldr	r3, [fp, #-16]
  11d4b0:	e3530000 	cmp	r3, #0
  11d4b4:	1a000006 	bne	11d4d4 <tcp_close_shutdown_fin+0x38>
  11d4b8:	e3070ebc 	movw	r0, #32444	; 0x7ebc
  11d4bc:	e3400014 	movt	r0, #20
  11d4c0:	ebff9713 	bl	103114 <rt_kprintf>
  11d4c4:	e300114d 	movw	r1, #333	; 0x14d
  11d4c8:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11d4cc:	e3400014 	movt	r0, #20
  11d4d0:	ebffb702 	bl	10b0e0 <sys_arch_assert>

  switch (pcb->state) {
  11d4d4:	e51b3010 	ldr	r3, [fp, #-16]
  11d4d8:	e5933014 	ldr	r3, [r3, #20]
  11d4dc:	e3530004 	cmp	r3, #4
  11d4e0:	0a000015 	beq	11d53c <tcp_close_shutdown_fin+0xa0>
  11d4e4:	e3530007 	cmp	r3, #7
  11d4e8:	0a000025 	beq	11d584 <tcp_close_shutdown_fin+0xe8>
  11d4ec:	e3530003 	cmp	r3, #3
  11d4f0:	1a000035 	bne	11d5cc <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d4f4:	e51b0010 	ldr	r0, [fp, #-16]
  11d4f8:	eb001ce8 	bl	1248a0 <tcp_send_fin>
  11d4fc:	e1a03000 	mov	r3, r0
  11d500:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d504:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d508:	e3530000 	cmp	r3, #0
  11d50c:	1a000030 	bne	11d5d4 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d510:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d514:	e3403015 	movt	r3, #21
  11d518:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d51c:	e2832001 	add	r2, r3, #1
  11d520:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d524:	e3403015 	movt	r3, #21
  11d528:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d52c:	e51b3010 	ldr	r3, [fp, #-16]
  11d530:	e3a02005 	mov	r2, #5
  11d534:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d538:	ea000025 	b	11d5d4 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d53c:	e51b0010 	ldr	r0, [fp, #-16]
  11d540:	eb001cd6 	bl	1248a0 <tcp_send_fin>
  11d544:	e1a03000 	mov	r3, r0
  11d548:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d54c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d550:	e3530000 	cmp	r3, #0
  11d554:	1a000020 	bne	11d5dc <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d558:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d55c:	e3403015 	movt	r3, #21
  11d560:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d564:	e2832001 	add	r2, r3, #1
  11d568:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d56c:	e3403015 	movt	r3, #21
  11d570:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d574:	e51b3010 	ldr	r3, [fp, #-16]
  11d578:	e3a02005 	mov	r2, #5
  11d57c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d580:	ea000015 	b	11d5dc <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d584:	e51b0010 	ldr	r0, [fp, #-16]
  11d588:	eb001cc4 	bl	1248a0 <tcp_send_fin>
  11d58c:	e1a03000 	mov	r3, r0
  11d590:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d594:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d598:	e3530000 	cmp	r3, #0
  11d59c:	1a000010 	bne	11d5e4 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d5a0:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d5a4:	e3403015 	movt	r3, #21
  11d5a8:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d5ac:	e2832001 	add	r2, r3, #1
  11d5b0:	e30c3a50 	movw	r3, #51792	; 0xca50
  11d5b4:	e3403015 	movt	r3, #21
  11d5b8:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d5bc:	e51b3010 	ldr	r3, [fp, #-16]
  11d5c0:	e3a02009 	mov	r2, #9
  11d5c4:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d5c8:	ea000005 	b	11d5e4 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d5cc:	e3a03000 	mov	r3, #0
  11d5d0:	ea000014 	b	11d628 <tcp_close_shutdown_fin+0x18c>
    break;
  11d5d4:	e320f000 	nop	{0}
  11d5d8:	ea000002 	b	11d5e8 <tcp_close_shutdown_fin+0x14c>
    break;
  11d5dc:	e320f000 	nop	{0}
  11d5e0:	ea000000 	b	11d5e8 <tcp_close_shutdown_fin+0x14c>
    break;
  11d5e4:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d5e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d5ec:	e3530000 	cmp	r3, #0
  11d5f0:	1a000002 	bne	11d600 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d5f4:	e51b0010 	ldr	r0, [fp, #-16]
  11d5f8:	eb002253 	bl	125f4c <tcp_output>
  11d5fc:	ea000008 	b	11d624 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d600:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d604:	e3730001 	cmn	r3, #1
  11d608:	1a000005 	bne	11d624 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d60c:	e51b3010 	ldr	r3, [fp, #-16]
  11d610:	e5d3301e 	ldrb	r3, [r3, #30]
  11d614:	e3833008 	orr	r3, r3, #8
  11d618:	e6ef2073 	uxtb	r2, r3
  11d61c:	e51b3010 	ldr	r3, [fp, #-16]
  11d620:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d624:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d628:	e1a00003 	mov	r0, r3
  11d62c:	e24bd004 	sub	sp, fp, #4
  11d630:	e8bd8800 	pop	{fp, pc}

0011d634 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d634:	e92d4800 	push	{fp, lr}
  11d638:	e28db004 	add	fp, sp, #4
  11d63c:	e24dd008 	sub	sp, sp, #8
  11d640:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d644:	e51b3008 	ldr	r3, [fp, #-8]
  11d648:	e5933014 	ldr	r3, [r3, #20]
  11d64c:	e3530001 	cmp	r3, #1
  11d650:	0a000005 	beq	11d66c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d654:	e51b3008 	ldr	r3, [fp, #-8]
  11d658:	e5d3301e 	ldrb	r3, [r3, #30]
  11d65c:	e3833010 	orr	r3, r3, #16
  11d660:	e6ef2073 	uxtb	r2, r3
  11d664:	e51b3008 	ldr	r3, [fp, #-8]
  11d668:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d66c:	e3a01001 	mov	r1, #1
  11d670:	e51b0008 	ldr	r0, [fp, #-8]
  11d674:	ebfffeac 	bl	11d12c <tcp_close_shutdown>
  11d678:	e1a03000 	mov	r3, r0
}
  11d67c:	e1a00003 	mov	r0, r3
  11d680:	e24bd004 	sub	sp, fp, #4
  11d684:	e8bd8800 	pop	{fp, pc}

0011d688 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d688:	e92d4800 	push	{fp, lr}
  11d68c:	e28db004 	add	fp, sp, #4
  11d690:	e24dd010 	sub	sp, sp, #16
  11d694:	e50b0008 	str	r0, [fp, #-8]
  11d698:	e50b100c 	str	r1, [fp, #-12]
  11d69c:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d6a0:	e51b3008 	ldr	r3, [fp, #-8]
  11d6a4:	e5933014 	ldr	r3, [r3, #20]
  11d6a8:	e3530001 	cmp	r3, #1
  11d6ac:	1a000001 	bne	11d6b8 <tcp_shutdown+0x30>
    return ERR_CONN;
  11d6b0:	e3e0300a 	mvn	r3, #10
  11d6b4:	ea000030 	b	11d77c <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d6b8:	e51b300c 	ldr	r3, [fp, #-12]
  11d6bc:	e3530000 	cmp	r3, #0
  11d6c0:	0a000018 	beq	11d728 <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d6c4:	e51b3008 	ldr	r3, [fp, #-8]
  11d6c8:	e5d3301e 	ldrb	r3, [r3, #30]
  11d6cc:	e3833010 	orr	r3, r3, #16
  11d6d0:	e6ef2073 	uxtb	r2, r3
  11d6d4:	e51b3008 	ldr	r3, [fp, #-8]
  11d6d8:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d6dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d6e0:	e3530000 	cmp	r3, #0
  11d6e4:	0a000004 	beq	11d6fc <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d6e8:	e3a01001 	mov	r1, #1
  11d6ec:	e51b0008 	ldr	r0, [fp, #-8]
  11d6f0:	ebfffe8d 	bl	11d12c <tcp_close_shutdown>
  11d6f4:	e1a03000 	mov	r3, r0
  11d6f8:	ea00001f 	b	11d77c <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d6fc:	e51b3008 	ldr	r3, [fp, #-8]
  11d700:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d704:	e3530000 	cmp	r3, #0
  11d708:	0a000006 	beq	11d728 <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d70c:	e51b3008 	ldr	r3, [fp, #-8]
  11d710:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d714:	e1a00003 	mov	r0, r3
  11d718:	ebfff5e0 	bl	11aea0 <pbuf_free>
      pcb->refused_data = NULL;
  11d71c:	e51b3008 	ldr	r3, [fp, #-8]
  11d720:	e3a02000 	mov	r2, #0
  11d724:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d728:	e51b3010 	ldr	r3, [fp, #-16]
  11d72c:	e3530000 	cmp	r3, #0
  11d730:	0a000010 	beq	11d778 <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d734:	e51b3008 	ldr	r3, [fp, #-8]
  11d738:	e5933014 	ldr	r3, [r3, #20]
  11d73c:	e3530003 	cmp	r3, #3
  11d740:	3a00000a 	bcc	11d770 <tcp_shutdown+0xe8>
  11d744:	e3530004 	cmp	r3, #4
  11d748:	9a000001 	bls	11d754 <tcp_shutdown+0xcc>
  11d74c:	e3530007 	cmp	r3, #7
  11d750:	1a000006 	bne	11d770 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d754:	e51b300c 	ldr	r3, [fp, #-12]
  11d758:	e6ef3073 	uxtb	r3, r3
  11d75c:	e1a01003 	mov	r1, r3
  11d760:	e51b0008 	ldr	r0, [fp, #-8]
  11d764:	ebfffe70 	bl	11d12c <tcp_close_shutdown>
  11d768:	e1a03000 	mov	r3, r0
  11d76c:	ea000002 	b	11d77c <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d770:	e3e0300a 	mvn	r3, #10
  11d774:	ea000000 	b	11d77c <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d778:	e3a03000 	mov	r3, #0
}
  11d77c:	e1a00003 	mov	r0, r3
  11d780:	e24bd004 	sub	sp, fp, #4
  11d784:	e8bd8800 	pop	{fp, pc}

0011d788 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d788:	e92d4800 	push	{fp, lr}
  11d78c:	e28db004 	add	fp, sp, #4
  11d790:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d794:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d798:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d79c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7a0:	e5933014 	ldr	r3, [r3, #20]
  11d7a4:	e3530001 	cmp	r3, #1
  11d7a8:	1a000006 	bne	11d7c8 <tcp_abandon+0x40>
  11d7ac:	e3070f28 	movw	r0, #32552	; 0x7f28
  11d7b0:	e3400014 	movt	r0, #20
  11d7b4:	ebff9656 	bl	103114 <rt_kprintf>
  11d7b8:	e30011db 	movw	r1, #475	; 0x1db
  11d7bc:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11d7c0:	e3400014 	movt	r0, #20
  11d7c4:	ebffb645 	bl	10b0e0 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d7c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7cc:	e5933014 	ldr	r3, [r3, #20]
  11d7d0:	e353000a 	cmp	r3, #10
  11d7d4:	1a000007 	bne	11d7f8 <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d7d8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d7dc:	e30c0c50 	movw	r0, #52304	; 0xcc50
  11d7e0:	e3400015 	movt	r0, #21
  11d7e4:	eb0009a0 	bl	11fe6c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d7e8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d7ec:	e3a00002 	mov	r0, #2
  11d7f0:	ebffee9c 	bl	119268 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d7f4:	ea00007f 	b	11d9f8 <tcp_abandon+0x270>
    int send_rst = 0;
  11d7f8:	e3a03000 	mov	r3, #0
  11d7fc:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d800:	e3a03000 	mov	r3, #0
  11d804:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d808:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d80c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d810:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d814:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d818:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d81c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d820:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d824:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d828:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d82c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d830:	e5933010 	ldr	r3, [r3, #16]
  11d834:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d838:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d83c:	e5933014 	ldr	r3, [r3, #20]
  11d840:	e3530000 	cmp	r3, #0
  11d844:	1a00002a 	bne	11d8f4 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d848:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d84c:	e1d331ba 	ldrh	r3, [r3, #26]
  11d850:	e3530000 	cmp	r3, #0
  11d854:	0a000033 	beq	11d928 <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d858:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d85c:	e3403015 	movt	r3, #21
  11d860:	e5933000 	ldr	r3, [r3]
  11d864:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d868:	e1520003 	cmp	r2, r3
  11d86c:	1a000007 	bne	11d890 <tcp_abandon+0x108>
  11d870:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d874:	e3403015 	movt	r3, #21
  11d878:	e5933000 	ldr	r3, [r3]
  11d87c:	e593200c 	ldr	r2, [r3, #12]
  11d880:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d884:	e3403015 	movt	r3, #21
  11d888:	e5832000 	str	r2, [r3]
  11d88c:	ea000014 	b	11d8e4 <tcp_abandon+0x15c>
  11d890:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d894:	e3403015 	movt	r3, #21
  11d898:	e5933000 	ldr	r3, [r3]
  11d89c:	e50b3010 	str	r3, [fp, #-16]
  11d8a0:	ea00000c 	b	11d8d8 <tcp_abandon+0x150>
  11d8a4:	e51b3010 	ldr	r3, [fp, #-16]
  11d8a8:	e593300c 	ldr	r3, [r3, #12]
  11d8ac:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d8b0:	e1520003 	cmp	r2, r3
  11d8b4:	1a000004 	bne	11d8cc <tcp_abandon+0x144>
  11d8b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d8bc:	e593200c 	ldr	r2, [r3, #12]
  11d8c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d8c4:	e583200c 	str	r2, [r3, #12]
  11d8c8:	ea000005 	b	11d8e4 <tcp_abandon+0x15c>
  11d8cc:	e51b3010 	ldr	r3, [fp, #-16]
  11d8d0:	e593300c 	ldr	r3, [r3, #12]
  11d8d4:	e50b3010 	str	r3, [fp, #-16]
  11d8d8:	e51b3010 	ldr	r3, [fp, #-16]
  11d8dc:	e3530000 	cmp	r3, #0
  11d8e0:	1affffef 	bne	11d8a4 <tcp_abandon+0x11c>
  11d8e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d8e8:	e3a02000 	mov	r2, #0
  11d8ec:	e583200c 	str	r2, [r3, #12]
  11d8f0:	ea00000c 	b	11d928 <tcp_abandon+0x1a0>
      send_rst = reset;
  11d8f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d8f8:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d8fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d900:	e1d331ba 	ldrh	r3, [r3, #26]
  11d904:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d908:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d90c:	e30c0c40 	movw	r0, #52288	; 0xcc40
  11d910:	e3400015 	movt	r0, #21
  11d914:	eb000954 	bl	11fe6c <tcp_pcb_remove>
  11d918:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11d91c:	e3403015 	movt	r3, #21
  11d920:	e3a02001 	mov	r2, #1
  11d924:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d928:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d92c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d930:	e3530000 	cmp	r3, #0
  11d934:	0a000003 	beq	11d948 <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d938:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d93c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d940:	e1a00003 	mov	r0, r3
  11d944:	eb0006b7 	bl	11f428 <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d948:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d94c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d950:	e3530000 	cmp	r3, #0
  11d954:	0a000003 	beq	11d968 <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d958:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d95c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d960:	e1a00003 	mov	r0, r3
  11d964:	eb0006af 	bl	11f428 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d968:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d96c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d970:	e3530000 	cmp	r3, #0
  11d974:	0a000003 	beq	11d988 <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d978:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d97c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d980:	e1a00003 	mov	r0, r3
  11d984:	eb0006a7 	bl	11f428 <tcp_segs_free>
    if (send_rst) {
  11d988:	e51b3008 	ldr	r3, [fp, #-8]
  11d98c:	e3530000 	cmp	r3, #0
  11d990:	0a00000b 	beq	11d9c4 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d994:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d998:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d99c:	e2831004 	add	r1, r3, #4
  11d9a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9a4:	e1d331bc 	ldrh	r3, [r3, #28]
  11d9a8:	e58d3004 	str	r3, [sp, #4]
  11d9ac:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d9b0:	e58d3000 	str	r3, [sp]
  11d9b4:	e1a03001 	mov	r3, r1
  11d9b8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d9bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d9c0:	eb0023c7 	bl	1268e4 <tcp_rst>
    last_state = pcb->state;
  11d9c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9c8:	e5933014 	ldr	r3, [r3, #20]
  11d9cc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d9d0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d9d4:	e3a00002 	mov	r0, #2
  11d9d8:	ebffee22 	bl	119268 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d9dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d9e0:	e3530000 	cmp	r3, #0
  11d9e4:	0a000003 	beq	11d9f8 <tcp_abandon+0x270>
  11d9e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d9ec:	e3e0100c 	mvn	r1, #12
  11d9f0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11d9f4:	e12fff33 	blx	r3
}
  11d9f8:	e320f000 	nop	{0}
  11d9fc:	e24bd004 	sub	sp, fp, #4
  11da00:	e8bd8800 	pop	{fp, pc}

0011da04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11da04:	e92d4800 	push	{fp, lr}
  11da08:	e28db004 	add	fp, sp, #4
  11da0c:	e24dd008 	sub	sp, sp, #8
  11da10:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11da14:	e3a01001 	mov	r1, #1
  11da18:	e51b0008 	ldr	r0, [fp, #-8]
  11da1c:	ebffff59 	bl	11d788 <tcp_abandon>
}
  11da20:	e320f000 	nop	{0}
  11da24:	e24bd004 	sub	sp, fp, #4
  11da28:	e8bd8800 	pop	{fp, pc}

0011da2c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11da2c:	e92d4800 	push	{fp, lr}
  11da30:	e28db004 	add	fp, sp, #4
  11da34:	e24dd020 	sub	sp, sp, #32
  11da38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11da3c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11da40:	e1a03002 	mov	r3, r2
  11da44:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11da48:	e3a03004 	mov	r3, #4
  11da4c:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11da50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da54:	e3530000 	cmp	r3, #0
  11da58:	1a000002 	bne	11da68 <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11da5c:	e30938f8 	movw	r3, #39160	; 0x98f8
  11da60:	e3403014 	movt	r3, #20
  11da64:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11da68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da6c:	e3530000 	cmp	r3, #0
  11da70:	0a000002 	beq	11da80 <tcp_bind+0x54>
  11da74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da78:	e3530000 	cmp	r3, #0
  11da7c:	1a000001 	bne	11da88 <tcp_bind+0x5c>
    return ERR_VAL;
  11da80:	e3e03005 	mvn	r3, #5
  11da84:	ea000078 	b	11dc6c <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11da88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da8c:	e5933014 	ldr	r3, [r3, #20]
  11da90:	e3530000 	cmp	r3, #0
  11da94:	0a000008 	beq	11dabc <tcp_bind+0x90>
  11da98:	e3070f5c 	movw	r0, #32604	; 0x7f5c
  11da9c:	e3400014 	movt	r0, #20
  11daa0:	ebff959b 	bl	103114 <rt_kprintf>
  11daa4:	e300123f 	movw	r1, #575	; 0x23f
  11daa8:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11daac:	e3400014 	movt	r0, #20
  11dab0:	ebffb58a 	bl	10b0e0 <sys_arch_assert>
  11dab4:	e3e03005 	mvn	r3, #5
  11dab8:	ea00006b 	b	11dc6c <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dabc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dac0:	e5d33008 	ldrb	r3, [r3, #8]
  11dac4:	e2033004 	and	r3, r3, #4
  11dac8:	e3530000 	cmp	r3, #0
  11dacc:	0a000001 	beq	11dad8 <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11dad0:	e3a03003 	mov	r3, #3
  11dad4:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11dad8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11dadc:	e3530000 	cmp	r3, #0
  11dae0:	1a000007 	bne	11db04 <tcp_bind+0xd8>
    port = tcp_new_port();
  11dae4:	eb0001be 	bl	11e1e4 <tcp_new_port>
  11dae8:	e1a03000 	mov	r3, r0
  11daec:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11daf0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11daf4:	e3530000 	cmp	r3, #0
  11daf8:	1a00003d 	bne	11dbf4 <tcp_bind+0x1c8>
      return ERR_BUF;
  11dafc:	e3e03001 	mvn	r3, #1
  11db00:	ea000059 	b	11dc6c <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11db04:	e3a03000 	mov	r3, #0
  11db08:	e50b3008 	str	r3, [fp, #-8]
  11db0c:	ea000034 	b	11dbe4 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11db10:	e3073eac 	movw	r3, #32428	; 0x7eac
  11db14:	e3403014 	movt	r3, #20
  11db18:	e51b2008 	ldr	r2, [fp, #-8]
  11db1c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11db20:	e5933000 	ldr	r3, [r3]
  11db24:	e50b3010 	str	r3, [fp, #-16]
  11db28:	ea000027 	b	11dbcc <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11db2c:	e51b3010 	ldr	r3, [fp, #-16]
  11db30:	e1d331ba 	ldrh	r3, [r3, #26]
  11db34:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11db38:	e1520003 	cmp	r2, r3
  11db3c:	1a00001f 	bne	11dbc0 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db44:	e5d33008 	ldrb	r3, [r3, #8]
  11db48:	e2033004 	and	r3, r3, #4
  11db4c:	e3530000 	cmp	r3, #0
  11db50:	0a000004 	beq	11db68 <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11db54:	e51b3010 	ldr	r3, [fp, #-16]
  11db58:	e5d33008 	ldrb	r3, [r3, #8]
  11db5c:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db60:	e3530000 	cmp	r3, #0
  11db64:	1a000015 	bne	11dbc0 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11db68:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11db6c:	e3530000 	cmp	r3, #0
  11db70:	0a000010 	beq	11dbb8 <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11db74:	e51b3010 	ldr	r3, [fp, #-16]
  11db78:	e5933000 	ldr	r3, [r3]
  11db7c:	e3530000 	cmp	r3, #0
  11db80:	0a00000c 	beq	11dbb8 <tcp_bind+0x18c>
  11db84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11db88:	e3530000 	cmp	r3, #0
  11db8c:	0a000009 	beq	11dbb8 <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11db90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11db94:	e5933000 	ldr	r3, [r3]
  11db98:	e3530000 	cmp	r3, #0
  11db9c:	0a000005 	beq	11dbb8 <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11dba0:	e51b3010 	ldr	r3, [fp, #-16]
  11dba4:	e5932000 	ldr	r2, [r3]
  11dba8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbac:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11dbb0:	e1520003 	cmp	r2, r3
  11dbb4:	1a000001 	bne	11dbc0 <tcp_bind+0x194>
              return ERR_USE;
  11dbb8:	e3e03007 	mvn	r3, #7
  11dbbc:	ea00002a 	b	11dc6c <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11dbc0:	e51b3010 	ldr	r3, [fp, #-16]
  11dbc4:	e593300c 	ldr	r3, [r3, #12]
  11dbc8:	e50b3010 	str	r3, [fp, #-16]
  11dbcc:	e51b3010 	ldr	r3, [fp, #-16]
  11dbd0:	e3530000 	cmp	r3, #0
  11dbd4:	1affffd4 	bne	11db2c <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11dbd8:	e51b3008 	ldr	r3, [fp, #-8]
  11dbdc:	e2833001 	add	r3, r3, #1
  11dbe0:	e50b3008 	str	r3, [fp, #-8]
  11dbe4:	e51b2008 	ldr	r2, [fp, #-8]
  11dbe8:	e51b300c 	ldr	r3, [fp, #-12]
  11dbec:	e1520003 	cmp	r2, r3
  11dbf0:	baffffc6 	blt	11db10 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11dbf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbf8:	e3530000 	cmp	r3, #0
  11dbfc:	0a00000c 	beq	11dc34 <tcp_bind+0x208>
  11dc00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc04:	e5933000 	ldr	r3, [r3]
  11dc08:	e3530000 	cmp	r3, #0
  11dc0c:	0a000008 	beq	11dc34 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11dc10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc14:	e3530000 	cmp	r3, #0
  11dc18:	0a000002 	beq	11dc28 <tcp_bind+0x1fc>
  11dc1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc20:	e5933000 	ldr	r3, [r3]
  11dc24:	ea000000 	b	11dc2c <tcp_bind+0x200>
  11dc28:	e3a03000 	mov	r3, #0
  11dc2c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc30:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11dc34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc38:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11dc3c:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11dc40:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11dc44:	e3403015 	movt	r3, #21
  11dc48:	e5932000 	ldr	r2, [r3]
  11dc4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc50:	e583200c 	str	r2, [r3, #12]
  11dc54:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11dc58:	e3403015 	movt	r3, #21
  11dc5c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc60:	e5832000 	str	r2, [r3]
  11dc64:	eb002572 	bl	127234 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11dc68:	e3a03000 	mov	r3, #0
}
  11dc6c:	e1a00003 	mov	r0, r3
  11dc70:	e24bd004 	sub	sp, fp, #4
  11dc74:	e8bd8800 	pop	{fp, pc}

0011dc78 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11dc78:	e92d4800 	push	{fp, lr}
  11dc7c:	e28db004 	add	fp, sp, #4
  11dc80:	e24dd010 	sub	sp, sp, #16
  11dc84:	e50b0008 	str	r0, [fp, #-8]
  11dc88:	e50b100c 	str	r1, [fp, #-12]
  11dc8c:	e1a03002 	mov	r3, r2
  11dc90:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11dc94:	e51b000c 	ldr	r0, [fp, #-12]
  11dc98:	ebffff59 	bl	11da04 <tcp_abort>

  return ERR_ABRT;
  11dc9c:	e3e0300c 	mvn	r3, #12
}
  11dca0:	e1a00003 	mov	r0, r3
  11dca4:	e24bd004 	sub	sp, fp, #4
  11dca8:	e8bd8800 	pop	{fp, pc}

0011dcac <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11dcac:	e92d4800 	push	{fp, lr}
  11dcb0:	e28db004 	add	fp, sp, #4
  11dcb4:	e24dd008 	sub	sp, sp, #8
  11dcb8:	e50b0008 	str	r0, [fp, #-8]
  11dcbc:	e1a03001 	mov	r3, r1
  11dcc0:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11dcc4:	e55b3009 	ldrb	r3, [fp, #-9]
  11dcc8:	e3a02000 	mov	r2, #0
  11dccc:	e1a01003 	mov	r1, r3
  11dcd0:	e51b0008 	ldr	r0, [fp, #-8]
  11dcd4:	eb000003 	bl	11dce8 <tcp_listen_with_backlog_and_err>
  11dcd8:	e1a03000 	mov	r3, r0
}
  11dcdc:	e1a00003 	mov	r0, r3
  11dce0:	e24bd004 	sub	sp, fp, #4
  11dce4:	e8bd8800 	pop	{fp, pc}

0011dce8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11dce8:	e92d4800 	push	{fp, lr}
  11dcec:	e28db004 	add	fp, sp, #4
  11dcf0:	e24dd020 	sub	sp, sp, #32
  11dcf4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11dcf8:	e1a03001 	mov	r3, r1
  11dcfc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11dd00:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11dd04:	e3a03000 	mov	r3, #0
  11dd08:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11dd0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd10:	e5933014 	ldr	r3, [r3, #20]
  11dd14:	e3530000 	cmp	r3, #0
  11dd18:	0a000009 	beq	11dd44 <tcp_listen_with_backlog_and_err+0x5c>
  11dd1c:	e3070f84 	movw	r0, #32644	; 0x7f84
  11dd20:	e3400014 	movt	r0, #20
  11dd24:	ebff94fa 	bl	103114 <rt_kprintf>
  11dd28:	e30012af 	movw	r1, #687	; 0x2af
  11dd2c:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11dd30:	e3400014 	movt	r0, #20
  11dd34:	ebffb4e9 	bl	10b0e0 <sys_arch_assert>
  11dd38:	e3e0300e 	mvn	r3, #14
  11dd3c:	e54b3009 	strb	r3, [fp, #-9]
  11dd40:	ea000091 	b	11df8c <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11dd44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd48:	e5933014 	ldr	r3, [r3, #20]
  11dd4c:	e3530001 	cmp	r3, #1
  11dd50:	1a000004 	bne	11dd68 <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11dd54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd58:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11dd5c:	e3e03008 	mvn	r3, #8
  11dd60:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11dd64:	ea000088 	b	11df8c <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dd68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd6c:	e5d33008 	ldrb	r3, [r3, #8]
  11dd70:	e2033004 	and	r3, r3, #4
  11dd74:	e3530000 	cmp	r3, #0
  11dd78:	0a00001b 	beq	11ddec <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dd7c:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11dd80:	e3403015 	movt	r3, #21
  11dd84:	e5933000 	ldr	r3, [r3]
  11dd88:	e50b3008 	str	r3, [fp, #-8]
  11dd8c:	ea000013 	b	11dde0 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11dd90:	e51b3008 	ldr	r3, [fp, #-8]
  11dd94:	e1d321ba 	ldrh	r2, [r3, #26]
  11dd98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd9c:	e1d331ba 	ldrh	r3, [r3, #26]
  11dda0:	e1520003 	cmp	r2, r3
  11dda4:	1a00000a 	bne	11ddd4 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11dda8:	e51b3008 	ldr	r3, [fp, #-8]
  11ddac:	e5932000 	ldr	r2, [r3]
  11ddb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ddb4:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11ddb8:	e1520003 	cmp	r2, r3
  11ddbc:	1a000004 	bne	11ddd4 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11ddc0:	e3a03000 	mov	r3, #0
  11ddc4:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11ddc8:	e3e03007 	mvn	r3, #7
  11ddcc:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11ddd0:	ea00006d 	b	11df8c <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11ddd4:	e51b3008 	ldr	r3, [fp, #-8]
  11ddd8:	e593300c 	ldr	r3, [r3, #12]
  11dddc:	e50b3008 	str	r3, [fp, #-8]
  11dde0:	e51b3008 	ldr	r3, [fp, #-8]
  11dde4:	e3530000 	cmp	r3, #0
  11dde8:	1affffe8 	bne	11dd90 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11ddec:	e30022c7 	movw	r2, #711	; 0x2c7
  11ddf0:	e3071ec8 	movw	r1, #32456	; 0x7ec8
  11ddf4:	e3401014 	movt	r1, #20
  11ddf8:	e3a00003 	mov	r0, #3
  11ddfc:	ebffecb1 	bl	1190c8 <memp_malloc_fn>
  11de00:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11de04:	e51b3008 	ldr	r3, [fp, #-8]
  11de08:	e3530000 	cmp	r3, #0
  11de0c:	1a000002 	bne	11de1c <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11de10:	e3e03000 	mvn	r3, #0
  11de14:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11de18:	ea00005b 	b	11df8c <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11de1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de20:	e5932010 	ldr	r2, [r3, #16]
  11de24:	e51b3008 	ldr	r3, [fp, #-8]
  11de28:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11de2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de30:	e1d321ba 	ldrh	r2, [r3, #26]
  11de34:	e51b3008 	ldr	r3, [fp, #-8]
  11de38:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11de3c:	e51b3008 	ldr	r3, [fp, #-8]
  11de40:	e3a02001 	mov	r2, #1
  11de44:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11de48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de4c:	e5d32018 	ldrb	r2, [r3, #24]
  11de50:	e51b3008 	ldr	r3, [fp, #-8]
  11de54:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11de58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de5c:	e5d32008 	ldrb	r2, [r3, #8]
  11de60:	e51b3008 	ldr	r3, [fp, #-8]
  11de64:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11de68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de6c:	e5d3200a 	ldrb	r2, [r3, #10]
  11de70:	e51b3008 	ldr	r3, [fp, #-8]
  11de74:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11de78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de7c:	e5d32009 	ldrb	r2, [r3, #9]
  11de80:	e51b3008 	ldr	r3, [fp, #-8]
  11de84:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11de88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de8c:	e5932000 	ldr	r2, [r3]
  11de90:	e51b3008 	ldr	r3, [fp, #-8]
  11de94:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11de98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de9c:	e1d331ba 	ldrh	r3, [r3, #26]
  11dea0:	e3530000 	cmp	r3, #0
  11dea4:	0a000025 	beq	11df40 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11dea8:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11deac:	e3403015 	movt	r3, #21
  11deb0:	e5933000 	ldr	r3, [r3]
  11deb4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11deb8:	e1520003 	cmp	r2, r3
  11debc:	1a000007 	bne	11dee0 <tcp_listen_with_backlog_and_err+0x1f8>
  11dec0:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11dec4:	e3403015 	movt	r3, #21
  11dec8:	e5933000 	ldr	r3, [r3]
  11decc:	e593200c 	ldr	r2, [r3, #12]
  11ded0:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11ded4:	e3403015 	movt	r3, #21
  11ded8:	e5832000 	str	r2, [r3]
  11dedc:	ea000014 	b	11df34 <tcp_listen_with_backlog_and_err+0x24c>
  11dee0:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11dee4:	e3403015 	movt	r3, #21
  11dee8:	e5933000 	ldr	r3, [r3]
  11deec:	e50b3010 	str	r3, [fp, #-16]
  11def0:	ea00000c 	b	11df28 <tcp_listen_with_backlog_and_err+0x240>
  11def4:	e51b3010 	ldr	r3, [fp, #-16]
  11def8:	e593300c 	ldr	r3, [r3, #12]
  11defc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11df00:	e1520003 	cmp	r2, r3
  11df04:	1a000004 	bne	11df1c <tcp_listen_with_backlog_and_err+0x234>
  11df08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df0c:	e593200c 	ldr	r2, [r3, #12]
  11df10:	e51b3010 	ldr	r3, [fp, #-16]
  11df14:	e583200c 	str	r2, [r3, #12]
  11df18:	ea000005 	b	11df34 <tcp_listen_with_backlog_and_err+0x24c>
  11df1c:	e51b3010 	ldr	r3, [fp, #-16]
  11df20:	e593300c 	ldr	r3, [r3, #12]
  11df24:	e50b3010 	str	r3, [fp, #-16]
  11df28:	e51b3010 	ldr	r3, [fp, #-16]
  11df2c:	e3530000 	cmp	r3, #0
  11df30:	1affffef 	bne	11def4 <tcp_listen_with_backlog_and_err+0x20c>
  11df34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df38:	e3a02000 	mov	r2, #0
  11df3c:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11df40:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11df44:	e3a00002 	mov	r0, #2
  11df48:	ebffecc6 	bl	119268 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11df4c:	e51b2008 	ldr	r2, [fp, #-8]
  11df50:	e30d3c78 	movw	r3, #56440	; 0xdc78
  11df54:	e3403011 	movt	r3, #17
  11df58:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11df5c:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11df60:	e3403015 	movt	r3, #21
  11df64:	e5932000 	ldr	r2, [r3]
  11df68:	e51b3008 	ldr	r3, [fp, #-8]
  11df6c:	e583200c 	str	r2, [r3, #12]
  11df70:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11df74:	e3403015 	movt	r3, #21
  11df78:	e51b2008 	ldr	r2, [fp, #-8]
  11df7c:	e5832000 	str	r2, [r3]
  11df80:	eb0024ab 	bl	127234 <tcp_timer_needed>
  res = ERR_OK;
  11df84:	e3a03000 	mov	r3, #0
  11df88:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11df8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11df90:	e3530000 	cmp	r3, #0
  11df94:	0a000002 	beq	11dfa4 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11df98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11df9c:	e55b2009 	ldrb	r2, [fp, #-9]
  11dfa0:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11dfa4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11dfa8:	e1a00003 	mov	r0, r3
  11dfac:	e24bd004 	sub	sp, fp, #4
  11dfb0:	e8bd8800 	pop	{fp, pc}

0011dfb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11dfb4:	e92d4800 	push	{fp, lr}
  11dfb8:	e28db004 	add	fp, sp, #4
  11dfbc:	e24dd010 	sub	sp, sp, #16
  11dfc0:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11dfc4:	e51b3010 	ldr	r3, [fp, #-16]
  11dfc8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dfcc:	e51b2010 	ldr	r2, [fp, #-16]
  11dfd0:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dfd4:	e0833002 	add	r3, r3, r2
  11dfd8:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dfdc:	e51b3010 	ldr	r3, [fp, #-16]
  11dfe0:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dfe4:	e51b3010 	ldr	r3, [fp, #-16]
  11dfe8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11dfec:	e3530a01 	cmp	r3, #4096	; 0x1000
  11dff0:	31a03003 	movcc	r3, r3
  11dff4:	23a03a01 	movcs	r3, #4096	; 0x1000
  11dff8:	e6ff3073 	uxth	r3, r3
  11dffc:	e0823003 	add	r3, r2, r3
  11e000:	e51b2008 	ldr	r2, [fp, #-8]
  11e004:	e0423003 	sub	r3, r2, r3
  11e008:	e3530000 	cmp	r3, #0
  11e00c:	ba000008 	blt	11e034 <tcp_update_rcv_ann_wnd+0x80>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11e010:	e51b3010 	ldr	r3, [fp, #-16]
  11e014:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e018:	e51b3010 	ldr	r3, [fp, #-16]
  11e01c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11e020:	e51b3010 	ldr	r3, [fp, #-16]
  11e024:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e028:	e51b2008 	ldr	r2, [fp, #-8]
  11e02c:	e0423003 	sub	r3, r2, r3
  11e030:	ea00001f 	b	11e0b4 <tcp_update_rcv_ann_wnd+0x100>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11e034:	e51b3010 	ldr	r3, [fp, #-16]
  11e038:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e03c:	e51b3010 	ldr	r3, [fp, #-16]
  11e040:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e044:	e0423003 	sub	r3, r2, r3
  11e048:	e3530000 	cmp	r3, #0
  11e04c:	da000003 	ble	11e060 <tcp_update_rcv_ann_wnd+0xac>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11e050:	e51b3010 	ldr	r3, [fp, #-16]
  11e054:	e3a02000 	mov	r2, #0
  11e058:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e05c:	ea000013 	b	11e0b0 <tcp_update_rcv_ann_wnd+0xfc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11e060:	e51b3010 	ldr	r3, [fp, #-16]
  11e064:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11e068:	e51b3010 	ldr	r3, [fp, #-16]
  11e06c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11e070:	e0423003 	sub	r3, r2, r3
  11e074:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11e078:	e51b300c 	ldr	r3, [fp, #-12]
  11e07c:	e3530801 	cmp	r3, #65536	; 0x10000
  11e080:	3a000006 	bcc	11e0a0 <tcp_update_rcv_ann_wnd+0xec>
  11e084:	e3070fa8 	movw	r0, #32680	; 0x7fa8
  11e088:	e3400014 	movt	r0, #20
  11e08c:	ebff9420 	bl	103114 <rt_kprintf>
  11e090:	e3001303 	movw	r1, #771	; 0x303
  11e094:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11e098:	e3400014 	movt	r0, #20
  11e09c:	ebffb40f 	bl	10b0e0 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11e0a0:	e51b300c 	ldr	r3, [fp, #-12]
  11e0a4:	e6ff2073 	uxth	r2, r3
  11e0a8:	e51b3010 	ldr	r3, [fp, #-16]
  11e0ac:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11e0b0:	e3a03000 	mov	r3, #0
  }
}
  11e0b4:	e1a00003 	mov	r0, r3
  11e0b8:	e24bd004 	sub	sp, fp, #4
  11e0bc:	e8bd8800 	pop	{fp, pc}

0011e0c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11e0c0:	e92d4800 	push	{fp, lr}
  11e0c4:	e28db004 	add	fp, sp, #4
  11e0c8:	e24dd010 	sub	sp, sp, #16
  11e0cc:	e50b0010 	str	r0, [fp, #-16]
  11e0d0:	e1a03001 	mov	r3, r1
  11e0d4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11e0d8:	e51b3010 	ldr	r3, [fp, #-16]
  11e0dc:	e5933014 	ldr	r3, [r3, #20]
  11e0e0:	e3530001 	cmp	r3, #1
  11e0e4:	1a000006 	bne	11e104 <tcp_recved+0x44>
  11e0e8:	e3070fc4 	movw	r0, #32708	; 0x7fc4
  11e0ec:	e3400014 	movt	r0, #20
  11e0f0:	ebff9407 	bl	103114 <rt_kprintf>
  11e0f4:	e300131b 	movw	r1, #795	; 0x31b
  11e0f8:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11e0fc:	e3400014 	movt	r0, #20
  11e100:	ebffb3f6 	bl	10b0e0 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11e104:	e51b3010 	ldr	r3, [fp, #-16]
  11e108:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e10c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11e110:	e0823003 	add	r3, r2, r3
  11e114:	e6ff2073 	uxth	r2, r3
  11e118:	e51b3010 	ldr	r3, [fp, #-16]
  11e11c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
  11e120:	e51b3010 	ldr	r3, [fp, #-16]
  11e124:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e128:	e3530a02 	cmp	r3, #8192	; 0x2000
  11e12c:	9a000003 	bls	11e140 <tcp_recved+0x80>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e130:	e51b3010 	ldr	r3, [fp, #-16]
  11e134:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e138:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e13c:	ea000016 	b	11e19c <tcp_recved+0xdc>
  } else if (pcb->rcv_wnd == 0) {
  11e140:	e51b3010 	ldr	r3, [fp, #-16]
  11e144:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e148:	e3530000 	cmp	r3, #0
  11e14c:	1a000012 	bne	11e19c <tcp_recved+0xdc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11e150:	e51b3010 	ldr	r3, [fp, #-16]
  11e154:	e5933014 	ldr	r3, [r3, #20]
  11e158:	e3530007 	cmp	r3, #7
  11e15c:	0a000003 	beq	11e170 <tcp_recved+0xb0>
  11e160:	e51b3010 	ldr	r3, [fp, #-16]
  11e164:	e5933014 	ldr	r3, [r3, #20]
  11e168:	e3530009 	cmp	r3, #9
  11e16c:	1a000003 	bne	11e180 <tcp_recved+0xc0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e170:	e51b3010 	ldr	r3, [fp, #-16]
  11e174:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e178:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e17c:	ea000006 	b	11e19c <tcp_recved+0xdc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11e180:	e3070fec 	movw	r0, #32748	; 0x7fec
  11e184:	e3400014 	movt	r0, #20
  11e188:	ebff93e1 	bl	103114 <rt_kprintf>
  11e18c:	e3a01fca 	mov	r1, #808	; 0x328
  11e190:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11e194:	e3400014 	movt	r0, #20
  11e198:	ebffb3d0 	bl	10b0e0 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11e19c:	e51b0010 	ldr	r0, [fp, #-16]
  11e1a0:	ebffff83 	bl	11dfb4 <tcp_update_rcv_ann_wnd>
  11e1a4:	e1a03000 	mov	r3, r0
  11e1a8:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11e1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11e1b0:	e3530b02 	cmp	r3, #2048	; 0x800
  11e1b4:	ba000007 	blt	11e1d8 <tcp_recved+0x118>
    tcp_ack_now(pcb);
  11e1b8:	e51b3010 	ldr	r3, [fp, #-16]
  11e1bc:	e5d3301e 	ldrb	r3, [r3, #30]
  11e1c0:	e3833002 	orr	r3, r3, #2
  11e1c4:	e6ef2073 	uxtb	r2, r3
  11e1c8:	e51b3010 	ldr	r3, [fp, #-16]
  11e1cc:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11e1d0:	e51b0010 	ldr	r0, [fp, #-16]
  11e1d4:	eb001f5c 	bl	125f4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11e1d8:	e320f000 	nop	{0}
  11e1dc:	e24bd004 	sub	sp, fp, #4
  11e1e0:	e8bd8800 	pop	{fp, pc}

0011e1e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11e1e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11e1e8:	e28db000 	add	fp, sp, #0
  11e1ec:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11e1f0:	e3a03000 	mov	r3, #0
  11e1f4:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11e1f8:	e30d3030 	movw	r3, #53296	; 0xd030
  11e1fc:	e3403014 	movt	r3, #20
  11e200:	e1d320b0 	ldrh	r2, [r3]
  11e204:	e2823001 	add	r3, r2, #1
  11e208:	e6ff1073 	uxth	r1, r3
  11e20c:	e30d3030 	movw	r3, #53296	; 0xd030
  11e210:	e3403014 	movt	r3, #20
  11e214:	e1c310b0 	strh	r1, [r3]
  11e218:	e30f3fff 	movw	r3, #65535	; 0xffff
  11e21c:	e1520003 	cmp	r2, r3
  11e220:	1a000003 	bne	11e234 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11e224:	e30d3030 	movw	r3, #53296	; 0xd030
  11e228:	e3403014 	movt	r3, #20
  11e22c:	e3a02903 	mov	r2, #49152	; 0xc000
  11e230:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e234:	e3a03000 	mov	r3, #0
  11e238:	e54b3005 	strb	r3, [fp, #-5]
  11e23c:	ea00001e 	b	11e2bc <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e240:	e55b2005 	ldrb	r2, [fp, #-5]
  11e244:	e3073eac 	movw	r3, #32428	; 0x7eac
  11e248:	e3403014 	movt	r3, #20
  11e24c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e250:	e5933000 	ldr	r3, [r3]
  11e254:	e50b300c 	str	r3, [fp, #-12]
  11e258:	ea000011 	b	11e2a4 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11e25c:	e51b300c 	ldr	r3, [fp, #-12]
  11e260:	e1d321ba 	ldrh	r2, [r3, #26]
  11e264:	e30d3030 	movw	r3, #53296	; 0xd030
  11e268:	e3403014 	movt	r3, #20
  11e26c:	e1d330b0 	ldrh	r3, [r3]
  11e270:	e1520003 	cmp	r2, r3
  11e274:	1a000007 	bne	11e298 <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11e278:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e27c:	e2833001 	add	r3, r3, #1
  11e280:	e14b30b8 	strh	r3, [fp, #-8]
  11e284:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e288:	e3530901 	cmp	r3, #16384	; 0x4000
  11e28c:	3affffd9 	bcc	11e1f8 <tcp_new_port+0x14>
          return 0;
  11e290:	e3a03000 	mov	r3, #0
  11e294:	ea00000e 	b	11e2d4 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e298:	e51b300c 	ldr	r3, [fp, #-12]
  11e29c:	e593300c 	ldr	r3, [r3, #12]
  11e2a0:	e50b300c 	str	r3, [fp, #-12]
  11e2a4:	e51b300c 	ldr	r3, [fp, #-12]
  11e2a8:	e3530000 	cmp	r3, #0
  11e2ac:	1affffea 	bne	11e25c <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e2b0:	e55b3005 	ldrb	r3, [fp, #-5]
  11e2b4:	e2833001 	add	r3, r3, #1
  11e2b8:	e54b3005 	strb	r3, [fp, #-5]
  11e2bc:	e55b3005 	ldrb	r3, [fp, #-5]
  11e2c0:	e3530003 	cmp	r3, #3
  11e2c4:	9affffdd 	bls	11e240 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11e2c8:	e30d3030 	movw	r3, #53296	; 0xd030
  11e2cc:	e3403014 	movt	r3, #20
  11e2d0:	e1d330b0 	ldrh	r3, [r3]
}
  11e2d4:	e1a00003 	mov	r0, r3
  11e2d8:	e28bd000 	add	sp, fp, #0
  11e2dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11e2e0:	e12fff1e 	bx	lr

0011e2e4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11e2e4:	e92d4800 	push	{fp, lr}
  11e2e8:	e28db004 	add	fp, sp, #4
  11e2ec:	e24dd030 	sub	sp, sp, #48	; 0x30
  11e2f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11e2f4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11e2f8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11e2fc:	e1a03002 	mov	r3, r2
  11e300:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11e304:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e308:	e3530000 	cmp	r3, #0
  11e30c:	0a000002 	beq	11e31c <tcp_connect+0x38>
  11e310:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e314:	e3530000 	cmp	r3, #0
  11e318:	1a000001 	bne	11e324 <tcp_connect+0x40>
    return ERR_VAL;
  11e31c:	e3e03005 	mvn	r3, #5
  11e320:	ea000101 	b	11e72c <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11e324:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e328:	e5933014 	ldr	r3, [r3, #20]
  11e32c:	e3530000 	cmp	r3, #0
  11e330:	0a000008 	beq	11e358 <tcp_connect+0x74>
  11e334:	e3080010 	movw	r0, #32784	; 0x8010
  11e338:	e3400014 	movt	r0, #20
  11e33c:	ebff9374 	bl	103114 <rt_kprintf>
  11e340:	e3001373 	movw	r1, #883	; 0x373
  11e344:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11e348:	e3400014 	movt	r0, #20
  11e34c:	ebffb363 	bl	10b0e0 <sys_arch_assert>
  11e350:	e3e03009 	mvn	r3, #9
  11e354:	ea0000f4 	b	11e72c <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11e358:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e35c:	e3530000 	cmp	r3, #0
  11e360:	0a000002 	beq	11e370 <tcp_connect+0x8c>
  11e364:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e368:	e5933000 	ldr	r3, [r3]
  11e36c:	ea000000 	b	11e374 <tcp_connect+0x90>
  11e370:	e3a03000 	mov	r3, #0
  11e374:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e378:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e37c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e380:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e384:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e388:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e38c:	e3530000 	cmp	r3, #0
  11e390:	0a000003 	beq	11e3a4 <tcp_connect+0xc0>
  11e394:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e398:	e5933000 	ldr	r3, [r3]
  11e39c:	e3530000 	cmp	r3, #0
  11e3a0:	1a000018 	bne	11e408 <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e3a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3a8:	e2833004 	add	r3, r3, #4
  11e3ac:	e1a00003 	mov	r0, r3
  11e3b0:	eb004b73 	bl	131184 <ip4_route>
  11e3b4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e3b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3bc:	e3530000 	cmp	r3, #0
  11e3c0:	0a000002 	beq	11e3d0 <tcp_connect+0xec>
  11e3c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3c8:	e2833004 	add	r3, r3, #4
  11e3cc:	ea000000 	b	11e3d4 <tcp_connect+0xf0>
  11e3d0:	e3a03000 	mov	r3, #0
  11e3d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e3d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3dc:	e3530000 	cmp	r3, #0
  11e3e0:	0a000002 	beq	11e3f0 <tcp_connect+0x10c>
  11e3e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e3e8:	e3530000 	cmp	r3, #0
  11e3ec:	1a000001 	bne	11e3f8 <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e3f0:	e3e03003 	mvn	r3, #3
  11e3f4:	ea0000cc 	b	11e72c <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e3f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e3fc:	e5932000 	ldr	r2, [r3]
  11e400:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e404:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e408:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e40c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e410:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e414:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e418:	e1d331ba 	ldrh	r3, [r3, #26]
  11e41c:	e3530000 	cmp	r3, #0
  11e420:	1a00000a 	bne	11e450 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e424:	ebffff6e 	bl	11e1e4 <tcp_new_port>
  11e428:	e1a03000 	mov	r3, r0
  11e42c:	e1a02003 	mov	r2, r3
  11e430:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e434:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e438:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e43c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e440:	e3530000 	cmp	r3, #0
  11e444:	1a000035 	bne	11e520 <tcp_connect+0x23c>
      return ERR_BUF;
  11e448:	e3e03001 	mvn	r3, #1
  11e44c:	ea0000b6 	b	11e72c <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e450:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e454:	e5d33008 	ldrb	r3, [r3, #8]
  11e458:	e2033004 	and	r3, r3, #4
  11e45c:	e3530000 	cmp	r3, #0
  11e460:	0a00002e 	beq	11e520 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e464:	e3a03002 	mov	r3, #2
  11e468:	e50b300c 	str	r3, [fp, #-12]
  11e46c:	ea000028 	b	11e514 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e470:	e3073eac 	movw	r3, #32428	; 0x7eac
  11e474:	e3403014 	movt	r3, #20
  11e478:	e51b200c 	ldr	r2, [fp, #-12]
  11e47c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e480:	e5933000 	ldr	r3, [r3]
  11e484:	e50b3008 	str	r3, [fp, #-8]
  11e488:	ea00001b 	b	11e4fc <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e48c:	e51b3008 	ldr	r3, [fp, #-8]
  11e490:	e1d321ba 	ldrh	r2, [r3, #26]
  11e494:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e498:	e1d331ba 	ldrh	r3, [r3, #26]
  11e49c:	e1520003 	cmp	r2, r3
  11e4a0:	1a000012 	bne	11e4f0 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e4a4:	e51b3008 	ldr	r3, [fp, #-8]
  11e4a8:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e4ac:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e4b0:	e1520003 	cmp	r2, r3
  11e4b4:	1a00000d 	bne	11e4f0 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e4b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e4bc:	e5932000 	ldr	r2, [r3]
  11e4c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e4c4:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e4c8:	e1520003 	cmp	r2, r3
  11e4cc:	1a000007 	bne	11e4f0 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e4d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4d4:	e5932004 	ldr	r2, [r3, #4]
  11e4d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e4dc:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e4e0:	e1520003 	cmp	r2, r3
  11e4e4:	1a000001 	bne	11e4f0 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e4e8:	e3e03007 	mvn	r3, #7
  11e4ec:	ea00008e 	b	11e72c <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e4f0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4f4:	e593300c 	ldr	r3, [r3, #12]
  11e4f8:	e50b3008 	str	r3, [fp, #-8]
  11e4fc:	e51b3008 	ldr	r3, [fp, #-8]
  11e500:	e3530000 	cmp	r3, #0
  11e504:	1affffe0 	bne	11e48c <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e508:	e51b300c 	ldr	r3, [fp, #-12]
  11e50c:	e2833001 	add	r3, r3, #1
  11e510:	e50b300c 	str	r3, [fp, #-12]
  11e514:	e51b300c 	ldr	r3, [fp, #-12]
  11e518:	e3530003 	cmp	r3, #3
  11e51c:	daffffd3 	ble	11e470 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e520:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e524:	eb0006bc 	bl	12001c <tcp_next_iss>
  11e528:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e52c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e530:	e3a02000 	mov	r2, #0
  11e534:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e538:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e53c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e540:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e544:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e548:	e2432001 	sub	r2, r3, #1
  11e54c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e550:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e558:	e2432001 	sub	r2, r3, #1
  11e55c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e560:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e568:	e2432001 	sub	r2, r3, #1
  11e56c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e570:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e574:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e578:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e57c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e584:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e588:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e58c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e594:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e598:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e59c:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e5a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5a4:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e5a8:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e5ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5b0:	e3a02f86 	mov	r2, #536	; 0x218
  11e5b4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e5b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5bc:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e5c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5c4:	e2833004 	add	r3, r3, #4
  11e5c8:	e1a01003 	mov	r1, r3
  11e5cc:	e1a00002 	mov	r0, r2
  11e5d0:	eb0006a6 	bl	120070 <tcp_eff_send_mss_impl>
  11e5d4:	e1a03000 	mov	r3, r0
  11e5d8:	e1a02003 	mov	r2, r3
  11e5dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5e0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e5e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5e8:	e3a02001 	mov	r2, #1
  11e5ec:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e5f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5f4:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e5f8:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e5fc:	e3a01002 	mov	r1, #2
  11e600:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e604:	eb001d01 	bl	125a10 <tcp_enqueue_flags>
  11e608:	e1a03000 	mov	r3, r0
  11e60c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e610:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e614:	e3530000 	cmp	r3, #0
  11e618:	1a000042 	bne	11e728 <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e61c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e620:	e3a02002 	mov	r2, #2
  11e624:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e628:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e62c:	e3530000 	cmp	r3, #0
  11e630:	0a000025 	beq	11e6cc <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e634:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11e638:	e3403015 	movt	r3, #21
  11e63c:	e5933000 	ldr	r3, [r3]
  11e640:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e644:	e1520003 	cmp	r2, r3
  11e648:	1a000007 	bne	11e66c <tcp_connect+0x388>
  11e64c:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11e650:	e3403015 	movt	r3, #21
  11e654:	e5933000 	ldr	r3, [r3]
  11e658:	e593200c 	ldr	r2, [r3, #12]
  11e65c:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11e660:	e3403015 	movt	r3, #21
  11e664:	e5832000 	str	r2, [r3]
  11e668:	ea000014 	b	11e6c0 <tcp_connect+0x3dc>
  11e66c:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11e670:	e3403015 	movt	r3, #21
  11e674:	e5933000 	ldr	r3, [r3]
  11e678:	e50b3010 	str	r3, [fp, #-16]
  11e67c:	ea00000c 	b	11e6b4 <tcp_connect+0x3d0>
  11e680:	e51b3010 	ldr	r3, [fp, #-16]
  11e684:	e593300c 	ldr	r3, [r3, #12]
  11e688:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e68c:	e1520003 	cmp	r2, r3
  11e690:	1a000004 	bne	11e6a8 <tcp_connect+0x3c4>
  11e694:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e698:	e593200c 	ldr	r2, [r3, #12]
  11e69c:	e51b3010 	ldr	r3, [fp, #-16]
  11e6a0:	e583200c 	str	r2, [r3, #12]
  11e6a4:	ea000005 	b	11e6c0 <tcp_connect+0x3dc>
  11e6a8:	e51b3010 	ldr	r3, [fp, #-16]
  11e6ac:	e593300c 	ldr	r3, [r3, #12]
  11e6b0:	e50b3010 	str	r3, [fp, #-16]
  11e6b4:	e51b3010 	ldr	r3, [fp, #-16]
  11e6b8:	e3530000 	cmp	r3, #0
  11e6bc:	1affffef 	bne	11e680 <tcp_connect+0x39c>
  11e6c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6c4:	e3a02000 	mov	r2, #0
  11e6c8:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e6cc:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11e6d0:	e3403015 	movt	r3, #21
  11e6d4:	e5932000 	ldr	r2, [r3]
  11e6d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6dc:	e583200c 	str	r2, [r3, #12]
  11e6e0:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11e6e4:	e3403015 	movt	r3, #21
  11e6e8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e6ec:	e5832000 	str	r2, [r3]
  11e6f0:	eb0022cf 	bl	127234 <tcp_timer_needed>
  11e6f4:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11e6f8:	e3403015 	movt	r3, #21
  11e6fc:	e3a02001 	mov	r2, #1
  11e700:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e704:	e30c3a50 	movw	r3, #51792	; 0xca50
  11e708:	e3403015 	movt	r3, #21
  11e70c:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e710:	e2832001 	add	r2, r3, #1
  11e714:	e30c3a50 	movw	r3, #51792	; 0xca50
  11e718:	e3403015 	movt	r3, #21
  11e71c:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e720:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e724:	eb001e08 	bl	125f4c <tcp_output>
  }
  return ret;
  11e728:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e72c:	e1a00003 	mov	r0, r3
  11e730:	e24bd004 	sub	sp, fp, #4
  11e734:	e8bd8800 	pop	{fp, pc}

0011e738 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e738:	e92d4800 	push	{fp, lr}
  11e73c:	e28db004 	add	fp, sp, #4
  11e740:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e744:	e3a03000 	mov	r3, #0
  11e748:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e74c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11e750:	e3403015 	movt	r3, #21
  11e754:	e5933000 	ldr	r3, [r3]
  11e758:	e2832001 	add	r2, r3, #1
  11e75c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11e760:	e3403015 	movt	r3, #21
  11e764:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e768:	e30e3249 	movw	r3, #57929	; 0xe249
  11e76c:	e3403014 	movt	r3, #20
  11e770:	e5d33000 	ldrb	r3, [r3]
  11e774:	e2833001 	add	r3, r3, #1
  11e778:	e6ef2073 	uxtb	r2, r3
  11e77c:	e30e3249 	movw	r3, #57929	; 0xe249
  11e780:	e3403014 	movt	r3, #20
  11e784:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e788:	e3a03000 	mov	r3, #0
  11e78c:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e790:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11e794:	e3403015 	movt	r3, #21
  11e798:	e5933000 	ldr	r3, [r3]
  11e79c:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e7a0:	ea0001f2 	b	11ef70 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e7a4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7a8:	e5933014 	ldr	r3, [r3, #20]
  11e7ac:	e3530000 	cmp	r3, #0
  11e7b0:	1a000006 	bne	11e7d0 <tcp_slowtmr+0x98>
  11e7b4:	e3080040 	movw	r0, #32832	; 0x8040
  11e7b8:	e3400014 	movt	r0, #20
  11e7bc:	ebff9254 	bl	103114 <rt_kprintf>
  11e7c0:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e7c4:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11e7c8:	e3400014 	movt	r0, #20
  11e7cc:	ebffb243 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e7d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e7d4:	e5933014 	ldr	r3, [r3, #20]
  11e7d8:	e3530001 	cmp	r3, #1
  11e7dc:	1a000006 	bne	11e7fc <tcp_slowtmr+0xc4>
  11e7e0:	e308006c 	movw	r0, #32876	; 0x806c
  11e7e4:	e3400014 	movt	r0, #20
  11e7e8:	ebff9249 	bl	103114 <rt_kprintf>
  11e7ec:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e7f0:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11e7f4:	e3400014 	movt	r0, #20
  11e7f8:	ebffb238 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e7fc:	e51b3008 	ldr	r3, [fp, #-8]
  11e800:	e5933014 	ldr	r3, [r3, #20]
  11e804:	e353000a 	cmp	r3, #10
  11e808:	1a000006 	bne	11e828 <tcp_slowtmr+0xf0>
  11e80c:	e3080098 	movw	r0, #32920	; 0x8098
  11e810:	e3400014 	movt	r0, #20
  11e814:	ebff923e 	bl	103114 <rt_kprintf>
  11e818:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e81c:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11e820:	e3400014 	movt	r0, #20
  11e824:	ebffb22d 	bl	10b0e0 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e828:	e51b3008 	ldr	r3, [fp, #-8]
  11e82c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e830:	e30e3249 	movw	r3, #57929	; 0xe249
  11e834:	e3403014 	movt	r3, #20
  11e838:	e5d33000 	ldrb	r3, [r3]
  11e83c:	e1520003 	cmp	r2, r3
  11e840:	1a000003 	bne	11e854 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e844:	e51b3008 	ldr	r3, [fp, #-8]
  11e848:	e593300c 	ldr	r3, [r3, #12]
  11e84c:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e850:	ea0001c6 	b	11ef70 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e854:	e30e3249 	movw	r3, #57929	; 0xe249
  11e858:	e3403014 	movt	r3, #20
  11e85c:	e5d32000 	ldrb	r2, [r3]
  11e860:	e51b3008 	ldr	r3, [fp, #-8]
  11e864:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e868:	e3a03000 	mov	r3, #0
  11e86c:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e870:	e3a03000 	mov	r3, #0
  11e874:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e878:	e51b3008 	ldr	r3, [fp, #-8]
  11e87c:	e5933014 	ldr	r3, [r3, #20]
  11e880:	e3530002 	cmp	r3, #2
  11e884:	1a000007 	bne	11e8a8 <tcp_slowtmr+0x170>
  11e888:	e51b3008 	ldr	r3, [fp, #-8]
  11e88c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e890:	e3530003 	cmp	r3, #3
  11e894:	9a000003 	bls	11e8a8 <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e898:	e55b300d 	ldrb	r3, [fp, #-13]
  11e89c:	e2833001 	add	r3, r3, #1
  11e8a0:	e54b300d 	strb	r3, [fp, #-13]
  11e8a4:	ea000089 	b	11ead0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e8a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8ac:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e8b0:	e353000b 	cmp	r3, #11
  11e8b4:	9a000003 	bls	11e8c8 <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e8b8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e8bc:	e2833001 	add	r3, r3, #1
  11e8c0:	e54b300d 	strb	r3, [fp, #-13]
  11e8c4:	ea000081 	b	11ead0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e8c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8cc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8d0:	e3530000 	cmp	r3, #0
  11e8d4:	0a000029 	beq	11e980 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e8d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8dc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8e0:	e2432001 	sub	r2, r3, #1
  11e8e4:	e3073ea4 	movw	r3, #32420	; 0x7ea4
  11e8e8:	e3403014 	movt	r3, #20
  11e8ec:	e7d33002 	ldrb	r3, [r3, r2]
  11e8f0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e8f4:	e51b3008 	ldr	r3, [fp, #-8]
  11e8f8:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e8fc:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e900:	e1520003 	cmp	r2, r3
  11e904:	9a000005 	bls	11e920 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e908:	e51b3008 	ldr	r3, [fp, #-8]
  11e90c:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e910:	e2833001 	add	r3, r3, #1
  11e914:	e6ef2073 	uxtb	r2, r3
  11e918:	e51b3008 	ldr	r3, [fp, #-8]
  11e91c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e920:	e51b3008 	ldr	r3, [fp, #-8]
  11e924:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e928:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e92c:	e1520003 	cmp	r2, r3
  11e930:	8a000066 	bhi	11ead0 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e934:	e51b0008 	ldr	r0, [fp, #-8]
  11e938:	eb00217f 	bl	126f3c <tcp_zero_window_probe>
  11e93c:	e1a03000 	mov	r3, r0
  11e940:	e3530000 	cmp	r3, #0
  11e944:	1a000061 	bne	11ead0 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e948:	e51b3008 	ldr	r3, [fp, #-8]
  11e94c:	e3a02000 	mov	r2, #0
  11e950:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e954:	e51b3008 	ldr	r3, [fp, #-8]
  11e958:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e95c:	e3530006 	cmp	r3, #6
  11e960:	8a00005a 	bhi	11ead0 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e964:	e51b3008 	ldr	r3, [fp, #-8]
  11e968:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e96c:	e2833001 	add	r3, r3, #1
  11e970:	e6ef2073 	uxtb	r2, r3
  11e974:	e51b3008 	ldr	r3, [fp, #-8]
  11e978:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e97c:	ea000053 	b	11ead0 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e980:	e51b3008 	ldr	r3, [fp, #-8]
  11e984:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e988:	e3530000 	cmp	r3, #0
  11e98c:	ba000007 	blt	11e9b0 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e990:	e51b3008 	ldr	r3, [fp, #-8]
  11e994:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e998:	e6ff3073 	uxth	r3, r3
  11e99c:	e2833001 	add	r3, r3, #1
  11e9a0:	e6ff3073 	uxth	r3, r3
  11e9a4:	e6bf2073 	sxth	r2, r3
  11e9a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9ac:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e9b0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9b4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e9b8:	e3530000 	cmp	r3, #0
  11e9bc:	0a000043 	beq	11ead0 <tcp_slowtmr+0x398>
  11e9c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9c4:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e9c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9cc:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e9d0:	e1520003 	cmp	r2, r3
  11e9d4:	ba00003d 	blt	11ead0 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e9d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9dc:	e5933014 	ldr	r3, [r3, #20]
  11e9e0:	e3530002 	cmp	r3, #2
  11e9e4:	0a000015 	beq	11ea40 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9ec:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e9f0:	e353000c 	cmp	r3, #12
  11e9f4:	31a03003 	movcc	r3, r3
  11e9f8:	23a0300c 	movcs	r3, #12
  11e9fc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11ea00:	e51b3008 	ldr	r3, [fp, #-8]
  11ea04:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11ea08:	e1a031c3 	asr	r3, r3, #3
  11ea0c:	e6bf3073 	sxth	r3, r3
  11ea10:	e1a02003 	mov	r2, r3
  11ea14:	e51b3008 	ldr	r3, [fp, #-8]
  11ea18:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11ea1c:	e0822003 	add	r2, r2, r3
  11ea20:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11ea24:	e3073e94 	movw	r3, #32404	; 0x7e94
  11ea28:	e3403014 	movt	r3, #20
  11ea2c:	e7d33001 	ldrb	r3, [r3, r1]
  11ea30:	e1a03312 	lsl	r3, r2, r3
  11ea34:	e6bf2073 	sxth	r2, r3
  11ea38:	e51b3008 	ldr	r3, [fp, #-8]
  11ea3c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11ea40:	e51b3008 	ldr	r3, [fp, #-8]
  11ea44:	e3a02000 	mov	r2, #0
  11ea48:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11ea4c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea50:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11ea54:	e51b3008 	ldr	r3, [fp, #-8]
  11ea58:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11ea5c:	e1520003 	cmp	r2, r3
  11ea60:	31a03002 	movcc	r3, r2
  11ea64:	21a03003 	movcs	r3, r3
  11ea68:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11ea6c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11ea70:	e1a030a3 	lsr	r3, r3, #1
  11ea74:	e6ff2073 	uxth	r2, r3
  11ea78:	e51b3008 	ldr	r3, [fp, #-8]
  11ea7c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11ea80:	e51b3008 	ldr	r3, [fp, #-8]
  11ea84:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11ea88:	e51b3008 	ldr	r3, [fp, #-8]
  11ea8c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11ea90:	e1a03083 	lsl	r3, r3, #1
  11ea94:	e6ff3073 	uxth	r3, r3
  11ea98:	e1520003 	cmp	r2, r3
  11ea9c:	2a000005 	bcs	11eab8 <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11eaa0:	e51b3008 	ldr	r3, [fp, #-8]
  11eaa4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11eaa8:	e1a03083 	lsl	r3, r3, #1
  11eaac:	e6ff2073 	uxth	r2, r3
  11eab0:	e51b3008 	ldr	r3, [fp, #-8]
  11eab4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11eab8:	e51b3008 	ldr	r3, [fp, #-8]
  11eabc:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11eac0:	e51b3008 	ldr	r3, [fp, #-8]
  11eac4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11eac8:	e51b0008 	ldr	r0, [fp, #-8]
  11eacc:	eb002001 	bl	126ad8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11ead0:	e51b3008 	ldr	r3, [fp, #-8]
  11ead4:	e5933014 	ldr	r3, [r3, #20]
  11ead8:	e3530006 	cmp	r3, #6
  11eadc:	1a00000f 	bne	11eb20 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11eae0:	e51b3008 	ldr	r3, [fp, #-8]
  11eae4:	e5d3301e 	ldrb	r3, [r3, #30]
  11eae8:	e2033010 	and	r3, r3, #16
  11eaec:	e3530000 	cmp	r3, #0
  11eaf0:	0a00000a 	beq	11eb20 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eaf4:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11eaf8:	e3403015 	movt	r3, #21
  11eafc:	e5932000 	ldr	r2, [r3]
  11eb00:	e51b3008 	ldr	r3, [fp, #-8]
  11eb04:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eb08:	e0423003 	sub	r3, r2, r3
  11eb0c:	e3530028 	cmp	r3, #40	; 0x28
  11eb10:	9a000002 	bls	11eb20 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11eb14:	e55b300d 	ldrb	r3, [fp, #-13]
  11eb18:	e2833001 	add	r3, r3, #1
  11eb1c:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eb20:	e51b3008 	ldr	r3, [fp, #-8]
  11eb24:	e5d33008 	ldrb	r3, [r3, #8]
  11eb28:	e2033008 	and	r3, r3, #8
  11eb2c:	e3530000 	cmp	r3, #0
  11eb30:	0a000044 	beq	11ec48 <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11eb34:	e51b3008 	ldr	r3, [fp, #-8]
  11eb38:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eb3c:	e3530004 	cmp	r3, #4
  11eb40:	0a000003 	beq	11eb54 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11eb44:	e51b3008 	ldr	r3, [fp, #-8]
  11eb48:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11eb4c:	e3530007 	cmp	r3, #7
  11eb50:	1a00003c 	bne	11ec48 <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb54:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11eb58:	e3403015 	movt	r3, #21
  11eb5c:	e5932000 	ldr	r2, [r3]
  11eb60:	e51b3008 	ldr	r3, [fp, #-8]
  11eb64:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eb68:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11eb6c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb70:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11eb74:	e51b3008 	ldr	r3, [fp, #-8]
  11eb78:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11eb7c:	e51b0008 	ldr	r0, [fp, #-8]
  11eb80:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11eb84:	e0030390 	mul	r3, r0, r3
  11eb88:	e0822003 	add	r2, r2, r3
  11eb8c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11eb90:	e3413062 	movt	r3, #4194	; 0x1062
  11eb94:	e0832392 	umull	r2, r3, r2, r3
  11eb98:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb9c:	e1510003 	cmp	r1, r3
  11eba0:	9a000006 	bls	11ebc0 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11eba4:	e55b300d 	ldrb	r3, [fp, #-13]
  11eba8:	e2833001 	add	r3, r3, #1
  11ebac:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11ebb0:	e55b300e 	ldrb	r3, [fp, #-14]
  11ebb4:	e2833001 	add	r3, r3, #1
  11ebb8:	e54b300e 	strb	r3, [fp, #-14]
  11ebbc:	ea000021 	b	11ec48 <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ebc0:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11ebc4:	e3403015 	movt	r3, #21
  11ebc8:	e5932000 	ldr	r2, [r3]
  11ebcc:	e51b3008 	ldr	r3, [fp, #-8]
  11ebd0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ebd4:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11ebd8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebdc:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11ebe0:	e51b3008 	ldr	r3, [fp, #-8]
  11ebe4:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ebe8:	e1a00003 	mov	r0, r3
  11ebec:	e51b3008 	ldr	r3, [fp, #-8]
  11ebf0:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11ebf4:	e0030093 	mul	r3, r3, r0
  11ebf8:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11ebfc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11ec00:	e3413062 	movt	r3, #4194	; 0x1062
  11ec04:	e0832392 	umull	r2, r3, r2, r3
  11ec08:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ec0c:	e1510003 	cmp	r1, r3
  11ec10:	9a00000c 	bls	11ec48 <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11ec14:	e51b0008 	ldr	r0, [fp, #-8]
  11ec18:	eb002079 	bl	126e04 <tcp_keepalive>
  11ec1c:	e1a03000 	mov	r3, r0
  11ec20:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11ec24:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ec28:	e3530000 	cmp	r3, #0
  11ec2c:	1a000005 	bne	11ec48 <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11ec30:	e51b3008 	ldr	r3, [fp, #-8]
  11ec34:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ec38:	e2833001 	add	r3, r3, #1
  11ec3c:	e6ef2073 	uxtb	r2, r3
  11ec40:	e51b3008 	ldr	r3, [fp, #-8]
  11ec44:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11ec48:	e51b3008 	ldr	r3, [fp, #-8]
  11ec4c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ec50:	e3530000 	cmp	r3, #0
  11ec54:	0a000013 	beq	11eca8 <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11ec58:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11ec5c:	e3403015 	movt	r3, #21
  11ec60:	e5932000 	ldr	r2, [r3]
  11ec64:	e51b3008 	ldr	r3, [fp, #-8]
  11ec68:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ec6c:	e0422003 	sub	r2, r2, r3
  11ec70:	e51b3008 	ldr	r3, [fp, #-8]
  11ec74:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11ec78:	e1a01003 	mov	r1, r3
  11ec7c:	e3a03006 	mov	r3, #6
  11ec80:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11ec84:	e1520003 	cmp	r2, r3
  11ec88:	3a000006 	bcc	11eca8 <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11ec8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ec90:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ec94:	e1a00003 	mov	r0, r3
  11ec98:	eb0001e2 	bl	11f428 <tcp_segs_free>
      pcb->ooseq = NULL;
  11ec9c:	e51b3008 	ldr	r3, [fp, #-8]
  11eca0:	e3a02000 	mov	r2, #0
  11eca4:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11eca8:	e51b3008 	ldr	r3, [fp, #-8]
  11ecac:	e5933014 	ldr	r3, [r3, #20]
  11ecb0:	e3530003 	cmp	r3, #3
  11ecb4:	1a00000a 	bne	11ece4 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ecb8:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11ecbc:	e3403015 	movt	r3, #21
  11ecc0:	e5932000 	ldr	r2, [r3]
  11ecc4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecc8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eccc:	e0423003 	sub	r3, r2, r3
  11ecd0:	e3530028 	cmp	r3, #40	; 0x28
  11ecd4:	9a000002 	bls	11ece4 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11ecd8:	e55b300d 	ldrb	r3, [fp, #-13]
  11ecdc:	e2833001 	add	r3, r3, #1
  11ece0:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11ece4:	e51b3008 	ldr	r3, [fp, #-8]
  11ece8:	e5933014 	ldr	r3, [r3, #20]
  11ecec:	e3530009 	cmp	r3, #9
  11ecf0:	1a00000a 	bne	11ed20 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ecf4:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11ecf8:	e3403015 	movt	r3, #21
  11ecfc:	e5932000 	ldr	r2, [r3]
  11ed00:	e51b3008 	ldr	r3, [fp, #-8]
  11ed04:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ed08:	e0423003 	sub	r3, r2, r3
  11ed0c:	e35300f0 	cmp	r3, #240	; 0xf0
  11ed10:	9a000002 	bls	11ed20 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11ed14:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed18:	e2833001 	add	r3, r3, #1
  11ed1c:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ed20:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed24:	e3530000 	cmp	r3, #0
  11ed28:	0a00005d 	beq	11eea4 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11ed2c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed30:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11ed34:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11ed38:	e51b0008 	ldr	r0, [fp, #-8]
  11ed3c:	eb000410 	bl	11fd84 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11ed40:	e51b300c 	ldr	r3, [fp, #-12]
  11ed44:	e3530000 	cmp	r3, #0
  11ed48:	0a000011 	beq	11ed94 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11ed4c:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11ed50:	e3403015 	movt	r3, #21
  11ed54:	e5933000 	ldr	r3, [r3]
  11ed58:	e51b2008 	ldr	r2, [fp, #-8]
  11ed5c:	e1520003 	cmp	r2, r3
  11ed60:	1a000006 	bne	11ed80 <tcp_slowtmr+0x648>
  11ed64:	e30800c8 	movw	r0, #32968	; 0x80c8
  11ed68:	e3400014 	movt	r0, #20
  11ed6c:	ebff90e8 	bl	103114 <rt_kprintf>
  11ed70:	e3001484 	movw	r1, #1156	; 0x484
  11ed74:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11ed78:	e3400014 	movt	r0, #20
  11ed7c:	ebffb0d7 	bl	10b0e0 <sys_arch_assert>
        prev->next = pcb->next;
  11ed80:	e51b3008 	ldr	r3, [fp, #-8]
  11ed84:	e593200c 	ldr	r2, [r3, #12]
  11ed88:	e51b300c 	ldr	r3, [fp, #-12]
  11ed8c:	e583200c 	str	r2, [r3, #12]
  11ed90:	ea000011 	b	11eddc <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11ed94:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11ed98:	e3403015 	movt	r3, #21
  11ed9c:	e5933000 	ldr	r3, [r3]
  11eda0:	e51b2008 	ldr	r2, [fp, #-8]
  11eda4:	e1520003 	cmp	r2, r3
  11eda8:	0a000006 	beq	11edc8 <tcp_slowtmr+0x690>
  11edac:	e30800f4 	movw	r0, #33012	; 0x80f4
  11edb0:	e3400014 	movt	r0, #20
  11edb4:	ebff90d6 	bl	103114 <rt_kprintf>
  11edb8:	e3001488 	movw	r1, #1160	; 0x488
  11edbc:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11edc0:	e3400014 	movt	r0, #20
  11edc4:	ebffb0c5 	bl	10b0e0 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11edc8:	e51b3008 	ldr	r3, [fp, #-8]
  11edcc:	e593200c 	ldr	r2, [r3, #12]
  11edd0:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11edd4:	e3403015 	movt	r3, #21
  11edd8:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11eddc:	e55b300e 	ldrb	r3, [fp, #-14]
  11ede0:	e3530000 	cmp	r3, #0
  11ede4:	0a00000f 	beq	11ee28 <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11ede8:	e51b3008 	ldr	r3, [fp, #-8]
  11edec:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11edf0:	e51b3008 	ldr	r3, [fp, #-8]
  11edf4:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11edf8:	e51bc008 	ldr	ip, [fp, #-8]
  11edfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ee00:	e283e004 	add	lr, r3, #4
  11ee04:	e51b3008 	ldr	r3, [fp, #-8]
  11ee08:	e1d331ba 	ldrh	r3, [r3, #26]
  11ee0c:	e51b2008 	ldr	r2, [fp, #-8]
  11ee10:	e1d221bc 	ldrh	r2, [r2, #28]
  11ee14:	e58d2004 	str	r2, [sp, #4]
  11ee18:	e58d3000 	str	r3, [sp]
  11ee1c:	e1a0300e 	mov	r3, lr
  11ee20:	e1a0200c 	mov	r2, ip
  11ee24:	eb001eae 	bl	1268e4 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11ee28:	e51b3008 	ldr	r3, [fp, #-8]
  11ee2c:	e5933010 	ldr	r3, [r3, #16]
  11ee30:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11ee34:	e51b3008 	ldr	r3, [fp, #-8]
  11ee38:	e5933014 	ldr	r3, [r3, #20]
  11ee3c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11ee40:	e51b3008 	ldr	r3, [fp, #-8]
  11ee44:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11ee48:	e51b3008 	ldr	r3, [fp, #-8]
  11ee4c:	e593300c 	ldr	r3, [r3, #12]
  11ee50:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11ee54:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11ee58:	e3a00002 	mov	r0, #2
  11ee5c:	ebffe901 	bl	119268 <memp_free>

      tcp_active_pcbs_changed = 0;
  11ee60:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11ee64:	e3403015 	movt	r3, #21
  11ee68:	e3a02000 	mov	r2, #0
  11ee6c:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11ee70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee74:	e3530000 	cmp	r3, #0
  11ee78:	0a000003 	beq	11ee8c <tcp_slowtmr+0x754>
  11ee7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee80:	e3e0100c 	mvn	r1, #12
  11ee84:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11ee88:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11ee8c:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11ee90:	e3403015 	movt	r3, #21
  11ee94:	e5d33000 	ldrb	r3, [r3]
  11ee98:	e3530000 	cmp	r3, #0
  11ee9c:	0a000033 	beq	11ef70 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11eea0:	eafffe38 	b	11e788 <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11eea4:	e51b3008 	ldr	r3, [fp, #-8]
  11eea8:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11eeac:	e51b3008 	ldr	r3, [fp, #-8]
  11eeb0:	e593300c 	ldr	r3, [r3, #12]
  11eeb4:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11eeb8:	e51b300c 	ldr	r3, [fp, #-12]
  11eebc:	e5d3301f 	ldrb	r3, [r3, #31]
  11eec0:	e2833001 	add	r3, r3, #1
  11eec4:	e6ef2073 	uxtb	r2, r3
  11eec8:	e51b300c 	ldr	r3, [fp, #-12]
  11eecc:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11eed0:	e51b300c 	ldr	r3, [fp, #-12]
  11eed4:	e5d3201f 	ldrb	r2, [r3, #31]
  11eed8:	e51b300c 	ldr	r3, [fp, #-12]
  11eedc:	e5d33020 	ldrb	r3, [r3, #32]
  11eee0:	e1520003 	cmp	r2, r3
  11eee4:	3a000021 	bcc	11ef70 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11eee8:	e51b300c 	ldr	r3, [fp, #-12]
  11eeec:	e3a02000 	mov	r2, #0
  11eef0:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11eef4:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11eef8:	e3403015 	movt	r3, #21
  11eefc:	e3a02000 	mov	r2, #0
  11ef00:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11ef04:	e51b300c 	ldr	r3, [fp, #-12]
  11ef08:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ef0c:	e3530000 	cmp	r3, #0
  11ef10:	0a000009 	beq	11ef3c <tcp_slowtmr+0x804>
  11ef14:	e51b300c 	ldr	r3, [fp, #-12]
  11ef18:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ef1c:	e51b200c 	ldr	r2, [fp, #-12]
  11ef20:	e5922010 	ldr	r2, [r2, #16]
  11ef24:	e51b100c 	ldr	r1, [fp, #-12]
  11ef28:	e1a00002 	mov	r0, r2
  11ef2c:	e12fff33 	blx	r3
  11ef30:	e1a03000 	mov	r3, r0
  11ef34:	e54b300f 	strb	r3, [fp, #-15]
  11ef38:	ea000001 	b	11ef44 <tcp_slowtmr+0x80c>
  11ef3c:	e3a03000 	mov	r3, #0
  11ef40:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ef44:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11ef48:	e3403015 	movt	r3, #21
  11ef4c:	e5d33000 	ldrb	r3, [r3]
  11ef50:	e3530000 	cmp	r3, #0
  11ef54:	0a000000 	beq	11ef5c <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ef58:	eafffe0a 	b	11e788 <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ef5c:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ef60:	e3530000 	cmp	r3, #0
  11ef64:	1a000001 	bne	11ef70 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ef68:	e51b000c 	ldr	r0, [fp, #-12]
  11ef6c:	eb001bf6 	bl	125f4c <tcp_output>
  while (pcb != NULL) {
  11ef70:	e51b3008 	ldr	r3, [fp, #-8]
  11ef74:	e3530000 	cmp	r3, #0
  11ef78:	1afffe09 	bne	11e7a4 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ef7c:	e3a03000 	mov	r3, #0
  11ef80:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ef84:	e30c3c50 	movw	r3, #52304	; 0xcc50
  11ef88:	e3403015 	movt	r3, #21
  11ef8c:	e5933000 	ldr	r3, [r3]
  11ef90:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ef94:	ea000051 	b	11f0e0 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11ef98:	e51b3008 	ldr	r3, [fp, #-8]
  11ef9c:	e5933014 	ldr	r3, [r3, #20]
  11efa0:	e353000a 	cmp	r3, #10
  11efa4:	0a000006 	beq	11efc4 <tcp_slowtmr+0x88c>
  11efa8:	e3080120 	movw	r0, #33056	; 0x8120
  11efac:	e3400014 	movt	r0, #20
  11efb0:	ebff9057 	bl	103114 <rt_kprintf>
  11efb4:	e30014b8 	movw	r1, #1208	; 0x4b8
  11efb8:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11efbc:	e3400014 	movt	r0, #20
  11efc0:	ebffb046 	bl	10b0e0 <sys_arch_assert>
    pcb_remove = 0;
  11efc4:	e3a03000 	mov	r3, #0
  11efc8:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11efcc:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11efd0:	e3403015 	movt	r3, #21
  11efd4:	e5932000 	ldr	r2, [r3]
  11efd8:	e51b3008 	ldr	r3, [fp, #-8]
  11efdc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11efe0:	e0423003 	sub	r3, r2, r3
  11efe4:	e35300f0 	cmp	r3, #240	; 0xf0
  11efe8:	9a000002 	bls	11eff8 <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11efec:	e55b300d 	ldrb	r3, [fp, #-13]
  11eff0:	e2833001 	add	r3, r3, #1
  11eff4:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11eff8:	e55b300d 	ldrb	r3, [fp, #-13]
  11effc:	e3530000 	cmp	r3, #0
  11f000:	0a000031 	beq	11f0cc <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11f004:	e51b0008 	ldr	r0, [fp, #-8]
  11f008:	eb00035d 	bl	11fd84 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11f00c:	e51b300c 	ldr	r3, [fp, #-12]
  11f010:	e3530000 	cmp	r3, #0
  11f014:	0a000011 	beq	11f060 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11f018:	e30c3c50 	movw	r3, #52304	; 0xcc50
  11f01c:	e3403015 	movt	r3, #21
  11f020:	e5933000 	ldr	r3, [r3]
  11f024:	e51b2008 	ldr	r2, [fp, #-8]
  11f028:	e1520003 	cmp	r2, r3
  11f02c:	1a000006 	bne	11f04c <tcp_slowtmr+0x914>
  11f030:	e3080150 	movw	r0, #33104	; 0x8150
  11f034:	e3400014 	movt	r0, #20
  11f038:	ebff9035 	bl	103114 <rt_kprintf>
  11f03c:	e30014c6 	movw	r1, #1222	; 0x4c6
  11f040:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11f044:	e3400014 	movt	r0, #20
  11f048:	ebffb024 	bl	10b0e0 <sys_arch_assert>
        prev->next = pcb->next;
  11f04c:	e51b3008 	ldr	r3, [fp, #-8]
  11f050:	e593200c 	ldr	r2, [r3, #12]
  11f054:	e51b300c 	ldr	r3, [fp, #-12]
  11f058:	e583200c 	str	r2, [r3, #12]
  11f05c:	ea000011 	b	11f0a8 <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11f060:	e30c3c50 	movw	r3, #52304	; 0xcc50
  11f064:	e3403015 	movt	r3, #21
  11f068:	e5933000 	ldr	r3, [r3]
  11f06c:	e51b2008 	ldr	r2, [fp, #-8]
  11f070:	e1520003 	cmp	r2, r3
  11f074:	0a000006 	beq	11f094 <tcp_slowtmr+0x95c>
  11f078:	e3080178 	movw	r0, #33144	; 0x8178
  11f07c:	e3400014 	movt	r0, #20
  11f080:	ebff9023 	bl	103114 <rt_kprintf>
  11f084:	e30014ca 	movw	r1, #1226	; 0x4ca
  11f088:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11f08c:	e3400014 	movt	r0, #20
  11f090:	ebffb012 	bl	10b0e0 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11f094:	e51b3008 	ldr	r3, [fp, #-8]
  11f098:	e593200c 	ldr	r2, [r3, #12]
  11f09c:	e30c3c50 	movw	r3, #52304	; 0xcc50
  11f0a0:	e3403015 	movt	r3, #21
  11f0a4:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11f0a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f0ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11f0b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f0b4:	e593300c 	ldr	r3, [r3, #12]
  11f0b8:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11f0bc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11f0c0:	e3a00002 	mov	r0, #2
  11f0c4:	ebffe867 	bl	119268 <memp_free>
  11f0c8:	ea000004 	b	11f0e0 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11f0cc:	e51b3008 	ldr	r3, [fp, #-8]
  11f0d0:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11f0d4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0d8:	e593300c 	ldr	r3, [r3, #12]
  11f0dc:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f0e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f0e4:	e3530000 	cmp	r3, #0
  11f0e8:	1affffaa 	bne	11ef98 <tcp_slowtmr+0x860>
    }
  }
}
  11f0ec:	e320f000 	nop	{0}
  11f0f0:	e24bd004 	sub	sp, fp, #4
  11f0f4:	e8bd8800 	pop	{fp, pc}

0011f0f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11f0f8:	e92d4800 	push	{fp, lr}
  11f0fc:	e28db004 	add	fp, sp, #4
  11f100:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11f104:	e30e3249 	movw	r3, #57929	; 0xe249
  11f108:	e3403014 	movt	r3, #20
  11f10c:	e5d33000 	ldrb	r3, [r3]
  11f110:	e2833001 	add	r3, r3, #1
  11f114:	e6ef2073 	uxtb	r2, r3
  11f118:	e30e3249 	movw	r3, #57929	; 0xe249
  11f11c:	e3403014 	movt	r3, #20
  11f120:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11f124:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11f128:	e3403015 	movt	r3, #21
  11f12c:	e5933000 	ldr	r3, [r3]
  11f130:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11f134:	ea000044 	b	11f24c <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11f138:	e51b3008 	ldr	r3, [fp, #-8]
  11f13c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11f140:	e30e3249 	movw	r3, #57929	; 0xe249
  11f144:	e3403014 	movt	r3, #20
  11f148:	e5d33000 	ldrb	r3, [r3]
  11f14c:	e1520003 	cmp	r2, r3
  11f150:	0a00003a 	beq	11f240 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11f154:	e30e3249 	movw	r3, #57929	; 0xe249
  11f158:	e3403014 	movt	r3, #20
  11f15c:	e5d32000 	ldrb	r2, [r3]
  11f160:	e51b3008 	ldr	r3, [fp, #-8]
  11f164:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11f168:	e51b3008 	ldr	r3, [fp, #-8]
  11f16c:	e5d3301e 	ldrb	r3, [r3, #30]
  11f170:	e2033001 	and	r3, r3, #1
  11f174:	e3530000 	cmp	r3, #0
  11f178:	0a00000d 	beq	11f1b4 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11f17c:	e51b3008 	ldr	r3, [fp, #-8]
  11f180:	e5d3301e 	ldrb	r3, [r3, #30]
  11f184:	e3833002 	orr	r3, r3, #2
  11f188:	e6ef2073 	uxtb	r2, r3
  11f18c:	e51b3008 	ldr	r3, [fp, #-8]
  11f190:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11f194:	e51b0008 	ldr	r0, [fp, #-8]
  11f198:	eb001b6b 	bl	125f4c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11f19c:	e51b3008 	ldr	r3, [fp, #-8]
  11f1a0:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1a4:	e3c33003 	bic	r3, r3, #3
  11f1a8:	e6ef2073 	uxtb	r2, r3
  11f1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f1b0:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11f1b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f1b8:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1bc:	e2033008 	and	r3, r3, #8
  11f1c0:	e3530000 	cmp	r3, #0
  11f1c4:	0a000007 	beq	11f1e8 <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11f1c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1cc:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1d0:	e3c33008 	bic	r3, r3, #8
  11f1d4:	e6ef2073 	uxtb	r2, r3
  11f1d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1dc:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11f1e0:	e51b0008 	ldr	r0, [fp, #-8]
  11f1e4:	ebfff8ac 	bl	11d49c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11f1e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1ec:	e593300c 	ldr	r3, [r3, #12]
  11f1f0:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11f1f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f1f8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f1fc:	e3530000 	cmp	r3, #0
  11f200:	0a00000b 	beq	11f234 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11f204:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f208:	e3403015 	movt	r3, #21
  11f20c:	e3a02000 	mov	r2, #0
  11f210:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11f214:	e51b0008 	ldr	r0, [fp, #-8]
  11f218:	eb000029 	bl	11f2c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11f21c:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f220:	e3403015 	movt	r3, #21
  11f224:	e5d33000 	ldrb	r3, [r3]
  11f228:	e3530000 	cmp	r3, #0
  11f22c:	0a000000 	beq	11f234 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11f230:	eaffffbb 	b	11f124 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11f234:	e51b300c 	ldr	r3, [fp, #-12]
  11f238:	e50b3008 	str	r3, [fp, #-8]
  11f23c:	ea000002 	b	11f24c <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11f240:	e51b3008 	ldr	r3, [fp, #-8]
  11f244:	e593300c 	ldr	r3, [r3, #12]
  11f248:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f24c:	e51b3008 	ldr	r3, [fp, #-8]
  11f250:	e3530000 	cmp	r3, #0
  11f254:	1affffb7 	bne	11f138 <tcp_fasttmr+0x40>
    }
  }
}
  11f258:	e320f000 	nop	{0}
  11f25c:	e24bd004 	sub	sp, fp, #4
  11f260:	e8bd8800 	pop	{fp, pc}

0011f264 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11f264:	e92d4800 	push	{fp, lr}
  11f268:	e28db004 	add	fp, sp, #4
  11f26c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f270:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11f274:	e3403015 	movt	r3, #21
  11f278:	e5933000 	ldr	r3, [r3]
  11f27c:	e50b3008 	str	r3, [fp, #-8]
  11f280:	ea000009 	b	11f2ac <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11f284:	e51b3008 	ldr	r3, [fp, #-8]
  11f288:	e5d3301e 	ldrb	r3, [r3, #30]
  11f28c:	e6af3073 	sxtb	r3, r3
  11f290:	e3530000 	cmp	r3, #0
  11f294:	aa000001 	bge	11f2a0 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11f298:	e51b0008 	ldr	r0, [fp, #-8]
  11f29c:	eb001b2a 	bl	125f4c <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f2a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2a4:	e593300c 	ldr	r3, [r3, #12]
  11f2a8:	e50b3008 	str	r3, [fp, #-8]
  11f2ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f2b0:	e3530000 	cmp	r3, #0
  11f2b4:	1afffff2 	bne	11f284 <tcp_txnow+0x20>
    }
  }
}
  11f2b8:	e320f000 	nop	{0}
  11f2bc:	e24bd004 	sub	sp, fp, #4
  11f2c0:	e8bd8800 	pop	{fp, pc}

0011f2c4 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11f2c4:	e92d4810 	push	{r4, fp, lr}
  11f2c8:	e28db008 	add	fp, sp, #8
  11f2cc:	e24dd014 	sub	sp, sp, #20
  11f2d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11f2d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2d8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2dc:	e5d3300d 	ldrb	r3, [r3, #13]
  11f2e0:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11f2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2e8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11f2f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2f4:	e3a02000 	mov	r2, #0
  11f2f8:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11f2fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f300:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f304:	e3530000 	cmp	r3, #0
  11f308:	0a00000a 	beq	11f338 <tcp_process_refused_data+0x74>
  11f30c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f310:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f314:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f318:	e5930010 	ldr	r0, [r3, #16]
  11f31c:	e3a03000 	mov	r3, #0
  11f320:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f324:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f328:	e12fff34 	blx	r4
  11f32c:	e1a03000 	mov	r3, r0
  11f330:	e54b300d 	strb	r3, [fp, #-13]
  11f334:	ea000006 	b	11f354 <tcp_process_refused_data+0x90>
  11f338:	e3a03000 	mov	r3, #0
  11f33c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f340:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f344:	e3a00000 	mov	r0, #0
  11f348:	eb000085 	bl	11f564 <tcp_recv_null>
  11f34c:	e1a03000 	mov	r3, r0
  11f350:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11f354:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f358:	e3530000 	cmp	r3, #0
  11f35c:	1a000023 	bne	11f3f0 <tcp_process_refused_data+0x12c>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f360:	e55b300e 	ldrb	r3, [fp, #-14]
  11f364:	e2033020 	and	r3, r3, #32
  11f368:	e3530000 	cmp	r3, #0
  11f36c:	0a000029 	beq	11f418 <tcp_process_refused_data+0x154>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f374:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f378:	e3530a02 	cmp	r3, #8192	; 0x2000
  11f37c:	0a000005 	beq	11f398 <tcp_process_refused_data+0xd4>
          pcb->rcv_wnd++;
  11f380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f384:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f388:	e2833001 	add	r3, r3, #1
  11f38c:	e6ff2073 	uxth	r2, r3
  11f390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f394:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f398:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f39c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f3a0:	e3530000 	cmp	r3, #0
  11f3a4:	0a00000a 	beq	11f3d4 <tcp_process_refused_data+0x110>
  11f3a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3ac:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f3b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3b4:	e5930010 	ldr	r0, [r3, #16]
  11f3b8:	e3a03000 	mov	r3, #0
  11f3bc:	e3a02000 	mov	r2, #0
  11f3c0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f3c4:	e12fff34 	blx	r4
  11f3c8:	e1a03000 	mov	r3, r0
  11f3cc:	e54b300d 	strb	r3, [fp, #-13]
  11f3d0:	ea000001 	b	11f3dc <tcp_process_refused_data+0x118>
  11f3d4:	e3a03000 	mov	r3, #0
  11f3d8:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f3dc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f3e0:	e373000d 	cmn	r3, #13
  11f3e4:	1a00000b 	bne	11f418 <tcp_process_refused_data+0x154>
          return ERR_ABRT;
  11f3e8:	e3e0300c 	mvn	r3, #12
  11f3ec:	ea00000a 	b	11f41c <tcp_process_refused_data+0x158>
        }
      }
    } else if (err == ERR_ABRT) {
  11f3f0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f3f4:	e373000d 	cmn	r3, #13
  11f3f8:	1a000001 	bne	11f404 <tcp_process_refused_data+0x140>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f3fc:	e3e0300c 	mvn	r3, #12
  11f400:	ea000005 	b	11f41c <tcp_process_refused_data+0x158>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f408:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f40c:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f410:	e3e03004 	mvn	r3, #4
  11f414:	ea000000 	b	11f41c <tcp_process_refused_data+0x158>
    }
  }
  return ERR_OK;
  11f418:	e3a03000 	mov	r3, #0
}
  11f41c:	e1a00003 	mov	r0, r3
  11f420:	e24bd008 	sub	sp, fp, #8
  11f424:	e8bd8810 	pop	{r4, fp, pc}

0011f428 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f428:	e92d4800 	push	{fp, lr}
  11f42c:	e28db004 	add	fp, sp, #4
  11f430:	e24dd010 	sub	sp, sp, #16
  11f434:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f438:	ea000006 	b	11f458 <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f43c:	e51b3010 	ldr	r3, [fp, #-16]
  11f440:	e5933000 	ldr	r3, [r3]
  11f444:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f448:	e51b0010 	ldr	r0, [fp, #-16]
  11f44c:	eb000007 	bl	11f470 <tcp_seg_free>
    seg = next;
  11f450:	e51b3008 	ldr	r3, [fp, #-8]
  11f454:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f458:	e51b3010 	ldr	r3, [fp, #-16]
  11f45c:	e3530000 	cmp	r3, #0
  11f460:	1afffff5 	bne	11f43c <tcp_segs_free+0x14>
  }
}
  11f464:	e320f000 	nop	{0}
  11f468:	e24bd004 	sub	sp, fp, #4
  11f46c:	e8bd8800 	pop	{fp, pc}

0011f470 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f470:	e92d4800 	push	{fp, lr}
  11f474:	e28db004 	add	fp, sp, #4
  11f478:	e24dd008 	sub	sp, sp, #8
  11f47c:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f480:	e51b3008 	ldr	r3, [fp, #-8]
  11f484:	e3530000 	cmp	r3, #0
  11f488:	0a00000a 	beq	11f4b8 <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f48c:	e51b3008 	ldr	r3, [fp, #-8]
  11f490:	e5933004 	ldr	r3, [r3, #4]
  11f494:	e3530000 	cmp	r3, #0
  11f498:	0a000003 	beq	11f4ac <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f49c:	e51b3008 	ldr	r3, [fp, #-8]
  11f4a0:	e5933004 	ldr	r3, [r3, #4]
  11f4a4:	e1a00003 	mov	r0, r3
  11f4a8:	ebffee7c 	bl	11aea0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f4ac:	e51b1008 	ldr	r1, [fp, #-8]
  11f4b0:	e3a00004 	mov	r0, #4
  11f4b4:	ebffe76b 	bl	119268 <memp_free>
  }
}
  11f4b8:	e320f000 	nop	{0}
  11f4bc:	e24bd004 	sub	sp, fp, #4
  11f4c0:	e8bd8800 	pop	{fp, pc}

0011f4c4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f4c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f4c8:	e28db000 	add	fp, sp, #0
  11f4cc:	e24dd00c 	sub	sp, sp, #12
  11f4d0:	e50b0008 	str	r0, [fp, #-8]
  11f4d4:	e1a03001 	mov	r3, r1
  11f4d8:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f4dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f4e0:	e55b2009 	ldrb	r2, [fp, #-9]
  11f4e4:	e5c32018 	strb	r2, [r3, #24]
}
  11f4e8:	e320f000 	nop	{0}
  11f4ec:	e28bd000 	add	sp, fp, #0
  11f4f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f4f4:	e12fff1e 	bx	lr

0011f4f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f4f8:	e92d4800 	push	{fp, lr}
  11f4fc:	e28db004 	add	fp, sp, #4
  11f500:	e24dd010 	sub	sp, sp, #16
  11f504:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f508:	e300258f 	movw	r2, #1423	; 0x58f
  11f50c:	e3071ec8 	movw	r1, #32456	; 0x7ec8
  11f510:	e3401014 	movt	r1, #20
  11f514:	e3a00004 	mov	r0, #4
  11f518:	ebffe6ea 	bl	1190c8 <memp_malloc_fn>
  11f51c:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f520:	e51b3008 	ldr	r3, [fp, #-8]
  11f524:	e3530000 	cmp	r3, #0
  11f528:	1a000001 	bne	11f534 <tcp_seg_copy+0x3c>
    return NULL;
  11f52c:	e3a03000 	mov	r3, #0
  11f530:	ea000008 	b	11f558 <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f534:	e3a02010 	mov	r2, #16
  11f538:	e51b1010 	ldr	r1, [fp, #-16]
  11f53c:	e51b0008 	ldr	r0, [fp, #-8]
  11f540:	eb00860f 	bl	140d84 <memcpy>
  pbuf_ref(cseg->p);
  11f544:	e51b3008 	ldr	r3, [fp, #-8]
  11f548:	e5933004 	ldr	r3, [r3, #4]
  11f54c:	e1a00003 	mov	r0, r3
  11f550:	ebffeeec 	bl	11b108 <pbuf_ref>
  return cseg;
  11f554:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f558:	e1a00003 	mov	r0, r3
  11f55c:	e24bd004 	sub	sp, fp, #4
  11f560:	e8bd8800 	pop	{fp, pc}

0011f564 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f564:	e92d4800 	push	{fp, lr}
  11f568:	e28db004 	add	fp, sp, #4
  11f56c:	e24dd010 	sub	sp, sp, #16
  11f570:	e50b0008 	str	r0, [fp, #-8]
  11f574:	e50b100c 	str	r1, [fp, #-12]
  11f578:	e50b2010 	str	r2, [fp, #-16]
  11f57c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f580:	e51b3010 	ldr	r3, [fp, #-16]
  11f584:	e3530000 	cmp	r3, #0
  11f588:	0a000007 	beq	11f5ac <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f58c:	e51b3010 	ldr	r3, [fp, #-16]
  11f590:	e1d330b8 	ldrh	r3, [r3, #8]
  11f594:	e1a01003 	mov	r1, r3
  11f598:	e51b000c 	ldr	r0, [fp, #-12]
  11f59c:	ebfffac7 	bl	11e0c0 <tcp_recved>
    pbuf_free(p);
  11f5a0:	e51b0010 	ldr	r0, [fp, #-16]
  11f5a4:	ebffee3d 	bl	11aea0 <pbuf_free>
  11f5a8:	ea000006 	b	11f5c8 <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f5ac:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f5b0:	e3530000 	cmp	r3, #0
  11f5b4:	1a000003 	bne	11f5c8 <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f5b8:	e51b000c 	ldr	r0, [fp, #-12]
  11f5bc:	ebfff81c 	bl	11d634 <tcp_close>
  11f5c0:	e1a03000 	mov	r3, r0
  11f5c4:	ea000000 	b	11f5cc <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f5c8:	e3a03000 	mov	r3, #0
}
  11f5cc:	e1a00003 	mov	r0, r3
  11f5d0:	e24bd004 	sub	sp, fp, #4
  11f5d4:	e8bd8800 	pop	{fp, pc}

0011f5d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f5d8:	e92d4800 	push	{fp, lr}
  11f5dc:	e28db004 	add	fp, sp, #4
  11f5e0:	e24dd018 	sub	sp, sp, #24
  11f5e4:	e1a03000 	mov	r3, r0
  11f5e8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f5ec:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f5f0:	e3530000 	cmp	r3, #0
  11f5f4:	ba000001 	blt	11f600 <tcp_kill_prio+0x28>
  11f5f8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f5fc:	ea000000 	b	11f604 <tcp_kill_prio+0x2c>
  11f600:	e3a0307f 	mov	r3, #127	; 0x7f
  11f604:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f608:	e3a03000 	mov	r3, #0
  11f60c:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f610:	e3a03000 	mov	r3, #0
  11f614:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f618:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11f61c:	e3403015 	movt	r3, #21
  11f620:	e5933000 	ldr	r3, [r3]
  11f624:	e50b3008 	str	r3, [fp, #-8]
  11f628:	ea00001c 	b	11f6a0 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f62c:	e51b3008 	ldr	r3, [fp, #-8]
  11f630:	e5d33018 	ldrb	r3, [r3, #24]
  11f634:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f638:	e1520003 	cmp	r2, r3
  11f63c:	3a000014 	bcc	11f694 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f640:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11f644:	e3403015 	movt	r3, #21
  11f648:	e5932000 	ldr	r2, [r3]
  11f64c:	e51b3008 	ldr	r3, [fp, #-8]
  11f650:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f654:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f658:	e51b2010 	ldr	r2, [fp, #-16]
  11f65c:	e1520003 	cmp	r2, r3
  11f660:	8a00000b 	bhi	11f694 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f664:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11f668:	e3403015 	movt	r3, #21
  11f66c:	e5932000 	ldr	r2, [r3]
  11f670:	e51b3008 	ldr	r3, [fp, #-8]
  11f674:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f678:	e0423003 	sub	r3, r2, r3
  11f67c:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f680:	e51b3008 	ldr	r3, [fp, #-8]
  11f684:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f688:	e51b3008 	ldr	r3, [fp, #-8]
  11f68c:	e5d33018 	ldrb	r3, [r3, #24]
  11f690:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f694:	e51b3008 	ldr	r3, [fp, #-8]
  11f698:	e593300c 	ldr	r3, [r3, #12]
  11f69c:	e50b3008 	str	r3, [fp, #-8]
  11f6a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f6a4:	e3530000 	cmp	r3, #0
  11f6a8:	1affffdf 	bne	11f62c <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f6ac:	e51b300c 	ldr	r3, [fp, #-12]
  11f6b0:	e3530000 	cmp	r3, #0
  11f6b4:	0a000001 	beq	11f6c0 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f6b8:	e51b000c 	ldr	r0, [fp, #-12]
  11f6bc:	ebfff8d0 	bl	11da04 <tcp_abort>
  }
}
  11f6c0:	e320f000 	nop	{0}
  11f6c4:	e24bd004 	sub	sp, fp, #4
  11f6c8:	e8bd8800 	pop	{fp, pc}

0011f6cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f6cc:	e92d4800 	push	{fp, lr}
  11f6d0:	e28db004 	add	fp, sp, #4
  11f6d4:	e24dd018 	sub	sp, sp, #24
  11f6d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f6e0:	e3530008 	cmp	r3, #8
  11f6e4:	0a000009 	beq	11f710 <tcp_kill_state+0x44>
  11f6e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f6ec:	e3530009 	cmp	r3, #9
  11f6f0:	0a000006 	beq	11f710 <tcp_kill_state+0x44>
  11f6f4:	e30801a0 	movw	r0, #33184	; 0x81a0
  11f6f8:	e3400014 	movt	r0, #20
  11f6fc:	ebff8e84 	bl	103114 <rt_kprintf>
  11f700:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f704:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11f708:	e3400014 	movt	r0, #20
  11f70c:	ebffae73 	bl	10b0e0 <sys_arch_assert>

  inactivity = 0;
  11f710:	e3a03000 	mov	r3, #0
  11f714:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f718:	e3a03000 	mov	r3, #0
  11f71c:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f720:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11f724:	e3403015 	movt	r3, #21
  11f728:	e5933000 	ldr	r3, [r3]
  11f72c:	e50b3008 	str	r3, [fp, #-8]
  11f730:	ea000019 	b	11f79c <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f734:	e51b3008 	ldr	r3, [fp, #-8]
  11f738:	e5933014 	ldr	r3, [r3, #20]
  11f73c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f740:	e1520003 	cmp	r2, r3
  11f744:	1a000011 	bne	11f790 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f748:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11f74c:	e3403015 	movt	r3, #21
  11f750:	e5932000 	ldr	r2, [r3]
  11f754:	e51b3008 	ldr	r3, [fp, #-8]
  11f758:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f75c:	e0423003 	sub	r3, r2, r3
  11f760:	e51b2010 	ldr	r2, [fp, #-16]
  11f764:	e1520003 	cmp	r2, r3
  11f768:	8a000008 	bhi	11f790 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f76c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11f770:	e3403015 	movt	r3, #21
  11f774:	e5932000 	ldr	r2, [r3]
  11f778:	e51b3008 	ldr	r3, [fp, #-8]
  11f77c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f780:	e0423003 	sub	r3, r2, r3
  11f784:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f788:	e51b3008 	ldr	r3, [fp, #-8]
  11f78c:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f790:	e51b3008 	ldr	r3, [fp, #-8]
  11f794:	e593300c 	ldr	r3, [r3, #12]
  11f798:	e50b3008 	str	r3, [fp, #-8]
  11f79c:	e51b3008 	ldr	r3, [fp, #-8]
  11f7a0:	e3530000 	cmp	r3, #0
  11f7a4:	1affffe2 	bne	11f734 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f7a8:	e51b300c 	ldr	r3, [fp, #-12]
  11f7ac:	e3530000 	cmp	r3, #0
  11f7b0:	0a000002 	beq	11f7c0 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f7b4:	e3a01000 	mov	r1, #0
  11f7b8:	e51b000c 	ldr	r0, [fp, #-12]
  11f7bc:	ebfff7f1 	bl	11d788 <tcp_abandon>
  }
}
  11f7c0:	e320f000 	nop	{0}
  11f7c4:	e24bd004 	sub	sp, fp, #4
  11f7c8:	e8bd8800 	pop	{fp, pc}

0011f7cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f7cc:	e92d4800 	push	{fp, lr}
  11f7d0:	e28db004 	add	fp, sp, #4
  11f7d4:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f7d8:	e3a03000 	mov	r3, #0
  11f7dc:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f7e0:	e3a03000 	mov	r3, #0
  11f7e4:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f7e8:	e30c3c50 	movw	r3, #52304	; 0xcc50
  11f7ec:	e3403015 	movt	r3, #21
  11f7f0:	e5933000 	ldr	r3, [r3]
  11f7f4:	e50b3008 	str	r3, [fp, #-8]
  11f7f8:	ea000014 	b	11f850 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f7fc:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11f800:	e3403015 	movt	r3, #21
  11f804:	e5932000 	ldr	r2, [r3]
  11f808:	e51b3008 	ldr	r3, [fp, #-8]
  11f80c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f810:	e0423003 	sub	r3, r2, r3
  11f814:	e51b2010 	ldr	r2, [fp, #-16]
  11f818:	e1520003 	cmp	r2, r3
  11f81c:	8a000008 	bhi	11f844 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f820:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11f824:	e3403015 	movt	r3, #21
  11f828:	e5932000 	ldr	r2, [r3]
  11f82c:	e51b3008 	ldr	r3, [fp, #-8]
  11f830:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f834:	e0423003 	sub	r3, r2, r3
  11f838:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f83c:	e51b3008 	ldr	r3, [fp, #-8]
  11f840:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f844:	e51b3008 	ldr	r3, [fp, #-8]
  11f848:	e593300c 	ldr	r3, [r3, #12]
  11f84c:	e50b3008 	str	r3, [fp, #-8]
  11f850:	e51b3008 	ldr	r3, [fp, #-8]
  11f854:	e3530000 	cmp	r3, #0
  11f858:	1affffe7 	bne	11f7fc <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f85c:	e51b300c 	ldr	r3, [fp, #-12]
  11f860:	e3530000 	cmp	r3, #0
  11f864:	0a000001 	beq	11f870 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f868:	e51b000c 	ldr	r0, [fp, #-12]
  11f86c:	ebfff864 	bl	11da04 <tcp_abort>
  }
}
  11f870:	e320f000 	nop	{0}
  11f874:	e24bd004 	sub	sp, fp, #4
  11f878:	e8bd8800 	pop	{fp, pc}

0011f87c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f87c:	e92d4800 	push	{fp, lr}
  11f880:	e28db004 	add	fp, sp, #4
  11f884:	e24dd010 	sub	sp, sp, #16
  11f888:	e1a03000 	mov	r3, r0
  11f88c:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f890:	e3002612 	movw	r2, #1554	; 0x612
  11f894:	e3071ec8 	movw	r1, #32456	; 0x7ec8
  11f898:	e3401014 	movt	r1, #20
  11f89c:	e3a00002 	mov	r0, #2
  11f8a0:	ebffe608 	bl	1190c8 <memp_malloc_fn>
  11f8a4:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f8a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f8ac:	e3530000 	cmp	r3, #0
  11f8b0:	1a000050 	bne	11f9f8 <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f8b4:	ebffffc4 	bl	11f7cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8b8:	e3002618 	movw	r2, #1560	; 0x618
  11f8bc:	e3071ec8 	movw	r1, #32456	; 0x7ec8
  11f8c0:	e3401014 	movt	r1, #20
  11f8c4:	e3a00002 	mov	r0, #2
  11f8c8:	ebffe5fe 	bl	1190c8 <memp_malloc_fn>
  11f8cc:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f8d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f8d4:	e3530000 	cmp	r3, #0
  11f8d8:	1a00003c 	bne	11f9d0 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f8dc:	e3a00009 	mov	r0, #9
  11f8e0:	ebffff79 	bl	11f6cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8e4:	e300261e 	movw	r2, #1566	; 0x61e
  11f8e8:	e3071ec8 	movw	r1, #32456	; 0x7ec8
  11f8ec:	e3401014 	movt	r1, #20
  11f8f0:	e3a00002 	mov	r0, #2
  11f8f4:	ebffe5f3 	bl	1190c8 <memp_malloc_fn>
  11f8f8:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f8fc:	e51b3008 	ldr	r3, [fp, #-8]
  11f900:	e3530000 	cmp	r3, #0
  11f904:	1a000027 	bne	11f9a8 <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f908:	e3a00008 	mov	r0, #8
  11f90c:	ebffff6e 	bl	11f6cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f910:	e3002624 	movw	r2, #1572	; 0x624
  11f914:	e3071ec8 	movw	r1, #32456	; 0x7ec8
  11f918:	e3401014 	movt	r1, #20
  11f91c:	e3a00002 	mov	r0, #2
  11f920:	ebffe5e8 	bl	1190c8 <memp_malloc_fn>
  11f924:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f928:	e51b3008 	ldr	r3, [fp, #-8]
  11f92c:	e3530000 	cmp	r3, #0
  11f930:	1a000012 	bne	11f980 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f934:	e55b300d 	ldrb	r3, [fp, #-13]
  11f938:	e1a00003 	mov	r0, r3
  11f93c:	ebffff25 	bl	11f5d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f940:	e300262a 	movw	r2, #1578	; 0x62a
  11f944:	e3071ec8 	movw	r1, #32456	; 0x7ec8
  11f948:	e3401014 	movt	r1, #20
  11f94c:	e3a00002 	mov	r0, #2
  11f950:	ebffe5dc 	bl	1190c8 <memp_malloc_fn>
  11f954:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f958:	e51b3008 	ldr	r3, [fp, #-8]
  11f95c:	e3530000 	cmp	r3, #0
  11f960:	0a000006 	beq	11f980 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f964:	e30c3a50 	movw	r3, #51792	; 0xca50
  11f968:	e3403015 	movt	r3, #21
  11f96c:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f970:	e1d320b4 	ldrh	r2, [r3, #4]
  11f974:	e2422001 	sub	r2, r2, #1
  11f978:	e6ff2072 	uxth	r2, r2
  11f97c:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f980:	e51b3008 	ldr	r3, [fp, #-8]
  11f984:	e3530000 	cmp	r3, #0
  11f988:	0a000006 	beq	11f9a8 <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f98c:	e30c3a50 	movw	r3, #51792	; 0xca50
  11f990:	e3403015 	movt	r3, #21
  11f994:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f998:	e1d320b4 	ldrh	r2, [r3, #4]
  11f99c:	e2422001 	sub	r2, r2, #1
  11f9a0:	e6ff2072 	uxth	r2, r2
  11f9a4:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f9a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f9ac:	e3530000 	cmp	r3, #0
  11f9b0:	0a000006 	beq	11f9d0 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9b4:	e30c3a50 	movw	r3, #51792	; 0xca50
  11f9b8:	e3403015 	movt	r3, #21
  11f9bc:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9c0:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9c4:	e2422001 	sub	r2, r2, #1
  11f9c8:	e6ff2072 	uxth	r2, r2
  11f9cc:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f9d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f9d4:	e3530000 	cmp	r3, #0
  11f9d8:	0a000006 	beq	11f9f8 <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9dc:	e30c3a50 	movw	r3, #51792	; 0xca50
  11f9e0:	e3403015 	movt	r3, #21
  11f9e4:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9e8:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9ec:	e2422001 	sub	r2, r2, #1
  11f9f0:	e6ff2072 	uxth	r2, r2
  11f9f4:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11f9f8:	e51b3008 	ldr	r3, [fp, #-8]
  11f9fc:	e3530000 	cmp	r3, #0
  11fa00:	0a00003e 	beq	11fb00 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11fa04:	e3a020a4 	mov	r2, #164	; 0xa4
  11fa08:	e3a01000 	mov	r1, #0
  11fa0c:	e51b0008 	ldr	r0, [fp, #-8]
  11fa10:	eb008613 	bl	141264 <memset>
    pcb->prio = prio;
  11fa14:	e51b3008 	ldr	r3, [fp, #-8]
  11fa18:	e55b200d 	ldrb	r2, [fp, #-13]
  11fa1c:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11fa20:	e51b3008 	ldr	r3, [fp, #-8]
  11fa24:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fa28:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11fa2c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa30:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fa34:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11fa38:	e51b3008 	ldr	r3, [fp, #-8]
  11fa3c:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11fa40:	e51b3008 	ldr	r3, [fp, #-8]
  11fa44:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11fa48:	e51b3008 	ldr	r3, [fp, #-8]
  11fa4c:	e3e02000 	mvn	r2, #0
  11fa50:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11fa54:	e51b3008 	ldr	r3, [fp, #-8]
  11fa58:	e3a02f86 	mov	r2, #536	; 0x218
  11fa5c:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11fa60:	e51b3008 	ldr	r3, [fp, #-8]
  11fa64:	e3a02006 	mov	r2, #6
  11fa68:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11fa6c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa70:	e3a02006 	mov	r2, #6
  11fa74:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11fa78:	e51b3008 	ldr	r3, [fp, #-8]
  11fa7c:	e3e02000 	mvn	r2, #0
  11fa80:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11fa84:	e51b3008 	ldr	r3, [fp, #-8]
  11fa88:	e3a02001 	mov	r2, #1
  11fa8c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11fa90:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11fa94:	e3403015 	movt	r3, #21
  11fa98:	e5932000 	ldr	r2, [r3]
  11fa9c:	e51b3008 	ldr	r3, [fp, #-8]
  11faa0:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11faa4:	e30e3249 	movw	r3, #57929	; 0xe249
  11faa8:	e3403014 	movt	r3, #20
  11faac:	e5d32000 	ldrb	r2, [r3]
  11fab0:	e51b3008 	ldr	r3, [fp, #-8]
  11fab4:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11fab8:	e51b3008 	ldr	r3, [fp, #-8]
  11fabc:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fac0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11fac4:	e51b2008 	ldr	r2, [fp, #-8]
  11fac8:	e30f3564 	movw	r3, #62820	; 0xf564
  11facc:	e3403011 	movt	r3, #17
  11fad0:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11fad4:	e51b2008 	ldr	r2, [fp, #-8]
  11fad8:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11fadc:	e340306d 	movt	r3, #109	; 0x6d
  11fae0:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11fae4:	e51b2008 	ldr	r2, [fp, #-8]
  11fae8:	e30234f8 	movw	r3, #9464	; 0x24f8
  11faec:	e3403001 	movt	r3, #1
  11faf0:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11faf4:	e51b3008 	ldr	r3, [fp, #-8]
  11faf8:	e3a02009 	mov	r2, #9
  11fafc:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11fb00:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fb04:	e1a00003 	mov	r0, r3
  11fb08:	e24bd004 	sub	sp, fp, #4
  11fb0c:	e8bd8800 	pop	{fp, pc}

0011fb10 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11fb10:	e92d4800 	push	{fp, lr}
  11fb14:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11fb18:	e3a00040 	mov	r0, #64	; 0x40
  11fb1c:	ebffff56 	bl	11f87c <tcp_alloc>
  11fb20:	e1a03000 	mov	r3, r0
}
  11fb24:	e1a00003 	mov	r0, r3
  11fb28:	e8bd8800 	pop	{fp, pc}

0011fb2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11fb2c:	e92d4800 	push	{fp, lr}
  11fb30:	e28db004 	add	fp, sp, #4
  11fb34:	e24dd010 	sub	sp, sp, #16
  11fb38:	e1a03000 	mov	r3, r0
  11fb3c:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11fb40:	e3a00040 	mov	r0, #64	; 0x40
  11fb44:	ebffff4c 	bl	11f87c <tcp_alloc>
  11fb48:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11fb4c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fb50:	e1a00003 	mov	r0, r3
  11fb54:	e24bd004 	sub	sp, fp, #4
  11fb58:	e8bd8800 	pop	{fp, pc}

0011fb5c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11fb5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fb60:	e28db000 	add	fp, sp, #0
  11fb64:	e24dd00c 	sub	sp, sp, #12
  11fb68:	e50b0008 	str	r0, [fp, #-8]
  11fb6c:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11fb70:	e51b3008 	ldr	r3, [fp, #-8]
  11fb74:	e3530000 	cmp	r3, #0
  11fb78:	0a000002 	beq	11fb88 <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11fb7c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb80:	e51b200c 	ldr	r2, [fp, #-12]
  11fb84:	e5832010 	str	r2, [r3, #16]
  }
}
  11fb88:	e320f000 	nop	{0}
  11fb8c:	e28bd000 	add	sp, fp, #0
  11fb90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fb94:	e12fff1e 	bx	lr

0011fb98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11fb98:	e92d4800 	push	{fp, lr}
  11fb9c:	e28db004 	add	fp, sp, #4
  11fba0:	e24dd008 	sub	sp, sp, #8
  11fba4:	e50b0008 	str	r0, [fp, #-8]
  11fba8:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fbac:	e51b3008 	ldr	r3, [fp, #-8]
  11fbb0:	e3530000 	cmp	r3, #0
  11fbb4:	0a00000d 	beq	11fbf0 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11fbb8:	e51b3008 	ldr	r3, [fp, #-8]
  11fbbc:	e5933014 	ldr	r3, [r3, #20]
  11fbc0:	e3530001 	cmp	r3, #1
  11fbc4:	1a000006 	bne	11fbe4 <tcp_recv+0x4c>
  11fbc8:	e30801b0 	movw	r0, #33200	; 0x81b0
  11fbcc:	e3400014 	movt	r0, #20
  11fbd0:	ebff8d4f 	bl	103114 <rt_kprintf>
  11fbd4:	e30016b6 	movw	r1, #1718	; 0x6b6
  11fbd8:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11fbdc:	e3400014 	movt	r0, #20
  11fbe0:	ebffad3e 	bl	10b0e0 <sys_arch_assert>
    pcb->recv = recv;
  11fbe4:	e51b3008 	ldr	r3, [fp, #-8]
  11fbe8:	e51b200c 	ldr	r2, [fp, #-12]
  11fbec:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11fbf0:	e320f000 	nop	{0}
  11fbf4:	e24bd004 	sub	sp, fp, #4
  11fbf8:	e8bd8800 	pop	{fp, pc}

0011fbfc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11fbfc:	e92d4800 	push	{fp, lr}
  11fc00:	e28db004 	add	fp, sp, #4
  11fc04:	e24dd008 	sub	sp, sp, #8
  11fc08:	e50b0008 	str	r0, [fp, #-8]
  11fc0c:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fc10:	e51b3008 	ldr	r3, [fp, #-8]
  11fc14:	e3530000 	cmp	r3, #0
  11fc18:	0a00000d 	beq	11fc54 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11fc1c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc20:	e5933014 	ldr	r3, [r3, #20]
  11fc24:	e3530001 	cmp	r3, #1
  11fc28:	1a000006 	bne	11fc48 <tcp_sent+0x4c>
  11fc2c:	e30801d8 	movw	r0, #33240	; 0x81d8
  11fc30:	e3400014 	movt	r0, #20
  11fc34:	ebff8d36 	bl	103114 <rt_kprintf>
  11fc38:	e30016c7 	movw	r1, #1735	; 0x6c7
  11fc3c:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11fc40:	e3400014 	movt	r0, #20
  11fc44:	ebffad25 	bl	10b0e0 <sys_arch_assert>
    pcb->sent = sent;
  11fc48:	e51b3008 	ldr	r3, [fp, #-8]
  11fc4c:	e51b200c 	ldr	r2, [fp, #-12]
  11fc50:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11fc54:	e320f000 	nop	{0}
  11fc58:	e24bd004 	sub	sp, fp, #4
  11fc5c:	e8bd8800 	pop	{fp, pc}

0011fc60 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11fc60:	e92d4800 	push	{fp, lr}
  11fc64:	e28db004 	add	fp, sp, #4
  11fc68:	e24dd008 	sub	sp, sp, #8
  11fc6c:	e50b0008 	str	r0, [fp, #-8]
  11fc70:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fc74:	e51b3008 	ldr	r3, [fp, #-8]
  11fc78:	e3530000 	cmp	r3, #0
  11fc7c:	0a00000d 	beq	11fcb8 <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11fc80:	e51b3008 	ldr	r3, [fp, #-8]
  11fc84:	e5933014 	ldr	r3, [r3, #20]
  11fc88:	e3530001 	cmp	r3, #1
  11fc8c:	1a000006 	bne	11fcac <tcp_err+0x4c>
  11fc90:	e3080200 	movw	r0, #33280	; 0x8200
  11fc94:	e3400014 	movt	r0, #20
  11fc98:	ebff8d1d 	bl	103114 <rt_kprintf>
  11fc9c:	e30016db 	movw	r1, #1755	; 0x6db
  11fca0:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11fca4:	e3400014 	movt	r0, #20
  11fca8:	ebffad0c 	bl	10b0e0 <sys_arch_assert>
    pcb->errf = err;
  11fcac:	e51b3008 	ldr	r3, [fp, #-8]
  11fcb0:	e51b200c 	ldr	r2, [fp, #-12]
  11fcb4:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11fcb8:	e320f000 	nop	{0}
  11fcbc:	e24bd004 	sub	sp, fp, #4
  11fcc0:	e8bd8800 	pop	{fp, pc}

0011fcc4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11fcc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fcc8:	e28db000 	add	fp, sp, #0
  11fccc:	e24dd014 	sub	sp, sp, #20
  11fcd0:	e50b0010 	str	r0, [fp, #-16]
  11fcd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11fcd8:	e51b3010 	ldr	r3, [fp, #-16]
  11fcdc:	e3530000 	cmp	r3, #0
  11fce0:	0a000008 	beq	11fd08 <tcp_accept+0x44>
  11fce4:	e51b3010 	ldr	r3, [fp, #-16]
  11fce8:	e5933014 	ldr	r3, [r3, #20]
  11fcec:	e3530001 	cmp	r3, #1
  11fcf0:	1a000004 	bne	11fd08 <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11fcf4:	e51b3010 	ldr	r3, [fp, #-16]
  11fcf8:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11fcfc:	e51b3008 	ldr	r3, [fp, #-8]
  11fd00:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fd04:	e583201c 	str	r2, [r3, #28]
  }
}
  11fd08:	e320f000 	nop	{0}
  11fd0c:	e28bd000 	add	sp, fp, #0
  11fd10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fd14:	e12fff1e 	bx	lr

0011fd18 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11fd18:	e92d4800 	push	{fp, lr}
  11fd1c:	e28db004 	add	fp, sp, #4
  11fd20:	e24dd010 	sub	sp, sp, #16
  11fd24:	e50b0008 	str	r0, [fp, #-8]
  11fd28:	e50b100c 	str	r1, [fp, #-12]
  11fd2c:	e1a03002 	mov	r3, r2
  11fd30:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11fd34:	e51b3008 	ldr	r3, [fp, #-8]
  11fd38:	e5933014 	ldr	r3, [r3, #20]
  11fd3c:	e3530001 	cmp	r3, #1
  11fd40:	1a000006 	bne	11fd60 <tcp_poll+0x48>
  11fd44:	e3080228 	movw	r0, #33320	; 0x8228
  11fd48:	e3400014 	movt	r0, #20
  11fd4c:	ebff8cf0 	bl	103114 <rt_kprintf>
  11fd50:	e30016fe 	movw	r1, #1790	; 0x6fe
  11fd54:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11fd58:	e3400014 	movt	r0, #20
  11fd5c:	ebffacdf 	bl	10b0e0 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11fd60:	e51b3008 	ldr	r3, [fp, #-8]
  11fd64:	e51b200c 	ldr	r2, [fp, #-12]
  11fd68:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11fd6c:	e51b3008 	ldr	r3, [fp, #-8]
  11fd70:	e55b200d 	ldrb	r2, [fp, #-13]
  11fd74:	e5c32020 	strb	r2, [r3, #32]
}
  11fd78:	e320f000 	nop	{0}
  11fd7c:	e24bd004 	sub	sp, fp, #4
  11fd80:	e8bd8800 	pop	{fp, pc}

0011fd84 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11fd84:	e92d4800 	push	{fp, lr}
  11fd88:	e28db004 	add	fp, sp, #4
  11fd8c:	e24dd008 	sub	sp, sp, #8
  11fd90:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11fd94:	e51b3008 	ldr	r3, [fp, #-8]
  11fd98:	e5933014 	ldr	r3, [r3, #20]
  11fd9c:	e3530000 	cmp	r3, #0
  11fda0:	0a00002e 	beq	11fe60 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11fda4:	e51b3008 	ldr	r3, [fp, #-8]
  11fda8:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fdac:	e353000a 	cmp	r3, #10
  11fdb0:	0a00002a 	beq	11fe60 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fdb4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdb8:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11fdbc:	e3530001 	cmp	r3, #1
  11fdc0:	0a000026 	beq	11fe60 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11fdc4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdc8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fdcc:	e3530000 	cmp	r3, #0
  11fdd0:	0a000006 	beq	11fdf0 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fdd4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdd8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fddc:	e1a00003 	mov	r0, r3
  11fde0:	ebffec2e 	bl	11aea0 <pbuf_free>
      pcb->refused_data = NULL;
  11fde4:	e51b3008 	ldr	r3, [fp, #-8]
  11fde8:	e3a02000 	mov	r2, #0
  11fdec:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fdf0:	e51b3008 	ldr	r3, [fp, #-8]
  11fdf4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fdf8:	e1a00003 	mov	r0, r3
  11fdfc:	ebfffd89 	bl	11f428 <tcp_segs_free>
    pcb->ooseq = NULL;
  11fe00:	e51b3008 	ldr	r3, [fp, #-8]
  11fe04:	e3a02000 	mov	r2, #0
  11fe08:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11fe0c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe10:	e3e02000 	mvn	r2, #0
  11fe14:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fe18:	e51b3008 	ldr	r3, [fp, #-8]
  11fe1c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fe20:	e1a00003 	mov	r0, r3
  11fe24:	ebfffd7f 	bl	11f428 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11fe28:	e51b3008 	ldr	r3, [fp, #-8]
  11fe2c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fe30:	e1a00003 	mov	r0, r3
  11fe34:	ebfffd7b 	bl	11f428 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11fe38:	e51b3008 	ldr	r3, [fp, #-8]
  11fe3c:	e3a02000 	mov	r2, #0
  11fe40:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11fe44:	e51b3008 	ldr	r3, [fp, #-8]
  11fe48:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11fe4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe50:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11fe54:	e51b3008 	ldr	r3, [fp, #-8]
  11fe58:	e3a02000 	mov	r2, #0
  11fe5c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fe60:	e320f000 	nop	{0}
  11fe64:	e24bd004 	sub	sp, fp, #4
  11fe68:	e8bd8800 	pop	{fp, pc}

0011fe6c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fe6c:	e92d4800 	push	{fp, lr}
  11fe70:	e28db004 	add	fp, sp, #4
  11fe74:	e24dd010 	sub	sp, sp, #16
  11fe78:	e50b0010 	str	r0, [fp, #-16]
  11fe7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fe80:	e51b3010 	ldr	r3, [fp, #-16]
  11fe84:	e5933000 	ldr	r3, [r3]
  11fe88:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fe8c:	e1520003 	cmp	r2, r3
  11fe90:	1a000005 	bne	11feac <tcp_pcb_remove+0x40>
  11fe94:	e51b3010 	ldr	r3, [fp, #-16]
  11fe98:	e5933000 	ldr	r3, [r3]
  11fe9c:	e593200c 	ldr	r2, [r3, #12]
  11fea0:	e51b3010 	ldr	r3, [fp, #-16]
  11fea4:	e5832000 	str	r2, [r3]
  11fea8:	ea000013 	b	11fefc <tcp_pcb_remove+0x90>
  11feac:	e51b3010 	ldr	r3, [fp, #-16]
  11feb0:	e5933000 	ldr	r3, [r3]
  11feb4:	e50b3008 	str	r3, [fp, #-8]
  11feb8:	ea00000c 	b	11fef0 <tcp_pcb_remove+0x84>
  11febc:	e51b3008 	ldr	r3, [fp, #-8]
  11fec0:	e593300c 	ldr	r3, [r3, #12]
  11fec4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fec8:	e1520003 	cmp	r2, r3
  11fecc:	1a000004 	bne	11fee4 <tcp_pcb_remove+0x78>
  11fed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fed4:	e593200c 	ldr	r2, [r3, #12]
  11fed8:	e51b3008 	ldr	r3, [fp, #-8]
  11fedc:	e583200c 	str	r2, [r3, #12]
  11fee0:	ea000005 	b	11fefc <tcp_pcb_remove+0x90>
  11fee4:	e51b3008 	ldr	r3, [fp, #-8]
  11fee8:	e593300c 	ldr	r3, [r3, #12]
  11feec:	e50b3008 	str	r3, [fp, #-8]
  11fef0:	e51b3008 	ldr	r3, [fp, #-8]
  11fef4:	e3530000 	cmp	r3, #0
  11fef8:	1affffef 	bne	11febc <tcp_pcb_remove+0x50>
  11fefc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff00:	e3a02000 	mov	r2, #0
  11ff04:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11ff08:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ff0c:	ebffff9c 	bl	11fd84 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11ff10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff14:	e5933014 	ldr	r3, [r3, #20]
  11ff18:	e353000a 	cmp	r3, #10
  11ff1c:	0a000010 	beq	11ff64 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11ff20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff24:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11ff28:	e3530001 	cmp	r3, #1
  11ff2c:	0a00000c 	beq	11ff64 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11ff30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff34:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff38:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11ff3c:	e3530000 	cmp	r3, #0
  11ff40:	0a000007 	beq	11ff64 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11ff44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff48:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff4c:	e3833002 	orr	r3, r3, #2
  11ff50:	e6ef2073 	uxtb	r2, r3
  11ff54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff58:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11ff5c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ff60:	eb0017f9 	bl	125f4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11ff64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff68:	e5933014 	ldr	r3, [r3, #20]
  11ff6c:	e3530001 	cmp	r3, #1
  11ff70:	0a000020 	beq	11fff8 <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11ff74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11ff7c:	e3530000 	cmp	r3, #0
  11ff80:	0a000006 	beq	11ffa0 <tcp_pcb_remove+0x134>
  11ff84:	e3080248 	movw	r0, #33352	; 0x8248
  11ff88:	e3400014 	movt	r0, #20
  11ff8c:	ebff8c60 	bl	103114 <rt_kprintf>
  11ff90:	e300174e 	movw	r1, #1870	; 0x74e
  11ff94:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11ff98:	e3400014 	movt	r0, #20
  11ff9c:	ebffac4f 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11ffa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffa4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11ffa8:	e3530000 	cmp	r3, #0
  11ffac:	0a000006 	beq	11ffcc <tcp_pcb_remove+0x160>
  11ffb0:	e3080260 	movw	r0, #33376	; 0x8260
  11ffb4:	e3400014 	movt	r0, #20
  11ffb8:	ebff8c55 	bl	103114 <rt_kprintf>
  11ffbc:	e300174f 	movw	r1, #1871	; 0x74f
  11ffc0:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11ffc4:	e3400014 	movt	r0, #20
  11ffc8:	ebffac44 	bl	10b0e0 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11ffcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffd0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ffd4:	e3530000 	cmp	r3, #0
  11ffd8:	0a000006 	beq	11fff8 <tcp_pcb_remove+0x18c>
  11ffdc:	e308027c 	movw	r0, #33404	; 0x827c
  11ffe0:	e3400014 	movt	r0, #20
  11ffe4:	ebff8c4a 	bl	103114 <rt_kprintf>
  11ffe8:	e3001751 	movw	r1, #1873	; 0x751
  11ffec:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  11fff0:	e3400014 	movt	r0, #20
  11fff4:	ebffac39 	bl	10b0e0 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  11fff8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fffc:	e3a02000 	mov	r2, #0
  120000:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  120004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120008:	e3a02000 	mov	r2, #0
  12000c:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  120010:	e320f000 	nop	{0}
  120014:	e24bd004 	sub	sp, fp, #4
  120018:	e8bd8800 	pop	{fp, pc}

0012001c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  12001c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  120020:	e28db000 	add	fp, sp, #0
  120024:	e24dd00c 	sub	sp, sp, #12
  120028:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  12002c:	e30d3034 	movw	r3, #53300	; 0xd034
  120030:	e3403014 	movt	r3, #20
  120034:	e5932000 	ldr	r2, [r3]
  120038:	e30c3c44 	movw	r3, #52292	; 0xcc44
  12003c:	e3403015 	movt	r3, #21
  120040:	e5933000 	ldr	r3, [r3]
  120044:	e0822003 	add	r2, r2, r3
  120048:	e30d3034 	movw	r3, #53300	; 0xd034
  12004c:	e3403014 	movt	r3, #20
  120050:	e5832000 	str	r2, [r3]
  return iss;
  120054:	e30d3034 	movw	r3, #53300	; 0xd034
  120058:	e3403014 	movt	r3, #20
  12005c:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  120060:	e1a00003 	mov	r0, r3
  120064:	e28bd000 	add	sp, fp, #0
  120068:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12006c:	e12fff1e 	bx	lr

00120070 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  120070:	e92d4800 	push	{fp, lr}
  120074:	e28db004 	add	fp, sp, #4
  120078:	e24dd010 	sub	sp, sp, #16
  12007c:	e1a03000 	mov	r3, r0
  120080:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  120084:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  120088:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12008c:	eb00443c 	bl	131184 <ip4_route>
  120090:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  120094:	e51b3008 	ldr	r3, [fp, #-8]
  120098:	e3530000 	cmp	r3, #0
  12009c:	1a000001 	bne	1200a8 <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  1200a0:	e15b30be 	ldrh	r3, [fp, #-14]
  1200a4:	ea00000f 	b	1200e8 <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  1200a8:	e51b3008 	ldr	r3, [fp, #-8]
  1200ac:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1200b0:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  1200b4:	e15b30fa 	ldrsh	r3, [fp, #-10]
  1200b8:	e3530000 	cmp	r3, #0
  1200bc:	0a000008 	beq	1200e4 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  1200c0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1200c4:	e2433028 	sub	r3, r3, #40	; 0x28
  1200c8:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  1200cc:	e15b20bc 	ldrh	r2, [fp, #-12]
  1200d0:	e15b30be 	ldrh	r3, [fp, #-14]
  1200d4:	e1520003 	cmp	r2, r3
  1200d8:	31a03002 	movcc	r3, r2
  1200dc:	21a03003 	movcs	r3, r3
  1200e0:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  1200e4:	e15b30be 	ldrh	r3, [fp, #-14]
}
  1200e8:	e1a00003 	mov	r0, r3
  1200ec:	e24bd004 	sub	sp, fp, #4
  1200f0:	e8bd8800 	pop	{fp, pc}

001200f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  1200f4:	e92d4800 	push	{fp, lr}
  1200f8:	e28db004 	add	fp, sp, #4
  1200fc:	e24dd010 	sub	sp, sp, #16
  120100:	e50b0010 	str	r0, [fp, #-16]
  120104:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  120108:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12010c:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  120110:	ea000010 	b	120158 <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  120114:	e51b3008 	ldr	r3, [fp, #-8]
  120118:	e5932000 	ldr	r2, [r3]
  12011c:	e51b3010 	ldr	r3, [fp, #-16]
  120120:	e5933000 	ldr	r3, [r3]
  120124:	e1520003 	cmp	r2, r3
  120128:	1a000007 	bne	12014c <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  12012c:	e51b3008 	ldr	r3, [fp, #-8]
  120130:	e593300c 	ldr	r3, [r3, #12]
  120134:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  120138:	e51b0008 	ldr	r0, [fp, #-8]
  12013c:	ebfff630 	bl	11da04 <tcp_abort>
      pcb = next;
  120140:	e51b300c 	ldr	r3, [fp, #-12]
  120144:	e50b3008 	str	r3, [fp, #-8]
  120148:	ea000002 	b	120158 <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  12014c:	e51b3008 	ldr	r3, [fp, #-8]
  120150:	e593300c 	ldr	r3, [r3, #12]
  120154:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  120158:	e51b3008 	ldr	r3, [fp, #-8]
  12015c:	e3530000 	cmp	r3, #0
  120160:	1affffeb 	bne	120114 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  120164:	e320f000 	nop	{0}
  120168:	e24bd004 	sub	sp, fp, #4
  12016c:	e8bd8800 	pop	{fp, pc}

00120170 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  120170:	e92d4800 	push	{fp, lr}
  120174:	e28db004 	add	fp, sp, #4
  120178:	e24dd010 	sub	sp, sp, #16
  12017c:	e50b0010 	str	r0, [fp, #-16]
  120180:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  120184:	e51b3010 	ldr	r3, [fp, #-16]
  120188:	e3530000 	cmp	r3, #0
  12018c:	0a00002d 	beq	120248 <tcp_netif_ip_addr_changed+0xd8>
  120190:	e51b3010 	ldr	r3, [fp, #-16]
  120194:	e5933000 	ldr	r3, [r3]
  120198:	e3530000 	cmp	r3, #0
  12019c:	0a000029 	beq	120248 <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  1201a0:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1201a4:	e3403015 	movt	r3, #21
  1201a8:	e5933000 	ldr	r3, [r3]
  1201ac:	e1a01003 	mov	r1, r3
  1201b0:	e51b0010 	ldr	r0, [fp, #-16]
  1201b4:	ebffffce 	bl	1200f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  1201b8:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  1201bc:	e3403015 	movt	r3, #21
  1201c0:	e5933000 	ldr	r3, [r3]
  1201c4:	e1a01003 	mov	r1, r3
  1201c8:	e51b0010 	ldr	r0, [fp, #-16]
  1201cc:	ebffffc8 	bl	1200f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  1201d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201d4:	e3530000 	cmp	r3, #0
  1201d8:	0a00001a 	beq	120248 <tcp_netif_ip_addr_changed+0xd8>
  1201dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201e0:	e5933000 	ldr	r3, [r3]
  1201e4:	e3530000 	cmp	r3, #0
  1201e8:	0a000016 	beq	120248 <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  1201ec:	e30c3c48 	movw	r3, #52296	; 0xcc48
  1201f0:	e3403015 	movt	r3, #21
  1201f4:	e5933000 	ldr	r3, [r3]
  1201f8:	e50b3008 	str	r3, [fp, #-8]
  1201fc:	ea00000e 	b	12023c <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  120200:	e51b3008 	ldr	r3, [fp, #-8]
  120204:	e593300c 	ldr	r3, [r3, #12]
  120208:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  12020c:	e51b3008 	ldr	r3, [fp, #-8]
  120210:	e5932000 	ldr	r2, [r3]
  120214:	e51b3010 	ldr	r3, [fp, #-16]
  120218:	e5933000 	ldr	r3, [r3]
  12021c:	e1520003 	cmp	r2, r3
  120220:	1a000003 	bne	120234 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  120224:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120228:	e5932000 	ldr	r2, [r3]
  12022c:	e51b3008 	ldr	r3, [fp, #-8]
  120230:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  120234:	e51b300c 	ldr	r3, [fp, #-12]
  120238:	e50b3008 	str	r3, [fp, #-8]
  12023c:	e51b3008 	ldr	r3, [fp, #-8]
  120240:	e3530000 	cmp	r3, #0
  120244:	1affffed 	bne	120200 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  120248:	e320f000 	nop	{0}
  12024c:	e24bd004 	sub	sp, fp, #4
  120250:	e8bd8800 	pop	{fp, pc}

00120254 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  120254:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  120258:	e28db000 	add	fp, sp, #0
  12025c:	e24dd00c 	sub	sp, sp, #12
  120260:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  120264:	e3073e68 	movw	r3, #32360	; 0x7e68
  120268:	e3403014 	movt	r3, #20
  12026c:	e51b2008 	ldr	r2, [fp, #-8]
  120270:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  120274:	e1a00003 	mov	r0, r3
  120278:	e28bd000 	add	sp, fp, #0
  12027c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120280:	e12fff1e 	bx	lr

00120284 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  120284:	e92d4810 	push	{r4, fp, lr}
  120288:	e28db008 	add	fp, sp, #8
  12028c:	e24dd034 	sub	sp, sp, #52	; 0x34
  120290:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  120294:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  120298:	e3a03000 	mov	r3, #0
  12029c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  1202a0:	e3a03000 	mov	r3, #0
  1202a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  1202a8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1202ac:	e3403015 	movt	r3, #21
  1202b0:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  1202b4:	e2833001 	add	r3, r3, #1
  1202b8:	e6ff2073 	uxth	r2, r3
  1202bc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1202c0:	e3403015 	movt	r3, #21
  1202c4:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  1202c8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1202cc:	e3403015 	movt	r3, #21
  1202d0:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  1202d4:	e2832001 	add	r2, r3, #1
  1202d8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1202dc:	e3403015 	movt	r3, #21
  1202e0:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  1202e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202e8:	e5932004 	ldr	r2, [r3, #4]
  1202ec:	e30e325c 	movw	r3, #57948	; 0xe25c
  1202f0:	e3403014 	movt	r3, #20
  1202f4:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  1202f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202fc:	e1d330ba 	ldrh	r3, [r3, #10]
  120300:	e3530013 	cmp	r3, #19
  120304:	8a000008 	bhi	12032c <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  120308:	e30c3a50 	movw	r3, #51792	; 0xca50
  12030c:	e3403015 	movt	r3, #21
  120310:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120314:	e2833001 	add	r3, r3, #1
  120318:	e6ff2073 	uxth	r2, r3
  12031c:	e30c3a50 	movw	r3, #51792	; 0xca50
  120320:	e3403015 	movt	r3, #21
  120324:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  120328:	ea0003d1 	b	121274 <tcp_input+0xff0>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  12032c:	e30f3618 	movw	r3, #63000	; 0xf618
  120330:	e3403014 	movt	r3, #20
  120334:	e5932014 	ldr	r2, [r3, #20]
  120338:	e30f3618 	movw	r3, #63000	; 0xf618
  12033c:	e3403014 	movt	r3, #20
  120340:	e5933000 	ldr	r3, [r3]
  120344:	e1a01003 	mov	r1, r3
  120348:	e1a00002 	mov	r0, r2
  12034c:	eb00486b 	bl	132500 <ip4_addr_isbroadcast_u32>
  120350:	e1a03000 	mov	r3, r0
  120354:	e3530000 	cmp	r3, #0
  120358:	1a000005 	bne	120374 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  12035c:	e30f3618 	movw	r3, #63000	; 0xf618
  120360:	e3403014 	movt	r3, #20
  120364:	e5933014 	ldr	r3, [r3, #20]
  120368:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  12036c:	e35300e0 	cmp	r3, #224	; 0xe0
  120370:	1a000008 	bne	120398 <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  120374:	e30c3a50 	movw	r3, #51792	; 0xca50
  120378:	e3403015 	movt	r3, #21
  12037c:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120380:	e2833001 	add	r3, r3, #1
  120384:	e6ff2073 	uxth	r2, r3
  120388:	e30c3a50 	movw	r3, #51792	; 0xca50
  12038c:	e3403015 	movt	r3, #21
  120390:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  120394:	ea0003b6 	b	121274 <tcp_input+0xff0>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  120398:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12039c:	e1d320b8 	ldrh	r2, [r3, #8]
  1203a0:	e59f3f20 	ldr	r3, [pc, #3872]	; 1212c8 <tcp_input+0x1044>
  1203a4:	e58d3000 	str	r3, [sp]
  1203a8:	e59f3f1c 	ldr	r3, [pc, #3868]	; 1212cc <tcp_input+0x1048>
  1203ac:	e3a01006 	mov	r1, #6
  1203b0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1203b4:	ebffe0a1 	bl	118640 <ip_chksum_pseudo>
  1203b8:	e1a03000 	mov	r3, r0
  1203bc:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  1203c0:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1203c4:	e3530000 	cmp	r3, #0
  1203c8:	0a000008 	beq	1203f0 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  1203cc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1203d0:	e3403015 	movt	r3, #21
  1203d4:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  1203d8:	e2833001 	add	r3, r3, #1
  1203dc:	e6ff2073 	uxth	r2, r3
  1203e0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1203e4:	e3403015 	movt	r3, #21
  1203e8:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  1203ec:	ea0003a0 	b	121274 <tcp_input+0xff0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  1203f0:	e30e325c 	movw	r3, #57948	; 0xe25c
  1203f4:	e3403014 	movt	r3, #20
  1203f8:	e5933000 	ldr	r3, [r3]
  1203fc:	e1d330bc 	ldrh	r3, [r3, #12]
  120400:	e6ff3073 	uxth	r3, r3
  120404:	e1a00003 	mov	r0, r3
  120408:	ebffd86d 	bl	1165c4 <lwip_htons>
  12040c:	e1a03000 	mov	r3, r0
  120410:	e1a03623 	lsr	r3, r3, #12
  120414:	e6ff3073 	uxth	r3, r3
  120418:	e6ef3073 	uxtb	r3, r3
  12041c:	e1a03103 	lsl	r3, r3, #2
  120420:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  120424:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120428:	e3530013 	cmp	r3, #19
  12042c:	9a000005 	bls	120448 <tcp_input+0x1c4>
  120430:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120434:	e6ff2073 	uxth	r2, r3
  120438:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12043c:	e1d330b8 	ldrh	r3, [r3, #8]
  120440:	e1520003 	cmp	r2, r3
  120444:	9a000008 	bls	12046c <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  120448:	e30c3a50 	movw	r3, #51792	; 0xca50
  12044c:	e3403015 	movt	r3, #21
  120450:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120454:	e2833001 	add	r3, r3, #1
  120458:	e6ff2073 	uxth	r2, r3
  12045c:	e30c3a50 	movw	r3, #51792	; 0xca50
  120460:	e3403015 	movt	r3, #21
  120464:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  120468:	ea000381 	b	121274 <tcp_input+0xff0>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  12046c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120470:	e6ff3073 	uxth	r3, r3
  120474:	e2433014 	sub	r3, r3, #20
  120478:	e6ff2073 	uxth	r2, r3
  12047c:	e30e3260 	movw	r3, #57952	; 0xe260
  120480:	e3403014 	movt	r3, #20
  120484:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  120488:	e30e3264 	movw	r3, #57956	; 0xe264
  12048c:	e3403014 	movt	r3, #20
  120490:	e3a02000 	mov	r2, #0
  120494:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  120498:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12049c:	e1d320ba 	ldrh	r2, [r3, #10]
  1204a0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1204a4:	e6ff3073 	uxth	r3, r3
  1204a8:	e1520003 	cmp	r2, r3
  1204ac:	3a00000e 	bcc	1204ec <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  1204b0:	e30e3260 	movw	r3, #57952	; 0xe260
  1204b4:	e3403014 	movt	r3, #20
  1204b8:	e1d320b0 	ldrh	r2, [r3]
  1204bc:	e30e3262 	movw	r3, #57954	; 0xe262
  1204c0:	e3403014 	movt	r3, #20
  1204c4:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  1204c8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1204cc:	e6ff3073 	uxth	r3, r3
  1204d0:	e2633000 	rsb	r3, r3, #0
  1204d4:	e6ff3073 	uxth	r3, r3
  1204d8:	e6bf3073 	sxth	r3, r3
  1204dc:	e1a01003 	mov	r1, r3
  1204e0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1204e4:	ebffea4f 	bl	11ae28 <pbuf_header>
  1204e8:	ea000061 	b	120674 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  1204ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1204f0:	e5933000 	ldr	r3, [r3]
  1204f4:	e3530000 	cmp	r3, #0
  1204f8:	1a000006 	bne	120518 <tcp_input+0x294>
  1204fc:	e3080294 	movw	r0, #33428	; 0x8294
  120500:	e3400014 	movt	r0, #20
  120504:	ebff8b02 	bl	103114 <rt_kprintf>
  120508:	e3a010b0 	mov	r1, #176	; 0xb0
  12050c:	e30802a4 	movw	r0, #33444	; 0x82a4
  120510:	e3400014 	movt	r0, #20
  120514:	ebffaaf1 	bl	10b0e0 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  120518:	e3e01013 	mvn	r1, #19
  12051c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120520:	ebffea40 	bl	11ae28 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  120524:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120528:	e1d320ba 	ldrh	r2, [r3, #10]
  12052c:	e30e3262 	movw	r3, #57954	; 0xe262
  120530:	e3403014 	movt	r3, #20
  120534:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  120538:	e30e3260 	movw	r3, #57952	; 0xe260
  12053c:	e3403014 	movt	r3, #20
  120540:	e1d320b0 	ldrh	r2, [r3]
  120544:	e30e3262 	movw	r3, #57954	; 0xe262
  120548:	e3403014 	movt	r3, #20
  12054c:	e1d330b0 	ldrh	r3, [r3]
  120550:	e0423003 	sub	r3, r2, r3
  120554:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  120558:	e30e3262 	movw	r3, #57954	; 0xe262
  12055c:	e3403014 	movt	r3, #20
  120560:	e1d330b0 	ldrh	r3, [r3]
  120564:	e2633000 	rsb	r3, r3, #0
  120568:	e6ff3073 	uxth	r3, r3
  12056c:	e6bf3073 	sxth	r3, r3
  120570:	e1a01003 	mov	r1, r3
  120574:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120578:	ebffea2a 	bl	11ae28 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  12057c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120580:	e5933000 	ldr	r3, [r3]
  120584:	e1d330ba 	ldrh	r3, [r3, #10]
  120588:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  12058c:	e1520003 	cmp	r2, r3
  120590:	9a000008 	bls	1205b8 <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  120594:	e30c3a50 	movw	r3, #51792	; 0xca50
  120598:	e3403015 	movt	r3, #21
  12059c:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1205a0:	e2833001 	add	r3, r3, #1
  1205a4:	e6ff2073 	uxth	r2, r3
  1205a8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1205ac:	e3403015 	movt	r3, #21
  1205b0:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  1205b4:	ea00032e 	b	121274 <tcp_input+0xff0>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  1205b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205bc:	e5933000 	ldr	r3, [r3]
  1205c0:	e5932004 	ldr	r2, [r3, #4]
  1205c4:	e30e3264 	movw	r3, #57956	; 0xe264
  1205c8:	e3403014 	movt	r3, #20
  1205cc:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  1205d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205d4:	e5932000 	ldr	r2, [r3]
  1205d8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1205dc:	e2633000 	rsb	r3, r3, #0
  1205e0:	e6ff3073 	uxth	r3, r3
  1205e4:	e6bf3073 	sxth	r3, r3
  1205e8:	e1a01003 	mov	r1, r3
  1205ec:	e1a00002 	mov	r0, r2
  1205f0:	ebffea0c 	bl	11ae28 <pbuf_header>
    p->tot_len -= opt2len;
  1205f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205f8:	e1d320b8 	ldrh	r2, [r3, #8]
  1205fc:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120600:	e0423003 	sub	r3, r2, r3
  120604:	e6ff2073 	uxth	r2, r3
  120608:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12060c:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  120610:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120614:	e1d330ba 	ldrh	r3, [r3, #10]
  120618:	e3530000 	cmp	r3, #0
  12061c:	0a000006 	beq	12063c <tcp_input+0x3b8>
  120620:	e30802d4 	movw	r0, #33492	; 0x82d4
  120624:	e3400014 	movt	r0, #20
  120628:	ebff8ab9 	bl	103114 <rt_kprintf>
  12062c:	e3a010cd 	mov	r1, #205	; 0xcd
  120630:	e30802a4 	movw	r0, #33444	; 0x82a4
  120634:	e3400014 	movt	r0, #20
  120638:	ebffaaa8 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  12063c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120640:	e1d320b8 	ldrh	r2, [r3, #8]
  120644:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120648:	e5933000 	ldr	r3, [r3]
  12064c:	e1d330b8 	ldrh	r3, [r3, #8]
  120650:	e1520003 	cmp	r2, r3
  120654:	0a000006 	beq	120674 <tcp_input+0x3f0>
  120658:	e30802e0 	movw	r0, #33504	; 0x82e0
  12065c:	e3400014 	movt	r0, #20
  120660:	ebff8aab 	bl	103114 <rt_kprintf>
  120664:	e3a010ce 	mov	r1, #206	; 0xce
  120668:	e30802a4 	movw	r0, #33444	; 0x82a4
  12066c:	e3400014 	movt	r0, #20
  120670:	ebffaa9a 	bl	10b0e0 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  120674:	e30e325c 	movw	r3, #57948	; 0xe25c
  120678:	e3403014 	movt	r3, #20
  12067c:	e5933000 	ldr	r3, [r3]
  120680:	e1d330b0 	ldrh	r3, [r3]
  120684:	e6ff2073 	uxth	r2, r3
  120688:	e30e325c 	movw	r3, #57948	; 0xe25c
  12068c:	e3403014 	movt	r3, #20
  120690:	e5934000 	ldr	r4, [r3]
  120694:	e1a00002 	mov	r0, r2
  120698:	ebffd7c9 	bl	1165c4 <lwip_htons>
  12069c:	e1a03000 	mov	r3, r0
  1206a0:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  1206a4:	e30e325c 	movw	r3, #57948	; 0xe25c
  1206a8:	e3403014 	movt	r3, #20
  1206ac:	e5933000 	ldr	r3, [r3]
  1206b0:	e1d330b2 	ldrh	r3, [r3, #2]
  1206b4:	e6ff2073 	uxth	r2, r3
  1206b8:	e30e325c 	movw	r3, #57948	; 0xe25c
  1206bc:	e3403014 	movt	r3, #20
  1206c0:	e5934000 	ldr	r4, [r3]
  1206c4:	e1a00002 	mov	r0, r2
  1206c8:	ebffd7bd 	bl	1165c4 <lwip_htons>
  1206cc:	e1a03000 	mov	r3, r0
  1206d0:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  1206d4:	e30e325c 	movw	r3, #57948	; 0xe25c
  1206d8:	e3403014 	movt	r3, #20
  1206dc:	e5933000 	ldr	r3, [r3]
  1206e0:	e5932004 	ldr	r2, [r3, #4]
  1206e4:	e30e325c 	movw	r3, #57948	; 0xe25c
  1206e8:	e3403014 	movt	r3, #20
  1206ec:	e5934000 	ldr	r4, [r3]
  1206f0:	e1a00002 	mov	r0, r2
  1206f4:	ebffd7be 	bl	1165f4 <lwip_htonl>
  1206f8:	e1a03000 	mov	r3, r0
  1206fc:	e5843004 	str	r3, [r4, #4]
  120700:	e5942004 	ldr	r2, [r4, #4]
  120704:	e30e326c 	movw	r3, #57964	; 0xe26c
  120708:	e3403014 	movt	r3, #20
  12070c:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  120710:	e30e325c 	movw	r3, #57948	; 0xe25c
  120714:	e3403014 	movt	r3, #20
  120718:	e5933000 	ldr	r3, [r3]
  12071c:	e5932008 	ldr	r2, [r3, #8]
  120720:	e30e325c 	movw	r3, #57948	; 0xe25c
  120724:	e3403014 	movt	r3, #20
  120728:	e5934000 	ldr	r4, [r3]
  12072c:	e1a00002 	mov	r0, r2
  120730:	ebffd7af 	bl	1165f4 <lwip_htonl>
  120734:	e1a03000 	mov	r3, r0
  120738:	e5843008 	str	r3, [r4, #8]
  12073c:	e5942008 	ldr	r2, [r4, #8]
  120740:	e30e3270 	movw	r3, #57968	; 0xe270
  120744:	e3403014 	movt	r3, #20
  120748:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  12074c:	e30e325c 	movw	r3, #57948	; 0xe25c
  120750:	e3403014 	movt	r3, #20
  120754:	e5933000 	ldr	r3, [r3]
  120758:	e1d330be 	ldrh	r3, [r3, #14]
  12075c:	e6ff2073 	uxth	r2, r3
  120760:	e30e325c 	movw	r3, #57948	; 0xe25c
  120764:	e3403014 	movt	r3, #20
  120768:	e5934000 	ldr	r4, [r3]
  12076c:	e1a00002 	mov	r0, r2
  120770:	ebffd793 	bl	1165c4 <lwip_htons>
  120774:	e1a03000 	mov	r3, r0
  120778:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  12077c:	e30e325c 	movw	r3, #57948	; 0xe25c
  120780:	e3403014 	movt	r3, #20
  120784:	e5933000 	ldr	r3, [r3]
  120788:	e1d330bc 	ldrh	r3, [r3, #12]
  12078c:	e6ff3073 	uxth	r3, r3
  120790:	e1a00003 	mov	r0, r3
  120794:	ebffd78a 	bl	1165c4 <lwip_htons>
  120798:	e1a03000 	mov	r3, r0
  12079c:	e6ef3073 	uxtb	r3, r3
  1207a0:	e203303f 	and	r3, r3, #63	; 0x3f
  1207a4:	e6ef2073 	uxtb	r2, r3
  1207a8:	e30e3278 	movw	r3, #57976	; 0xe278
  1207ac:	e3403014 	movt	r3, #20
  1207b0:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  1207b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1207b8:	e1d320b8 	ldrh	r2, [r3, #8]
  1207bc:	e30e3278 	movw	r3, #57976	; 0xe278
  1207c0:	e3403014 	movt	r3, #20
  1207c4:	e5d33000 	ldrb	r3, [r3]
  1207c8:	e2033003 	and	r3, r3, #3
  1207cc:	e3530000 	cmp	r3, #0
  1207d0:	13a03001 	movne	r3, #1
  1207d4:	03a03000 	moveq	r3, #0
  1207d8:	e6ef3073 	uxtb	r3, r3
  1207dc:	e6ff3073 	uxth	r3, r3
  1207e0:	e0823003 	add	r3, r2, r3
  1207e4:	e6ff2073 	uxth	r2, r3
  1207e8:	e30e3276 	movw	r3, #57974	; 0xe276
  1207ec:	e3403014 	movt	r3, #20
  1207f0:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  1207f4:	e3a03000 	mov	r3, #0
  1207f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1207fc:	e30c3c40 	movw	r3, #52288	; 0xcc40
  120800:	e3403015 	movt	r3, #21
  120804:	e5933000 	ldr	r3, [r3]
  120808:	e50b3010 	str	r3, [fp, #-16]
  12080c:	ea000077 	b	1209f0 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  120810:	e51b3010 	ldr	r3, [fp, #-16]
  120814:	e5933014 	ldr	r3, [r3, #20]
  120818:	e3530000 	cmp	r3, #0
  12081c:	1a000006 	bne	12083c <tcp_input+0x5b8>
  120820:	e3080300 	movw	r0, #33536	; 0x8300
  120824:	e3400014 	movt	r0, #20
  120828:	ebff8a39 	bl	103114 <rt_kprintf>
  12082c:	e3a010e0 	mov	r1, #224	; 0xe0
  120830:	e30802a4 	movw	r0, #33444	; 0x82a4
  120834:	e3400014 	movt	r0, #20
  120838:	ebffaa28 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  12083c:	e51b3010 	ldr	r3, [fp, #-16]
  120840:	e5933014 	ldr	r3, [r3, #20]
  120844:	e353000a 	cmp	r3, #10
  120848:	1a000006 	bne	120868 <tcp_input+0x5e4>
  12084c:	e3080328 	movw	r0, #33576	; 0x8328
  120850:	e3400014 	movt	r0, #20
  120854:	ebff8a2e 	bl	103114 <rt_kprintf>
  120858:	e3a010e1 	mov	r1, #225	; 0xe1
  12085c:	e30802a4 	movw	r0, #33444	; 0x82a4
  120860:	e3400014 	movt	r0, #20
  120864:	ebffaa1d 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  120868:	e51b3010 	ldr	r3, [fp, #-16]
  12086c:	e5933014 	ldr	r3, [r3, #20]
  120870:	e3530001 	cmp	r3, #1
  120874:	1a000006 	bne	120894 <tcp_input+0x610>
  120878:	e3080354 	movw	r0, #33620	; 0x8354
  12087c:	e3400014 	movt	r0, #20
  120880:	ebff8a23 	bl	103114 <rt_kprintf>
  120884:	e3a010e2 	mov	r1, #226	; 0xe2
  120888:	e30802a4 	movw	r0, #33444	; 0x82a4
  12088c:	e3400014 	movt	r0, #20
  120890:	ebffaa12 	bl	10b0e0 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  120894:	e51b3010 	ldr	r3, [fp, #-16]
  120898:	e1d321bc 	ldrh	r2, [r3, #28]
  12089c:	e30e325c 	movw	r3, #57948	; 0xe25c
  1208a0:	e3403014 	movt	r3, #20
  1208a4:	e5933000 	ldr	r3, [r3]
  1208a8:	e1d330b0 	ldrh	r3, [r3]
  1208ac:	e6ff3073 	uxth	r3, r3
  1208b0:	e1520003 	cmp	r2, r3
  1208b4:	1a000048 	bne	1209dc <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  1208b8:	e51b3010 	ldr	r3, [fp, #-16]
  1208bc:	e1d321ba 	ldrh	r2, [r3, #26]
  1208c0:	e30e325c 	movw	r3, #57948	; 0xe25c
  1208c4:	e3403014 	movt	r3, #20
  1208c8:	e5933000 	ldr	r3, [r3]
  1208cc:	e1d330b2 	ldrh	r3, [r3, #2]
  1208d0:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  1208d4:	e1520003 	cmp	r2, r3
  1208d8:	1a00003f 	bne	1209dc <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1208dc:	e51b3010 	ldr	r3, [fp, #-16]
  1208e0:	e5932004 	ldr	r2, [r3, #4]
  1208e4:	e30f3618 	movw	r3, #63000	; 0xf618
  1208e8:	e3403014 	movt	r3, #20
  1208ec:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  1208f0:	e1520003 	cmp	r2, r3
  1208f4:	1a000038 	bne	1209dc <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  1208f8:	e51b3010 	ldr	r3, [fp, #-16]
  1208fc:	e5932000 	ldr	r2, [r3]
  120900:	e30f3618 	movw	r3, #63000	; 0xf618
  120904:	e3403014 	movt	r3, #20
  120908:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  12090c:	e1520003 	cmp	r2, r3
  120910:	1a000031 	bne	1209dc <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  120914:	e51b3010 	ldr	r3, [fp, #-16]
  120918:	e593300c 	ldr	r3, [r3, #12]
  12091c:	e51b2010 	ldr	r2, [fp, #-16]
  120920:	e1520003 	cmp	r2, r3
  120924:	1a000006 	bne	120944 <tcp_input+0x6c0>
  120928:	e308037c 	movw	r0, #33660	; 0x837c
  12092c:	e3400014 	movt	r0, #20
  120930:	ebff89f7 	bl	103114 <rt_kprintf>
  120934:	e3a010ea 	mov	r1, #234	; 0xea
  120938:	e30802a4 	movw	r0, #33444	; 0x82a4
  12093c:	e3400014 	movt	r0, #20
  120940:	ebffa9e6 	bl	10b0e0 <sys_arch_assert>
      if (prev != NULL) {
  120944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120948:	e3530000 	cmp	r3, #0
  12094c:	0a00000d 	beq	120988 <tcp_input+0x704>
        prev->next = pcb->next;
  120950:	e51b3010 	ldr	r3, [fp, #-16]
  120954:	e593200c 	ldr	r2, [r3, #12]
  120958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12095c:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  120960:	e30c3c40 	movw	r3, #52288	; 0xcc40
  120964:	e3403015 	movt	r3, #21
  120968:	e5932000 	ldr	r2, [r3]
  12096c:	e51b3010 	ldr	r3, [fp, #-16]
  120970:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  120974:	e30c3c40 	movw	r3, #52288	; 0xcc40
  120978:	e3403015 	movt	r3, #21
  12097c:	e51b2010 	ldr	r2, [fp, #-16]
  120980:	e5832000 	str	r2, [r3]
  120984:	ea000007 	b	1209a8 <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120988:	e30c3a50 	movw	r3, #51792	; 0xca50
  12098c:	e3403015 	movt	r3, #21
  120990:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120994:	e2833001 	add	r3, r3, #1
  120998:	e6ff2073 	uxth	r2, r3
  12099c:	e30c3a50 	movw	r3, #51792	; 0xca50
  1209a0:	e3403015 	movt	r3, #21
  1209a4:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  1209a8:	e51b3010 	ldr	r3, [fp, #-16]
  1209ac:	e593300c 	ldr	r3, [r3, #12]
  1209b0:	e51b2010 	ldr	r2, [fp, #-16]
  1209b4:	e1520003 	cmp	r2, r3
  1209b8:	1a000010 	bne	120a00 <tcp_input+0x77c>
  1209bc:	e30803a8 	movw	r0, #33704	; 0x83a8
  1209c0:	e3400014 	movt	r0, #20
  1209c4:	ebff89d2 	bl	103114 <rt_kprintf>
  1209c8:	e3a010f2 	mov	r1, #242	; 0xf2
  1209cc:	e30802a4 	movw	r0, #33444	; 0x82a4
  1209d0:	e3400014 	movt	r0, #20
  1209d4:	ebffa9c1 	bl	10b0e0 <sys_arch_assert>
      break;
  1209d8:	ea000008 	b	120a00 <tcp_input+0x77c>
    }
    prev = pcb;
  1209dc:	e51b3010 	ldr	r3, [fp, #-16]
  1209e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1209e4:	e51b3010 	ldr	r3, [fp, #-16]
  1209e8:	e593300c 	ldr	r3, [r3, #12]
  1209ec:	e50b3010 	str	r3, [fp, #-16]
  1209f0:	e51b3010 	ldr	r3, [fp, #-16]
  1209f4:	e3530000 	cmp	r3, #0
  1209f8:	1affff84 	bne	120810 <tcp_input+0x58c>
  1209fc:	ea000000 	b	120a04 <tcp_input+0x780>
      break;
  120a00:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  120a04:	e51b3010 	ldr	r3, [fp, #-16]
  120a08:	e3530000 	cmp	r3, #0
  120a0c:	1a00008e 	bne	120c4c <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120a10:	e30c3c50 	movw	r3, #52304	; 0xcc50
  120a14:	e3403015 	movt	r3, #21
  120a18:	e5933000 	ldr	r3, [r3]
  120a1c:	e50b3010 	str	r3, [fp, #-16]
  120a20:	ea000032 	b	120af0 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  120a24:	e51b3010 	ldr	r3, [fp, #-16]
  120a28:	e5933014 	ldr	r3, [r3, #20]
  120a2c:	e353000a 	cmp	r3, #10
  120a30:	0a000006 	beq	120a50 <tcp_input+0x7cc>
  120a34:	e30803d4 	movw	r0, #33748	; 0x83d4
  120a38:	e3400014 	movt	r0, #20
  120a3c:	ebff89b4 	bl	103114 <rt_kprintf>
  120a40:	e3a010fc 	mov	r1, #252	; 0xfc
  120a44:	e30802a4 	movw	r0, #33444	; 0x82a4
  120a48:	e3400014 	movt	r0, #20
  120a4c:	ebffa9a3 	bl	10b0e0 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  120a50:	e51b3010 	ldr	r3, [fp, #-16]
  120a54:	e1d321bc 	ldrh	r2, [r3, #28]
  120a58:	e30e325c 	movw	r3, #57948	; 0xe25c
  120a5c:	e3403014 	movt	r3, #20
  120a60:	e5933000 	ldr	r3, [r3]
  120a64:	e1d330b0 	ldrh	r3, [r3]
  120a68:	e6ff3073 	uxth	r3, r3
  120a6c:	e1520003 	cmp	r2, r3
  120a70:	1a00001b 	bne	120ae4 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  120a74:	e51b3010 	ldr	r3, [fp, #-16]
  120a78:	e1d321ba 	ldrh	r2, [r3, #26]
  120a7c:	e30e325c 	movw	r3, #57948	; 0xe25c
  120a80:	e3403014 	movt	r3, #20
  120a84:	e5933000 	ldr	r3, [r3]
  120a88:	e1d330b2 	ldrh	r3, [r3, #2]
  120a8c:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  120a90:	e1520003 	cmp	r2, r3
  120a94:	1a000012 	bne	120ae4 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120a98:	e51b3010 	ldr	r3, [fp, #-16]
  120a9c:	e5932004 	ldr	r2, [r3, #4]
  120aa0:	e30f3618 	movw	r3, #63000	; 0xf618
  120aa4:	e3403014 	movt	r3, #20
  120aa8:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120aac:	e1520003 	cmp	r2, r3
  120ab0:	1a00000b 	bne	120ae4 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120ab4:	e51b3010 	ldr	r3, [fp, #-16]
  120ab8:	e5932000 	ldr	r2, [r3]
  120abc:	e30f3618 	movw	r3, #63000	; 0xf618
  120ac0:	e3403014 	movt	r3, #20
  120ac4:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120ac8:	e1520003 	cmp	r2, r3
  120acc:	1a000004 	bne	120ae4 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120ad0:	e51b0010 	ldr	r0, [fp, #-16]
  120ad4:	eb0002d7 	bl	121638 <tcp_timewait_input>
        pbuf_free(p);
  120ad8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120adc:	ebffe8ef 	bl	11aea0 <pbuf_free>
        return;
  120ae0:	ea0001f6 	b	1212c0 <tcp_input+0x103c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120ae4:	e51b3010 	ldr	r3, [fp, #-16]
  120ae8:	e593300c 	ldr	r3, [r3, #12]
  120aec:	e50b3010 	str	r3, [fp, #-16]
  120af0:	e51b3010 	ldr	r3, [fp, #-16]
  120af4:	e3530000 	cmp	r3, #0
  120af8:	1affffc9 	bne	120a24 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  120afc:	e3a03000 	mov	r3, #0
  120b00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120b04:	e30c3c48 	movw	r3, #52296	; 0xcc48
  120b08:	e3403015 	movt	r3, #21
  120b0c:	e5933000 	ldr	r3, [r3]
  120b10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120b14:	ea00001f 	b	120b98 <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  120b18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b1c:	e1d321ba 	ldrh	r2, [r3, #26]
  120b20:	e30e325c 	movw	r3, #57948	; 0xe25c
  120b24:	e3403014 	movt	r3, #20
  120b28:	e5933000 	ldr	r3, [r3]
  120b2c:	e1d330b2 	ldrh	r3, [r3, #2]
  120b30:	e6ff3073 	uxth	r3, r3
  120b34:	e1520003 	cmp	r2, r3
  120b38:	1a000011 	bne	120b84 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  120b3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b40:	e5932000 	ldr	r2, [r3]
  120b44:	e30f3618 	movw	r3, #63000	; 0xf618
  120b48:	e3403014 	movt	r3, #20
  120b4c:	e5933014 	ldr	r3, [r3, #20]
  120b50:	e1520003 	cmp	r2, r3
  120b54:	0a000013 	beq	120ba8 <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  120b58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b5c:	e3530000 	cmp	r3, #0
  120b60:	0a000003 	beq	120b74 <tcp_input+0x8f0>
  120b64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b68:	e5933000 	ldr	r3, [r3]
  120b6c:	e3530000 	cmp	r3, #0
  120b70:	1a000003 	bne	120b84 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  120b74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b78:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  120b7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120b80:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  120b84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120b8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b90:	e593300c 	ldr	r3, [r3, #12]
  120b94:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120b98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b9c:	e3530000 	cmp	r3, #0
  120ba0:	1affffdc 	bne	120b18 <tcp_input+0x894>
  120ba4:	ea000000 	b	120bac <tcp_input+0x928>
            break;
  120ba8:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120bac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bb0:	e3530000 	cmp	r3, #0
  120bb4:	1a000003 	bne	120bc8 <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  120bb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120bbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120bc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  120bc4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  120bc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bcc:	e3530000 	cmp	r3, #0
  120bd0:	0a00001d 	beq	120c4c <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  120bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120bd8:	e3530000 	cmp	r3, #0
  120bdc:	0a00000d 	beq	120c18 <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120be0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120be4:	e593200c 	ldr	r2, [r3, #12]
  120be8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120bec:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120bf0:	e30c3c48 	movw	r3, #52296	; 0xcc48
  120bf4:	e3403015 	movt	r3, #21
  120bf8:	e5932000 	ldr	r2, [r3]
  120bfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120c00:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  120c04:	e30c3c48 	movw	r3, #52296	; 0xcc48
  120c08:	e3403015 	movt	r3, #21
  120c0c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  120c10:	e5832000 	str	r2, [r3]
  120c14:	ea000007 	b	120c38 <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120c18:	e30c3a50 	movw	r3, #51792	; 0xca50
  120c1c:	e3403015 	movt	r3, #21
  120c20:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120c24:	e2833001 	add	r3, r3, #1
  120c28:	e6ff2073 	uxth	r2, r3
  120c2c:	e30c3a50 	movw	r3, #51792	; 0xca50
  120c30:	e3403015 	movt	r3, #21
  120c34:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  120c38:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  120c3c:	eb0001a3 	bl	1212d0 <tcp_listen_input>
      pbuf_free(p);
  120c40:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120c44:	ebffe895 	bl	11aea0 <pbuf_free>
      return;
  120c48:	ea00019c 	b	1212c0 <tcp_input+0x103c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  120c4c:	e51b3010 	ldr	r3, [fp, #-16]
  120c50:	e3530000 	cmp	r3, #0
  120c54:	0a00014e 	beq	121194 <tcp_input+0xf10>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  120c58:	e30e324c 	movw	r3, #57932	; 0xe24c
  120c5c:	e3403014 	movt	r3, #20
  120c60:	e3a02000 	mov	r2, #0
  120c64:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  120c68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120c6c:	e1d320b8 	ldrh	r2, [r3, #8]
  120c70:	e30e324c 	movw	r3, #57932	; 0xe24c
  120c74:	e3403014 	movt	r3, #20
  120c78:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  120c7c:	e30e324c 	movw	r3, #57932	; 0xe24c
  120c80:	e3403014 	movt	r3, #20
  120c84:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  120c88:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  120c8c:	e30e325c 	movw	r3, #57948	; 0xe25c
  120c90:	e3403014 	movt	r3, #20
  120c94:	e5932000 	ldr	r2, [r3]
  120c98:	e30e324c 	movw	r3, #57932	; 0xe24c
  120c9c:	e3403014 	movt	r3, #20
  120ca0:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  120ca4:	e30e327c 	movw	r3, #57980	; 0xe27c
  120ca8:	e3403014 	movt	r3, #20
  120cac:	e3a02000 	mov	r2, #0
  120cb0:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120cb4:	e30e3279 	movw	r3, #57977	; 0xe279
  120cb8:	e3403014 	movt	r3, #20
  120cbc:	e3a02000 	mov	r2, #0
  120cc0:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  120cc4:	e30e3274 	movw	r3, #57972	; 0xe274
  120cc8:	e3403014 	movt	r3, #20
  120ccc:	e3a02000 	mov	r2, #0
  120cd0:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  120cd4:	e30e3278 	movw	r3, #57976	; 0xe278
  120cd8:	e3403014 	movt	r3, #20
  120cdc:	e5d33000 	ldrb	r3, [r3]
  120ce0:	e2033008 	and	r3, r3, #8
  120ce4:	e3530000 	cmp	r3, #0
  120ce8:	0a000005 	beq	120d04 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120cec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120cf0:	e5d3300d 	ldrb	r3, [r3, #13]
  120cf4:	e3833001 	orr	r3, r3, #1
  120cf8:	e6ef2073 	uxtb	r2, r3
  120cfc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120d00:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  120d04:	e51b3010 	ldr	r3, [fp, #-16]
  120d08:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d0c:	e3530000 	cmp	r3, #0
  120d10:	0a000023 	beq	120da4 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120d14:	e51b0010 	ldr	r0, [fp, #-16]
  120d18:	ebfff969 	bl	11f2c4 <tcp_process_refused_data>
  120d1c:	e1a03000 	mov	r3, r0
  120d20:	e373000d 	cmn	r3, #13
  120d24:	0a000008 	beq	120d4c <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120d28:	e51b3010 	ldr	r3, [fp, #-16]
  120d2c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120d30:	e3530000 	cmp	r3, #0
  120d34:	0a00001a 	beq	120da4 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120d38:	e30e3276 	movw	r3, #57974	; 0xe276
  120d3c:	e3403014 	movt	r3, #20
  120d40:	e1d330b0 	ldrh	r3, [r3]
  120d44:	e3530000 	cmp	r3, #0
  120d48:	0a000015 	beq	120da4 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  120d4c:	e51b3010 	ldr	r3, [fp, #-16]
  120d50:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  120d54:	e3530000 	cmp	r3, #0
  120d58:	1a000001 	bne	120d64 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120d5c:	e51b0010 	ldr	r0, [fp, #-16]
  120d60:	eb001418 	bl	125dc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120d64:	e30c3a50 	movw	r3, #51792	; 0xca50
  120d68:	e3403015 	movt	r3, #21
  120d6c:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120d70:	e2833001 	add	r3, r3, #1
  120d74:	e6ff2073 	uxth	r2, r3
  120d78:	e30c3a50 	movw	r3, #51792	; 0xca50
  120d7c:	e3403015 	movt	r3, #21
  120d80:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120d84:	e30c3a50 	movw	r3, #51792	; 0xca50
  120d88:	e3403015 	movt	r3, #21
  120d8c:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120d90:	e2832001 	add	r2, r3, #1
  120d94:	e30c3a50 	movw	r3, #51792	; 0xca50
  120d98:	e3403015 	movt	r3, #21
  120d9c:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120da0:	ea0000e4 	b	121138 <tcp_input+0xeb4>
      }
    }
    tcp_input_pcb = pcb;
  120da4:	e30c3c54 	movw	r3, #52308	; 0xcc54
  120da8:	e3403015 	movt	r3, #21
  120dac:	e51b2010 	ldr	r2, [fp, #-16]
  120db0:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120db4:	e51b0010 	ldr	r0, [fp, #-16]
  120db8:	eb00027d 	bl	1217b4 <tcp_process>
  120dbc:	e1a03000 	mov	r3, r0
  120dc0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120dc4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120dc8:	e373000d 	cmn	r3, #13
  120dcc:	0a0000d2 	beq	12111c <tcp_input+0xe98>
      if (recv_flags & TF_RESET) {
  120dd0:	e30e3279 	movw	r3, #57977	; 0xe279
  120dd4:	e3403014 	movt	r3, #20
  120dd8:	e5d33000 	ldrb	r3, [r3]
  120ddc:	e2033008 	and	r3, r3, #8
  120de0:	e3530000 	cmp	r3, #0
  120de4:	0a000012 	beq	120e34 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120de8:	e51b3010 	ldr	r3, [fp, #-16]
  120dec:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120df0:	e3530000 	cmp	r3, #0
  120df4:	0a000006 	beq	120e14 <tcp_input+0xb90>
  120df8:	e51b3010 	ldr	r3, [fp, #-16]
  120dfc:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120e00:	e51b2010 	ldr	r2, [fp, #-16]
  120e04:	e5922010 	ldr	r2, [r2, #16]
  120e08:	e3e0100d 	mvn	r1, #13
  120e0c:	e1a00002 	mov	r0, r2
  120e10:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120e14:	e51b1010 	ldr	r1, [fp, #-16]
  120e18:	e30c0c40 	movw	r0, #52288	; 0xcc40
  120e1c:	e3400015 	movt	r0, #21
  120e20:	ebfffc11 	bl	11fe6c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120e24:	e51b1010 	ldr	r1, [fp, #-16]
  120e28:	e3a00002 	mov	r0, #2
  120e2c:	ebffe10d 	bl	119268 <memp_free>
  120e30:	ea0000c0 	b	121138 <tcp_input+0xeb4>
      } else {
        err = ERR_OK;
  120e34:	e3a03000 	mov	r3, #0
  120e38:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120e3c:	e30e3274 	movw	r3, #57972	; 0xe274
  120e40:	e3403014 	movt	r3, #20
  120e44:	e1d330b0 	ldrh	r3, [r3]
  120e48:	e3530000 	cmp	r3, #0
  120e4c:	0a00001a 	beq	120ebc <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120e50:	e30e3274 	movw	r3, #57972	; 0xe274
  120e54:	e3403014 	movt	r3, #20
  120e58:	e1d330b0 	ldrh	r3, [r3]
  120e5c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120e60:	e51b3010 	ldr	r3, [fp, #-16]
  120e64:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e68:	e3530000 	cmp	r3, #0
  120e6c:	0a000009 	beq	120e98 <tcp_input+0xc14>
  120e70:	e51b3010 	ldr	r3, [fp, #-16]
  120e74:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e78:	e51b2010 	ldr	r2, [fp, #-16]
  120e7c:	e5920010 	ldr	r0, [r2, #16]
  120e80:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120e84:	e51b1010 	ldr	r1, [fp, #-16]
  120e88:	e12fff33 	blx	r3
  120e8c:	e1a03000 	mov	r3, r0
  120e90:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120e94:	ea000001 	b	120ea0 <tcp_input+0xc1c>
  120e98:	e3a03000 	mov	r3, #0
  120e9c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120ea0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120ea4:	e373000d 	cmn	r3, #13
  120ea8:	0a00009d 	beq	121124 <tcp_input+0xea0>
              goto aborted;
            }
          }
          recv_acked = 0;
  120eac:	e30e3274 	movw	r3, #57972	; 0xe274
  120eb0:	e3403014 	movt	r3, #20
  120eb4:	e3a02000 	mov	r2, #0
  120eb8:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120ebc:	e30e3279 	movw	r3, #57977	; 0xe279
  120ec0:	e3403014 	movt	r3, #20
  120ec4:	e5d33000 	ldrb	r3, [r3]
  120ec8:	e2033010 	and	r3, r3, #16
  120ecc:	e3530000 	cmp	r3, #0
  120ed0:	0a000017 	beq	120f34 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120ed4:	e51b3010 	ldr	r3, [fp, #-16]
  120ed8:	e5d3301e 	ldrb	r3, [r3, #30]
  120edc:	e2033010 	and	r3, r3, #16
  120ee0:	e3530000 	cmp	r3, #0
  120ee4:	1a00000a 	bne	120f14 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120ee8:	e51b3010 	ldr	r3, [fp, #-16]
  120eec:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120ef0:	e3530000 	cmp	r3, #0
  120ef4:	0a000006 	beq	120f14 <tcp_input+0xc90>
  120ef8:	e51b3010 	ldr	r3, [fp, #-16]
  120efc:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120f00:	e51b2010 	ldr	r2, [fp, #-16]
  120f04:	e5922010 	ldr	r2, [r2, #16]
  120f08:	e3e0100e 	mvn	r1, #14
  120f0c:	e1a00002 	mov	r0, r2
  120f10:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120f14:	e51b1010 	ldr	r1, [fp, #-16]
  120f18:	e30c0c40 	movw	r0, #52288	; 0xcc40
  120f1c:	e3400015 	movt	r0, #21
  120f20:	ebfffbd1 	bl	11fe6c <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120f24:	e51b1010 	ldr	r1, [fp, #-16]
  120f28:	e3a00002 	mov	r0, #2
  120f2c:	ebffe0cd 	bl	119268 <memp_free>
          goto aborted;
  120f30:	ea000080 	b	121138 <tcp_input+0xeb4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120f34:	e30e327c 	movw	r3, #57980	; 0xe27c
  120f38:	e3403014 	movt	r3, #20
  120f3c:	e5933000 	ldr	r3, [r3]
  120f40:	e3530000 	cmp	r3, #0
  120f44:	0a00003c 	beq	12103c <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120f48:	e51b3010 	ldr	r3, [fp, #-16]
  120f4c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120f50:	e3530000 	cmp	r3, #0
  120f54:	0a000006 	beq	120f74 <tcp_input+0xcf0>
  120f58:	e3080404 	movw	r0, #33796	; 0x8404
  120f5c:	e3400014 	movt	r0, #20
  120f60:	ebff886b 	bl	103114 <rt_kprintf>
  120f64:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120f68:	e30802a4 	movw	r0, #33444	; 0x82a4
  120f6c:	e3400014 	movt	r0, #20
  120f70:	ebffa85a 	bl	10b0e0 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120f74:	e51b3010 	ldr	r3, [fp, #-16]
  120f78:	e5d3301e 	ldrb	r3, [r3, #30]
  120f7c:	e2033010 	and	r3, r3, #16
  120f80:	e3530000 	cmp	r3, #0
  120f84:	0a000007 	beq	120fa8 <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120f88:	e30e327c 	movw	r3, #57980	; 0xe27c
  120f8c:	e3403014 	movt	r3, #20
  120f90:	e5933000 	ldr	r3, [r3]
  120f94:	e1a00003 	mov	r0, r3
  120f98:	ebffe7c0 	bl	11aea0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120f9c:	e51b0010 	ldr	r0, [fp, #-16]
  120fa0:	ebfff297 	bl	11da04 <tcp_abort>
            goto aborted;
  120fa4:	ea000063 	b	121138 <tcp_input+0xeb4>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120fa8:	e51b3010 	ldr	r3, [fp, #-16]
  120fac:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120fb0:	e3530000 	cmp	r3, #0
  120fb4:	0a00000c 	beq	120fec <tcp_input+0xd68>
  120fb8:	e51b3010 	ldr	r3, [fp, #-16]
  120fbc:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120fc0:	e51b3010 	ldr	r3, [fp, #-16]
  120fc4:	e5930010 	ldr	r0, [r3, #16]
  120fc8:	e30e327c 	movw	r3, #57980	; 0xe27c
  120fcc:	e3403014 	movt	r3, #20
  120fd0:	e5932000 	ldr	r2, [r3]
  120fd4:	e3a03000 	mov	r3, #0
  120fd8:	e51b1010 	ldr	r1, [fp, #-16]
  120fdc:	e12fff34 	blx	r4
  120fe0:	e1a03000 	mov	r3, r0
  120fe4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120fe8:	ea000008 	b	121010 <tcp_input+0xd8c>
  120fec:	e30e327c 	movw	r3, #57980	; 0xe27c
  120ff0:	e3403014 	movt	r3, #20
  120ff4:	e5932000 	ldr	r2, [r3]
  120ff8:	e3a03000 	mov	r3, #0
  120ffc:	e51b1010 	ldr	r1, [fp, #-16]
  121000:	e3a00000 	mov	r0, #0
  121004:	ebfff956 	bl	11f564 <tcp_recv_null>
  121008:	e1a03000 	mov	r3, r0
  12100c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  121010:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121014:	e373000d 	cmn	r3, #13
  121018:	0a000043 	beq	12112c <tcp_input+0xea8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  12101c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121020:	e3530000 	cmp	r3, #0
  121024:	0a000004 	beq	12103c <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  121028:	e30e327c 	movw	r3, #57980	; 0xe27c
  12102c:	e3403014 	movt	r3, #20
  121030:	e5932000 	ldr	r2, [r3]
  121034:	e51b3010 	ldr	r3, [fp, #-16]
  121038:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  12103c:	e30e3279 	movw	r3, #57977	; 0xe279
  121040:	e3403014 	movt	r3, #20
  121044:	e5d33000 	ldrb	r3, [r3]
  121048:	e2033020 	and	r3, r3, #32
  12104c:	e3530000 	cmp	r3, #0
  121050:	0a00002a 	beq	121100 <tcp_input+0xe7c>
          if (pcb->refused_data != NULL) {
  121054:	e51b3010 	ldr	r3, [fp, #-16]
  121058:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  12105c:	e3530000 	cmp	r3, #0
  121060:	0a000008 	beq	121088 <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  121064:	e51b3010 	ldr	r3, [fp, #-16]
  121068:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  12106c:	e5d3200d 	ldrb	r2, [r3, #13]
  121070:	e51b3010 	ldr	r3, [fp, #-16]
  121074:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121078:	e3822020 	orr	r2, r2, #32
  12107c:	e6ef2072 	uxtb	r2, r2
  121080:	e5c3200d 	strb	r2, [r3, #13]
  121084:	ea00001d 	b	121100 <tcp_input+0xe7c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  121088:	e51b3010 	ldr	r3, [fp, #-16]
  12108c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  121090:	e3530a02 	cmp	r3, #8192	; 0x2000
  121094:	0a000005 	beq	1210b0 <tcp_input+0xe2c>
              pcb->rcv_wnd++;
  121098:	e51b3010 	ldr	r3, [fp, #-16]
  12109c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  1210a0:	e2833001 	add	r3, r3, #1
  1210a4:	e6ff2073 	uxth	r2, r3
  1210a8:	e51b3010 	ldr	r3, [fp, #-16]
  1210ac:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  1210b0:	e51b3010 	ldr	r3, [fp, #-16]
  1210b4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1210b8:	e3530000 	cmp	r3, #0
  1210bc:	0a00000a 	beq	1210ec <tcp_input+0xe68>
  1210c0:	e51b3010 	ldr	r3, [fp, #-16]
  1210c4:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  1210c8:	e51b3010 	ldr	r3, [fp, #-16]
  1210cc:	e5930010 	ldr	r0, [r3, #16]
  1210d0:	e3a03000 	mov	r3, #0
  1210d4:	e3a02000 	mov	r2, #0
  1210d8:	e51b1010 	ldr	r1, [fp, #-16]
  1210dc:	e12fff34 	blx	r4
  1210e0:	e1a03000 	mov	r3, r0
  1210e4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  1210e8:	ea000001 	b	1210f4 <tcp_input+0xe70>
  1210ec:	e3a03000 	mov	r3, #0
  1210f0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  1210f4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  1210f8:	e373000d 	cmn	r3, #13
  1210fc:	0a00000c 	beq	121134 <tcp_input+0xeb0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  121100:	e30c3c54 	movw	r3, #52308	; 0xcc54
  121104:	e3403015 	movt	r3, #21
  121108:	e3a02000 	mov	r2, #0
  12110c:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  121110:	e51b0010 	ldr	r0, [fp, #-16]
  121114:	eb00138c 	bl	125f4c <tcp_output>
  121118:	ea000006 	b	121138 <tcp_input+0xeb4>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  12111c:	e320f000 	nop	{0}
  121120:	ea000004 	b	121138 <tcp_input+0xeb4>
              goto aborted;
  121124:	e320f000 	nop	{0}
  121128:	ea000002 	b	121138 <tcp_input+0xeb4>
            goto aborted;
  12112c:	e320f000 	nop	{0}
  121130:	ea000000 	b	121138 <tcp_input+0xeb4>
              goto aborted;
  121134:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  121138:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12113c:	e3403015 	movt	r3, #21
  121140:	e3a02000 	mov	r2, #0
  121144:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  121148:	e30e327c 	movw	r3, #57980	; 0xe27c
  12114c:	e3403014 	movt	r3, #20
  121150:	e3a02000 	mov	r2, #0
  121154:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  121158:	e30e324c 	movw	r3, #57932	; 0xe24c
  12115c:	e3403014 	movt	r3, #20
  121160:	e5933004 	ldr	r3, [r3, #4]
  121164:	e3530000 	cmp	r3, #0
  121168:	0a000053 	beq	1212bc <tcp_input+0x1038>
    {
      pbuf_free(inseg.p);
  12116c:	e30e324c 	movw	r3, #57932	; 0xe24c
  121170:	e3403014 	movt	r3, #20
  121174:	e5933004 	ldr	r3, [r3, #4]
  121178:	e1a00003 	mov	r0, r3
  12117c:	ebffe747 	bl	11aea0 <pbuf_free>
      inseg.p = NULL;
  121180:	e30e324c 	movw	r3, #57932	; 0xe24c
  121184:	e3403014 	movt	r3, #20
  121188:	e3a02000 	mov	r2, #0
  12118c:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  121190:	ea000049 	b	1212bc <tcp_input+0x1038>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  121194:	e30e325c 	movw	r3, #57948	; 0xe25c
  121198:	e3403014 	movt	r3, #20
  12119c:	e5933000 	ldr	r3, [r3]
  1211a0:	e1d330bc 	ldrh	r3, [r3, #12]
  1211a4:	e6ff3073 	uxth	r3, r3
  1211a8:	e1a00003 	mov	r0, r3
  1211ac:	ebffd504 	bl	1165c4 <lwip_htons>
  1211b0:	e1a03000 	mov	r3, r0
  1211b4:	e2033004 	and	r3, r3, #4
  1211b8:	e3530000 	cmp	r3, #0
  1211bc:	1a000029 	bne	121268 <tcp_input+0xfe4>
      TCP_STATS_INC(tcp.proterr);
  1211c0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1211c4:	e3403015 	movt	r3, #21
  1211c8:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  1211cc:	e2833001 	add	r3, r3, #1
  1211d0:	e6ff2073 	uxth	r2, r3
  1211d4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1211d8:	e3403015 	movt	r3, #21
  1211dc:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  1211e0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1211e4:	e3403015 	movt	r3, #21
  1211e8:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  1211ec:	e2833001 	add	r3, r3, #1
  1211f0:	e6ff2073 	uxth	r2, r3
  1211f4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1211f8:	e3403015 	movt	r3, #21
  1211fc:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121200:	e30e3270 	movw	r3, #57968	; 0xe270
  121204:	e3403014 	movt	r3, #20
  121208:	e5930000 	ldr	r0, [r3]
  12120c:	e30e3276 	movw	r3, #57974	; 0xe276
  121210:	e3403014 	movt	r3, #20
  121214:	e1d330b0 	ldrh	r3, [r3]
  121218:	e1a02003 	mov	r2, r3
  12121c:	e30e326c 	movw	r3, #57964	; 0xe26c
  121220:	e3403014 	movt	r3, #20
  121224:	e5933000 	ldr	r3, [r3]
  121228:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  12122c:	e30e325c 	movw	r3, #57948	; 0xe25c
  121230:	e3403014 	movt	r3, #20
  121234:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121238:	e1d330b2 	ldrh	r3, [r3, #2]
  12123c:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121240:	e30e325c 	movw	r3, #57948	; 0xe25c
  121244:	e3403014 	movt	r3, #20
  121248:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12124c:	e1d330b0 	ldrh	r3, [r3]
  121250:	e6ff3073 	uxth	r3, r3
  121254:	e58d3004 	str	r3, [sp, #4]
  121258:	e58d2000 	str	r2, [sp]
  12125c:	e59f3068 	ldr	r3, [pc, #104]	; 1212cc <tcp_input+0x1048>
  121260:	e59f2060 	ldr	r2, [pc, #96]	; 1212c8 <tcp_input+0x1044>
  121264:	eb00159e 	bl	1268e4 <tcp_rst>
    pbuf_free(p);
  121268:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12126c:	ebffe70b 	bl	11aea0 <pbuf_free>
  return;
  121270:	ea000011 	b	1212bc <tcp_input+0x1038>
dropped:
  TCP_STATS_INC(tcp.drop);
  121274:	e30c3a50 	movw	r3, #51792	; 0xca50
  121278:	e3403015 	movt	r3, #21
  12127c:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  121280:	e2833001 	add	r3, r3, #1
  121284:	e6ff2073 	uxth	r2, r3
  121288:	e30c3a50 	movw	r3, #51792	; 0xca50
  12128c:	e3403015 	movt	r3, #21
  121290:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  121294:	e30c3a50 	movw	r3, #51792	; 0xca50
  121298:	e3403015 	movt	r3, #21
  12129c:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  1212a0:	e2832001 	add	r2, r3, #1
  1212a4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1212a8:	e3403015 	movt	r3, #21
  1212ac:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  1212b0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1212b4:	ebffe6f9 	bl	11aea0 <pbuf_free>
  1212b8:	ea000000 	b	1212c0 <tcp_input+0x103c>
  return;
  1212bc:	e320f000 	nop	{0}
}
  1212c0:	e24bd008 	sub	sp, fp, #8
  1212c4:	e8bd8810 	pop	{r4, fp, pc}
  1212c8:	0014f62c 	.word	0x0014f62c
  1212cc:	0014f628 	.word	0x0014f628

001212d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  1212d0:	e92d4800 	push	{fp, lr}
  1212d4:	e28db004 	add	fp, sp, #4
  1212d8:	e24dd020 	sub	sp, sp, #32
  1212dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  1212e0:	e30e3278 	movw	r3, #57976	; 0xe278
  1212e4:	e3403014 	movt	r3, #20
  1212e8:	e5d33000 	ldrb	r3, [r3]
  1212ec:	e2033004 	and	r3, r3, #4
  1212f0:	e3530000 	cmp	r3, #0
  1212f4:	1a0000c8 	bne	12161c <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  1212f8:	e30e3278 	movw	r3, #57976	; 0xe278
  1212fc:	e3403014 	movt	r3, #20
  121300:	e5d33000 	ldrb	r3, [r3]
  121304:	e2033010 	and	r3, r3, #16
  121308:	e3530000 	cmp	r3, #0
  12130c:	0a00001a 	beq	12137c <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121310:	e30e3270 	movw	r3, #57968	; 0xe270
  121314:	e3403014 	movt	r3, #20
  121318:	e5930000 	ldr	r0, [r3]
  12131c:	e30e3276 	movw	r3, #57974	; 0xe276
  121320:	e3403014 	movt	r3, #20
  121324:	e1d330b0 	ldrh	r3, [r3]
  121328:	e1a02003 	mov	r2, r3
  12132c:	e30e326c 	movw	r3, #57964	; 0xe26c
  121330:	e3403014 	movt	r3, #20
  121334:	e5933000 	ldr	r3, [r3]
  121338:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  12133c:	e30e325c 	movw	r3, #57948	; 0xe25c
  121340:	e3403014 	movt	r3, #20
  121344:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121348:	e1d330b2 	ldrh	r3, [r3, #2]
  12134c:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121350:	e30e325c 	movw	r3, #57948	; 0xe25c
  121354:	e3403014 	movt	r3, #20
  121358:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12135c:	e1d330b0 	ldrh	r3, [r3]
  121360:	e6ff3073 	uxth	r3, r3
  121364:	e58d3004 	str	r3, [sp, #4]
  121368:	e58d2000 	str	r2, [sp]
  12136c:	e59f32bc 	ldr	r3, [pc, #700]	; 121630 <tcp_listen_input+0x360>
  121370:	e59f22bc 	ldr	r2, [pc, #700]	; 121634 <tcp_listen_input+0x364>
  121374:	eb00155a 	bl	1268e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  121378:	ea0000a9 	b	121624 <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  12137c:	e30e3278 	movw	r3, #57976	; 0xe278
  121380:	e3403014 	movt	r3, #20
  121384:	e5d33000 	ldrb	r3, [r3]
  121388:	e2033002 	and	r3, r3, #2
  12138c:	e3530000 	cmp	r3, #0
  121390:	0a0000a3 	beq	121624 <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  121394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121398:	e5d33018 	ldrb	r3, [r3, #24]
  12139c:	e1a00003 	mov	r0, r3
  1213a0:	ebfff935 	bl	11f87c <tcp_alloc>
  1213a4:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  1213a8:	e51b3008 	ldr	r3, [fp, #-8]
  1213ac:	e3530000 	cmp	r3, #0
  1213b0:	1a000018 	bne	121418 <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  1213b4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1213b8:	e3403015 	movt	r3, #21
  1213bc:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1213c0:	e2833001 	add	r3, r3, #1
  1213c4:	e6ff2073 	uxth	r2, r3
  1213c8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1213cc:	e3403015 	movt	r3, #21
  1213d0:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1213d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213d8:	e593301c 	ldr	r3, [r3, #28]
  1213dc:	e3530000 	cmp	r3, #0
  1213e0:	0a000009 	beq	12140c <tcp_listen_input+0x13c>
  1213e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213e8:	e593301c 	ldr	r3, [r3, #28]
  1213ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1213f0:	e5920010 	ldr	r0, [r2, #16]
  1213f4:	e3e02000 	mvn	r2, #0
  1213f8:	e3a01000 	mov	r1, #0
  1213fc:	e12fff33 	blx	r3
  121400:	e1a03000 	mov	r3, r0
  121404:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121408:	ea000086 	b	121628 <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  12140c:	e3e0300f 	mvn	r3, #15
  121410:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121414:	ea000083 	b	121628 <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  121418:	e30f3618 	movw	r3, #63000	; 0xf618
  12141c:	e3403014 	movt	r3, #20
  121420:	e5932014 	ldr	r2, [r3, #20]
  121424:	e51b3008 	ldr	r3, [fp, #-8]
  121428:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  12142c:	e30f3618 	movw	r3, #63000	; 0xf618
  121430:	e3403014 	movt	r3, #20
  121434:	e5932010 	ldr	r2, [r3, #16]
  121438:	e51b3008 	ldr	r3, [fp, #-8]
  12143c:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  121440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121444:	e1d321ba 	ldrh	r2, [r3, #26]
  121448:	e51b3008 	ldr	r3, [fp, #-8]
  12144c:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  121450:	e30e325c 	movw	r3, #57948	; 0xe25c
  121454:	e3403014 	movt	r3, #20
  121458:	e5933000 	ldr	r3, [r3]
  12145c:	e1d330b0 	ldrh	r3, [r3]
  121460:	e6ff2073 	uxth	r2, r3
  121464:	e51b3008 	ldr	r3, [fp, #-8]
  121468:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  12146c:	e51b3008 	ldr	r3, [fp, #-8]
  121470:	e3a02003 	mov	r2, #3
  121474:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  121478:	e30e326c 	movw	r3, #57964	; 0xe26c
  12147c:	e3403014 	movt	r3, #20
  121480:	e5933000 	ldr	r3, [r3]
  121484:	e2832001 	add	r2, r3, #1
  121488:	e51b3008 	ldr	r3, [fp, #-8]
  12148c:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  121490:	e51b3008 	ldr	r3, [fp, #-8]
  121494:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121498:	e51b3008 	ldr	r3, [fp, #-8]
  12149c:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  1214a0:	e51b0008 	ldr	r0, [fp, #-8]
  1214a4:	ebfffadc 	bl	12001c <tcp_next_iss>
  1214a8:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  1214ac:	e51b3008 	ldr	r3, [fp, #-8]
  1214b0:	e51b200c 	ldr	r2, [fp, #-12]
  1214b4:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  1214b8:	e51b3008 	ldr	r3, [fp, #-8]
  1214bc:	e51b200c 	ldr	r2, [fp, #-12]
  1214c0:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  1214c4:	e51b3008 	ldr	r3, [fp, #-8]
  1214c8:	e51b200c 	ldr	r2, [fp, #-12]
  1214cc:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  1214d0:	e51b3008 	ldr	r3, [fp, #-8]
  1214d4:	e51b200c 	ldr	r2, [fp, #-12]
  1214d8:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  1214dc:	e30e326c 	movw	r3, #57964	; 0xe26c
  1214e0:	e3403014 	movt	r3, #20
  1214e4:	e5933000 	ldr	r3, [r3]
  1214e8:	e2432001 	sub	r2, r3, #1
  1214ec:	e51b3008 	ldr	r3, [fp, #-8]
  1214f0:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  1214f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1214f8:	e5932010 	ldr	r2, [r3, #16]
  1214fc:	e51b3008 	ldr	r3, [fp, #-8]
  121500:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  121504:	e51b3008 	ldr	r3, [fp, #-8]
  121508:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12150c:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  121510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121514:	e5d33008 	ldrb	r3, [r3, #8]
  121518:	e203300c 	and	r3, r3, #12
  12151c:	e6ef2073 	uxtb	r2, r3
  121520:	e51b3008 	ldr	r3, [fp, #-8]
  121524:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  121528:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12152c:	e3403015 	movt	r3, #21
  121530:	e5932000 	ldr	r2, [r3]
  121534:	e51b3008 	ldr	r3, [fp, #-8]
  121538:	e583200c 	str	r2, [r3, #12]
  12153c:	e30c3c40 	movw	r3, #52288	; 0xcc40
  121540:	e3403015 	movt	r3, #21
  121544:	e51b2008 	ldr	r2, [fp, #-8]
  121548:	e5832000 	str	r2, [r3]
  12154c:	eb001738 	bl	127234 <tcp_timer_needed>
  121550:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  121554:	e3403015 	movt	r3, #21
  121558:	e3a02001 	mov	r2, #1
  12155c:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  121560:	e51b0008 	ldr	r0, [fp, #-8]
  121564:	eb000bf1 	bl	124530 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  121568:	e30e325c 	movw	r3, #57948	; 0xe25c
  12156c:	e3403014 	movt	r3, #20
  121570:	e5933000 	ldr	r3, [r3]
  121574:	e1d330be 	ldrh	r3, [r3, #14]
  121578:	e6ff2073 	uxth	r2, r3
  12157c:	e51b3008 	ldr	r3, [fp, #-8]
  121580:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  121584:	e51b3008 	ldr	r3, [fp, #-8]
  121588:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  12158c:	e51b3008 	ldr	r3, [fp, #-8]
  121590:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  121594:	e51b3008 	ldr	r3, [fp, #-8]
  121598:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  12159c:	e51b3008 	ldr	r3, [fp, #-8]
  1215a0:	e2833004 	add	r3, r3, #4
  1215a4:	e1a01003 	mov	r1, r3
  1215a8:	e1a00002 	mov	r0, r2
  1215ac:	ebfffaaf 	bl	120070 <tcp_eff_send_mss_impl>
  1215b0:	e1a03000 	mov	r3, r0
  1215b4:	e1a02003 	mov	r2, r3
  1215b8:	e51b3008 	ldr	r3, [fp, #-8]
  1215bc:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  1215c0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1215c4:	e3403015 	movt	r3, #21
  1215c8:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  1215cc:	e2832001 	add	r2, r3, #1
  1215d0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1215d4:	e3403015 	movt	r3, #21
  1215d8:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  1215dc:	e3a01012 	mov	r1, #18
  1215e0:	e51b0008 	ldr	r0, [fp, #-8]
  1215e4:	eb001109 	bl	125a10 <tcp_enqueue_flags>
  1215e8:	e1a03000 	mov	r3, r0
  1215ec:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  1215f0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1215f4:	e3530000 	cmp	r3, #0
  1215f8:	0a000003 	beq	12160c <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  1215fc:	e3a01000 	mov	r1, #0
  121600:	e51b0008 	ldr	r0, [fp, #-8]
  121604:	ebfff05f 	bl	11d788 <tcp_abandon>
      return;
  121608:	ea000006 	b	121628 <tcp_listen_input+0x358>
    tcp_output(npcb);
  12160c:	e51b0008 	ldr	r0, [fp, #-8]
  121610:	eb00124d 	bl	125f4c <tcp_output>
  return;
  121614:	e320f000 	nop	{0}
  121618:	ea000001 	b	121624 <tcp_listen_input+0x354>
    return;
  12161c:	e320f000 	nop	{0}
  121620:	ea000000 	b	121628 <tcp_listen_input+0x358>
  return;
  121624:	e320f000 	nop	{0}
}
  121628:	e24bd004 	sub	sp, fp, #4
  12162c:	e8bd8800 	pop	{fp, pc}
  121630:	0014f628 	.word	0x0014f628
  121634:	0014f62c 	.word	0x0014f62c

00121638 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  121638:	e92d4800 	push	{fp, lr}
  12163c:	e28db004 	add	fp, sp, #4
  121640:	e24dd010 	sub	sp, sp, #16
  121644:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  121648:	e30e3278 	movw	r3, #57976	; 0xe278
  12164c:	e3403014 	movt	r3, #20
  121650:	e5d33000 	ldrb	r3, [r3]
  121654:	e2033004 	and	r3, r3, #4
  121658:	e3530000 	cmp	r3, #0
  12165c:	1a00004d 	bne	121798 <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  121660:	e30e3278 	movw	r3, #57976	; 0xe278
  121664:	e3403014 	movt	r3, #20
  121668:	e5d33000 	ldrb	r3, [r3]
  12166c:	e2033002 	and	r3, r3, #2
  121670:	e3530000 	cmp	r3, #0
  121674:	0a00002d 	beq	121730 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  121678:	e30e326c 	movw	r3, #57964	; 0xe26c
  12167c:	e3403014 	movt	r3, #20
  121680:	e5932000 	ldr	r2, [r3]
  121684:	e51b3008 	ldr	r3, [fp, #-8]
  121688:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12168c:	e0423003 	sub	r3, r2, r3
  121690:	e3530000 	cmp	r3, #0
  121694:	ba000030 	blt	12175c <tcp_timewait_input+0x124>
  121698:	e30e326c 	movw	r3, #57964	; 0xe26c
  12169c:	e3403014 	movt	r3, #20
  1216a0:	e5932000 	ldr	r2, [r3]
  1216a4:	e51b3008 	ldr	r3, [fp, #-8]
  1216a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1216ac:	e51b1008 	ldr	r1, [fp, #-8]
  1216b0:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1216b4:	e0833001 	add	r3, r3, r1
  1216b8:	e0423003 	sub	r3, r2, r3
  1216bc:	e3530000 	cmp	r3, #0
  1216c0:	ca000025 	bgt	12175c <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1216c4:	e30e3270 	movw	r3, #57968	; 0xe270
  1216c8:	e3403014 	movt	r3, #20
  1216cc:	e5930000 	ldr	r0, [r3]
  1216d0:	e30e3276 	movw	r3, #57974	; 0xe276
  1216d4:	e3403014 	movt	r3, #20
  1216d8:	e1d330b0 	ldrh	r3, [r3]
  1216dc:	e1a02003 	mov	r2, r3
  1216e0:	e30e326c 	movw	r3, #57964	; 0xe26c
  1216e4:	e3403014 	movt	r3, #20
  1216e8:	e5933000 	ldr	r3, [r3]
  1216ec:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1216f0:	e30e325c 	movw	r3, #57948	; 0xe25c
  1216f4:	e3403014 	movt	r3, #20
  1216f8:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1216fc:	e1d330b2 	ldrh	r3, [r3, #2]
  121700:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121704:	e30e325c 	movw	r3, #57948	; 0xe25c
  121708:	e3403014 	movt	r3, #20
  12170c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121710:	e1d330b0 	ldrh	r3, [r3]
  121714:	e6ff3073 	uxth	r3, r3
  121718:	e58d3004 	str	r3, [sp, #4]
  12171c:	e58d2000 	str	r2, [sp]
  121720:	e59f3084 	ldr	r3, [pc, #132]	; 1217ac <tcp_timewait_input+0x174>
  121724:	e59f2084 	ldr	r2, [pc, #132]	; 1217b0 <tcp_timewait_input+0x178>
  121728:	eb00146d 	bl	1268e4 <tcp_rst>
      return;
  12172c:	ea00001c 	b	1217a4 <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121730:	e30e3278 	movw	r3, #57976	; 0xe278
  121734:	e3403014 	movt	r3, #20
  121738:	e5d33000 	ldrb	r3, [r3]
  12173c:	e2033001 	and	r3, r3, #1
  121740:	e3530000 	cmp	r3, #0
  121744:	0a000004 	beq	12175c <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  121748:	e30c3c44 	movw	r3, #52292	; 0xcc44
  12174c:	e3403015 	movt	r3, #21
  121750:	e5932000 	ldr	r2, [r3]
  121754:	e51b3008 	ldr	r3, [fp, #-8]
  121758:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  12175c:	e30e3276 	movw	r3, #57974	; 0xe276
  121760:	e3403014 	movt	r3, #20
  121764:	e1d330b0 	ldrh	r3, [r3]
  121768:	e3530000 	cmp	r3, #0
  12176c:	0a00000b 	beq	1217a0 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  121770:	e51b3008 	ldr	r3, [fp, #-8]
  121774:	e5d3301e 	ldrb	r3, [r3, #30]
  121778:	e3833002 	orr	r3, r3, #2
  12177c:	e6ef2073 	uxtb	r2, r3
  121780:	e51b3008 	ldr	r3, [fp, #-8]
  121784:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  121788:	e51b0008 	ldr	r0, [fp, #-8]
  12178c:	eb0011ee 	bl	125f4c <tcp_output>
  }
  return;
  121790:	e320f000 	nop	{0}
  121794:	ea000001 	b	1217a0 <tcp_timewait_input+0x168>
    return;
  121798:	e320f000 	nop	{0}
  12179c:	ea000000 	b	1217a4 <tcp_timewait_input+0x16c>
  return;
  1217a0:	e320f000 	nop	{0}
}
  1217a4:	e24bd004 	sub	sp, fp, #4
  1217a8:	e8bd8800 	pop	{fp, pc}
  1217ac:	0014f628 	.word	0x0014f628
  1217b0:	0014f62c 	.word	0x0014f62c

001217b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  1217b4:	e92d4800 	push	{fp, lr}
  1217b8:	e28db004 	add	fp, sp, #4
  1217bc:	e24dd028 	sub	sp, sp, #40	; 0x28
  1217c0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  1217c4:	e3a03000 	mov	r3, #0
  1217c8:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  1217cc:	e3a03000 	mov	r3, #0
  1217d0:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  1217d4:	e30e3278 	movw	r3, #57976	; 0xe278
  1217d8:	e3403014 	movt	r3, #20
  1217dc:	e5d33000 	ldrb	r3, [r3]
  1217e0:	e2033004 	and	r3, r3, #4
  1217e4:	e3530000 	cmp	r3, #0
  1217e8:	0a000050 	beq	121930 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  1217ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217f0:	e5933014 	ldr	r3, [r3, #20]
  1217f4:	e3530002 	cmp	r3, #2
  1217f8:	1a000009 	bne	121824 <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  1217fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121800:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121804:	e30e3270 	movw	r3, #57968	; 0xe270
  121808:	e3403014 	movt	r3, #20
  12180c:	e5933000 	ldr	r3, [r3]
  121810:	e1520003 	cmp	r2, r3
  121814:	1a000025 	bne	1218b0 <tcp_process+0xfc>
        acceptable = 1;
  121818:	e3a03001 	mov	r3, #1
  12181c:	e54b3009 	strb	r3, [fp, #-9]
  121820:	ea000022 	b	1218b0 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  121824:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121828:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12182c:	e30e326c 	movw	r3, #57964	; 0xe26c
  121830:	e3403014 	movt	r3, #20
  121834:	e5933000 	ldr	r3, [r3]
  121838:	e1520003 	cmp	r2, r3
  12183c:	1a000002 	bne	12184c <tcp_process+0x98>
        acceptable = 1;
  121840:	e3a03001 	mov	r3, #1
  121844:	e54b3009 	strb	r3, [fp, #-9]
  121848:	ea000018 	b	1218b0 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  12184c:	e30e326c 	movw	r3, #57964	; 0xe26c
  121850:	e3403014 	movt	r3, #20
  121854:	e5932000 	ldr	r2, [r3]
  121858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12185c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121860:	e0423003 	sub	r3, r2, r3
  121864:	e3530000 	cmp	r3, #0
  121868:	ba000010 	blt	1218b0 <tcp_process+0xfc>
  12186c:	e30e326c 	movw	r3, #57964	; 0xe26c
  121870:	e3403014 	movt	r3, #20
  121874:	e5932000 	ldr	r2, [r3]
  121878:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12187c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121880:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121884:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  121888:	e0833001 	add	r3, r3, r1
  12188c:	e0423003 	sub	r3, r2, r3
  121890:	e3530000 	cmp	r3, #0
  121894:	ca000005 	bgt	1218b0 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  121898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12189c:	e5d3301e 	ldrb	r3, [r3, #30]
  1218a0:	e3833002 	orr	r3, r3, #2
  1218a4:	e6ef2073 	uxtb	r2, r3
  1218a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218ac:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  1218b0:	e55b3009 	ldrb	r3, [fp, #-9]
  1218b4:	e3530000 	cmp	r3, #0
  1218b8:	0a00001a 	beq	121928 <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  1218bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218c0:	e5933014 	ldr	r3, [r3, #20]
  1218c4:	e3530000 	cmp	r3, #0
  1218c8:	1a000006 	bne	1218e8 <tcp_process+0x134>
  1218cc:	e3080420 	movw	r0, #33824	; 0x8420
  1218d0:	e3400014 	movt	r0, #20
  1218d4:	ebff860e 	bl	103114 <rt_kprintf>
  1218d8:	e3a01fb5 	mov	r1, #724	; 0x2d4
  1218dc:	e30802a4 	movw	r0, #33444	; 0x82a4
  1218e0:	e3400014 	movt	r0, #20
  1218e4:	ebffa5fd 	bl	10b0e0 <sys_arch_assert>
      recv_flags |= TF_RESET;
  1218e8:	e30e3279 	movw	r3, #57977	; 0xe279
  1218ec:	e3403014 	movt	r3, #20
  1218f0:	e5d33000 	ldrb	r3, [r3]
  1218f4:	e3833008 	orr	r3, r3, #8
  1218f8:	e6ef2073 	uxtb	r2, r3
  1218fc:	e30e3279 	movw	r3, #57977	; 0xe279
  121900:	e3403014 	movt	r3, #20
  121904:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  121908:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12190c:	e5d3301e 	ldrb	r3, [r3, #30]
  121910:	e3c33001 	bic	r3, r3, #1
  121914:	e6ef2073 	uxtb	r2, r3
  121918:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12191c:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  121920:	e3e0300d 	mvn	r3, #13
  121924:	ea0002fd 	b	122520 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  121928:	e3a03000 	mov	r3, #0
  12192c:	ea0002fb 	b	122520 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121930:	e30e3278 	movw	r3, #57976	; 0xe278
  121934:	e3403014 	movt	r3, #20
  121938:	e5d33000 	ldrb	r3, [r3]
  12193c:	e2033002 	and	r3, r3, #2
  121940:	e3530000 	cmp	r3, #0
  121944:	0a00000f 	beq	121988 <tcp_process+0x1d4>
  121948:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12194c:	e5933014 	ldr	r3, [r3, #20]
  121950:	e3530002 	cmp	r3, #2
  121954:	0a00000b 	beq	121988 <tcp_process+0x1d4>
  121958:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12195c:	e5933014 	ldr	r3, [r3, #20]
  121960:	e3530003 	cmp	r3, #3
  121964:	0a000007 	beq	121988 <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  121968:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12196c:	e5d3301e 	ldrb	r3, [r3, #30]
  121970:	e3833002 	orr	r3, r3, #2
  121974:	e6ef2073 	uxtb	r2, r3
  121978:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12197c:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  121980:	e3a03000 	mov	r3, #0
  121984:	ea0002e5 	b	122520 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  121988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12198c:	e5d3301e 	ldrb	r3, [r3, #30]
  121990:	e2033010 	and	r3, r3, #16
  121994:	e3530000 	cmp	r3, #0
  121998:	1a000004 	bne	1219b0 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  12199c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  1219a0:	e3403015 	movt	r3, #21
  1219a4:	e5932000 	ldr	r2, [r3]
  1219a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219ac:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  1219b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219b4:	e3a02000 	mov	r2, #0
  1219b8:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  1219bc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1219c0:	eb000ada 	bl	124530 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  1219c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219c8:	e5933014 	ldr	r3, [r3, #20]
  1219cc:	e2433002 	sub	r3, r3, #2
  1219d0:	e3530007 	cmp	r3, #7
  1219d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1219d8:	ea0002c0 	b	1224e0 <tcp_process+0xd2c>
  1219dc:	001219fc 	.word	0x001219fc
  1219e0:	00121d50 	.word	0x00121d50
  1219e4:	00121ff4 	.word	0x00121ff4
  1219e8:	0012203c 	.word	0x0012203c
  1219ec:	0012221c 	.word	0x0012221c
  1219f0:	00121ff4 	.word	0x00121ff4
  1219f4:	0012233c 	.word	0x0012233c
  1219f8:	00122470 	.word	0x00122470
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  1219fc:	e30e3278 	movw	r3, #57976	; 0xe278
  121a00:	e3403014 	movt	r3, #20
  121a04:	e5d33000 	ldrb	r3, [r3]
  121a08:	e2033010 	and	r3, r3, #16
  121a0c:	e3530000 	cmp	r3, #0
  121a10:	0a0000a4 	beq	121ca8 <tcp_process+0x4f4>
  121a14:	e30e3278 	movw	r3, #57976	; 0xe278
  121a18:	e3403014 	movt	r3, #20
  121a1c:	e5d33000 	ldrb	r3, [r3]
  121a20:	e2033002 	and	r3, r3, #2
  121a24:	e3530000 	cmp	r3, #0
  121a28:	0a00009e 	beq	121ca8 <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a30:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121a34:	e2832001 	add	r2, r3, #1
  121a38:	e30e3270 	movw	r3, #57968	; 0xe270
  121a3c:	e3403014 	movt	r3, #20
  121a40:	e5933000 	ldr	r3, [r3]
  121a44:	e1520003 	cmp	r2, r3
  121a48:	1a000096 	bne	121ca8 <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  121a4c:	e30e326c 	movw	r3, #57964	; 0xe26c
  121a50:	e3403014 	movt	r3, #20
  121a54:	e5933000 	ldr	r3, [r3]
  121a58:	e2832001 	add	r2, r3, #1
  121a5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a60:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  121a64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a68:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a70:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  121a74:	e30e3270 	movw	r3, #57968	; 0xe270
  121a78:	e3403014 	movt	r3, #20
  121a7c:	e5932000 	ldr	r2, [r3]
  121a80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a84:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  121a88:	e30e325c 	movw	r3, #57948	; 0xe25c
  121a8c:	e3403014 	movt	r3, #20
  121a90:	e5933000 	ldr	r3, [r3]
  121a94:	e1d330be 	ldrh	r3, [r3, #14]
  121a98:	e6ff2073 	uxth	r2, r3
  121a9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121aa0:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  121aa4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121aa8:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121aac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab0:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  121ab4:	e30e326c 	movw	r3, #57964	; 0xe26c
  121ab8:	e3403014 	movt	r3, #20
  121abc:	e5933000 	ldr	r3, [r3]
  121ac0:	e2432001 	sub	r2, r3, #1
  121ac4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ac8:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121acc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ad0:	e3a02004 	mov	r2, #4
  121ad4:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  121ad8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121adc:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121ae0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ae4:	e2833004 	add	r3, r3, #4
  121ae8:	e1a01003 	mov	r1, r3
  121aec:	e1a00002 	mov	r0, r2
  121af0:	ebfff95e 	bl	120070 <tcp_eff_send_mss_impl>
  121af4:	e1a03000 	mov	r3, r0
  121af8:	e1a02003 	mov	r2, r3
  121afc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b00:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121b04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b08:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b0c:	e1a03083 	lsl	r3, r3, #1
  121b10:	e301211c 	movw	r2, #4380	; 0x111c
  121b14:	e1530002 	cmp	r3, r2
  121b18:	21a02003 	movcs	r2, r3
  121b1c:	31a02002 	movcc	r2, r2
  121b20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b24:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b28:	e1a03103 	lsl	r3, r3, #2
  121b2c:	e1520003 	cmp	r2, r3
  121b30:	31a03002 	movcc	r3, r2
  121b34:	21a03003 	movcs	r3, r3
  121b38:	e6ff2073 	uxth	r2, r3
  121b3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b40:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  121b44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b48:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b4c:	e3530000 	cmp	r3, #0
  121b50:	1a000006 	bne	121b70 <tcp_process+0x3bc>
  121b54:	e3080440 	movw	r0, #33856	; 0x8440
  121b58:	e3400014 	movt	r0, #20
  121b5c:	ebff856c 	bl	103114 <rt_kprintf>
  121b60:	e3001307 	movw	r1, #775	; 0x307
  121b64:	e30802a4 	movw	r0, #33444	; 0x82a4
  121b68:	e3400014 	movt	r0, #20
  121b6c:	ebffa55b 	bl	10b0e0 <sys_arch_assert>
      --pcb->snd_queuelen;
  121b70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b74:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b78:	e2433001 	sub	r3, r3, #1
  121b7c:	e6ff2073 	uxth	r2, r3
  121b80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b84:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  121b88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b8c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121b90:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  121b94:	e51b3008 	ldr	r3, [fp, #-8]
  121b98:	e3530000 	cmp	r3, #0
  121b9c:	1a000011 	bne	121be8 <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121ba0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ba4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121ba8:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121bac:	e51b3008 	ldr	r3, [fp, #-8]
  121bb0:	e3530000 	cmp	r3, #0
  121bb4:	1a000006 	bne	121bd4 <tcp_process+0x420>
  121bb8:	e3080458 	movw	r0, #33880	; 0x8458
  121bbc:	e3400014 	movt	r0, #20
  121bc0:	ebff8553 	bl	103114 <rt_kprintf>
  121bc4:	e300130f 	movw	r1, #783	; 0x30f
  121bc8:	e30802a4 	movw	r0, #33444	; 0x82a4
  121bcc:	e3400014 	movt	r0, #20
  121bd0:	ebffa542 	bl	10b0e0 <sys_arch_assert>
        pcb->unsent = rseg->next;
  121bd4:	e51b3008 	ldr	r3, [fp, #-8]
  121bd8:	e5932000 	ldr	r2, [r3]
  121bdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121be0:	e583206c 	str	r2, [r3, #108]	; 0x6c
  121be4:	ea000003 	b	121bf8 <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  121be8:	e51b3008 	ldr	r3, [fp, #-8]
  121bec:	e5932000 	ldr	r2, [r3]
  121bf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bf4:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  121bf8:	e51b0008 	ldr	r0, [fp, #-8]
  121bfc:	ebfff61b 	bl	11f470 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  121c00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c04:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121c08:	e3530000 	cmp	r3, #0
  121c0c:	1a000003 	bne	121c20 <tcp_process+0x46c>
        pcb->rtime = -1;
  121c10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c14:	e3e02000 	mvn	r2, #0
  121c18:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121c1c:	ea000005 	b	121c38 <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121c20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c24:	e3a02000 	mov	r2, #0
  121c28:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121c2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c30:	e3a02000 	mov	r2, #0
  121c34:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  121c38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c3c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c40:	e3530000 	cmp	r3, #0
  121c44:	0a000009 	beq	121c70 <tcp_process+0x4bc>
  121c48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c4c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c50:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121c54:	e5920010 	ldr	r0, [r2, #16]
  121c58:	e3a02000 	mov	r2, #0
  121c5c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121c60:	e12fff33 	blx	r3
  121c64:	e1a03000 	mov	r3, r0
  121c68:	e54b300a 	strb	r3, [fp, #-10]
  121c6c:	ea000001 	b	121c78 <tcp_process+0x4c4>
  121c70:	e3a03000 	mov	r3, #0
  121c74:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  121c78:	e15b30da 	ldrsb	r3, [fp, #-10]
  121c7c:	e373000d 	cmn	r3, #13
  121c80:	1a000001 	bne	121c8c <tcp_process+0x4d8>
        return ERR_ABRT;
  121c84:	e3e0300c 	mvn	r3, #12
  121c88:	ea000224 	b	122520 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  121c8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c90:	e5d3301e 	ldrb	r3, [r3, #30]
  121c94:	e3833002 	orr	r3, r3, #2
  121c98:	e6ef2073 	uxtb	r2, r3
  121c9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ca0:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  121ca4:	ea00020f 	b	1224e8 <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  121ca8:	e30e3278 	movw	r3, #57976	; 0xe278
  121cac:	e3403014 	movt	r3, #20
  121cb0:	e5d33000 	ldrb	r3, [r3]
  121cb4:	e2033010 	and	r3, r3, #16
  121cb8:	e3530000 	cmp	r3, #0
  121cbc:	0a000209 	beq	1224e8 <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121cc0:	e30e3270 	movw	r3, #57968	; 0xe270
  121cc4:	e3403014 	movt	r3, #20
  121cc8:	e5930000 	ldr	r0, [r3]
  121ccc:	e30e3276 	movw	r3, #57974	; 0xe276
  121cd0:	e3403014 	movt	r3, #20
  121cd4:	e1d330b0 	ldrh	r3, [r3]
  121cd8:	e1a02003 	mov	r2, r3
  121cdc:	e30e326c 	movw	r3, #57964	; 0xe26c
  121ce0:	e3403014 	movt	r3, #20
  121ce4:	e5933000 	ldr	r3, [r3]
  121ce8:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121cec:	e30e325c 	movw	r3, #57948	; 0xe25c
  121cf0:	e3403014 	movt	r3, #20
  121cf4:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121cf8:	e1d330b2 	ldrh	r3, [r3, #2]
  121cfc:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121d00:	e30e325c 	movw	r3, #57948	; 0xe25c
  121d04:	e3403014 	movt	r3, #20
  121d08:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121d0c:	e1d330b0 	ldrh	r3, [r3]
  121d10:	e6ff3073 	uxth	r3, r3
  121d14:	e58d3004 	str	r3, [sp, #4]
  121d18:	e58d2000 	str	r2, [sp]
  121d1c:	e59f3808 	ldr	r3, [pc, #2056]	; 12252c <tcp_process+0xd78>
  121d20:	e59f2808 	ldr	r2, [pc, #2056]	; 122530 <tcp_process+0xd7c>
  121d24:	eb0012ee 	bl	1268e4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121d28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d2c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121d30:	e3530003 	cmp	r3, #3
  121d34:	8a0001eb 	bhi	1224e8 <tcp_process+0xd34>
        pcb->rtime = 0;
  121d38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d3c:	e3a02000 	mov	r2, #0
  121d40:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  121d44:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d48:	eb001362 	bl	126ad8 <tcp_rexmit_rto>
    break;
  121d4c:	ea0001e5 	b	1224e8 <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  121d50:	e30e3278 	movw	r3, #57976	; 0xe278
  121d54:	e3403014 	movt	r3, #20
  121d58:	e5d33000 	ldrb	r3, [r3]
  121d5c:	e2033010 	and	r3, r3, #16
  121d60:	e3530000 	cmp	r3, #0
  121d64:	0a000090 	beq	121fac <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121d68:	e30e3270 	movw	r3, #57968	; 0xe270
  121d6c:	e3403014 	movt	r3, #20
  121d70:	e5932000 	ldr	r2, [r3]
  121d74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d78:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121d7c:	e0423003 	sub	r3, r2, r3
  121d80:	e2433001 	sub	r3, r3, #1
  121d84:	e3530000 	cmp	r3, #0
  121d88:	ba00006c 	blt	121f40 <tcp_process+0x78c>
  121d8c:	e30e3270 	movw	r3, #57968	; 0xe270
  121d90:	e3403014 	movt	r3, #20
  121d94:	e5932000 	ldr	r2, [r3]
  121d98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d9c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121da0:	e0423003 	sub	r3, r2, r3
  121da4:	e3530000 	cmp	r3, #0
  121da8:	ca000064 	bgt	121f40 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121dac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121db0:	e3a02004 	mov	r2, #4
  121db4:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121db8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dbc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121dc0:	e3530000 	cmp	r3, #0
  121dc4:	0a00000b 	beq	121df8 <tcp_process+0x644>
  121dc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dcc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121dd0:	e593301c 	ldr	r3, [r3, #28]
  121dd4:	e3530000 	cmp	r3, #0
  121dd8:	1a000006 	bne	121df8 <tcp_process+0x644>
  121ddc:	e308046c 	movw	r0, #33900	; 0x846c
  121de0:	e3400014 	movt	r0, #20
  121de4:	ebff84ca 	bl	103114 <rt_kprintf>
  121de8:	e300133e 	movw	r1, #830	; 0x33e
  121dec:	e30802a4 	movw	r0, #33444	; 0x82a4
  121df0:	e3400014 	movt	r0, #20
  121df4:	ebffa4b9 	bl	10b0e0 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121df8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dfc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e00:	e3530000 	cmp	r3, #0
  121e04:	1a000002 	bne	121e14 <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121e08:	e3e03005 	mvn	r3, #5
  121e0c:	e54b300a 	strb	r3, [fp, #-10]
  121e10:	ea000011 	b	121e5c <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121e14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e18:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e1c:	e593301c 	ldr	r3, [r3, #28]
  121e20:	e3530000 	cmp	r3, #0
  121e24:	0a00000a 	beq	121e54 <tcp_process+0x6a0>
  121e28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e2c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e30:	e593301c 	ldr	r3, [r3, #28]
  121e34:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e38:	e5920010 	ldr	r0, [r2, #16]
  121e3c:	e3a02000 	mov	r2, #0
  121e40:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121e44:	e12fff33 	blx	r3
  121e48:	e1a03000 	mov	r3, r0
  121e4c:	e54b300a 	strb	r3, [fp, #-10]
  121e50:	ea000001 	b	121e5c <tcp_process+0x6a8>
  121e54:	e3e0300f 	mvn	r3, #15
  121e58:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121e5c:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e60:	e3530000 	cmp	r3, #0
  121e64:	0a000006 	beq	121e84 <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121e68:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e6c:	e373000d 	cmn	r3, #13
  121e70:	0a000001 	beq	121e7c <tcp_process+0x6c8>
            tcp_abort(pcb);
  121e74:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e78:	ebffeee1 	bl	11da04 <tcp_abort>
          }
          return ERR_ABRT;
  121e7c:	e3e0300c 	mvn	r3, #12
  121e80:	ea0001a6 	b	122520 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121e84:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e88:	eb000217 	bl	1226ec <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121e8c:	e30e3274 	movw	r3, #57972	; 0xe274
  121e90:	e3403014 	movt	r3, #20
  121e94:	e1d330b0 	ldrh	r3, [r3]
  121e98:	e3530000 	cmp	r3, #0
  121e9c:	0a000007 	beq	121ec0 <tcp_process+0x70c>
          recv_acked--;
  121ea0:	e30e3274 	movw	r3, #57972	; 0xe274
  121ea4:	e3403014 	movt	r3, #20
  121ea8:	e1d330b0 	ldrh	r3, [r3]
  121eac:	e2433001 	sub	r3, r3, #1
  121eb0:	e6ff2073 	uxth	r2, r3
  121eb4:	e30e3274 	movw	r3, #57972	; 0xe274
  121eb8:	e3403014 	movt	r3, #20
  121ebc:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121ec0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ec4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121ec8:	e1a03083 	lsl	r3, r3, #1
  121ecc:	e301211c 	movw	r2, #4380	; 0x111c
  121ed0:	e1530002 	cmp	r3, r2
  121ed4:	21a02003 	movcs	r2, r3
  121ed8:	31a02002 	movcc	r2, r2
  121edc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ee0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121ee4:	e1a03103 	lsl	r3, r3, #2
  121ee8:	e1520003 	cmp	r2, r3
  121eec:	31a03002 	movcc	r3, r2
  121ef0:	21a03003 	movcs	r3, r3
  121ef4:	e6ff2073 	uxth	r2, r3
  121ef8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121efc:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121f00:	e30e3279 	movw	r3, #57977	; 0xe279
  121f04:	e3403014 	movt	r3, #20
  121f08:	e5d33000 	ldrb	r3, [r3]
  121f0c:	e2033020 	and	r3, r3, #32
  121f10:	e3530000 	cmp	r3, #0
  121f14:	0a000035 	beq	121ff0 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121f18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f1c:	e5d3301e 	ldrb	r3, [r3, #30]
  121f20:	e3833002 	orr	r3, r3, #2
  121f24:	e6ef2073 	uxtb	r2, r3
  121f28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f2c:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121f30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f34:	e3a02007 	mov	r2, #7
  121f38:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121f3c:	ea00002b 	b	121ff0 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f40:	e30e3270 	movw	r3, #57968	; 0xe270
  121f44:	e3403014 	movt	r3, #20
  121f48:	e5930000 	ldr	r0, [r3]
  121f4c:	e30e3276 	movw	r3, #57974	; 0xe276
  121f50:	e3403014 	movt	r3, #20
  121f54:	e1d330b0 	ldrh	r3, [r3]
  121f58:	e1a02003 	mov	r2, r3
  121f5c:	e30e326c 	movw	r3, #57964	; 0xe26c
  121f60:	e3403014 	movt	r3, #20
  121f64:	e5933000 	ldr	r3, [r3]
  121f68:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f6c:	e30e325c 	movw	r3, #57948	; 0xe25c
  121f70:	e3403014 	movt	r3, #20
  121f74:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f78:	e1d330b2 	ldrh	r3, [r3, #2]
  121f7c:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f80:	e30e325c 	movw	r3, #57948	; 0xe25c
  121f84:	e3403014 	movt	r3, #20
  121f88:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f8c:	e1d330b0 	ldrh	r3, [r3]
  121f90:	e6ff3073 	uxth	r3, r3
  121f94:	e58d3004 	str	r3, [sp, #4]
  121f98:	e58d2000 	str	r2, [sp]
  121f9c:	e59f3588 	ldr	r3, [pc, #1416]	; 12252c <tcp_process+0xd78>
  121fa0:	e59f2588 	ldr	r2, [pc, #1416]	; 122530 <tcp_process+0xd7c>
  121fa4:	eb00124e 	bl	1268e4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121fa8:	ea000150 	b	1224f0 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121fac:	e30e3278 	movw	r3, #57976	; 0xe278
  121fb0:	e3403014 	movt	r3, #20
  121fb4:	e5d33000 	ldrb	r3, [r3]
  121fb8:	e2033002 	and	r3, r3, #2
  121fbc:	e3530000 	cmp	r3, #0
  121fc0:	0a00014a 	beq	1224f0 <tcp_process+0xd3c>
  121fc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fc8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121fcc:	e2432001 	sub	r2, r3, #1
  121fd0:	e30e326c 	movw	r3, #57964	; 0xe26c
  121fd4:	e3403014 	movt	r3, #20
  121fd8:	e5933000 	ldr	r3, [r3]
  121fdc:	e1520003 	cmp	r2, r3
  121fe0:	1a000142 	bne	1224f0 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121fe4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121fe8:	eb0012eb 	bl	126b9c <tcp_rexmit>
    break;
  121fec:	ea00013f 	b	1224f0 <tcp_process+0xd3c>
  121ff0:	ea00013e 	b	1224f0 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  121ff4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ff8:	eb0001bb 	bl	1226ec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  121ffc:	e30e3279 	movw	r3, #57977	; 0xe279
  122000:	e3403014 	movt	r3, #20
  122004:	e5d33000 	ldrb	r3, [r3]
  122008:	e2033020 	and	r3, r3, #32
  12200c:	e3530000 	cmp	r3, #0
  122010:	0a000138 	beq	1224f8 <tcp_process+0xd44>
      tcp_ack_now(pcb);
  122014:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122018:	e5d3301e 	ldrb	r3, [r3, #30]
  12201c:	e3833002 	orr	r3, r3, #2
  122020:	e6ef2073 	uxtb	r2, r3
  122024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122028:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  12202c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122030:	e3a02007 	mov	r2, #7
  122034:	e5832014 	str	r2, [r3, #20]
    }
    break;
  122038:	ea00012e 	b	1224f8 <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  12203c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122040:	eb0001a9 	bl	1226ec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  122044:	e30e3279 	movw	r3, #57977	; 0xe279
  122048:	e3403014 	movt	r3, #20
  12204c:	e5d33000 	ldrb	r3, [r3]
  122050:	e2033020 	and	r3, r3, #32
  122054:	e3530000 	cmp	r3, #0
  122058:	0a00005a 	beq	1221c8 <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  12205c:	e30e3278 	movw	r3, #57976	; 0xe278
  122060:	e3403014 	movt	r3, #20
  122064:	e5d33000 	ldrb	r3, [r3]
  122068:	e2033010 	and	r3, r3, #16
  12206c:	e3530000 	cmp	r3, #0
  122070:	0a00004a 	beq	1221a0 <tcp_process+0x9ec>
  122074:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122078:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12207c:	e30e3270 	movw	r3, #57968	; 0xe270
  122080:	e3403014 	movt	r3, #20
  122084:	e5933000 	ldr	r3, [r3]
  122088:	e1520003 	cmp	r2, r3
  12208c:	1a000043 	bne	1221a0 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  122090:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122094:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  122098:	e3530000 	cmp	r3, #0
  12209c:	1a00003f 	bne	1221a0 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  1220a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220a4:	e5d3301e 	ldrb	r3, [r3, #30]
  1220a8:	e3833002 	orr	r3, r3, #2
  1220ac:	e6ef2073 	uxtb	r2, r3
  1220b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220b4:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  1220b8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1220bc:	ebfff730 	bl	11fd84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  1220c0:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1220c4:	e3403015 	movt	r3, #21
  1220c8:	e5933000 	ldr	r3, [r3]
  1220cc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220d0:	e1520003 	cmp	r2, r3
  1220d4:	1a000007 	bne	1220f8 <tcp_process+0x944>
  1220d8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1220dc:	e3403015 	movt	r3, #21
  1220e0:	e5933000 	ldr	r3, [r3]
  1220e4:	e593200c 	ldr	r2, [r3, #12]
  1220e8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1220ec:	e3403015 	movt	r3, #21
  1220f0:	e5832000 	str	r2, [r3]
  1220f4:	ea000014 	b	12214c <tcp_process+0x998>
  1220f8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1220fc:	e3403015 	movt	r3, #21
  122100:	e5933000 	ldr	r3, [r3]
  122104:	e50b3010 	str	r3, [fp, #-16]
  122108:	ea00000c 	b	122140 <tcp_process+0x98c>
  12210c:	e51b3010 	ldr	r3, [fp, #-16]
  122110:	e593300c 	ldr	r3, [r3, #12]
  122114:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122118:	e1520003 	cmp	r2, r3
  12211c:	1a000004 	bne	122134 <tcp_process+0x980>
  122120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122124:	e593200c 	ldr	r2, [r3, #12]
  122128:	e51b3010 	ldr	r3, [fp, #-16]
  12212c:	e583200c 	str	r2, [r3, #12]
  122130:	ea000005 	b	12214c <tcp_process+0x998>
  122134:	e51b3010 	ldr	r3, [fp, #-16]
  122138:	e593300c 	ldr	r3, [r3, #12]
  12213c:	e50b3010 	str	r3, [fp, #-16]
  122140:	e51b3010 	ldr	r3, [fp, #-16]
  122144:	e3530000 	cmp	r3, #0
  122148:	1affffef 	bne	12210c <tcp_process+0x958>
  12214c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122150:	e3a02000 	mov	r2, #0
  122154:	e583200c 	str	r2, [r3, #12]
  122158:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12215c:	e3403015 	movt	r3, #21
  122160:	e3a02001 	mov	r2, #1
  122164:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  122168:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12216c:	e3a0200a 	mov	r2, #10
  122170:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  122174:	e30c3c50 	movw	r3, #52304	; 0xcc50
  122178:	e3403015 	movt	r3, #21
  12217c:	e5932000 	ldr	r2, [r3]
  122180:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122184:	e583200c 	str	r2, [r3, #12]
  122188:	e30c3c50 	movw	r3, #52304	; 0xcc50
  12218c:	e3403015 	movt	r3, #21
  122190:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122194:	e5832000 	str	r2, [r3]
  122198:	eb001425 	bl	127234 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  12219c:	ea0000d7 	b	122500 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  1221a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221a4:	e5d3301e 	ldrb	r3, [r3, #30]
  1221a8:	e3833002 	orr	r3, r3, #2
  1221ac:	e6ef2073 	uxtb	r2, r3
  1221b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221b4:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  1221b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221bc:	e3a02008 	mov	r2, #8
  1221c0:	e5832014 	str	r2, [r3, #20]
    break;
  1221c4:	ea0000cd 	b	122500 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1221c8:	e30e3278 	movw	r3, #57976	; 0xe278
  1221cc:	e3403014 	movt	r3, #20
  1221d0:	e5d33000 	ldrb	r3, [r3]
  1221d4:	e2033010 	and	r3, r3, #16
  1221d8:	e3530000 	cmp	r3, #0
  1221dc:	0a0000c7 	beq	122500 <tcp_process+0xd4c>
  1221e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221e4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1221e8:	e30e3270 	movw	r3, #57968	; 0xe270
  1221ec:	e3403014 	movt	r3, #20
  1221f0:	e5933000 	ldr	r3, [r3]
  1221f4:	e1520003 	cmp	r2, r3
  1221f8:	1a0000c0 	bne	122500 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  1221fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122200:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  122204:	e3530000 	cmp	r3, #0
  122208:	1a0000bc 	bne	122500 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  12220c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122210:	e3a02006 	mov	r2, #6
  122214:	e5832014 	str	r2, [r3, #20]
    break;
  122218:	ea0000b8 	b	122500 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  12221c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122220:	eb000131 	bl	1226ec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  122224:	e30e3279 	movw	r3, #57977	; 0xe279
  122228:	e3403014 	movt	r3, #20
  12222c:	e5d33000 	ldrb	r3, [r3]
  122230:	e2033020 	and	r3, r3, #32
  122234:	e3530000 	cmp	r3, #0
  122238:	0a0000b2 	beq	122508 <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  12223c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122240:	e5d3301e 	ldrb	r3, [r3, #30]
  122244:	e3833002 	orr	r3, r3, #2
  122248:	e6ef2073 	uxtb	r2, r3
  12224c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122250:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  122254:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122258:	ebfff6c9 	bl	11fd84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  12225c:	e30c3c40 	movw	r3, #52288	; 0xcc40
  122260:	e3403015 	movt	r3, #21
  122264:	e5933000 	ldr	r3, [r3]
  122268:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12226c:	e1520003 	cmp	r2, r3
  122270:	1a000007 	bne	122294 <tcp_process+0xae0>
  122274:	e30c3c40 	movw	r3, #52288	; 0xcc40
  122278:	e3403015 	movt	r3, #21
  12227c:	e5933000 	ldr	r3, [r3]
  122280:	e593200c 	ldr	r2, [r3, #12]
  122284:	e30c3c40 	movw	r3, #52288	; 0xcc40
  122288:	e3403015 	movt	r3, #21
  12228c:	e5832000 	str	r2, [r3]
  122290:	ea000014 	b	1222e8 <tcp_process+0xb34>
  122294:	e30c3c40 	movw	r3, #52288	; 0xcc40
  122298:	e3403015 	movt	r3, #21
  12229c:	e5933000 	ldr	r3, [r3]
  1222a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1222a4:	ea00000c 	b	1222dc <tcp_process+0xb28>
  1222a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222ac:	e593300c 	ldr	r3, [r3, #12]
  1222b0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1222b4:	e1520003 	cmp	r2, r3
  1222b8:	1a000004 	bne	1222d0 <tcp_process+0xb1c>
  1222bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222c0:	e593200c 	ldr	r2, [r3, #12]
  1222c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222c8:	e583200c 	str	r2, [r3, #12]
  1222cc:	ea000005 	b	1222e8 <tcp_process+0xb34>
  1222d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222d4:	e593300c 	ldr	r3, [r3, #12]
  1222d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1222dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222e0:	e3530000 	cmp	r3, #0
  1222e4:	1affffef 	bne	1222a8 <tcp_process+0xaf4>
  1222e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222ec:	e3a02000 	mov	r2, #0
  1222f0:	e583200c 	str	r2, [r3, #12]
  1222f4:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  1222f8:	e3403015 	movt	r3, #21
  1222fc:	e3a02001 	mov	r2, #1
  122300:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  122304:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122308:	e3a0200a 	mov	r2, #10
  12230c:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122310:	e30c3c50 	movw	r3, #52304	; 0xcc50
  122314:	e3403015 	movt	r3, #21
  122318:	e5932000 	ldr	r2, [r3]
  12231c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122320:	e583200c 	str	r2, [r3, #12]
  122324:	e30c3c50 	movw	r3, #52304	; 0xcc50
  122328:	e3403015 	movt	r3, #21
  12232c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122330:	e5832000 	str	r2, [r3]
  122334:	eb0013be 	bl	127234 <tcp_timer_needed>
    }
    break;
  122338:	ea000072 	b	122508 <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  12233c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122340:	eb0000e9 	bl	1226ec <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122344:	e30e3278 	movw	r3, #57976	; 0xe278
  122348:	e3403014 	movt	r3, #20
  12234c:	e5d33000 	ldrb	r3, [r3]
  122350:	e2033010 	and	r3, r3, #16
  122354:	e3530000 	cmp	r3, #0
  122358:	0a00006c 	beq	122510 <tcp_process+0xd5c>
  12235c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122360:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122364:	e30e3270 	movw	r3, #57968	; 0xe270
  122368:	e3403014 	movt	r3, #20
  12236c:	e5933000 	ldr	r3, [r3]
  122370:	e1520003 	cmp	r2, r3
  122374:	1a000065 	bne	122510 <tcp_process+0xd5c>
  122378:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12237c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122380:	e3530000 	cmp	r3, #0
  122384:	1a000061 	bne	122510 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  122388:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12238c:	ebfff67c 	bl	11fd84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122390:	e30c3c40 	movw	r3, #52288	; 0xcc40
  122394:	e3403015 	movt	r3, #21
  122398:	e5933000 	ldr	r3, [r3]
  12239c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1223a0:	e1520003 	cmp	r2, r3
  1223a4:	1a000007 	bne	1223c8 <tcp_process+0xc14>
  1223a8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1223ac:	e3403015 	movt	r3, #21
  1223b0:	e5933000 	ldr	r3, [r3]
  1223b4:	e593200c 	ldr	r2, [r3, #12]
  1223b8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1223bc:	e3403015 	movt	r3, #21
  1223c0:	e5832000 	str	r2, [r3]
  1223c4:	ea000014 	b	12241c <tcp_process+0xc68>
  1223c8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1223cc:	e3403015 	movt	r3, #21
  1223d0:	e5933000 	ldr	r3, [r3]
  1223d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1223d8:	ea00000c 	b	122410 <tcp_process+0xc5c>
  1223dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223e0:	e593300c 	ldr	r3, [r3, #12]
  1223e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1223e8:	e1520003 	cmp	r2, r3
  1223ec:	1a000004 	bne	122404 <tcp_process+0xc50>
  1223f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1223f4:	e593200c 	ldr	r2, [r3, #12]
  1223f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223fc:	e583200c 	str	r2, [r3, #12]
  122400:	ea000005 	b	12241c <tcp_process+0xc68>
  122404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122408:	e593300c 	ldr	r3, [r3, #12]
  12240c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122410:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122414:	e3530000 	cmp	r3, #0
  122418:	1affffef 	bne	1223dc <tcp_process+0xc28>
  12241c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122420:	e3a02000 	mov	r2, #0
  122424:	e583200c 	str	r2, [r3, #12]
  122428:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12242c:	e3403015 	movt	r3, #21
  122430:	e3a02001 	mov	r2, #1
  122434:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  122438:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12243c:	e3a0200a 	mov	r2, #10
  122440:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122444:	e30c3c50 	movw	r3, #52304	; 0xcc50
  122448:	e3403015 	movt	r3, #21
  12244c:	e5932000 	ldr	r2, [r3]
  122450:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122454:	e583200c 	str	r2, [r3, #12]
  122458:	e30c3c50 	movw	r3, #52304	; 0xcc50
  12245c:	e3403015 	movt	r3, #21
  122460:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122464:	e5832000 	str	r2, [r3]
  122468:	eb001371 	bl	127234 <tcp_timer_needed>
    }
    break;
  12246c:	ea000027 	b	122510 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  122470:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122474:	eb00009c 	bl	1226ec <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122478:	e30e3278 	movw	r3, #57976	; 0xe278
  12247c:	e3403014 	movt	r3, #20
  122480:	e5d33000 	ldrb	r3, [r3]
  122484:	e2033010 	and	r3, r3, #16
  122488:	e3530000 	cmp	r3, #0
  12248c:	0a000021 	beq	122518 <tcp_process+0xd64>
  122490:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122494:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122498:	e30e3270 	movw	r3, #57968	; 0xe270
  12249c:	e3403014 	movt	r3, #20
  1224a0:	e5933000 	ldr	r3, [r3]
  1224a4:	e1520003 	cmp	r2, r3
  1224a8:	1a00001a 	bne	122518 <tcp_process+0xd64>
  1224ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1224b0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1224b4:	e3530000 	cmp	r3, #0
  1224b8:	1a000016 	bne	122518 <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  1224bc:	e30e3279 	movw	r3, #57977	; 0xe279
  1224c0:	e3403014 	movt	r3, #20
  1224c4:	e5d33000 	ldrb	r3, [r3]
  1224c8:	e3833010 	orr	r3, r3, #16
  1224cc:	e6ef2073 	uxtb	r2, r3
  1224d0:	e30e3279 	movw	r3, #57977	; 0xe279
  1224d4:	e3403014 	movt	r3, #20
  1224d8:	e5c32000 	strb	r2, [r3]
    }
    break;
  1224dc:	ea00000d 	b	122518 <tcp_process+0xd64>
  default:
    break;
  1224e0:	e320f000 	nop	{0}
  1224e4:	ea00000c 	b	12251c <tcp_process+0xd68>
    break;
  1224e8:	e320f000 	nop	{0}
  1224ec:	ea00000a 	b	12251c <tcp_process+0xd68>
    break;
  1224f0:	e320f000 	nop	{0}
  1224f4:	ea000008 	b	12251c <tcp_process+0xd68>
    break;
  1224f8:	e320f000 	nop	{0}
  1224fc:	ea000006 	b	12251c <tcp_process+0xd68>
    break;
  122500:	e320f000 	nop	{0}
  122504:	ea000004 	b	12251c <tcp_process+0xd68>
    break;
  122508:	e320f000 	nop	{0}
  12250c:	ea000002 	b	12251c <tcp_process+0xd68>
    break;
  122510:	e320f000 	nop	{0}
  122514:	ea000000 	b	12251c <tcp_process+0xd68>
    break;
  122518:	e320f000 	nop	{0}
  }
  return ERR_OK;
  12251c:	e3a03000 	mov	r3, #0
}
  122520:	e1a00003 	mov	r0, r3
  122524:	e24bd004 	sub	sp, fp, #4
  122528:	e8bd8800 	pop	{fp, pc}
  12252c:	0014f628 	.word	0x0014f628
  122530:	0014f62c 	.word	0x0014f62c

00122534 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  122534:	e92d4810 	push	{r4, fp, lr}
  122538:	e28db008 	add	fp, sp, #8
  12253c:	e24dd014 	sub	sp, sp, #20
  122540:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  122544:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  122548:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12254c:	e593300c 	ldr	r3, [r3, #12]
  122550:	e1d330bc 	ldrh	r3, [r3, #12]
  122554:	e6ff3073 	uxth	r3, r3
  122558:	e1a00003 	mov	r0, r3
  12255c:	ebffd018 	bl	1165c4 <lwip_htons>
  122560:	e1a03000 	mov	r3, r0
  122564:	e2033001 	and	r3, r3, #1
  122568:	e3530000 	cmp	r3, #0
  12256c:	0a000022 	beq	1225fc <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  122570:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  122574:	ebfff3ab 	bl	11f428 <tcp_segs_free>
    next = NULL;
  122578:	e3a03000 	mov	r3, #0
  12257c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  122580:	ea000053 	b	1226d4 <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  122584:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122588:	e593300c 	ldr	r3, [r3, #12]
  12258c:	e1d330bc 	ldrh	r3, [r3, #12]
  122590:	e6ff3073 	uxth	r3, r3
  122594:	e1a00003 	mov	r0, r3
  122598:	ebffd009 	bl	1165c4 <lwip_htons>
  12259c:	e1a03000 	mov	r3, r0
  1225a0:	e2033001 	and	r3, r3, #1
  1225a4:	e3530000 	cmp	r3, #0
  1225a8:	0a00000c 	beq	1225e0 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  1225ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225b0:	e593300c 	ldr	r3, [r3, #12]
  1225b4:	e1d330bc 	ldrh	r3, [r3, #12]
  1225b8:	e6ff4073 	uxth	r4, r3
  1225bc:	e3a00001 	mov	r0, #1
  1225c0:	ebffcfff 	bl	1165c4 <lwip_htons>
  1225c4:	e1a03000 	mov	r3, r0
  1225c8:	e1a02003 	mov	r2, r3
  1225cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225d0:	e593300c 	ldr	r3, [r3, #12]
  1225d4:	e1842002 	orr	r2, r4, r2
  1225d8:	e6ff2072 	uxth	r2, r2
  1225dc:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  1225e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225e4:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  1225e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225ec:	e5933000 	ldr	r3, [r3]
  1225f0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  1225f4:	e51b0010 	ldr	r0, [fp, #-16]
  1225f8:	ebfff39c 	bl	11f470 <tcp_seg_free>
    while (next &&
  1225fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122600:	e3530000 	cmp	r3, #0
  122604:	0a00000f 	beq	122648 <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  122608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12260c:	e1d330b8 	ldrh	r3, [r3, #8]
  122610:	e1a02003 	mov	r2, r3
  122614:	e30e326c 	movw	r3, #57964	; 0xe26c
  122618:	e3403014 	movt	r3, #20
  12261c:	e5933000 	ldr	r3, [r3]
  122620:	e0822003 	add	r2, r2, r3
  122624:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122628:	e593300c 	ldr	r3, [r3, #12]
  12262c:	e5933004 	ldr	r3, [r3, #4]
  122630:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  122634:	e1d110b8 	ldrh	r1, [r1, #8]
  122638:	e0833001 	add	r3, r3, r1
  12263c:	e0423003 	sub	r3, r2, r3
    while (next &&
  122640:	e3530000 	cmp	r3, #0
  122644:	aaffffce 	bge	122584 <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  122648:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12264c:	e3530000 	cmp	r3, #0
  122650:	0a00001f 	beq	1226d4 <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  122654:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122658:	e1d330b8 	ldrh	r3, [r3, #8]
  12265c:	e1a02003 	mov	r2, r3
  122660:	e30e326c 	movw	r3, #57964	; 0xe26c
  122664:	e3403014 	movt	r3, #20
  122668:	e5933000 	ldr	r3, [r3]
  12266c:	e0822003 	add	r2, r2, r3
  122670:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122674:	e593300c 	ldr	r3, [r3, #12]
  122678:	e5933004 	ldr	r3, [r3, #4]
  12267c:	e0423003 	sub	r3, r2, r3
    if (next &&
  122680:	e3530000 	cmp	r3, #0
  122684:	da000012 	ble	1226d4 <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  122688:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12268c:	e593300c 	ldr	r3, [r3, #12]
  122690:	e5933004 	ldr	r3, [r3, #4]
  122694:	e6ff2073 	uxth	r2, r3
  122698:	e30e326c 	movw	r3, #57964	; 0xe26c
  12269c:	e3403014 	movt	r3, #20
  1226a0:	e5933000 	ldr	r3, [r3]
  1226a4:	e6ff3073 	uxth	r3, r3
  1226a8:	e0423003 	sub	r3, r2, r3
  1226ac:	e6ff2073 	uxth	r2, r3
  1226b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226b4:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  1226b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226bc:	e5932004 	ldr	r2, [r3, #4]
  1226c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226c4:	e1d330b8 	ldrh	r3, [r3, #8]
  1226c8:	e1a01003 	mov	r1, r3
  1226cc:	e1a00002 	mov	r0, r2
  1226d0:	ebffe0a9 	bl	11a97c <pbuf_realloc>
    }
  }
  cseg->next = next;
  1226d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226d8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1226dc:	e5832000 	str	r2, [r3]
}
  1226e0:	e320f000 	nop	{0}
  1226e4:	e24bd008 	sub	sp, fp, #8
  1226e8:	e8bd8810 	pop	{r4, fp, pc}

001226ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  1226ec:	e92d4870 	push	{r4, r5, r6, fp, lr}
  1226f0:	e28db010 	add	fp, sp, #16
  1226f4:	e24dd034 	sub	sp, sp, #52	; 0x34
  1226f8:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  1226fc:	e3a03000 	mov	r3, #0
  122700:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  122704:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122708:	e5933014 	ldr	r3, [r3, #20]
  12270c:	e3530003 	cmp	r3, #3
  122710:	8a000006 	bhi	122730 <tcp_receive+0x44>
  122714:	e308048c 	movw	r0, #33932	; 0x848c
  122718:	e3400014 	movt	r0, #20
  12271c:	ebff827c 	bl	103114 <rt_kprintf>
  122720:	e30013f5 	movw	r1, #1013	; 0x3f5
  122724:	e30802a4 	movw	r0, #33444	; 0x82a4
  122728:	e3400014 	movt	r0, #20
  12272c:	ebffa26b 	bl	10b0e0 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122730:	e30e3278 	movw	r3, #57976	; 0xe278
  122734:	e3403014 	movt	r3, #20
  122738:	e5d33000 	ldrb	r3, [r3]
  12273c:	e2033010 	and	r3, r3, #16
  122740:	e3530000 	cmp	r3, #0
  122744:	0a000268 	beq	1230ec <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  122748:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12274c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122750:	e1a02003 	mov	r2, r3
  122754:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122758:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  12275c:	e0823003 	add	r3, r2, r3
  122760:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122764:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122768:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  12276c:	e30e326c 	movw	r3, #57964	; 0xe26c
  122770:	e3403014 	movt	r3, #20
  122774:	e5933000 	ldr	r3, [r3]
  122778:	e0423003 	sub	r3, r2, r3
  12277c:	e3530000 	cmp	r3, #0
  122780:	ba00001e 	blt	122800 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122784:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122788:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  12278c:	e30e326c 	movw	r3, #57964	; 0xe26c
  122790:	e3403014 	movt	r3, #20
  122794:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122798:	e1520003 	cmp	r2, r3
  12279c:	1a000007 	bne	1227c0 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1227a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a4:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1227a8:	e30e3270 	movw	r3, #57968	; 0xe270
  1227ac:	e3403014 	movt	r3, #20
  1227b0:	e5933000 	ldr	r3, [r3]
  1227b4:	e0423003 	sub	r3, r2, r3
  1227b8:	e3530000 	cmp	r3, #0
  1227bc:	ba00000f 	blt	122800 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1227c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227c4:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1227c8:	e30e3270 	movw	r3, #57968	; 0xe270
  1227cc:	e3403014 	movt	r3, #20
  1227d0:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1227d4:	e1520003 	cmp	r2, r3
  1227d8:	1a000039 	bne	1228c4 <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1227dc:	e30e325c 	movw	r3, #57948	; 0xe25c
  1227e0:	e3403014 	movt	r3, #20
  1227e4:	e5933000 	ldr	r3, [r3]
  1227e8:	e1d330be 	ldrh	r3, [r3, #14]
  1227ec:	e6ff2073 	uxth	r2, r3
  1227f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227f4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1227f8:	e1520003 	cmp	r2, r3
  1227fc:	9a000030 	bls	1228c4 <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  122800:	e30e325c 	movw	r3, #57948	; 0xe25c
  122804:	e3403014 	movt	r3, #20
  122808:	e5933000 	ldr	r3, [r3]
  12280c:	e1d330be 	ldrh	r3, [r3, #14]
  122810:	e6ff2073 	uxth	r2, r3
  122814:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122818:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  12281c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122820:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  122824:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122828:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12282c:	e1520003 	cmp	r2, r3
  122830:	2a000003 	bcs	122844 <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  122834:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122838:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  12283c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122840:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  122844:	e30e326c 	movw	r3, #57964	; 0xe26c
  122848:	e3403014 	movt	r3, #20
  12284c:	e5932000 	ldr	r2, [r3]
  122850:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122854:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  122858:	e30e3270 	movw	r3, #57968	; 0xe270
  12285c:	e3403014 	movt	r3, #20
  122860:	e5932000 	ldr	r2, [r3]
  122864:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122868:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  12286c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122870:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122874:	e3530000 	cmp	r3, #0
  122878:	1a00000a 	bne	1228a8 <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  12287c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122880:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122884:	e3530000 	cmp	r3, #0
  122888:	1a00000d 	bne	1228c4 <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  12288c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122890:	e3a02000 	mov	r2, #0
  122894:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  122898:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12289c:	e3a02001 	mov	r2, #1
  1228a0:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  1228a4:	ea000006 	b	1228c4 <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  1228a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228ac:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  1228b0:	e3530000 	cmp	r3, #0
  1228b4:	0a000002 	beq	1228c4 <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  1228b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228bc:	e3a02000 	mov	r2, #0
  1228c0:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  1228c4:	e30e3270 	movw	r3, #57968	; 0xe270
  1228c8:	e3403014 	movt	r3, #20
  1228cc:	e5932000 	ldr	r2, [r3]
  1228d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228d4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1228d8:	e0423003 	sub	r3, r2, r3
  1228dc:	e3530000 	cmp	r3, #0
  1228e0:	ca000047 	bgt	122a04 <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  1228e4:	e30e3276 	movw	r3, #57974	; 0xe276
  1228e8:	e3403014 	movt	r3, #20
  1228ec:	e1d330b0 	ldrh	r3, [r3]
  1228f0:	e3530000 	cmp	r3, #0
  1228f4:	1a00003b 	bne	1229e8 <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  1228f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228fc:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122900:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  122904:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  122908:	e0833002 	add	r3, r3, r2
  12290c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  122910:	e1520003 	cmp	r2, r3
  122914:	1a000033 	bne	1229e8 <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  122918:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12291c:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  122920:	e3530000 	cmp	r3, #0
  122924:	ba00002f 	blt	1229e8 <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  122928:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12292c:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122930:	e30e3270 	movw	r3, #57968	; 0xe270
  122934:	e3403014 	movt	r3, #20
  122938:	e5933000 	ldr	r3, [r3]
  12293c:	e1520003 	cmp	r2, r3
  122940:	1a000028 	bne	1229e8 <tcp_receive+0x2fc>
              found_dupack = 1;
  122944:	e3a03001 	mov	r3, #1
  122948:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  12294c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122950:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122954:	e35300ff 	cmp	r3, #255	; 0xff
  122958:	0a000005 	beq	122974 <tcp_receive+0x288>
                ++pcb->dupacks;
  12295c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122960:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122964:	e2833001 	add	r3, r3, #1
  122968:	e6ef2073 	uxtb	r2, r3
  12296c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122970:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  122974:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122978:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  12297c:	e3530003 	cmp	r3, #3
  122980:	9a000012 	bls	1229d0 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122984:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122988:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  12298c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122990:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122994:	e0823003 	add	r3, r2, r3
  122998:	e6ff2073 	uxth	r2, r3
  12299c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229a0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1229a4:	e1520003 	cmp	r2, r3
  1229a8:	9a00000e 	bls	1229e8 <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  1229ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229b0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1229b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229b8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1229bc:	e0823003 	add	r3, r2, r3
  1229c0:	e6ff2073 	uxth	r2, r3
  1229c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229c8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1229cc:	ea000005 	b	1229e8 <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  1229d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229d4:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1229d8:	e3530003 	cmp	r3, #3
  1229dc:	1a000001 	bne	1229e8 <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  1229e0:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1229e4:	eb0010bc 	bl	126cdc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  1229e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1229ec:	e3530000 	cmp	r3, #0
  1229f0:	1a000136 	bne	122ed0 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  1229f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229f8:	e3a02000 	mov	r2, #0
  1229fc:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  122a00:	ea000132 	b	122ed0 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  122a04:	e30e3270 	movw	r3, #57968	; 0xe270
  122a08:	e3403014 	movt	r3, #20
  122a0c:	e5932000 	ldr	r2, [r3]
  122a10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a14:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122a18:	e0423003 	sub	r3, r2, r3
  122a1c:	e2433001 	sub	r3, r3, #1
  122a20:	e3530000 	cmp	r3, #0
  122a24:	ba0000dc 	blt	122d9c <tcp_receive+0x6b0>
  122a28:	e30e3270 	movw	r3, #57968	; 0xe270
  122a2c:	e3403014 	movt	r3, #20
  122a30:	e5932000 	ldr	r2, [r3]
  122a34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a38:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122a3c:	e0423003 	sub	r3, r2, r3
  122a40:	e3530000 	cmp	r3, #0
  122a44:	ca0000d4 	bgt	122d9c <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  122a48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a4c:	e5d3301e 	ldrb	r3, [r3, #30]
  122a50:	e2033004 	and	r3, r3, #4
  122a54:	e3530000 	cmp	r3, #0
  122a58:	0a000009 	beq	122a84 <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  122a5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a60:	e5d3301e 	ldrb	r3, [r3, #30]
  122a64:	e3c33004 	bic	r3, r3, #4
  122a68:	e6ef2073 	uxtb	r2, r3
  122a6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a70:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  122a74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a78:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  122a7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a80:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  122a84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a88:	e3a02000 	mov	r2, #0
  122a8c:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122a90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a94:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122a98:	e1a031c3 	asr	r3, r3, #3
  122a9c:	e6bf3073 	sxth	r3, r3
  122aa0:	e6ff2073 	uxth	r2, r3
  122aa4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aa8:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122aac:	e6ff3073 	uxth	r3, r3
  122ab0:	e0823003 	add	r3, r2, r3
  122ab4:	e6ff3073 	uxth	r3, r3
  122ab8:	e6bf2073 	sxth	r2, r3
  122abc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ac0:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  122ac4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ac8:	e3a02000 	mov	r2, #0
  122acc:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122ad0:	e30e3270 	movw	r3, #57968	; 0xe270
  122ad4:	e3403014 	movt	r3, #20
  122ad8:	e5932000 	ldr	r2, [r3]
  122adc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ae0:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  122ae4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ae8:	e5933014 	ldr	r3, [r3, #20]
  122aec:	e3530003 	cmp	r3, #3
  122af0:	9a000075 	bls	122ccc <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  122af4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122af8:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122afc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b00:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  122b04:	e1520003 	cmp	r2, r3
  122b08:	2a000012 	bcs	122b58 <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122b0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b10:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b18:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b1c:	e0823003 	add	r3, r2, r3
  122b20:	e6ff2073 	uxth	r2, r3
  122b24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b28:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b2c:	e1520003 	cmp	r2, r3
  122b30:	9a000065 	bls	122ccc <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  122b34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b38:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b40:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b44:	e0823003 	add	r3, r2, r3
  122b48:	e6ff2073 	uxth	r2, r3
  122b4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b50:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122b54:	ea00005c 	b	122ccc <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  122b58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b5c:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  122b60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b64:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b68:	e1a02003 	mov	r2, r3
  122b6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b70:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b74:	e0020293 	mul	r2, r3, r2
  122b78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b7c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b80:	e1a01003 	mov	r1, r3
  122b84:	e1a00002 	mov	r0, r2
  122b88:	eb0057b9 	bl	138a74 <__divsi3>
  122b8c:	e1a03000 	mov	r3, r0
  122b90:	e6ff3073 	uxth	r3, r3
  122b94:	e0843003 	add	r3, r4, r3
  122b98:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122b9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ba0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122ba4:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122ba8:	e1520003 	cmp	r2, r3
  122bac:	9a000046 	bls	122ccc <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122bb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb4:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122bb8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122bbc:	ea000042 	b	122ccc <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122bc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bc4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122bc8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122bcc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bd0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122bd4:	e5932000 	ldr	r2, [r3]
  122bd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bdc:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122be0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122be4:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122bec:	e5933004 	ldr	r3, [r3, #4]
  122bf0:	e1a00003 	mov	r0, r3
  122bf4:	ebffe12e 	bl	11b0b4 <pbuf_clen>
  122bf8:	e1a03000 	mov	r3, r0
  122bfc:	e1540003 	cmp	r4, r3
  122c00:	2a000006 	bcs	122c20 <tcp_receive+0x534>
  122c04:	e30804a8 	movw	r0, #33960	; 0x84a8
  122c08:	e3400014 	movt	r0, #20
  122c0c:	ebff8140 	bl	103114 <rt_kprintf>
  122c10:	e300148b 	movw	r1, #1163	; 0x48b
  122c14:	e30802a4 	movw	r0, #33444	; 0x82a4
  122c18:	e3400014 	movt	r0, #20
  122c1c:	ebffa12f 	bl	10b0e0 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122c20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c24:	e5933004 	ldr	r3, [r3, #4]
  122c28:	e1a00003 	mov	r0, r3
  122c2c:	ebffe120 	bl	11b0b4 <pbuf_clen>
  122c30:	e1a03000 	mov	r3, r0
  122c34:	e1a02003 	mov	r2, r3
  122c38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c3c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122c40:	e0433002 	sub	r3, r3, r2
  122c44:	e6ff2073 	uxth	r2, r3
  122c48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c4c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  122c50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c54:	e1d320b8 	ldrh	r2, [r3, #8]
  122c58:	e30e3274 	movw	r3, #57972	; 0xe274
  122c5c:	e3403014 	movt	r3, #20
  122c60:	e1d330b0 	ldrh	r3, [r3]
  122c64:	e0823003 	add	r3, r2, r3
  122c68:	e6ff2073 	uxth	r2, r3
  122c6c:	e30e3274 	movw	r3, #57972	; 0xe274
  122c70:	e3403014 	movt	r3, #20
  122c74:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  122c78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122c7c:	ebfff1fb 	bl	11f470 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  122c80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c84:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122c88:	e3530000 	cmp	r3, #0
  122c8c:	0a00000e 	beq	122ccc <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  122c90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c94:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122c98:	e3530000 	cmp	r3, #0
  122c9c:	1a00000a 	bne	122ccc <tcp_receive+0x5e0>
  122ca0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ca4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ca8:	e3530000 	cmp	r3, #0
  122cac:	1a000006 	bne	122ccc <tcp_receive+0x5e0>
  122cb0:	e30804d0 	movw	r0, #34000	; 0x84d0
  122cb4:	e3400014 	movt	r0, #20
  122cb8:	ebff8115 	bl	103114 <rt_kprintf>
  122cbc:	e3001494 	movw	r1, #1172	; 0x494
  122cc0:	e30802a4 	movw	r0, #33444	; 0x82a4
  122cc4:	e3400014 	movt	r0, #20
  122cc8:	ebffa104 	bl	10b0e0 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122ccc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cd0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122cd4:	e3530000 	cmp	r3, #0
  122cd8:	0a000020 	beq	122d60 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122cdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ce0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ce4:	e593300c 	ldr	r3, [r3, #12]
  122ce8:	e5933004 	ldr	r3, [r3, #4]
  122cec:	e1a00003 	mov	r0, r3
  122cf0:	ebffce3f 	bl	1165f4 <lwip_htonl>
  122cf4:	e1a04000 	mov	r4, r0
  122cf8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cfc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d00:	e1d330b8 	ldrh	r3, [r3, #8]
  122d04:	e1a05003 	mov	r5, r3
  122d08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d0c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d10:	e593300c 	ldr	r3, [r3, #12]
  122d14:	e1d330bc 	ldrh	r3, [r3, #12]
  122d18:	e6ff3073 	uxth	r3, r3
  122d1c:	e1a00003 	mov	r0, r3
  122d20:	ebffce27 	bl	1165c4 <lwip_htons>
  122d24:	e1a03000 	mov	r3, r0
  122d28:	e2033003 	and	r3, r3, #3
  122d2c:	e3530000 	cmp	r3, #0
  122d30:	0a000001 	beq	122d3c <tcp_receive+0x650>
  122d34:	e3a03001 	mov	r3, #1
  122d38:	ea000000 	b	122d40 <tcp_receive+0x654>
  122d3c:	e3a03000 	mov	r3, #0
  122d40:	e0833005 	add	r3, r3, r5
  122d44:	e0842003 	add	r2, r4, r3
  122d48:	e30e3270 	movw	r3, #57968	; 0xe270
  122d4c:	e3403014 	movt	r3, #20
  122d50:	e5933000 	ldr	r3, [r3]
  122d54:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122d58:	e3530000 	cmp	r3, #0
  122d5c:	daffff97 	ble	122bc0 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122d60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d64:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d68:	e3530000 	cmp	r3, #0
  122d6c:	1a000003 	bne	122d80 <tcp_receive+0x694>
        pcb->rtime = -1;
  122d70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d74:	e3e02000 	mvn	r2, #0
  122d78:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122d7c:	ea000002 	b	122d8c <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122d80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d84:	e3a02000 	mov	r2, #0
  122d88:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122d8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d90:	e3a02000 	mov	r2, #0
  122d94:	e5c3201f 	strb	r2, [r3, #31]
  122d98:	ea000001 	b	122da4 <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122d9c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122da0:	eb000c08 	bl	125dc8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122da4:	ea000049 	b	122ed0 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122da8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dac:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122db0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122db4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122db8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122dbc:	e5932000 	ldr	r2, [r3]
  122dc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dc4:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122dc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dcc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122dd0:	e3530000 	cmp	r3, #0
  122dd4:	1a000002 	bne	122de4 <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122dd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ddc:	e3a02000 	mov	r2, #0
  122de0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122de4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122de8:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122dec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122df0:	e5933004 	ldr	r3, [r3, #4]
  122df4:	e1a00003 	mov	r0, r3
  122df8:	ebffe0ad 	bl	11b0b4 <pbuf_clen>
  122dfc:	e1a03000 	mov	r3, r0
  122e00:	e1540003 	cmp	r4, r3
  122e04:	2a000006 	bcs	122e24 <tcp_receive+0x738>
  122e08:	e30804a8 	movw	r0, #33960	; 0x84a8
  122e0c:	e3400014 	movt	r0, #20
  122e10:	ebff80bf 	bl	103114 <rt_kprintf>
  122e14:	e30014c2 	movw	r1, #1218	; 0x4c2
  122e18:	e30802a4 	movw	r0, #33444	; 0x82a4
  122e1c:	e3400014 	movt	r0, #20
  122e20:	ebffa0ae 	bl	10b0e0 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122e24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e28:	e5933004 	ldr	r3, [r3, #4]
  122e2c:	e1a00003 	mov	r0, r3
  122e30:	ebffe09f 	bl	11b0b4 <pbuf_clen>
  122e34:	e1a03000 	mov	r3, r0
  122e38:	e1a02003 	mov	r2, r3
  122e3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e40:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e44:	e0433002 	sub	r3, r3, r2
  122e48:	e6ff2073 	uxth	r2, r3
  122e4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e50:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122e54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e58:	e1d320b8 	ldrh	r2, [r3, #8]
  122e5c:	e30e3274 	movw	r3, #57972	; 0xe274
  122e60:	e3403014 	movt	r3, #20
  122e64:	e1d330b0 	ldrh	r3, [r3]
  122e68:	e0823003 	add	r3, r2, r3
  122e6c:	e6ff2073 	uxth	r2, r3
  122e70:	e30e3274 	movw	r3, #57972	; 0xe274
  122e74:	e3403014 	movt	r3, #20
  122e78:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122e7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122e80:	ebfff17a 	bl	11f470 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122e84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e88:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e8c:	e3530000 	cmp	r3, #0
  122e90:	0a00000e 	beq	122ed0 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122e94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e98:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122e9c:	e3530000 	cmp	r3, #0
  122ea0:	1a00000a 	bne	122ed0 <tcp_receive+0x7e4>
  122ea4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ea8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122eac:	e3530000 	cmp	r3, #0
  122eb0:	1a000006 	bne	122ed0 <tcp_receive+0x7e4>
  122eb4:	e30804d0 	movw	r0, #34000	; 0x84d0
  122eb8:	e3400014 	movt	r0, #20
  122ebc:	ebff8094 	bl	103114 <rt_kprintf>
  122ec0:	e30014ca 	movw	r1, #1226	; 0x4ca
  122ec4:	e30802a4 	movw	r0, #33444	; 0x82a4
  122ec8:	e3400014 	movt	r0, #20
  122ecc:	ebffa083 	bl	10b0e0 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122ed0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ed4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ed8:	e3530000 	cmp	r3, #0
  122edc:	0a000028 	beq	122f84 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122ee0:	e30e3270 	movw	r3, #57968	; 0xe270
  122ee4:	e3403014 	movt	r3, #20
  122ee8:	e5934000 	ldr	r4, [r3]
  122eec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ef0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ef4:	e593300c 	ldr	r3, [r3, #12]
  122ef8:	e5933004 	ldr	r3, [r3, #4]
  122efc:	e1a00003 	mov	r0, r3
  122f00:	ebffcdbb 	bl	1165f4 <lwip_htonl>
  122f04:	e1a05000 	mov	r5, r0
  122f08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f0c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f10:	e1d330b8 	ldrh	r3, [r3, #8]
  122f14:	e1a06003 	mov	r6, r3
  122f18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f1c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f20:	e593300c 	ldr	r3, [r3, #12]
  122f24:	e1d330bc 	ldrh	r3, [r3, #12]
  122f28:	e6ff3073 	uxth	r3, r3
  122f2c:	e1a00003 	mov	r0, r3
  122f30:	ebffcda3 	bl	1165c4 <lwip_htons>
  122f34:	e1a03000 	mov	r3, r0
  122f38:	e2033003 	and	r3, r3, #3
  122f3c:	e3530000 	cmp	r3, #0
  122f40:	0a000001 	beq	122f4c <tcp_receive+0x860>
  122f44:	e3a03001 	mov	r3, #1
  122f48:	ea000000 	b	122f50 <tcp_receive+0x864>
  122f4c:	e3a03000 	mov	r3, #0
  122f50:	e0833006 	add	r3, r3, r6
  122f54:	e0853003 	add	r3, r5, r3
  122f58:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122f5c:	e3530000 	cmp	r3, #0
  122f60:	ba000007 	blt	122f84 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122f64:	e30e3270 	movw	r3, #57968	; 0xe270
  122f68:	e3403014 	movt	r3, #20
  122f6c:	e5932000 	ldr	r2, [r3]
  122f70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f74:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122f78:	e0423003 	sub	r3, r2, r3
  122f7c:	e3530000 	cmp	r3, #0
  122f80:	daffff88 	ble	122da8 <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122f84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f88:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122f8c:	e30e3274 	movw	r3, #57972	; 0xe274
  122f90:	e3403014 	movt	r3, #20
  122f94:	e1d330b0 	ldrh	r3, [r3]
  122f98:	e0823003 	add	r3, r2, r3
  122f9c:	e6ff2073 	uxth	r2, r3
  122fa0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fa4:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122fa8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122fb0:	e3530000 	cmp	r3, #0
  122fb4:	0a00004c 	beq	1230ec <tcp_receive+0xa00>
  122fb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fbc:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122fc0:	e30e3270 	movw	r3, #57968	; 0xe270
  122fc4:	e3403014 	movt	r3, #20
  122fc8:	e5933000 	ldr	r3, [r3]
  122fcc:	e0423003 	sub	r3, r2, r3
  122fd0:	e3530000 	cmp	r3, #0
  122fd4:	aa000044 	bge	1230ec <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122fd8:	e30c3c44 	movw	r3, #52292	; 0xcc44
  122fdc:	e3403015 	movt	r3, #21
  122fe0:	e5933000 	ldr	r3, [r3]
  122fe4:	e6ff2073 	uxth	r2, r3
  122fe8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122ff0:	e6ff3073 	uxth	r3, r3
  122ff4:	e0423003 	sub	r3, r2, r3
  122ff8:	e6ff3073 	uxth	r3, r3
  122ffc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  123000:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  123004:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123008:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  12300c:	e1a031c3 	asr	r3, r3, #3
  123010:	e6bf3073 	sxth	r3, r3
  123014:	e6ff3073 	uxth	r3, r3
  123018:	e0423003 	sub	r3, r2, r3
  12301c:	e6ff3073 	uxth	r3, r3
  123020:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  123024:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123028:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  12302c:	e6ff2073 	uxth	r2, r3
  123030:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123034:	e0823003 	add	r3, r2, r3
  123038:	e6ff3073 	uxth	r3, r3
  12303c:	e6bf2073 	sxth	r2, r3
  123040:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123044:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  123048:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  12304c:	e3530000 	cmp	r3, #0
  123050:	aa000003 	bge	123064 <tcp_receive+0x978>
        m = -m;
  123054:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123058:	e2633000 	rsb	r3, r3, #0
  12305c:	e6ff3073 	uxth	r3, r3
  123060:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  123064:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  123068:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12306c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123070:	e1a03143 	asr	r3, r3, #2
  123074:	e6bf3073 	sxth	r3, r3
  123078:	e6ff3073 	uxth	r3, r3
  12307c:	e0423003 	sub	r3, r2, r3
  123080:	e6ff3073 	uxth	r3, r3
  123084:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  123088:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12308c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123090:	e6ff2073 	uxth	r2, r3
  123094:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123098:	e0823003 	add	r3, r2, r3
  12309c:	e6ff3073 	uxth	r3, r3
  1230a0:	e6bf2073 	sxth	r2, r3
  1230a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230a8:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  1230ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230b0:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  1230b4:	e1a031c3 	asr	r3, r3, #3
  1230b8:	e6bf3073 	sxth	r3, r3
  1230bc:	e6ff2073 	uxth	r2, r3
  1230c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230c4:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  1230c8:	e6ff3073 	uxth	r3, r3
  1230cc:	e0823003 	add	r3, r2, r3
  1230d0:	e6ff3073 	uxth	r3, r3
  1230d4:	e6bf2073 	sxth	r2, r3
  1230d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230dc:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  1230e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230e4:	e3a02000 	mov	r2, #0
  1230e8:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  1230ec:	e30e3276 	movw	r3, #57974	; 0xe276
  1230f0:	e3403014 	movt	r3, #20
  1230f4:	e1d330b0 	ldrh	r3, [r3]
  1230f8:	e3530000 	cmp	r3, #0
  1230fc:	0a0004b3 	beq	1243d0 <tcp_receive+0x1ce4>
  123100:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123104:	e5933014 	ldr	r3, [r3, #20]
  123108:	e3530006 	cmp	r3, #6
  12310c:	8a0004af 	bhi	1243d0 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  123110:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123114:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123118:	e30e326c 	movw	r3, #57964	; 0xe26c
  12311c:	e3403014 	movt	r3, #20
  123120:	e5933000 	ldr	r3, [r3]
  123124:	e0423003 	sub	r3, r2, r3
  123128:	e2433001 	sub	r3, r3, #1
  12312c:	e3530000 	cmp	r3, #0
  123130:	ba0000aa 	blt	1233e0 <tcp_receive+0xcf4>
  123134:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123138:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12313c:	e30e3276 	movw	r3, #57974	; 0xe276
  123140:	e3403014 	movt	r3, #20
  123144:	e1d330b0 	ldrh	r3, [r3]
  123148:	e1a01003 	mov	r1, r3
  12314c:	e30e326c 	movw	r3, #57964	; 0xe26c
  123150:	e3403014 	movt	r3, #20
  123154:	e5933000 	ldr	r3, [r3]
  123158:	e0813003 	add	r3, r1, r3
  12315c:	e0423003 	sub	r3, r2, r3
  123160:	e2833001 	add	r3, r3, #1
  123164:	e3530000 	cmp	r3, #0
  123168:	ca00009c 	bgt	1233e0 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  12316c:	e30e324c 	movw	r3, #57932	; 0xe24c
  123170:	e3403014 	movt	r3, #20
  123174:	e5933004 	ldr	r3, [r3, #4]
  123178:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  12317c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123180:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123184:	e30e326c 	movw	r3, #57964	; 0xe26c
  123188:	e3403014 	movt	r3, #20
  12318c:	e5933000 	ldr	r3, [r3]
  123190:	e0423003 	sub	r3, r2, r3
  123194:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  123198:	e30e324c 	movw	r3, #57932	; 0xe24c
  12319c:	e3403014 	movt	r3, #20
  1231a0:	e5933004 	ldr	r3, [r3, #4]
  1231a4:	e3530000 	cmp	r3, #0
  1231a8:	1a000006 	bne	1231c8 <tcp_receive+0xadc>
  1231ac:	e30804f0 	movw	r0, #34032	; 0x84f0
  1231b0:	e3400014 	movt	r0, #20
  1231b4:	ebff7fd6 	bl	103114 <rt_kprintf>
  1231b8:	e3001529 	movw	r1, #1321	; 0x529
  1231bc:	e30802a4 	movw	r0, #33444	; 0x82a4
  1231c0:	e3400014 	movt	r0, #20
  1231c4:	ebff9fc5 	bl	10b0e0 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  1231c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1231cc:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  1231d0:	e1530002 	cmp	r3, r2
  1231d4:	da000006 	ble	1231f4 <tcp_receive+0xb08>
  1231d8:	e3080500 	movw	r0, #34048	; 0x8500
  1231dc:	e3400014 	movt	r0, #20
  1231e0:	ebff7fcb 	bl	103114 <rt_kprintf>
  1231e4:	e300152a 	movw	r1, #1322	; 0x52a
  1231e8:	e30802a4 	movw	r0, #33444	; 0x82a4
  1231ec:	e3400014 	movt	r0, #20
  1231f0:	ebff9fba 	bl	10b0e0 <sys_arch_assert>
      if (inseg.p->len < off) {
  1231f4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1231f8:	e3403014 	movt	r3, #20
  1231fc:	e5933004 	ldr	r3, [r3, #4]
  123200:	e1d330ba 	ldrh	r3, [r3, #10]
  123204:	e1a02003 	mov	r2, r3
  123208:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12320c:	e1530002 	cmp	r3, r2
  123210:	da00003f 	ble	123314 <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  123214:	e30e324c 	movw	r3, #57932	; 0xe24c
  123218:	e3403014 	movt	r3, #20
  12321c:	e5933004 	ldr	r3, [r3, #4]
  123220:	e1d330b8 	ldrh	r3, [r3, #8]
  123224:	e1a02003 	mov	r2, r3
  123228:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12322c:	e1530002 	cmp	r3, r2
  123230:	da000006 	ble	123250 <tcp_receive+0xb64>
  123234:	e3080510 	movw	r0, #34064	; 0x8510
  123238:	e3400014 	movt	r0, #20
  12323c:	ebff7fb4 	bl	103114 <rt_kprintf>
  123240:	e300152c 	movw	r1, #1324	; 0x52c
  123244:	e30802a4 	movw	r0, #33444	; 0x82a4
  123248:	e3400014 	movt	r0, #20
  12324c:	ebff9fa3 	bl	10b0e0 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  123250:	e30e324c 	movw	r3, #57932	; 0xe24c
  123254:	e3403014 	movt	r3, #20
  123258:	e5933004 	ldr	r3, [r3, #4]
  12325c:	e1d320b8 	ldrh	r2, [r3, #8]
  123260:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123264:	e6ff3073 	uxth	r3, r3
  123268:	e0423003 	sub	r3, r2, r3
  12326c:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  123270:	ea00000e 	b	1232b0 <tcp_receive+0xbc4>
          off -= p->len;
  123274:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123278:	e1d330ba 	ldrh	r3, [r3, #10]
  12327c:	e1a02003 	mov	r2, r3
  123280:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123284:	e0433002 	sub	r3, r3, r2
  123288:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  12328c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123290:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  123294:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  123298:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12329c:	e3a02000 	mov	r2, #0
  1232a0:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  1232a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232a8:	e5933000 	ldr	r3, [r3]
  1232ac:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  1232b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232b4:	e1d330ba 	ldrh	r3, [r3, #10]
  1232b8:	e1a02003 	mov	r2, r3
  1232bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1232c0:	e1530002 	cmp	r3, r2
  1232c4:	caffffea 	bgt	123274 <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  1232c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1232cc:	e6ff3073 	uxth	r3, r3
  1232d0:	e2633000 	rsb	r3, r3, #0
  1232d4:	e6ff3073 	uxth	r3, r3
  1232d8:	e6bf3073 	sxth	r3, r3
  1232dc:	e1a01003 	mov	r1, r3
  1232e0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1232e4:	ebffdecf 	bl	11ae28 <pbuf_header>
  1232e8:	e1a03000 	mov	r3, r0
  1232ec:	e3530000 	cmp	r3, #0
  1232f0:	0a00001c 	beq	123368 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  1232f4:	e3080520 	movw	r0, #34080	; 0x8520
  1232f8:	e3400014 	movt	r0, #20
  1232fc:	ebff7f84 	bl	103114 <rt_kprintf>
  123300:	e3001539 	movw	r1, #1337	; 0x539
  123304:	e30802a4 	movw	r0, #33444	; 0x82a4
  123308:	e3400014 	movt	r0, #20
  12330c:	ebff9f73 	bl	10b0e0 <sys_arch_assert>
  123310:	ea000014 	b	123368 <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  123314:	e30e324c 	movw	r3, #57932	; 0xe24c
  123318:	e3403014 	movt	r3, #20
  12331c:	e5933004 	ldr	r3, [r3, #4]
  123320:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  123324:	e6ff2072 	uxth	r2, r2
  123328:	e2622000 	rsb	r2, r2, #0
  12332c:	e6ff2072 	uxth	r2, r2
  123330:	e6bf2072 	sxth	r2, r2
  123334:	e1a01002 	mov	r1, r2
  123338:	e1a00003 	mov	r0, r3
  12333c:	ebffdeb9 	bl	11ae28 <pbuf_header>
  123340:	e1a03000 	mov	r3, r0
  123344:	e3530000 	cmp	r3, #0
  123348:	0a000006 	beq	123368 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  12334c:	e3080520 	movw	r0, #34080	; 0x8520
  123350:	e3400014 	movt	r0, #20
  123354:	ebff7f6e 	bl	103114 <rt_kprintf>
  123358:	e300153e 	movw	r1, #1342	; 0x53e
  12335c:	e30802a4 	movw	r0, #33444	; 0x82a4
  123360:	e3400014 	movt	r0, #20
  123364:	ebff9f5d 	bl	10b0e0 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  123368:	e30e324c 	movw	r3, #57932	; 0xe24c
  12336c:	e3403014 	movt	r3, #20
  123370:	e1d320b8 	ldrh	r2, [r3, #8]
  123374:	e30e326c 	movw	r3, #57964	; 0xe26c
  123378:	e3403014 	movt	r3, #20
  12337c:	e5933000 	ldr	r3, [r3]
  123380:	e6ff1073 	uxth	r1, r3
  123384:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123388:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12338c:	e6ff3073 	uxth	r3, r3
  123390:	e0413003 	sub	r3, r1, r3
  123394:	e6ff3073 	uxth	r3, r3
  123398:	e0823003 	add	r3, r2, r3
  12339c:	e6ff2073 	uxth	r2, r3
  1233a0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1233a4:	e3403014 	movt	r3, #20
  1233a8:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  1233ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233b0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1233b4:	e30e326c 	movw	r3, #57964	; 0xe26c
  1233b8:	e3403014 	movt	r3, #20
  1233bc:	e5832000 	str	r2, [r3]
  1233c0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1233c4:	e3403014 	movt	r3, #20
  1233c8:	e593200c 	ldr	r2, [r3, #12]
  1233cc:	e30e326c 	movw	r3, #57964	; 0xe26c
  1233d0:	e3403014 	movt	r3, #20
  1233d4:	e5933000 	ldr	r3, [r3]
  1233d8:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  1233dc:	ea00000d 	b	123418 <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  1233e0:	e30e326c 	movw	r3, #57964	; 0xe26c
  1233e4:	e3403014 	movt	r3, #20
  1233e8:	e5932000 	ldr	r2, [r3]
  1233ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1233f4:	e0423003 	sub	r3, r2, r3
  1233f8:	e3530000 	cmp	r3, #0
  1233fc:	aa000005 	bge	123418 <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  123400:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123404:	e5d3301e 	ldrb	r3, [r3, #30]
  123408:	e3833002 	orr	r3, r3, #2
  12340c:	e6ef2073 	uxtb	r2, r3
  123410:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123414:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  123418:	e30e326c 	movw	r3, #57964	; 0xe26c
  12341c:	e3403014 	movt	r3, #20
  123420:	e5932000 	ldr	r2, [r3]
  123424:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123428:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12342c:	e0423003 	sub	r3, r2, r3
  123430:	e3530000 	cmp	r3, #0
  123434:	ba0003e1 	blt	1243c0 <tcp_receive+0x1cd4>
  123438:	e30e326c 	movw	r3, #57964	; 0xe26c
  12343c:	e3403014 	movt	r3, #20
  123440:	e5932000 	ldr	r2, [r3]
  123444:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123448:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12344c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123450:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123454:	e0833001 	add	r3, r3, r1
  123458:	e0423003 	sub	r3, r2, r3
  12345c:	e2833001 	add	r3, r3, #1
  123460:	e3530000 	cmp	r3, #0
  123464:	ca0003d5 	bgt	1243c0 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  123468:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12346c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123470:	e30e326c 	movw	r3, #57964	; 0xe26c
  123474:	e3403014 	movt	r3, #20
  123478:	e5933000 	ldr	r3, [r3]
  12347c:	e1520003 	cmp	r2, r3
  123480:	1a00026b 	bne	123e34 <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  123484:	e30e324c 	movw	r3, #57932	; 0xe24c
  123488:	e3403014 	movt	r3, #20
  12348c:	e1d340b8 	ldrh	r4, [r3, #8]
  123490:	e30e324c 	movw	r3, #57932	; 0xe24c
  123494:	e3403014 	movt	r3, #20
  123498:	e593300c 	ldr	r3, [r3, #12]
  12349c:	e1d330bc 	ldrh	r3, [r3, #12]
  1234a0:	e6ff3073 	uxth	r3, r3
  1234a4:	e1a00003 	mov	r0, r3
  1234a8:	ebffcc45 	bl	1165c4 <lwip_htons>
  1234ac:	e1a03000 	mov	r3, r0
  1234b0:	e2033003 	and	r3, r3, #3
  1234b4:	e3530000 	cmp	r3, #0
  1234b8:	0a000001 	beq	1234c4 <tcp_receive+0xdd8>
  1234bc:	e3a03001 	mov	r3, #1
  1234c0:	ea000000 	b	1234c8 <tcp_receive+0xddc>
  1234c4:	e3a03000 	mov	r3, #0
  1234c8:	e0833004 	add	r3, r3, r4
  1234cc:	e6ff2073 	uxth	r2, r3
  1234d0:	e30e3276 	movw	r3, #57974	; 0xe276
  1234d4:	e3403014 	movt	r3, #20
  1234d8:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  1234dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1234e0:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1234e4:	e30e3276 	movw	r3, #57974	; 0xe276
  1234e8:	e3403014 	movt	r3, #20
  1234ec:	e1d330b0 	ldrh	r3, [r3]
  1234f0:	e1520003 	cmp	r2, r3
  1234f4:	2a000072 	bcs	1236c4 <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1234f8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1234fc:	e3403014 	movt	r3, #20
  123500:	e593300c 	ldr	r3, [r3, #12]
  123504:	e1d330bc 	ldrh	r3, [r3, #12]
  123508:	e6ff3073 	uxth	r3, r3
  12350c:	e1a00003 	mov	r0, r3
  123510:	ebffcc2b 	bl	1165c4 <lwip_htons>
  123514:	e1a03000 	mov	r3, r0
  123518:	e2033001 	and	r3, r3, #1
  12351c:	e3530000 	cmp	r3, #0
  123520:	0a00001a 	beq	123590 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  123524:	e30e324c 	movw	r3, #57932	; 0xe24c
  123528:	e3403014 	movt	r3, #20
  12352c:	e593300c 	ldr	r3, [r3, #12]
  123530:	e1d330bc 	ldrh	r3, [r3, #12]
  123534:	e6ff3073 	uxth	r3, r3
  123538:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  12353c:	e6ff4073 	uxth	r4, r3
  123540:	e30e324c 	movw	r3, #57932	; 0xe24c
  123544:	e3403014 	movt	r3, #20
  123548:	e593300c 	ldr	r3, [r3, #12]
  12354c:	e1d330bc 	ldrh	r3, [r3, #12]
  123550:	e6ff3073 	uxth	r3, r3
  123554:	e1a00003 	mov	r0, r3
  123558:	ebffcc19 	bl	1165c4 <lwip_htons>
  12355c:	e1a03000 	mov	r3, r0
  123560:	e203303e 	and	r3, r3, #62	; 0x3e
  123564:	e6ff3073 	uxth	r3, r3
  123568:	e1a00003 	mov	r0, r3
  12356c:	ebffcc14 	bl	1165c4 <lwip_htons>
  123570:	e1a03000 	mov	r3, r0
  123574:	e1a02003 	mov	r2, r3
  123578:	e30e324c 	movw	r3, #57932	; 0xe24c
  12357c:	e3403014 	movt	r3, #20
  123580:	e593300c 	ldr	r3, [r3, #12]
  123584:	e1842002 	orr	r2, r4, r2
  123588:	e6ff2072 	uxth	r2, r2
  12358c:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  123590:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123594:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123598:	e30e324c 	movw	r3, #57932	; 0xe24c
  12359c:	e3403014 	movt	r3, #20
  1235a0:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  1235a4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1235a8:	e3403014 	movt	r3, #20
  1235ac:	e593300c 	ldr	r3, [r3, #12]
  1235b0:	e1d330bc 	ldrh	r3, [r3, #12]
  1235b4:	e6ff3073 	uxth	r3, r3
  1235b8:	e1a00003 	mov	r0, r3
  1235bc:	ebffcc00 	bl	1165c4 <lwip_htons>
  1235c0:	e1a03000 	mov	r3, r0
  1235c4:	e2033002 	and	r3, r3, #2
  1235c8:	e3530000 	cmp	r3, #0
  1235cc:	0a000007 	beq	1235f0 <tcp_receive+0xf04>
            inseg.len -= 1;
  1235d0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1235d4:	e3403014 	movt	r3, #20
  1235d8:	e1d330b8 	ldrh	r3, [r3, #8]
  1235dc:	e2433001 	sub	r3, r3, #1
  1235e0:	e6ff2073 	uxth	r2, r3
  1235e4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1235e8:	e3403014 	movt	r3, #20
  1235ec:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  1235f0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1235f4:	e3403014 	movt	r3, #20
  1235f8:	e5932004 	ldr	r2, [r3, #4]
  1235fc:	e30e324c 	movw	r3, #57932	; 0xe24c
  123600:	e3403014 	movt	r3, #20
  123604:	e1d330b8 	ldrh	r3, [r3, #8]
  123608:	e1a01003 	mov	r1, r3
  12360c:	e1a00002 	mov	r0, r2
  123610:	ebffdcd9 	bl	11a97c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  123614:	e30e324c 	movw	r3, #57932	; 0xe24c
  123618:	e3403014 	movt	r3, #20
  12361c:	e1d340b8 	ldrh	r4, [r3, #8]
  123620:	e30e324c 	movw	r3, #57932	; 0xe24c
  123624:	e3403014 	movt	r3, #20
  123628:	e593300c 	ldr	r3, [r3, #12]
  12362c:	e1d330bc 	ldrh	r3, [r3, #12]
  123630:	e6ff3073 	uxth	r3, r3
  123634:	e1a00003 	mov	r0, r3
  123638:	ebffcbe1 	bl	1165c4 <lwip_htons>
  12363c:	e1a03000 	mov	r3, r0
  123640:	e2033003 	and	r3, r3, #3
  123644:	e3530000 	cmp	r3, #0
  123648:	0a000001 	beq	123654 <tcp_receive+0xf68>
  12364c:	e3a03001 	mov	r3, #1
  123650:	ea000000 	b	123658 <tcp_receive+0xf6c>
  123654:	e3a03000 	mov	r3, #0
  123658:	e0833004 	add	r3, r3, r4
  12365c:	e6ff2073 	uxth	r2, r3
  123660:	e30e3276 	movw	r3, #57974	; 0xe276
  123664:	e3403014 	movt	r3, #20
  123668:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  12366c:	e30e3276 	movw	r3, #57974	; 0xe276
  123670:	e3403014 	movt	r3, #20
  123674:	e1d330b0 	ldrh	r3, [r3]
  123678:	e1a02003 	mov	r2, r3
  12367c:	e30e326c 	movw	r3, #57964	; 0xe26c
  123680:	e3403014 	movt	r3, #20
  123684:	e5933000 	ldr	r3, [r3]
  123688:	e0822003 	add	r2, r2, r3
  12368c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123690:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123694:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123698:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12369c:	e0833001 	add	r3, r3, r1
  1236a0:	e1520003 	cmp	r2, r3
  1236a4:	0a000006 	beq	1236c4 <tcp_receive+0xfd8>
  1236a8:	e3080534 	movw	r0, #34100	; 0x8534
  1236ac:	e3400014 	movt	r0, #20
  1236b0:	ebff7e97 	bl	103114 <rt_kprintf>
  1236b4:	e300156c 	movw	r1, #1388	; 0x56c
  1236b8:	e30802a4 	movw	r0, #33444	; 0x82a4
  1236bc:	e3400014 	movt	r0, #20
  1236c0:	ebff9e86 	bl	10b0e0 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  1236c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236c8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1236cc:	e3530000 	cmp	r3, #0
  1236d0:	0a0000da 	beq	123a40 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1236d4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1236d8:	e3403014 	movt	r3, #20
  1236dc:	e593300c 	ldr	r3, [r3, #12]
  1236e0:	e1d330bc 	ldrh	r3, [r3, #12]
  1236e4:	e6ff3073 	uxth	r3, r3
  1236e8:	e1a00003 	mov	r0, r3
  1236ec:	ebffcbb4 	bl	1165c4 <lwip_htons>
  1236f0:	e1a03000 	mov	r3, r0
  1236f4:	e2033001 	and	r3, r3, #1
  1236f8:	e3530000 	cmp	r3, #0
  1236fc:	0a00000f 	beq	123740 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  123700:	ea000009 	b	12372c <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  123704:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123708:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12370c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  123710:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123714:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123718:	e5932000 	ldr	r2, [r3]
  12371c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123720:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  123724:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  123728:	ebffef50 	bl	11f470 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  12372c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123730:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123734:	e3530000 	cmp	r3, #0
  123738:	1afffff1 	bne	123704 <tcp_receive+0x1018>
  12373c:	ea0000bf 	b	123a40 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  123740:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123744:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  12374c:	ea000040 	b	123854 <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123754:	e593300c 	ldr	r3, [r3, #12]
  123758:	e1d330bc 	ldrh	r3, [r3, #12]
  12375c:	e6ff3073 	uxth	r3, r3
  123760:	e1a00003 	mov	r0, r3
  123764:	ebffcb96 	bl	1165c4 <lwip_htons>
  123768:	e1a03000 	mov	r3, r0
  12376c:	e2033001 	and	r3, r3, #1
  123770:	e3530000 	cmp	r3, #0
  123774:	0a00002f 	beq	123838 <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  123778:	e30e324c 	movw	r3, #57932	; 0xe24c
  12377c:	e3403014 	movt	r3, #20
  123780:	e593300c 	ldr	r3, [r3, #12]
  123784:	e1d330bc 	ldrh	r3, [r3, #12]
  123788:	e6ff3073 	uxth	r3, r3
  12378c:	e1a00003 	mov	r0, r3
  123790:	ebffcb8b 	bl	1165c4 <lwip_htons>
  123794:	e1a03000 	mov	r3, r0
  123798:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  12379c:	e3530000 	cmp	r3, #0
  1237a0:	1a000024 	bne	123838 <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  1237a4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1237a8:	e3403014 	movt	r3, #20
  1237ac:	e593300c 	ldr	r3, [r3, #12]
  1237b0:	e1d330bc 	ldrh	r3, [r3, #12]
  1237b4:	e6ff4073 	uxth	r4, r3
  1237b8:	e3a00001 	mov	r0, #1
  1237bc:	ebffcb80 	bl	1165c4 <lwip_htons>
  1237c0:	e1a03000 	mov	r3, r0
  1237c4:	e1a02003 	mov	r2, r3
  1237c8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1237cc:	e3403014 	movt	r3, #20
  1237d0:	e593300c 	ldr	r3, [r3, #12]
  1237d4:	e1842002 	orr	r2, r4, r2
  1237d8:	e6ff2072 	uxth	r2, r2
  1237dc:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  1237e0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1237e4:	e3403014 	movt	r3, #20
  1237e8:	e1d340b8 	ldrh	r4, [r3, #8]
  1237ec:	e30e324c 	movw	r3, #57932	; 0xe24c
  1237f0:	e3403014 	movt	r3, #20
  1237f4:	e593300c 	ldr	r3, [r3, #12]
  1237f8:	e1d330bc 	ldrh	r3, [r3, #12]
  1237fc:	e6ff3073 	uxth	r3, r3
  123800:	e1a00003 	mov	r0, r3
  123804:	ebffcb6e 	bl	1165c4 <lwip_htons>
  123808:	e1a03000 	mov	r3, r0
  12380c:	e2033003 	and	r3, r3, #3
  123810:	e3530000 	cmp	r3, #0
  123814:	0a000001 	beq	123820 <tcp_receive+0x1134>
  123818:	e3a03001 	mov	r3, #1
  12381c:	ea000000 	b	123824 <tcp_receive+0x1138>
  123820:	e3a03000 	mov	r3, #0
  123824:	e0833004 	add	r3, r3, r4
  123828:	e6ff2073 	uxth	r2, r3
  12382c:	e30e3276 	movw	r3, #57974	; 0xe276
  123830:	e3403014 	movt	r3, #20
  123834:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  123838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12383c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  123840:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123844:	e5933000 	ldr	r3, [r3]
  123848:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  12384c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  123850:	ebffef06 	bl	11f470 <tcp_seg_free>
            while (next &&
  123854:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123858:	e3530000 	cmp	r3, #0
  12385c:	0a000010 	beq	1238a4 <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  123860:	e30e3276 	movw	r3, #57974	; 0xe276
  123864:	e3403014 	movt	r3, #20
  123868:	e1d330b0 	ldrh	r3, [r3]
  12386c:	e1a02003 	mov	r2, r3
  123870:	e30e326c 	movw	r3, #57964	; 0xe26c
  123874:	e3403014 	movt	r3, #20
  123878:	e5933000 	ldr	r3, [r3]
  12387c:	e0822003 	add	r2, r2, r3
  123880:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123884:	e593300c 	ldr	r3, [r3, #12]
  123888:	e5933004 	ldr	r3, [r3, #4]
  12388c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123890:	e1d110b8 	ldrh	r1, [r1, #8]
  123894:	e0833001 	add	r3, r3, r1
  123898:	e0423003 	sub	r3, r2, r3
            while (next &&
  12389c:	e3530000 	cmp	r3, #0
  1238a0:	aaffffaa 	bge	123750 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  1238a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238a8:	e3530000 	cmp	r3, #0
  1238ac:	0a000060 	beq	123a34 <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  1238b0:	e30e3276 	movw	r3, #57974	; 0xe276
  1238b4:	e3403014 	movt	r3, #20
  1238b8:	e1d330b0 	ldrh	r3, [r3]
  1238bc:	e1a02003 	mov	r2, r3
  1238c0:	e30e326c 	movw	r3, #57964	; 0xe26c
  1238c4:	e3403014 	movt	r3, #20
  1238c8:	e5933000 	ldr	r3, [r3]
  1238cc:	e0822003 	add	r2, r2, r3
  1238d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238d4:	e593300c 	ldr	r3, [r3, #12]
  1238d8:	e5933004 	ldr	r3, [r3, #4]
  1238dc:	e0423003 	sub	r3, r2, r3
            if (next &&
  1238e0:	e3530000 	cmp	r3, #0
  1238e4:	da000052 	ble	123a34 <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  1238e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238ec:	e593300c 	ldr	r3, [r3, #12]
  1238f0:	e5933004 	ldr	r3, [r3, #4]
  1238f4:	e6ff2073 	uxth	r2, r3
  1238f8:	e30e326c 	movw	r3, #57964	; 0xe26c
  1238fc:	e3403014 	movt	r3, #20
  123900:	e5933000 	ldr	r3, [r3]
  123904:	e6ff3073 	uxth	r3, r3
  123908:	e0423003 	sub	r3, r2, r3
  12390c:	e6ff2073 	uxth	r2, r3
  123910:	e30e324c 	movw	r3, #57932	; 0xe24c
  123914:	e3403014 	movt	r3, #20
  123918:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  12391c:	e30e324c 	movw	r3, #57932	; 0xe24c
  123920:	e3403014 	movt	r3, #20
  123924:	e593300c 	ldr	r3, [r3, #12]
  123928:	e1d330bc 	ldrh	r3, [r3, #12]
  12392c:	e6ff3073 	uxth	r3, r3
  123930:	e1a00003 	mov	r0, r3
  123934:	ebffcb22 	bl	1165c4 <lwip_htons>
  123938:	e1a03000 	mov	r3, r0
  12393c:	e2033002 	and	r3, r3, #2
  123940:	e3530000 	cmp	r3, #0
  123944:	0a000007 	beq	123968 <tcp_receive+0x127c>
                inseg.len -= 1;
  123948:	e30e324c 	movw	r3, #57932	; 0xe24c
  12394c:	e3403014 	movt	r3, #20
  123950:	e1d330b8 	ldrh	r3, [r3, #8]
  123954:	e2433001 	sub	r3, r3, #1
  123958:	e6ff2073 	uxth	r2, r3
  12395c:	e30e324c 	movw	r3, #57932	; 0xe24c
  123960:	e3403014 	movt	r3, #20
  123964:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  123968:	e30e324c 	movw	r3, #57932	; 0xe24c
  12396c:	e3403014 	movt	r3, #20
  123970:	e5932004 	ldr	r2, [r3, #4]
  123974:	e30e324c 	movw	r3, #57932	; 0xe24c
  123978:	e3403014 	movt	r3, #20
  12397c:	e1d330b8 	ldrh	r3, [r3, #8]
  123980:	e1a01003 	mov	r1, r3
  123984:	e1a00002 	mov	r0, r2
  123988:	ebffdbfb 	bl	11a97c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  12398c:	e30e324c 	movw	r3, #57932	; 0xe24c
  123990:	e3403014 	movt	r3, #20
  123994:	e1d340b8 	ldrh	r4, [r3, #8]
  123998:	e30e324c 	movw	r3, #57932	; 0xe24c
  12399c:	e3403014 	movt	r3, #20
  1239a0:	e593300c 	ldr	r3, [r3, #12]
  1239a4:	e1d330bc 	ldrh	r3, [r3, #12]
  1239a8:	e6ff3073 	uxth	r3, r3
  1239ac:	e1a00003 	mov	r0, r3
  1239b0:	ebffcb03 	bl	1165c4 <lwip_htons>
  1239b4:	e1a03000 	mov	r3, r0
  1239b8:	e2033003 	and	r3, r3, #3
  1239bc:	e3530000 	cmp	r3, #0
  1239c0:	0a000001 	beq	1239cc <tcp_receive+0x12e0>
  1239c4:	e3a03001 	mov	r3, #1
  1239c8:	ea000000 	b	1239d0 <tcp_receive+0x12e4>
  1239cc:	e3a03000 	mov	r3, #0
  1239d0:	e0833004 	add	r3, r3, r4
  1239d4:	e6ff2073 	uxth	r2, r3
  1239d8:	e30e3276 	movw	r3, #57974	; 0xe276
  1239dc:	e3403014 	movt	r3, #20
  1239e0:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  1239e4:	e30e3276 	movw	r3, #57974	; 0xe276
  1239e8:	e3403014 	movt	r3, #20
  1239ec:	e1d330b0 	ldrh	r3, [r3]
  1239f0:	e1a02003 	mov	r2, r3
  1239f4:	e30e326c 	movw	r3, #57964	; 0xe26c
  1239f8:	e3403014 	movt	r3, #20
  1239fc:	e5933000 	ldr	r3, [r3]
  123a00:	e0822003 	add	r2, r2, r3
  123a04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123a08:	e593300c 	ldr	r3, [r3, #12]
  123a0c:	e5933004 	ldr	r3, [r3, #4]
  123a10:	e1520003 	cmp	r2, r3
  123a14:	0a000006 	beq	123a34 <tcp_receive+0x1348>
  123a18:	e308056c 	movw	r0, #34156	; 0x856c
  123a1c:	e3400014 	movt	r0, #20
  123a20:	ebff7dbb 	bl	103114 <rt_kprintf>
  123a24:	e300159c 	movw	r1, #1436	; 0x59c
  123a28:	e30802a4 	movw	r0, #33444	; 0x82a4
  123a2c:	e3400014 	movt	r0, #20
  123a30:	ebff9daa 	bl	10b0e0 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  123a34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a38:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123a3c:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  123a40:	e30e3276 	movw	r3, #57974	; 0xe276
  123a44:	e3403014 	movt	r3, #20
  123a48:	e1d330b0 	ldrh	r3, [r3]
  123a4c:	e1a02003 	mov	r2, r3
  123a50:	e30e326c 	movw	r3, #57964	; 0xe26c
  123a54:	e3403014 	movt	r3, #20
  123a58:	e5933000 	ldr	r3, [r3]
  123a5c:	e0822003 	add	r2, r2, r3
  123a60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a64:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  123a68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a6c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123a70:	e30e3276 	movw	r3, #57974	; 0xe276
  123a74:	e3403014 	movt	r3, #20
  123a78:	e1d330b0 	ldrh	r3, [r3]
  123a7c:	e1520003 	cmp	r2, r3
  123a80:	2a000006 	bcs	123aa0 <tcp_receive+0x13b4>
  123a84:	e30805a8 	movw	r0, #34216	; 0x85a8
  123a88:	e3400014 	movt	r0, #20
  123a8c:	ebff7da0 	bl	103114 <rt_kprintf>
  123a90:	e30015a6 	movw	r1, #1446	; 0x5a6
  123a94:	e30802a4 	movw	r0, #33444	; 0x82a4
  123a98:	e3400014 	movt	r0, #20
  123a9c:	ebff9d8f 	bl	10b0e0 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123aa0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123aa4:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123aa8:	e30e3276 	movw	r3, #57974	; 0xe276
  123aac:	e3403014 	movt	r3, #20
  123ab0:	e1d330b0 	ldrh	r3, [r3]
  123ab4:	e0423003 	sub	r3, r2, r3
  123ab8:	e6ff2073 	uxth	r2, r3
  123abc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ac0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  123ac4:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123ac8:	ebffe939 	bl	11dfb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123acc:	e30e324c 	movw	r3, #57932	; 0xe24c
  123ad0:	e3403014 	movt	r3, #20
  123ad4:	e5933004 	ldr	r3, [r3, #4]
  123ad8:	e1d330b8 	ldrh	r3, [r3, #8]
  123adc:	e3530000 	cmp	r3, #0
  123ae0:	0a000009 	beq	123b0c <tcp_receive+0x1420>
          recv_data = inseg.p;
  123ae4:	e30e324c 	movw	r3, #57932	; 0xe24c
  123ae8:	e3403014 	movt	r3, #20
  123aec:	e5932004 	ldr	r2, [r3, #4]
  123af0:	e30e327c 	movw	r3, #57980	; 0xe27c
  123af4:	e3403014 	movt	r3, #20
  123af8:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  123afc:	e30e324c 	movw	r3, #57932	; 0xe24c
  123b00:	e3403014 	movt	r3, #20
  123b04:	e3a02000 	mov	r2, #0
  123b08:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123b0c:	e30e324c 	movw	r3, #57932	; 0xe24c
  123b10:	e3403014 	movt	r3, #20
  123b14:	e593300c 	ldr	r3, [r3, #12]
  123b18:	e1d330bc 	ldrh	r3, [r3, #12]
  123b1c:	e6ff3073 	uxth	r3, r3
  123b20:	e1a00003 	mov	r0, r3
  123b24:	ebffcaa6 	bl	1165c4 <lwip_htons>
  123b28:	e1a03000 	mov	r3, r0
  123b2c:	e2033001 	and	r3, r3, #1
  123b30:	e3530000 	cmp	r3, #0
  123b34:	0a000099 	beq	123da0 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  123b38:	e30e3279 	movw	r3, #57977	; 0xe279
  123b3c:	e3403014 	movt	r3, #20
  123b40:	e5d33000 	ldrb	r3, [r3]
  123b44:	e3833020 	orr	r3, r3, #32
  123b48:	e6ef2073 	uxtb	r2, r3
  123b4c:	e30e3279 	movw	r3, #57977	; 0xe279
  123b50:	e3403014 	movt	r3, #20
  123b54:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  123b58:	ea000090 	b	123da0 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  123b5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b60:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b64:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  123b68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b6c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b70:	e593300c 	ldr	r3, [r3, #12]
  123b74:	e5932004 	ldr	r2, [r3, #4]
  123b78:	e30e326c 	movw	r3, #57964	; 0xe26c
  123b7c:	e3403014 	movt	r3, #20
  123b80:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  123b84:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123b88:	e1d330b8 	ldrh	r3, [r3, #8]
  123b8c:	e1a04003 	mov	r4, r3
  123b90:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123b94:	e593300c 	ldr	r3, [r3, #12]
  123b98:	e1d330bc 	ldrh	r3, [r3, #12]
  123b9c:	e6ff3073 	uxth	r3, r3
  123ba0:	e1a00003 	mov	r0, r3
  123ba4:	ebffca86 	bl	1165c4 <lwip_htons>
  123ba8:	e1a03000 	mov	r3, r0
  123bac:	e2033003 	and	r3, r3, #3
  123bb0:	e3530000 	cmp	r3, #0
  123bb4:	0a000001 	beq	123bc0 <tcp_receive+0x14d4>
  123bb8:	e3a03001 	mov	r3, #1
  123bbc:	ea000000 	b	123bc4 <tcp_receive+0x14d8>
  123bc0:	e3a03000 	mov	r3, #0
  123bc4:	e0832004 	add	r2, r3, r4
  123bc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bcc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123bd0:	e0822003 	add	r2, r2, r3
  123bd4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bd8:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123bdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123be0:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123be4:	e1a04003 	mov	r4, r3
  123be8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bec:	e1d330b8 	ldrh	r3, [r3, #8]
  123bf0:	e1a05003 	mov	r5, r3
  123bf4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bf8:	e593300c 	ldr	r3, [r3, #12]
  123bfc:	e1d330bc 	ldrh	r3, [r3, #12]
  123c00:	e6ff3073 	uxth	r3, r3
  123c04:	e1a00003 	mov	r0, r3
  123c08:	ebffca6d 	bl	1165c4 <lwip_htons>
  123c0c:	e1a03000 	mov	r3, r0
  123c10:	e2033003 	and	r3, r3, #3
  123c14:	e3530000 	cmp	r3, #0
  123c18:	0a000001 	beq	123c24 <tcp_receive+0x1538>
  123c1c:	e3a03001 	mov	r3, #1
  123c20:	ea000000 	b	123c28 <tcp_receive+0x153c>
  123c24:	e3a03000 	mov	r3, #0
  123c28:	e0833005 	add	r3, r3, r5
  123c2c:	e1540003 	cmp	r4, r3
  123c30:	2a000006 	bcs	123c50 <tcp_receive+0x1564>
  123c34:	e30805c8 	movw	r0, #34248	; 0x85c8
  123c38:	e3400014 	movt	r0, #20
  123c3c:	ebff7d34 	bl	103114 <rt_kprintf>
  123c40:	e30015cb 	movw	r1, #1483	; 0x5cb
  123c44:	e30802a4 	movw	r0, #33444	; 0x82a4
  123c48:	e3400014 	movt	r0, #20
  123c4c:	ebff9d23 	bl	10b0e0 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  123c50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c54:	e1d330b8 	ldrh	r3, [r3, #8]
  123c58:	e1a04003 	mov	r4, r3
  123c5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c60:	e593300c 	ldr	r3, [r3, #12]
  123c64:	e1d330bc 	ldrh	r3, [r3, #12]
  123c68:	e6ff3073 	uxth	r3, r3
  123c6c:	e1a00003 	mov	r0, r3
  123c70:	ebffca53 	bl	1165c4 <lwip_htons>
  123c74:	e1a03000 	mov	r3, r0
  123c78:	e2033003 	and	r3, r3, #3
  123c7c:	e3530000 	cmp	r3, #0
  123c80:	0a000001 	beq	123c8c <tcp_receive+0x15a0>
  123c84:	e3a03001 	mov	r3, #1
  123c88:	ea000000 	b	123c90 <tcp_receive+0x15a4>
  123c8c:	e3a03000 	mov	r3, #0
  123c90:	e0831004 	add	r1, r3, r4
  123c94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c98:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123c9c:	e6ff3071 	uxth	r3, r1
  123ca0:	e0423003 	sub	r3, r2, r3
  123ca4:	e6ff2073 	uxth	r2, r3
  123ca8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123cac:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123cb0:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123cb4:	ebffe8be 	bl	11dfb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123cb8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cbc:	e5933004 	ldr	r3, [r3, #4]
  123cc0:	e1d330b8 	ldrh	r3, [r3, #8]
  123cc4:	e3530000 	cmp	r3, #0
  123cc8:	0a000015 	beq	123d24 <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123ccc:	e30e327c 	movw	r3, #57980	; 0xe27c
  123cd0:	e3403014 	movt	r3, #20
  123cd4:	e5933000 	ldr	r3, [r3]
  123cd8:	e3530000 	cmp	r3, #0
  123cdc:	0a000008 	beq	123d04 <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123ce0:	e30e327c 	movw	r3, #57980	; 0xe27c
  123ce4:	e3403014 	movt	r3, #20
  123ce8:	e5932000 	ldr	r2, [r3]
  123cec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cf0:	e5933004 	ldr	r3, [r3, #4]
  123cf4:	e1a01003 	mov	r1, r3
  123cf8:	e1a00002 	mov	r0, r2
  123cfc:	ebffdd1e 	bl	11b17c <pbuf_cat>
  123d00:	ea000004 	b	123d18 <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  123d04:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d08:	e5932004 	ldr	r2, [r3, #4]
  123d0c:	e30e327c 	movw	r3, #57980	; 0xe27c
  123d10:	e3403014 	movt	r3, #20
  123d14:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  123d18:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d1c:	e3a02000 	mov	r2, #0
  123d20:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  123d24:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d28:	e593300c 	ldr	r3, [r3, #12]
  123d2c:	e1d330bc 	ldrh	r3, [r3, #12]
  123d30:	e6ff3073 	uxth	r3, r3
  123d34:	e1a00003 	mov	r0, r3
  123d38:	ebffca21 	bl	1165c4 <lwip_htons>
  123d3c:	e1a03000 	mov	r3, r0
  123d40:	e2033001 	and	r3, r3, #1
  123d44:	e3530000 	cmp	r3, #0
  123d48:	0a00000e 	beq	123d88 <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  123d4c:	e30e3279 	movw	r3, #57977	; 0xe279
  123d50:	e3403014 	movt	r3, #20
  123d54:	e5d33000 	ldrb	r3, [r3]
  123d58:	e3833020 	orr	r3, r3, #32
  123d5c:	e6ef2073 	uxtb	r2, r3
  123d60:	e30e3279 	movw	r3, #57977	; 0xe279
  123d64:	e3403014 	movt	r3, #20
  123d68:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123d6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d70:	e5933014 	ldr	r3, [r3, #20]
  123d74:	e3530004 	cmp	r3, #4
  123d78:	1a000002 	bne	123d88 <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123d7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d80:	e3a02007 	mov	r2, #7
  123d84:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123d88:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d8c:	e5932000 	ldr	r2, [r3]
  123d90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d94:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123d98:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123d9c:	ebffedb3 	bl	11f470 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123da0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123da4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123da8:	e3530000 	cmp	r3, #0
  123dac:	0a000007 	beq	123dd0 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123db0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123db4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123db8:	e593300c 	ldr	r3, [r3, #12]
  123dbc:	e5932004 	ldr	r2, [r3, #4]
  123dc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dc4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123dc8:	e1520003 	cmp	r2, r3
  123dcc:	0affff62 	beq	123b5c <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123dd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dd4:	e5d3301e 	ldrb	r3, [r3, #30]
  123dd8:	e2033001 	and	r3, r3, #1
  123ddc:	e3530000 	cmp	r3, #0
  123de0:	0a00000c 	beq	123e18 <tcp_receive+0x172c>
  123de4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123de8:	e5d3301e 	ldrb	r3, [r3, #30]
  123dec:	e3c33001 	bic	r3, r3, #1
  123df0:	e6ef2073 	uxtb	r2, r3
  123df4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123df8:	e5c3201e 	strb	r2, [r3, #30]
  123dfc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e00:	e5d3301e 	ldrb	r3, [r3, #30]
  123e04:	e3833002 	orr	r3, r3, #2
  123e08:	e6ef2073 	uxtb	r2, r3
  123e0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e10:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123e14:	ea00016c 	b	1243cc <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123e18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e1c:	e5d3301e 	ldrb	r3, [r3, #30]
  123e20:	e3833001 	orr	r3, r3, #1
  123e24:	e6ef2073 	uxtb	r2, r3
  123e28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e2c:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123e30:	ea000165 	b	1243cc <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123e34:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123e38:	eb0007e2 	bl	125dc8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123e3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e40:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e44:	e3530000 	cmp	r3, #0
  123e48:	1a000006 	bne	123e68 <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123e4c:	e30e024c 	movw	r0, #57932	; 0xe24c
  123e50:	e3400014 	movt	r0, #20
  123e54:	ebffeda7 	bl	11f4f8 <tcp_seg_copy>
  123e58:	e1a02000 	mov	r2, r0
  123e5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e60:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123e64:	ea000158 	b	1243cc <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123e68:	e3a03000 	mov	r3, #0
  123e6c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123e70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e74:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123e7c:	ea00013f 	b	124380 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123e80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e84:	e593300c 	ldr	r3, [r3, #12]
  123e88:	e5932004 	ldr	r2, [r3, #4]
  123e8c:	e30e326c 	movw	r3, #57964	; 0xe26c
  123e90:	e3403014 	movt	r3, #20
  123e94:	e5933000 	ldr	r3, [r3]
  123e98:	e1520003 	cmp	r2, r3
  123e9c:	1a00001b 	bne	123f10 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123ea0:	e30e324c 	movw	r3, #57932	; 0xe24c
  123ea4:	e3403014 	movt	r3, #20
  123ea8:	e1d320b8 	ldrh	r2, [r3, #8]
  123eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123eb0:	e1d330b8 	ldrh	r3, [r3, #8]
  123eb4:	e1520003 	cmp	r2, r3
  123eb8:	9a000134 	bls	124390 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123ebc:	e30e024c 	movw	r0, #57932	; 0xe24c
  123ec0:	e3400014 	movt	r0, #20
  123ec4:	ebffed8b 	bl	11f4f8 <tcp_seg_copy>
  123ec8:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123ecc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ed0:	e3530000 	cmp	r3, #0
  123ed4:	0a00012f 	beq	124398 <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123ed8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123edc:	e3530000 	cmp	r3, #0
  123ee0:	0a000003 	beq	123ef4 <tcp_receive+0x1808>
                    prev->next = cseg;
  123ee4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ee8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123eec:	e5832000 	str	r2, [r3]
  123ef0:	ea000002 	b	123f00 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123ef4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ef8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123efc:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123f00:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123f04:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f08:	ebfff989 	bl	122534 <tcp_oos_insert_segment>
                }
                break;
  123f0c:	ea000121 	b	124398 <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123f10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123f14:	e3530000 	cmp	r3, #0
  123f18:	1a000016 	bne	123f78 <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123f1c:	e30e326c 	movw	r3, #57964	; 0xe26c
  123f20:	e3403014 	movt	r3, #20
  123f24:	e5932000 	ldr	r2, [r3]
  123f28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f2c:	e593300c 	ldr	r3, [r3, #12]
  123f30:	e5933004 	ldr	r3, [r3, #4]
  123f34:	e0423003 	sub	r3, r2, r3
  123f38:	e3530000 	cmp	r3, #0
  123f3c:	aa00004e 	bge	12407c <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123f40:	e30e024c 	movw	r0, #57932	; 0xe24c
  123f44:	e3400014 	movt	r0, #20
  123f48:	ebffed6a 	bl	11f4f8 <tcp_seg_copy>
  123f4c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123f50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f54:	e3530000 	cmp	r3, #0
  123f58:	0a000110 	beq	1243a0 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123f5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f60:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123f64:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123f68:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123f6c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f70:	ebfff96f 	bl	122534 <tcp_oos_insert_segment>
                  }
                  break;
  123f74:	ea000109 	b	1243a0 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123f78:	e30e326c 	movw	r3, #57964	; 0xe26c
  123f7c:	e3403014 	movt	r3, #20
  123f80:	e5932000 	ldr	r2, [r3]
  123f84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123f88:	e593300c 	ldr	r3, [r3, #12]
  123f8c:	e5933004 	ldr	r3, [r3, #4]
  123f90:	e0423003 	sub	r3, r2, r3
  123f94:	e2433001 	sub	r3, r3, #1
  123f98:	e3530000 	cmp	r3, #0
  123f9c:	ba000036 	blt	12407c <tcp_receive+0x1990>
  123fa0:	e30e326c 	movw	r3, #57964	; 0xe26c
  123fa4:	e3403014 	movt	r3, #20
  123fa8:	e5932000 	ldr	r2, [r3]
  123fac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fb0:	e593300c 	ldr	r3, [r3, #12]
  123fb4:	e5933004 	ldr	r3, [r3, #4]
  123fb8:	e0423003 	sub	r3, r2, r3
  123fbc:	e2833001 	add	r3, r3, #1
  123fc0:	e3530000 	cmp	r3, #0
  123fc4:	ca00002c 	bgt	12407c <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123fc8:	e30e024c 	movw	r0, #57932	; 0xe24c
  123fcc:	e3400014 	movt	r0, #20
  123fd0:	ebffed48 	bl	11f4f8 <tcp_seg_copy>
  123fd4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123fd8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123fdc:	e3530000 	cmp	r3, #0
  123fe0:	0a0000f0 	beq	1243a8 <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123fe4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123fe8:	e593300c 	ldr	r3, [r3, #12]
  123fec:	e5933004 	ldr	r3, [r3, #4]
  123ff0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  123ff4:	e1d220b8 	ldrh	r2, [r2, #8]
  123ff8:	e0832002 	add	r2, r3, r2
  123ffc:	e30e326c 	movw	r3, #57964	; 0xe26c
  124000:	e3403014 	movt	r3, #20
  124004:	e5933000 	ldr	r3, [r3]
  124008:	e0423003 	sub	r3, r2, r3
  12400c:	e3530000 	cmp	r3, #0
  124010:	da000012 	ble	124060 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  124014:	e30e326c 	movw	r3, #57964	; 0xe26c
  124018:	e3403014 	movt	r3, #20
  12401c:	e5933000 	ldr	r3, [r3]
  124020:	e6ff2073 	uxth	r2, r3
  124024:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124028:	e593300c 	ldr	r3, [r3, #12]
  12402c:	e5933004 	ldr	r3, [r3, #4]
  124030:	e6ff3073 	uxth	r3, r3
  124034:	e0423003 	sub	r3, r2, r3
  124038:	e6ff2073 	uxth	r2, r3
  12403c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124040:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  124044:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124048:	e5932004 	ldr	r2, [r3, #4]
  12404c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124050:	e1d330b8 	ldrh	r3, [r3, #8]
  124054:	e1a01003 	mov	r1, r3
  124058:	e1a00002 	mov	r0, r2
  12405c:	ebffda46 	bl	11a97c <pbuf_realloc>
                    }
                    prev->next = cseg;
  124060:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124064:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  124068:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  12406c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  124070:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  124074:	ebfff92e 	bl	122534 <tcp_oos_insert_segment>
                  }
                  break;
  124078:	ea0000ca 	b	1243a8 <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  12407c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124080:	e5933000 	ldr	r3, [r3]
  124084:	e3530000 	cmp	r3, #0
  124088:	1a0000b7 	bne	12436c <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  12408c:	e30e326c 	movw	r3, #57964	; 0xe26c
  124090:	e3403014 	movt	r3, #20
  124094:	e5932000 	ldr	r2, [r3]
  124098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12409c:	e593300c 	ldr	r3, [r3, #12]
  1240a0:	e5933004 	ldr	r3, [r3, #4]
  1240a4:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  1240a8:	e3530000 	cmp	r3, #0
  1240ac:	da0000ae 	ble	12436c <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  1240b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240b4:	e593300c 	ldr	r3, [r3, #12]
  1240b8:	e1d330bc 	ldrh	r3, [r3, #12]
  1240bc:	e6ff3073 	uxth	r3, r3
  1240c0:	e1a00003 	mov	r0, r3
  1240c4:	ebffc93e 	bl	1165c4 <lwip_htons>
  1240c8:	e1a03000 	mov	r3, r0
  1240cc:	e2033001 	and	r3, r3, #1
  1240d0:	e3530000 	cmp	r3, #0
  1240d4:	1a0000b5 	bne	1243b0 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  1240d8:	e30e024c 	movw	r0, #57932	; 0xe24c
  1240dc:	e3400014 	movt	r0, #20
  1240e0:	ebffed04 	bl	11f4f8 <tcp_seg_copy>
  1240e4:	e1a02000 	mov	r2, r0
  1240e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240ec:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  1240f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240f4:	e5933000 	ldr	r3, [r3]
  1240f8:	e3530000 	cmp	r3, #0
  1240fc:	0a0000ad 	beq	1243b8 <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  124100:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124104:	e593300c 	ldr	r3, [r3, #12]
  124108:	e5933004 	ldr	r3, [r3, #4]
  12410c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  124110:	e1d220b8 	ldrh	r2, [r2, #8]
  124114:	e0832002 	add	r2, r3, r2
  124118:	e30e326c 	movw	r3, #57964	; 0xe26c
  12411c:	e3403014 	movt	r3, #20
  124120:	e5933000 	ldr	r3, [r3]
  124124:	e0423003 	sub	r3, r2, r3
  124128:	e3530000 	cmp	r3, #0
  12412c:	da000012 	ble	12417c <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  124130:	e30e326c 	movw	r3, #57964	; 0xe26c
  124134:	e3403014 	movt	r3, #20
  124138:	e5933000 	ldr	r3, [r3]
  12413c:	e6ff2073 	uxth	r2, r3
  124140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124144:	e593300c 	ldr	r3, [r3, #12]
  124148:	e5933004 	ldr	r3, [r3, #4]
  12414c:	e6ff3073 	uxth	r3, r3
  124150:	e0423003 	sub	r3, r2, r3
  124154:	e6ff2073 	uxth	r2, r3
  124158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12415c:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  124160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124164:	e5932004 	ldr	r2, [r3, #4]
  124168:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12416c:	e1d330b8 	ldrh	r3, [r3, #8]
  124170:	e1a01003 	mov	r1, r3
  124174:	e1a00002 	mov	r0, r2
  124178:	ebffd9ff 	bl	11a97c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  12417c:	e30e3276 	movw	r3, #57974	; 0xe276
  124180:	e3403014 	movt	r3, #20
  124184:	e1d330b0 	ldrh	r3, [r3]
  124188:	e1a02003 	mov	r2, r3
  12418c:	e30e326c 	movw	r3, #57964	; 0xe26c
  124190:	e3403014 	movt	r3, #20
  124194:	e5933000 	ldr	r3, [r3]
  124198:	e0822003 	add	r2, r2, r3
  12419c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1241a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1241a4:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1241a8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1241ac:	e0833001 	add	r3, r3, r1
  1241b0:	e0423003 	sub	r3, r2, r3
  1241b4:	e3530000 	cmp	r3, #0
  1241b8:	da00007e 	ble	1243b8 <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  1241bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241c0:	e5933000 	ldr	r3, [r3]
  1241c4:	e593300c 	ldr	r3, [r3, #12]
  1241c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1241cc:	e6ff3073 	uxth	r3, r3
  1241d0:	e1a00003 	mov	r0, r3
  1241d4:	ebffc8fa 	bl	1165c4 <lwip_htons>
  1241d8:	e1a03000 	mov	r3, r0
  1241dc:	e2033001 	and	r3, r3, #1
  1241e0:	e3530000 	cmp	r3, #0
  1241e4:	0a00001a 	beq	124254 <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  1241e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241ec:	e5933000 	ldr	r3, [r3]
  1241f0:	e593300c 	ldr	r3, [r3, #12]
  1241f4:	e1d330bc 	ldrh	r3, [r3, #12]
  1241f8:	e6ff3073 	uxth	r3, r3
  1241fc:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  124200:	e6ff4073 	uxth	r4, r3
  124204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124208:	e5933000 	ldr	r3, [r3]
  12420c:	e593300c 	ldr	r3, [r3, #12]
  124210:	e1d330bc 	ldrh	r3, [r3, #12]
  124214:	e6ff3073 	uxth	r3, r3
  124218:	e1a00003 	mov	r0, r3
  12421c:	ebffc8e8 	bl	1165c4 <lwip_htons>
  124220:	e1a03000 	mov	r3, r0
  124224:	e203303e 	and	r3, r3, #62	; 0x3e
  124228:	e6ff3073 	uxth	r3, r3
  12422c:	e1a00003 	mov	r0, r3
  124230:	ebffc8e3 	bl	1165c4 <lwip_htons>
  124234:	e1a03000 	mov	r3, r0
  124238:	e1a02003 	mov	r2, r3
  12423c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124240:	e5933000 	ldr	r3, [r3]
  124244:	e593300c 	ldr	r3, [r3, #12]
  124248:	e1842002 	orr	r2, r4, r2
  12424c:	e6ff2072 	uxth	r2, r2
  124250:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  124254:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124258:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12425c:	e6ff2073 	uxth	r2, r3
  124260:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124264:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  124268:	e0823003 	add	r3, r2, r3
  12426c:	e6ff1073 	uxth	r1, r3
  124270:	e30e326c 	movw	r3, #57964	; 0xe26c
  124274:	e3403014 	movt	r3, #20
  124278:	e5933000 	ldr	r3, [r3]
  12427c:	e6ff2073 	uxth	r2, r3
  124280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124284:	e5933000 	ldr	r3, [r3]
  124288:	e0412002 	sub	r2, r1, r2
  12428c:	e6ff2072 	uxth	r2, r2
  124290:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  124294:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124298:	e5933000 	ldr	r3, [r3]
  12429c:	e5932004 	ldr	r2, [r3, #4]
  1242a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242a4:	e5933000 	ldr	r3, [r3]
  1242a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1242ac:	e1a01003 	mov	r1, r3
  1242b0:	e1a00002 	mov	r0, r2
  1242b4:	ebffd9b0 	bl	11a97c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  1242b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242bc:	e5933000 	ldr	r3, [r3]
  1242c0:	e1d340b8 	ldrh	r4, [r3, #8]
  1242c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242c8:	e5933000 	ldr	r3, [r3]
  1242cc:	e593300c 	ldr	r3, [r3, #12]
  1242d0:	e1d330bc 	ldrh	r3, [r3, #12]
  1242d4:	e6ff3073 	uxth	r3, r3
  1242d8:	e1a00003 	mov	r0, r3
  1242dc:	ebffc8b8 	bl	1165c4 <lwip_htons>
  1242e0:	e1a03000 	mov	r3, r0
  1242e4:	e2033003 	and	r3, r3, #3
  1242e8:	e3530000 	cmp	r3, #0
  1242ec:	0a000001 	beq	1242f8 <tcp_receive+0x1c0c>
  1242f0:	e3a03001 	mov	r3, #1
  1242f4:	ea000000 	b	1242fc <tcp_receive+0x1c10>
  1242f8:	e3a03000 	mov	r3, #0
  1242fc:	e0833004 	add	r3, r3, r4
  124300:	e6ff2073 	uxth	r2, r3
  124304:	e30e3276 	movw	r3, #57974	; 0xe276
  124308:	e3403014 	movt	r3, #20
  12430c:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  124310:	e30e3276 	movw	r3, #57974	; 0xe276
  124314:	e3403014 	movt	r3, #20
  124318:	e1d330b0 	ldrh	r3, [r3]
  12431c:	e1a02003 	mov	r2, r3
  124320:	e30e326c 	movw	r3, #57964	; 0xe26c
  124324:	e3403014 	movt	r3, #20
  124328:	e5933000 	ldr	r3, [r3]
  12432c:	e0822003 	add	r2, r2, r3
  124330:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124334:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124338:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  12433c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124340:	e0833001 	add	r3, r3, r1
  124344:	e1520003 	cmp	r2, r3
  124348:	0a00001a 	beq	1243b8 <tcp_receive+0x1ccc>
  12434c:	e3080534 	movw	r0, #34100	; 0x8534
  124350:	e3400014 	movt	r0, #20
  124354:	ebff7b6e 	bl	103114 <rt_kprintf>
  124358:	e3001668 	movw	r1, #1640	; 0x668
  12435c:	e30802a4 	movw	r0, #33444	; 0x82a4
  124360:	e3400014 	movt	r0, #20
  124364:	ebff9b5d 	bl	10b0e0 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  124368:	ea000012 	b	1243b8 <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  12436c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124370:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  124374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124378:	e5933000 	ldr	r3, [r3]
  12437c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124384:	e3530000 	cmp	r3, #0
  124388:	1afffebc 	bne	123e80 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  12438c:	ea00000e 	b	1243cc <tcp_receive+0x1ce0>
                break;
  124390:	e320f000 	nop	{0}
  124394:	ea00000c 	b	1243cc <tcp_receive+0x1ce0>
                break;
  124398:	e320f000 	nop	{0}
  12439c:	ea00000a 	b	1243cc <tcp_receive+0x1ce0>
                  break;
  1243a0:	e320f000 	nop	{0}
  1243a4:	ea000008 	b	1243cc <tcp_receive+0x1ce0>
                  break;
  1243a8:	e320f000 	nop	{0}
  1243ac:	ea000006 	b	1243cc <tcp_receive+0x1ce0>
                  break;
  1243b0:	e320f000 	nop	{0}
  1243b4:	ea000004 	b	1243cc <tcp_receive+0x1ce0>
                break;
  1243b8:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  1243bc:	ea000002 	b	1243cc <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  1243c0:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1243c4:	eb00067f 	bl	125dc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1243c8:	ea00001b 	b	12443c <tcp_receive+0x1d50>
  1243cc:	ea00001a 	b	12443c <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  1243d0:	e30e326c 	movw	r3, #57964	; 0xe26c
  1243d4:	e3403014 	movt	r3, #20
  1243d8:	e5932000 	ldr	r2, [r3]
  1243dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1243e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1243e4:	e0423003 	sub	r3, r2, r3
  1243e8:	e3530000 	cmp	r3, #0
  1243ec:	ba00000b 	blt	124420 <tcp_receive+0x1d34>
  1243f0:	e30e326c 	movw	r3, #57964	; 0xe26c
  1243f4:	e3403014 	movt	r3, #20
  1243f8:	e5932000 	ldr	r2, [r3]
  1243fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124400:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124404:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124408:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12440c:	e0833001 	add	r3, r3, r1
  124410:	e0423003 	sub	r3, r2, r3
  124414:	e2833001 	add	r3, r3, #1
  124418:	e3530000 	cmp	r3, #0
  12441c:	da000006 	ble	12443c <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  124420:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124424:	e5d3301e 	ldrb	r3, [r3, #30]
  124428:	e3833002 	orr	r3, r3, #2
  12442c:	e6ef2073 	uxtb	r2, r3
  124430:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124434:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  124438:	eaffffff 	b	12443c <tcp_receive+0x1d50>
  12443c:	e320f000 	nop	{0}
  124440:	e24bd010 	sub	sp, fp, #16
  124444:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

00124448 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  124448:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12444c:	e28db000 	add	fp, sp, #0
  124450:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  124454:	e30e3264 	movw	r3, #57956	; 0xe264
  124458:	e3403014 	movt	r3, #20
  12445c:	e5933000 	ldr	r3, [r3]
  124460:	e3530000 	cmp	r3, #0
  124464:	0a000007 	beq	124488 <tcp_getoptbyte+0x40>
  124468:	e30e3268 	movw	r3, #57960	; 0xe268
  12446c:	e3403014 	movt	r3, #20
  124470:	e1d320b0 	ldrh	r2, [r3]
  124474:	e30e3262 	movw	r3, #57954	; 0xe262
  124478:	e3403014 	movt	r3, #20
  12447c:	e1d330b0 	ldrh	r3, [r3]
  124480:	e1520003 	cmp	r2, r3
  124484:	2a000010 	bcs	1244cc <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  124488:	e30e325c 	movw	r3, #57948	; 0xe25c
  12448c:	e3403014 	movt	r3, #20
  124490:	e5933000 	ldr	r3, [r3]
  124494:	e2833014 	add	r3, r3, #20
  124498:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  12449c:	e30e3268 	movw	r3, #57960	; 0xe268
  1244a0:	e3403014 	movt	r3, #20
  1244a4:	e1d320b0 	ldrh	r2, [r3]
  1244a8:	e2823001 	add	r3, r2, #1
  1244ac:	e6ff1073 	uxth	r1, r3
  1244b0:	e30e3268 	movw	r3, #57960	; 0xe268
  1244b4:	e3403014 	movt	r3, #20
  1244b8:	e1c310b0 	strh	r1, [r3]
  1244bc:	e51b300c 	ldr	r3, [fp, #-12]
  1244c0:	e0833002 	add	r3, r3, r2
  1244c4:	e5d33000 	ldrb	r3, [r3]
  1244c8:	ea000014 	b	124520 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  1244cc:	e30e3268 	movw	r3, #57960	; 0xe268
  1244d0:	e3403014 	movt	r3, #20
  1244d4:	e1d320b0 	ldrh	r2, [r3]
  1244d8:	e2823001 	add	r3, r2, #1
  1244dc:	e6ff1073 	uxth	r1, r3
  1244e0:	e30e3268 	movw	r3, #57960	; 0xe268
  1244e4:	e3403014 	movt	r3, #20
  1244e8:	e1c310b0 	strh	r1, [r3]
  1244ec:	e6ef2072 	uxtb	r2, r2
  1244f0:	e30e3262 	movw	r3, #57954	; 0xe262
  1244f4:	e3403014 	movt	r3, #20
  1244f8:	e1d330b0 	ldrh	r3, [r3]
  1244fc:	e6ef3073 	uxtb	r3, r3
  124500:	e0423003 	sub	r3, r2, r3
  124504:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  124508:	e30e3264 	movw	r3, #57956	; 0xe264
  12450c:	e3403014 	movt	r3, #20
  124510:	e5932000 	ldr	r2, [r3]
  124514:	e55b3005 	ldrb	r3, [fp, #-5]
  124518:	e0823003 	add	r3, r2, r3
  12451c:	e5d33000 	ldrb	r3, [r3]
  }
}
  124520:	e1a00003 	mov	r0, r3
  124524:	e28bd000 	add	sp, fp, #0
  124528:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12452c:	e12fff1e 	bx	lr

00124530 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124530:	e92d4800 	push	{fp, lr}
  124534:	e28db004 	add	fp, sp, #4
  124538:	e24dd010 	sub	sp, sp, #16
  12453c:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  124540:	e30e3260 	movw	r3, #57952	; 0xe260
  124544:	e3403014 	movt	r3, #20
  124548:	e1d330b0 	ldrh	r3, [r3]
  12454c:	e3530000 	cmp	r3, #0
  124550:	0a000054 	beq	1246a8 <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124554:	e30e3268 	movw	r3, #57960	; 0xe268
  124558:	e3403014 	movt	r3, #20
  12455c:	e3a02000 	mov	r2, #0
  124560:	e1c320b0 	strh	r2, [r3]
  124564:	ea000041 	b	124670 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  124568:	ebffffb6 	bl	124448 <tcp_getoptbyte>
  12456c:	e1a03000 	mov	r3, r0
  124570:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  124574:	e55b3005 	ldrb	r3, [fp, #-5]
  124578:	e3530001 	cmp	r3, #1
  12457c:	0a00003b 	beq	124670 <tcp_parseopt+0x140>
  124580:	e3530002 	cmp	r3, #2
  124584:	0a000002 	beq	124594 <tcp_parseopt+0x64>
  124588:	e3530000 	cmp	r3, #0
  12458c:	0a000040 	beq	124694 <tcp_parseopt+0x164>
  124590:	ea000024 	b	124628 <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  124594:	ebffffab 	bl	124448 <tcp_getoptbyte>
  124598:	e1a03000 	mov	r3, r0
  12459c:	e3530004 	cmp	r3, #4
  1245a0:	1a00003d 	bne	12469c <tcp_parseopt+0x16c>
  1245a4:	e30e3268 	movw	r3, #57960	; 0xe268
  1245a8:	e3403014 	movt	r3, #20
  1245ac:	e1d330b0 	ldrh	r3, [r3]
  1245b0:	e2832002 	add	r2, r3, #2
  1245b4:	e30e3260 	movw	r3, #57952	; 0xe260
  1245b8:	e3403014 	movt	r3, #20
  1245bc:	e1d330b0 	ldrh	r3, [r3]
  1245c0:	e1520003 	cmp	r2, r3
  1245c4:	ca000034 	bgt	12469c <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  1245c8:	ebffff9e 	bl	124448 <tcp_getoptbyte>
  1245cc:	e1a03000 	mov	r3, r0
  1245d0:	e6ff3073 	uxth	r3, r3
  1245d4:	e1a03403 	lsl	r3, r3, #8
  1245d8:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  1245dc:	ebffff99 	bl	124448 <tcp_getoptbyte>
  1245e0:	e1a03000 	mov	r3, r0
  1245e4:	e6ff2073 	uxth	r2, r3
  1245e8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1245ec:	e1823003 	orr	r3, r2, r3
  1245f0:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  1245f4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1245f8:	e30025b4 	movw	r2, #1460	; 0x5b4
  1245fc:	e1530002 	cmp	r3, r2
  124600:	8a000004 	bhi	124618 <tcp_parseopt+0xe8>
  124604:	e15b30b8 	ldrh	r3, [fp, #-8]
  124608:	e3530000 	cmp	r3, #0
  12460c:	0a000001 	beq	124618 <tcp_parseopt+0xe8>
  124610:	e15b30b8 	ldrh	r3, [fp, #-8]
  124614:	ea000000 	b	12461c <tcp_parseopt+0xec>
  124618:	e30035b4 	movw	r3, #1460	; 0x5b4
  12461c:	e51b2010 	ldr	r2, [fp, #-16]
  124620:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  124624:	ea000011 	b	124670 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  124628:	ebffff86 	bl	124448 <tcp_getoptbyte>
  12462c:	e1a03000 	mov	r3, r0
  124630:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  124634:	e55b3009 	ldrb	r3, [fp, #-9]
  124638:	e3530001 	cmp	r3, #1
  12463c:	9a000018 	bls	1246a4 <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  124640:	e55b3009 	ldrb	r3, [fp, #-9]
  124644:	e6ff2073 	uxth	r2, r3
  124648:	e30e3268 	movw	r3, #57960	; 0xe268
  12464c:	e3403014 	movt	r3, #20
  124650:	e1d330b0 	ldrh	r3, [r3]
  124654:	e0823003 	add	r3, r2, r3
  124658:	e6ff3073 	uxth	r3, r3
  12465c:	e2433002 	sub	r3, r3, #2
  124660:	e6ff2073 	uxth	r2, r3
  124664:	e30e3268 	movw	r3, #57960	; 0xe268
  124668:	e3403014 	movt	r3, #20
  12466c:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124670:	e30e3268 	movw	r3, #57960	; 0xe268
  124674:	e3403014 	movt	r3, #20
  124678:	e1d320b0 	ldrh	r2, [r3]
  12467c:	e30e3260 	movw	r3, #57952	; 0xe260
  124680:	e3403014 	movt	r3, #20
  124684:	e1d330b0 	ldrh	r3, [r3]
  124688:	e1520003 	cmp	r2, r3
  12468c:	3affffb5 	bcc	124568 <tcp_parseopt+0x38>
  124690:	ea000004 	b	1246a8 <tcp_parseopt+0x178>
        return;
  124694:	e320f000 	nop	{0}
  124698:	ea000002 	b	1246a8 <tcp_parseopt+0x178>
          return;
  12469c:	e320f000 	nop	{0}
  1246a0:	ea000000 	b	1246a8 <tcp_parseopt+0x178>
          return;
  1246a4:	e320f000 	nop	{0}
      }
    }
  }
}
  1246a8:	e24bd004 	sub	sp, fp, #4
  1246ac:	e8bd8800 	pop	{fp, pc}

001246b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  1246b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1246b4:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  1246b8:	e30e3279 	movw	r3, #57977	; 0xe279
  1246bc:	e3403014 	movt	r3, #20
  1246c0:	e5d33000 	ldrb	r3, [r3]
  1246c4:	e3833010 	orr	r3, r3, #16
  1246c8:	e6ef2073 	uxtb	r2, r3
  1246cc:	e30e3279 	movw	r3, #57977	; 0xe279
  1246d0:	e3403014 	movt	r3, #20
  1246d4:	e5c32000 	strb	r2, [r3]
}
  1246d8:	e320f000 	nop	{0}
  1246dc:	e28bd000 	add	sp, fp, #0
  1246e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1246e4:	e12fff1e 	bx	lr

001246e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  1246e8:	e92d4800 	push	{fp, lr}
  1246ec:	e28db004 	add	fp, sp, #4
  1246f0:	e24dd018 	sub	sp, sp, #24
  1246f4:	e50b0010 	str	r0, [fp, #-16]
  1246f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1246fc:	e1a03001 	mov	r3, r1
  124700:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124704:	e1a03002 	mov	r3, r2
  124708:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  12470c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124710:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124714:	e0823003 	add	r3, r2, r3
  124718:	e6ff3073 	uxth	r3, r3
  12471c:	e2833014 	add	r3, r3, #20
  124720:	e6ff3073 	uxth	r3, r3
  124724:	e3a02000 	mov	r2, #0
  124728:	e1a01003 	mov	r1, r3
  12472c:	e3a00001 	mov	r0, #1
  124730:	ebffd6d3 	bl	11a284 <pbuf_alloc>
  124734:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  124738:	e51b3008 	ldr	r3, [fp, #-8]
  12473c:	e3530000 	cmp	r3, #0
  124740:	0a000052 	beq	124890 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  124744:	e51b3008 	ldr	r3, [fp, #-8]
  124748:	e1d330ba 	ldrh	r3, [r3, #10]
  12474c:	e1a02003 	mov	r2, r3
  124750:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124754:	e2833014 	add	r3, r3, #20
  124758:	e1520003 	cmp	r2, r3
  12475c:	aa000006 	bge	12477c <tcp_output_alloc_header+0x94>
  124760:	e30805f0 	movw	r0, #34288	; 0x85f0
  124764:	e3400014 	movt	r0, #20
  124768:	ebff7a69 	bl	103114 <rt_kprintf>
  12476c:	e3a01073 	mov	r1, #115	; 0x73
  124770:	e3080620 	movw	r0, #34336	; 0x8620
  124774:	e3400014 	movt	r0, #20
  124778:	ebff9a58 	bl	10b0e0 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  12477c:	e51b3008 	ldr	r3, [fp, #-8]
  124780:	e5933004 	ldr	r3, [r3, #4]
  124784:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  124788:	e51b3010 	ldr	r3, [fp, #-16]
  12478c:	e1d331ba 	ldrh	r3, [r3, #26]
  124790:	e1a00003 	mov	r0, r3
  124794:	ebffc78a 	bl	1165c4 <lwip_htons>
  124798:	e1a03000 	mov	r3, r0
  12479c:	e1a02003 	mov	r2, r3
  1247a0:	e51b300c 	ldr	r3, [fp, #-12]
  1247a4:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  1247a8:	e51b3010 	ldr	r3, [fp, #-16]
  1247ac:	e1d331bc 	ldrh	r3, [r3, #28]
  1247b0:	e1a00003 	mov	r0, r3
  1247b4:	ebffc782 	bl	1165c4 <lwip_htons>
  1247b8:	e1a03000 	mov	r3, r0
  1247bc:	e1a02003 	mov	r2, r3
  1247c0:	e51b300c 	ldr	r3, [fp, #-12]
  1247c4:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  1247c8:	e51b300c 	ldr	r3, [fp, #-12]
  1247cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1247d0:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1247d4:	e51b3010 	ldr	r3, [fp, #-16]
  1247d8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1247dc:	e1a00003 	mov	r0, r3
  1247e0:	ebffc783 	bl	1165f4 <lwip_htonl>
  1247e4:	e1a02000 	mov	r2, r0
  1247e8:	e51b300c 	ldr	r3, [fp, #-12]
  1247ec:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  1247f0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1247f4:	e1a03123 	lsr	r3, r3, #2
  1247f8:	e6ff3073 	uxth	r3, r3
  1247fc:	e2833005 	add	r3, r3, #5
  124800:	e6ff3073 	uxth	r3, r3
  124804:	e1a03603 	lsl	r3, r3, #12
  124808:	e6ff3073 	uxth	r3, r3
  12480c:	e3833010 	orr	r3, r3, #16
  124810:	e6ff3073 	uxth	r3, r3
  124814:	e1a00003 	mov	r0, r3
  124818:	ebffc769 	bl	1165c4 <lwip_htons>
  12481c:	e1a03000 	mov	r3, r0
  124820:	e1a02003 	mov	r2, r3
  124824:	e51b300c 	ldr	r3, [fp, #-12]
  124828:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  12482c:	e51b3010 	ldr	r3, [fp, #-16]
  124830:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  124834:	e1a00003 	mov	r0, r3
  124838:	ebffc761 	bl	1165c4 <lwip_htons>
  12483c:	e1a03000 	mov	r3, r0
  124840:	e1a02003 	mov	r2, r3
  124844:	e51b300c 	ldr	r3, [fp, #-12]
  124848:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  12484c:	e51b300c 	ldr	r3, [fp, #-12]
  124850:	e3a02000 	mov	r2, #0
  124854:	e5c32010 	strb	r2, [r3, #16]
  124858:	e3a02000 	mov	r2, #0
  12485c:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  124860:	e51b300c 	ldr	r3, [fp, #-12]
  124864:	e3a02000 	mov	r2, #0
  124868:	e5c32012 	strb	r2, [r3, #18]
  12486c:	e3a02000 	mov	r2, #0
  124870:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  124874:	e51b3010 	ldr	r3, [fp, #-16]
  124878:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12487c:	e51b2010 	ldr	r2, [fp, #-16]
  124880:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  124884:	e0832002 	add	r2, r3, r2
  124888:	e51b3010 	ldr	r3, [fp, #-16]
  12488c:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  124890:	e51b3008 	ldr	r3, [fp, #-8]
}
  124894:	e1a00003 	mov	r0, r3
  124898:	e24bd004 	sub	sp, fp, #4
  12489c:	e8bd8800 	pop	{fp, pc}

001248a0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  1248a0:	e92d4810 	push	{r4, fp, lr}
  1248a4:	e28db008 	add	fp, sp, #8
  1248a8:	e24dd014 	sub	sp, sp, #20
  1248ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  1248b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1248b4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1248b8:	e3530000 	cmp	r3, #0
  1248bc:	0a000029 	beq	124968 <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1248c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1248c4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1248c8:	e50b3010 	str	r3, [fp, #-16]
  1248cc:	ea000002 	b	1248dc <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  1248d0:	e51b3010 	ldr	r3, [fp, #-16]
  1248d4:	e5933000 	ldr	r3, [r3]
  1248d8:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1248dc:	e51b3010 	ldr	r3, [fp, #-16]
  1248e0:	e5933000 	ldr	r3, [r3]
  1248e4:	e3530000 	cmp	r3, #0
  1248e8:	1afffff8 	bne	1248d0 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  1248ec:	e51b3010 	ldr	r3, [fp, #-16]
  1248f0:	e593300c 	ldr	r3, [r3, #12]
  1248f4:	e1d330bc 	ldrh	r3, [r3, #12]
  1248f8:	e6ff3073 	uxth	r3, r3
  1248fc:	e1a00003 	mov	r0, r3
  124900:	ebffc72f 	bl	1165c4 <lwip_htons>
  124904:	e1a03000 	mov	r3, r0
  124908:	e2033007 	and	r3, r3, #7
  12490c:	e3530000 	cmp	r3, #0
  124910:	1a000014 	bne	124968 <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  124914:	e51b3010 	ldr	r3, [fp, #-16]
  124918:	e593300c 	ldr	r3, [r3, #12]
  12491c:	e1d330bc 	ldrh	r3, [r3, #12]
  124920:	e6ff4073 	uxth	r4, r3
  124924:	e3a00001 	mov	r0, #1
  124928:	ebffc725 	bl	1165c4 <lwip_htons>
  12492c:	e1a03000 	mov	r3, r0
  124930:	e1a02003 	mov	r2, r3
  124934:	e51b3010 	ldr	r3, [fp, #-16]
  124938:	e593300c 	ldr	r3, [r3, #12]
  12493c:	e1842002 	orr	r2, r4, r2
  124940:	e6ff2072 	uxth	r2, r2
  124944:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  124948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12494c:	e5d3301e 	ldrb	r3, [r3, #30]
  124950:	e3833020 	orr	r3, r3, #32
  124954:	e6ef2073 	uxtb	r2, r3
  124958:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12495c:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  124960:	e3a03000 	mov	r3, #0
  124964:	ea000003 	b	124978 <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  124968:	e3a01001 	mov	r1, #1
  12496c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  124970:	eb000426 	bl	125a10 <tcp_enqueue_flags>
  124974:	e1a03000 	mov	r3, r0
}
  124978:	e1a00003 	mov	r0, r3
  12497c:	e24bd008 	sub	sp, fp, #8
  124980:	e8bd8810 	pop	{r4, fp, pc}

00124984 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  124984:	e92d4810 	push	{r4, fp, lr}
  124988:	e28db008 	add	fp, sp, #8
  12498c:	e24dd01c 	sub	sp, sp, #28
  124990:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  124994:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  124998:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  12499c:	e1a03002 	mov	r3, r2
  1249a0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  1249a4:	e5db3004 	ldrb	r3, [fp, #4]
  1249a8:	e1a03103 	lsl	r3, r3, #2
  1249ac:	e6ef3073 	uxtb	r3, r3
  1249b0:	e2033004 	and	r3, r3, #4
  1249b4:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  1249b8:	e3a020b2 	mov	r2, #178	; 0xb2
  1249bc:	e3081620 	movw	r1, #34336	; 0x8620
  1249c0:	e3401014 	movt	r1, #20
  1249c4:	e3a00004 	mov	r0, #4
  1249c8:	ebffd1be 	bl	1190c8 <memp_malloc_fn>
  1249cc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1249d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249d4:	e3530000 	cmp	r3, #0
  1249d8:	1a000003 	bne	1249ec <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  1249dc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1249e0:	ebffd92e 	bl	11aea0 <pbuf_free>
    return NULL;
  1249e4:	e3a03000 	mov	r3, #0
  1249e8:	ea000063 	b	124b7c <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  1249ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249f0:	e5db2004 	ldrb	r2, [fp, #4]
  1249f4:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  1249f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249fc:	e3a02000 	mov	r2, #0
  124a00:	e5832000 	str	r2, [r3]
  seg->p = p;
  124a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a08:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  124a0c:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  124a10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124a14:	e1d320b8 	ldrh	r2, [r3, #8]
  124a18:	e55b300d 	ldrb	r3, [fp, #-13]
  124a1c:	e6ff3073 	uxth	r3, r3
  124a20:	e1520003 	cmp	r2, r3
  124a24:	2a000006 	bcs	124a44 <tcp_create_segment+0xc0>
  124a28:	e3080650 	movw	r0, #34384	; 0x8650
  124a2c:	e3400014 	movt	r0, #20
  124a30:	ebff79b7 	bl	103114 <rt_kprintf>
  124a34:	e3a010ba 	mov	r1, #186	; 0xba
  124a38:	e3080620 	movw	r0, #34336	; 0x8620
  124a3c:	e3400014 	movt	r0, #20
  124a40:	ebff99a6 	bl	10b0e0 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  124a44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124a48:	e1d320b8 	ldrh	r2, [r3, #8]
  124a4c:	e55b300d 	ldrb	r3, [fp, #-13]
  124a50:	e6ff3073 	uxth	r3, r3
  124a54:	e0423003 	sub	r3, r2, r3
  124a58:	e6ff2073 	uxth	r2, r3
  124a5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a60:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  124a64:	e3a01014 	mov	r1, #20
  124a68:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124a6c:	ebffd8ed 	bl	11ae28 <pbuf_header>
  124a70:	e1a03000 	mov	r3, r0
  124a74:	e3530000 	cmp	r3, #0
  124a78:	0a00000b 	beq	124aac <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  124a7c:	e30c3a50 	movw	r3, #51792	; 0xca50
  124a80:	e3403015 	movt	r3, #21
  124a84:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  124a88:	e2833001 	add	r3, r3, #1
  124a8c:	e6ff2073 	uxth	r2, r3
  124a90:	e30c3a50 	movw	r3, #51792	; 0xca50
  124a94:	e3403015 	movt	r3, #21
  124a98:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124a9c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124aa0:	ebffea72 	bl	11f470 <tcp_seg_free>
    return NULL;
  124aa4:	e3a03000 	mov	r3, #0
  124aa8:	ea000033 	b	124b7c <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124aac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ab0:	e5933004 	ldr	r3, [r3, #4]
  124ab4:	e5932004 	ldr	r2, [r3, #4]
  124ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124abc:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124ac0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124ac4:	e1d321ba 	ldrh	r2, [r3, #26]
  124ac8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124acc:	e593400c 	ldr	r4, [r3, #12]
  124ad0:	e1a00002 	mov	r0, r2
  124ad4:	ebffc6ba 	bl	1165c4 <lwip_htons>
  124ad8:	e1a03000 	mov	r3, r0
  124adc:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124ae0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124ae4:	e1d321bc 	ldrh	r2, [r3, #28]
  124ae8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124aec:	e593400c 	ldr	r4, [r3, #12]
  124af0:	e1a00002 	mov	r0, r2
  124af4:	ebffc6b2 	bl	1165c4 <lwip_htons>
  124af8:	e1a03000 	mov	r3, r0
  124afc:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  124b00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b04:	e593400c 	ldr	r4, [r3, #12]
  124b08:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  124b0c:	ebffc6b8 	bl	1165f4 <lwip_htonl>
  124b10:	e1a03000 	mov	r3, r0
  124b14:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  124b18:	e55b300d 	ldrb	r3, [fp, #-13]
  124b1c:	e1a03123 	lsr	r3, r3, #2
  124b20:	e6ef3073 	uxtb	r3, r3
  124b24:	e6ff3073 	uxth	r3, r3
  124b28:	e2833005 	add	r3, r3, #5
  124b2c:	e6ff3073 	uxth	r3, r3
  124b30:	e1a03603 	lsl	r3, r3, #12
  124b34:	e6ff2073 	uxth	r2, r3
  124b38:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  124b3c:	e6ff3073 	uxth	r3, r3
  124b40:	e1823003 	orr	r3, r2, r3
  124b44:	e6ff2073 	uxth	r2, r3
  124b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b4c:	e593400c 	ldr	r4, [r3, #12]
  124b50:	e1a00002 	mov	r0, r2
  124b54:	ebffc69a 	bl	1165c4 <lwip_htons>
  124b58:	e1a03000 	mov	r3, r0
  124b5c:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  124b60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b64:	e593300c 	ldr	r3, [r3, #12]
  124b68:	e3a02000 	mov	r2, #0
  124b6c:	e5c32012 	strb	r2, [r3, #18]
  124b70:	e3a02000 	mov	r2, #0
  124b74:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  124b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  124b7c:	e1a00003 	mov	r0, r3
  124b80:	e24bd008 	sub	sp, fp, #8
  124b84:	e8bd8810 	pop	{r4, fp, pc}

00124b88 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  124b88:	e92d4800 	push	{fp, lr}
  124b8c:	e28db004 	add	fp, sp, #4
  124b90:	e24dd018 	sub	sp, sp, #24
  124b94:	e50b0010 	str	r0, [fp, #-16]
  124b98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124b9c:	e1a03001 	mov	r3, r1
  124ba0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124ba4:	e1a03002 	mov	r3, r2
  124ba8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124bac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124bb0:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  124bb4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124bb8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124bbc:	e1520003 	cmp	r2, r3
  124bc0:	2a00001c 	bcs	124c38 <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124bc4:	e5db3008 	ldrb	r3, [fp, #8]
  124bc8:	e2033002 	and	r3, r3, #2
  124bcc:	e3530000 	cmp	r3, #0
  124bd0:	1a00000f 	bne	124c14 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  124bd4:	e59b3004 	ldr	r3, [fp, #4]
  124bd8:	e5d3301e 	ldrb	r3, [r3, #30]
  124bdc:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124be0:	e3530000 	cmp	r3, #0
  124be4:	1a000013 	bne	124c38 <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  124be8:	e5db300c 	ldrb	r3, [fp, #12]
  124bec:	e3530000 	cmp	r3, #0
  124bf0:	0a000007 	beq	124c14 <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  124bf4:	e59b3004 	ldr	r3, [fp, #4]
  124bf8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  124bfc:	e3530000 	cmp	r3, #0
  124c00:	1a000003 	bne	124c14 <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  124c04:	e59b3004 	ldr	r3, [fp, #4]
  124c08:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  124c0c:	e3530000 	cmp	r3, #0
  124c10:	0a000008 	beq	124c38 <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  124c14:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124c18:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124c1c:	e2833007 	add	r3, r3, #7
  124c20:	e3c32003 	bic	r2, r3, #3
  124c24:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124c28:	e1520003 	cmp	r2, r3
  124c2c:	31a03002 	movcc	r3, r2
  124c30:	21a03003 	movcs	r3, r3
  124c34:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  124c38:	e15b30b6 	ldrh	r3, [fp, #-6]
  124c3c:	e3a02000 	mov	r2, #0
  124c40:	e1a01003 	mov	r1, r3
  124c44:	e51b0010 	ldr	r0, [fp, #-16]
  124c48:	ebffd58d 	bl	11a284 <pbuf_alloc>
  124c4c:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  124c50:	e51b300c 	ldr	r3, [fp, #-12]
  124c54:	e3530000 	cmp	r3, #0
  124c58:	1a000001 	bne	124c64 <tcp_pbuf_prealloc+0xdc>
    return NULL;
  124c5c:	e3a03000 	mov	r3, #0
  124c60:	ea000019 	b	124ccc <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  124c64:	e51b300c 	ldr	r3, [fp, #-12]
  124c68:	e5933000 	ldr	r3, [r3]
  124c6c:	e3530000 	cmp	r3, #0
  124c70:	0a000006 	beq	124c90 <tcp_pbuf_prealloc+0x108>
  124c74:	e3080668 	movw	r0, #34408	; 0x8668
  124c78:	e3400014 	movt	r0, #20
  124c7c:	ebff7924 	bl	103114 <rt_kprintf>
  124c80:	e3a01e11 	mov	r1, #272	; 0x110
  124c84:	e3080620 	movw	r0, #34336	; 0x8620
  124c88:	e3400014 	movt	r0, #20
  124c8c:	ebff9913 	bl	10b0e0 <sys_arch_assert>
  *oversize = p->len - length;
  124c90:	e51b300c 	ldr	r3, [fp, #-12]
  124c94:	e1d320ba 	ldrh	r2, [r3, #10]
  124c98:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124c9c:	e0423003 	sub	r3, r2, r3
  124ca0:	e6ff2073 	uxth	r2, r3
  124ca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124ca8:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124cac:	e51b300c 	ldr	r3, [fp, #-12]
  124cb0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124cb4:	e1c320b8 	strh	r2, [r3, #8]
  124cb8:	e51b300c 	ldr	r3, [fp, #-12]
  124cbc:	e1d320b8 	ldrh	r2, [r3, #8]
  124cc0:	e51b300c 	ldr	r3, [fp, #-12]
  124cc4:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124cc8:	e51b300c 	ldr	r3, [fp, #-12]
}
  124ccc:	e1a00003 	mov	r0, r3
  124cd0:	e24bd004 	sub	sp, fp, #4
  124cd4:	e8bd8800 	pop	{fp, pc}

00124cd8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124cd8:	e92d4800 	push	{fp, lr}
  124cdc:	e28db004 	add	fp, sp, #4
  124ce0:	e24dd008 	sub	sp, sp, #8
  124ce4:	e50b0008 	str	r0, [fp, #-8]
  124ce8:	e1a03001 	mov	r3, r1
  124cec:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124cf0:	e51b3008 	ldr	r3, [fp, #-8]
  124cf4:	e5933014 	ldr	r3, [r3, #20]
  124cf8:	e3530004 	cmp	r3, #4
  124cfc:	0a00000d 	beq	124d38 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  124d00:	e51b3008 	ldr	r3, [fp, #-8]
  124d04:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  124d08:	e3530007 	cmp	r3, #7
  124d0c:	0a000009 	beq	124d38 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  124d10:	e51b3008 	ldr	r3, [fp, #-8]
  124d14:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  124d18:	e3530002 	cmp	r3, #2
  124d1c:	0a000005 	beq	124d38 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124d20:	e51b3008 	ldr	r3, [fp, #-8]
  124d24:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124d28:	e3530003 	cmp	r3, #3
  124d2c:	0a000001 	beq	124d38 <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124d30:	e3e0300a 	mvn	r3, #10
  124d34:	ea000050 	b	124e7c <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  124d38:	e15b30ba 	ldrh	r3, [fp, #-10]
  124d3c:	e3530000 	cmp	r3, #0
  124d40:	1a000001 	bne	124d4c <tcp_write_checks+0x74>
    return ERR_OK;
  124d44:	e3a03000 	mov	r3, #0
  124d48:	ea00004b 	b	124e7c <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  124d4c:	e51b3008 	ldr	r3, [fp, #-8]
  124d50:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  124d54:	e15b20ba 	ldrh	r2, [fp, #-10]
  124d58:	e1520003 	cmp	r2, r3
  124d5c:	9a000008 	bls	124d84 <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124d60:	e51b3008 	ldr	r3, [fp, #-8]
  124d64:	e5d3301e 	ldrb	r3, [r3, #30]
  124d68:	e1e03c83 	mvn	r3, r3, lsl #25
  124d6c:	e1e03ca3 	mvn	r3, r3, lsr #25
  124d70:	e6ef2073 	uxtb	r2, r3
  124d74:	e51b3008 	ldr	r3, [fp, #-8]
  124d78:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124d7c:	e3e03000 	mvn	r3, #0
  124d80:	ea00003d 	b	124e7c <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124d84:	e51b3008 	ldr	r3, [fp, #-8]
  124d88:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124d8c:	e3530015 	cmp	r3, #21
  124d90:	8a000004 	bhi	124da8 <tcp_write_checks+0xd0>
  124d94:	e51b3008 	ldr	r3, [fp, #-8]
  124d98:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124d9c:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124da0:	e1530002 	cmp	r3, r2
  124da4:	9a000010 	bls	124dec <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124da8:	e30c3a50 	movw	r3, #51792	; 0xca50
  124dac:	e3403015 	movt	r3, #21
  124db0:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124db4:	e2833001 	add	r3, r3, #1
  124db8:	e6ff2073 	uxth	r2, r3
  124dbc:	e30c3a50 	movw	r3, #51792	; 0xca50
  124dc0:	e3403015 	movt	r3, #21
  124dc4:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124dc8:	e51b3008 	ldr	r3, [fp, #-8]
  124dcc:	e5d3301e 	ldrb	r3, [r3, #30]
  124dd0:	e1e03c83 	mvn	r3, r3, lsl #25
  124dd4:	e1e03ca3 	mvn	r3, r3, lsr #25
  124dd8:	e6ef2073 	uxtb	r2, r3
  124ddc:	e51b3008 	ldr	r3, [fp, #-8]
  124de0:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124de4:	e3e03000 	mvn	r3, #0
  124de8:	ea000023 	b	124e7c <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124dec:	e51b3008 	ldr	r3, [fp, #-8]
  124df0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124df4:	e3530000 	cmp	r3, #0
  124df8:	0a00000f 	beq	124e3c <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124dfc:	e51b3008 	ldr	r3, [fp, #-8]
  124e00:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124e04:	e3530000 	cmp	r3, #0
  124e08:	1a00001a 	bne	124e78 <tcp_write_checks+0x1a0>
  124e0c:	e51b3008 	ldr	r3, [fp, #-8]
  124e10:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124e14:	e3530000 	cmp	r3, #0
  124e18:	1a000016 	bne	124e78 <tcp_write_checks+0x1a0>
  124e1c:	e308067c 	movw	r0, #34428	; 0x867c
  124e20:	e3400014 	movt	r0, #20
  124e24:	ebff78ba 	bl	103114 <rt_kprintf>
  124e28:	e3001156 	movw	r1, #342	; 0x156
  124e2c:	e3080620 	movw	r0, #34336	; 0x8620
  124e30:	e3400014 	movt	r0, #20
  124e34:	ebff98a9 	bl	10b0e0 <sys_arch_assert>
  124e38:	ea00000e 	b	124e78 <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124e3c:	e51b3008 	ldr	r3, [fp, #-8]
  124e40:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124e44:	e3530000 	cmp	r3, #0
  124e48:	1a000003 	bne	124e5c <tcp_write_checks+0x184>
  124e4c:	e51b3008 	ldr	r3, [fp, #-8]
  124e50:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124e54:	e3530000 	cmp	r3, #0
  124e58:	0a000006 	beq	124e78 <tcp_write_checks+0x1a0>
  124e5c:	e30806b8 	movw	r0, #34488	; 0x86b8
  124e60:	e3400014 	movt	r0, #20
  124e64:	ebff78aa 	bl	103114 <rt_kprintf>
  124e68:	e3001159 	movw	r1, #345	; 0x159
  124e6c:	e3080620 	movw	r0, #34336	; 0x8620
  124e70:	e3400014 	movt	r0, #20
  124e74:	ebff9899 	bl	10b0e0 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124e78:	e3a03000 	mov	r3, #0
}
  124e7c:	e1a00003 	mov	r0, r3
  124e80:	e24bd004 	sub	sp, fp, #4
  124e84:	e8bd8800 	pop	{fp, pc}

00124e88 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124e88:	e92d4810 	push	{r4, fp, lr}
  124e8c:	e28db008 	add	fp, sp, #8
  124e90:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124e94:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124e98:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124e9c:	e1a01002 	mov	r1, r2
  124ea0:	e1a02003 	mov	r2, r3
  124ea4:	e1a03001 	mov	r3, r1
  124ea8:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124eac:	e1a03002 	mov	r3, r2
  124eb0:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124eb4:	e3a03000 	mov	r3, #0
  124eb8:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124ebc:	e3a03000 	mov	r3, #0
  124ec0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124ec4:	e3a03000 	mov	r3, #0
  124ec8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124ecc:	e3a03000 	mov	r3, #0
  124ed0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124ed4:	e3a03000 	mov	r3, #0
  124ed8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124edc:	e3a03000 	mov	r3, #0
  124ee0:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124ee4:	e3a03000 	mov	r3, #0
  124ee8:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124eec:	e3a03000 	mov	r3, #0
  124ef0:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124ef4:	e3a03000 	mov	r3, #0
  124ef8:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124efc:	e3a03000 	mov	r3, #0
  124f00:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124f04:	e3a03000 	mov	r3, #0
  124f08:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124f0c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f10:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124f14:	e1a030a3 	lsr	r3, r3, #1
  124f18:	e6ff2073 	uxth	r2, r3
  124f1c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f20:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124f24:	e1520003 	cmp	r2, r3
  124f28:	31a03002 	movcc	r3, r2
  124f2c:	21a03003 	movcs	r3, r3
  124f30:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124f34:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f38:	e3530000 	cmp	r3, #0
  124f3c:	1a000002 	bne	124f4c <tcp_write+0xc4>
  124f40:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f44:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124f48:	ea000000 	b	124f50 <tcp_write+0xc8>
  124f4c:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f50:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124f54:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124f58:	e3530000 	cmp	r3, #0
  124f5c:	1a000008 	bne	124f84 <tcp_write+0xfc>
  124f60:	e30806ec 	movw	r0, #34540	; 0x86ec
  124f64:	e3400014 	movt	r0, #20
  124f68:	ebff7869 	bl	103114 <rt_kprintf>
  124f6c:	e3001192 	movw	r1, #402	; 0x192
  124f70:	e3080620 	movw	r0, #34336	; 0x8620
  124f74:	e3400014 	movt	r0, #20
  124f78:	ebff9858 	bl	10b0e0 <sys_arch_assert>
  124f7c:	e3e0300f 	mvn	r3, #15
  124f80:	ea00029f 	b	125a04 <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124f84:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124f88:	e1a01003 	mov	r1, r3
  124f8c:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124f90:	ebffff50 	bl	124cd8 <tcp_write_checks>
  124f94:	e1a03000 	mov	r3, r0
  124f98:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124f9c:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124fa0:	e3530000 	cmp	r3, #0
  124fa4:	0a000001 	beq	124fb0 <tcp_write+0x128>
    return err;
  124fa8:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124fac:	ea000294 	b	125a04 <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124fb0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fb4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124fb8:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124fbc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fc0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124fc4:	e3530000 	cmp	r3, #0
  124fc8:	0a0000d8 	beq	125330 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124fcc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fd0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124fd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124fd8:	ea000002 	b	124fe8 <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124fdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124fe0:	e5933000 	ldr	r3, [r3]
  124fe4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124fec:	e5933000 	ldr	r3, [r3]
  124ff0:	e3530000 	cmp	r3, #0
  124ff4:	1afffff8 	bne	124fdc <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  124ff8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ffc:	e5d3300a 	ldrb	r3, [r3, #10]
  125000:	e1a03103 	lsl	r3, r3, #2
  125004:	e6ff3073 	uxth	r3, r3
  125008:	e2033004 	and	r3, r3, #4
  12500c:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  125010:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125018:	e1d330b8 	ldrh	r3, [r3, #8]
  12501c:	e1a01003 	mov	r1, r3
  125020:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  125024:	e0813003 	add	r3, r1, r3
  125028:	e1520003 	cmp	r2, r3
  12502c:	aa000006 	bge	12504c <tcp_write+0x1c4>
  125030:	e3080720 	movw	r0, #34592	; 0x8720
  125034:	e3400014 	movt	r0, #20
  125038:	ebff7835 	bl	103114 <rt_kprintf>
  12503c:	e30011c7 	movw	r1, #455	; 0x1c7
  125040:	e3080620 	movw	r0, #34336	; 0x8620
  125044:	e3400014 	movt	r0, #20
  125048:	ebff9824 	bl	10b0e0 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  12504c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125050:	e1d320b8 	ldrh	r2, [r3, #8]
  125054:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  125058:	e0823003 	add	r3, r2, r3
  12505c:	e6ff3073 	uxth	r3, r3
  125060:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125064:	e0423003 	sub	r3, r2, r3
  125068:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  12506c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125070:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  125074:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  125078:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  12507c:	e3530000 	cmp	r3, #0
  125080:	0a000025 	beq	12511c <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  125084:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125088:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12508c:	e1520003 	cmp	r2, r3
  125090:	2a000006 	bcs	1250b0 <tcp_write+0x228>
  125094:	e3080738 	movw	r0, #34616	; 0x8738
  125098:	e3400014 	movt	r0, #20
  12509c:	ebff781c 	bl	103114 <rt_kprintf>
  1250a0:	e30011d9 	movw	r1, #473	; 0x1d9
  1250a4:	e3080620 	movw	r0, #34336	; 0x8620
  1250a8:	e3400014 	movt	r0, #20
  1250ac:	ebff980b 	bl	10b0e0 <sys_arch_assert>
      seg = last_unsent;
  1250b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1250b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  1250b8:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250bc:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  1250c0:	e1520003 	cmp	r2, r3
  1250c4:	9a000001 	bls	1250d0 <tcp_write+0x248>
  1250c8:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250cc:	ea000000 	b	1250d4 <tcp_write+0x24c>
  1250d0:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1250d4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1250d8:	e1530002 	cmp	r3, r2
  1250dc:	b1a03003 	movlt	r3, r3
  1250e0:	a1a03002 	movge	r3, r2
  1250e4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  1250e8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1250ec:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1250f0:	e0823003 	add	r3, r2, r3
  1250f4:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  1250f8:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1250fc:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125100:	e0423003 	sub	r3, r2, r3
  125104:	e6ff3073 	uxth	r3, r3
  125108:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  12510c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  125110:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125114:	e0423003 	sub	r3, r2, r3
  125118:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  12511c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125120:	e3530000 	cmp	r3, #0
  125124:	0a00000a 	beq	125154 <tcp_write+0x2cc>
  125128:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  12512c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125130:	e1520003 	cmp	r2, r3
  125134:	0a000006 	beq	125154 <tcp_write+0x2cc>
  125138:	e3080758 	movw	r0, #34648	; 0x8758
  12513c:	e3400014 	movt	r0, #20
  125140:	ebff77f3 	bl	103114 <rt_kprintf>
  125144:	e30011e1 	movw	r1, #481	; 0x1e1
  125148:	e3080620 	movw	r0, #34336	; 0x8620
  12514c:	e3400014 	movt	r0, #20
  125150:	ebff97e2 	bl	10b0e0 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  125154:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125158:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12515c:	e1520003 	cmp	r2, r3
  125160:	2a000121 	bcs	1255ec <tcp_write+0x764>
  125164:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  125168:	e3530000 	cmp	r3, #0
  12516c:	0a00011e 	beq	1255ec <tcp_write+0x764>
  125170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125174:	e1d330b8 	ldrh	r3, [r3, #8]
  125178:	e3530000 	cmp	r3, #0
  12517c:	0a00011a 	beq	1255ec <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  125180:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125184:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125188:	e0422003 	sub	r2, r2, r3
  12518c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  125190:	e1520003 	cmp	r2, r3
  125194:	b1a03002 	movlt	r3, r2
  125198:	a1a03003 	movge	r3, r3
  12519c:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  1251a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1251a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  1251a8:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1251ac:	e2033001 	and	r3, r3, #1
  1251b0:	e3530000 	cmp	r3, #0
  1251b4:	0a00001f 	beq	125238 <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  1251b8:	e24b0052 	sub	r0, fp, #82	; 0x52
  1251bc:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1251c0:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  1251c4:	e3a03001 	mov	r3, #1
  1251c8:	e58d3008 	str	r3, [sp, #8]
  1251cc:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1251d0:	e58d3004 	str	r3, [sp, #4]
  1251d4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251d8:	e58d3000 	str	r3, [sp]
  1251dc:	e1a03000 	mov	r3, r0
  1251e0:	e3a00004 	mov	r0, #4
  1251e4:	ebfffe67 	bl	124b88 <tcp_pbuf_prealloc>
  1251e8:	e50b0010 	str	r0, [fp, #-16]
  1251ec:	e51b3010 	ldr	r3, [fp, #-16]
  1251f0:	e3530000 	cmp	r3, #0
  1251f4:	0a0001cc 	beq	12592c <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  1251f8:	e51b3010 	ldr	r3, [fp, #-16]
  1251fc:	e5930004 	ldr	r0, [r3, #4]
  125200:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125204:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125208:	e0823003 	add	r3, r2, r3
  12520c:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  125210:	e1a01003 	mov	r1, r3
  125214:	eb006eda 	bl	140d84 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  125218:	e51b0010 	ldr	r0, [fp, #-16]
  12521c:	ebffd7a4 	bl	11b0b4 <pbuf_clen>
  125220:	e1a03000 	mov	r3, r0
  125224:	e1a02003 	mov	r2, r3
  125228:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12522c:	e0823003 	add	r3, r2, r3
  125230:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  125234:	ea000038 	b	12531c <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  125238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12523c:	e5933004 	ldr	r3, [r3, #4]
  125240:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  125244:	ea000002 	b	125254 <tcp_write+0x3cc>
  125248:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12524c:	e5933000 	ldr	r3, [r3]
  125250:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  125254:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125258:	e5933000 	ldr	r3, [r3]
  12525c:	e3530000 	cmp	r3, #0
  125260:	1afffff8 	bne	125248 <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  125264:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125268:	e5d3300c 	ldrb	r3, [r3, #12]
  12526c:	e3530001 	cmp	r3, #1
  125270:	1a000014 	bne	1252c8 <tcp_write+0x440>
  125274:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125278:	e5933004 	ldr	r3, [r3, #4]
  12527c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125280:	e1d220ba 	ldrh	r2, [r2, #10]
  125284:	e0833002 	add	r3, r3, r2
  125288:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  12528c:	e1520003 	cmp	r2, r3
  125290:	1a00000c 	bne	1252c8 <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  125294:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125298:	e3530000 	cmp	r3, #0
  12529c:	0a000006 	beq	1252bc <tcp_write+0x434>
  1252a0:	e3080778 	movw	r0, #34680	; 0x8778
  1252a4:	e3400014 	movt	r0, #20
  1252a8:	ebff7799 	bl	103114 <rt_kprintf>
  1252ac:	e3a01f83 	mov	r1, #524	; 0x20c
  1252b0:	e3080620 	movw	r0, #34336	; 0x8620
  1252b4:	e3400014 	movt	r0, #20
  1252b8:	ebff9788 	bl	10b0e0 <sys_arch_assert>
          extendlen = seglen;
  1252bc:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252c0:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  1252c4:	ea000014 	b	12531c <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  1252c8:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252cc:	e3a02001 	mov	r2, #1
  1252d0:	e1a01003 	mov	r1, r3
  1252d4:	e3a00004 	mov	r0, #4
  1252d8:	ebffd3e9 	bl	11a284 <pbuf_alloc>
  1252dc:	e50b0010 	str	r0, [fp, #-16]
  1252e0:	e51b3010 	ldr	r3, [fp, #-16]
  1252e4:	e3530000 	cmp	r3, #0
  1252e8:	0a000191 	beq	125934 <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  1252ec:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1252f0:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1252f4:	e0822003 	add	r2, r2, r3
  1252f8:	e51b3010 	ldr	r3, [fp, #-16]
  1252fc:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  125300:	e51b0010 	ldr	r0, [fp, #-16]
  125304:	ebffd76a 	bl	11b0b4 <pbuf_clen>
  125308:	e1a03000 	mov	r3, r0
  12530c:	e1a02003 	mov	r2, r3
  125310:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125314:	e0823003 	add	r3, r2, r3
  125318:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  12531c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125320:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  125324:	e0823003 	add	r3, r2, r3
  125328:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  12532c:	ea0000ae 	b	1255ec <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  125330:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125334:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  125338:	e3530000 	cmp	r3, #0
  12533c:	0a0000aa 	beq	1255ec <tcp_write+0x764>
  125340:	e30807a4 	movw	r0, #34724	; 0x87a4
  125344:	e3400014 	movt	r0, #20
  125348:	ebff7771 	bl	103114 <rt_kprintf>
  12534c:	e3001225 	movw	r1, #549	; 0x225
  125350:	e3080620 	movw	r0, #34336	; 0x8620
  125354:	e3400014 	movt	r0, #20
  125358:	ebff9760 	bl	10b0e0 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  12535c:	ea0000a2 	b	1255ec <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  125360:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125364:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125368:	e0423003 	sub	r3, r2, r3
  12536c:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  125370:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125374:	e6ff3073 	uxth	r3, r3
  125378:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  12537c:	e0423003 	sub	r3, r2, r3
  125380:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  125384:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  125388:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  12538c:	e1520003 	cmp	r2, r3
  125390:	31a03002 	movcc	r3, r2
  125394:	21a03003 	movcs	r3, r3
  125398:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  12539c:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253a0:	e2033001 	and	r3, r3, #1
  1253a4:	e3530000 	cmp	r3, #0
  1253a8:	0a00002e 	beq	125468 <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  1253ac:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1253b0:	e6ff2073 	uxth	r2, r3
  1253b4:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1253b8:	e0823003 	add	r3, r2, r3
  1253bc:	e6ff1073 	uxth	r1, r3
  1253c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1253c4:	e3530000 	cmp	r3, #0
  1253c8:	03a03001 	moveq	r3, #1
  1253cc:	13a03000 	movne	r3, #0
  1253d0:	e6ef3073 	uxtb	r3, r3
  1253d4:	e24b0052 	sub	r0, fp, #82	; 0x52
  1253d8:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  1253dc:	e58d3008 	str	r3, [sp, #8]
  1253e0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253e4:	e58d3004 	str	r3, [sp, #4]
  1253e8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1253ec:	e58d3000 	str	r3, [sp]
  1253f0:	e1a03000 	mov	r3, r0
  1253f4:	e3a00000 	mov	r0, #0
  1253f8:	ebfffde2 	bl	124b88 <tcp_pbuf_prealloc>
  1253fc:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  125400:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125404:	e3530000 	cmp	r3, #0
  125408:	0a00014b 	beq	12593c <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  12540c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125410:	e1d330ba 	ldrh	r3, [r3, #10]
  125414:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125418:	e1520003 	cmp	r2, r3
  12541c:	9a000006 	bls	12543c <tcp_write+0x5b4>
  125420:	e30807d4 	movw	r0, #34772	; 0x87d4
  125424:	e3400014 	movt	r0, #20
  125428:	ebff7739 	bl	103114 <rt_kprintf>
  12542c:	e3001241 	movw	r1, #577	; 0x241
  125430:	e3080620 	movw	r0, #34336	; 0x8620
  125434:	e3400014 	movt	r0, #20
  125438:	ebff9728 	bl	10b0e0 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  12543c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125440:	e5932004 	ldr	r2, [r3, #4]
  125444:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125448:	e0820003 	add	r0, r2, r3
  12544c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125450:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125454:	e0823003 	add	r3, r2, r3
  125458:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  12545c:	e1a01003 	mov	r1, r3
  125460:	eb006e47 	bl	140d84 <memcpy>
  125464:	ea000027 	b	125508 <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  125468:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  12546c:	e3530000 	cmp	r3, #0
  125470:	0a000006 	beq	125490 <tcp_write+0x608>
  125474:	e3080814 	movw	r0, #34836	; 0x8814
  125478:	e3400014 	movt	r0, #20
  12547c:	ebff7724 	bl	103114 <rt_kprintf>
  125480:	e300124b 	movw	r1, #587	; 0x24b
  125484:	e3080620 	movw	r0, #34336	; 0x8620
  125488:	e3400014 	movt	r0, #20
  12548c:	ebff9713 	bl	10b0e0 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  125490:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  125494:	e3a02001 	mov	r2, #1
  125498:	e1a01003 	mov	r1, r3
  12549c:	e3a00000 	mov	r0, #0
  1254a0:	ebffd377 	bl	11a284 <pbuf_alloc>
  1254a4:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  1254a8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1254ac:	e3530000 	cmp	r3, #0
  1254b0:	0a000123 	beq	125944 <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  1254b4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1254b8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1254bc:	e0822003 	add	r2, r2, r3
  1254c0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1254c4:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  1254c8:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1254cc:	e6ff3073 	uxth	r3, r3
  1254d0:	e3a02000 	mov	r2, #0
  1254d4:	e1a01003 	mov	r1, r3
  1254d8:	e3a00000 	mov	r0, #0
  1254dc:	ebffd368 	bl	11a284 <pbuf_alloc>
  1254e0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1254e4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1254e8:	e3530000 	cmp	r3, #0
  1254ec:	1a000002 	bne	1254fc <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  1254f0:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  1254f4:	ebffd669 	bl	11aea0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  1254f8:	ea000114 	b	125950 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  1254fc:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  125500:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125504:	ebffd71c 	bl	11b17c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  125508:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12550c:	ebffd6e8 	bl	11b0b4 <pbuf_clen>
  125510:	e1a03000 	mov	r3, r0
  125514:	e1a02003 	mov	r2, r3
  125518:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12551c:	e0823003 	add	r3, r2, r3
  125520:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  125524:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125528:	e3530016 	cmp	r3, #22
  12552c:	8a000003 	bhi	125540 <tcp_write+0x6b8>
  125530:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125534:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125538:	e1530002 	cmp	r3, r2
  12553c:	9a000002 	bls	12554c <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  125540:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125544:	ebffd655 	bl	11aea0 <pbuf_free>
      goto memerr;
  125548:	ea000100 	b	125950 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  12554c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125550:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125554:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125558:	e0822003 	add	r2, r2, r3
  12555c:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  125560:	e58d3000 	str	r3, [sp]
  125564:	e1a03002 	mov	r3, r2
  125568:	e3a02000 	mov	r2, #0
  12556c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  125570:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  125574:	ebfffd02 	bl	124984 <tcp_create_segment>
  125578:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12557c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125580:	e3530000 	cmp	r3, #0
  125584:	0a0000f0 	beq	12594c <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  125588:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12558c:	e3530000 	cmp	r3, #0
  125590:	1a000002 	bne	1255a0 <tcp_write+0x718>
      queue = seg;
  125594:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125598:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  12559c:	ea00000c 	b	1255d4 <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  1255a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1255a4:	e3530000 	cmp	r3, #0
  1255a8:	1a000006 	bne	1255c8 <tcp_write+0x740>
  1255ac:	e3080824 	movw	r0, #34852	; 0x8824
  1255b0:	e3400014 	movt	r0, #20
  1255b4:	ebff76d6 	bl	103114 <rt_kprintf>
  1255b8:	e3001285 	movw	r1, #645	; 0x285
  1255bc:	e3080620 	movw	r0, #34336	; 0x8620
  1255c0:	e3400014 	movt	r0, #20
  1255c4:	ebff96c5 	bl	10b0e0 <sys_arch_assert>
      prev_seg->next = seg;
  1255c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1255cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1255d0:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  1255d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  1255dc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1255e0:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1255e4:	e0823003 	add	r3, r2, r3
  1255e8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  1255ec:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1255f0:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1255f4:	e1520003 	cmp	r2, r3
  1255f8:	3affff58 	bcc	125360 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  1255fc:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125600:	e3530000 	cmp	r3, #0
  125604:	0a00002b 	beq	1256b8 <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  125608:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12560c:	e5933004 	ldr	r3, [r3, #4]
  125610:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125614:	ea00001d 	b	125690 <tcp_write+0x808>
      p->tot_len += oversize_used;
  125618:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12561c:	e1d320b8 	ldrh	r2, [r3, #8]
  125620:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125624:	e0823003 	add	r3, r2, r3
  125628:	e6ff2073 	uxth	r2, r3
  12562c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125630:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  125634:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125638:	e5933000 	ldr	r3, [r3]
  12563c:	e3530000 	cmp	r3, #0
  125640:	1a00000f 	bne	125684 <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  125644:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125648:	e5933004 	ldr	r3, [r3, #4]
  12564c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  125650:	e1d220ba 	ldrh	r2, [r2, #10]
  125654:	e0833002 	add	r3, r3, r2
  125658:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  12565c:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  125660:	e1a00003 	mov	r0, r3
  125664:	eb006dc6 	bl	140d84 <memcpy>
        p->len += oversize_used;
  125668:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12566c:	e1d320ba 	ldrh	r2, [r3, #10]
  125670:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125674:	e0823003 	add	r3, r2, r3
  125678:	e6ff2073 	uxth	r2, r3
  12567c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125680:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  125684:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125688:	e5933000 	ldr	r3, [r3]
  12568c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125690:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125694:	e3530000 	cmp	r3, #0
  125698:	1affffde 	bne	125618 <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  12569c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256a0:	e1d320b8 	ldrh	r2, [r3, #8]
  1256a4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1256a8:	e0823003 	add	r3, r2, r3
  1256ac:	e6ff2073 	uxth	r2, r3
  1256b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256b4:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  1256b8:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1256bc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1256c0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  1256c4:	e51b3010 	ldr	r3, [fp, #-16]
  1256c8:	e3530000 	cmp	r3, #0
  1256cc:	0a000017 	beq	125730 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  1256d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256d4:	e3530000 	cmp	r3, #0
  1256d8:	1a000006 	bne	1256f8 <tcp_write+0x870>
  1256dc:	e3080838 	movw	r0, #34872	; 0x8838
  1256e0:	e3400014 	movt	r0, #20
  1256e4:	ebff768a 	bl	103114 <rt_kprintf>
  1256e8:	e30012bb 	movw	r1, #699	; 0x2bb
  1256ec:	e3080620 	movw	r0, #34336	; 0x8620
  1256f0:	e3400014 	movt	r0, #20
  1256f4:	ebff9679 	bl	10b0e0 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  1256f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256fc:	e5933004 	ldr	r3, [r3, #4]
  125700:	e51b1010 	ldr	r1, [fp, #-16]
  125704:	e1a00003 	mov	r0, r3
  125708:	ebffd69b 	bl	11b17c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  12570c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125710:	e1d320b8 	ldrh	r2, [r3, #8]
  125714:	e51b3010 	ldr	r3, [fp, #-16]
  125718:	e1d330b8 	ldrh	r3, [r3, #8]
  12571c:	e0823003 	add	r3, r2, r3
  125720:	e6ff2073 	uxth	r2, r3
  125724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125728:	e1c320b8 	strh	r2, [r3, #8]
  12572c:	ea000037 	b	125810 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125730:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125734:	e3530000 	cmp	r3, #0
  125738:	0a000034 	beq	125810 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  12573c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125740:	e3530000 	cmp	r3, #0
  125744:	0a000003 	beq	125758 <tcp_write+0x8d0>
  125748:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12574c:	e5933004 	ldr	r3, [r3, #4]
  125750:	e3530000 	cmp	r3, #0
  125754:	1a000006 	bne	125774 <tcp_write+0x8ec>
  125758:	e3080870 	movw	r0, #34928	; 0x8870
  12575c:	e3400014 	movt	r0, #20
  125760:	ebff766b 	bl	103114 <rt_kprintf>
  125764:	e30012c1 	movw	r1, #705	; 0x2c1
  125768:	e3080620 	movw	r0, #34336	; 0x8620
  12576c:	e3400014 	movt	r0, #20
  125770:	ebff965a 	bl	10b0e0 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125778:	e5933004 	ldr	r3, [r3, #4]
  12577c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125780:	ea000009 	b	1257ac <tcp_write+0x924>
      p->tot_len += extendlen;
  125784:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125788:	e1d320b8 	ldrh	r2, [r3, #8]
  12578c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125790:	e0823003 	add	r3, r2, r3
  125794:	e6ff2073 	uxth	r2, r3
  125798:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12579c:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  1257a0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257a4:	e5933000 	ldr	r3, [r3]
  1257a8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1257ac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257b0:	e5933000 	ldr	r3, [r3]
  1257b4:	e3530000 	cmp	r3, #0
  1257b8:	1afffff1 	bne	125784 <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  1257bc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257c0:	e1d320b8 	ldrh	r2, [r3, #8]
  1257c4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257c8:	e0823003 	add	r3, r2, r3
  1257cc:	e6ff2073 	uxth	r2, r3
  1257d0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257d4:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  1257d8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257dc:	e1d320ba 	ldrh	r2, [r3, #10]
  1257e0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257e4:	e0823003 	add	r3, r2, r3
  1257e8:	e6ff2073 	uxth	r2, r3
  1257ec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257f0:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  1257f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1257f8:	e1d320b8 	ldrh	r2, [r3, #8]
  1257fc:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125800:	e0823003 	add	r3, r2, r3
  125804:	e6ff2073 	uxth	r2, r3
  125808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12580c:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  125810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125814:	e3530000 	cmp	r3, #0
  125818:	1a000003 	bne	12582c <tcp_write+0x9a4>
    pcb->unsent = queue;
  12581c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125820:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125824:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125828:	ea000002 	b	125838 <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  12582c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125830:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125834:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  125838:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12583c:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125840:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125844:	e0822003 	add	r2, r2, r3
  125848:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12584c:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  125850:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125854:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  125858:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12585c:	e0423003 	sub	r3, r2, r3
  125860:	e6ff2073 	uxth	r2, r3
  125864:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125868:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  12586c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125870:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  125874:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125878:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12587c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125880:	e3530000 	cmp	r3, #0
  125884:	0a00000e 	beq	1258c4 <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  125888:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12588c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125890:	e3530000 	cmp	r3, #0
  125894:	1a00000a 	bne	1258c4 <tcp_write+0xa3c>
  125898:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12589c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1258a0:	e3530000 	cmp	r3, #0
  1258a4:	1a000006 	bne	1258c4 <tcp_write+0xa3c>
  1258a8:	e30808a8 	movw	r0, #34984	; 0x88a8
  1258ac:	e3400014 	movt	r0, #20
  1258b0:	ebff7617 	bl	103114 <rt_kprintf>
  1258b4:	e30012ed 	movw	r1, #749	; 0x2ed
  1258b8:	e3080620 	movw	r0, #34336	; 0x8620
  1258bc:	e3400014 	movt	r0, #20
  1258c0:	ebff9606 	bl	10b0e0 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  1258c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258c8:	e3530000 	cmp	r3, #0
  1258cc:	0a000014 	beq	125924 <tcp_write+0xa9c>
  1258d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258d4:	e593300c 	ldr	r3, [r3, #12]
  1258d8:	e3530000 	cmp	r3, #0
  1258dc:	0a000010 	beq	125924 <tcp_write+0xa9c>
  1258e0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1258e4:	e2033002 	and	r3, r3, #2
  1258e8:	e3530000 	cmp	r3, #0
  1258ec:	1a00000c 	bne	125924 <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  1258f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258f4:	e593300c 	ldr	r3, [r3, #12]
  1258f8:	e1d330bc 	ldrh	r3, [r3, #12]
  1258fc:	e6ff4073 	uxth	r4, r3
  125900:	e3a00008 	mov	r0, #8
  125904:	ebffc32e 	bl	1165c4 <lwip_htons>
  125908:	e1a03000 	mov	r3, r0
  12590c:	e1a02003 	mov	r2, r3
  125910:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125914:	e593300c 	ldr	r3, [r3, #12]
  125918:	e1842002 	orr	r2, r4, r2
  12591c:	e6ff2072 	uxth	r2, r2
  125920:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  125924:	e3a03000 	mov	r3, #0
  125928:	ea000035 	b	125a04 <tcp_write+0xb7c>
          goto memerr;
  12592c:	e320f000 	nop	{0}
  125930:	ea000006 	b	125950 <tcp_write+0xac8>
            goto memerr;
  125934:	e320f000 	nop	{0}
  125938:	ea000004 	b	125950 <tcp_write+0xac8>
        goto memerr;
  12593c:	e320f000 	nop	{0}
  125940:	ea000002 	b	125950 <tcp_write+0xac8>
        goto memerr;
  125944:	e320f000 	nop	{0}
  125948:	ea000000 	b	125950 <tcp_write+0xac8>
      goto memerr;
  12594c:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  125950:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125954:	e5d3301e 	ldrb	r3, [r3, #30]
  125958:	e1e03c83 	mvn	r3, r3, lsl #25
  12595c:	e1e03ca3 	mvn	r3, r3, lsr #25
  125960:	e6ef2073 	uxtb	r2, r3
  125964:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125968:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  12596c:	e30c3a50 	movw	r3, #51792	; 0xca50
  125970:	e3403015 	movt	r3, #21
  125974:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125978:	e2833001 	add	r3, r3, #1
  12597c:	e6ff2073 	uxth	r2, r3
  125980:	e30c3a50 	movw	r3, #51792	; 0xca50
  125984:	e3403015 	movt	r3, #21
  125988:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  12598c:	e51b3010 	ldr	r3, [fp, #-16]
  125990:	e3530000 	cmp	r3, #0
  125994:	0a000001 	beq	1259a0 <tcp_write+0xb18>
    pbuf_free(concat_p);
  125998:	e51b0010 	ldr	r0, [fp, #-16]
  12599c:	ebffd53f 	bl	11aea0 <pbuf_free>
  }
  if (queue != NULL) {
  1259a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259a4:	e3530000 	cmp	r3, #0
  1259a8:	0a000001 	beq	1259b4 <tcp_write+0xb2c>
    tcp_segs_free(queue);
  1259ac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1259b0:	ebffe69c 	bl	11f428 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  1259b4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259b8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1259bc:	e3530000 	cmp	r3, #0
  1259c0:	0a00000e 	beq	125a00 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  1259c4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259c8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1259cc:	e3530000 	cmp	r3, #0
  1259d0:	1a00000a 	bne	125a00 <tcp_write+0xb78>
  1259d4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259d8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1259dc:	e3530000 	cmp	r3, #0
  1259e0:	1a000006 	bne	125a00 <tcp_write+0xb78>
  1259e4:	e30808a8 	movw	r0, #34984	; 0x88a8
  1259e8:	e3400014 	movt	r0, #20
  1259ec:	ebff75c8 	bl	103114 <rt_kprintf>
  1259f0:	e3001302 	movw	r1, #770	; 0x302
  1259f4:	e3080620 	movw	r0, #34336	; 0x8620
  1259f8:	e3400014 	movt	r0, #20
  1259fc:	ebff95b7 	bl	10b0e0 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  125a00:	e3e03000 	mvn	r3, #0
}
  125a04:	e1a00003 	mov	r0, r3
  125a08:	e24bd008 	sub	sp, fp, #8
  125a0c:	e8bd8810 	pop	{r4, fp, pc}

00125a10 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  125a10:	e92d4800 	push	{fp, lr}
  125a14:	e28db004 	add	fp, sp, #4
  125a18:	e24dd028 	sub	sp, sp, #40	; 0x28
  125a1c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  125a20:	e1a03001 	mov	r3, r1
  125a24:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  125a28:	e3a03000 	mov	r3, #0
  125a2c:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125a30:	e3a03000 	mov	r3, #0
  125a34:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  125a38:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a3c:	e2033003 	and	r3, r3, #3
  125a40:	e3530000 	cmp	r3, #0
  125a44:	1a000006 	bne	125a64 <tcp_enqueue_flags+0x54>
  125a48:	e30808c8 	movw	r0, #35016	; 0x88c8
  125a4c:	e3400014 	movt	r0, #20
  125a50:	ebff75af 	bl	103114 <rt_kprintf>
  125a54:	e300131b 	movw	r1, #795	; 0x31b
  125a58:	e3080620 	movw	r0, #34336	; 0x8620
  125a5c:	e3400014 	movt	r0, #20
  125a60:	ebff959e 	bl	10b0e0 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125a64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a68:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a6c:	e3530015 	cmp	r3, #21
  125a70:	8a000004 	bhi	125a88 <tcp_enqueue_flags+0x78>
  125a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a78:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a7c:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125a80:	e1530002 	cmp	r3, r2
  125a84:	9a000014 	bls	125adc <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  125a88:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a8c:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125a90:	e3530000 	cmp	r3, #0
  125a94:	1a000010 	bne	125adc <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  125a98:	e30c3a50 	movw	r3, #51792	; 0xca50
  125a9c:	e3403015 	movt	r3, #21
  125aa0:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125aa4:	e2833001 	add	r3, r3, #1
  125aa8:	e6ff2073 	uxth	r2, r3
  125aac:	e30c3a50 	movw	r3, #51792	; 0xca50
  125ab0:	e3403015 	movt	r3, #21
  125ab4:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  125ab8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125abc:	e5d3301e 	ldrb	r3, [r3, #30]
  125ac0:	e1e03c83 	mvn	r3, r3, lsl #25
  125ac4:	e1e03ca3 	mvn	r3, r3, lsr #25
  125ac8:	e6ef2073 	uxtb	r2, r3
  125acc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ad0:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  125ad4:	e3e03000 	mvn	r3, #0
  125ad8:	ea0000b7 	b	125dbc <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125adc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125ae0:	e2033002 	and	r3, r3, #2
  125ae4:	e3530000 	cmp	r3, #0
  125ae8:	0a000001 	beq	125af4 <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125aec:	e3a03001 	mov	r3, #1
  125af0:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  125af4:	e55b3005 	ldrb	r3, [fp, #-5]
  125af8:	e1a03103 	lsl	r3, r3, #2
  125afc:	e6ef3073 	uxtb	r3, r3
  125b00:	e2033004 	and	r3, r3, #4
  125b04:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125b08:	e55b300d 	ldrb	r3, [fp, #-13]
  125b0c:	e6ff3073 	uxth	r3, r3
  125b10:	e3a02000 	mov	r2, #0
  125b14:	e1a01003 	mov	r1, r3
  125b18:	e3a00000 	mov	r0, #0
  125b1c:	ebffd1d8 	bl	11a284 <pbuf_alloc>
  125b20:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  125b24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b28:	e3530000 	cmp	r3, #0
  125b2c:	1a000010 	bne	125b74 <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125b30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b34:	e5d3301e 	ldrb	r3, [r3, #30]
  125b38:	e1e03c83 	mvn	r3, r3, lsl #25
  125b3c:	e1e03ca3 	mvn	r3, r3, lsr #25
  125b40:	e6ef2073 	uxtb	r2, r3
  125b44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b48:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125b4c:	e30c3a50 	movw	r3, #51792	; 0xca50
  125b50:	e3403015 	movt	r3, #21
  125b54:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125b58:	e2833001 	add	r3, r3, #1
  125b5c:	e6ff2073 	uxth	r2, r3
  125b60:	e30c3a50 	movw	r3, #51792	; 0xca50
  125b64:	e3403015 	movt	r3, #21
  125b68:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125b6c:	e3e03000 	mvn	r3, #0
  125b70:	ea000091 	b	125dbc <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  125b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b78:	e1d320ba 	ldrh	r2, [r3, #10]
  125b7c:	e55b300d 	ldrb	r3, [fp, #-13]
  125b80:	e6ff3073 	uxth	r3, r3
  125b84:	e1520003 	cmp	r2, r3
  125b88:	2a000006 	bcs	125ba8 <tcp_enqueue_flags+0x198>
  125b8c:	e3080920 	movw	r0, #35104	; 0x8920
  125b90:	e3400014 	movt	r0, #20
  125b94:	ebff755e 	bl	103114 <rt_kprintf>
  125b98:	e3001341 	movw	r1, #833	; 0x341
  125b9c:	e3080620 	movw	r0, #34336	; 0x8620
  125ba0:	e3400014 	movt	r0, #20
  125ba4:	ebff954d 	bl	10b0e0 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  125ba8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bac:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125bb0:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  125bb4:	e55b3005 	ldrb	r3, [fp, #-5]
  125bb8:	e58d3000 	str	r3, [sp]
  125bbc:	e1a03001 	mov	r3, r1
  125bc0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  125bc4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125bc8:	ebfffb6d 	bl	124984 <tcp_create_segment>
  125bcc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125bd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125bd4:	e3530000 	cmp	r3, #0
  125bd8:	1a000010 	bne	125c20 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125bdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125be0:	e5d3301e 	ldrb	r3, [r3, #30]
  125be4:	e1e03c83 	mvn	r3, r3, lsl #25
  125be8:	e1e03ca3 	mvn	r3, r3, lsr #25
  125bec:	e6ef2073 	uxtb	r2, r3
  125bf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bf4:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125bf8:	e30c3a50 	movw	r3, #51792	; 0xca50
  125bfc:	e3403015 	movt	r3, #21
  125c00:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125c04:	e2833001 	add	r3, r3, #1
  125c08:	e6ff2073 	uxth	r2, r3
  125c0c:	e30c3a50 	movw	r3, #51792	; 0xca50
  125c10:	e3403015 	movt	r3, #21
  125c14:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125c18:	e3e03000 	mvn	r3, #0
  125c1c:	ea000066 	b	125dbc <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125c20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125c24:	e593300c 	ldr	r3, [r3, #12]
  125c28:	e2033003 	and	r3, r3, #3
  125c2c:	e3530000 	cmp	r3, #0
  125c30:	0a000006 	beq	125c50 <tcp_enqueue_flags+0x240>
  125c34:	e308095c 	movw	r0, #35164	; 0x895c
  125c38:	e3400014 	movt	r0, #20
  125c3c:	ebff7534 	bl	103114 <rt_kprintf>
  125c40:	e3001349 	movw	r1, #841	; 0x349
  125c44:	e3080620 	movw	r0, #34336	; 0x8620
  125c48:	e3400014 	movt	r0, #20
  125c4c:	ebff9523 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  125c50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125c54:	e1d330b8 	ldrh	r3, [r3, #8]
  125c58:	e3530000 	cmp	r3, #0
  125c5c:	0a000006 	beq	125c7c <tcp_enqueue_flags+0x26c>
  125c60:	e3080974 	movw	r0, #35188	; 0x8974
  125c64:	e3400014 	movt	r0, #20
  125c68:	ebff7529 	bl	103114 <rt_kprintf>
  125c6c:	e300134a 	movw	r1, #842	; 0x34a
  125c70:	e3080620 	movw	r0, #34336	; 0x8620
  125c74:	e3400014 	movt	r0, #20
  125c78:	ebff9518 	bl	10b0e0 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  125c7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c80:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125c84:	e3530000 	cmp	r3, #0
  125c88:	1a000003 	bne	125c9c <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  125c8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125c94:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125c98:	ea00000d 	b	125cd4 <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125c9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ca0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ca4:	e50b300c 	str	r3, [fp, #-12]
  125ca8:	ea000002 	b	125cb8 <tcp_enqueue_flags+0x2a8>
  125cac:	e51b300c 	ldr	r3, [fp, #-12]
  125cb0:	e5933000 	ldr	r3, [r3]
  125cb4:	e50b300c 	str	r3, [fp, #-12]
  125cb8:	e51b300c 	ldr	r3, [fp, #-12]
  125cbc:	e5933000 	ldr	r3, [r3]
  125cc0:	e3530000 	cmp	r3, #0
  125cc4:	1afffff8 	bne	125cac <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125cc8:	e51b300c 	ldr	r3, [fp, #-12]
  125ccc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125cd0:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  125cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cd8:	e3a02000 	mov	r2, #0
  125cdc:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125ce0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125ce4:	e2033002 	and	r3, r3, #2
  125ce8:	e3530000 	cmp	r3, #0
  125cec:	1a000003 	bne	125d00 <tcp_enqueue_flags+0x2f0>
  125cf0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125cf4:	e2033001 	and	r3, r3, #1
  125cf8:	e3530000 	cmp	r3, #0
  125cfc:	0a000004 	beq	125d14 <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  125d00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d04:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  125d08:	e2832001 	add	r2, r3, #1
  125d0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d10:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  125d14:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125d18:	e2033001 	and	r3, r3, #1
  125d1c:	e3530000 	cmp	r3, #0
  125d20:	0a000005 	beq	125d3c <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  125d24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d28:	e5d3301e 	ldrb	r3, [r3, #30]
  125d2c:	e3833020 	orr	r3, r3, #32
  125d30:	e6ef2073 	uxtb	r2, r3
  125d34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d38:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  125d3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125d40:	e5933004 	ldr	r3, [r3, #4]
  125d44:	e1a00003 	mov	r0, r3
  125d48:	ebffd4d9 	bl	11b0b4 <pbuf_clen>
  125d4c:	e1a03000 	mov	r3, r0
  125d50:	e1a02003 	mov	r2, r3
  125d54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d58:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d5c:	e0823003 	add	r3, r2, r3
  125d60:	e6ff2073 	uxth	r2, r3
  125d64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d68:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125d6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d70:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d74:	e3530000 	cmp	r3, #0
  125d78:	0a00000e 	beq	125db8 <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125d7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d80:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125d84:	e3530000 	cmp	r3, #0
  125d88:	1a00000a 	bne	125db8 <tcp_enqueue_flags+0x3a8>
  125d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d90:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125d94:	e3530000 	cmp	r3, #0
  125d98:	1a000006 	bne	125db8 <tcp_enqueue_flags+0x3a8>
  125d9c:	e30809a0 	movw	r0, #35232	; 0x89a0
  125da0:	e3400014 	movt	r0, #20
  125da4:	ebff74da 	bl	103114 <rt_kprintf>
  125da8:	e300136d 	movw	r1, #877	; 0x36d
  125dac:	e3080620 	movw	r0, #34336	; 0x8620
  125db0:	e3400014 	movt	r0, #20
  125db4:	ebff94c9 	bl	10b0e0 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125db8:	e3a03000 	mov	r3, #0
}
  125dbc:	e1a00003 	mov	r0, r3
  125dc0:	e24bd004 	sub	sp, fp, #4
  125dc4:	e8bd8800 	pop	{fp, pc}

00125dc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125dc8:	e92d4810 	push	{r4, fp, lr}
  125dcc:	e28db008 	add	fp, sp, #8
  125dd0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125dd4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125dd8:	e3a03000 	mov	r3, #0
  125ddc:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125de0:	e55b300e 	ldrb	r3, [fp, #-14]
  125de4:	e6ff4073 	uxth	r4, r3
  125de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125dec:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125df0:	e1a00003 	mov	r0, r3
  125df4:	ebffc1fe 	bl	1165f4 <lwip_htonl>
  125df8:	e1a03000 	mov	r3, r0
  125dfc:	e3a02000 	mov	r2, #0
  125e00:	e1a01004 	mov	r1, r4
  125e04:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125e08:	ebfffa36 	bl	1246e8 <tcp_output_alloc_header>
  125e0c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e14:	e3530000 	cmp	r3, #0
  125e18:	1a000007 	bne	125e3c <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125e1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e20:	e5d3301e 	ldrb	r3, [r3, #30]
  125e24:	e3833003 	orr	r3, r3, #3
  125e28:	e6ef2073 	uxtb	r2, r3
  125e2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e30:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125e34:	e3e03001 	mvn	r3, #1
  125e38:	ea000040 	b	125f40 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125e3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e40:	e5933004 	ldr	r3, [r3, #4]
  125e44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125e48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e4c:	e2833004 	add	r3, r3, #4
  125e50:	e1a00003 	mov	r0, r3
  125e54:	eb002cca 	bl	131184 <ip4_route>
  125e58:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125e5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e60:	e3530000 	cmp	r3, #0
  125e64:	1a000002 	bne	125e74 <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125e68:	e3e03003 	mvn	r3, #3
  125e6c:	e54b300d 	strb	r3, [fp, #-13]
  125e70:	ea00001f 	b	125ef4 <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125e74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e78:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125e7c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125e80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e84:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125e88:	e58d3000 	str	r3, [sp]
  125e8c:	e1a03001 	mov	r3, r1
  125e90:	e3a01006 	mov	r1, #6
  125e94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125e98:	ebffc9e8 	bl	118640 <ip_chksum_pseudo>
  125e9c:	e1a03000 	mov	r3, r0
  125ea0:	e1a02003 	mov	r2, r3
  125ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125ea8:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125eac:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125eb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125eb4:	e2830004 	add	r0, r3, #4
  125eb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ebc:	e5d3c00a 	ldrb	ip, [r3, #10]
  125ec0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ec4:	e5d33009 	ldrb	r3, [r3, #9]
  125ec8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125ecc:	e58d2008 	str	r2, [sp, #8]
  125ed0:	e3a02006 	mov	r2, #6
  125ed4:	e58d2004 	str	r2, [sp, #4]
  125ed8:	e58d3000 	str	r3, [sp]
  125edc:	e1a0300c 	mov	r3, ip
  125ee0:	e1a02000 	mov	r2, r0
  125ee4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125ee8:	eb002f7e 	bl	131ce8 <ip4_output_if>
  125eec:	e1a03000 	mov	r3, r0
  125ef0:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125ef4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125ef8:	ebffd3e8 	bl	11aea0 <pbuf_free>

  if (err != ERR_OK) {
  125efc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125f00:	e3530000 	cmp	r3, #0
  125f04:	0a000006 	beq	125f24 <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125f08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f0c:	e5d3301e 	ldrb	r3, [r3, #30]
  125f10:	e3833003 	orr	r3, r3, #3
  125f14:	e6ef2073 	uxtb	r2, r3
  125f18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f1c:	e5c3201e 	strb	r2, [r3, #30]
  125f20:	ea000005 	b	125f3c <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125f24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f28:	e5d3301e 	ldrb	r3, [r3, #30]
  125f2c:	e3c33003 	bic	r3, r3, #3
  125f30:	e6ef2073 	uxtb	r2, r3
  125f34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f38:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125f3c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125f40:	e1a00003 	mov	r0, r3
  125f44:	e24bd008 	sub	sp, fp, #8
  125f48:	e8bd8810 	pop	{r4, fp, pc}

00125f4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125f4c:	e92d4830 	push	{r4, r5, fp, lr}
  125f50:	e28db00c 	add	fp, sp, #12
  125f54:	e24dd028 	sub	sp, sp, #40	; 0x28
  125f58:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125f5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f60:	e5933014 	ldr	r3, [r3, #20]
  125f64:	e3530001 	cmp	r3, #1
  125f68:	1a000006 	bne	125f88 <tcp_output+0x3c>
  125f6c:	e30809c8 	movw	r0, #35272	; 0x89c8
  125f70:	e3400014 	movt	r0, #20
  125f74:	ebff7466 	bl	103114 <rt_kprintf>
  125f78:	e30013ed 	movw	r1, #1005	; 0x3ed
  125f7c:	e3080620 	movw	r0, #34336	; 0x8620
  125f80:	e3400014 	movt	r0, #20
  125f84:	ebff9455 	bl	10b0e0 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125f88:	e30c3c54 	movw	r3, #52308	; 0xcc54
  125f8c:	e3403015 	movt	r3, #21
  125f90:	e5933000 	ldr	r3, [r3]
  125f94:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125f98:	e1520003 	cmp	r2, r3
  125f9c:	1a000001 	bne	125fa8 <tcp_output+0x5c>
    return ERR_OK;
  125fa0:	e3a03000 	mov	r3, #0
  125fa4:	ea000196 	b	126604 <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125fa8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fac:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125fb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fb4:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125fb8:	e1520003 	cmp	r2, r3
  125fbc:	2a000002 	bcs	125fcc <tcp_output+0x80>
  125fc0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fc4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125fc8:	ea000001 	b	125fd4 <tcp_output+0x88>
  125fcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fd0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125fd4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125fd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fdc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125fe0:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125fe4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fe8:	e5d3301e 	ldrb	r3, [r3, #30]
  125fec:	e2033002 	and	r3, r3, #2
  125ff0:	e3530000 	cmp	r3, #0
  125ff4:	0a000015 	beq	126050 <tcp_output+0x104>
  125ff8:	e51b3010 	ldr	r3, [fp, #-16]
  125ffc:	e3530000 	cmp	r3, #0
  126000:	0a00000e 	beq	126040 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  126004:	e51b3010 	ldr	r3, [fp, #-16]
  126008:	e593300c 	ldr	r3, [r3, #12]
  12600c:	e5933004 	ldr	r3, [r3, #4]
  126010:	e1a00003 	mov	r0, r3
  126014:	ebffc176 	bl	1165f4 <lwip_htonl>
  126018:	e1a02000 	mov	r2, r0
  12601c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126020:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126024:	e0423003 	sub	r3, r2, r3
  126028:	e51b2010 	ldr	r2, [fp, #-16]
  12602c:	e1d220b8 	ldrh	r2, [r2, #8]
  126030:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  126034:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126038:	e1520003 	cmp	r2, r3
  12603c:	2a000003 	bcs	126050 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  126040:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126044:	ebffff5f 	bl	125dc8 <tcp_send_empty_ack>
  126048:	e1a03000 	mov	r3, r0
  12604c:	ea00016c 	b	126604 <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  126050:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126054:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126058:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  12605c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126060:	e3530000 	cmp	r3, #0
  126064:	0a000007 	beq	126088 <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  126068:	ea000002 	b	126078 <tcp_output+0x12c>
  12606c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126070:	e5933000 	ldr	r3, [r3]
  126074:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12607c:	e5933000 	ldr	r3, [r3]
  126080:	e3530000 	cmp	r3, #0
  126084:	1afffff8 	bne	12606c <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126088:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12608c:	e2833004 	add	r3, r3, #4
  126090:	e1a00003 	mov	r0, r3
  126094:	eb002c3a 	bl	131184 <ip4_route>
  126098:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  12609c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260a0:	e3530000 	cmp	r3, #0
  1260a4:	1a000001 	bne	1260b0 <tcp_output+0x164>
    return ERR_RTE;
  1260a8:	e3e03003 	mvn	r3, #3
  1260ac:	ea000154 	b	126604 <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  1260b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260b4:	e3530000 	cmp	r3, #0
  1260b8:	0a000003 	beq	1260cc <tcp_output+0x180>
  1260bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260c0:	e5933000 	ldr	r3, [r3]
  1260c4:	e3530000 	cmp	r3, #0
  1260c8:	1a000010 	bne	126110 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  1260cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260d0:	e3530000 	cmp	r3, #0
  1260d4:	0a000002 	beq	1260e4 <tcp_output+0x198>
  1260d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260dc:	e2833004 	add	r3, r3, #4
  1260e0:	ea000000 	b	1260e8 <tcp_output+0x19c>
  1260e4:	e3a03000 	mov	r3, #0
  1260e8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  1260ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1260f0:	e3530000 	cmp	r3, #0
  1260f4:	1a000001 	bne	126100 <tcp_output+0x1b4>
      return ERR_RTE;
  1260f8:	e3e03003 	mvn	r3, #3
  1260fc:	ea000140 	b	126604 <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  126100:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126104:	e5932000 	ldr	r2, [r3]
  126108:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12610c:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  126110:	e51b3010 	ldr	r3, [fp, #-16]
  126114:	e3530000 	cmp	r3, #0
  126118:	0a000113 	beq	12656c <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  12611c:	e51b3010 	ldr	r3, [fp, #-16]
  126120:	e593300c 	ldr	r3, [r3, #12]
  126124:	e5933004 	ldr	r3, [r3, #4]
  126128:	e1a00003 	mov	r0, r3
  12612c:	ebffc130 	bl	1165f4 <lwip_htonl>
  126130:	e1a02000 	mov	r2, r0
  126134:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126138:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12613c:	e0423003 	sub	r3, r2, r3
  126140:	e51b2010 	ldr	r2, [fp, #-16]
  126144:	e1d220b8 	ldrh	r2, [r2, #8]
  126148:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  12614c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126150:	e1520003 	cmp	r2, r3
  126154:	2a000104 	bcs	12656c <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  126158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12615c:	e3530000 	cmp	r3, #0
  126160:	0a000101 	beq	12656c <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  126164:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126168:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12616c:	e1a02003 	mov	r2, r3
  126170:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126174:	e1530002 	cmp	r3, r2
  126178:	1a0000fb 	bne	12656c <tcp_output+0x620>
  12617c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126180:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126184:	e3530000 	cmp	r3, #0
  126188:	1a0000f7 	bne	12656c <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  12618c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126190:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  126194:	e3530000 	cmp	r3, #0
  126198:	1a000106 	bne	1265b8 <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  12619c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261a0:	e3a02000 	mov	r2, #0
  1261a4:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  1261a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261ac:	e3a02001 	mov	r2, #1
  1261b0:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  1261b4:	ea0000ff 	b	1265b8 <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  1261b8:	e51b3010 	ldr	r3, [fp, #-16]
  1261bc:	e593300c 	ldr	r3, [r3, #12]
  1261c0:	e1d330bc 	ldrh	r3, [r3, #12]
  1261c4:	e6ff3073 	uxth	r3, r3
  1261c8:	e1a00003 	mov	r0, r3
  1261cc:	ebffc0fc 	bl	1165c4 <lwip_htons>
  1261d0:	e1a03000 	mov	r3, r0
  1261d4:	e2033004 	and	r3, r3, #4
  1261d8:	e3530000 	cmp	r3, #0
  1261dc:	0a000006 	beq	1261fc <tcp_output+0x2b0>
  1261e0:	e30809f0 	movw	r0, #35312	; 0x89f0
  1261e4:	e3400014 	movt	r0, #20
  1261e8:	ebff73c9 	bl	103114 <rt_kprintf>
  1261ec:	e3001446 	movw	r1, #1094	; 0x446
  1261f0:	e3080620 	movw	r0, #34336	; 0x8620
  1261f4:	e3400014 	movt	r0, #20
  1261f8:	ebff93b8 	bl	10b0e0 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  1261fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126200:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126204:	e3530000 	cmp	r3, #0
  126208:	0a00001c 	beq	126280 <tcp_output+0x334>
  12620c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126210:	e5d3301e 	ldrb	r3, [r3, #30]
  126214:	e2033044 	and	r3, r3, #68	; 0x44
  126218:	e3530000 	cmp	r3, #0
  12621c:	1a000017 	bne	126280 <tcp_output+0x334>
  126220:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126224:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126228:	e3530000 	cmp	r3, #0
  12622c:	0a00000b 	beq	126260 <tcp_output+0x314>
  126230:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126234:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126238:	e5933000 	ldr	r3, [r3]
  12623c:	e3530000 	cmp	r3, #0
  126240:	1a00000e 	bne	126280 <tcp_output+0x334>
  126244:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126248:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12624c:	e1d320b8 	ldrh	r2, [r3, #8]
  126250:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126254:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126258:	e1520003 	cmp	r2, r3
  12625c:	2a000007 	bcs	126280 <tcp_output+0x334>
  126260:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126264:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  126268:	e3530000 	cmp	r3, #0
  12626c:	0a000003 	beq	126280 <tcp_output+0x334>
  126270:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126274:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  126278:	e3530015 	cmp	r3, #21
  12627c:	9a000001 	bls	126288 <tcp_output+0x33c>
  126280:	e3a03001 	mov	r3, #1
  126284:	ea000000 	b	12628c <tcp_output+0x340>
  126288:	e3a03000 	mov	r3, #0
  12628c:	e3530000 	cmp	r3, #0
  126290:	1a000004 	bne	1262a8 <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  126294:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126298:	e5d3301e 	ldrb	r3, [r3, #30]
  12629c:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  1262a0:	e3530000 	cmp	r3, #0
  1262a4:	0a0000c5 	beq	1265c0 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  1262a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262ac:	e5933014 	ldr	r3, [r3, #20]
  1262b0:	e3530002 	cmp	r3, #2
  1262b4:	0a00000c 	beq	1262ec <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  1262b8:	e51b3010 	ldr	r3, [fp, #-16]
  1262bc:	e593300c 	ldr	r3, [r3, #12]
  1262c0:	e1d330bc 	ldrh	r3, [r3, #12]
  1262c4:	e6ff4073 	uxth	r4, r3
  1262c8:	e3a00010 	mov	r0, #16
  1262cc:	ebffc0bc 	bl	1165c4 <lwip_htons>
  1262d0:	e1a03000 	mov	r3, r0
  1262d4:	e1a02003 	mov	r2, r3
  1262d8:	e51b3010 	ldr	r3, [fp, #-16]
  1262dc:	e593300c 	ldr	r3, [r3, #12]
  1262e0:	e1842002 	orr	r2, r4, r2
  1262e4:	e6ff2072 	uxth	r2, r2
  1262e8:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  1262ec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1262f0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  1262f4:	e51b0010 	ldr	r0, [fp, #-16]
  1262f8:	eb0000c4 	bl	126610 <tcp_output_segment>
  1262fc:	e1a03000 	mov	r3, r0
  126300:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  126304:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126308:	e3530000 	cmp	r3, #0
  12630c:	0a000008 	beq	126334 <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  126310:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126314:	e5d3301e 	ldrb	r3, [r3, #30]
  126318:	e1e03c83 	mvn	r3, r3, lsl #25
  12631c:	e1e03ca3 	mvn	r3, r3, lsr #25
  126320:	e6ef2073 	uxtb	r2, r3
  126324:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126328:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  12632c:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126330:	ea0000b3 	b	126604 <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  126334:	e51b3010 	ldr	r3, [fp, #-16]
  126338:	e5932000 	ldr	r2, [r3]
  12633c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126340:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  126344:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126348:	e5933014 	ldr	r3, [r3, #20]
  12634c:	e3530002 	cmp	r3, #2
  126350:	0a000005 	beq	12636c <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  126354:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126358:	e5d3301e 	ldrb	r3, [r3, #30]
  12635c:	e3c33003 	bic	r3, r3, #3
  126360:	e6ef2073 	uxtb	r2, r3
  126364:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126368:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  12636c:	e51b3010 	ldr	r3, [fp, #-16]
  126370:	e593300c 	ldr	r3, [r3, #12]
  126374:	e5933004 	ldr	r3, [r3, #4]
  126378:	e1a00003 	mov	r0, r3
  12637c:	ebffc09c 	bl	1165f4 <lwip_htonl>
  126380:	e1a04000 	mov	r4, r0
  126384:	e51b3010 	ldr	r3, [fp, #-16]
  126388:	e1d330b8 	ldrh	r3, [r3, #8]
  12638c:	e1a05003 	mov	r5, r3
  126390:	e51b3010 	ldr	r3, [fp, #-16]
  126394:	e593300c 	ldr	r3, [r3, #12]
  126398:	e1d330bc 	ldrh	r3, [r3, #12]
  12639c:	e6ff3073 	uxth	r3, r3
  1263a0:	e1a00003 	mov	r0, r3
  1263a4:	ebffc086 	bl	1165c4 <lwip_htons>
  1263a8:	e1a03000 	mov	r3, r0
  1263ac:	e2033003 	and	r3, r3, #3
  1263b0:	e3530000 	cmp	r3, #0
  1263b4:	0a000001 	beq	1263c0 <tcp_output+0x474>
  1263b8:	e3a03001 	mov	r3, #1
  1263bc:	ea000000 	b	1263c4 <tcp_output+0x478>
  1263c0:	e3a03000 	mov	r3, #0
  1263c4:	e0833005 	add	r3, r3, r5
  1263c8:	e0843003 	add	r3, r4, r3
  1263cc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1263d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263d4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1263d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1263dc:	e0423003 	sub	r3, r2, r3
  1263e0:	e3530000 	cmp	r3, #0
  1263e4:	aa000002 	bge	1263f4 <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  1263e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263ec:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1263f0:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  1263f4:	e51b3010 	ldr	r3, [fp, #-16]
  1263f8:	e1d330b8 	ldrh	r3, [r3, #8]
  1263fc:	e1a04003 	mov	r4, r3
  126400:	e51b3010 	ldr	r3, [fp, #-16]
  126404:	e593300c 	ldr	r3, [r3, #12]
  126408:	e1d330bc 	ldrh	r3, [r3, #12]
  12640c:	e6ff3073 	uxth	r3, r3
  126410:	e1a00003 	mov	r0, r3
  126414:	ebffc06a 	bl	1165c4 <lwip_htons>
  126418:	e1a03000 	mov	r3, r0
  12641c:	e2033003 	and	r3, r3, #3
  126420:	e3530000 	cmp	r3, #0
  126424:	0a000001 	beq	126430 <tcp_output+0x4e4>
  126428:	e3a03001 	mov	r3, #1
  12642c:	ea000000 	b	126434 <tcp_output+0x4e8>
  126430:	e3a03000 	mov	r3, #0
  126434:	e0833004 	add	r3, r3, r4
  126438:	e3530000 	cmp	r3, #0
  12643c:	0a000045 	beq	126558 <tcp_output+0x60c>
      seg->next = NULL;
  126440:	e51b3010 	ldr	r3, [fp, #-16]
  126444:	e3a02000 	mov	r2, #0
  126448:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  12644c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126450:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126454:	e3530000 	cmp	r3, #0
  126458:	1a000005 	bne	126474 <tcp_output+0x528>
        pcb->unacked = seg;
  12645c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126460:	e51b2010 	ldr	r2, [fp, #-16]
  126464:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  126468:	e51b3010 	ldr	r3, [fp, #-16]
  12646c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126470:	ea00003a 	b	126560 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  126474:	e51b3010 	ldr	r3, [fp, #-16]
  126478:	e593300c 	ldr	r3, [r3, #12]
  12647c:	e5933004 	ldr	r3, [r3, #4]
  126480:	e1a00003 	mov	r0, r3
  126484:	ebffc05a 	bl	1165f4 <lwip_htonl>
  126488:	e1a04000 	mov	r4, r0
  12648c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126490:	e593300c 	ldr	r3, [r3, #12]
  126494:	e5933004 	ldr	r3, [r3, #4]
  126498:	e1a00003 	mov	r0, r3
  12649c:	ebffc054 	bl	1165f4 <lwip_htonl>
  1264a0:	e1a03000 	mov	r3, r0
  1264a4:	e0443003 	sub	r3, r4, r3
  1264a8:	e3530000 	cmp	r3, #0
  1264ac:	aa000022 	bge	12653c <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  1264b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1264b4:	e2833070 	add	r3, r3, #112	; 0x70
  1264b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1264bc:	ea000002 	b	1264cc <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  1264c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264c4:	e5933000 	ldr	r3, [r3]
  1264c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1264cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264d0:	e5933000 	ldr	r3, [r3]
  1264d4:	e3530000 	cmp	r3, #0
  1264d8:	0a00000f 	beq	12651c <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1264dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264e0:	e5933000 	ldr	r3, [r3]
  1264e4:	e593300c 	ldr	r3, [r3, #12]
  1264e8:	e5933004 	ldr	r3, [r3, #4]
  1264ec:	e1a00003 	mov	r0, r3
  1264f0:	ebffc03f 	bl	1165f4 <lwip_htonl>
  1264f4:	e1a04000 	mov	r4, r0
  1264f8:	e51b3010 	ldr	r3, [fp, #-16]
  1264fc:	e593300c 	ldr	r3, [r3, #12]
  126500:	e5933004 	ldr	r3, [r3, #4]
  126504:	e1a00003 	mov	r0, r3
  126508:	ebffc039 	bl	1165f4 <lwip_htonl>
  12650c:	e1a03000 	mov	r3, r0
  126510:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  126514:	e3530000 	cmp	r3, #0
  126518:	baffffe8 	blt	1264c0 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  12651c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126520:	e5932000 	ldr	r2, [r3]
  126524:	e51b3010 	ldr	r3, [fp, #-16]
  126528:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  12652c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126530:	e51b2010 	ldr	r2, [fp, #-16]
  126534:	e5832000 	str	r2, [r3]
  126538:	ea000008 	b	126560 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  12653c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126540:	e51b2010 	ldr	r2, [fp, #-16]
  126544:	e5832000 	str	r2, [r3]
          useg = useg->next;
  126548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12654c:	e5933000 	ldr	r3, [r3]
  126550:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126554:	ea000001 	b	126560 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  126558:	e51b0010 	ldr	r0, [fp, #-16]
  12655c:	ebffe3c3 	bl	11f470 <tcp_seg_free>
    }
    seg = pcb->unsent;
  126560:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126564:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126568:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  12656c:	e51b3010 	ldr	r3, [fp, #-16]
  126570:	e3530000 	cmp	r3, #0
  126574:	0a000013 	beq	1265c8 <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  126578:	e51b3010 	ldr	r3, [fp, #-16]
  12657c:	e593300c 	ldr	r3, [r3, #12]
  126580:	e5933004 	ldr	r3, [r3, #4]
  126584:	e1a00003 	mov	r0, r3
  126588:	ebffc019 	bl	1165f4 <lwip_htonl>
  12658c:	e1a02000 	mov	r2, r0
  126590:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126594:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126598:	e0423003 	sub	r3, r2, r3
  12659c:	e51b2010 	ldr	r2, [fp, #-16]
  1265a0:	e1d220b8 	ldrh	r2, [r2, #8]
  1265a4:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  1265a8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1265ac:	e1520003 	cmp	r2, r3
  1265b0:	2affff00 	bcs	1261b8 <tcp_output+0x26c>
  }
output_done:
  1265b4:	ea000003 	b	1265c8 <tcp_output+0x67c>
    goto output_done;
  1265b8:	e320f000 	nop	{0}
  1265bc:	ea000002 	b	1265cc <tcp_output+0x680>
      break;
  1265c0:	e320f000 	nop	{0}
  1265c4:	ea000000 	b	1265cc <tcp_output+0x680>
output_done:
  1265c8:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  1265cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265d0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1265d4:	e3530000 	cmp	r3, #0
  1265d8:	1a000002 	bne	1265e8 <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1265dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265e0:	e3a02000 	mov	r2, #0
  1265e4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  1265e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265ec:	e5d3301e 	ldrb	r3, [r3, #30]
  1265f0:	e203307f 	and	r3, r3, #127	; 0x7f
  1265f4:	e6ef2073 	uxtb	r2, r3
  1265f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265fc:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  126600:	e3a03000 	mov	r3, #0
}
  126604:	e1a00003 	mov	r0, r3
  126608:	e24bd00c 	sub	sp, fp, #12
  12660c:	e8bd8830 	pop	{r4, r5, fp, pc}

00126610 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  126610:	e92d4810 	push	{r4, fp, lr}
  126614:	e28db008 	add	fp, sp, #8
  126618:	e24dd034 	sub	sp, sp, #52	; 0x34
  12661c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  126620:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  126624:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  126628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12662c:	e5933004 	ldr	r3, [r3, #4]
  126630:	e1d330be 	ldrh	r3, [r3, #14]
  126634:	e3530001 	cmp	r3, #1
  126638:	0a000001 	beq	126644 <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  12663c:	e3a03000 	mov	r3, #0
  126640:	ea0000a4 	b	1268d8 <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  126644:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126648:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12664c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126650:	e593400c 	ldr	r4, [r3, #12]
  126654:	e1a00002 	mov	r0, r2
  126658:	ebffbfe5 	bl	1165f4 <lwip_htonl>
  12665c:	e1a03000 	mov	r3, r0
  126660:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  126664:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126668:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  12666c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126670:	e593400c 	ldr	r4, [r3, #12]
  126674:	e1a00002 	mov	r0, r2
  126678:	ebffbfd1 	bl	1165c4 <lwip_htons>
  12667c:	e1a03000 	mov	r3, r0
  126680:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  126684:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126688:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12668c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126690:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  126694:	e0832002 	add	r2, r3, r2
  126698:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12669c:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  1266a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1266a4:	e593300c 	ldr	r3, [r3, #12]
  1266a8:	e2833014 	add	r3, r3, #20
  1266ac:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  1266b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1266b4:	e5d3300a 	ldrb	r3, [r3, #10]
  1266b8:	e2033001 	and	r3, r3, #1
  1266bc:	e3530000 	cmp	r3, #0
  1266c0:	0a000010 	beq	126708 <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  1266c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266c8:	e2833004 	add	r3, r3, #4
  1266cc:	e1a01003 	mov	r1, r3
  1266d0:	e30005b4 	movw	r0, #1460	; 0x5b4
  1266d4:	ebffe665 	bl	120070 <tcp_eff_send_mss_impl>
  1266d8:	e1a03000 	mov	r3, r0
  1266dc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  1266e0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1266e4:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  1266e8:	e1a00003 	mov	r0, r3
  1266ec:	ebffbfc0 	bl	1165f4 <lwip_htonl>
  1266f0:	e1a02000 	mov	r2, r0
  1266f4:	e51b3010 	ldr	r3, [fp, #-16]
  1266f8:	e5832000 	str	r2, [r3]
    opts += 1;
  1266fc:	e51b3010 	ldr	r3, [fp, #-16]
  126700:	e2833004 	add	r3, r3, #4
  126704:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  126708:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12670c:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  126710:	e3530000 	cmp	r3, #0
  126714:	aa000002 	bge	126724 <tcp_output_segment+0x114>
    pcb->rtime = 0;
  126718:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12671c:	e3a02000 	mov	r2, #0
  126720:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  126724:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126728:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12672c:	e3530000 	cmp	r3, #0
  126730:	1a00000c 	bne	126768 <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  126734:	e30c3c44 	movw	r3, #52292	; 0xcc44
  126738:	e3403015 	movt	r3, #21
  12673c:	e5932000 	ldr	r2, [r3]
  126740:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126744:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  126748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12674c:	e593300c 	ldr	r3, [r3, #12]
  126750:	e5933004 	ldr	r3, [r3, #4]
  126754:	e1a00003 	mov	r0, r3
  126758:	ebffbfa5 	bl	1165f4 <lwip_htonl>
  12675c:	e1a02000 	mov	r2, r0
  126760:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126764:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  126768:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12676c:	e593300c 	ldr	r3, [r3, #12]
  126770:	e1a02003 	mov	r2, r3
  126774:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126778:	e5933004 	ldr	r3, [r3, #4]
  12677c:	e5933004 	ldr	r3, [r3, #4]
  126780:	e0423003 	sub	r3, r2, r3
  126784:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  126788:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  12678c:	e3530000 	cmp	r3, #0
  126790:	1a000006 	bne	1267b0 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  126794:	e30c3a50 	movw	r3, #51792	; 0xca50
  126798:	e3403015 	movt	r3, #21
  12679c:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  1267a0:	e2832001 	add	r2, r3, #1
  1267a4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1267a8:	e3403015 	movt	r3, #21
  1267ac:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  1267b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267b4:	e5933004 	ldr	r3, [r3, #4]
  1267b8:	e1d310ba 	ldrh	r1, [r3, #10]
  1267bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267c0:	e5933004 	ldr	r3, [r3, #4]
  1267c4:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1267c8:	e0412002 	sub	r2, r1, r2
  1267cc:	e6ff2072 	uxth	r2, r2
  1267d0:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  1267d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267d8:	e5933004 	ldr	r3, [r3, #4]
  1267dc:	e1d310b8 	ldrh	r1, [r3, #8]
  1267e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267e4:	e5933004 	ldr	r3, [r3, #4]
  1267e8:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1267ec:	e0412002 	sub	r2, r1, r2
  1267f0:	e6ff2072 	uxth	r2, r2
  1267f4:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  1267f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267fc:	e5933004 	ldr	r3, [r3, #4]
  126800:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126804:	e592200c 	ldr	r2, [r2, #12]
  126808:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  12680c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126810:	e593300c 	ldr	r3, [r3, #12]
  126814:	e3a02000 	mov	r2, #0
  126818:	e5c32010 	strb	r2, [r3, #16]
  12681c:	e3a02000 	mov	r2, #0
  126820:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126824:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126828:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  12682c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126830:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126834:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126838:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  12683c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126840:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126844:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126848:	e592400c 	ldr	r4, [r2, #12]
  12684c:	e58d3000 	str	r3, [sp]
  126850:	e1a0300c 	mov	r3, ip
  126854:	e1a02001 	mov	r2, r1
  126858:	e3a01006 	mov	r1, #6
  12685c:	ebffc777 	bl	118640 <ip_chksum_pseudo>
  126860:	e1a03000 	mov	r3, r0
  126864:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  126868:	e30c3a50 	movw	r3, #51792	; 0xca50
  12686c:	e3403015 	movt	r3, #21
  126870:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126874:	e2833001 	add	r3, r3, #1
  126878:	e6ff2073 	uxth	r2, r3
  12687c:	e30c3a50 	movw	r3, #51792	; 0xca50
  126880:	e3403015 	movt	r3, #21
  126884:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126888:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12688c:	e5930004 	ldr	r0, [r3, #4]
  126890:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126894:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126898:	e283c004 	add	ip, r3, #4
  12689c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268a0:	e5d3e00a 	ldrb	lr, [r3, #10]
  1268a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268a8:	e5d33009 	ldrb	r3, [r3, #9]
  1268ac:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1268b0:	e58d2008 	str	r2, [sp, #8]
  1268b4:	e3a02006 	mov	r2, #6
  1268b8:	e58d2004 	str	r2, [sp, #4]
  1268bc:	e58d3000 	str	r3, [sp]
  1268c0:	e1a0300e 	mov	r3, lr
  1268c4:	e1a0200c 	mov	r2, ip
  1268c8:	eb002d06 	bl	131ce8 <ip4_output_if>
  1268cc:	e1a03000 	mov	r3, r0
  1268d0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  1268d4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  1268d8:	e1a00003 	mov	r0, r3
  1268dc:	e24bd008 	sub	sp, fp, #8
  1268e0:	e8bd8810 	pop	{r4, fp, pc}

001268e4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  1268e4:	e92d4800 	push	{fp, lr}
  1268e8:	e28db004 	add	fp, sp, #4
  1268ec:	e24dd030 	sub	sp, sp, #48	; 0x30
  1268f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1268f4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1268f8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1268fc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  126900:	e3a02000 	mov	r2, #0
  126904:	e3a01014 	mov	r1, #20
  126908:	e3a00001 	mov	r0, #1
  12690c:	ebffce5c 	bl	11a284 <pbuf_alloc>
  126910:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  126914:	e51b3008 	ldr	r3, [fp, #-8]
  126918:	e3530000 	cmp	r3, #0
  12691c:	0a00006a 	beq	126acc <tcp_rst+0x1e8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  126920:	e51b3008 	ldr	r3, [fp, #-8]
  126924:	e1d330ba 	ldrh	r3, [r3, #10]
  126928:	e3530013 	cmp	r3, #19
  12692c:	8a000006 	bhi	12694c <tcp_rst+0x68>
  126930:	e30805f0 	movw	r0, #34288	; 0x85f0
  126934:	e3400014 	movt	r0, #20
  126938:	ebff71f5 	bl	103114 <rt_kprintf>
  12693c:	e300154d 	movw	r1, #1357	; 0x54d
  126940:	e3080620 	movw	r0, #34336	; 0x8620
  126944:	e3400014 	movt	r0, #20
  126948:	ebff91e4 	bl	10b0e0 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  12694c:	e51b3008 	ldr	r3, [fp, #-8]
  126950:	e5933004 	ldr	r3, [r3, #4]
  126954:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  126958:	e1db30b4 	ldrh	r3, [fp, #4]
  12695c:	e1a00003 	mov	r0, r3
  126960:	ebffbf17 	bl	1165c4 <lwip_htons>
  126964:	e1a03000 	mov	r3, r0
  126968:	e1a02003 	mov	r2, r3
  12696c:	e51b300c 	ldr	r3, [fp, #-12]
  126970:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  126974:	e1db30b8 	ldrh	r3, [fp, #8]
  126978:	e1a00003 	mov	r0, r3
  12697c:	ebffbf10 	bl	1165c4 <lwip_htons>
  126980:	e1a03000 	mov	r3, r0
  126984:	e1a02003 	mov	r2, r3
  126988:	e51b300c 	ldr	r3, [fp, #-12]
  12698c:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  126990:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126994:	ebffbf16 	bl	1165f4 <lwip_htonl>
  126998:	e1a02000 	mov	r2, r0
  12699c:	e51b300c 	ldr	r3, [fp, #-12]
  1269a0:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  1269a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1269a8:	ebffbf11 	bl	1165f4 <lwip_htonl>
  1269ac:	e1a02000 	mov	r2, r0
  1269b0:	e51b300c 	ldr	r3, [fp, #-12]
  1269b4:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  1269b8:	e3050014 	movw	r0, #20500	; 0x5014
  1269bc:	ebffbf00 	bl	1165c4 <lwip_htons>
  1269c0:	e1a03000 	mov	r3, r0
  1269c4:	e1a02003 	mov	r2, r3
  1269c8:	e51b300c 	ldr	r3, [fp, #-12]
  1269cc:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  1269d0:	e51b300c 	ldr	r3, [fp, #-12]
  1269d4:	e3a02000 	mov	r2, #0
  1269d8:	e3822020 	orr	r2, r2, #32
  1269dc:	e5c3200e 	strb	r2, [r3, #14]
  1269e0:	e3a02000 	mov	r2, #0
  1269e4:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  1269e8:	e51b300c 	ldr	r3, [fp, #-12]
  1269ec:	e3a02000 	mov	r2, #0
  1269f0:	e5c32010 	strb	r2, [r3, #16]
  1269f4:	e3a02000 	mov	r2, #0
  1269f8:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  1269fc:	e51b300c 	ldr	r3, [fp, #-12]
  126a00:	e3a02000 	mov	r2, #0
  126a04:	e5c32012 	strb	r2, [r3, #18]
  126a08:	e3a02000 	mov	r2, #0
  126a0c:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  126a10:	e30c3a50 	movw	r3, #51792	; 0xca50
  126a14:	e3403015 	movt	r3, #21
  126a18:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126a1c:	e2833001 	add	r3, r3, #1
  126a20:	e6ff2073 	uxth	r2, r3
  126a24:	e30c3a50 	movw	r3, #51792	; 0xca50
  126a28:	e3403015 	movt	r3, #21
  126a2c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126a30:	e30c3a50 	movw	r3, #51792	; 0xca50
  126a34:	e3403015 	movt	r3, #21
  126a38:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  126a3c:	e2832001 	add	r2, r3, #1
  126a40:	e30c3a50 	movw	r3, #51792	; 0xca50
  126a44:	e3403015 	movt	r3, #21
  126a48:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  126a4c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  126a50:	eb0029cb 	bl	131184 <ip4_route>
  126a54:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  126a58:	e51b3010 	ldr	r3, [fp, #-16]
  126a5c:	e3530000 	cmp	r3, #0
  126a60:	0a000016 	beq	126ac0 <tcp_rst+0x1dc>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126a64:	e51b3008 	ldr	r3, [fp, #-8]
  126a68:	e1d320b8 	ldrh	r2, [r3, #8]
  126a6c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126a70:	e58d3000 	str	r3, [sp]
  126a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a78:	e3a01006 	mov	r1, #6
  126a7c:	e51b0008 	ldr	r0, [fp, #-8]
  126a80:	ebffc6ee 	bl	118640 <ip_chksum_pseudo>
  126a84:	e1a03000 	mov	r3, r0
  126a88:	e1a02003 	mov	r2, r3
  126a8c:	e51b300c 	ldr	r3, [fp, #-12]
  126a90:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  126a94:	e51b3010 	ldr	r3, [fp, #-16]
  126a98:	e58d3008 	str	r3, [sp, #8]
  126a9c:	e3a03006 	mov	r3, #6
  126aa0:	e58d3004 	str	r3, [sp, #4]
  126aa4:	e3a03000 	mov	r3, #0
  126aa8:	e58d3000 	str	r3, [sp]
  126aac:	e3a030ff 	mov	r3, #255	; 0xff
  126ab0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126ab4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  126ab8:	e51b0008 	ldr	r0, [fp, #-8]
  126abc:	eb002c89 	bl	131ce8 <ip4_output_if>
  }
  pbuf_free(p);
  126ac0:	e51b0008 	ldr	r0, [fp, #-8]
  126ac4:	ebffd0f5 	bl	11aea0 <pbuf_free>
  126ac8:	ea000000 	b	126ad0 <tcp_rst+0x1ec>
    return;
  126acc:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126ad0:	e24bd004 	sub	sp, fp, #4
  126ad4:	e8bd8800 	pop	{fp, pc}

00126ad8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  126ad8:	e92d4800 	push	{fp, lr}
  126adc:	e28db004 	add	fp, sp, #4
  126ae0:	e24dd010 	sub	sp, sp, #16
  126ae4:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  126ae8:	e51b3010 	ldr	r3, [fp, #-16]
  126aec:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126af0:	e3530000 	cmp	r3, #0
  126af4:	0a000025 	beq	126b90 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  126af8:	e51b3010 	ldr	r3, [fp, #-16]
  126afc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126b00:	e50b3008 	str	r3, [fp, #-8]
  126b04:	ea000002 	b	126b14 <tcp_rexmit_rto+0x3c>
  126b08:	e51b3008 	ldr	r3, [fp, #-8]
  126b0c:	e5933000 	ldr	r3, [r3]
  126b10:	e50b3008 	str	r3, [fp, #-8]
  126b14:	e51b3008 	ldr	r3, [fp, #-8]
  126b18:	e5933000 	ldr	r3, [r3]
  126b1c:	e3530000 	cmp	r3, #0
  126b20:	1afffff8 	bne	126b08 <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  126b24:	e51b3010 	ldr	r3, [fp, #-16]
  126b28:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126b2c:	e51b3008 	ldr	r3, [fp, #-8]
  126b30:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  126b34:	e51b3010 	ldr	r3, [fp, #-16]
  126b38:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  126b3c:	e51b3010 	ldr	r3, [fp, #-16]
  126b40:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  126b44:	e51b3010 	ldr	r3, [fp, #-16]
  126b48:	e3a02000 	mov	r2, #0
  126b4c:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  126b50:	e51b3010 	ldr	r3, [fp, #-16]
  126b54:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b58:	e35300ff 	cmp	r3, #255	; 0xff
  126b5c:	0a000005 	beq	126b78 <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  126b60:	e51b3010 	ldr	r3, [fp, #-16]
  126b64:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b68:	e2833001 	add	r3, r3, #1
  126b6c:	e6ef2073 	uxtb	r2, r3
  126b70:	e51b3010 	ldr	r3, [fp, #-16]
  126b74:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  126b78:	e51b3010 	ldr	r3, [fp, #-16]
  126b7c:	e3a02000 	mov	r2, #0
  126b80:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  126b84:	e51b0010 	ldr	r0, [fp, #-16]
  126b88:	ebfffcef 	bl	125f4c <tcp_output>
  126b8c:	ea000000 	b	126b94 <tcp_rexmit_rto+0xbc>
    return;
  126b90:	e320f000 	nop	{0}
}
  126b94:	e24bd004 	sub	sp, fp, #4
  126b98:	e8bd8800 	pop	{fp, pc}

00126b9c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126b9c:	e92d4810 	push	{r4, fp, lr}
  126ba0:	e28db008 	add	fp, sp, #8
  126ba4:	e24dd014 	sub	sp, sp, #20
  126ba8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126bac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bb0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bb4:	e3530000 	cmp	r3, #0
  126bb8:	0a000044 	beq	126cd0 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126bbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bc0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bc4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  126bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126bcc:	e5932000 	ldr	r2, [r3]
  126bd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bd4:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  126bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bdc:	e283306c 	add	r3, r3, #108	; 0x6c
  126be0:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126be4:	ea000002 	b	126bf4 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  126be8:	e51b3010 	ldr	r3, [fp, #-16]
  126bec:	e5933000 	ldr	r3, [r3]
  126bf0:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126bf4:	e51b3010 	ldr	r3, [fp, #-16]
  126bf8:	e5933000 	ldr	r3, [r3]
  126bfc:	e3530000 	cmp	r3, #0
  126c00:	0a00000f 	beq	126c44 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126c04:	e51b3010 	ldr	r3, [fp, #-16]
  126c08:	e5933000 	ldr	r3, [r3]
  126c0c:	e593300c 	ldr	r3, [r3, #12]
  126c10:	e5933004 	ldr	r3, [r3, #4]
  126c14:	e1a00003 	mov	r0, r3
  126c18:	ebffbe75 	bl	1165f4 <lwip_htonl>
  126c1c:	e1a04000 	mov	r4, r0
  126c20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c24:	e593300c 	ldr	r3, [r3, #12]
  126c28:	e5933004 	ldr	r3, [r3, #4]
  126c2c:	e1a00003 	mov	r0, r3
  126c30:	ebffbe6f 	bl	1165f4 <lwip_htonl>
  126c34:	e1a03000 	mov	r3, r0
  126c38:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  126c3c:	e3530000 	cmp	r3, #0
  126c40:	baffffe8 	blt	126be8 <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  126c44:	e51b3010 	ldr	r3, [fp, #-16]
  126c48:	e5932000 	ldr	r2, [r3]
  126c4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c50:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  126c54:	e51b3010 	ldr	r3, [fp, #-16]
  126c58:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  126c5c:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  126c60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c64:	e5933000 	ldr	r3, [r3]
  126c68:	e3530000 	cmp	r3, #0
  126c6c:	1a000002 	bne	126c7c <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c74:	e3a02000 	mov	r2, #0
  126c78:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  126c7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c80:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126c84:	e35300ff 	cmp	r3, #255	; 0xff
  126c88:	0a000005 	beq	126ca4 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  126c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c90:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126c94:	e2833001 	add	r3, r3, #1
  126c98:	e6ef2073 	uxtb	r2, r3
  126c9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ca0:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  126ca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ca8:	e3a02000 	mov	r2, #0
  126cac:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126cb0:	e30c3a50 	movw	r3, #51792	; 0xca50
  126cb4:	e3403015 	movt	r3, #21
  126cb8:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126cbc:	e2832001 	add	r2, r3, #1
  126cc0:	e30c3a50 	movw	r3, #51792	; 0xca50
  126cc4:	e3403015 	movt	r3, #21
  126cc8:	e5832180 	str	r2, [r3, #384]	; 0x180
  126ccc:	ea000000 	b	126cd4 <tcp_rexmit+0x138>
    return;
  126cd0:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  126cd4:	e24bd008 	sub	sp, fp, #8
  126cd8:	e8bd8810 	pop	{r4, fp, pc}

00126cdc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126cdc:	e92d4800 	push	{fp, lr}
  126ce0:	e28db004 	add	fp, sp, #4
  126ce4:	e24dd008 	sub	sp, sp, #8
  126ce8:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126cec:	e51b3008 	ldr	r3, [fp, #-8]
  126cf0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126cf4:	e3530000 	cmp	r3, #0
  126cf8:	0a00003e 	beq	126df8 <tcp_rexmit_fast+0x11c>
  126cfc:	e51b3008 	ldr	r3, [fp, #-8]
  126d00:	e5d3301e 	ldrb	r3, [r3, #30]
  126d04:	e2033004 	and	r3, r3, #4
  126d08:	e3530000 	cmp	r3, #0
  126d0c:	1a000039 	bne	126df8 <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  126d10:	e51b0008 	ldr	r0, [fp, #-8]
  126d14:	ebffffa0 	bl	126b9c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  126d18:	e51b3008 	ldr	r3, [fp, #-8]
  126d1c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126d20:	e51b3008 	ldr	r3, [fp, #-8]
  126d24:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126d28:	e1520003 	cmp	r2, r3
  126d2c:	2a000006 	bcs	126d4c <tcp_rexmit_fast+0x70>
  126d30:	e51b3008 	ldr	r3, [fp, #-8]
  126d34:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  126d38:	e1a02fa3 	lsr	r2, r3, #31
  126d3c:	e0823003 	add	r3, r2, r3
  126d40:	e1a030c3 	asr	r3, r3, #1
  126d44:	e6ff3073 	uxth	r3, r3
  126d48:	ea000005 	b	126d64 <tcp_rexmit_fast+0x88>
  126d4c:	e51b3008 	ldr	r3, [fp, #-8]
  126d50:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126d54:	e1a02fa3 	lsr	r2, r3, #31
  126d58:	e0823003 	add	r3, r2, r3
  126d5c:	e1a030c3 	asr	r3, r3, #1
  126d60:	e6ff3073 	uxth	r3, r3
  126d64:	e51b2008 	ldr	r2, [fp, #-8]
  126d68:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126d6c:	e51b3008 	ldr	r3, [fp, #-8]
  126d70:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126d74:	e1a02003 	mov	r2, r3
  126d78:	e51b3008 	ldr	r3, [fp, #-8]
  126d7c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126d80:	e1a03083 	lsl	r3, r3, #1
  126d84:	e1520003 	cmp	r2, r3
  126d88:	2a000005 	bcs	126da4 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126d8c:	e51b3008 	ldr	r3, [fp, #-8]
  126d90:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126d94:	e1a03083 	lsl	r3, r3, #1
  126d98:	e6ff2073 	uxth	r2, r3
  126d9c:	e51b3008 	ldr	r3, [fp, #-8]
  126da0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126da4:	e51b3008 	ldr	r3, [fp, #-8]
  126da8:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126dac:	e51b3008 	ldr	r3, [fp, #-8]
  126db0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126db4:	e1a01003 	mov	r1, r3
  126db8:	e1a01081 	lsl	r1, r1, #1
  126dbc:	e0813003 	add	r3, r1, r3
  126dc0:	e6ff3073 	uxth	r3, r3
  126dc4:	e0823003 	add	r3, r2, r3
  126dc8:	e6ff2073 	uxth	r2, r3
  126dcc:	e51b3008 	ldr	r3, [fp, #-8]
  126dd0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126dd4:	e51b3008 	ldr	r3, [fp, #-8]
  126dd8:	e5d3301e 	ldrb	r3, [r3, #30]
  126ddc:	e3833004 	orr	r3, r3, #4
  126de0:	e6ef2073 	uxtb	r2, r3
  126de4:	e51b3008 	ldr	r3, [fp, #-8]
  126de8:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126dec:	e51b3008 	ldr	r3, [fp, #-8]
  126df0:	e3a02000 	mov	r2, #0
  126df4:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126df8:	e320f000 	nop	{0}
  126dfc:	e24bd004 	sub	sp, fp, #4
  126e00:	e8bd8800 	pop	{fp, pc}

00126e04 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126e04:	e92d4800 	push	{fp, lr}
  126e08:	e28db004 	add	fp, sp, #4
  126e0c:	e24dd028 	sub	sp, sp, #40	; 0x28
  126e10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126e14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e18:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126e1c:	e2433001 	sub	r3, r3, #1
  126e20:	e1a00003 	mov	r0, r3
  126e24:	ebffbdf2 	bl	1165f4 <lwip_htonl>
  126e28:	e1a03000 	mov	r3, r0
  126e2c:	e3a02000 	mov	r2, #0
  126e30:	e3a01000 	mov	r1, #0
  126e34:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126e38:	ebfff62a 	bl	1246e8 <tcp_output_alloc_header>
  126e3c:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126e40:	e51b300c 	ldr	r3, [fp, #-12]
  126e44:	e3530000 	cmp	r3, #0
  126e48:	1a000001 	bne	126e54 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126e4c:	e3e03000 	mvn	r3, #0
  126e50:	ea000036 	b	126f30 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126e54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e58:	e2833004 	add	r3, r3, #4
  126e5c:	e1a00003 	mov	r0, r3
  126e60:	eb0028c7 	bl	131184 <ip4_route>
  126e64:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126e68:	e51b3010 	ldr	r3, [fp, #-16]
  126e6c:	e3530000 	cmp	r3, #0
  126e70:	1a000002 	bne	126e80 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126e74:	e3e03003 	mvn	r3, #3
  126e78:	e54b3005 	strb	r3, [fp, #-5]
  126e7c:	ea000028 	b	126f24 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126e80:	e51b300c 	ldr	r3, [fp, #-12]
  126e84:	e5933004 	ldr	r3, [r3, #4]
  126e88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126e8c:	e51b300c 	ldr	r3, [fp, #-12]
  126e90:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126e94:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126e98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e9c:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126ea0:	e58d3000 	str	r3, [sp]
  126ea4:	e1a03001 	mov	r3, r1
  126ea8:	e3a01006 	mov	r1, #6
  126eac:	e51b000c 	ldr	r0, [fp, #-12]
  126eb0:	ebffc5e2 	bl	118640 <ip_chksum_pseudo>
  126eb4:	e1a03000 	mov	r3, r0
  126eb8:	e1a02003 	mov	r2, r3
  126ebc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ec0:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126ec4:	e30c3a50 	movw	r3, #51792	; 0xca50
  126ec8:	e3403015 	movt	r3, #21
  126ecc:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126ed0:	e2833001 	add	r3, r3, #1
  126ed4:	e6ff2073 	uxth	r2, r3
  126ed8:	e30c3a50 	movw	r3, #51792	; 0xca50
  126edc:	e3403015 	movt	r3, #21
  126ee0:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126ee4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126ee8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126eec:	e2832004 	add	r2, r3, #4
  126ef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ef4:	e5d3000a 	ldrb	r0, [r3, #10]
  126ef8:	e51b3010 	ldr	r3, [fp, #-16]
  126efc:	e58d3008 	str	r3, [sp, #8]
  126f00:	e3a03006 	mov	r3, #6
  126f04:	e58d3004 	str	r3, [sp, #4]
  126f08:	e3a03000 	mov	r3, #0
  126f0c:	e58d3000 	str	r3, [sp]
  126f10:	e1a03000 	mov	r3, r0
  126f14:	e51b000c 	ldr	r0, [fp, #-12]
  126f18:	eb002b72 	bl	131ce8 <ip4_output_if>
  126f1c:	e1a03000 	mov	r3, r0
  126f20:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126f24:	e51b000c 	ldr	r0, [fp, #-12]
  126f28:	ebffcfdc 	bl	11aea0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126f2c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126f30:	e1a00003 	mov	r0, r3
  126f34:	e24bd004 	sub	sp, fp, #4
  126f38:	e8bd8800 	pop	{fp, pc}

00126f3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126f3c:	e92d4810 	push	{r4, fp, lr}
  126f40:	e28db008 	add	fp, sp, #8
  126f44:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126f48:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126f4c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f50:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126f54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126f58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f5c:	e3530000 	cmp	r3, #0
  126f60:	1a000002 	bne	126f70 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126f64:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f68:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126f6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126f70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f74:	e3530000 	cmp	r3, #0
  126f78:	1a000001 	bne	126f84 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126f7c:	e3a03000 	mov	r3, #0
  126f80:	ea00008c 	b	1271b8 <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126f84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f88:	e593300c 	ldr	r3, [r3, #12]
  126f8c:	e1d330bc 	ldrh	r3, [r3, #12]
  126f90:	e6ff3073 	uxth	r3, r3
  126f94:	e1a00003 	mov	r0, r3
  126f98:	ebffbd89 	bl	1165c4 <lwip_htons>
  126f9c:	e1a03000 	mov	r3, r0
  126fa0:	e2033001 	and	r3, r3, #1
  126fa4:	e3530000 	cmp	r3, #0
  126fa8:	0a000005 	beq	126fc4 <tcp_zero_window_probe+0x88>
  126fac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126fb0:	e1d330b8 	ldrh	r3, [r3, #8]
  126fb4:	e3530000 	cmp	r3, #0
  126fb8:	1a000001 	bne	126fc4 <tcp_zero_window_probe+0x88>
  126fbc:	e3a03001 	mov	r3, #1
  126fc0:	ea000000 	b	126fc8 <tcp_zero_window_probe+0x8c>
  126fc4:	e3a03000 	mov	r3, #0
  126fc8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126fcc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126fd0:	e3530000 	cmp	r3, #0
  126fd4:	03a03001 	moveq	r3, #1
  126fd8:	13a03000 	movne	r3, #0
  126fdc:	e6ef3073 	uxtb	r3, r3
  126fe0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126fe4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126fe8:	e593300c 	ldr	r3, [r3, #12]
  126fec:	e5933004 	ldr	r3, [r3, #4]
  126ff0:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  126ff4:	e3a01000 	mov	r1, #0
  126ff8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126ffc:	ebfff5b9 	bl	1246e8 <tcp_output_alloc_header>
  127000:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  127004:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127008:	e3530000 	cmp	r3, #0
  12700c:	1a000001 	bne	127018 <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  127010:	e3e03000 	mvn	r3, #0
  127014:	ea000067 	b	1271b8 <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  127018:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12701c:	e5933004 	ldr	r3, [r3, #4]
  127020:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  127024:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  127028:	e3530000 	cmp	r3, #0
  12702c:	0a00000c 	beq	127064 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  127030:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127034:	e1d330bc 	ldrh	r3, [r3, #12]
  127038:	e6ff3073 	uxth	r3, r3
  12703c:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  127040:	e6ff4073 	uxth	r4, r3
  127044:	e3a00011 	mov	r0, #17
  127048:	ebffbd5d 	bl	1165c4 <lwip_htons>
  12704c:	e1a03000 	mov	r3, r0
  127050:	e1843003 	orr	r3, r4, r3
  127054:	e6ff2073 	uxth	r2, r3
  127058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12705c:	e1c320bc 	strh	r2, [r3, #12]
  127060:	ea00000f 	b	1270a4 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  127064:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127068:	e5933004 	ldr	r3, [r3, #4]
  12706c:	e2833014 	add	r3, r3, #20
  127070:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  127074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127078:	e5930004 	ldr	r0, [r3, #4]
  12707c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127080:	e5933004 	ldr	r3, [r3, #4]
  127084:	e1d320b8 	ldrh	r2, [r3, #8]
  127088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12708c:	e1d330b8 	ldrh	r3, [r3, #8]
  127090:	e0423003 	sub	r3, r2, r3
  127094:	e6ff3073 	uxth	r3, r3
  127098:	e3a02001 	mov	r2, #1
  12709c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1270a0:	ebffd189 	bl	11b6cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  1270a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1270a8:	e593300c 	ldr	r3, [r3, #12]
  1270ac:	e5933004 	ldr	r3, [r3, #4]
  1270b0:	e1a00003 	mov	r0, r3
  1270b4:	ebffbd4e 	bl	1165f4 <lwip_htonl>
  1270b8:	e1a03000 	mov	r3, r0
  1270bc:	e2833001 	add	r3, r3, #1
  1270c0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1270c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270c8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1270cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1270d0:	e0423003 	sub	r3, r2, r3
  1270d4:	e3530000 	cmp	r3, #0
  1270d8:	aa000002 	bge	1270e8 <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  1270dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270e0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1270e4:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  1270e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270ec:	e2833004 	add	r3, r3, #4
  1270f0:	e1a00003 	mov	r0, r3
  1270f4:	eb002822 	bl	131184 <ip4_route>
  1270f8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  1270fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127100:	e3530000 	cmp	r3, #0
  127104:	1a000002 	bne	127114 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  127108:	e3e03003 	mvn	r3, #3
  12710c:	e54b300d 	strb	r3, [fp, #-13]
  127110:	ea000025 	b	1271ac <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127114:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127118:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  12711c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127124:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127128:	e58d3000 	str	r3, [sp]
  12712c:	e1a03001 	mov	r3, r1
  127130:	e3a01006 	mov	r1, #6
  127134:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127138:	ebffc540 	bl	118640 <ip_chksum_pseudo>
  12713c:	e1a03000 	mov	r3, r0
  127140:	e1a02003 	mov	r2, r3
  127144:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127148:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  12714c:	e30c3a50 	movw	r3, #51792	; 0xca50
  127150:	e3403015 	movt	r3, #21
  127154:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  127158:	e2833001 	add	r3, r3, #1
  12715c:	e6ff2073 	uxth	r2, r3
  127160:	e30c3a50 	movw	r3, #51792	; 0xca50
  127164:	e3403015 	movt	r3, #21
  127168:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  12716c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127170:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127174:	e2832004 	add	r2, r3, #4
  127178:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12717c:	e5d3000a 	ldrb	r0, [r3, #10]
  127180:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127184:	e58d3008 	str	r3, [sp, #8]
  127188:	e3a03006 	mov	r3, #6
  12718c:	e58d3004 	str	r3, [sp, #4]
  127190:	e3a03000 	mov	r3, #0
  127194:	e58d3000 	str	r3, [sp]
  127198:	e1a03000 	mov	r3, r0
  12719c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1271a0:	eb002ad0 	bl	131ce8 <ip4_output_if>
  1271a4:	e1a03000 	mov	r3, r0
  1271a8:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  1271ac:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1271b0:	ebffcf3a 	bl	11aea0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  1271b4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  1271b8:	e1a00003 	mov	r0, r3
  1271bc:	e24bd008 	sub	sp, fp, #8
  1271c0:	e8bd8810 	pop	{r4, fp, pc}

001271c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  1271c4:	e92d4800 	push	{fp, lr}
  1271c8:	e28db004 	add	fp, sp, #4
  1271cc:	e24dd008 	sub	sp, sp, #8
  1271d0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  1271d4:	ebffd779 	bl	11cfc0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  1271d8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1271dc:	e3403015 	movt	r3, #21
  1271e0:	e5933000 	ldr	r3, [r3]
  1271e4:	e3530000 	cmp	r3, #0
  1271e8:	1a000004 	bne	127200 <tcpip_tcp_timer+0x3c>
  1271ec:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1271f0:	e3403015 	movt	r3, #21
  1271f4:	e5933000 	ldr	r3, [r3]
  1271f8:	e3530000 	cmp	r3, #0
  1271fc:	0a000005 	beq	127218 <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  127200:	e3a02000 	mov	r2, #0
  127204:	e30711c4 	movw	r1, #29124	; 0x71c4
  127208:	e3401012 	movt	r1, #18
  12720c:	e3a000fa 	mov	r0, #250	; 0xfa
  127210:	eb000057 	bl	127374 <sys_timeout>
  127214:	ea000003 	b	127228 <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  127218:	e30e3288 	movw	r3, #57992	; 0xe288
  12721c:	e3403014 	movt	r3, #20
  127220:	e3a02000 	mov	r2, #0
  127224:	e5832000 	str	r2, [r3]
  }
}
  127228:	e320f000 	nop	{0}
  12722c:	e24bd004 	sub	sp, fp, #4
  127230:	e8bd8800 	pop	{fp, pc}

00127234 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  127234:	e92d4800 	push	{fp, lr}
  127238:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  12723c:	e30e3288 	movw	r3, #57992	; 0xe288
  127240:	e3403014 	movt	r3, #20
  127244:	e5933000 	ldr	r3, [r3]
  127248:	e3530000 	cmp	r3, #0
  12724c:	1a000012 	bne	12729c <tcp_timer_needed+0x68>
  127250:	e30c3c40 	movw	r3, #52288	; 0xcc40
  127254:	e3403015 	movt	r3, #21
  127258:	e5933000 	ldr	r3, [r3]
  12725c:	e3530000 	cmp	r3, #0
  127260:	1a000004 	bne	127278 <tcp_timer_needed+0x44>
  127264:	e30c3c50 	movw	r3, #52304	; 0xcc50
  127268:	e3403015 	movt	r3, #21
  12726c:	e5933000 	ldr	r3, [r3]
  127270:	e3530000 	cmp	r3, #0
  127274:	0a000008 	beq	12729c <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  127278:	e30e3288 	movw	r3, #57992	; 0xe288
  12727c:	e3403014 	movt	r3, #20
  127280:	e3a02001 	mov	r2, #1
  127284:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  127288:	e3a02000 	mov	r2, #0
  12728c:	e30711c4 	movw	r1, #29124	; 0x71c4
  127290:	e3401012 	movt	r1, #18
  127294:	e3a000fa 	mov	r0, #250	; 0xfa
  127298:	eb000035 	bl	127374 <sys_timeout>
  }
}
  12729c:	e320f000 	nop	{0}
  1272a0:	e8bd8800 	pop	{fp, pc}

001272a4 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  1272a4:	e92d4800 	push	{fp, lr}
  1272a8:	e28db004 	add	fp, sp, #4
  1272ac:	e24dd010 	sub	sp, sp, #16
  1272b0:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  1272b4:	e51b3010 	ldr	r3, [fp, #-16]
  1272b8:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  1272bc:	e51b3008 	ldr	r3, [fp, #-8]
  1272c0:	e5933004 	ldr	r3, [r3, #4]
  1272c4:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  1272c8:	e51b3008 	ldr	r3, [fp, #-8]
  1272cc:	e5933000 	ldr	r3, [r3]
  1272d0:	e51b2010 	ldr	r2, [fp, #-16]
  1272d4:	e30712a4 	movw	r1, #29348	; 0x72a4
  1272d8:	e3401012 	movt	r1, #18
  1272dc:	e1a00003 	mov	r0, r3
  1272e0:	eb000023 	bl	127374 <sys_timeout>
}
  1272e4:	e320f000 	nop	{0}
  1272e8:	e24bd004 	sub	sp, fp, #4
  1272ec:	e8bd8800 	pop	{fp, pc}

001272f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  1272f0:	e92d4800 	push	{fp, lr}
  1272f4:	e28db004 	add	fp, sp, #4
  1272f8:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  1272fc:	e3a03001 	mov	r3, #1
  127300:	e50b3008 	str	r3, [fp, #-8]
  127304:	ea00000f 	b	127348 <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  127308:	e3083a08 	movw	r3, #35336	; 0x8a08
  12730c:	e3403014 	movt	r3, #20
  127310:	e51b2008 	ldr	r2, [fp, #-8]
  127314:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  127318:	e51b3008 	ldr	r3, [fp, #-8]
  12731c:	e1a02183 	lsl	r2, r3, #3
  127320:	e3083a08 	movw	r3, #35336	; 0x8a08
  127324:	e3403014 	movt	r3, #20
  127328:	e0823003 	add	r3, r2, r3
  12732c:	e1a02003 	mov	r2, r3
  127330:	e30712a4 	movw	r1, #29348	; 0x72a4
  127334:	e3401012 	movt	r1, #18
  127338:	eb00000d 	bl	127374 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  12733c:	e51b3008 	ldr	r3, [fp, #-8]
  127340:	e2833001 	add	r3, r3, #1
  127344:	e50b3008 	str	r3, [fp, #-8]
  127348:	e51b3008 	ldr	r3, [fp, #-8]
  12734c:	e3530006 	cmp	r3, #6
  127350:	9affffec 	bls	127308 <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  127354:	ebff8f7a 	bl	10b144 <sys_now>
  127358:	e1a02000 	mov	r2, r0
  12735c:	e30e3284 	movw	r3, #57988	; 0xe284
  127360:	e3403014 	movt	r3, #20
  127364:	e5832000 	str	r2, [r3]
}
  127368:	e320f000 	nop	{0}
  12736c:	e24bd004 	sub	sp, fp, #4
  127370:	e8bd8800 	pop	{fp, pc}

00127374 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  127374:	e92d4800 	push	{fp, lr}
  127378:	e28db004 	add	fp, sp, #4
  12737c:	e24dd020 	sub	sp, sp, #32
  127380:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127384:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  127388:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  12738c:	e3a020d2 	mov	r2, #210	; 0xd2
  127390:	e3081a40 	movw	r1, #35392	; 0x8a40
  127394:	e3401014 	movt	r1, #20
  127398:	e3a0000d 	mov	r0, #13
  12739c:	ebffc749 	bl	1190c8 <memp_malloc_fn>
  1273a0:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  1273a4:	e51b3010 	ldr	r3, [fp, #-16]
  1273a8:	e3530000 	cmp	r3, #0
  1273ac:	1a00000a 	bne	1273dc <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  1273b0:	e51b3010 	ldr	r3, [fp, #-16]
  1273b4:	e3530000 	cmp	r3, #0
  1273b8:	1a00008f 	bne	1275fc <sys_timeout+0x288>
  1273bc:	e3080a70 	movw	r0, #35440	; 0x8a70
  1273c0:	e3400014 	movt	r0, #20
  1273c4:	ebff6f52 	bl	103114 <rt_kprintf>
  1273c8:	e3a010d4 	mov	r1, #212	; 0xd4
  1273cc:	e3080a40 	movw	r0, #35392	; 0x8a40
  1273d0:	e3400014 	movt	r0, #20
  1273d4:	ebff8f41 	bl	10b0e0 <sys_arch_assert>
    return;
  1273d8:	ea000087 	b	1275fc <sys_timeout+0x288>
  }

  now = sys_now();
  1273dc:	ebff8f58 	bl	10b144 <sys_now>
  1273e0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  1273e4:	e30e3280 	movw	r3, #57984	; 0xe280
  1273e8:	e3403014 	movt	r3, #20
  1273ec:	e5933000 	ldr	r3, [r3]
  1273f0:	e3530000 	cmp	r3, #0
  1273f4:	1a000006 	bne	127414 <sys_timeout+0xa0>
    diff = 0;
  1273f8:	e3a03000 	mov	r3, #0
  1273fc:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  127400:	e30e3284 	movw	r3, #57988	; 0xe284
  127404:	e3403014 	movt	r3, #20
  127408:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12740c:	e5832000 	str	r2, [r3]
  127410:	ea000005 	b	12742c <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  127414:	e30e3284 	movw	r3, #57988	; 0xe284
  127418:	e3403014 	movt	r3, #20
  12741c:	e5933000 	ldr	r3, [r3]
  127420:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127424:	e0423003 	sub	r3, r2, r3
  127428:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  12742c:	e51b3010 	ldr	r3, [fp, #-16]
  127430:	e3a02000 	mov	r2, #0
  127434:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  127438:	e51b3010 	ldr	r3, [fp, #-16]
  12743c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  127440:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  127444:	e51b3010 	ldr	r3, [fp, #-16]
  127448:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12744c:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  127450:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127454:	e51b300c 	ldr	r3, [fp, #-12]
  127458:	e0822003 	add	r2, r2, r3
  12745c:	e51b3010 	ldr	r3, [fp, #-16]
  127460:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  127464:	e30e3280 	movw	r3, #57984	; 0xe280
  127468:	e3403014 	movt	r3, #20
  12746c:	e5933000 	ldr	r3, [r3]
  127470:	e3530000 	cmp	r3, #0
  127474:	1a000004 	bne	12748c <sys_timeout+0x118>
    next_timeout = timeout;
  127478:	e30e3280 	movw	r3, #57984	; 0xe280
  12747c:	e3403014 	movt	r3, #20
  127480:	e51b2010 	ldr	r2, [fp, #-16]
  127484:	e5832000 	str	r2, [r3]
    return;
  127488:	ea00005c 	b	127600 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  12748c:	e30e3280 	movw	r3, #57984	; 0xe280
  127490:	e3403014 	movt	r3, #20
  127494:	e5933000 	ldr	r3, [r3]
  127498:	e5933004 	ldr	r3, [r3, #4]
  12749c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1274a0:	e1520003 	cmp	r2, r3
  1274a4:	2a000013 	bcs	1274f8 <sys_timeout+0x184>
    next_timeout->time -= msecs;
  1274a8:	e30e3280 	movw	r3, #57984	; 0xe280
  1274ac:	e3403014 	movt	r3, #20
  1274b0:	e5933000 	ldr	r3, [r3]
  1274b4:	e5931004 	ldr	r1, [r3, #4]
  1274b8:	e30e3280 	movw	r3, #57984	; 0xe280
  1274bc:	e3403014 	movt	r3, #20
  1274c0:	e5933000 	ldr	r3, [r3]
  1274c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1274c8:	e0412002 	sub	r2, r1, r2
  1274cc:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  1274d0:	e30e3280 	movw	r3, #57984	; 0xe280
  1274d4:	e3403014 	movt	r3, #20
  1274d8:	e5932000 	ldr	r2, [r3]
  1274dc:	e51b3010 	ldr	r3, [fp, #-16]
  1274e0:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  1274e4:	e30e3280 	movw	r3, #57984	; 0xe280
  1274e8:	e3403014 	movt	r3, #20
  1274ec:	e51b2010 	ldr	r2, [fp, #-16]
  1274f0:	e5832000 	str	r2, [r3]
  1274f4:	ea000041 	b	127600 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  1274f8:	e30e3280 	movw	r3, #57984	; 0xe280
  1274fc:	e3403014 	movt	r3, #20
  127500:	e5933000 	ldr	r3, [r3]
  127504:	e50b3008 	str	r3, [fp, #-8]
  127508:	ea000037 	b	1275ec <sys_timeout+0x278>
      timeout->time -= t->time;
  12750c:	e51b3010 	ldr	r3, [fp, #-16]
  127510:	e5932004 	ldr	r2, [r3, #4]
  127514:	e51b3008 	ldr	r3, [fp, #-8]
  127518:	e5933004 	ldr	r3, [r3, #4]
  12751c:	e0422003 	sub	r2, r2, r3
  127520:	e51b3010 	ldr	r3, [fp, #-16]
  127524:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  127528:	e51b3008 	ldr	r3, [fp, #-8]
  12752c:	e5933000 	ldr	r3, [r3]
  127530:	e3530000 	cmp	r3, #0
  127534:	0a000006 	beq	127554 <sys_timeout+0x1e0>
  127538:	e51b3008 	ldr	r3, [fp, #-8]
  12753c:	e5933000 	ldr	r3, [r3]
  127540:	e5932004 	ldr	r2, [r3, #4]
  127544:	e51b3010 	ldr	r3, [fp, #-16]
  127548:	e5933004 	ldr	r3, [r3, #4]
  12754c:	e1520003 	cmp	r2, r3
  127550:	9a000022 	bls	1275e0 <sys_timeout+0x26c>
        if (t->next != NULL) {
  127554:	e51b3008 	ldr	r3, [fp, #-8]
  127558:	e5933000 	ldr	r3, [r3]
  12755c:	e3530000 	cmp	r3, #0
  127560:	0a000009 	beq	12758c <sys_timeout+0x218>
          t->next->time -= timeout->time;
  127564:	e51b3008 	ldr	r3, [fp, #-8]
  127568:	e5933000 	ldr	r3, [r3]
  12756c:	e5931004 	ldr	r1, [r3, #4]
  127570:	e51b3010 	ldr	r3, [fp, #-16]
  127574:	e5932004 	ldr	r2, [r3, #4]
  127578:	e51b3008 	ldr	r3, [fp, #-8]
  12757c:	e5933000 	ldr	r3, [r3]
  127580:	e0412002 	sub	r2, r1, r2
  127584:	e5832004 	str	r2, [r3, #4]
  127588:	ea00000c 	b	1275c0 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  12758c:	e51b3010 	ldr	r3, [fp, #-16]
  127590:	e5933004 	ldr	r3, [r3, #4]
  127594:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127598:	e1520003 	cmp	r2, r3
  12759c:	2a000007 	bcs	1275c0 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  1275a0:	e30e3280 	movw	r3, #57984	; 0xe280
  1275a4:	e3403014 	movt	r3, #20
  1275a8:	e5933000 	ldr	r3, [r3]
  1275ac:	e5932004 	ldr	r2, [r3, #4]
  1275b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1275b4:	e0822003 	add	r2, r2, r3
  1275b8:	e51b3010 	ldr	r3, [fp, #-16]
  1275bc:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  1275c0:	e51b3008 	ldr	r3, [fp, #-8]
  1275c4:	e5932000 	ldr	r2, [r3]
  1275c8:	e51b3010 	ldr	r3, [fp, #-16]
  1275cc:	e5832000 	str	r2, [r3]
        t->next = timeout;
  1275d0:	e51b3008 	ldr	r3, [fp, #-8]
  1275d4:	e51b2010 	ldr	r2, [fp, #-16]
  1275d8:	e5832000 	str	r2, [r3]
        break;
  1275dc:	ea000007 	b	127600 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  1275e0:	e51b3008 	ldr	r3, [fp, #-8]
  1275e4:	e5933000 	ldr	r3, [r3]
  1275e8:	e50b3008 	str	r3, [fp, #-8]
  1275ec:	e51b3008 	ldr	r3, [fp, #-8]
  1275f0:	e3530000 	cmp	r3, #0
  1275f4:	1affffc4 	bne	12750c <sys_timeout+0x198>
  1275f8:	ea000000 	b	127600 <sys_timeout+0x28c>
    return;
  1275fc:	e320f000 	nop	{0}
      }
    }
  }
}
  127600:	e24bd004 	sub	sp, fp, #4
  127604:	e8bd8800 	pop	{fp, pc}

00127608 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  127608:	e92d4800 	push	{fp, lr}
  12760c:	e28db004 	add	fp, sp, #4
  127610:	e24dd010 	sub	sp, sp, #16
  127614:	e50b0010 	str	r0, [fp, #-16]
  127618:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  12761c:	e30e3280 	movw	r3, #57984	; 0xe280
  127620:	e3403014 	movt	r3, #20
  127624:	e5933000 	ldr	r3, [r3]
  127628:	e3530000 	cmp	r3, #0
  12762c:	0a000038 	beq	127714 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127630:	e30e3280 	movw	r3, #57984	; 0xe280
  127634:	e3403014 	movt	r3, #20
  127638:	e5933000 	ldr	r3, [r3]
  12763c:	e50b300c 	str	r3, [fp, #-12]
  127640:	e3a03000 	mov	r3, #0
  127644:	e50b3008 	str	r3, [fp, #-8]
  127648:	ea00002c 	b	127700 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  12764c:	e51b300c 	ldr	r3, [fp, #-12]
  127650:	e5933008 	ldr	r3, [r3, #8]
  127654:	e51b2010 	ldr	r2, [fp, #-16]
  127658:	e1520003 	cmp	r2, r3
  12765c:	1a000022 	bne	1276ec <sys_untimeout+0xe4>
  127660:	e51b300c 	ldr	r3, [fp, #-12]
  127664:	e593300c 	ldr	r3, [r3, #12]
  127668:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12766c:	e1520003 	cmp	r2, r3
  127670:	1a00001d 	bne	1276ec <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  127674:	e51b3008 	ldr	r3, [fp, #-8]
  127678:	e3530000 	cmp	r3, #0
  12767c:	1a000005 	bne	127698 <sys_untimeout+0x90>
        next_timeout = t->next;
  127680:	e51b300c 	ldr	r3, [fp, #-12]
  127684:	e5932000 	ldr	r2, [r3]
  127688:	e30e3280 	movw	r3, #57984	; 0xe280
  12768c:	e3403014 	movt	r3, #20
  127690:	e5832000 	str	r2, [r3]
  127694:	ea000003 	b	1276a8 <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  127698:	e51b300c 	ldr	r3, [fp, #-12]
  12769c:	e5932000 	ldr	r2, [r3]
  1276a0:	e51b3008 	ldr	r3, [fp, #-8]
  1276a4:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  1276a8:	e51b300c 	ldr	r3, [fp, #-12]
  1276ac:	e5933000 	ldr	r3, [r3]
  1276b0:	e3530000 	cmp	r3, #0
  1276b4:	0a000008 	beq	1276dc <sys_untimeout+0xd4>
        t->next->time += t->time;
  1276b8:	e51b300c 	ldr	r3, [fp, #-12]
  1276bc:	e5933000 	ldr	r3, [r3]
  1276c0:	e5931004 	ldr	r1, [r3, #4]
  1276c4:	e51b300c 	ldr	r3, [fp, #-12]
  1276c8:	e5932004 	ldr	r2, [r3, #4]
  1276cc:	e51b300c 	ldr	r3, [fp, #-12]
  1276d0:	e5933000 	ldr	r3, [r3]
  1276d4:	e0812002 	add	r2, r1, r2
  1276d8:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  1276dc:	e51b100c 	ldr	r1, [fp, #-12]
  1276e0:	e3a0000d 	mov	r0, #13
  1276e4:	ebffc6df 	bl	119268 <memp_free>
      return;
  1276e8:	ea00000a 	b	127718 <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  1276ec:	e51b300c 	ldr	r3, [fp, #-12]
  1276f0:	e50b3008 	str	r3, [fp, #-8]
  1276f4:	e51b300c 	ldr	r3, [fp, #-12]
  1276f8:	e5933000 	ldr	r3, [r3]
  1276fc:	e50b300c 	str	r3, [fp, #-12]
  127700:	e51b300c 	ldr	r3, [fp, #-12]
  127704:	e3530000 	cmp	r3, #0
  127708:	1affffcf 	bne	12764c <sys_untimeout+0x44>
    }
  }
  return;
  12770c:	e320f000 	nop	{0}
  127710:	ea000000 	b	127718 <sys_untimeout+0x110>
    return;
  127714:	e320f000 	nop	{0}
}
  127718:	e24bd004 	sub	sp, fp, #4
  12771c:	e8bd8800 	pop	{fp, pc}

00127720 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  127720:	e92d4800 	push	{fp, lr}
  127724:	e28db004 	add	fp, sp, #4
  127728:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  12772c:	e30e3280 	movw	r3, #57984	; 0xe280
  127730:	e3403014 	movt	r3, #20
  127734:	e5933000 	ldr	r3, [r3]
  127738:	e3530000 	cmp	r3, #0
  12773c:	0a000042 	beq	12784c <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  127740:	ebff8e7f 	bl	10b144 <sys_now>
  127744:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  127748:	e30e3284 	movw	r3, #57988	; 0xe284
  12774c:	e3403014 	movt	r3, #20
  127750:	e5933000 	ldr	r3, [r3]
  127754:	e51b2010 	ldr	r2, [fp, #-16]
  127758:	e0423003 	sub	r3, r2, r3
  12775c:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  127760:	e3a03000 	mov	r3, #0
  127764:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  127768:	e30e3280 	movw	r3, #57984	; 0xe280
  12776c:	e3403014 	movt	r3, #20
  127770:	e5933000 	ldr	r3, [r3]
  127774:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  127778:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12777c:	e3530000 	cmp	r3, #0
  127780:	0a00002e 	beq	127840 <sys_check_timeouts+0x120>
  127784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127788:	e5933004 	ldr	r3, [r3, #4]
  12778c:	e51b2008 	ldr	r2, [fp, #-8]
  127790:	e1520003 	cmp	r2, r3
  127794:	3a000029 	bcc	127840 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  127798:	e3a03001 	mov	r3, #1
  12779c:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  1277a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277a4:	e5932004 	ldr	r2, [r3, #4]
  1277a8:	e30e3284 	movw	r3, #57988	; 0xe284
  1277ac:	e3403014 	movt	r3, #20
  1277b0:	e5933000 	ldr	r3, [r3]
  1277b4:	e0822003 	add	r2, r2, r3
  1277b8:	e30e3284 	movw	r3, #57988	; 0xe284
  1277bc:	e3403014 	movt	r3, #20
  1277c0:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  1277c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277c8:	e5933004 	ldr	r3, [r3, #4]
  1277cc:	e51b2008 	ldr	r2, [fp, #-8]
  1277d0:	e0423003 	sub	r3, r2, r3
  1277d4:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  1277d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277dc:	e5932000 	ldr	r2, [r3]
  1277e0:	e30e3280 	movw	r3, #57984	; 0xe280
  1277e4:	e3403014 	movt	r3, #20
  1277e8:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  1277ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277f0:	e5933008 	ldr	r3, [r3, #8]
  1277f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  1277f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277fc:	e593300c 	ldr	r3, [r3, #12]
  127800:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  127804:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127808:	e3a0000d 	mov	r0, #13
  12780c:	ebffc695 	bl	119268 <memp_free>
        if (handler != NULL) {
  127810:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127814:	e3530000 	cmp	r3, #0
  127818:	0a000008 	beq	127840 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  12781c:	e30f0614 	movw	r0, #62996	; 0xf614
  127820:	e3400014 	movt	r0, #20
  127824:	ebff8c3e 	bl	10a924 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  127828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12782c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127830:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  127834:	e30f0614 	movw	r0, #62996	; 0xf614
  127838:	e3400014 	movt	r0, #20
  12783c:	ebff8c44 	bl	10a954 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  127840:	e55b3009 	ldrb	r3, [fp, #-9]
  127844:	e3530000 	cmp	r3, #0
  127848:	1affffc4 	bne	127760 <sys_check_timeouts+0x40>
  }
}
  12784c:	e320f000 	nop	{0}
  127850:	e24bd004 	sub	sp, fp, #4
  127854:	e8bd8800 	pop	{fp, pc}

00127858 <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  127858:	e92d4800 	push	{fp, lr}
  12785c:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  127860:	ebff8e37 	bl	10b144 <sys_now>
  127864:	e1a02000 	mov	r2, r0
  127868:	e30e3284 	movw	r3, #57988	; 0xe284
  12786c:	e3403014 	movt	r3, #20
  127870:	e5832000 	str	r2, [r3]
}
  127874:	e320f000 	nop	{0}
  127878:	e8bd8800 	pop	{fp, pc}

0012787c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  12787c:	e92d4800 	push	{fp, lr}
  127880:	e28db004 	add	fp, sp, #4
  127884:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  127888:	e30e3280 	movw	r3, #57984	; 0xe280
  12788c:	e3403014 	movt	r3, #20
  127890:	e5933000 	ldr	r3, [r3]
  127894:	e3530000 	cmp	r3, #0
  127898:	1a000001 	bne	1278a4 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  12789c:	e3e03000 	mvn	r3, #0
  1278a0:	ea000015 	b	1278fc <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  1278a4:	ebff8e26 	bl	10b144 <sys_now>
  1278a8:	e1a02000 	mov	r2, r0
  1278ac:	e30e3284 	movw	r3, #57988	; 0xe284
  1278b0:	e3403014 	movt	r3, #20
  1278b4:	e5933000 	ldr	r3, [r3]
  1278b8:	e0423003 	sub	r3, r2, r3
  1278bc:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  1278c0:	e30e3280 	movw	r3, #57984	; 0xe280
  1278c4:	e3403014 	movt	r3, #20
  1278c8:	e5933000 	ldr	r3, [r3]
  1278cc:	e5933004 	ldr	r3, [r3, #4]
  1278d0:	e51b2008 	ldr	r2, [fp, #-8]
  1278d4:	e1520003 	cmp	r2, r3
  1278d8:	9a000001 	bls	1278e4 <sys_timeouts_sleeptime+0x68>
    return 0;
  1278dc:	e3a03000 	mov	r3, #0
  1278e0:	ea000005 	b	1278fc <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  1278e4:	e30e3280 	movw	r3, #57984	; 0xe280
  1278e8:	e3403014 	movt	r3, #20
  1278ec:	e5933000 	ldr	r3, [r3]
  1278f0:	e5932004 	ldr	r2, [r3, #4]
  1278f4:	e51b3008 	ldr	r3, [fp, #-8]
  1278f8:	e0423003 	sub	r3, r2, r3
  }
}
  1278fc:	e1a00003 	mov	r0, r3
  127900:	e24bd004 	sub	sp, fp, #4
  127904:	e8bd8800 	pop	{fp, pc}

00127908 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  127908:	e92d4800 	push	{fp, lr}
  12790c:	e28db004 	add	fp, sp, #4
  127910:	e24dd010 	sub	sp, sp, #16
  127914:	e50b0010 	str	r0, [fp, #-16]
  127918:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  12791c:	e30e3280 	movw	r3, #57984	; 0xe280
  127920:	e3403014 	movt	r3, #20
  127924:	e5933000 	ldr	r3, [r3]
  127928:	e3530000 	cmp	r3, #0
  12792c:	1a000004 	bne	127944 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127930:	e3a02000 	mov	r2, #0
  127934:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127938:	e51b0010 	ldr	r0, [fp, #-16]
  12793c:	ebff8d4d 	bl	10ae78 <sys_arch_mbox_fetch>
    return;
  127940:	ea00000d 	b	12797c <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  127944:	ebffffcc 	bl	12787c <sys_timeouts_sleeptime>
  127948:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  12794c:	e51b3008 	ldr	r3, [fp, #-8]
  127950:	e3530000 	cmp	r3, #0
  127954:	0a000006 	beq	127974 <sys_timeouts_mbox_fetch+0x6c>
  127958:	e51b2008 	ldr	r2, [fp, #-8]
  12795c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127960:	e51b0010 	ldr	r0, [fp, #-16]
  127964:	ebff8d43 	bl	10ae78 <sys_arch_mbox_fetch>
  127968:	e1a03000 	mov	r3, r0
  12796c:	e3730001 	cmn	r3, #1
  127970:	1a000001 	bne	12797c <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  127974:	ebffff69 	bl	127720 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  127978:	eaffffe7 	b	12791c <sys_timeouts_mbox_fetch+0x14>
  }
}
  12797c:	e24bd004 	sub	sp, fp, #4
  127980:	e8bd8800 	pop	{fp, pc}

00127984 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  127984:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127988:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  12798c:	e320f000 	nop	{0}
  127990:	e28bd000 	add	sp, fp, #0
  127994:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127998:	e12fff1e 	bx	lr

0012799c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  12799c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1279a0:	e28db000 	add	fp, sp, #0
  1279a4:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  1279a8:	e3a03000 	mov	r3, #0
  1279ac:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  1279b0:	e30d3038 	movw	r3, #53304	; 0xd038
  1279b4:	e3403014 	movt	r3, #20
  1279b8:	e1d320b0 	ldrh	r2, [r3]
  1279bc:	e2823001 	add	r3, r2, #1
  1279c0:	e6ff1073 	uxth	r1, r3
  1279c4:	e30d3038 	movw	r3, #53304	; 0xd038
  1279c8:	e3403014 	movt	r3, #20
  1279cc:	e1c310b0 	strh	r1, [r3]
  1279d0:	e30f3fff 	movw	r3, #65535	; 0xffff
  1279d4:	e1520003 	cmp	r2, r3
  1279d8:	1a000003 	bne	1279ec <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  1279dc:	e30d3038 	movw	r3, #53304	; 0xd038
  1279e0:	e3403014 	movt	r3, #20
  1279e4:	e3a02903 	mov	r2, #49152	; 0xc000
  1279e8:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  1279ec:	e30c3c58 	movw	r3, #52312	; 0xcc58
  1279f0:	e3403015 	movt	r3, #21
  1279f4:	e5933000 	ldr	r3, [r3]
  1279f8:	e50b300c 	str	r3, [fp, #-12]
  1279fc:	ea000011 	b	127a48 <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  127a00:	e51b300c 	ldr	r3, [fp, #-12]
  127a04:	e1d321b2 	ldrh	r2, [r3, #18]
  127a08:	e30d3038 	movw	r3, #53304	; 0xd038
  127a0c:	e3403014 	movt	r3, #20
  127a10:	e1d330b0 	ldrh	r3, [r3]
  127a14:	e1520003 	cmp	r2, r3
  127a18:	1a000007 	bne	127a3c <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  127a1c:	e15b30b6 	ldrh	r3, [fp, #-6]
  127a20:	e2833001 	add	r3, r3, #1
  127a24:	e14b30b6 	strh	r3, [fp, #-6]
  127a28:	e15b30b6 	ldrh	r3, [fp, #-6]
  127a2c:	e3530901 	cmp	r3, #16384	; 0x4000
  127a30:	3affffde 	bcc	1279b0 <udp_new_port+0x14>
        return 0;
  127a34:	e3a03000 	mov	r3, #0
  127a38:	ea000008 	b	127a60 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127a3c:	e51b300c 	ldr	r3, [fp, #-12]
  127a40:	e593300c 	ldr	r3, [r3, #12]
  127a44:	e50b300c 	str	r3, [fp, #-12]
  127a48:	e51b300c 	ldr	r3, [fp, #-12]
  127a4c:	e3530000 	cmp	r3, #0
  127a50:	1affffea 	bne	127a00 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  127a54:	e30d3038 	movw	r3, #53304	; 0xd038
  127a58:	e3403014 	movt	r3, #20
  127a5c:	e1d330b0 	ldrh	r3, [r3]
}
  127a60:	e1a00003 	mov	r0, r3
  127a64:	e28bd000 	add	sp, fp, #0
  127a68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127a6c:	e12fff1e 	bx	lr

00127a70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  127a70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127a74:	e28db000 	add	fp, sp, #0
  127a78:	e24dd014 	sub	sp, sp, #20
  127a7c:	e50b0008 	str	r0, [fp, #-8]
  127a80:	e50b100c 	str	r1, [fp, #-12]
  127a84:	e1a03002 	mov	r3, r2
  127a88:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  127a8c:	e55b300d 	ldrb	r3, [fp, #-13]
  127a90:	e3530000 	cmp	r3, #0
  127a94:	0a00001e 	beq	127b14 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  127a98:	e51b3008 	ldr	r3, [fp, #-8]
  127a9c:	e5d33008 	ldrb	r3, [r3, #8]
  127aa0:	e2033020 	and	r3, r3, #32
  127aa4:	e3530000 	cmp	r3, #0
  127aa8:	0a000029 	beq	127b54 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127aac:	e51b3008 	ldr	r3, [fp, #-8]
  127ab0:	e3530000 	cmp	r3, #0
  127ab4:	0a000014 	beq	127b0c <udp_input_local_match+0x9c>
  127ab8:	e51b3008 	ldr	r3, [fp, #-8]
  127abc:	e5933000 	ldr	r3, [r3]
  127ac0:	e3530000 	cmp	r3, #0
  127ac4:	0a000010 	beq	127b0c <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127ac8:	e30f3618 	movw	r3, #63000	; 0xf618
  127acc:	e3403014 	movt	r3, #20
  127ad0:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127ad4:	e3730001 	cmn	r3, #1
  127ad8:	0a00000b 	beq	127b0c <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127adc:	e51b3008 	ldr	r3, [fp, #-8]
  127ae0:	e5932000 	ldr	r2, [r3]
  127ae4:	e30f3618 	movw	r3, #63000	; 0xf618
  127ae8:	e3403014 	movt	r3, #20
  127aec:	e5933014 	ldr	r3, [r3, #20]
  127af0:	e0222003 	eor	r2, r2, r3
  127af4:	e51b300c 	ldr	r3, [fp, #-12]
  127af8:	e2833008 	add	r3, r3, #8
  127afc:	e5933000 	ldr	r3, [r3]
  127b00:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127b04:	e3530000 	cmp	r3, #0
  127b08:	1a000011 	bne	127b54 <udp_input_local_match+0xe4>
          return 1;
  127b0c:	e3a03001 	mov	r3, #1
  127b10:	ea000010 	b	127b58 <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  127b14:	e51b3008 	ldr	r3, [fp, #-8]
  127b18:	e3530000 	cmp	r3, #0
  127b1c:	0a00000a 	beq	127b4c <udp_input_local_match+0xdc>
  127b20:	e51b3008 	ldr	r3, [fp, #-8]
  127b24:	e5933000 	ldr	r3, [r3]
  127b28:	e3530000 	cmp	r3, #0
  127b2c:	0a000006 	beq	127b4c <udp_input_local_match+0xdc>
  127b30:	e51b3008 	ldr	r3, [fp, #-8]
  127b34:	e5932000 	ldr	r2, [r3]
  127b38:	e30f3618 	movw	r3, #63000	; 0xf618
  127b3c:	e3403014 	movt	r3, #20
  127b40:	e5933014 	ldr	r3, [r3, #20]
  127b44:	e1520003 	cmp	r2, r3
  127b48:	1a000001 	bne	127b54 <udp_input_local_match+0xe4>
      return 1;
  127b4c:	e3a03001 	mov	r3, #1
  127b50:	ea000000 	b	127b58 <udp_input_local_match+0xe8>
    }
  }

  return 0;
  127b54:	e3a03000 	mov	r3, #0
}
  127b58:	e1a00003 	mov	r0, r3
  127b5c:	e28bd000 	add	sp, fp, #0
  127b60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127b64:	e12fff1e 	bx	lr

00127b68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  127b68:	e92d4810 	push	{r4, fp, lr}
  127b6c:	e28db008 	add	fp, sp, #8
  127b70:	e24dd034 	sub	sp, sp, #52	; 0x34
  127b74:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  127b78:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  127b7c:	e3a03000 	mov	r3, #0
  127b80:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  127b84:	e30c3a50 	movw	r3, #51792	; 0xca50
  127b88:	e3403015 	movt	r3, #21
  127b8c:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  127b90:	e2833001 	add	r3, r3, #1
  127b94:	e6ff2073 	uxth	r2, r3
  127b98:	e30c3a50 	movw	r3, #51792	; 0xca50
  127b9c:	e3403015 	movt	r3, #21
  127ba0:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  127ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127ba8:	e1d330ba 	ldrh	r3, [r3, #10]
  127bac:	e3530007 	cmp	r3, #7
  127bb0:	8a000019 	bhi	127c1c <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127bb4:	e30c3a50 	movw	r3, #51792	; 0xca50
  127bb8:	e3403015 	movt	r3, #21
  127bbc:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127bc0:	e2833001 	add	r3, r3, #1
  127bc4:	e6ff2073 	uxth	r2, r3
  127bc8:	e30c3a50 	movw	r3, #51792	; 0xca50
  127bcc:	e3403015 	movt	r3, #21
  127bd0:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  127bd4:	e30c3a50 	movw	r3, #51792	; 0xca50
  127bd8:	e3403015 	movt	r3, #21
  127bdc:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127be0:	e2833001 	add	r3, r3, #1
  127be4:	e6ff2073 	uxth	r2, r3
  127be8:	e30c3a50 	movw	r3, #51792	; 0xca50
  127bec:	e3403015 	movt	r3, #21
  127bf0:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  127bf4:	e30c3a50 	movw	r3, #51792	; 0xca50
  127bf8:	e3403015 	movt	r3, #21
  127bfc:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127c00:	e2832001 	add	r2, r3, #1
  127c04:	e30c3a50 	movw	r3, #51792	; 0xca50
  127c08:	e3403015 	movt	r3, #21
  127c0c:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  127c10:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c14:	ebffcca1 	bl	11aea0 <pbuf_free>
    goto end;
  127c18:	ea00010c 	b	128050 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127c1c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127c20:	e5933004 	ldr	r3, [r3, #4]
  127c24:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  127c28:	e30f3618 	movw	r3, #63000	; 0xf618
  127c2c:	e3403014 	movt	r3, #20
  127c30:	e5932014 	ldr	r2, [r3, #20]
  127c34:	e30f3618 	movw	r3, #63000	; 0xf618
  127c38:	e3403014 	movt	r3, #20
  127c3c:	e5933000 	ldr	r3, [r3]
  127c40:	e1a01003 	mov	r1, r3
  127c44:	e1a00002 	mov	r0, r2
  127c48:	eb002a2c 	bl	132500 <ip4_addr_isbroadcast_u32>
  127c4c:	e1a03000 	mov	r3, r0
  127c50:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  127c54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c58:	e1d330b0 	ldrh	r3, [r3]
  127c5c:	e6ff3073 	uxth	r3, r3
  127c60:	e1a00003 	mov	r0, r3
  127c64:	ebffba56 	bl	1165c4 <lwip_htons>
  127c68:	e1a03000 	mov	r3, r0
  127c6c:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  127c70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c74:	e1d330b2 	ldrh	r3, [r3, #2]
  127c78:	e6ff3073 	uxth	r3, r3
  127c7c:	e1a00003 	mov	r0, r3
  127c80:	ebffba4f 	bl	1165c4 <lwip_htons>
  127c84:	e1a03000 	mov	r3, r0
  127c88:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  127c8c:	e3a03000 	mov	r3, #0
  127c90:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  127c94:	e3a03000 	mov	r3, #0
  127c98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127c9c:	e3a03000 	mov	r3, #0
  127ca0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127ca4:	e30c3c58 	movw	r3, #52312	; 0xcc58
  127ca8:	e3403015 	movt	r3, #21
  127cac:	e5933000 	ldr	r3, [r3]
  127cb0:	e50b3010 	str	r3, [fp, #-16]
  127cb4:	ea00004c 	b	127dec <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  127cb8:	e51b3010 	ldr	r3, [fp, #-16]
  127cbc:	e1d331b2 	ldrh	r3, [r3, #18]
  127cc0:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  127cc4:	e1520003 	cmp	r2, r3
  127cc8:	1a000042 	bne	127dd8 <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127ccc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127cd0:	e1a02003 	mov	r2, r3
  127cd4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  127cd8:	e51b0010 	ldr	r0, [fp, #-16]
  127cdc:	ebffff63 	bl	127a70 <udp_input_local_match>
  127ce0:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  127ce4:	e3530000 	cmp	r3, #0
  127ce8:	0a00003a 	beq	127dd8 <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127cec:	e51b3010 	ldr	r3, [fp, #-16]
  127cf0:	e5d33010 	ldrb	r3, [r3, #16]
  127cf4:	e2033004 	and	r3, r3, #4
  127cf8:	e3530000 	cmp	r3, #0
  127cfc:	1a00000b 	bne	127d30 <udp_input+0x1c8>
  127d00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127d04:	e3530000 	cmp	r3, #0
  127d08:	0a000006 	beq	127d28 <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  127d0c:	e51b3010 	ldr	r3, [fp, #-16]
  127d10:	e3530000 	cmp	r3, #0
  127d14:	0a000005 	beq	127d30 <udp_input+0x1c8>
  127d18:	e51b3010 	ldr	r3, [fp, #-16]
  127d1c:	e5933000 	ldr	r3, [r3]
  127d20:	e3530000 	cmp	r3, #0
  127d24:	0a000001 	beq	127d30 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127d28:	e51b3010 	ldr	r3, [fp, #-16]
  127d2c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127d30:	e51b3010 	ldr	r3, [fp, #-16]
  127d34:	e1d331b4 	ldrh	r3, [r3, #20]
  127d38:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  127d3c:	e1520003 	cmp	r2, r3
  127d40:	1a000024 	bne	127dd8 <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d44:	e51b3010 	ldr	r3, [fp, #-16]
  127d48:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  127d4c:	e3530000 	cmp	r3, #0
  127d50:	0a000006 	beq	127d70 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  127d54:	e51b3010 	ldr	r3, [fp, #-16]
  127d58:	e5932004 	ldr	r2, [r3, #4]
  127d5c:	e30f3618 	movw	r3, #63000	; 0xf618
  127d60:	e3403014 	movt	r3, #20
  127d64:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d68:	e1520003 	cmp	r2, r3
  127d6c:	1a000019 	bne	127dd8 <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127d70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d74:	e3530000 	cmp	r3, #0
  127d78:	0a00000d 	beq	127db4 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127d7c:	e51b3010 	ldr	r3, [fp, #-16]
  127d80:	e593200c 	ldr	r2, [r3, #12]
  127d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d88:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127d8c:	e30c3c58 	movw	r3, #52312	; 0xcc58
  127d90:	e3403015 	movt	r3, #21
  127d94:	e5932000 	ldr	r2, [r3]
  127d98:	e51b3010 	ldr	r3, [fp, #-16]
  127d9c:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127da0:	e30c3c58 	movw	r3, #52312	; 0xcc58
  127da4:	e3403015 	movt	r3, #21
  127da8:	e51b2010 	ldr	r2, [fp, #-16]
  127dac:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127db0:	ea000010 	b	127df8 <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127db4:	e30c3a50 	movw	r3, #51792	; 0xca50
  127db8:	e3403015 	movt	r3, #21
  127dbc:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127dc0:	e2833001 	add	r3, r3, #1
  127dc4:	e6ff2073 	uxth	r2, r3
  127dc8:	e30c3a50 	movw	r3, #51792	; 0xca50
  127dcc:	e3403015 	movt	r3, #21
  127dd0:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127dd4:	ea000007 	b	127df8 <udp_input+0x290>
      }
    }

    prev = pcb;
  127dd8:	e51b3010 	ldr	r3, [fp, #-16]
  127ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127de0:	e51b3010 	ldr	r3, [fp, #-16]
  127de4:	e593300c 	ldr	r3, [r3, #12]
  127de8:	e50b3010 	str	r3, [fp, #-16]
  127dec:	e51b3010 	ldr	r3, [fp, #-16]
  127df0:	e3530000 	cmp	r3, #0
  127df4:	1affffaf 	bne	127cb8 <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127df8:	e51b3010 	ldr	r3, [fp, #-16]
  127dfc:	e3530000 	cmp	r3, #0
  127e00:	1a000001 	bne	127e0c <udp_input+0x2a4>
    pcb = uncon_pcb;
  127e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127e08:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127e0c:	e51b3010 	ldr	r3, [fp, #-16]
  127e10:	e3530000 	cmp	r3, #0
  127e14:	0a000002 	beq	127e24 <udp_input+0x2bc>
    for_us = 1;
  127e18:	e3a03001 	mov	r3, #1
  127e1c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127e20:	ea00000a 	b	127e50 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127e24:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127e28:	e2833004 	add	r3, r3, #4
  127e2c:	e5932000 	ldr	r2, [r3]
  127e30:	e30f3618 	movw	r3, #63000	; 0xf618
  127e34:	e3403014 	movt	r3, #20
  127e38:	e5933014 	ldr	r3, [r3, #20]
  127e3c:	e1520003 	cmp	r2, r3
  127e40:	03a03001 	moveq	r3, #1
  127e44:	13a03000 	movne	r3, #0
  127e48:	e6ef3073 	uxtb	r3, r3
  127e4c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127e50:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127e54:	e3530000 	cmp	r3, #0
  127e58:	0a000079 	beq	128044 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127e5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127e60:	e1d330b6 	ldrh	r3, [r3, #6]
  127e64:	e6ff3073 	uxth	r3, r3
  127e68:	e3530000 	cmp	r3, #0
  127e6c:	0a00000a 	beq	127e9c <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127e70:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127e74:	e1d320b8 	ldrh	r2, [r3, #8]
  127e78:	e59f3244 	ldr	r3, [pc, #580]	; 1280c4 <udp_input+0x55c>
  127e7c:	e58d3000 	str	r3, [sp]
  127e80:	e59f3240 	ldr	r3, [pc, #576]	; 1280c8 <udp_input+0x560>
  127e84:	e3a01011 	mov	r1, #17
  127e88:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127e8c:	ebffc1eb 	bl	118640 <ip_chksum_pseudo>
  127e90:	e1a03000 	mov	r3, r0
  127e94:	e3530000 	cmp	r3, #0
  127e98:	1a00006d 	bne	128054 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127e9c:	e3e01007 	mvn	r1, #7
  127ea0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127ea4:	ebffcbdf 	bl	11ae28 <pbuf_header>
  127ea8:	e1a03000 	mov	r3, r0
  127eac:	e3530000 	cmp	r3, #0
  127eb0:	0a000018 	beq	127f18 <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127eb4:	e3080ab0 	movw	r0, #35504	; 0x8ab0
  127eb8:	e3400014 	movt	r0, #20
  127ebc:	ebff6c94 	bl	103114 <rt_kprintf>
  127ec0:	e3001155 	movw	r1, #341	; 0x155
  127ec4:	e3080ac4 	movw	r0, #35524	; 0x8ac4
  127ec8:	e3400014 	movt	r0, #20
  127ecc:	ebff8c83 	bl	10b0e0 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127ed0:	e30c3a50 	movw	r3, #51792	; 0xca50
  127ed4:	e3403015 	movt	r3, #21
  127ed8:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127edc:	e2833001 	add	r3, r3, #1
  127ee0:	e6ff2073 	uxth	r2, r3
  127ee4:	e30c3a50 	movw	r3, #51792	; 0xca50
  127ee8:	e3403015 	movt	r3, #21
  127eec:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127ef0:	e30c3a50 	movw	r3, #51792	; 0xca50
  127ef4:	e3403015 	movt	r3, #21
  127ef8:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127efc:	e2832001 	add	r2, r3, #1
  127f00:	e30c3a50 	movw	r3, #51792	; 0xca50
  127f04:	e3403015 	movt	r3, #21
  127f08:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127f0c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127f10:	ebffcbe2 	bl	11aea0 <pbuf_free>
      goto end;
  127f14:	ea00004d 	b	128050 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127f18:	e51b3010 	ldr	r3, [fp, #-16]
  127f1c:	e3530000 	cmp	r3, #0
  127f20:	0a000018 	beq	127f88 <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127f24:	e30c3a50 	movw	r3, #51792	; 0xca50
  127f28:	e3403015 	movt	r3, #21
  127f2c:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127f30:	e2832001 	add	r2, r3, #1
  127f34:	e30c3a50 	movw	r3, #51792	; 0xca50
  127f38:	e3403015 	movt	r3, #21
  127f3c:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127f40:	e51b3010 	ldr	r3, [fp, #-16]
  127f44:	e5933020 	ldr	r3, [r3, #32]
  127f48:	e3530000 	cmp	r3, #0
  127f4c:	0a00000a 	beq	127f7c <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127f50:	e51b3010 	ldr	r3, [fp, #-16]
  127f54:	e5934020 	ldr	r4, [r3, #32]
  127f58:	e51b3010 	ldr	r3, [fp, #-16]
  127f5c:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127f60:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127f64:	e58d3000 	str	r3, [sp]
  127f68:	e59f3158 	ldr	r3, [pc, #344]	; 1280c8 <udp_input+0x560>
  127f6c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127f70:	e51b1010 	ldr	r1, [fp, #-16]
  127f74:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127f78:	ea00004f 	b	1280bc <udp_input+0x554>
        pbuf_free(p);
  127f7c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127f80:	ebffcbc6 	bl	11aea0 <pbuf_free>
        goto end;
  127f84:	ea000031 	b	128050 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127f88:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127f8c:	e3530000 	cmp	r3, #0
  127f90:	1a000011 	bne	127fdc <udp_input+0x474>
  127f94:	e30f3618 	movw	r3, #63000	; 0xf618
  127f98:	e3403014 	movt	r3, #20
  127f9c:	e5933014 	ldr	r3, [r3, #20]
  127fa0:	e20330f0 	and	r3, r3, #240	; 0xf0
  127fa4:	e35300e0 	cmp	r3, #224	; 0xe0
  127fa8:	0a00000b 	beq	127fdc <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127fac:	e30f3618 	movw	r3, #63000	; 0xf618
  127fb0:	e3403014 	movt	r3, #20
  127fb4:	e1d330bc 	ldrh	r3, [r3, #12]
  127fb8:	e2833008 	add	r3, r3, #8
  127fbc:	e6ff3073 	uxth	r3, r3
  127fc0:	e6bf3073 	sxth	r3, r3
  127fc4:	e1a01003 	mov	r1, r3
  127fc8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fcc:	ebffcba4 	bl	11ae64 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127fd0:	e3a01003 	mov	r1, #3
  127fd4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fd8:	eb001f27 	bl	12fc7c <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127fdc:	e30c3a50 	movw	r3, #51792	; 0xca50
  127fe0:	e3403015 	movt	r3, #21
  127fe4:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127fe8:	e2833001 	add	r3, r3, #1
  127fec:	e6ff2073 	uxth	r2, r3
  127ff0:	e30c3a50 	movw	r3, #51792	; 0xca50
  127ff4:	e3403015 	movt	r3, #21
  127ff8:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  127ffc:	e30c3a50 	movw	r3, #51792	; 0xca50
  128000:	e3403015 	movt	r3, #21
  128004:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  128008:	e2833001 	add	r3, r3, #1
  12800c:	e6ff2073 	uxth	r2, r3
  128010:	e30c3a50 	movw	r3, #51792	; 0xca50
  128014:	e3403015 	movt	r3, #21
  128018:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  12801c:	e30c3a50 	movw	r3, #51792	; 0xca50
  128020:	e3403015 	movt	r3, #21
  128024:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  128028:	e2832001 	add	r2, r3, #1
  12802c:	e30c3a50 	movw	r3, #51792	; 0xca50
  128030:	e3403015 	movt	r3, #21
  128034:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  128038:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12803c:	ebffcb97 	bl	11aea0 <pbuf_free>
  return;
  128040:	ea00001d 	b	1280bc <udp_input+0x554>
    pbuf_free(p);
  128044:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128048:	ebffcb94 	bl	11aea0 <pbuf_free>
  return;
  12804c:	ea00001a 	b	1280bc <udp_input+0x554>
  128050:	ea000019 	b	1280bc <udp_input+0x554>
            goto chkerr;
  128054:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  128058:	e30c3a50 	movw	r3, #51792	; 0xca50
  12805c:	e3403015 	movt	r3, #21
  128060:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  128064:	e2833001 	add	r3, r3, #1
  128068:	e6ff2073 	uxth	r2, r3
  12806c:	e30c3a50 	movw	r3, #51792	; 0xca50
  128070:	e3403015 	movt	r3, #21
  128074:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  128078:	e30c3a50 	movw	r3, #51792	; 0xca50
  12807c:	e3403015 	movt	r3, #21
  128080:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  128084:	e2833001 	add	r3, r3, #1
  128088:	e6ff2073 	uxth	r2, r3
  12808c:	e30c3a50 	movw	r3, #51792	; 0xca50
  128090:	e3403015 	movt	r3, #21
  128094:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  128098:	e30c3a50 	movw	r3, #51792	; 0xca50
  12809c:	e3403015 	movt	r3, #21
  1280a0:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  1280a4:	e2832001 	add	r2, r3, #1
  1280a8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1280ac:	e3403015 	movt	r3, #21
  1280b0:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  1280b4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1280b8:	ebffcb78 	bl	11aea0 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  1280bc:	e24bd008 	sub	sp, fp, #8
  1280c0:	e8bd8810 	pop	{r4, fp, pc}
  1280c4:	0014f62c 	.word	0x0014f62c
  1280c8:	0014f628 	.word	0x0014f628

001280cc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  1280cc:	e92d4800 	push	{fp, lr}
  1280d0:	e28db004 	add	fp, sp, #4
  1280d4:	e24dd008 	sub	sp, sp, #8
  1280d8:	e50b0008 	str	r0, [fp, #-8]
  1280dc:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  1280e0:	e51b3008 	ldr	r3, [fp, #-8]
  1280e4:	e3530000 	cmp	r3, #0
  1280e8:	1a000001 	bne	1280f4 <udp_send+0x28>
    return ERR_VAL;
  1280ec:	e3e03005 	mvn	r3, #5
  1280f0:	ea000007 	b	128114 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  1280f4:	e51b3008 	ldr	r3, [fp, #-8]
  1280f8:	e2832004 	add	r2, r3, #4
  1280fc:	e51b3008 	ldr	r3, [fp, #-8]
  128100:	e1d331b4 	ldrh	r3, [r3, #20]
  128104:	e51b100c 	ldr	r1, [fp, #-12]
  128108:	e51b0008 	ldr	r0, [fp, #-8]
  12810c:	eb000003 	bl	128120 <udp_sendto>
  128110:	e1a03000 	mov	r3, r0
}
  128114:	e1a00003 	mov	r0, r3
  128118:	e24bd004 	sub	sp, fp, #4
  12811c:	e8bd8800 	pop	{fp, pc}

00128120 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  128120:	e92d4800 	push	{fp, lr}
  128124:	e28db004 	add	fp, sp, #4
  128128:	e24dd020 	sub	sp, sp, #32
  12812c:	e50b0010 	str	r0, [fp, #-16]
  128130:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128134:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128138:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  12813c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128140:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128144:	e51b3010 	ldr	r3, [fp, #-16]
  128148:	e3530000 	cmp	r3, #0
  12814c:	0a000002 	beq	12815c <udp_sendto+0x3c>
  128150:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128154:	e3530000 	cmp	r3, #0
  128158:	1a000001 	bne	128164 <udp_sendto+0x44>
    return ERR_VAL;
  12815c:	e3e03005 	mvn	r3, #5
  128160:	ea00002b 	b	128214 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  128164:	e51b3008 	ldr	r3, [fp, #-8]
  128168:	e5933000 	ldr	r3, [r3]
  12816c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128170:	e35300e0 	cmp	r3, #224	; 0xe0
  128174:	1a00000d 	bne	1281b0 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  128178:	e51b3010 	ldr	r3, [fp, #-16]
  12817c:	e5933018 	ldr	r3, [r3, #24]
  128180:	e3530000 	cmp	r3, #0
  128184:	0a000009 	beq	1281b0 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  128188:	e51b3010 	ldr	r3, [fp, #-16]
  12818c:	e5932018 	ldr	r2, [r3, #24]
  128190:	e30938fc 	movw	r3, #39164	; 0x98fc
  128194:	e3403014 	movt	r3, #20
  128198:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  12819c:	e1520003 	cmp	r2, r3
  1281a0:	0a000002 	beq	1281b0 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  1281a4:	e51b3010 	ldr	r3, [fp, #-16]
  1281a8:	e2833018 	add	r3, r3, #24
  1281ac:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  1281b0:	e51b0008 	ldr	r0, [fp, #-8]
  1281b4:	eb0023f2 	bl	131184 <ip4_route>
  1281b8:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  1281bc:	e51b300c 	ldr	r3, [fp, #-12]
  1281c0:	e3530000 	cmp	r3, #0
  1281c4:	1a000009 	bne	1281f0 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  1281c8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1281cc:	e3403015 	movt	r3, #21
  1281d0:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  1281d4:	e2833001 	add	r3, r3, #1
  1281d8:	e6ff2073 	uxth	r2, r3
  1281dc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1281e0:	e3403015 	movt	r3, #21
  1281e4:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  1281e8:	e3e03003 	mvn	r3, #3
  1281ec:	ea000008 	b	128214 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  1281f0:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1281f4:	e51b300c 	ldr	r3, [fp, #-12]
  1281f8:	e58d3000 	str	r3, [sp]
  1281fc:	e1a03002 	mov	r3, r2
  128200:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  128204:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128208:	e51b0010 	ldr	r0, [fp, #-16]
  12820c:	eb000003 	bl	128220 <udp_sendto_if>
  128210:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  128214:	e1a00003 	mov	r0, r3
  128218:	e24bd004 	sub	sp, fp, #4
  12821c:	e8bd8800 	pop	{fp, pc}

00128220 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  128220:	e92d4800 	push	{fp, lr}
  128224:	e28db004 	add	fp, sp, #4
  128228:	e24dd020 	sub	sp, sp, #32
  12822c:	e50b0010 	str	r0, [fp, #-16]
  128230:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128234:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128238:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  12823c:	e51b3010 	ldr	r3, [fp, #-16]
  128240:	e3530000 	cmp	r3, #0
  128244:	0a000002 	beq	128254 <udp_sendto_if+0x34>
  128248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12824c:	e3530000 	cmp	r3, #0
  128250:	1a000001 	bne	12825c <udp_sendto_if+0x3c>
    return ERR_VAL;
  128254:	e3e03005 	mvn	r3, #5
  128258:	ea000025 	b	1282f4 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  12825c:	e51b3010 	ldr	r3, [fp, #-16]
  128260:	e3530000 	cmp	r3, #0
  128264:	0a000008 	beq	12828c <udp_sendto_if+0x6c>
  128268:	e51b3010 	ldr	r3, [fp, #-16]
  12826c:	e5933000 	ldr	r3, [r3]
  128270:	e3530000 	cmp	r3, #0
  128274:	0a000004 	beq	12828c <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  128278:	e51b3010 	ldr	r3, [fp, #-16]
  12827c:	e5933000 	ldr	r3, [r3]
  128280:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128284:	e35300e0 	cmp	r3, #224	; 0xe0
  128288:	1a000003 	bne	12829c <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  12828c:	e59b3004 	ldr	r3, [fp, #4]
  128290:	e2833004 	add	r3, r3, #4
  128294:	e50b3008 	str	r3, [fp, #-8]
  128298:	ea00000a 	b	1282c8 <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  12829c:	e51b3010 	ldr	r3, [fp, #-16]
  1282a0:	e5932000 	ldr	r2, [r3]
  1282a4:	e59b3004 	ldr	r3, [fp, #4]
  1282a8:	e2833004 	add	r3, r3, #4
  1282ac:	e5933000 	ldr	r3, [r3]
  1282b0:	e1520003 	cmp	r2, r3
  1282b4:	0a000001 	beq	1282c0 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  1282b8:	e3e03003 	mvn	r3, #3
  1282bc:	ea00000c 	b	1282f4 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  1282c0:	e51b3010 	ldr	r3, [fp, #-16]
  1282c4:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  1282c8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1282cc:	e51b3008 	ldr	r3, [fp, #-8]
  1282d0:	e58d3004 	str	r3, [sp, #4]
  1282d4:	e59b3004 	ldr	r3, [fp, #4]
  1282d8:	e58d3000 	str	r3, [sp]
  1282dc:	e1a03002 	mov	r3, r2
  1282e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1282e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1282e8:	e51b0010 	ldr	r0, [fp, #-16]
  1282ec:	eb000003 	bl	128300 <udp_sendto_if_src>
  1282f0:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  1282f4:	e1a00003 	mov	r0, r3
  1282f8:	e24bd004 	sub	sp, fp, #4
  1282fc:	e8bd8800 	pop	{fp, pc}

00128300 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  128300:	e92d4800 	push	{fp, lr}
  128304:	e28db004 	add	fp, sp, #4
  128308:	e24dd030 	sub	sp, sp, #48	; 0x30
  12830c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128310:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  128314:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  128318:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  12831c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128320:	e3530000 	cmp	r3, #0
  128324:	0a000002 	beq	128334 <udp_sendto_if_src+0x34>
  128328:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12832c:	e3530000 	cmp	r3, #0
  128330:	1a000001 	bne	12833c <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  128334:	e3e03005 	mvn	r3, #5
  128338:	ea0000be 	b	128638 <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  12833c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128340:	e5d33008 	ldrb	r3, [r3, #8]
  128344:	e2033020 	and	r3, r3, #32
  128348:	e3530000 	cmp	r3, #0
  12834c:	1a000009 	bne	128378 <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  128350:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128354:	e5933000 	ldr	r3, [r3]
  128358:	e59b1004 	ldr	r1, [fp, #4]
  12835c:	e1a00003 	mov	r0, r3
  128360:	eb002866 	bl	132500 <ip4_addr_isbroadcast_u32>
  128364:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  128368:	e3530000 	cmp	r3, #0
  12836c:	0a000001 	beq	128378 <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  128370:	e3e03005 	mvn	r3, #5
  128374:	ea0000af 	b	128638 <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  128378:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12837c:	e1d331b2 	ldrh	r3, [r3, #18]
  128380:	e3530000 	cmp	r3, #0
  128384:	1a00000c 	bne	1283bc <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  128388:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12838c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128390:	e1d331b2 	ldrh	r3, [r3, #18]
  128394:	e1a02003 	mov	r2, r3
  128398:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12839c:	eb0000a8 	bl	128644 <udp_bind>
  1283a0:	e1a03000 	mov	r3, r0
  1283a4:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  1283a8:	e15b30db 	ldrsb	r3, [fp, #-11]
  1283ac:	e3530000 	cmp	r3, #0
  1283b0:	0a000001 	beq	1283bc <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  1283b4:	e15b30db 	ldrsb	r3, [fp, #-11]
  1283b8:	ea00009e 	b	128638 <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  1283bc:	e3a01008 	mov	r1, #8
  1283c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1283c4:	ebffca97 	bl	11ae28 <pbuf_header>
  1283c8:	e1a03000 	mov	r3, r0
  1283cc:	e3530000 	cmp	r3, #0
  1283d0:	0a000011 	beq	12841c <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  1283d4:	e3a02000 	mov	r2, #0
  1283d8:	e3a01008 	mov	r1, #8
  1283dc:	e3a00001 	mov	r0, #1
  1283e0:	ebffc7a7 	bl	11a284 <pbuf_alloc>
  1283e4:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  1283e8:	e51b3008 	ldr	r3, [fp, #-8]
  1283ec:	e3530000 	cmp	r3, #0
  1283f0:	1a000001 	bne	1283fc <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  1283f4:	e3e03000 	mvn	r3, #0
  1283f8:	ea00008e 	b	128638 <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  1283fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128400:	e1d330b8 	ldrh	r3, [r3, #8]
  128404:	e3530000 	cmp	r3, #0
  128408:	0a000005 	beq	128424 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  12840c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128410:	e51b0008 	ldr	r0, [fp, #-8]
  128414:	ebffcba2 	bl	11b2a4 <pbuf_chain>
  128418:	ea000001 	b	128424 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  12841c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128420:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  128424:	e51b3008 	ldr	r3, [fp, #-8]
  128428:	e1d330ba 	ldrh	r3, [r3, #10]
  12842c:	e3530007 	cmp	r3, #7
  128430:	8a000006 	bhi	128450 <udp_sendto_if_src+0x150>
  128434:	e3080af0 	movw	r0, #35568	; 0x8af0
  128438:	e3400014 	movt	r0, #20
  12843c:	ebff6b34 	bl	103114 <rt_kprintf>
  128440:	e3a01fb7 	mov	r1, #732	; 0x2dc
  128444:	e3080ac4 	movw	r0, #35524	; 0x8ac4
  128448:	e3400014 	movt	r0, #20
  12844c:	ebff8b23 	bl	10b0e0 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  128450:	e51b3008 	ldr	r3, [fp, #-8]
  128454:	e5933004 	ldr	r3, [r3, #4]
  128458:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  12845c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128460:	e1d331b2 	ldrh	r3, [r3, #18]
  128464:	e1a00003 	mov	r0, r3
  128468:	ebffb855 	bl	1165c4 <lwip_htons>
  12846c:	e1a03000 	mov	r3, r0
  128470:	e1a02003 	mov	r2, r3
  128474:	e51b3010 	ldr	r3, [fp, #-16]
  128478:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  12847c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  128480:	e1a00003 	mov	r0, r3
  128484:	ebffb84e 	bl	1165c4 <lwip_htons>
  128488:	e1a03000 	mov	r3, r0
  12848c:	e1a02003 	mov	r2, r3
  128490:	e51b3010 	ldr	r3, [fp, #-16]
  128494:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  128498:	e51b3010 	ldr	r3, [fp, #-16]
  12849c:	e3a02000 	mov	r2, #0
  1284a0:	e5c32006 	strb	r2, [r3, #6]
  1284a4:	e3a02000 	mov	r2, #0
  1284a8:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  1284ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1284b0:	e5d33010 	ldrb	r3, [r3, #16]
  1284b4:	e2033008 	and	r3, r3, #8
  1284b8:	e3530000 	cmp	r3, #0
  1284bc:	0a00000a 	beq	1284ec <udp_sendto_if_src+0x1ec>
  1284c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1284c4:	e5933000 	ldr	r3, [r3]
  1284c8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1284cc:	e35300e0 	cmp	r3, #224	; 0xe0
  1284d0:	1a000005 	bne	1284ec <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  1284d4:	e51b3008 	ldr	r3, [fp, #-8]
  1284d8:	e5d3300d 	ldrb	r3, [r3, #13]
  1284dc:	e3833004 	orr	r3, r3, #4
  1284e0:	e6ef2073 	uxtb	r2, r3
  1284e4:	e51b3008 	ldr	r3, [fp, #-8]
  1284e8:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  1284ec:	e51b3008 	ldr	r3, [fp, #-8]
  1284f0:	e1d330b8 	ldrh	r3, [r3, #8]
  1284f4:	e1a00003 	mov	r0, r3
  1284f8:	ebffb831 	bl	1165c4 <lwip_htons>
  1284fc:	e1a03000 	mov	r3, r0
  128500:	e1a02003 	mov	r2, r3
  128504:	e51b3010 	ldr	r3, [fp, #-16]
  128508:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  12850c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128510:	e5d33010 	ldrb	r3, [r3, #16]
  128514:	e2033001 	and	r3, r3, #1
  128518:	e3530000 	cmp	r3, #0
  12851c:	1a000011 	bne	128568 <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  128520:	e51b3008 	ldr	r3, [fp, #-8]
  128524:	e1d320b8 	ldrh	r2, [r3, #8]
  128528:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12852c:	e58d3000 	str	r3, [sp]
  128530:	e59b3008 	ldr	r3, [fp, #8]
  128534:	e3a01011 	mov	r1, #17
  128538:	e51b0008 	ldr	r0, [fp, #-8]
  12853c:	ebffc03f 	bl	118640 <ip_chksum_pseudo>
  128540:	e1a03000 	mov	r3, r0
  128544:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  128548:	e15b30ba 	ldrh	r3, [fp, #-10]
  12854c:	e3530000 	cmp	r3, #0
  128550:	1a000001 	bne	12855c <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  128554:	e3e03000 	mvn	r3, #0
  128558:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  12855c:	e51b3010 	ldr	r3, [fp, #-16]
  128560:	e15b20ba 	ldrh	r2, [fp, #-10]
  128564:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  128568:	e3a03011 	mov	r3, #17
  12856c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  128570:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128574:	e5933000 	ldr	r3, [r3]
  128578:	e20330f0 	and	r3, r3, #240	; 0xf0
  12857c:	e35300e0 	cmp	r3, #224	; 0xe0
  128580:	1a000002 	bne	128590 <udp_sendto_if_src+0x290>
  128584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128588:	e5d3301c 	ldrb	r3, [r3, #28]
  12858c:	ea000001 	b	128598 <udp_sendto_if_src+0x298>
  128590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128594:	e5d3300a 	ldrb	r3, [r3, #10]
  128598:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  12859c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1285a0:	e5d33009 	ldrb	r3, [r3, #9]
  1285a4:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  1285a8:	e59b2004 	ldr	r2, [fp, #4]
  1285ac:	e58d2008 	str	r2, [sp, #8]
  1285b0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1285b4:	e58d2004 	str	r2, [sp, #4]
  1285b8:	e58d3000 	str	r3, [sp]
  1285bc:	e1a03001 	mov	r3, r1
  1285c0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1285c4:	e59b1008 	ldr	r1, [fp, #8]
  1285c8:	e51b0008 	ldr	r0, [fp, #-8]
  1285cc:	eb00260a 	bl	131dfc <ip4_output_if_src>
  1285d0:	e1a03000 	mov	r3, r0
  1285d4:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  1285d8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1285dc:	e3403015 	movt	r3, #21
  1285e0:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  1285e4:	e2832001 	add	r2, r3, #1
  1285e8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1285ec:	e3403015 	movt	r3, #21
  1285f0:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  1285f4:	e51b2008 	ldr	r2, [fp, #-8]
  1285f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1285fc:	e1520003 	cmp	r2, r3
  128600:	0a000003 	beq	128614 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  128604:	e51b0008 	ldr	r0, [fp, #-8]
  128608:	ebffca24 	bl	11aea0 <pbuf_free>
    q = NULL;
  12860c:	e3a03000 	mov	r3, #0
  128610:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  128614:	e30c3a50 	movw	r3, #51792	; 0xca50
  128618:	e3403015 	movt	r3, #21
  12861c:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  128620:	e2833001 	add	r3, r3, #1
  128624:	e6ff2073 	uxth	r2, r3
  128628:	e30c3a50 	movw	r3, #51792	; 0xca50
  12862c:	e3403015 	movt	r3, #21
  128630:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  128634:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  128638:	e1a00003 	mov	r0, r3
  12863c:	e24bd004 	sub	sp, fp, #4
  128640:	e8bd8800 	pop	{fp, pc}

00128644 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128644:	e92d4800 	push	{fp, lr}
  128648:	e28db004 	add	fp, sp, #4
  12864c:	e24dd018 	sub	sp, sp, #24
  128650:	e50b0010 	str	r0, [fp, #-16]
  128654:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128658:	e1a03002 	mov	r3, r2
  12865c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  128660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128664:	e3530000 	cmp	r3, #0
  128668:	1a000002 	bne	128678 <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  12866c:	e30938f8 	movw	r3, #39160	; 0x98f8
  128670:	e3403014 	movt	r3, #20
  128674:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  128678:	e51b3010 	ldr	r3, [fp, #-16]
  12867c:	e3530000 	cmp	r3, #0
  128680:	0a000002 	beq	128690 <udp_bind+0x4c>
  128684:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128688:	e3530000 	cmp	r3, #0
  12868c:	1a000001 	bne	128698 <udp_bind+0x54>
    return ERR_VAL;
  128690:	e3e03005 	mvn	r3, #5
  128694:	ea00005d 	b	128810 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  128698:	e3a03000 	mov	r3, #0
  12869c:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286a0:	e30c3c58 	movw	r3, #52312	; 0xcc58
  1286a4:	e3403015 	movt	r3, #21
  1286a8:	e5933000 	ldr	r3, [r3]
  1286ac:	e50b3008 	str	r3, [fp, #-8]
  1286b0:	ea000009 	b	1286dc <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  1286b4:	e51b2010 	ldr	r2, [fp, #-16]
  1286b8:	e51b3008 	ldr	r3, [fp, #-8]
  1286bc:	e1520003 	cmp	r2, r3
  1286c0:	1a000002 	bne	1286d0 <udp_bind+0x8c>
      rebind = 1;
  1286c4:	e3a03001 	mov	r3, #1
  1286c8:	e54b3009 	strb	r3, [fp, #-9]
      break;
  1286cc:	ea000005 	b	1286e8 <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286d0:	e51b3008 	ldr	r3, [fp, #-8]
  1286d4:	e593300c 	ldr	r3, [r3, #12]
  1286d8:	e50b3008 	str	r3, [fp, #-8]
  1286dc:	e51b3008 	ldr	r3, [fp, #-8]
  1286e0:	e3530000 	cmp	r3, #0
  1286e4:	1afffff2 	bne	1286b4 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  1286e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1286ec:	e3530000 	cmp	r3, #0
  1286f0:	1a000007 	bne	128714 <udp_bind+0xd0>
    port = udp_new_port();
  1286f4:	ebfffca8 	bl	12799c <udp_new_port>
  1286f8:	e1a03000 	mov	r3, r0
  1286fc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  128700:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128704:	e3530000 	cmp	r3, #0
  128708:	1a000027 	bne	1287ac <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  12870c:	e3e03007 	mvn	r3, #7
  128710:	ea00003e 	b	128810 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128714:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128718:	e3403015 	movt	r3, #21
  12871c:	e5933000 	ldr	r3, [r3]
  128720:	e50b3008 	str	r3, [fp, #-8]
  128724:	ea00001d 	b	1287a0 <udp_bind+0x15c>
      if (pcb != ipcb) {
  128728:	e51b2010 	ldr	r2, [fp, #-16]
  12872c:	e51b3008 	ldr	r3, [fp, #-8]
  128730:	e1520003 	cmp	r2, r3
  128734:	0a000016 	beq	128794 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  128738:	e51b3010 	ldr	r3, [fp, #-16]
  12873c:	e5d33008 	ldrb	r3, [r3, #8]
  128740:	e2033004 	and	r3, r3, #4
  128744:	e3530000 	cmp	r3, #0
  128748:	0a000004 	beq	128760 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  12874c:	e51b3008 	ldr	r3, [fp, #-8]
  128750:	e5d33008 	ldrb	r3, [r3, #8]
  128754:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  128758:	e3530000 	cmp	r3, #0
  12875c:	1a00000c 	bne	128794 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  128760:	e51b3008 	ldr	r3, [fp, #-8]
  128764:	e1d331b2 	ldrh	r3, [r3, #18]
  128768:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  12876c:	e1520003 	cmp	r2, r3
  128770:	1a000007 	bne	128794 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  128774:	e51b3008 	ldr	r3, [fp, #-8]
  128778:	e5932000 	ldr	r2, [r3]
  12877c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128780:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  128784:	e1520003 	cmp	r2, r3
  128788:	1a000001 	bne	128794 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  12878c:	e3e03007 	mvn	r3, #7
  128790:	ea00001e 	b	128810 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128794:	e51b3008 	ldr	r3, [fp, #-8]
  128798:	e593300c 	ldr	r3, [r3, #12]
  12879c:	e50b3008 	str	r3, [fp, #-8]
  1287a0:	e51b3008 	ldr	r3, [fp, #-8]
  1287a4:	e3530000 	cmp	r3, #0
  1287a8:	1affffde 	bne	128728 <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  1287ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287b0:	e3530000 	cmp	r3, #0
  1287b4:	0a000002 	beq	1287c4 <udp_bind+0x180>
  1287b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287bc:	e5933000 	ldr	r3, [r3]
  1287c0:	ea000000 	b	1287c8 <udp_bind+0x184>
  1287c4:	e3a03000 	mov	r3, #0
  1287c8:	e51b2010 	ldr	r2, [fp, #-16]
  1287cc:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  1287d0:	e51b3010 	ldr	r3, [fp, #-16]
  1287d4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1287d8:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  1287dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1287e0:	e3530000 	cmp	r3, #0
  1287e4:	1a000008 	bne	12880c <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  1287e8:	e30c3c58 	movw	r3, #52312	; 0xcc58
  1287ec:	e3403015 	movt	r3, #21
  1287f0:	e5932000 	ldr	r2, [r3]
  1287f4:	e51b3010 	ldr	r3, [fp, #-16]
  1287f8:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  1287fc:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128800:	e3403015 	movt	r3, #21
  128804:	e51b2010 	ldr	r2, [fp, #-16]
  128808:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  12880c:	e3a03000 	mov	r3, #0
}
  128810:	e1a00003 	mov	r0, r3
  128814:	e24bd004 	sub	sp, fp, #4
  128818:	e8bd8800 	pop	{fp, pc}

0012881c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  12881c:	e92d4800 	push	{fp, lr}
  128820:	e28db004 	add	fp, sp, #4
  128824:	e24dd018 	sub	sp, sp, #24
  128828:	e50b0010 	str	r0, [fp, #-16]
  12882c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128830:	e1a03002 	mov	r3, r2
  128834:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  128838:	e51b3010 	ldr	r3, [fp, #-16]
  12883c:	e3530000 	cmp	r3, #0
  128840:	0a000002 	beq	128850 <udp_connect+0x34>
  128844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128848:	e3530000 	cmp	r3, #0
  12884c:	1a000001 	bne	128858 <udp_connect+0x3c>
    return ERR_VAL;
  128850:	e3e03005 	mvn	r3, #5
  128854:	ea00003d 	b	128950 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  128858:	e51b3010 	ldr	r3, [fp, #-16]
  12885c:	e1d331b2 	ldrh	r3, [r3, #18]
  128860:	e3530000 	cmp	r3, #0
  128864:	1a00000c 	bne	12889c <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  128868:	e51b1010 	ldr	r1, [fp, #-16]
  12886c:	e51b3010 	ldr	r3, [fp, #-16]
  128870:	e1d331b2 	ldrh	r3, [r3, #18]
  128874:	e1a02003 	mov	r2, r3
  128878:	e51b0010 	ldr	r0, [fp, #-16]
  12887c:	ebffff70 	bl	128644 <udp_bind>
  128880:	e1a03000 	mov	r3, r0
  128884:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  128888:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12888c:	e3530000 	cmp	r3, #0
  128890:	0a000001 	beq	12889c <udp_connect+0x80>
      return err;
  128894:	e15b30d9 	ldrsb	r3, [fp, #-9]
  128898:	ea00002c 	b	128950 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  12889c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288a0:	e3530000 	cmp	r3, #0
  1288a4:	0a000002 	beq	1288b4 <udp_connect+0x98>
  1288a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288ac:	e5933000 	ldr	r3, [r3]
  1288b0:	ea000000 	b	1288b8 <udp_connect+0x9c>
  1288b4:	e3a03000 	mov	r3, #0
  1288b8:	e51b2010 	ldr	r2, [fp, #-16]
  1288bc:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  1288c0:	e51b3010 	ldr	r3, [fp, #-16]
  1288c4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1288c8:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  1288cc:	e51b3010 	ldr	r3, [fp, #-16]
  1288d0:	e5d33010 	ldrb	r3, [r3, #16]
  1288d4:	e3833004 	orr	r3, r3, #4
  1288d8:	e6ef2073 	uxtb	r2, r3
  1288dc:	e51b3010 	ldr	r3, [fp, #-16]
  1288e0:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1288e4:	e30c3c58 	movw	r3, #52312	; 0xcc58
  1288e8:	e3403015 	movt	r3, #21
  1288ec:	e5933000 	ldr	r3, [r3]
  1288f0:	e50b3008 	str	r3, [fp, #-8]
  1288f4:	ea000008 	b	12891c <udp_connect+0x100>
    if (pcb == ipcb) {
  1288f8:	e51b2010 	ldr	r2, [fp, #-16]
  1288fc:	e51b3008 	ldr	r3, [fp, #-8]
  128900:	e1520003 	cmp	r2, r3
  128904:	1a000001 	bne	128910 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  128908:	e3a03000 	mov	r3, #0
  12890c:	ea00000f 	b	128950 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128910:	e51b3008 	ldr	r3, [fp, #-8]
  128914:	e593300c 	ldr	r3, [r3, #12]
  128918:	e50b3008 	str	r3, [fp, #-8]
  12891c:	e51b3008 	ldr	r3, [fp, #-8]
  128920:	e3530000 	cmp	r3, #0
  128924:	1afffff3 	bne	1288f8 <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  128928:	e30c3c58 	movw	r3, #52312	; 0xcc58
  12892c:	e3403015 	movt	r3, #21
  128930:	e5932000 	ldr	r2, [r3]
  128934:	e51b3010 	ldr	r3, [fp, #-16]
  128938:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  12893c:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128940:	e3403015 	movt	r3, #21
  128944:	e51b2010 	ldr	r2, [fp, #-16]
  128948:	e5832000 	str	r2, [r3]
  return ERR_OK;
  12894c:	e3a03000 	mov	r3, #0
}
  128950:	e1a00003 	mov	r0, r3
  128954:	e24bd004 	sub	sp, fp, #4
  128958:	e8bd8800 	pop	{fp, pc}

0012895c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  12895c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128960:	e28db000 	add	fp, sp, #0
  128964:	e24dd00c 	sub	sp, sp, #12
  128968:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  12896c:	e51b3008 	ldr	r3, [fp, #-8]
  128970:	e3a02000 	mov	r2, #0
  128974:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  128978:	e51b3008 	ldr	r3, [fp, #-8]
  12897c:	e3a02000 	mov	r2, #0
  128980:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  128984:	e51b3008 	ldr	r3, [fp, #-8]
  128988:	e5d33010 	ldrb	r3, [r3, #16]
  12898c:	e3c33004 	bic	r3, r3, #4
  128990:	e6ef2073 	uxtb	r2, r3
  128994:	e51b3008 	ldr	r3, [fp, #-8]
  128998:	e5c32010 	strb	r2, [r3, #16]
}
  12899c:	e320f000 	nop	{0}
  1289a0:	e28bd000 	add	sp, fp, #0
  1289a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1289a8:	e12fff1e 	bx	lr

001289ac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  1289ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1289b0:	e28db000 	add	fp, sp, #0
  1289b4:	e24dd014 	sub	sp, sp, #20
  1289b8:	e50b0008 	str	r0, [fp, #-8]
  1289bc:	e50b100c 	str	r1, [fp, #-12]
  1289c0:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  1289c4:	e51b3008 	ldr	r3, [fp, #-8]
  1289c8:	e51b200c 	ldr	r2, [fp, #-12]
  1289cc:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  1289d0:	e51b3008 	ldr	r3, [fp, #-8]
  1289d4:	e51b2010 	ldr	r2, [fp, #-16]
  1289d8:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1289dc:	e320f000 	nop	{0}
  1289e0:	e28bd000 	add	sp, fp, #0
  1289e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1289e8:	e12fff1e 	bx	lr

001289ec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  1289ec:	e92d4800 	push	{fp, lr}
  1289f0:	e28db004 	add	fp, sp, #4
  1289f4:	e24dd010 	sub	sp, sp, #16
  1289f8:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  1289fc:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128a00:	e3403015 	movt	r3, #21
  128a04:	e5933000 	ldr	r3, [r3]
  128a08:	e51b2010 	ldr	r2, [fp, #-16]
  128a0c:	e1520003 	cmp	r2, r3
  128a10:	1a000007 	bne	128a34 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  128a14:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128a18:	e3403015 	movt	r3, #21
  128a1c:	e5933000 	ldr	r3, [r3]
  128a20:	e593200c 	ldr	r2, [r3, #12]
  128a24:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128a28:	e3403015 	movt	r3, #21
  128a2c:	e5832000 	str	r2, [r3]
  128a30:	ea000018 	b	128a98 <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a34:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128a38:	e3403015 	movt	r3, #21
  128a3c:	e5933000 	ldr	r3, [r3]
  128a40:	e50b3008 	str	r3, [fp, #-8]
  128a44:	ea000010 	b	128a8c <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  128a48:	e51b3008 	ldr	r3, [fp, #-8]
  128a4c:	e593300c 	ldr	r3, [r3, #12]
  128a50:	e3530000 	cmp	r3, #0
  128a54:	0a000009 	beq	128a80 <udp_remove+0x94>
  128a58:	e51b3008 	ldr	r3, [fp, #-8]
  128a5c:	e593300c 	ldr	r3, [r3, #12]
  128a60:	e51b2010 	ldr	r2, [fp, #-16]
  128a64:	e1520003 	cmp	r2, r3
  128a68:	1a000004 	bne	128a80 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  128a6c:	e51b3010 	ldr	r3, [fp, #-16]
  128a70:	e593200c 	ldr	r2, [r3, #12]
  128a74:	e51b3008 	ldr	r3, [fp, #-8]
  128a78:	e583200c 	str	r2, [r3, #12]
        break;
  128a7c:	ea000005 	b	128a98 <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a80:	e51b3008 	ldr	r3, [fp, #-8]
  128a84:	e593300c 	ldr	r3, [r3, #12]
  128a88:	e50b3008 	str	r3, [fp, #-8]
  128a8c:	e51b3008 	ldr	r3, [fp, #-8]
  128a90:	e3530000 	cmp	r3, #0
  128a94:	1affffeb 	bne	128a48 <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  128a98:	e51b1010 	ldr	r1, [fp, #-16]
  128a9c:	e3a00001 	mov	r0, #1
  128aa0:	ebffc1f0 	bl	119268 <memp_free>
}
  128aa4:	e320f000 	nop	{0}
  128aa8:	e24bd004 	sub	sp, fp, #4
  128aac:	e8bd8800 	pop	{fp, pc}

00128ab0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128ab0:	e92d4800 	push	{fp, lr}
  128ab4:	e28db004 	add	fp, sp, #4
  128ab8:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128abc:	e3002452 	movw	r2, #1106	; 0x452
  128ac0:	e3081ac4 	movw	r1, #35524	; 0x8ac4
  128ac4:	e3401014 	movt	r1, #20
  128ac8:	e3a00001 	mov	r0, #1
  128acc:	ebffc17d 	bl	1190c8 <memp_malloc_fn>
  128ad0:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  128ad4:	e51b3008 	ldr	r3, [fp, #-8]
  128ad8:	e3530000 	cmp	r3, #0
  128adc:	0a000009 	beq	128b08 <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128ae0:	e3a02028 	mov	r2, #40	; 0x28
  128ae4:	e3a01000 	mov	r1, #0
  128ae8:	e51b0008 	ldr	r0, [fp, #-8]
  128aec:	eb0061dc 	bl	141264 <memset>
    pcb->ttl = UDP_TTL;
  128af0:	e51b3008 	ldr	r3, [fp, #-8]
  128af4:	e3e02000 	mvn	r2, #0
  128af8:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  128afc:	e51b3008 	ldr	r3, [fp, #-8]
  128b00:	e3e02000 	mvn	r2, #0
  128b04:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  128b08:	e51b3008 	ldr	r3, [fp, #-8]
}
  128b0c:	e1a00003 	mov	r0, r3
  128b10:	e24bd004 	sub	sp, fp, #4
  128b14:	e8bd8800 	pop	{fp, pc}

00128b18 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  128b18:	e92d4800 	push	{fp, lr}
  128b1c:	e28db004 	add	fp, sp, #4
  128b20:	e24dd010 	sub	sp, sp, #16
  128b24:	e1a03000 	mov	r3, r0
  128b28:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128b2c:	ebffffdf 	bl	128ab0 <udp_new>
  128b30:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  128b34:	e51b3008 	ldr	r3, [fp, #-8]
}
  128b38:	e1a00003 	mov	r0, r3
  128b3c:	e24bd004 	sub	sp, fp, #4
  128b40:	e8bd8800 	pop	{fp, pc}

00128b44 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  128b44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128b48:	e28db000 	add	fp, sp, #0
  128b4c:	e24dd014 	sub	sp, sp, #20
  128b50:	e50b0010 	str	r0, [fp, #-16]
  128b54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  128b58:	e51b3010 	ldr	r3, [fp, #-16]
  128b5c:	e3530000 	cmp	r3, #0
  128b60:	0a00001f 	beq	128be4 <udp_netif_ip_addr_changed+0xa0>
  128b64:	e51b3010 	ldr	r3, [fp, #-16]
  128b68:	e5933000 	ldr	r3, [r3]
  128b6c:	e3530000 	cmp	r3, #0
  128b70:	0a00001b 	beq	128be4 <udp_netif_ip_addr_changed+0xa0>
  128b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b78:	e3530000 	cmp	r3, #0
  128b7c:	0a000018 	beq	128be4 <udp_netif_ip_addr_changed+0xa0>
  128b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b84:	e5933000 	ldr	r3, [r3]
  128b88:	e3530000 	cmp	r3, #0
  128b8c:	0a000014 	beq	128be4 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128b90:	e30c3c58 	movw	r3, #52312	; 0xcc58
  128b94:	e3403015 	movt	r3, #21
  128b98:	e5933000 	ldr	r3, [r3]
  128b9c:	e50b3008 	str	r3, [fp, #-8]
  128ba0:	ea00000c 	b	128bd8 <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  128ba4:	e51b3008 	ldr	r3, [fp, #-8]
  128ba8:	e5932000 	ldr	r2, [r3]
  128bac:	e51b3010 	ldr	r3, [fp, #-16]
  128bb0:	e5933000 	ldr	r3, [r3]
  128bb4:	e1520003 	cmp	r2, r3
  128bb8:	1a000003 	bne	128bcc <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128bbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128bc0:	e5932000 	ldr	r2, [r3]
  128bc4:	e51b3008 	ldr	r3, [fp, #-8]
  128bc8:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128bcc:	e51b3008 	ldr	r3, [fp, #-8]
  128bd0:	e593300c 	ldr	r3, [r3, #12]
  128bd4:	e50b3008 	str	r3, [fp, #-8]
  128bd8:	e51b3008 	ldr	r3, [fp, #-8]
  128bdc:	e3530000 	cmp	r3, #0
  128be0:	1affffef 	bne	128ba4 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  128be4:	e320f000 	nop	{0}
  128be8:	e28bd000 	add	sp, fp, #0
  128bec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128bf0:	e12fff1e 	bx	lr

00128bf4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  128bf4:	e92d4800 	push	{fp, lr}
  128bf8:	e28db004 	add	fp, sp, #4
  128bfc:	e24dd018 	sub	sp, sp, #24
  128c00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128c04:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  128c08:	e3a0300e 	mov	r3, #14
  128c0c:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  128c10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128c14:	e1d330ba 	ldrh	r3, [r3, #10]
  128c18:	e353000e 	cmp	r3, #14
  128c1c:	8a000015 	bhi	128c78 <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128c20:	e30c3a50 	movw	r3, #51792	; 0xca50
  128c24:	e3403015 	movt	r3, #21
  128c28:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128c2c:	e2833001 	add	r3, r3, #1
  128c30:	e6ff2073 	uxth	r2, r3
  128c34:	e30c3a50 	movw	r3, #51792	; 0xca50
  128c38:	e3403015 	movt	r3, #21
  128c3c:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  128c40:	e30c3a50 	movw	r3, #51792	; 0xca50
  128c44:	e3403015 	movt	r3, #21
  128c48:	e1d331be 	ldrh	r3, [r3, #30]
  128c4c:	e2833001 	add	r3, r3, #1
  128c50:	e6ff2073 	uxth	r2, r3
  128c54:	e30c3a50 	movw	r3, #51792	; 0xca50
  128c58:	e3403015 	movt	r3, #21
  128c5c:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  128c60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c64:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  128c68:	e2832001 	add	r2, r3, #1
  128c6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c70:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  128c74:	ea000096 	b	128ed4 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  128c78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128c7c:	e5933004 	ldr	r3, [r3, #4]
  128c80:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  128c84:	e51b300c 	ldr	r3, [fp, #-12]
  128c88:	e5d3200c 	ldrb	r2, [r3, #12]
  128c8c:	e5d3300d 	ldrb	r3, [r3, #13]
  128c90:	e1a03403 	lsl	r3, r3, #8
  128c94:	e1833002 	orr	r3, r3, r2
  128c98:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128c9c:	e51b300c 	ldr	r3, [fp, #-12]
  128ca0:	e5d33000 	ldrb	r3, [r3]
  128ca4:	e2033001 	and	r3, r3, #1
  128ca8:	e3530000 	cmp	r3, #0
  128cac:	0a000021 	beq	128d38 <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128cb0:	e51b300c 	ldr	r3, [fp, #-12]
  128cb4:	e5d33000 	ldrb	r3, [r3]
  128cb8:	e3530001 	cmp	r3, #1
  128cbc:	1a00000e 	bne	128cfc <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128cc0:	e51b300c 	ldr	r3, [fp, #-12]
  128cc4:	e5d33001 	ldrb	r3, [r3, #1]
  128cc8:	e3530000 	cmp	r3, #0
  128ccc:	1a000019 	bne	128d38 <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128cd0:	e51b300c 	ldr	r3, [fp, #-12]
  128cd4:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128cd8:	e353005e 	cmp	r3, #94	; 0x5e
  128cdc:	1a000015 	bne	128d38 <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128ce0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128ce4:	e5d3300d 	ldrb	r3, [r3, #13]
  128ce8:	e3833010 	orr	r3, r3, #16
  128cec:	e6ef2073 	uxtb	r2, r3
  128cf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128cf4:	e5c3200d 	strb	r2, [r3, #13]
  128cf8:	ea00000e 	b	128d38 <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  128cfc:	e51b300c 	ldr	r3, [fp, #-12]
  128d00:	e3a02006 	mov	r2, #6
  128d04:	e3081b20 	movw	r1, #35616	; 0x8b20
  128d08:	e3401014 	movt	r1, #20
  128d0c:	e1a00003 	mov	r0, r3
  128d10:	eb0060da 	bl	141080 <memcmp>
  128d14:	e1a03000 	mov	r3, r0
  128d18:	e3530000 	cmp	r3, #0
  128d1c:	1a000005 	bne	128d38 <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128d20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d24:	e5d3300d 	ldrb	r3, [r3, #13]
  128d28:	e3833008 	orr	r3, r3, #8
  128d2c:	e6ef2073 	uxtb	r2, r3
  128d30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d34:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  128d38:	e15b30be 	ldrh	r3, [fp, #-14]
  128d3c:	e3530008 	cmp	r3, #8
  128d40:	0a000003 	beq	128d54 <ethernet_input+0x160>
  128d44:	e3002608 	movw	r2, #1544	; 0x608
  128d48:	e1530002 	cmp	r3, r2
  128d4c:	0a000019 	beq	128db8 <ethernet_input+0x1c4>
  128d50:	ea000042 	b	128e60 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128d54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128d58:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128d5c:	e2033008 	and	r3, r3, #8
  128d60:	e3530000 	cmp	r3, #0
  128d64:	0a000055 	beq	128ec0 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128d68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d6c:	e1d330ba 	ldrh	r3, [r3, #10]
  128d70:	e1a02003 	mov	r2, r3
  128d74:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128d78:	e1520003 	cmp	r2, r3
  128d7c:	ba000051 	blt	128ec8 <ethernet_input+0x2d4>
  128d80:	e15b30b6 	ldrh	r3, [fp, #-6]
  128d84:	e2633000 	rsb	r3, r3, #0
  128d88:	e6ff3073 	uxth	r3, r3
  128d8c:	e6bf3073 	sxth	r3, r3
  128d90:	e1a01003 	mov	r1, r3
  128d94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128d98:	ebffc822 	bl	11ae28 <pbuf_header>
  128d9c:	e1a03000 	mov	r3, r0
  128da0:	e3530000 	cmp	r3, #0
  128da4:	1a000047 	bne	128ec8 <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128da8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128dac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128db0:	eb00219b 	bl	131424 <ip4_input>
      }
      break;
  128db4:	ea00003f 	b	128eb8 <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128db8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128dbc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128dc0:	e2033008 	and	r3, r3, #8
  128dc4:	e3530000 	cmp	r3, #0
  128dc8:	0a000040 	beq	128ed0 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128dcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128dd0:	e1d330ba 	ldrh	r3, [r3, #10]
  128dd4:	e1a02003 	mov	r2, r3
  128dd8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128ddc:	e1520003 	cmp	r2, r3
  128de0:	ba000009 	blt	128e0c <ethernet_input+0x218>
  128de4:	e15b30b6 	ldrh	r3, [fp, #-6]
  128de8:	e2633000 	rsb	r3, r3, #0
  128dec:	e6ff3073 	uxth	r3, r3
  128df0:	e6bf3073 	sxth	r3, r3
  128df4:	e1a01003 	mov	r1, r3
  128df8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128dfc:	ebffc809 	bl	11ae28 <pbuf_header>
  128e00:	e1a03000 	mov	r3, r0
  128e04:	e3530000 	cmp	r3, #0
  128e08:	0a000010 	beq	128e50 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128e0c:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e10:	e3403015 	movt	r3, #21
  128e14:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128e18:	e2833001 	add	r3, r3, #1
  128e1c:	e6ff2073 	uxth	r2, r3
  128e20:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e24:	e3403015 	movt	r3, #21
  128e28:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128e2c:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e30:	e3403015 	movt	r3, #21
  128e34:	e1d331be 	ldrh	r3, [r3, #30]
  128e38:	e2833001 	add	r3, r3, #1
  128e3c:	e6ff2073 	uxth	r2, r3
  128e40:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e44:	e3403015 	movt	r3, #21
  128e48:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128e4c:	ea000020 	b	128ed4 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128e50:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128e54:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128e58:	eb0015a9 	bl	12e504 <etharp_input>
      }
      break;
  128e5c:	ea000015 	b	128eb8 <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128e60:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e64:	e3403015 	movt	r3, #21
  128e68:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128e6c:	e2833001 	add	r3, r3, #1
  128e70:	e6ff2073 	uxth	r2, r3
  128e74:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e78:	e3403015 	movt	r3, #21
  128e7c:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128e80:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e84:	e3403015 	movt	r3, #21
  128e88:	e1d331be 	ldrh	r3, [r3, #30]
  128e8c:	e2833001 	add	r3, r3, #1
  128e90:	e6ff2073 	uxth	r2, r3
  128e94:	e30c3a50 	movw	r3, #51792	; 0xca50
  128e98:	e3403015 	movt	r3, #21
  128e9c:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128ea0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128ea4:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128ea8:	e2832001 	add	r2, r3, #1
  128eac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128eb0:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128eb4:	ea000006 	b	128ed4 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128eb8:	e3a03000 	mov	r3, #0
  128ebc:	ea000007 	b	128ee0 <ethernet_input+0x2ec>
        goto free_and_return;
  128ec0:	e320f000 	nop	{0}
  128ec4:	ea000002 	b	128ed4 <ethernet_input+0x2e0>

free_and_return:
  128ec8:	e320f000 	nop	{0}
  128ecc:	ea000000 	b	128ed4 <ethernet_input+0x2e0>
        goto free_and_return;
  128ed0:	e320f000 	nop	{0}
  pbuf_free(p);
  128ed4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128ed8:	ebffc7f0 	bl	11aea0 <pbuf_free>
  return ERR_OK;
  128edc:	e3a03000 	mov	r3, #0
}
  128ee0:	e1a00003 	mov	r0, r3
  128ee4:	e24bd004 	sub	sp, fp, #4
  128ee8:	e8bd8800 	pop	{fp, pc}

00128eec <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128eec:	e92d4800 	push	{fp, lr}
  128ef0:	e28db004 	add	fp, sp, #4
  128ef4:	e24dd018 	sub	sp, sp, #24
  128ef8:	e50b0010 	str	r0, [fp, #-16]
  128efc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128f00:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128f04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128f08:	e1db30b4 	ldrh	r3, [fp, #4]
  128f0c:	e1a00003 	mov	r0, r3
  128f10:	ebffb5ab 	bl	1165c4 <lwip_htons>
  128f14:	e1a03000 	mov	r3, r0
  128f18:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128f1c:	e3a0100e 	mov	r1, #14
  128f20:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128f24:	ebffc7bf 	bl	11ae28 <pbuf_header>
  128f28:	e1a03000 	mov	r3, r0
  128f2c:	e3530000 	cmp	r3, #0
  128f30:	1a000022 	bne	128fc0 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128f38:	e5933004 	ldr	r3, [r3, #4]
  128f3c:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128f40:	e51b300c 	ldr	r3, [fp, #-12]
  128f44:	e15b20b6 	ldrh	r2, [fp, #-6]
  128f48:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128f4c:	e51b300c 	ldr	r3, [fp, #-12]
  128f50:	e3a02006 	mov	r2, #6
  128f54:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128f58:	e1a00003 	mov	r0, r3
  128f5c:	eb005f88 	bl	140d84 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128f60:	e51b300c 	ldr	r3, [fp, #-12]
  128f64:	e2833006 	add	r3, r3, #6
  128f68:	e3a02006 	mov	r2, #6
  128f6c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128f70:	e1a00003 	mov	r0, r3
  128f74:	eb005f82 	bl	140d84 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128f78:	e51b3010 	ldr	r3, [fp, #-16]
  128f7c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128f80:	e3530006 	cmp	r3, #6
  128f84:	0a000006 	beq	128fa4 <ethernet_output+0xb8>
  128f88:	e3080b30 	movw	r0, #35632	; 0x8b30
  128f8c:	e3400014 	movt	r0, #20
  128f90:	ebff685f 	bl	103114 <rt_kprintf>
  128f94:	e300112e 	movw	r1, #302	; 0x12e
  128f98:	e3080b64 	movw	r0, #35684	; 0x8b64
  128f9c:	e3400014 	movt	r0, #20
  128fa0:	ebff884e 	bl	10b0e0 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128fa4:	e51b3010 	ldr	r3, [fp, #-16]
  128fa8:	e5933018 	ldr	r3, [r3, #24]
  128fac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128fb0:	e51b0010 	ldr	r0, [fp, #-16]
  128fb4:	e12fff33 	blx	r3
  128fb8:	e1a03000 	mov	r3, r0
  128fbc:	ea000009 	b	128fe8 <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128fc0:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128fc4:	e30c3a50 	movw	r3, #51792	; 0xca50
  128fc8:	e3403015 	movt	r3, #21
  128fcc:	e1d330ba 	ldrh	r3, [r3, #10]
  128fd0:	e2833001 	add	r3, r3, #1
  128fd4:	e6ff2073 	uxth	r2, r3
  128fd8:	e30c3a50 	movw	r3, #51792	; 0xca50
  128fdc:	e3403015 	movt	r3, #21
  128fe0:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128fe4:	e3e03001 	mvn	r3, #1
}
  128fe8:	e1a00003 	mov	r0, r3
  128fec:	e24bd004 	sub	sp, fp, #4
  128ff0:	e8bd8800 	pop	{fp, pc}

00128ff4 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  128ff4:	e92d4800 	push	{fp, lr}
  128ff8:	e28db004 	add	fp, sp, #4
  128ffc:	e24dd008 	sub	sp, sp, #8
  129000:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  129004:	e51b3008 	ldr	r3, [fp, #-8]
  129008:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  12900c:	e1a00003 	mov	r0, r3
  129010:	ebffc268 	bl	1199b8 <netif_set_up>
    return ERR_OK;
  129014:	e3a03000 	mov	r3, #0
}
  129018:	e1a00003 	mov	r0, r3
  12901c:	e24bd004 	sub	sp, fp, #4
  129020:	e8bd8800 	pop	{fp, pc}

00129024 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  129024:	e92d4800 	push	{fp, lr}
  129028:	e28db004 	add	fp, sp, #4
  12902c:	e24dd008 	sub	sp, sp, #8
  129030:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  129034:	e51b3008 	ldr	r3, [fp, #-8]
  129038:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  12903c:	e1a00003 	mov	r0, r3
  129040:	ebffc2b1 	bl	119b0c <netif_set_down>
    return ERR_OK;
  129044:	e3a03000 	mov	r3, #0
}
  129048:	e1a00003 	mov	r0, r3
  12904c:	e24bd004 	sub	sp, fp, #4
  129050:	e8bd8800 	pop	{fp, pc}

00129054 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  129054:	e92d4800 	push	{fp, lr}
  129058:	e28db004 	add	fp, sp, #4
  12905c:	e24dd010 	sub	sp, sp, #16
  129060:	e50b0008 	str	r0, [fp, #-8]
  129064:	e50b100c 	str	r1, [fp, #-12]
  129068:	e50b2010 	str	r2, [fp, #-16]
  12906c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  129070:	e51b300c 	ldr	r3, [fp, #-12]
  129074:	e3530000 	cmp	r3, #0
  129078:	0a00000c 	beq	1290b0 <lwip_netdev_set_addr_info+0x5c>
  12907c:	e51b3010 	ldr	r3, [fp, #-16]
  129080:	e3530000 	cmp	r3, #0
  129084:	0a000009 	beq	1290b0 <lwip_netdev_set_addr_info+0x5c>
  129088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12908c:	e3530000 	cmp	r3, #0
  129090:	0a000006 	beq	1290b0 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  129094:	e51b3008 	ldr	r3, [fp, #-8]
  129098:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  12909c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290a0:	e51b2010 	ldr	r2, [fp, #-16]
  1290a4:	e51b100c 	ldr	r1, [fp, #-12]
  1290a8:	ebffc10e 	bl	1194e8 <netif_set_addr>
  1290ac:	ea000017 	b	129110 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  1290b0:	e51b300c 	ldr	r3, [fp, #-12]
  1290b4:	e3530000 	cmp	r3, #0
  1290b8:	0a000004 	beq	1290d0 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  1290bc:	e51b3008 	ldr	r3, [fp, #-8]
  1290c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290c4:	e51b100c 	ldr	r1, [fp, #-12]
  1290c8:	e1a00003 	mov	r0, r3
  1290cc:	ebffc1b4 	bl	1197a4 <netif_set_ipaddr>
        }

        if (netmask)
  1290d0:	e51b3010 	ldr	r3, [fp, #-16]
  1290d4:	e3530000 	cmp	r3, #0
  1290d8:	0a000004 	beq	1290f0 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  1290dc:	e51b3008 	ldr	r3, [fp, #-8]
  1290e0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290e4:	e51b1010 	ldr	r1, [fp, #-16]
  1290e8:	e1a00003 	mov	r0, r3
  1290ec:	ebffc20c 	bl	119924 <netif_set_netmask>
        }

        if (gw)
  1290f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290f4:	e3530000 	cmp	r3, #0
  1290f8:	0a000004 	beq	129110 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  1290fc:	e51b3008 	ldr	r3, [fp, #-8]
  129100:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129104:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129108:	e1a00003 	mov	r0, r3
  12910c:	ebffc1eb 	bl	1198c0 <netif_set_gw>
        }
    }

    return ERR_OK;
  129110:	e3a03000 	mov	r3, #0
}
  129114:	e1a00003 	mov	r0, r3
  129118:	e24bd004 	sub	sp, fp, #4
  12911c:	e8bd8800 	pop	{fp, pc}

00129120 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  129120:	e92d4800 	push	{fp, lr}
  129124:	e28db004 	add	fp, sp, #4
  129128:	e24dd010 	sub	sp, sp, #16
  12912c:	e50b0008 	str	r0, [fp, #-8]
  129130:	e1a03001 	mov	r3, r1
  129134:	e50b2010 	str	r2, [fp, #-16]
  129138:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  12913c:	e55b3009 	ldrb	r3, [fp, #-9]
  129140:	e51b1010 	ldr	r1, [fp, #-16]
  129144:	e1a00003 	mov	r0, r3
  129148:	ebffb623 	bl	1169dc <dns_setserver>
    return ERR_OK;
  12914c:	e3a03000 	mov	r3, #0
}
  129150:	e1a00003 	mov	r0, r3
  129154:	e24bd004 	sub	sp, fp, #4
  129158:	e8bd8800 	pop	{fp, pc}

0012915c <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  12915c:	e92d4800 	push	{fp, lr}
  129160:	e28db004 	add	fp, sp, #4
  129164:	e24dd008 	sub	sp, sp, #8
  129168:	e50b0008 	str	r0, [fp, #-8]
  12916c:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  129170:	e51b300c 	ldr	r3, [fp, #-12]
  129174:	e3530001 	cmp	r3, #1
  129178:	1a000004 	bne	129190 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  12917c:	e51b3008 	ldr	r3, [fp, #-8]
  129180:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129184:	e1a00003 	mov	r0, r3
  129188:	eb0006d5 	bl	12ace4 <dhcp_start>
  12918c:	ea000003 	b	1291a0 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  129190:	e51b3008 	ldr	r3, [fp, #-8]
  129194:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129198:	e1a00003 	mov	r0, r3
  12919c:	eb000b48 	bl	12bec4 <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  1291a0:	e51b100c 	ldr	r1, [fp, #-12]
  1291a4:	e51b0008 	ldr	r0, [fp, #-8]
  1291a8:	ebff7516 	bl	106608 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  1291ac:	e3a03000 	mov	r3, #0
}
  1291b0:	e1a00003 	mov	r0, r3
  1291b4:	e24bd004 	sub	sp, fp, #4
  1291b8:	e8bd8800 	pop	{fp, pc}

001291bc <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  1291bc:	e92d4800 	push	{fp, lr}
  1291c0:	e28db004 	add	fp, sp, #4
  1291c4:	e24dd070 	sub	sp, sp, #112	; 0x70
  1291c8:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  1291cc:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  1291d0:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  1291d4:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  1291d8:	e3a03000 	mov	r3, #0
  1291dc:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  1291e0:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  1291e4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1291e8:	e3413062 	movt	r3, #4194	; 0x1062
  1291ec:	e0832392 	umull	r2, r3, r2, r3
  1291f0:	e1a03323 	lsr	r3, r3, #6
  1291f4:	e1a02003 	mov	r2, r3
  1291f8:	e3a03000 	mov	r3, #0
  1291fc:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  129200:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  129204:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  129208:	e3413062 	movt	r3, #4194	; 0x1062
  12920c:	e0832391 	umull	r2, r3, r1, r3
  129210:	e1a03323 	lsr	r3, r3, #6
  129214:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  129218:	e0030392 	mul	r3, r2, r3
  12921c:	e0413003 	sub	r3, r1, r3
  129220:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  129224:	e3a03000 	mov	r3, #0
  129228:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  12922c:	e3a03000 	mov	r3, #0
  129230:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  129234:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  129238:	e3530000 	cmp	r3, #0
  12923c:	1a000005 	bne	129258 <lwip_netdev_ping+0x9c>
  129240:	e3a020ca 	mov	r2, #202	; 0xca
  129244:	e3081ca8 	movw	r1, #36008	; 0x8ca8
  129248:	e3401014 	movt	r1, #20
  12924c:	e3080b98 	movw	r0, #35736	; 0x8b98
  129250:	e3400014 	movt	r0, #20
  129254:	ebff68cf 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  129258:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  12925c:	e3530000 	cmp	r3, #0
  129260:	1a000005 	bne	12927c <lwip_netdev_ping+0xc0>
  129264:	e3a020cb 	mov	r2, #203	; 0xcb
  129268:	e3081ca8 	movw	r1, #36008	; 0x8ca8
  12926c:	e3401014 	movt	r1, #20
  129270:	e3080ba0 	movw	r0, #35744	; 0x8ba0
  129274:	e3400014 	movt	r0, #20
  129278:	ebff68c6 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  12927c:	e59b3004 	ldr	r3, [fp, #4]
  129280:	e3530000 	cmp	r3, #0
  129284:	1a000005 	bne	1292a0 <lwip_netdev_ping+0xe4>
  129288:	e3a020cc 	mov	r2, #204	; 0xcc
  12928c:	e3081ca8 	movw	r1, #36008	; 0x8ca8
  129290:	e3401014 	movt	r1, #20
  129294:	e3080ba8 	movw	r0, #35752	; 0x8ba8
  129298:	e3400014 	movt	r0, #20
  12929c:	ebff68bd 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  1292a0:	e24b3050 	sub	r3, fp, #80	; 0x50
  1292a4:	e3a02020 	mov	r2, #32
  1292a8:	e3a01000 	mov	r1, #0
  1292ac:	e1a00003 	mov	r0, r3
  1292b0:	ebff6804 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  1292b4:	e24b3054 	sub	r3, fp, #84	; 0x54
  1292b8:	e24b2050 	sub	r2, fp, #80	; 0x50
  1292bc:	e3a01000 	mov	r1, #0
  1292c0:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  1292c4:	ebff9d41 	bl	1107d0 <lwip_getaddrinfo>
  1292c8:	e1a03000 	mov	r3, r0
  1292cc:	e3530000 	cmp	r3, #0
  1292d0:	0a000001 	beq	1292dc <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  1292d4:	e3e03000 	mvn	r3, #0
  1292d8:	ea000064 	b	129470 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  1292dc:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  1292e0:	e2831014 	add	r1, r3, #20
  1292e4:	e24b3058 	sub	r3, fp, #88	; 0x58
  1292e8:	e3a02004 	mov	r2, #4
  1292ec:	e1a00003 	mov	r0, r3
  1292f0:	ebff6802 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  1292f4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1292f8:	e2831004 	add	r1, r3, #4
  1292fc:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129300:	e3a02004 	mov	r2, #4
  129304:	e1a00003 	mov	r0, r3
  129308:	ebff67fc 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  12930c:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  129310:	e1a00003 	mov	r0, r3
  129314:	ebff9d1a 	bl	110784 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  129318:	e24b305c 	sub	r3, fp, #92	; 0x5c
  12931c:	e1a00003 	mov	r0, r3
  129320:	eb0025f0 	bl	132ae8 <ip4addr_ntoa>
  129324:	e1a02000 	mov	r2, r0
  129328:	e24b3030 	sub	r3, fp, #48	; 0x30
  12932c:	e1a01003 	mov	r1, r3
  129330:	e1a00002 	mov	r0, r2
  129334:	eb0024e7 	bl	1326d8 <ip4addr_aton>
  129338:	e1a03000 	mov	r3, r0
  12933c:	e3530000 	cmp	r3, #0
  129340:	1a000001 	bne	12934c <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  129344:	e3e03000 	mvn	r3, #0
  129348:	ea000048 	b	129470 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  12934c:	e59b3004 	ldr	r3, [fp, #4]
  129350:	e24b1030 	sub	r1, fp, #48	; 0x30
  129354:	e3a02004 	mov	r2, #4
  129358:	e1a00003 	mov	r0, r3
  12935c:	ebff67e7 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  129360:	e3a02001 	mov	r2, #1
  129364:	e3a01003 	mov	r1, #3
  129368:	e3a00002 	mov	r0, #2
  12936c:	ebffa658 	bl	112cd4 <lwip_socket>
  129370:	e50b000c 	str	r0, [fp, #-12]
  129374:	e51b300c 	ldr	r3, [fp, #-12]
  129378:	e3530000 	cmp	r3, #0
  12937c:	aa000001 	bge	129388 <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  129380:	e3e03000 	mvn	r3, #0
  129384:	ea000039 	b	129470 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  129388:	e24b202c 	sub	r2, fp, #44	; 0x2c
  12938c:	e3a03010 	mov	r3, #16
  129390:	e58d3000 	str	r3, [sp]
  129394:	e1a03002 	mov	r3, r2
  129398:	e3012006 	movw	r2, #4102	; 0x1006
  12939c:	e3001fff 	movw	r1, #4095	; 0xfff
  1293a0:	e51b000c 	ldr	r0, [fp, #-12]
  1293a4:	ebffae28 	bl	114c4c <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  1293a8:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  1293ac:	e24b3030 	sub	r3, fp, #48	; 0x30
  1293b0:	e1a01003 	mov	r1, r3
  1293b4:	e51b000c 	ldr	r0, [fp, #-12]
  1293b8:	eb002c05 	bl	1343d4 <lwip_ping_send>
  1293bc:	e1a03000 	mov	r3, r0
  1293c0:	e3530000 	cmp	r3, #0
  1293c4:	1a000023 	bne	129458 <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  1293c8:	ebff62a4 	bl	101e60 <rt_tick_get>
  1293cc:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  1293d0:	e24b301c 	sub	r3, fp, #28
  1293d4:	e1a01003 	mov	r1, r3
  1293d8:	e51b000c 	ldr	r0, [fp, #-12]
  1293dc:	eb002c3a 	bl	1344cc <lwip_ping_recv>
  1293e0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1293e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1293e8:	e3530000 	cmp	r3, #0
  1293ec:	ba000016 	blt	12944c <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  1293f0:	ebff629a 	bl	101e60 <rt_tick_get>
  1293f4:	e1a02000 	mov	r2, r0
  1293f8:	e51b3010 	ldr	r3, [fp, #-16]
  1293fc:	e0423003 	sub	r3, r2, r3
  129400:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  129404:	e0020392 	mul	r2, r2, r3
  129408:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  12940c:	e3413062 	movt	r3, #4194	; 0x1062
  129410:	e0832392 	umull	r2, r3, r2, r3
  129414:	e1a03323 	lsr	r3, r3, #6
  129418:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  12941c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129420:	e6ff2073 	uxth	r2, r3
  129424:	e59b3004 	ldr	r3, [fp, #4]
  129428:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  12942c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129430:	e6ff2073 	uxth	r2, r3
  129434:	e59b3004 	ldr	r3, [fp, #4]
  129438:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  12943c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129440:	e59b3004 	ldr	r3, [fp, #4]
  129444:	e5832008 	str	r2, [r3, #8]
  129448:	ea000005 	b	129464 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  12944c:	e3e03001 	mvn	r3, #1
  129450:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  129454:	ea000002 	b	129464 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  129458:	e3e03001 	mvn	r3, #1
  12945c:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  129460:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  129464:	e51b000c 	ldr	r0, [fp, #-12]
  129468:	ebffa103 	bl	11187c <lwip_close>

    return result;
  12946c:	e51b3008 	ldr	r3, [fp, #-8]
}
  129470:	e1a00003 	mov	r0, r3
  129474:	e24bd004 	sub	sp, fp, #4
  129478:	e8bd8800 	pop	{fp, pc}

0012947c <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  12947c:	e92d4800 	push	{fp, lr}
  129480:	e28db004 	add	fp, sp, #4
  129484:	e24dd008 	sub	sp, sp, #8
  129488:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  12948c:	e51b3008 	ldr	r3, [fp, #-8]
  129490:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129494:	e1a00003 	mov	r0, r3
  129498:	ebffc13a 	bl	119988 <netif_set_default>
    return ERR_OK;
  12949c:	e3a03000 	mov	r3, #0
}
  1294a0:	e1a00003 	mov	r0, r3
  1294a4:	e24bd004 	sub	sp, fp, #4
  1294a8:	e8bd8800 	pop	{fp, pc}

001294ac <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  1294ac:	e92d4800 	push	{fp, lr}
  1294b0:	e28db004 	add	fp, sp, #4
  1294b4:	e24dd018 	sub	sp, sp, #24
  1294b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  1294bc:	e3a03000 	mov	r3, #0
  1294c0:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1294c4:	e3a03000 	mov	r3, #0
  1294c8:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  1294cc:	e24b3010 	sub	r3, fp, #16
  1294d0:	e3a02000 	mov	r2, #0
  1294d4:	e1c320b0 	strh	r2, [r3]
  1294d8:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  1294dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1294e0:	e3530000 	cmp	r3, #0
  1294e4:	1a000005 	bne	129500 <netdev_add+0x54>
  1294e8:	e3002141 	movw	r2, #321	; 0x141
  1294ec:	e3081cbc 	movw	r1, #36028	; 0x8cbc
  1294f0:	e3401014 	movt	r1, #20
  1294f4:	e3080bd4 	movw	r0, #35796	; 0x8bd4
  1294f8:	e3400014 	movt	r0, #20
  1294fc:	ebff6825 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  129500:	e3a01044 	mov	r1, #68	; 0x44
  129504:	e3a00001 	mov	r0, #1
  129508:	ebff66bf 	bl	10300c <rt_calloc>
  12950c:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  129510:	e51b300c 	ldr	r3, [fp, #-12]
  129514:	e3530000 	cmp	r3, #0
  129518:	1a000001 	bne	129524 <netdev_add+0x78>
    {
        return -ERR_IF;
  12951c:	e3a0300c 	mov	r3, #12
  129520:	ea000036 	b	129600 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  129524:	e51b000c 	ldr	r0, [fp, #-12]
  129528:	ebff6d02 	bl	104938 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  12952c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129530:	e2831042 	add	r1, r3, #66	; 0x42
  129534:	e24b3010 	sub	r3, fp, #16
  129538:	e3a02002 	mov	r2, #2
  12953c:	e1a00003 	mov	r0, r3
  129540:	ebff6746 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  129544:	e24b3010 	sub	r3, fp, #16
  129548:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12954c:	e1a01003 	mov	r1, r3
  129550:	e51b000c 	ldr	r0, [fp, #-12]
  129554:	ebff6ec2 	bl	105064 <netdev_register>
  129558:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  12955c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129560:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129564:	e6ff2073 	uxth	r2, r3
  129568:	e51b300c 	ldr	r3, [fp, #-12]
  12956c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  129570:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129574:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  129578:	e51b300c 	ldr	r3, [fp, #-12]
  12957c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  129580:	e51b200c 	ldr	r2, [fp, #-12]
  129584:	e3083bb4 	movw	r3, #35764	; 0x8bb4
  129588:	e3403014 	movt	r3, #20
  12958c:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  129590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129594:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  129598:	e51b300c 	ldr	r3, [fp, #-12]
  12959c:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  1295a0:	e51b300c 	ldr	r3, [fp, #-12]
  1295a4:	e2830021 	add	r0, r3, #33	; 0x21
  1295a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295ac:	e283103b 	add	r1, r3, #59	; 0x3b
  1295b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295b4:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  1295b8:	e1a02003 	mov	r2, r3
  1295bc:	ebff674f 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  1295c0:	e51b300c 	ldr	r3, [fp, #-12]
  1295c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295c8:	e5922004 	ldr	r2, [r2, #4]
  1295cc:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  1295d0:	e51b300c 	ldr	r3, [fp, #-12]
  1295d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295d8:	e592200c 	ldr	r2, [r2, #12]
  1295dc:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  1295e0:	e51b300c 	ldr	r3, [fp, #-12]
  1295e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295e8:	e5922008 	ldr	r2, [r2, #8]
  1295ec:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  1295f0:	e3a01001 	mov	r1, #1
  1295f4:	e51b000c 	ldr	r0, [fp, #-12]
  1295f8:	ebff7402 	bl	106608 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  1295fc:	e51b3008 	ldr	r3, [fp, #-8]
}
  129600:	e1a00003 	mov	r0, r3
  129604:	e24bd004 	sub	sp, fp, #4
  129608:	e8bd8800 	pop	{fp, pc}

0012960c <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  12960c:	e92d4800 	push	{fp, lr}
  129610:	e28db004 	add	fp, sp, #4
  129614:	e24dd010 	sub	sp, sp, #16
  129618:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  12961c:	e51b3010 	ldr	r3, [fp, #-16]
  129620:	e3530000 	cmp	r3, #0
  129624:	1a000005 	bne	129640 <netdev_del+0x34>
  129628:	e300216b 	movw	r2, #363	; 0x16b
  12962c:	e3081cc8 	movw	r1, #36040	; 0x8cc8
  129630:	e3401014 	movt	r1, #20
  129634:	e3080bd4 	movw	r0, #35796	; 0x8bd4
  129638:	e3400014 	movt	r0, #20
  12963c:	ebff67d5 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129640:	e51b3010 	ldr	r3, [fp, #-16]
  129644:	e2831042 	add	r1, r3, #66	; 0x42
  129648:	e24b300c 	sub	r3, fp, #12
  12964c:	e3a02002 	mov	r2, #2
  129650:	e1a00003 	mov	r0, r3
  129654:	ebff6701 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  129658:	e24b300c 	sub	r3, fp, #12
  12965c:	e1a00003 	mov	r0, r3
  129660:	ebff6fa3 	bl	1054f4 <netdev_get_by_name>
  129664:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  129668:	e51b0008 	ldr	r0, [fp, #-8]
  12966c:	ebff6ee7 	bl	105210 <netdev_unregister>
    rt_free(netdev);
  129670:	e51b0008 	ldr	r0, [fp, #-8]
  129674:	ebff6650 	bl	102fbc <rt_free>
}
  129678:	e320f000 	nop	{0}
  12967c:	e24bd004 	sub	sp, fp, #4
  129680:	e8bd8800 	pop	{fp, pc}

00129684 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  129684:	e92d4800 	push	{fp, lr}
  129688:	e28db004 	add	fp, sp, #4
  12968c:	e24dd010 	sub	sp, sp, #16
  129690:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  129694:	e3a03000 	mov	r3, #0
  129698:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  12969c:	e51b3010 	ldr	r3, [fp, #-16]
  1296a0:	e3530000 	cmp	r3, #0
  1296a4:	1a000005 	bne	1296c0 <netdev_flags_sync+0x3c>
  1296a8:	e3a02f5e 	mov	r2, #376	; 0x178
  1296ac:	e3081cd4 	movw	r1, #36052	; 0x8cd4
  1296b0:	e3401014 	movt	r1, #20
  1296b4:	e3080bd4 	movw	r0, #35796	; 0x8bd4
  1296b8:	e3400014 	movt	r0, #20
  1296bc:	ebff67b5 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  1296c0:	e51b3010 	ldr	r3, [fp, #-16]
  1296c4:	e2833042 	add	r3, r3, #66	; 0x42
  1296c8:	e1a00003 	mov	r0, r3
  1296cc:	ebff6f88 	bl	1054f4 <netdev_get_by_name>
  1296d0:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  1296d4:	e51b3008 	ldr	r3, [fp, #-8]
  1296d8:	e3530000 	cmp	r3, #0
  1296dc:	1a000001 	bne	1296e8 <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  1296e0:	e3a0300c 	mov	r3, #12
  1296e4:	ea00000d 	b	129720 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  1296e8:	e51b3010 	ldr	r3, [fp, #-16]
  1296ec:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  1296f0:	e51b3008 	ldr	r3, [fp, #-8]
  1296f4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  1296f8:	e51b3008 	ldr	r3, [fp, #-8]
  1296fc:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  129700:	e51b3010 	ldr	r3, [fp, #-16]
  129704:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129708:	e6ff3073 	uxth	r3, r3
  12970c:	e1823003 	orr	r3, r2, r3
  129710:	e6ff2073 	uxth	r2, r3
  129714:	e51b3008 	ldr	r3, [fp, #-8]
  129718:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  12971c:	e3a03000 	mov	r3, #0
}
  129720:	e1a00003 	mov	r0, r3
  129724:	e24bd004 	sub	sp, fp, #4
  129728:	e8bd8800 	pop	{fp, pc}

0012972c <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  12972c:	e92d4800 	push	{fp, lr}
  129730:	e28db004 	add	fp, sp, #4
  129734:	e24dd010 	sub	sp, sp, #16
  129738:	e50b0010 	str	r0, [fp, #-16]
  12973c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  129740:	e51b3010 	ldr	r3, [fp, #-16]
  129744:	e3530000 	cmp	r3, #0
  129748:	1a000005 	bne	129764 <ethernetif_linkoutput+0x38>
  12974c:	e30021a5 	movw	r2, #421	; 0x1a5
  129750:	e3081ce8 	movw	r1, #36072	; 0x8ce8
  129754:	e3401014 	movt	r1, #20
  129758:	e3080be0 	movw	r0, #35808	; 0x8be0
  12975c:	e3400014 	movt	r0, #20
  129760:	ebff678c 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  129764:	e51b3010 	ldr	r3, [fp, #-16]
  129768:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12976c:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  129770:	e51b3008 	ldr	r3, [fp, #-8]
  129774:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  129778:	e51b2008 	ldr	r2, [fp, #-8]
  12977c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129780:	e1a00002 	mov	r0, r2
  129784:	e12fff33 	blx	r3
  129788:	e1a03000 	mov	r3, r0
  12978c:	e3530000 	cmp	r3, #0
  129790:	0a000001 	beq	12979c <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  129794:	e3e0300b 	mvn	r3, #11
  129798:	ea000000 	b	1297a0 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  12979c:	e3a03000 	mov	r3, #0
}
  1297a0:	e1a00003 	mov	r0, r3
  1297a4:	e24bd004 	sub	sp, fp, #4
  1297a8:	e8bd8800 	pop	{fp, pc}

001297ac <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  1297ac:	e92d4800 	push	{fp, lr}
  1297b0:	e28db004 	add	fp, sp, #4
  1297b4:	e24dd010 	sub	sp, sp, #16
  1297b8:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  1297bc:	e51b3010 	ldr	r3, [fp, #-16]
  1297c0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1297c4:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  1297c8:	e51b3008 	ldr	r3, [fp, #-8]
  1297cc:	e3530000 	cmp	r3, #0
  1297d0:	0a000032 	beq	1298a0 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  1297d4:	e51b0010 	ldr	r0, [fp, #-16]
  1297d8:	ebffff33 	bl	1294ac <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  1297dc:	e51b3008 	ldr	r3, [fp, #-8]
  1297e0:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  1297e4:	e51b000c 	ldr	r0, [fp, #-12]
  1297e8:	ebff6d22 	bl	104c78 <ueth_device_init>
  1297ec:	e1a03000 	mov	r3, r0
  1297f0:	e3530000 	cmp	r3, #0
  1297f4:	0a000001 	beq	129800 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  1297f8:	e3e0300b 	mvn	r3, #11
  1297fc:	ea000028 	b	1298a4 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  129800:	e51b3008 	ldr	r3, [fp, #-8]
  129804:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129808:	e6ef2073 	uxtb	r2, r3
  12980c:	e51b3010 	ldr	r3, [fp, #-16]
  129810:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  129814:	e51b3010 	ldr	r3, [fp, #-16]
  129818:	e30025dc 	movw	r2, #1500	; 0x5dc
  12981c:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  129820:	e51b2010 	ldr	r2, [fp, #-16]
  129824:	e30e3968 	movw	r3, #59752	; 0xe968
  129828:	e3403012 	movt	r3, #18
  12982c:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129830:	e30c3a48 	movw	r3, #51784	; 0xca48
  129834:	e3403015 	movt	r3, #21
  129838:	e5933000 	ldr	r3, [r3]
  12983c:	e3530000 	cmp	r3, #0
  129840:	1a000003 	bne	129854 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  129844:	e51b3008 	ldr	r3, [fp, #-8]
  129848:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  12984c:	e1a00003 	mov	r0, r3
  129850:	ebffc04c 	bl	119988 <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  129854:	e51b3008 	ldr	r3, [fp, #-8]
  129858:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  12985c:	e1a00003 	mov	r0, r3
  129860:	ebffc054 	bl	1199b8 <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  129864:	e51b3008 	ldr	r3, [fp, #-8]
  129868:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  12986c:	e1a00003 	mov	r0, r3
  129870:	eb00051b 	bl	12ace4 <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  129874:	e51b3008 	ldr	r3, [fp, #-8]
  129878:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  12987c:	e2033c01 	and	r3, r3, #256	; 0x100
  129880:	e3530000 	cmp	r3, #0
  129884:	0a000003 	beq	129898 <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  129888:	e51b3008 	ldr	r3, [fp, #-8]
  12988c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129890:	e1a00003 	mov	r0, r3
  129894:	ebffc0dc 	bl	119c0c <netif_set_link_up>
        }
        return ERR_OK;
  129898:	e3a03000 	mov	r3, #0
  12989c:	ea000000 	b	1298a4 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  1298a0:	e3e0300b 	mvn	r3, #11
}
  1298a4:	e1a00003 	mov	r0, r3
  1298a8:	e24bd004 	sub	sp, fp, #4
  1298ac:	e8bd8800 	pop	{fp, pc}

001298b0 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  1298b0:	e92d4800 	push	{fp, lr}
  1298b4:	e28db004 	add	fp, sp, #4
  1298b8:	e24dd038 	sub	sp, sp, #56	; 0x38
  1298bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1298c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1298c4:	e1a03002 	mov	r3, r2
  1298c8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  1298cc:	e3a03000 	mov	r3, #0
  1298d0:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  1298d4:	e3a01098 	mov	r1, #152	; 0x98
  1298d8:	e3a00001 	mov	r0, #1
  1298dc:	ebff65ca 	bl	10300c <rt_calloc>
  1298e0:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  1298e4:	e51b300c 	ldr	r3, [fp, #-12]
  1298e8:	e3530000 	cmp	r3, #0
  1298ec:	1a000004 	bne	129904 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  1298f0:	e3080bf4 	movw	r0, #35828	; 0x8bf4
  1298f4:	e3400014 	movt	r0, #20
  1298f8:	ebff6605 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1298fc:	e3e03000 	mvn	r3, #0
  129900:	ea00005b 	b	129a74 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  129904:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129908:	e51b200c 	ldr	r2, [fp, #-12]
  12990c:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  129910:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129914:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  129918:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  12991c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129920:	e3a02000 	mov	r2, #0
  129924:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  129928:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12992c:	e3a02002 	mov	r2, #2
  129930:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  129934:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129938:	e3a02003 	mov	r2, #3
  12993c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129940:	e1a00003 	mov	r0, r3
  129944:	ebff6c3e 	bl	104a44 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  129948:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12994c:	e2830048 	add	r0, r3, #72	; 0x48
  129950:	e3a03000 	mov	r3, #0
  129954:	e3a02000 	mov	r2, #0
  129958:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12995c:	ebff5dca 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  129960:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129964:	e5d32000 	ldrb	r2, [r3]
  129968:	e51b300c 	ldr	r3, [fp, #-12]
  12996c:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  129970:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129974:	e5d32001 	ldrb	r2, [r3, #1]
  129978:	e51b300c 	ldr	r3, [fp, #-12]
  12997c:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  129980:	e51b300c 	ldr	r3, [fp, #-12]
  129984:	e3a02006 	mov	r2, #6
  129988:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  12998c:	e51b300c 	ldr	r3, [fp, #-12]
  129990:	e30025dc 	movw	r2, #1500	; 0x5dc
  129994:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  129998:	e51b200c 	ldr	r2, [fp, #-12]
  12999c:	e309372c 	movw	r3, #38700	; 0x972c
  1299a0:	e3403012 	movt	r3, #18
  1299a4:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  1299a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1299ac:	e51b300c 	ldr	r3, [fp, #-12]
  1299b0:	e283303b 	add	r3, r3, #59	; 0x3b
  1299b4:	e1a02003 	mov	r2, r3
  1299b8:	e3a01001 	mov	r1, #1
  1299bc:	ebff6d2d 	bl	104e78 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  1299c0:	e51b300c 	ldr	r3, [fp, #-12]
  1299c4:	e2833088 	add	r3, r3, #136	; 0x88
  1299c8:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  1299cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299d0:	e5d33000 	ldrb	r3, [r3]
  1299d4:	e1a02003 	mov	r2, r3
  1299d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299dc:	e2833001 	add	r3, r3, #1
  1299e0:	e5d33000 	ldrb	r3, [r3]
  1299e4:	e3081c0c 	movw	r1, #35852	; 0x8c0c
  1299e8:	e3401014 	movt	r1, #20
  1299ec:	e51b0008 	ldr	r0, [fp, #-8]
  1299f0:	ebff65a5 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  1299f4:	e51b300c 	ldr	r3, [fp, #-12]
  1299f8:	e51b2008 	ldr	r2, [fp, #-8]
  1299fc:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  129a00:	e3080c20 	movw	r0, #35872	; 0x8c20
  129a04:	e3400014 	movt	r0, #20
  129a08:	ebff619a 	bl	102078 <rt_thread_find>
  129a0c:	e1a03000 	mov	r3, r0
  129a10:	e3530000 	cmp	r3, #0
  129a14:	0a000013 	beq	129a68 <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  129a18:	e3a03000 	mov	r3, #0
  129a1c:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  129a20:	e3a03000 	mov	r3, #0
  129a24:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  129a28:	e3a03000 	mov	r3, #0
  129a2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129a30:	e24b0018 	sub	r0, fp, #24
  129a34:	e24b2014 	sub	r2, fp, #20
  129a38:	e24b1010 	sub	r1, fp, #16
  129a3c:	e3063158 	movw	r3, #24920	; 0x6158
  129a40:	e3403011 	movt	r3, #17
  129a44:	e58d3008 	str	r3, [sp, #8]
  129a48:	e30937ac 	movw	r3, #38828	; 0x97ac
  129a4c:	e3403012 	movt	r3, #18
  129a50:	e58d3004 	str	r3, [sp, #4]
  129a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129a58:	e58d3000 	str	r3, [sp]
  129a5c:	e1a03000 	mov	r3, r0
  129a60:	e51b000c 	ldr	r0, [fp, #-12]
  129a64:	ebff9c92 	bl	110cb4 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  129a68:	e51b000c 	ldr	r0, [fp, #-12]
  129a6c:	ebffff04 	bl	129684 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  129a70:	e3a03000 	mov	r3, #0
}
  129a74:	e1a00003 	mov	r0, r3
  129a78:	e24bd004 	sub	sp, fp, #4
  129a7c:	e8bd8800 	pop	{fp, pc}

00129a80 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  129a80:	e92d4800 	push	{fp, lr}
  129a84:	e28db004 	add	fp, sp, #4
  129a88:	e24dd010 	sub	sp, sp, #16
  129a8c:	e50b0010 	str	r0, [fp, #-16]
  129a90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  129a94:	e3a0300a 	mov	r3, #10
  129a98:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129a9c:	e15b30b6 	ldrh	r3, [fp, #-6]
  129aa0:	e3833020 	orr	r3, r3, #32
  129aa4:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  129aa8:	e15b30b6 	ldrh	r3, [fp, #-6]
  129aac:	e1a02003 	mov	r2, r3
  129ab0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129ab4:	e51b0010 	ldr	r0, [fp, #-16]
  129ab8:	ebffff7c 	bl	1298b0 <eth_device_init_with_flag>
  129abc:	e1a03000 	mov	r3, r0
}
  129ac0:	e1a00003 	mov	r0, r3
  129ac4:	e24bd004 	sub	sp, fp, #4
  129ac8:	e8bd8800 	pop	{fp, pc}

00129acc <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129acc:	e92d4800 	push	{fp, lr}
  129ad0:	e28db004 	add	fp, sp, #4
  129ad4:	e24dd010 	sub	sp, sp, #16
  129ad8:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129adc:	e51b3010 	ldr	r3, [fp, #-16]
  129ae0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129ae4:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  129ae8:	e51b0008 	ldr	r0, [fp, #-8]
  129aec:	eb0008f4 	bl	12bec4 <dhcp_stop>
    dhcp_cleanup(netif);
  129af0:	e51b0008 	ldr	r0, [fp, #-8]
  129af4:	eb00045e 	bl	12ac74 <dhcp_cleanup>
#endif
    netif_set_down(netif);
  129af8:	e51b0008 	ldr	r0, [fp, #-8]
  129afc:	ebffc002 	bl	119b0c <netif_set_down>
    netif_remove(netif);
  129b00:	e51b0008 	ldr	r0, [fp, #-8]
  129b04:	ebffbe9b 	bl	119578 <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  129b08:	e51b0008 	ldr	r0, [fp, #-8]
  129b0c:	ebfffebe 	bl	12960c <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  129b10:	e51b3010 	ldr	r3, [fp, #-16]
  129b14:	e1a00003 	mov	r0, r3
  129b18:	ebff6c93 	bl	104d6c <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129b1c:	e51b3010 	ldr	r3, [fp, #-16]
  129b20:	e1a00003 	mov	r0, r3
  129b24:	ebff6c18 	bl	104b8c <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  129b28:	e51b3010 	ldr	r3, [fp, #-16]
  129b2c:	e2833048 	add	r3, r3, #72	; 0x48
  129b30:	e1a00003 	mov	r0, r3
  129b34:	ebff5d9a 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  129b38:	e51b0008 	ldr	r0, [fp, #-8]
  129b3c:	ebff651e 	bl	102fbc <rt_free>
}
  129b40:	e320f000 	nop	{0}
  129b44:	e24bd004 	sub	sp, fp, #4
  129b48:	e8bd8800 	pop	{fp, pc}

00129b4c <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  129b4c:	e92d4800 	push	{fp, lr}
  129b50:	e28db004 	add	fp, sp, #4
  129b54:	e24dd008 	sub	sp, sp, #8
  129b58:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  129b5c:	e51b3008 	ldr	r3, [fp, #-8]
  129b60:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129b64:	e3530000 	cmp	r3, #0
  129b68:	0a000006 	beq	129b88 <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  129b6c:	e51b3008 	ldr	r3, [fp, #-8]
  129b70:	e1a01003 	mov	r1, r3
  129b74:	e30e06c0 	movw	r0, #59072	; 0xe6c0
  129b78:	e3400014 	movt	r0, #20
  129b7c:	ebff5ea0 	bl	101604 <rt_mb_send>
  129b80:	e1a03000 	mov	r3, r0
  129b84:	ea000000 	b	129b8c <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  129b88:	e3a03000 	mov	r3, #0
}
  129b8c:	e1a00003 	mov	r0, r3
  129b90:	e24bd004 	sub	sp, fp, #4
  129b94:	e8bd8800 	pop	{fp, pc}

00129b98 <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  129b98:	e92d4800 	push	{fp, lr}
  129b9c:	e28db004 	add	fp, sp, #4
  129ba0:	e24dd010 	sub	sp, sp, #16
  129ba4:	e50b0010 	str	r0, [fp, #-16]
  129ba8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129bac:	e51b3010 	ldr	r3, [fp, #-16]
  129bb0:	e3530000 	cmp	r3, #0
  129bb4:	1a000005 	bne	129bd0 <eth_device_linkchange+0x38>
  129bb8:	e3a02fc3 	mov	r2, #780	; 0x30c
  129bbc:	e3081d00 	movw	r1, #36096	; 0x8d00
  129bc0:	e3401014 	movt	r1, #20
  129bc4:	e3080c28 	movw	r0, #35880	; 0x8c28
  129bc8:	e3400014 	movt	r0, #20
  129bcc:	ebff6671 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129bd0:	e51b3010 	ldr	r3, [fp, #-16]
  129bd4:	e3a02001 	mov	r2, #1
  129bd8:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129be0:	e3530001 	cmp	r3, #1
  129be4:	1a000003 	bne	129bf8 <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  129be8:	e51b3010 	ldr	r3, [fp, #-16]
  129bec:	e3a02001 	mov	r2, #1
  129bf0:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  129bf4:	ea000002 	b	129c04 <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  129bf8:	e51b3010 	ldr	r3, [fp, #-16]
  129bfc:	e3a02000 	mov	r2, #0
  129c00:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  129c04:	e51b3010 	ldr	r3, [fp, #-16]
  129c08:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129c0c:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129c10:	e51b3010 	ldr	r3, [fp, #-16]
  129c14:	e3a02000 	mov	r2, #0
  129c18:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129c1c:	e51b3008 	ldr	r3, [fp, #-8]
  129c20:	e3530000 	cmp	r3, #0
  129c24:	0a000007 	beq	129c48 <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  129c28:	e51b3010 	ldr	r3, [fp, #-16]
  129c2c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c30:	e3a02000 	mov	r2, #0
  129c34:	e3091c0c 	movw	r1, #39948	; 0x9c0c
  129c38:	e3401011 	movt	r1, #17
  129c3c:	e1a00003 	mov	r0, r3
  129c40:	ebff9c79 	bl	110e2c <netifapi_netif_common>
  129c44:	ea000006 	b	129c64 <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  129c48:	e51b3010 	ldr	r3, [fp, #-16]
  129c4c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c50:	e3a02000 	mov	r2, #0
  129c54:	e3091cbc 	movw	r1, #40124	; 0x9cbc
  129c58:	e3401011 	movt	r1, #17
  129c5c:	e1a00003 	mov	r0, r3
  129c60:	ebff9c71 	bl	110e2c <netifapi_netif_common>

    return RT_EOK;
  129c64:	e3a03000 	mov	r3, #0
}
  129c68:	e1a00003 	mov	r0, r3
  129c6c:	e24bd004 	sub	sp, fp, #4
  129c70:	e8bd8800 	pop	{fp, pc}

00129c74 <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  129c74:	e92d4800 	push	{fp, lr}
  129c78:	e28db004 	add	fp, sp, #4
  129c7c:	e24dd010 	sub	sp, sp, #16
  129c80:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  129c84:	ea000001 	b	129c90 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  129c88:	e3a0000a 	mov	r0, #10
  129c8c:	ebff607a 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  129c90:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  129c94:	e3403014 	movt	r3, #20
  129c98:	e5933000 	ldr	r3, [r3]
  129c9c:	e3530000 	cmp	r3, #0
  129ca0:	0afffff8 	beq	129c88 <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129ca4:	eb002e61 	bl	135630 <ueth_rx_interrupt_detect>
  129ca8:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129cac:	e51b3008 	ldr	r3, [fp, #-8]
  129cb0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129cb4:	e3530000 	cmp	r3, #0
  129cb8:	0a00001a 	beq	129d28 <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129cbc:	e51b3008 	ldr	r3, [fp, #-8]
  129cc0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129cc4:	e51b2008 	ldr	r2, [fp, #-8]
  129cc8:	e1a00002 	mov	r0, r2
  129ccc:	e12fff33 	blx	r3
  129cd0:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  129cd4:	e51b300c 	ldr	r3, [fp, #-12]
  129cd8:	e3530000 	cmp	r3, #0
  129cdc:	0a00000f 	beq	129d20 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129ce0:	e51b3008 	ldr	r3, [fp, #-8]
  129ce4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129ce8:	e5933010 	ldr	r3, [r3, #16]
  129cec:	e51b2008 	ldr	r2, [fp, #-8]
  129cf0:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  129cf4:	e1a01002 	mov	r1, r2
  129cf8:	e51b000c 	ldr	r0, [fp, #-12]
  129cfc:	e12fff33 	blx	r3
  129d00:	e1a03000 	mov	r3, r0
  129d04:	e3530000 	cmp	r3, #0
  129d08:	0affffeb 	beq	129cbc <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129d0c:	e51b000c 	ldr	r0, [fp, #-12]
  129d10:	ebffc462 	bl	11aea0 <pbuf_free>
                    p = NULL;
  129d14:	e3a03000 	mov	r3, #0
  129d18:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129d1c:	eaffffe6 	b	129cbc <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129d20:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129d24:	eaffffde 	b	129ca4 <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129d28:	e320f000 	nop	{0}
        }
    }
}
  129d2c:	e320f000 	nop	{0}
  129d30:	e24bd004 	sub	sp, fp, #4
  129d34:	e8bd8800 	pop	{fp, pc}

00129d38 <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129d38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129d3c:	e28db000 	add	fp, sp, #0
    return 0;
  129d40:	e3a03000 	mov	r3, #0
}
  129d44:	e1a00003 	mov	r0, r3
  129d48:	e28bd000 	add	sp, fp, #0
  129d4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  129d50:	e12fff1e 	bx	lr

00129d54 <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  129d54:	e92d4800 	push	{fp, lr}
  129d58:	e28db004 	add	fp, sp, #4
  129d5c:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  129d60:	e3a03000 	mov	r3, #0
  129d64:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  129d68:	e3a03000 	mov	r3, #0
  129d6c:	e58d3000 	str	r3, [sp]
  129d70:	e3a03c01 	mov	r3, #256	; 0x100
  129d74:	e30e26f4 	movw	r2, #59124	; 0xe6f4
  129d78:	e3402014 	movt	r2, #20
  129d7c:	e3081c38 	movw	r1, #35896	; 0x8c38
  129d80:	e3401014 	movt	r1, #20
  129d84:	e30e06c0 	movw	r0, #59072	; 0xe6c0
  129d88:	e3400014 	movt	r0, #20
  129d8c:	ebff5d8f 	bl	1013d0 <rt_mb_init>
  129d90:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129d94:	e51b3008 	ldr	r3, [fp, #-8]
  129d98:	e3530000 	cmp	r3, #0
  129d9c:	0a000005 	beq	129db8 <eth_system_device_init_private+0x64>
  129da0:	e300238e 	movw	r2, #910	; 0x38e
  129da4:	e3081d18 	movw	r1, #36120	; 0x8d18
  129da8:	e3401014 	movt	r1, #20
  129dac:	e3080c40 	movw	r0, #35904	; 0x8c40
  129db0:	e3400014 	movt	r0, #20
  129db4:	ebff65f7 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  129db8:	e3a03010 	mov	r3, #16
  129dbc:	e58d3004 	str	r3, [sp, #4]
  129dc0:	e3a03019 	mov	r3, #25
  129dc4:	e58d3000 	str	r3, [sp]
  129dc8:	e3a03a02 	mov	r3, #8192	; 0x2000
  129dcc:	e3a02000 	mov	r2, #0
  129dd0:	e3091c74 	movw	r1, #40052	; 0x9c74
  129dd4:	e3401012 	movt	r1, #18
  129dd8:	e3080c54 	movw	r0, #35924	; 0x8c54
  129ddc:	e3400014 	movt	r0, #20
  129de0:	ebff60c3 	bl	1020f4 <rt_thread_create>
  129de4:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129de8:	e51b000c 	ldr	r0, [fp, #-12]
  129dec:	ebff60f5 	bl	1021c8 <rt_thread_startup>
  129df0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129df4:	e51b3008 	ldr	r3, [fp, #-8]
  129df8:	e3530000 	cmp	r3, #0
  129dfc:	0a000005 	beq	129e18 <eth_system_device_init_private+0xc4>
  129e00:	e3002393 	movw	r2, #915	; 0x393
  129e04:	e3081d18 	movw	r1, #36120	; 0x8d18
  129e08:	e3401014 	movt	r1, #20
  129e0c:	e3080c40 	movw	r0, #35904	; 0x8c40
  129e10:	e3400014 	movt	r0, #20
  129e14:	ebff65df 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  129e18:	e3a03000 	mov	r3, #0
  129e1c:	e58d3000 	str	r3, [sp]
  129e20:	e3a03c01 	mov	r3, #256	; 0x100
  129e24:	e30e22c0 	movw	r2, #58048	; 0xe2c0
  129e28:	e3402014 	movt	r2, #20
  129e2c:	e3081c58 	movw	r1, #35928	; 0x8c58
  129e30:	e3401014 	movt	r1, #20
  129e34:	e30e028c 	movw	r0, #57996	; 0xe28c
  129e38:	e3400014 	movt	r0, #20
  129e3c:	ebff5d63 	bl	1013d0 <rt_mb_init>
  129e40:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129e44:	e51b3008 	ldr	r3, [fp, #-8]
  129e48:	e3530000 	cmp	r3, #0
  129e4c:	0a000005 	beq	129e68 <eth_system_device_init_private+0x114>
  129e50:	e30023a3 	movw	r2, #931	; 0x3a3
  129e54:	e3081d18 	movw	r1, #36120	; 0x8d18
  129e58:	e3401014 	movt	r1, #20
  129e5c:	e3080c40 	movw	r0, #35904	; 0x8c40
  129e60:	e3400014 	movt	r0, #20
  129e64:	ebff65cb 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  129e68:	e51b3008 	ldr	r3, [fp, #-8]
}
  129e6c:	e1a00003 	mov	r0, r3
  129e70:	e24bd004 	sub	sp, fp, #4
  129e74:	e8bd8800 	pop	{fp, pc}

00129e78 <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129e78:	e92d4800 	push	{fp, lr}
  129e7c:	e28db004 	add	fp, sp, #4
  129e80:	e24dd020 	sub	sp, sp, #32
  129e84:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129e88:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129e8c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129e90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129e94:	e30c3a44 	movw	r3, #51780	; 0xca44
  129e98:	e3403015 	movt	r3, #21
  129e9c:	e5933000 	ldr	r3, [r3]
  129ea0:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129ea4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129ea8:	eb005d7e 	bl	1414a8 <strlen>
  129eac:	e1a03000 	mov	r3, r0
  129eb0:	e3530002 	cmp	r3, #2
  129eb4:	9a000017 	bls	129f18 <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129eb8:	e3080c60 	movw	r0, #35936	; 0x8c60
  129ebc:	e3400014 	movt	r0, #20
  129ec0:	ebff6493 	bl	103114 <rt_kprintf>
        return;
  129ec4:	ea000041 	b	129fd0 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129ec8:	e51b3008 	ldr	r3, [fp, #-8]
  129ecc:	e2833042 	add	r3, r3, #66	; 0x42
  129ed0:	e3a02002 	mov	r2, #2
  129ed4:	e1a01003 	mov	r1, r3
  129ed8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129edc:	eb005d9d 	bl	141558 <strncmp>
  129ee0:	e1a03000 	mov	r3, r0
  129ee4:	e3530000 	cmp	r3, #0
  129ee8:	0a00000e 	beq	129f28 <set_if+0xb0>
            break;

        netif = netif->next;
  129eec:	e51b3008 	ldr	r3, [fp, #-8]
  129ef0:	e5933000 	ldr	r3, [r3]
  129ef4:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129ef8:	e51b3008 	ldr	r3, [fp, #-8]
  129efc:	e3530000 	cmp	r3, #0
  129f00:	1a000004 	bne	129f18 <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129f04:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129f08:	e3080c84 	movw	r0, #35972	; 0x8c84
  129f0c:	e3400014 	movt	r0, #20
  129f10:	ebff647f 	bl	103114 <rt_kprintf>
            return;
  129f14:	ea00002d 	b	129fd0 <set_if+0x158>
    while(netif != RT_NULL)
  129f18:	e51b3008 	ldr	r3, [fp, #-8]
  129f1c:	e3530000 	cmp	r3, #0
  129f20:	1affffe8 	bne	129ec8 <set_if+0x50>
  129f24:	ea000000 	b	129f2c <set_if+0xb4>
            break;
  129f28:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129f2c:	e24b3010 	sub	r3, fp, #16
  129f30:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129f34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129f38:	e3530000 	cmp	r3, #0
  129f3c:	0a000009 	beq	129f68 <set_if+0xf0>
  129f40:	e24b3010 	sub	r3, fp, #16
  129f44:	e1a01003 	mov	r1, r3
  129f48:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129f4c:	eb0021e1 	bl	1326d8 <ip4addr_aton>
  129f50:	e1a03000 	mov	r3, r0
  129f54:	e3530000 	cmp	r3, #0
  129f58:	0a000002 	beq	129f68 <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129f5c:	e51b100c 	ldr	r1, [fp, #-12]
  129f60:	e51b0008 	ldr	r0, [fp, #-8]
  129f64:	ebffbe0e 	bl	1197a4 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129f68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129f6c:	e3530000 	cmp	r3, #0
  129f70:	0a000009 	beq	129f9c <set_if+0x124>
  129f74:	e24b3010 	sub	r3, fp, #16
  129f78:	e1a01003 	mov	r1, r3
  129f7c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129f80:	eb0021d4 	bl	1326d8 <ip4addr_aton>
  129f84:	e1a03000 	mov	r3, r0
  129f88:	e3530000 	cmp	r3, #0
  129f8c:	0a000002 	beq	129f9c <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129f90:	e51b100c 	ldr	r1, [fp, #-12]
  129f94:	e51b0008 	ldr	r0, [fp, #-8]
  129f98:	ebffbe48 	bl	1198c0 <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129f9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129fa0:	e3530000 	cmp	r3, #0
  129fa4:	0a000009 	beq	129fd0 <set_if+0x158>
  129fa8:	e24b3010 	sub	r3, fp, #16
  129fac:	e1a01003 	mov	r1, r3
  129fb0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129fb4:	eb0021c7 	bl	1326d8 <ip4addr_aton>
  129fb8:	e1a03000 	mov	r3, r0
  129fbc:	e3530000 	cmp	r3, #0
  129fc0:	0a000002 	beq	129fd0 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129fc4:	e51b100c 	ldr	r1, [fp, #-12]
  129fc8:	e51b0008 	ldr	r0, [fp, #-8]
  129fcc:	ebffbe54 	bl	119924 <netif_set_netmask>
    }
}
  129fd0:	e24bd004 	sub	sp, fp, #4
  129fd4:	e8bd8800 	pop	{fp, pc}

00129fd8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129fd8:	e92d4800 	push	{fp, lr}
  129fdc:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129fe0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  129fe4:	e3403014 	movt	r3, #20
  129fe8:	e5d33000 	ldrb	r3, [r3]
  129fec:	e3530000 	cmp	r3, #0
  129ff0:	1a000039 	bne	12a0dc <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  129ff4:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  129ff8:	e3403014 	movt	r3, #20
  129ffc:	e5933000 	ldr	r3, [r3]
  12a000:	e3530000 	cmp	r3, #0
  12a004:	0a000006 	beq	12a024 <dhcp_inc_pcb_refcount+0x4c>
  12a008:	e3080d38 	movw	r0, #36152	; 0x8d38
  12a00c:	e3400014 	movt	r0, #20
  12a010:	ebff643f 	bl	103114 <rt_kprintf>
  12a014:	e3a010db 	mov	r1, #219	; 0xdb
  12a018:	e3080d60 	movw	r0, #36192	; 0x8d60
  12a01c:	e3400014 	movt	r0, #20
  12a020:	ebff842e 	bl	10b0e0 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  12a024:	ebfffaa1 	bl	128ab0 <udp_new>
  12a028:	e1a02000 	mov	r2, r0
  12a02c:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a030:	e3403014 	movt	r3, #20
  12a034:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  12a038:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a03c:	e3403014 	movt	r3, #20
  12a040:	e5933000 	ldr	r3, [r3]
  12a044:	e3530000 	cmp	r3, #0
  12a048:	1a000001 	bne	12a054 <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  12a04c:	e3e03000 	mvn	r3, #0
  12a050:	ea00002a 	b	12a100 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  12a054:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a058:	e3403014 	movt	r3, #20
  12a05c:	e5933000 	ldr	r3, [r3]
  12a060:	e5d32008 	ldrb	r2, [r3, #8]
  12a064:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a068:	e3403014 	movt	r3, #20
  12a06c:	e5933000 	ldr	r3, [r3]
  12a070:	e3822020 	orr	r2, r2, #32
  12a074:	e6ef2072 	uxtb	r2, r2
  12a078:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  12a07c:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a080:	e3403014 	movt	r3, #20
  12a084:	e5933000 	ldr	r3, [r3]
  12a088:	e3a02044 	mov	r2, #68	; 0x44
  12a08c:	e30918f8 	movw	r1, #39160	; 0x98f8
  12a090:	e3401014 	movt	r1, #20
  12a094:	e1a00003 	mov	r0, r3
  12a098:	ebfff969 	bl	128644 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  12a09c:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a0a0:	e3403014 	movt	r3, #20
  12a0a4:	e5933000 	ldr	r3, [r3]
  12a0a8:	e3a02043 	mov	r2, #67	; 0x43
  12a0ac:	e30918f8 	movw	r1, #39160	; 0x98f8
  12a0b0:	e3401014 	movt	r1, #20
  12a0b4:	e1a00003 	mov	r0, r3
  12a0b8:	ebfff9d7 	bl	12881c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  12a0bc:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a0c0:	e3403014 	movt	r3, #20
  12a0c4:	e5933000 	ldr	r3, [r3]
  12a0c8:	e3a02000 	mov	r2, #0
  12a0cc:	e30c1d40 	movw	r1, #52544	; 0xcd40
  12a0d0:	e3401012 	movt	r1, #18
  12a0d4:	e1a00003 	mov	r0, r3
  12a0d8:	ebfffa33 	bl	1289ac <udp_recv>
  }

  dhcp_pcb_refcount++;
  12a0dc:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12a0e0:	e3403014 	movt	r3, #20
  12a0e4:	e5d33000 	ldrb	r3, [r3]
  12a0e8:	e2833001 	add	r3, r3, #1
  12a0ec:	e6ef2073 	uxtb	r2, r3
  12a0f0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12a0f4:	e3403014 	movt	r3, #20
  12a0f8:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  12a0fc:	e3a03000 	mov	r3, #0
}
  12a100:	e1a00003 	mov	r0, r3
  12a104:	e8bd8800 	pop	{fp, pc}

0012a108 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  12a108:	e92d4800 	push	{fp, lr}
  12a10c:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  12a110:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12a114:	e3403014 	movt	r3, #20
  12a118:	e5d33000 	ldrb	r3, [r3]
  12a11c:	e3530000 	cmp	r3, #0
  12a120:	1a000006 	bne	12a140 <dhcp_dec_pcb_refcount+0x38>
  12a124:	e3080d94 	movw	r0, #36244	; 0x8d94
  12a128:	e3400014 	movt	r0, #20
  12a12c:	ebff63f8 	bl	103114 <rt_kprintf>
  12a130:	e3a010f5 	mov	r1, #245	; 0xf5
  12a134:	e3080d60 	movw	r0, #36192	; 0x8d60
  12a138:	e3400014 	movt	r0, #20
  12a13c:	ebff83e7 	bl	10b0e0 <sys_arch_assert>
  dhcp_pcb_refcount--;
  12a140:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12a144:	e3403014 	movt	r3, #20
  12a148:	e5d33000 	ldrb	r3, [r3]
  12a14c:	e2433001 	sub	r3, r3, #1
  12a150:	e6ef2073 	uxtb	r2, r3
  12a154:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12a158:	e3403014 	movt	r3, #20
  12a15c:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  12a160:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12a164:	e3403014 	movt	r3, #20
  12a168:	e5d33000 	ldrb	r3, [r3]
  12a16c:	e3530000 	cmp	r3, #0
  12a170:	1a000008 	bne	12a198 <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  12a174:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a178:	e3403014 	movt	r3, #20
  12a17c:	e5933000 	ldr	r3, [r3]
  12a180:	e1a00003 	mov	r0, r3
  12a184:	ebfffa18 	bl	1289ec <udp_remove>
    dhcp_pcb = NULL;
  12a188:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a18c:	e3403014 	movt	r3, #20
  12a190:	e3a02000 	mov	r2, #0
  12a194:	e5832000 	str	r2, [r3]
  }
}
  12a198:	e320f000 	nop	{0}
  12a19c:	e8bd8800 	pop	{fp, pc}

0012a1a0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  12a1a0:	e92d4800 	push	{fp, lr}
  12a1a4:	e28db004 	add	fp, sp, #4
  12a1a8:	e24dd010 	sub	sp, sp, #16
  12a1ac:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a1b0:	e51b3010 	ldr	r3, [fp, #-16]
  12a1b4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a1b8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12a1bc:	e3a0100c 	mov	r1, #12
  12a1c0:	e51b0008 	ldr	r0, [fp, #-8]
  12a1c4:	eb00076b 	bl	12bf78 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12a1c8:	e30938f8 	movw	r3, #39160	; 0x98f8
  12a1cc:	e3403014 	movt	r3, #20
  12a1d0:	e30928f8 	movw	r2, #39160	; 0x98f8
  12a1d4:	e3402014 	movt	r2, #20
  12a1d8:	e30918f8 	movw	r1, #39160	; 0x98f8
  12a1dc:	e3401014 	movt	r1, #20
  12a1e0:	e51b0010 	ldr	r0, [fp, #-16]
  12a1e4:	ebffbcbf 	bl	1194e8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  12a1e8:	e51b0010 	ldr	r0, [fp, #-16]
  12a1ec:	eb000420 	bl	12b274 <dhcp_discover>
}
  12a1f0:	e320f000 	nop	{0}
  12a1f4:	e24bd004 	sub	sp, fp, #4
  12a1f8:	e8bd8800 	pop	{fp, pc}

0012a1fc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  12a1fc:	e92d4800 	push	{fp, lr}
  12a200:	e28db004 	add	fp, sp, #4
  12a204:	e24dd010 	sub	sp, sp, #16
  12a208:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a20c:	e51b3010 	ldr	r3, [fp, #-16]
  12a210:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a214:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  12a218:	e3a01008 	mov	r1, #8
  12a21c:	e51b0008 	ldr	r0, [fp, #-8]
  12a220:	eb000754 	bl	12bf78 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  12a224:	e51b3008 	ldr	r3, [fp, #-8]
  12a228:	e2833028 	add	r3, r3, #40	; 0x28
  12a22c:	e3a02000 	mov	r2, #0
  12a230:	e1a01003 	mov	r1, r3
  12a234:	e51b0010 	ldr	r0, [fp, #-16]
  12a238:	eb0012a0 	bl	12ecc0 <etharp_query>
  12a23c:	e1a03000 	mov	r3, r0
  12a240:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  12a244:	e51b3008 	ldr	r3, [fp, #-8]
  12a248:	e5d3300a 	ldrb	r3, [r3, #10]
  12a24c:	e35300ff 	cmp	r3, #255	; 0xff
  12a250:	0a000005 	beq	12a26c <dhcp_check+0x70>
    dhcp->tries++;
  12a254:	e51b3008 	ldr	r3, [fp, #-8]
  12a258:	e5d3300a 	ldrb	r3, [r3, #10]
  12a25c:	e2833001 	add	r3, r3, #1
  12a260:	e6ef2073 	uxtb	r2, r3
  12a264:	e51b3008 	ldr	r3, [fp, #-8]
  12a268:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  12a26c:	e3a03f7d 	mov	r3, #500	; 0x1f4
  12a270:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a274:	e15b30bc 	ldrh	r3, [fp, #-12]
  12a278:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a27c:	e2833003 	add	r3, r3, #3
  12a280:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a284:	e3412062 	movt	r2, #4194	; 0x1062
  12a288:	e0c10293 	smull	r0, r1, r3, r2
  12a28c:	e1a022c1 	asr	r2, r1, #5
  12a290:	e1a03fc3 	asr	r3, r3, #31
  12a294:	e0423003 	sub	r3, r2, r3
  12a298:	e6ff2073 	uxth	r2, r3
  12a29c:	e51b3008 	ldr	r3, [fp, #-8]
  12a2a0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  12a2a4:	e320f000 	nop	{0}
  12a2a8:	e24bd004 	sub	sp, fp, #4
  12a2ac:	e8bd8800 	pop	{fp, pc}

0012a2b0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  12a2b0:	e92d4800 	push	{fp, lr}
  12a2b4:	e28db004 	add	fp, sp, #4
  12a2b8:	e24dd010 	sub	sp, sp, #16
  12a2bc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a2c0:	e51b3010 	ldr	r3, [fp, #-16]
  12a2c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a2c8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  12a2cc:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12a2d0:	e3403015 	movt	r3, #21
  12a2d4:	e5d33002 	ldrb	r3, [r3, #2]
  12a2d8:	e3530000 	cmp	r3, #0
  12a2dc:	0a00000e 	beq	12a31c <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  12a2e0:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12a2e4:	e3403015 	movt	r3, #21
  12a2e8:	e5933008 	ldr	r3, [r3, #8]
  12a2ec:	e1a00003 	mov	r0, r3
  12a2f0:	ebffb0bf 	bl	1165f4 <lwip_htonl>
  12a2f4:	e1a02000 	mov	r2, r0
  12a2f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a2fc:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a300:	e51b3008 	ldr	r3, [fp, #-8]
  12a304:	e5933004 	ldr	r3, [r3, #4]
  12a308:	e5932010 	ldr	r2, [r3, #16]
  12a30c:	e51b3008 	ldr	r3, [fp, #-8]
  12a310:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  12a314:	e51b0010 	ldr	r0, [fp, #-16]
  12a318:	eb000002 	bl	12a328 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  12a31c:	e320f000 	nop	{0}
  12a320:	e24bd004 	sub	sp, fp, #4
  12a324:	e8bd8800 	pop	{fp, pc}

0012a328 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  12a328:	e92d4800 	push	{fp, lr}
  12a32c:	e28db004 	add	fp, sp, #4
  12a330:	e24dd020 	sub	sp, sp, #32
  12a334:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a338:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a33c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a340:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  12a344:	e3a01001 	mov	r1, #1
  12a348:	e51b000c 	ldr	r0, [fp, #-12]
  12a34c:	eb000709 	bl	12bf78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12a350:	e3a02003 	mov	r2, #3
  12a354:	e51b100c 	ldr	r1, [fp, #-12]
  12a358:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a35c:	eb000b35 	bl	12d038 <dhcp_create_msg>
  12a360:	e1a03000 	mov	r3, r0
  12a364:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12a368:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12a36c:	e3530000 	cmp	r3, #0
  12a370:	1a000052 	bne	12a4c0 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12a374:	e3a02002 	mov	r2, #2
  12a378:	e3a01039 	mov	r1, #57	; 0x39
  12a37c:	e51b000c 	ldr	r0, [fp, #-12]
  12a380:	eb000714 	bl	12bfd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12a384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a388:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a38c:	e1a01003 	mov	r1, r3
  12a390:	e51b000c 	ldr	r0, [fp, #-12]
  12a394:	eb00075e 	bl	12c114 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a398:	e3a02004 	mov	r2, #4
  12a39c:	e3a01032 	mov	r1, #50	; 0x32
  12a3a0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3a4:	eb00070b 	bl	12bfd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a3a8:	e51b300c 	ldr	r3, [fp, #-12]
  12a3ac:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a3b0:	e1a00003 	mov	r0, r3
  12a3b4:	ebffb08e 	bl	1165f4 <lwip_htonl>
  12a3b8:	e1a03000 	mov	r3, r0
  12a3bc:	e1a01003 	mov	r1, r3
  12a3c0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3c4:	eb000783 	bl	12c1d8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a3c8:	e3a02004 	mov	r2, #4
  12a3cc:	e3a01036 	mov	r1, #54	; 0x36
  12a3d0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3d4:	eb0006ff 	bl	12bfd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a3d8:	e51b300c 	ldr	r3, [fp, #-12]
  12a3dc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a3e0:	e1a00003 	mov	r0, r3
  12a3e4:	ebffb082 	bl	1165f4 <lwip_htonl>
  12a3e8:	e1a03000 	mov	r3, r0
  12a3ec:	e1a01003 	mov	r1, r3
  12a3f0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3f4:	eb000777 	bl	12c1d8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a3f8:	e3a02004 	mov	r2, #4
  12a3fc:	e3a01037 	mov	r1, #55	; 0x37
  12a400:	e51b000c 	ldr	r0, [fp, #-12]
  12a404:	eb0006f3 	bl	12bfd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a408:	e3a03000 	mov	r3, #0
  12a40c:	e54b3005 	strb	r3, [fp, #-5]
  12a410:	ea000009 	b	12a43c <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a414:	e55b2005 	ldrb	r2, [fp, #-5]
  12a418:	e30d303c 	movw	r3, #53308	; 0xd03c
  12a41c:	e3403014 	movt	r3, #20
  12a420:	e7d33002 	ldrb	r3, [r3, r2]
  12a424:	e1a01003 	mov	r1, r3
  12a428:	e51b000c 	ldr	r0, [fp, #-12]
  12a42c:	eb000719 	bl	12c098 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a430:	e55b3005 	ldrb	r3, [fp, #-5]
  12a434:	e2833001 	add	r3, r3, #1
  12a438:	e54b3005 	strb	r3, [fp, #-5]
  12a43c:	e55b3005 	ldrb	r3, [fp, #-5]
  12a440:	e3530003 	cmp	r3, #3
  12a444:	9afffff2 	bls	12a414 <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a448:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a44c:	e51b000c 	ldr	r0, [fp, #-12]
  12a450:	eb0007ab 	bl	12c304 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a454:	e51b000c 	ldr	r0, [fp, #-12]
  12a458:	eb000c63 	bl	12d5ec <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a45c:	e51b300c 	ldr	r3, [fp, #-12]
  12a460:	e593200c 	ldr	r2, [r3, #12]
  12a464:	e51b300c 	ldr	r3, [fp, #-12]
  12a468:	e1d331b4 	ldrh	r3, [r3, #20]
  12a46c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a470:	e6ff3073 	uxth	r3, r3
  12a474:	e1a01003 	mov	r1, r3
  12a478:	e1a00002 	mov	r0, r2
  12a47c:	ebffc13e 	bl	11a97c <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a480:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12a484:	e3403014 	movt	r3, #20
  12a488:	e5930000 	ldr	r0, [r3]
  12a48c:	e51b300c 	ldr	r3, [fp, #-12]
  12a490:	e593100c 	ldr	r1, [r3, #12]
  12a494:	e30938f8 	movw	r3, #39160	; 0x98f8
  12a498:	e3403014 	movt	r3, #20
  12a49c:	e58d3004 	str	r3, [sp, #4]
  12a4a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a4a4:	e58d3000 	str	r3, [sp]
  12a4a8:	e3a03043 	mov	r3, #67	; 0x43
  12a4ac:	e30928fc 	movw	r2, #39164	; 0x98fc
  12a4b0:	e3402014 	movt	r2, #20
  12a4b4:	ebfff791 	bl	128300 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a4b8:	e51b000c 	ldr	r0, [fp, #-12]
  12a4bc:	eb000c15 	bl	12d518 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a4c0:	e51b300c 	ldr	r3, [fp, #-12]
  12a4c4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4c8:	e35300ff 	cmp	r3, #255	; 0xff
  12a4cc:	0a000005 	beq	12a4e8 <dhcp_select+0x1c0>
    dhcp->tries++;
  12a4d0:	e51b300c 	ldr	r3, [fp, #-12]
  12a4d4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4d8:	e2833001 	add	r3, r3, #1
  12a4dc:	e6ef2073 	uxtb	r2, r3
  12a4e0:	e51b300c 	ldr	r3, [fp, #-12]
  12a4e4:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a4e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a4ec:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4f0:	e3530005 	cmp	r3, #5
  12a4f4:	8a000006 	bhi	12a514 <dhcp_select+0x1ec>
  12a4f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a4fc:	e5d3300a 	ldrb	r3, [r3, #10]
  12a500:	e1a02003 	mov	r2, r3
  12a504:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a508:	e1a03213 	lsl	r3, r3, r2
  12a50c:	e6ff3073 	uxth	r3, r3
  12a510:	ea000000 	b	12a518 <dhcp_select+0x1f0>
  12a514:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a518:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a51c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a520:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a524:	e2833003 	add	r3, r3, #3
  12a528:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a52c:	e3412062 	movt	r2, #4194	; 0x1062
  12a530:	e0c10293 	smull	r0, r1, r3, r2
  12a534:	e1a022c1 	asr	r2, r1, #5
  12a538:	e1a03fc3 	asr	r3, r3, #31
  12a53c:	e0423003 	sub	r3, r2, r3
  12a540:	e6ff2073 	uxth	r2, r3
  12a544:	e51b300c 	ldr	r3, [fp, #-12]
  12a548:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a54c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a550:	e1a00003 	mov	r0, r3
  12a554:	e24bd004 	sub	sp, fp, #4
  12a558:	e8bd8800 	pop	{fp, pc}

0012a55c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a55c:	e92d4800 	push	{fp, lr}
  12a560:	e28db004 	add	fp, sp, #4
  12a564:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a568:	e30c3a44 	movw	r3, #51780	; 0xca44
  12a56c:	e3403015 	movt	r3, #21
  12a570:	e5933000 	ldr	r3, [r3]
  12a574:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a578:	ea00003e 	b	12a678 <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a57c:	e51b3008 	ldr	r3, [fp, #-8]
  12a580:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a584:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a588:	e51b300c 	ldr	r3, [fp, #-12]
  12a58c:	e3530000 	cmp	r3, #0
  12a590:	0a000035 	beq	12a66c <dhcp_coarse_tmr+0x110>
  12a594:	e51b300c 	ldr	r3, [fp, #-12]
  12a598:	e5d33009 	ldrb	r3, [r3, #9]
  12a59c:	e3530000 	cmp	r3, #0
  12a5a0:	0a000031 	beq	12a66c <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a5a4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5a8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5ac:	e3530000 	cmp	r3, #0
  12a5b0:	0a000010 	beq	12a5f8 <dhcp_coarse_tmr+0x9c>
  12a5b4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5b8:	e1d332b0 	ldrh	r3, [r3, #32]
  12a5bc:	e2833001 	add	r3, r3, #1
  12a5c0:	e6ff2073 	uxth	r2, r3
  12a5c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5c8:	e1c322b0 	strh	r2, [r3, #32]
  12a5cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a5d0:	e1d322b0 	ldrh	r2, [r3, #32]
  12a5d4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5d8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5dc:	e1520003 	cmp	r2, r3
  12a5e0:	1a000004 	bne	12a5f8 <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a5e4:	e51b0008 	ldr	r0, [fp, #-8]
  12a5e8:	eb0005bd 	bl	12bce4 <dhcp_release>
        dhcp_discover(netif);
  12a5ec:	e51b0008 	ldr	r0, [fp, #-8]
  12a5f0:	eb00031f 	bl	12b274 <dhcp_discover>
  12a5f4:	ea00001c 	b	12a66c <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a5f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5fc:	e1d331be 	ldrh	r3, [r3, #30]
  12a600:	e3530000 	cmp	r3, #0
  12a604:	0a00000a 	beq	12a634 <dhcp_coarse_tmr+0xd8>
  12a608:	e51b300c 	ldr	r3, [fp, #-12]
  12a60c:	e1d331be 	ldrh	r3, [r3, #30]
  12a610:	e2432001 	sub	r2, r3, #1
  12a614:	e6ff1072 	uxth	r1, r2
  12a618:	e51b200c 	ldr	r2, [fp, #-12]
  12a61c:	e1c211be 	strh	r1, [r2, #30]
  12a620:	e3530001 	cmp	r3, #1
  12a624:	1a000002 	bne	12a634 <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a628:	e51b0008 	ldr	r0, [fp, #-8]
  12a62c:	eb0000b1 	bl	12a8f8 <dhcp_t2_timeout>
  12a630:	ea00000d 	b	12a66c <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a634:	e51b300c 	ldr	r3, [fp, #-12]
  12a638:	e1d331bc 	ldrh	r3, [r3, #28]
  12a63c:	e3530000 	cmp	r3, #0
  12a640:	0a000009 	beq	12a66c <dhcp_coarse_tmr+0x110>
  12a644:	e51b300c 	ldr	r3, [fp, #-12]
  12a648:	e1d331bc 	ldrh	r3, [r3, #28]
  12a64c:	e2432001 	sub	r2, r3, #1
  12a650:	e6ff1072 	uxth	r1, r2
  12a654:	e51b200c 	ldr	r2, [fp, #-12]
  12a658:	e1c211bc 	strh	r1, [r2, #28]
  12a65c:	e3530001 	cmp	r3, #1
  12a660:	1a000001 	bne	12a66c <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a664:	e51b0008 	ldr	r0, [fp, #-8]
  12a668:	eb000076 	bl	12a848 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a66c:	e51b3008 	ldr	r3, [fp, #-8]
  12a670:	e5933000 	ldr	r3, [r3]
  12a674:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a678:	e51b3008 	ldr	r3, [fp, #-8]
  12a67c:	e3530000 	cmp	r3, #0
  12a680:	1affffbd 	bne	12a57c <dhcp_coarse_tmr+0x20>
  }
}
  12a684:	e320f000 	nop	{0}
  12a688:	e24bd004 	sub	sp, fp, #4
  12a68c:	e8bd8800 	pop	{fp, pc}

0012a690 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a690:	e92d4800 	push	{fp, lr}
  12a694:	e28db004 	add	fp, sp, #4
  12a698:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a69c:	e30c3a44 	movw	r3, #51780	; 0xca44
  12a6a0:	e3403015 	movt	r3, #21
  12a6a4:	e5933000 	ldr	r3, [r3]
  12a6a8:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a6ac:	ea00001f 	b	12a730 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a6b0:	e51b3008 	ldr	r3, [fp, #-8]
  12a6b4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a6b8:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a6bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a6c0:	e3530000 	cmp	r3, #0
  12a6c4:	0a000016 	beq	12a724 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a6c8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6cc:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6d0:	e3530001 	cmp	r3, #1
  12a6d4:	9a000006 	bls	12a6f4 <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a6d8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6dc:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6e0:	e2433001 	sub	r3, r3, #1
  12a6e4:	e6ff2073 	uxth	r2, r3
  12a6e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6ec:	e1c321b6 	strh	r2, [r3, #22]
  12a6f0:	ea00000b 	b	12a724 <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a6f4:	e51b300c 	ldr	r3, [fp, #-12]
  12a6f8:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6fc:	e3530001 	cmp	r3, #1
  12a700:	1a000007 	bne	12a724 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a704:	e51b300c 	ldr	r3, [fp, #-12]
  12a708:	e1d331b6 	ldrh	r3, [r3, #22]
  12a70c:	e2433001 	sub	r3, r3, #1
  12a710:	e6ff2073 	uxth	r2, r3
  12a714:	e51b300c 	ldr	r3, [fp, #-12]
  12a718:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a71c:	e51b0008 	ldr	r0, [fp, #-8]
  12a720:	eb000008 	bl	12a748 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a724:	e51b3008 	ldr	r3, [fp, #-8]
  12a728:	e5933000 	ldr	r3, [r3]
  12a72c:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a730:	e51b3008 	ldr	r3, [fp, #-8]
  12a734:	e3530000 	cmp	r3, #0
  12a738:	1affffdc 	bne	12a6b0 <dhcp_fine_tmr+0x20>
  }
}
  12a73c:	e320f000 	nop	{0}
  12a740:	e24bd004 	sub	sp, fp, #4
  12a744:	e8bd8800 	pop	{fp, pc}

0012a748 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a748:	e92d4800 	push	{fp, lr}
  12a74c:	e28db004 	add	fp, sp, #4
  12a750:	e24dd010 	sub	sp, sp, #16
  12a754:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a758:	e51b3010 	ldr	r3, [fp, #-16]
  12a75c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a760:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a764:	e51b3008 	ldr	r3, [fp, #-8]
  12a768:	e5d33009 	ldrb	r3, [r3, #9]
  12a76c:	e353000c 	cmp	r3, #12
  12a770:	0a000003 	beq	12a784 <dhcp_timeout+0x3c>
  12a774:	e51b3008 	ldr	r3, [fp, #-8]
  12a778:	e5d33009 	ldrb	r3, [r3, #9]
  12a77c:	e3530006 	cmp	r3, #6
  12a780:	1a000002 	bne	12a790 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a784:	e51b0010 	ldr	r0, [fp, #-16]
  12a788:	eb0002b9 	bl	12b274 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a78c:	ea00002a 	b	12a83c <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a790:	e51b3008 	ldr	r3, [fp, #-8]
  12a794:	e5d33009 	ldrb	r3, [r3, #9]
  12a798:	e3530001 	cmp	r3, #1
  12a79c:	1a00000b 	bne	12a7d0 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a7a0:	e51b3008 	ldr	r3, [fp, #-8]
  12a7a4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7a8:	e3530005 	cmp	r3, #5
  12a7ac:	8a000002 	bhi	12a7bc <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a7b0:	e51b0010 	ldr	r0, [fp, #-16]
  12a7b4:	ebfffedb 	bl	12a328 <dhcp_select>
}
  12a7b8:	ea00001f 	b	12a83c <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a7bc:	e51b0010 	ldr	r0, [fp, #-16]
  12a7c0:	eb000547 	bl	12bce4 <dhcp_release>
      dhcp_discover(netif);
  12a7c4:	e51b0010 	ldr	r0, [fp, #-16]
  12a7c8:	eb0002a9 	bl	12b274 <dhcp_discover>
}
  12a7cc:	ea00001a 	b	12a83c <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a7d0:	e51b3008 	ldr	r3, [fp, #-8]
  12a7d4:	e5d33009 	ldrb	r3, [r3, #9]
  12a7d8:	e3530008 	cmp	r3, #8
  12a7dc:	1a000009 	bne	12a808 <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a7e0:	e51b3008 	ldr	r3, [fp, #-8]
  12a7e4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7e8:	e3530001 	cmp	r3, #1
  12a7ec:	8a000002 	bhi	12a7fc <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a7f0:	e51b0010 	ldr	r0, [fp, #-16]
  12a7f4:	ebfffe80 	bl	12a1fc <dhcp_check>
}
  12a7f8:	ea00000f 	b	12a83c <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a7fc:	e51b0010 	ldr	r0, [fp, #-16]
  12a800:	eb000312 	bl	12b450 <dhcp_bind>
}
  12a804:	ea00000c 	b	12a83c <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a808:	e51b3008 	ldr	r3, [fp, #-8]
  12a80c:	e5d33009 	ldrb	r3, [r3, #9]
  12a810:	e3530003 	cmp	r3, #3
  12a814:	1a000008 	bne	12a83c <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a818:	e51b3008 	ldr	r3, [fp, #-8]
  12a81c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a820:	e3530001 	cmp	r3, #1
  12a824:	8a000002 	bhi	12a834 <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a828:	e51b0010 	ldr	r0, [fp, #-16]
  12a82c:	eb0004af 	bl	12baf0 <dhcp_reboot>
}
  12a830:	ea000001 	b	12a83c <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a834:	e51b0010 	ldr	r0, [fp, #-16]
  12a838:	eb00028d 	bl	12b274 <dhcp_discover>
}
  12a83c:	e320f000 	nop	{0}
  12a840:	e24bd004 	sub	sp, fp, #4
  12a844:	e8bd8800 	pop	{fp, pc}

0012a848 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a848:	e92d4800 	push	{fp, lr}
  12a84c:	e28db004 	add	fp, sp, #4
  12a850:	e24dd010 	sub	sp, sp, #16
  12a854:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a858:	e51b3010 	ldr	r3, [fp, #-16]
  12a85c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a860:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a864:	e51b3008 	ldr	r3, [fp, #-8]
  12a868:	e5d33009 	ldrb	r3, [r3, #9]
  12a86c:	e3530001 	cmp	r3, #1
  12a870:	0a000007 	beq	12a894 <dhcp_t1_timeout+0x4c>
  12a874:	e51b3008 	ldr	r3, [fp, #-8]
  12a878:	e5d33009 	ldrb	r3, [r3, #9]
  12a87c:	e353000a 	cmp	r3, #10
  12a880:	0a000003 	beq	12a894 <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a884:	e51b3008 	ldr	r3, [fp, #-8]
  12a888:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a88c:	e3530005 	cmp	r3, #5
  12a890:	1a000015 	bne	12a8ec <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a894:	e51b0010 	ldr	r0, [fp, #-16]
  12a898:	eb0003a8 	bl	12b740 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a89c:	e51b3008 	ldr	r3, [fp, #-8]
  12a8a0:	e1d331ba 	ldrh	r3, [r3, #26]
  12a8a4:	e1a02003 	mov	r2, r3
  12a8a8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8ac:	e1d332b0 	ldrh	r3, [r3, #32]
  12a8b0:	e0423003 	sub	r3, r2, r3
  12a8b4:	e3530001 	cmp	r3, #1
  12a8b8:	da00000b 	ble	12a8ec <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a8bc:	e51b3008 	ldr	r3, [fp, #-8]
  12a8c0:	e1d331ba 	ldrh	r3, [r3, #26]
  12a8c4:	e1a02003 	mov	r2, r3
  12a8c8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8cc:	e1d332b0 	ldrh	r3, [r3, #32]
  12a8d0:	e0423003 	sub	r3, r2, r3
  12a8d4:	e1a02fa3 	lsr	r2, r3, #31
  12a8d8:	e0823003 	add	r3, r2, r3
  12a8dc:	e1a030c3 	asr	r3, r3, #1
  12a8e0:	e6ff2073 	uxth	r2, r3
  12a8e4:	e51b3008 	ldr	r3, [fp, #-8]
  12a8e8:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a8ec:	e320f000 	nop	{0}
  12a8f0:	e24bd004 	sub	sp, fp, #4
  12a8f4:	e8bd8800 	pop	{fp, pc}

0012a8f8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a8f8:	e92d4800 	push	{fp, lr}
  12a8fc:	e28db004 	add	fp, sp, #4
  12a900:	e24dd010 	sub	sp, sp, #16
  12a904:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a908:	e51b3010 	ldr	r3, [fp, #-16]
  12a90c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a910:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a914:	e51b3008 	ldr	r3, [fp, #-8]
  12a918:	e5d33009 	ldrb	r3, [r3, #9]
  12a91c:	e3530001 	cmp	r3, #1
  12a920:	0a00000b 	beq	12a954 <dhcp_t2_timeout+0x5c>
  12a924:	e51b3008 	ldr	r3, [fp, #-8]
  12a928:	e5d33009 	ldrb	r3, [r3, #9]
  12a92c:	e353000a 	cmp	r3, #10
  12a930:	0a000007 	beq	12a954 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a934:	e51b3008 	ldr	r3, [fp, #-8]
  12a938:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a93c:	e3530005 	cmp	r3, #5
  12a940:	0a000003 	beq	12a954 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a944:	e51b3008 	ldr	r3, [fp, #-8]
  12a948:	e5d33009 	ldrb	r3, [r3, #9]
  12a94c:	e3530004 	cmp	r3, #4
  12a950:	1a000015 	bne	12a9ac <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a954:	e51b0010 	ldr	r0, [fp, #-16]
  12a958:	eb0003ee 	bl	12b918 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a95c:	e51b3008 	ldr	r3, [fp, #-8]
  12a960:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a964:	e1a02003 	mov	r2, r3
  12a968:	e51b3008 	ldr	r3, [fp, #-8]
  12a96c:	e1d332b0 	ldrh	r3, [r3, #32]
  12a970:	e0423003 	sub	r3, r2, r3
  12a974:	e3530001 	cmp	r3, #1
  12a978:	da00000b 	ble	12a9ac <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a97c:	e51b3008 	ldr	r3, [fp, #-8]
  12a980:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a984:	e1a02003 	mov	r2, r3
  12a988:	e51b3008 	ldr	r3, [fp, #-8]
  12a98c:	e1d332b0 	ldrh	r3, [r3, #32]
  12a990:	e0423003 	sub	r3, r2, r3
  12a994:	e1a02fa3 	lsr	r2, r3, #31
  12a998:	e0823003 	add	r3, r2, r3
  12a99c:	e1a030c3 	asr	r3, r3, #1
  12a9a0:	e6ff2073 	uxth	r2, r3
  12a9a4:	e51b3008 	ldr	r3, [fp, #-8]
  12a9a8:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a9ac:	e320f000 	nop	{0}
  12a9b0:	e24bd004 	sub	sp, fp, #4
  12a9b4:	e8bd8800 	pop	{fp, pc}

0012a9b8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a9b8:	e92d4800 	push	{fp, lr}
  12a9bc:	e28db004 	add	fp, sp, #4
  12a9c0:	e24dd018 	sub	sp, sp, #24
  12a9c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a9c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a9cc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a9d0:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a9d4:	e51b300c 	ldr	r3, [fp, #-12]
  12a9d8:	e3a02000 	mov	r2, #0
  12a9dc:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a9e0:	e51b300c 	ldr	r3, [fp, #-12]
  12a9e4:	e3a02000 	mov	r2, #0
  12a9e8:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12a9ec:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12a9f0:	e3403015 	movt	r3, #21
  12a9f4:	e5d33003 	ldrb	r3, [r3, #3]
  12a9f8:	e3530000 	cmp	r3, #0
  12a9fc:	0a000004 	beq	12aa14 <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12aa00:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12aa04:	e3403015 	movt	r3, #21
  12aa08:	e593200c 	ldr	r2, [r3, #12]
  12aa0c:	e51b300c 	ldr	r3, [fp, #-12]
  12aa10:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12aa14:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12aa18:	e3403015 	movt	r3, #21
  12aa1c:	e5d33004 	ldrb	r3, [r3, #4]
  12aa20:	e3530000 	cmp	r3, #0
  12aa24:	0a000005 	beq	12aa40 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12aa28:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12aa2c:	e3403015 	movt	r3, #21
  12aa30:	e5932010 	ldr	r2, [r3, #16]
  12aa34:	e51b300c 	ldr	r3, [fp, #-12]
  12aa38:	e5832038 	str	r2, [r3, #56]	; 0x38
  12aa3c:	ea000004 	b	12aa54 <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12aa40:	e51b300c 	ldr	r3, [fp, #-12]
  12aa44:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12aa48:	e1a020a3 	lsr	r2, r3, #1
  12aa4c:	e51b300c 	ldr	r3, [fp, #-12]
  12aa50:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12aa54:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12aa58:	e3403015 	movt	r3, #21
  12aa5c:	e5d33005 	ldrb	r3, [r3, #5]
  12aa60:	e3530000 	cmp	r3, #0
  12aa64:	0a000005 	beq	12aa80 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12aa68:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12aa6c:	e3403015 	movt	r3, #21
  12aa70:	e5932014 	ldr	r2, [r3, #20]
  12aa74:	e51b300c 	ldr	r3, [fp, #-12]
  12aa78:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12aa7c:	ea000007 	b	12aaa0 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12aa80:	e51b300c 	ldr	r3, [fp, #-12]
  12aa84:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12aa88:	e1a03002 	mov	r3, r2
  12aa8c:	e1a03183 	lsl	r3, r3, #3
  12aa90:	e0433002 	sub	r3, r3, r2
  12aa94:	e1a021a3 	lsr	r2, r3, #3
  12aa98:	e51b300c 	ldr	r3, [fp, #-12]
  12aa9c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12aaa0:	e51b300c 	ldr	r3, [fp, #-12]
  12aaa4:	e5933004 	ldr	r3, [r3, #4]
  12aaa8:	e5932010 	ldr	r2, [r3, #16]
  12aaac:	e51b300c 	ldr	r3, [fp, #-12]
  12aab0:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12aab4:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12aab8:	e3403015 	movt	r3, #21
  12aabc:	e5d33006 	ldrb	r3, [r3, #6]
  12aac0:	e3530000 	cmp	r3, #0
  12aac4:	0a00000b 	beq	12aaf8 <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12aac8:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12aacc:	e3403015 	movt	r3, #21
  12aad0:	e5933018 	ldr	r3, [r3, #24]
  12aad4:	e1a00003 	mov	r0, r3
  12aad8:	ebffaec5 	bl	1165f4 <lwip_htonl>
  12aadc:	e1a02000 	mov	r2, r0
  12aae0:	e51b300c 	ldr	r3, [fp, #-12]
  12aae4:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12aae8:	e51b300c 	ldr	r3, [fp, #-12]
  12aaec:	e3a02001 	mov	r2, #1
  12aaf0:	e5c3200b 	strb	r2, [r3, #11]
  12aaf4:	ea000002 	b	12ab04 <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12aaf8:	e51b300c 	ldr	r3, [fp, #-12]
  12aafc:	e3a02000 	mov	r2, #0
  12ab00:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12ab04:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12ab08:	e3403015 	movt	r3, #21
  12ab0c:	e5d33007 	ldrb	r3, [r3, #7]
  12ab10:	e3530000 	cmp	r3, #0
  12ab14:	0a000007 	beq	12ab38 <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12ab18:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12ab1c:	e3403015 	movt	r3, #21
  12ab20:	e593301c 	ldr	r3, [r3, #28]
  12ab24:	e1a00003 	mov	r0, r3
  12ab28:	ebffaeb1 	bl	1165f4 <lwip_htonl>
  12ab2c:	e1a02000 	mov	r2, r0
  12ab30:	e51b300c 	ldr	r3, [fp, #-12]
  12ab34:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab38:	e3a03000 	mov	r3, #0
  12ab3c:	e54b3005 	strb	r3, [fp, #-5]
  12ab40:	ea000010 	b	12ab88 <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12ab44:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab48:	e2832008 	add	r2, r3, #8
  12ab4c:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12ab50:	e3403015 	movt	r3, #21
  12ab54:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12ab58:	e1a00003 	mov	r0, r3
  12ab5c:	ebffaea4 	bl	1165f4 <lwip_htonl>
  12ab60:	e1a03000 	mov	r3, r0
  12ab64:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12ab68:	e24b2010 	sub	r2, fp, #16
  12ab6c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab70:	e1a01002 	mov	r1, r2
  12ab74:	e1a00003 	mov	r0, r3
  12ab78:	ebffaf97 	bl	1169dc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab7c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab80:	e2833001 	add	r3, r3, #1
  12ab84:	e54b3005 	strb	r3, [fp, #-5]
  12ab88:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab8c:	e3530001 	cmp	r3, #1
  12ab90:	8a000006 	bhi	12abb0 <dhcp_handle_ack+0x1f8>
  12ab94:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab98:	e2832008 	add	r2, r3, #8
  12ab9c:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12aba0:	e3403015 	movt	r3, #21
  12aba4:	e7d33002 	ldrb	r3, [r3, r2]
  12aba8:	e3530000 	cmp	r3, #0
  12abac:	1affffe4 	bne	12ab44 <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12abb0:	e320f000 	nop	{0}
  12abb4:	e24bd004 	sub	sp, fp, #4
  12abb8:	e8bd8800 	pop	{fp, pc}

0012abbc <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12abbc:	e92d4800 	push	{fp, lr}
  12abc0:	e28db004 	add	fp, sp, #4
  12abc4:	e24dd008 	sub	sp, sp, #8
  12abc8:	e50b0008 	str	r0, [fp, #-8]
  12abcc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12abd0:	e51b3008 	ldr	r3, [fp, #-8]
  12abd4:	e3530000 	cmp	r3, #0
  12abd8:	1a000006 	bne	12abf8 <dhcp_set_struct+0x3c>
  12abdc:	e3080db8 	movw	r0, #36280	; 0x8db8
  12abe0:	e3400014 	movt	r0, #20
  12abe4:	ebff614a 	bl	103114 <rt_kprintf>
  12abe8:	e3a01faa 	mov	r1, #680	; 0x2a8
  12abec:	e3080d60 	movw	r0, #36192	; 0x8d60
  12abf0:	e3400014 	movt	r0, #20
  12abf4:	ebff8139 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12abf8:	e51b300c 	ldr	r3, [fp, #-12]
  12abfc:	e3530000 	cmp	r3, #0
  12ac00:	1a000006 	bne	12ac20 <dhcp_set_struct+0x64>
  12ac04:	e3080dc8 	movw	r0, #36296	; 0x8dc8
  12ac08:	e3400014 	movt	r0, #20
  12ac0c:	ebff6140 	bl	103114 <rt_kprintf>
  12ac10:	e30012a9 	movw	r1, #681	; 0x2a9
  12ac14:	e3080d60 	movw	r0, #36192	; 0x8d60
  12ac18:	e3400014 	movt	r0, #20
  12ac1c:	ebff812f 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12ac20:	e51b3008 	ldr	r3, [fp, #-8]
  12ac24:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ac28:	e3530000 	cmp	r3, #0
  12ac2c:	0a000006 	beq	12ac4c <dhcp_set_struct+0x90>
  12ac30:	e3080dd8 	movw	r0, #36312	; 0x8dd8
  12ac34:	e3400014 	movt	r0, #20
  12ac38:	ebff6135 	bl	103114 <rt_kprintf>
  12ac3c:	e30012aa 	movw	r1, #682	; 0x2aa
  12ac40:	e3080d60 	movw	r0, #36192	; 0x8d60
  12ac44:	e3400014 	movt	r0, #20
  12ac48:	ebff8124 	bl	10b0e0 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ac4c:	e3a02040 	mov	r2, #64	; 0x40
  12ac50:	e3a01000 	mov	r1, #0
  12ac54:	e51b000c 	ldr	r0, [fp, #-12]
  12ac58:	eb005981 	bl	141264 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12ac5c:	e51b3008 	ldr	r3, [fp, #-8]
  12ac60:	e51b200c 	ldr	r2, [fp, #-12]
  12ac64:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12ac68:	e320f000 	nop	{0}
  12ac6c:	e24bd004 	sub	sp, fp, #4
  12ac70:	e8bd8800 	pop	{fp, pc}

0012ac74 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12ac74:	e92d4800 	push	{fp, lr}
  12ac78:	e28db004 	add	fp, sp, #4
  12ac7c:	e24dd008 	sub	sp, sp, #8
  12ac80:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12ac84:	e51b3008 	ldr	r3, [fp, #-8]
  12ac88:	e3530000 	cmp	r3, #0
  12ac8c:	1a000006 	bne	12acac <dhcp_cleanup+0x38>
  12ac90:	e3080db8 	movw	r0, #36280	; 0x8db8
  12ac94:	e3400014 	movt	r0, #20
  12ac98:	ebff611d 	bl	103114 <rt_kprintf>
  12ac9c:	e30012bd 	movw	r1, #701	; 0x2bd
  12aca0:	e3080d60 	movw	r0, #36192	; 0x8d60
  12aca4:	e3400014 	movt	r0, #20
  12aca8:	ebff810c 	bl	10b0e0 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12acac:	e51b3008 	ldr	r3, [fp, #-8]
  12acb0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acb4:	e3530000 	cmp	r3, #0
  12acb8:	0a000006 	beq	12acd8 <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12acbc:	e51b3008 	ldr	r3, [fp, #-8]
  12acc0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acc4:	e1a00003 	mov	r0, r3
  12acc8:	ebff8151 	bl	10b214 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12accc:	e51b3008 	ldr	r3, [fp, #-8]
  12acd0:	e3a02000 	mov	r2, #0
  12acd4:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12acd8:	e320f000 	nop	{0}
  12acdc:	e24bd004 	sub	sp, fp, #4
  12ace0:	e8bd8800 	pop	{fp, pc}

0012ace4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12ace4:	e92d4800 	push	{fp, lr}
  12ace8:	e28db004 	add	fp, sp, #4
  12acec:	e24dd010 	sub	sp, sp, #16
  12acf0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12acf4:	e51b3010 	ldr	r3, [fp, #-16]
  12acf8:	e3530000 	cmp	r3, #0
  12acfc:	1a000008 	bne	12ad24 <dhcp_start+0x40>
  12ad00:	e3080db8 	movw	r0, #36280	; 0x8db8
  12ad04:	e3400014 	movt	r0, #20
  12ad08:	ebff6101 	bl	103114 <rt_kprintf>
  12ad0c:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12ad10:	e3080d60 	movw	r0, #36192	; 0x8d60
  12ad14:	e3400014 	movt	r0, #20
  12ad18:	ebff80f0 	bl	10b0e0 <sys_arch_assert>
  12ad1c:	e3e0300f 	mvn	r3, #15
  12ad20:	ea000059 	b	12ae8c <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12ad24:	e51b3010 	ldr	r3, [fp, #-16]
  12ad28:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12ad2c:	e2033001 	and	r3, r3, #1
  12ad30:	e3530000 	cmp	r3, #0
  12ad34:	1a000008 	bne	12ad5c <dhcp_start+0x78>
  12ad38:	e3080dfc 	movw	r0, #36348	; 0x8dfc
  12ad3c:	e3400014 	movt	r0, #20
  12ad40:	ebff60f3 	bl	103114 <rt_kprintf>
  12ad44:	e30012d9 	movw	r1, #729	; 0x2d9
  12ad48:	e3080d60 	movw	r0, #36192	; 0x8d60
  12ad4c:	e3400014 	movt	r0, #20
  12ad50:	ebff80e2 	bl	10b0e0 <sys_arch_assert>
  12ad54:	e3e0300f 	mvn	r3, #15
  12ad58:	ea00004b 	b	12ae8c <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12ad5c:	e51b3010 	ldr	r3, [fp, #-16]
  12ad60:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad64:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12ad68:	e51b3010 	ldr	r3, [fp, #-16]
  12ad6c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12ad70:	e3530d09 	cmp	r3, #576	; 0x240
  12ad74:	2a000001 	bcs	12ad80 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12ad78:	e3e03000 	mvn	r3, #0
  12ad7c:	ea000042 	b	12ae8c <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12ad80:	e51b3008 	ldr	r3, [fp, #-8]
  12ad84:	e3530000 	cmp	r3, #0
  12ad88:	1a00000b 	bne	12adbc <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12ad8c:	e3a00040 	mov	r0, #64	; 0x40
  12ad90:	ebff8113 	bl	10b1e4 <mem_malloc>
  12ad94:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12ad98:	e51b3008 	ldr	r3, [fp, #-8]
  12ad9c:	e3530000 	cmp	r3, #0
  12ada0:	1a000001 	bne	12adac <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12ada4:	e3e03000 	mvn	r3, #0
  12ada8:	ea000037 	b	12ae8c <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12adac:	e51b3010 	ldr	r3, [fp, #-16]
  12adb0:	e51b2008 	ldr	r2, [fp, #-8]
  12adb4:	e5832028 	str	r2, [r3, #40]	; 0x28
  12adb8:	ea00001a 	b	12ae28 <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12adbc:	e51b3008 	ldr	r3, [fp, #-8]
  12adc0:	e593300c 	ldr	r3, [r3, #12]
  12adc4:	e3530000 	cmp	r3, #0
  12adc8:	0a000006 	beq	12ade8 <dhcp_start+0x104>
  12adcc:	e3080e20 	movw	r0, #36384	; 0x8e20
  12add0:	e3400014 	movt	r0, #20
  12add4:	ebff60ce 	bl	103114 <rt_kprintf>
  12add8:	e30012f2 	movw	r1, #754	; 0x2f2
  12addc:	e3080d60 	movw	r0, #36192	; 0x8d60
  12ade0:	e3400014 	movt	r0, #20
  12ade4:	ebff80bd 	bl	10b0e0 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12ade8:	e51b3008 	ldr	r3, [fp, #-8]
  12adec:	e5933004 	ldr	r3, [r3, #4]
  12adf0:	e3530000 	cmp	r3, #0
  12adf4:	0a000006 	beq	12ae14 <dhcp_start+0x130>
  12adf8:	e3080e38 	movw	r0, #36408	; 0x8e38
  12adfc:	e3400014 	movt	r0, #20
  12ae00:	ebff60c3 	bl	103114 <rt_kprintf>
  12ae04:	e30012f3 	movw	r1, #755	; 0x2f3
  12ae08:	e3080d60 	movw	r0, #36192	; 0x8d60
  12ae0c:	e3400014 	movt	r0, #20
  12ae10:	ebff80b2 	bl	10b0e0 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12ae14:	e51b3008 	ldr	r3, [fp, #-8]
  12ae18:	e5d33008 	ldrb	r3, [r3, #8]
  12ae1c:	e3530000 	cmp	r3, #0
  12ae20:	0a000000 	beq	12ae28 <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12ae24:	ebfffcb7 	bl	12a108 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ae28:	e3a02040 	mov	r2, #64	; 0x40
  12ae2c:	e3a01000 	mov	r1, #0
  12ae30:	e51b0008 	ldr	r0, [fp, #-8]
  12ae34:	eb00590a 	bl	141264 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ae38:	ebfffc66 	bl	129fd8 <dhcp_inc_pcb_refcount>
  12ae3c:	e1a03000 	mov	r3, r0
  12ae40:	e3530000 	cmp	r3, #0
  12ae44:	0a000001 	beq	12ae50 <dhcp_start+0x16c>
    return ERR_MEM;
  12ae48:	e3e03000 	mvn	r3, #0
  12ae4c:	ea00000e 	b	12ae8c <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12ae50:	e51b3008 	ldr	r3, [fp, #-8]
  12ae54:	e3a02001 	mov	r2, #1
  12ae58:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12ae5c:	e51b0010 	ldr	r0, [fp, #-16]
  12ae60:	eb000103 	bl	12b274 <dhcp_discover>
  12ae64:	e1a03000 	mov	r3, r0
  12ae68:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12ae6c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12ae70:	e3530000 	cmp	r3, #0
  12ae74:	0a000003 	beq	12ae88 <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12ae78:	e51b0010 	ldr	r0, [fp, #-16]
  12ae7c:	eb000410 	bl	12bec4 <dhcp_stop>
    return ERR_MEM;
  12ae80:	e3e03000 	mvn	r3, #0
  12ae84:	ea000000 	b	12ae8c <dhcp_start+0x1a8>
  }
  return result;
  12ae88:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12ae8c:	e1a00003 	mov	r0, r3
  12ae90:	e24bd004 	sub	sp, fp, #4
  12ae94:	e8bd8800 	pop	{fp, pc}

0012ae98 <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12ae98:	e92d4800 	push	{fp, lr}
  12ae9c:	e28db004 	add	fp, sp, #4
  12aea0:	e24dd058 	sub	sp, sp, #88	; 0x58
  12aea4:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12aea8:	e3a03000 	mov	r3, #0
  12aeac:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12aeb0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12aeb4:	e3530000 	cmp	r3, #0
  12aeb8:	1a000007 	bne	12aedc <dhcp_inform+0x44>
  12aebc:	e3080db8 	movw	r0, #36280	; 0x8db8
  12aec0:	e3400014 	movt	r0, #20
  12aec4:	ebff6092 	bl	103114 <rt_kprintf>
  12aec8:	e3001329 	movw	r1, #809	; 0x329
  12aecc:	e3080d60 	movw	r0, #36192	; 0x8d60
  12aed0:	e3400014 	movt	r0, #20
  12aed4:	ebff8081 	bl	10b0e0 <sys_arch_assert>
  12aed8:	ea00003b 	b	12afcc <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12aedc:	ebfffc3d 	bl	129fd8 <dhcp_inc_pcb_refcount>
  12aee0:	e1a03000 	mov	r3, r0
  12aee4:	e3530000 	cmp	r3, #0
  12aee8:	1a000036 	bne	12afc8 <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12aeec:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aef0:	e3a02040 	mov	r2, #64	; 0x40
  12aef4:	e3a01000 	mov	r1, #0
  12aef8:	e1a00003 	mov	r0, r3
  12aefc:	eb0058d8 	bl	141264 <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12af00:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af04:	e3a01007 	mov	r1, #7
  12af08:	e1a00003 	mov	r0, r3
  12af0c:	eb000419 	bl	12bf78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12af10:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af14:	e3a02008 	mov	r2, #8
  12af18:	e1a01003 	mov	r1, r3
  12af1c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12af20:	eb000844 	bl	12d038 <dhcp_create_msg>
  12af24:	e1a03000 	mov	r3, r0
  12af28:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12af2c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12af30:	e3530000 	cmp	r3, #0
  12af34:	1a000021 	bne	12afc0 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12af38:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af3c:	e3a02002 	mov	r2, #2
  12af40:	e3a01039 	mov	r1, #57	; 0x39
  12af44:	e1a00003 	mov	r0, r3
  12af48:	eb000422 	bl	12bfd8 <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12af4c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12af50:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12af54:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af58:	e1a01002 	mov	r1, r2
  12af5c:	e1a00003 	mov	r0, r3
  12af60:	eb00046b 	bl	12c114 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12af64:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af68:	e1a00003 	mov	r0, r3
  12af6c:	eb00099e 	bl	12d5ec <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12af70:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12af74:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12af78:	e28330f0 	add	r3, r3, #240	; 0xf0
  12af7c:	e6ff3073 	uxth	r3, r3
  12af80:	e1a01003 	mov	r1, r3
  12af84:	e1a00002 	mov	r0, r2
  12af88:	ebffbe7b 	bl	11a97c <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12af8c:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12af90:	e3403014 	movt	r3, #20
  12af94:	e5930000 	ldr	r0, [r3]
  12af98:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12af9c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12afa0:	e58d3000 	str	r3, [sp]
  12afa4:	e3a03043 	mov	r3, #67	; 0x43
  12afa8:	e30928fc 	movw	r2, #39164	; 0x98fc
  12afac:	e3402014 	movt	r2, #20
  12afb0:	ebfff49a 	bl	128220 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12afb4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12afb8:	e1a00003 	mov	r0, r3
  12afbc:	eb000955 	bl	12d518 <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12afc0:	ebfffc50 	bl	12a108 <dhcp_dec_pcb_refcount>
  12afc4:	ea000000 	b	12afcc <dhcp_inform+0x134>
    return;
  12afc8:	e320f000 	nop	{0}
}
  12afcc:	e24bd004 	sub	sp, fp, #4
  12afd0:	e8bd8800 	pop	{fp, pc}

0012afd4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12afd4:	e92d4800 	push	{fp, lr}
  12afd8:	e28db004 	add	fp, sp, #4
  12afdc:	e24dd010 	sub	sp, sp, #16
  12afe0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12afe4:	e51b3010 	ldr	r3, [fp, #-16]
  12afe8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12afec:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12aff0:	e51b3008 	ldr	r3, [fp, #-8]
  12aff4:	e3530000 	cmp	r3, #0
  12aff8:	0a00001c 	beq	12b070 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12affc:	e51b3008 	ldr	r3, [fp, #-8]
  12b000:	e5d33009 	ldrb	r3, [r3, #9]
  12b004:	e353000a 	cmp	r3, #10
  12b008:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12b00c:	ea000010 	b	12b054 <dhcp_network_changed+0x80>
  12b010:	0012b078 	.word	0x0012b078
  12b014:	0012b054 	.word	0x0012b054
  12b018:	0012b054 	.word	0x0012b054
  12b01c:	0012b03c 	.word	0x0012b03c
  12b020:	0012b03c 	.word	0x0012b03c
  12b024:	0012b03c 	.word	0x0012b03c
  12b028:	0012b054 	.word	0x0012b054
  12b02c:	0012b054 	.word	0x0012b054
  12b030:	0012b054 	.word	0x0012b054
  12b034:	0012b054 	.word	0x0012b054
  12b038:	0012b03c 	.word	0x0012b03c
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12b03c:	e51b3008 	ldr	r3, [fp, #-8]
  12b040:	e3a02000 	mov	r2, #0
  12b044:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12b048:	e51b0010 	ldr	r0, [fp, #-16]
  12b04c:	eb0002a7 	bl	12baf0 <dhcp_reboot>
    break;
  12b050:	ea000009 	b	12b07c <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12b054:	e51b3008 	ldr	r3, [fp, #-8]
  12b058:	e3a02000 	mov	r2, #0
  12b05c:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12b060:	e51b0010 	ldr	r0, [fp, #-16]
  12b064:	eb000082 	bl	12b274 <dhcp_discover>
    break;
  12b068:	e320f000 	nop	{0}
  12b06c:	ea000002 	b	12b07c <dhcp_network_changed+0xa8>
    return;
  12b070:	e320f000 	nop	{0}
  12b074:	ea000000 	b	12b07c <dhcp_network_changed+0xa8>
    break;
  12b078:	e320f000 	nop	{0}
  }
}
  12b07c:	e24bd004 	sub	sp, fp, #4
  12b080:	e8bd8800 	pop	{fp, pc}

0012b084 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12b084:	e92d4800 	push	{fp, lr}
  12b088:	e28db004 	add	fp, sp, #4
  12b08c:	e24dd010 	sub	sp, sp, #16
  12b090:	e50b0010 	str	r0, [fp, #-16]
  12b094:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12b098:	e51b3010 	ldr	r3, [fp, #-16]
  12b09c:	e3530000 	cmp	r3, #0
  12b0a0:	1a000007 	bne	12b0c4 <dhcp_arp_reply+0x40>
  12b0a4:	e3080db8 	movw	r0, #36280	; 0x8db8
  12b0a8:	e3400014 	movt	r0, #20
  12b0ac:	ebff6018 	bl	103114 <rt_kprintf>
  12b0b0:	e300137d 	movw	r1, #893	; 0x37d
  12b0b4:	e3080d60 	movw	r0, #36192	; 0x8d60
  12b0b8:	e3400014 	movt	r0, #20
  12b0bc:	ebff8007 	bl	10b0e0 <sys_arch_assert>
  12b0c0:	ea000011 	b	12b10c <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12b0c4:	e51b3010 	ldr	r3, [fp, #-16]
  12b0c8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b0cc:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12b0d0:	e51b3008 	ldr	r3, [fp, #-8]
  12b0d4:	e3530000 	cmp	r3, #0
  12b0d8:	0a00000b 	beq	12b10c <dhcp_arp_reply+0x88>
  12b0dc:	e51b3008 	ldr	r3, [fp, #-8]
  12b0e0:	e5d33009 	ldrb	r3, [r3, #9]
  12b0e4:	e3530008 	cmp	r3, #8
  12b0e8:	1a000007 	bne	12b10c <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12b0ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b0f0:	e5932000 	ldr	r2, [r3]
  12b0f4:	e51b3008 	ldr	r3, [fp, #-8]
  12b0f8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b0fc:	e1520003 	cmp	r2, r3
  12b100:	1a000001 	bne	12b10c <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12b104:	e51b0010 	ldr	r0, [fp, #-16]
  12b108:	eb000001 	bl	12b114 <dhcp_decline>
    }
  }
}
  12b10c:	e24bd004 	sub	sp, fp, #4
  12b110:	e8bd8800 	pop	{fp, pc}

0012b114 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12b114:	e92d4800 	push	{fp, lr}
  12b118:	e28db004 	add	fp, sp, #4
  12b11c:	e24dd018 	sub	sp, sp, #24
  12b120:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b124:	e51b3010 	ldr	r3, [fp, #-16]
  12b128:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b12c:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12b130:	e3a03000 	mov	r3, #0
  12b134:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12b138:	e3a0100c 	mov	r1, #12
  12b13c:	e51b0008 	ldr	r0, [fp, #-8]
  12b140:	eb00038c 	bl	12bf78 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12b144:	e3a02004 	mov	r2, #4
  12b148:	e51b1008 	ldr	r1, [fp, #-8]
  12b14c:	e51b0010 	ldr	r0, [fp, #-16]
  12b150:	eb0007b8 	bl	12d038 <dhcp_create_msg>
  12b154:	e1a03000 	mov	r3, r0
  12b158:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12b15c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12b160:	e3530000 	cmp	r3, #0
  12b164:	1a000026 	bne	12b204 <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b168:	e3a02004 	mov	r2, #4
  12b16c:	e3a01032 	mov	r1, #50	; 0x32
  12b170:	e51b0008 	ldr	r0, [fp, #-8]
  12b174:	eb000397 	bl	12bfd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b178:	e51b3008 	ldr	r3, [fp, #-8]
  12b17c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b180:	e1a00003 	mov	r0, r3
  12b184:	ebffad1a 	bl	1165f4 <lwip_htonl>
  12b188:	e1a03000 	mov	r3, r0
  12b18c:	e1a01003 	mov	r1, r3
  12b190:	e51b0008 	ldr	r0, [fp, #-8]
  12b194:	eb00040f 	bl	12c1d8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12b198:	e51b0008 	ldr	r0, [fp, #-8]
  12b19c:	eb000912 	bl	12d5ec <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b1a0:	e51b3008 	ldr	r3, [fp, #-8]
  12b1a4:	e593200c 	ldr	r2, [r3, #12]
  12b1a8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1ac:	e1d331b4 	ldrh	r3, [r3, #20]
  12b1b0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b1b4:	e6ff3073 	uxth	r3, r3
  12b1b8:	e1a01003 	mov	r1, r3
  12b1bc:	e1a00002 	mov	r0, r2
  12b1c0:	ebffbded 	bl	11a97c <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b1c4:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12b1c8:	e3403014 	movt	r3, #20
  12b1cc:	e5930000 	ldr	r0, [r3]
  12b1d0:	e51b3008 	ldr	r3, [fp, #-8]
  12b1d4:	e593100c 	ldr	r1, [r3, #12]
  12b1d8:	e30938f8 	movw	r3, #39160	; 0x98f8
  12b1dc:	e3403014 	movt	r3, #20
  12b1e0:	e58d3004 	str	r3, [sp, #4]
  12b1e4:	e51b3010 	ldr	r3, [fp, #-16]
  12b1e8:	e58d3000 	str	r3, [sp]
  12b1ec:	e3a03043 	mov	r3, #67	; 0x43
  12b1f0:	e30928fc 	movw	r2, #39164	; 0x98fc
  12b1f4:	e3402014 	movt	r2, #20
  12b1f8:	ebfff440 	bl	128300 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12b1fc:	e51b0008 	ldr	r0, [fp, #-8]
  12b200:	eb0008c4 	bl	12d518 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b204:	e51b3008 	ldr	r3, [fp, #-8]
  12b208:	e5d3300a 	ldrb	r3, [r3, #10]
  12b20c:	e35300ff 	cmp	r3, #255	; 0xff
  12b210:	0a000005 	beq	12b22c <dhcp_decline+0x118>
    dhcp->tries++;
  12b214:	e51b3008 	ldr	r3, [fp, #-8]
  12b218:	e5d3300a 	ldrb	r3, [r3, #10]
  12b21c:	e2833001 	add	r3, r3, #1
  12b220:	e6ef2073 	uxtb	r2, r3
  12b224:	e51b3008 	ldr	r3, [fp, #-8]
  12b228:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12b22c:	e3023710 	movw	r3, #10000	; 0x2710
  12b230:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b234:	e15b30bc 	ldrh	r3, [fp, #-12]
  12b238:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b23c:	e2833003 	add	r3, r3, #3
  12b240:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b244:	e3412062 	movt	r2, #4194	; 0x1062
  12b248:	e0c10293 	smull	r0, r1, r3, r2
  12b24c:	e1a022c1 	asr	r2, r1, #5
  12b250:	e1a03fc3 	asr	r3, r3, #31
  12b254:	e0423003 	sub	r3, r2, r3
  12b258:	e6ff2073 	uxth	r2, r3
  12b25c:	e51b3008 	ldr	r3, [fp, #-8]
  12b260:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b264:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12b268:	e1a00003 	mov	r0, r3
  12b26c:	e24bd004 	sub	sp, fp, #4
  12b270:	e8bd8800 	pop	{fp, pc}

0012b274 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12b274:	e92d4800 	push	{fp, lr}
  12b278:	e28db004 	add	fp, sp, #4
  12b27c:	e24dd020 	sub	sp, sp, #32
  12b280:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b288:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b28c:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12b290:	e3a03000 	mov	r3, #0
  12b294:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12b298:	e51b300c 	ldr	r3, [fp, #-12]
  12b29c:	e3a02000 	mov	r2, #0
  12b2a0:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12b2a4:	e3a01006 	mov	r1, #6
  12b2a8:	e51b000c 	ldr	r0, [fp, #-12]
  12b2ac:	eb000331 	bl	12bf78 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12b2b0:	e3a02001 	mov	r2, #1
  12b2b4:	e51b100c 	ldr	r1, [fp, #-12]
  12b2b8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b2bc:	eb00075d 	bl	12d038 <dhcp_create_msg>
  12b2c0:	e1a03000 	mov	r3, r0
  12b2c4:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b2c8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b2cc:	e3530000 	cmp	r3, #0
  12b2d0:	1a000037 	bne	12b3b4 <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b2d4:	e3a02002 	mov	r2, #2
  12b2d8:	e3a01039 	mov	r1, #57	; 0x39
  12b2dc:	e51b000c 	ldr	r0, [fp, #-12]
  12b2e0:	eb00033c 	bl	12bfd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b2e8:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b2ec:	e1a01003 	mov	r1, r3
  12b2f0:	e51b000c 	ldr	r0, [fp, #-12]
  12b2f4:	eb000386 	bl	12c114 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b2f8:	e3a02004 	mov	r2, #4
  12b2fc:	e3a01037 	mov	r1, #55	; 0x37
  12b300:	e51b000c 	ldr	r0, [fp, #-12]
  12b304:	eb000333 	bl	12bfd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b308:	e3a03000 	mov	r3, #0
  12b30c:	e54b3005 	strb	r3, [fp, #-5]
  12b310:	ea000009 	b	12b33c <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b314:	e55b2005 	ldrb	r2, [fp, #-5]
  12b318:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b31c:	e3403014 	movt	r3, #20
  12b320:	e7d33002 	ldrb	r3, [r3, r2]
  12b324:	e1a01003 	mov	r1, r3
  12b328:	e51b000c 	ldr	r0, [fp, #-12]
  12b32c:	eb000359 	bl	12c098 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b330:	e55b3005 	ldrb	r3, [fp, #-5]
  12b334:	e2833001 	add	r3, r3, #1
  12b338:	e54b3005 	strb	r3, [fp, #-5]
  12b33c:	e55b3005 	ldrb	r3, [fp, #-5]
  12b340:	e3530003 	cmp	r3, #3
  12b344:	9afffff2 	bls	12b314 <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12b348:	e51b000c 	ldr	r0, [fp, #-12]
  12b34c:	eb0008a6 	bl	12d5ec <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b350:	e51b300c 	ldr	r3, [fp, #-12]
  12b354:	e593200c 	ldr	r2, [r3, #12]
  12b358:	e51b300c 	ldr	r3, [fp, #-12]
  12b35c:	e1d331b4 	ldrh	r3, [r3, #20]
  12b360:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b364:	e6ff3073 	uxth	r3, r3
  12b368:	e1a01003 	mov	r1, r3
  12b36c:	e1a00002 	mov	r0, r2
  12b370:	ebffbd81 	bl	11a97c <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b374:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12b378:	e3403014 	movt	r3, #20
  12b37c:	e5930000 	ldr	r0, [r3]
  12b380:	e51b300c 	ldr	r3, [fp, #-12]
  12b384:	e593100c 	ldr	r1, [r3, #12]
  12b388:	e30938f8 	movw	r3, #39160	; 0x98f8
  12b38c:	e3403014 	movt	r3, #20
  12b390:	e58d3004 	str	r3, [sp, #4]
  12b394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b398:	e58d3000 	str	r3, [sp]
  12b39c:	e3a03043 	mov	r3, #67	; 0x43
  12b3a0:	e30928fc 	movw	r2, #39164	; 0x98fc
  12b3a4:	e3402014 	movt	r2, #20
  12b3a8:	ebfff3d4 	bl	128300 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b3ac:	e51b000c 	ldr	r0, [fp, #-12]
  12b3b0:	eb000858 	bl	12d518 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b3b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b3b8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3bc:	e35300ff 	cmp	r3, #255	; 0xff
  12b3c0:	0a000005 	beq	12b3dc <dhcp_discover+0x168>
    dhcp->tries++;
  12b3c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b3c8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3cc:	e2833001 	add	r3, r3, #1
  12b3d0:	e6ef2073 	uxtb	r2, r3
  12b3d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b3d8:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b3dc:	e51b300c 	ldr	r3, [fp, #-12]
  12b3e0:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3e4:	e3530005 	cmp	r3, #5
  12b3e8:	8a000006 	bhi	12b408 <dhcp_discover+0x194>
  12b3ec:	e51b300c 	ldr	r3, [fp, #-12]
  12b3f0:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3f4:	e1a02003 	mov	r2, r3
  12b3f8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b3fc:	e1a03213 	lsl	r3, r3, r2
  12b400:	e6ff3073 	uxth	r3, r3
  12b404:	ea000000 	b	12b40c <dhcp_discover+0x198>
  12b408:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b40c:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b410:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b414:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b418:	e2833003 	add	r3, r3, #3
  12b41c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b420:	e3412062 	movt	r2, #4194	; 0x1062
  12b424:	e0c10293 	smull	r0, r1, r3, r2
  12b428:	e1a022c1 	asr	r2, r1, #5
  12b42c:	e1a03fc3 	asr	r3, r3, #31
  12b430:	e0423003 	sub	r3, r2, r3
  12b434:	e6ff2073 	uxth	r2, r3
  12b438:	e51b300c 	ldr	r3, [fp, #-12]
  12b43c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b440:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b444:	e1a00003 	mov	r0, r3
  12b448:	e24bd004 	sub	sp, fp, #4
  12b44c:	e8bd8800 	pop	{fp, pc}

0012b450 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b450:	e92d4800 	push	{fp, lr}
  12b454:	e28db004 	add	fp, sp, #4
  12b458:	e24dd020 	sub	sp, sp, #32
  12b45c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b460:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b464:	e3530000 	cmp	r3, #0
  12b468:	1a000007 	bne	12b48c <dhcp_bind+0x3c>
  12b46c:	e3080e4c 	movw	r0, #36428	; 0x8e4c
  12b470:	e3400014 	movt	r0, #20
  12b474:	ebff5f26 	bl	103114 <rt_kprintf>
  12b478:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b47c:	e3080d60 	movw	r0, #36192	; 0x8d60
  12b480:	e3400014 	movt	r0, #20
  12b484:	ebff7f15 	bl	10b0e0 <sys_arch_assert>
  12b488:	ea0000aa 	b	12b738 <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b48c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b490:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b494:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b498:	e51b300c 	ldr	r3, [fp, #-12]
  12b49c:	e3530000 	cmp	r3, #0
  12b4a0:	1a000007 	bne	12b4c4 <dhcp_bind+0x74>
  12b4a4:	e3080e68 	movw	r0, #36456	; 0x8e68
  12b4a8:	e3400014 	movt	r0, #20
  12b4ac:	ebff5f18 	bl	103114 <rt_kprintf>
  12b4b0:	e3001401 	movw	r1, #1025	; 0x401
  12b4b4:	e3080d60 	movw	r0, #36192	; 0x8d60
  12b4b8:	e3400014 	movt	r0, #20
  12b4bc:	ebff7f07 	bl	10b0e0 <sys_arch_assert>
  12b4c0:	ea00009c 	b	12b738 <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b4c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4c8:	e3a02000 	mov	r2, #0
  12b4cc:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b4d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b4d4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4d8:	e3730001 	cmn	r3, #1
  12b4dc:	0a000017 	beq	12b540 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b4e0:	e51b300c 	ldr	r3, [fp, #-12]
  12b4e4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4e8:	e283201e 	add	r2, r3, #30
  12b4ec:	e3083889 	movw	r3, #34953	; 0x8889
  12b4f0:	e3483888 	movt	r3, #34952	; 0x8888
  12b4f4:	e0832392 	umull	r2, r3, r2, r3
  12b4f8:	e1a032a3 	lsr	r3, r3, #5
  12b4fc:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b500:	e51b3008 	ldr	r3, [fp, #-8]
  12b504:	e3530801 	cmp	r3, #65536	; 0x10000
  12b508:	3a000001 	bcc	12b514 <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b50c:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b510:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b514:	e51b3008 	ldr	r3, [fp, #-8]
  12b518:	e6ff2073 	uxth	r2, r3
  12b51c:	e51b300c 	ldr	r3, [fp, #-12]
  12b520:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b524:	e51b300c 	ldr	r3, [fp, #-12]
  12b528:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b52c:	e3530000 	cmp	r3, #0
  12b530:	1a000002 	bne	12b540 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b534:	e51b300c 	ldr	r3, [fp, #-12]
  12b538:	e3a02001 	mov	r2, #1
  12b53c:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b540:	e51b300c 	ldr	r3, [fp, #-12]
  12b544:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b548:	e3730001 	cmn	r3, #1
  12b54c:	0a00001b 	beq	12b5c0 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b550:	e51b300c 	ldr	r3, [fp, #-12]
  12b554:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b558:	e283201e 	add	r2, r3, #30
  12b55c:	e3083889 	movw	r3, #34953	; 0x8889
  12b560:	e3483888 	movt	r3, #34952	; 0x8888
  12b564:	e0832392 	umull	r2, r3, r2, r3
  12b568:	e1a032a3 	lsr	r3, r3, #5
  12b56c:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b570:	e51b3008 	ldr	r3, [fp, #-8]
  12b574:	e3530801 	cmp	r3, #65536	; 0x10000
  12b578:	3a000001 	bcc	12b584 <dhcp_bind+0x134>
      timeout = 0xffff;
  12b57c:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b580:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b584:	e51b3008 	ldr	r3, [fp, #-8]
  12b588:	e6ff2073 	uxth	r2, r3
  12b58c:	e51b300c 	ldr	r3, [fp, #-12]
  12b590:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b594:	e51b300c 	ldr	r3, [fp, #-12]
  12b598:	e1d331b8 	ldrh	r3, [r3, #24]
  12b59c:	e3530000 	cmp	r3, #0
  12b5a0:	1a000002 	bne	12b5b0 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b5a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5a8:	e3a02001 	mov	r2, #1
  12b5ac:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b5b0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5b4:	e1d321b8 	ldrh	r2, [r3, #24]
  12b5b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5bc:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b5c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b5c8:	e3730001 	cmn	r3, #1
  12b5cc:	0a00001b 	beq	12b640 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b5d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5d4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b5d8:	e283201e 	add	r2, r3, #30
  12b5dc:	e3083889 	movw	r3, #34953	; 0x8889
  12b5e0:	e3483888 	movt	r3, #34952	; 0x8888
  12b5e4:	e0832392 	umull	r2, r3, r2, r3
  12b5e8:	e1a032a3 	lsr	r3, r3, #5
  12b5ec:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b5f0:	e51b3008 	ldr	r3, [fp, #-8]
  12b5f4:	e3530801 	cmp	r3, #65536	; 0x10000
  12b5f8:	3a000001 	bcc	12b604 <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b5fc:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b600:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b604:	e51b3008 	ldr	r3, [fp, #-8]
  12b608:	e6ff2073 	uxth	r2, r3
  12b60c:	e51b300c 	ldr	r3, [fp, #-12]
  12b610:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b614:	e51b300c 	ldr	r3, [fp, #-12]
  12b618:	e1d331ba 	ldrh	r3, [r3, #26]
  12b61c:	e3530000 	cmp	r3, #0
  12b620:	1a000002 	bne	12b630 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b624:	e51b300c 	ldr	r3, [fp, #-12]
  12b628:	e3a02001 	mov	r2, #1
  12b62c:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b630:	e51b300c 	ldr	r3, [fp, #-12]
  12b634:	e1d321ba 	ldrh	r2, [r3, #26]
  12b638:	e51b300c 	ldr	r3, [fp, #-12]
  12b63c:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b640:	e51b300c 	ldr	r3, [fp, #-12]
  12b644:	e1d321b8 	ldrh	r2, [r3, #24]
  12b648:	e51b300c 	ldr	r3, [fp, #-12]
  12b64c:	e1d331ba 	ldrh	r3, [r3, #26]
  12b650:	e1520003 	cmp	r2, r3
  12b654:	3a000006 	bcc	12b674 <dhcp_bind+0x224>
  12b658:	e51b300c 	ldr	r3, [fp, #-12]
  12b65c:	e1d331ba 	ldrh	r3, [r3, #26]
  12b660:	e3530000 	cmp	r3, #0
  12b664:	0a000002 	beq	12b674 <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b668:	e51b300c 	ldr	r3, [fp, #-12]
  12b66c:	e3a02000 	mov	r2, #0
  12b670:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b674:	e51b300c 	ldr	r3, [fp, #-12]
  12b678:	e5d3300b 	ldrb	r3, [r3, #11]
  12b67c:	e3530000 	cmp	r3, #0
  12b680:	0a000003 	beq	12b694 <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b684:	e51b300c 	ldr	r3, [fp, #-12]
  12b688:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b68c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b690:	ea000011 	b	12b6dc <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b694:	e51b300c 	ldr	r3, [fp, #-12]
  12b698:	e2833028 	add	r3, r3, #40	; 0x28
  12b69c:	e5d33000 	ldrb	r3, [r3]
  12b6a0:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b6a4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b6a8:	e3530000 	cmp	r3, #0
  12b6ac:	ba000002 	blt	12b6bc <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b6b0:	e3a030ff 	mov	r3, #255	; 0xff
  12b6b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6b8:	ea000007 	b	12b6dc <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b6bc:	e55b300d 	ldrb	r3, [fp, #-13]
  12b6c0:	e35300bf 	cmp	r3, #191	; 0xbf
  12b6c4:	9a000002 	bls	12b6d4 <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b6c8:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b6cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6d0:	ea000001 	b	12b6dc <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b6d4:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b6d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b6dc:	e51b300c 	ldr	r3, [fp, #-12]
  12b6e0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b6e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b6e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b6ec:	e3530000 	cmp	r3, #0
  12b6f0:	1a000007 	bne	12b714 <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b6f4:	e51b300c 	ldr	r3, [fp, #-12]
  12b6f8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b6fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b700:	e0033002 	and	r3, r3, r2
  12b704:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b70c:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b710:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b714:	e3a0100a 	mov	r1, #10
  12b718:	e51b000c 	ldr	r0, [fp, #-12]
  12b71c:	eb000215 	bl	12bf78 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b720:	e51b300c 	ldr	r3, [fp, #-12]
  12b724:	e2831028 	add	r1, r3, #40	; 0x28
  12b728:	e24b3018 	sub	r3, fp, #24
  12b72c:	e24b2014 	sub	r2, fp, #20
  12b730:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b734:	ebffb76b 	bl	1194e8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b738:	e24bd004 	sub	sp, fp, #4
  12b73c:	e8bd8800 	pop	{fp, pc}

0012b740 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b740:	e92d4800 	push	{fp, lr}
  12b744:	e28db004 	add	fp, sp, #4
  12b748:	e24dd020 	sub	sp, sp, #32
  12b74c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b754:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b758:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b75c:	e3a01005 	mov	r1, #5
  12b760:	e51b000c 	ldr	r0, [fp, #-12]
  12b764:	eb000203 	bl	12bf78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b768:	e3a02003 	mov	r2, #3
  12b76c:	e51b100c 	ldr	r1, [fp, #-12]
  12b770:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b774:	eb00062f 	bl	12d038 <dhcp_create_msg>
  12b778:	e1a03000 	mov	r3, r0
  12b77c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b780:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b784:	e3530000 	cmp	r3, #0
  12b788:	1a000037 	bne	12b86c <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b78c:	e3a02002 	mov	r2, #2
  12b790:	e3a01039 	mov	r1, #57	; 0x39
  12b794:	e51b000c 	ldr	r0, [fp, #-12]
  12b798:	eb00020e 	bl	12bfd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b79c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b7a0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b7a4:	e1a01003 	mov	r1, r3
  12b7a8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7ac:	eb000258 	bl	12c114 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b7b0:	e3a02004 	mov	r2, #4
  12b7b4:	e3a01037 	mov	r1, #55	; 0x37
  12b7b8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7bc:	eb000205 	bl	12bfd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b7c0:	e3a03000 	mov	r3, #0
  12b7c4:	e54b3005 	strb	r3, [fp, #-5]
  12b7c8:	ea000009 	b	12b7f4 <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b7cc:	e55b2005 	ldrb	r2, [fp, #-5]
  12b7d0:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b7d4:	e3403014 	movt	r3, #20
  12b7d8:	e7d33002 	ldrb	r3, [r3, r2]
  12b7dc:	e1a01003 	mov	r1, r3
  12b7e0:	e51b000c 	ldr	r0, [fp, #-12]
  12b7e4:	eb00022b 	bl	12c098 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b7e8:	e55b3005 	ldrb	r3, [fp, #-5]
  12b7ec:	e2833001 	add	r3, r3, #1
  12b7f0:	e54b3005 	strb	r3, [fp, #-5]
  12b7f4:	e55b3005 	ldrb	r3, [fp, #-5]
  12b7f8:	e3530003 	cmp	r3, #3
  12b7fc:	9afffff2 	bls	12b7cc <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b800:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b804:	e51b000c 	ldr	r0, [fp, #-12]
  12b808:	eb0002bd 	bl	12c304 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b80c:	e51b000c 	ldr	r0, [fp, #-12]
  12b810:	eb000775 	bl	12d5ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b814:	e51b300c 	ldr	r3, [fp, #-12]
  12b818:	e593200c 	ldr	r2, [r3, #12]
  12b81c:	e51b300c 	ldr	r3, [fp, #-12]
  12b820:	e1d331b4 	ldrh	r3, [r3, #20]
  12b824:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b828:	e6ff3073 	uxth	r3, r3
  12b82c:	e1a01003 	mov	r1, r3
  12b830:	e1a00002 	mov	r0, r2
  12b834:	ebffbc50 	bl	11a97c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b838:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12b83c:	e3403014 	movt	r3, #20
  12b840:	e5930000 	ldr	r0, [r3]
  12b844:	e51b300c 	ldr	r3, [fp, #-12]
  12b848:	e593100c 	ldr	r1, [r3, #12]
  12b84c:	e51b300c 	ldr	r3, [fp, #-12]
  12b850:	e2832024 	add	r2, r3, #36	; 0x24
  12b854:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b858:	e58d3000 	str	r3, [sp]
  12b85c:	e3a03043 	mov	r3, #67	; 0x43
  12b860:	ebfff26e 	bl	128220 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b864:	e51b000c 	ldr	r0, [fp, #-12]
  12b868:	eb00072a 	bl	12d518 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b86c:	e51b300c 	ldr	r3, [fp, #-12]
  12b870:	e5d3300a 	ldrb	r3, [r3, #10]
  12b874:	e35300ff 	cmp	r3, #255	; 0xff
  12b878:	0a000005 	beq	12b894 <dhcp_renew+0x154>
    dhcp->tries++;
  12b87c:	e51b300c 	ldr	r3, [fp, #-12]
  12b880:	e5d3300a 	ldrb	r3, [r3, #10]
  12b884:	e2833001 	add	r3, r3, #1
  12b888:	e6ef2073 	uxtb	r2, r3
  12b88c:	e51b300c 	ldr	r3, [fp, #-12]
  12b890:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b894:	e51b300c 	ldr	r3, [fp, #-12]
  12b898:	e5d3300a 	ldrb	r3, [r3, #10]
  12b89c:	e3530009 	cmp	r3, #9
  12b8a0:	8a00000a 	bhi	12b8d0 <dhcp_renew+0x190>
  12b8a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b8a8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8ac:	e6ff3073 	uxth	r3, r3
  12b8b0:	e1a02003 	mov	r2, r3
  12b8b4:	e1a02282 	lsl	r2, r2, #5
  12b8b8:	e0422003 	sub	r2, r2, r3
  12b8bc:	e1a02102 	lsl	r2, r2, #2
  12b8c0:	e0823003 	add	r3, r2, r3
  12b8c4:	e1a03203 	lsl	r3, r3, #4
  12b8c8:	e6ff3073 	uxth	r3, r3
  12b8cc:	ea000000 	b	12b8d4 <dhcp_renew+0x194>
  12b8d0:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b8d4:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b8d8:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b8dc:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b8e0:	e2833003 	add	r3, r3, #3
  12b8e4:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b8e8:	e3412062 	movt	r2, #4194	; 0x1062
  12b8ec:	e0c10293 	smull	r0, r1, r3, r2
  12b8f0:	e1a022c1 	asr	r2, r1, #5
  12b8f4:	e1a03fc3 	asr	r3, r3, #31
  12b8f8:	e0423003 	sub	r3, r2, r3
  12b8fc:	e6ff2073 	uxth	r2, r3
  12b900:	e51b300c 	ldr	r3, [fp, #-12]
  12b904:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b908:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b90c:	e1a00003 	mov	r0, r3
  12b910:	e24bd004 	sub	sp, fp, #4
  12b914:	e8bd8800 	pop	{fp, pc}

0012b918 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b918:	e92d4800 	push	{fp, lr}
  12b91c:	e28db004 	add	fp, sp, #4
  12b920:	e24dd020 	sub	sp, sp, #32
  12b924:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b928:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b92c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b930:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b934:	e3a01004 	mov	r1, #4
  12b938:	e51b000c 	ldr	r0, [fp, #-12]
  12b93c:	eb00018d 	bl	12bf78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b940:	e3a02003 	mov	r2, #3
  12b944:	e51b100c 	ldr	r1, [fp, #-12]
  12b948:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b94c:	eb0005b9 	bl	12d038 <dhcp_create_msg>
  12b950:	e1a03000 	mov	r3, r0
  12b954:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b958:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b95c:	e3530000 	cmp	r3, #0
  12b960:	1a000037 	bne	12ba44 <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b964:	e3a02002 	mov	r2, #2
  12b968:	e3a01039 	mov	r1, #57	; 0x39
  12b96c:	e51b000c 	ldr	r0, [fp, #-12]
  12b970:	eb000198 	bl	12bfd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b978:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b97c:	e1a01003 	mov	r1, r3
  12b980:	e51b000c 	ldr	r0, [fp, #-12]
  12b984:	eb0001e2 	bl	12c114 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b988:	e3a02004 	mov	r2, #4
  12b98c:	e3a01037 	mov	r1, #55	; 0x37
  12b990:	e51b000c 	ldr	r0, [fp, #-12]
  12b994:	eb00018f 	bl	12bfd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b998:	e3a03000 	mov	r3, #0
  12b99c:	e54b3005 	strb	r3, [fp, #-5]
  12b9a0:	ea000009 	b	12b9cc <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b9a4:	e55b2005 	ldrb	r2, [fp, #-5]
  12b9a8:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b9ac:	e3403014 	movt	r3, #20
  12b9b0:	e7d33002 	ldrb	r3, [r3, r2]
  12b9b4:	e1a01003 	mov	r1, r3
  12b9b8:	e51b000c 	ldr	r0, [fp, #-12]
  12b9bc:	eb0001b5 	bl	12c098 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b9c0:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9c4:	e2833001 	add	r3, r3, #1
  12b9c8:	e54b3005 	strb	r3, [fp, #-5]
  12b9cc:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9d0:	e3530003 	cmp	r3, #3
  12b9d4:	9afffff2 	bls	12b9a4 <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b9d8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b9dc:	e51b000c 	ldr	r0, [fp, #-12]
  12b9e0:	eb000247 	bl	12c304 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b9e4:	e51b000c 	ldr	r0, [fp, #-12]
  12b9e8:	eb0006ff 	bl	12d5ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b9ec:	e51b300c 	ldr	r3, [fp, #-12]
  12b9f0:	e593200c 	ldr	r2, [r3, #12]
  12b9f4:	e51b300c 	ldr	r3, [fp, #-12]
  12b9f8:	e1d331b4 	ldrh	r3, [r3, #20]
  12b9fc:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ba00:	e6ff3073 	uxth	r3, r3
  12ba04:	e1a01003 	mov	r1, r3
  12ba08:	e1a00002 	mov	r0, r2
  12ba0c:	ebffbbda 	bl	11a97c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12ba10:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12ba14:	e3403014 	movt	r3, #20
  12ba18:	e5930000 	ldr	r0, [r3]
  12ba1c:	e51b300c 	ldr	r3, [fp, #-12]
  12ba20:	e593100c 	ldr	r1, [r3, #12]
  12ba24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ba28:	e58d3000 	str	r3, [sp]
  12ba2c:	e3a03043 	mov	r3, #67	; 0x43
  12ba30:	e30928fc 	movw	r2, #39164	; 0x98fc
  12ba34:	e3402014 	movt	r2, #20
  12ba38:	ebfff1f8 	bl	128220 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12ba3c:	e51b000c 	ldr	r0, [fp, #-12]
  12ba40:	eb0006b4 	bl	12d518 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12ba44:	e51b300c 	ldr	r3, [fp, #-12]
  12ba48:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba4c:	e35300ff 	cmp	r3, #255	; 0xff
  12ba50:	0a000005 	beq	12ba6c <dhcp_rebind+0x154>
    dhcp->tries++;
  12ba54:	e51b300c 	ldr	r3, [fp, #-12]
  12ba58:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba5c:	e2833001 	add	r3, r3, #1
  12ba60:	e6ef2073 	uxtb	r2, r3
  12ba64:	e51b300c 	ldr	r3, [fp, #-12]
  12ba68:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12ba6c:	e51b300c 	ldr	r3, [fp, #-12]
  12ba70:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba74:	e3530009 	cmp	r3, #9
  12ba78:	8a00000a 	bhi	12baa8 <dhcp_rebind+0x190>
  12ba7c:	e51b300c 	ldr	r3, [fp, #-12]
  12ba80:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba84:	e6ff3073 	uxth	r3, r3
  12ba88:	e1a02003 	mov	r2, r3
  12ba8c:	e1a02282 	lsl	r2, r2, #5
  12ba90:	e0422003 	sub	r2, r2, r3
  12ba94:	e1a02102 	lsl	r2, r2, #2
  12ba98:	e0823003 	add	r3, r2, r3
  12ba9c:	e1a03183 	lsl	r3, r3, #3
  12baa0:	e6ff3073 	uxth	r3, r3
  12baa4:	ea000000 	b	12baac <dhcp_rebind+0x194>
  12baa8:	e3023710 	movw	r3, #10000	; 0x2710
  12baac:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bab0:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bab4:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bab8:	e2833003 	add	r3, r3, #3
  12babc:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bac0:	e3412062 	movt	r2, #4194	; 0x1062
  12bac4:	e0c10293 	smull	r0, r1, r3, r2
  12bac8:	e1a022c1 	asr	r2, r1, #5
  12bacc:	e1a03fc3 	asr	r3, r3, #31
  12bad0:	e0423003 	sub	r3, r2, r3
  12bad4:	e6ff2073 	uxth	r2, r3
  12bad8:	e51b300c 	ldr	r3, [fp, #-12]
  12badc:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bae0:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bae4:	e1a00003 	mov	r0, r3
  12bae8:	e24bd004 	sub	sp, fp, #4
  12baec:	e8bd8800 	pop	{fp, pc}

0012baf0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12baf0:	e92d4800 	push	{fp, lr}
  12baf4:	e28db004 	add	fp, sp, #4
  12baf8:	e24dd020 	sub	sp, sp, #32
  12bafc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bb00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bb04:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb08:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12bb0c:	e3a01003 	mov	r1, #3
  12bb10:	e51b000c 	ldr	r0, [fp, #-12]
  12bb14:	eb000117 	bl	12bf78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12bb18:	e3a02003 	mov	r2, #3
  12bb1c:	e51b100c 	ldr	r1, [fp, #-12]
  12bb20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bb24:	eb000543 	bl	12d038 <dhcp_create_msg>
  12bb28:	e1a03000 	mov	r3, r0
  12bb2c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12bb30:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12bb34:	e3530000 	cmp	r3, #0
  12bb38:	1a00003e 	bne	12bc38 <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12bb3c:	e3a02002 	mov	r2, #2
  12bb40:	e3a01039 	mov	r1, #57	; 0x39
  12bb44:	e51b000c 	ldr	r0, [fp, #-12]
  12bb48:	eb000122 	bl	12bfd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12bb4c:	e3a01d09 	mov	r1, #576	; 0x240
  12bb50:	e51b000c 	ldr	r0, [fp, #-12]
  12bb54:	eb00016e 	bl	12c114 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12bb58:	e3a02004 	mov	r2, #4
  12bb5c:	e3a01032 	mov	r1, #50	; 0x32
  12bb60:	e51b000c 	ldr	r0, [fp, #-12]
  12bb64:	eb00011b 	bl	12bfd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12bb68:	e51b300c 	ldr	r3, [fp, #-12]
  12bb6c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb70:	e1a00003 	mov	r0, r3
  12bb74:	ebffaa9e 	bl	1165f4 <lwip_htonl>
  12bb78:	e1a03000 	mov	r3, r0
  12bb7c:	e1a01003 	mov	r1, r3
  12bb80:	e51b000c 	ldr	r0, [fp, #-12]
  12bb84:	eb000193 	bl	12c1d8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12bb88:	e3a02004 	mov	r2, #4
  12bb8c:	e3a01037 	mov	r1, #55	; 0x37
  12bb90:	e51b000c 	ldr	r0, [fp, #-12]
  12bb94:	eb00010f 	bl	12bfd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bb98:	e3a03000 	mov	r3, #0
  12bb9c:	e54b3005 	strb	r3, [fp, #-5]
  12bba0:	ea000009 	b	12bbcc <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12bba4:	e55b2005 	ldrb	r2, [fp, #-5]
  12bba8:	e30d303c 	movw	r3, #53308	; 0xd03c
  12bbac:	e3403014 	movt	r3, #20
  12bbb0:	e7d33002 	ldrb	r3, [r3, r2]
  12bbb4:	e1a01003 	mov	r1, r3
  12bbb8:	e51b000c 	ldr	r0, [fp, #-12]
  12bbbc:	eb000135 	bl	12c098 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bbc0:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbc4:	e2833001 	add	r3, r3, #1
  12bbc8:	e54b3005 	strb	r3, [fp, #-5]
  12bbcc:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbd0:	e3530003 	cmp	r3, #3
  12bbd4:	9afffff2 	bls	12bba4 <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12bbd8:	e51b000c 	ldr	r0, [fp, #-12]
  12bbdc:	eb000682 	bl	12d5ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bbe0:	e51b300c 	ldr	r3, [fp, #-12]
  12bbe4:	e593200c 	ldr	r2, [r3, #12]
  12bbe8:	e51b300c 	ldr	r3, [fp, #-12]
  12bbec:	e1d331b4 	ldrh	r3, [r3, #20]
  12bbf0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bbf4:	e6ff3073 	uxth	r3, r3
  12bbf8:	e1a01003 	mov	r1, r3
  12bbfc:	e1a00002 	mov	r0, r2
  12bc00:	ebffbb5d 	bl	11a97c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12bc04:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12bc08:	e3403014 	movt	r3, #20
  12bc0c:	e5930000 	ldr	r0, [r3]
  12bc10:	e51b300c 	ldr	r3, [fp, #-12]
  12bc14:	e593100c 	ldr	r1, [r3, #12]
  12bc18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bc1c:	e58d3000 	str	r3, [sp]
  12bc20:	e3a03043 	mov	r3, #67	; 0x43
  12bc24:	e30928fc 	movw	r2, #39164	; 0x98fc
  12bc28:	e3402014 	movt	r2, #20
  12bc2c:	ebfff17b 	bl	128220 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bc30:	e51b000c 	ldr	r0, [fp, #-12]
  12bc34:	eb000637 	bl	12d518 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12bc38:	e51b300c 	ldr	r3, [fp, #-12]
  12bc3c:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc40:	e35300ff 	cmp	r3, #255	; 0xff
  12bc44:	0a000005 	beq	12bc60 <dhcp_reboot+0x170>
    dhcp->tries++;
  12bc48:	e51b300c 	ldr	r3, [fp, #-12]
  12bc4c:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc50:	e2833001 	add	r3, r3, #1
  12bc54:	e6ef2073 	uxtb	r2, r3
  12bc58:	e51b300c 	ldr	r3, [fp, #-12]
  12bc5c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12bc60:	e51b300c 	ldr	r3, [fp, #-12]
  12bc64:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc68:	e3530009 	cmp	r3, #9
  12bc6c:	8a00000a 	bhi	12bc9c <dhcp_reboot+0x1ac>
  12bc70:	e51b300c 	ldr	r3, [fp, #-12]
  12bc74:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc78:	e6ff3073 	uxth	r3, r3
  12bc7c:	e1a02003 	mov	r2, r3
  12bc80:	e1a02282 	lsl	r2, r2, #5
  12bc84:	e0422003 	sub	r2, r2, r3
  12bc88:	e1a02102 	lsl	r2, r2, #2
  12bc8c:	e0823003 	add	r3, r2, r3
  12bc90:	e1a03183 	lsl	r3, r3, #3
  12bc94:	e6ff3073 	uxth	r3, r3
  12bc98:	ea000000 	b	12bca0 <dhcp_reboot+0x1b0>
  12bc9c:	e3023710 	movw	r3, #10000	; 0x2710
  12bca0:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bca4:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bca8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bcac:	e2833003 	add	r3, r3, #3
  12bcb0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bcb4:	e3412062 	movt	r2, #4194	; 0x1062
  12bcb8:	e0c10293 	smull	r0, r1, r3, r2
  12bcbc:	e1a022c1 	asr	r2, r1, #5
  12bcc0:	e1a03fc3 	asr	r3, r3, #31
  12bcc4:	e0423003 	sub	r3, r2, r3
  12bcc8:	e6ff2073 	uxth	r2, r3
  12bccc:	e51b300c 	ldr	r3, [fp, #-12]
  12bcd0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bcd4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bcd8:	e1a00003 	mov	r0, r3
  12bcdc:	e24bd004 	sub	sp, fp, #4
  12bce0:	e8bd8800 	pop	{fp, pc}

0012bce4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12bce4:	e92d4800 	push	{fp, lr}
  12bce8:	e28db004 	add	fp, sp, #4
  12bcec:	e24dd020 	sub	sp, sp, #32
  12bcf0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bcf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bcf8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bcfc:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12bd00:	e51b3008 	ldr	r3, [fp, #-8]
  12bd04:	e3530000 	cmp	r3, #0
  12bd08:	1a000001 	bne	12bd14 <dhcp_release+0x30>
    return ERR_ARG;
  12bd0c:	e3e0300f 	mvn	r3, #15
  12bd10:	ea000068 	b	12beb8 <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12bd14:	e51b3008 	ldr	r3, [fp, #-8]
  12bd18:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12bd1c:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12bd20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bd24:	eb00067b 	bl	12d718 <dhcp_supplied_address>
  12bd28:	e1a03000 	mov	r3, r0
  12bd2c:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bd30:	e3a01000 	mov	r1, #0
  12bd34:	e51b0008 	ldr	r0, [fp, #-8]
  12bd38:	eb00008e 	bl	12bf78 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12bd3c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd40:	e3a02000 	mov	r2, #0
  12bd44:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12bd48:	e51b3008 	ldr	r3, [fp, #-8]
  12bd4c:	e3a02000 	mov	r2, #0
  12bd50:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12bd54:	e51b3008 	ldr	r3, [fp, #-8]
  12bd58:	e3a02000 	mov	r2, #0
  12bd5c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12bd60:	e51b3008 	ldr	r3, [fp, #-8]
  12bd64:	e3a02000 	mov	r2, #0
  12bd68:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12bd6c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd70:	e3a02000 	mov	r2, #0
  12bd74:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12bd78:	e51b3008 	ldr	r3, [fp, #-8]
  12bd7c:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12bd80:	e51b3008 	ldr	r3, [fp, #-8]
  12bd84:	e5832038 	str	r2, [r3, #56]	; 0x38
  12bd88:	e51b3008 	ldr	r3, [fp, #-8]
  12bd8c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12bd90:	e51b3008 	ldr	r3, [fp, #-8]
  12bd94:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12bd98:	e51b3008 	ldr	r3, [fp, #-8]
  12bd9c:	e3a02000 	mov	r2, #0
  12bda0:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12bda4:	e51b3008 	ldr	r3, [fp, #-8]
  12bda8:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12bdac:	e51b3008 	ldr	r3, [fp, #-8]
  12bdb0:	e1c322b0 	strh	r2, [r3, #32]
  12bdb4:	e51b3008 	ldr	r3, [fp, #-8]
  12bdb8:	e1d322b0 	ldrh	r2, [r3, #32]
  12bdbc:	e51b3008 	ldr	r3, [fp, #-8]
  12bdc0:	e1c321be 	strh	r2, [r3, #30]
  12bdc4:	e51b3008 	ldr	r3, [fp, #-8]
  12bdc8:	e1d321be 	ldrh	r2, [r3, #30]
  12bdcc:	e51b3008 	ldr	r3, [fp, #-8]
  12bdd0:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12bdd4:	e55b3009 	ldrb	r3, [fp, #-9]
  12bdd8:	e3530000 	cmp	r3, #0
  12bddc:	1a000001 	bne	12bde8 <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12bde0:	e3a03000 	mov	r3, #0
  12bde4:	ea000033 	b	12beb8 <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12bde8:	e3a02007 	mov	r2, #7
  12bdec:	e51b1008 	ldr	r1, [fp, #-8]
  12bdf0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bdf4:	eb00048f 	bl	12d038 <dhcp_create_msg>
  12bdf8:	e1a03000 	mov	r3, r0
  12bdfc:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12be00:	e15b30da 	ldrsb	r3, [fp, #-10]
  12be04:	e3530000 	cmp	r3, #0
  12be08:	1a000021 	bne	12be94 <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12be0c:	e3a02004 	mov	r2, #4
  12be10:	e3a01036 	mov	r1, #54	; 0x36
  12be14:	e51b0008 	ldr	r0, [fp, #-8]
  12be18:	eb00006e 	bl	12bfd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12be1c:	e51b3010 	ldr	r3, [fp, #-16]
  12be20:	e1a00003 	mov	r0, r3
  12be24:	ebffa9f2 	bl	1165f4 <lwip_htonl>
  12be28:	e1a03000 	mov	r3, r0
  12be2c:	e1a01003 	mov	r1, r3
  12be30:	e51b0008 	ldr	r0, [fp, #-8]
  12be34:	eb0000e7 	bl	12c1d8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12be38:	e51b0008 	ldr	r0, [fp, #-8]
  12be3c:	eb0005ea 	bl	12d5ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12be40:	e51b3008 	ldr	r3, [fp, #-8]
  12be44:	e593200c 	ldr	r2, [r3, #12]
  12be48:	e51b3008 	ldr	r3, [fp, #-8]
  12be4c:	e1d331b4 	ldrh	r3, [r3, #20]
  12be50:	e28330f0 	add	r3, r3, #240	; 0xf0
  12be54:	e6ff3073 	uxth	r3, r3
  12be58:	e1a01003 	mov	r1, r3
  12be5c:	e1a00002 	mov	r0, r2
  12be60:	ebffbac5 	bl	11a97c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12be64:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12be68:	e3403014 	movt	r3, #20
  12be6c:	e5930000 	ldr	r0, [r3]
  12be70:	e51b3008 	ldr	r3, [fp, #-8]
  12be74:	e593100c 	ldr	r1, [r3, #12]
  12be78:	e24b2010 	sub	r2, fp, #16
  12be7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12be80:	e58d3000 	str	r3, [sp]
  12be84:	e3a03043 	mov	r3, #67	; 0x43
  12be88:	ebfff0e4 	bl	128220 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12be8c:	e51b0008 	ldr	r0, [fp, #-8]
  12be90:	eb0005a0 	bl	12d518 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12be94:	e30938f8 	movw	r3, #39160	; 0x98f8
  12be98:	e3403014 	movt	r3, #20
  12be9c:	e30928f8 	movw	r2, #39160	; 0x98f8
  12bea0:	e3402014 	movt	r2, #20
  12bea4:	e30918f8 	movw	r1, #39160	; 0x98f8
  12bea8:	e3401014 	movt	r1, #20
  12beac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12beb0:	ebffb58c 	bl	1194e8 <netif_set_addr>

  return result;
  12beb4:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12beb8:	e1a00003 	mov	r0, r3
  12bebc:	e24bd004 	sub	sp, fp, #4
  12bec0:	e8bd8800 	pop	{fp, pc}

0012bec4 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12bec4:	e92d4800 	push	{fp, lr}
  12bec8:	e28db004 	add	fp, sp, #4
  12becc:	e24dd010 	sub	sp, sp, #16
  12bed0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12bed4:	e51b3010 	ldr	r3, [fp, #-16]
  12bed8:	e3530000 	cmp	r3, #0
  12bedc:	1a000007 	bne	12bf00 <dhcp_stop+0x3c>
  12bee0:	e3080e80 	movw	r0, #36480	; 0x8e80
  12bee4:	e3400014 	movt	r0, #20
  12bee8:	ebff5c89 	bl	103114 <rt_kprintf>
  12beec:	e3001543 	movw	r1, #1347	; 0x543
  12bef0:	e3080d60 	movw	r0, #36192	; 0x8d60
  12bef4:	e3400014 	movt	r0, #20
  12bef8:	ebff7c78 	bl	10b0e0 <sys_arch_assert>
  12befc:	ea00001b 	b	12bf70 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bf00:	e51b3010 	ldr	r3, [fp, #-16]
  12bf04:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bf08:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bf0c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf10:	e3530000 	cmp	r3, #0
  12bf14:	0a000015 	beq	12bf70 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12bf18:	e51b3008 	ldr	r3, [fp, #-8]
  12bf1c:	e5933004 	ldr	r3, [r3, #4]
  12bf20:	e3530000 	cmp	r3, #0
  12bf24:	0a000006 	beq	12bf44 <dhcp_stop+0x80>
  12bf28:	e3080e38 	movw	r0, #36408	; 0x8e38
  12bf2c:	e3400014 	movt	r0, #20
  12bf30:	ebff5c77 	bl	103114 <rt_kprintf>
  12bf34:	e3a01e55 	mov	r1, #1360	; 0x550
  12bf38:	e3080d60 	movw	r0, #36192	; 0x8d60
  12bf3c:	e3400014 	movt	r0, #20
  12bf40:	ebff7c66 	bl	10b0e0 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bf44:	e3a01000 	mov	r1, #0
  12bf48:	e51b0008 	ldr	r0, [fp, #-8]
  12bf4c:	eb000009 	bl	12bf78 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bf50:	e51b3008 	ldr	r3, [fp, #-8]
  12bf54:	e5d33008 	ldrb	r3, [r3, #8]
  12bf58:	e3530000 	cmp	r3, #0
  12bf5c:	0a000003 	beq	12bf70 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bf60:	ebfff868 	bl	12a108 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bf64:	e51b3008 	ldr	r3, [fp, #-8]
  12bf68:	e3a02000 	mov	r2, #0
  12bf6c:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bf70:	e24bd004 	sub	sp, fp, #4
  12bf74:	e8bd8800 	pop	{fp, pc}

0012bf78 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bf78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bf7c:	e28db000 	add	fp, sp, #0
  12bf80:	e24dd00c 	sub	sp, sp, #12
  12bf84:	e50b0008 	str	r0, [fp, #-8]
  12bf88:	e1a03001 	mov	r3, r1
  12bf8c:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bf90:	e51b3008 	ldr	r3, [fp, #-8]
  12bf94:	e5d33009 	ldrb	r3, [r3, #9]
  12bf98:	e55b2009 	ldrb	r2, [fp, #-9]
  12bf9c:	e1520003 	cmp	r2, r3
  12bfa0:	0a000008 	beq	12bfc8 <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bfa4:	e51b3008 	ldr	r3, [fp, #-8]
  12bfa8:	e55b2009 	ldrb	r2, [fp, #-9]
  12bfac:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bfb0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfb4:	e3a02000 	mov	r2, #0
  12bfb8:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bfbc:	e51b3008 	ldr	r3, [fp, #-8]
  12bfc0:	e3a02000 	mov	r2, #0
  12bfc4:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bfc8:	e320f000 	nop	{0}
  12bfcc:	e28bd000 	add	sp, fp, #0
  12bfd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bfd4:	e12fff1e 	bx	lr

0012bfd8 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bfd8:	e92d4800 	push	{fp, lr}
  12bfdc:	e28db004 	add	fp, sp, #4
  12bfe0:	e24dd008 	sub	sp, sp, #8
  12bfe4:	e50b0008 	str	r0, [fp, #-8]
  12bfe8:	e1a03001 	mov	r3, r1
  12bfec:	e54b3009 	strb	r3, [fp, #-9]
  12bff0:	e1a03002 	mov	r3, r2
  12bff4:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12bff8:	e51b3008 	ldr	r3, [fp, #-8]
  12bffc:	e1d331b4 	ldrh	r3, [r3, #20]
  12c000:	e1a02003 	mov	r2, r3
  12c004:	e55b300a 	ldrb	r3, [fp, #-10]
  12c008:	e0823003 	add	r3, r2, r3
  12c00c:	e2833002 	add	r3, r3, #2
  12c010:	e3530044 	cmp	r3, #68	; 0x44
  12c014:	9a000006 	bls	12c034 <dhcp_option+0x5c>
  12c018:	e3080e9c 	movw	r0, #36508	; 0x8e9c
  12c01c:	e3400014 	movt	r0, #20
  12c020:	ebff5c3b 	bl	103114 <rt_kprintf>
  12c024:	e3001571 	movw	r1, #1393	; 0x571
  12c028:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c02c:	e3400014 	movt	r0, #20
  12c030:	ebff7c2a 	bl	10b0e0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12c034:	e51b3008 	ldr	r3, [fp, #-8]
  12c038:	e5932010 	ldr	r2, [r3, #16]
  12c03c:	e51b3008 	ldr	r3, [fp, #-8]
  12c040:	e1d331b4 	ldrh	r3, [r3, #20]
  12c044:	e2831001 	add	r1, r3, #1
  12c048:	e6ff0071 	uxth	r0, r1
  12c04c:	e51b1008 	ldr	r1, [fp, #-8]
  12c050:	e1c101b4 	strh	r0, [r1, #20]
  12c054:	e0823003 	add	r3, r2, r3
  12c058:	e55b2009 	ldrb	r2, [fp, #-9]
  12c05c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12c060:	e51b3008 	ldr	r3, [fp, #-8]
  12c064:	e5932010 	ldr	r2, [r3, #16]
  12c068:	e51b3008 	ldr	r3, [fp, #-8]
  12c06c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c070:	e2831001 	add	r1, r3, #1
  12c074:	e6ff0071 	uxth	r0, r1
  12c078:	e51b1008 	ldr	r1, [fp, #-8]
  12c07c:	e1c101b4 	strh	r0, [r1, #20]
  12c080:	e0823003 	add	r3, r2, r3
  12c084:	e55b200a 	ldrb	r2, [fp, #-10]
  12c088:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c08c:	e320f000 	nop	{0}
  12c090:	e24bd004 	sub	sp, fp, #4
  12c094:	e8bd8800 	pop	{fp, pc}

0012c098 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12c098:	e92d4800 	push	{fp, lr}
  12c09c:	e28db004 	add	fp, sp, #4
  12c0a0:	e24dd008 	sub	sp, sp, #8
  12c0a4:	e50b0008 	str	r0, [fp, #-8]
  12c0a8:	e1a03001 	mov	r3, r1
  12c0ac:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12c0b0:	e51b3008 	ldr	r3, [fp, #-8]
  12c0b4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c0b8:	e3530043 	cmp	r3, #67	; 0x43
  12c0bc:	9a000006 	bls	12c0dc <dhcp_option_byte+0x44>
  12c0c0:	e3080ee4 	movw	r0, #36580	; 0x8ee4
  12c0c4:	e3400014 	movt	r0, #20
  12c0c8:	ebff5c11 	bl	103114 <rt_kprintf>
  12c0cc:	e300157c 	movw	r1, #1404	; 0x57c
  12c0d0:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c0d4:	e3400014 	movt	r0, #20
  12c0d8:	ebff7c00 	bl	10b0e0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12c0dc:	e51b3008 	ldr	r3, [fp, #-8]
  12c0e0:	e5932010 	ldr	r2, [r3, #16]
  12c0e4:	e51b3008 	ldr	r3, [fp, #-8]
  12c0e8:	e1d331b4 	ldrh	r3, [r3, #20]
  12c0ec:	e2831001 	add	r1, r3, #1
  12c0f0:	e6ff0071 	uxth	r0, r1
  12c0f4:	e51b1008 	ldr	r1, [fp, #-8]
  12c0f8:	e1c101b4 	strh	r0, [r1, #20]
  12c0fc:	e0823003 	add	r3, r2, r3
  12c100:	e55b2009 	ldrb	r2, [fp, #-9]
  12c104:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c108:	e320f000 	nop	{0}
  12c10c:	e24bd004 	sub	sp, fp, #4
  12c110:	e8bd8800 	pop	{fp, pc}

0012c114 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12c114:	e92d4800 	push	{fp, lr}
  12c118:	e28db004 	add	fp, sp, #4
  12c11c:	e24dd008 	sub	sp, sp, #8
  12c120:	e50b0008 	str	r0, [fp, #-8]
  12c124:	e1a03001 	mov	r3, r1
  12c128:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12c12c:	e51b3008 	ldr	r3, [fp, #-8]
  12c130:	e1d331b4 	ldrh	r3, [r3, #20]
  12c134:	e2833002 	add	r3, r3, #2
  12c138:	e3530044 	cmp	r3, #68	; 0x44
  12c13c:	9a000006 	bls	12c15c <dhcp_option_short+0x48>
  12c140:	e3080f20 	movw	r0, #36640	; 0x8f20
  12c144:	e3400014 	movt	r0, #20
  12c148:	ebff5bf1 	bl	103114 <rt_kprintf>
  12c14c:	e3001583 	movw	r1, #1411	; 0x583
  12c150:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c154:	e3400014 	movt	r0, #20
  12c158:	ebff7be0 	bl	10b0e0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12c15c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c160:	e1a03423 	lsr	r3, r3, #8
  12c164:	e6ffc073 	uxth	ip, r3
  12c168:	e51b3008 	ldr	r3, [fp, #-8]
  12c16c:	e5932010 	ldr	r2, [r3, #16]
  12c170:	e51b3008 	ldr	r3, [fp, #-8]
  12c174:	e1d331b4 	ldrh	r3, [r3, #20]
  12c178:	e2831001 	add	r1, r3, #1
  12c17c:	e6ff0071 	uxth	r0, r1
  12c180:	e51b1008 	ldr	r1, [fp, #-8]
  12c184:	e1c101b4 	strh	r0, [r1, #20]
  12c188:	e6ef107c 	uxtb	r1, ip
  12c18c:	e0823003 	add	r3, r2, r3
  12c190:	e1a02001 	mov	r2, r1
  12c194:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12c198:	e51b3008 	ldr	r3, [fp, #-8]
  12c19c:	e5932010 	ldr	r2, [r3, #16]
  12c1a0:	e51b3008 	ldr	r3, [fp, #-8]
  12c1a4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c1a8:	e2831001 	add	r1, r3, #1
  12c1ac:	e6ff0071 	uxth	r0, r1
  12c1b0:	e51b1008 	ldr	r1, [fp, #-8]
  12c1b4:	e1c101b4 	strh	r0, [r1, #20]
  12c1b8:	e15b10ba 	ldrh	r1, [fp, #-10]
  12c1bc:	e6ef1071 	uxtb	r1, r1
  12c1c0:	e0823003 	add	r3, r2, r3
  12c1c4:	e1a02001 	mov	r2, r1
  12c1c8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c1cc:	e320f000 	nop	{0}
  12c1d0:	e24bd004 	sub	sp, fp, #4
  12c1d4:	e8bd8800 	pop	{fp, pc}

0012c1d8 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12c1d8:	e92d4800 	push	{fp, lr}
  12c1dc:	e28db004 	add	fp, sp, #4
  12c1e0:	e24dd008 	sub	sp, sp, #8
  12c1e4:	e50b0008 	str	r0, [fp, #-8]
  12c1e8:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12c1ec:	e51b3008 	ldr	r3, [fp, #-8]
  12c1f0:	e1d331b4 	ldrh	r3, [r3, #20]
  12c1f4:	e2833004 	add	r3, r3, #4
  12c1f8:	e3530044 	cmp	r3, #68	; 0x44
  12c1fc:	9a000006 	bls	12c21c <dhcp_option_long+0x44>
  12c200:	e3080f64 	movw	r0, #36708	; 0x8f64
  12c204:	e3400014 	movt	r0, #20
  12c208:	ebff5bc1 	bl	103114 <rt_kprintf>
  12c20c:	e300158b 	movw	r1, #1419	; 0x58b
  12c210:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c214:	e3400014 	movt	r0, #20
  12c218:	ebff7bb0 	bl	10b0e0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12c21c:	e51b300c 	ldr	r3, [fp, #-12]
  12c220:	e1a0cc23 	lsr	ip, r3, #24
  12c224:	e51b3008 	ldr	r3, [fp, #-8]
  12c228:	e5932010 	ldr	r2, [r3, #16]
  12c22c:	e51b3008 	ldr	r3, [fp, #-8]
  12c230:	e1d331b4 	ldrh	r3, [r3, #20]
  12c234:	e2831001 	add	r1, r3, #1
  12c238:	e6ff0071 	uxth	r0, r1
  12c23c:	e51b1008 	ldr	r1, [fp, #-8]
  12c240:	e1c101b4 	strh	r0, [r1, #20]
  12c244:	e6ef107c 	uxtb	r1, ip
  12c248:	e0823003 	add	r3, r2, r3
  12c24c:	e1a02001 	mov	r2, r1
  12c250:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12c254:	e51b300c 	ldr	r3, [fp, #-12]
  12c258:	e1a0c823 	lsr	ip, r3, #16
  12c25c:	e51b3008 	ldr	r3, [fp, #-8]
  12c260:	e5932010 	ldr	r2, [r3, #16]
  12c264:	e51b3008 	ldr	r3, [fp, #-8]
  12c268:	e1d331b4 	ldrh	r3, [r3, #20]
  12c26c:	e2831001 	add	r1, r3, #1
  12c270:	e6ff0071 	uxth	r0, r1
  12c274:	e51b1008 	ldr	r1, [fp, #-8]
  12c278:	e1c101b4 	strh	r0, [r1, #20]
  12c27c:	e6ef107c 	uxtb	r1, ip
  12c280:	e0823003 	add	r3, r2, r3
  12c284:	e1a02001 	mov	r2, r1
  12c288:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12c28c:	e51b300c 	ldr	r3, [fp, #-12]
  12c290:	e1a0c423 	lsr	ip, r3, #8
  12c294:	e51b3008 	ldr	r3, [fp, #-8]
  12c298:	e5932010 	ldr	r2, [r3, #16]
  12c29c:	e51b3008 	ldr	r3, [fp, #-8]
  12c2a0:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2a4:	e2831001 	add	r1, r3, #1
  12c2a8:	e6ff0071 	uxth	r0, r1
  12c2ac:	e51b1008 	ldr	r1, [fp, #-8]
  12c2b0:	e1c101b4 	strh	r0, [r1, #20]
  12c2b4:	e6ef107c 	uxtb	r1, ip
  12c2b8:	e0823003 	add	r3, r2, r3
  12c2bc:	e1a02001 	mov	r2, r1
  12c2c0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12c2c4:	e51b3008 	ldr	r3, [fp, #-8]
  12c2c8:	e5932010 	ldr	r2, [r3, #16]
  12c2cc:	e51b3008 	ldr	r3, [fp, #-8]
  12c2d0:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2d4:	e2831001 	add	r1, r3, #1
  12c2d8:	e6ff0071 	uxth	r0, r1
  12c2dc:	e51b1008 	ldr	r1, [fp, #-8]
  12c2e0:	e1c101b4 	strh	r0, [r1, #20]
  12c2e4:	e51b100c 	ldr	r1, [fp, #-12]
  12c2e8:	e6ef1071 	uxtb	r1, r1
  12c2ec:	e0823003 	add	r3, r2, r3
  12c2f0:	e1a02001 	mov	r2, r1
  12c2f4:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c2f8:	e320f000 	nop	{0}
  12c2fc:	e24bd004 	sub	sp, fp, #4
  12c300:	e8bd8800 	pop	{fp, pc}

0012c304 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12c304:	e92d4800 	push	{fp, lr}
  12c308:	e28db004 	add	fp, sp, #4
  12c30c:	e24dd018 	sub	sp, sp, #24
  12c310:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12c314:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12c318:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c31c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c320:	e3530000 	cmp	r3, #0
  12c324:	0a00003c 	beq	12c41c <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12c328:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c32c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c330:	e1a00003 	mov	r0, r3
  12c334:	eb00545b 	bl	1414a8 <strlen>
  12c338:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12c33c:	e51b3010 	ldr	r3, [fp, #-16]
  12c340:	e3530000 	cmp	r3, #0
  12c344:	0a000034 	beq	12c41c <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12c348:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c34c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c350:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12c354:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c358:	e1d331b4 	ldrh	r3, [r3, #20]
  12c35c:	e2633041 	rsb	r3, r3, #65	; 0x41
  12c360:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12c364:	e51b2010 	ldr	r2, [fp, #-16]
  12c368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c36c:	e1520003 	cmp	r2, r3
  12c370:	9a000006 	bls	12c390 <dhcp_option_hostname+0x8c>
  12c374:	e3080fa4 	movw	r0, #36772	; 0x8fa4
  12c378:	e3400014 	movt	r0, #20
  12c37c:	ebff5b64 	bl	103114 <rt_kprintf>
  12c380:	e300159e 	movw	r1, #1438	; 0x59e
  12c384:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c388:	e3400014 	movt	r0, #20
  12c38c:	ebff7b53 	bl	10b0e0 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12c390:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c394:	e51b3010 	ldr	r3, [fp, #-16]
  12c398:	e1520003 	cmp	r2, r3
  12c39c:	31a03002 	movcc	r3, r2
  12c3a0:	21a03003 	movcs	r3, r3
  12c3a4:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c3a8:	e51b3008 	ldr	r3, [fp, #-8]
  12c3ac:	e35300ff 	cmp	r3, #255	; 0xff
  12c3b0:	9a000006 	bls	12c3d0 <dhcp_option_hostname+0xcc>
  12c3b4:	e3080fa4 	movw	r0, #36772	; 0x8fa4
  12c3b8:	e3400014 	movt	r0, #20
  12c3bc:	ebff5b54 	bl	103114 <rt_kprintf>
  12c3c0:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c3c4:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c3c8:	e3400014 	movt	r0, #20
  12c3cc:	ebff7b43 	bl	10b0e0 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c3d0:	e51b3008 	ldr	r3, [fp, #-8]
  12c3d4:	e6ef3073 	uxtb	r3, r3
  12c3d8:	e1a02003 	mov	r2, r3
  12c3dc:	e3a0100c 	mov	r1, #12
  12c3e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c3e4:	ebfffefb 	bl	12bfd8 <dhcp_option>
      while (len--) {
  12c3e8:	ea000006 	b	12c408 <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c3ec:	e51b300c 	ldr	r3, [fp, #-12]
  12c3f0:	e2832001 	add	r2, r3, #1
  12c3f4:	e50b200c 	str	r2, [fp, #-12]
  12c3f8:	e5d33000 	ldrb	r3, [r3]
  12c3fc:	e1a01003 	mov	r1, r3
  12c400:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c404:	ebffff23 	bl	12c098 <dhcp_option_byte>
      while (len--) {
  12c408:	e51b3008 	ldr	r3, [fp, #-8]
  12c40c:	e2432001 	sub	r2, r3, #1
  12c410:	e50b2008 	str	r2, [fp, #-8]
  12c414:	e3530000 	cmp	r3, #0
  12c418:	1afffff3 	bne	12c3ec <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c41c:	e320f000 	nop	{0}
  12c420:	e24bd004 	sub	sp, fp, #4
  12c424:	e8bd8800 	pop	{fp, pc}

0012c428 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c428:	e92d4800 	push	{fp, lr}
  12c42c:	e28db004 	add	fp, sp, #4
  12c430:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c434:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c438:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c43c:	e3a03000 	mov	r3, #0
  12c440:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c444:	e3a03000 	mov	r3, #0
  12c448:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c44c:	e3a0200a 	mov	r2, #10
  12c450:	e3a01000 	mov	r1, #0
  12c454:	e30c0c5c 	movw	r0, #52316	; 0xcc5c
  12c458:	e3400015 	movt	r0, #21
  12c45c:	eb005380 	bl	141264 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c460:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c464:	e1d330ba 	ldrh	r3, [r3, #10]
  12c468:	e353002b 	cmp	r3, #43	; 0x2b
  12c46c:	8a000001 	bhi	12c478 <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c470:	e3e03001 	mvn	r3, #1
  12c474:	ea00022e 	b	12cd34 <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c478:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c47c:	e5932004 	ldr	r2, [r3, #4]
  12c480:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c484:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c488:	e3a030f0 	mov	r3, #240	; 0xf0
  12c48c:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c490:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c494:	e1d330b8 	ldrh	r3, [r3, #8]
  12c498:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c49c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c4a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c4a4:	ea00000c 	b	12c4dc <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c4a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4ac:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4b0:	e15b20be 	ldrh	r2, [fp, #-14]
  12c4b4:	e0423003 	sub	r3, r2, r3
  12c4b8:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c4bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4c0:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4c4:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c4c8:	e0423003 	sub	r3, r2, r3
  12c4cc:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c4d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4d4:	e5933000 	ldr	r3, [r3]
  12c4d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c4dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4e0:	e3530000 	cmp	r3, #0
  12c4e4:	0a000004 	beq	12c4fc <dhcp_parse_reply+0xd4>
  12c4e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4ec:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4f0:	e15b20be 	ldrh	r2, [fp, #-14]
  12c4f4:	e1520003 	cmp	r2, r3
  12c4f8:	2affffea 	bcs	12c4a8 <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c4fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c500:	e3530000 	cmp	r3, #0
  12c504:	1a000001 	bne	12c510 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c508:	e3e03001 	mvn	r3, #1
  12c50c:	ea000208 	b	12cd34 <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c510:	e15b30be 	ldrh	r3, [fp, #-14]
  12c514:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c518:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c51c:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c520:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c524:	e5933004 	ldr	r3, [r3, #4]
  12c528:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c52c:	ea0001be 	b	12cc2c <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c530:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c534:	e51b2008 	ldr	r2, [fp, #-8]
  12c538:	e0823003 	add	r3, r2, r3
  12c53c:	e5d33000 	ldrb	r3, [r3]
  12c540:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c544:	e3a03000 	mov	r3, #0
  12c548:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c54c:	e3e03000 	mvn	r3, #0
  12c550:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c554:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c558:	e2833002 	add	r3, r3, #2
  12c55c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c560:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c564:	e2833001 	add	r3, r3, #1
  12c568:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c56c:	e1d220ba 	ldrh	r2, [r2, #10]
  12c570:	e1530002 	cmp	r3, r2
  12c574:	aa000006 	bge	12c594 <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c578:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c57c:	e2833001 	add	r3, r3, #1
  12c580:	e51b2008 	ldr	r2, [fp, #-8]
  12c584:	e0823003 	add	r3, r2, r3
  12c588:	e5d33000 	ldrb	r3, [r3]
  12c58c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c590:	ea00000a 	b	12c5c0 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c598:	e5933000 	ldr	r3, [r3]
  12c59c:	e3530000 	cmp	r3, #0
  12c5a0:	0a000004 	beq	12c5b8 <dhcp_parse_reply+0x190>
  12c5a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c5a8:	e5933000 	ldr	r3, [r3]
  12c5ac:	e5933004 	ldr	r3, [r3, #4]
  12c5b0:	e5d33000 	ldrb	r3, [r3]
  12c5b4:	ea000000 	b	12c5bc <dhcp_parse_reply+0x194>
  12c5b8:	e3a03000 	mov	r3, #0
  12c5bc:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c5c0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c5c4:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c5c8:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c5cc:	e353003b 	cmp	r3, #59	; 0x3b
  12c5d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c5d4:	ea0000ed 	b	12c990 <dhcp_parse_reply+0x568>
  12c5d8:	0012c6c8 	.word	0x0012c6c8
  12c5dc:	0012c6e8 	.word	0x0012c6e8
  12c5e0:	0012c990 	.word	0x0012c990
  12c5e4:	0012c724 	.word	0x0012c724
  12c5e8:	0012c990 	.word	0x0012c990
  12c5ec:	0012c990 	.word	0x0012c990
  12c5f0:	0012c76c 	.word	0x0012c76c
  12c5f4:	0012c990 	.word	0x0012c990
  12c5f8:	0012c990 	.word	0x0012c990
  12c5fc:	0012c990 	.word	0x0012c990
  12c600:	0012c990 	.word	0x0012c990
  12c604:	0012c990 	.word	0x0012c990
  12c608:	0012c990 	.word	0x0012c990
  12c60c:	0012c990 	.word	0x0012c990
  12c610:	0012c990 	.word	0x0012c990
  12c614:	0012c990 	.word	0x0012c990
  12c618:	0012c990 	.word	0x0012c990
  12c61c:	0012c990 	.word	0x0012c990
  12c620:	0012c990 	.word	0x0012c990
  12c624:	0012c990 	.word	0x0012c990
  12c628:	0012c990 	.word	0x0012c990
  12c62c:	0012c990 	.word	0x0012c990
  12c630:	0012c990 	.word	0x0012c990
  12c634:	0012c990 	.word	0x0012c990
  12c638:	0012c990 	.word	0x0012c990
  12c63c:	0012c990 	.word	0x0012c990
  12c640:	0012c990 	.word	0x0012c990
  12c644:	0012c990 	.word	0x0012c990
  12c648:	0012c990 	.word	0x0012c990
  12c64c:	0012c990 	.word	0x0012c990
  12c650:	0012c990 	.word	0x0012c990
  12c654:	0012c990 	.word	0x0012c990
  12c658:	0012c990 	.word	0x0012c990
  12c65c:	0012c990 	.word	0x0012c990
  12c660:	0012c990 	.word	0x0012c990
  12c664:	0012c990 	.word	0x0012c990
  12c668:	0012c990 	.word	0x0012c990
  12c66c:	0012c990 	.word	0x0012c990
  12c670:	0012c990 	.word	0x0012c990
  12c674:	0012c990 	.word	0x0012c990
  12c678:	0012c990 	.word	0x0012c990
  12c67c:	0012c990 	.word	0x0012c990
  12c680:	0012c990 	.word	0x0012c990
  12c684:	0012c990 	.word	0x0012c990
  12c688:	0012c990 	.word	0x0012c990
  12c68c:	0012c990 	.word	0x0012c990
  12c690:	0012c990 	.word	0x0012c990
  12c694:	0012c990 	.word	0x0012c990
  12c698:	0012c990 	.word	0x0012c990
  12c69c:	0012c990 	.word	0x0012c990
  12c6a0:	0012c990 	.word	0x0012c990
  12c6a4:	0012c7f8 	.word	0x0012c7f8
  12c6a8:	0012c834 	.word	0x0012c834
  12c6ac:	0012c8a0 	.word	0x0012c8a0
  12c6b0:	0012c8dc 	.word	0x0012c8dc
  12c6b4:	0012c990 	.word	0x0012c990
  12c6b8:	0012c990 	.word	0x0012c990
  12c6bc:	0012c990 	.word	0x0012c990
  12c6c0:	0012c918 	.word	0x0012c918
  12c6c4:	0012c954 	.word	0x0012c954
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c6c8:	e3a03000 	mov	r3, #0
  12c6cc:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c6d0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6d4:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c6d8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c6dc:	e2433001 	sub	r3, r3, #1
  12c6e0:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c6e4:	ea0000ac 	b	12c99c <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c6e8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6ec:	e3530004 	cmp	r3, #4
  12c6f0:	0a000008 	beq	12c718 <dhcp_parse_reply+0x2f0>
  12c6f4:	e3080fc0 	movw	r0, #36800	; 0x8fc0
  12c6f8:	e3400014 	movt	r0, #20
  12c6fc:	ebff5a84 	bl	103114 <rt_kprintf>
  12c700:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c704:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c708:	e3400014 	movt	r0, #20
  12c70c:	ebff7a73 	bl	10b0e0 <sys_arch_assert>
  12c710:	e3e03005 	mvn	r3, #5
  12c714:	ea000186 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c718:	e3a03006 	mov	r3, #6
  12c71c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c720:	ea00009d 	b	12c99c <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c724:	e3a03004 	mov	r3, #4
  12c728:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c72c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c730:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c734:	e1520003 	cmp	r2, r3
  12c738:	2a000008 	bcs	12c760 <dhcp_parse_reply+0x338>
  12c73c:	e3080fcc 	movw	r0, #36812	; 0x8fcc
  12c740:	e3400014 	movt	r0, #20
  12c744:	ebff5a72 	bl	103114 <rt_kprintf>
  12c748:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c74c:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c750:	e3400014 	movt	r0, #20
  12c754:	ebff7a61 	bl	10b0e0 <sys_arch_assert>
  12c758:	e3e03005 	mvn	r3, #5
  12c75c:	ea000174 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c760:	e3a03007 	mov	r3, #7
  12c764:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c768:	ea00008b 	b	12c99c <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c76c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c770:	e2033003 	and	r3, r3, #3
  12c774:	e6ef3073 	uxtb	r3, r3
  12c778:	e3530000 	cmp	r3, #0
  12c77c:	0a000008 	beq	12c7a4 <dhcp_parse_reply+0x37c>
  12c780:	e3080fe0 	movw	r0, #36832	; 0x8fe0
  12c784:	e3400014 	movt	r0, #20
  12c788:	ebff5a61 	bl	103114 <rt_kprintf>
  12c78c:	e3001602 	movw	r1, #1538	; 0x602
  12c790:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c794:	e3400014 	movt	r0, #20
  12c798:	ebff7a50 	bl	10b0e0 <sys_arch_assert>
  12c79c:	e3e03005 	mvn	r3, #5
  12c7a0:	ea000163 	b	12cd34 <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c7a4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c7a8:	e3530008 	cmp	r3, #8
  12c7ac:	31a03003 	movcc	r3, r3
  12c7b0:	23a03008 	movcs	r3, #8
  12c7b4:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c7b8:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c7bc:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c7c0:	e1520003 	cmp	r2, r3
  12c7c4:	2a000008 	bcs	12c7ec <dhcp_parse_reply+0x3c4>
  12c7c8:	e3080fcc 	movw	r0, #36812	; 0x8fcc
  12c7cc:	e3400014 	movt	r0, #20
  12c7d0:	ebff5a4f 	bl	103114 <rt_kprintf>
  12c7d4:	e3001605 	movw	r1, #1541	; 0x605
  12c7d8:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c7dc:	e3400014 	movt	r0, #20
  12c7e0:	ebff7a3e 	bl	10b0e0 <sys_arch_assert>
  12c7e4:	e3e03005 	mvn	r3, #5
  12c7e8:	ea000151 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c7ec:	e3a03008 	mov	r3, #8
  12c7f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c7f4:	ea000068 	b	12c99c <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c7f8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c7fc:	e3530004 	cmp	r3, #4
  12c800:	0a000008 	beq	12c828 <dhcp_parse_reply+0x400>
  12c804:	e3080fc0 	movw	r0, #36800	; 0x8fc0
  12c808:	e3400014 	movt	r0, #20
  12c80c:	ebff5a40 	bl	103114 <rt_kprintf>
  12c810:	e300160a 	movw	r1, #1546	; 0x60a
  12c814:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c818:	e3400014 	movt	r0, #20
  12c81c:	ebff7a2f 	bl	10b0e0 <sys_arch_assert>
  12c820:	e3e03005 	mvn	r3, #5
  12c824:	ea000142 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c828:	e3a03003 	mov	r3, #3
  12c82c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c830:	ea000059 	b	12c99c <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c834:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c838:	e3530001 	cmp	r3, #1
  12c83c:	0a000008 	beq	12c864 <dhcp_parse_reply+0x43c>
  12c840:	e3080ff0 	movw	r0, #36848	; 0x8ff0
  12c844:	e3400014 	movt	r0, #20
  12c848:	ebff5a31 	bl	103114 <rt_kprintf>
  12c84c:	e3001618 	movw	r1, #1560	; 0x618
  12c850:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c854:	e3400014 	movt	r0, #20
  12c858:	ebff7a20 	bl	10b0e0 <sys_arch_assert>
  12c85c:	e3e03005 	mvn	r3, #5
  12c860:	ea000133 	b	12cd34 <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c864:	e15b30be 	ldrh	r3, [fp, #-14]
  12c868:	e35300f0 	cmp	r3, #240	; 0xf0
  12c86c:	0a000008 	beq	12c894 <dhcp_parse_reply+0x46c>
  12c870:	e3080ffc 	movw	r0, #36860	; 0x8ffc
  12c874:	e3400014 	movt	r0, #20
  12c878:	ebff5a25 	bl	103114 <rt_kprintf>
  12c87c:	e300161a 	movw	r1, #1562	; 0x61a
  12c880:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c884:	e3400014 	movt	r0, #20
  12c888:	ebff7a14 	bl	10b0e0 <sys_arch_assert>
  12c88c:	e3e03005 	mvn	r3, #5
  12c890:	ea000127 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c894:	e3a03000 	mov	r3, #0
  12c898:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c89c:	ea00003e 	b	12c99c <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c8a0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8a4:	e3530001 	cmp	r3, #1
  12c8a8:	0a000008 	beq	12c8d0 <dhcp_parse_reply+0x4a8>
  12c8ac:	e3080ff0 	movw	r0, #36848	; 0x8ff0
  12c8b0:	e3400014 	movt	r0, #20
  12c8b4:	ebff5a16 	bl	103114 <rt_kprintf>
  12c8b8:	e300161e 	movw	r1, #1566	; 0x61e
  12c8bc:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c8c0:	e3400014 	movt	r0, #20
  12c8c4:	ebff7a05 	bl	10b0e0 <sys_arch_assert>
  12c8c8:	e3e03005 	mvn	r3, #5
  12c8cc:	ea000118 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c8d0:	e3a03001 	mov	r3, #1
  12c8d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c8d8:	ea00002f 	b	12c99c <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c8dc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8e0:	e3530004 	cmp	r3, #4
  12c8e4:	0a000008 	beq	12c90c <dhcp_parse_reply+0x4e4>
  12c8e8:	e3080fc0 	movw	r0, #36800	; 0x8fc0
  12c8ec:	e3400014 	movt	r0, #20
  12c8f0:	ebff5a07 	bl	103114 <rt_kprintf>
  12c8f4:	e3001622 	movw	r1, #1570	; 0x622
  12c8f8:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c8fc:	e3400014 	movt	r0, #20
  12c900:	ebff79f6 	bl	10b0e0 <sys_arch_assert>
  12c904:	e3e03005 	mvn	r3, #5
  12c908:	ea000109 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c90c:	e3a03002 	mov	r3, #2
  12c910:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c914:	ea000020 	b	12c99c <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c918:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c91c:	e3530004 	cmp	r3, #4
  12c920:	0a000008 	beq	12c948 <dhcp_parse_reply+0x520>
  12c924:	e3080fc0 	movw	r0, #36800	; 0x8fc0
  12c928:	e3400014 	movt	r0, #20
  12c92c:	ebff59f8 	bl	103114 <rt_kprintf>
  12c930:	e3001626 	movw	r1, #1574	; 0x626
  12c934:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c938:	e3400014 	movt	r0, #20
  12c93c:	ebff79e7 	bl	10b0e0 <sys_arch_assert>
  12c940:	e3e03005 	mvn	r3, #5
  12c944:	ea0000fa 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c948:	e3a03004 	mov	r3, #4
  12c94c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c950:	ea000011 	b	12c99c <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c954:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c958:	e3530004 	cmp	r3, #4
  12c95c:	0a000008 	beq	12c984 <dhcp_parse_reply+0x55c>
  12c960:	e3080fc0 	movw	r0, #36800	; 0x8fc0
  12c964:	e3400014 	movt	r0, #20
  12c968:	ebff59e9 	bl	103114 <rt_kprintf>
  12c96c:	e300162a 	movw	r1, #1578	; 0x62a
  12c970:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c974:	e3400014 	movt	r0, #20
  12c978:	ebff79d8 	bl	10b0e0 <sys_arch_assert>
  12c97c:	e3e03005 	mvn	r3, #5
  12c980:	ea0000eb 	b	12cd34 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c984:	e3a03005 	mov	r3, #5
  12c988:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c98c:	ea000002 	b	12c99c <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c990:	e3a03000 	mov	r3, #0
  12c994:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c998:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c99c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c9a0:	e6ff2073 	uxth	r2, r3
  12c9a4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c9a8:	e0823003 	add	r3, r2, r3
  12c9ac:	e6ff3073 	uxth	r3, r3
  12c9b0:	e2833002 	add	r3, r3, #2
  12c9b4:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c9b8:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c9bc:	e3530000 	cmp	r3, #0
  12c9c0:	0a000073 	beq	12cb94 <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c9c4:	e3a03000 	mov	r3, #0
  12c9c8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c9cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9d0:	e3530000 	cmp	r3, #0
  12c9d4:	ba000002 	blt	12c9e4 <dhcp_parse_reply+0x5bc>
  12c9d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9dc:	e3530009 	cmp	r3, #9
  12c9e0:	da000006 	ble	12ca00 <dhcp_parse_reply+0x5d8>
  12c9e4:	e3090014 	movw	r0, #36884	; 0x9014
  12c9e8:	e3400014 	movt	r0, #20
  12c9ec:	ebff59c8 	bl	103114 <rt_kprintf>
  12c9f0:	e3001637 	movw	r1, #1591	; 0x637
  12c9f4:	e3080d60 	movw	r0, #36192	; 0x8d60
  12c9f8:	e3400014 	movt	r0, #20
  12c9fc:	ebff79b7 	bl	10b0e0 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12ca00:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12ca04:	e3403015 	movt	r3, #21
  12ca08:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12ca0c:	e0833002 	add	r3, r3, r2
  12ca10:	e5d33000 	ldrb	r3, [r3]
  12ca14:	e3530000 	cmp	r3, #0
  12ca18:	1a00005d 	bne	12cb94 <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12ca1c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca20:	e3530004 	cmp	r3, #4
  12ca24:	31a03003 	movcc	r3, r3
  12ca28:	23a03004 	movcs	r3, #4
  12ca2c:	e6ef3073 	uxtb	r3, r3
  12ca30:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12ca34:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12ca38:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12ca3c:	e24b1034 	sub	r1, fp, #52	; 0x34
  12ca40:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12ca44:	ebffbb20 	bl	11b6cc <pbuf_copy_partial>
  12ca48:	e1a03000 	mov	r3, r0
  12ca4c:	e1a02003 	mov	r2, r3
  12ca50:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12ca54:	e1530002 	cmp	r3, r2
  12ca58:	0a000001 	beq	12ca64 <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12ca5c:	e3e03001 	mvn	r3, #1
  12ca60:	ea0000b3 	b	12cd34 <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12ca64:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca68:	e3530004 	cmp	r3, #4
  12ca6c:	9a000025 	bls	12cb08 <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12ca70:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca74:	e2033003 	and	r3, r3, #3
  12ca78:	e6ef3073 	uxtb	r3, r3
  12ca7c:	e3530000 	cmp	r3, #0
  12ca80:	0a000008 	beq	12caa8 <dhcp_parse_reply+0x680>
  12ca84:	e3090028 	movw	r0, #36904	; 0x9028
  12ca88:	e3400014 	movt	r0, #20
  12ca8c:	ebff59a0 	bl	103114 <rt_kprintf>
  12ca90:	e300163f 	movw	r1, #1599	; 0x63f
  12ca94:	e3080d60 	movw	r0, #36192	; 0x8d60
  12ca98:	e3400014 	movt	r0, #20
  12ca9c:	ebff798f 	bl	10b0e0 <sys_arch_assert>
  12caa0:	e3e03005 	mvn	r3, #5
  12caa4:	ea0000a2 	b	12cd34 <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12caa8:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12caac:	e3403015 	movt	r3, #21
  12cab0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cab4:	e0833002 	add	r3, r3, r2
  12cab8:	e3a02001 	mov	r2, #1
  12cabc:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12cac0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12cac4:	e1a00003 	mov	r0, r3
  12cac8:	ebffa6c9 	bl	1165f4 <lwip_htonl>
  12cacc:	e1a01000 	mov	r1, r0
  12cad0:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12cad4:	e3403015 	movt	r3, #21
  12cad8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cadc:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12cae0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cae4:	e2433004 	sub	r3, r3, #4
  12cae8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12caec:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12caf0:	e2833004 	add	r3, r3, #4
  12caf4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12caf8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12cafc:	e2833001 	add	r3, r3, #1
  12cb00:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12cb04:	eaffffb0 	b	12c9cc <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12cb08:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cb0c:	e3530004 	cmp	r3, #4
  12cb10:	1a000005 	bne	12cb2c <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12cb14:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12cb18:	e1a00003 	mov	r0, r3
  12cb1c:	ebffa6b4 	bl	1165f4 <lwip_htonl>
  12cb20:	e1a03000 	mov	r3, r0
  12cb24:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12cb28:	ea00000e 	b	12cb68 <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12cb2c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cb30:	e3530001 	cmp	r3, #1
  12cb34:	0a000008 	beq	12cb5c <dhcp_parse_reply+0x734>
  12cb38:	e3090040 	movw	r0, #36928	; 0x9040
  12cb3c:	e3400014 	movt	r0, #20
  12cb40:	ebff5973 	bl	103114 <rt_kprintf>
  12cb44:	e3001649 	movw	r1, #1609	; 0x649
  12cb48:	e3080d60 	movw	r0, #36192	; 0x8d60
  12cb4c:	e3400014 	movt	r0, #20
  12cb50:	ebff7962 	bl	10b0e0 <sys_arch_assert>
  12cb54:	e3e03005 	mvn	r3, #5
  12cb58:	ea000075 	b	12cd34 <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12cb5c:	e24b3034 	sub	r3, fp, #52	; 0x34
  12cb60:	e5d33000 	ldrb	r3, [r3]
  12cb64:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12cb68:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12cb6c:	e3403015 	movt	r3, #21
  12cb70:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cb74:	e0833002 	add	r3, r3, r2
  12cb78:	e3a02001 	mov	r2, #1
  12cb7c:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12cb80:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12cb84:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12cb88:	e3403015 	movt	r3, #21
  12cb8c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cb90:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12cb94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cb98:	e1d330ba 	ldrh	r3, [r3, #10]
  12cb9c:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cba0:	e1520003 	cmp	r2, r3
  12cba4:	3a000020 	bcc	12cc2c <dhcp_parse_reply+0x804>
      offset -= q->len;
  12cba8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbac:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbb0:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbb4:	e0423003 	sub	r3, r2, r3
  12cbb8:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12cbbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbc0:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbc4:	e15b20bc 	ldrh	r2, [fp, #-12]
  12cbc8:	e0423003 	sub	r3, r2, r3
  12cbcc:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12cbd0:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbd4:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbd8:	e1520003 	cmp	r2, r3
  12cbdc:	2a00001f 	bcs	12cc60 <dhcp_parse_reply+0x838>
  12cbe0:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbe4:	e3530000 	cmp	r3, #0
  12cbe8:	0a00001c 	beq	12cc60 <dhcp_parse_reply+0x838>
        q = q->next;
  12cbec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbf0:	e5933000 	ldr	r3, [r3]
  12cbf4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12cbf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbfc:	e3530000 	cmp	r3, #0
  12cc00:	1a000006 	bne	12cc20 <dhcp_parse_reply+0x7f8>
  12cc04:	e3090054 	movw	r0, #36948	; 0x9054
  12cc08:	e3400014 	movt	r0, #20
  12cc0c:	ebff5940 	bl	103114 <rt_kprintf>
  12cc10:	e3001655 	movw	r1, #1621	; 0x655
  12cc14:	e3080d60 	movw	r0, #36192	; 0x8d60
  12cc18:	e3400014 	movt	r0, #20
  12cc1c:	ebff792f 	bl	10b0e0 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12cc20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc24:	e5933004 	ldr	r3, [r3, #4]
  12cc28:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12cc2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc30:	e3530000 	cmp	r3, #0
  12cc34:	0a000009 	beq	12cc60 <dhcp_parse_reply+0x838>
  12cc38:	e15b30ba 	ldrh	r3, [fp, #-10]
  12cc3c:	e51b2008 	ldr	r2, [fp, #-8]
  12cc40:	e0823003 	add	r3, r2, r3
  12cc44:	e5d33000 	ldrb	r3, [r3]
  12cc48:	e35300ff 	cmp	r3, #255	; 0xff
  12cc4c:	0a000003 	beq	12cc60 <dhcp_parse_reply+0x838>
  12cc50:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cc54:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cc58:	e1520003 	cmp	r2, r3
  12cc5c:	3afffe33 	bcc	12c530 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12cc60:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12cc64:	e3403015 	movt	r3, #21
  12cc68:	e5d33000 	ldrb	r3, [r3]
  12cc6c:	e3530000 	cmp	r3, #0
  12cc70:	0a00001a 	beq	12cce0 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc74:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12cc78:	e3403015 	movt	r3, #21
  12cc7c:	e5933000 	ldr	r3, [r3]
  12cc80:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc84:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12cc88:	e3403015 	movt	r3, #21
  12cc8c:	e3a02000 	mov	r2, #0
  12cc90:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12cc94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12cc98:	e3530001 	cmp	r3, #1
  12cc9c:	1a000002 	bne	12ccac <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12cca0:	e3a03001 	mov	r3, #1
  12cca4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12cca8:	ea00000c 	b	12cce0 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12ccac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ccb0:	e3530002 	cmp	r3, #2
  12ccb4:	1a000002 	bne	12ccc4 <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12ccb8:	e3a03001 	mov	r3, #1
  12ccbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12ccc0:	ea000006 	b	12cce0 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12ccc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ccc8:	e3530003 	cmp	r3, #3
  12cccc:	1a000003 	bne	12cce0 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12ccd0:	e3a03001 	mov	r3, #1
  12ccd4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12ccd8:	e3a03001 	mov	r3, #1
  12ccdc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12cce0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cce4:	e3530000 	cmp	r3, #0
  12cce8:	0a000006 	beq	12cd08 <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12ccec:	e3a03000 	mov	r3, #0
  12ccf0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12ccf4:	e3a0306c 	mov	r3, #108	; 0x6c
  12ccf8:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12ccfc:	e3a030ec 	mov	r3, #236	; 0xec
  12cd00:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cd04:	eafffde4 	b	12c49c <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12cd08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd0c:	e3530000 	cmp	r3, #0
  12cd10:	0a000006 	beq	12cd30 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12cd14:	e3a03000 	mov	r3, #0
  12cd18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12cd1c:	e3a0302c 	mov	r3, #44	; 0x2c
  12cd20:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12cd24:	e3a0306c 	mov	r3, #108	; 0x6c
  12cd28:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cd2c:	eafffdda 	b	12c49c <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12cd30:	e3a03000 	mov	r3, #0
}
  12cd34:	e1a00003 	mov	r0, r3
  12cd38:	e24bd004 	sub	sp, fp, #4
  12cd3c:	e8bd8800 	pop	{fp, pc}

0012cd40 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12cd40:	e92d4800 	push	{fp, lr}
  12cd44:	e28db004 	add	fp, sp, #4
  12cd48:	e24dd028 	sub	sp, sp, #40	; 0x28
  12cd4c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12cd50:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12cd54:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12cd58:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12cd5c:	e30f3618 	movw	r3, #63000	; 0xf618
  12cd60:	e3403014 	movt	r3, #20
  12cd64:	e5933004 	ldr	r3, [r3, #4]
  12cd68:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12cd6c:	e51b300c 	ldr	r3, [fp, #-12]
  12cd70:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12cd74:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12cd78:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cd7c:	e5933004 	ldr	r3, [r3, #4]
  12cd80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12cd84:	e51b3010 	ldr	r3, [fp, #-16]
  12cd88:	e3530000 	cmp	r3, #0
  12cd8c:	0a000091 	beq	12cfd8 <dhcp_recv+0x298>
  12cd90:	e51b3010 	ldr	r3, [fp, #-16]
  12cd94:	e5d33008 	ldrb	r3, [r3, #8]
  12cd98:	e3530000 	cmp	r3, #0
  12cd9c:	0a00008d 	beq	12cfd8 <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12cda0:	e51b3010 	ldr	r3, [fp, #-16]
  12cda4:	e5933004 	ldr	r3, [r3, #4]
  12cda8:	e3530000 	cmp	r3, #0
  12cdac:	0a000006 	beq	12cdcc <dhcp_recv+0x8c>
  12cdb0:	e3080e38 	movw	r0, #36408	; 0x8e38
  12cdb4:	e3400014 	movt	r0, #20
  12cdb8:	ebff58d5 	bl	103114 <rt_kprintf>
  12cdbc:	e30016a9 	movw	r1, #1705	; 0x6a9
  12cdc0:	e3080d60 	movw	r0, #36192	; 0x8d60
  12cdc4:	e3400014 	movt	r0, #20
  12cdc8:	ebff78c4 	bl	10b0e0 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12cdcc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cdd0:	e1d330ba 	ldrh	r3, [r3, #10]
  12cdd4:	e353002b 	cmp	r3, #43	; 0x2b
  12cdd8:	9a000080 	bls	12cfe0 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12cddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cde0:	e5d33000 	ldrb	r3, [r3]
  12cde4:	e3530002 	cmp	r3, #2
  12cde8:	1a00007e 	bne	12cfe8 <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cdec:	e3a03000 	mov	r3, #0
  12cdf0:	e54b3005 	strb	r3, [fp, #-5]
  12cdf4:	ea00000c 	b	12ce2c <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12cdf8:	e55b3005 	ldrb	r3, [fp, #-5]
  12cdfc:	e51b200c 	ldr	r2, [fp, #-12]
  12ce00:	e0823003 	add	r3, r2, r3
  12ce04:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12ce08:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce0c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12ce10:	e0813003 	add	r3, r1, r3
  12ce14:	e5d3301c 	ldrb	r3, [r3, #28]
  12ce18:	e1520003 	cmp	r2, r3
  12ce1c:	1a000073 	bne	12cff0 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12ce20:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce24:	e2833001 	add	r3, r3, #1
  12ce28:	e54b3005 	strb	r3, [fp, #-5]
  12ce2c:	e51b300c 	ldr	r3, [fp, #-12]
  12ce30:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12ce34:	e55b2005 	ldrb	r2, [fp, #-5]
  12ce38:	e1520003 	cmp	r2, r3
  12ce3c:	2a000005 	bcs	12ce58 <dhcp_recv+0x118>
  12ce40:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce44:	e3530005 	cmp	r3, #5
  12ce48:	8a000002 	bhi	12ce58 <dhcp_recv+0x118>
  12ce4c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce50:	e353000f 	cmp	r3, #15
  12ce54:	9affffe7 	bls	12cdf8 <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12ce58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ce5c:	e5933004 	ldr	r3, [r3, #4]
  12ce60:	e1a00003 	mov	r0, r3
  12ce64:	ebffa5e2 	bl	1165f4 <lwip_htonl>
  12ce68:	e1a02000 	mov	r2, r0
  12ce6c:	e51b3010 	ldr	r3, [fp, #-16]
  12ce70:	e5933000 	ldr	r3, [r3]
  12ce74:	e1520003 	cmp	r2, r3
  12ce78:	1a00005e 	bne	12cff8 <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12ce7c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12ce80:	e51b0010 	ldr	r0, [fp, #-16]
  12ce84:	ebfffd67 	bl	12c428 <dhcp_parse_reply>
  12ce88:	e1a03000 	mov	r3, r0
  12ce8c:	e3530000 	cmp	r3, #0
  12ce90:	1a00005a 	bne	12d000 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12ce94:	e30c3c5c 	movw	r3, #52316	; 0xcc5c
  12ce98:	e3403015 	movt	r3, #21
  12ce9c:	e5d33001 	ldrb	r3, [r3, #1]
  12cea0:	e3530000 	cmp	r3, #0
  12cea4:	0a000057 	beq	12d008 <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12cea8:	e30c3c68 	movw	r3, #52328	; 0xcc68
  12ceac:	e3403015 	movt	r3, #21
  12ceb0:	e5933004 	ldr	r3, [r3, #4]
  12ceb4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12ceb8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cebc:	e3530005 	cmp	r3, #5
  12cec0:	1a000021 	bne	12cf4c <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12cec4:	e51b3010 	ldr	r3, [fp, #-16]
  12cec8:	e5d33009 	ldrb	r3, [r3, #9]
  12cecc:	e3530001 	cmp	r3, #1
  12ced0:	1a00000c 	bne	12cf08 <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12ced4:	e51b000c 	ldr	r0, [fp, #-12]
  12ced8:	ebfff6b6 	bl	12a9b8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12cedc:	e51b300c 	ldr	r3, [fp, #-12]
  12cee0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12cee4:	e2033008 	and	r3, r3, #8
  12cee8:	e3530000 	cmp	r3, #0
  12ceec:	0a000002 	beq	12cefc <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12cef0:	e51b000c 	ldr	r0, [fp, #-12]
  12cef4:	ebfff4c0 	bl	12a1fc <dhcp_check>
  12cef8:	ea000043 	b	12d00c <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12cefc:	e51b000c 	ldr	r0, [fp, #-12]
  12cf00:	ebfff952 	bl	12b450 <dhcp_bind>
  12cf04:	ea000040 	b	12d00c <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cf08:	e51b3010 	ldr	r3, [fp, #-16]
  12cf0c:	e5d33009 	ldrb	r3, [r3, #9]
  12cf10:	e3530003 	cmp	r3, #3
  12cf14:	0a000007 	beq	12cf38 <dhcp_recv+0x1f8>
  12cf18:	e51b3010 	ldr	r3, [fp, #-16]
  12cf1c:	e5d33009 	ldrb	r3, [r3, #9]
  12cf20:	e3530004 	cmp	r3, #4
  12cf24:	0a000003 	beq	12cf38 <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cf28:	e51b3010 	ldr	r3, [fp, #-16]
  12cf2c:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cf30:	e3530005 	cmp	r3, #5
  12cf34:	1a000034 	bne	12d00c <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12cf38:	e51b000c 	ldr	r0, [fp, #-12]
  12cf3c:	ebfff69d 	bl	12a9b8 <dhcp_handle_ack>
      dhcp_bind(netif);
  12cf40:	e51b000c 	ldr	r0, [fp, #-12]
  12cf44:	ebfff941 	bl	12b450 <dhcp_bind>
  12cf48:	ea00002f 	b	12d00c <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cf4c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cf50:	e3530006 	cmp	r3, #6
  12cf54:	1a000012 	bne	12cfa4 <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf58:	e51b3010 	ldr	r3, [fp, #-16]
  12cf5c:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12cf60:	e3530003 	cmp	r3, #3
  12cf64:	0a00000b 	beq	12cf98 <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf68:	e51b3010 	ldr	r3, [fp, #-16]
  12cf6c:	e5d33009 	ldrb	r3, [r3, #9]
  12cf70:	e3530001 	cmp	r3, #1
  12cf74:	0a000007 	beq	12cf98 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf78:	e51b3010 	ldr	r3, [fp, #-16]
  12cf7c:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf80:	e3530004 	cmp	r3, #4
  12cf84:	0a000003 	beq	12cf98 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf88:	e51b3010 	ldr	r3, [fp, #-16]
  12cf8c:	e5d33009 	ldrb	r3, [r3, #9]
  12cf90:	e3530005 	cmp	r3, #5
  12cf94:	1a000002 	bne	12cfa4 <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12cf98:	e51b000c 	ldr	r0, [fp, #-12]
  12cf9c:	ebfff47f 	bl	12a1a0 <dhcp_handle_nak>
  12cfa0:	ea000019 	b	12d00c <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12cfa4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cfa8:	e3530002 	cmp	r3, #2
  12cfac:	1a000009 	bne	12cfd8 <dhcp_recv+0x298>
  12cfb0:	e51b3010 	ldr	r3, [fp, #-16]
  12cfb4:	e5d33009 	ldrb	r3, [r3, #9]
  12cfb8:	e3530006 	cmp	r3, #6
  12cfbc:	1a000005 	bne	12cfd8 <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cfc0:	e51b3010 	ldr	r3, [fp, #-16]
  12cfc4:	e3a02000 	mov	r2, #0
  12cfc8:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12cfcc:	e51b000c 	ldr	r0, [fp, #-12]
  12cfd0:	ebfff4b6 	bl	12a2b0 <dhcp_handle_offer>
  12cfd4:	ea00000c 	b	12d00c <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12cfd8:	e320f000 	nop	{0}
  12cfdc:	ea00000a 	b	12d00c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cfe0:	e320f000 	nop	{0}
  12cfe4:	ea000008 	b	12d00c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cfe8:	e320f000 	nop	{0}
  12cfec:	ea000006 	b	12d00c <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12cff0:	e320f000 	nop	{0}
  12cff4:	ea000004 	b	12d00c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cff8:	e320f000 	nop	{0}
  12cffc:	ea000002 	b	12d00c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d000:	e320f000 	nop	{0}
  12d004:	ea000000 	b	12d00c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d008:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12d00c:	e51b3010 	ldr	r3, [fp, #-16]
  12d010:	e3530000 	cmp	r3, #0
  12d014:	0a000002 	beq	12d024 <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12d018:	e51b3010 	ldr	r3, [fp, #-16]
  12d01c:	e3a02000 	mov	r2, #0
  12d020:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12d024:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12d028:	ebffb79c 	bl	11aea0 <pbuf_free>
}
  12d02c:	e320f000 	nop	{0}
  12d030:	e24bd004 	sub	sp, fp, #4
  12d034:	e8bd8800 	pop	{fp, pc}

0012d038 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12d038:	e92d4810 	push	{r4, fp, lr}
  12d03c:	e28db008 	add	fp, sp, #8
  12d040:	e24dd01c 	sub	sp, sp, #28
  12d044:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d048:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12d04c:	e1a03002 	mov	r3, r2
  12d050:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12d054:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d058:	e3530000 	cmp	r3, #0
  12d05c:	1a000008 	bne	12d084 <dhcp_create_msg+0x4c>
  12d060:	e3090068 	movw	r0, #36968	; 0x9068
  12d064:	e3400014 	movt	r0, #20
  12d068:	ebff5829 	bl	103114 <rt_kprintf>
  12d06c:	e300171e 	movw	r1, #1822	; 0x71e
  12d070:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d074:	e3400014 	movt	r0, #20
  12d078:	ebff7818 	bl	10b0e0 <sys_arch_assert>
  12d07c:	e3e0300f 	mvn	r3, #15
  12d080:	ea000121 	b	12d50c <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12d084:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d088:	e3530000 	cmp	r3, #0
  12d08c:	1a000008 	bne	12d0b4 <dhcp_create_msg+0x7c>
  12d090:	e3090088 	movw	r0, #37000	; 0x9088
  12d094:	e3400014 	movt	r0, #20
  12d098:	ebff581d 	bl	103114 <rt_kprintf>
  12d09c:	e300171f 	movw	r1, #1823	; 0x71f
  12d0a0:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d0a4:	e3400014 	movt	r0, #20
  12d0a8:	ebff780c 	bl	10b0e0 <sys_arch_assert>
  12d0ac:	e3e03005 	mvn	r3, #5
  12d0b0:	ea000115 	b	12d50c <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12d0b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0b8:	e593300c 	ldr	r3, [r3, #12]
  12d0bc:	e3530000 	cmp	r3, #0
  12d0c0:	0a000006 	beq	12d0e0 <dhcp_create_msg+0xa8>
  12d0c4:	e30900a8 	movw	r0, #37032	; 0x90a8
  12d0c8:	e3400014 	movt	r0, #20
  12d0cc:	ebff5810 	bl	103114 <rt_kprintf>
  12d0d0:	e3a01e72 	mov	r1, #1824	; 0x720
  12d0d4:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d0d8:	e3400014 	movt	r0, #20
  12d0dc:	ebff77ff 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12d0e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0e4:	e5933010 	ldr	r3, [r3, #16]
  12d0e8:	e3530000 	cmp	r3, #0
  12d0ec:	0a000006 	beq	12d10c <dhcp_create_msg+0xd4>
  12d0f0:	e30900d0 	movw	r0, #37072	; 0x90d0
  12d0f4:	e3400014 	movt	r0, #20
  12d0f8:	ebff5805 	bl	103114 <rt_kprintf>
  12d0fc:	e3001721 	movw	r1, #1825	; 0x721
  12d100:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d104:	e3400014 	movt	r0, #20
  12d108:	ebff77f4 	bl	10b0e0 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12d10c:	e3a02000 	mov	r2, #0
  12d110:	e3a01f4d 	mov	r1, #308	; 0x134
  12d114:	e3a00000 	mov	r0, #0
  12d118:	ebffb459 	bl	11a284 <pbuf_alloc>
  12d11c:	e1a02000 	mov	r2, r0
  12d120:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d124:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12d128:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d12c:	e593300c 	ldr	r3, [r3, #12]
  12d130:	e3530000 	cmp	r3, #0
  12d134:	1a000001 	bne	12d140 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12d138:	e3e03000 	mvn	r3, #0
  12d13c:	ea0000f2 	b	12d50c <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12d140:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d144:	e593300c 	ldr	r3, [r3, #12]
  12d148:	e1d330ba 	ldrh	r3, [r3, #10]
  12d14c:	e3530f4d 	cmp	r3, #308	; 0x134
  12d150:	2a000006 	bcs	12d170 <dhcp_create_msg+0x138>
  12d154:	e30900f8 	movw	r0, #37112	; 0x90f8
  12d158:	e3400014 	movt	r0, #20
  12d15c:	ebff57ec 	bl	103114 <rt_kprintf>
  12d160:	e3001729 	movw	r1, #1833	; 0x729
  12d164:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d168:	e3400014 	movt	r0, #20
  12d16c:	ebff77db 	bl	10b0e0 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12d170:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d174:	e3530003 	cmp	r3, #3
  12d178:	0a00000e 	beq	12d1b8 <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12d17c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d180:	e5d3300a 	ldrb	r3, [r3, #10]
  12d184:	e3530000 	cmp	r3, #0
  12d188:	1a000005 	bne	12d1a4 <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12d18c:	eb0043fa 	bl	13e17c <rand>
  12d190:	e1a03000 	mov	r3, r0
  12d194:	e1a02003 	mov	r2, r3
  12d198:	e30e3afc 	movw	r3, #60156	; 0xeafc
  12d19c:	e3403014 	movt	r3, #20
  12d1a0:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12d1a4:	e30e3afc 	movw	r3, #60156	; 0xeafc
  12d1a8:	e3403014 	movt	r3, #20
  12d1ac:	e5932000 	ldr	r2, [r3]
  12d1b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1b4:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12d1b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1bc:	e593300c 	ldr	r3, [r3, #12]
  12d1c0:	e5932004 	ldr	r2, [r3, #4]
  12d1c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1c8:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12d1cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1d0:	e5933010 	ldr	r3, [r3, #16]
  12d1d4:	e3a02001 	mov	r2, #1
  12d1d8:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12d1dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1e0:	e5933010 	ldr	r3, [r3, #16]
  12d1e4:	e3a02001 	mov	r2, #1
  12d1e8:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12d1ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1f0:	e5933010 	ldr	r3, [r3, #16]
  12d1f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d1f8:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12d1fc:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12d200:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d204:	e5933010 	ldr	r3, [r3, #16]
  12d208:	e3a02000 	mov	r2, #0
  12d20c:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12d210:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d214:	e5932000 	ldr	r2, [r3]
  12d218:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d21c:	e5934010 	ldr	r4, [r3, #16]
  12d220:	e1a00002 	mov	r0, r2
  12d224:	ebffa4f2 	bl	1165f4 <lwip_htonl>
  12d228:	e1a03000 	mov	r3, r0
  12d22c:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12d230:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d234:	e5933010 	ldr	r3, [r3, #16]
  12d238:	e3a02000 	mov	r2, #0
  12d23c:	e5c32008 	strb	r2, [r3, #8]
  12d240:	e3a02000 	mov	r2, #0
  12d244:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12d248:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d24c:	e5933010 	ldr	r3, [r3, #16]
  12d250:	e3a02000 	mov	r2, #0
  12d254:	e5c3200a 	strb	r2, [r3, #10]
  12d258:	e3a02000 	mov	r2, #0
  12d25c:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12d260:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d264:	e5933010 	ldr	r3, [r3, #16]
  12d268:	e3a02000 	mov	r2, #0
  12d26c:	e5c3200c 	strb	r2, [r3, #12]
  12d270:	e3a02000 	mov	r2, #0
  12d274:	e5c3200d 	strb	r2, [r3, #13]
  12d278:	e3a02000 	mov	r2, #0
  12d27c:	e5c3200e 	strb	r2, [r3, #14]
  12d280:	e3a02000 	mov	r2, #0
  12d284:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12d288:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d28c:	e3530008 	cmp	r3, #8
  12d290:	0a000010 	beq	12d2d8 <dhcp_create_msg+0x2a0>
  12d294:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d298:	e3530004 	cmp	r3, #4
  12d29c:	0a00000d 	beq	12d2d8 <dhcp_create_msg+0x2a0>
  12d2a0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2a4:	e3530007 	cmp	r3, #7
  12d2a8:	0a00000a 	beq	12d2d8 <dhcp_create_msg+0x2a0>
  12d2ac:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2b0:	e3530003 	cmp	r3, #3
  12d2b4:	1a00000d 	bne	12d2f0 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d2b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2bc:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12d2c0:	e3530005 	cmp	r3, #5
  12d2c4:	0a000003 	beq	12d2d8 <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d2c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2cc:	e5d33009 	ldrb	r3, [r3, #9]
  12d2d0:	e3530004 	cmp	r3, #4
  12d2d4:	1a000005 	bne	12d2f0 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12d2d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d2dc:	e2832004 	add	r2, r3, #4
  12d2e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2e4:	e5933010 	ldr	r3, [r3, #16]
  12d2e8:	e5922000 	ldr	r2, [r2]
  12d2ec:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12d2f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2f4:	e5933010 	ldr	r3, [r3, #16]
  12d2f8:	e3a02000 	mov	r2, #0
  12d2fc:	e5c32010 	strb	r2, [r3, #16]
  12d300:	e3a02000 	mov	r2, #0
  12d304:	e5c32011 	strb	r2, [r3, #17]
  12d308:	e3a02000 	mov	r2, #0
  12d30c:	e5c32012 	strb	r2, [r3, #18]
  12d310:	e3a02000 	mov	r2, #0
  12d314:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12d318:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d31c:	e5933010 	ldr	r3, [r3, #16]
  12d320:	e3a02000 	mov	r2, #0
  12d324:	e5c32014 	strb	r2, [r3, #20]
  12d328:	e3a02000 	mov	r2, #0
  12d32c:	e5c32015 	strb	r2, [r3, #21]
  12d330:	e3a02000 	mov	r2, #0
  12d334:	e5c32016 	strb	r2, [r3, #22]
  12d338:	e3a02000 	mov	r2, #0
  12d33c:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12d340:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d344:	e5933010 	ldr	r3, [r3, #16]
  12d348:	e3a02000 	mov	r2, #0
  12d34c:	e5c32018 	strb	r2, [r3, #24]
  12d350:	e3a02000 	mov	r2, #0
  12d354:	e5c32019 	strb	r2, [r3, #25]
  12d358:	e3a02000 	mov	r2, #0
  12d35c:	e5c3201a 	strb	r2, [r3, #26]
  12d360:	e3a02000 	mov	r2, #0
  12d364:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d368:	e3a03000 	mov	r3, #0
  12d36c:	e14b30be 	strh	r3, [fp, #-14]
  12d370:	ea000017 	b	12d3d4 <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12d374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d378:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d37c:	e6ff3073 	uxth	r3, r3
  12d380:	e15b20be 	ldrh	r2, [fp, #-14]
  12d384:	e1520003 	cmp	r2, r3
  12d388:	2a000007 	bcs	12d3ac <dhcp_create_msg+0x374>
  12d38c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d390:	e3530005 	cmp	r3, #5
  12d394:	8a000004 	bhi	12d3ac <dhcp_create_msg+0x374>
  12d398:	e15b30be 	ldrh	r3, [fp, #-14]
  12d39c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d3a0:	e0823003 	add	r3, r2, r3
  12d3a4:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d3a8:	ea000000 	b	12d3b0 <dhcp_create_msg+0x378>
  12d3ac:	e3a01000 	mov	r1, #0
  12d3b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3b4:	e5932010 	ldr	r2, [r3, #16]
  12d3b8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3bc:	e0823003 	add	r3, r2, r3
  12d3c0:	e1a02001 	mov	r2, r1
  12d3c4:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d3c8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3cc:	e2833001 	add	r3, r3, #1
  12d3d0:	e14b30be 	strh	r3, [fp, #-14]
  12d3d4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3d8:	e353000f 	cmp	r3, #15
  12d3dc:	9affffe4 	bls	12d374 <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d3e0:	e3a03000 	mov	r3, #0
  12d3e4:	e14b30be 	strh	r3, [fp, #-14]
  12d3e8:	ea000008 	b	12d410 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d3ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3f0:	e5932010 	ldr	r2, [r3, #16]
  12d3f4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3f8:	e0823003 	add	r3, r2, r3
  12d3fc:	e3a02000 	mov	r2, #0
  12d400:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d404:	e15b30be 	ldrh	r3, [fp, #-14]
  12d408:	e2833001 	add	r3, r3, #1
  12d40c:	e14b30be 	strh	r3, [fp, #-14]
  12d410:	e15b30be 	ldrh	r3, [fp, #-14]
  12d414:	e353003f 	cmp	r3, #63	; 0x3f
  12d418:	9afffff3 	bls	12d3ec <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d41c:	e3a03000 	mov	r3, #0
  12d420:	e14b30be 	strh	r3, [fp, #-14]
  12d424:	ea000008 	b	12d44c <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d428:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d42c:	e5932010 	ldr	r2, [r3, #16]
  12d430:	e15b30be 	ldrh	r3, [fp, #-14]
  12d434:	e0823003 	add	r3, r2, r3
  12d438:	e3a02000 	mov	r2, #0
  12d43c:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d440:	e15b30be 	ldrh	r3, [fp, #-14]
  12d444:	e2833001 	add	r3, r3, #1
  12d448:	e14b30be 	strh	r3, [fp, #-14]
  12d44c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d450:	e353007f 	cmp	r3, #127	; 0x7f
  12d454:	9afffff3 	bls	12d428 <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d458:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d45c:	e5932010 	ldr	r2, [r3, #16]
  12d460:	e3a03000 	mov	r3, #0
  12d464:	e3833063 	orr	r3, r3, #99	; 0x63
  12d468:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d46c:	e3a03000 	mov	r3, #0
  12d470:	e1e03003 	mvn	r3, r3
  12d474:	e203307d 	and	r3, r3, #125	; 0x7d
  12d478:	e1e03003 	mvn	r3, r3
  12d47c:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d480:	e3a03000 	mov	r3, #0
  12d484:	e3833053 	orr	r3, r3, #83	; 0x53
  12d488:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d48c:	e3a03000 	mov	r3, #0
  12d490:	e3833063 	orr	r3, r3, #99	; 0x63
  12d494:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d49c:	e3a02000 	mov	r2, #0
  12d4a0:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d4a4:	e3a03000 	mov	r3, #0
  12d4a8:	e14b30be 	strh	r3, [fp, #-14]
  12d4ac:	ea00000a 	b	12d4dc <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d4b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4b4:	e5932010 	ldr	r2, [r3, #16]
  12d4b8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4bc:	e15b10be 	ldrh	r1, [fp, #-14]
  12d4c0:	e6ef1071 	uxtb	r1, r1
  12d4c4:	e0823003 	add	r3, r2, r3
  12d4c8:	e1a02001 	mov	r2, r1
  12d4cc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d4d0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4d4:	e2833001 	add	r3, r3, #1
  12d4d8:	e14b30be 	strh	r3, [fp, #-14]
  12d4dc:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4e0:	e3530043 	cmp	r3, #67	; 0x43
  12d4e4:	9afffff1 	bls	12d4b0 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d4e8:	e3a02001 	mov	r2, #1
  12d4ec:	e3a01035 	mov	r1, #53	; 0x35
  12d4f0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d4f4:	ebfffab7 	bl	12bfd8 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d4f8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d4fc:	e1a01003 	mov	r1, r3
  12d500:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d504:	ebfffae3 	bl	12c098 <dhcp_option_byte>
  return ERR_OK;
  12d508:	e3a03000 	mov	r3, #0
}
  12d50c:	e1a00003 	mov	r0, r3
  12d510:	e24bd008 	sub	sp, fp, #8
  12d514:	e8bd8810 	pop	{r4, fp, pc}

0012d518 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d518:	e92d4800 	push	{fp, lr}
  12d51c:	e28db004 	add	fp, sp, #4
  12d520:	e24dd008 	sub	sp, sp, #8
  12d524:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d528:	e51b3008 	ldr	r3, [fp, #-8]
  12d52c:	e3530000 	cmp	r3, #0
  12d530:	1a000007 	bne	12d554 <dhcp_delete_msg+0x3c>
  12d534:	e3090138 	movw	r0, #37176	; 0x9138
  12d538:	e3400014 	movt	r0, #20
  12d53c:	ebff56f4 	bl	103114 <rt_kprintf>
  12d540:	e300176e 	movw	r1, #1902	; 0x76e
  12d544:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d548:	e3400014 	movt	r0, #20
  12d54c:	ebff76e3 	bl	10b0e0 <sys_arch_assert>
  12d550:	ea000023 	b	12d5e4 <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d554:	e51b3008 	ldr	r3, [fp, #-8]
  12d558:	e593300c 	ldr	r3, [r3, #12]
  12d55c:	e3530000 	cmp	r3, #0
  12d560:	1a000006 	bne	12d580 <dhcp_delete_msg+0x68>
  12d564:	e3090158 	movw	r0, #37208	; 0x9158
  12d568:	e3400014 	movt	r0, #20
  12d56c:	ebff56e8 	bl	103114 <rt_kprintf>
  12d570:	e300176f 	movw	r1, #1903	; 0x76f
  12d574:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d578:	e3400014 	movt	r0, #20
  12d57c:	ebff76d7 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d580:	e51b3008 	ldr	r3, [fp, #-8]
  12d584:	e5933010 	ldr	r3, [r3, #16]
  12d588:	e3530000 	cmp	r3, #0
  12d58c:	1a000006 	bne	12d5ac <dhcp_delete_msg+0x94>
  12d590:	e3090180 	movw	r0, #37248	; 0x9180
  12d594:	e3400014 	movt	r0, #20
  12d598:	ebff56dd 	bl	103114 <rt_kprintf>
  12d59c:	e3a01e77 	mov	r1, #1904	; 0x770
  12d5a0:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d5a4:	e3400014 	movt	r0, #20
  12d5a8:	ebff76cc 	bl	10b0e0 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d5ac:	e51b3008 	ldr	r3, [fp, #-8]
  12d5b0:	e593300c 	ldr	r3, [r3, #12]
  12d5b4:	e3530000 	cmp	r3, #0
  12d5b8:	0a000003 	beq	12d5cc <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d5bc:	e51b3008 	ldr	r3, [fp, #-8]
  12d5c0:	e593300c 	ldr	r3, [r3, #12]
  12d5c4:	e1a00003 	mov	r0, r3
  12d5c8:	ebffb634 	bl	11aea0 <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d5cc:	e51b3008 	ldr	r3, [fp, #-8]
  12d5d0:	e3a02000 	mov	r2, #0
  12d5d4:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d5d8:	e51b3008 	ldr	r3, [fp, #-8]
  12d5dc:	e3a02000 	mov	r2, #0
  12d5e0:	e5832010 	str	r2, [r3, #16]
}
  12d5e4:	e24bd004 	sub	sp, fp, #4
  12d5e8:	e8bd8800 	pop	{fp, pc}

0012d5ec <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d5ec:	e92d4800 	push	{fp, lr}
  12d5f0:	e28db004 	add	fp, sp, #4
  12d5f4:	e24dd008 	sub	sp, sp, #8
  12d5f8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d5fc:	e51b3008 	ldr	r3, [fp, #-8]
  12d600:	e3530000 	cmp	r3, #0
  12d604:	1a000007 	bne	12d628 <dhcp_option_trailer+0x3c>
  12d608:	e30901a8 	movw	r0, #37288	; 0x91a8
  12d60c:	e3400014 	movt	r0, #20
  12d610:	ebff56bf 	bl	103114 <rt_kprintf>
  12d614:	e3001783 	movw	r1, #1923	; 0x783
  12d618:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d61c:	e3400014 	movt	r0, #20
  12d620:	ebff76ae 	bl	10b0e0 <sys_arch_assert>
  12d624:	ea000039 	b	12d710 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d628:	e51b3008 	ldr	r3, [fp, #-8]
  12d62c:	e5933010 	ldr	r3, [r3, #16]
  12d630:	e3530000 	cmp	r3, #0
  12d634:	1a000006 	bne	12d654 <dhcp_option_trailer+0x68>
  12d638:	e30901cc 	movw	r0, #37324	; 0x91cc
  12d63c:	e3400014 	movt	r0, #20
  12d640:	ebff56b3 	bl	103114 <rt_kprintf>
  12d644:	e3001784 	movw	r1, #1924	; 0x784
  12d648:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d64c:	e3400014 	movt	r0, #20
  12d650:	ebff76a2 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d654:	e51b3008 	ldr	r3, [fp, #-8]
  12d658:	e1d331b4 	ldrh	r3, [r3, #20]
  12d65c:	e3530043 	cmp	r3, #67	; 0x43
  12d660:	9a000006 	bls	12d680 <dhcp_option_trailer+0x94>
  12d664:	e30901f8 	movw	r0, #37368	; 0x91f8
  12d668:	e3400014 	movt	r0, #20
  12d66c:	ebff56a8 	bl	103114 <rt_kprintf>
  12d670:	e3001785 	movw	r1, #1925	; 0x785
  12d674:	e3080d60 	movw	r0, #36192	; 0x8d60
  12d678:	e3400014 	movt	r0, #20
  12d67c:	ebff7697 	bl	10b0e0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d680:	e51b3008 	ldr	r3, [fp, #-8]
  12d684:	e5932010 	ldr	r2, [r3, #16]
  12d688:	e51b3008 	ldr	r3, [fp, #-8]
  12d68c:	e1d331b4 	ldrh	r3, [r3, #20]
  12d690:	e2831001 	add	r1, r3, #1
  12d694:	e6ff0071 	uxth	r0, r1
  12d698:	e51b1008 	ldr	r1, [fp, #-8]
  12d69c:	e1c101b4 	strh	r0, [r1, #20]
  12d6a0:	e0823003 	add	r3, r2, r3
  12d6a4:	e3e02000 	mvn	r2, #0
  12d6a8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6ac:	ea00000a 	b	12d6dc <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d6b0:	e51b3008 	ldr	r3, [fp, #-8]
  12d6b4:	e5932010 	ldr	r2, [r3, #16]
  12d6b8:	e51b3008 	ldr	r3, [fp, #-8]
  12d6bc:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6c0:	e2831001 	add	r1, r3, #1
  12d6c4:	e6ff0071 	uxth	r0, r1
  12d6c8:	e51b1008 	ldr	r1, [fp, #-8]
  12d6cc:	e1c101b4 	strh	r0, [r1, #20]
  12d6d0:	e0823003 	add	r3, r2, r3
  12d6d4:	e3a02000 	mov	r2, #0
  12d6d8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6dc:	e51b3008 	ldr	r3, [fp, #-8]
  12d6e0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6e4:	e3530043 	cmp	r3, #67	; 0x43
  12d6e8:	9a000004 	bls	12d700 <dhcp_option_trailer+0x114>
  12d6ec:	e51b3008 	ldr	r3, [fp, #-8]
  12d6f0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6f4:	e2033003 	and	r3, r3, #3
  12d6f8:	e3530000 	cmp	r3, #0
  12d6fc:	0a000003 	beq	12d710 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d700:	e51b3008 	ldr	r3, [fp, #-8]
  12d704:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d708:	e3530043 	cmp	r3, #67	; 0x43
  12d70c:	9affffe7 	bls	12d6b0 <dhcp_option_trailer+0xc4>
  }
}
  12d710:	e24bd004 	sub	sp, fp, #4
  12d714:	e8bd8800 	pop	{fp, pc}

0012d718 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d718:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d71c:	e28db000 	add	fp, sp, #0
  12d720:	e24dd014 	sub	sp, sp, #20
  12d724:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d728:	e51b3010 	ldr	r3, [fp, #-16]
  12d72c:	e3530000 	cmp	r3, #0
  12d730:	0a000013 	beq	12d784 <dhcp_supplied_address+0x6c>
  12d734:	e51b3010 	ldr	r3, [fp, #-16]
  12d738:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d73c:	e3530000 	cmp	r3, #0
  12d740:	0a00000f 	beq	12d784 <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d744:	e51b3010 	ldr	r3, [fp, #-16]
  12d748:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d74c:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d750:	e51b3008 	ldr	r3, [fp, #-8]
  12d754:	e5d33009 	ldrb	r3, [r3, #9]
  12d758:	e353000a 	cmp	r3, #10
  12d75c:	0a000003 	beq	12d770 <dhcp_supplied_address+0x58>
  12d760:	e51b3008 	ldr	r3, [fp, #-8]
  12d764:	e5d33009 	ldrb	r3, [r3, #9]
  12d768:	e3530005 	cmp	r3, #5
  12d76c:	1a000001 	bne	12d778 <dhcp_supplied_address+0x60>
  12d770:	e3a03001 	mov	r3, #1
  12d774:	ea000000 	b	12d77c <dhcp_supplied_address+0x64>
  12d778:	e3a03000 	mov	r3, #0
  12d77c:	e6ef3073 	uxtb	r3, r3
  12d780:	ea000000 	b	12d788 <dhcp_supplied_address+0x70>
  }
  return 0;
  12d784:	e3a03000 	mov	r3, #0
}
  12d788:	e1a00003 	mov	r0, r3
  12d78c:	e28bd000 	add	sp, fp, #0
  12d790:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d794:	e12fff1e 	bx	lr

0012d798 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d798:	e92d4800 	push	{fp, lr}
  12d79c:	e28db004 	add	fp, sp, #4
  12d7a0:	e24dd010 	sub	sp, sp, #16
  12d7a4:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d7a8:	e51b3010 	ldr	r3, [fp, #-16]
  12d7ac:	e3530000 	cmp	r3, #0
  12d7b0:	1a000006 	bne	12d7d0 <free_etharp_q+0x38>
  12d7b4:	e3090238 	movw	r0, #37432	; 0x9238
  12d7b8:	e3400014 	movt	r0, #20
  12d7bc:	ebff5654 	bl	103114 <rt_kprintf>
  12d7c0:	e3a01097 	mov	r1, #151	; 0x97
  12d7c4:	e3090244 	movw	r0, #37444	; 0x9244
  12d7c8:	e3400014 	movt	r0, #20
  12d7cc:	ebff7643 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d7d0:	e51b3010 	ldr	r3, [fp, #-16]
  12d7d4:	e5933004 	ldr	r3, [r3, #4]
  12d7d8:	e3530000 	cmp	r3, #0
  12d7dc:	1a00001e 	bne	12d85c <free_etharp_q+0xc4>
  12d7e0:	e3090278 	movw	r0, #37496	; 0x9278
  12d7e4:	e3400014 	movt	r0, #20
  12d7e8:	ebff5649 	bl	103114 <rt_kprintf>
  12d7ec:	e3a01098 	mov	r1, #152	; 0x98
  12d7f0:	e3090244 	movw	r0, #37444	; 0x9244
  12d7f4:	e3400014 	movt	r0, #20
  12d7f8:	ebff7638 	bl	10b0e0 <sys_arch_assert>
  while (q) {
  12d7fc:	ea000016 	b	12d85c <free_etharp_q+0xc4>
    r = q;
  12d800:	e51b3010 	ldr	r3, [fp, #-16]
  12d804:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d808:	e51b3010 	ldr	r3, [fp, #-16]
  12d80c:	e5933000 	ldr	r3, [r3]
  12d810:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d814:	e51b3008 	ldr	r3, [fp, #-8]
  12d818:	e5933004 	ldr	r3, [r3, #4]
  12d81c:	e3530000 	cmp	r3, #0
  12d820:	1a000006 	bne	12d840 <free_etharp_q+0xa8>
  12d824:	e3090288 	movw	r0, #37512	; 0x9288
  12d828:	e3400014 	movt	r0, #20
  12d82c:	ebff5638 	bl	103114 <rt_kprintf>
  12d830:	e3a0109c 	mov	r1, #156	; 0x9c
  12d834:	e3090244 	movw	r0, #37444	; 0x9244
  12d838:	e3400014 	movt	r0, #20
  12d83c:	ebff7627 	bl	10b0e0 <sys_arch_assert>
    pbuf_free(r->p);
  12d840:	e51b3008 	ldr	r3, [fp, #-8]
  12d844:	e5933004 	ldr	r3, [r3, #4]
  12d848:	e1a00003 	mov	r0, r3
  12d84c:	ebffb593 	bl	11aea0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d850:	e51b1008 	ldr	r1, [fp, #-8]
  12d854:	e3a0000b 	mov	r0, #11
  12d858:	ebffae82 	bl	119268 <memp_free>
  while (q) {
  12d85c:	e51b3010 	ldr	r3, [fp, #-16]
  12d860:	e3530000 	cmp	r3, #0
  12d864:	1affffe5 	bne	12d800 <free_etharp_q+0x68>
  }
}
  12d868:	e320f000 	nop	{0}
  12d86c:	e24bd004 	sub	sp, fp, #4
  12d870:	e8bd8800 	pop	{fp, pc}

0012d874 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d874:	e92d4800 	push	{fp, lr}
  12d878:	e28db004 	add	fp, sp, #4
  12d87c:	e24dd008 	sub	sp, sp, #8
  12d880:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d884:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d888:	e3403014 	movt	r3, #20
  12d88c:	e51b2008 	ldr	r2, [fp, #-8]
  12d890:	e3a01018 	mov	r1, #24
  12d894:	e0020291 	mul	r2, r1, r2
  12d898:	e0833002 	add	r3, r3, r2
  12d89c:	e5933000 	ldr	r3, [r3]
  12d8a0:	e3530000 	cmp	r3, #0
  12d8a4:	0a000010 	beq	12d8ec <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d8a8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d8ac:	e3403014 	movt	r3, #20
  12d8b0:	e51b2008 	ldr	r2, [fp, #-8]
  12d8b4:	e3a01018 	mov	r1, #24
  12d8b8:	e0020291 	mul	r2, r1, r2
  12d8bc:	e0833002 	add	r3, r3, r2
  12d8c0:	e5933000 	ldr	r3, [r3]
  12d8c4:	e1a00003 	mov	r0, r3
  12d8c8:	ebffffb2 	bl	12d798 <free_etharp_q>
    arp_table[i].q = NULL;
  12d8cc:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d8d0:	e3403014 	movt	r3, #20
  12d8d4:	e51b2008 	ldr	r2, [fp, #-8]
  12d8d8:	e3a01018 	mov	r1, #24
  12d8dc:	e0020291 	mul	r2, r1, r2
  12d8e0:	e0833002 	add	r3, r3, r2
  12d8e4:	e3a02000 	mov	r2, #0
  12d8e8:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d8ec:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d8f0:	e3403014 	movt	r3, #20
  12d8f4:	e51b2008 	ldr	r2, [fp, #-8]
  12d8f8:	e3a01018 	mov	r1, #24
  12d8fc:	e0020291 	mul	r2, r1, r2
  12d900:	e0833002 	add	r3, r3, r2
  12d904:	e2833014 	add	r3, r3, #20
  12d908:	e3a02000 	mov	r2, #0
  12d90c:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d910:	e320f000 	nop	{0}
  12d914:	e24bd004 	sub	sp, fp, #4
  12d918:	e8bd8800 	pop	{fp, pc}

0012d91c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d91c:	e92d4800 	push	{fp, lr}
  12d920:	e28db004 	add	fp, sp, #4
  12d924:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d928:	e3a03000 	mov	r3, #0
  12d92c:	e54b3005 	strb	r3, [fp, #-5]
  12d930:	ea000084 	b	12db48 <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d934:	e55b2005 	ldrb	r2, [fp, #-5]
  12d938:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d93c:	e3403014 	movt	r3, #20
  12d940:	e3a01018 	mov	r1, #24
  12d944:	e0020291 	mul	r2, r1, r2
  12d948:	e0833002 	add	r3, r3, r2
  12d94c:	e2833014 	add	r3, r3, #20
  12d950:	e5d33000 	ldrb	r3, [r3]
  12d954:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d958:	e55b3006 	ldrb	r3, [fp, #-6]
  12d95c:	e3530000 	cmp	r3, #0
  12d960:	0a000075 	beq	12db3c <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d964:	e55b2005 	ldrb	r2, [fp, #-5]
  12d968:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d96c:	e3403014 	movt	r3, #20
  12d970:	e3a01018 	mov	r1, #24
  12d974:	e0010291 	mul	r1, r1, r2
  12d978:	e0833001 	add	r3, r3, r1
  12d97c:	e2833012 	add	r3, r3, #18
  12d980:	e1d330b0 	ldrh	r3, [r3]
  12d984:	e2833001 	add	r3, r3, #1
  12d988:	e6ff1073 	uxth	r1, r3
  12d98c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d990:	e3403014 	movt	r3, #20
  12d994:	e3a00018 	mov	r0, #24
  12d998:	e0020290 	mul	r2, r0, r2
  12d99c:	e0833002 	add	r3, r3, r2
  12d9a0:	e2833012 	add	r3, r3, #18
  12d9a4:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d9a8:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9ac:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d9b0:	e3403014 	movt	r3, #20
  12d9b4:	e3a01018 	mov	r1, #24
  12d9b8:	e0020291 	mul	r2, r1, r2
  12d9bc:	e0833002 	add	r3, r3, r2
  12d9c0:	e2833012 	add	r3, r3, #18
  12d9c4:	e1d330b0 	ldrh	r3, [r3]
  12d9c8:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d9cc:	2a000013 	bcs	12da20 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d9d0:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9d4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12d9d8:	e3403014 	movt	r3, #20
  12d9dc:	e3a01018 	mov	r1, #24
  12d9e0:	e0020291 	mul	r2, r1, r2
  12d9e4:	e0833002 	add	r3, r3, r2
  12d9e8:	e2833014 	add	r3, r3, #20
  12d9ec:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d9f0:	e3530001 	cmp	r3, #1
  12d9f4:	1a00000d 	bne	12da30 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12d9f8:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9fc:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12da00:	e3403014 	movt	r3, #20
  12da04:	e3a01018 	mov	r1, #24
  12da08:	e0020291 	mul	r2, r1, r2
  12da0c:	e0833002 	add	r3, r3, r2
  12da10:	e2833012 	add	r3, r3, #18
  12da14:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12da18:	e3530004 	cmp	r3, #4
  12da1c:	9a000003 	bls	12da30 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12da20:	e55b3005 	ldrb	r3, [fp, #-5]
  12da24:	e1a00003 	mov	r0, r3
  12da28:	ebffff91 	bl	12d874 <etharp_free_entry>
  12da2c:	ea000042 	b	12db3c <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12da30:	e55b2005 	ldrb	r2, [fp, #-5]
  12da34:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12da38:	e3403014 	movt	r3, #20
  12da3c:	e3a01018 	mov	r1, #24
  12da40:	e0020291 	mul	r2, r1, r2
  12da44:	e0833002 	add	r3, r3, r2
  12da48:	e2833014 	add	r3, r3, #20
  12da4c:	e5d33000 	ldrb	r3, [r3]
  12da50:	e3530003 	cmp	r3, #3
  12da54:	1a000009 	bne	12da80 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12da58:	e55b2005 	ldrb	r2, [fp, #-5]
  12da5c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12da60:	e3403014 	movt	r3, #20
  12da64:	e3a01018 	mov	r1, #24
  12da68:	e0020291 	mul	r2, r1, r2
  12da6c:	e0833002 	add	r3, r3, r2
  12da70:	e2833014 	add	r3, r3, #20
  12da74:	e3a02004 	mov	r2, #4
  12da78:	e5c32000 	strb	r2, [r3]
  12da7c:	ea00002e 	b	12db3c <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12da80:	e55b2005 	ldrb	r2, [fp, #-5]
  12da84:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12da88:	e3403014 	movt	r3, #20
  12da8c:	e3a01018 	mov	r1, #24
  12da90:	e0020291 	mul	r2, r1, r2
  12da94:	e0833002 	add	r3, r3, r2
  12da98:	e2833014 	add	r3, r3, #20
  12da9c:	e5d33000 	ldrb	r3, [r3]
  12daa0:	e3530004 	cmp	r3, #4
  12daa4:	1a000009 	bne	12dad0 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12daa8:	e55b2005 	ldrb	r2, [fp, #-5]
  12daac:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dab0:	e3403014 	movt	r3, #20
  12dab4:	e3a01018 	mov	r1, #24
  12dab8:	e0020291 	mul	r2, r1, r2
  12dabc:	e0833002 	add	r3, r3, r2
  12dac0:	e2833014 	add	r3, r3, #20
  12dac4:	e3a02002 	mov	r2, #2
  12dac8:	e5c32000 	strb	r2, [r3]
  12dacc:	ea00001a 	b	12db3c <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12dad0:	e55b2005 	ldrb	r2, [fp, #-5]
  12dad4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dad8:	e3403014 	movt	r3, #20
  12dadc:	e3a01018 	mov	r1, #24
  12dae0:	e0020291 	mul	r2, r1, r2
  12dae4:	e0833002 	add	r3, r3, r2
  12dae8:	e2833014 	add	r3, r3, #20
  12daec:	e5d33000 	ldrb	r3, [r3]
  12daf0:	e3530001 	cmp	r3, #1
  12daf4:	1a000010 	bne	12db3c <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12daf8:	e55b2005 	ldrb	r2, [fp, #-5]
  12dafc:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12db00:	e3403014 	movt	r3, #20
  12db04:	e3a01018 	mov	r1, #24
  12db08:	e0020291 	mul	r2, r1, r2
  12db0c:	e0833002 	add	r3, r3, r2
  12db10:	e2833008 	add	r3, r3, #8
  12db14:	e5930000 	ldr	r0, [r3]
  12db18:	e55b3005 	ldrb	r3, [fp, #-5]
  12db1c:	e3a02018 	mov	r2, #24
  12db20:	e0020392 	mul	r2, r2, r3
  12db24:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12db28:	e3403014 	movt	r3, #20
  12db2c:	e0823003 	add	r3, r2, r3
  12db30:	e2833004 	add	r3, r3, #4
  12db34:	e1a01003 	mov	r1, r3
  12db38:	eb00066b 	bl	12f4ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12db3c:	e55b3005 	ldrb	r3, [fp, #-5]
  12db40:	e2833001 	add	r3, r3, #1
  12db44:	e54b3005 	strb	r3, [fp, #-5]
  12db48:	e55b3005 	ldrb	r3, [fp, #-5]
  12db4c:	e3530009 	cmp	r3, #9
  12db50:	9affff77 	bls	12d934 <etharp_tmr+0x18>
      }
    }
  }
}
  12db54:	e320f000 	nop	{0}
  12db58:	e24bd004 	sub	sp, fp, #4
  12db5c:	e8bd8800 	pop	{fp, pc}

0012db60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12db60:	e92d4800 	push	{fp, lr}
  12db64:	e28db004 	add	fp, sp, #4
  12db68:	e24dd020 	sub	sp, sp, #32
  12db6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12db70:	e1a03001 	mov	r3, r1
  12db74:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12db78:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12db7c:	e3a0300a 	mov	r3, #10
  12db80:	e54b3005 	strb	r3, [fp, #-5]
  12db84:	e3a0300a 	mov	r3, #10
  12db88:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12db8c:	e3a0300a 	mov	r3, #10
  12db90:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12db94:	e3a03000 	mov	r3, #0
  12db98:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12db9c:	e3a0300a 	mov	r3, #10
  12dba0:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12dba4:	e3a03000 	mov	r3, #0
  12dba8:	e14b30bc 	strh	r3, [fp, #-12]
  12dbac:	e3a03000 	mov	r3, #0
  12dbb0:	e14b30be 	strh	r3, [fp, #-14]
  12dbb4:	e3a03000 	mov	r3, #0
  12dbb8:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dbbc:	e3a03000 	mov	r3, #0
  12dbc0:	e54b3008 	strb	r3, [fp, #-8]
  12dbc4:	ea000088 	b	12ddec <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12dbc8:	e55b2008 	ldrb	r2, [fp, #-8]
  12dbcc:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dbd0:	e3403014 	movt	r3, #20
  12dbd4:	e3a01018 	mov	r1, #24
  12dbd8:	e0020291 	mul	r2, r1, r2
  12dbdc:	e0833002 	add	r3, r3, r2
  12dbe0:	e2833014 	add	r3, r3, #20
  12dbe4:	e5d33000 	ldrb	r3, [r3]
  12dbe8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12dbec:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12dbf0:	e353000a 	cmp	r3, #10
  12dbf4:	1a000005 	bne	12dc10 <etharp_find_entry+0xb0>
  12dbf8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dbfc:	e3530000 	cmp	r3, #0
  12dc00:	1a000002 	bne	12dc10 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12dc04:	e55b3008 	ldrb	r3, [fp, #-8]
  12dc08:	e54b3007 	strb	r3, [fp, #-7]
  12dc0c:	ea000073 	b	12dde0 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12dc10:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc14:	e3530000 	cmp	r3, #0
  12dc18:	0a000070 	beq	12dde0 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12dc1c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc20:	e3530001 	cmp	r3, #1
  12dc24:	0a000009 	beq	12dc50 <etharp_find_entry+0xf0>
  12dc28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc2c:	e3530001 	cmp	r3, #1
  12dc30:	8a000006 	bhi	12dc50 <etharp_find_entry+0xf0>
  12dc34:	e3090298 	movw	r0, #37528	; 0x9298
  12dc38:	e3400014 	movt	r0, #20
  12dc3c:	ebff5534 	bl	103114 <rt_kprintf>
  12dc40:	e3001126 	movw	r1, #294	; 0x126
  12dc44:	e3090244 	movw	r0, #37444	; 0x9244
  12dc48:	e3400014 	movt	r0, #20
  12dc4c:	ebff7523 	bl	10b0e0 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12dc50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc54:	e3530000 	cmp	r3, #0
  12dc58:	0a00000d 	beq	12dc94 <etharp_find_entry+0x134>
  12dc5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc60:	e5932000 	ldr	r2, [r3]
  12dc64:	e55b1008 	ldrb	r1, [fp, #-8]
  12dc68:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dc6c:	e3403014 	movt	r3, #20
  12dc70:	e3a00018 	mov	r0, #24
  12dc74:	e0010190 	mul	r1, r0, r1
  12dc78:	e0833001 	add	r3, r3, r1
  12dc7c:	e2833004 	add	r3, r3, #4
  12dc80:	e5933000 	ldr	r3, [r3]
  12dc84:	e1520003 	cmp	r2, r3
  12dc88:	1a000001 	bne	12dc94 <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12dc8c:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12dc90:	ea0000ce 	b	12dfd0 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12dc94:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc98:	e3530001 	cmp	r3, #1
  12dc9c:	1a000036 	bne	12dd7c <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12dca0:	e55b2008 	ldrb	r2, [fp, #-8]
  12dca4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dca8:	e3403014 	movt	r3, #20
  12dcac:	e3a01018 	mov	r1, #24
  12dcb0:	e0020291 	mul	r2, r1, r2
  12dcb4:	e0833002 	add	r3, r3, r2
  12dcb8:	e5933000 	ldr	r3, [r3]
  12dcbc:	e3530000 	cmp	r3, #0
  12dcc0:	0a000016 	beq	12dd20 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12dcc4:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcc8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dccc:	e3403014 	movt	r3, #20
  12dcd0:	e3a01018 	mov	r1, #24
  12dcd4:	e0020291 	mul	r2, r1, r2
  12dcd8:	e0833002 	add	r3, r3, r2
  12dcdc:	e2833012 	add	r3, r3, #18
  12dce0:	e1d330b0 	ldrh	r3, [r3]
  12dce4:	e15b20bc 	ldrh	r2, [fp, #-12]
  12dce8:	e1520003 	cmp	r2, r3
  12dcec:	8a00003b 	bhi	12dde0 <etharp_find_entry+0x280>
            old_queue = i;
  12dcf0:	e55b3008 	ldrb	r3, [fp, #-8]
  12dcf4:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12dcf8:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcfc:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dd00:	e3403014 	movt	r3, #20
  12dd04:	e3a01018 	mov	r1, #24
  12dd08:	e0020291 	mul	r2, r1, r2
  12dd0c:	e0833002 	add	r3, r3, r2
  12dd10:	e2833012 	add	r3, r3, #18
  12dd14:	e1d330b0 	ldrh	r3, [r3]
  12dd18:	e14b30bc 	strh	r3, [fp, #-12]
  12dd1c:	ea00002f 	b	12dde0 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12dd20:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd24:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dd28:	e3403014 	movt	r3, #20
  12dd2c:	e3a01018 	mov	r1, #24
  12dd30:	e0020291 	mul	r2, r1, r2
  12dd34:	e0833002 	add	r3, r3, r2
  12dd38:	e2833012 	add	r3, r3, #18
  12dd3c:	e1d330b0 	ldrh	r3, [r3]
  12dd40:	e15b20be 	ldrh	r2, [fp, #-14]
  12dd44:	e1520003 	cmp	r2, r3
  12dd48:	8a000024 	bhi	12dde0 <etharp_find_entry+0x280>
            old_pending = i;
  12dd4c:	e55b3008 	ldrb	r3, [fp, #-8]
  12dd50:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12dd54:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd58:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dd5c:	e3403014 	movt	r3, #20
  12dd60:	e3a01018 	mov	r1, #24
  12dd64:	e0020291 	mul	r2, r1, r2
  12dd68:	e0833002 	add	r3, r3, r2
  12dd6c:	e2833012 	add	r3, r3, #18
  12dd70:	e1d330b0 	ldrh	r3, [r3]
  12dd74:	e14b30be 	strh	r3, [fp, #-14]
  12dd78:	ea000018 	b	12dde0 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12dd7c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dd80:	e3530001 	cmp	r3, #1
  12dd84:	9a000015 	bls	12dde0 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12dd88:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd8c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dd90:	e3403014 	movt	r3, #20
  12dd94:	e3a01018 	mov	r1, #24
  12dd98:	e0020291 	mul	r2, r1, r2
  12dd9c:	e0833002 	add	r3, r3, r2
  12dda0:	e2833012 	add	r3, r3, #18
  12dda4:	e1d330b0 	ldrh	r3, [r3]
  12dda8:	e15b21b0 	ldrh	r2, [fp, #-16]
  12ddac:	e1520003 	cmp	r2, r3
  12ddb0:	8a00000a 	bhi	12dde0 <etharp_find_entry+0x280>
            old_stable = i;
  12ddb4:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddb8:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12ddbc:	e55b2008 	ldrb	r2, [fp, #-8]
  12ddc0:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ddc4:	e3403014 	movt	r3, #20
  12ddc8:	e3a01018 	mov	r1, #24
  12ddcc:	e0020291 	mul	r2, r1, r2
  12ddd0:	e0833002 	add	r3, r3, r2
  12ddd4:	e2833012 	add	r3, r3, #18
  12ddd8:	e1d330b0 	ldrh	r3, [r3]
  12dddc:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dde0:	e55b3008 	ldrb	r3, [fp, #-8]
  12dde4:	e2833001 	add	r3, r3, #1
  12dde8:	e54b3008 	strb	r3, [fp, #-8]
  12ddec:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddf0:	e3530009 	cmp	r3, #9
  12ddf4:	9affff73 	bls	12dbc8 <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12ddf8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12ddfc:	e2033002 	and	r3, r3, #2
  12de00:	e3530000 	cmp	r3, #0
  12de04:	1a000006 	bne	12de24 <etharp_find_entry+0x2c4>
  12de08:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12de0c:	e353000a 	cmp	r3, #10
  12de10:	1a000005 	bne	12de2c <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12de14:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12de18:	e2033001 	and	r3, r3, #1
  12de1c:	e3530000 	cmp	r3, #0
  12de20:	1a000001 	bne	12de2c <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12de24:	e3e03000 	mvn	r3, #0
  12de28:	ea000068 	b	12dfd0 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12de2c:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12de30:	e3530009 	cmp	r3, #9
  12de34:	ca000002 	bgt	12de44 <etharp_find_entry+0x2e4>
    i = empty;
  12de38:	e55b3007 	ldrb	r3, [fp, #-7]
  12de3c:	e54b3008 	strb	r3, [fp, #-8]
  12de40:	ea000030 	b	12df08 <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12de44:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12de48:	e3530009 	cmp	r3, #9
  12de4c:	ca000012 	bgt	12de9c <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12de50:	e55b3006 	ldrb	r3, [fp, #-6]
  12de54:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12de58:	e55b2008 	ldrb	r2, [fp, #-8]
  12de5c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12de60:	e3403014 	movt	r3, #20
  12de64:	e3a01018 	mov	r1, #24
  12de68:	e0020291 	mul	r2, r1, r2
  12de6c:	e0833002 	add	r3, r3, r2
  12de70:	e5933000 	ldr	r3, [r3]
  12de74:	e3530000 	cmp	r3, #0
  12de78:	0a000015 	beq	12ded4 <etharp_find_entry+0x374>
  12de7c:	e30902d8 	movw	r0, #37592	; 0x92d8
  12de80:	e3400014 	movt	r0, #20
  12de84:	ebff54a2 	bl	103114 <rt_kprintf>
  12de88:	e300116f 	movw	r1, #367	; 0x16f
  12de8c:	e3090244 	movw	r0, #37444	; 0x9244
  12de90:	e3400014 	movt	r0, #20
  12de94:	ebff7491 	bl	10b0e0 <sys_arch_assert>
  12de98:	ea00000d 	b	12ded4 <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12de9c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dea0:	e3530009 	cmp	r3, #9
  12dea4:	ca000002 	bgt	12deb4 <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12dea8:	e55b3005 	ldrb	r3, [fp, #-5]
  12deac:	e54b3008 	strb	r3, [fp, #-8]
  12deb0:	ea000007 	b	12ded4 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12deb4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12deb8:	e3530009 	cmp	r3, #9
  12debc:	ca000002 	bgt	12decc <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12dec0:	e55b3009 	ldrb	r3, [fp, #-9]
  12dec4:	e54b3008 	strb	r3, [fp, #-8]
  12dec8:	ea000001 	b	12ded4 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12decc:	e3e03000 	mvn	r3, #0
  12ded0:	ea00003e 	b	12dfd0 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12ded4:	e55b3008 	ldrb	r3, [fp, #-8]
  12ded8:	e3530009 	cmp	r3, #9
  12dedc:	9a000006 	bls	12defc <etharp_find_entry+0x39c>
  12dee0:	e30902f0 	movw	r0, #37616	; 0x92f0
  12dee4:	e3400014 	movt	r0, #20
  12dee8:	ebff5489 	bl	103114 <rt_kprintf>
  12deec:	e3001181 	movw	r1, #385	; 0x181
  12def0:	e3090244 	movw	r0, #37444	; 0x9244
  12def4:	e3400014 	movt	r0, #20
  12def8:	ebff7478 	bl	10b0e0 <sys_arch_assert>
    etharp_free_entry(i);
  12defc:	e55b3008 	ldrb	r3, [fp, #-8]
  12df00:	e1a00003 	mov	r0, r3
  12df04:	ebfffe5a 	bl	12d874 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12df08:	e55b3008 	ldrb	r3, [fp, #-8]
  12df0c:	e3530009 	cmp	r3, #9
  12df10:	9a000006 	bls	12df30 <etharp_find_entry+0x3d0>
  12df14:	e30902f0 	movw	r0, #37616	; 0x92f0
  12df18:	e3400014 	movt	r0, #20
  12df1c:	ebff547c 	bl	103114 <rt_kprintf>
  12df20:	e3001185 	movw	r1, #389	; 0x185
  12df24:	e3090244 	movw	r0, #37444	; 0x9244
  12df28:	e3400014 	movt	r0, #20
  12df2c:	ebff746b 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12df30:	e55b2008 	ldrb	r2, [fp, #-8]
  12df34:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12df38:	e3403014 	movt	r3, #20
  12df3c:	e3a01018 	mov	r1, #24
  12df40:	e0020291 	mul	r2, r1, r2
  12df44:	e0833002 	add	r3, r3, r2
  12df48:	e2833014 	add	r3, r3, #20
  12df4c:	e5d33000 	ldrb	r3, [r3]
  12df50:	e3530000 	cmp	r3, #0
  12df54:	0a000006 	beq	12df74 <etharp_find_entry+0x414>
  12df58:	e3090304 	movw	r0, #37636	; 0x9304
  12df5c:	e3400014 	movt	r0, #20
  12df60:	ebff546b 	bl	103114 <rt_kprintf>
  12df64:	e3001187 	movw	r1, #391	; 0x187
  12df68:	e3090244 	movw	r0, #37444	; 0x9244
  12df6c:	e3400014 	movt	r0, #20
  12df70:	ebff745a 	bl	10b0e0 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12df74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df78:	e3530000 	cmp	r3, #0
  12df7c:	0a000009 	beq	12dfa8 <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12df80:	e55b1008 	ldrb	r1, [fp, #-8]
  12df84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df88:	e5932000 	ldr	r2, [r3]
  12df8c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12df90:	e3403014 	movt	r3, #20
  12df94:	e3a00018 	mov	r0, #24
  12df98:	e0010190 	mul	r1, r0, r1
  12df9c:	e0833001 	add	r3, r3, r1
  12dfa0:	e2833004 	add	r3, r3, #4
  12dfa4:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12dfa8:	e55b2008 	ldrb	r2, [fp, #-8]
  12dfac:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12dfb0:	e3403014 	movt	r3, #20
  12dfb4:	e3a01018 	mov	r1, #24
  12dfb8:	e0020291 	mul	r2, r1, r2
  12dfbc:	e0833002 	add	r3, r3, r2
  12dfc0:	e2833012 	add	r3, r3, #18
  12dfc4:	e3a02000 	mov	r2, #0
  12dfc8:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12dfcc:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12dfd0:	e1a00003 	mov	r0, r3
  12dfd4:	e24bd004 	sub	sp, fp, #4
  12dfd8:	e8bd8800 	pop	{fp, pc}

0012dfdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12dfdc:	e92d4800 	push	{fp, lr}
  12dfe0:	e28db004 	add	fp, sp, #4
  12dfe4:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dfe8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dfec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12dff0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12dff4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12dff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dffc:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12e000:	e3530006 	cmp	r3, #6
  12e004:	0a000006 	beq	12e024 <etharp_update_arp_entry+0x48>
  12e008:	e3090330 	movw	r0, #37680	; 0x9330
  12e00c:	e3400014 	movt	r0, #20
  12e010:	ebff543f 	bl	103114 <rt_kprintf>
  12e014:	e30011ab 	movw	r1, #427	; 0x1ab
  12e018:	e3090244 	movw	r0, #37444	; 0x9244
  12e01c:	e3400014 	movt	r0, #20
  12e020:	ebff742e 	bl	10b0e0 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12e024:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e028:	e3530000 	cmp	r3, #0
  12e02c:	0a000010 	beq	12e074 <etharp_update_arp_entry+0x98>
  12e030:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e034:	e5933000 	ldr	r3, [r3]
  12e038:	e3530000 	cmp	r3, #0
  12e03c:	0a00000c 	beq	12e074 <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e040:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e044:	e5933000 	ldr	r3, [r3]
  12e048:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e04c:	e1a00003 	mov	r0, r3
  12e050:	eb00112a 	bl	132500 <ip4_addr_isbroadcast_u32>
  12e054:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12e058:	e3530000 	cmp	r3, #0
  12e05c:	1a000004 	bne	12e074 <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12e060:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e064:	e5933000 	ldr	r3, [r3]
  12e068:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e06c:	e35300e0 	cmp	r3, #224	; 0xe0
  12e070:	1a000001 	bne	12e07c <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12e074:	e3e0300f 	mvn	r3, #15
  12e078:	ea00005e 	b	12e1f8 <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12e07c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12e080:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e084:	e1a01003 	mov	r1, r3
  12e088:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e08c:	ebfffeb3 	bl	12db60 <etharp_find_entry>
  12e090:	e1a03000 	mov	r3, r0
  12e094:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12e098:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e09c:	e3530000 	cmp	r3, #0
  12e0a0:	aa000001 	bge	12e0ac <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12e0a4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0a8:	ea000052 	b	12e1f8 <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12e0ac:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0b0:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e0b4:	e3403014 	movt	r3, #20
  12e0b8:	e3a01018 	mov	r1, #24
  12e0bc:	e0020291 	mul	r2, r1, r2
  12e0c0:	e0833002 	add	r3, r3, r2
  12e0c4:	e2833014 	add	r3, r3, #20
  12e0c8:	e3a02002 	mov	r2, #2
  12e0cc:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12e0d0:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0d4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e0d8:	e3403014 	movt	r3, #20
  12e0dc:	e3a01018 	mov	r1, #24
  12e0e0:	e0020291 	mul	r2, r1, r2
  12e0e4:	e0833002 	add	r3, r3, r2
  12e0e8:	e2833008 	add	r3, r3, #8
  12e0ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e0f0:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12e0f4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0f8:	e3a02018 	mov	r2, #24
  12e0fc:	e0030392 	mul	r3, r2, r3
  12e100:	e2832008 	add	r2, r3, #8
  12e104:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e108:	e3403014 	movt	r3, #20
  12e10c:	e0823003 	add	r3, r2, r3
  12e110:	e2833004 	add	r3, r3, #4
  12e114:	e3a02006 	mov	r2, #6
  12e118:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12e11c:	e1a00003 	mov	r0, r3
  12e120:	eb004b17 	bl	140d84 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12e124:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e128:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e12c:	e3403014 	movt	r3, #20
  12e130:	e3a01018 	mov	r1, #24
  12e134:	e0020291 	mul	r2, r1, r2
  12e138:	e0833002 	add	r3, r3, r2
  12e13c:	e2833012 	add	r3, r3, #18
  12e140:	e3a02000 	mov	r2, #0
  12e144:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12e148:	ea000020 	b	12e1d0 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12e14c:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e150:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e154:	e3403014 	movt	r3, #20
  12e158:	e3a01018 	mov	r1, #24
  12e15c:	e0020291 	mul	r2, r1, r2
  12e160:	e0833002 	add	r3, r3, r2
  12e164:	e5933000 	ldr	r3, [r3]
  12e168:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12e16c:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12e170:	e51b300c 	ldr	r3, [fp, #-12]
  12e174:	e5932000 	ldr	r2, [r3]
  12e178:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e17c:	e3403014 	movt	r3, #20
  12e180:	e3a00018 	mov	r0, #24
  12e184:	e0010190 	mul	r1, r0, r1
  12e188:	e0833001 	add	r3, r3, r1
  12e18c:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12e190:	e51b300c 	ldr	r3, [fp, #-12]
  12e194:	e5933004 	ldr	r3, [r3, #4]
  12e198:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12e19c:	e51b100c 	ldr	r1, [fp, #-12]
  12e1a0:	e3a0000b 	mov	r0, #11
  12e1a4:	ebffac2f 	bl	119268 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12e1a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e1ac:	e283203b 	add	r2, r3, #59	; 0x3b
  12e1b0:	e3a03b02 	mov	r3, #2048	; 0x800
  12e1b4:	e58d3000 	str	r3, [sp]
  12e1b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e1bc:	e51b1010 	ldr	r1, [fp, #-16]
  12e1c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e1c4:	ebffeb48 	bl	128eec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12e1c8:	e51b0010 	ldr	r0, [fp, #-16]
  12e1cc:	ebffb333 	bl	11aea0 <pbuf_free>
  while (arp_table[i].q != NULL) {
  12e1d0:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e1d4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e1d8:	e3403014 	movt	r3, #20
  12e1dc:	e3a01018 	mov	r1, #24
  12e1e0:	e0020291 	mul	r2, r1, r2
  12e1e4:	e0833002 	add	r3, r3, r2
  12e1e8:	e5933000 	ldr	r3, [r3]
  12e1ec:	e3530000 	cmp	r3, #0
  12e1f0:	1affffd5 	bne	12e14c <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12e1f4:	e3a03000 	mov	r3, #0
}
  12e1f8:	e1a00003 	mov	r0, r3
  12e1fc:	e24bd004 	sub	sp, fp, #4
  12e200:	e8bd8800 	pop	{fp, pc}

0012e204 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12e204:	e92d4800 	push	{fp, lr}
  12e208:	e28db004 	add	fp, sp, #4
  12e20c:	e24dd010 	sub	sp, sp, #16
  12e210:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e214:	e3a03000 	mov	r3, #0
  12e218:	e54b3005 	strb	r3, [fp, #-5]
  12e21c:	ea00001c 	b	12e294 <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12e220:	e55b2005 	ldrb	r2, [fp, #-5]
  12e224:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e228:	e3403014 	movt	r3, #20
  12e22c:	e3a01018 	mov	r1, #24
  12e230:	e0020291 	mul	r2, r1, r2
  12e234:	e0833002 	add	r3, r3, r2
  12e238:	e2833014 	add	r3, r3, #20
  12e23c:	e5d33000 	ldrb	r3, [r3]
  12e240:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12e244:	e55b3006 	ldrb	r3, [fp, #-6]
  12e248:	e3530000 	cmp	r3, #0
  12e24c:	0a00000d 	beq	12e288 <etharp_cleanup_netif+0x84>
  12e250:	e55b2005 	ldrb	r2, [fp, #-5]
  12e254:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e258:	e3403014 	movt	r3, #20
  12e25c:	e3a01018 	mov	r1, #24
  12e260:	e0020291 	mul	r2, r1, r2
  12e264:	e0833002 	add	r3, r3, r2
  12e268:	e2833008 	add	r3, r3, #8
  12e26c:	e5933000 	ldr	r3, [r3]
  12e270:	e51b2010 	ldr	r2, [fp, #-16]
  12e274:	e1520003 	cmp	r2, r3
  12e278:	1a000002 	bne	12e288 <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12e27c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e280:	e1a00003 	mov	r0, r3
  12e284:	ebfffd7a 	bl	12d874 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e288:	e55b3005 	ldrb	r3, [fp, #-5]
  12e28c:	e2833001 	add	r3, r3, #1
  12e290:	e54b3005 	strb	r3, [fp, #-5]
  12e294:	e55b3005 	ldrb	r3, [fp, #-5]
  12e298:	e3530009 	cmp	r3, #9
  12e29c:	9affffdf 	bls	12e220 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12e2a0:	e320f000 	nop	{0}
  12e2a4:	e24bd004 	sub	sp, fp, #4
  12e2a8:	e8bd8800 	pop	{fp, pc}

0012e2ac <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12e2ac:	e92d4800 	push	{fp, lr}
  12e2b0:	e28db004 	add	fp, sp, #4
  12e2b4:	e24dd018 	sub	sp, sp, #24
  12e2b8:	e50b0010 	str	r0, [fp, #-16]
  12e2bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12e2c0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12e2c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12e2c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e2cc:	e3530000 	cmp	r3, #0
  12e2d0:	0a000002 	beq	12e2e0 <etharp_find_addr+0x34>
  12e2d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e2d8:	e3530000 	cmp	r3, #0
  12e2dc:	1a000006 	bne	12e2fc <etharp_find_addr+0x50>
  12e2e0:	e3090354 	movw	r0, #37716	; 0x9354
  12e2e4:	e3400014 	movt	r0, #20
  12e2e8:	ebff5389 	bl	103114 <rt_kprintf>
  12e2ec:	e300124d 	movw	r1, #589	; 0x24d
  12e2f0:	e3090244 	movw	r0, #37444	; 0x9244
  12e2f4:	e3400014 	movt	r0, #20
  12e2f8:	ebff7378 	bl	10b0e0 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12e2fc:	e51b2010 	ldr	r2, [fp, #-16]
  12e300:	e3a01002 	mov	r1, #2
  12e304:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12e308:	ebfffe14 	bl	12db60 <etharp_find_entry>
  12e30c:	e1a03000 	mov	r3, r0
  12e310:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e314:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e318:	e3530000 	cmp	r3, #0
  12e31c:	ba00001e 	blt	12e39c <etharp_find_addr+0xf0>
  12e320:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e324:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e328:	e3403014 	movt	r3, #20
  12e32c:	e3a01018 	mov	r1, #24
  12e330:	e0020291 	mul	r2, r1, r2
  12e334:	e0833002 	add	r3, r3, r2
  12e338:	e2833014 	add	r3, r3, #20
  12e33c:	e5d33000 	ldrb	r3, [r3]
  12e340:	e3530001 	cmp	r3, #1
  12e344:	9a000014 	bls	12e39c <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12e348:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e34c:	e3a02018 	mov	r2, #24
  12e350:	e0030392 	mul	r3, r2, r3
  12e354:	e2832008 	add	r2, r3, #8
  12e358:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e35c:	e3403014 	movt	r3, #20
  12e360:	e0823003 	add	r3, r2, r3
  12e364:	e2832004 	add	r2, r3, #4
  12e368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e36c:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12e370:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e374:	e3a02018 	mov	r2, #24
  12e378:	e0020392 	mul	r2, r2, r3
  12e37c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e380:	e3403014 	movt	r3, #20
  12e384:	e0823003 	add	r3, r2, r3
  12e388:	e2832004 	add	r2, r3, #4
  12e38c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e390:	e5832000 	str	r2, [r3]
      return i;
  12e394:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e398:	ea000000 	b	12e3a0 <etharp_find_addr+0xf4>
  }
  return -1;
  12e39c:	e3e03000 	mvn	r3, #0
}
  12e3a0:	e1a00003 	mov	r0, r3
  12e3a4:	e24bd004 	sub	sp, fp, #4
  12e3a8:	e8bd8800 	pop	{fp, pc}

0012e3ac <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e3ac:	e92d4800 	push	{fp, lr}
  12e3b0:	e28db004 	add	fp, sp, #4
  12e3b4:	e24dd010 	sub	sp, sp, #16
  12e3b8:	e50b100c 	str	r1, [fp, #-12]
  12e3bc:	e50b2010 	str	r2, [fp, #-16]
  12e3c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e3c4:	e1a03000 	mov	r3, r0
  12e3c8:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e3cc:	e51b300c 	ldr	r3, [fp, #-12]
  12e3d0:	e3530000 	cmp	r3, #0
  12e3d4:	1a000006 	bne	12e3f4 <etharp_get_entry+0x48>
  12e3d8:	e3090378 	movw	r0, #37752	; 0x9378
  12e3dc:	e3400014 	movt	r0, #20
  12e3e0:	ebff534b 	bl	103114 <rt_kprintf>
  12e3e4:	e3001266 	movw	r1, #614	; 0x266
  12e3e8:	e3090244 	movw	r0, #37444	; 0x9244
  12e3ec:	e3400014 	movt	r0, #20
  12e3f0:	ebff733a 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e3f4:	e51b3010 	ldr	r3, [fp, #-16]
  12e3f8:	e3530000 	cmp	r3, #0
  12e3fc:	1a000006 	bne	12e41c <etharp_get_entry+0x70>
  12e400:	e3090388 	movw	r0, #37768	; 0x9388
  12e404:	e3400014 	movt	r0, #20
  12e408:	ebff5341 	bl	103114 <rt_kprintf>
  12e40c:	e3001267 	movw	r1, #615	; 0x267
  12e410:	e3090244 	movw	r0, #37444	; 0x9244
  12e414:	e3400014 	movt	r0, #20
  12e418:	ebff7330 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e41c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e420:	e3530000 	cmp	r3, #0
  12e424:	1a000006 	bne	12e444 <etharp_get_entry+0x98>
  12e428:	e3090398 	movw	r0, #37784	; 0x9398
  12e42c:	e3400014 	movt	r0, #20
  12e430:	ebff5337 	bl	103114 <rt_kprintf>
  12e434:	e3a01f9a 	mov	r1, #616	; 0x268
  12e438:	e3090244 	movw	r0, #37444	; 0x9244
  12e43c:	e3400014 	movt	r0, #20
  12e440:	ebff7326 	bl	10b0e0 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e444:	e55b3005 	ldrb	r3, [fp, #-5]
  12e448:	e3530009 	cmp	r3, #9
  12e44c:	8a000028 	bhi	12e4f4 <etharp_get_entry+0x148>
  12e450:	e55b2005 	ldrb	r2, [fp, #-5]
  12e454:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e458:	e3403014 	movt	r3, #20
  12e45c:	e3a01018 	mov	r1, #24
  12e460:	e0020291 	mul	r2, r1, r2
  12e464:	e0833002 	add	r3, r3, r2
  12e468:	e2833014 	add	r3, r3, #20
  12e46c:	e5d33000 	ldrb	r3, [r3]
  12e470:	e3530001 	cmp	r3, #1
  12e474:	9a00001e 	bls	12e4f4 <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e478:	e55b3005 	ldrb	r3, [fp, #-5]
  12e47c:	e3a02018 	mov	r2, #24
  12e480:	e0020392 	mul	r2, r2, r3
  12e484:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e488:	e3403014 	movt	r3, #20
  12e48c:	e0823003 	add	r3, r2, r3
  12e490:	e2832004 	add	r2, r3, #4
  12e494:	e51b300c 	ldr	r3, [fp, #-12]
  12e498:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e49c:	e55b2005 	ldrb	r2, [fp, #-5]
  12e4a0:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e4a4:	e3403014 	movt	r3, #20
  12e4a8:	e3a01018 	mov	r1, #24
  12e4ac:	e0020291 	mul	r2, r1, r2
  12e4b0:	e0833002 	add	r3, r3, r2
  12e4b4:	e2833008 	add	r3, r3, #8
  12e4b8:	e5932000 	ldr	r2, [r3]
  12e4bc:	e51b3010 	ldr	r3, [fp, #-16]
  12e4c0:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e4c4:	e55b3005 	ldrb	r3, [fp, #-5]
  12e4c8:	e3a02018 	mov	r2, #24
  12e4cc:	e0030392 	mul	r3, r2, r3
  12e4d0:	e2832008 	add	r2, r3, #8
  12e4d4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e4d8:	e3403014 	movt	r3, #20
  12e4dc:	e0823003 	add	r3, r2, r3
  12e4e0:	e2832004 	add	r2, r3, #4
  12e4e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e4e8:	e5832000 	str	r2, [r3]
    return 1;
  12e4ec:	e3a03001 	mov	r3, #1
  12e4f0:	ea000000 	b	12e4f8 <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e4f4:	e3a03000 	mov	r3, #0
  }
}
  12e4f8:	e1a00003 	mov	r0, r3
  12e4fc:	e24bd004 	sub	sp, fp, #4
  12e500:	e8bd8800 	pop	{fp, pc}

0012e504 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e504:	e92d4800 	push	{fp, lr}
  12e508:	e28db004 	add	fp, sp, #4
  12e50c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e510:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e514:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e518:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e51c:	e3530000 	cmp	r3, #0
  12e520:	1a000007 	bne	12e544 <etharp_input+0x40>
  12e524:	e3090388 	movw	r0, #37768	; 0x9388
  12e528:	e3400014 	movt	r0, #20
  12e52c:	ebff52f8 	bl	103114 <rt_kprintf>
  12e530:	e3a01fa2 	mov	r1, #648	; 0x288
  12e534:	e3090244 	movw	r0, #37444	; 0x9244
  12e538:	e3400014 	movt	r0, #20
  12e53c:	ebff72e7 	bl	10b0e0 <sys_arch_assert>
  12e540:	ea000085 	b	12e75c <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e548:	e5933004 	ldr	r3, [r3, #4]
  12e54c:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e550:	e51b300c 	ldr	r3, [fp, #-12]
  12e554:	e1d330b0 	ldrh	r3, [r3]
  12e558:	e6ff3073 	uxth	r3, r3
  12e55c:	e3530c01 	cmp	r3, #256	; 0x100
  12e560:	1a00000c 	bne	12e598 <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e564:	e51b300c 	ldr	r3, [fp, #-12]
  12e568:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e56c:	e3530006 	cmp	r3, #6
  12e570:	1a000008 	bne	12e598 <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e574:	e51b300c 	ldr	r3, [fp, #-12]
  12e578:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e57c:	e3530004 	cmp	r3, #4
  12e580:	1a000004 	bne	12e598 <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e584:	e51b300c 	ldr	r3, [fp, #-12]
  12e588:	e1d330b2 	ldrh	r3, [r3, #2]
  12e58c:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e590:	e3530008 	cmp	r3, #8
  12e594:	0a000012 	beq	12e5e4 <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e598:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e59c:	e3403015 	movt	r3, #21
  12e5a0:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e5a4:	e2833001 	add	r3, r3, #1
  12e5a8:	e6ff2073 	uxth	r2, r3
  12e5ac:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e5b0:	e3403015 	movt	r3, #21
  12e5b4:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e5b8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e5bc:	e3403015 	movt	r3, #21
  12e5c0:	e1d331be 	ldrh	r3, [r3, #30]
  12e5c4:	e2833001 	add	r3, r3, #1
  12e5c8:	e6ff2073 	uxth	r2, r3
  12e5cc:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e5d0:	e3403015 	movt	r3, #21
  12e5d4:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e5d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e5dc:	ebffb22f 	bl	11aea0 <pbuf_free>
    return;
  12e5e0:	ea00005d 	b	12e75c <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e5e4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e5e8:	e3403015 	movt	r3, #21
  12e5ec:	e1d331ba 	ldrh	r3, [r3, #26]
  12e5f0:	e2833001 	add	r3, r3, #1
  12e5f4:	e6ff2073 	uxth	r2, r3
  12e5f8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e5fc:	e3403015 	movt	r3, #21
  12e600:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e604:	e51b300c 	ldr	r3, [fp, #-12]
  12e608:	e283300e 	add	r3, r3, #14
  12e60c:	e5933000 	ldr	r3, [r3]
  12e610:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e614:	e51b300c 	ldr	r3, [fp, #-12]
  12e618:	e2833018 	add	r3, r3, #24
  12e61c:	e5933000 	ldr	r3, [r3]
  12e620:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e624:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e628:	e2833004 	add	r3, r3, #4
  12e62c:	e5933000 	ldr	r3, [r3]
  12e630:	e3530000 	cmp	r3, #0
  12e634:	1a000002 	bne	12e644 <etharp_input+0x140>
    for_us = 0;
  12e638:	e3a03000 	mov	r3, #0
  12e63c:	e54b3005 	strb	r3, [fp, #-5]
  12e640:	ea000008 	b	12e668 <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e644:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e648:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e64c:	e2833004 	add	r3, r3, #4
  12e650:	e5933000 	ldr	r3, [r3]
  12e654:	e1520003 	cmp	r2, r3
  12e658:	03a03001 	moveq	r3, #1
  12e65c:	13a03000 	movne	r3, #0
  12e660:	e6ef3073 	uxtb	r3, r3
  12e664:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e668:	e51b300c 	ldr	r3, [fp, #-12]
  12e66c:	e2832008 	add	r2, r3, #8
  12e670:	e55b3005 	ldrb	r3, [fp, #-5]
  12e674:	e3530000 	cmp	r3, #0
  12e678:	0a000001 	beq	12e684 <etharp_input+0x180>
  12e67c:	e3a03001 	mov	r3, #1
  12e680:	ea000000 	b	12e688 <etharp_input+0x184>
  12e684:	e3a03002 	mov	r3, #2
  12e688:	e24b1010 	sub	r1, fp, #16
  12e68c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e690:	ebfffe51 	bl	12dfdc <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e694:	e51b300c 	ldr	r3, [fp, #-12]
  12e698:	e1d330b6 	ldrh	r3, [r3, #6]
  12e69c:	e6ff3073 	uxth	r3, r3
  12e6a0:	e3530c01 	cmp	r3, #256	; 0x100
  12e6a4:	0a000002 	beq	12e6b4 <etharp_input+0x1b0>
  12e6a8:	e3530c02 	cmp	r3, #512	; 0x200
  12e6ac:	0a000019 	beq	12e718 <etharp_input+0x214>
  12e6b0:	ea00001d 	b	12e72c <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e6b4:	e55b3005 	ldrb	r3, [fp, #-5]
  12e6b8:	e3530000 	cmp	r3, #0
  12e6bc:	0a000023 	beq	12e750 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e6c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6c4:	e283003b 	add	r0, r3, #59	; 0x3b
  12e6c8:	e51b300c 	ldr	r3, [fp, #-12]
  12e6cc:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e6d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6d4:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e6d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6dc:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e6e0:	e51b200c 	ldr	r2, [fp, #-12]
  12e6e4:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e6e8:	e3a01002 	mov	r1, #2
  12e6ec:	e58d100c 	str	r1, [sp, #12]
  12e6f0:	e24b1010 	sub	r1, fp, #16
  12e6f4:	e58d1008 	str	r1, [sp, #8]
  12e6f8:	e58d2004 	str	r2, [sp, #4]
  12e6fc:	e58d3000 	str	r3, [sp]
  12e700:	e1a0300e 	mov	r3, lr
  12e704:	e1a0200c 	mov	r2, ip
  12e708:	e1a01000 	mov	r1, r0
  12e70c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e710:	eb0002d5 	bl	12f26c <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e714:	ea00000d 	b	12e750 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e718:	e24b3010 	sub	r3, fp, #16
  12e71c:	e1a01003 	mov	r1, r3
  12e720:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e724:	ebfff256 	bl	12b084 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e728:	ea000009 	b	12e754 <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e72c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e730:	e3403015 	movt	r3, #21
  12e734:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e738:	e2833001 	add	r3, r3, #1
  12e73c:	e6ff2073 	uxth	r2, r3
  12e740:	e30c3a50 	movw	r3, #51792	; 0xca50
  12e744:	e3403015 	movt	r3, #21
  12e748:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e74c:	ea000000 	b	12e754 <etharp_input+0x250>
    break;
  12e750:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e754:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e758:	ebffb1d0 	bl	11aea0 <pbuf_free>
}
  12e75c:	e24bd004 	sub	sp, fp, #4
  12e760:	e8bd8800 	pop	{fp, pc}

0012e764 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e764:	e92d4800 	push	{fp, lr}
  12e768:	e28db004 	add	fp, sp, #4
  12e76c:	e24dd018 	sub	sp, sp, #24
  12e770:	e50b0008 	str	r0, [fp, #-8]
  12e774:	e50b100c 	str	r1, [fp, #-12]
  12e778:	e1a03002 	mov	r3, r2
  12e77c:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e780:	e55b200d 	ldrb	r2, [fp, #-13]
  12e784:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e788:	e3403014 	movt	r3, #20
  12e78c:	e3a01018 	mov	r1, #24
  12e790:	e0020291 	mul	r2, r1, r2
  12e794:	e0833002 	add	r3, r3, r2
  12e798:	e2833014 	add	r3, r3, #20
  12e79c:	e5d33000 	ldrb	r3, [r3]
  12e7a0:	e3530001 	cmp	r3, #1
  12e7a4:	8a000006 	bhi	12e7c4 <etharp_output_to_arp_index+0x60>
  12e7a8:	e30903a8 	movw	r0, #37800	; 0x93a8
  12e7ac:	e3400014 	movt	r0, #20
  12e7b0:	ebff5257 	bl	103114 <rt_kprintf>
  12e7b4:	e30012ed 	movw	r1, #749	; 0x2ed
  12e7b8:	e3090244 	movw	r0, #37444	; 0x9244
  12e7bc:	e3400014 	movt	r0, #20
  12e7c0:	ebff7246 	bl	10b0e0 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e7c4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e7c8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e7cc:	e3403014 	movt	r3, #20
  12e7d0:	e3a01018 	mov	r1, #24
  12e7d4:	e0020291 	mul	r2, r1, r2
  12e7d8:	e0833002 	add	r3, r3, r2
  12e7dc:	e2833014 	add	r3, r3, #20
  12e7e0:	e5d33000 	ldrb	r3, [r3]
  12e7e4:	e3530002 	cmp	r3, #2
  12e7e8:	1a000049 	bne	12e914 <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e7ec:	e55b200d 	ldrb	r2, [fp, #-13]
  12e7f0:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e7f4:	e3403014 	movt	r3, #20
  12e7f8:	e3a01018 	mov	r1, #24
  12e7fc:	e0020291 	mul	r2, r1, r2
  12e800:	e0833002 	add	r3, r3, r2
  12e804:	e2833012 	add	r3, r3, #18
  12e808:	e1d330b0 	ldrh	r3, [r3]
  12e80c:	e3530f47 	cmp	r3, #284	; 0x11c
  12e810:	9a000016 	bls	12e870 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e814:	e55b300d 	ldrb	r3, [fp, #-13]
  12e818:	e3a02018 	mov	r2, #24
  12e81c:	e0020392 	mul	r2, r2, r3
  12e820:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e824:	e3403014 	movt	r3, #20
  12e828:	e0823003 	add	r3, r2, r3
  12e82c:	e2833004 	add	r3, r3, #4
  12e830:	e1a01003 	mov	r1, r3
  12e834:	e51b0008 	ldr	r0, [fp, #-8]
  12e838:	eb00032b 	bl	12f4ec <etharp_request>
  12e83c:	e1a03000 	mov	r3, r0
  12e840:	e3530000 	cmp	r3, #0
  12e844:	1a000032 	bne	12e914 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e848:	e55b200d 	ldrb	r2, [fp, #-13]
  12e84c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e850:	e3403014 	movt	r3, #20
  12e854:	e3a01018 	mov	r1, #24
  12e858:	e0020291 	mul	r2, r1, r2
  12e85c:	e0833002 	add	r3, r3, r2
  12e860:	e2833014 	add	r3, r3, #20
  12e864:	e3a02003 	mov	r2, #3
  12e868:	e5c32000 	strb	r2, [r3]
  12e86c:	ea000028 	b	12e914 <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e870:	e55b200d 	ldrb	r2, [fp, #-13]
  12e874:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e878:	e3403014 	movt	r3, #20
  12e87c:	e3a01018 	mov	r1, #24
  12e880:	e0020291 	mul	r2, r1, r2
  12e884:	e0833002 	add	r3, r3, r2
  12e888:	e2833012 	add	r3, r3, #18
  12e88c:	e1d330b0 	ldrh	r3, [r3]
  12e890:	e300210d 	movw	r2, #269	; 0x10d
  12e894:	e1530002 	cmp	r3, r2
  12e898:	9a00001d 	bls	12e914 <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e89c:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8a0:	e3a02018 	mov	r2, #24
  12e8a4:	e0020392 	mul	r2, r2, r3
  12e8a8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e8ac:	e3403014 	movt	r3, #20
  12e8b0:	e0823003 	add	r3, r2, r3
  12e8b4:	e2831004 	add	r1, r3, #4
  12e8b8:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8bc:	e3a02018 	mov	r2, #24
  12e8c0:	e0030392 	mul	r3, r2, r3
  12e8c4:	e2832008 	add	r2, r3, #8
  12e8c8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e8cc:	e3403014 	movt	r3, #20
  12e8d0:	e0823003 	add	r3, r2, r3
  12e8d4:	e2833004 	add	r3, r3, #4
  12e8d8:	e1a02003 	mov	r2, r3
  12e8dc:	e51b0008 	ldr	r0, [fp, #-8]
  12e8e0:	eb0002e5 	bl	12f47c <etharp_request_dst>
  12e8e4:	e1a03000 	mov	r3, r0
  12e8e8:	e3530000 	cmp	r3, #0
  12e8ec:	1a000008 	bne	12e914 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e8f0:	e55b200d 	ldrb	r2, [fp, #-13]
  12e8f4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e8f8:	e3403014 	movt	r3, #20
  12e8fc:	e3a01018 	mov	r1, #24
  12e900:	e0020291 	mul	r2, r1, r2
  12e904:	e0833002 	add	r3, r3, r2
  12e908:	e2833014 	add	r3, r3, #20
  12e90c:	e3a02003 	mov	r2, #3
  12e910:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e914:	e51b3008 	ldr	r3, [fp, #-8]
  12e918:	e283103b 	add	r1, r3, #59	; 0x3b
  12e91c:	e55b300d 	ldrb	r3, [fp, #-13]
  12e920:	e3a02018 	mov	r2, #24
  12e924:	e0030392 	mul	r3, r2, r3
  12e928:	e2832008 	add	r2, r3, #8
  12e92c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12e930:	e3403014 	movt	r3, #20
  12e934:	e0823003 	add	r3, r2, r3
  12e938:	e2832004 	add	r2, r3, #4
  12e93c:	e3a03b02 	mov	r3, #2048	; 0x800
  12e940:	e58d3000 	str	r3, [sp]
  12e944:	e1a03002 	mov	r3, r2
  12e948:	e1a02001 	mov	r2, r1
  12e94c:	e51b100c 	ldr	r1, [fp, #-12]
  12e950:	e51b0008 	ldr	r0, [fp, #-8]
  12e954:	ebffe964 	bl	128eec <ethernet_output>
  12e958:	e1a03000 	mov	r3, r0
}
  12e95c:	e1a00003 	mov	r0, r3
  12e960:	e24bd004 	sub	sp, fp, #4
  12e964:	e8bd8800 	pop	{fp, pc}

0012e968 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e968:	e92d4800 	push	{fp, lr}
  12e96c:	e28db004 	add	fp, sp, #4
  12e970:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e974:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e978:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e97c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e984:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e98c:	e3530000 	cmp	r3, #0
  12e990:	1a000006 	bne	12e9b0 <etharp_output+0x48>
  12e994:	e3090388 	movw	r0, #37768	; 0x9388
  12e998:	e3400014 	movt	r0, #20
  12e99c:	ebff51dc 	bl	103114 <rt_kprintf>
  12e9a0:	e300131b 	movw	r1, #795	; 0x31b
  12e9a4:	e3090244 	movw	r0, #37444	; 0x9244
  12e9a8:	e3400014 	movt	r0, #20
  12e9ac:	ebff71cb 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e9b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e9b4:	e3530000 	cmp	r3, #0
  12e9b8:	1a000006 	bne	12e9d8 <etharp_output+0x70>
  12e9bc:	e3090238 	movw	r0, #37432	; 0x9238
  12e9c0:	e3400014 	movt	r0, #20
  12e9c4:	ebff51d2 	bl	103114 <rt_kprintf>
  12e9c8:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e9cc:	e3090244 	movw	r0, #37444	; 0x9244
  12e9d0:	e3400014 	movt	r0, #20
  12e9d4:	ebff71c1 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e9d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e9dc:	e3530000 	cmp	r3, #0
  12e9e0:	1a000006 	bne	12ea00 <etharp_output+0x98>
  12e9e4:	e3090378 	movw	r0, #37752	; 0x9378
  12e9e8:	e3400014 	movt	r0, #20
  12e9ec:	ebff51c8 	bl	103114 <rt_kprintf>
  12e9f0:	e300131d 	movw	r1, #797	; 0x31d
  12e9f4:	e3090244 	movw	r0, #37444	; 0x9244
  12e9f8:	e3400014 	movt	r0, #20
  12e9fc:	ebff71b7 	bl	10b0e0 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12ea00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea04:	e5933000 	ldr	r3, [r3]
  12ea08:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12ea0c:	e1a00003 	mov	r0, r3
  12ea10:	eb000eba 	bl	132500 <ip4_addr_isbroadcast_u32>
  12ea14:	e1a03000 	mov	r3, r0
  12ea18:	e3530000 	cmp	r3, #0
  12ea1c:	0a000003 	beq	12ea30 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12ea20:	e3083b20 	movw	r3, #35616	; 0x8b20
  12ea24:	e3403014 	movt	r3, #20
  12ea28:	e50b3008 	str	r3, [fp, #-8]
  12ea2c:	ea000097 	b	12ec90 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12ea30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea34:	e5933000 	ldr	r3, [r3]
  12ea38:	e20330f0 	and	r3, r3, #240	; 0xf0
  12ea3c:	e35300e0 	cmp	r3, #224	; 0xe0
  12ea40:	1a000016 	bne	12eaa0 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12ea44:	e3a03001 	mov	r3, #1
  12ea48:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12ea4c:	e3a03000 	mov	r3, #0
  12ea50:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12ea54:	e3a0305e 	mov	r3, #94	; 0x5e
  12ea58:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12ea5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea60:	e2833001 	add	r3, r3, #1
  12ea64:	e5d33000 	ldrb	r3, [r3]
  12ea68:	e203307f 	and	r3, r3, #127	; 0x7f
  12ea6c:	e6ef3073 	uxtb	r3, r3
  12ea70:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12ea74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea78:	e2833002 	add	r3, r3, #2
  12ea7c:	e5d33000 	ldrb	r3, [r3]
  12ea80:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12ea84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea88:	e2833003 	add	r3, r3, #3
  12ea8c:	e5d33000 	ldrb	r3, [r3]
  12ea90:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12ea94:	e24b3014 	sub	r3, fp, #20
  12ea98:	e50b3008 	str	r3, [fp, #-8]
  12ea9c:	ea00007b 	b	12ec90 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12eaa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12eaa4:	e5932000 	ldr	r2, [r3]
  12eaa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eaac:	e2833004 	add	r3, r3, #4
  12eab0:	e5933000 	ldr	r3, [r3]
  12eab4:	e0222003 	eor	r2, r2, r3
  12eab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eabc:	e2833008 	add	r3, r3, #8
  12eac0:	e5933000 	ldr	r3, [r3]
  12eac4:	e0033002 	and	r3, r3, r2
  12eac8:	e3530000 	cmp	r3, #0
  12eacc:	0a000010 	beq	12eb14 <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12ead0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ead4:	e5933000 	ldr	r3, [r3]
  12ead8:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12eadc:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12eae0:	e1530002 	cmp	r3, r2
  12eae4:	0a00000a 	beq	12eb14 <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12eae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eaec:	e283300c 	add	r3, r3, #12
  12eaf0:	e5933000 	ldr	r3, [r3]
  12eaf4:	e3530000 	cmp	r3, #0
  12eaf8:	0a000003 	beq	12eb0c <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12eafc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eb00:	e283300c 	add	r3, r3, #12
  12eb04:	e50b300c 	str	r3, [fp, #-12]
  12eb08:	ea000001 	b	12eb14 <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12eb0c:	e3e03003 	mvn	r3, #3
  12eb10:	ea000067 	b	12ecb4 <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eb14:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  12eb18:	e3403014 	movt	r3, #20
  12eb1c:	e5d33000 	ldrb	r3, [r3]
  12eb20:	e1a01003 	mov	r1, r3
  12eb24:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12eb28:	e3403014 	movt	r3, #20
  12eb2c:	e3a02018 	mov	r2, #24
  12eb30:	e0020192 	mul	r2, r2, r1
  12eb34:	e0833002 	add	r3, r3, r2
  12eb38:	e2833014 	add	r3, r3, #20
  12eb3c:	e5d33000 	ldrb	r3, [r3]
  12eb40:	e3530001 	cmp	r3, #1
  12eb44:	9a00001f 	bls	12ebc8 <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12eb48:	e51b300c 	ldr	r3, [fp, #-12]
  12eb4c:	e5932000 	ldr	r2, [r3]
  12eb50:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  12eb54:	e3403014 	movt	r3, #20
  12eb58:	e5d33000 	ldrb	r3, [r3]
  12eb5c:	e1a00003 	mov	r0, r3
  12eb60:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12eb64:	e3403014 	movt	r3, #20
  12eb68:	e3a01018 	mov	r1, #24
  12eb6c:	e0010091 	mul	r1, r1, r0
  12eb70:	e0833001 	add	r3, r3, r1
  12eb74:	e2833004 	add	r3, r3, #4
  12eb78:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eb7c:	e1520003 	cmp	r2, r3
  12eb80:	1a000010 	bne	12ebc8 <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12eb84:	e30c3a50 	movw	r3, #51792	; 0xca50
  12eb88:	e3403015 	movt	r3, #21
  12eb8c:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12eb90:	e2833001 	add	r3, r3, #1
  12eb94:	e6ff2073 	uxth	r2, r3
  12eb98:	e30c3a50 	movw	r3, #51792	; 0xca50
  12eb9c:	e3403015 	movt	r3, #21
  12eba0:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12eba4:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  12eba8:	e3403014 	movt	r3, #20
  12ebac:	e5d33000 	ldrb	r3, [r3]
  12ebb0:	e1a02003 	mov	r2, r3
  12ebb4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ebb8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ebbc:	ebfffee8 	bl	12e764 <etharp_output_to_arp_index>
  12ebc0:	e1a03000 	mov	r3, r0
  12ebc4:	ea00003a 	b	12ecb4 <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ebc8:	e3a03000 	mov	r3, #0
  12ebcc:	e54b300d 	strb	r3, [fp, #-13]
  12ebd0:	ea000025 	b	12ec6c <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ebd4:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12ebd8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ebdc:	e3403014 	movt	r3, #20
  12ebe0:	e3a01018 	mov	r1, #24
  12ebe4:	e0020291 	mul	r2, r1, r2
  12ebe8:	e0833002 	add	r3, r3, r2
  12ebec:	e2833014 	add	r3, r3, #20
  12ebf0:	e5d33000 	ldrb	r3, [r3]
  12ebf4:	e3530001 	cmp	r3, #1
  12ebf8:	9a000016 	bls	12ec58 <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12ebfc:	e51b300c 	ldr	r3, [fp, #-12]
  12ec00:	e5932000 	ldr	r2, [r3]
  12ec04:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12ec08:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ec0c:	e3403014 	movt	r3, #20
  12ec10:	e3a00018 	mov	r0, #24
  12ec14:	e0010190 	mul	r1, r0, r1
  12ec18:	e0833001 	add	r3, r3, r1
  12ec1c:	e2833004 	add	r3, r3, #4
  12ec20:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ec24:	e1520003 	cmp	r2, r3
  12ec28:	1a00000a 	bne	12ec58 <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12ec2c:	e55b200d 	ldrb	r2, [fp, #-13]
  12ec30:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  12ec34:	e3403014 	movt	r3, #20
  12ec38:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12ec3c:	e55b300d 	ldrb	r3, [fp, #-13]
  12ec40:	e1a02003 	mov	r2, r3
  12ec44:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ec48:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec4c:	ebfffec4 	bl	12e764 <etharp_output_to_arp_index>
  12ec50:	e1a03000 	mov	r3, r0
  12ec54:	ea000016 	b	12ecb4 <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ec58:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec5c:	e6ef3073 	uxtb	r3, r3
  12ec60:	e2833001 	add	r3, r3, #1
  12ec64:	e6ef3073 	uxtb	r3, r3
  12ec68:	e54b300d 	strb	r3, [fp, #-13]
  12ec6c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec70:	e3530009 	cmp	r3, #9
  12ec74:	daffffd6 	ble	12ebd4 <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12ec78:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12ec7c:	e51b100c 	ldr	r1, [fp, #-12]
  12ec80:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec84:	eb00000d 	bl	12ecc0 <etharp_query>
  12ec88:	e1a03000 	mov	r3, r0
  12ec8c:	ea000008 	b	12ecb4 <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12ec90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ec94:	e283203b 	add	r2, r3, #59	; 0x3b
  12ec98:	e3a03b02 	mov	r3, #2048	; 0x800
  12ec9c:	e58d3000 	str	r3, [sp]
  12eca0:	e51b3008 	ldr	r3, [fp, #-8]
  12eca4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12eca8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ecac:	ebffe88e 	bl	128eec <ethernet_output>
  12ecb0:	e1a03000 	mov	r3, r0
}
  12ecb4:	e1a00003 	mov	r0, r3
  12ecb8:	e24bd004 	sub	sp, fp, #4
  12ecbc:	e8bd8800 	pop	{fp, pc}

0012ecc0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12ecc0:	e92d4800 	push	{fp, lr}
  12ecc4:	e28db004 	add	fp, sp, #4
  12ecc8:	e24dd040 	sub	sp, sp, #64	; 0x40
  12eccc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12ecd0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12ecd4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12ecd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ecdc:	e283303b 	add	r3, r3, #59	; 0x3b
  12ece0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12ece4:	e3e03000 	mvn	r3, #0
  12ece8:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12ecec:	e3a03000 	mov	r3, #0
  12ecf0:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ecf4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ecf8:	e5933000 	ldr	r3, [r3]
  12ecfc:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12ed00:	e1a00003 	mov	r0, r3
  12ed04:	eb000dfd 	bl	132500 <ip4_addr_isbroadcast_u32>
  12ed08:	e1a03000 	mov	r3, r0
  12ed0c:	e3530000 	cmp	r3, #0
  12ed10:	1a00000b 	bne	12ed44 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ed14:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed18:	e5933000 	ldr	r3, [r3]
  12ed1c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ed20:	e35300e0 	cmp	r3, #224	; 0xe0
  12ed24:	0a000006 	beq	12ed44 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ed28:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed2c:	e3530000 	cmp	r3, #0
  12ed30:	0a000003 	beq	12ed44 <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12ed34:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed38:	e5933000 	ldr	r3, [r3]
  12ed3c:	e3530000 	cmp	r3, #0
  12ed40:	1a000001 	bne	12ed4c <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ed44:	e3e0300f 	mvn	r3, #15
  12ed48:	ea000144 	b	12f260 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12ed4c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ed50:	e3a01001 	mov	r1, #1
  12ed54:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12ed58:	ebfffb80 	bl	12db60 <etharp_find_entry>
  12ed5c:	e1a03000 	mov	r3, r0
  12ed60:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12ed64:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ed68:	e3530000 	cmp	r3, #0
  12ed6c:	aa00000c 	bge	12eda4 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12ed70:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ed74:	e3530000 	cmp	r3, #0
  12ed78:	0a000007 	beq	12ed9c <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12ed7c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12ed80:	e3403015 	movt	r3, #21
  12ed84:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ed88:	e2833001 	add	r3, r3, #1
  12ed8c:	e6ff2073 	uxth	r2, r3
  12ed90:	e30c3a50 	movw	r3, #51792	; 0xca50
  12ed94:	e3403015 	movt	r3, #21
  12ed98:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12ed9c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12eda0:	ea00012e 	b	12f260 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12eda4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eda8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12edac:	e3403014 	movt	r3, #20
  12edb0:	e3a01018 	mov	r1, #24
  12edb4:	e0020291 	mul	r2, r1, r2
  12edb8:	e0833002 	add	r3, r3, r2
  12edbc:	e2833014 	add	r3, r3, #20
  12edc0:	e5d33000 	ldrb	r3, [r3]
  12edc4:	e3530000 	cmp	r3, #0
  12edc8:	1a000013 	bne	12ee1c <etharp_query+0x15c>
    is_new_entry = 1;
  12edcc:	e3a03001 	mov	r3, #1
  12edd0:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12edd4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edd8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12eddc:	e3403014 	movt	r3, #20
  12ede0:	e3a01018 	mov	r1, #24
  12ede4:	e0020291 	mul	r2, r1, r2
  12ede8:	e0833002 	add	r3, r3, r2
  12edec:	e2833014 	add	r3, r3, #20
  12edf0:	e3a02001 	mov	r2, #1
  12edf4:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12edf8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edfc:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ee00:	e3403014 	movt	r3, #20
  12ee04:	e3a01018 	mov	r1, #24
  12ee08:	e0020291 	mul	r2, r1, r2
  12ee0c:	e0833002 	add	r3, r3, r2
  12ee10:	e2833008 	add	r3, r3, #8
  12ee14:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ee18:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12ee1c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee20:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ee24:	e3403014 	movt	r3, #20
  12ee28:	e3a01018 	mov	r1, #24
  12ee2c:	e0020291 	mul	r2, r1, r2
  12ee30:	e0833002 	add	r3, r3, r2
  12ee34:	e2833014 	add	r3, r3, #20
  12ee38:	e5d33000 	ldrb	r3, [r3]
  12ee3c:	e3530001 	cmp	r3, #1
  12ee40:	0a000010 	beq	12ee88 <etharp_query+0x1c8>
  12ee44:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee48:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ee4c:	e3403014 	movt	r3, #20
  12ee50:	e3a01018 	mov	r1, #24
  12ee54:	e0020291 	mul	r2, r1, r2
  12ee58:	e0833002 	add	r3, r3, r2
  12ee5c:	e2833014 	add	r3, r3, #20
  12ee60:	e5d33000 	ldrb	r3, [r3]
  12ee64:	e3530001 	cmp	r3, #1
  12ee68:	8a000006 	bhi	12ee88 <etharp_query+0x1c8>
  12ee6c:	e30903d8 	movw	r0, #37848	; 0x93d8
  12ee70:	e3400014 	movt	r0, #20
  12ee74:	ebff50a6 	bl	103114 <rt_kprintf>
  12ee78:	e30013c9 	movw	r1, #969	; 0x3c9
  12ee7c:	e3090244 	movw	r0, #37444	; 0x9244
  12ee80:	e3400014 	movt	r0, #20
  12ee84:	ebff7095 	bl	10b0e0 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12ee88:	e51b300c 	ldr	r3, [fp, #-12]
  12ee8c:	e3530000 	cmp	r3, #0
  12ee90:	1a000002 	bne	12eea0 <etharp_query+0x1e0>
  12ee94:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ee98:	e3530000 	cmp	r3, #0
  12ee9c:	1a000009 	bne	12eec8 <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12eea0:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12eea4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12eea8:	eb00018f 	bl	12f4ec <etharp_request>
  12eeac:	e1a03000 	mov	r3, r0
  12eeb0:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12eeb4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eeb8:	e3530000 	cmp	r3, #0
  12eebc:	1a000001 	bne	12eec8 <etharp_query+0x208>
      return result;
  12eec0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12eec4:	ea0000e5 	b	12f260 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12eec8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eecc:	e3530000 	cmp	r3, #0
  12eed0:	1a000006 	bne	12eef0 <etharp_query+0x230>
  12eed4:	e3090238 	movw	r0, #37432	; 0x9238
  12eed8:	e3400014 	movt	r0, #20
  12eedc:	ebff508c 	bl	103114 <rt_kprintf>
  12eee0:	e30013db 	movw	r1, #987	; 0x3db
  12eee4:	e3090244 	movw	r0, #37444	; 0x9244
  12eee8:	e3400014 	movt	r0, #20
  12eeec:	ebff707b 	bl	10b0e0 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12eef0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eef4:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12eef8:	e3403014 	movt	r3, #20
  12eefc:	e3a01018 	mov	r1, #24
  12ef00:	e0020291 	mul	r2, r1, r2
  12ef04:	e0833002 	add	r3, r3, r2
  12ef08:	e2833014 	add	r3, r3, #20
  12ef0c:	e5d33000 	ldrb	r3, [r3]
  12ef10:	e3530001 	cmp	r3, #1
  12ef14:	9a000015 	bls	12ef70 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12ef18:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12ef1c:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  12ef20:	e3403014 	movt	r3, #20
  12ef24:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12ef28:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ef2c:	e3a02018 	mov	r2, #24
  12ef30:	e0030392 	mul	r3, r2, r3
  12ef34:	e2832008 	add	r2, r3, #8
  12ef38:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ef3c:	e3403014 	movt	r3, #20
  12ef40:	e0823003 	add	r3, r2, r3
  12ef44:	e2832004 	add	r2, r3, #4
  12ef48:	e3a03b02 	mov	r3, #2048	; 0x800
  12ef4c:	e58d3000 	str	r3, [sp]
  12ef50:	e1a03002 	mov	r3, r2
  12ef54:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12ef58:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ef5c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ef60:	ebffe7e1 	bl	128eec <ethernet_output>
  12ef64:	e1a03000 	mov	r3, r0
  12ef68:	e54b3005 	strb	r3, [fp, #-5]
  12ef6c:	ea0000ba 	b	12f25c <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12ef70:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef74:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12ef78:	e3403014 	movt	r3, #20
  12ef7c:	e3a01018 	mov	r1, #24
  12ef80:	e0020291 	mul	r2, r1, r2
  12ef84:	e0833002 	add	r3, r3, r2
  12ef88:	e2833014 	add	r3, r3, #20
  12ef8c:	e5d33000 	ldrb	r3, [r3]
  12ef90:	e3530001 	cmp	r3, #1
  12ef94:	1a0000b0 	bne	12f25c <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12ef98:	e3a03000 	mov	r3, #0
  12ef9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12efa0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12efa4:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12efa8:	ea00001a 	b	12f018 <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12efac:	e51b3010 	ldr	r3, [fp, #-16]
  12efb0:	e1d320ba 	ldrh	r2, [r3, #10]
  12efb4:	e51b3010 	ldr	r3, [fp, #-16]
  12efb8:	e1d330b8 	ldrh	r3, [r3, #8]
  12efbc:	e1520003 	cmp	r2, r3
  12efc0:	1a00000a 	bne	12eff0 <etharp_query+0x330>
  12efc4:	e51b3010 	ldr	r3, [fp, #-16]
  12efc8:	e5933000 	ldr	r3, [r3]
  12efcc:	e3530000 	cmp	r3, #0
  12efd0:	0a000006 	beq	12eff0 <etharp_query+0x330>
  12efd4:	e3090400 	movw	r0, #37888	; 0x9400
  12efd8:	e3400014 	movt	r0, #20
  12efdc:	ebff504c 	bl	103114 <rt_kprintf>
  12efe0:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12efe4:	e3090244 	movw	r0, #37444	; 0x9244
  12efe8:	e3400014 	movt	r0, #20
  12efec:	ebff703b 	bl	10b0e0 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12eff0:	e51b3010 	ldr	r3, [fp, #-16]
  12eff4:	e5d3300c 	ldrb	r3, [r3, #12]
  12eff8:	e3530001 	cmp	r3, #1
  12effc:	0a000002 	beq	12f00c <etharp_query+0x34c>
        copy_needed = 1;
  12f000:	e3a03001 	mov	r3, #1
  12f004:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12f008:	ea000005 	b	12f024 <etharp_query+0x364>
      }
      p = p->next;
  12f00c:	e51b3010 	ldr	r3, [fp, #-16]
  12f010:	e5933000 	ldr	r3, [r3]
  12f014:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12f018:	e51b3010 	ldr	r3, [fp, #-16]
  12f01c:	e3530000 	cmp	r3, #0
  12f020:	1affffe1 	bne	12efac <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12f024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f028:	e3530000 	cmp	r3, #0
  12f02c:	0a000014 	beq	12f084 <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12f030:	e51b3010 	ldr	r3, [fp, #-16]
  12f034:	e1d330b8 	ldrh	r3, [r3, #8]
  12f038:	e3a02000 	mov	r2, #0
  12f03c:	e1a01003 	mov	r1, r3
  12f040:	e3a00002 	mov	r0, #2
  12f044:	ebffac8e 	bl	11a284 <pbuf_alloc>
  12f048:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12f04c:	e51b3010 	ldr	r3, [fp, #-16]
  12f050:	e3530000 	cmp	r3, #0
  12f054:	0a00000e 	beq	12f094 <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12f058:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12f05c:	e51b0010 	ldr	r0, [fp, #-16]
  12f060:	ebffb0e3 	bl	11b3f4 <pbuf_copy>
  12f064:	e1a03000 	mov	r3, r0
  12f068:	e3530000 	cmp	r3, #0
  12f06c:	0a000008 	beq	12f094 <etharp_query+0x3d4>
          pbuf_free(p);
  12f070:	e51b0010 	ldr	r0, [fp, #-16]
  12f074:	ebffaf89 	bl	11aea0 <pbuf_free>
          p = NULL;
  12f078:	e3a03000 	mov	r3, #0
  12f07c:	e50b3010 	str	r3, [fp, #-16]
  12f080:	ea000003 	b	12f094 <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12f084:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f088:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12f08c:	e51b0010 	ldr	r0, [fp, #-16]
  12f090:	ebffb01c 	bl	11b108 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12f094:	e51b3010 	ldr	r3, [fp, #-16]
  12f098:	e3530000 	cmp	r3, #0
  12f09c:	0a000064 	beq	12f234 <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12f0a0:	e3002407 	movw	r2, #1031	; 0x407
  12f0a4:	e3091244 	movw	r1, #37444	; 0x9244
  12f0a8:	e3401014 	movt	r1, #20
  12f0ac:	e3a0000b 	mov	r0, #11
  12f0b0:	ebffa804 	bl	1190c8 <memp_malloc_fn>
  12f0b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12f0b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0bc:	e3530000 	cmp	r3, #0
  12f0c0:	0a000056 	beq	12f220 <etharp_query+0x560>
        unsigned int qlen = 0;
  12f0c4:	e3a03000 	mov	r3, #0
  12f0c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12f0cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0d0:	e3a02000 	mov	r2, #0
  12f0d4:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12f0d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0dc:	e51b2010 	ldr	r2, [fp, #-16]
  12f0e0:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12f0e4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f0e8:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12f0ec:	e3403014 	movt	r3, #20
  12f0f0:	e3a01018 	mov	r1, #24
  12f0f4:	e0020291 	mul	r2, r1, r2
  12f0f8:	e0833002 	add	r3, r3, r2
  12f0fc:	e5933000 	ldr	r3, [r3]
  12f100:	e3530000 	cmp	r3, #0
  12f104:	0a000019 	beq	12f170 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12f108:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f10c:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12f110:	e3403014 	movt	r3, #20
  12f114:	e3a01018 	mov	r1, #24
  12f118:	e0020291 	mul	r2, r1, r2
  12f11c:	e0833002 	add	r3, r3, r2
  12f120:	e5933000 	ldr	r3, [r3]
  12f124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12f128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f12c:	e2833001 	add	r3, r3, #1
  12f130:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f134:	ea000005 	b	12f150 <etharp_query+0x490>
            r = r->next;
  12f138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f13c:	e5933000 	ldr	r3, [r3]
  12f140:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12f144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f148:	e2833001 	add	r3, r3, #1
  12f14c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f150:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f154:	e5933000 	ldr	r3, [r3]
  12f158:	e3530000 	cmp	r3, #0
  12f15c:	1afffff5 	bne	12f138 <etharp_query+0x478>
          }
          r->next = new_entry;
  12f160:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f164:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f168:	e5832000 	str	r2, [r3]
  12f16c:	ea000007 	b	12f190 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12f170:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f174:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12f178:	e3403014 	movt	r3, #20
  12f17c:	e3a01018 	mov	r1, #24
  12f180:	e0020291 	mul	r2, r1, r2
  12f184:	e0833002 	add	r3, r3, r2
  12f188:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f18c:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12f190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f194:	e3530002 	cmp	r3, #2
  12f198:	9a00001d 	bls	12f214 <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12f19c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f1a0:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12f1a4:	e3403014 	movt	r3, #20
  12f1a8:	e3a01018 	mov	r1, #24
  12f1ac:	e0020291 	mul	r2, r1, r2
  12f1b0:	e0833002 	add	r3, r3, r2
  12f1b4:	e5933000 	ldr	r3, [r3]
  12f1b8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12f1bc:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f1c0:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12f1c4:	e3403014 	movt	r3, #20
  12f1c8:	e3a01018 	mov	r1, #24
  12f1cc:	e0020291 	mul	r2, r1, r2
  12f1d0:	e0833002 	add	r3, r3, r2
  12f1d4:	e5933000 	ldr	r3, [r3]
  12f1d8:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12f1dc:	e5932000 	ldr	r2, [r3]
  12f1e0:	e30e3b00 	movw	r3, #60160	; 0xeb00
  12f1e4:	e3403014 	movt	r3, #20
  12f1e8:	e3a00018 	mov	r0, #24
  12f1ec:	e0010190 	mul	r1, r0, r1
  12f1f0:	e0833001 	add	r3, r3, r1
  12f1f4:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12f1f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f1fc:	e5933004 	ldr	r3, [r3, #4]
  12f200:	e1a00003 	mov	r0, r3
  12f204:	ebffaf25 	bl	11aea0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12f208:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12f20c:	e3a0000b 	mov	r0, #11
  12f210:	ebffa814 	bl	119268 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12f214:	e3a03000 	mov	r3, #0
  12f218:	e54b3005 	strb	r3, [fp, #-5]
  12f21c:	ea00000e 	b	12f25c <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12f220:	e51b0010 	ldr	r0, [fp, #-16]
  12f224:	ebffaf1d 	bl	11aea0 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12f228:	e3e03000 	mvn	r3, #0
  12f22c:	e54b3005 	strb	r3, [fp, #-5]
  12f230:	ea000009 	b	12f25c <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12f234:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f238:	e3403015 	movt	r3, #21
  12f23c:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f240:	e2833001 	add	r3, r3, #1
  12f244:	e6ff2073 	uxth	r2, r3
  12f248:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f24c:	e3403015 	movt	r3, #21
  12f250:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12f254:	e3e03000 	mvn	r3, #0
  12f258:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12f25c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f260:	e1a00003 	mov	r0, r3
  12f264:	e24bd004 	sub	sp, fp, #4
  12f268:	e8bd8800 	pop	{fp, pc}

0012f26c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12f26c:	e92d4800 	push	{fp, lr}
  12f270:	e28db004 	add	fp, sp, #4
  12f274:	e24dd028 	sub	sp, sp, #40	; 0x28
  12f278:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12f27c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12f280:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12f284:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12f288:	e3a03000 	mov	r3, #0
  12f28c:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12f290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f294:	e3530000 	cmp	r3, #0
  12f298:	1a000006 	bne	12f2b8 <etharp_raw+0x4c>
  12f29c:	e3090388 	movw	r0, #37768	; 0x9388
  12f2a0:	e3400014 	movt	r0, #20
  12f2a4:	ebff4f9a 	bl	103114 <rt_kprintf>
  12f2a8:	e3001458 	movw	r1, #1112	; 0x458
  12f2ac:	e3090244 	movw	r0, #37444	; 0x9244
  12f2b0:	e3400014 	movt	r0, #20
  12f2b4:	ebff6f89 	bl	10b0e0 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12f2b8:	e3a02000 	mov	r2, #0
  12f2bc:	e3a0101c 	mov	r1, #28
  12f2c0:	e3a00002 	mov	r0, #2
  12f2c4:	ebffabee 	bl	11a284 <pbuf_alloc>
  12f2c8:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12f2cc:	e51b300c 	ldr	r3, [fp, #-12]
  12f2d0:	e3530000 	cmp	r3, #0
  12f2d4:	1a000009 	bne	12f300 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12f2d8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f2dc:	e3403015 	movt	r3, #21
  12f2e0:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f2e4:	e2833001 	add	r3, r3, #1
  12f2e8:	e6ff2073 	uxth	r2, r3
  12f2ec:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f2f0:	e3403015 	movt	r3, #21
  12f2f4:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12f2f8:	e3e03000 	mvn	r3, #0
  12f2fc:	ea00005b 	b	12f470 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12f300:	e51b300c 	ldr	r3, [fp, #-12]
  12f304:	e1d330ba 	ldrh	r3, [r3, #10]
  12f308:	e353001b 	cmp	r3, #27
  12f30c:	8a000006 	bhi	12f32c <etharp_raw+0xc0>
  12f310:	e309041c 	movw	r0, #37916	; 0x941c
  12f314:	e3400014 	movt	r0, #20
  12f318:	ebff4f7d 	bl	103114 <rt_kprintf>
  12f31c:	e3001464 	movw	r1, #1124	; 0x464
  12f320:	e3090244 	movw	r0, #37444	; 0x9244
  12f324:	e3400014 	movt	r0, #20
  12f328:	ebff6f6c 	bl	10b0e0 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12f32c:	e51b300c 	ldr	r3, [fp, #-12]
  12f330:	e5933004 	ldr	r3, [r3, #4]
  12f334:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12f338:	e1db31b0 	ldrh	r3, [fp, #16]
  12f33c:	e1a00003 	mov	r0, r3
  12f340:	ebff9c9f 	bl	1165c4 <lwip_htons>
  12f344:	e1a03000 	mov	r3, r0
  12f348:	e1a02003 	mov	r2, r3
  12f34c:	e51b3010 	ldr	r3, [fp, #-16]
  12f350:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12f354:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f358:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12f35c:	e3530006 	cmp	r3, #6
  12f360:	0a000006 	beq	12f380 <etharp_raw+0x114>
  12f364:	e3090450 	movw	r0, #37968	; 0x9450
  12f368:	e3400014 	movt	r0, #20
  12f36c:	ebff4f68 	bl	103114 <rt_kprintf>
  12f370:	e300146b 	movw	r1, #1131	; 0x46b
  12f374:	e3090244 	movw	r0, #37444	; 0x9244
  12f378:	e3400014 	movt	r0, #20
  12f37c:	ebff6f57 	bl	10b0e0 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12f380:	e51b3010 	ldr	r3, [fp, #-16]
  12f384:	e2833008 	add	r3, r3, #8
  12f388:	e3a02006 	mov	r2, #6
  12f38c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12f390:	e1a00003 	mov	r0, r3
  12f394:	eb00467a 	bl	140d84 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f398:	e51b3010 	ldr	r3, [fp, #-16]
  12f39c:	e2833012 	add	r3, r3, #18
  12f3a0:	e3a02006 	mov	r2, #6
  12f3a4:	e59b1008 	ldr	r1, [fp, #8]
  12f3a8:	e1a00003 	mov	r0, r3
  12f3ac:	eb004674 	bl	140d84 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f3b0:	e51b3010 	ldr	r3, [fp, #-16]
  12f3b4:	e283300e 	add	r3, r3, #14
  12f3b8:	e59b2004 	ldr	r2, [fp, #4]
  12f3bc:	e5922000 	ldr	r2, [r2]
  12f3c0:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f3c4:	e51b3010 	ldr	r3, [fp, #-16]
  12f3c8:	e2833018 	add	r3, r3, #24
  12f3cc:	e59b200c 	ldr	r2, [fp, #12]
  12f3d0:	e5922000 	ldr	r2, [r2]
  12f3d4:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f3d8:	e51b3010 	ldr	r3, [fp, #-16]
  12f3dc:	e3a02000 	mov	r2, #0
  12f3e0:	e5c32000 	strb	r2, [r3]
  12f3e4:	e3a02000 	mov	r2, #0
  12f3e8:	e3822001 	orr	r2, r2, #1
  12f3ec:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f3f0:	e51b3010 	ldr	r3, [fp, #-16]
  12f3f4:	e3a02000 	mov	r2, #0
  12f3f8:	e3822008 	orr	r2, r2, #8
  12f3fc:	e5c32002 	strb	r2, [r3, #2]
  12f400:	e3a02000 	mov	r2, #0
  12f404:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f408:	e51b3010 	ldr	r3, [fp, #-16]
  12f40c:	e3a02006 	mov	r2, #6
  12f410:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f414:	e51b3010 	ldr	r3, [fp, #-16]
  12f418:	e3a02004 	mov	r2, #4
  12f41c:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f420:	e3003806 	movw	r3, #2054	; 0x806
  12f424:	e58d3000 	str	r3, [sp]
  12f428:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f42c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f430:	e51b100c 	ldr	r1, [fp, #-12]
  12f434:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f438:	ebffe6ab 	bl	128eec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f43c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f440:	e3403015 	movt	r3, #21
  12f444:	e1d331b8 	ldrh	r3, [r3, #24]
  12f448:	e2833001 	add	r3, r3, #1
  12f44c:	e6ff2073 	uxth	r2, r3
  12f450:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f454:	e3403015 	movt	r3, #21
  12f458:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f45c:	e51b000c 	ldr	r0, [fp, #-12]
  12f460:	ebffae8e 	bl	11aea0 <pbuf_free>
  p = NULL;
  12f464:	e3a03000 	mov	r3, #0
  12f468:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f46c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f470:	e1a00003 	mov	r0, r3
  12f474:	e24bd004 	sub	sp, fp, #4
  12f478:	e8bd8800 	pop	{fp, pc}

0012f47c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f47c:	e92d4800 	push	{fp, lr}
  12f480:	e28db004 	add	fp, sp, #4
  12f484:	e24dd020 	sub	sp, sp, #32
  12f488:	e50b0008 	str	r0, [fp, #-8]
  12f48c:	e50b100c 	str	r1, [fp, #-12]
  12f490:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f494:	e51b3008 	ldr	r3, [fp, #-8]
  12f498:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f49c:	e51b3008 	ldr	r3, [fp, #-8]
  12f4a0:	e283003b 	add	r0, r3, #59	; 0x3b
  12f4a4:	e51b3008 	ldr	r3, [fp, #-8]
  12f4a8:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f4ac:	e3a03001 	mov	r3, #1
  12f4b0:	e58d300c 	str	r3, [sp, #12]
  12f4b4:	e51b300c 	ldr	r3, [fp, #-12]
  12f4b8:	e58d3008 	str	r3, [sp, #8]
  12f4bc:	e3083b28 	movw	r3, #35624	; 0x8b28
  12f4c0:	e3403014 	movt	r3, #20
  12f4c4:	e58d3004 	str	r3, [sp, #4]
  12f4c8:	e58d2000 	str	r2, [sp]
  12f4cc:	e1a03000 	mov	r3, r0
  12f4d0:	e51b2010 	ldr	r2, [fp, #-16]
  12f4d4:	e51b0008 	ldr	r0, [fp, #-8]
  12f4d8:	ebffff63 	bl	12f26c <etharp_raw>
  12f4dc:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f4e0:	e1a00003 	mov	r0, r3
  12f4e4:	e24bd004 	sub	sp, fp, #4
  12f4e8:	e8bd8800 	pop	{fp, pc}

0012f4ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f4ec:	e92d4800 	push	{fp, lr}
  12f4f0:	e28db004 	add	fp, sp, #4
  12f4f4:	e24dd008 	sub	sp, sp, #8
  12f4f8:	e50b0008 	str	r0, [fp, #-8]
  12f4fc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f500:	e3082b20 	movw	r2, #35616	; 0x8b20
  12f504:	e3402014 	movt	r2, #20
  12f508:	e51b100c 	ldr	r1, [fp, #-12]
  12f50c:	e51b0008 	ldr	r0, [fp, #-8]
  12f510:	ebffffd9 	bl	12f47c <etharp_request_dst>
  12f514:	e1a03000 	mov	r3, r0
}
  12f518:	e1a00003 	mov	r0, r3
  12f51c:	e24bd004 	sub	sp, fp, #4
  12f520:	e8bd8800 	pop	{fp, pc}

0012f524 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f524:	e92d4800 	push	{fp, lr}
  12f528:	e28db004 	add	fp, sp, #4
  12f52c:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f530:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f534:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f538:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f53c:	e3403015 	movt	r3, #21
  12f540:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f544:	e2833001 	add	r3, r3, #1
  12f548:	e6ff2073 	uxth	r2, r3
  12f54c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f550:	e3403015 	movt	r3, #21
  12f554:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f558:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f55c:	e3403015 	movt	r3, #21
  12f560:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f564:	e2832001 	add	r2, r3, #1
  12f568:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f56c:	e3403015 	movt	r3, #21
  12f570:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f574:	e30f3618 	movw	r3, #63000	; 0xf618
  12f578:	e3403014 	movt	r3, #20
  12f57c:	e5933008 	ldr	r3, [r3, #8]
  12f580:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f584:	e51b3008 	ldr	r3, [fp, #-8]
  12f588:	e5d33000 	ldrb	r3, [r3]
  12f58c:	e6ff3073 	uxth	r3, r3
  12f590:	e203300f 	and	r3, r3, #15
  12f594:	e6ff3073 	uxth	r3, r3
  12f598:	e1a03103 	lsl	r3, r3, #2
  12f59c:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f5a0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f5a4:	e3530013 	cmp	r3, #19
  12f5a8:	9a000182 	bls	12fbb8 <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f5ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5b0:	e1d330ba 	ldrh	r3, [r3, #10]
  12f5b4:	e3530003 	cmp	r3, #3
  12f5b8:	9a000180 	bls	12fbc0 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f5bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5c0:	e5933004 	ldr	r3, [r3, #4]
  12f5c4:	e5d33000 	ldrb	r3, [r3]
  12f5c8:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f5cc:	e55b300b 	ldrb	r3, [fp, #-11]
  12f5d0:	e3530000 	cmp	r3, #0
  12f5d4:	0a000002 	beq	12f5e4 <icmp_input+0xc0>
  12f5d8:	e3530008 	cmp	r3, #8
  12f5dc:	0a000008 	beq	12f604 <icmp_input+0xe0>
  12f5e0:	ea0000fd 	b	12f9dc <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f5e4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f5e8:	e3403015 	movt	r3, #21
  12f5ec:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f5f0:	e2832001 	add	r2, r3, #1
  12f5f4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f5f8:	e3403015 	movt	r3, #21
  12f5fc:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f600:	ea000169 	b	12fbac <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f604:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f608:	e3403015 	movt	r3, #21
  12f60c:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f610:	e2832001 	add	r2, r3, #1
  12f614:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f618:	e3403015 	movt	r3, #21
  12f61c:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f620:	e59f3650 	ldr	r3, [pc, #1616]	; 12fc78 <icmp_input+0x754>
  12f624:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f628:	e30f3618 	movw	r3, #63000	; 0xf618
  12f62c:	e3403014 	movt	r3, #20
  12f630:	e5933014 	ldr	r3, [r3, #20]
  12f634:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f638:	e35300e0 	cmp	r3, #224	; 0xe0
  12f63c:	0a000174 	beq	12fc14 <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f640:	e30f3618 	movw	r3, #63000	; 0xf618
  12f644:	e3403014 	movt	r3, #20
  12f648:	e5932014 	ldr	r2, [r3, #20]
  12f64c:	e30f3618 	movw	r3, #63000	; 0xf618
  12f650:	e3403014 	movt	r3, #20
  12f654:	e5933000 	ldr	r3, [r3]
  12f658:	e1a01003 	mov	r1, r3
  12f65c:	e1a00002 	mov	r0, r2
  12f660:	eb000ba6 	bl	132500 <ip4_addr_isbroadcast_u32>
  12f664:	e1a03000 	mov	r3, r0
  12f668:	e3530000 	cmp	r3, #0
  12f66c:	1a00016a 	bne	12fc1c <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f670:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f674:	e1d330b8 	ldrh	r3, [r3, #8]
  12f678:	e3530007 	cmp	r3, #7
  12f67c:	9a000151 	bls	12fbc8 <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f680:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f684:	ebffa4ed 	bl	118a40 <inet_chksum_pbuf>
  12f688:	e1a03000 	mov	r3, r0
  12f68c:	e3530000 	cmp	r3, #0
  12f690:	0a000011 	beq	12f6dc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f694:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f698:	ebffae00 	bl	11aea0 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f69c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f6a0:	e3403015 	movt	r3, #21
  12f6a4:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f6a8:	e2833001 	add	r3, r3, #1
  12f6ac:	e6ff2073 	uxth	r2, r3
  12f6b0:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f6b4:	e3403015 	movt	r3, #21
  12f6b8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f6bc:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f6c0:	e3403015 	movt	r3, #21
  12f6c4:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f6c8:	e2832001 	add	r2, r3, #1
  12f6cc:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f6d0:	e3403015 	movt	r3, #21
  12f6d4:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f6d8:	ea000164 	b	12fc70 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f6dc:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f6e0:	e2833010 	add	r3, r3, #16
  12f6e4:	e6ff3073 	uxth	r3, r3
  12f6e8:	e6bf3073 	sxth	r3, r3
  12f6ec:	e1a01003 	mov	r1, r3
  12f6f0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f6f4:	ebffadcb 	bl	11ae28 <pbuf_header>
  12f6f8:	e1a03000 	mov	r3, r0
  12f6fc:	e3530000 	cmp	r3, #0
  12f700:	0a00003e 	beq	12f800 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f704:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f708:	e1d320b8 	ldrh	r2, [r3, #8]
  12f70c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f710:	e0823003 	add	r3, r2, r3
  12f714:	e6ff3073 	uxth	r3, r3
  12f718:	e3a02000 	mov	r2, #0
  12f71c:	e1a01003 	mov	r1, r3
  12f720:	e3a00002 	mov	r0, #2
  12f724:	ebffaad6 	bl	11a284 <pbuf_alloc>
  12f728:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f72c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f730:	e3530000 	cmp	r3, #0
  12f734:	0a00013a 	beq	12fc24 <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f738:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f73c:	e1d330ba 	ldrh	r3, [r3, #10]
  12f740:	e1a02003 	mov	r2, r3
  12f744:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f748:	e2833008 	add	r3, r3, #8
  12f74c:	e1520003 	cmp	r2, r3
  12f750:	2a000002 	bcs	12f760 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f754:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f758:	ebffadd0 	bl	11aea0 <pbuf_free>
        goto icmperr;
  12f75c:	ea000131 	b	12fc28 <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f764:	e5933004 	ldr	r3, [r3, #4]
  12f768:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f76c:	e51b1008 	ldr	r1, [fp, #-8]
  12f770:	e1a00003 	mov	r0, r3
  12f774:	eb004582 	bl	140d84 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f778:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f77c:	e2633000 	rsb	r3, r3, #0
  12f780:	e6ff3073 	uxth	r3, r3
  12f784:	e6bf3073 	sxth	r3, r3
  12f788:	e1a01003 	mov	r1, r3
  12f78c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f790:	ebffada4 	bl	11ae28 <pbuf_header>
  12f794:	e1a03000 	mov	r3, r0
  12f798:	e3530000 	cmp	r3, #0
  12f79c:	0a000009 	beq	12f7c8 <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f7a0:	e3090494 	movw	r0, #38036	; 0x9494
  12f7a4:	e3400014 	movt	r0, #20
  12f7a8:	ebff4e59 	bl	103114 <rt_kprintf>
  12f7ac:	e3a010af 	mov	r1, #175	; 0xaf
  12f7b0:	e30904cc 	movw	r0, #38092	; 0x94cc
  12f7b4:	e3400014 	movt	r0, #20
  12f7b8:	ebff6e48 	bl	10b0e0 <sys_arch_assert>
        pbuf_free(r);
  12f7bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7c0:	ebffadb6 	bl	11aea0 <pbuf_free>
        goto icmperr;
  12f7c4:	ea000117 	b	12fc28 <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f7c8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f7cc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7d0:	ebffaf07 	bl	11b3f4 <pbuf_copy>
  12f7d4:	e1a03000 	mov	r3, r0
  12f7d8:	e3530000 	cmp	r3, #0
  12f7dc:	0a000002 	beq	12f7ec <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f7e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7e4:	ebffadad 	bl	11aea0 <pbuf_free>
        goto icmperr;
  12f7e8:	ea00010e 	b	12fc28 <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f7ec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f7f0:	ebffadaa 	bl	11aea0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f7f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f7f8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f7fc:	ea000014 	b	12f854 <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f800:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f804:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f808:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f80c:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f810:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f814:	e6ff3073 	uxth	r3, r3
  12f818:	e6bf3073 	sxth	r3, r3
  12f81c:	e1a01003 	mov	r1, r3
  12f820:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f824:	ebffad7f 	bl	11ae28 <pbuf_header>
  12f828:	e1a03000 	mov	r3, r0
  12f82c:	e3530000 	cmp	r3, #0
  12f830:	0a000007 	beq	12f854 <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f834:	e3090500 	movw	r0, #38144	; 0x9500
  12f838:	e3400014 	movt	r0, #20
  12f83c:	ebff4e34 	bl	103114 <rt_kprintf>
  12f840:	e3a010c0 	mov	r1, #192	; 0xc0
  12f844:	e30904cc 	movw	r0, #38092	; 0x94cc
  12f848:	e3400014 	movt	r0, #20
  12f84c:	ebff6e23 	bl	10b0e0 <sys_arch_assert>
        goto icmperr;
  12f850:	ea0000f4 	b	12fc28 <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f854:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f858:	e5933004 	ldr	r3, [r3, #4]
  12f85c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f860:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f864:	e1a01003 	mov	r1, r3
  12f868:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f86c:	ebffad6d 	bl	11ae28 <pbuf_header>
  12f870:	e1a03000 	mov	r3, r0
  12f874:	e3530000 	cmp	r3, #0
  12f878:	1a0000ca 	bne	12fba8 <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f87c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f880:	e5933004 	ldr	r3, [r3, #4]
  12f884:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f888:	e51b3010 	ldr	r3, [fp, #-16]
  12f88c:	e5932000 	ldr	r2, [r3]
  12f890:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f894:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f898:	e30f3618 	movw	r3, #63000	; 0xf618
  12f89c:	e3403014 	movt	r3, #20
  12f8a0:	e5932010 	ldr	r2, [r3, #16]
  12f8a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f8a8:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f8ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8b0:	e3a02000 	mov	r2, #0
  12f8b4:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f8b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8bc:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8c0:	e6ff3073 	uxth	r3, r3
  12f8c4:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f8c8:	e1530002 	cmp	r3, r2
  12f8cc:	9a000007 	bls	12f8f0 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f8d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8d4:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8d8:	e6ff3073 	uxth	r3, r3
  12f8dc:	e2833009 	add	r3, r3, #9
  12f8e0:	e6ff2073 	uxth	r2, r3
  12f8e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8e8:	e1c320b2 	strh	r2, [r3, #2]
  12f8ec:	ea000006 	b	12f90c <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f8f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8f4:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8f8:	e6ff3073 	uxth	r3, r3
  12f8fc:	e2833008 	add	r3, r3, #8
  12f900:	e6ff2073 	uxth	r2, r3
  12f904:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f908:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f90c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f910:	e3e02000 	mvn	r2, #0
  12f914:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f918:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f91c:	e3a02000 	mov	r2, #0
  12f920:	e5c3200a 	strb	r2, [r3, #10]
  12f924:	e3a02000 	mov	r2, #0
  12f928:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f92c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f930:	e1a01003 	mov	r1, r3
  12f934:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f938:	ebffa430 	bl	118a00 <inet_chksum>
  12f93c:	e1a03000 	mov	r3, r0
  12f940:	e1a02003 	mov	r2, r3
  12f944:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f948:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f94c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f950:	e3403015 	movt	r3, #21
  12f954:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f958:	e2833001 	add	r3, r3, #1
  12f95c:	e6ff2073 	uxth	r2, r3
  12f960:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f964:	e3403015 	movt	r3, #21
  12f968:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f96c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f970:	e3403015 	movt	r3, #21
  12f974:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f978:	e2832001 	add	r2, r3, #1
  12f97c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f980:	e3403015 	movt	r3, #21
  12f984:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f988:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f98c:	e3403015 	movt	r3, #21
  12f990:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f994:	e2832001 	add	r2, r3, #1
  12f998:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f99c:	e3403015 	movt	r3, #21
  12f9a0:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f9a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f9a8:	e58d3008 	str	r3, [sp, #8]
  12f9ac:	e3a03001 	mov	r3, #1
  12f9b0:	e58d3004 	str	r3, [sp, #4]
  12f9b4:	e3a03000 	mov	r3, #0
  12f9b8:	e58d3000 	str	r3, [sp]
  12f9bc:	e3a030ff 	mov	r3, #255	; 0xff
  12f9c0:	e3a02000 	mov	r2, #0
  12f9c4:	e51b1010 	ldr	r1, [fp, #-16]
  12f9c8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f9cc:	eb0008c5 	bl	131ce8 <ip4_output_if>
  12f9d0:	e1a03000 	mov	r3, r0
  12f9d4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f9d8:	ea000072 	b	12fba8 <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f9dc:	e55b300b 	ldrb	r3, [fp, #-11]
  12f9e0:	e3530003 	cmp	r3, #3
  12f9e4:	1a000007 	bne	12fa08 <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f9e8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f9ec:	e3403015 	movt	r3, #21
  12f9f0:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12f9f4:	e2832001 	add	r2, r3, #1
  12f9f8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12f9fc:	e3403015 	movt	r3, #21
  12fa00:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12fa04:	ea000056 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12fa08:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa0c:	e353000b 	cmp	r3, #11
  12fa10:	1a000007 	bne	12fa34 <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12fa14:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fa18:	e3403015 	movt	r3, #21
  12fa1c:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12fa20:	e2832001 	add	r2, r3, #1
  12fa24:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fa28:	e3403015 	movt	r3, #21
  12fa2c:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12fa30:	ea00004b 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12fa34:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa38:	e353000c 	cmp	r3, #12
  12fa3c:	1a000007 	bne	12fa60 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12fa40:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fa44:	e3403015 	movt	r3, #21
  12fa48:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12fa4c:	e2832001 	add	r2, r3, #1
  12fa50:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fa54:	e3403015 	movt	r3, #21
  12fa58:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12fa5c:	ea000040 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12fa60:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa64:	e3530004 	cmp	r3, #4
  12fa68:	1a000007 	bne	12fa8c <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12fa6c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fa70:	e3403015 	movt	r3, #21
  12fa74:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12fa78:	e2832001 	add	r2, r3, #1
  12fa7c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fa80:	e3403015 	movt	r3, #21
  12fa84:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12fa88:	ea000035 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12fa8c:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa90:	e3530005 	cmp	r3, #5
  12fa94:	1a000007 	bne	12fab8 <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12fa98:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fa9c:	e3403015 	movt	r3, #21
  12faa0:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12faa4:	e2832001 	add	r2, r3, #1
  12faa8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12faac:	e3403015 	movt	r3, #21
  12fab0:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12fab4:	ea00002a 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12fab8:	e55b300b 	ldrb	r3, [fp, #-11]
  12fabc:	e353000d 	cmp	r3, #13
  12fac0:	1a000007 	bne	12fae4 <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12fac4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fac8:	e3403015 	movt	r3, #21
  12facc:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12fad0:	e2832001 	add	r2, r3, #1
  12fad4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fad8:	e3403015 	movt	r3, #21
  12fadc:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12fae0:	ea00001f 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12fae4:	e55b300b 	ldrb	r3, [fp, #-11]
  12fae8:	e353000e 	cmp	r3, #14
  12faec:	1a000007 	bne	12fb10 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12faf0:	e30c3a50 	movw	r3, #51792	; 0xca50
  12faf4:	e3403015 	movt	r3, #21
  12faf8:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12fafc:	e2832001 	add	r2, r3, #1
  12fb00:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb04:	e3403015 	movt	r3, #21
  12fb08:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12fb0c:	ea000014 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12fb10:	e55b300b 	ldrb	r3, [fp, #-11]
  12fb14:	e3530011 	cmp	r3, #17
  12fb18:	1a000007 	bne	12fb3c <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12fb1c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb20:	e3403015 	movt	r3, #21
  12fb24:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12fb28:	e2832001 	add	r2, r3, #1
  12fb2c:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb30:	e3403015 	movt	r3, #21
  12fb34:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12fb38:	ea000009 	b	12fb64 <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12fb3c:	e55b300b 	ldrb	r3, [fp, #-11]
  12fb40:	e3530012 	cmp	r3, #18
  12fb44:	1a000006 	bne	12fb64 <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12fb48:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb4c:	e3403015 	movt	r3, #21
  12fb50:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12fb54:	e2832001 	add	r2, r3, #1
  12fb58:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb5c:	e3403015 	movt	r3, #21
  12fb60:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12fb64:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb68:	e3403015 	movt	r3, #21
  12fb6c:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12fb70:	e2833001 	add	r3, r3, #1
  12fb74:	e6ff2073 	uxth	r2, r3
  12fb78:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb7c:	e3403015 	movt	r3, #21
  12fb80:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12fb84:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb88:	e3403015 	movt	r3, #21
  12fb8c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12fb90:	e2833001 	add	r3, r3, #1
  12fb94:	e6ff2073 	uxth	r2, r3
  12fb98:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fb9c:	e3403015 	movt	r3, #21
  12fba0:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12fba4:	ea000000 	b	12fbac <icmp_input+0x688>
    break;
  12fba8:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12fbac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fbb0:	ebffacba 	bl	11aea0 <pbuf_free>
  return;
  12fbb4:	ea00002d 	b	12fc70 <icmp_input+0x74c>
    goto lenerr;
  12fbb8:	e320f000 	nop	{0}
  12fbbc:	ea000002 	b	12fbcc <icmp_input+0x6a8>
    goto lenerr;
  12fbc0:	e320f000 	nop	{0}
  12fbc4:	ea000000 	b	12fbcc <icmp_input+0x6a8>
      goto lenerr;
  12fbc8:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12fbcc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fbd0:	ebffacb2 	bl	11aea0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12fbd4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fbd8:	e3403015 	movt	r3, #21
  12fbdc:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12fbe0:	e2833001 	add	r3, r3, #1
  12fbe4:	e6ff2073 	uxth	r2, r3
  12fbe8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fbec:	e3403015 	movt	r3, #21
  12fbf0:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fbf4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fbf8:	e3403015 	movt	r3, #21
  12fbfc:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fc00:	e2832001 	add	r2, r3, #1
  12fc04:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fc08:	e3403015 	movt	r3, #21
  12fc0c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fc10:	ea000016 	b	12fc70 <icmp_input+0x74c>
      goto icmperr;
  12fc14:	e320f000 	nop	{0}
  12fc18:	ea000002 	b	12fc28 <icmp_input+0x704>
      goto icmperr;
  12fc1c:	e320f000 	nop	{0}
  12fc20:	ea000000 	b	12fc28 <icmp_input+0x704>
        goto icmperr;
  12fc24:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12fc28:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fc2c:	ebffac9b 	bl	11aea0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12fc30:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fc34:	e3403015 	movt	r3, #21
  12fc38:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12fc3c:	e2833001 	add	r3, r3, #1
  12fc40:	e6ff2073 	uxth	r2, r3
  12fc44:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fc48:	e3403015 	movt	r3, #21
  12fc4c:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fc50:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fc54:	e3403015 	movt	r3, #21
  12fc58:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fc5c:	e2832001 	add	r2, r3, #1
  12fc60:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fc64:	e3403015 	movt	r3, #21
  12fc68:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fc6c:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12fc70:	e24bd004 	sub	sp, fp, #4
  12fc74:	e8bd8800 	pop	{fp, pc}
  12fc78:	0014f62c 	.word	0x0014f62c

0012fc7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12fc7c:	e92d4800 	push	{fp, lr}
  12fc80:	e28db004 	add	fp, sp, #4
  12fc84:	e24dd008 	sub	sp, sp, #8
  12fc88:	e50b0008 	str	r0, [fp, #-8]
  12fc8c:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12fc90:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fc94:	e3403015 	movt	r3, #21
  12fc98:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12fc9c:	e2832001 	add	r2, r3, #1
  12fca0:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fca4:	e3403015 	movt	r3, #21
  12fca8:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12fcac:	e51b300c 	ldr	r3, [fp, #-12]
  12fcb0:	e6ef3073 	uxtb	r3, r3
  12fcb4:	e1a02003 	mov	r2, r3
  12fcb8:	e3a01003 	mov	r1, #3
  12fcbc:	e51b0008 	ldr	r0, [fp, #-8]
  12fcc0:	eb000017 	bl	12fd24 <icmp_send_response>
}
  12fcc4:	e320f000 	nop	{0}
  12fcc8:	e24bd004 	sub	sp, fp, #4
  12fccc:	e8bd8800 	pop	{fp, pc}

0012fcd0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12fcd0:	e92d4800 	push	{fp, lr}
  12fcd4:	e28db004 	add	fp, sp, #4
  12fcd8:	e24dd008 	sub	sp, sp, #8
  12fcdc:	e50b0008 	str	r0, [fp, #-8]
  12fce0:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12fce4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fce8:	e3403015 	movt	r3, #21
  12fcec:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12fcf0:	e2832001 	add	r2, r3, #1
  12fcf4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fcf8:	e3403015 	movt	r3, #21
  12fcfc:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12fd00:	e51b300c 	ldr	r3, [fp, #-12]
  12fd04:	e6ef3073 	uxtb	r3, r3
  12fd08:	e1a02003 	mov	r2, r3
  12fd0c:	e3a0100b 	mov	r1, #11
  12fd10:	e51b0008 	ldr	r0, [fp, #-8]
  12fd14:	eb000002 	bl	12fd24 <icmp_send_response>
}
  12fd18:	e320f000 	nop	{0}
  12fd1c:	e24bd004 	sub	sp, fp, #4
  12fd20:	e8bd8800 	pop	{fp, pc}

0012fd24 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12fd24:	e92d4800 	push	{fp, lr}
  12fd28:	e28db004 	add	fp, sp, #4
  12fd2c:	e24dd030 	sub	sp, sp, #48	; 0x30
  12fd30:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12fd34:	e1a03001 	mov	r3, r1
  12fd38:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12fd3c:	e1a03002 	mov	r3, r2
  12fd40:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12fd44:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fd48:	e3403015 	movt	r3, #21
  12fd4c:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12fd50:	e2832001 	add	r2, r3, #1
  12fd54:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fd58:	e3403015 	movt	r3, #21
  12fd5c:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12fd60:	e3a02000 	mov	r2, #0
  12fd64:	e3a01024 	mov	r1, #36	; 0x24
  12fd68:	e3a00001 	mov	r0, #1
  12fd6c:	ebffa944 	bl	11a284 <pbuf_alloc>
  12fd70:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12fd74:	e51b3008 	ldr	r3, [fp, #-8]
  12fd78:	e3530000 	cmp	r3, #0
  12fd7c:	1a000007 	bne	12fda0 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12fd80:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fd84:	e3403015 	movt	r3, #21
  12fd88:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12fd8c:	e2832001 	add	r2, r3, #1
  12fd90:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fd94:	e3403015 	movt	r3, #21
  12fd98:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12fd9c:	ea000055 	b	12fef8 <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12fda0:	e51b3008 	ldr	r3, [fp, #-8]
  12fda4:	e1d330ba 	ldrh	r3, [r3, #10]
  12fda8:	e3530023 	cmp	r3, #35	; 0x23
  12fdac:	8a000006 	bhi	12fdcc <icmp_send_response+0xa8>
  12fdb0:	e3090534 	movw	r0, #38196	; 0x9534
  12fdb4:	e3400014 	movt	r0, #20
  12fdb8:	ebff4cd5 	bl	103114 <rt_kprintf>
  12fdbc:	e3001162 	movw	r1, #354	; 0x162
  12fdc0:	e30904cc 	movw	r0, #38092	; 0x94cc
  12fdc4:	e3400014 	movt	r0, #20
  12fdc8:	ebff6cc4 	bl	10b0e0 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12fdcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fdd0:	e5933004 	ldr	r3, [r3, #4]
  12fdd4:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12fdd8:	e51b3008 	ldr	r3, [fp, #-8]
  12fddc:	e5933004 	ldr	r3, [r3, #4]
  12fde0:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12fde4:	e51b3010 	ldr	r3, [fp, #-16]
  12fde8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12fdec:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12fdf0:	e51b3010 	ldr	r3, [fp, #-16]
  12fdf4:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12fdf8:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fdfc:	e51b3010 	ldr	r3, [fp, #-16]
  12fe00:	e3a02000 	mov	r2, #0
  12fe04:	e5c32004 	strb	r2, [r3, #4]
  12fe08:	e3a02000 	mov	r2, #0
  12fe0c:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12fe10:	e51b3010 	ldr	r3, [fp, #-16]
  12fe14:	e3a02000 	mov	r2, #0
  12fe18:	e5c32006 	strb	r2, [r3, #6]
  12fe1c:	e3a02000 	mov	r2, #0
  12fe20:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12fe24:	e51b3008 	ldr	r3, [fp, #-8]
  12fe28:	e5933004 	ldr	r3, [r3, #4]
  12fe2c:	e2830008 	add	r0, r3, #8
  12fe30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fe34:	e5933004 	ldr	r3, [r3, #4]
  12fe38:	e3a0201c 	mov	r2, #28
  12fe3c:	e1a01003 	mov	r1, r3
  12fe40:	eb0043cf 	bl	140d84 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12fe44:	e51b300c 	ldr	r3, [fp, #-12]
  12fe48:	e593300c 	ldr	r3, [r3, #12]
  12fe4c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fe50:	e24b3018 	sub	r3, fp, #24
  12fe54:	e1a00003 	mov	r0, r3
  12fe58:	eb0004c9 	bl	131184 <ip4_route>
  12fe5c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fe60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe64:	e3530000 	cmp	r3, #0
  12fe68:	0a000020 	beq	12fef0 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fe6c:	e51b3010 	ldr	r3, [fp, #-16]
  12fe70:	e3a02000 	mov	r2, #0
  12fe74:	e5c32002 	strb	r2, [r3, #2]
  12fe78:	e3a02000 	mov	r2, #0
  12fe7c:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fe80:	e51b3008 	ldr	r3, [fp, #-8]
  12fe84:	e1d330ba 	ldrh	r3, [r3, #10]
  12fe88:	e1a01003 	mov	r1, r3
  12fe8c:	e51b0010 	ldr	r0, [fp, #-16]
  12fe90:	ebffa2da 	bl	118a00 <inet_chksum>
  12fe94:	e1a03000 	mov	r3, r0
  12fe98:	e1a02003 	mov	r2, r3
  12fe9c:	e51b3010 	ldr	r3, [fp, #-16]
  12fea0:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12fea4:	e30c3a50 	movw	r3, #51792	; 0xca50
  12fea8:	e3403015 	movt	r3, #21
  12feac:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12feb0:	e2833001 	add	r3, r3, #1
  12feb4:	e6ff2073 	uxth	r2, r3
  12feb8:	e30c3a50 	movw	r3, #51792	; 0xca50
  12febc:	e3403015 	movt	r3, #21
  12fec0:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fec4:	e24b2018 	sub	r2, fp, #24
  12fec8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fecc:	e58d3008 	str	r3, [sp, #8]
  12fed0:	e3a03001 	mov	r3, #1
  12fed4:	e58d3004 	str	r3, [sp, #4]
  12fed8:	e3a03000 	mov	r3, #0
  12fedc:	e58d3000 	str	r3, [sp]
  12fee0:	e3a030ff 	mov	r3, #255	; 0xff
  12fee4:	e3a01000 	mov	r1, #0
  12fee8:	e51b0008 	ldr	r0, [fp, #-8]
  12feec:	eb00077d 	bl	131ce8 <ip4_output_if>
  }
  pbuf_free(q);
  12fef0:	e51b0008 	ldr	r0, [fp, #-8]
  12fef4:	ebffabe9 	bl	11aea0 <pbuf_free>
}
  12fef8:	e24bd004 	sub	sp, fp, #4
  12fefc:	e8bd8800 	pop	{fp, pc}

0012ff00 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12ff00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12ff04:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12ff08:	e30e2bf4 	movw	r2, #60404	; 0xebf4
  12ff0c:	e3402014 	movt	r2, #20
  12ff10:	e3a030e0 	mov	r3, #224	; 0xe0
  12ff14:	e3403100 	movt	r3, #256	; 0x100
  12ff18:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12ff1c:	e30e2bf8 	movw	r2, #60408	; 0xebf8
  12ff20:	e3402014 	movt	r2, #20
  12ff24:	e3a030e0 	mov	r3, #224	; 0xe0
  12ff28:	e3403200 	movt	r3, #512	; 0x200
  12ff2c:	e5823000 	str	r3, [r2]
}
  12ff30:	e320f000 	nop	{0}
  12ff34:	e28bd000 	add	sp, fp, #0
  12ff38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12ff3c:	e12fff1e 	bx	lr

0012ff40 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12ff40:	e92d4800 	push	{fp, lr}
  12ff44:	e28db004 	add	fp, sp, #4
  12ff48:	e24dd010 	sub	sp, sp, #16
  12ff4c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12ff50:	e30e1bf4 	movw	r1, #60404	; 0xebf4
  12ff54:	e3401014 	movt	r1, #20
  12ff58:	e51b0010 	ldr	r0, [fp, #-16]
  12ff5c:	eb000078 	bl	130144 <igmp_lookup_group>
  12ff60:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12ff64:	e51b3008 	ldr	r3, [fp, #-8]
  12ff68:	e3530000 	cmp	r3, #0
  12ff6c:	0a000015 	beq	12ffc8 <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12ff70:	e51b3008 	ldr	r3, [fp, #-8]
  12ff74:	e3a02002 	mov	r2, #2
  12ff78:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12ff7c:	e51b3008 	ldr	r3, [fp, #-8]
  12ff80:	e5d3300c 	ldrb	r3, [r3, #12]
  12ff84:	e2833001 	add	r3, r3, #1
  12ff88:	e6ef2073 	uxtb	r2, r3
  12ff8c:	e51b3008 	ldr	r3, [fp, #-8]
  12ff90:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12ff94:	e51b3010 	ldr	r3, [fp, #-16]
  12ff98:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ff9c:	e3530000 	cmp	r3, #0
  12ffa0:	0a000006 	beq	12ffc0 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12ffa4:	e51b3010 	ldr	r3, [fp, #-16]
  12ffa8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ffac:	e3a02001 	mov	r2, #1
  12ffb0:	e30e1bf4 	movw	r1, #60404	; 0xebf4
  12ffb4:	e3401014 	movt	r1, #20
  12ffb8:	e51b0010 	ldr	r0, [fp, #-16]
  12ffbc:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12ffc0:	e3a03000 	mov	r3, #0
  12ffc4:	ea000000 	b	12ffcc <igmp_start+0x8c>
  }

  return ERR_MEM;
  12ffc8:	e3e03000 	mvn	r3, #0
}
  12ffcc:	e1a00003 	mov	r0, r3
  12ffd0:	e24bd004 	sub	sp, fp, #4
  12ffd4:	e8bd8800 	pop	{fp, pc}

0012ffd8 <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12ffd8:	e92d4800 	push	{fp, lr}
  12ffdc:	e28db004 	add	fp, sp, #4
  12ffe0:	e24dd010 	sub	sp, sp, #16
  12ffe4:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12ffe8:	e51b3010 	ldr	r3, [fp, #-16]
  12ffec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fff0:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  12fff4:	e51b3010 	ldr	r3, [fp, #-16]
  12fff8:	e3a02000 	mov	r2, #0
  12fffc:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  130000:	ea000012 	b	130050 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  130004:	e51b3008 	ldr	r3, [fp, #-8]
  130008:	e5933000 	ldr	r3, [r3]
  13000c:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  130010:	e51b3010 	ldr	r3, [fp, #-16]
  130014:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130018:	e3530000 	cmp	r3, #0
  13001c:	0a000006 	beq	13003c <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  130020:	e51b3010 	ldr	r3, [fp, #-16]
  130024:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130028:	e51b2008 	ldr	r2, [fp, #-8]
  13002c:	e2821004 	add	r1, r2, #4
  130030:	e3a02000 	mov	r2, #0
  130034:	e51b0010 	ldr	r0, [fp, #-16]
  130038:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  13003c:	e51b1008 	ldr	r1, [fp, #-8]
  130040:	e3a0000c 	mov	r0, #12
  130044:	ebffa487 	bl	119268 <memp_free>

    /* move to "next" */
    group = next;
  130048:	e51b300c 	ldr	r3, [fp, #-12]
  13004c:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130050:	e51b3008 	ldr	r3, [fp, #-8]
  130054:	e3530000 	cmp	r3, #0
  130058:	1affffe9 	bne	130004 <igmp_stop+0x2c>
  }
  return ERR_OK;
  13005c:	e3a03000 	mov	r3, #0
}
  130060:	e1a00003 	mov	r0, r3
  130064:	e24bd004 	sub	sp, fp, #4
  130068:	e8bd8800 	pop	{fp, pc}

0013006c <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  13006c:	e92d4800 	push	{fp, lr}
  130070:	e28db004 	add	fp, sp, #4
  130074:	e24dd010 	sub	sp, sp, #16
  130078:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  13007c:	e51b3010 	ldr	r3, [fp, #-16]
  130080:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130084:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  130088:	e51b3008 	ldr	r3, [fp, #-8]
  13008c:	e3530000 	cmp	r3, #0
  130090:	0a000009 	beq	1300bc <igmp_report_groups+0x50>
    group = group->next;
  130094:	e51b3008 	ldr	r3, [fp, #-8]
  130098:	e5933000 	ldr	r3, [r3]
  13009c:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  1300a0:	ea000005 	b	1300bc <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  1300a4:	e3a01005 	mov	r1, #5
  1300a8:	e51b0008 	ldr	r0, [fp, #-8]
  1300ac:	eb000372 	bl	130e7c <igmp_delaying_member>
    group = group->next;
  1300b0:	e51b3008 	ldr	r3, [fp, #-8]
  1300b4:	e5933000 	ldr	r3, [r3]
  1300b8:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  1300bc:	e51b3008 	ldr	r3, [fp, #-8]
  1300c0:	e3530000 	cmp	r3, #0
  1300c4:	1afffff6 	bne	1300a4 <igmp_report_groups+0x38>
  }
}
  1300c8:	e320f000 	nop	{0}
  1300cc:	e24bd004 	sub	sp, fp, #4
  1300d0:	e8bd8800 	pop	{fp, pc}

001300d4 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  1300d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1300d8:	e28db000 	add	fp, sp, #0
  1300dc:	e24dd014 	sub	sp, sp, #20
  1300e0:	e50b0010 	str	r0, [fp, #-16]
  1300e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  1300e8:	e51b3010 	ldr	r3, [fp, #-16]
  1300ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1300f0:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  1300f4:	ea00000a 	b	130124 <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  1300f8:	e51b3008 	ldr	r3, [fp, #-8]
  1300fc:	e5932004 	ldr	r2, [r3, #4]
  130100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130104:	e5933000 	ldr	r3, [r3]
  130108:	e1520003 	cmp	r2, r3
  13010c:	1a000001 	bne	130118 <igmp_lookfor_group+0x44>
      return group;
  130110:	e51b3008 	ldr	r3, [fp, #-8]
  130114:	ea000006 	b	130134 <igmp_lookfor_group+0x60>
    }
    group = group->next;
  130118:	e51b3008 	ldr	r3, [fp, #-8]
  13011c:	e5933000 	ldr	r3, [r3]
  130120:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130124:	e51b3008 	ldr	r3, [fp, #-8]
  130128:	e3530000 	cmp	r3, #0
  13012c:	1afffff1 	bne	1300f8 <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  130130:	e3a03000 	mov	r3, #0
}
  130134:	e1a00003 	mov	r0, r3
  130138:	e28bd000 	add	sp, fp, #0
  13013c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130140:	e12fff1e 	bx	lr

00130144 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  130144:	e92d4800 	push	{fp, lr}
  130148:	e28db004 	add	fp, sp, #4
  13014c:	e24dd010 	sub	sp, sp, #16
  130150:	e50b0010 	str	r0, [fp, #-16]
  130154:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  130158:	e51b3010 	ldr	r3, [fp, #-16]
  13015c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130160:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  130164:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130168:	e51b0010 	ldr	r0, [fp, #-16]
  13016c:	ebffffd8 	bl	1300d4 <igmp_lookfor_group>
  130170:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  130174:	e51b300c 	ldr	r3, [fp, #-12]
  130178:	e3530000 	cmp	r3, #0
  13017c:	0a000001 	beq	130188 <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  130180:	e51b300c 	ldr	r3, [fp, #-12]
  130184:	ea00004b 	b	1302b8 <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  130188:	e3002101 	movw	r2, #257	; 0x101
  13018c:	e3091560 	movw	r1, #38240	; 0x9560
  130190:	e3401014 	movt	r1, #20
  130194:	e3a0000c 	mov	r0, #12
  130198:	ebffa3ca 	bl	1190c8 <memp_malloc_fn>
  13019c:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  1301a0:	e51b300c 	ldr	r3, [fp, #-12]
  1301a4:	e3530000 	cmp	r3, #0
  1301a8:	0a000041 	beq	1302b4 <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  1301ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1301b0:	e3530000 	cmp	r3, #0
  1301b4:	0a000002 	beq	1301c4 <igmp_lookup_group+0x80>
  1301b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1301bc:	e5933000 	ldr	r3, [r3]
  1301c0:	ea000000 	b	1301c8 <igmp_lookup_group+0x84>
  1301c4:	e3a03000 	mov	r3, #0
  1301c8:	e51b200c 	ldr	r2, [fp, #-12]
  1301cc:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  1301d0:	e51b300c 	ldr	r3, [fp, #-12]
  1301d4:	e3a02000 	mov	r2, #0
  1301d8:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  1301dc:	e51b300c 	ldr	r3, [fp, #-12]
  1301e0:	e3a02000 	mov	r2, #0
  1301e4:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  1301e8:	e51b300c 	ldr	r3, [fp, #-12]
  1301ec:	e3a02000 	mov	r2, #0
  1301f0:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  1301f4:	e51b300c 	ldr	r3, [fp, #-12]
  1301f8:	e3a02000 	mov	r2, #0
  1301fc:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  130200:	e51b3008 	ldr	r3, [fp, #-8]
  130204:	e3530000 	cmp	r3, #0
  130208:	1a000014 	bne	130260 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  13020c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130210:	e5932000 	ldr	r2, [r3]
  130214:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  130218:	e3403014 	movt	r3, #20
  13021c:	e5933000 	ldr	r3, [r3]
  130220:	e1520003 	cmp	r2, r3
  130224:	0a000006 	beq	130244 <igmp_lookup_group+0x100>
  130228:	e3090594 	movw	r0, #38292	; 0x9594
  13022c:	e3400014 	movt	r0, #20
  130230:	ebff4bb7 	bl	103114 <rt_kprintf>
  130234:	e300110d 	movw	r1, #269	; 0x10d
  130238:	e3090560 	movw	r0, #38240	; 0x9560
  13023c:	e3400014 	movt	r0, #20
  130240:	ebff6ba6 	bl	10b0e0 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  130244:	e51b300c 	ldr	r3, [fp, #-12]
  130248:	e3a02000 	mov	r2, #0
  13024c:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  130250:	e51b3010 	ldr	r3, [fp, #-16]
  130254:	e51b200c 	ldr	r2, [fp, #-12]
  130258:	e583202c 	str	r2, [r3, #44]	; 0x2c
  13025c:	ea000014 	b	1302b4 <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  130260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130264:	e5932000 	ldr	r2, [r3]
  130268:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  13026c:	e3403014 	movt	r3, #20
  130270:	e5933000 	ldr	r3, [r3]
  130274:	e1520003 	cmp	r2, r3
  130278:	1a000006 	bne	130298 <igmp_lookup_group+0x154>
  13027c:	e30905c8 	movw	r0, #38344	; 0x95c8
  130280:	e3400014 	movt	r0, #20
  130284:	ebff4ba2 	bl	103114 <rt_kprintf>
  130288:	e3001113 	movw	r1, #275	; 0x113
  13028c:	e3090560 	movw	r0, #38240	; 0x9560
  130290:	e3400014 	movt	r0, #20
  130294:	ebff6b91 	bl	10b0e0 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  130298:	e51b3008 	ldr	r3, [fp, #-8]
  13029c:	e5932000 	ldr	r2, [r3]
  1302a0:	e51b300c 	ldr	r3, [fp, #-12]
  1302a4:	e5832000 	str	r2, [r3]
      list_head->next = group;
  1302a8:	e51b3008 	ldr	r3, [fp, #-8]
  1302ac:	e51b200c 	ldr	r2, [fp, #-12]
  1302b0:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  1302b4:	e51b300c 	ldr	r3, [fp, #-12]
}
  1302b8:	e1a00003 	mov	r0, r3
  1302bc:	e24bd004 	sub	sp, fp, #4
  1302c0:	e8bd8800 	pop	{fp, pc}

001302c4 <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  1302c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1302c8:	e28db000 	add	fp, sp, #0
  1302cc:	e24dd014 	sub	sp, sp, #20
  1302d0:	e50b0010 	str	r0, [fp, #-16]
  1302d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  1302d8:	e3a03000 	mov	r3, #0
  1302dc:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  1302e0:	e51b3010 	ldr	r3, [fp, #-16]
  1302e4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1302e8:	e50b300c 	str	r3, [fp, #-12]
  1302ec:	ea00000c 	b	130324 <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  1302f0:	e51b300c 	ldr	r3, [fp, #-12]
  1302f4:	e5933000 	ldr	r3, [r3]
  1302f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1302fc:	e1520003 	cmp	r2, r3
  130300:	1a000004 	bne	130318 <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  130304:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130308:	e5932000 	ldr	r2, [r3]
  13030c:	e51b300c 	ldr	r3, [fp, #-12]
  130310:	e5832000 	str	r2, [r3]
      break;
  130314:	ea000005 	b	130330 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  130318:	e51b300c 	ldr	r3, [fp, #-12]
  13031c:	e5933000 	ldr	r3, [r3]
  130320:	e50b300c 	str	r3, [fp, #-12]
  130324:	e51b300c 	ldr	r3, [fp, #-12]
  130328:	e3530000 	cmp	r3, #0
  13032c:	1affffef 	bne	1302f0 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  130330:	e51b300c 	ldr	r3, [fp, #-12]
  130334:	e3530000 	cmp	r3, #0
  130338:	1a000001 	bne	130344 <igmp_remove_group+0x80>
    err = ERR_ARG;
  13033c:	e3e0300f 	mvn	r3, #15
  130340:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  130344:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130348:	e1a00003 	mov	r0, r3
  13034c:	e28bd000 	add	sp, fp, #0
  130350:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130354:	e12fff1e 	bx	lr

00130358 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  130358:	e92d4800 	push	{fp, lr}
  13035c:	e28db004 	add	fp, sp, #4
  130360:	e24dd020 	sub	sp, sp, #32
  130364:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130368:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  13036c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  130370:	e30c3a50 	movw	r3, #51792	; 0xca50
  130374:	e3403015 	movt	r3, #21
  130378:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  13037c:	e2833001 	add	r3, r3, #1
  130380:	e6ff2073 	uxth	r2, r3
  130384:	e30c3a50 	movw	r3, #51792	; 0xca50
  130388:	e3403015 	movt	r3, #21
  13038c:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  130390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130394:	e1d330ba 	ldrh	r3, [r3, #10]
  130398:	e3530007 	cmp	r3, #7
  13039c:	8a00000a 	bhi	1303cc <igmp_input+0x74>
    pbuf_free(p);
  1303a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1303a4:	ebffaabd 	bl	11aea0 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  1303a8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1303ac:	e3403015 	movt	r3, #21
  1303b0:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  1303b4:	e2833001 	add	r3, r3, #1
  1303b8:	e6ff2073 	uxth	r2, r3
  1303bc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1303c0:	e3403015 	movt	r3, #21
  1303c4:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  1303c8:	ea0000c9 	b	1306f4 <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  1303cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303d0:	e5933004 	ldr	r3, [r3, #4]
  1303d4:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  1303d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303dc:	e1d330ba 	ldrh	r3, [r3, #10]
  1303e0:	e1a01003 	mov	r1, r3
  1303e4:	e51b0010 	ldr	r0, [fp, #-16]
  1303e8:	ebffa184 	bl	118a00 <inet_chksum>
  1303ec:	e1a03000 	mov	r3, r0
  1303f0:	e3530000 	cmp	r3, #0
  1303f4:	0a00000a 	beq	130424 <igmp_input+0xcc>
    pbuf_free(p);
  1303f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1303fc:	ebffaaa7 	bl	11aea0 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  130400:	e30c3a50 	movw	r3, #51792	; 0xca50
  130404:	e3403015 	movt	r3, #21
  130408:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  13040c:	e2833001 	add	r3, r3, #1
  130410:	e6ff2073 	uxth	r2, r3
  130414:	e30c3a50 	movw	r3, #51792	; 0xca50
  130418:	e3403015 	movt	r3, #21
  13041c:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  130420:	ea0000b3 	b	1306f4 <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  130424:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  130428:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  13042c:	ebffff28 	bl	1300d4 <igmp_lookfor_group>
  130430:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  130434:	e51b3008 	ldr	r3, [fp, #-8]
  130438:	e3530000 	cmp	r3, #0
  13043c:	1a00000a 	bne	13046c <igmp_input+0x114>
    pbuf_free(p);
  130440:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130444:	ebffaa95 	bl	11aea0 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  130448:	e30c3a50 	movw	r3, #51792	; 0xca50
  13044c:	e3403015 	movt	r3, #21
  130450:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130454:	e2833001 	add	r3, r3, #1
  130458:	e6ff2073 	uxth	r2, r3
  13045c:	e30c3a50 	movw	r3, #51792	; 0xca50
  130460:	e3403015 	movt	r3, #21
  130464:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  130468:	ea0000a1 	b	1306f4 <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  13046c:	e51b3010 	ldr	r3, [fp, #-16]
  130470:	e5d33000 	ldrb	r3, [r3]
  130474:	e3530011 	cmp	r3, #17
  130478:	0a000002 	beq	130488 <igmp_input+0x130>
  13047c:	e3530016 	cmp	r3, #22
  130480:	0a000078 	beq	130668 <igmp_input+0x310>
  130484:	ea00008d 	b	1306c0 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  130488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13048c:	e5932000 	ldr	r2, [r3]
  130490:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  130494:	e3403014 	movt	r3, #20
  130498:	e5933000 	ldr	r3, [r3]
  13049c:	e1520003 	cmp	r2, r3
  1304a0:	1a000035 	bne	13057c <igmp_input+0x224>
  1304a4:	e51b3010 	ldr	r3, [fp, #-16]
  1304a8:	e2833004 	add	r3, r3, #4
  1304ac:	e3530000 	cmp	r3, #0
  1304b0:	0a000003 	beq	1304c4 <igmp_input+0x16c>
  1304b4:	e51b3010 	ldr	r3, [fp, #-16]
  1304b8:	e5933004 	ldr	r3, [r3, #4]
  1304bc:	e3530000 	cmp	r3, #0
  1304c0:	1a00002d 	bne	13057c <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  1304c4:	e51b3010 	ldr	r3, [fp, #-16]
  1304c8:	e5d33001 	ldrb	r3, [r3, #1]
  1304cc:	e3530000 	cmp	r3, #0
  1304d0:	1a00000b 	bne	130504 <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  1304d4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1304d8:	e3403015 	movt	r3, #21
  1304dc:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  1304e0:	e2833001 	add	r3, r3, #1
  1304e4:	e6ff2073 	uxth	r2, r3
  1304e8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1304ec:	e3403015 	movt	r3, #21
  1304f0:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  1304f4:	e51b3010 	ldr	r3, [fp, #-16]
  1304f8:	e3a0200a 	mov	r2, #10
  1304fc:	e5c32001 	strb	r2, [r3, #1]
  130500:	ea000007 	b	130524 <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  130504:	e30c3a50 	movw	r3, #51792	; 0xca50
  130508:	e3403015 	movt	r3, #21
  13050c:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  130510:	e2833001 	add	r3, r3, #1
  130514:	e6ff2073 	uxth	r2, r3
  130518:	e30c3a50 	movw	r3, #51792	; 0xca50
  13051c:	e3403015 	movt	r3, #21
  130520:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  130524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130528:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  13052c:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130530:	e51b300c 	ldr	r3, [fp, #-12]
  130534:	e3530000 	cmp	r3, #0
  130538:	0a00000b 	beq	13056c <igmp_input+0x214>
        groupref = groupref->next;
  13053c:	e51b300c 	ldr	r3, [fp, #-12]
  130540:	e5933000 	ldr	r3, [r3]
  130544:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  130548:	ea000007 	b	13056c <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  13054c:	e51b3010 	ldr	r3, [fp, #-16]
  130550:	e5d33001 	ldrb	r3, [r3, #1]
  130554:	e1a01003 	mov	r1, r3
  130558:	e51b000c 	ldr	r0, [fp, #-12]
  13055c:	eb000246 	bl	130e7c <igmp_delaying_member>
        groupref = groupref->next;
  130560:	e51b300c 	ldr	r3, [fp, #-12]
  130564:	e5933000 	ldr	r3, [r3]
  130568:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  13056c:	e51b300c 	ldr	r3, [fp, #-12]
  130570:	e3530000 	cmp	r3, #0
  130574:	1afffff4 	bne	13054c <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  130578:	ea000039 	b	130664 <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  13057c:	e51b3010 	ldr	r3, [fp, #-16]
  130580:	e2833004 	add	r3, r3, #4
  130584:	e3530000 	cmp	r3, #0
  130588:	0a00002c 	beq	130640 <igmp_input+0x2e8>
  13058c:	e51b3010 	ldr	r3, [fp, #-16]
  130590:	e5933004 	ldr	r3, [r3, #4]
  130594:	e3530000 	cmp	r3, #0
  130598:	0a000028 	beq	130640 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  13059c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1305a0:	e5932000 	ldr	r2, [r3]
  1305a4:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  1305a8:	e3403014 	movt	r3, #20
  1305ac:	e5933000 	ldr	r3, [r3]
  1305b0:	e1520003 	cmp	r2, r3
  1305b4:	1a000007 	bne	1305d8 <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  1305b8:	e51b3010 	ldr	r3, [fp, #-16]
  1305bc:	e5933004 	ldr	r3, [r3, #4]
  1305c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  1305c4:	e24b3014 	sub	r3, fp, #20
  1305c8:	e1a01003 	mov	r1, r3
  1305cc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1305d0:	ebfffebf 	bl	1300d4 <igmp_lookfor_group>
  1305d4:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  1305d8:	e51b3008 	ldr	r3, [fp, #-8]
  1305dc:	e3530000 	cmp	r3, #0
  1305e0:	0a00000d 	beq	13061c <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  1305e4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1305e8:	e3403015 	movt	r3, #21
  1305ec:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  1305f0:	e2833001 	add	r3, r3, #1
  1305f4:	e6ff2073 	uxth	r2, r3
  1305f8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1305fc:	e3403015 	movt	r3, #21
  130600:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  130604:	e51b3010 	ldr	r3, [fp, #-16]
  130608:	e5d33001 	ldrb	r3, [r3, #1]
  13060c:	e1a01003 	mov	r1, r3
  130610:	e51b0008 	ldr	r0, [fp, #-8]
  130614:	eb000218 	bl	130e7c <igmp_delaying_member>
        if (group != NULL) {
  130618:	ea000011 	b	130664 <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  13061c:	e30c3a50 	movw	r3, #51792	; 0xca50
  130620:	e3403015 	movt	r3, #21
  130624:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130628:	e2833001 	add	r3, r3, #1
  13062c:	e6ff2073 	uxth	r2, r3
  130630:	e30c3a50 	movw	r3, #51792	; 0xca50
  130634:	e3403015 	movt	r3, #21
  130638:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  13063c:	ea000008 	b	130664 <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  130640:	e30c3a50 	movw	r3, #51792	; 0xca50
  130644:	e3403015 	movt	r3, #21
  130648:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  13064c:	e2833001 	add	r3, r3, #1
  130650:	e6ff2073 	uxth	r2, r3
  130654:	e30c3a50 	movw	r3, #51792	; 0xca50
  130658:	e3403015 	movt	r3, #21
  13065c:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  130660:	ea000020 	b	1306e8 <igmp_input+0x390>
  130664:	ea00001f 	b	1306e8 <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  130668:	e30c3a50 	movw	r3, #51792	; 0xca50
  13066c:	e3403015 	movt	r3, #21
  130670:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  130674:	e2833001 	add	r3, r3, #1
  130678:	e6ff2073 	uxth	r2, r3
  13067c:	e30c3a50 	movw	r3, #51792	; 0xca50
  130680:	e3403015 	movt	r3, #21
  130684:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  130688:	e51b3008 	ldr	r3, [fp, #-8]
  13068c:	e5d33009 	ldrb	r3, [r3, #9]
  130690:	e3530001 	cmp	r3, #1
  130694:	1a000012 	bne	1306e4 <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  130698:	e51b3008 	ldr	r3, [fp, #-8]
  13069c:	e3a02000 	mov	r2, #0
  1306a0:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  1306a4:	e51b3008 	ldr	r3, [fp, #-8]
  1306a8:	e3a02002 	mov	r2, #2
  1306ac:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  1306b0:	e51b3008 	ldr	r3, [fp, #-8]
  1306b4:	e3a02000 	mov	r2, #0
  1306b8:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  1306bc:	ea000008 	b	1306e4 <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  1306c0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1306c4:	e3403015 	movt	r3, #21
  1306c8:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1306cc:	e2833001 	add	r3, r3, #1
  1306d0:	e6ff2073 	uxth	r2, r3
  1306d4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1306d8:	e3403015 	movt	r3, #21
  1306dc:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  1306e0:	ea000000 	b	1306e8 <igmp_input+0x390>
    break;
  1306e4:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  1306e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1306ec:	ebffa9eb 	bl	11aea0 <pbuf_free>
  return;
  1306f0:	e320f000 	nop	{0}
}
  1306f4:	e24bd004 	sub	sp, fp, #4
  1306f8:	e8bd8800 	pop	{fp, pc}

001306fc <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1306fc:	e92d4800 	push	{fp, lr}
  130700:	e28db004 	add	fp, sp, #4
  130704:	e24dd010 	sub	sp, sp, #16
  130708:	e50b0010 	str	r0, [fp, #-16]
  13070c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  130710:	e3e03005 	mvn	r3, #5
  130714:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13071c:	e5933000 	ldr	r3, [r3]
  130720:	e20330f0 	and	r3, r3, #240	; 0xf0
  130724:	e35300e0 	cmp	r3, #224	; 0xe0
  130728:	0a000008 	beq	130750 <igmp_joingroup+0x54>
  13072c:	e309060c 	movw	r0, #38412	; 0x960c
  130730:	e3400014 	movt	r0, #20
  130734:	ebff4a76 	bl	103114 <rt_kprintf>
  130738:	e30011c7 	movw	r1, #455	; 0x1c7
  13073c:	e3090560 	movw	r0, #38240	; 0x9560
  130740:	e3400014 	movt	r0, #20
  130744:	ebff6a65 	bl	10b0e0 <sys_arch_assert>
  130748:	e3e03005 	mvn	r3, #5
  13074c:	ea000038 	b	130834 <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130750:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130754:	e5932000 	ldr	r2, [r3]
  130758:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  13075c:	e3403014 	movt	r3, #20
  130760:	e5933000 	ldr	r3, [r3]
  130764:	e1520003 	cmp	r2, r3
  130768:	1a000008 	bne	130790 <igmp_joingroup+0x94>
  13076c:	e3090644 	movw	r0, #38468	; 0x9644
  130770:	e3400014 	movt	r0, #20
  130774:	ebff4a66 	bl	103114 <rt_kprintf>
  130778:	e3a01f72 	mov	r1, #456	; 0x1c8
  13077c:	e3090560 	movw	r0, #38240	; 0x9560
  130780:	e3400014 	movt	r0, #20
  130784:	ebff6a55 	bl	10b0e0 <sys_arch_assert>
  130788:	e3e03005 	mvn	r3, #5
  13078c:	ea000028 	b	130834 <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130790:	e30c3a44 	movw	r3, #51780	; 0xca44
  130794:	e3403015 	movt	r3, #21
  130798:	e5933000 	ldr	r3, [r3]
  13079c:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1307a0:	ea00001f 	b	130824 <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  1307a4:	e51b300c 	ldr	r3, [fp, #-12]
  1307a8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1307ac:	e2033020 	and	r3, r3, #32
  1307b0:	e3530000 	cmp	r3, #0
  1307b4:	0a000017 	beq	130818 <igmp_joingroup+0x11c>
  1307b8:	e51b3010 	ldr	r3, [fp, #-16]
  1307bc:	e3530000 	cmp	r3, #0
  1307c0:	0a00000a 	beq	1307f0 <igmp_joingroup+0xf4>
  1307c4:	e51b3010 	ldr	r3, [fp, #-16]
  1307c8:	e5933000 	ldr	r3, [r3]
  1307cc:	e3530000 	cmp	r3, #0
  1307d0:	0a000006 	beq	1307f0 <igmp_joingroup+0xf4>
  1307d4:	e51b300c 	ldr	r3, [fp, #-12]
  1307d8:	e2833004 	add	r3, r3, #4
  1307dc:	e5932000 	ldr	r2, [r3]
  1307e0:	e51b3010 	ldr	r3, [fp, #-16]
  1307e4:	e5933000 	ldr	r3, [r3]
  1307e8:	e1520003 	cmp	r2, r3
  1307ec:	1a000009 	bne	130818 <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  1307f0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1307f4:	e51b000c 	ldr	r0, [fp, #-12]
  1307f8:	eb000010 	bl	130840 <igmp_joingroup_netif>
  1307fc:	e1a03000 	mov	r3, r0
  130800:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  130804:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130808:	e3530000 	cmp	r3, #0
  13080c:	0a000001 	beq	130818 <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  130810:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130814:	ea000006 	b	130834 <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130818:	e51b300c 	ldr	r3, [fp, #-12]
  13081c:	e5933000 	ldr	r3, [r3]
  130820:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130824:	e51b300c 	ldr	r3, [fp, #-12]
  130828:	e3530000 	cmp	r3, #0
  13082c:	1affffdc 	bne	1307a4 <igmp_joingroup+0xa8>
  }

  return err;
  130830:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130834:	e1a00003 	mov	r0, r3
  130838:	e24bd004 	sub	sp, fp, #4
  13083c:	e8bd8800 	pop	{fp, pc}

00130840 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130840:	e92d4800 	push	{fp, lr}
  130844:	e28db004 	add	fp, sp, #4
  130848:	e24dd010 	sub	sp, sp, #16
  13084c:	e50b0010 	str	r0, [fp, #-16]
  130850:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130858:	e5933000 	ldr	r3, [r3]
  13085c:	e20330f0 	and	r3, r3, #240	; 0xf0
  130860:	e35300e0 	cmp	r3, #224	; 0xe0
  130864:	0a000008 	beq	13088c <igmp_joingroup_netif+0x4c>
  130868:	e3090678 	movw	r0, #38520	; 0x9678
  13086c:	e3400014 	movt	r0, #20
  130870:	ebff4a27 	bl	103114 <rt_kprintf>
  130874:	e30011eb 	movw	r1, #491	; 0x1eb
  130878:	e3090560 	movw	r0, #38240	; 0x9560
  13087c:	e3400014 	movt	r0, #20
  130880:	ebff6a16 	bl	10b0e0 <sys_arch_assert>
  130884:	e3e03005 	mvn	r3, #5
  130888:	ea000051 	b	1309d4 <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  13088c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130890:	e5932000 	ldr	r2, [r3]
  130894:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  130898:	e3403014 	movt	r3, #20
  13089c:	e5933000 	ldr	r3, [r3]
  1308a0:	e1520003 	cmp	r2, r3
  1308a4:	1a000008 	bne	1308cc <igmp_joingroup_netif+0x8c>
  1308a8:	e30906b4 	movw	r0, #38580	; 0x96b4
  1308ac:	e3400014 	movt	r0, #20
  1308b0:	ebff4a17 	bl	103114 <rt_kprintf>
  1308b4:	e3a01f7b 	mov	r1, #492	; 0x1ec
  1308b8:	e3090560 	movw	r0, #38240	; 0x9560
  1308bc:	e3400014 	movt	r0, #20
  1308c0:	ebff6a06 	bl	10b0e0 <sys_arch_assert>
  1308c4:	e3e03005 	mvn	r3, #5
  1308c8:	ea000041 	b	1309d4 <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  1308cc:	e51b3010 	ldr	r3, [fp, #-16]
  1308d0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1308d4:	e2033020 	and	r3, r3, #32
  1308d8:	e3530000 	cmp	r3, #0
  1308dc:	1a000008 	bne	130904 <igmp_joingroup_netif+0xc4>
  1308e0:	e30906f0 	movw	r0, #38640	; 0x96f0
  1308e4:	e3400014 	movt	r0, #20
  1308e8:	ebff4a09 	bl	103114 <rt_kprintf>
  1308ec:	e30011ef 	movw	r1, #495	; 0x1ef
  1308f0:	e3090560 	movw	r0, #38240	; 0x9560
  1308f4:	e3400014 	movt	r0, #20
  1308f8:	ebff69f8 	bl	10b0e0 <sys_arch_assert>
  1308fc:	e3e03005 	mvn	r3, #5
  130900:	ea000033 	b	1309d4 <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  130904:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130908:	e51b0010 	ldr	r0, [fp, #-16]
  13090c:	ebfffe0c 	bl	130144 <igmp_lookup_group>
  130910:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130914:	e51b3008 	ldr	r3, [fp, #-8]
  130918:	e3530000 	cmp	r3, #0
  13091c:	0a00002b 	beq	1309d0 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  130920:	e51b3008 	ldr	r3, [fp, #-8]
  130924:	e5d33009 	ldrb	r3, [r3, #9]
  130928:	e3530000 	cmp	r3, #0
  13092c:	1a00001f 	bne	1309b0 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130930:	e51b3008 	ldr	r3, [fp, #-8]
  130934:	e5d3300c 	ldrb	r3, [r3, #12]
  130938:	e3530000 	cmp	r3, #0
  13093c:	1a000009 	bne	130968 <igmp_joingroup_netif+0x128>
  130940:	e51b3010 	ldr	r3, [fp, #-16]
  130944:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130948:	e3530000 	cmp	r3, #0
  13094c:	0a000005 	beq	130968 <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  130950:	e51b3010 	ldr	r3, [fp, #-16]
  130954:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130958:	e3a02001 	mov	r2, #1
  13095c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130960:	e51b0010 	ldr	r0, [fp, #-16]
  130964:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  130968:	e30c3a50 	movw	r3, #51792	; 0xca50
  13096c:	e3403015 	movt	r3, #21
  130970:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  130974:	e2833001 	add	r3, r3, #1
  130978:	e6ff2073 	uxth	r2, r3
  13097c:	e30c3a50 	movw	r3, #51792	; 0xca50
  130980:	e3403015 	movt	r3, #21
  130984:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130988:	e3a02016 	mov	r2, #22
  13098c:	e51b1008 	ldr	r1, [fp, #-8]
  130990:	e51b0010 	ldr	r0, [fp, #-16]
  130994:	eb000180 	bl	130f9c <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  130998:	e3a01005 	mov	r1, #5
  13099c:	e51b0008 	ldr	r0, [fp, #-8]
  1309a0:	eb000116 	bl	130e00 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  1309a4:	e51b3008 	ldr	r3, [fp, #-8]
  1309a8:	e3a02001 	mov	r2, #1
  1309ac:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  1309b0:	e51b3008 	ldr	r3, [fp, #-8]
  1309b4:	e5d3300c 	ldrb	r3, [r3, #12]
  1309b8:	e2833001 	add	r3, r3, #1
  1309bc:	e6ef2073 	uxtb	r2, r3
  1309c0:	e51b3008 	ldr	r3, [fp, #-8]
  1309c4:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  1309c8:	e3a03000 	mov	r3, #0
  1309cc:	ea000000 	b	1309d4 <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  1309d0:	e3e03000 	mvn	r3, #0
  }
}
  1309d4:	e1a00003 	mov	r0, r3
  1309d8:	e24bd004 	sub	sp, fp, #4
  1309dc:	e8bd8800 	pop	{fp, pc}

001309e0 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1309e0:	e92d4800 	push	{fp, lr}
  1309e4:	e28db004 	add	fp, sp, #4
  1309e8:	e24dd018 	sub	sp, sp, #24
  1309ec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1309f0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  1309f4:	e3e03005 	mvn	r3, #5
  1309f8:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1309fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130a00:	e5933000 	ldr	r3, [r3]
  130a04:	e20330f0 	and	r3, r3, #240	; 0xf0
  130a08:	e35300e0 	cmp	r3, #224	; 0xe0
  130a0c:	0a000008 	beq	130a34 <igmp_leavegroup+0x54>
  130a10:	e3090728 	movw	r0, #38696	; 0x9728
  130a14:	e3400014 	movt	r0, #20
  130a18:	ebff49bd 	bl	103114 <rt_kprintf>
  130a1c:	e3001227 	movw	r1, #551	; 0x227
  130a20:	e3090560 	movw	r0, #38240	; 0x9560
  130a24:	e3400014 	movt	r0, #20
  130a28:	ebff69ac 	bl	10b0e0 <sys_arch_assert>
  130a2c:	e3e03005 	mvn	r3, #5
  130a30:	ea000038 	b	130b18 <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130a34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130a38:	e5932000 	ldr	r2, [r3]
  130a3c:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  130a40:	e3403014 	movt	r3, #20
  130a44:	e5933000 	ldr	r3, [r3]
  130a48:	e1520003 	cmp	r2, r3
  130a4c:	1a000008 	bne	130a74 <igmp_leavegroup+0x94>
  130a50:	e3090760 	movw	r0, #38752	; 0x9760
  130a54:	e3400014 	movt	r0, #20
  130a58:	ebff49ad 	bl	103114 <rt_kprintf>
  130a5c:	e3a01f8a 	mov	r1, #552	; 0x228
  130a60:	e3090560 	movw	r0, #38240	; 0x9560
  130a64:	e3400014 	movt	r0, #20
  130a68:	ebff699c 	bl	10b0e0 <sys_arch_assert>
  130a6c:	e3e03005 	mvn	r3, #5
  130a70:	ea000028 	b	130b18 <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130a74:	e30c3a44 	movw	r3, #51780	; 0xca44
  130a78:	e3403015 	movt	r3, #21
  130a7c:	e5933000 	ldr	r3, [r3]
  130a80:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130a84:	ea00001f 	b	130b08 <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130a88:	e51b300c 	ldr	r3, [fp, #-12]
  130a8c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130a90:	e2033020 	and	r3, r3, #32
  130a94:	e3530000 	cmp	r3, #0
  130a98:	0a000017 	beq	130afc <igmp_leavegroup+0x11c>
  130a9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130aa0:	e3530000 	cmp	r3, #0
  130aa4:	0a00000a 	beq	130ad4 <igmp_leavegroup+0xf4>
  130aa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130aac:	e5933000 	ldr	r3, [r3]
  130ab0:	e3530000 	cmp	r3, #0
  130ab4:	0a000006 	beq	130ad4 <igmp_leavegroup+0xf4>
  130ab8:	e51b300c 	ldr	r3, [fp, #-12]
  130abc:	e2833004 	add	r3, r3, #4
  130ac0:	e5932000 	ldr	r2, [r3]
  130ac4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130ac8:	e5933000 	ldr	r3, [r3]
  130acc:	e1520003 	cmp	r2, r3
  130ad0:	1a000009 	bne	130afc <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  130ad4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  130ad8:	e51b000c 	ldr	r0, [fp, #-12]
  130adc:	eb000010 	bl	130b24 <igmp_leavegroup_netif>
  130ae0:	e1a03000 	mov	r3, r0
  130ae4:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  130ae8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130aec:	e3530000 	cmp	r3, #0
  130af0:	0a000001 	beq	130afc <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  130af4:	e55b300d 	ldrb	r3, [fp, #-13]
  130af8:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130afc:	e51b300c 	ldr	r3, [fp, #-12]
  130b00:	e5933000 	ldr	r3, [r3]
  130b04:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130b08:	e51b300c 	ldr	r3, [fp, #-12]
  130b0c:	e3530000 	cmp	r3, #0
  130b10:	1affffdc 	bne	130a88 <igmp_leavegroup+0xa8>
  }

  return err;
  130b14:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130b18:	e1a00003 	mov	r0, r3
  130b1c:	e24bd004 	sub	sp, fp, #4
  130b20:	e8bd8800 	pop	{fp, pc}

00130b24 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130b24:	e92d4800 	push	{fp, lr}
  130b28:	e28db004 	add	fp, sp, #4
  130b2c:	e24dd010 	sub	sp, sp, #16
  130b30:	e50b0010 	str	r0, [fp, #-16]
  130b34:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b3c:	e5933000 	ldr	r3, [r3]
  130b40:	e20330f0 	and	r3, r3, #240	; 0xf0
  130b44:	e35300e0 	cmp	r3, #224	; 0xe0
  130b48:	0a000008 	beq	130b70 <igmp_leavegroup_netif+0x4c>
  130b4c:	e3090798 	movw	r0, #38808	; 0x9798
  130b50:	e3400014 	movt	r0, #20
  130b54:	ebff496e 	bl	103114 <rt_kprintf>
  130b58:	e300124a 	movw	r1, #586	; 0x24a
  130b5c:	e3090560 	movw	r0, #38240	; 0x9560
  130b60:	e3400014 	movt	r0, #20
  130b64:	ebff695d 	bl	10b0e0 <sys_arch_assert>
  130b68:	e3e03005 	mvn	r3, #5
  130b6c:	ea000052 	b	130cbc <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130b70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b74:	e5932000 	ldr	r2, [r3]
  130b78:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  130b7c:	e3403014 	movt	r3, #20
  130b80:	e5933000 	ldr	r3, [r3]
  130b84:	e1520003 	cmp	r2, r3
  130b88:	1a000008 	bne	130bb0 <igmp_leavegroup_netif+0x8c>
  130b8c:	e30907d8 	movw	r0, #38872	; 0x97d8
  130b90:	e3400014 	movt	r0, #20
  130b94:	ebff495e 	bl	103114 <rt_kprintf>
  130b98:	e300124b 	movw	r1, #587	; 0x24b
  130b9c:	e3090560 	movw	r0, #38240	; 0x9560
  130ba0:	e3400014 	movt	r0, #20
  130ba4:	ebff694d 	bl	10b0e0 <sys_arch_assert>
  130ba8:	e3e03005 	mvn	r3, #5
  130bac:	ea000042 	b	130cbc <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130bb0:	e51b3010 	ldr	r3, [fp, #-16]
  130bb4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130bb8:	e2033020 	and	r3, r3, #32
  130bbc:	e3530000 	cmp	r3, #0
  130bc0:	1a000008 	bne	130be8 <igmp_leavegroup_netif+0xc4>
  130bc4:	e3090814 	movw	r0, #38932	; 0x9814
  130bc8:	e3400014 	movt	r0, #20
  130bcc:	ebff4950 	bl	103114 <rt_kprintf>
  130bd0:	e300124e 	movw	r1, #590	; 0x24e
  130bd4:	e3090560 	movw	r0, #38240	; 0x9560
  130bd8:	e3400014 	movt	r0, #20
  130bdc:	ebff693f 	bl	10b0e0 <sys_arch_assert>
  130be0:	e3e03005 	mvn	r3, #5
  130be4:	ea000034 	b	130cbc <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  130be8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130bec:	e51b0010 	ldr	r0, [fp, #-16]
  130bf0:	ebfffd37 	bl	1300d4 <igmp_lookfor_group>
  130bf4:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130bf8:	e51b3008 	ldr	r3, [fp, #-8]
  130bfc:	e3530000 	cmp	r3, #0
  130c00:	0a00002c 	beq	130cb8 <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  130c04:	e51b3008 	ldr	r3, [fp, #-8]
  130c08:	e5d3300c 	ldrb	r3, [r3, #12]
  130c0c:	e3530001 	cmp	r3, #1
  130c10:	8a000020 	bhi	130c98 <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  130c14:	e51b1008 	ldr	r1, [fp, #-8]
  130c18:	e51b0010 	ldr	r0, [fp, #-16]
  130c1c:	ebfffda8 	bl	1302c4 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130c20:	e51b3008 	ldr	r3, [fp, #-8]
  130c24:	e5d33008 	ldrb	r3, [r3, #8]
  130c28:	e3530000 	cmp	r3, #0
  130c2c:	0a00000b 	beq	130c60 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130c30:	e30c3a50 	movw	r3, #51792	; 0xca50
  130c34:	e3403015 	movt	r3, #21
  130c38:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  130c3c:	e2833001 	add	r3, r3, #1
  130c40:	e6ff2073 	uxth	r2, r3
  130c44:	e30c3a50 	movw	r3, #51792	; 0xca50
  130c48:	e3403015 	movt	r3, #21
  130c4c:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  130c50:	e3a02017 	mov	r2, #23
  130c54:	e51b1008 	ldr	r1, [fp, #-8]
  130c58:	e51b0010 	ldr	r0, [fp, #-16]
  130c5c:	eb0000ce 	bl	130f9c <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  130c60:	e51b3010 	ldr	r3, [fp, #-16]
  130c64:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c68:	e3530000 	cmp	r3, #0
  130c6c:	0a000005 	beq	130c88 <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  130c70:	e51b3010 	ldr	r3, [fp, #-16]
  130c74:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c78:	e3a02000 	mov	r2, #0
  130c7c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130c80:	e51b0010 	ldr	r0, [fp, #-16]
  130c84:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  130c88:	e51b1008 	ldr	r1, [fp, #-8]
  130c8c:	e3a0000c 	mov	r0, #12
  130c90:	ebffa174 	bl	119268 <memp_free>
  130c94:	ea000005 	b	130cb0 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  130c98:	e51b3008 	ldr	r3, [fp, #-8]
  130c9c:	e5d3300c 	ldrb	r3, [r3, #12]
  130ca0:	e2433001 	sub	r3, r3, #1
  130ca4:	e6ef2073 	uxtb	r2, r3
  130ca8:	e51b3008 	ldr	r3, [fp, #-8]
  130cac:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130cb0:	e3a03000 	mov	r3, #0
  130cb4:	ea000000 	b	130cbc <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130cb8:	e3e03005 	mvn	r3, #5
  }
}
  130cbc:	e1a00003 	mov	r0, r3
  130cc0:	e24bd004 	sub	sp, fp, #4
  130cc4:	e8bd8800 	pop	{fp, pc}

00130cc8 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130cc8:	e92d4800 	push	{fp, lr}
  130ccc:	e28db004 	add	fp, sp, #4
  130cd0:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  130cd4:	e30c3a44 	movw	r3, #51780	; 0xca44
  130cd8:	e3403015 	movt	r3, #21
  130cdc:	e5933000 	ldr	r3, [r3]
  130ce0:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  130ce4:	ea00001d 	b	130d60 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  130ce8:	e51b3008 	ldr	r3, [fp, #-8]
  130cec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130cf0:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  130cf4:	ea000013 	b	130d48 <igmp_tmr+0x80>
      if (group->timer > 0) {
  130cf8:	e51b300c 	ldr	r3, [fp, #-12]
  130cfc:	e1d330ba 	ldrh	r3, [r3, #10]
  130d00:	e3530000 	cmp	r3, #0
  130d04:	0a00000c 	beq	130d3c <igmp_tmr+0x74>
        group->timer--;
  130d08:	e51b300c 	ldr	r3, [fp, #-12]
  130d0c:	e1d330ba 	ldrh	r3, [r3, #10]
  130d10:	e2433001 	sub	r3, r3, #1
  130d14:	e6ff2073 	uxth	r2, r3
  130d18:	e51b300c 	ldr	r3, [fp, #-12]
  130d1c:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130d20:	e51b300c 	ldr	r3, [fp, #-12]
  130d24:	e1d330ba 	ldrh	r3, [r3, #10]
  130d28:	e3530000 	cmp	r3, #0
  130d2c:	1a000002 	bne	130d3c <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130d30:	e51b100c 	ldr	r1, [fp, #-12]
  130d34:	e51b0008 	ldr	r0, [fp, #-8]
  130d38:	eb00000e 	bl	130d78 <igmp_timeout>
        }
      }
      group = group->next;
  130d3c:	e51b300c 	ldr	r3, [fp, #-12]
  130d40:	e5933000 	ldr	r3, [r3]
  130d44:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130d48:	e51b300c 	ldr	r3, [fp, #-12]
  130d4c:	e3530000 	cmp	r3, #0
  130d50:	1affffe8 	bne	130cf8 <igmp_tmr+0x30>
    }
    netif = netif->next;
  130d54:	e51b3008 	ldr	r3, [fp, #-8]
  130d58:	e5933000 	ldr	r3, [r3]
  130d5c:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130d60:	e51b3008 	ldr	r3, [fp, #-8]
  130d64:	e3530000 	cmp	r3, #0
  130d68:	1affffde 	bne	130ce8 <igmp_tmr+0x20>
  }
}
  130d6c:	e320f000 	nop	{0}
  130d70:	e24bd004 	sub	sp, fp, #4
  130d74:	e8bd8800 	pop	{fp, pc}

00130d78 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130d78:	e92d4800 	push	{fp, lr}
  130d7c:	e28db004 	add	fp, sp, #4
  130d80:	e24dd008 	sub	sp, sp, #8
  130d84:	e50b0008 	str	r0, [fp, #-8]
  130d88:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130d8c:	e51b300c 	ldr	r3, [fp, #-12]
  130d90:	e5d33009 	ldrb	r3, [r3, #9]
  130d94:	e3530001 	cmp	r3, #1
  130d98:	1a000015 	bne	130df4 <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130d9c:	e51b300c 	ldr	r3, [fp, #-12]
  130da0:	e5932004 	ldr	r2, [r3, #4]
  130da4:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  130da8:	e3403014 	movt	r3, #20
  130dac:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130db0:	e1520003 	cmp	r2, r3
  130db4:	0a00000e 	beq	130df4 <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130db8:	e51b300c 	ldr	r3, [fp, #-12]
  130dbc:	e3a02002 	mov	r2, #2
  130dc0:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130dc4:	e30c3a50 	movw	r3, #51792	; 0xca50
  130dc8:	e3403015 	movt	r3, #21
  130dcc:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130dd0:	e2833001 	add	r3, r3, #1
  130dd4:	e6ff2073 	uxth	r2, r3
  130dd8:	e30c3a50 	movw	r3, #51792	; 0xca50
  130ddc:	e3403015 	movt	r3, #21
  130de0:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130de4:	e3a02016 	mov	r2, #22
  130de8:	e51b100c 	ldr	r1, [fp, #-12]
  130dec:	e51b0008 	ldr	r0, [fp, #-8]
  130df0:	eb000069 	bl	130f9c <igmp_send>
  }
}
  130df4:	e320f000 	nop	{0}
  130df8:	e24bd004 	sub	sp, fp, #4
  130dfc:	e8bd8800 	pop	{fp, pc}

00130e00 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130e00:	e92d4800 	push	{fp, lr}
  130e04:	e28db004 	add	fp, sp, #4
  130e08:	e24dd008 	sub	sp, sp, #8
  130e0c:	e50b0008 	str	r0, [fp, #-8]
  130e10:	e1a03001 	mov	r3, r1
  130e14:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  130e18:	e55b3009 	ldrb	r3, [fp, #-9]
  130e1c:	e3530002 	cmp	r3, #2
  130e20:	9a000008 	bls	130e48 <igmp_start_timer+0x48>
  130e24:	eb0034d4 	bl	13e17c <rand>
  130e28:	e1a02000 	mov	r2, r0
  130e2c:	e55b3009 	ldrb	r3, [fp, #-9]
  130e30:	e1a01003 	mov	r1, r3
  130e34:	e1a00002 	mov	r0, r2
  130e38:	eb001f95 	bl	138c94 <__aeabi_idivmod>
  130e3c:	e1a03001 	mov	r3, r1
  130e40:	e6ff3073 	uxth	r3, r3
  130e44:	ea000000 	b	130e4c <igmp_start_timer+0x4c>
  130e48:	e3a03001 	mov	r3, #1
  130e4c:	e51b2008 	ldr	r2, [fp, #-8]
  130e50:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130e54:	e51b3008 	ldr	r3, [fp, #-8]
  130e58:	e1d330ba 	ldrh	r3, [r3, #10]
  130e5c:	e3530000 	cmp	r3, #0
  130e60:	1a000002 	bne	130e70 <igmp_start_timer+0x70>
    group->timer = 1;
  130e64:	e51b3008 	ldr	r3, [fp, #-8]
  130e68:	e3a02001 	mov	r2, #1
  130e6c:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130e70:	e320f000 	nop	{0}
  130e74:	e24bd004 	sub	sp, fp, #4
  130e78:	e8bd8800 	pop	{fp, pc}

00130e7c <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130e7c:	e92d4800 	push	{fp, lr}
  130e80:	e28db004 	add	fp, sp, #4
  130e84:	e24dd008 	sub	sp, sp, #8
  130e88:	e50b0008 	str	r0, [fp, #-8]
  130e8c:	e1a03001 	mov	r3, r1
  130e90:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130e94:	e51b3008 	ldr	r3, [fp, #-8]
  130e98:	e5d33009 	ldrb	r3, [r3, #9]
  130e9c:	e3530002 	cmp	r3, #2
  130ea0:	0a00000d 	beq	130edc <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130ea4:	e51b3008 	ldr	r3, [fp, #-8]
  130ea8:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130eac:	e3530001 	cmp	r3, #1
  130eb0:	1a000010 	bne	130ef8 <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130eb4:	e51b3008 	ldr	r3, [fp, #-8]
  130eb8:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130ebc:	e3530000 	cmp	r3, #0
  130ec0:	0a000005 	beq	130edc <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130ec4:	e55b3009 	ldrb	r3, [fp, #-9]
  130ec8:	e6ff2073 	uxth	r2, r3
  130ecc:	e51b3008 	ldr	r3, [fp, #-8]
  130ed0:	e1d330ba 	ldrh	r3, [r3, #10]
  130ed4:	e1520003 	cmp	r2, r3
  130ed8:	2a000006 	bcs	130ef8 <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130edc:	e55b3009 	ldrb	r3, [fp, #-9]
  130ee0:	e1a01003 	mov	r1, r3
  130ee4:	e51b0008 	ldr	r0, [fp, #-8]
  130ee8:	ebffffc4 	bl	130e00 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130eec:	e51b3008 	ldr	r3, [fp, #-8]
  130ef0:	e3a02001 	mov	r2, #1
  130ef4:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130ef8:	e320f000 	nop	{0}
  130efc:	e24bd004 	sub	sp, fp, #4
  130f00:	e8bd8800 	pop	{fp, pc}

00130f04 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130f04:	e92d4800 	push	{fp, lr}
  130f08:	e28db004 	add	fp, sp, #4
  130f0c:	e24dd030 	sub	sp, sp, #48	; 0x30
  130f10:	e50b0010 	str	r0, [fp, #-16]
  130f14:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130f18:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130f1c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130f20:	e3003494 	movw	r3, #1172	; 0x494
  130f24:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130f28:	e3a03000 	mov	r3, #0
  130f2c:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130f30:	e30c3a50 	movw	r3, #51792	; 0xca50
  130f34:	e3403015 	movt	r3, #21
  130f38:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130f3c:	e2833001 	add	r3, r3, #1
  130f40:	e6ff2073 	uxth	r2, r3
  130f44:	e30c3a50 	movw	r3, #51792	; 0xca50
  130f48:	e3403015 	movt	r3, #21
  130f4c:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130f50:	e3a03004 	mov	r3, #4
  130f54:	e58d3010 	str	r3, [sp, #16]
  130f58:	e24b3008 	sub	r3, fp, #8
  130f5c:	e58d300c 	str	r3, [sp, #12]
  130f60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130f64:	e58d3008 	str	r3, [sp, #8]
  130f68:	e3a03002 	mov	r3, #2
  130f6c:	e58d3004 	str	r3, [sp, #4]
  130f70:	e3a03000 	mov	r3, #0
  130f74:	e58d3000 	str	r3, [sp]
  130f78:	e3a03001 	mov	r3, #1
  130f7c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130f80:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130f84:	e51b0010 	ldr	r0, [fp, #-16]
  130f88:	eb000371 	bl	131d54 <ip4_output_if_opt>
  130f8c:	e1a03000 	mov	r3, r0
}
  130f90:	e1a00003 	mov	r0, r3
  130f94:	e24bd004 	sub	sp, fp, #4
  130f98:	e8bd8800 	pop	{fp, pc}

00130f9c <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130f9c:	e92d4800 	push	{fp, lr}
  130fa0:	e28db004 	add	fp, sp, #4
  130fa4:	e24dd020 	sub	sp, sp, #32
  130fa8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130fac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130fb0:	e1a03002 	mov	r3, r2
  130fb4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130fb8:	e3a03000 	mov	r3, #0
  130fbc:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130fc0:	e3a03000 	mov	r3, #0
  130fc4:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130fc8:	e30938f8 	movw	r3, #39160	; 0x98f8
  130fcc:	e3403014 	movt	r3, #20
  130fd0:	e5933000 	ldr	r3, [r3]
  130fd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130fd8:	e3a03000 	mov	r3, #0
  130fdc:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130fe0:	e3a02000 	mov	r2, #0
  130fe4:	e3a01008 	mov	r1, #8
  130fe8:	e3a00000 	mov	r0, #0
  130fec:	ebffa4a4 	bl	11a284 <pbuf_alloc>
  130ff0:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  130ff4:	e51b300c 	ldr	r3, [fp, #-12]
  130ff8:	e3530000 	cmp	r3, #0
  130ffc:	0a000049 	beq	131128 <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  131000:	e51b300c 	ldr	r3, [fp, #-12]
  131004:	e5933004 	ldr	r3, [r3, #4]
  131008:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  13100c:	e51b300c 	ldr	r3, [fp, #-12]
  131010:	e1d330ba 	ldrh	r3, [r3, #10]
  131014:	e3530007 	cmp	r3, #7
  131018:	8a000006 	bhi	131038 <igmp_send+0x9c>
  13101c:	e3090850 	movw	r0, #38992	; 0x9850
  131020:	e3400014 	movt	r0, #20
  131024:	ebff483a 	bl	103114 <rt_kprintf>
  131028:	e3001302 	movw	r1, #770	; 0x302
  13102c:	e3090560 	movw	r0, #38240	; 0x9560
  131030:	e3400014 	movt	r0, #20
  131034:	ebff6829 	bl	10b0e0 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  131038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13103c:	e2833004 	add	r3, r3, #4
  131040:	e5933000 	ldr	r3, [r3]
  131044:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  131048:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  13104c:	e3530016 	cmp	r3, #22
  131050:	1a00000a 	bne	131080 <igmp_send+0xe4>
      dest = &(group->group_address);
  131054:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131058:	e2833004 	add	r3, r3, #4
  13105c:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  131060:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131064:	e5932004 	ldr	r2, [r3, #4]
  131068:	e51b3010 	ldr	r3, [fp, #-16]
  13106c:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  131070:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131074:	e3a02001 	mov	r2, #1
  131078:	e5c32008 	strb	r2, [r3, #8]
  13107c:	ea000009 	b	1310a8 <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  131080:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131084:	e3530017 	cmp	r3, #23
  131088:	1a000006 	bne	1310a8 <igmp_send+0x10c>
        dest = &allrouters;
  13108c:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  131090:	e3403014 	movt	r3, #20
  131094:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  131098:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13109c:	e5932004 	ldr	r2, [r3, #4]
  1310a0:	e51b3010 	ldr	r3, [fp, #-16]
  1310a4:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  1310a8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1310ac:	e3530016 	cmp	r3, #22
  1310b0:	0a000002 	beq	1310c0 <igmp_send+0x124>
  1310b4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1310b8:	e3530017 	cmp	r3, #23
  1310bc:	1a000016 	bne	13111c <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  1310c0:	e51b3010 	ldr	r3, [fp, #-16]
  1310c4:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  1310c8:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  1310cc:	e51b3010 	ldr	r3, [fp, #-16]
  1310d0:	e3a02000 	mov	r2, #0
  1310d4:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  1310d8:	e51b3010 	ldr	r3, [fp, #-16]
  1310dc:	e3a02000 	mov	r2, #0
  1310e0:	e5c32002 	strb	r2, [r3, #2]
  1310e4:	e3a02000 	mov	r2, #0
  1310e8:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  1310ec:	e3a01008 	mov	r1, #8
  1310f0:	e51b0010 	ldr	r0, [fp, #-16]
  1310f4:	ebff9e41 	bl	118a00 <inet_chksum>
  1310f8:	e1a03000 	mov	r3, r0
  1310fc:	e1a02003 	mov	r2, r3
  131100:	e51b3010 	ldr	r3, [fp, #-16]
  131104:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  131108:	e24b1014 	sub	r1, fp, #20
  13110c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131110:	e51b2008 	ldr	r2, [fp, #-8]
  131114:	e51b000c 	ldr	r0, [fp, #-12]
  131118:	ebffff79 	bl	130f04 <igmp_ip_output_if>
    }

    pbuf_free(p);
  13111c:	e51b000c 	ldr	r0, [fp, #-12]
  131120:	ebffa75e 	bl	11aea0 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  131124:	ea000007 	b	131148 <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  131128:	e30c3a50 	movw	r3, #51792	; 0xca50
  13112c:	e3403015 	movt	r3, #21
  131130:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  131134:	e2833001 	add	r3, r3, #1
  131138:	e6ff2073 	uxth	r2, r3
  13113c:	e30c3a50 	movw	r3, #51792	; 0xca50
  131140:	e3403015 	movt	r3, #21
  131144:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  131148:	e320f000 	nop	{0}
  13114c:	e24bd004 	sub	sp, fp, #4
  131150:	e8bd8800 	pop	{fp, pc}

00131154 <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  131154:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  131158:	e28db000 	add	fp, sp, #0
  13115c:	e24dd00c 	sub	sp, sp, #12
  131160:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  131164:	e30e3c00 	movw	r3, #60416	; 0xec00
  131168:	e3403014 	movt	r3, #20
  13116c:	e51b2008 	ldr	r2, [fp, #-8]
  131170:	e5832000 	str	r2, [r3]
}
  131174:	e320f000 	nop	{0}
  131178:	e28bd000 	add	sp, fp, #0
  13117c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131180:	e12fff1e 	bx	lr

00131184 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  131184:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  131188:	e28db000 	add	fp, sp, #0
  13118c:	e24dd014 	sub	sp, sp, #20
  131190:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  131194:	e51b3010 	ldr	r3, [fp, #-16]
  131198:	e5933000 	ldr	r3, [r3]
  13119c:	e20330f0 	and	r3, r3, #240	; 0xf0
  1311a0:	e35300e0 	cmp	r3, #224	; 0xe0
  1311a4:	1a000008 	bne	1311cc <ip4_route+0x48>
  1311a8:	e30e3c00 	movw	r3, #60416	; 0xec00
  1311ac:	e3403014 	movt	r3, #20
  1311b0:	e5933000 	ldr	r3, [r3]
  1311b4:	e3530000 	cmp	r3, #0
  1311b8:	0a000003 	beq	1311cc <ip4_route+0x48>
    return ip4_default_multicast_netif;
  1311bc:	e30e3c00 	movw	r3, #60416	; 0xec00
  1311c0:	e3403014 	movt	r3, #20
  1311c4:	e5933000 	ldr	r3, [r3]
  1311c8:	ea000091 	b	131414 <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1311cc:	e30c3a44 	movw	r3, #51780	; 0xca44
  1311d0:	e3403015 	movt	r3, #21
  1311d4:	e5933000 	ldr	r3, [r3]
  1311d8:	e50b3008 	str	r3, [fp, #-8]
  1311dc:	ea000030 	b	1312a4 <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1311e0:	e51b3008 	ldr	r3, [fp, #-8]
  1311e4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1311e8:	e2033001 	and	r3, r3, #1
  1311ec:	e6ef3073 	uxtb	r3, r3
  1311f0:	e3530000 	cmp	r3, #0
  1311f4:	0a000027 	beq	131298 <ip4_route+0x114>
  1311f8:	e51b3008 	ldr	r3, [fp, #-8]
  1311fc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131200:	e1a03123 	lsr	r3, r3, #2
  131204:	e2033001 	and	r3, r3, #1
  131208:	e6ef3073 	uxtb	r3, r3
  13120c:	e3530000 	cmp	r3, #0
  131210:	0a000020 	beq	131298 <ip4_route+0x114>
  131214:	e51b3008 	ldr	r3, [fp, #-8]
  131218:	e2833004 	add	r3, r3, #4
  13121c:	e5933000 	ldr	r3, [r3]
  131220:	e3530000 	cmp	r3, #0
  131224:	0a00001b 	beq	131298 <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  131228:	e51b3010 	ldr	r3, [fp, #-16]
  13122c:	e5932000 	ldr	r2, [r3]
  131230:	e51b3008 	ldr	r3, [fp, #-8]
  131234:	e2833004 	add	r3, r3, #4
  131238:	e5933000 	ldr	r3, [r3]
  13123c:	e0222003 	eor	r2, r2, r3
  131240:	e51b3008 	ldr	r3, [fp, #-8]
  131244:	e2833008 	add	r3, r3, #8
  131248:	e5933000 	ldr	r3, [r3]
  13124c:	e0033002 	and	r3, r3, r2
  131250:	e3530000 	cmp	r3, #0
  131254:	1a000001 	bne	131260 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  131258:	e51b3008 	ldr	r3, [fp, #-8]
  13125c:	ea00006c 	b	131414 <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  131260:	e51b3008 	ldr	r3, [fp, #-8]
  131264:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131268:	e2033002 	and	r3, r3, #2
  13126c:	e3530000 	cmp	r3, #0
  131270:	1a000008 	bne	131298 <ip4_route+0x114>
  131274:	e51b3010 	ldr	r3, [fp, #-16]
  131278:	e5932000 	ldr	r2, [r3]
  13127c:	e51b3008 	ldr	r3, [fp, #-8]
  131280:	e283300c 	add	r3, r3, #12
  131284:	e5933000 	ldr	r3, [r3]
  131288:	e1520003 	cmp	r2, r3
  13128c:	1a000001 	bne	131298 <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  131290:	e51b3008 	ldr	r3, [fp, #-8]
  131294:	ea00005e 	b	131414 <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  131298:	e51b3008 	ldr	r3, [fp, #-8]
  13129c:	e5933000 	ldr	r3, [r3]
  1312a0:	e50b3008 	str	r3, [fp, #-8]
  1312a4:	e51b3008 	ldr	r3, [fp, #-8]
  1312a8:	e3530000 	cmp	r3, #0
  1312ac:	1affffcb 	bne	1311e0 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  1312b0:	e51b3010 	ldr	r3, [fp, #-16]
  1312b4:	e5933000 	ldr	r3, [r3]
  1312b8:	e6ef3073 	uxtb	r3, r3
  1312bc:	e353007f 	cmp	r3, #127	; 0x7f
  1312c0:	1a000025 	bne	13135c <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  1312c4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1312c8:	e3403015 	movt	r3, #21
  1312cc:	e5933000 	ldr	r3, [r3]
  1312d0:	e3530000 	cmp	r3, #0
  1312d4:	0a00000b 	beq	131308 <ip4_route+0x184>
  1312d8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1312dc:	e3403015 	movt	r3, #21
  1312e0:	e5933000 	ldr	r3, [r3]
  1312e4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1312e8:	e2033001 	and	r3, r3, #1
  1312ec:	e6ef3073 	uxtb	r3, r3
  1312f0:	e3530000 	cmp	r3, #0
  1312f4:	0a000003 	beq	131308 <ip4_route+0x184>
      return netif_default;
  1312f8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1312fc:	e3403015 	movt	r3, #21
  131300:	e5933000 	ldr	r3, [r3]
  131304:	ea000042 	b	131414 <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  131308:	e30c3a44 	movw	r3, #51780	; 0xca44
  13130c:	e3403015 	movt	r3, #21
  131310:	e5933000 	ldr	r3, [r3]
  131314:	e50b3008 	str	r3, [fp, #-8]
  131318:	ea00000a 	b	131348 <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  13131c:	e51b3008 	ldr	r3, [fp, #-8]
  131320:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131324:	e2033001 	and	r3, r3, #1
  131328:	e6ef3073 	uxtb	r3, r3
  13132c:	e3530000 	cmp	r3, #0
  131330:	0a000001 	beq	13133c <ip4_route+0x1b8>
        return netif;
  131334:	e51b3008 	ldr	r3, [fp, #-8]
  131338:	ea000035 	b	131414 <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  13133c:	e51b3008 	ldr	r3, [fp, #-8]
  131340:	e5933000 	ldr	r3, [r3]
  131344:	e50b3008 	str	r3, [fp, #-8]
  131348:	e51b3008 	ldr	r3, [fp, #-8]
  13134c:	e3530000 	cmp	r3, #0
  131350:	1afffff1 	bne	13131c <ip4_route+0x198>
      }
    }
    return NULL;
  131354:	e3a03000 	mov	r3, #0
  131358:	ea00002d 	b	131414 <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  13135c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131360:	e3403015 	movt	r3, #21
  131364:	e5933000 	ldr	r3, [r3]
  131368:	e3530000 	cmp	r3, #0
  13136c:	0a000014 	beq	1313c4 <ip4_route+0x240>
  131370:	e30c3a48 	movw	r3, #51784	; 0xca48
  131374:	e3403015 	movt	r3, #21
  131378:	e5933000 	ldr	r3, [r3]
  13137c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131380:	e2033001 	and	r3, r3, #1
  131384:	e3530000 	cmp	r3, #0
  131388:	0a00000d 	beq	1313c4 <ip4_route+0x240>
  13138c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131390:	e3403015 	movt	r3, #21
  131394:	e5933000 	ldr	r3, [r3]
  131398:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13139c:	e2033004 	and	r3, r3, #4
  1313a0:	e3530000 	cmp	r3, #0
  1313a4:	0a000006 	beq	1313c4 <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  1313a8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1313ac:	e3403015 	movt	r3, #21
  1313b0:	e5933000 	ldr	r3, [r3]
  1313b4:	e2833004 	add	r3, r3, #4
  1313b8:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  1313bc:	e3530000 	cmp	r3, #0
  1313c0:	1a000010 	bne	131408 <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1313c4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1313c8:	e3403015 	movt	r3, #21
  1313cc:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1313d0:	e2833001 	add	r3, r3, #1
  1313d4:	e6ff2073 	uxth	r2, r3
  1313d8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1313dc:	e3403015 	movt	r3, #21
  1313e0:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  1313e4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1313e8:	e3403015 	movt	r3, #21
  1313ec:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  1313f0:	e2832001 	add	r2, r3, #1
  1313f4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1313f8:	e3403015 	movt	r3, #21
  1313fc:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  131400:	e3a03000 	mov	r3, #0
  131404:	ea000002 	b	131414 <ip4_route+0x290>
  }

  return netif_default;
  131408:	e30c3a48 	movw	r3, #51784	; 0xca48
  13140c:	e3403015 	movt	r3, #21
  131410:	e5933000 	ldr	r3, [r3]
}
  131414:	e1a00003 	mov	r0, r3
  131418:	e28bd000 	add	sp, fp, #0
  13141c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131420:	e12fff1e 	bx	lr

00131424 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  131424:	e92d4800 	push	{fp, lr}
  131428:	e28db004 	add	fp, sp, #4
  13142c:	e24dd028 	sub	sp, sp, #40	; 0x28
  131430:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  131434:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  131438:	e3a03001 	mov	r3, #1
  13143c:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  131440:	e30c3a50 	movw	r3, #51792	; 0xca50
  131444:	e3403015 	movt	r3, #21
  131448:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  13144c:	e2833001 	add	r3, r3, #1
  131450:	e6ff2073 	uxth	r2, r3
  131454:	e30c3a50 	movw	r3, #51792	; 0xca50
  131458:	e3403015 	movt	r3, #21
  13145c:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  131460:	e30c3a50 	movw	r3, #51792	; 0xca50
  131464:	e3403015 	movt	r3, #21
  131468:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  13146c:	e2832001 	add	r2, r3, #1
  131470:	e30c3a50 	movw	r3, #51792	; 0xca50
  131474:	e3403015 	movt	r3, #21
  131478:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  13147c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131480:	e5933004 	ldr	r3, [r3, #4]
  131484:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  131488:	e51b3008 	ldr	r3, [fp, #-8]
  13148c:	e5d33000 	ldrb	r3, [r3]
  131490:	e1a03223 	lsr	r3, r3, #4
  131494:	e6ef3073 	uxtb	r3, r3
  131498:	e3530004 	cmp	r3, #4
  13149c:	0a00001a 	beq	13150c <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  1314a0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1314a4:	ebffa67d 	bl	11aea0 <pbuf_free>
    IP_STATS_INC(ip.err);
  1314a8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1314ac:	e3403015 	movt	r3, #21
  1314b0:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  1314b4:	e2833001 	add	r3, r3, #1
  1314b8:	e6ff2073 	uxth	r2, r3
  1314bc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1314c0:	e3403015 	movt	r3, #21
  1314c4:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  1314c8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1314cc:	e3403015 	movt	r3, #21
  1314d0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1314d4:	e2833001 	add	r3, r3, #1
  1314d8:	e6ff2073 	uxth	r2, r3
  1314dc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1314e0:	e3403015 	movt	r3, #21
  1314e4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  1314e8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1314ec:	e3403015 	movt	r3, #21
  1314f0:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  1314f4:	e2832001 	add	r2, r3, #1
  1314f8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1314fc:	e3403015 	movt	r3, #21
  131500:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  131504:	e3a03000 	mov	r3, #0
  131508:	ea0001f2 	b	131cd8 <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  13150c:	e51b3008 	ldr	r3, [fp, #-8]
  131510:	e5d33000 	ldrb	r3, [r3]
  131514:	e6ff3073 	uxth	r3, r3
  131518:	e203300f 	and	r3, r3, #15
  13151c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  131520:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131524:	e1a03103 	lsl	r3, r3, #2
  131528:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  13152c:	e51b3008 	ldr	r3, [fp, #-8]
  131530:	e1d330b2 	ldrh	r3, [r3, #2]
  131534:	e6ff3073 	uxth	r3, r3
  131538:	e1a00003 	mov	r0, r3
  13153c:	ebff9420 	bl	1165c4 <lwip_htons>
  131540:	e1a03000 	mov	r3, r0
  131544:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  131548:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13154c:	e1d330b8 	ldrh	r3, [r3, #8]
  131550:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131554:	e1520003 	cmp	r2, r3
  131558:	2a000003 	bcs	13156c <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  13155c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  131560:	e1a01003 	mov	r1, r3
  131564:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131568:	ebffa503 	bl	11a97c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  13156c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131570:	e1d330ba 	ldrh	r3, [r3, #10]
  131574:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131578:	e1520003 	cmp	r2, r3
  13157c:	8a000007 	bhi	1315a0 <ip4_input+0x17c>
  131580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131584:	e1d330b8 	ldrh	r3, [r3, #8]
  131588:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  13158c:	e1520003 	cmp	r2, r3
  131590:	8a000002 	bhi	1315a0 <ip4_input+0x17c>
  131594:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131598:	e3530013 	cmp	r3, #19
  13159c:	8a00001a 	bhi	13160c <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  1315a0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1315a4:	ebffa63d 	bl	11aea0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  1315a8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1315ac:	e3403015 	movt	r3, #21
  1315b0:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  1315b4:	e2833001 	add	r3, r3, #1
  1315b8:	e6ff2073 	uxth	r2, r3
  1315bc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1315c0:	e3403015 	movt	r3, #21
  1315c4:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  1315c8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1315cc:	e3403015 	movt	r3, #21
  1315d0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1315d4:	e2833001 	add	r3, r3, #1
  1315d8:	e6ff2073 	uxth	r2, r3
  1315dc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1315e0:	e3403015 	movt	r3, #21
  1315e4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  1315e8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1315ec:	e3403015 	movt	r3, #21
  1315f0:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1315f4:	e2832001 	add	r2, r3, #1
  1315f8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1315fc:	e3403015 	movt	r3, #21
  131600:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  131604:	e3a03000 	mov	r3, #0
  131608:	ea0001b2 	b	131cd8 <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  13160c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131610:	e1a01003 	mov	r1, r3
  131614:	e51b0008 	ldr	r0, [fp, #-8]
  131618:	ebff9cf8 	bl	118a00 <inet_chksum>
  13161c:	e1a03000 	mov	r3, r0
  131620:	e3530000 	cmp	r3, #0
  131624:	0a00001a 	beq	131694 <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  131628:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13162c:	ebffa61b 	bl	11aea0 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131630:	e30c3a50 	movw	r3, #51792	; 0xca50
  131634:	e3403015 	movt	r3, #21
  131638:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  13163c:	e2833001 	add	r3, r3, #1
  131640:	e6ff2073 	uxth	r2, r3
  131644:	e30c3a50 	movw	r3, #51792	; 0xca50
  131648:	e3403015 	movt	r3, #21
  13164c:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  131650:	e30c3a50 	movw	r3, #51792	; 0xca50
  131654:	e3403015 	movt	r3, #21
  131658:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13165c:	e2833001 	add	r3, r3, #1
  131660:	e6ff2073 	uxth	r2, r3
  131664:	e30c3a50 	movw	r3, #51792	; 0xca50
  131668:	e3403015 	movt	r3, #21
  13166c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  131670:	e30c3a50 	movw	r3, #51792	; 0xca50
  131674:	e3403015 	movt	r3, #21
  131678:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  13167c:	e2832001 	add	r2, r3, #1
  131680:	e30c3a50 	movw	r3, #51792	; 0xca50
  131684:	e3403015 	movt	r3, #21
  131688:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  13168c:	e3a03000 	mov	r3, #0
  131690:	ea000190 	b	131cd8 <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  131694:	e51b3008 	ldr	r3, [fp, #-8]
  131698:	e5932010 	ldr	r2, [r3, #16]
  13169c:	e30f3618 	movw	r3, #63000	; 0xf618
  1316a0:	e3403014 	movt	r3, #20
  1316a4:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  1316a8:	e51b3008 	ldr	r3, [fp, #-8]
  1316ac:	e593200c 	ldr	r2, [r3, #12]
  1316b0:	e30f3618 	movw	r3, #63000	; 0xf618
  1316b4:	e3403014 	movt	r3, #20
  1316b8:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  1316bc:	e30f3618 	movw	r3, #63000	; 0xf618
  1316c0:	e3403014 	movt	r3, #20
  1316c4:	e5933014 	ldr	r3, [r3, #20]
  1316c8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1316cc:	e35300e0 	cmp	r3, #224	; 0xe0
  1316d0:	1a000020 	bne	131758 <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  1316d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1316d8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1316dc:	e2033020 	and	r3, r3, #32
  1316e0:	e3530000 	cmp	r3, #0
  1316e4:	0a000018 	beq	13174c <ip4_input+0x328>
  1316e8:	e59f15f4 	ldr	r1, [pc, #1524]	; 131ce4 <ip4_input+0x8c0>
  1316ec:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1316f0:	ebfffa77 	bl	1300d4 <igmp_lookfor_group>
  1316f4:	e1a03000 	mov	r3, r0
  1316f8:	e3530000 	cmp	r3, #0
  1316fc:	0a000012 	beq	13174c <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  131700:	e3a030e0 	mov	r3, #224	; 0xe0
  131704:	e3403100 	movt	r3, #256	; 0x100
  131708:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  13170c:	e30f3618 	movw	r3, #63000	; 0xf618
  131710:	e3403014 	movt	r3, #20
  131714:	e5932014 	ldr	r2, [r3, #20]
  131718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13171c:	e1520003 	cmp	r2, r3
  131720:	1a000006 	bne	131740 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  131724:	e30f3618 	movw	r3, #63000	; 0xf618
  131728:	e3403014 	movt	r3, #20
  13172c:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131730:	e3530000 	cmp	r3, #0
  131734:	1a000001 	bne	131740 <ip4_input+0x31c>
        check_ip_src = 0;
  131738:	e3a03000 	mov	r3, #0
  13173c:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  131740:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131744:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  131748:	ea000040 	b	131850 <ip4_input+0x42c>
    } else {
      netif = NULL;
  13174c:	e3a03000 	mov	r3, #0
  131750:	e50b300c 	str	r3, [fp, #-12]
  131754:	ea00003d 	b	131850 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  131758:	e3a03001 	mov	r3, #1
  13175c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  131760:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131764:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  131768:	e51b300c 	ldr	r3, [fp, #-12]
  13176c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131770:	e2033001 	and	r3, r3, #1
  131774:	e6ef3073 	uxtb	r3, r3
  131778:	e3530000 	cmp	r3, #0
  13177c:	0a00001c 	beq	1317f4 <ip4_input+0x3d0>
  131780:	e51b300c 	ldr	r3, [fp, #-12]
  131784:	e2833004 	add	r3, r3, #4
  131788:	e5933000 	ldr	r3, [r3]
  13178c:	e3530000 	cmp	r3, #0
  131790:	0a000017 	beq	1317f4 <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  131794:	e30f3618 	movw	r3, #63000	; 0xf618
  131798:	e3403014 	movt	r3, #20
  13179c:	e5932014 	ldr	r2, [r3, #20]
  1317a0:	e51b300c 	ldr	r3, [fp, #-12]
  1317a4:	e2833004 	add	r3, r3, #4
  1317a8:	e5933000 	ldr	r3, [r3]
  1317ac:	e1520003 	cmp	r2, r3
  1317b0:	0a000026 	beq	131850 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  1317b4:	e30f3618 	movw	r3, #63000	; 0xf618
  1317b8:	e3403014 	movt	r3, #20
  1317bc:	e5933014 	ldr	r3, [r3, #20]
  1317c0:	e51b100c 	ldr	r1, [fp, #-12]
  1317c4:	e1a00003 	mov	r0, r3
  1317c8:	eb00034c 	bl	132500 <ip4_addr_isbroadcast_u32>
  1317cc:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1317d0:	e3530000 	cmp	r3, #0
  1317d4:	1a00001d 	bne	131850 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  1317d8:	e30f3618 	movw	r3, #63000	; 0xf618
  1317dc:	e3403014 	movt	r3, #20
  1317e0:	e5932014 	ldr	r2, [r3, #20]
  1317e4:	e3a0307f 	mov	r3, #127	; 0x7f
  1317e8:	e3403100 	movt	r3, #256	; 0x100
  1317ec:	e1520003 	cmp	r2, r3
  1317f0:	0a000016 	beq	131850 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  1317f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1317f8:	e3530000 	cmp	r3, #0
  1317fc:	0a000006 	beq	13181c <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  131800:	e3a03000 	mov	r3, #0
  131804:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  131808:	e30c3a44 	movw	r3, #51780	; 0xca44
  13180c:	e3403015 	movt	r3, #21
  131810:	e5933000 	ldr	r3, [r3]
  131814:	e50b300c 	str	r3, [fp, #-12]
  131818:	ea000002 	b	131828 <ip4_input+0x404>
      } else {
        netif = netif->next;
  13181c:	e51b300c 	ldr	r3, [fp, #-12]
  131820:	e5933000 	ldr	r3, [r3]
  131824:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  131828:	e51b200c 	ldr	r2, [fp, #-12]
  13182c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131830:	e1520003 	cmp	r2, r3
  131834:	1a000002 	bne	131844 <ip4_input+0x420>
        netif = netif->next;
  131838:	e51b300c 	ldr	r3, [fp, #-12]
  13183c:	e5933000 	ldr	r3, [r3]
  131840:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  131844:	e51b300c 	ldr	r3, [fp, #-12]
  131848:	e3530000 	cmp	r3, #0
  13184c:	1affffc5 	bne	131768 <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  131850:	e51b300c 	ldr	r3, [fp, #-12]
  131854:	e3530000 	cmp	r3, #0
  131858:	1a000010 	bne	1318a0 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  13185c:	e51b3008 	ldr	r3, [fp, #-8]
  131860:	e5d33009 	ldrb	r3, [r3, #9]
  131864:	e3530011 	cmp	r3, #17
  131868:	1a00000c 	bne	1318a0 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  13186c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131870:	e51b2008 	ldr	r2, [fp, #-8]
  131874:	e0823003 	add	r3, r2, r3
  131878:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  13187c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131880:	e1d330b2 	ldrh	r3, [r3, #2]
  131884:	e6ff3073 	uxth	r3, r3
  131888:	e3530b11 	cmp	r3, #17408	; 0x4400
  13188c:	1a000003 	bne	1318a0 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  131890:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131894:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  131898:	e3a03000 	mov	r3, #0
  13189c:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  1318a0:	e51b3010 	ldr	r3, [fp, #-16]
  1318a4:	e3530000 	cmp	r3, #0
  1318a8:	0a00002d 	beq	131964 <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  1318ac:	e30f3618 	movw	r3, #63000	; 0xf618
  1318b0:	e3403014 	movt	r3, #20
  1318b4:	e5933010 	ldr	r3, [r3, #16]
  1318b8:	e3530000 	cmp	r3, #0
  1318bc:	0a000028 	beq	131964 <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1318c0:	e30f3618 	movw	r3, #63000	; 0xf618
  1318c4:	e3403014 	movt	r3, #20
  1318c8:	e5933010 	ldr	r3, [r3, #16]
  1318cc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1318d0:	e1a00003 	mov	r0, r3
  1318d4:	eb000309 	bl	132500 <ip4_addr_isbroadcast_u32>
  1318d8:	e1a03000 	mov	r3, r0
  1318dc:	e3530000 	cmp	r3, #0
  1318e0:	1a000005 	bne	1318fc <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  1318e4:	e30f3618 	movw	r3, #63000	; 0xf618
  1318e8:	e3403014 	movt	r3, #20
  1318ec:	e5933010 	ldr	r3, [r3, #16]
  1318f0:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1318f4:	e35300e0 	cmp	r3, #224	; 0xe0
  1318f8:	1a000019 	bne	131964 <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  1318fc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131900:	ebffa566 	bl	11aea0 <pbuf_free>
      IP_STATS_INC(ip.drop);
  131904:	e30c3a50 	movw	r3, #51792	; 0xca50
  131908:	e3403015 	movt	r3, #21
  13190c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131910:	e2833001 	add	r3, r3, #1
  131914:	e6ff2073 	uxth	r2, r3
  131918:	e30c3a50 	movw	r3, #51792	; 0xca50
  13191c:	e3403015 	movt	r3, #21
  131920:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131924:	e30c3a50 	movw	r3, #51792	; 0xca50
  131928:	e3403015 	movt	r3, #21
  13192c:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131930:	e2832001 	add	r2, r3, #1
  131934:	e30c3a50 	movw	r3, #51792	; 0xca50
  131938:	e3403015 	movt	r3, #21
  13193c:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131940:	e30c3a50 	movw	r3, #51792	; 0xca50
  131944:	e3403015 	movt	r3, #21
  131948:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  13194c:	e2832001 	add	r2, r3, #1
  131950:	e30c3a50 	movw	r3, #51792	; 0xca50
  131954:	e3403015 	movt	r3, #21
  131958:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  13195c:	e3a03000 	mov	r3, #0
  131960:	ea0000dc 	b	131cd8 <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  131964:	e51b300c 	ldr	r3, [fp, #-12]
  131968:	e3530000 	cmp	r3, #0
  13196c:	1a000019 	bne	1319d8 <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  131970:	e30c3a50 	movw	r3, #51792	; 0xca50
  131974:	e3403015 	movt	r3, #21
  131978:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13197c:	e2833001 	add	r3, r3, #1
  131980:	e6ff2073 	uxth	r2, r3
  131984:	e30c3a50 	movw	r3, #51792	; 0xca50
  131988:	e3403015 	movt	r3, #21
  13198c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131990:	e30c3a50 	movw	r3, #51792	; 0xca50
  131994:	e3403015 	movt	r3, #21
  131998:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  13199c:	e2832001 	add	r2, r3, #1
  1319a0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1319a4:	e3403015 	movt	r3, #21
  1319a8:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  1319ac:	e30c3a50 	movw	r3, #51792	; 0xca50
  1319b0:	e3403015 	movt	r3, #21
  1319b4:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1319b8:	e2832001 	add	r2, r3, #1
  1319bc:	e30c3a50 	movw	r3, #51792	; 0xca50
  1319c0:	e3403015 	movt	r3, #21
  1319c4:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  1319c8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1319cc:	ebffa533 	bl	11aea0 <pbuf_free>
    return ERR_OK;
  1319d0:	e3a03000 	mov	r3, #0
  1319d4:	ea0000bf 	b	131cd8 <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  1319d8:	e51b3008 	ldr	r3, [fp, #-8]
  1319dc:	e1d330b6 	ldrh	r3, [r3, #6]
  1319e0:	e6ff3073 	uxth	r3, r3
  1319e4:	e1a02003 	mov	r2, r3
  1319e8:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  1319ec:	e0033002 	and	r3, r3, r2
  1319f0:	e3530000 	cmp	r3, #0
  1319f4:	0a00000a 	beq	131a24 <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  1319f8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1319fc:	eb000778 	bl	1337e4 <ip4_reass>
  131a00:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  131a04:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131a08:	e3530000 	cmp	r3, #0
  131a0c:	1a000001 	bne	131a18 <ip4_input+0x5f4>
      return ERR_OK;
  131a10:	e3a03000 	mov	r3, #0
  131a14:	ea0000af 	b	131cd8 <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  131a18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131a1c:	e5933004 	ldr	r3, [r3, #4]
  131a20:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  131a24:	e30f3618 	movw	r3, #63000	; 0xf618
  131a28:	e3403014 	movt	r3, #20
  131a2c:	e51b200c 	ldr	r2, [fp, #-12]
  131a30:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  131a34:	e30f3618 	movw	r3, #63000	; 0xf618
  131a38:	e3403014 	movt	r3, #20
  131a3c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  131a40:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  131a44:	e30f3618 	movw	r3, #63000	; 0xf618
  131a48:	e3403014 	movt	r3, #20
  131a4c:	e51b2008 	ldr	r2, [fp, #-8]
  131a50:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  131a54:	e51b3008 	ldr	r3, [fp, #-8]
  131a58:	e5d33000 	ldrb	r3, [r3]
  131a5c:	e6ff3073 	uxth	r3, r3
  131a60:	e203300f 	and	r3, r3, #15
  131a64:	e6ff3073 	uxth	r3, r3
  131a68:	e1a03103 	lsl	r3, r3, #2
  131a6c:	e6ff2073 	uxth	r2, r3
  131a70:	e30f3618 	movw	r3, #63000	; 0xf618
  131a74:	e3403014 	movt	r3, #20
  131a78:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  131a7c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131a80:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131a84:	ebffa9cf 	bl	11c1c8 <raw_input>
  131a88:	e1a03000 	mov	r3, r0
  131a8c:	e3530000 	cmp	r3, #0
  131a90:	1a000076 	bne	131c70 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  131a94:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131a98:	e2633000 	rsb	r3, r3, #0
  131a9c:	e6ff3073 	uxth	r3, r3
  131aa0:	e6bf3073 	sxth	r3, r3
  131aa4:	e1a01003 	mov	r1, r3
  131aa8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131aac:	ebffa4dd 	bl	11ae28 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131ab0:	e51b3008 	ldr	r3, [fp, #-8]
  131ab4:	e5d33009 	ldrb	r3, [r3, #9]
  131ab8:	e2433001 	sub	r3, r3, #1
  131abc:	e3530010 	cmp	r3, #16
  131ac0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  131ac4:	ea000036 	b	131ba4 <ip4_input+0x780>
  131ac8:	00131b64 	.word	0x00131b64
  131acc:	00131b90 	.word	0x00131b90
  131ad0:	00131ba4 	.word	0x00131ba4
  131ad4:	00131ba4 	.word	0x00131ba4
  131ad8:	00131ba4 	.word	0x00131ba4
  131adc:	00131b38 	.word	0x00131b38
  131ae0:	00131ba4 	.word	0x00131ba4
  131ae4:	00131ba4 	.word	0x00131ba4
  131ae8:	00131ba4 	.word	0x00131ba4
  131aec:	00131ba4 	.word	0x00131ba4
  131af0:	00131ba4 	.word	0x00131ba4
  131af4:	00131ba4 	.word	0x00131ba4
  131af8:	00131ba4 	.word	0x00131ba4
  131afc:	00131ba4 	.word	0x00131ba4
  131b00:	00131ba4 	.word	0x00131ba4
  131b04:	00131ba4 	.word	0x00131ba4
  131b08:	00131b0c 	.word	0x00131b0c
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  131b0c:	e30c3a50 	movw	r3, #51792	; 0xca50
  131b10:	e3403015 	movt	r3, #21
  131b14:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b18:	e2832001 	add	r2, r3, #1
  131b1c:	e30c3a50 	movw	r3, #51792	; 0xca50
  131b20:	e3403015 	movt	r3, #21
  131b24:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  131b28:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b2c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b30:	ebffd80c 	bl	127b68 <udp_input>
      break;
  131b34:	ea00004e 	b	131c74 <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b38:	e30c3a50 	movw	r3, #51792	; 0xca50
  131b3c:	e3403015 	movt	r3, #21
  131b40:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b44:	e2832001 	add	r2, r3, #1
  131b48:	e30c3a50 	movw	r3, #51792	; 0xca50
  131b4c:	e3403015 	movt	r3, #21
  131b50:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  131b54:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b58:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b5c:	ebffb9c8 	bl	120284 <tcp_input>
      break;
  131b60:	ea000043 	b	131c74 <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b64:	e30c3a50 	movw	r3, #51792	; 0xca50
  131b68:	e3403015 	movt	r3, #21
  131b6c:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b70:	e2832001 	add	r2, r3, #1
  131b74:	e30c3a50 	movw	r3, #51792	; 0xca50
  131b78:	e3403015 	movt	r3, #21
  131b7c:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  131b80:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b84:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b88:	ebfff665 	bl	12f524 <icmp_input>
      break;
  131b8c:	ea000038 	b	131c74 <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  131b90:	e59f214c 	ldr	r2, [pc, #332]	; 131ce4 <ip4_input+0x8c0>
  131b94:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b98:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b9c:	ebfff9ed 	bl	130358 <igmp_input>
      break;
  131ba0:	ea000033 	b	131c74 <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131ba4:	e30f3618 	movw	r3, #63000	; 0xf618
  131ba8:	e3403014 	movt	r3, #20
  131bac:	e5933014 	ldr	r3, [r3, #20]
  131bb0:	e51b100c 	ldr	r1, [fp, #-12]
  131bb4:	e1a00003 	mov	r0, r3
  131bb8:	eb000250 	bl	132500 <ip4_addr_isbroadcast_u32>
  131bbc:	e1a03000 	mov	r3, r0
  131bc0:	e3530000 	cmp	r3, #0
  131bc4:	1a00000f 	bne	131c08 <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131bc8:	e30f3618 	movw	r3, #63000	; 0xf618
  131bcc:	e3403014 	movt	r3, #20
  131bd0:	e5933014 	ldr	r3, [r3, #20]
  131bd4:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131bd8:	e35300e0 	cmp	r3, #224	; 0xe0
  131bdc:	0a000009 	beq	131c08 <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131be0:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131be4:	e1a01003 	mov	r1, r3
  131be8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bec:	ebffa49c 	bl	11ae64 <pbuf_header_force>
        p->payload = iphdr;
  131bf0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131bf4:	e51b2008 	ldr	r2, [fp, #-8]
  131bf8:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  131bfc:	e3a01002 	mov	r1, #2
  131c00:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c04:	ebfff81c 	bl	12fc7c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  131c08:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c0c:	ebffa4a3 	bl	11aea0 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  131c10:	e30c3a50 	movw	r3, #51792	; 0xca50
  131c14:	e3403015 	movt	r3, #21
  131c18:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131c1c:	e2833001 	add	r3, r3, #1
  131c20:	e6ff2073 	uxth	r2, r3
  131c24:	e30c3a50 	movw	r3, #51792	; 0xca50
  131c28:	e3403015 	movt	r3, #21
  131c2c:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131c30:	e30c3a50 	movw	r3, #51792	; 0xca50
  131c34:	e3403015 	movt	r3, #21
  131c38:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131c3c:	e2833001 	add	r3, r3, #1
  131c40:	e6ff2073 	uxth	r2, r3
  131c44:	e30c3a50 	movw	r3, #51792	; 0xca50
  131c48:	e3403015 	movt	r3, #21
  131c4c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  131c50:	e30c3a50 	movw	r3, #51792	; 0xca50
  131c54:	e3403015 	movt	r3, #21
  131c58:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  131c5c:	e2832001 	add	r2, r3, #1
  131c60:	e30c3a50 	movw	r3, #51792	; 0xca50
  131c64:	e3403015 	movt	r3, #21
  131c68:	e5832134 	str	r2, [r3, #308]	; 0x134
  131c6c:	ea000000 	b	131c74 <ip4_input+0x850>
    }
  }
  131c70:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  131c74:	e30f3618 	movw	r3, #63000	; 0xf618
  131c78:	e3403014 	movt	r3, #20
  131c7c:	e3a02000 	mov	r2, #0
  131c80:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  131c84:	e30f3618 	movw	r3, #63000	; 0xf618
  131c88:	e3403014 	movt	r3, #20
  131c8c:	e3a02000 	mov	r2, #0
  131c90:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  131c94:	e30f3618 	movw	r3, #63000	; 0xf618
  131c98:	e3403014 	movt	r3, #20
  131c9c:	e3a02000 	mov	r2, #0
  131ca0:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  131ca4:	e30f3618 	movw	r3, #63000	; 0xf618
  131ca8:	e3403014 	movt	r3, #20
  131cac:	e3a02000 	mov	r2, #0
  131cb0:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  131cb4:	e30f3618 	movw	r3, #63000	; 0xf618
  131cb8:	e3403014 	movt	r3, #20
  131cbc:	e3a02000 	mov	r2, #0
  131cc0:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  131cc4:	e30f3618 	movw	r3, #63000	; 0xf618
  131cc8:	e3403014 	movt	r3, #20
  131ccc:	e3a02000 	mov	r2, #0
  131cd0:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  131cd4:	e3a03000 	mov	r3, #0
}
  131cd8:	e1a00003 	mov	r0, r3
  131cdc:	e24bd004 	sub	sp, fp, #4
  131ce0:	e8bd8800 	pop	{fp, pc}
  131ce4:	0014f62c 	.word	0x0014f62c

00131ce8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131ce8:	e92d4800 	push	{fp, lr}
  131cec:	e28db004 	add	fp, sp, #4
  131cf0:	e24dd028 	sub	sp, sp, #40	; 0x28
  131cf4:	e50b0008 	str	r0, [fp, #-8]
  131cf8:	e50b100c 	str	r1, [fp, #-12]
  131cfc:	e50b2010 	str	r2, [fp, #-16]
  131d00:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131d04:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131d08:	e3a03000 	mov	r3, #0
  131d0c:	e58d3010 	str	r3, [sp, #16]
  131d10:	e3a03000 	mov	r3, #0
  131d14:	e58d300c 	str	r3, [sp, #12]
  131d18:	e59b300c 	ldr	r3, [fp, #12]
  131d1c:	e58d3008 	str	r3, [sp, #8]
  131d20:	e5db3008 	ldrb	r3, [fp, #8]
  131d24:	e58d3004 	str	r3, [sp, #4]
  131d28:	e5db3004 	ldrb	r3, [fp, #4]
  131d2c:	e58d3000 	str	r3, [sp]
  131d30:	e1a03002 	mov	r3, r2
  131d34:	e51b2010 	ldr	r2, [fp, #-16]
  131d38:	e51b100c 	ldr	r1, [fp, #-12]
  131d3c:	e51b0008 	ldr	r0, [fp, #-8]
  131d40:	eb000003 	bl	131d54 <ip4_output_if_opt>
  131d44:	e1a03000 	mov	r3, r0
}
  131d48:	e1a00003 	mov	r0, r3
  131d4c:	e24bd004 	sub	sp, fp, #4
  131d50:	e8bd8800 	pop	{fp, pc}

00131d54 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131d54:	e92d4800 	push	{fp, lr}
  131d58:	e28db004 	add	fp, sp, #4
  131d5c:	e24dd030 	sub	sp, sp, #48	; 0x30
  131d60:	e50b0010 	str	r0, [fp, #-16]
  131d64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131d68:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131d6c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131d70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d74:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131d78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131d7c:	e3530000 	cmp	r3, #0
  131d80:	0a000009 	beq	131dac <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  131d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d88:	e3530000 	cmp	r3, #0
  131d8c:	0a000003 	beq	131da0 <ip4_output_if_opt+0x4c>
  131d90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d94:	e5933000 	ldr	r3, [r3]
  131d98:	e3530000 	cmp	r3, #0
  131d9c:	1a000002 	bne	131dac <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131da0:	e59b300c 	ldr	r3, [fp, #12]
  131da4:	e2833004 	add	r3, r3, #4
  131da8:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131dac:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131db0:	e1db31b4 	ldrh	r3, [fp, #20]
  131db4:	e58d3010 	str	r3, [sp, #16]
  131db8:	e59b3010 	ldr	r3, [fp, #16]
  131dbc:	e58d300c 	str	r3, [sp, #12]
  131dc0:	e59b300c 	ldr	r3, [fp, #12]
  131dc4:	e58d3008 	str	r3, [sp, #8]
  131dc8:	e5db3008 	ldrb	r3, [fp, #8]
  131dcc:	e58d3004 	str	r3, [sp, #4]
  131dd0:	e5db3004 	ldrb	r3, [fp, #4]
  131dd4:	e58d3000 	str	r3, [sp]
  131dd8:	e1a03002 	mov	r3, r2
  131ddc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131de0:	e51b1008 	ldr	r1, [fp, #-8]
  131de4:	e51b0010 	ldr	r0, [fp, #-16]
  131de8:	eb00001e 	bl	131e68 <ip4_output_if_opt_src>
  131dec:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131df0:	e1a00003 	mov	r0, r3
  131df4:	e24bd004 	sub	sp, fp, #4
  131df8:	e8bd8800 	pop	{fp, pc}

00131dfc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131dfc:	e92d4800 	push	{fp, lr}
  131e00:	e28db004 	add	fp, sp, #4
  131e04:	e24dd028 	sub	sp, sp, #40	; 0x28
  131e08:	e50b0008 	str	r0, [fp, #-8]
  131e0c:	e50b100c 	str	r1, [fp, #-12]
  131e10:	e50b2010 	str	r2, [fp, #-16]
  131e14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131e18:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131e1c:	e3a03000 	mov	r3, #0
  131e20:	e58d3010 	str	r3, [sp, #16]
  131e24:	e3a03000 	mov	r3, #0
  131e28:	e58d300c 	str	r3, [sp, #12]
  131e2c:	e59b300c 	ldr	r3, [fp, #12]
  131e30:	e58d3008 	str	r3, [sp, #8]
  131e34:	e5db3008 	ldrb	r3, [fp, #8]
  131e38:	e58d3004 	str	r3, [sp, #4]
  131e3c:	e5db3004 	ldrb	r3, [fp, #4]
  131e40:	e58d3000 	str	r3, [sp]
  131e44:	e1a03002 	mov	r3, r2
  131e48:	e51b2010 	ldr	r2, [fp, #-16]
  131e4c:	e51b100c 	ldr	r1, [fp, #-12]
  131e50:	e51b0008 	ldr	r0, [fp, #-8]
  131e54:	eb000003 	bl	131e68 <ip4_output_if_opt_src>
  131e58:	e1a03000 	mov	r3, r0
}
  131e5c:	e1a00003 	mov	r0, r3
  131e60:	e24bd004 	sub	sp, fp, #4
  131e64:	e8bd8800 	pop	{fp, pc}

00131e68 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131e68:	e92d4800 	push	{fp, lr}
  131e6c:	e28db004 	add	fp, sp, #4
  131e70:	e24dd028 	sub	sp, sp, #40	; 0x28
  131e74:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131e78:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131e7c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131e80:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131e84:	e3a03000 	mov	r3, #0
  131e88:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131e8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131e90:	e1d330be 	ldrh	r3, [r3, #14]
  131e94:	e3530001 	cmp	r3, #1
  131e98:	0a000006 	beq	131eb8 <ip4_output_if_opt_src+0x50>
  131e9c:	e309088c 	movw	r0, #39052	; 0x988c
  131ea0:	e3400014 	movt	r0, #20
  131ea4:	ebff449a 	bl	103114 <rt_kprintf>
  131ea8:	e3001333 	movw	r1, #819	; 0x333
  131eac:	e3090898 	movw	r0, #39064	; 0x9898
  131eb0:	e3400014 	movt	r0, #20
  131eb4:	ebff6489 	bl	10b0e0 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131eb8:	e30c3a50 	movw	r3, #51792	; 0xca50
  131ebc:	e3403015 	movt	r3, #21
  131ec0:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131ec4:	e2832001 	add	r2, r3, #1
  131ec8:	e30c3a50 	movw	r3, #51792	; 0xca50
  131ecc:	e3403015 	movt	r3, #21
  131ed0:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131ed4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131ed8:	e3530000 	cmp	r3, #0
  131edc:	0a000112 	beq	13232c <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131ee0:	e3a03014 	mov	r3, #20
  131ee4:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131ee8:	e3a03000 	mov	r3, #0
  131eec:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131ef0:	e1db31b4 	ldrh	r3, [fp, #20]
  131ef4:	e3530000 	cmp	r3, #0
  131ef8:	0a00004b 	beq	13202c <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131efc:	e1db31b4 	ldrh	r3, [fp, #20]
  131f00:	e2833003 	add	r3, r3, #3
  131f04:	e6ff3073 	uxth	r3, r3
  131f08:	e3c33003 	bic	r3, r3, #3
  131f0c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131f10:	e15b20ba 	ldrh	r2, [fp, #-10]
  131f14:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131f18:	e0823003 	add	r3, r2, r3
  131f1c:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131f20:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131f24:	e1a01003 	mov	r1, r3
  131f28:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131f2c:	ebffa3bd 	bl	11ae28 <pbuf_header>
  131f30:	e1a03000 	mov	r3, r0
  131f34:	e3530000 	cmp	r3, #0
  131f38:	0a000010 	beq	131f80 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131f3c:	e30c3a50 	movw	r3, #51792	; 0xca50
  131f40:	e3403015 	movt	r3, #21
  131f44:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131f48:	e2833001 	add	r3, r3, #1
  131f4c:	e6ff2073 	uxth	r2, r3
  131f50:	e30c3a50 	movw	r3, #51792	; 0xca50
  131f54:	e3403015 	movt	r3, #21
  131f58:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131f5c:	e30c3a50 	movw	r3, #51792	; 0xca50
  131f60:	e3403015 	movt	r3, #21
  131f64:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131f68:	e2832001 	add	r2, r3, #1
  131f6c:	e30c3a50 	movw	r3, #51792	; 0xca50
  131f70:	e3403015 	movt	r3, #21
  131f74:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131f78:	e3e03001 	mvn	r3, #1
  131f7c:	ea00012a 	b	13242c <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131f80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f84:	e5933004 	ldr	r3, [r3, #4]
  131f88:	e1db21b4 	ldrh	r2, [fp, #20]
  131f8c:	e59b1010 	ldr	r1, [fp, #16]
  131f90:	e1a00003 	mov	r0, r3
  131f94:	eb003b7a 	bl	140d84 <memcpy>
      if (optlen < optlen_aligned) {
  131f98:	e1db21b4 	ldrh	r2, [fp, #20]
  131f9c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131fa0:	e1520003 	cmp	r2, r3
  131fa4:	2a000009 	bcs	131fd0 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131fa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131fac:	e5932004 	ldr	r2, [r3, #4]
  131fb0:	e1db31b4 	ldrh	r3, [fp, #20]
  131fb4:	e0820003 	add	r0, r2, r3
  131fb8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131fbc:	e1db31b4 	ldrh	r3, [fp, #20]
  131fc0:	e0423003 	sub	r3, r2, r3
  131fc4:	e1a02003 	mov	r2, r3
  131fc8:	e3a01000 	mov	r1, #0
  131fcc:	eb003ca4 	bl	141264 <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131fd0:	e3a03000 	mov	r3, #0
  131fd4:	e50b3010 	str	r3, [fp, #-16]
  131fd8:	ea00000c 	b	132010 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131fdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131fe0:	e5932004 	ldr	r2, [r3, #4]
  131fe4:	e51b3010 	ldr	r3, [fp, #-16]
  131fe8:	e1a03083 	lsl	r3, r3, #1
  131fec:	e0823003 	add	r3, r2, r3
  131ff0:	e1d330b0 	ldrh	r3, [r3]
  131ff4:	e1a02003 	mov	r2, r3
  131ff8:	e51b3008 	ldr	r3, [fp, #-8]
  131ffc:	e0833002 	add	r3, r3, r2
  132000:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  132004:	e51b3010 	ldr	r3, [fp, #-16]
  132008:	e2833001 	add	r3, r3, #1
  13200c:	e50b3010 	str	r3, [fp, #-16]
  132010:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  132014:	e1a030a3 	lsr	r3, r3, #1
  132018:	e6ff3073 	uxth	r3, r3
  13201c:	e1a02003 	mov	r2, r3
  132020:	e51b3010 	ldr	r3, [fp, #-16]
  132024:	e1530002 	cmp	r3, r2
  132028:	baffffeb 	blt	131fdc <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  13202c:	e3a01014 	mov	r1, #20
  132030:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132034:	ebffa37b 	bl	11ae28 <pbuf_header>
  132038:	e1a03000 	mov	r3, r0
  13203c:	e3530000 	cmp	r3, #0
  132040:	0a000010 	beq	132088 <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  132044:	e30c3a50 	movw	r3, #51792	; 0xca50
  132048:	e3403015 	movt	r3, #21
  13204c:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  132050:	e2833001 	add	r3, r3, #1
  132054:	e6ff2073 	uxth	r2, r3
  132058:	e30c3a50 	movw	r3, #51792	; 0xca50
  13205c:	e3403015 	movt	r3, #21
  132060:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  132064:	e30c3a50 	movw	r3, #51792	; 0xca50
  132068:	e3403015 	movt	r3, #21
  13206c:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  132070:	e2832001 	add	r2, r3, #1
  132074:	e30c3a50 	movw	r3, #51792	; 0xca50
  132078:	e3403015 	movt	r3, #21
  13207c:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  132080:	e3e03001 	mvn	r3, #1
  132084:	ea0000e8 	b	13242c <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  132088:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13208c:	e5933004 	ldr	r3, [r3, #4]
  132090:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  132094:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132098:	e1d330ba 	ldrh	r3, [r3, #10]
  13209c:	e3530013 	cmp	r3, #19
  1320a0:	8a000006 	bhi	1320c0 <ip4_output_if_opt_src+0x258>
  1320a4:	e30908c8 	movw	r0, #39112	; 0x98c8
  1320a8:	e3400014 	movt	r0, #20
  1320ac:	ebff4418 	bl	103114 <rt_kprintf>
  1320b0:	e3001361 	movw	r1, #865	; 0x361
  1320b4:	e3090898 	movw	r0, #39064	; 0x9898
  1320b8:	e3400014 	movt	r0, #20
  1320bc:	ebff6407 	bl	10b0e0 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  1320c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320c4:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  1320c8:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  1320cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320d0:	e5db2008 	ldrb	r2, [fp, #8]
  1320d4:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  1320d8:	e5db2008 	ldrb	r2, [fp, #8]
  1320dc:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1320e0:	e1a03403 	lsl	r3, r3, #8
  1320e4:	e1823003 	orr	r3, r2, r3
  1320e8:	e1a03403 	lsl	r3, r3, #8
  1320ec:	e6ff2073 	uxth	r2, r3
  1320f0:	e5db1008 	ldrb	r1, [fp, #8]
  1320f4:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1320f8:	e1a03403 	lsl	r3, r3, #8
  1320fc:	e1813003 	orr	r3, r1, r3
  132100:	e1a03423 	lsr	r3, r3, #8
  132104:	e6ef3073 	uxtb	r3, r3
  132108:	e1823003 	orr	r3, r2, r3
  13210c:	e51b2008 	ldr	r2, [fp, #-8]
  132110:	e0823003 	add	r3, r2, r3
  132114:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  132118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13211c:	e5932000 	ldr	r2, [r3]
  132120:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132124:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  132128:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13212c:	e5933010 	ldr	r3, [r3, #16]
  132130:	e6ff3073 	uxth	r3, r3
  132134:	e51b2008 	ldr	r2, [fp, #-8]
  132138:	e0823003 	add	r3, r2, r3
  13213c:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  132140:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132144:	e5933010 	ldr	r3, [r3, #16]
  132148:	e1a03823 	lsr	r3, r3, #16
  13214c:	e51b2008 	ldr	r2, [fp, #-8]
  132150:	e0823003 	add	r3, r2, r3
  132154:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  132158:	e15b30ba 	ldrh	r3, [fp, #-10]
  13215c:	e1a03123 	lsr	r3, r3, #2
  132160:	e6ff3073 	uxth	r3, r3
  132164:	e6ef3073 	uxtb	r3, r3
  132168:	e3833040 	orr	r3, r3, #64	; 0x40
  13216c:	e6ef2073 	uxtb	r2, r3
  132170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132174:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  132178:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13217c:	e5db2004 	ldrb	r2, [fp, #4]
  132180:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  132184:	e5db2004 	ldrb	r2, [fp, #4]
  132188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13218c:	e5d33000 	ldrb	r3, [r3]
  132190:	e1a03403 	lsl	r3, r3, #8
  132194:	e1823003 	orr	r3, r2, r3
  132198:	e1a03403 	lsl	r3, r3, #8
  13219c:	e6ff2073 	uxth	r2, r3
  1321a0:	e5db1004 	ldrb	r1, [fp, #4]
  1321a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321a8:	e5d33000 	ldrb	r3, [r3]
  1321ac:	e1a03403 	lsl	r3, r3, #8
  1321b0:	e1813003 	orr	r3, r1, r3
  1321b4:	e1a03423 	lsr	r3, r3, #8
  1321b8:	e6ef3073 	uxtb	r3, r3
  1321bc:	e1823003 	orr	r3, r2, r3
  1321c0:	e51b2008 	ldr	r2, [fp, #-8]
  1321c4:	e0823003 	add	r3, r2, r3
  1321c8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  1321cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1321d0:	e1d330b8 	ldrh	r3, [r3, #8]
  1321d4:	e1a00003 	mov	r0, r3
  1321d8:	ebff90f9 	bl	1165c4 <lwip_htons>
  1321dc:	e1a03000 	mov	r3, r0
  1321e0:	e1a02003 	mov	r2, r3
  1321e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321e8:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  1321ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321f0:	e1d330b2 	ldrh	r3, [r3, #2]
  1321f4:	e6ff3073 	uxth	r3, r3
  1321f8:	e1a02003 	mov	r2, r3
  1321fc:	e51b3008 	ldr	r3, [fp, #-8]
  132200:	e0833002 	add	r3, r3, r2
  132204:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  132208:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13220c:	e3a02000 	mov	r2, #0
  132210:	e5c32006 	strb	r2, [r3, #6]
  132214:	e3a02000 	mov	r2, #0
  132218:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  13221c:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132220:	e3403014 	movt	r3, #20
  132224:	e1d330b0 	ldrh	r3, [r3]
  132228:	e1a00003 	mov	r0, r3
  13222c:	ebff90e4 	bl	1165c4 <lwip_htons>
  132230:	e1a03000 	mov	r3, r0
  132234:	e1a02003 	mov	r2, r3
  132238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13223c:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  132240:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132244:	e1d330b4 	ldrh	r3, [r3, #4]
  132248:	e6ff3073 	uxth	r3, r3
  13224c:	e1a02003 	mov	r2, r3
  132250:	e51b3008 	ldr	r3, [fp, #-8]
  132254:	e0833002 	add	r3, r3, r2
  132258:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  13225c:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132260:	e3403014 	movt	r3, #20
  132264:	e1d330b0 	ldrh	r3, [r3]
  132268:	e2833001 	add	r3, r3, #1
  13226c:	e6ff2073 	uxth	r2, r3
  132270:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132274:	e3403014 	movt	r3, #20
  132278:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  13227c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132280:	e3530000 	cmp	r3, #0
  132284:	1a000005 	bne	1322a0 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  132288:	e30938f8 	movw	r3, #39160	; 0x98f8
  13228c:	e3403014 	movt	r3, #20
  132290:	e5932000 	ldr	r2, [r3]
  132294:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132298:	e583200c 	str	r2, [r3, #12]
  13229c:	ea000003 	b	1322b0 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  1322a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1322a4:	e5932000 	ldr	r2, [r3]
  1322a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322ac:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  1322b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322b4:	e593300c 	ldr	r3, [r3, #12]
  1322b8:	e6ff3073 	uxth	r3, r3
  1322bc:	e51b2008 	ldr	r2, [fp, #-8]
  1322c0:	e0823003 	add	r3, r2, r3
  1322c4:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  1322c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322cc:	e593300c 	ldr	r3, [r3, #12]
  1322d0:	e1a03823 	lsr	r3, r3, #16
  1322d4:	e51b2008 	ldr	r2, [fp, #-8]
  1322d8:	e0823003 	add	r3, r2, r3
  1322dc:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  1322e0:	e51b3008 	ldr	r3, [fp, #-8]
  1322e4:	e1a02823 	lsr	r2, r3, #16
  1322e8:	e51b3008 	ldr	r3, [fp, #-8]
  1322ec:	e6ff3073 	uxth	r3, r3
  1322f0:	e0823003 	add	r3, r2, r3
  1322f4:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  1322f8:	e51b3008 	ldr	r3, [fp, #-8]
  1322fc:	e1a03823 	lsr	r3, r3, #16
  132300:	e51b2008 	ldr	r2, [fp, #-8]
  132304:	e0823003 	add	r3, r2, r3
  132308:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  13230c:	e51b3008 	ldr	r3, [fp, #-8]
  132310:	e1e03003 	mvn	r3, r3
  132314:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  132318:	e51b3008 	ldr	r3, [fp, #-8]
  13231c:	e6ff2073 	uxth	r2, r3
  132320:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132324:	e1c320ba 	strh	r2, [r3, #10]
  132328:	ea000007 	b	13234c <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  13232c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132330:	e5933004 	ldr	r3, [r3, #4]
  132334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  132338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13233c:	e5933010 	ldr	r3, [r3, #16]
  132340:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  132344:	e24b301c 	sub	r3, fp, #28
  132348:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  13234c:	e30c3a50 	movw	r3, #51792	; 0xca50
  132350:	e3403015 	movt	r3, #21
  132354:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  132358:	e2833001 	add	r3, r3, #1
  13235c:	e6ff2073 	uxth	r2, r3
  132360:	e30c3a50 	movw	r3, #51792	; 0xca50
  132364:	e3403015 	movt	r3, #21
  132368:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  13236c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132370:	e5932000 	ldr	r2, [r3]
  132374:	e59b300c 	ldr	r3, [fp, #12]
  132378:	e2833004 	add	r3, r3, #4
  13237c:	e5933000 	ldr	r3, [r3]
  132380:	e1520003 	cmp	r2, r3
  132384:	0a000004 	beq	13239c <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  132388:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13238c:	e5933000 	ldr	r3, [r3]
  132390:	e6ef3073 	uxtb	r3, r3
  132394:	e353007f 	cmp	r3, #127	; 0x7f
  132398:	1a000004 	bne	1323b0 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  13239c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1323a0:	e59b000c 	ldr	r0, [fp, #12]
  1323a4:	ebff9e75 	bl	119d80 <netif_loop_output>
  1323a8:	e1a03000 	mov	r3, r0
  1323ac:	ea00001e 	b	13242c <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  1323b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323b4:	e5d3300d 	ldrb	r3, [r3, #13]
  1323b8:	e2033004 	and	r3, r3, #4
  1323bc:	e3530000 	cmp	r3, #0
  1323c0:	0a000002 	beq	1323d0 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  1323c4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1323c8:	e59b000c 	ldr	r0, [fp, #12]
  1323cc:	ebff9e6b 	bl	119d80 <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  1323d0:	e59b300c 	ldr	r3, [fp, #12]
  1323d4:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1323d8:	e3530000 	cmp	r3, #0
  1323dc:	0a00000b 	beq	132410 <ip4_output_if_opt_src+0x5a8>
  1323e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323e4:	e1d320b8 	ldrh	r2, [r3, #8]
  1323e8:	e59b300c 	ldr	r3, [fp, #12]
  1323ec:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1323f0:	e1520003 	cmp	r2, r3
  1323f4:	9a000005 	bls	132410 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  1323f8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1323fc:	e59b100c 	ldr	r1, [fp, #12]
  132400:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132404:	eb00068e 	bl	133e44 <ip4_frag>
  132408:	e1a03000 	mov	r3, r0
  13240c:	ea000006 	b	13242c <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  132410:	e59b300c 	ldr	r3, [fp, #12]
  132414:	e5933014 	ldr	r3, [r3, #20]
  132418:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  13241c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132420:	e59b000c 	ldr	r0, [fp, #12]
  132424:	e12fff33 	blx	r3
  132428:	e1a03000 	mov	r3, r0
}
  13242c:	e1a00003 	mov	r0, r3
  132430:	e24bd004 	sub	sp, fp, #4
  132434:	e8bd8800 	pop	{fp, pc}

00132438 <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  132438:	e92d4800 	push	{fp, lr}
  13243c:	e28db004 	add	fp, sp, #4
  132440:	e24dd028 	sub	sp, sp, #40	; 0x28
  132444:	e50b0010 	str	r0, [fp, #-16]
  132448:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13244c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  132450:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  132454:	e51b3010 	ldr	r3, [fp, #-16]
  132458:	e1d330be 	ldrh	r3, [r3, #14]
  13245c:	e3530001 	cmp	r3, #1
  132460:	0a000006 	beq	132480 <ip4_output+0x48>
  132464:	e309088c 	movw	r0, #39052	; 0x988c
  132468:	e3400014 	movt	r0, #20
  13246c:	ebff4328 	bl	103114 <rt_kprintf>
  132470:	e30013db 	movw	r1, #987	; 0x3db
  132474:	e3090898 	movw	r0, #39064	; 0x9898
  132478:	e3400014 	movt	r0, #20
  13247c:	ebff6317 	bl	10b0e0 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  132480:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132484:	ebfffb3e 	bl	131184 <ip4_route>
  132488:	e50b0008 	str	r0, [fp, #-8]
  13248c:	e51b3008 	ldr	r3, [fp, #-8]
  132490:	e3530000 	cmp	r3, #0
  132494:	1a000009 	bne	1324c0 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  132498:	e30c3a50 	movw	r3, #51792	; 0xca50
  13249c:	e3403015 	movt	r3, #21
  1324a0:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1324a4:	e2833001 	add	r3, r3, #1
  1324a8:	e6ff2073 	uxth	r2, r3
  1324ac:	e30c3a50 	movw	r3, #51792	; 0xca50
  1324b0:	e3403015 	movt	r3, #21
  1324b4:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  1324b8:	e3e03003 	mvn	r3, #3
  1324bc:	ea00000c 	b	1324f4 <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  1324c0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  1324c4:	e51b3008 	ldr	r3, [fp, #-8]
  1324c8:	e58d3008 	str	r3, [sp, #8]
  1324cc:	e5db3008 	ldrb	r3, [fp, #8]
  1324d0:	e58d3004 	str	r3, [sp, #4]
  1324d4:	e5db3004 	ldrb	r3, [fp, #4]
  1324d8:	e58d3000 	str	r3, [sp]
  1324dc:	e1a03002 	mov	r3, r2
  1324e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1324e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1324e8:	e51b0010 	ldr	r0, [fp, #-16]
  1324ec:	ebfffdfd 	bl	131ce8 <ip4_output_if>
  1324f0:	e1a03000 	mov	r3, r0
}
  1324f4:	e1a00003 	mov	r0, r3
  1324f8:	e24bd004 	sub	sp, fp, #4
  1324fc:	e8bd8800 	pop	{fp, pc}

00132500 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  132500:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132504:	e28db000 	add	fp, sp, #0
  132508:	e24dd014 	sub	sp, sp, #20
  13250c:	e50b0010 	str	r0, [fp, #-16]
  132510:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  132514:	e51b3010 	ldr	r3, [fp, #-16]
  132518:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  13251c:	e51b3010 	ldr	r3, [fp, #-16]
  132520:	e3730001 	cmn	r3, #1
  132524:	0a000002 	beq	132534 <ip4_addr_isbroadcast_u32+0x34>
  132528:	e51b3010 	ldr	r3, [fp, #-16]
  13252c:	e3530000 	cmp	r3, #0
  132530:	1a000001 	bne	13253c <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  132534:	e3a03001 	mov	r3, #1
  132538:	ea000028 	b	1325e0 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  13253c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132540:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  132544:	e2033002 	and	r3, r3, #2
  132548:	e3530000 	cmp	r3, #0
  13254c:	1a000001 	bne	132558 <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  132550:	e3a03000 	mov	r3, #0
  132554:	ea000021 	b	1325e0 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  132558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13255c:	e2833004 	add	r3, r3, #4
  132560:	e5933000 	ldr	r3, [r3]
  132564:	e51b2010 	ldr	r2, [fp, #-16]
  132568:	e1520003 	cmp	r2, r3
  13256c:	1a000001 	bne	132578 <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  132570:	e3a03000 	mov	r3, #0
  132574:	ea000019 	b	1325e0 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  132578:	e51b2008 	ldr	r2, [fp, #-8]
  13257c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132580:	e2833004 	add	r3, r3, #4
  132584:	e5933000 	ldr	r3, [r3]
  132588:	e0222003 	eor	r2, r2, r3
  13258c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132590:	e2833008 	add	r3, r3, #8
  132594:	e5933000 	ldr	r3, [r3]
  132598:	e0033002 	and	r3, r3, r2
  13259c:	e3530000 	cmp	r3, #0
  1325a0:	1a00000d 	bne	1325dc <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1325a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325a8:	e2833008 	add	r3, r3, #8
  1325ac:	e5933000 	ldr	r3, [r3]
  1325b0:	e1e02003 	mvn	r2, r3
  1325b4:	e51b3010 	ldr	r3, [fp, #-16]
  1325b8:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  1325bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325c0:	e2833008 	add	r3, r3, #8
  1325c4:	e5933000 	ldr	r3, [r3]
  1325c8:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1325cc:	e1520003 	cmp	r2, r3
  1325d0:	1a000001 	bne	1325dc <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  1325d4:	e3a03001 	mov	r3, #1
  1325d8:	ea000000 	b	1325e0 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  1325dc:	e3a03000 	mov	r3, #0
  }
}
  1325e0:	e1a00003 	mov	r0, r3
  1325e4:	e28bd000 	add	sp, fp, #0
  1325e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1325ec:	e12fff1e 	bx	lr

001325f0 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  1325f0:	e92d4800 	push	{fp, lr}
  1325f4:	e28db004 	add	fp, sp, #4
  1325f8:	e24dd010 	sub	sp, sp, #16
  1325fc:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  132600:	e51b0010 	ldr	r0, [fp, #-16]
  132604:	ebff8ffa 	bl	1165f4 <lwip_htonl>
  132608:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  13260c:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  132610:	e50b3008 	str	r3, [fp, #-8]
  132614:	ea000007 	b	132638 <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  132618:	e51b200c 	ldr	r2, [fp, #-12]
  13261c:	e51b3008 	ldr	r3, [fp, #-8]
  132620:	e0033002 	and	r3, r3, r2
  132624:	e3530000 	cmp	r3, #0
  132628:	0a000006 	beq	132648 <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  13262c:	e51b3008 	ldr	r3, [fp, #-8]
  132630:	e1a030a3 	lsr	r3, r3, #1
  132634:	e50b3008 	str	r3, [fp, #-8]
  132638:	e51b3008 	ldr	r3, [fp, #-8]
  13263c:	e3530000 	cmp	r3, #0
  132640:	1afffff4 	bne	132618 <ip4_addr_netmask_valid+0x28>
  132644:	ea00000b 	b	132678 <ip4_addr_netmask_valid+0x88>
      break;
  132648:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  13264c:	ea000009 	b	132678 <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  132650:	e51b200c 	ldr	r2, [fp, #-12]
  132654:	e51b3008 	ldr	r3, [fp, #-8]
  132658:	e0033002 	and	r3, r3, r2
  13265c:	e3530000 	cmp	r3, #0
  132660:	0a000001 	beq	13266c <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  132664:	e3a03000 	mov	r3, #0
  132668:	ea000006 	b	132688 <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  13266c:	e51b3008 	ldr	r3, [fp, #-8]
  132670:	e1a030a3 	lsr	r3, r3, #1
  132674:	e50b3008 	str	r3, [fp, #-8]
  132678:	e51b3008 	ldr	r3, [fp, #-8]
  13267c:	e3530000 	cmp	r3, #0
  132680:	1afffff2 	bne	132650 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  132684:	e3a03001 	mov	r3, #1
}
  132688:	e1a00003 	mov	r0, r3
  13268c:	e24bd004 	sub	sp, fp, #4
  132690:	e8bd8800 	pop	{fp, pc}

00132694 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  132694:	e92d4800 	push	{fp, lr}
  132698:	e28db004 	add	fp, sp, #4
  13269c:	e24dd010 	sub	sp, sp, #16
  1326a0:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  1326a4:	e24b3008 	sub	r3, fp, #8
  1326a8:	e1a01003 	mov	r1, r3
  1326ac:	e51b0010 	ldr	r0, [fp, #-16]
  1326b0:	eb000008 	bl	1326d8 <ip4addr_aton>
  1326b4:	e1a03000 	mov	r3, r0
  1326b8:	e3530000 	cmp	r3, #0
  1326bc:	0a000001 	beq	1326c8 <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  1326c0:	e51b3008 	ldr	r3, [fp, #-8]
  1326c4:	ea000000 	b	1326cc <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  1326c8:	e3e03000 	mvn	r3, #0
}
  1326cc:	e1a00003 	mov	r0, r3
  1326d0:	e24bd004 	sub	sp, fp, #4
  1326d4:	e8bd8800 	pop	{fp, pc}

001326d8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1326d8:	e92d4800 	push	{fp, lr}
  1326dc:	e28db004 	add	fp, sp, #4
  1326e0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1326e4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1326e8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  1326ec:	e24b3020 	sub	r3, fp, #32
  1326f0:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  1326f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1326f8:	e5d33000 	ldrb	r3, [r3]
  1326fc:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  132700:	e55b300a 	ldrb	r3, [fp, #-10]
  132704:	e353002f 	cmp	r3, #47	; 0x2f
  132708:	9a000002 	bls	132718 <ip4addr_aton+0x40>
  13270c:	e55b300a 	ldrb	r3, [fp, #-10]
  132710:	e3530039 	cmp	r3, #57	; 0x39
  132714:	9a000001 	bls	132720 <ip4addr_aton+0x48>
      return 0;
  132718:	e3a03000 	mov	r3, #0
  13271c:	ea0000ee 	b	132adc <ip4addr_aton+0x404>
    }
    val = 0;
  132720:	e3a03000 	mov	r3, #0
  132724:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  132728:	e3a0300a 	mov	r3, #10
  13272c:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132730:	e55b300a 	ldrb	r3, [fp, #-10]
  132734:	e3530030 	cmp	r3, #48	; 0x30
  132738:	1a000016 	bne	132798 <ip4addr_aton+0xc0>
      c = *++cp;
  13273c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132740:	e2833001 	add	r3, r3, #1
  132744:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132748:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13274c:	e5d33000 	ldrb	r3, [r3]
  132750:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  132754:	e55b300a 	ldrb	r3, [fp, #-10]
  132758:	e3530078 	cmp	r3, #120	; 0x78
  13275c:	0a000002 	beq	13276c <ip4addr_aton+0x94>
  132760:	e55b300a 	ldrb	r3, [fp, #-10]
  132764:	e3530058 	cmp	r3, #88	; 0x58
  132768:	1a000008 	bne	132790 <ip4addr_aton+0xb8>
        base = 16;
  13276c:	e3a03010 	mov	r3, #16
  132770:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  132774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132778:	e2833001 	add	r3, r3, #1
  13277c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132780:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132784:	e5d33000 	ldrb	r3, [r3]
  132788:	e54b300a 	strb	r3, [fp, #-10]
  13278c:	ea000001 	b	132798 <ip4addr_aton+0xc0>
      } else {
        base = 8;
  132790:	e3a03008 	mov	r3, #8
  132794:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  132798:	e55b300a 	ldrb	r3, [fp, #-10]
  13279c:	e353002f 	cmp	r3, #47	; 0x2f
  1327a0:	9a000010 	bls	1327e8 <ip4addr_aton+0x110>
  1327a4:	e55b300a 	ldrb	r3, [fp, #-10]
  1327a8:	e3530039 	cmp	r3, #57	; 0x39
  1327ac:	8a00000d 	bhi	1327e8 <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  1327b0:	e55b3009 	ldrb	r3, [fp, #-9]
  1327b4:	e51b2008 	ldr	r2, [fp, #-8]
  1327b8:	e0020392 	mul	r2, r2, r3
  1327bc:	e55b300a 	ldrb	r3, [fp, #-10]
  1327c0:	e0823003 	add	r3, r2, r3
  1327c4:	e2433030 	sub	r3, r3, #48	; 0x30
  1327c8:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1327cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327d0:	e2833001 	add	r3, r3, #1
  1327d4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1327d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327dc:	e5d33000 	ldrb	r3, [r3]
  1327e0:	e54b300a 	strb	r3, [fp, #-10]
  1327e4:	ea00002a 	b	132894 <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  1327e8:	e55b3009 	ldrb	r3, [fp, #-9]
  1327ec:	e3530010 	cmp	r3, #16
  1327f0:	1a000028 	bne	132898 <ip4addr_aton+0x1c0>
  1327f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1327f8:	e353002f 	cmp	r3, #47	; 0x2f
  1327fc:	9a000002 	bls	13280c <ip4addr_aton+0x134>
  132800:	e55b300a 	ldrb	r3, [fp, #-10]
  132804:	e3530039 	cmp	r3, #57	; 0x39
  132808:	9a00000b 	bls	13283c <ip4addr_aton+0x164>
  13280c:	e55b300a 	ldrb	r3, [fp, #-10]
  132810:	e3530060 	cmp	r3, #96	; 0x60
  132814:	9a000002 	bls	132824 <ip4addr_aton+0x14c>
  132818:	e55b300a 	ldrb	r3, [fp, #-10]
  13281c:	e3530066 	cmp	r3, #102	; 0x66
  132820:	9a000005 	bls	13283c <ip4addr_aton+0x164>
  132824:	e55b300a 	ldrb	r3, [fp, #-10]
  132828:	e3530040 	cmp	r3, #64	; 0x40
  13282c:	9a000019 	bls	132898 <ip4addr_aton+0x1c0>
  132830:	e55b300a 	ldrb	r3, [fp, #-10]
  132834:	e3530046 	cmp	r3, #70	; 0x46
  132838:	8a000016 	bhi	132898 <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  13283c:	e51b3008 	ldr	r3, [fp, #-8]
  132840:	e1a03203 	lsl	r3, r3, #4
  132844:	e55b200a 	ldrb	r2, [fp, #-10]
  132848:	e282100a 	add	r1, r2, #10
  13284c:	e55b200a 	ldrb	r2, [fp, #-10]
  132850:	e3520060 	cmp	r2, #96	; 0x60
  132854:	9a000004 	bls	13286c <ip4addr_aton+0x194>
  132858:	e55b200a 	ldrb	r2, [fp, #-10]
  13285c:	e352007a 	cmp	r2, #122	; 0x7a
  132860:	8a000001 	bhi	13286c <ip4addr_aton+0x194>
  132864:	e3a02061 	mov	r2, #97	; 0x61
  132868:	ea000000 	b	132870 <ip4addr_aton+0x198>
  13286c:	e3a02041 	mov	r2, #65	; 0x41
  132870:	e0412002 	sub	r2, r1, r2
  132874:	e1833002 	orr	r3, r3, r2
  132878:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  13287c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132880:	e2833001 	add	r3, r3, #1
  132884:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132888:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13288c:	e5d33000 	ldrb	r3, [r3]
  132890:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  132894:	eaffffbf 	b	132798 <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  132898:	e55b300a 	ldrb	r3, [fp, #-10]
  13289c:	e353002e 	cmp	r3, #46	; 0x2e
  1328a0:	1a000012 	bne	1328f0 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  1328a4:	e24b3020 	sub	r3, fp, #32
  1328a8:	e283300c 	add	r3, r3, #12
  1328ac:	e51b2010 	ldr	r2, [fp, #-16]
  1328b0:	e1520003 	cmp	r2, r3
  1328b4:	3a000001 	bcc	1328c0 <ip4addr_aton+0x1e8>
        return 0;
  1328b8:	e3a03000 	mov	r3, #0
  1328bc:	ea000086 	b	132adc <ip4addr_aton+0x404>
      }
      *pp++ = val;
  1328c0:	e51b3010 	ldr	r3, [fp, #-16]
  1328c4:	e2832004 	add	r2, r3, #4
  1328c8:	e50b2010 	str	r2, [fp, #-16]
  1328cc:	e51b2008 	ldr	r2, [fp, #-8]
  1328d0:	e5832000 	str	r2, [r3]
      c = *++cp;
  1328d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328d8:	e2833001 	add	r3, r3, #1
  1328dc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1328e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328e4:	e5d33000 	ldrb	r3, [r3]
  1328e8:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  1328ec:	eaffff83 	b	132700 <ip4addr_aton+0x28>
    } else {
      break;
  1328f0:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  1328f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1328f8:	e3530000 	cmp	r3, #0
  1328fc:	0a000013 	beq	132950 <ip4addr_aton+0x278>
  132900:	e55b300a 	ldrb	r3, [fp, #-10]
  132904:	e3530020 	cmp	r3, #32
  132908:	0a000010 	beq	132950 <ip4addr_aton+0x278>
  13290c:	e55b300a 	ldrb	r3, [fp, #-10]
  132910:	e353000c 	cmp	r3, #12
  132914:	0a00000d 	beq	132950 <ip4addr_aton+0x278>
  132918:	e55b300a 	ldrb	r3, [fp, #-10]
  13291c:	e353000a 	cmp	r3, #10
  132920:	0a00000a 	beq	132950 <ip4addr_aton+0x278>
  132924:	e55b300a 	ldrb	r3, [fp, #-10]
  132928:	e353000d 	cmp	r3, #13
  13292c:	0a000007 	beq	132950 <ip4addr_aton+0x278>
  132930:	e55b300a 	ldrb	r3, [fp, #-10]
  132934:	e3530009 	cmp	r3, #9
  132938:	0a000004 	beq	132950 <ip4addr_aton+0x278>
  13293c:	e55b300a 	ldrb	r3, [fp, #-10]
  132940:	e353000b 	cmp	r3, #11
  132944:	0a000001 	beq	132950 <ip4addr_aton+0x278>
    return 0;
  132948:	e3a03000 	mov	r3, #0
  13294c:	ea000062 	b	132adc <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  132950:	e51b2010 	ldr	r2, [fp, #-16]
  132954:	e24b3020 	sub	r3, fp, #32
  132958:	e0423003 	sub	r3, r2, r3
  13295c:	e1a03143 	asr	r3, r3, #2
  132960:	e2833001 	add	r3, r3, #1
  132964:	e3530004 	cmp	r3, #4
  132968:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13296c:	ea000048 	b	132a94 <ip4addr_aton+0x3bc>
  132970:	00132984 	.word	0x00132984
  132974:	00132ab4 	.word	0x00132ab4
  132978:	0013298c 	.word	0x0013298c
  13297c:	001329cc 	.word	0x001329cc
  132980:	00132a24 	.word	0x00132a24

  case 0:
    return 0;       /* initial nondigit */
  132984:	e3a03000 	mov	r3, #0
  132988:	ea000053 	b	132adc <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  13298c:	e51b3008 	ldr	r3, [fp, #-8]
  132990:	e3530401 	cmp	r3, #16777216	; 0x1000000
  132994:	3a000001 	bcc	1329a0 <ip4addr_aton+0x2c8>
      return 0;
  132998:	e3a03000 	mov	r3, #0
  13299c:	ea00004e 	b	132adc <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  1329a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329a4:	e35300ff 	cmp	r3, #255	; 0xff
  1329a8:	9a000001 	bls	1329b4 <ip4addr_aton+0x2dc>
      return 0;
  1329ac:	e3a03000 	mov	r3, #0
  1329b0:	ea000049 	b	132adc <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  1329b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329b8:	e1a03c03 	lsl	r3, r3, #24
  1329bc:	e51b2008 	ldr	r2, [fp, #-8]
  1329c0:	e1823003 	orr	r3, r2, r3
  1329c4:	e50b3008 	str	r3, [fp, #-8]
    break;
  1329c8:	ea00003a 	b	132ab8 <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  1329cc:	e51b3008 	ldr	r3, [fp, #-8]
  1329d0:	e3530801 	cmp	r3, #65536	; 0x10000
  1329d4:	3a000001 	bcc	1329e0 <ip4addr_aton+0x308>
      return 0;
  1329d8:	e3a03000 	mov	r3, #0
  1329dc:	ea00003e 	b	132adc <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  1329e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329e4:	e35300ff 	cmp	r3, #255	; 0xff
  1329e8:	8a000002 	bhi	1329f8 <ip4addr_aton+0x320>
  1329ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1329f0:	e35300ff 	cmp	r3, #255	; 0xff
  1329f4:	9a000001 	bls	132a00 <ip4addr_aton+0x328>
      return 0;
  1329f8:	e3a03000 	mov	r3, #0
  1329fc:	ea000036 	b	132adc <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  132a00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a04:	e1a02c03 	lsl	r2, r3, #24
  132a08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a0c:	e1a03803 	lsl	r3, r3, #16
  132a10:	e1823003 	orr	r3, r2, r3
  132a14:	e51b2008 	ldr	r2, [fp, #-8]
  132a18:	e1823003 	orr	r3, r2, r3
  132a1c:	e50b3008 	str	r3, [fp, #-8]
    break;
  132a20:	ea000024 	b	132ab8 <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  132a24:	e51b3008 	ldr	r3, [fp, #-8]
  132a28:	e35300ff 	cmp	r3, #255	; 0xff
  132a2c:	9a000001 	bls	132a38 <ip4addr_aton+0x360>
      return 0;
  132a30:	e3a03000 	mov	r3, #0
  132a34:	ea000028 	b	132adc <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  132a38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a3c:	e35300ff 	cmp	r3, #255	; 0xff
  132a40:	8a000005 	bhi	132a5c <ip4addr_aton+0x384>
  132a44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a48:	e35300ff 	cmp	r3, #255	; 0xff
  132a4c:	8a000002 	bhi	132a5c <ip4addr_aton+0x384>
  132a50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a54:	e35300ff 	cmp	r3, #255	; 0xff
  132a58:	9a000001 	bls	132a64 <ip4addr_aton+0x38c>
      return 0;
  132a5c:	e3a03000 	mov	r3, #0
  132a60:	ea00001d 	b	132adc <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  132a64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a68:	e1a02c03 	lsl	r2, r3, #24
  132a6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a70:	e1a03803 	lsl	r3, r3, #16
  132a74:	e1822003 	orr	r2, r2, r3
  132a78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a7c:	e1a03403 	lsl	r3, r3, #8
  132a80:	e1823003 	orr	r3, r2, r3
  132a84:	e51b2008 	ldr	r2, [fp, #-8]
  132a88:	e1823003 	orr	r3, r2, r3
  132a8c:	e50b3008 	str	r3, [fp, #-8]
    break;
  132a90:	ea000008 	b	132ab8 <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  132a94:	e3090900 	movw	r0, #39168	; 0x9900
  132a98:	e3400014 	movt	r0, #20
  132a9c:	ebff419c 	bl	103114 <rt_kprintf>
  132aa0:	e3001103 	movw	r1, #259	; 0x103
  132aa4:	e309090c 	movw	r0, #39180	; 0x990c
  132aa8:	e3400014 	movt	r0, #20
  132aac:	ebff618b 	bl	10b0e0 <sys_arch_assert>
    break;
  132ab0:	ea000000 	b	132ab8 <ip4addr_aton+0x3e0>
    break;
  132ab4:	e320f000 	nop	{0}
  }
  if (addr) {
  132ab8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132abc:	e3530000 	cmp	r3, #0
  132ac0:	0a000004 	beq	132ad8 <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  132ac4:	e51b0008 	ldr	r0, [fp, #-8]
  132ac8:	ebff8ec9 	bl	1165f4 <lwip_htonl>
  132acc:	e1a02000 	mov	r2, r0
  132ad0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132ad4:	e5832000 	str	r2, [r3]
  }
  return 1;
  132ad8:	e3a03001 	mov	r3, #1
}
  132adc:	e1a00003 	mov	r0, r3
  132ae0:	e24bd004 	sub	sp, fp, #4
  132ae4:	e8bd8800 	pop	{fp, pc}

00132ae8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  132ae8:	e92d4800 	push	{fp, lr}
  132aec:	e28db004 	add	fp, sp, #4
  132af0:	e24dd008 	sub	sp, sp, #8
  132af4:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  132af8:	e3a02010 	mov	r2, #16
  132afc:	e30e1c04 	movw	r1, #60420	; 0xec04
  132b00:	e3401014 	movt	r1, #20
  132b04:	e51b0008 	ldr	r0, [fp, #-8]
  132b08:	eb000003 	bl	132b1c <ip4addr_ntoa_r>
  132b0c:	e1a03000 	mov	r3, r0
}
  132b10:	e1a00003 	mov	r0, r3
  132b14:	e24bd004 	sub	sp, fp, #4
  132b18:	e8bd8800 	pop	{fp, pc}

00132b1c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132b1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132b20:	e28db000 	add	fp, sp, #0
  132b24:	e24dd034 	sub	sp, sp, #52	; 0x34
  132b28:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132b2c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132b30:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  132b34:	e3a03000 	mov	r3, #0
  132b38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  132b3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132b40:	e5933000 	ldr	r3, [r3]
  132b44:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  132b48:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132b4c:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  132b50:	e24b301c 	sub	r3, fp, #28
  132b54:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132b58:	e3a03000 	mov	r3, #0
  132b5c:	e54b300d 	strb	r3, [fp, #-13]
  132b60:	ea00004b 	b	132c94 <ip4addr_ntoa_r+0x178>
    i = 0;
  132b64:	e3a03000 	mov	r3, #0
  132b68:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  132b6c:	e51b300c 	ldr	r3, [fp, #-12]
  132b70:	e5d31000 	ldrb	r1, [r3]
  132b74:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132b78:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132b7c:	e0832391 	umull	r2, r3, r1, r3
  132b80:	e1a031a3 	lsr	r3, r3, #3
  132b84:	e3a0200a 	mov	r2, #10
  132b88:	e0030392 	mul	r3, r2, r3
  132b8c:	e0413003 	sub	r3, r1, r3
  132b90:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  132b94:	e51b300c 	ldr	r3, [fp, #-12]
  132b98:	e5d32000 	ldrb	r2, [r3]
  132b9c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132ba0:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132ba4:	e0832392 	umull	r2, r3, r2, r3
  132ba8:	e1a031a3 	lsr	r3, r3, #3
  132bac:	e6ef2073 	uxtb	r2, r3
  132bb0:	e51b300c 	ldr	r3, [fp, #-12]
  132bb4:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  132bb8:	e55b300e 	ldrb	r3, [fp, #-14]
  132bbc:	e2832001 	add	r2, r3, #1
  132bc0:	e54b200e 	strb	r2, [fp, #-14]
  132bc4:	e1a01003 	mov	r1, r3
  132bc8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132bcc:	e2833030 	add	r3, r3, #48	; 0x30
  132bd0:	e6ef2073 	uxtb	r2, r3
  132bd4:	e24b3004 	sub	r3, fp, #4
  132bd8:	e0833001 	add	r3, r3, r1
  132bdc:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132be0:	e51b300c 	ldr	r3, [fp, #-12]
  132be4:	e5d33000 	ldrb	r3, [r3]
  132be8:	e3530000 	cmp	r3, #0
  132bec:	1affffde 	bne	132b6c <ip4addr_ntoa_r+0x50>
    while (i--) {
  132bf0:	ea00000f 	b	132c34 <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  132bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132bf8:	e2832001 	add	r2, r3, #1
  132bfc:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132c00:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132c04:	e1520003 	cmp	r2, r3
  132c08:	ca000001 	bgt	132c14 <ip4addr_ntoa_r+0xf8>
        return NULL;
  132c0c:	e3a03000 	mov	r3, #0
  132c10:	ea000029 	b	132cbc <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  132c14:	e55b200e 	ldrb	r2, [fp, #-14]
  132c18:	e51b3008 	ldr	r3, [fp, #-8]
  132c1c:	e2831001 	add	r1, r3, #1
  132c20:	e50b1008 	str	r1, [fp, #-8]
  132c24:	e24b1004 	sub	r1, fp, #4
  132c28:	e0812002 	add	r2, r1, r2
  132c2c:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132c30:	e5c32000 	strb	r2, [r3]
    while (i--) {
  132c34:	e55b300e 	ldrb	r3, [fp, #-14]
  132c38:	e2432001 	sub	r2, r3, #1
  132c3c:	e54b200e 	strb	r2, [fp, #-14]
  132c40:	e3530000 	cmp	r3, #0
  132c44:	1affffea 	bne	132bf4 <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  132c48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132c4c:	e2832001 	add	r2, r3, #1
  132c50:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132c54:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132c58:	e1520003 	cmp	r2, r3
  132c5c:	ca000001 	bgt	132c68 <ip4addr_ntoa_r+0x14c>
      return NULL;
  132c60:	e3a03000 	mov	r3, #0
  132c64:	ea000014 	b	132cbc <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  132c68:	e51b3008 	ldr	r3, [fp, #-8]
  132c6c:	e2832001 	add	r2, r3, #1
  132c70:	e50b2008 	str	r2, [fp, #-8]
  132c74:	e3a0202e 	mov	r2, #46	; 0x2e
  132c78:	e5c32000 	strb	r2, [r3]
    ap++;
  132c7c:	e51b300c 	ldr	r3, [fp, #-12]
  132c80:	e2833001 	add	r3, r3, #1
  132c84:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132c88:	e55b300d 	ldrb	r3, [fp, #-13]
  132c8c:	e2833001 	add	r3, r3, #1
  132c90:	e54b300d 	strb	r3, [fp, #-13]
  132c94:	e55b300d 	ldrb	r3, [fp, #-13]
  132c98:	e3530003 	cmp	r3, #3
  132c9c:	9affffb0 	bls	132b64 <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132ca0:	e51b3008 	ldr	r3, [fp, #-8]
  132ca4:	e2433001 	sub	r3, r3, #1
  132ca8:	e50b3008 	str	r3, [fp, #-8]
  132cac:	e51b3008 	ldr	r3, [fp, #-8]
  132cb0:	e3a02000 	mov	r2, #0
  132cb4:	e5c32000 	strb	r2, [r3]
  return buf;
  132cb8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132cbc:	e1a00003 	mov	r0, r3
  132cc0:	e28bd000 	add	sp, fp, #0
  132cc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132cc8:	e12fff1e 	bx	lr

00132ccc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132ccc:	e92d4800 	push	{fp, lr}
  132cd0:	e28db004 	add	fp, sp, #4
  132cd4:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132cd8:	e3a03000 	mov	r3, #0
  132cdc:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132ce0:	e30e3c14 	movw	r3, #60436	; 0xec14
  132ce4:	e3403014 	movt	r3, #20
  132ce8:	e5933000 	ldr	r3, [r3]
  132cec:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  132cf0:	ea000017 	b	132d54 <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  132cf4:	e51b3008 	ldr	r3, [fp, #-8]
  132cf8:	e5d3301f 	ldrb	r3, [r3, #31]
  132cfc:	e3530000 	cmp	r3, #0
  132d00:	0a00000b 	beq	132d34 <ip_reass_tmr+0x68>
      r->timer--;
  132d04:	e51b3008 	ldr	r3, [fp, #-8]
  132d08:	e5d3301f 	ldrb	r3, [r3, #31]
  132d0c:	e2433001 	sub	r3, r3, #1
  132d10:	e6ef2073 	uxtb	r2, r3
  132d14:	e51b3008 	ldr	r3, [fp, #-8]
  132d18:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132d1c:	e51b3008 	ldr	r3, [fp, #-8]
  132d20:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  132d24:	e51b3008 	ldr	r3, [fp, #-8]
  132d28:	e5933000 	ldr	r3, [r3]
  132d2c:	e50b3008 	str	r3, [fp, #-8]
  132d30:	ea000007 	b	132d54 <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  132d34:	e51b3008 	ldr	r3, [fp, #-8]
  132d38:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  132d3c:	e51b3008 	ldr	r3, [fp, #-8]
  132d40:	e5933000 	ldr	r3, [r3]
  132d44:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132d48:	e51b100c 	ldr	r1, [fp, #-12]
  132d4c:	e51b0010 	ldr	r0, [fp, #-16]
  132d50:	eb000005 	bl	132d6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
  132d54:	e51b3008 	ldr	r3, [fp, #-8]
  132d58:	e3530000 	cmp	r3, #0
  132d5c:	1affffe4 	bne	132cf4 <ip_reass_tmr+0x28>
     }
   }
}
  132d60:	e320f000 	nop	{0}
  132d64:	e24bd004 	sub	sp, fp, #4
  132d68:	e8bd8800 	pop	{fp, pc}

00132d6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132d6c:	e92d4800 	push	{fp, lr}
  132d70:	e28db004 	add	fp, sp, #4
  132d74:	e24dd020 	sub	sp, sp, #32
  132d78:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132d7c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132d80:	e3a03000 	mov	r3, #0
  132d84:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132d88:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132d90:	e1520003 	cmp	r2, r3
  132d94:	1a000006 	bne	132db4 <ip_reass_free_complete_datagram+0x48>
  132d98:	e3090944 	movw	r0, #39236	; 0x9944
  132d9c:	e3400014 	movt	r0, #20
  132da0:	ebff40db 	bl	103114 <rt_kprintf>
  132da4:	e3a010a7 	mov	r1, #167	; 0xa7
  132da8:	e3090950 	movw	r0, #39248	; 0x9950
  132dac:	e3400014 	movt	r0, #20
  132db0:	ebff60ca 	bl	10b0e0 <sys_arch_assert>
  if (prev != NULL) {
  132db4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132db8:	e3530000 	cmp	r3, #0
  132dbc:	0a00000b 	beq	132df0 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132dc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132dc4:	e5933000 	ldr	r3, [r3]
  132dc8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132dcc:	e1520003 	cmp	r2, r3
  132dd0:	0a000006 	beq	132df0 <ip_reass_free_complete_datagram+0x84>
  132dd4:	e3090988 	movw	r0, #39304	; 0x9988
  132dd8:	e3400014 	movt	r0, #20
  132ddc:	ebff40cc 	bl	103114 <rt_kprintf>
  132de0:	e3a010a9 	mov	r1, #169	; 0xa9
  132de4:	e3090950 	movw	r0, #39248	; 0x9950
  132de8:	e3400014 	movt	r0, #20
  132dec:	ebff60bb 	bl	10b0e0 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132df0:	e30c3a50 	movw	r3, #51792	; 0xca50
  132df4:	e3403015 	movt	r3, #21
  132df8:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132dfc:	e2832001 	add	r2, r3, #1
  132e00:	e30c3a50 	movw	r3, #51792	; 0xca50
  132e04:	e3403015 	movt	r3, #21
  132e08:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  132e0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e10:	e5933004 	ldr	r3, [r3, #4]
  132e14:	e5933004 	ldr	r3, [r3, #4]
  132e18:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  132e1c:	e51b3010 	ldr	r3, [fp, #-16]
  132e20:	e1d330b4 	ldrh	r3, [r3, #4]
  132e24:	e6ff3073 	uxth	r3, r3
  132e28:	e3530000 	cmp	r3, #0
  132e2c:	1a000026 	bne	132ecc <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  132e30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e34:	e5933004 	ldr	r3, [r3, #4]
  132e38:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  132e3c:	e51b3010 	ldr	r3, [fp, #-16]
  132e40:	e5932000 	ldr	r2, [r3]
  132e44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e48:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132e4c:	e51b300c 	ldr	r3, [fp, #-12]
  132e50:	e5930004 	ldr	r0, [r3, #4]
  132e54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e58:	e2833008 	add	r3, r3, #8
  132e5c:	e3a02014 	mov	r2, #20
  132e60:	e1a01003 	mov	r1, r3
  132e64:	eb0037c6 	bl	140d84 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132e68:	e3a01001 	mov	r1, #1
  132e6c:	e51b000c 	ldr	r0, [fp, #-12]
  132e70:	ebfff396 	bl	12fcd0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132e74:	e51b000c 	ldr	r0, [fp, #-12]
  132e78:	ebffa08d 	bl	11b0b4 <pbuf_clen>
  132e7c:	e1a03000 	mov	r3, r0
  132e80:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132e84:	e15b20b6 	ldrh	r2, [fp, #-6]
  132e88:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132e8c:	e0823003 	add	r3, r2, r3
  132e90:	e3530801 	cmp	r3, #65536	; 0x10000
  132e94:	ba000006 	blt	132eb4 <ip_reass_free_complete_datagram+0x148>
  132e98:	e309099c 	movw	r0, #39324	; 0x999c
  132e9c:	e3400014 	movt	r0, #20
  132ea0:	ebff409b 	bl	103114 <rt_kprintf>
  132ea4:	e3a010b8 	mov	r1, #184	; 0xb8
  132ea8:	e3090950 	movw	r0, #39248	; 0x9950
  132eac:	e3400014 	movt	r0, #20
  132eb0:	ebff608a 	bl	10b0e0 <sys_arch_assert>
    pbufs_freed += clen;
  132eb4:	e15b20b6 	ldrh	r2, [fp, #-6]
  132eb8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132ebc:	e0823003 	add	r3, r2, r3
  132ec0:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132ec4:	e51b000c 	ldr	r0, [fp, #-12]
  132ec8:	ebff9ff4 	bl	11aea0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132ecc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132ed0:	e5933004 	ldr	r3, [r3, #4]
  132ed4:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132ed8:	ea00001d 	b	132f54 <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132edc:	e51b300c 	ldr	r3, [fp, #-12]
  132ee0:	e5933004 	ldr	r3, [r3, #4]
  132ee4:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132ee8:	e51b300c 	ldr	r3, [fp, #-12]
  132eec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132ef0:	e51b3010 	ldr	r3, [fp, #-16]
  132ef4:	e5933000 	ldr	r3, [r3]
  132ef8:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132efc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132f00:	ebffa06b 	bl	11b0b4 <pbuf_clen>
  132f04:	e1a03000 	mov	r3, r0
  132f08:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132f0c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f10:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132f14:	e0823003 	add	r3, r2, r3
  132f18:	e3530801 	cmp	r3, #65536	; 0x10000
  132f1c:	ba000006 	blt	132f3c <ip_reass_free_complete_datagram+0x1d0>
  132f20:	e309099c 	movw	r0, #39324	; 0x999c
  132f24:	e3400014 	movt	r0, #20
  132f28:	ebff4079 	bl	103114 <rt_kprintf>
  132f2c:	e3a010c8 	mov	r1, #200	; 0xc8
  132f30:	e3090950 	movw	r0, #39248	; 0x9950
  132f34:	e3400014 	movt	r0, #20
  132f38:	ebff6068 	bl	10b0e0 <sys_arch_assert>
    pbufs_freed += clen;
  132f3c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132f44:	e0823003 	add	r3, r2, r3
  132f48:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132f4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132f50:	ebff9fd2 	bl	11aea0 <pbuf_free>
  while (p != NULL) {
  132f54:	e51b300c 	ldr	r3, [fp, #-12]
  132f58:	e3530000 	cmp	r3, #0
  132f5c:	1affffde 	bne	132edc <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132f60:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132f64:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132f68:	eb0000b9 	bl	133254 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132f6c:	e30e3c18 	movw	r3, #60440	; 0xec18
  132f70:	e3403014 	movt	r3, #20
  132f74:	e1d330b0 	ldrh	r3, [r3]
  132f78:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f7c:	e1520003 	cmp	r2, r3
  132f80:	9a000006 	bls	132fa0 <ip_reass_free_complete_datagram+0x234>
  132f84:	e30909bc 	movw	r0, #39356	; 0x99bc
  132f88:	e3400014 	movt	r0, #20
  132f8c:	ebff4060 	bl	103114 <rt_kprintf>
  132f90:	e3a010ce 	mov	r1, #206	; 0xce
  132f94:	e3090950 	movw	r0, #39248	; 0x9950
  132f98:	e3400014 	movt	r0, #20
  132f9c:	ebff604f 	bl	10b0e0 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132fa0:	e30e3c18 	movw	r3, #60440	; 0xec18
  132fa4:	e3403014 	movt	r3, #20
  132fa8:	e1d320b0 	ldrh	r2, [r3]
  132fac:	e15b30b6 	ldrh	r3, [fp, #-6]
  132fb0:	e0423003 	sub	r3, r2, r3
  132fb4:	e6ff2073 	uxth	r2, r3
  132fb8:	e30e3c18 	movw	r3, #60440	; 0xec18
  132fbc:	e3403014 	movt	r3, #20
  132fc0:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132fc4:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132fc8:	e1a00003 	mov	r0, r3
  132fcc:	e24bd004 	sub	sp, fp, #4
  132fd0:	e8bd8800 	pop	{fp, pc}

00132fd4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132fd4:	e92d4800 	push	{fp, lr}
  132fd8:	e28db004 	add	fp, sp, #4
  132fdc:	e24dd028 	sub	sp, sp, #40	; 0x28
  132fe0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132fe4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132fe8:	e3a03000 	mov	r3, #0
  132fec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  132ff0:	e3a03000 	mov	r3, #0
  132ff4:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  132ff8:	e3a03000 	mov	r3, #0
  132ffc:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  133000:	e3a03000 	mov	r3, #0
  133004:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  133008:	e3a03000 	mov	r3, #0
  13300c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  133010:	e30e3c14 	movw	r3, #60436	; 0xec14
  133014:	e3403014 	movt	r3, #20
  133018:	e5933000 	ldr	r3, [r3]
  13301c:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133020:	ea000030 	b	1330e8 <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  133024:	e51b3008 	ldr	r3, [fp, #-8]
  133028:	e5932014 	ldr	r2, [r3, #20]
  13302c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133030:	e593300c 	ldr	r3, [r3, #12]
  133034:	e1520003 	cmp	r2, r3
  133038:	1a00000c 	bne	133070 <ip_reass_remove_oldest_datagram+0x9c>
  13303c:	e51b3008 	ldr	r3, [fp, #-8]
  133040:	e5932018 	ldr	r2, [r3, #24]
  133044:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133048:	e5933010 	ldr	r3, [r3, #16]
  13304c:	e1520003 	cmp	r2, r3
  133050:	1a000006 	bne	133070 <ip_reass_remove_oldest_datagram+0x9c>
  133054:	e51b3008 	ldr	r3, [fp, #-8]
  133058:	e1d320bc 	ldrh	r2, [r3, #12]
  13305c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133060:	e1d330b4 	ldrh	r3, [r3, #4]
  133064:	e6ff3073 	uxth	r3, r3
  133068:	e1520003 	cmp	r2, r3
  13306c:	0a000014 	beq	1330c4 <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  133070:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133074:	e2833001 	add	r3, r3, #1
  133078:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  13307c:	e51b300c 	ldr	r3, [fp, #-12]
  133080:	e3530000 	cmp	r3, #0
  133084:	1a000004 	bne	13309c <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  133088:	e51b3008 	ldr	r3, [fp, #-8]
  13308c:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  133090:	e51b3010 	ldr	r3, [fp, #-16]
  133094:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133098:	ea000009 	b	1330c4 <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  13309c:	e51b3008 	ldr	r3, [fp, #-8]
  1330a0:	e5d3201f 	ldrb	r2, [r3, #31]
  1330a4:	e51b300c 	ldr	r3, [fp, #-12]
  1330a8:	e5d3301f 	ldrb	r3, [r3, #31]
  1330ac:	e1520003 	cmp	r2, r3
  1330b0:	8a000003 	bhi	1330c4 <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  1330b4:	e51b3008 	ldr	r3, [fp, #-8]
  1330b8:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  1330bc:	e51b3010 	ldr	r3, [fp, #-16]
  1330c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  1330c4:	e51b3008 	ldr	r3, [fp, #-8]
  1330c8:	e5933000 	ldr	r3, [r3]
  1330cc:	e3530000 	cmp	r3, #0
  1330d0:	0a000001 	beq	1330dc <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  1330d4:	e51b3008 	ldr	r3, [fp, #-8]
  1330d8:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  1330dc:	e51b3008 	ldr	r3, [fp, #-8]
  1330e0:	e5933000 	ldr	r3, [r3]
  1330e4:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  1330e8:	e51b3008 	ldr	r3, [fp, #-8]
  1330ec:	e3530000 	cmp	r3, #0
  1330f0:	1affffcb 	bne	133024 <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  1330f4:	e51b300c 	ldr	r3, [fp, #-12]
  1330f8:	e3530000 	cmp	r3, #0
  1330fc:	0a000007 	beq	133120 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  133100:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133104:	e51b000c 	ldr	r0, [fp, #-12]
  133108:	ebffff17 	bl	132d6c <ip_reass_free_complete_datagram>
  13310c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  133110:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133114:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133118:	e0823003 	add	r3, r2, r3
  13311c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  133120:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133124:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133128:	e1520003 	cmp	r2, r3
  13312c:	aa000002 	bge	13313c <ip_reass_remove_oldest_datagram+0x168>
  133130:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133134:	e3530001 	cmp	r3, #1
  133138:	caffffac 	bgt	132ff0 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  13313c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  133140:	e1a00003 	mov	r0, r3
  133144:	e24bd004 	sub	sp, fp, #4
  133148:	e8bd8800 	pop	{fp, pc}

0013314c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  13314c:	e92d4800 	push	{fp, lr}
  133150:	e28db004 	add	fp, sp, #4
  133154:	e24dd010 	sub	sp, sp, #16
  133158:	e50b0010 	str	r0, [fp, #-16]
  13315c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  133160:	e300211a 	movw	r2, #282	; 0x11a
  133164:	e3091950 	movw	r1, #39248	; 0x9950
  133168:	e3401014 	movt	r1, #20
  13316c:	e3a00005 	mov	r0, #5
  133170:	ebff97d4 	bl	1190c8 <memp_malloc_fn>
  133174:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  133178:	e51b3008 	ldr	r3, [fp, #-8]
  13317c:	e3530000 	cmp	r3, #0
  133180:	1a000019 	bne	1331ec <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  133184:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133188:	e51b0010 	ldr	r0, [fp, #-16]
  13318c:	ebffff90 	bl	132fd4 <ip_reass_remove_oldest_datagram>
  133190:	e1a02000 	mov	r2, r0
  133194:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133198:	e1530002 	cmp	r3, r2
  13319c:	ca000005 	bgt	1331b8 <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  1331a0:	e300211e 	movw	r2, #286	; 0x11e
  1331a4:	e3091950 	movw	r1, #39248	; 0x9950
  1331a8:	e3401014 	movt	r1, #20
  1331ac:	e3a00005 	mov	r0, #5
  1331b0:	ebff97c4 	bl	1190c8 <memp_malloc_fn>
  1331b4:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  1331b8:	e51b3008 	ldr	r3, [fp, #-8]
  1331bc:	e3530000 	cmp	r3, #0
  1331c0:	1a000009 	bne	1331ec <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  1331c4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1331c8:	e3403015 	movt	r3, #21
  1331cc:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  1331d0:	e2833001 	add	r3, r3, #1
  1331d4:	e6ff2073 	uxth	r2, r3
  1331d8:	e30c3a50 	movw	r3, #51792	; 0xca50
  1331dc:	e3403015 	movt	r3, #21
  1331e0:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  1331e4:	e3a03000 	mov	r3, #0
  1331e8:	ea000016 	b	133248 <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  1331ec:	e3a02020 	mov	r2, #32
  1331f0:	e3a01000 	mov	r1, #0
  1331f4:	e51b0008 	ldr	r0, [fp, #-8]
  1331f8:	eb003819 	bl	141264 <memset>
  ipr->timer = IP_REASS_MAXAGE;
  1331fc:	e51b3008 	ldr	r3, [fp, #-8]
  133200:	e3a02003 	mov	r2, #3
  133204:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  133208:	e30e3c14 	movw	r3, #60436	; 0xec14
  13320c:	e3403014 	movt	r3, #20
  133210:	e5932000 	ldr	r2, [r3]
  133214:	e51b3008 	ldr	r3, [fp, #-8]
  133218:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  13321c:	e30e3c14 	movw	r3, #60436	; 0xec14
  133220:	e3403014 	movt	r3, #20
  133224:	e51b2008 	ldr	r2, [fp, #-8]
  133228:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  13322c:	e51b3008 	ldr	r3, [fp, #-8]
  133230:	e2833008 	add	r3, r3, #8
  133234:	e3a02014 	mov	r2, #20
  133238:	e51b1010 	ldr	r1, [fp, #-16]
  13323c:	e1a00003 	mov	r0, r3
  133240:	eb0036cf 	bl	140d84 <memcpy>
  return ipr;
  133244:	e51b3008 	ldr	r3, [fp, #-8]
}
  133248:	e1a00003 	mov	r0, r3
  13324c:	e24bd004 	sub	sp, fp, #4
  133250:	e8bd8800 	pop	{fp, pc}

00133254 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  133254:	e92d4800 	push	{fp, lr}
  133258:	e28db004 	add	fp, sp, #4
  13325c:	e24dd008 	sub	sp, sp, #8
  133260:	e50b0008 	str	r0, [fp, #-8]
  133264:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  133268:	e30e3c14 	movw	r3, #60436	; 0xec14
  13326c:	e3403014 	movt	r3, #20
  133270:	e5933000 	ldr	r3, [r3]
  133274:	e51b2008 	ldr	r2, [fp, #-8]
  133278:	e1520003 	cmp	r2, r3
  13327c:	1a000005 	bne	133298 <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  133280:	e51b3008 	ldr	r3, [fp, #-8]
  133284:	e5932000 	ldr	r2, [r3]
  133288:	e30e3c14 	movw	r3, #60436	; 0xec14
  13328c:	e3403014 	movt	r3, #20
  133290:	e5832000 	str	r2, [r3]
  133294:	ea00000d 	b	1332d0 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  133298:	e51b300c 	ldr	r3, [fp, #-12]
  13329c:	e3530000 	cmp	r3, #0
  1332a0:	1a000006 	bne	1332c0 <ip_reass_dequeue_datagram+0x6c>
  1332a4:	e30909d8 	movw	r0, #39384	; 0x99d8
  1332a8:	e3400014 	movt	r0, #20
  1332ac:	ebff3f98 	bl	103114 <rt_kprintf>
  1332b0:	e3001141 	movw	r1, #321	; 0x141
  1332b4:	e3090950 	movw	r0, #39248	; 0x9950
  1332b8:	e3400014 	movt	r0, #20
  1332bc:	ebff5f87 	bl	10b0e0 <sys_arch_assert>
    prev->next = ipr->next;
  1332c0:	e51b3008 	ldr	r3, [fp, #-8]
  1332c4:	e5932000 	ldr	r2, [r3]
  1332c8:	e51b300c 	ldr	r3, [fp, #-12]
  1332cc:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  1332d0:	e51b1008 	ldr	r1, [fp, #-8]
  1332d4:	e3a00005 	mov	r0, #5
  1332d8:	ebff97e2 	bl	119268 <memp_free>
}
  1332dc:	e320f000 	nop	{0}
  1332e0:	e24bd004 	sub	sp, fp, #4
  1332e4:	e8bd8800 	pop	{fp, pc}

001332e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  1332e8:	e92d4800 	push	{fp, lr}
  1332ec:	e28db004 	add	fp, sp, #4
  1332f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1332f4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1332f8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  1332fc:	e3a03000 	mov	r3, #0
  133300:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  133304:	e3a03001 	mov	r3, #1
  133308:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  13330c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133310:	e5933004 	ldr	r3, [r3, #4]
  133314:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  133318:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13331c:	e1d330b2 	ldrh	r3, [r3, #2]
  133320:	e6ff3073 	uxth	r3, r3
  133324:	e1a00003 	mov	r0, r3
  133328:	ebff8ca5 	bl	1165c4 <lwip_htons>
  13332c:	e1a03000 	mov	r3, r0
  133330:	e1a02003 	mov	r2, r3
  133334:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133338:	e5d33000 	ldrb	r3, [r3]
  13333c:	e6ff3073 	uxth	r3, r3
  133340:	e203300f 	and	r3, r3, #15
  133344:	e6ff3073 	uxth	r3, r3
  133348:	e1a03103 	lsl	r3, r3, #2
  13334c:	e6ff3073 	uxth	r3, r3
  133350:	e0423003 	sub	r3, r2, r3
  133354:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  133358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13335c:	e1d330b6 	ldrh	r3, [r3, #6]
  133360:	e6ff3073 	uxth	r3, r3
  133364:	e1a00003 	mov	r0, r3
  133368:	ebff8c95 	bl	1165c4 <lwip_htons>
  13336c:	e1a03000 	mov	r3, r0
  133370:	e7ec3053 	ubfx	r3, r3, #0, #13
  133374:	e6ff3073 	uxth	r3, r3
  133378:	e1a03183 	lsl	r3, r3, #3
  13337c:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  133380:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133384:	e5933004 	ldr	r3, [r3, #4]
  133388:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  13338c:	e51b3008 	ldr	r3, [fp, #-8]
  133390:	e3a02000 	mov	r2, #0
  133394:	e5c32000 	strb	r2, [r3]
  133398:	e3a02000 	mov	r2, #0
  13339c:	e5c32001 	strb	r2, [r3, #1]
  1333a0:	e3a02000 	mov	r2, #0
  1333a4:	e5c32002 	strb	r2, [r3, #2]
  1333a8:	e3a02000 	mov	r2, #0
  1333ac:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  1333b0:	e51b3008 	ldr	r3, [fp, #-8]
  1333b4:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1333b8:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  1333bc:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1333c0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1333c4:	e0823003 	add	r3, r2, r3
  1333c8:	e6ff2073 	uxth	r2, r3
  1333cc:	e51b3008 	ldr	r3, [fp, #-8]
  1333d0:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  1333d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1333d8:	e5933004 	ldr	r3, [r3, #4]
  1333dc:	e50b3010 	str	r3, [fp, #-16]
  1333e0:	ea00004a 	b	133510 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  1333e4:	e51b3010 	ldr	r3, [fp, #-16]
  1333e8:	e5933004 	ldr	r3, [r3, #4]
  1333ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  1333f0:	e51b3008 	ldr	r3, [fp, #-8]
  1333f4:	e1d330b4 	ldrh	r3, [r3, #4]
  1333f8:	e6ff2073 	uxth	r2, r3
  1333fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133400:	e1d330b4 	ldrh	r3, [r3, #4]
  133404:	e6ff3073 	uxth	r3, r3
  133408:	e1520003 	cmp	r2, r3
  13340c:	2a00001d 	bcs	133488 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  133410:	e51b3008 	ldr	r3, [fp, #-8]
  133414:	e51b2010 	ldr	r2, [fp, #-16]
  133418:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  13341c:	e51b300c 	ldr	r3, [fp, #-12]
  133420:	e3530000 	cmp	r3, #0
  133424:	0a000013 	beq	133478 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  133428:	e51b3008 	ldr	r3, [fp, #-8]
  13342c:	e1d330b4 	ldrh	r3, [r3, #4]
  133430:	e6ff2073 	uxth	r2, r3
  133434:	e51b300c 	ldr	r3, [fp, #-12]
  133438:	e1d330b6 	ldrh	r3, [r3, #6]
  13343c:	e6ff3073 	uxth	r3, r3
  133440:	e1520003 	cmp	r2, r3
  133444:	3a0000cf 	bcc	133788 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  133448:	e51b3008 	ldr	r3, [fp, #-8]
  13344c:	e1d330b6 	ldrh	r3, [r3, #6]
  133450:	e6ff2073 	uxth	r2, r3
  133454:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133458:	e1d330b4 	ldrh	r3, [r3, #4]
  13345c:	e6ff3073 	uxth	r3, r3
  133460:	e1520003 	cmp	r2, r3
  133464:	8a0000c7 	bhi	133788 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  133468:	e51b300c 	ldr	r3, [fp, #-12]
  13346c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133470:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  133474:	ea000028 	b	13351c <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  133478:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13347c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133480:	e5832004 	str	r2, [r3, #4]
      break;
  133484:	ea000024 	b	13351c <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  133488:	e51b3008 	ldr	r3, [fp, #-8]
  13348c:	e1d330b4 	ldrh	r3, [r3, #4]
  133490:	e6ff2073 	uxth	r2, r3
  133494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133498:	e1d330b4 	ldrh	r3, [r3, #4]
  13349c:	e6ff3073 	uxth	r3, r3
  1334a0:	e1520003 	cmp	r2, r3
  1334a4:	0a0000b9 	beq	133790 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  1334a8:	e51b3008 	ldr	r3, [fp, #-8]
  1334ac:	e1d330b4 	ldrh	r3, [r3, #4]
  1334b0:	e6ff2073 	uxth	r2, r3
  1334b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334b8:	e1d330b6 	ldrh	r3, [r3, #6]
  1334bc:	e6ff3073 	uxth	r3, r3
  1334c0:	e1520003 	cmp	r2, r3
  1334c4:	3a0000b3 	bcc	133798 <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  1334c8:	e51b300c 	ldr	r3, [fp, #-12]
  1334cc:	e3530000 	cmp	r3, #0
  1334d0:	0a000009 	beq	1334fc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  1334d4:	e51b300c 	ldr	r3, [fp, #-12]
  1334d8:	e1d330b6 	ldrh	r3, [r3, #6]
  1334dc:	e6ff2073 	uxth	r2, r3
  1334e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334e4:	e1d330b4 	ldrh	r3, [r3, #4]
  1334e8:	e6ff3073 	uxth	r3, r3
  1334ec:	e1520003 	cmp	r2, r3
  1334f0:	0a000001 	beq	1334fc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  1334f4:	e3a03000 	mov	r3, #0
  1334f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  1334fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133500:	e5933000 	ldr	r3, [r3]
  133504:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  133508:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13350c:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  133510:	e51b3010 	ldr	r3, [fp, #-16]
  133514:	e3530000 	cmp	r3, #0
  133518:	1affffb1 	bne	1333e4 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  13351c:	e51b3010 	ldr	r3, [fp, #-16]
  133520:	e3530000 	cmp	r3, #0
  133524:	1a00002d 	bne	1335e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  133528:	e51b300c 	ldr	r3, [fp, #-12]
  13352c:	e3530000 	cmp	r3, #0
  133530:	0a00001c 	beq	1335a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  133534:	e51b300c 	ldr	r3, [fp, #-12]
  133538:	e1d330b6 	ldrh	r3, [r3, #6]
  13353c:	e6ff2073 	uxth	r2, r3
  133540:	e51b3008 	ldr	r3, [fp, #-8]
  133544:	e1d330b4 	ldrh	r3, [r3, #4]
  133548:	e6ff3073 	uxth	r3, r3
  13354c:	e1520003 	cmp	r2, r3
  133550:	9a000006 	bls	133570 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  133554:	e30909f4 	movw	r0, #39412	; 0x99f4
  133558:	e3400014 	movt	r0, #20
  13355c:	ebff3eec 	bl	103114 <rt_kprintf>
  133560:	e300119b 	movw	r1, #411	; 0x19b
  133564:	e3090950 	movw	r0, #39248	; 0x9950
  133568:	e3400014 	movt	r0, #20
  13356c:	ebff5edb 	bl	10b0e0 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  133570:	e51b300c 	ldr	r3, [fp, #-12]
  133574:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133578:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  13357c:	e51b300c 	ldr	r3, [fp, #-12]
  133580:	e1d330b6 	ldrh	r3, [r3, #6]
  133584:	e6ff2073 	uxth	r2, r3
  133588:	e51b3008 	ldr	r3, [fp, #-8]
  13358c:	e1d330b4 	ldrh	r3, [r3, #4]
  133590:	e6ff3073 	uxth	r3, r3
  133594:	e1520003 	cmp	r2, r3
  133598:	0a000010 	beq	1335e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  13359c:	e3a03000 	mov	r3, #0
  1335a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1335a4:	ea00000d 	b	1335e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  1335a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335ac:	e5933004 	ldr	r3, [r3, #4]
  1335b0:	e3530000 	cmp	r3, #0
  1335b4:	0a000006 	beq	1335d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  1335b8:	e3090a14 	movw	r0, #39444	; 0x9a14
  1335bc:	e3400014 	movt	r0, #20
  1335c0:	ebff3ed3 	bl	103114 <rt_kprintf>
  1335c4:	e3a01f69 	mov	r1, #420	; 0x1a4
  1335c8:	e3090950 	movw	r0, #39248	; 0x9950
  1335cc:	e3400014 	movt	r0, #20
  1335d0:	ebff5ec2 	bl	10b0e0 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  1335d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335d8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1335dc:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  1335e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335e4:	e5d3301e 	ldrb	r3, [r3, #30]
  1335e8:	e2033001 	and	r3, r3, #1
  1335ec:	e3530000 	cmp	r3, #0
  1335f0:	0a000062 	beq	133780 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  1335f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1335f8:	e3530000 	cmp	r3, #0
  1335fc:	0a00005d 	beq	133778 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  133600:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133604:	e5933004 	ldr	r3, [r3, #4]
  133608:	e3530000 	cmp	r3, #0
  13360c:	0a000006 	beq	13362c <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  133610:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133614:	e5933004 	ldr	r3, [r3, #4]
  133618:	e5933004 	ldr	r3, [r3, #4]
  13361c:	e1d330b4 	ldrh	r3, [r3, #4]
  133620:	e6ff3073 	uxth	r3, r3
  133624:	e3530000 	cmp	r3, #0
  133628:	0a000002 	beq	133638 <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  13362c:	e3a03000 	mov	r3, #0
  133630:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133634:	ea00004f 	b	133778 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  133638:	e51b3008 	ldr	r3, [fp, #-8]
  13363c:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  133640:	e51b3008 	ldr	r3, [fp, #-8]
  133644:	e5933000 	ldr	r3, [r3]
  133648:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  13364c:	ea000012 	b	13369c <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  133650:	e51b3010 	ldr	r3, [fp, #-16]
  133654:	e5933004 	ldr	r3, [r3, #4]
  133658:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  13365c:	e51b300c 	ldr	r3, [fp, #-12]
  133660:	e1d330b6 	ldrh	r3, [r3, #6]
  133664:	e6ff2073 	uxth	r2, r3
  133668:	e51b3008 	ldr	r3, [fp, #-8]
  13366c:	e1d330b4 	ldrh	r3, [r3, #4]
  133670:	e6ff3073 	uxth	r3, r3
  133674:	e1520003 	cmp	r2, r3
  133678:	0a000002 	beq	133688 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  13367c:	e3a03000 	mov	r3, #0
  133680:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  133684:	ea000007 	b	1336a8 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  133688:	e51b3008 	ldr	r3, [fp, #-8]
  13368c:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  133690:	e51b3008 	ldr	r3, [fp, #-8]
  133694:	e5933000 	ldr	r3, [r3]
  133698:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  13369c:	e51b3010 	ldr	r3, [fp, #-16]
  1336a0:	e3530000 	cmp	r3, #0
  1336a4:	1affffe9 	bne	133650 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  1336a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1336ac:	e3530000 	cmp	r3, #0
  1336b0:	0a000030 	beq	133778 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  1336b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1336b8:	e5933004 	ldr	r3, [r3, #4]
  1336bc:	e3530000 	cmp	r3, #0
  1336c0:	1a000006 	bne	1336e0 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  1336c4:	e3090a4c 	movw	r0, #39500	; 0x9a4c
  1336c8:	e3400014 	movt	r0, #20
  1336cc:	ebff3e90 	bl	103114 <rt_kprintf>
  1336d0:	e3a01f71 	mov	r1, #452	; 0x1c4
  1336d4:	e3090950 	movw	r0, #39248	; 0x9950
  1336d8:	e3400014 	movt	r0, #20
  1336dc:	ebff5e7f 	bl	10b0e0 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  1336e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1336e4:	e5933004 	ldr	r3, [r3, #4]
  1336e8:	e5933004 	ldr	r3, [r3, #4]
  1336ec:	e51b2008 	ldr	r2, [fp, #-8]
  1336f0:	e1520003 	cmp	r2, r3
  1336f4:	1a000006 	bne	133714 <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  1336f8:	e3090a4c 	movw	r0, #39500	; 0x9a4c
  1336fc:	e3400014 	movt	r0, #20
  133700:	ebff3e83 	bl	103114 <rt_kprintf>
  133704:	e30011c6 	movw	r1, #454	; 0x1c6
  133708:	e3090950 	movw	r0, #39248	; 0x9950
  13370c:	e3400014 	movt	r0, #20
  133710:	ebff5e72 	bl	10b0e0 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  133714:	e51b3008 	ldr	r3, [fp, #-8]
  133718:	e5933000 	ldr	r3, [r3]
  13371c:	e3530000 	cmp	r3, #0
  133720:	0a000006 	beq	133740 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  133724:	e3090a5c 	movw	r0, #39516	; 0x9a5c
  133728:	e3400014 	movt	r0, #20
  13372c:	ebff3e78 	bl	103114 <rt_kprintf>
  133730:	e3a01f72 	mov	r1, #456	; 0x1c8
  133734:	e3090950 	movw	r0, #39248	; 0x9950
  133738:	e3400014 	movt	r0, #20
  13373c:	ebff5e67 	bl	10b0e0 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  133740:	e51b3008 	ldr	r3, [fp, #-8]
  133744:	e1d330b6 	ldrh	r3, [r3, #6]
  133748:	e6ff2073 	uxth	r2, r3
  13374c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133750:	e1d331bc 	ldrh	r3, [r3, #28]
  133754:	e1520003 	cmp	r2, r3
  133758:	0a000006 	beq	133778 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  13375c:	e3090a80 	movw	r0, #39552	; 0x9a80
  133760:	e3400014 	movt	r0, #20
  133764:	ebff3e6a 	bl	103114 <rt_kprintf>
  133768:	e30011ca 	movw	r1, #458	; 0x1ca
  13376c:	e3090950 	movw	r0, #39248	; 0x9950
  133770:	e3400014 	movt	r0, #20
  133774:	ebff5e59 	bl	10b0e0 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  133778:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13377c:	ea000015 	b	1337d8 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  133780:	e3a03000 	mov	r3, #0
  133784:	ea000013 	b	1337d8 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  133788:	e320f000 	nop	{0}
  13378c:	ea000002 	b	13379c <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133790:	e320f000 	nop	{0}
  133794:	ea000000 	b	13379c <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133798:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  13379c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1337a0:	ebff9e43 	bl	11b0b4 <pbuf_clen>
  1337a4:	e1a03000 	mov	r3, r0
  1337a8:	e1a02003 	mov	r2, r3
  1337ac:	e30e3c18 	movw	r3, #60440	; 0xec18
  1337b0:	e3403014 	movt	r3, #20
  1337b4:	e1d330b0 	ldrh	r3, [r3]
  1337b8:	e0433002 	sub	r3, r3, r2
  1337bc:	e6ff2073 	uxth	r2, r3
  1337c0:	e30e3c18 	movw	r3, #60440	; 0xec18
  1337c4:	e3403014 	movt	r3, #20
  1337c8:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  1337cc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1337d0:	ebff9db2 	bl	11aea0 <pbuf_free>
  return 0;
  1337d4:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  1337d8:	e1a00003 	mov	r0, r3
  1337dc:	e24bd004 	sub	sp, fp, #4
  1337e0:	e8bd8800 	pop	{fp, pc}

001337e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  1337e4:	e92d4800 	push	{fp, lr}
  1337e8:	e28db004 	add	fp, sp, #4
  1337ec:	e24dd028 	sub	sp, sp, #40	; 0x28
  1337f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  1337f4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1337f8:	e3403015 	movt	r3, #21
  1337fc:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  133800:	e2833001 	add	r3, r3, #1
  133804:	e6ff2073 	uxth	r2, r3
  133808:	e30c3a50 	movw	r3, #51792	; 0xca50
  13380c:	e3403015 	movt	r3, #21
  133810:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  133814:	e30c3a50 	movw	r3, #51792	; 0xca50
  133818:	e3403015 	movt	r3, #21
  13381c:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  133820:	e2832001 	add	r2, r3, #1
  133824:	e30c3a50 	movw	r3, #51792	; 0xca50
  133828:	e3403015 	movt	r3, #21
  13382c:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133830:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133834:	e5933004 	ldr	r3, [r3, #4]
  133838:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  13383c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133840:	e5d33000 	ldrb	r3, [r3]
  133844:	e203300f 	and	r3, r3, #15
  133848:	e1a03103 	lsl	r3, r3, #2
  13384c:	e3530014 	cmp	r3, #20
  133850:	0a000008 	beq	133878 <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  133854:	e30c3a50 	movw	r3, #51792	; 0xca50
  133858:	e3403015 	movt	r3, #21
  13385c:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  133860:	e2833001 	add	r3, r3, #1
  133864:	e6ff2073 	uxth	r2, r3
  133868:	e30c3a50 	movw	r3, #51792	; 0xca50
  13386c:	e3403015 	movt	r3, #21
  133870:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  133874:	ea00011e 	b	133cf4 <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  133878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13387c:	e1d330b6 	ldrh	r3, [r3, #6]
  133880:	e6ff3073 	uxth	r3, r3
  133884:	e1a00003 	mov	r0, r3
  133888:	ebff8b4d 	bl	1165c4 <lwip_htons>
  13388c:	e1a03000 	mov	r3, r0
  133890:	e7ec3053 	ubfx	r3, r3, #0, #13
  133894:	e6ff3073 	uxth	r3, r3
  133898:	e1a03183 	lsl	r3, r3, #3
  13389c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  1338a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338a4:	e1d330b2 	ldrh	r3, [r3, #2]
  1338a8:	e6ff3073 	uxth	r3, r3
  1338ac:	e1a00003 	mov	r0, r3
  1338b0:	ebff8b43 	bl	1165c4 <lwip_htons>
  1338b4:	e1a03000 	mov	r3, r0
  1338b8:	e1a02003 	mov	r2, r3
  1338bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338c0:	e5d33000 	ldrb	r3, [r3]
  1338c4:	e6ff3073 	uxth	r3, r3
  1338c8:	e203300f 	and	r3, r3, #15
  1338cc:	e6ff3073 	uxth	r3, r3
  1338d0:	e1a03103 	lsl	r3, r3, #2
  1338d4:	e6ff3073 	uxth	r3, r3
  1338d8:	e0423003 	sub	r3, r2, r3
  1338dc:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  1338e0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1338e4:	ebff9df2 	bl	11b0b4 <pbuf_clen>
  1338e8:	e1a03000 	mov	r3, r0
  1338ec:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  1338f0:	e30e3c18 	movw	r3, #60440	; 0xec18
  1338f4:	e3403014 	movt	r3, #20
  1338f8:	e1d330b0 	ldrh	r3, [r3]
  1338fc:	e1a02003 	mov	r2, r3
  133900:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133904:	e0823003 	add	r3, r2, r3
  133908:	e353000a 	cmp	r3, #10
  13390c:	da000017 	ble	133970 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133910:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133914:	e1a01003 	mov	r1, r3
  133918:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13391c:	ebfffdac 	bl	132fd4 <ip_reass_remove_oldest_datagram>
  133920:	e1a03000 	mov	r3, r0
  133924:	e3530000 	cmp	r3, #0
  133928:	0a000007 	beq	13394c <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  13392c:	e30e3c18 	movw	r3, #60440	; 0xec18
  133930:	e3403014 	movt	r3, #20
  133934:	e1d330b0 	ldrh	r3, [r3]
  133938:	e1a02003 	mov	r2, r3
  13393c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133940:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133944:	e353000a 	cmp	r3, #10
  133948:	da000008 	ble	133970 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  13394c:	e30c3a50 	movw	r3, #51792	; 0xca50
  133950:	e3403015 	movt	r3, #21
  133954:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  133958:	e2833001 	add	r3, r3, #1
  13395c:	e6ff2073 	uxth	r2, r3
  133960:	e30c3a50 	movw	r3, #51792	; 0xca50
  133964:	e3403015 	movt	r3, #21
  133968:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  13396c:	ea0000e0 	b	133cf4 <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133970:	e30e3c14 	movw	r3, #60436	; 0xec14
  133974:	e3403014 	movt	r3, #20
  133978:	e5933000 	ldr	r3, [r3]
  13397c:	e50b300c 	str	r3, [fp, #-12]
  133980:	ea00001e 	b	133a00 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  133984:	e51b300c 	ldr	r3, [fp, #-12]
  133988:	e5932014 	ldr	r2, [r3, #20]
  13398c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133990:	e593300c 	ldr	r3, [r3, #12]
  133994:	e1520003 	cmp	r2, r3
  133998:	1a000015 	bne	1339f4 <ip4_reass+0x210>
  13399c:	e51b300c 	ldr	r3, [fp, #-12]
  1339a0:	e5932018 	ldr	r2, [r3, #24]
  1339a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339a8:	e5933010 	ldr	r3, [r3, #16]
  1339ac:	e1520003 	cmp	r2, r3
  1339b0:	1a00000f 	bne	1339f4 <ip4_reass+0x210>
  1339b4:	e51b300c 	ldr	r3, [fp, #-12]
  1339b8:	e1d320bc 	ldrh	r2, [r3, #12]
  1339bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339c0:	e1d330b4 	ldrh	r3, [r3, #4]
  1339c4:	e6ff3073 	uxth	r3, r3
  1339c8:	e1520003 	cmp	r2, r3
  1339cc:	1a000008 	bne	1339f4 <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  1339d0:	e30c3a50 	movw	r3, #51792	; 0xca50
  1339d4:	e3403015 	movt	r3, #21
  1339d8:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  1339dc:	e2833001 	add	r3, r3, #1
  1339e0:	e6ff2073 	uxth	r2, r3
  1339e4:	e30c3a50 	movw	r3, #51792	; 0xca50
  1339e8:	e3403015 	movt	r3, #21
  1339ec:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  1339f0:	ea000005 	b	133a0c <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  1339f4:	e51b300c 	ldr	r3, [fp, #-12]
  1339f8:	e5933000 	ldr	r3, [r3]
  1339fc:	e50b300c 	str	r3, [fp, #-12]
  133a00:	e51b300c 	ldr	r3, [fp, #-12]
  133a04:	e3530000 	cmp	r3, #0
  133a08:	1affffdd 	bne	133984 <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  133a0c:	e51b300c 	ldr	r3, [fp, #-12]
  133a10:	e3530000 	cmp	r3, #0
  133a14:	1a000008 	bne	133a3c <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  133a18:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133a1c:	e1a01003 	mov	r1, r3
  133a20:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133a24:	ebfffdc8 	bl	13314c <ip_reass_enqueue_new_datagram>
  133a28:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133a2c:	e51b300c 	ldr	r3, [fp, #-12]
  133a30:	e3530000 	cmp	r3, #0
  133a34:	1a000017 	bne	133a98 <ip4_reass+0x2b4>
      goto nullreturn;
  133a38:	ea0000ad 	b	133cf4 <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a40:	e1d330b6 	ldrh	r3, [r3, #6]
  133a44:	e6ff3073 	uxth	r3, r3
  133a48:	e1a00003 	mov	r0, r3
  133a4c:	ebff8adc 	bl	1165c4 <lwip_htons>
  133a50:	e1a03000 	mov	r3, r0
  133a54:	e7ec3053 	ubfx	r3, r3, #0, #13
  133a58:	e3530000 	cmp	r3, #0
  133a5c:	1a00000d 	bne	133a98 <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  133a60:	e51b300c 	ldr	r3, [fp, #-12]
  133a64:	e1d330be 	ldrh	r3, [r3, #14]
  133a68:	e1a00003 	mov	r0, r3
  133a6c:	ebff8ad4 	bl	1165c4 <lwip_htons>
  133a70:	e1a03000 	mov	r3, r0
  133a74:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a78:	e3530000 	cmp	r3, #0
  133a7c:	0a000005 	beq	133a98 <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  133a80:	e51b300c 	ldr	r3, [fp, #-12]
  133a84:	e2833008 	add	r3, r3, #8
  133a88:	e3a02014 	mov	r2, #20
  133a8c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133a90:	e1a00003 	mov	r0, r3
  133a94:	eb0034ba 	bl	140d84 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  133a98:	e30e3c18 	movw	r3, #60440	; 0xec18
  133a9c:	e3403014 	movt	r3, #20
  133aa0:	e1d320b0 	ldrh	r2, [r3]
  133aa4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133aa8:	e0823003 	add	r3, r2, r3
  133aac:	e6ff2073 	uxth	r2, r3
  133ab0:	e30e3c18 	movw	r3, #60440	; 0xec18
  133ab4:	e3403014 	movt	r3, #20
  133ab8:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133abc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ac0:	e1d330b6 	ldrh	r3, [r3, #6]
  133ac4:	e6ff3073 	uxth	r3, r3
  133ac8:	e2033020 	and	r3, r3, #32
  133acc:	e3530000 	cmp	r3, #0
  133ad0:	1a00000b 	bne	133b04 <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  133ad4:	e51b300c 	ldr	r3, [fp, #-12]
  133ad8:	e5d3301e 	ldrb	r3, [r3, #30]
  133adc:	e3833001 	orr	r3, r3, #1
  133ae0:	e6ef2073 	uxtb	r2, r3
  133ae4:	e51b300c 	ldr	r3, [fp, #-12]
  133ae8:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  133aec:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  133af0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  133af4:	e0823003 	add	r3, r2, r3
  133af8:	e6ff2073 	uxth	r2, r3
  133afc:	e51b300c 	ldr	r3, [fp, #-12]
  133b00:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  133b04:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  133b08:	e51b000c 	ldr	r0, [fp, #-12]
  133b0c:	ebfffdf5 	bl	1332e8 <ip_reass_chain_frag_into_datagram_and_validate>
  133b10:	e1a03000 	mov	r3, r0
  133b14:	e3530000 	cmp	r3, #0
  133b18:	0a000073 	beq	133cec <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133b1c:	e51b300c 	ldr	r3, [fp, #-12]
  133b20:	e1d331bc 	ldrh	r3, [r3, #28]
  133b24:	e2833014 	add	r3, r3, #20
  133b28:	e6ff2073 	uxth	r2, r3
  133b2c:	e51b300c 	ldr	r3, [fp, #-12]
  133b30:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  133b34:	e51b300c 	ldr	r3, [fp, #-12]
  133b38:	e5933004 	ldr	r3, [r3, #4]
  133b3c:	e5933004 	ldr	r3, [r3, #4]
  133b40:	e5933000 	ldr	r3, [r3]
  133b44:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  133b48:	e51b300c 	ldr	r3, [fp, #-12]
  133b4c:	e5933004 	ldr	r3, [r3, #4]
  133b50:	e5933004 	ldr	r3, [r3, #4]
  133b54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  133b58:	e51b300c 	ldr	r3, [fp, #-12]
  133b5c:	e2833008 	add	r3, r3, #8
  133b60:	e3a02014 	mov	r2, #20
  133b64:	e1a01003 	mov	r1, r3
  133b68:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133b6c:	eb003484 	bl	140d84 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  133b70:	e51b300c 	ldr	r3, [fp, #-12]
  133b74:	e1d331bc 	ldrh	r3, [r3, #28]
  133b78:	e1a00003 	mov	r0, r3
  133b7c:	ebff8a90 	bl	1165c4 <lwip_htons>
  133b80:	e1a03000 	mov	r3, r0
  133b84:	e1a02003 	mov	r2, r3
  133b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b8c:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  133b90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b94:	e3a02000 	mov	r2, #0
  133b98:	e5c32006 	strb	r2, [r3, #6]
  133b9c:	e3a02000 	mov	r2, #0
  133ba0:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  133ba4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ba8:	e3a02000 	mov	r2, #0
  133bac:	e5c3200a 	strb	r2, [r3, #10]
  133bb0:	e3a02000 	mov	r2, #0
  133bb4:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  133bb8:	e3a01014 	mov	r1, #20
  133bbc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133bc0:	ebff938e 	bl	118a00 <inet_chksum>
  133bc4:	e1a03000 	mov	r3, r0
  133bc8:	e1a02003 	mov	r2, r3
  133bcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133bd0:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  133bd4:	e51b300c 	ldr	r3, [fp, #-12]
  133bd8:	e5933004 	ldr	r3, [r3, #4]
  133bdc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133be0:	ea00000b 	b	133c14 <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  133be4:	e51b3008 	ldr	r3, [fp, #-8]
  133be8:	e5933004 	ldr	r3, [r3, #4]
  133bec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  133bf0:	e3e01013 	mvn	r1, #19
  133bf4:	e51b0008 	ldr	r0, [fp, #-8]
  133bf8:	ebff9c8a 	bl	11ae28 <pbuf_header>
      pbuf_cat(p, r);
  133bfc:	e51b1008 	ldr	r1, [fp, #-8]
  133c00:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133c04:	ebff9d5c 	bl	11b17c <pbuf_cat>
      r = iprh->next_pbuf;
  133c08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133c0c:	e5933000 	ldr	r3, [r3]
  133c10:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133c14:	e51b3008 	ldr	r3, [fp, #-8]
  133c18:	e3530000 	cmp	r3, #0
  133c1c:	1afffff0 	bne	133be4 <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133c20:	e30e3c14 	movw	r3, #60436	; 0xec14
  133c24:	e3403014 	movt	r3, #20
  133c28:	e5933000 	ldr	r3, [r3]
  133c2c:	e51b200c 	ldr	r2, [fp, #-12]
  133c30:	e1520003 	cmp	r2, r3
  133c34:	1a000002 	bne	133c44 <ip4_reass+0x460>
      ipr_prev = NULL;
  133c38:	e3a03000 	mov	r3, #0
  133c3c:	e50b3010 	str	r3, [fp, #-16]
  133c40:	ea000011 	b	133c8c <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c44:	e30e3c14 	movw	r3, #60436	; 0xec14
  133c48:	e3403014 	movt	r3, #20
  133c4c:	e5933000 	ldr	r3, [r3]
  133c50:	e50b3010 	str	r3, [fp, #-16]
  133c54:	ea000007 	b	133c78 <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  133c58:	e51b3010 	ldr	r3, [fp, #-16]
  133c5c:	e5933000 	ldr	r3, [r3]
  133c60:	e51b200c 	ldr	r2, [fp, #-12]
  133c64:	e1520003 	cmp	r2, r3
  133c68:	0a000006 	beq	133c88 <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c6c:	e51b3010 	ldr	r3, [fp, #-16]
  133c70:	e5933000 	ldr	r3, [r3]
  133c74:	e50b3010 	str	r3, [fp, #-16]
  133c78:	e51b3010 	ldr	r3, [fp, #-16]
  133c7c:	e3530000 	cmp	r3, #0
  133c80:	1afffff4 	bne	133c58 <ip4_reass+0x474>
  133c84:	ea000000 	b	133c8c <ip4_reass+0x4a8>
          break;
  133c88:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  133c8c:	e51b1010 	ldr	r1, [fp, #-16]
  133c90:	e51b000c 	ldr	r0, [fp, #-12]
  133c94:	ebfffd6e 	bl	133254 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  133c98:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133c9c:	ebff9d04 	bl	11b0b4 <pbuf_clen>
  133ca0:	e1a03000 	mov	r3, r0
  133ca4:	e1a02003 	mov	r2, r3
  133ca8:	e30e3c18 	movw	r3, #60440	; 0xec18
  133cac:	e3403014 	movt	r3, #20
  133cb0:	e1d330b0 	ldrh	r3, [r3]
  133cb4:	e0433002 	sub	r3, r3, r2
  133cb8:	e6ff2073 	uxth	r2, r3
  133cbc:	e30e3c18 	movw	r3, #60440	; 0xec18
  133cc0:	e3403014 	movt	r3, #20
  133cc4:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133cc8:	e30c3a50 	movw	r3, #51792	; 0xca50
  133ccc:	e3403015 	movt	r3, #21
  133cd0:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  133cd4:	e2832001 	add	r2, r3, #1
  133cd8:	e30c3a50 	movw	r3, #51792	; 0xca50
  133cdc:	e3403015 	movt	r3, #21
  133ce0:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  133ce4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133ce8:	ea00000c 	b	133d20 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  133cec:	e3a03000 	mov	r3, #0
  133cf0:	ea00000a 	b	133d20 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  133cf4:	e30c3a50 	movw	r3, #51792	; 0xca50
  133cf8:	e3403015 	movt	r3, #21
  133cfc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  133d00:	e2833001 	add	r3, r3, #1
  133d04:	e6ff2073 	uxth	r2, r3
  133d08:	e30c3a50 	movw	r3, #51792	; 0xca50
  133d0c:	e3403015 	movt	r3, #21
  133d10:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  133d14:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133d18:	ebff9c60 	bl	11aea0 <pbuf_free>
  return NULL;
  133d1c:	e3a03000 	mov	r3, #0
}
  133d20:	e1a00003 	mov	r0, r3
  133d24:	e24bd004 	sub	sp, fp, #4
  133d28:	e8bd8800 	pop	{fp, pc}

00133d2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133d2c:	e92d4800 	push	{fp, lr}
  133d30:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  133d34:	e3002286 	movw	r2, #646	; 0x286
  133d38:	e3091950 	movw	r1, #39248	; 0x9950
  133d3c:	e3401014 	movt	r1, #20
  133d40:	e3a00006 	mov	r0, #6
  133d44:	ebff94df 	bl	1190c8 <memp_malloc_fn>
  133d48:	e1a03000 	mov	r3, r0
}
  133d4c:	e1a00003 	mov	r0, r3
  133d50:	e8bd8800 	pop	{fp, pc}

00133d54 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  133d54:	e92d4800 	push	{fp, lr}
  133d58:	e28db004 	add	fp, sp, #4
  133d5c:	e24dd008 	sub	sp, sp, #8
  133d60:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  133d64:	e51b3008 	ldr	r3, [fp, #-8]
  133d68:	e3530000 	cmp	r3, #0
  133d6c:	1a000006 	bne	133d8c <ip_frag_free_pbuf_custom_ref+0x38>
  133d70:	e3090ab0 	movw	r0, #39600	; 0x9ab0
  133d74:	e3400014 	movt	r0, #20
  133d78:	ebff3ce5 	bl	103114 <rt_kprintf>
  133d7c:	e300128d 	movw	r1, #653	; 0x28d
  133d80:	e3090950 	movw	r0, #39248	; 0x9950
  133d84:	e3400014 	movt	r0, #20
  133d88:	ebff5cd4 	bl	10b0e0 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133d8c:	e51b1008 	ldr	r1, [fp, #-8]
  133d90:	e3a00006 	mov	r0, #6
  133d94:	ebff9533 	bl	119268 <memp_free>
}
  133d98:	e320f000 	nop	{0}
  133d9c:	e24bd004 	sub	sp, fp, #4
  133da0:	e8bd8800 	pop	{fp, pc}

00133da4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133da4:	e92d4800 	push	{fp, lr}
  133da8:	e28db004 	add	fp, sp, #4
  133dac:	e24dd010 	sub	sp, sp, #16
  133db0:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133db4:	e51b3010 	ldr	r3, [fp, #-16]
  133db8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133dbc:	e51b3008 	ldr	r3, [fp, #-8]
  133dc0:	e3530000 	cmp	r3, #0
  133dc4:	1a000006 	bne	133de4 <ipfrag_free_pbuf_custom+0x40>
  133dc8:	e3090abc 	movw	r0, #39612	; 0x9abc
  133dcc:	e3400014 	movt	r0, #20
  133dd0:	ebff3ccf 	bl	103114 <rt_kprintf>
  133dd4:	e3001297 	movw	r1, #663	; 0x297
  133dd8:	e3090950 	movw	r0, #39248	; 0x9950
  133ddc:	e3400014 	movt	r0, #20
  133de0:	ebff5cbe 	bl	10b0e0 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133de4:	e51b2008 	ldr	r2, [fp, #-8]
  133de8:	e51b3010 	ldr	r3, [fp, #-16]
  133dec:	e1520003 	cmp	r2, r3
  133df0:	0a000006 	beq	133e10 <ipfrag_free_pbuf_custom+0x6c>
  133df4:	e3090ac8 	movw	r0, #39624	; 0x9ac8
  133df8:	e3400014 	movt	r0, #20
  133dfc:	ebff3cc4 	bl	103114 <rt_kprintf>
  133e00:	e3a01fa6 	mov	r1, #664	; 0x298
  133e04:	e3090950 	movw	r0, #39248	; 0x9950
  133e08:	e3400014 	movt	r0, #20
  133e0c:	ebff5cb3 	bl	10b0e0 <sys_arch_assert>
  if (pcr->original != NULL) {
  133e10:	e51b3008 	ldr	r3, [fp, #-8]
  133e14:	e5933014 	ldr	r3, [r3, #20]
  133e18:	e3530000 	cmp	r3, #0
  133e1c:	0a000003 	beq	133e30 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  133e20:	e51b3008 	ldr	r3, [fp, #-8]
  133e24:	e5933014 	ldr	r3, [r3, #20]
  133e28:	e1a00003 	mov	r0, r3
  133e2c:	ebff9c1b 	bl	11aea0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  133e30:	e51b0008 	ldr	r0, [fp, #-8]
  133e34:	ebffffc6 	bl	133d54 <ip_frag_free_pbuf_custom_ref>
}
  133e38:	e320f000 	nop	{0}
  133e3c:	e24bd004 	sub	sp, fp, #4
  133e40:	e8bd8800 	pop	{fp, pc}

00133e44 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  133e44:	e92d4800 	push	{fp, lr}
  133e48:	e28db004 	add	fp, sp, #4
  133e4c:	e24dd048 	sub	sp, sp, #72	; 0x48
  133e50:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133e54:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133e58:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133e5c:	e3a03000 	mov	r3, #0
  133e60:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133e64:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133e68:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133e6c:	e2433014 	sub	r3, r3, #20
  133e70:	e2832007 	add	r2, r3, #7
  133e74:	e3530000 	cmp	r3, #0
  133e78:	b1a03002 	movlt	r3, r2
  133e7c:	a1a03003 	movge	r3, r3
  133e80:	e1a031c3 	asr	r3, r3, #3
  133e84:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133e88:	e3a03014 	mov	r3, #20
  133e8c:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133e90:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133e94:	e5933004 	ldr	r3, [r3, #4]
  133e98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133e9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133ea0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133ea4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133ea8:	e5d33000 	ldrb	r3, [r3]
  133eac:	e203300f 	and	r3, r3, #15
  133eb0:	e1a03103 	lsl	r3, r3, #2
  133eb4:	e3530014 	cmp	r3, #20
  133eb8:	0a000008 	beq	133ee0 <ip4_frag+0x9c>
  133ebc:	e3090ad4 	movw	r0, #39636	; 0x9ad4
  133ec0:	e3400014 	movt	r0, #20
  133ec4:	ebff3c92 	bl	103114 <rt_kprintf>
  133ec8:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133ecc:	e3090950 	movw	r0, #39248	; 0x9950
  133ed0:	e3400014 	movt	r0, #20
  133ed4:	ebff5c81 	bl	10b0e0 <sys_arch_assert>
  133ed8:	e3e03005 	mvn	r3, #5
  133edc:	ea0000ed 	b	134298 <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133ee0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133ee4:	e1d330b6 	ldrh	r3, [r3, #6]
  133ee8:	e6ff3073 	uxth	r3, r3
  133eec:	e1a00003 	mov	r0, r3
  133ef0:	ebff89b3 	bl	1165c4 <lwip_htons>
  133ef4:	e1a03000 	mov	r3, r0
  133ef8:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133efc:	e15b31b0 	ldrh	r3, [fp, #-16]
  133f00:	e7ec3053 	ubfx	r3, r3, #0, #13
  133f04:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133f08:	e15b31b0 	ldrh	r3, [fp, #-16]
  133f0c:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133f10:	e3530000 	cmp	r3, #0
  133f14:	0a000008 	beq	133f3c <ip4_frag+0xf8>
  133f18:	e3090afc 	movw	r0, #39676	; 0x9afc
  133f1c:	e3400014 	movt	r0, #20
  133f20:	ebff3c7b 	bl	103114 <rt_kprintf>
  133f24:	e30012c5 	movw	r1, #709	; 0x2c5
  133f28:	e3090950 	movw	r0, #39248	; 0x9950
  133f2c:	e3400014 	movt	r0, #20
  133f30:	ebff5c6a 	bl	10b0e0 <sys_arch_assert>
  133f34:	e3e03005 	mvn	r3, #5
  133f38:	ea0000d6 	b	134298 <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133f3c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133f40:	e1d330b8 	ldrh	r3, [r3, #8]
  133f44:	e2433014 	sub	r3, r3, #20
  133f48:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133f4c:	ea0000bc 	b	134244 <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133f50:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f54:	e1a02183 	lsl	r2, r3, #3
  133f58:	e15b30ba 	ldrh	r3, [fp, #-10]
  133f5c:	e1520003 	cmp	r2, r3
  133f60:	b1a03002 	movlt	r3, r2
  133f64:	a1a03003 	movge	r3, r3
  133f68:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133f6c:	e3a02000 	mov	r2, #0
  133f70:	e3a01014 	mov	r1, #20
  133f74:	e3a00002 	mov	r0, #2
  133f78:	ebff98c1 	bl	11a284 <pbuf_alloc>
  133f7c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133f80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133f84:	e3530000 	cmp	r3, #0
  133f88:	0a0000b9 	beq	134274 <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133f8c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133f90:	e1d330ba 	ldrh	r3, [r3, #10]
  133f94:	e3530013 	cmp	r3, #19
  133f98:	8a000006 	bhi	133fb8 <ip4_frag+0x174>
  133f9c:	e3090b18 	movw	r0, #39704	; 0x9b18
  133fa0:	e3400014 	movt	r0, #20
  133fa4:	ebff3c5a 	bl	103114 <rt_kprintf>
  133fa8:	e3a01fba 	mov	r1, #744	; 0x2e8
  133fac:	e3090950 	movw	r0, #39248	; 0x9950
  133fb0:	e3400014 	movt	r0, #20
  133fb4:	ebff5c49 	bl	10b0e0 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133fb8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133fbc:	e5933004 	ldr	r3, [r3, #4]
  133fc0:	e3a02014 	mov	r2, #20
  133fc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133fc8:	e1a00003 	mov	r0, r3
  133fcc:	eb00336c 	bl	140d84 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133fd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133fd4:	e5933004 	ldr	r3, [r3, #4]
  133fd8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133fdc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133fe0:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133fe4:	ea000049 	b	134110 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133fe8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133fec:	e1d320ba 	ldrh	r2, [r3, #10]
  133ff0:	e15b30be 	ldrh	r3, [fp, #-14]
  133ff4:	e0423003 	sub	r3, r2, r3
  133ff8:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  133ffc:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  134000:	e15b30b8 	ldrh	r3, [fp, #-8]
  134004:	e1520003 	cmp	r2, r3
  134008:	31a03002 	movcc	r3, r2
  13400c:	21a03003 	movcs	r3, r3
  134010:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  134014:	e15b30b6 	ldrh	r3, [fp, #-6]
  134018:	e3530000 	cmp	r3, #0
  13401c:	1a000005 	bne	134038 <ip4_frag+0x1f4>
        poff = 0;
  134020:	e3a03000 	mov	r3, #0
  134024:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  134028:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  13402c:	e5933000 	ldr	r3, [r3]
  134030:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  134034:	ea000035 	b	134110 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  134038:	ebffff3b 	bl	133d2c <ip_frag_alloc_pbuf_custom_ref>
  13403c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  134040:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134044:	e3530000 	cmp	r3, #0
  134048:	1a000002 	bne	134058 <ip4_frag+0x214>
        pbuf_free(rambuf);
  13404c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134050:	ebff9b92 	bl	11aea0 <pbuf_free>
        goto memerr;
  134054:	ea000087 	b	134278 <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  134058:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  13405c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134060:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  134064:	e15b30be 	ldrh	r3, [fp, #-14]
  134068:	e0823003 	add	r3, r2, r3
  13406c:	e15b10b6 	ldrh	r1, [fp, #-6]
  134070:	e15b20b6 	ldrh	r2, [fp, #-6]
  134074:	e58d2004 	str	r2, [sp, #4]
  134078:	e58d3000 	str	r3, [sp]
  13407c:	e1a03000 	mov	r3, r0
  134080:	e3a02002 	mov	r2, #2
  134084:	e3a00004 	mov	r0, #4
  134088:	ebff99e2 	bl	11a818 <pbuf_alloced_custom>
  13408c:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  134090:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  134094:	e3530000 	cmp	r3, #0
  134098:	1a000004 	bne	1340b0 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  13409c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1340a0:	ebffff2b 	bl	133d54 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  1340a4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1340a8:	ebff9b7c 	bl	11aea0 <pbuf_free>
        goto memerr;
  1340ac:	ea000071 	b	134278 <ip4_frag+0x434>
      }
      pbuf_ref(p);
  1340b0:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  1340b4:	ebff9c13 	bl	11b108 <pbuf_ref>
      pcr->original = p;
  1340b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1340bc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1340c0:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  1340c4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1340c8:	e3033da4 	movw	r3, #15780	; 0x3da4
  1340cc:	e3403013 	movt	r3, #19
  1340d0:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  1340d4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1340d8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1340dc:	ebff9c26 	bl	11b17c <pbuf_cat>
      left_to_copy -= newpbuflen;
  1340e0:	e15b20b8 	ldrh	r2, [fp, #-8]
  1340e4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1340e8:	e0423003 	sub	r3, r2, r3
  1340ec:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  1340f0:	e15b30b8 	ldrh	r3, [fp, #-8]
  1340f4:	e3530000 	cmp	r3, #0
  1340f8:	0a000004 	beq	134110 <ip4_frag+0x2cc>
        poff = 0;
  1340fc:	e3a03000 	mov	r3, #0
  134100:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  134104:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134108:	e5933000 	ldr	r3, [r3]
  13410c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  134110:	e15b30b8 	ldrh	r3, [fp, #-8]
  134114:	e3530000 	cmp	r3, #0
  134118:	1affffb2 	bne	133fe8 <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  13411c:	e15b20be 	ldrh	r2, [fp, #-14]
  134120:	e15b30b6 	ldrh	r3, [fp, #-6]
  134124:	e0823003 	add	r3, r2, r3
  134128:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  13412c:	e15b20ba 	ldrh	r2, [fp, #-10]
  134130:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  134134:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  134138:	e2433014 	sub	r3, r3, #20
  13413c:	e1520003 	cmp	r2, r3
  134140:	d3a03001 	movle	r3, #1
  134144:	c3a03000 	movgt	r3, #0
  134148:	e6ef3073 	uxtb	r3, r3
  13414c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  134150:	e15b30bc 	ldrh	r3, [fp, #-12]
  134154:	e7ec3053 	ubfx	r3, r3, #0, #13
  134158:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  13415c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134160:	e3530000 	cmp	r3, #0
  134164:	1a000002 	bne	134174 <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  134168:	e15b31b0 	ldrh	r3, [fp, #-16]
  13416c:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  134170:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  134174:	e15b31b0 	ldrh	r3, [fp, #-16]
  134178:	e1a00003 	mov	r0, r3
  13417c:	ebff8910 	bl	1165c4 <lwip_htons>
  134180:	e1a03000 	mov	r3, r0
  134184:	e1a02003 	mov	r2, r3
  134188:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13418c:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  134190:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  134194:	e2833014 	add	r3, r3, #20
  134198:	e6ff3073 	uxth	r3, r3
  13419c:	e1a00003 	mov	r0, r3
  1341a0:	ebff8907 	bl	1165c4 <lwip_htons>
  1341a4:	e1a03000 	mov	r3, r0
  1341a8:	e1a02003 	mov	r2, r3
  1341ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341b0:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  1341b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341b8:	e3a02000 	mov	r2, #0
  1341bc:	e5c3200a 	strb	r2, [r3, #10]
  1341c0:	e3a02000 	mov	r2, #0
  1341c4:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  1341c8:	e3a01014 	mov	r1, #20
  1341cc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1341d0:	ebff920a 	bl	118a00 <inet_chksum>
  1341d4:	e1a03000 	mov	r3, r0
  1341d8:	e1a02003 	mov	r2, r3
  1341dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341e0:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  1341e4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1341e8:	e5933014 	ldr	r3, [r3, #20]
  1341ec:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  1341f0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1341f4:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  1341f8:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  1341fc:	e30c3a50 	movw	r3, #51792	; 0xca50
  134200:	e3403015 	movt	r3, #21
  134204:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  134208:	e2833001 	add	r3, r3, #1
  13420c:	e6ff2073 	uxth	r2, r3
  134210:	e30c3a50 	movw	r3, #51792	; 0xca50
  134214:	e3403015 	movt	r3, #21
  134218:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  13421c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134220:	ebff9b1e 	bl	11aea0 <pbuf_free>
    left -= fragsize;
  134224:	e15b20ba 	ldrh	r2, [fp, #-10]
  134228:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  13422c:	e0423003 	sub	r3, r2, r3
  134230:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  134234:	e15b20bc 	ldrh	r2, [fp, #-12]
  134238:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  13423c:	e0823003 	add	r3, r2, r3
  134240:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  134244:	e15b30ba 	ldrh	r3, [fp, #-10]
  134248:	e3530000 	cmp	r3, #0
  13424c:	1affff3f 	bne	133f50 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  134250:	e30c3a50 	movw	r3, #51792	; 0xca50
  134254:	e3403015 	movt	r3, #21
  134258:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  13425c:	e2832001 	add	r2, r3, #1
  134260:	e30c3a50 	movw	r3, #51792	; 0xca50
  134264:	e3403015 	movt	r3, #21
  134268:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  13426c:	e3a03000 	mov	r3, #0
  134270:	ea000008 	b	134298 <ip4_frag+0x454>
      goto memerr;
  134274:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  134278:	e30c3a50 	movw	r3, #51792	; 0xca50
  13427c:	e3403015 	movt	r3, #21
  134280:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  134284:	e2832001 	add	r2, r3, #1
  134288:	e30c3a50 	movw	r3, #51792	; 0xca50
  13428c:	e3403015 	movt	r3, #21
  134290:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  134294:	e3e03000 	mvn	r3, #0
}
  134298:	e1a00003 	mov	r0, r3
  13429c:	e24bd004 	sub	sp, fp, #4
  1342a0:	e8bd8800 	pop	{fp, pc}

001342a4 <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  1342a4:	e92d4800 	push	{fp, lr}
  1342a8:	e28db004 	add	fp, sp, #4
  1342ac:	e24dd010 	sub	sp, sp, #16
  1342b0:	e50b0010 	str	r0, [fp, #-16]
  1342b4:	e1a03001 	mov	r3, r1
  1342b8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  1342bc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1342c0:	e2433008 	sub	r3, r3, #8
  1342c4:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  1342c8:	e51b3010 	ldr	r3, [fp, #-16]
  1342cc:	e3a02008 	mov	r2, #8
  1342d0:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  1342d4:	e51b3010 	ldr	r3, [fp, #-16]
  1342d8:	e3a02000 	mov	r2, #0
  1342dc:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  1342e0:	e51b3010 	ldr	r3, [fp, #-16]
  1342e4:	e3a02000 	mov	r2, #0
  1342e8:	e5c32002 	strb	r2, [r3, #2]
  1342ec:	e3a02000 	mov	r2, #0
  1342f0:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  1342f4:	e51b2010 	ldr	r2, [fp, #-16]
  1342f8:	e3a03000 	mov	r3, #0
  1342fc:	e1e03003 	mvn	r3, r3
  134300:	e2033050 	and	r3, r3, #80	; 0x50
  134304:	e1e03003 	mvn	r3, r3
  134308:	e5c23004 	strb	r3, [r2, #4]
  13430c:	e3a03000 	mov	r3, #0
  134310:	e1e03003 	mvn	r3, r3
  134314:	e2033050 	and	r3, r3, #80	; 0x50
  134318:	e1e03003 	mvn	r3, r3
  13431c:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  134320:	e30e3c1a 	movw	r3, #60442	; 0xec1a
  134324:	e3403014 	movt	r3, #20
  134328:	e1d330b0 	ldrh	r3, [r3]
  13432c:	e2833001 	add	r3, r3, #1
  134330:	e6ff2073 	uxth	r2, r3
  134334:	e30e3c1a 	movw	r3, #60442	; 0xec1a
  134338:	e3403014 	movt	r3, #20
  13433c:	e1c320b0 	strh	r2, [r3]
  134340:	e30e3c1a 	movw	r3, #60442	; 0xec1a
  134344:	e3403014 	movt	r3, #20
  134348:	e1d330b0 	ldrh	r3, [r3]
  13434c:	e1a00003 	mov	r0, r3
  134350:	ebff889b 	bl	1165c4 <lwip_htons>
  134354:	e1a03000 	mov	r3, r0
  134358:	e1a02003 	mov	r2, r3
  13435c:	e51b3010 	ldr	r3, [fp, #-16]
  134360:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  134364:	e3a03000 	mov	r3, #0
  134368:	e50b3008 	str	r3, [fp, #-8]
  13436c:	ea000009 	b	134398 <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  134370:	e51b3008 	ldr	r3, [fp, #-8]
  134374:	e2833008 	add	r3, r3, #8
  134378:	e51b2010 	ldr	r2, [fp, #-16]
  13437c:	e0823003 	add	r3, r2, r3
  134380:	e51b2008 	ldr	r2, [fp, #-8]
  134384:	e6ef2072 	uxtb	r2, r2
  134388:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  13438c:	e51b3008 	ldr	r3, [fp, #-8]
  134390:	e2833001 	add	r3, r3, #1
  134394:	e50b3008 	str	r3, [fp, #-8]
  134398:	e51b2008 	ldr	r2, [fp, #-8]
  13439c:	e51b300c 	ldr	r3, [fp, #-12]
  1343a0:	e1520003 	cmp	r2, r3
  1343a4:	3afffff1 	bcc	134370 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  1343a8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1343ac:	e1a01003 	mov	r1, r3
  1343b0:	e51b0010 	ldr	r0, [fp, #-16]
  1343b4:	ebff9191 	bl	118a00 <inet_chksum>
  1343b8:	e1a03000 	mov	r3, r0
  1343bc:	e1a02003 	mov	r2, r3
  1343c0:	e51b3010 	ldr	r3, [fp, #-16]
  1343c4:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  1343c8:	e320f000 	nop	{0}
  1343cc:	e24bd004 	sub	sp, fp, #4
  1343d0:	e8bd8800 	pop	{fp, pc}

001343d4 <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  1343d4:	e92d4800 	push	{fp, lr}
  1343d8:	e28db004 	add	fp, sp, #4
  1343dc:	e24dd038 	sub	sp, sp, #56	; 0x38
  1343e0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1343e4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1343e8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  1343ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1343f0:	e2833008 	add	r3, r3, #8
  1343f4:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  1343f8:	e51b3008 	ldr	r3, [fp, #-8]
  1343fc:	e3530801 	cmp	r3, #65536	; 0x10000
  134400:	ba000006 	blt	134420 <lwip_ping_send+0x4c>
  134404:	e3090b38 	movw	r0, #39736	; 0x9b38
  134408:	e3400014 	movt	r0, #20
  13440c:	ebff3b40 	bl	103114 <rt_kprintf>
  134410:	e3a01054 	mov	r1, #84	; 0x54
  134414:	e3090b50 	movw	r0, #39760	; 0x9b50
  134418:	e3400014 	movt	r0, #20
  13441c:	ebff5b2f 	bl	10b0e0 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  134420:	e51b3008 	ldr	r3, [fp, #-8]
  134424:	e1a00003 	mov	r0, r3
  134428:	ebff3ad9 	bl	102f94 <rt_malloc>
  13442c:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134430:	e51b300c 	ldr	r3, [fp, #-12]
  134434:	e3530000 	cmp	r3, #0
  134438:	1a000001 	bne	134444 <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  13443c:	e3e03000 	mvn	r3, #0
  134440:	ea00001e 	b	1344c0 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  134444:	e51b3008 	ldr	r3, [fp, #-8]
  134448:	e6ff3073 	uxth	r3, r3
  13444c:	e1a01003 	mov	r1, r3
  134450:	e51b000c 	ldr	r0, [fp, #-12]
  134454:	ebffff92 	bl	1342a4 <ping_prepare_echo>

    to.sin_len = sizeof(to);
  134458:	e3a03010 	mov	r3, #16
  13445c:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  134460:	e3a03002 	mov	r3, #2
  134464:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  134468:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13446c:	e5933000 	ldr	r3, [r3]
  134470:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  134474:	e51b2008 	ldr	r2, [fp, #-8]
  134478:	e3a03010 	mov	r3, #16
  13447c:	e58d3004 	str	r3, [sp, #4]
  134480:	e24b3020 	sub	r3, fp, #32
  134484:	e58d3000 	str	r3, [sp]
  134488:	e3a03000 	mov	r3, #0
  13448c:	e51b100c 	ldr	r1, [fp, #-12]
  134490:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134494:	ebff797a 	bl	112a84 <lwip_sendto>
  134498:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  13449c:	e51b000c 	ldr	r0, [fp, #-12]
  1344a0:	ebff3ac5 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  1344a4:	e51b2010 	ldr	r2, [fp, #-16]
  1344a8:	e51b3008 	ldr	r3, [fp, #-8]
  1344ac:	e1520003 	cmp	r2, r3
  1344b0:	1a000001 	bne	1344bc <lwip_ping_send+0xe8>
  1344b4:	e3a03000 	mov	r3, #0
  1344b8:	ea000000 	b	1344c0 <lwip_ping_send+0xec>
  1344bc:	e3e03005 	mvn	r3, #5
}
  1344c0:	e1a00003 	mov	r0, r3
  1344c4:	e24bd004 	sub	sp, fp, #4
  1344c8:	e8bd8800 	pop	{fp, pc}

001344cc <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  1344cc:	e92d4810 	push	{r4, fp, lr}
  1344d0:	e28db008 	add	fp, sp, #8
  1344d4:	e24dd074 	sub	sp, sp, #116	; 0x74
  1344d8:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  1344dc:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  1344e0:	e3a03010 	mov	r3, #16
  1344e4:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1344e8:	ea000024 	b	134580 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  1344ec:	e51b3010 	ldr	r3, [fp, #-16]
  1344f0:	e353001b 	cmp	r3, #27
  1344f4:	da000021 	ble	134580 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  1344f8:	e24b3058 	sub	r3, fp, #88	; 0x58
  1344fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  134500:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134504:	e5d33000 	ldrb	r3, [r3]
  134508:	e203300f 	and	r3, r3, #15
  13450c:	e1a03103 	lsl	r3, r3, #2
  134510:	e1a02003 	mov	r2, r3
  134514:	e24b3058 	sub	r3, fp, #88	; 0x58
  134518:	e0833002 	add	r3, r3, r2
  13451c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  134520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134524:	e1d330b4 	ldrh	r3, [r3, #4]
  134528:	e6ff3073 	uxth	r3, r3
  13452c:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134530:	e1530002 	cmp	r3, r2
  134534:	1a000011 	bne	134580 <lwip_ping_recv+0xb4>
  134538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13453c:	e1d330b6 	ldrh	r3, [r3, #6]
  134540:	e6ff4073 	uxth	r4, r3
  134544:	e30e3c1a 	movw	r3, #60442	; 0xec1a
  134548:	e3403014 	movt	r3, #20
  13454c:	e1d330b0 	ldrh	r3, [r3]
  134550:	e1a00003 	mov	r0, r3
  134554:	ebff881a 	bl	1165c4 <lwip_htons>
  134558:	e1a03000 	mov	r3, r0
  13455c:	e1540003 	cmp	r4, r3
  134560:	1a000006 	bne	134580 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  134564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134568:	e5d33008 	ldrb	r3, [r3, #8]
  13456c:	e1a02003 	mov	r2, r3
  134570:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  134574:	e5832000 	str	r2, [r3]
                return len;
  134578:	e51b3010 	ldr	r3, [fp, #-16]
  13457c:	ea00000d 	b	1345b8 <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134580:	e24b1058 	sub	r1, fp, #88	; 0x58
  134584:	e24b305c 	sub	r3, fp, #92	; 0x5c
  134588:	e58d3004 	str	r3, [sp, #4]
  13458c:	e24b306c 	sub	r3, fp, #108	; 0x6c
  134590:	e58d3000 	str	r3, [sp]
  134594:	e3a03000 	mov	r3, #0
  134598:	e3a02040 	mov	r2, #64	; 0x40
  13459c:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  1345a0:	ebff75cc 	bl	111cd8 <lwip_recvfrom>
  1345a4:	e50b0010 	str	r0, [fp, #-16]
  1345a8:	e51b3010 	ldr	r3, [fp, #-16]
  1345ac:	e3530000 	cmp	r3, #0
  1345b0:	caffffcd 	bgt	1344ec <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  1345b4:	e51b3010 	ldr	r3, [fp, #-16]
}
  1345b8:	e1a00003 	mov	r0, r3
  1345bc:	e24bd008 	sub	sp, fp, #8
  1345c0:	e8bd8810 	pop	{r4, fp, pc}

001345c4 <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  1345c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1345c8:	e28db000 	add	fp, sp, #0
  1345cc:	e24dd00c 	sub	sp, sp, #12
  1345d0:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1345d4:	e51b3008 	ldr	r3, [fp, #-8]
  1345d8:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1345dc:	e5832010 	str	r2, [r3, #16]
}
  1345e0:	e320f000 	nop	{0}
  1345e4:	e28bd000 	add	sp, fp, #0
  1345e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1345ec:	e12fff1e 	bx	lr

001345f0 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  1345f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1345f4:	e28db000 	add	fp, sp, #0
  1345f8:	e24dd00c 	sub	sp, sp, #12
  1345fc:	e50b0008 	str	r0, [fp, #-8]
  134600:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  134604:	e51b3008 	ldr	r3, [fp, #-8]
  134608:	e5932008 	ldr	r2, [r3, #8]
  13460c:	e51b300c 	ldr	r3, [fp, #-12]
  134610:	e1822003 	orr	r2, r2, r3
  134614:	e51b3008 	ldr	r3, [fp, #-8]
  134618:	e5832008 	str	r2, [r3, #8]
}
  13461c:	e320f000 	nop	{0}
  134620:	e28bd000 	add	sp, fp, #0
  134624:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134628:	e12fff1e 	bx	lr

0013462c <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  13462c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134630:	e28db000 	add	fp, sp, #0
  134634:	e24dd00c 	sub	sp, sp, #12
  134638:	e50b0008 	str	r0, [fp, #-8]
  13463c:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  134640:	e51b3008 	ldr	r3, [fp, #-8]
  134644:	e5932008 	ldr	r2, [r3, #8]
  134648:	e51b300c 	ldr	r3, [fp, #-12]
  13464c:	e1e03003 	mvn	r3, r3
  134650:	e0022003 	and	r2, r2, r3
  134654:	e51b3008 	ldr	r3, [fp, #-8]
  134658:	e5832008 	str	r2, [r3, #8]
}
  13465c:	e320f000 	nop	{0}
  134660:	e28bd000 	add	sp, fp, #0
  134664:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134668:	e12fff1e 	bx	lr

0013466c <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  13466c:	e92d4800 	push	{fp, lr}
  134670:	e28db004 	add	fp, sp, #4
  134674:	e24dd008 	sub	sp, sp, #8
  134678:	e50b0008 	str	r0, [fp, #-8]
  13467c:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  134680:	e51b300c 	ldr	r3, [fp, #-12]
  134684:	e3530000 	cmp	r3, #0
  134688:	0a000013 	beq	1346dc <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  13468c:	e3090b94 	movw	r0, #39828	; 0x9b94
  134690:	e3400014 	movt	r0, #20
  134694:	ebff3a9e 	bl	103114 <rt_kprintf>
  134698:	e51b3008 	ldr	r3, [fp, #-8]
  13469c:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1346a0:	e1a01003 	mov	r1, r3
  1346a4:	e3090ba8 	movw	r0, #39848	; 0x9ba8
  1346a8:	e3400014 	movt	r0, #20
  1346ac:	ebff3a98 	bl	103114 <rt_kprintf>
  1346b0:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1346b4:	e3400014 	movt	r0, #20
  1346b8:	ebff3a95 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  1346bc:	e51b3008 	ldr	r3, [fp, #-8]
  1346c0:	e3a01001 	mov	r1, #1
  1346c4:	e1a00003 	mov	r0, r3
  1346c8:	ebffd532 	bl	129b98 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  1346cc:	e51b3008 	ldr	r3, [fp, #-8]
  1346d0:	e3a02001 	mov	r2, #1
  1346d4:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  1346d8:	ea000012 	b	134728 <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  1346dc:	e3090b94 	movw	r0, #39828	; 0x9b94
  1346e0:	e3400014 	movt	r0, #20
  1346e4:	ebff3a8a 	bl	103114 <rt_kprintf>
  1346e8:	e51b3008 	ldr	r3, [fp, #-8]
  1346ec:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1346f0:	e1a01003 	mov	r1, r3
  1346f4:	e3090bc0 	movw	r0, #39872	; 0x9bc0
  1346f8:	e3400014 	movt	r0, #20
  1346fc:	ebff3a84 	bl	103114 <rt_kprintf>
  134700:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  134704:	e3400014 	movt	r0, #20
  134708:	ebff3a81 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  13470c:	e51b3008 	ldr	r3, [fp, #-8]
  134710:	e3a01000 	mov	r1, #0
  134714:	e1a00003 	mov	r0, r3
  134718:	ebffd51e 	bl	129b98 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  13471c:	e51b3008 	ldr	r3, [fp, #-8]
  134720:	e3a02000 	mov	r2, #0
  134724:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  134728:	e320f000 	nop	{0}
  13472c:	e24bd004 	sub	sp, fp, #4
  134730:	e8bd8800 	pop	{fp, pc}

00134734 <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  134734:	e92d4800 	push	{fp, lr}
  134738:	e28db004 	add	fp, sp, #4
  13473c:	e24dd018 	sub	sp, sp, #24
  134740:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134744:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  134748:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13474c:	e2833a02 	add	r3, r3, #8192	; 0x2000
  134750:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  134754:	e51b0008 	ldr	r0, [fp, #-8]
  134758:	eb0022f9 	bl	13d344 <malloc>
  13475c:	e1a03000 	mov	r3, r0
  134760:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  134764:	e51b2008 	ldr	r2, [fp, #-8]
  134768:	e3a01000 	mov	r1, #0
  13476c:	e51b000c 	ldr	r0, [fp, #-12]
  134770:	ebff3ad4 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  134774:	e3003fff 	movw	r3, #4095	; 0xfff
  134778:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  13477c:	e51b300c 	ldr	r3, [fp, #-12]
  134780:	e2833a01 	add	r3, r3, #4096	; 0x1000
  134784:	e1a02003 	mov	r2, r3
  134788:	e51b3010 	ldr	r3, [fp, #-16]
  13478c:	e1e03003 	mvn	r3, r3
  134790:	e0033002 	and	r3, r3, r2
  134794:	e1a02003 	mov	r2, r3
  134798:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13479c:	e5832000 	str	r2, [r3]

    return;
  1347a0:	e320f000 	nop	{0}
}
  1347a4:	e24bd004 	sub	sp, fp, #4
  1347a8:	e8bd8800 	pop	{fp, pc}

001347ac <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  1347ac:	e92d4800 	push	{fp, lr}
  1347b0:	e28db004 	add	fp, sp, #4
  1347b4:	e24dd030 	sub	sp, sp, #48	; 0x30
  1347b8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  1347bc:	e3a03000 	mov	r3, #0
  1347c0:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  1347c4:	e3a03000 	mov	r3, #0
  1347c8:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  1347cc:	e3a03000 	mov	r3, #0
  1347d0:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  1347d4:	e3a03000 	mov	r3, #0
  1347d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1347dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347e0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1347e4:	e3530701 	cmp	r3, #262144	; 0x40000
  1347e8:	8a000003 	bhi	1347fc <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  1347ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347f0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1347f4:	e3530701 	cmp	r3, #262144	; 0x40000
  1347f8:	9a00000a 	bls	134828 <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  1347fc:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  134800:	e3400014 	movt	r0, #20
  134804:	ebff3a42 	bl	103114 <rt_kprintf>
  134808:	e3090be8 	movw	r0, #39912	; 0x9be8
  13480c:	e3400014 	movt	r0, #20
  134810:	ebff3a3f 	bl	103114 <rt_kprintf>
  134814:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  134818:	e3400014 	movt	r0, #20
  13481c:	ebff3a3c 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134820:	e3a03001 	mov	r3, #1
  134824:	ea000093 	b	134a78 <enet_buffer_init+0x2cc>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  134828:	e3a03701 	mov	r3, #262144	; 0x40000
  13482c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134830:	e3a03701 	mov	r3, #262144	; 0x40000
  134834:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  134838:	e3a03a01 	mov	r3, #4096	; 0x1000
  13483c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  134840:	e3a03a01 	mov	r3, #4096	; 0x1000
  134844:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  134848:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13484c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134850:	e0822003 	add	r2, r2, r3
  134854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134858:	e0823003 	add	r3, r2, r3
  13485c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134860:	e0823003 	add	r3, r2, r3
  134864:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  134868:	e3a03000 	mov	r3, #0
  13486c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  134870:	e24b302c 	sub	r3, fp, #44	; 0x2c
  134874:	e1a01003 	mov	r1, r3
  134878:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13487c:	ebffffac 	bl	134734 <page_alloc>
    if (!mem_align)
  134880:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134884:	e3530000 	cmp	r3, #0
  134888:	1a000001 	bne	134894 <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  13488c:	e3a03001 	mov	r3, #1
  134890:	ea000078 	b	134a78 <enet_buffer_init+0x2cc>
    }
    
    rx_buff_addr = mem_align;
  134894:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134898:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  13489c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1348a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1348a4:	e0823003 	add	r3, r2, r3
  1348a8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  1348ac:	e51b300c 	ldr	r3, [fp, #-12]
  1348b0:	e3530000 	cmp	r3, #0
  1348b4:	1a00000a 	bne	1348e4 <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  1348b8:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  1348bc:	e3400014 	movt	r0, #20
  1348c0:	ebff3a13 	bl	103114 <rt_kprintf>
  1348c4:	e3090c14 	movw	r0, #39956	; 0x9c14
  1348c8:	e3400014 	movt	r0, #20
  1348cc:	ebff3a10 	bl	103114 <rt_kprintf>
  1348d0:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1348d4:	e3400014 	movt	r0, #20
  1348d8:	ebff3a0d 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1348dc:	e3a03001 	mov	r3, #1
  1348e0:	ea000064 	b	134a78 <enet_buffer_init+0x2cc>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  1348e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1348e8:	e51b200c 	ldr	r2, [fp, #-12]
  1348ec:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  1348f0:	e51b000c 	ldr	r0, [fp, #-12]
  1348f4:	ebff3ec1 	bl	104400 <ueth_v2p>
  1348f8:	e1a02000 	mov	r2, r0
  1348fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134900:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  134904:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134908:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  13490c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134910:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134914:	e0823003 	add	r3, r2, r3
  134918:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  13491c:	e51b3008 	ldr	r3, [fp, #-8]
  134920:	e3530000 	cmp	r3, #0
  134924:	1a00000a 	bne	134954 <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  134928:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  13492c:	e3400014 	movt	r0, #20
  134930:	ebff39f7 	bl	103114 <rt_kprintf>
  134934:	e3090c38 	movw	r0, #39992	; 0x9c38
  134938:	e3400014 	movt	r0, #20
  13493c:	ebff39f4 	bl	103114 <rt_kprintf>
  134940:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  134944:	e3400014 	movt	r0, #20
  134948:	ebff39f1 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  13494c:	e3a03001 	mov	r3, #1
  134950:	ea000048 	b	134a78 <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  134954:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134958:	e51b2008 	ldr	r2, [fp, #-8]
  13495c:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  134960:	e51b0008 	ldr	r0, [fp, #-8]
  134964:	ebff3ea5 	bl	104400 <ueth_v2p>
  134968:	e1a02000 	mov	r2, r0
  13496c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134970:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  134974:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134978:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  13497c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134984:	e0823003 	add	r3, r2, r3
  134988:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  13498c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134990:	e3530000 	cmp	r3, #0
  134994:	1a00000a 	bne	1349c4 <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  134998:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  13499c:	e3400014 	movt	r0, #20
  1349a0:	ebff39db 	bl	103114 <rt_kprintf>
  1349a4:	e3090c5c 	movw	r0, #40028	; 0x9c5c
  1349a8:	e3400014 	movt	r0, #20
  1349ac:	ebff39d8 	bl	103114 <rt_kprintf>
  1349b0:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1349b4:	e3400014 	movt	r0, #20
  1349b8:	ebff39d5 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1349bc:	e3a03001 	mov	r3, #1
  1349c0:	ea00002c 	b	134a78 <enet_buffer_init+0x2cc>
    }
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  1349c4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1349c8:	ebff3e8c 	bl	104400 <ueth_v2p>
  1349cc:	e1a02000 	mov	r2, r0
  1349d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349d4:	e583201c 	str	r2, [r3, #28]
    buffConfig->rxBdStartAddrAlign = ueth_remap(buffConfig->rxPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, rx_bd_memsize);
  1349d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349dc:	e593301c 	ldr	r3, [r3, #28]
  1349e0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1349e4:	e3a01003 	mov	r1, #3
  1349e8:	e1a00003 	mov	r0, r3
  1349ec:	ebff3eb0 	bl	1044b4 <ueth_remap>
  1349f0:	e1a02000 	mov	r2, r0
  1349f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349f8:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  1349fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134a00:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  134a04:	e51b3010 	ldr	r3, [fp, #-16]
  134a08:	e3530000 	cmp	r3, #0
  134a0c:	1a00000a 	bne	134a3c <enet_buffer_init+0x290>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  134a10:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  134a14:	e3400014 	movt	r0, #20
  134a18:	ebff39bd 	bl	103114 <rt_kprintf>
  134a1c:	e3090c7c 	movw	r0, #40060	; 0x9c7c
  134a20:	e3400014 	movt	r0, #20
  134a24:	ebff39ba 	bl	103114 <rt_kprintf>
  134a28:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  134a2c:	e3400014 	movt	r0, #20
  134a30:	ebff39b7 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134a34:	e3a03001 	mov	r3, #1
  134a38:	ea00000e 	b	134a78 <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  134a3c:	e51b0010 	ldr	r0, [fp, #-16]
  134a40:	ebff3e6e 	bl	104400 <ueth_v2p>
  134a44:	e1a02000 	mov	r2, r0
  134a48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a4c:	e5832020 	str	r2, [r3, #32]
    buffConfig->txBdStartAddrAlign = ueth_remap(buffConfig->txPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, tx_bd_memsize);
  134a50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a54:	e5933020 	ldr	r3, [r3, #32]
  134a58:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134a5c:	e3a01003 	mov	r1, #3
  134a60:	e1a00003 	mov	r0, r3
  134a64:	ebff3e92 	bl	1044b4 <ueth_remap>
  134a68:	e1a02000 	mov	r2, r0
  134a6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a70:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    
    return RT_EOK;
  134a74:	e3a03000 	mov	r3, #0
}
  134a78:	e1a00003 	mov	r0, r3
  134a7c:	e24bd004 	sub	sp, fp, #4
  134a80:	e8bd8800 	pop	{fp, pc}

00134a84 <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  134a84:	e92d4800 	push	{fp, lr}
  134a88:	e28db004 	add	fp, sp, #4
  134a8c:	e24dd038 	sub	sp, sp, #56	; 0x38
  134a90:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134a94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a98:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134a9c:	e3a03000 	mov	r3, #0
  134aa0:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  134aa4:	e51b300c 	ldr	r3, [fp, #-12]
  134aa8:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134aac:	e3a02a01 	mov	r2, #4096	; 0x1000
  134ab0:	e3a01001 	mov	r1, #1
  134ab4:	e1a00003 	mov	r0, r3
  134ab8:	ebff3e7d 	bl	1044b4 <ueth_remap>
  134abc:	e1a02000 	mov	r2, r0
  134ac0:	e51b300c 	ldr	r3, [fp, #-12]
  134ac4:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ac8:	e51b300c 	ldr	r3, [fp, #-12]
  134acc:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ad0:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  134ad4:	e51b300c 	ldr	r3, [fp, #-12]
  134ad8:	e28330dc 	add	r3, r3, #220	; 0xdc
  134adc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ae0:	e51b300c 	ldr	r3, [fp, #-12]
  134ae4:	e2833c01 	add	r3, r3, #256	; 0x100
  134ae8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134aec:	e51b300c 	ldr	r3, [fp, #-12]
  134af0:	e28330a8 	add	r3, r3, #168	; 0xa8
  134af4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134af8:	e3a03000 	mov	r3, #0
  134afc:	e50b3008 	str	r3, [fp, #-8]
  134b00:	ea00000b 	b	134b34 <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  134b04:	e51b3008 	ldr	r3, [fp, #-8]
  134b08:	e3a0201c 	mov	r2, #28
  134b0c:	e0030392 	mul	r3, r2, r3
  134b10:	e2833e12 	add	r3, r3, #288	; 0x120
  134b14:	e51b200c 	ldr	r2, [fp, #-12]
  134b18:	e0823003 	add	r3, r2, r3
  134b1c:	e3a0101c 	mov	r1, #28
  134b20:	e1a00003 	mov	r0, r3
  134b24:	ebff3e96 	bl	104584 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134b28:	e51b3008 	ldr	r3, [fp, #-8]
  134b2c:	e2833001 	add	r3, r3, #1
  134b30:	e50b3008 	str	r3, [fp, #-8]
  134b34:	e51b3008 	ldr	r3, [fp, #-8]
  134b38:	e3530008 	cmp	r3, #8
  134b3c:	9afffff0 	bls	134b04 <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  134b40:	e3a02a01 	mov	r2, #4096	; 0x1000
  134b44:	e3a01001 	mov	r1, #1
  134b48:	e3a00901 	mov	r0, #16384	; 0x4000
  134b4c:	e340020e 	movt	r0, #526	; 0x20e
  134b50:	ebff3e57 	bl	1044b4 <ueth_remap>
  134b54:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  134b58:	e51b300c 	ldr	r3, [fp, #-12]
  134b5c:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134b60:	e3530001 	cmp	r3, #1
  134b64:	1a00000c 	bne	134b9c <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  134b68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b6c:	e5933004 	ldr	r3, [r3, #4]
  134b70:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  134b74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b78:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  134b7c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  134b80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b84:	e3833802 	orr	r3, r3, #131072	; 0x20000
  134b88:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134b8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b90:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134b94:	e5832004 	str	r2, [r3, #4]
  134b98:	ea00000f 	b	134bdc <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134b9c:	e51b300c 	ldr	r3, [fp, #-12]
  134ba0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134ba4:	e3530002 	cmp	r3, #2
  134ba8:	1a00000b 	bne	134bdc <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134bac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134bb0:	e5933004 	ldr	r3, [r3, #4]
  134bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134bb8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134bbc:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  134bc0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  134bc4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134bc8:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134bcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134bd4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134bd8:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134bdc:	ebff3e96 	bl	10463c <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  134be0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134be4:	eb00047c 	bl	135ddc <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  134be8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134bec:	e5933004 	ldr	r3, [r3, #4]
  134bf0:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  134bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134bf8:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  134bfc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  134c00:	ebfffee9 	bl	1347ac <enet_buffer_init>
  134c04:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  134c08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c0c:	e3530000 	cmp	r3, #0
  134c10:	0a000001 	beq	134c1c <rt_imx6ul_eth_init+0x198>
    {
        return state;
  134c14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c18:	ea000015 	b	134c74 <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134c1c:	e51b300c 	ldr	r3, [fp, #-12]
  134c20:	e2832078 	add	r2, r3, #120	; 0x78
  134c24:	e3a03d52 	mov	r3, #5248	; 0x1480
  134c28:	e34033ef 	movt	r3, #1007	; 0x3ef
  134c2c:	e58d3004 	str	r3, [sp, #4]
  134c30:	e58d2000 	str	r2, [sp]
  134c34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134c38:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134c3c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134c40:	e51b0010 	ldr	r0, [fp, #-16]
  134c44:	eb000488 	bl	135e6c <ENET_Init>
    ENET_ActiveRead(base_addr);
  134c48:	e51b0010 	ldr	r0, [fp, #-16]
  134c4c:	ebfffe5c 	bl	1345c4 <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  134c50:	e51b300c 	ldr	r3, [fp, #-12]
  134c54:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  134c58:	e1a02003 	mov	r2, r3
  134c5c:	e51b300c 	ldr	r3, [fp, #-12]
  134c60:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134c64:	e1a01003 	mov	r1, r3
  134c68:	e1a00002 	mov	r0, r2
  134c6c:	ebff3ef0 	bl	104834 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  134c70:	e3a03000 	mov	r3, #0
}
  134c74:	e1a00003 	mov	r0, r3
  134c78:	e24bd004 	sub	sp, fp, #4
  134c7c:	e8bd8800 	pop	{fp, pc}

00134c80 <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  134c80:	e92d4800 	push	{fp, lr}
  134c84:	e28db004 	add	fp, sp, #4
  134c88:	e24dd028 	sub	sp, sp, #40	; 0x28
  134c8c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  134c90:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  134c94:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134c9c:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  134ca0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134ca4:	e3530001 	cmp	r3, #1
  134ca8:	0a000000 	beq	134cb0 <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134cac:	ea000070 	b	134e74 <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134cb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134cb4:	e3530000 	cmp	r3, #0
  134cb8:	0a00006b 	beq	134e6c <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134cbc:	e3a03000 	mov	r3, #0
  134cc0:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  134cc4:	e3a02a01 	mov	r2, #4096	; 0x1000
  134cc8:	e3a01001 	mov	r1, #1
  134ccc:	e3a00903 	mov	r0, #49152	; 0xc000
  134cd0:	e340021b 	movt	r0, #539	; 0x21b
  134cd4:	ebff3df6 	bl	1044b4 <ueth_remap>
  134cd8:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134cdc:	e51b3010 	ldr	r3, [fp, #-16]
  134ce0:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  134ce4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  134ce8:	e51b3010 	ldr	r3, [fp, #-16]
  134cec:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  134cf0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  134cf4:	e3a02000 	mov	r2, #0
  134cf8:	e3a01002 	mov	r1, #2
  134cfc:	e51b0010 	ldr	r0, [fp, #-16]
  134d00:	ebff3deb 	bl	1044b4 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  134d04:	e3090b94 	movw	r0, #39828	; 0x9b94
  134d08:	e3400014 	movt	r0, #20
  134d0c:	ebff3900 	bl	103114 <rt_kprintf>
  134d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134d14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134d18:	e1a01003 	mov	r1, r3
  134d1c:	e3090c9c 	movw	r0, #40092	; 0x9c9c
  134d20:	e3400014 	movt	r0, #20
  134d24:	ebff38fa 	bl	103114 <rt_kprintf>
  134d28:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  134d2c:	e3400014 	movt	r0, #20
  134d30:	ebff38f7 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  134d34:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134d38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134d3c:	e0423003 	sub	r3, r2, r3
  134d40:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  134d44:	e3090b94 	movw	r0, #39828	; 0x9b94
  134d48:	e3400014 	movt	r0, #20
  134d4c:	ebff38f0 	bl	103114 <rt_kprintf>
  134d50:	e51b100c 	ldr	r1, [fp, #-12]
  134d54:	e3090cb0 	movw	r0, #40112	; 0x9cb0
  134d58:	e3400014 	movt	r0, #20
  134d5c:	ebff38ec 	bl	103114 <rt_kprintf>
  134d60:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  134d64:	e3400014 	movt	r0, #20
  134d68:	ebff38e9 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134d6c:	e51b3008 	ldr	r3, [fp, #-8]
  134d70:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  134d74:	e3a03902 	mov	r3, #32768	; 0x8000
  134d78:	e3403218 	movt	r3, #536	; 0x218
  134d7c:	e1520003 	cmp	r2, r3
  134d80:	1a000019 	bne	134dec <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  134d84:	e51b3008 	ldr	r3, [fp, #-8]
  134d88:	e3e02057 	mvn	r2, #87	; 0x57
  134d8c:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134d90:	e51b3008 	ldr	r3, [fp, #-8]
  134d94:	e3a0205e 	mov	r2, #94	; 0x5e
  134d98:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134d9c:	e51b3008 	ldr	r3, [fp, #-8]
  134da0:	e3a02045 	mov	r2, #69	; 0x45
  134da4:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134da8:	e51b300c 	ldr	r3, [fp, #-12]
  134dac:	e1a03823 	lsr	r3, r3, #16
  134db0:	e6ef3073 	uxtb	r3, r3
  134db4:	e203307f 	and	r3, r3, #127	; 0x7f
  134db8:	e6ef2073 	uxtb	r2, r3
  134dbc:	e51b3008 	ldr	r3, [fp, #-8]
  134dc0:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134dc4:	e51b300c 	ldr	r3, [fp, #-12]
  134dc8:	e1a03423 	lsr	r3, r3, #8
  134dcc:	e6ef2073 	uxtb	r2, r3
  134dd0:	e51b3008 	ldr	r3, [fp, #-8]
  134dd4:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134dd8:	e51b300c 	ldr	r3, [fp, #-12]
  134ddc:	e6ef2073 	uxtb	r2, r3
  134de0:	e51b3008 	ldr	r3, [fp, #-8]
  134de4:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134de8:	ea000018 	b	134e50 <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134dec:	e51b3008 	ldr	r3, [fp, #-8]
  134df0:	e3e02057 	mvn	r2, #87	; 0x57
  134df4:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134df8:	e51b3008 	ldr	r3, [fp, #-8]
  134dfc:	e3a0205e 	mov	r2, #94	; 0x5e
  134e00:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134e04:	e51b3008 	ldr	r3, [fp, #-8]
  134e08:	e3a02046 	mov	r2, #70	; 0x46
  134e0c:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  134e10:	e51b300c 	ldr	r3, [fp, #-12]
  134e14:	e1a03823 	lsr	r3, r3, #16
  134e18:	e6ef3073 	uxtb	r3, r3
  134e1c:	e203307f 	and	r3, r3, #127	; 0x7f
  134e20:	e6ef2073 	uxtb	r2, r3
  134e24:	e51b3008 	ldr	r3, [fp, #-8]
  134e28:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  134e2c:	e51b300c 	ldr	r3, [fp, #-12]
  134e30:	e1a03423 	lsr	r3, r3, #8
  134e34:	e6ef2073 	uxtb	r2, r3
  134e38:	e51b3008 	ldr	r3, [fp, #-8]
  134e3c:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134e40:	e51b300c 	ldr	r3, [fp, #-12]
  134e44:	e6ef2073 	uxtb	r2, r3
  134e48:	e51b3008 	ldr	r3, [fp, #-8]
  134e4c:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134e50:	e51b3008 	ldr	r3, [fp, #-8]
  134e54:	e2833078 	add	r3, r3, #120	; 0x78
  134e58:	e3a02006 	mov	r2, #6
  134e5c:	e1a01003 	mov	r1, r3
  134e60:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134e64:	eb002fc6 	bl	140d84 <memcpy>
        break;
  134e68:	ea000001 	b	134e74 <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134e6c:	e3e03000 	mvn	r3, #0
  134e70:	ea000000 	b	134e78 <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134e74:	e3a03000 	mov	r3, #0
}
  134e78:	e1a00003 	mov	r0, r3
  134e7c:	e24bd004 	sub	sp, fp, #4
  134e80:	e8bd8800 	pop	{fp, pc}

00134e84 <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134e84:	e92d4800 	push	{fp, lr}
  134e88:	e28db004 	add	fp, sp, #4
  134e8c:	e24dd038 	sub	sp, sp, #56	; 0x38
  134e90:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134e94:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134e98:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134e9c:	e3a03000 	mov	r3, #0
  134ea0:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134ea4:	e3a03000 	mov	r3, #0
  134ea8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134eac:	e3a03000 	mov	r3, #0
  134eb0:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134eb4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134eb8:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ebc:	e51b3010 	ldr	r3, [fp, #-16]
  134ec0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ec4:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134ec8:	e51b3010 	ldr	r3, [fp, #-16]
  134ecc:	e28330dc 	add	r3, r3, #220	; 0xdc
  134ed0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ed4:	e51b3010 	ldr	r3, [fp, #-16]
  134ed8:	e2833c01 	add	r3, r3, #256	; 0x100
  134edc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134ee0:	e51b3010 	ldr	r3, [fp, #-16]
  134ee4:	e28330a8 	add	r3, r3, #168	; 0xa8
  134ee8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134eec:	e24b301e 	sub	r3, fp, #30
  134ef0:	e58d3000 	str	r3, [sp]
  134ef4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134ef8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134efc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f00:	e51b000c 	ldr	r0, [fp, #-12]
  134f04:	eb00088e 	bl	137144 <ENET_ReadFrame>
  134f08:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134f0c:	e51b3008 	ldr	r3, [fp, #-8]
  134f10:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f14:	e1530002 	cmp	r3, r2
  134f18:	0a000002 	beq	134f28 <read_data_from_eth+0xa4>
  134f1c:	e51b3008 	ldr	r3, [fp, #-8]
  134f20:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f24:	1a00001a 	bne	134f94 <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134f28:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134f2c:	e51b000c 	ldr	r0, [fp, #-12]
  134f30:	ebfffdae 	bl	1345f0 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134f34:	e51b3008 	ldr	r3, [fp, #-8]
  134f38:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f3c:	1a00000e 	bne	134f7c <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134f40:	e51b3010 	ldr	r3, [fp, #-16]
  134f44:	e2832078 	add	r2, r3, #120	; 0x78
  134f48:	e3a03d52 	mov	r3, #5248	; 0x1480
  134f4c:	e34033ef 	movt	r3, #1007	; 0x3ef
  134f50:	e58d3004 	str	r3, [sp, #4]
  134f54:	e58d2000 	str	r2, [sp]
  134f58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134f5c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134f60:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f64:	e51b000c 	ldr	r0, [fp, #-12]
  134f68:	eb0003bf 	bl	135e6c <ENET_Init>
            ENET_ActiveRead(base_addr);
  134f6c:	e51b000c 	ldr	r0, [fp, #-12]
  134f70:	ebfffd93 	bl	1345c4 <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134f74:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134f78:	ea000009 	b	134fa4 <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134f7c:	e51b3008 	ldr	r3, [fp, #-8]
  134f80:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f84:	e1530002 	cmp	r3, r2
  134f88:	1a000001 	bne	134f94 <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134f8c:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134f90:	ea000003 	b	134fa4 <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134f94:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134f98:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134f9c:	e1c320b0 	strh	r2, [r3]
    return status;
  134fa0:	e51b3008 	ldr	r3, [fp, #-8]
}
  134fa4:	e1a00003 	mov	r0, r3
  134fa8:	e24bd004 	sub	sp, fp, #4
  134fac:	e8bd8800 	pop	{fp, pc}

00134fb0 <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134fb0:	e92d4800 	push	{fp, lr}
  134fb4:	e28db004 	add	fp, sp, #4
  134fb8:	e24dd030 	sub	sp, sp, #48	; 0x30
  134fbc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134fc0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134fc4:	e3a03000 	mov	r3, #0
  134fc8:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134fcc:	e3a03000 	mov	r3, #0
  134fd0:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134fd4:	e3a03000 	mov	r3, #0
  134fd8:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134fdc:	e3a03000 	mov	r3, #0
  134fe0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134fe4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134fe8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134fec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134ff0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134ffc:	e2833c01 	add	r3, r3, #256	; 0x100
  135000:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  135004:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135008:	e3530000 	cmp	r3, #0
  13500c:	1a000005 	bne	135028 <rt_imx6ul_eth_tx+0x78>
  135010:	e3a02e1b 	mov	r2, #432	; 0x1b0
  135014:	e3091e7c 	movw	r1, #40572	; 0x9e7c
  135018:	e3401014 	movt	r1, #20
  13501c:	e3090cd0 	movw	r0, #40144	; 0x9cd0
  135020:	e3400014 	movt	r0, #20
  135024:	ebff395b 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  135028:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13502c:	e50b3008 	str	r3, [fp, #-8]
  135030:	ea000020 	b	1350b8 <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  135034:	e51b3008 	ldr	r3, [fp, #-8]
  135038:	e5933000 	ldr	r3, [r3]
  13503c:	e3530000 	cmp	r3, #0
  135040:	1a000002 	bne	135050 <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  135044:	e3a03001 	mov	r3, #1
  135048:	e50b3010 	str	r3, [fp, #-16]
  13504c:	ea000001 	b	135058 <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  135050:	e3a03000 	mov	r3, #0
  135054:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  135058:	e51b3008 	ldr	r3, [fp, #-8]
  13505c:	e5932004 	ldr	r2, [r3, #4]
  135060:	e51b3008 	ldr	r3, [fp, #-8]
  135064:	e1d310ba 	ldrh	r1, [r3, #10]
  135068:	e51b3010 	ldr	r3, [fp, #-16]
  13506c:	e58d3000 	str	r3, [sp]
  135070:	e1a03001 	mov	r3, r1
  135074:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  135078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13507c:	eb0008fb 	bl	137470 <ENET_SendFrame>
  135080:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  135084:	e51b3008 	ldr	r3, [fp, #-8]
  135088:	e1d320ba 	ldrh	r2, [r3, #10]
  13508c:	e15b30ba 	ldrh	r3, [fp, #-10]
  135090:	e0823003 	add	r3, r2, r3
  135094:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  135098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13509c:	e3530000 	cmp	r3, #0
  1350a0:	0a000001 	beq	1350ac <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  1350a4:	e3a03001 	mov	r3, #1
  1350a8:	ea000015 	b	135104 <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  1350ac:	e51b3008 	ldr	r3, [fp, #-8]
  1350b0:	e5933000 	ldr	r3, [r3]
  1350b4:	e50b3008 	str	r3, [fp, #-8]
  1350b8:	e51b3008 	ldr	r3, [fp, #-8]
  1350bc:	e3530000 	cmp	r3, #0
  1350c0:	1affffdb 	bne	135034 <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  1350c4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350c8:	e30025ee 	movw	r2, #1518	; 0x5ee
  1350cc:	e1530002 	cmp	r3, r2
  1350d0:	9a00000a 	bls	135100 <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  1350d4:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  1350d8:	e3400014 	movt	r0, #20
  1350dc:	ebff380c 	bl	103114 <rt_kprintf>
  1350e0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350e4:	e1a01003 	mov	r1, r3
  1350e8:	e3090cd4 	movw	r0, #40148	; 0x9cd4
  1350ec:	e3400014 	movt	r0, #20
  1350f0:	ebff3807 	bl	103114 <rt_kprintf>
  1350f4:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1350f8:	e3400014 	movt	r0, #20
  1350fc:	ebff3804 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  135100:	e3a03000 	mov	r3, #0
}
  135104:	e1a00003 	mov	r0, r3
  135108:	e24bd004 	sub	sp, fp, #4
  13510c:	e8bd8800 	pop	{fp, pc}

00135110 <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  135110:	e92d4800 	push	{fp, lr}
  135114:	e28db004 	add	fp, sp, #4
  135118:	e24dd018 	sub	sp, sp, #24
  13511c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  135120:	e3a03000 	mov	r3, #0
  135124:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  135128:	e3a03000 	mov	r3, #0
  13512c:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  135130:	e30e3c20 	movw	r3, #60448	; 0xec20
  135134:	e3403014 	movt	r3, #20
  135138:	e5933000 	ldr	r3, [r3]
  13513c:	e3530000 	cmp	r3, #0
  135140:	1a00000e 	bne	135180 <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  135144:	e3a02003 	mov	r2, #3
  135148:	e30015ee 	movw	r1, #1518	; 0x5ee
  13514c:	e3a00004 	mov	r0, #4
  135150:	ebff944b 	bl	11a284 <pbuf_alloc>
  135154:	e1a02000 	mov	r2, r0
  135158:	e30e3c20 	movw	r3, #60448	; 0xec20
  13515c:	e3403014 	movt	r3, #20
  135160:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  135164:	e30e3c20 	movw	r3, #60448	; 0xec20
  135168:	e3403014 	movt	r3, #20
  13516c:	e5933000 	ldr	r3, [r3]
  135170:	e3530000 	cmp	r3, #0
  135174:	1a000001 	bne	135180 <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  135178:	e3a03000 	mov	r3, #0
  13517c:	ea00002f 	b	135240 <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  135180:	e30e3c20 	movw	r3, #60448	; 0xec20
  135184:	e3403014 	movt	r3, #20
  135188:	e5933000 	ldr	r3, [r3]
  13518c:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  135190:	e51b3008 	ldr	r3, [fp, #-8]
  135194:	e5933004 	ldr	r3, [r3, #4]
  135198:	e24b200e 	sub	r2, fp, #14
  13519c:	e1a01003 	mov	r1, r3
  1351a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1351a4:	ebffff36 	bl	134e84 <read_data_from_eth>
  1351a8:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  1351ac:	e51b300c 	ldr	r3, [fp, #-12]
  1351b0:	e3002fa2 	movw	r2, #4002	; 0xfa2
  1351b4:	e1530002 	cmp	r3, r2
  1351b8:	1a000001 	bne	1351c4 <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  1351bc:	e3a03000 	mov	r3, #0
  1351c0:	ea00001e 	b	135240 <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  1351c4:	e51b300c 	ldr	r3, [fp, #-12]
  1351c8:	e3530efa 	cmp	r3, #4000	; 0xfa0
  1351cc:	1a000001 	bne	1351d8 <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  1351d0:	e3a03000 	mov	r3, #0
  1351d4:	ea000019 	b	135240 <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  1351d8:	e15b30be 	ldrh	r3, [fp, #-14]
  1351dc:	e30025ee 	movw	r2, #1518	; 0x5ee
  1351e0:	e1530002 	cmp	r3, r2
  1351e4:	9a00000c 	bls	13521c <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  1351e8:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  1351ec:	e3400014 	movt	r0, #20
  1351f0:	ebff37c7 	bl	103114 <rt_kprintf>
  1351f4:	e15b30be 	ldrh	r3, [fp, #-14]
  1351f8:	e1a01003 	mov	r1, r3
  1351fc:	e3090d00 	movw	r0, #40192	; 0x9d00
  135200:	e3400014 	movt	r0, #20
  135204:	ebff37c2 	bl	103114 <rt_kprintf>
  135208:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  13520c:	e3400014 	movt	r0, #20
  135210:	ebff37bf 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135214:	e3a03000 	mov	r3, #0
  135218:	ea000008 	b	135240 <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  13521c:	e15b30be 	ldrh	r3, [fp, #-14]
  135220:	e1a01003 	mov	r1, r3
  135224:	e51b0008 	ldr	r0, [fp, #-8]
  135228:	ebff95d3 	bl	11a97c <pbuf_realloc>
    p_s = RT_NULL;
  13522c:	e30e3c20 	movw	r3, #60448	; 0xec20
  135230:	e3403014 	movt	r3, #20
  135234:	e3a02000 	mov	r2, #0
  135238:	e5832000 	str	r2, [r3]
    return p;
  13523c:	e51b3008 	ldr	r3, [fp, #-8]
}
  135240:	e1a00003 	mov	r0, r3
  135244:	e24bd004 	sub	sp, fp, #4
  135248:	e8bd8800 	pop	{fp, pc}

0013524c <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  13524c:	e92d4800 	push	{fp, lr}
  135250:	e28db004 	add	fp, sp, #4
  135254:	e24dd010 	sub	sp, sp, #16
  135258:	e50b0010 	str	r0, [fp, #-16]
  13525c:	e1a03001 	mov	r3, r1
  135260:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135264:	e51b3010 	ldr	r3, [fp, #-16]
  135268:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  13526c:	e51b3008 	ldr	r3, [fp, #-8]
  135270:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135274:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  135278:	e3a01403 	mov	r1, #50331648	; 0x3000000
  13527c:	e51b000c 	ldr	r0, [fp, #-12]
  135280:	ebfffcda 	bl	1345f0 <ENET_EnableInterrupts>

    return RT_EOK;
  135284:	e3a03000 	mov	r3, #0
}
  135288:	e1a00003 	mov	r0, r3
  13528c:	e24bd004 	sub	sp, fp, #4
  135290:	e8bd8800 	pop	{fp, pc}

00135294 <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  135294:	e92d4800 	push	{fp, lr}
  135298:	e28db004 	add	fp, sp, #4
  13529c:	e24dd010 	sub	sp, sp, #16
  1352a0:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1352a4:	e51b3010 	ldr	r3, [fp, #-16]
  1352a8:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  1352ac:	e51b3008 	ldr	r3, [fp, #-8]
  1352b0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1352b4:	e3a01403 	mov	r1, #50331648	; 0x3000000
  1352b8:	e1a00003 	mov	r0, r3
  1352bc:	ebfffcda 	bl	13462c <ENET_DisableInterrupts>
    return RT_EOK;
  1352c0:	e3a03000 	mov	r3, #0
}
  1352c4:	e1a00003 	mov	r0, r3
  1352c8:	e24bd004 	sub	sp, fp, #4
  1352cc:	e8bd8800 	pop	{fp, pc}

001352d0 <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  1352d0:	e92d4800 	push	{fp, lr}
  1352d4:	e28db004 	add	fp, sp, #4
  1352d8:	e24dd018 	sub	sp, sp, #24
  1352dc:	e50b0010 	str	r0, [fp, #-16]
  1352e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1352e4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1352e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  1352ec:	e3a03000 	mov	r3, #0
  1352f0:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  1352f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1352f8:	e3530000 	cmp	r3, #0
  1352fc:	1a00000c 	bne	135334 <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  135300:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  135304:	e3400014 	movt	r0, #20
  135308:	ebff3781 	bl	103114 <rt_kprintf>
  13530c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135310:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135314:	e3090d2c 	movw	r0, #40236	; 0x9d2c
  135318:	e3400014 	movt	r0, #20
  13531c:	ebff377c 	bl	103114 <rt_kprintf>
  135320:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  135324:	e3400014 	movt	r0, #20
  135328:	ebff3779 	bl	103114 <rt_kprintf>
        return 0;
  13532c:	e3a03000 	mov	r3, #0
  135330:	ea00000f 	b	135374 <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  135334:	e24b300a 	sub	r3, fp, #10
  135338:	e1a02003 	mov	r2, r3
  13533c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135340:	e51b0010 	ldr	r0, [fp, #-16]
  135344:	ebfffece 	bl	134e84 <read_data_from_eth>
  135348:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  13534c:	e51b3008 	ldr	r3, [fp, #-8]
  135350:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135354:	e1530002 	cmp	r3, r2
  135358:	0a000002 	beq	135368 <rt_imx6ul_eth_read+0x98>
  13535c:	e51b3008 	ldr	r3, [fp, #-8]
  135360:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135364:	1a000001 	bne	135370 <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  135368:	e3a03000 	mov	r3, #0
  13536c:	ea000000 	b	135374 <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  135370:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  135374:	e1a00003 	mov	r0, r3
  135378:	e24bd004 	sub	sp, fp, #4
  13537c:	e8bd8800 	pop	{fp, pc}

00135380 <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  135380:	e92d4800 	push	{fp, lr}
  135384:	e28db004 	add	fp, sp, #4
  135388:	e24dd028 	sub	sp, sp, #40	; 0x28
  13538c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135390:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  135394:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  135398:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  13539c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1353a0:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  1353a4:	e51b3008 	ldr	r3, [fp, #-8]
  1353a8:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1353ac:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  1353b0:	e51b3008 	ldr	r3, [fp, #-8]
  1353b4:	e2833c01 	add	r3, r3, #256	; 0x100
  1353b8:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  1353bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1353c0:	e3530000 	cmp	r3, #0
  1353c4:	0a000003 	beq	1353d8 <rt_imx6ul_eth_write+0x58>
  1353c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1353cc:	e30025ee 	movw	r2, #1518	; 0x5ee
  1353d0:	e1530002 	cmp	r3, r2
  1353d4:	9a00000a 	bls	135404 <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  1353d8:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  1353dc:	e3400014 	movt	r0, #20
  1353e0:	ebff374b 	bl	103114 <rt_kprintf>
  1353e4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1353e8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1353ec:	e3090d5c 	movw	r0, #40284	; 0x9d5c
  1353f0:	e3400014 	movt	r0, #20
  1353f4:	ebff3746 	bl	103114 <rt_kprintf>
  1353f8:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1353fc:	e3400014 	movt	r0, #20
  135400:	ebff3743 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  135404:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  135408:	e6ff2073 	uxth	r2, r3
  13540c:	e3a03001 	mov	r3, #1
  135410:	e58d3000 	str	r3, [sp]
  135414:	e1a03002 	mov	r3, r2
  135418:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  13541c:	e51b1010 	ldr	r1, [fp, #-16]
  135420:	e51b000c 	ldr	r0, [fp, #-12]
  135424:	eb000811 	bl	137470 <ENET_SendFrame>
  135428:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  13542c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135430:	e3530000 	cmp	r3, #0
  135434:	0a000001 	beq	135440 <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  135438:	e3a03001 	mov	r3, #1
  13543c:	ea000000 	b	135444 <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  135440:	e3a03000 	mov	r3, #0
}
  135444:	e1a00003 	mov	r0, r3
  135448:	e24bd004 	sub	sp, fp, #4
  13544c:	e8bd8800 	pop	{fp, pc}

00135450 <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  135450:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135454:	e28db000 	add	fp, sp, #0
  135458:	e24dd014 	sub	sp, sp, #20
  13545c:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  135460:	e3a03000 	mov	r3, #0
  135464:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  135468:	e3a03000 	mov	r3, #0
  13546c:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135470:	e3a03000 	mov	r3, #0
  135474:	e50b3008 	str	r3, [fp, #-8]
  135478:	ea00000d 	b	1354b4 <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  13547c:	e30d3078 	movw	r3, #53368	; 0xd078
  135480:	e3403014 	movt	r3, #20
  135484:	e51b2008 	ldr	r2, [fp, #-8]
  135488:	e3a01f8a 	mov	r1, #552	; 0x228
  13548c:	e0020291 	mul	r2, r1, r2
  135490:	e0833002 	add	r3, r3, r2
  135494:	e28330a0 	add	r3, r3, #160	; 0xa0
  135498:	e5933000 	ldr	r3, [r3]
  13549c:	e51b2010 	ldr	r2, [fp, #-16]
  1354a0:	e1520003 	cmp	r2, r3
  1354a4:	0a000006 	beq	1354c4 <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  1354a8:	e51b3008 	ldr	r3, [fp, #-8]
  1354ac:	e2833001 	add	r3, r3, #1
  1354b0:	e50b3008 	str	r3, [fp, #-8]
  1354b4:	e51b3008 	ldr	r3, [fp, #-8]
  1354b8:	e3530000 	cmp	r3, #0
  1354bc:	daffffee 	ble	13547c <get_instance_by_base+0x2c>
  1354c0:	ea000000 	b	1354c8 <get_instance_by_base+0x78>
        {
            break;
  1354c4:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  1354c8:	e51b3008 	ldr	r3, [fp, #-8]
  1354cc:	e3530001 	cmp	r3, #1
  1354d0:	1a000001 	bne	1354dc <get_instance_by_base+0x8c>
    {
        return -1;
  1354d4:	e3e03000 	mvn	r3, #0
  1354d8:	ea000000 	b	1354e0 <get_instance_by_base+0x90>
    }
    return instance;
  1354dc:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  1354e0:	e1a00003 	mov	r0, r3
  1354e4:	e28bd000 	add	sp, fp, #0
  1354e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1354ec:	e12fff1e 	bx	lr

001354f0 <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  1354f0:	e92d4800 	push	{fp, lr}
  1354f4:	e28db004 	add	fp, sp, #4
  1354f8:	e24dd010 	sub	sp, sp, #16
  1354fc:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  135500:	e3a03000 	mov	r3, #0
  135504:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  135508:	e51b0010 	ldr	r0, [fp, #-16]
  13550c:	ebffffcf 	bl	135450 <get_instance_by_base>
  135510:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  135514:	e51b3008 	ldr	r3, [fp, #-8]
  135518:	e3730001 	cmn	r3, #1
  13551c:	1a000009 	bne	135548 <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  135520:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  135524:	e3400014 	movt	r0, #20
  135528:	ebff36f9 	bl	103114 <rt_kprintf>
  13552c:	e3090d8c 	movw	r0, #40332	; 0x9d8c
  135530:	e3400014 	movt	r0, #20
  135534:	ebff36f6 	bl	103114 <rt_kprintf>
  135538:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  13553c:	e3400014 	movt	r0, #20
  135540:	ebff36f3 	bl	103114 <rt_kprintf>
        return;
  135544:	ea00000a 	b	135574 <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  135548:	e3a01403 	mov	r1, #50331648	; 0x3000000
  13554c:	e51b0010 	ldr	r0, [fp, #-16]
  135550:	ebfffc35 	bl	13462c <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  135554:	e51b3008 	ldr	r3, [fp, #-8]
  135558:	e3a02f8a 	mov	r2, #552	; 0x228
  13555c:	e0020392 	mul	r2, r2, r3
  135560:	e30d3078 	movw	r3, #53368	; 0xd078
  135564:	e3403014 	movt	r3, #20
  135568:	e0823003 	add	r3, r2, r3
  13556c:	e1a00003 	mov	r0, r3
  135570:	ebffd175 	bl	129b4c <eth_device_ready>
}
  135574:	e24bd004 	sub	sp, fp, #4
  135578:	e8bd8800 	pop	{fp, pc}

0013557c <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  13557c:	e92d4800 	push	{fp, lr}
  135580:	e28db004 	add	fp, sp, #4
  135584:	e24dd008 	sub	sp, sp, #8
  135588:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  13558c:	e3a01303 	mov	r1, #201326592	; 0xc000000
  135590:	e51b0008 	ldr	r0, [fp, #-8]
  135594:	ebfffc24 	bl	13462c <ENET_DisableInterrupts>
}
  135598:	e320f000 	nop	{0}
  13559c:	e24bd004 	sub	sp, fp, #4
  1355a0:	e8bd8800 	pop	{fp, pc}

001355a4 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  1355a4:	e92d4800 	push	{fp, lr}
  1355a8:	e28db004 	add	fp, sp, #4
  1355ac:	e24dd010 	sub	sp, sp, #16
  1355b0:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  1355b4:	e51b3010 	ldr	r3, [fp, #-16]
  1355b8:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1355bc:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  1355c0:	e3a03000 	mov	r3, #0
  1355c4:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1355c8:	e51b0010 	ldr	r0, [fp, #-16]
  1355cc:	ebffff9f 	bl	135450 <get_instance_by_base>
  1355d0:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1355d4:	e51b3008 	ldr	r3, [fp, #-8]
  1355d8:	e3730001 	cmn	r3, #1
  1355dc:	1a00000a 	bne	13560c <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  1355e0:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  1355e4:	e3400014 	movt	r0, #20
  1355e8:	ebff36c9 	bl	103114 <rt_kprintf>
  1355ec:	e3090d8c 	movw	r0, #40332	; 0x9d8c
  1355f0:	e3400014 	movt	r0, #20
  1355f4:	ebff36c6 	bl	103114 <rt_kprintf>
  1355f8:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1355fc:	e3400014 	movt	r0, #20
  135600:	ebff36c3 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135604:	e3a03000 	mov	r3, #0
  135608:	ea000005 	b	135624 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  13560c:	e51b3008 	ldr	r3, [fp, #-8]
  135610:	e3a02f8a 	mov	r2, #552	; 0x228
  135614:	e0020392 	mul	r2, r2, r3
  135618:	e30d3078 	movw	r3, #53368	; 0xd078
  13561c:	e3403014 	movt	r3, #20
  135620:	e0823003 	add	r3, r2, r3
}
  135624:	e1a00003 	mov	r0, r3
  135628:	e24bd004 	sub	sp, fp, #4
  13562c:	e8bd8800 	pop	{fp, pc}

00135630 <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  135630:	e92d4800 	push	{fp, lr}
  135634:	e28db004 	add	fp, sp, #4
  135638:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  13563c:	e30d3078 	movw	r3, #53368	; 0xd078
  135640:	e3403014 	movt	r3, #20
  135644:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135648:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  13564c:	ebff3b62 	bl	1043dc <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  135650:	e51b0008 	ldr	r0, [fp, #-8]
  135654:	ebffffd2 	bl	1355a4 <ueth_rx_interrupt_handle>
  135658:	e1a03000 	mov	r3, r0
#endif
}
  13565c:	e1a00003 	mov	r0, r3
  135660:	e24bd004 	sub	sp, fp, #4
  135664:	e8bd8800 	pop	{fp, pc}

00135668 <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  135668:	e92d4800 	push	{fp, lr}
  13566c:	e28db004 	add	fp, sp, #4
  135670:	e24dd020 	sub	sp, sp, #32
  135674:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  135678:	e3a03000 	mov	r3, #0
  13567c:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  135680:	e3a03000 	mov	r3, #0
  135684:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  135688:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13568c:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  135690:	e51b300c 	ldr	r3, [fp, #-12]
  135694:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135698:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  13569c:	e51b300c 	ldr	r3, [fp, #-12]
  1356a0:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  1356a4:	e51b300c 	ldr	r3, [fp, #-12]
  1356a8:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  1356ac:	e1a01003 	mov	r1, r3
  1356b0:	e1a00002 	mov	r0, r2
  1356b4:	eb000a8e 	bl	1380f4 <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  1356b8:	e51b300c 	ldr	r3, [fp, #-12]
  1356bc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356c0:	e1a01003 	mov	r1, r3
  1356c4:	e51b300c 	ldr	r3, [fp, #-12]
  1356c8:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  1356cc:	e3a02d52 	mov	r2, #5248	; 0x1480
  1356d0:	e34023ef 	movt	r2, #1007	; 0x3ef
  1356d4:	e51b0008 	ldr	r0, [fp, #-8]
  1356d8:	eb000af9 	bl	1382c4 <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1356dc:	e51b300c 	ldr	r3, [fp, #-12]
  1356e0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356e4:	e1a01003 	mov	r1, r3
  1356e8:	e24b300d 	sub	r3, fp, #13
  1356ec:	e1a02003 	mov	r2, r3
  1356f0:	e51b0008 	ldr	r0, [fp, #-8]
  1356f4:	eb000be5 	bl	138690 <PHY_GetLinkStatus>
    if (link)
  1356f8:	e55b300d 	ldrb	r3, [fp, #-13]
  1356fc:	e3530000 	cmp	r3, #0
  135700:	0a00000d 	beq	13573c <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  135704:	e51b300c 	ldr	r3, [fp, #-12]
  135708:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13570c:	e1a01003 	mov	r1, r3
  135710:	e24b3018 	sub	r3, fp, #24
  135714:	e24b2014 	sub	r2, fp, #20
  135718:	e51b0008 	ldr	r0, [fp, #-8]
  13571c:	eb000c04 	bl	138734 <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  135720:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135724:	e51b300c 	ldr	r3, [fp, #-12]
  135728:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  13572c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  135730:	e51b300c 	ldr	r3, [fp, #-12]
  135734:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  135738:	ea000008 	b	135760 <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  13573c:	e3090dac 	movw	r0, #40364	; 0x9dac
  135740:	e3400014 	movt	r0, #20
  135744:	ebff3672 	bl	103114 <rt_kprintf>
  135748:	e3090dc0 	movw	r0, #40384	; 0x9dc0
  13574c:	e3400014 	movt	r0, #20
  135750:	ebff366f 	bl	103114 <rt_kprintf>
  135754:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  135758:	e3400014 	movt	r0, #20
  13575c:	ebff366c 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135760:	e51b300c 	ldr	r3, [fp, #-12]
  135764:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135768:	e1a01003 	mov	r1, r3
  13576c:	e24b300d 	sub	r3, fp, #13
  135770:	e1a02003 	mov	r2, r3
  135774:	e51b0008 	ldr	r0, [fp, #-8]
  135778:	eb000bc4 	bl	138690 <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  13577c:	e55b300d 	ldrb	r3, [fp, #-13]
  135780:	e1a02003 	mov	r2, r3
  135784:	e51b300c 	ldr	r3, [fp, #-12]
  135788:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  13578c:	e1520003 	cmp	r2, r3
  135790:	0a00000b 	beq	1357c4 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  135794:	e55b300d 	ldrb	r3, [fp, #-13]
  135798:	e3530000 	cmp	r3, #0
  13579c:	0a000004 	beq	1357b4 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  1357a0:	e51b300c 	ldr	r3, [fp, #-12]
  1357a4:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1357a8:	e1a01003 	mov	r1, r3
  1357ac:	e51b0008 	ldr	r0, [fp, #-8]
  1357b0:	eb000a74 	bl	138188 <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  1357b4:	e55b300d 	ldrb	r3, [fp, #-13]
  1357b8:	e1a01003 	mov	r1, r3
  1357bc:	e51b000c 	ldr	r0, [fp, #-12]
  1357c0:	ebfffba9 	bl	13466c <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  1357c4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  1357c8:	ebff31ab 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1357cc:	eaffffe3 	b	135760 <phy_detect_thread_entry+0xf8>

001357d0 <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  1357d0:	e92d4800 	push	{fp, lr}
  1357d4:	e28db004 	add	fp, sp, #4
  1357d8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1357dc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1357e0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  1357e4:	e3a03000 	mov	r3, #0
  1357e8:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  1357ec:	ebff3ac5 	bl	104308 <ipc_service_init>
  1357f0:	e1a03000 	mov	r3, r0
  1357f4:	e3530001 	cmp	r3, #1
  1357f8:	1a000001 	bne	135804 <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  1357fc:	e3e03000 	mvn	r3, #0
  135800:	ea0000b1 	b	135acc <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  135804:	e3a0101c 	mov	r1, #28
  135808:	e30d0040 	movw	r0, #53312	; 0xd040
  13580c:	e3400014 	movt	r0, #20
  135810:	ebff3b5b 	bl	104584 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  135814:	e3a0101c 	mov	r1, #28
  135818:	e59f02b8 	ldr	r0, [pc, #696]	; 135ad8 <imx6ul_eth_init+0x308>
  13581c:	ebff3b58 	bl	104584 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135820:	e3a03000 	mov	r3, #0
  135824:	e50b300c 	str	r3, [fp, #-12]
  135828:	ea000090 	b	135a70 <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  13582c:	e30d3078 	movw	r3, #53368	; 0xd078
  135830:	e3403014 	movt	r3, #20
  135834:	e51b200c 	ldr	r2, [fp, #-12]
  135838:	e3a01f8a 	mov	r1, #552	; 0x228
  13583c:	e0020291 	mul	r2, r1, r2
  135840:	e0833002 	add	r3, r3, r2
  135844:	e283202c 	add	r2, r3, #44	; 0x2c
  135848:	e3093e0c 	movw	r3, #40460	; 0x9e0c
  13584c:	e3403014 	movt	r3, #20
  135850:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  135854:	e30d3078 	movw	r3, #53368	; 0xd078
  135858:	e3403014 	movt	r3, #20
  13585c:	e51b200c 	ldr	r2, [fp, #-12]
  135860:	e3a01f8a 	mov	r1, #552	; 0x228
  135864:	e0020291 	mul	r2, r1, r2
  135868:	e0833002 	add	r3, r3, r2
  13586c:	e2832070 	add	r2, r3, #112	; 0x70
  135870:	e3053110 	movw	r3, #20752	; 0x5110
  135874:	e3403013 	movt	r3, #19
  135878:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  13587c:	e30d3078 	movw	r3, #53368	; 0xd078
  135880:	e3403014 	movt	r3, #20
  135884:	e51b200c 	ldr	r2, [fp, #-12]
  135888:	e3a01f8a 	mov	r1, #552	; 0x228
  13588c:	e0020291 	mul	r2, r1, r2
  135890:	e0833002 	add	r3, r3, r2
  135894:	e2832074 	add	r2, r3, #116	; 0x74
  135898:	e3043fb0 	movw	r3, #20400	; 0x4fb0
  13589c:	e3403013 	movt	r3, #19
  1358a0:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  1358a4:	e30d3078 	movw	r3, #53368	; 0xd078
  1358a8:	e3403014 	movt	r3, #20
  1358ac:	e51b200c 	ldr	r2, [fp, #-12]
  1358b0:	e3a01f8a 	mov	r1, #552	; 0x228
  1358b4:	e0020291 	mul	r2, r1, r2
  1358b8:	e0833002 	add	r3, r3, r2
  1358bc:	e2833088 	add	r3, r3, #136	; 0x88
  1358c0:	e3a02000 	mov	r2, #0
  1358c4:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  1358c8:	e51b300c 	ldr	r3, [fp, #-12]
  1358cc:	e3a02f8a 	mov	r2, #552	; 0x228
  1358d0:	e0020392 	mul	r2, r2, r3
  1358d4:	e30d3078 	movw	r3, #53368	; 0xd078
  1358d8:	e3403014 	movt	r3, #20
  1358dc:	e0823003 	add	r3, r2, r3
  1358e0:	e24b2024 	sub	r2, fp, #36	; 0x24
  1358e4:	e3a01001 	mov	r1, #1
  1358e8:	e1a00003 	mov	r0, r3
  1358ec:	ebfffce3 	bl	134c80 <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  1358f0:	e51b300c 	ldr	r3, [fp, #-12]
  1358f4:	e3a02f8a 	mov	r2, #552	; 0x228
  1358f8:	e0020392 	mul	r2, r2, r3
  1358fc:	e30d3078 	movw	r3, #53368	; 0xd078
  135900:	e3403014 	movt	r3, #20
  135904:	e0823003 	add	r3, r2, r3
  135908:	e1a00003 	mov	r0, r3
  13590c:	ebfffc5c 	bl	134a84 <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  135910:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  135914:	e3403014 	movt	r3, #20
  135918:	e3a02001 	mov	r2, #1
  13591c:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  135920:	e51b300c 	ldr	r3, [fp, #-12]
  135924:	e3a02f8a 	mov	r2, #552	; 0x228
  135928:	e0020392 	mul	r2, r2, r3
  13592c:	e30d3078 	movw	r3, #53368	; 0xd078
  135930:	e3403014 	movt	r3, #20
  135934:	e0820003 	add	r0, r2, r3
  135938:	e30d3078 	movw	r3, #53368	; 0xd078
  13593c:	e3403014 	movt	r3, #20
  135940:	e51b200c 	ldr	r2, [fp, #-12]
  135944:	e3a01f8a 	mov	r1, #552	; 0x228
  135948:	e0020291 	mul	r2, r1, r2
  13594c:	e0833002 	add	r3, r3, r2
  135950:	e283308c 	add	r3, r3, #140	; 0x8c
  135954:	e5933000 	ldr	r3, [r3]
  135958:	e1a01003 	mov	r1, r3
  13595c:	ebffd047 	bl	129a80 <eth_device_init>
  135960:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  135964:	e51b3008 	ldr	r3, [fp, #-8]
  135968:	e3530000 	cmp	r3, #0
  13596c:	1a000009 	bne	135998 <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  135970:	e3090e24 	movw	r0, #40484	; 0x9e24
  135974:	e3400014 	movt	r0, #20
  135978:	ebff35e5 	bl	103114 <rt_kprintf>
  13597c:	e3090e38 	movw	r0, #40504	; 0x9e38
  135980:	e3400014 	movt	r0, #20
  135984:	ebff35e2 	bl	103114 <rt_kprintf>
  135988:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  13598c:	e3400014 	movt	r0, #20
  135990:	ebff35df 	bl	103114 <rt_kprintf>
  135994:	ea00000b 	b	1359c8 <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  135998:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  13599c:	e3400014 	movt	r0, #20
  1359a0:	ebff35db 	bl	103114 <rt_kprintf>
  1359a4:	e51b1008 	ldr	r1, [fp, #-8]
  1359a8:	e3090e54 	movw	r0, #40532	; 0x9e54
  1359ac:	e3400014 	movt	r0, #20
  1359b0:	ebff35d7 	bl	103114 <rt_kprintf>
  1359b4:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1359b8:	e3400014 	movt	r0, #20
  1359bc:	ebff35d4 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  1359c0:	e3e03000 	mvn	r3, #0
  1359c4:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  1359c8:	e30d3078 	movw	r3, #53368	; 0xd078
  1359cc:	e3403014 	movt	r3, #20
  1359d0:	e51b200c 	ldr	r2, [fp, #-12]
  1359d4:	e3a01f8a 	mov	r1, #552	; 0x228
  1359d8:	e0020291 	mul	r2, r1, r2
  1359dc:	e0833002 	add	r3, r3, r2
  1359e0:	e28330a4 	add	r3, r3, #164	; 0xa4
  1359e4:	e5932000 	ldr	r2, [r3]
  1359e8:	e24b301c 	sub	r3, fp, #28
  1359ec:	e3091e70 	movw	r1, #40560	; 0x9e70
  1359f0:	e3401014 	movt	r1, #20
  1359f4:	e1a00003 	mov	r0, r3
  1359f8:	ebff35a3 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  1359fc:	e51b300c 	ldr	r3, [fp, #-12]
  135a00:	e3a02f8a 	mov	r2, #552	; 0x228
  135a04:	e0020392 	mul	r2, r2, r3
  135a08:	e30d3078 	movw	r3, #53368	; 0xd078
  135a0c:	e3403014 	movt	r3, #20
  135a10:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  135a14:	e24b001c 	sub	r0, fp, #28
  135a18:	e3a03002 	mov	r3, #2
  135a1c:	e58d3004 	str	r3, [sp, #4]
  135a20:	e3a03019 	mov	r3, #25
  135a24:	e58d3000 	str	r3, [sp]
  135a28:	e3a03a01 	mov	r3, #4096	; 0x1000
  135a2c:	e3051668 	movw	r1, #22120	; 0x5668
  135a30:	e3401013 	movt	r1, #19
  135a34:	ebff31ae 	bl	1020f4 <rt_thread_create>
  135a38:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135a3c:	e51b3010 	ldr	r3, [fp, #-16]
  135a40:	e3530000 	cmp	r3, #0
  135a44:	0a000001 	beq	135a50 <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  135a48:	e51b0010 	ldr	r0, [fp, #-16]
  135a4c:	ebff31dd 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  135a50:	e24b301c 	sub	r3, fp, #28
  135a54:	e3a0200a 	mov	r2, #10
  135a58:	e3a01000 	mov	r1, #0
  135a5c:	e1a00003 	mov	r0, r3
  135a60:	eb002dff 	bl	141264 <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135a64:	e51b300c 	ldr	r3, [fp, #-12]
  135a68:	e2833001 	add	r3, r3, #1
  135a6c:	e50b300c 	str	r3, [fp, #-12]
  135a70:	e51b300c 	ldr	r3, [fp, #-12]
  135a74:	e3530000 	cmp	r3, #0
  135a78:	0affff6b 	beq	13582c <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  135a7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135a80:	e3530001 	cmp	r3, #1
  135a84:	9a000005 	bls	135aa0 <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  135a88:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135a8c:	e3a02000 	mov	r2, #0
  135a90:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  135a94:	e3e03000 	mvn	r3, #0
  135a98:	e50b3008 	str	r3, [fp, #-8]
  135a9c:	ea000009 	b	135ac8 <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  135aa0:	e30d3078 	movw	r3, #53368	; 0xd078
  135aa4:	e3403014 	movt	r3, #20
  135aa8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135aac:	e3a01f8a 	mov	r1, #552	; 0x228
  135ab0:	e0020291 	mul	r2, r1, r2
  135ab4:	e0833002 	add	r3, r3, r2
  135ab8:	e283308c 	add	r3, r3, #140	; 0x8c
  135abc:	e5932000 	ldr	r2, [r3]
  135ac0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135ac4:	e5832000 	str	r2, [r3]
    }

    return state;
  135ac8:	e51b3008 	ldr	r3, [fp, #-8]
}
  135acc:	e1a00003 	mov	r0, r3
  135ad0:	e24bd004 	sub	sp, fp, #4
  135ad4:	e8bd8800 	pop	{fp, pc}
  135ad8:	0014d05c 	.word	0x0014d05c

00135adc <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  135adc:	e92d4800 	push	{fp, lr}
  135ae0:	e28db004 	add	fp, sp, #4
  135ae4:	e24dd018 	sub	sp, sp, #24
  135ae8:	e50b0008 	str	r0, [fp, #-8]
  135aec:	e50b100c 	str	r1, [fp, #-12]
  135af0:	e50b2010 	str	r2, [fp, #-16]
  135af4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  135af8:	e51b3010 	ldr	r3, [fp, #-16]
  135afc:	e58d3000 	str	r3, [sp]
  135b00:	e51b300c 	ldr	r3, [fp, #-12]
  135b04:	e51b2008 	ldr	r2, [fp, #-8]
  135b08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135b0c:	e3090e90 	movw	r0, #40592	; 0x9e90
  135b10:	e3400014 	movt	r0, #20
  135b14:	ebff357e 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135b18:	e1200070 	bkpt	0x0000
  135b1c:	eafffffd 	b	135b18 <__assert_func+0x3c>

00135b20 <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  135b20:	e92d4800 	push	{fp, lr}
  135b24:	e28db004 	add	fp, sp, #4
  135b28:	e24dd018 	sub	sp, sp, #24
  135b2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135b30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  135b34:	e3a03000 	mov	r3, #0
  135b38:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  135b3c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135b44:	e0823003 	add	r3, r2, r3
  135b48:	e2432001 	sub	r2, r3, #1
  135b4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b50:	e2633000 	rsb	r3, r3, #0
  135b54:	e0022003 	and	r2, r2, r3
  135b58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b5c:	e0823003 	add	r3, r2, r3
  135b60:	e2833004 	add	r3, r3, #4
  135b64:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  135b68:	e51b000c 	ldr	r0, [fp, #-12]
  135b6c:	eb001df4 	bl	13d344 <malloc>
  135b70:	e1a03000 	mov	r3, r0
  135b74:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  135b78:	e51b3010 	ldr	r3, [fp, #-16]
  135b7c:	e3530000 	cmp	r3, #0
  135b80:	1a000001 	bne	135b8c <SDK_Malloc+0x6c>
    {
        return NULL;
  135b84:	e3a03000 	mov	r3, #0
  135b88:	ea000014 	b	135be0 <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  135b8c:	e51b2010 	ldr	r2, [fp, #-16]
  135b90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b94:	e0823003 	add	r3, r2, r3
  135b98:	e2832003 	add	r2, r3, #3
  135b9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ba0:	e2633000 	rsb	r3, r3, #0
  135ba4:	e0033002 	and	r3, r3, r2
  135ba8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bb0:	e2433004 	sub	r3, r3, #4
  135bb4:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135bb8:	e51b3008 	ldr	r3, [fp, #-8]
  135bbc:	e3032039 	movw	r2, #12345	; 0x3039
  135bc0:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  135bc4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135bc8:	e51b3010 	ldr	r3, [fp, #-16]
  135bcc:	e0423003 	sub	r3, r2, r3
  135bd0:	e6ff2073 	uxth	r2, r3
  135bd4:	e51b3008 	ldr	r3, [fp, #-8]
  135bd8:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  135bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  135be0:	e1a00003 	mov	r0, r3
  135be4:	e24bd004 	sub	sp, fp, #4
  135be8:	e8bd8800 	pop	{fp, pc}

00135bec <SDK_Free>:

void SDK_Free(void *ptr)
{
  135bec:	e92d4800 	push	{fp, lr}
  135bf0:	e28db004 	add	fp, sp, #4
  135bf4:	e24dd010 	sub	sp, sp, #16
  135bf8:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  135bfc:	e51b3010 	ldr	r3, [fp, #-16]
  135c00:	e2433004 	sub	r3, r3, #4
  135c04:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  135c08:	e51b3008 	ldr	r3, [fp, #-8]
  135c0c:	e1d330b0 	ldrh	r3, [r3]
  135c10:	e3032039 	movw	r2, #12345	; 0x3039
  135c14:	e1530002 	cmp	r3, r2
  135c18:	1a000006 	bne	135c38 <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135c1c:	e51b3010 	ldr	r3, [fp, #-16]
  135c20:	e51b2008 	ldr	r2, [fp, #-8]
  135c24:	e1d220b2 	ldrh	r2, [r2, #2]
  135c28:	e0433002 	sub	r3, r3, r2
  135c2c:	e1a00003 	mov	r0, r3
  135c30:	eb001f7f 	bl	13da34 <free>
  135c34:	ea000000 	b	135c3c <SDK_Free+0x50>
        return;
  135c38:	e320f000 	nop	{0}
}
  135c3c:	e24bd004 	sub	sp, fp, #4
  135c40:	e8bd8800 	pop	{fp, pc}

00135c44 <ENET_Reset>:
{
  135c44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c48:	e28db000 	add	fp, sp, #0
  135c4c:	e24dd00c 	sub	sp, sp, #12
  135c50:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  135c54:	e51b3008 	ldr	r3, [fp, #-8]
  135c58:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135c5c:	e3832001 	orr	r2, r3, #1
  135c60:	e51b3008 	ldr	r3, [fp, #-8]
  135c64:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135c68:	e320f000 	nop	{0}
  135c6c:	e28bd000 	add	sp, fp, #0
  135c70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135c74:	e12fff1e 	bx	lr

00135c78 <ENET_GetSMI>:
{
  135c78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c7c:	e28db000 	add	fp, sp, #0
  135c80:	e24dd00c 	sub	sp, sp, #12
  135c84:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  135c88:	e51b3008 	ldr	r3, [fp, #-8]
  135c8c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  135c90:	e203307e 	and	r3, r3, #126	; 0x7e
  135c94:	e3530000 	cmp	r3, #0
  135c98:	13a03001 	movne	r3, #1
  135c9c:	03a03000 	moveq	r3, #0
  135ca0:	e6ef3073 	uxtb	r3, r3
}
  135ca4:	e1a00003 	mov	r0, r3
  135ca8:	e28bd000 	add	sp, fp, #0
  135cac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135cb0:	e12fff1e 	bx	lr

00135cb4 <ENET_EnableSleepMode>:
{
  135cb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135cb8:	e28db000 	add	fp, sp, #0
  135cbc:	e24dd00c 	sub	sp, sp, #12
  135cc0:	e50b0008 	str	r0, [fp, #-8]
  135cc4:	e1a03001 	mov	r3, r1
  135cc8:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  135ccc:	e55b3009 	ldrb	r3, [fp, #-9]
  135cd0:	e3530000 	cmp	r3, #0
  135cd4:	0a000005 	beq	135cf0 <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  135cd8:	e51b3008 	ldr	r3, [fp, #-8]
  135cdc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135ce0:	e383200c 	orr	r2, r3, #12
  135ce4:	e51b3008 	ldr	r3, [fp, #-8]
  135ce8:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135cec:	ea000004 	b	135d04 <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  135cf0:	e51b3008 	ldr	r3, [fp, #-8]
  135cf4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135cf8:	e3c3200c 	bic	r2, r3, #12
  135cfc:	e51b3008 	ldr	r3, [fp, #-8]
  135d00:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135d04:	e320f000 	nop	{0}
  135d08:	e28bd000 	add	sp, fp, #0
  135d0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135d10:	e12fff1e 	bx	lr

00135d14 <ENET_EnableInterrupts>:
{
  135d14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135d18:	e28db000 	add	fp, sp, #0
  135d1c:	e24dd00c 	sub	sp, sp, #12
  135d20:	e50b0008 	str	r0, [fp, #-8]
  135d24:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135d28:	e51b3008 	ldr	r3, [fp, #-8]
  135d2c:	e5932008 	ldr	r2, [r3, #8]
  135d30:	e51b300c 	ldr	r3, [fp, #-12]
  135d34:	e1822003 	orr	r2, r2, r3
  135d38:	e51b3008 	ldr	r3, [fp, #-8]
  135d3c:	e5832008 	str	r2, [r3, #8]
}
  135d40:	e320f000 	nop	{0}
  135d44:	e28bd000 	add	sp, fp, #0
  135d48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135d4c:	e12fff1e 	bx	lr

00135d50 <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  135d50:	e92d4800 	push	{fp, lr}
  135d54:	e28db004 	add	fp, sp, #4
  135d58:	e24dd010 	sub	sp, sp, #16
  135d5c:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d60:	e3a03000 	mov	r3, #0
  135d64:	e50b3008 	str	r3, [fp, #-8]
  135d68:	ea000009 	b	135d94 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  135d6c:	e3093ed0 	movw	r3, #40656	; 0x9ed0
  135d70:	e3403014 	movt	r3, #20
  135d74:	e51b2008 	ldr	r2, [fp, #-8]
  135d78:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  135d7c:	e51b2010 	ldr	r2, [fp, #-16]
  135d80:	e1520003 	cmp	r2, r3
  135d84:	0a000006 	beq	135da4 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d88:	e51b3008 	ldr	r3, [fp, #-8]
  135d8c:	e2833001 	add	r3, r3, #1
  135d90:	e50b3008 	str	r3, [fp, #-8]
  135d94:	e51b3008 	ldr	r3, [fp, #-8]
  135d98:	e3530002 	cmp	r3, #2
  135d9c:	9afffff2 	bls	135d6c <ENET_GetInstance+0x1c>
  135da0:	ea000000 	b	135da8 <ENET_GetInstance+0x58>
        {
            break;
  135da4:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135da8:	e51b3008 	ldr	r3, [fp, #-8]
  135dac:	e3530002 	cmp	r3, #2
  135db0:	9a000005 	bls	135dcc <ENET_GetInstance+0x7c>
  135db4:	e3a020d7 	mov	r2, #215	; 0xd7
  135db8:	e30a124c 	movw	r1, #41548	; 0xa24c
  135dbc:	e3401014 	movt	r1, #20
  135dc0:	e3090edc 	movw	r0, #40668	; 0x9edc
  135dc4:	e3400014 	movt	r0, #20
  135dc8:	ebff35f2 	bl	103598 <rt_assert_handler>

    return instance;
  135dcc:	e51b3008 	ldr	r3, [fp, #-8]
}
  135dd0:	e1a00003 	mov	r0, r3
  135dd4:	e24bd004 	sub	sp, fp, #4
  135dd8:	e8bd8800 	pop	{fp, pc}

00135ddc <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135ddc:	e92d4800 	push	{fp, lr}
  135de0:	e28db004 	add	fp, sp, #4
  135de4:	e24dd008 	sub	sp, sp, #8
  135de8:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135dec:	e51b3008 	ldr	r3, [fp, #-8]
  135df0:	e3530000 	cmp	r3, #0
  135df4:	1a000005 	bne	135e10 <ENET_GetDefaultConfig+0x34>
  135df8:	e3a020e9 	mov	r2, #233	; 0xe9
  135dfc:	e30a1260 	movw	r1, #41568	; 0xa260
  135e00:	e3401014 	movt	r1, #20
  135e04:	e3090f00 	movw	r0, #40704	; 0x9f00
  135e08:	e3400014 	movt	r0, #20
  135e0c:	ebff35e1 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135e10:	e3a02024 	mov	r2, #36	; 0x24
  135e14:	e3a01000 	mov	r1, #0
  135e18:	e51b0008 	ldr	r0, [fp, #-8]
  135e1c:	eb002d10 	bl	141264 <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  135e20:	e51b2008 	ldr	r2, [fp, #-8]
  135e24:	e30d32a0 	movw	r3, #53920	; 0xd2a0
  135e28:	e3403014 	movt	r3, #20
  135e2c:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135e30:	e51b3008 	ldr	r3, [fp, #-8]
  135e34:	e3a02001 	mov	r2, #1
  135e38:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  135e3c:	e51b3008 	ldr	r3, [fp, #-8]
  135e40:	e3a02001 	mov	r2, #1
  135e44:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135e48:	e51b3008 	ldr	r3, [fp, #-8]
  135e4c:	e3a02001 	mov	r2, #1
  135e50:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  135e54:	e51b3008 	ldr	r3, [fp, #-8]
  135e58:	e30025ee 	movw	r2, #1518	; 0x5ee
  135e5c:	e1c320b8 	strh	r2, [r3, #8]
}
  135e60:	e320f000 	nop	{0}
  135e64:	e24bd004 	sub	sp, fp, #4
  135e68:	e8bd8800 	pop	{fp, pc}

00135e6c <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  135e6c:	e92d4800 	push	{fp, lr}
  135e70:	e28db004 	add	fp, sp, #4
  135e74:	e24dd018 	sub	sp, sp, #24
  135e78:	e50b0008 	str	r0, [fp, #-8]
  135e7c:	e50b100c 	str	r1, [fp, #-12]
  135e80:	e50b2010 	str	r2, [fp, #-16]
  135e84:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  135e88:	e51b300c 	ldr	r3, [fp, #-12]
  135e8c:	e3530000 	cmp	r3, #0
  135e90:	1a000005 	bne	135eac <ENET_Init+0x40>
  135e94:	e3002103 	movw	r2, #259	; 0x103
  135e98:	e30a1278 	movw	r1, #41592	; 0xa278
  135e9c:	e3401014 	movt	r1, #20
  135ea0:	e3090f08 	movw	r0, #40712	; 0x9f08
  135ea4:	e3400014 	movt	r0, #20
  135ea8:	ebff35ba 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  135eac:	e51b3010 	ldr	r3, [fp, #-16]
  135eb0:	e3530000 	cmp	r3, #0
  135eb4:	1a000005 	bne	135ed0 <ENET_Init+0x64>
  135eb8:	e3a02f41 	mov	r2, #260	; 0x104
  135ebc:	e30a1278 	movw	r1, #41592	; 0xa278
  135ec0:	e3401014 	movt	r1, #20
  135ec4:	e3090f00 	movw	r0, #40704	; 0x9f00
  135ec8:	e3400014 	movt	r0, #20
  135ecc:	ebff35b1 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135ed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ed4:	e3530000 	cmp	r3, #0
  135ed8:	1a000005 	bne	135ef4 <ENET_Init+0x88>
  135edc:	e3002105 	movw	r2, #261	; 0x105
  135ee0:	e30a1278 	movw	r1, #41592	; 0xa278
  135ee4:	e3401014 	movt	r1, #20
  135ee8:	e3090f10 	movw	r0, #40720	; 0x9f10
  135eec:	e3400014 	movt	r0, #20
  135ef0:	ebff35a8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135ef4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ef8:	e593300c 	ldr	r3, [r3, #12]
  135efc:	e3530000 	cmp	r3, #0
  135f00:	1a000005 	bne	135f1c <ENET_Init+0xb0>
  135f04:	e3002106 	movw	r2, #262	; 0x106
  135f08:	e30a1278 	movw	r1, #41592	; 0xa278
  135f0c:	e3401014 	movt	r1, #20
  135f10:	e3090f20 	movw	r0, #40736	; 0x9f20
  135f14:	e3400014 	movt	r0, #20
  135f18:	ebff359e 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  135f1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f20:	e5933010 	ldr	r3, [r3, #16]
  135f24:	e3530000 	cmp	r3, #0
  135f28:	1a000005 	bne	135f44 <ENET_Init+0xd8>
  135f2c:	e3002107 	movw	r2, #263	; 0x107
  135f30:	e30a1278 	movw	r1, #41592	; 0xa278
  135f34:	e3401014 	movt	r1, #20
  135f38:	e3090f44 	movw	r0, #40772	; 0x9f44
  135f3c:	e3400014 	movt	r0, #20
  135f40:	ebff3594 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135f44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f48:	e5933014 	ldr	r3, [r3, #20]
  135f4c:	e3530000 	cmp	r3, #0
  135f50:	1a000005 	bne	135f6c <ENET_Init+0x100>
  135f54:	e3a02f42 	mov	r2, #264	; 0x108
  135f58:	e30a1278 	movw	r1, #41592	; 0xa278
  135f5c:	e3401014 	movt	r1, #20
  135f60:	e3090f68 	movw	r0, #40808	; 0x9f68
  135f64:	e3400014 	movt	r0, #20
  135f68:	ebff358a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  135f6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f70:	e5933018 	ldr	r3, [r3, #24]
  135f74:	e3530000 	cmp	r3, #0
  135f78:	1a000005 	bne	135f94 <ENET_Init+0x128>
  135f7c:	e3002109 	movw	r2, #265	; 0x109
  135f80:	e30a1278 	movw	r1, #41592	; 0xa278
  135f84:	e3401014 	movt	r1, #20
  135f88:	e3090f84 	movw	r0, #40836	; 0x9f84
  135f8c:	e3400014 	movt	r0, #20
  135f90:	ebff3580 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  135f94:	e59b3004 	ldr	r3, [fp, #4]
  135f98:	e3530000 	cmp	r3, #0
  135f9c:	1a000005 	bne	135fb8 <ENET_Init+0x14c>
  135fa0:	e300210a 	movw	r2, #266	; 0x10a
  135fa4:	e30a1278 	movw	r1, #41592	; 0xa278
  135fa8:	e3401014 	movt	r1, #20
  135fac:	e3090fa0 	movw	r0, #40864	; 0x9fa0
  135fb0:	e3400014 	movt	r0, #20
  135fb4:	ebff3577 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fbc:	e5933004 	ldr	r3, [r3, #4]
  135fc0:	e35300ff 	cmp	r3, #255	; 0xff
  135fc4:	8a000005 	bhi	135fe0 <ENET_Init+0x174>
  135fc8:	e300210b 	movw	r2, #267	; 0x10b
  135fcc:	e30a1278 	movw	r1, #41592	; 0xa278
  135fd0:	e3401014 	movt	r1, #20
  135fd4:	e3090fa8 	movw	r0, #40872	; 0x9fa8
  135fd8:	e3400014 	movt	r0, #20
  135fdc:	ebff356d 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135fe0:	e51b3010 	ldr	r3, [fp, #-16]
  135fe4:	e5933000 	ldr	r3, [r3]
  135fe8:	e2033c02 	and	r3, r3, #512	; 0x200
  135fec:	e3530000 	cmp	r3, #0
  135ff0:	0a00000e 	beq	136030 <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  135ff4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ff8:	e5933008 	ldr	r3, [r3, #8]
  135ffc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136000:	e1d220b2 	ldrh	r2, [r2, #2]
  136004:	e0030392 	mul	r3, r2, r3
  136008:	e30025f2 	movw	r2, #1522	; 0x5f2
  13600c:	e1530002 	cmp	r3, r2
  136010:	8a000023 	bhi	1360a4 <ENET_Init+0x238>
  136014:	e300210f 	movw	r2, #271	; 0x10f
  136018:	e30a1278 	movw	r1, #41592	; 0xa278
  13601c:	e3401014 	movt	r1, #20
  136020:	e3090fe0 	movw	r0, #40928	; 0x9fe0
  136024:	e3400014 	movt	r0, #20
  136028:	ebff355a 	bl	103598 <rt_assert_handler>
  13602c:	ea00001c 	b	1360a4 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  136030:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136034:	e5933008 	ldr	r3, [r3, #8]
  136038:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13603c:	e1d220b2 	ldrh	r2, [r2, #2]
  136040:	e0030392 	mul	r3, r2, r3
  136044:	e30025ee 	movw	r2, #1518	; 0x5ee
  136048:	e1530002 	cmp	r3, r2
  13604c:	8a000005 	bhi	136068 <ENET_Init+0x1fc>
  136050:	e3002113 	movw	r2, #275	; 0x113
  136054:	e30a1278 	movw	r1, #41592	; 0xa278
  136058:	e3401014 	movt	r1, #20
  13605c:	e30a0050 	movw	r0, #41040	; 0xa050
  136060:	e3400014 	movt	r0, #20
  136064:	ebff354b 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  136068:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13606c:	e5933004 	ldr	r3, [r3, #4]
  136070:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136074:	e1d220b0 	ldrh	r2, [r2]
  136078:	e0030392 	mul	r3, r2, r3
  13607c:	e51b2010 	ldr	r2, [fp, #-16]
  136080:	e1d220b8 	ldrh	r2, [r2, #8]
  136084:	e1530002 	cmp	r3, r2
  136088:	8a000005 	bhi	1360a4 <ENET_Init+0x238>
  13608c:	e3a02f45 	mov	r2, #276	; 0x114
  136090:	e30a1278 	movw	r1, #41592	; 0xa278
  136094:	e3401014 	movt	r1, #20
  136098:	e30a00a4 	movw	r0, #41124	; 0xa0a4
  13609c:	e3400014 	movt	r0, #20
  1360a0:	ebff353c 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  1360a4:	e51b0008 	ldr	r0, [fp, #-8]
  1360a8:	ebfffee5 	bl	135c44 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1360ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360b0:	e5930010 	ldr	r0, [r3, #16]
  1360b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360b8:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  1360bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c0:	e5932018 	ldr	r2, [r3, #24]
  1360c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c8:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  1360cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360d0:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1360d4:	e58d3000 	str	r3, [sp]
  1360d8:	e1a0300c 	mov	r3, ip
  1360dc:	eb00018b 	bl	136710 <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1360e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360e4:	e593000c 	ldr	r0, [r3, #12]
  1360e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360ec:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  1360f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360f4:	e5932014 	ldr	r2, [r3, #20]
  1360f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360fc:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  136100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136104:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  136108:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  13610c:	e51b3010 	ldr	r3, [fp, #-16]
  136110:	e5933004 	ldr	r3, [r3, #4]
  136114:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  136118:	e3530000 	cmp	r3, #0
  13611c:	13a03001 	movne	r3, #1
  136120:	03a03000 	moveq	r3, #0
  136124:	e6ef3073 	uxtb	r3, r3
  136128:	e58d3004 	str	r3, [sp, #4]
  13612c:	e58de000 	str	lr, [sp]
  136130:	e1a0300c 	mov	r3, ip
  136134:	eb0001c7 	bl	136858 <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  136138:	e59b3008 	ldr	r3, [fp, #8]
  13613c:	e58d3000 	str	r3, [sp]
  136140:	e59b3004 	ldr	r3, [fp, #4]
  136144:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136148:	e51b1010 	ldr	r1, [fp, #-16]
  13614c:	e51b0008 	ldr	r0, [fp, #-8]
  136150:	eb00005e 	bl	1362d0 <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  136154:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136158:	e51b2010 	ldr	r2, [fp, #-16]
  13615c:	e51b100c 	ldr	r1, [fp, #-12]
  136160:	e51b0008 	ldr	r0, [fp, #-8]
  136164:	eb00002a 	bl	136214 <ENET_SetHandler>
}
  136168:	e320f000 	nop	{0}
  13616c:	e24bd004 	sub	sp, fp, #4
  136170:	e8bd8800 	pop	{fp, pc}

00136174 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  136174:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136178:	e28db000 	add	fp, sp, #0
  13617c:	e24dd00c 	sub	sp, sp, #12
  136180:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  136184:	e51b3008 	ldr	r3, [fp, #-8]
  136188:	e3a02000 	mov	r2, #0
  13618c:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  136190:	e51b3008 	ldr	r3, [fp, #-8]
  136194:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  136198:	e3c32002 	bic	r2, r3, #2
  13619c:	e51b3008 	ldr	r3, [fp, #-8]
  1361a0:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  1361a4:	e320f000 	nop	{0}
  1361a8:	e28bd000 	add	sp, fp, #0
  1361ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1361b0:	e12fff1e 	bx	lr

001361b4 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  1361b4:	e92d4800 	push	{fp, lr}
  1361b8:	e28db004 	add	fp, sp, #4
  1361bc:	e24dd010 	sub	sp, sp, #16
  1361c0:	e50b0008 	str	r0, [fp, #-8]
  1361c4:	e50b100c 	str	r1, [fp, #-12]
  1361c8:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  1361cc:	e51b3008 	ldr	r3, [fp, #-8]
  1361d0:	e3530000 	cmp	r3, #0
  1361d4:	1a000005 	bne	1361f0 <ENET_SetCallback+0x3c>
  1361d8:	e3002132 	movw	r2, #306	; 0x132
  1361dc:	e30a1284 	movw	r1, #41604	; 0xa284
  1361e0:	e3401014 	movt	r1, #20
  1361e4:	e3090f08 	movw	r0, #40712	; 0x9f08
  1361e8:	e3400014 	movt	r0, #20
  1361ec:	ebff34e9 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  1361f0:	e51b3008 	ldr	r3, [fp, #-8]
  1361f4:	e51b200c 	ldr	r2, [fp, #-12]
  1361f8:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  1361fc:	e51b3008 	ldr	r3, [fp, #-8]
  136200:	e51b2010 	ldr	r2, [fp, #-16]
  136204:	e583201c 	str	r2, [r3, #28]
}
  136208:	e320f000 	nop	{0}
  13620c:	e24bd004 	sub	sp, fp, #4
  136210:	e8bd8800 	pop	{fp, pc}

00136214 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  136214:	e92d4800 	push	{fp, lr}
  136218:	e28db004 	add	fp, sp, #4
  13621c:	e24dd018 	sub	sp, sp, #24
  136220:	e50b0010 	str	r0, [fp, #-16]
  136224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136228:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13622c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  136230:	e51b0010 	ldr	r0, [fp, #-16]
  136234:	ebfffc85 	bl	135450 <get_instance_by_base>
  136238:	e1a03000 	mov	r3, r0
  13623c:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  136240:	e3a02020 	mov	r2, #32
  136244:	e3a01000 	mov	r1, #0
  136248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13624c:	eb002c04 	bl	141264 <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  136250:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136254:	e593200c 	ldr	r2, [r3, #12]
  136258:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13625c:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  136260:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136264:	e593200c 	ldr	r2, [r3, #12]
  136268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13626c:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  136270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136274:	e5932010 	ldr	r2, [r3, #16]
  136278:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13627c:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  136280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136284:	e5932010 	ldr	r2, [r3, #16]
  136288:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13628c:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  136290:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136294:	e5932004 	ldr	r2, [r3, #4]
  136298:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13629c:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  1362a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1362a4:	e5932008 	ldr	r2, [r3, #8]
  1362a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362ac:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  1362b0:	e30e3c24 	movw	r3, #60452	; 0xec24
  1362b4:	e3403014 	movt	r3, #20
  1362b8:	e51b2008 	ldr	r2, [fp, #-8]
  1362bc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1362c0:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  1362c4:	e320f000 	nop	{0}
  1362c8:	e24bd004 	sub	sp, fp, #4
  1362cc:	e8bd8800 	pop	{fp, pc}

001362d0 <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  1362d0:	e92d4800 	push	{fp, lr}
  1362d4:	e28db004 	add	fp, sp, #4
  1362d8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1362dc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1362e0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1362e4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  1362e8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  1362ec:	e3a03000 	mov	r3, #0
  1362f0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  1362f4:	e3a03000 	mov	r3, #0
  1362f8:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  1362fc:	e3a03000 	mov	r3, #0
  136300:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  136304:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136308:	e5933000 	ldr	r3, [r3]
  13630c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  136310:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136314:	e1d330b8 	ldrh	r3, [r3, #8]
  136318:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  13631c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136320:	e2033c02 	and	r3, r3, #512	; 0x200
  136324:	e3530000 	cmp	r3, #0
  136328:	0a000005 	beq	136344 <ENET_SetMacController+0x74>
  13632c:	e51b300c 	ldr	r3, [fp, #-12]
  136330:	e30025ee 	movw	r2, #1518	; 0x5ee
  136334:	e1530002 	cmp	r3, r2
  136338:	8a000001 	bhi	136344 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  13633c:	e30035f2 	movw	r3, #1522	; 0x5f2
  136340:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136348:	e1a03e83 	lsl	r3, r3, #29
  13634c:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136354:	e1a03783 	lsl	r3, r3, #15
  136358:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  13635c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136364:	e1a03283 	lsl	r3, r3, #5
  136368:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  13636c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136374:	e1a03503 	lsl	r3, r3, #10
  136378:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  13637c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136384:	e1a03083 	lsl	r3, r3, #1
  136388:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  13638c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  136390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136394:	e1a03223 	lsr	r3, r3, #4
  136398:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  13639c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363a4:	e593300c 	ldr	r3, [r3, #12]
  1363a8:	e1a03403 	lsl	r3, r3, #8
  1363ac:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  1363b0:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363b4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1363b8:	e5922010 	ldr	r2, [r2, #16]
  1363bc:	e3520000 	cmp	r2, #0
  1363c0:	1a000001 	bne	1363cc <ENET_SetMacController+0xfc>
  1363c4:	e3a02c02 	mov	r2, #512	; 0x200
  1363c8:	ea000000 	b	1363d0 <ENET_SetMacController+0x100>
  1363cc:	e3a02000 	mov	r2, #0
  1363d0:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  1363d4:	e51b300c 	ldr	r3, [fp, #-12]
  1363d8:	e1a01803 	lsl	r1, r3, #16
  1363dc:	e3a03000 	mov	r3, #0
  1363e0:	e3433fff 	movt	r3, #16383	; 0x3fff
  1363e4:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363e8:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  1363ec:	e3833901 	orr	r3, r3, #16384	; 0x4000
  1363f0:	e3833004 	orr	r3, r3, #4
  1363f4:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  1363f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363fc:	e5933014 	ldr	r3, [r3, #20]
  136400:	e3530000 	cmp	r3, #0
  136404:	1a000002 	bne	136414 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136408:	e51b3008 	ldr	r3, [fp, #-8]
  13640c:	e3833002 	orr	r3, r3, #2
  136410:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  136414:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136418:	e5933000 	ldr	r3, [r3]
  13641c:	e2033c01 	and	r3, r3, #256	; 0x100
  136420:	e3530000 	cmp	r3, #0
  136424:	0a000009 	beq	136450 <ENET_SetMacController+0x180>
  136428:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13642c:	e593300c 	ldr	r3, [r3, #12]
  136430:	e3530000 	cmp	r3, #0
  136434:	1a000005 	bne	136450 <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  136438:	e51b3008 	ldr	r3, [fp, #-8]
  13643c:	e3833001 	orr	r3, r3, #1
  136440:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  136444:	e51b3008 	ldr	r3, [fp, #-8]
  136448:	e3c33002 	bic	r3, r3, #2
  13644c:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  136450:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136454:	e51b2008 	ldr	r2, [fp, #-8]
  136458:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  13645c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136460:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136464:	e3c33f41 	bic	r3, r3, #260	; 0x104
  136468:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  13646c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136470:	e5933014 	ldr	r3, [r3, #20]
  136474:	e1a03103 	lsl	r3, r3, #2
  136478:	e2032004 	and	r2, r3, #4
  13647c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136480:	e1a03203 	lsl	r3, r3, #4
  136484:	e2033c01 	and	r3, r3, #256	; 0x100
  136488:	e1823003 	orr	r3, r2, r3
  13648c:	e51b2010 	ldr	r2, [fp, #-16]
  136490:	e1823003 	orr	r3, r2, r3
  136494:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  136498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13649c:	e51b2010 	ldr	r2, [fp, #-16]
  1364a0:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  1364a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364a8:	e5d33019 	ldrb	r3, [r3, #25]
  1364ac:	e1a02003 	mov	r2, r3
  1364b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364b4:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  1364b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364bc:	e5d33018 	ldrb	r3, [r3, #24]
  1364c0:	e1a02003 	mov	r2, r3
  1364c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364c8:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  1364cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1364d0:	e2033001 	and	r3, r3, #1
  1364d4:	e3530000 	cmp	r3, #0
  1364d8:	0a00000a 	beq	136508 <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  1364dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364e0:	e1d331ba 	ldrh	r3, [r3, #26]
  1364e4:	e1a02003 	mov	r2, r3
  1364e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364ec:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  1364f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364f4:	e5d3301c 	ldrb	r3, [r3, #28]
  1364f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  1364fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136500:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136504:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  136508:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13650c:	e2033020 	and	r3, r3, #32
  136510:	e3530000 	cmp	r3, #0
  136514:	0a00000a 	beq	136544 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  136518:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13651c:	e5d3301e 	ldrb	r3, [r3, #30]
  136520:	e203203f 	and	r2, r3, #63	; 0x3f
  136524:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136528:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  13652c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136530:	e5d3301d 	ldrb	r3, [r3, #29]
  136534:	e1a02003 	mov	r2, r3
  136538:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13653c:	e5832190 	str	r2, [r3, #400]	; 0x190
  136540:	ea000005 	b	13655c <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136544:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136548:	e3a02c01 	mov	r2, #256	; 0x100
  13654c:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  136550:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136554:	e3a02000 	mov	r2, #0
  136558:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  13655c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136560:	e5d33019 	ldrb	r3, [r3, #25]
  136564:	e2033018 	and	r3, r3, #24
  136568:	e3530000 	cmp	r3, #0
  13656c:	0a000002 	beq	13657c <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136570:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136574:	e3a02c01 	mov	r2, #256	; 0x100
  136578:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  13657c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136580:	e5d33018 	ldrb	r3, [r3, #24]
  136584:	e2033006 	and	r3, r3, #6
  136588:	e3530000 	cmp	r3, #0
  13658c:	0a000002 	beq	13659c <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  136590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136594:	e3a02000 	mov	r2, #0
  136598:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  13659c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365a0:	e5933020 	ldr	r3, [r3, #32]
  1365a4:	e1a02003 	mov	r2, r3
  1365a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365ac:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  1365b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365b4:	e593301c 	ldr	r3, [r3, #28]
  1365b8:	e1a02003 	mov	r2, r3
  1365bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365c0:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  1365c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365c8:	e5933004 	ldr	r3, [r3, #4]
  1365cc:	e1a02203 	lsl	r2, r3, #4
  1365d0:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  1365d4:	e0033002 	and	r3, r3, r2
  1365d8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1365dc:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  1365e0:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1365e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1365e8:	eb00011e 	bl	136a68 <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  1365ec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1365f0:	ebfffda0 	bl	135c78 <ENET_GetSMI>
  1365f4:	e1a03000 	mov	r3, r0
  1365f8:	e2233001 	eor	r3, r3, #1
  1365fc:	e6ef3073 	uxtb	r3, r3
  136600:	e3530000 	cmp	r3, #0
  136604:	0a00000a 	beq	136634 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  136608:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13660c:	e5933000 	ldr	r3, [r3]
  136610:	e2033040 	and	r3, r3, #64	; 0x40
  136614:	e3530000 	cmp	r3, #0
  136618:	13a03001 	movne	r3, #1
  13661c:	03a03000 	moveq	r3, #0
  136620:	e6ef3073 	uxtb	r3, r3
  136624:	e1a02003 	mov	r2, r3
  136628:	e59b1004 	ldr	r1, [fp, #4]
  13662c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136630:	eb000171 	bl	136bfc <ENET_SetSMI>
    }
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  136634:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136638:	e5933020 	ldr	r3, [r3, #32]
  13663c:	e3530000 	cmp	r3, #0
  136640:	0a000020 	beq	1366c8 <ENET_SetMacController+0x3f8>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  136644:	e3a03405 	mov	r3, #83886080	; 0x5000000
  136648:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  13664c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136650:	e5932008 	ldr	r2, [r3, #8]
  136654:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136658:	e1e03003 	mvn	r3, r3
  13665c:	e0022003 	and	r2, r2, r3
  136660:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136664:	e5832008 	str	r2, [r3, #8]
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136668:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13666c:	e5933020 	ldr	r3, [r3, #32]
  136670:	e5d33000 	ldrb	r3, [r3]
  136674:	e1a03a03 	lsl	r3, r3, #20
  136678:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  13667c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136680:	e5922020 	ldr	r2, [r2, #32]
  136684:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136688:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  13668c:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136690:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136694:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136698:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13669c:	e5933020 	ldr	r3, [r3, #32]
  1366a0:	e5d33004 	ldrb	r3, [r3, #4]
  1366a4:	e1a03a03 	lsl	r3, r3, #20
  1366a8:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1366ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1366b0:	e5922020 	ldr	r2, [r2, #32]
  1366b4:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366b8:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1366bc:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366c4:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  1366c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366cc:	e5933004 	ldr	r3, [r3, #4]
  1366d0:	e1a01003 	mov	r1, r3
  1366d4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1366d8:	ebfffd8d 	bl	135d14 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  1366dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366e0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1366e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  1366e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1366ec:	e3833c01 	orr	r3, r3, #256	; 0x100
  1366f0:	e3833002 	orr	r3, r3, #2
  1366f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  1366f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136700:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  136704:	e320f000 	nop	{0}
  136708:	e24bd004 	sub	sp, fp, #4
  13670c:	e8bd8800 	pop	{fp, pc}

00136710 <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  136710:	e92d4800 	push	{fp, lr}
  136714:	e28db004 	add	fp, sp, #4
  136718:	e24dd018 	sub	sp, sp, #24
  13671c:	e50b0010 	str	r0, [fp, #-16]
  136720:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136724:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136728:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  13672c:	e51b3010 	ldr	r3, [fp, #-16]
  136730:	e3530000 	cmp	r3, #0
  136734:	1a000005 	bne	136750 <ENET_SetTxBufferDescriptors+0x40>
  136738:	e30021e2 	movw	r2, #482	; 0x1e2
  13673c:	e30a1298 	movw	r1, #41624	; 0xa298
  136740:	e3401014 	movt	r1, #20
  136744:	e30a00f8 	movw	r0, #41208	; 0xa0f8
  136748:	e3400014 	movt	r0, #20
  13674c:	ebff3391 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  136750:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136754:	e3530000 	cmp	r3, #0
  136758:	1a000005 	bne	136774 <ENET_SetTxBufferDescriptors+0x64>
  13675c:	e30021e3 	movw	r2, #483	; 0x1e3
  136760:	e30a1298 	movw	r1, #41624	; 0xa298
  136764:	e3401014 	movt	r1, #20
  136768:	e30a0108 	movw	r0, #41224	; 0xa108
  13676c:	e3400014 	movt	r0, #20
  136770:	ebff3388 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  136774:	e51b3010 	ldr	r3, [fp, #-16]
  136778:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  13677c:	e3a03000 	mov	r3, #0
  136780:	e50b3008 	str	r3, [fp, #-8]
  136784:	ea00002c 	b	13683c <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  136788:	e51b3008 	ldr	r3, [fp, #-8]
  13678c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136790:	e0030392 	mul	r3, r2, r3
  136794:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136798:	e0823003 	add	r3, r2, r3
  13679c:	e1a00003 	mov	r0, r3
  1367a0:	ebff3716 	bl	104400 <ueth_v2p>
  1367a4:	e1a02000 	mov	r2, r0
  1367a8:	e51b300c 	ldr	r3, [fp, #-12]
  1367ac:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  1367b0:	e51b300c 	ldr	r3, [fp, #-12]
  1367b4:	e5933004 	ldr	r3, [r3, #4]
  1367b8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1367bc:	e3a01003 	mov	r1, #3
  1367c0:	e1a00003 	mov	r0, r3
  1367c4:	ebff373a 	bl	1044b4 <ueth_remap>
  1367c8:	e1a01000 	mov	r1, r0
  1367cc:	e30c3e90 	movw	r3, #52880	; 0xce90
  1367d0:	e3403015 	movt	r3, #21
  1367d4:	e51b2008 	ldr	r2, [fp, #-8]
  1367d8:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  1367dc:	e51b300c 	ldr	r3, [fp, #-12]
  1367e0:	e3a02000 	mov	r2, #0
  1367e4:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  1367e8:	e51b300c 	ldr	r3, [fp, #-12]
  1367ec:	e3a02b01 	mov	r2, #1024	; 0x400
  1367f0:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  1367f4:	e59b3004 	ldr	r3, [fp, #4]
  1367f8:	e2433001 	sub	r3, r3, #1
  1367fc:	e51b2008 	ldr	r2, [fp, #-8]
  136800:	e1520003 	cmp	r2, r3
  136804:	1a000006 	bne	136824 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  136808:	e51b300c 	ldr	r3, [fp, #-12]
  13680c:	e1d330b2 	ldrh	r3, [r3, #2]
  136810:	e6ff3073 	uxth	r3, r3
  136814:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136818:	e6ff2073 	uxth	r2, r3
  13681c:	e51b300c 	ldr	r3, [fp, #-12]
  136820:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  136824:	e51b300c 	ldr	r3, [fp, #-12]
  136828:	e2833008 	add	r3, r3, #8
  13682c:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136830:	e51b3008 	ldr	r3, [fp, #-8]
  136834:	e2833001 	add	r3, r3, #1
  136838:	e50b3008 	str	r3, [fp, #-8]
  13683c:	e51b2008 	ldr	r2, [fp, #-8]
  136840:	e59b3004 	ldr	r3, [fp, #4]
  136844:	e1520003 	cmp	r2, r3
  136848:	3affffce 	bcc	136788 <ENET_SetTxBufferDescriptors+0x78>
    }
}
  13684c:	e320f000 	nop	{0}
  136850:	e24bd004 	sub	sp, fp, #4
  136854:	e8bd8800 	pop	{fp, pc}

00136858 <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  136858:	e92d4800 	push	{fp, lr}
  13685c:	e28db004 	add	fp, sp, #4
  136860:	e24dd018 	sub	sp, sp, #24
  136864:	e50b0010 	str	r0, [fp, #-16]
  136868:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13686c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136870:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  136874:	e51b3010 	ldr	r3, [fp, #-16]
  136878:	e3530000 	cmp	r3, #0
  13687c:	1a000005 	bne	136898 <ENET_SetRxBufferDescriptors+0x40>
  136880:	e3002209 	movw	r2, #521	; 0x209
  136884:	e30a12b4 	movw	r1, #41652	; 0xa2b4
  136888:	e3401014 	movt	r1, #20
  13688c:	e30a011c 	movw	r0, #41244	; 0xa11c
  136890:	e3400014 	movt	r0, #20
  136894:	ebff333f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  136898:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13689c:	e3530000 	cmp	r3, #0
  1368a0:	1a000005 	bne	1368bc <ENET_SetRxBufferDescriptors+0x64>
  1368a4:	e300220a 	movw	r2, #522	; 0x20a
  1368a8:	e30a12b4 	movw	r1, #41652	; 0xa2b4
  1368ac:	e3401014 	movt	r1, #20
  1368b0:	e30a012c 	movw	r0, #41260	; 0xa12c
  1368b4:	e3400014 	movt	r0, #20
  1368b8:	ebff3336 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  1368bc:	e51b3010 	ldr	r3, [fp, #-16]
  1368c0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  1368c4:	e3a03000 	mov	r3, #0
  1368c8:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  1368cc:	e3a03000 	mov	r3, #0
  1368d0:	e50b300c 	str	r3, [fp, #-12]
  1368d4:	ea00002c 	b	13698c <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  1368d8:	e51b300c 	ldr	r3, [fp, #-12]
  1368dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1368e0:	e0030392 	mul	r3, r2, r3
  1368e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1368e8:	e0823003 	add	r3, r2, r3
  1368ec:	e1a00003 	mov	r0, r3
  1368f0:	ebff36c2 	bl	104400 <ueth_v2p>
  1368f4:	e1a02000 	mov	r2, r0
  1368f8:	e51b3008 	ldr	r3, [fp, #-8]
  1368fc:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  136900:	e51b3008 	ldr	r3, [fp, #-8]
  136904:	e5933004 	ldr	r3, [r3, #4]
  136908:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13690c:	e3a01003 	mov	r1, #3
  136910:	e1a00003 	mov	r0, r3
  136914:	ebff36e6 	bl	1044b4 <ueth_remap>
  136918:	e1a01000 	mov	r1, r0
  13691c:	e30c3c90 	movw	r3, #52368	; 0xcc90
  136920:	e3403015 	movt	r3, #21
  136924:	e51b200c 	ldr	r2, [fp, #-12]
  136928:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  13692c:	e51b3008 	ldr	r3, [fp, #-8]
  136930:	e3a02000 	mov	r2, #0
  136934:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136938:	e51b3008 	ldr	r3, [fp, #-8]
  13693c:	e3a02902 	mov	r2, #32768	; 0x8000
  136940:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  136944:	e59b3004 	ldr	r3, [fp, #4]
  136948:	e2433001 	sub	r3, r3, #1
  13694c:	e51b200c 	ldr	r2, [fp, #-12]
  136950:	e1520003 	cmp	r2, r3
  136954:	1a000006 	bne	136974 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  136958:	e51b3008 	ldr	r3, [fp, #-8]
  13695c:	e1d330b2 	ldrh	r3, [r3, #2]
  136960:	e6ff3073 	uxth	r3, r3
  136964:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136968:	e6ff2073 	uxth	r2, r3
  13696c:	e51b3008 	ldr	r3, [fp, #-8]
  136970:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  136974:	e51b3008 	ldr	r3, [fp, #-8]
  136978:	e2833008 	add	r3, r3, #8
  13697c:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  136980:	e51b300c 	ldr	r3, [fp, #-12]
  136984:	e2833001 	add	r3, r3, #1
  136988:	e50b300c 	str	r3, [fp, #-12]
  13698c:	e51b200c 	ldr	r2, [fp, #-12]
  136990:	e59b3004 	ldr	r3, [fp, #4]
  136994:	e1520003 	cmp	r2, r3
  136998:	3affffce 	bcc	1368d8 <ENET_SetRxBufferDescriptors+0x80>

    }
}
  13699c:	e320f000 	nop	{0}
  1369a0:	e24bd004 	sub	sp, fp, #4
  1369a4:	e8bd8800 	pop	{fp, pc}

001369a8 <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  1369a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1369ac:	e28db000 	add	fp, sp, #0
  1369b0:	e24dd01c 	sub	sp, sp, #28
  1369b4:	e50b0010 	str	r0, [fp, #-16]
  1369b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1369bc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  1369c0:	e51b3010 	ldr	r3, [fp, #-16]
  1369c4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1369c8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  1369cc:	e51b3010 	ldr	r3, [fp, #-16]
  1369d0:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  1369d4:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  1369d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1369dc:	e3530000 	cmp	r3, #0
  1369e0:	1a000003 	bne	1369f4 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  1369e4:	e51b3008 	ldr	r3, [fp, #-8]
  1369e8:	e3833c02 	orr	r3, r3, #512	; 0x200
  1369ec:	e50b3008 	str	r3, [fp, #-8]
  1369f0:	ea000002 	b	136a00 <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  1369f4:	e51b3008 	ldr	r3, [fp, #-8]
  1369f8:	e3c33c02 	bic	r3, r3, #512	; 0x200
  1369fc:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  136a00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136a04:	e3530000 	cmp	r3, #0
  136a08:	1a000006 	bne	136a28 <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136a0c:	e51b3008 	ldr	r3, [fp, #-8]
  136a10:	e3833002 	orr	r3, r3, #2
  136a14:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136a18:	e51b300c 	ldr	r3, [fp, #-12]
  136a1c:	e3c33004 	bic	r3, r3, #4
  136a20:	e50b300c 	str	r3, [fp, #-12]
  136a24:	ea000005 	b	136a40 <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  136a28:	e51b3008 	ldr	r3, [fp, #-8]
  136a2c:	e3c33002 	bic	r3, r3, #2
  136a30:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  136a34:	e51b300c 	ldr	r3, [fp, #-12]
  136a38:	e3833004 	orr	r3, r3, #4
  136a3c:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  136a40:	e51b3010 	ldr	r3, [fp, #-16]
  136a44:	e51b2008 	ldr	r2, [fp, #-8]
  136a48:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  136a4c:	e51b3010 	ldr	r3, [fp, #-16]
  136a50:	e51b200c 	ldr	r2, [fp, #-12]
  136a54:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  136a58:	e320f000 	nop	{0}
  136a5c:	e28bd000 	add	sp, fp, #0
  136a60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136a64:	e12fff1e 	bx	lr

00136a68 <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136a68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136a6c:	e28db000 	add	fp, sp, #0
  136a70:	e24dd014 	sub	sp, sp, #20
  136a74:	e50b0010 	str	r0, [fp, #-16]
  136a78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136a7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a80:	e5d33000 	ldrb	r3, [r3]
  136a84:	e1a02c03 	lsl	r2, r3, #24
  136a88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a8c:	e2833001 	add	r3, r3, #1
  136a90:	e5d33000 	ldrb	r3, [r3]
  136a94:	e1a03803 	lsl	r3, r3, #16
  136a98:	e1822003 	orr	r2, r2, r3
  136a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136aa0:	e2833002 	add	r3, r3, #2
  136aa4:	e5d33000 	ldrb	r3, [r3]
  136aa8:	e1a03403 	lsl	r3, r3, #8
  136aac:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  136ab0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136ab4:	e2822003 	add	r2, r2, #3
  136ab8:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136abc:	e1833002 	orr	r3, r3, r2
  136ac0:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  136ac4:	e51b3010 	ldr	r3, [fp, #-16]
  136ac8:	e51b2008 	ldr	r2, [fp, #-8]
  136acc:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  136ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ad4:	e2833004 	add	r3, r3, #4
  136ad8:	e5d33000 	ldrb	r3, [r3]
  136adc:	e1a03403 	lsl	r3, r3, #8
  136ae0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136ae4:	e2822005 	add	r2, r2, #5
  136ae8:	e5d22000 	ldrb	r2, [r2]
  136aec:	e1833002 	orr	r3, r3, r2
  136af0:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  136af4:	e51b3008 	ldr	r3, [fp, #-8]
  136af8:	e1a02803 	lsl	r2, r3, #16
  136afc:	e51b3010 	ldr	r3, [fp, #-16]
  136b00:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136b04:	e320f000 	nop	{0}
  136b08:	e28bd000 	add	sp, fp, #0
  136b0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136b10:	e12fff1e 	bx	lr

00136b14 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136b14:	e92d4800 	push	{fp, lr}
  136b18:	e28db004 	add	fp, sp, #4
  136b1c:	e24dd010 	sub	sp, sp, #16
  136b20:	e50b0010 	str	r0, [fp, #-16]
  136b24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136b28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b2c:	e3530000 	cmp	r3, #0
  136b30:	1a000005 	bne	136b4c <ENET_GetMacAddr+0x38>
  136b34:	e3002259 	movw	r2, #601	; 0x259
  136b38:	e30a12d0 	movw	r1, #41680	; 0xa2d0
  136b3c:	e3401014 	movt	r1, #20
  136b40:	e3090fa0 	movw	r0, #40864	; 0x9fa0
  136b44:	e3400014 	movt	r0, #20
  136b48:	ebff3292 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  136b4c:	e51b3010 	ldr	r3, [fp, #-16]
  136b50:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  136b54:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  136b58:	e51b3008 	ldr	r3, [fp, #-8]
  136b5c:	e1a03c23 	lsr	r3, r3, #24
  136b60:	e6ef2073 	uxtb	r2, r3
  136b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b68:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  136b6c:	e51b3008 	ldr	r3, [fp, #-8]
  136b70:	e1a02823 	lsr	r2, r3, #16
  136b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b78:	e2833001 	add	r3, r3, #1
  136b7c:	e6ef2072 	uxtb	r2, r2
  136b80:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  136b84:	e51b3008 	ldr	r3, [fp, #-8]
  136b88:	e1a02423 	lsr	r2, r3, #8
  136b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b90:	e2833002 	add	r3, r3, #2
  136b94:	e6ef2072 	uxtb	r2, r2
  136b98:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ba0:	e2833003 	add	r3, r3, #3
  136ba4:	e51b2008 	ldr	r2, [fp, #-8]
  136ba8:	e6ef2072 	uxtb	r2, r2
  136bac:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  136bb0:	e51b3010 	ldr	r3, [fp, #-16]
  136bb4:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136bb8:	e1a03823 	lsr	r3, r3, #16
  136bbc:	e6ff3073 	uxth	r3, r3
  136bc0:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  136bc4:	e51b3008 	ldr	r3, [fp, #-8]
  136bc8:	e1a02423 	lsr	r2, r3, #8
  136bcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bd0:	e2833004 	add	r3, r3, #4
  136bd4:	e6ef2072 	uxtb	r2, r2
  136bd8:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  136bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136be0:	e2833005 	add	r3, r3, #5
  136be4:	e51b2008 	ldr	r2, [fp, #-8]
  136be8:	e6ef2072 	uxtb	r2, r2
  136bec:	e5c32000 	strb	r2, [r3]
}
  136bf0:	e320f000 	nop	{0}
  136bf4:	e24bd004 	sub	sp, fp, #4
  136bf8:	e8bd8800 	pop	{fp, pc}

00136bfc <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  136bfc:	e92d4810 	push	{r4, fp, lr}
  136c00:	e28db008 	add	fp, sp, #8
  136c04:	e24dd024 	sub	sp, sp, #36	; 0x24
  136c08:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136c0c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  136c10:	e1a03002 	mov	r3, r2
  136c14:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136c18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136c1c:	e3530000 	cmp	r3, #0
  136c20:	1a000005 	bne	136c3c <ENET_SetSMI+0x40>
  136c24:	e3a02f9b 	mov	r2, #620	; 0x26c
  136c28:	e30a12e0 	movw	r1, #41696	; 0xa2e0
  136c2c:	e3401014 	movt	r1, #20
  136c30:	e30a0140 	movw	r0, #41280	; 0xa140
  136c34:	e3400014 	movt	r0, #20
  136c38:	ebff3256 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  136c3c:	e3a03000 	mov	r3, #0
  136c40:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  136c44:	e3a03000 	mov	r3, #0
  136c48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  136c4c:	e3a03000 	mov	r3, #0
  136c50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  136c54:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  136c58:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  136c5c:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  136c60:	e0832392 	umull	r2, r3, r2, r3
  136c64:	e1a03aa3 	lsr	r3, r3, #21
  136c68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  136c6c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c70:	e3a00cca 	mov	r0, #51712	; 0xca00
  136c74:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136c78:	eb0006fa 	bl	138868 <__udivsi3>
  136c7c:	e1a03000 	mov	r3, r0
  136c80:	e2834009 	add	r4, r3, #9
  136c84:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c88:	e3a00cca 	mov	r0, #51712	; 0xca00
  136c8c:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136c90:	eb0006f4 	bl	138868 <__udivsi3>
  136c94:	e1a03000 	mov	r3, r0
  136c98:	e1a01003 	mov	r1, r3
  136c9c:	e1a00004 	mov	r0, r4
  136ca0:	eb0006f0 	bl	138868 <__udivsi3>
  136ca4:	e1a03000 	mov	r3, r0
  136ca8:	e2433001 	sub	r3, r3, #1
  136cac:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136cb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cb4:	e1a03083 	lsl	r3, r3, #1
  136cb8:	e203207e 	and	r2, r3, #126	; 0x7e
  136cbc:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136cc0:	e1a03383 	lsl	r3, r3, #7
  136cc4:	e6ef3073 	uxtb	r3, r3
  136cc8:	e1822003 	orr	r2, r2, r3
  136ccc:	e51b3010 	ldr	r3, [fp, #-16]
  136cd0:	e1a03403 	lsl	r3, r3, #8
  136cd4:	e2033c07 	and	r3, r3, #1792	; 0x700
  136cd8:	e1823003 	orr	r3, r2, r3
  136cdc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136ce0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136ce4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136ce8:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  136cec:	e320f000 	nop	{0}
  136cf0:	e24bd008 	sub	sp, fp, #8
  136cf4:	e8bd8810 	pop	{r4, fp, pc}

00136cf8 <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136cf8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136cfc:	e28db000 	add	fp, sp, #0
  136d00:	e24dd01c 	sub	sp, sp, #28
  136d04:	e50b0010 	str	r0, [fp, #-16]
  136d08:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136d0c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136d10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136d14:	e3a03000 	mov	r3, #0
  136d18:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136d1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136d20:	e1a03e03 	lsl	r3, r3, #28
  136d24:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136d28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d2c:	e1a03b83 	lsl	r3, r3, #23
  136d30:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136d34:	e1822003 	orr	r2, r2, r3
  136d38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136d3c:	e1a03903 	lsl	r3, r3, #18
  136d40:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136d44:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136d48:	e59b3004 	ldr	r3, [fp, #4]
  136d4c:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136d50:	e1823003 	orr	r3, r2, r3
  136d54:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136d58:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136d5c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136d60:	e51b3010 	ldr	r3, [fp, #-16]
  136d64:	e51b2008 	ldr	r2, [fp, #-8]
  136d68:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136d6c:	e320f000 	nop	{0}
  136d70:	e28bd000 	add	sp, fp, #0
  136d74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136d78:	e12fff1e 	bx	lr

00136d7c <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  136d7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136d80:	e28db000 	add	fp, sp, #0
  136d84:	e24dd01c 	sub	sp, sp, #28
  136d88:	e50b0010 	str	r0, [fp, #-16]
  136d8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136d90:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136d94:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136d98:	e3a03000 	mov	r3, #0
  136d9c:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136da0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136da4:	e1a03e03 	lsl	r3, r3, #28
  136da8:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136dac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136db0:	e1a03b83 	lsl	r3, r3, #23
  136db4:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136db8:	e1822003 	orr	r2, r2, r3
  136dbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136dc0:	e1a03903 	lsl	r3, r3, #18
  136dc4:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136dc8:	e1823003 	orr	r3, r2, r3
  136dcc:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136dd0:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136dd4:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136dd8:	e51b3010 	ldr	r3, [fp, #-16]
  136ddc:	e51b2008 	ldr	r2, [fp, #-8]
  136de0:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136de4:	e320f000 	nop	{0}
  136de8:	e28bd000 	add	sp, fp, #0
  136dec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136df0:	e12fff1e 	bx	lr

00136df4 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136df4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136df8:	e28db000 	add	fp, sp, #0
  136dfc:	e24dd01c 	sub	sp, sp, #28
  136e00:	e50b0010 	str	r0, [fp, #-16]
  136e04:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136e08:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136e0c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136e10:	e3a03000 	mov	r3, #0
  136e14:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136e18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136e1c:	e1a03823 	lsr	r3, r3, #16
  136e20:	e6ff3073 	uxth	r3, r3
  136e24:	e203301f 	and	r3, r3, #31
  136e28:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136e2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136e30:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e38:	e1a03b83 	lsl	r3, r3, #23
  136e3c:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e40:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e44:	e1a03903 	lsl	r3, r3, #18
  136e48:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e4c:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136e50:	e15b30bc 	ldrh	r3, [fp, #-12]
  136e54:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e58:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136e5c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136e60:	e51b3010 	ldr	r3, [fp, #-16]
  136e64:	e51b2008 	ldr	r2, [fp, #-8]
  136e68:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e70:	e1a03b83 	lsl	r3, r3, #23
  136e74:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e78:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e7c:	e1a03903 	lsl	r3, r3, #18
  136e80:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e84:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  136e88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136e8c:	e6ff3073 	uxth	r3, r3
  136e90:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e94:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  136e98:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136e9c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136ea0:	e51b3010 	ldr	r3, [fp, #-16]
  136ea4:	e51b2008 	ldr	r2, [fp, #-8]
  136ea8:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136eac:	e320f000 	nop	{0}
  136eb0:	e28bd000 	add	sp, fp, #0
  136eb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136eb8:	e12fff1e 	bx	lr

00136ebc <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  136ebc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136ec0:	e28db000 	add	fp, sp, #0
  136ec4:	e24dd01c 	sub	sp, sp, #28
  136ec8:	e50b0010 	str	r0, [fp, #-16]
  136ecc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ed0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136ed4:	e3a03000 	mov	r3, #0
  136ed8:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136edc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136ee0:	e1a03823 	lsr	r3, r3, #16
  136ee4:	e6ff3073 	uxth	r3, r3
  136ee8:	e203301f 	and	r3, r3, #31
  136eec:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136ef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136ef4:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136efc:	e1a03b83 	lsl	r3, r3, #23
  136f00:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136f04:	e15b30ba 	ldrh	r3, [fp, #-10]
  136f08:	e1a03903 	lsl	r3, r3, #18
  136f0c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f10:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136f14:	e15b30bc 	ldrh	r3, [fp, #-12]
  136f18:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f1c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f20:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136f24:	e51b3010 	ldr	r3, [fp, #-16]
  136f28:	e51b2008 	ldr	r2, [fp, #-8]
  136f2c:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f34:	e1a03b83 	lsl	r3, r3, #23
  136f38:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136f3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136f40:	e1a03903 	lsl	r3, r3, #18
  136f44:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f48:	e1823003 	orr	r3, r2, r3
  136f4c:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  136f50:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f54:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  136f58:	e51b3010 	ldr	r3, [fp, #-16]
  136f5c:	e51b2008 	ldr	r2, [fp, #-8]
  136f60:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136f64:	e320f000 	nop	{0}
  136f68:	e28bd000 	add	sp, fp, #0
  136f6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136f70:	e12fff1e 	bx	lr

00136f74 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  136f74:	e92d4800 	push	{fp, lr}
  136f78:	e28db004 	add	fp, sp, #4
  136f7c:	e24dd010 	sub	sp, sp, #16
  136f80:	e50b0010 	str	r0, [fp, #-16]
  136f84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  136f88:	e51b3010 	ldr	r3, [fp, #-16]
  136f8c:	e3530000 	cmp	r3, #0
  136f90:	1a000005 	bne	136fac <ENET_GetRxErrBeforeReadFrame+0x38>
  136f94:	e3a02fae 	mov	r2, #696	; 0x2b8
  136f98:	e30a12ec 	movw	r1, #41708	; 0xa2ec
  136f9c:	e3401014 	movt	r1, #20
  136fa0:	e3090f08 	movw	r0, #40712	; 0x9f08
  136fa4:	e3400014 	movt	r0, #20
  136fa8:	ebff317a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136fac:	e51b3010 	ldr	r3, [fp, #-16]
  136fb0:	e5933004 	ldr	r3, [r3, #4]
  136fb4:	e3530000 	cmp	r3, #0
  136fb8:	1a000005 	bne	136fd4 <ENET_GetRxErrBeforeReadFrame+0x60>
  136fbc:	e30022b9 	movw	r2, #697	; 0x2b9
  136fc0:	e30a12ec 	movw	r1, #41708	; 0xa2ec
  136fc4:	e3401014 	movt	r1, #20
  136fc8:	e30a014c 	movw	r0, #41292	; 0xa14c
  136fcc:	e3400014 	movt	r0, #20
  136fd0:	ebff3170 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136fd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136fd8:	e3530000 	cmp	r3, #0
  136fdc:	1a000005 	bne	136ff8 <ENET_GetRxErrBeforeReadFrame+0x84>
  136fe0:	e30022ba 	movw	r2, #698	; 0x2ba
  136fe4:	e30a12ec 	movw	r1, #41708	; 0xa2ec
  136fe8:	e3401014 	movt	r1, #20
  136fec:	e30a0160 	movw	r0, #41312	; 0xa160
  136ff0:	e3400014 	movt	r0, #20
  136ff4:	ebff3167 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  136ff8:	e3a03000 	mov	r3, #0
  136ffc:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  137000:	e51b3010 	ldr	r3, [fp, #-16]
  137004:	e5933004 	ldr	r3, [r3, #4]
  137008:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  13700c:	e51b3008 	ldr	r3, [fp, #-8]
  137010:	e1d330b2 	ldrh	r3, [r3, #2]
  137014:	e6ff3073 	uxth	r3, r3
  137018:	e2033b02 	and	r3, r3, #2048	; 0x800
  13701c:	e3530000 	cmp	r3, #0
  137020:	0a000030 	beq	1370e8 <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  137024:	e51b3008 	ldr	r3, [fp, #-8]
  137028:	e1d330b2 	ldrh	r3, [r3, #2]
  13702c:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  137030:	e15b30ba 	ldrh	r3, [fp, #-10]
  137034:	e2033001 	and	r3, r3, #1
  137038:	e3530000 	cmp	r3, #0
  13703c:	0a000004 	beq	137054 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  137040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137044:	e5933010 	ldr	r3, [r3, #16]
  137048:	e2832001 	add	r2, r3, #1
  13704c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137050:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  137054:	e15b30ba 	ldrh	r3, [fp, #-10]
  137058:	e2033002 	and	r3, r3, #2
  13705c:	e3530000 	cmp	r3, #0
  137060:	0a000004 	beq	137078 <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  137064:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137068:	e593300c 	ldr	r3, [r3, #12]
  13706c:	e2832001 	add	r2, r3, #1
  137070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137074:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  137078:	e15b30ba 	ldrh	r3, [fp, #-10]
  13707c:	e2033020 	and	r3, r3, #32
  137080:	e3530000 	cmp	r3, #0
  137084:	0a000004 	beq	13709c <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  137088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13708c:	e5933000 	ldr	r3, [r3]
  137090:	e2832001 	add	r2, r3, #1
  137094:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137098:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  13709c:	e15b30ba 	ldrh	r3, [fp, #-10]
  1370a0:	e2033010 	and	r3, r3, #16
  1370a4:	e3530000 	cmp	r3, #0
  1370a8:	0a000004 	beq	1370c0 <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  1370ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370b0:	e5933004 	ldr	r3, [r3, #4]
  1370b4:	e2832001 	add	r2, r3, #1
  1370b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370bc:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  1370c0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1370c4:	e2033004 	and	r3, r3, #4
  1370c8:	e3530000 	cmp	r3, #0
  1370cc:	0a000018 	beq	137134 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  1370d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370d4:	e5933008 	ldr	r3, [r3, #8]
  1370d8:	e2832001 	add	r2, r3, #1
  1370dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370e0:	e5832008 	str	r2, [r3, #8]
            }
            break;
  1370e4:	ea000012 	b	137134 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  1370e8:	e51b3008 	ldr	r3, [fp, #-8]
  1370ec:	e1d330b2 	ldrh	r3, [r3, #2]
  1370f0:	e6ff3073 	uxth	r3, r3
  1370f4:	e2033a02 	and	r3, r3, #8192	; 0x2000
  1370f8:	e3530000 	cmp	r3, #0
  1370fc:	0a000003 	beq	137110 <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  137100:	e51b3010 	ldr	r3, [fp, #-16]
  137104:	e5933000 	ldr	r3, [r3]
  137108:	e50b3008 	str	r3, [fp, #-8]
  13710c:	ea000002 	b	13711c <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  137110:	e51b3008 	ldr	r3, [fp, #-8]
  137114:	e2833008 	add	r3, r3, #8
  137118:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  13711c:	e51b3010 	ldr	r3, [fp, #-16]
  137120:	e5933004 	ldr	r3, [r3, #4]
  137124:	e51b2008 	ldr	r2, [fp, #-8]
  137128:	e1520003 	cmp	r2, r3
  13712c:	1affffb6 	bne	13700c <ENET_GetRxErrBeforeReadFrame+0x98>
}
  137130:	ea000000 	b	137138 <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  137134:	e320f000 	nop	{0}
}
  137138:	e320f000 	nop	{0}
  13713c:	e24bd004 	sub	sp, fp, #4
  137140:	e8bd8800 	pop	{fp, pc}

00137144 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  137144:	e92d4800 	push	{fp, lr}
  137148:	e28db004 	add	fp, sp, #4
  13714c:	e24dd018 	sub	sp, sp, #24
  137150:	e50b0010 	str	r0, [fp, #-16]
  137154:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137158:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13715c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137164:	e3530000 	cmp	r3, #0
  137168:	1a000005 	bne	137184 <ENET_ReadFrame+0x40>
  13716c:	e3a02fbd 	mov	r2, #756	; 0x2f4
  137170:	e30a130c 	movw	r1, #41740	; 0xa30c
  137174:	e3401014 	movt	r1, #20
  137178:	e3090f08 	movw	r0, #40712	; 0x9f08
  13717c:	e3400014 	movt	r0, #20
  137180:	ebff3104 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  137184:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137188:	e5933004 	ldr	r3, [r3, #4]
  13718c:	e3530000 	cmp	r3, #0
  137190:	1a000005 	bne	1371ac <ENET_ReadFrame+0x68>
  137194:	e30022f5 	movw	r2, #757	; 0x2f5
  137198:	e30a130c 	movw	r1, #41740	; 0xa30c
  13719c:	e3401014 	movt	r1, #20
  1371a0:	e30a014c 	movw	r0, #41292	; 0xa14c
  1371a4:	e3400014 	movt	r0, #20
  1371a8:	ebff30fa 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  1371ac:	e59b3004 	ldr	r3, [fp, #4]
  1371b0:	e3530000 	cmp	r3, #0
  1371b4:	1a000005 	bne	1371d0 <ENET_ReadFrame+0x8c>
  1371b8:	e30022f6 	movw	r2, #758	; 0x2f6
  1371bc:	e30a130c 	movw	r1, #41740	; 0xa30c
  1371c0:	e3401014 	movt	r1, #20
  1371c4:	e30a0170 	movw	r0, #41328	; 0xa170
  1371c8:	e3400014 	movt	r0, #20
  1371cc:	ebff30f1 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  1371d0:	e59b3004 	ldr	r3, [fp, #4]
  1371d4:	e3a02000 	mov	r2, #0
  1371d8:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1371dc:	e3a03b22 	mov	r3, #34816	; 0x8800
  1371e0:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  1371e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1371e8:	e5933004 	ldr	r3, [r3, #4]
  1371ec:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  1371f0:	e51b300c 	ldr	r3, [fp, #-12]
  1371f4:	e1d330b2 	ldrh	r3, [r3, #2]
  1371f8:	e6ff3073 	uxth	r3, r3
  1371fc:	e6bf3073 	sxth	r3, r3
  137200:	e3530000 	cmp	r3, #0
  137204:	aa000001 	bge	137210 <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  137208:	e3003fa2 	movw	r3, #4002	; 0xfa2
  13720c:	ea00005c 	b	137384 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  137210:	e51b300c 	ldr	r3, [fp, #-12]
  137214:	e1d330b2 	ldrh	r3, [r3, #2]
  137218:	e6ff2073 	uxth	r2, r3
  13721c:	e15b30b6 	ldrh	r3, [fp, #-6]
  137220:	e0033002 	and	r3, r3, r2
  137224:	e6ff3073 	uxth	r3, r3
  137228:	e3530b02 	cmp	r3, #2048	; 0x800
  13722c:	1a00003a 	bne	13731c <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  137230:	e51b300c 	ldr	r3, [fp, #-12]
  137234:	e1d330b0 	ldrh	r3, [r3]
  137238:	e6ff2073 	uxth	r2, r3
  13723c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137240:	e1d330b8 	ldrh	r3, [r3, #8]
  137244:	e1520003 	cmp	r2, r3
  137248:	8a000018 	bhi	1372b0 <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  13724c:	e51b300c 	ldr	r3, [fp, #-12]
  137250:	e1d330b0 	ldrh	r3, [r3]
  137254:	e6ff2073 	uxth	r2, r3
  137258:	e59b3004 	ldr	r3, [fp, #4]
  13725c:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  137260:	e51b300c 	ldr	r3, [fp, #-12]
  137264:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  137268:	e5922000 	ldr	r2, [r2]
  13726c:	e0433002 	sub	r3, r3, r2
  137270:	e1a031c3 	asr	r3, r3, #3
  137274:	e1a02003 	mov	r2, r3
  137278:	e30c3c90 	movw	r3, #52368	; 0xcc90
  13727c:	e3403015 	movt	r3, #21
  137280:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  137284:	e51b300c 	ldr	r3, [fp, #-12]
  137288:	e1d330b0 	ldrh	r3, [r3]
  13728c:	e6ff3073 	uxth	r3, r3
  137290:	e1a02003 	mov	r2, r3
  137294:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  137298:	ebff3018 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  13729c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1372a0:	e51b0010 	ldr	r0, [fp, #-16]
  1372a4:	eb000039 	bl	137390 <ENET_UpdateReadBuffers>
                return kStatus_Success;
  1372a8:	e3a03000 	mov	r3, #0
  1372ac:	ea000034 	b	137384 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  1372b0:	e30a0178 	movw	r0, #41336	; 0xa178
  1372b4:	e3400014 	movt	r0, #20
  1372b8:	ebff2f95 	bl	103114 <rt_kprintf>
  1372bc:	e51b300c 	ldr	r3, [fp, #-12]
  1372c0:	e1d330b2 	ldrh	r3, [r3, #2]
  1372c4:	e6ff3073 	uxth	r3, r3
  1372c8:	e1a01003 	mov	r1, r3
  1372cc:	e51b300c 	ldr	r3, [fp, #-12]
  1372d0:	e1d330b0 	ldrh	r3, [r3]
  1372d4:	e6ff3073 	uxth	r3, r3
  1372d8:	e1a02003 	mov	r2, r3
  1372dc:	e30a018c 	movw	r0, #41356	; 0xa18c
  1372e0:	e3400014 	movt	r0, #20
  1372e4:	ebff2f8a 	bl	103114 <rt_kprintf>
  1372e8:	e30a01c4 	movw	r0, #41412	; 0xa1c4
  1372ec:	e3400014 	movt	r0, #20
  1372f0:	ebff2f87 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  1372f4:	e51b300c 	ldr	r3, [fp, #-12]
  1372f8:	e1d330b0 	ldrh	r3, [r3]
  1372fc:	e6ff2073 	uxth	r2, r3
  137300:	e59b3004 	ldr	r3, [fp, #4]
  137304:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  137308:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13730c:	e51b0010 	ldr	r0, [fp, #-16]
  137310:	eb00001e 	bl	137390 <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  137314:	e3a03efa 	mov	r3, #4000	; 0xfa0
  137318:	ea000019 	b	137384 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  13731c:	e30a0178 	movw	r0, #41336	; 0xa178
  137320:	e3400014 	movt	r0, #20
  137324:	ebff2f7a 	bl	103114 <rt_kprintf>
  137328:	e51b300c 	ldr	r3, [fp, #-12]
  13732c:	e1d330b2 	ldrh	r3, [r3, #2]
  137330:	e6ff3073 	uxth	r3, r3
  137334:	e1a01003 	mov	r1, r3
  137338:	e51b300c 	ldr	r3, [fp, #-12]
  13733c:	e1d330b0 	ldrh	r3, [r3]
  137340:	e6ff3073 	uxth	r3, r3
  137344:	e1a02003 	mov	r2, r3
  137348:	e30a01cc 	movw	r0, #41420	; 0xa1cc
  13734c:	e3400014 	movt	r0, #20
  137350:	ebff2f6f 	bl	103114 <rt_kprintf>
  137354:	e30a01c4 	movw	r0, #41412	; 0xa1c4
  137358:	e3400014 	movt	r0, #20
  13735c:	ebff2f6c 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  137360:	e51b300c 	ldr	r3, [fp, #-12]
  137364:	e1d330b0 	ldrh	r3, [r3]
  137368:	e6ff2073 	uxth	r2, r3
  13736c:	e59b3004 	ldr	r3, [fp, #4]
  137370:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  137374:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137378:	e51b0010 	ldr	r0, [fp, #-16]
  13737c:	eb000003 	bl	137390 <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  137380:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  137384:	e1a00003 	mov	r0, r3
  137388:	e24bd004 	sub	sp, fp, #4
  13738c:	e8bd8800 	pop	{fp, pc}

00137390 <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  137390:	e92d4800 	push	{fp, lr}
  137394:	e28db004 	add	fp, sp, #4
  137398:	e24dd008 	sub	sp, sp, #8
  13739c:	e50b0008 	str	r0, [fp, #-8]
  1373a0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  1373a4:	e51b300c 	ldr	r3, [fp, #-12]
  1373a8:	e3530000 	cmp	r3, #0
  1373ac:	1a000005 	bne	1373c8 <ENET_UpdateReadBuffers+0x38>
  1373b0:	e3a02fca 	mov	r2, #808	; 0x328
  1373b4:	e30a131c 	movw	r1, #41756	; 0xa31c
  1373b8:	e3401014 	movt	r1, #20
  1373bc:	e3090f08 	movw	r0, #40712	; 0x9f08
  1373c0:	e3400014 	movt	r0, #20
  1373c4:	ebff3073 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1373c8:	e51b300c 	ldr	r3, [fp, #-12]
  1373cc:	e5933004 	ldr	r3, [r3, #4]
  1373d0:	e1d330b2 	ldrh	r3, [r3, #2]
  1373d4:	e6ff2073 	uxth	r2, r3
  1373d8:	e51b300c 	ldr	r3, [fp, #-12]
  1373dc:	e5933004 	ldr	r3, [r3, #4]
  1373e0:	e2022a02 	and	r2, r2, #8192	; 0x2000
  1373e4:	e6ff2072 	uxth	r2, r2
  1373e8:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1373ec:	e51b300c 	ldr	r3, [fp, #-12]
  1373f0:	e5933004 	ldr	r3, [r3, #4]
  1373f4:	e1d330b2 	ldrh	r3, [r3, #2]
  1373f8:	e6ff3073 	uxth	r3, r3
  1373fc:	e51b200c 	ldr	r2, [fp, #-12]
  137400:	e5922004 	ldr	r2, [r2, #4]
  137404:	e1e03883 	mvn	r3, r3, lsl #17
  137408:	e1e038a3 	mvn	r3, r3, lsr #17
  13740c:	e6ff3073 	uxth	r3, r3
  137410:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  137414:	e51b300c 	ldr	r3, [fp, #-12]
  137418:	e5933004 	ldr	r3, [r3, #4]
  13741c:	e1d330b2 	ldrh	r3, [r3, #2]
  137420:	e6ff3073 	uxth	r3, r3
  137424:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137428:	e3530000 	cmp	r3, #0
  13742c:	0a000004 	beq	137444 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  137430:	e51b300c 	ldr	r3, [fp, #-12]
  137434:	e5932000 	ldr	r2, [r3]
  137438:	e51b300c 	ldr	r3, [fp, #-12]
  13743c:	e5832004 	str	r2, [r3, #4]
  137440:	ea000004 	b	137458 <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  137444:	e51b300c 	ldr	r3, [fp, #-12]
  137448:	e5933004 	ldr	r3, [r3, #4]
  13744c:	e2832008 	add	r2, r3, #8
  137450:	e51b300c 	ldr	r3, [fp, #-12]
  137454:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  137458:	e51b3008 	ldr	r3, [fp, #-8]
  13745c:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137460:	e5832010 	str	r2, [r3, #16]
}
  137464:	e320f000 	nop	{0}
  137468:	e24bd004 	sub	sp, fp, #4
  13746c:	e8bd8800 	pop	{fp, pc}

00137470 <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  137470:	e92d4800 	push	{fp, lr}
  137474:	e28db004 	add	fp, sp, #4
  137478:	e24dd018 	sub	sp, sp, #24
  13747c:	e50b0010 	str	r0, [fp, #-16]
  137480:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137484:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137488:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  13748c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137490:	e3530000 	cmp	r3, #0
  137494:	1a000005 	bne	1374b0 <ENET_SendFrame+0x40>
  137498:	e300233d 	movw	r2, #829	; 0x33d
  13749c:	e30a1334 	movw	r1, #41780	; 0xa334
  1374a0:	e3401014 	movt	r1, #20
  1374a4:	e3090f08 	movw	r0, #40712	; 0x9f08
  1374a8:	e3400014 	movt	r0, #20
  1374ac:	ebff3039 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  1374b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1374b4:	e593300c 	ldr	r3, [r3, #12]
  1374b8:	e3530000 	cmp	r3, #0
  1374bc:	1a000005 	bne	1374d8 <ENET_SendFrame+0x68>
  1374c0:	e300233e 	movw	r2, #830	; 0x33e
  1374c4:	e30a1334 	movw	r1, #41780	; 0xa334
  1374c8:	e3401014 	movt	r1, #20
  1374cc:	e30a0204 	movw	r0, #41476	; 0xa204
  1374d0:	e3400014 	movt	r0, #20
  1374d4:	ebff302f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  1374d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374dc:	e3530000 	cmp	r3, #0
  1374e0:	1a000005 	bne	1374fc <ENET_SendFrame+0x8c>
  1374e4:	e300233f 	movw	r2, #831	; 0x33f
  1374e8:	e30a1334 	movw	r1, #41780	; 0xa334
  1374ec:	e3401014 	movt	r1, #20
  1374f0:	e30a0218 	movw	r0, #41496	; 0xa218
  1374f4:	e3400014 	movt	r0, #20
  1374f8:	ebff3026 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  1374fc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137500:	e30025ee 	movw	r2, #1518	; 0x5ee
  137504:	e1530002 	cmp	r3, r2
  137508:	9a000005 	bls	137524 <ENET_SendFrame+0xb4>
  13750c:	e3a02d0d 	mov	r2, #832	; 0x340
  137510:	e30a1334 	movw	r1, #41780	; 0xa334
  137514:	e3401014 	movt	r1, #20
  137518:	e30a0220 	movw	r0, #41504	; 0xa220
  13751c:	e3400014 	movt	r0, #20
  137520:	ebff301c 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  137524:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137528:	e593300c 	ldr	r3, [r3, #12]
  13752c:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  137530:	e51b3008 	ldr	r3, [fp, #-8]
  137534:	e1d330b2 	ldrh	r3, [r3, #2]
  137538:	e6ff3073 	uxth	r3, r3
  13753c:	e6bf3073 	sxth	r3, r3
  137540:	e3530000 	cmp	r3, #0
  137544:	aa000001 	bge	137550 <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  137548:	e3003fa3 	movw	r3, #4003	; 0xfa3
  13754c:	ea00004b 	b	137680 <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  137550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137554:	e5932014 	ldr	r2, [r3, #20]
  137558:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  13755c:	e1520003 	cmp	r2, r3
  137560:	3a000045 	bcc	13767c <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  137564:	e51b3008 	ldr	r3, [fp, #-8]
  137568:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13756c:	e5922008 	ldr	r2, [r2, #8]
  137570:	e0433002 	sub	r3, r3, r2
  137574:	e1a031c3 	asr	r3, r3, #3
  137578:	e1a02003 	mov	r2, r3
  13757c:	e30c3e90 	movw	r3, #52880	; 0xce90
  137580:	e3403015 	movt	r3, #21
  137584:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  137588:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  13758c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  137590:	e1a00003 	mov	r0, r3
  137594:	ebff2f59 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  137598:	e51b3008 	ldr	r3, [fp, #-8]
  13759c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1375a0:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  1375a4:	e59b3004 	ldr	r3, [fp, #4]
  1375a8:	e3530000 	cmp	r3, #0
  1375ac:	0a000009 	beq	1375d8 <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  1375b0:	e51b3008 	ldr	r3, [fp, #-8]
  1375b4:	e1d330b2 	ldrh	r3, [r3, #2]
  1375b8:	e6ff2073 	uxth	r2, r3
  1375bc:	e3a03b22 	mov	r3, #34816	; 0x8800
  1375c0:	e34f3fff 	movt	r3, #65535	; 0xffff
  1375c4:	e1823003 	orr	r3, r2, r3
  1375c8:	e6ff2073 	uxth	r2, r3
  1375cc:	e51b3008 	ldr	r3, [fp, #-8]
  1375d0:	e1c320b2 	strh	r2, [r3, #2]
  1375d4:	ea00000e 	b	137614 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  1375d8:	e51b3008 	ldr	r3, [fp, #-8]
  1375dc:	e1d330b2 	ldrh	r3, [r3, #2]
  1375e0:	e6ff3073 	uxth	r3, r3
  1375e4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1375e8:	e6ff2073 	uxth	r2, r3
  1375ec:	e51b3008 	ldr	r3, [fp, #-8]
  1375f0:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  1375f4:	e51b3008 	ldr	r3, [fp, #-8]
  1375f8:	e1d330b2 	ldrh	r3, [r3, #2]
  1375fc:	e6ff3073 	uxth	r3, r3
  137600:	e1e03883 	mvn	r3, r3, lsl #17
  137604:	e1e038a3 	mvn	r3, r3, lsr #17
  137608:	e6ff2073 	uxth	r2, r3
  13760c:	e51b3008 	ldr	r3, [fp, #-8]
  137610:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  137614:	e51b3010 	ldr	r3, [fp, #-16]
  137618:	e3a02401 	mov	r2, #16777216	; 0x1000000
  13761c:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  137620:	e320f000 	nop	{0}
  137624:	e51b3010 	ldr	r3, [fp, #-16]
  137628:	e5933014 	ldr	r3, [r3, #20]
  13762c:	e3530000 	cmp	r3, #0
  137630:	1afffffb 	bne	137624 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  137634:	e51b3008 	ldr	r3, [fp, #-8]
  137638:	e1d330b2 	ldrh	r3, [r3, #2]
  13763c:	e6ff3073 	uxth	r3, r3
  137640:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137644:	e3530000 	cmp	r3, #0
  137648:	0a000004 	beq	137660 <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  13764c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137650:	e5932008 	ldr	r2, [r3, #8]
  137654:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137658:	e583200c 	str	r2, [r3, #12]
  13765c:	ea000004 	b	137674 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  137660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137664:	e593300c 	ldr	r3, [r3, #12]
  137668:	e2832008 	add	r2, r3, #8
  13766c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137670:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  137674:	e3a03000 	mov	r3, #0
  137678:	ea000000 	b	137680 <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  13767c:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  137680:	e1a00003 	mov	r0, r3
  137684:	e24bd004 	sub	sp, fp, #4
  137688:	e8bd8800 	pop	{fp, pc}

0013768c <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  13768c:	e92d4800 	push	{fp, lr}
  137690:	e28db004 	add	fp, sp, #4
  137694:	e24dd018 	sub	sp, sp, #24
  137698:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13769c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  1376a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1376a4:	e3530000 	cmp	r3, #0
  1376a8:	1a000005 	bne	1376c4 <ENET_AddMulticastGroup+0x38>
  1376ac:	e3a02fdd 	mov	r2, #884	; 0x374
  1376b0:	e30a1344 	movw	r1, #41796	; 0xa344
  1376b4:	e3401014 	movt	r1, #20
  1376b8:	e30a0244 	movw	r0, #41540	; 0xa244
  1376bc:	e3400014 	movt	r0, #20
  1376c0:	ebff2fb4 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  1376c4:	e3e03000 	mvn	r3, #0
  1376c8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1376cc:	e3a03000 	mov	r3, #0
  1376d0:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1376d4:	e3a03000 	mov	r3, #0
  1376d8:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1376dc:	e3a03000 	mov	r3, #0
  1376e0:	e50b300c 	str	r3, [fp, #-12]
  1376e4:	ea000028 	b	13778c <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1376e8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1376ec:	e51b300c 	ldr	r3, [fp, #-12]
  1376f0:	e0823003 	add	r3, r2, r3
  1376f4:	e5d33000 	ldrb	r3, [r3]
  1376f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1376fc:	e3a03000 	mov	r3, #0
  137700:	e50b3010 	str	r3, [fp, #-16]
  137704:	ea00001a 	b	137774 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137708:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  13770c:	e51b3008 	ldr	r3, [fp, #-8]
  137710:	e0233002 	eor	r3, r3, r2
  137714:	e2033001 	and	r3, r3, #1
  137718:	e3530000 	cmp	r3, #0
  13771c:	0a00000b 	beq	137750 <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137720:	e51b3008 	ldr	r3, [fp, #-8]
  137724:	e1a030a3 	lsr	r3, r3, #1
  137728:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  13772c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137730:	e1a030a3 	lsr	r3, r3, #1
  137734:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137738:	e51b2008 	ldr	r2, [fp, #-8]
  13773c:	e3083320 	movw	r3, #33568	; 0x8320
  137740:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137744:	e0233002 	eor	r3, r3, r2
  137748:	e50b3008 	str	r3, [fp, #-8]
  13774c:	ea000005 	b	137768 <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137750:	e51b3008 	ldr	r3, [fp, #-8]
  137754:	e1a030a3 	lsr	r3, r3, #1
  137758:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  13775c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137760:	e1a030a3 	lsr	r3, r3, #1
  137764:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137768:	e51b3010 	ldr	r3, [fp, #-16]
  13776c:	e2833001 	add	r3, r3, #1
  137770:	e50b3010 	str	r3, [fp, #-16]
  137774:	e51b3010 	ldr	r3, [fp, #-16]
  137778:	e3530007 	cmp	r3, #7
  13777c:	9affffe1 	bls	137708 <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137780:	e51b300c 	ldr	r3, [fp, #-12]
  137784:	e2833001 	add	r3, r3, #1
  137788:	e50b300c 	str	r3, [fp, #-12]
  13778c:	e51b300c 	ldr	r3, [fp, #-12]
  137790:	e3530005 	cmp	r3, #5
  137794:	9affffd3 	bls	1376e8 <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  137798:	e51b3008 	ldr	r3, [fp, #-8]
  13779c:	e3530000 	cmp	r3, #0
  1377a0:	ba00000a 	blt	1377d0 <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1377a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377a8:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1377ac:	e51b3008 	ldr	r3, [fp, #-8]
  1377b0:	e1a03d23 	lsr	r3, r3, #26
  1377b4:	e203301f 	and	r3, r3, #31
  1377b8:	e3a01001 	mov	r1, #1
  1377bc:	e1a03311 	lsl	r3, r1, r3
  1377c0:	e1822003 	orr	r2, r2, r3
  1377c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377c8:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  1377cc:	ea000009 	b	1377f8 <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1377d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377d4:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1377d8:	e51b3008 	ldr	r3, [fp, #-8]
  1377dc:	e1a03d23 	lsr	r3, r3, #26
  1377e0:	e203301f 	and	r3, r3, #31
  1377e4:	e3a01001 	mov	r1, #1
  1377e8:	e1a03311 	lsl	r3, r1, r3
  1377ec:	e1822003 	orr	r2, r2, r3
  1377f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377f4:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  1377f8:	e320f000 	nop	{0}
  1377fc:	e24bd004 	sub	sp, fp, #4
  137800:	e8bd8800 	pop	{fp, pc}

00137804 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137804:	e92d4800 	push	{fp, lr}
  137808:	e28db004 	add	fp, sp, #4
  13780c:	e24dd018 	sub	sp, sp, #24
  137810:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137814:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137818:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13781c:	e3530000 	cmp	r3, #0
  137820:	1a000005 	bne	13783c <ENET_LeaveMulticastGroup+0x38>
  137824:	e300239b 	movw	r2, #923	; 0x39b
  137828:	e30a135c 	movw	r1, #41820	; 0xa35c
  13782c:	e3401014 	movt	r1, #20
  137830:	e30a0244 	movw	r0, #41540	; 0xa244
  137834:	e3400014 	movt	r0, #20
  137838:	ebff2f56 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  13783c:	e3e03000 	mvn	r3, #0
  137840:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137844:	e3a03000 	mov	r3, #0
  137848:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  13784c:	e3a03000 	mov	r3, #0
  137850:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137854:	e3a03000 	mov	r3, #0
  137858:	e50b300c 	str	r3, [fp, #-12]
  13785c:	ea000028 	b	137904 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137860:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137864:	e51b300c 	ldr	r3, [fp, #-12]
  137868:	e0823003 	add	r3, r2, r3
  13786c:	e5d33000 	ldrb	r3, [r3]
  137870:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137874:	e3a03000 	mov	r3, #0
  137878:	e50b3010 	str	r3, [fp, #-16]
  13787c:	ea00001a 	b	1378ec <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137880:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137884:	e51b3008 	ldr	r3, [fp, #-8]
  137888:	e0233002 	eor	r3, r3, r2
  13788c:	e2033001 	and	r3, r3, #1
  137890:	e3530000 	cmp	r3, #0
  137894:	0a00000b 	beq	1378c8 <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137898:	e51b3008 	ldr	r3, [fp, #-8]
  13789c:	e1a030a3 	lsr	r3, r3, #1
  1378a0:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1378a4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1378a8:	e1a030a3 	lsr	r3, r3, #1
  1378ac:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  1378b0:	e51b2008 	ldr	r2, [fp, #-8]
  1378b4:	e3083320 	movw	r3, #33568	; 0x8320
  1378b8:	e34e3db8 	movt	r3, #60856	; 0xedb8
  1378bc:	e0233002 	eor	r3, r3, r2
  1378c0:	e50b3008 	str	r3, [fp, #-8]
  1378c4:	ea000005 	b	1378e0 <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  1378c8:	e51b3008 	ldr	r3, [fp, #-8]
  1378cc:	e1a030a3 	lsr	r3, r3, #1
  1378d0:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1378d4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1378d8:	e1a030a3 	lsr	r3, r3, #1
  1378dc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1378e0:	e51b3010 	ldr	r3, [fp, #-16]
  1378e4:	e2833001 	add	r3, r3, #1
  1378e8:	e50b3010 	str	r3, [fp, #-16]
  1378ec:	e51b3010 	ldr	r3, [fp, #-16]
  1378f0:	e3530007 	cmp	r3, #7
  1378f4:	9affffe1 	bls	137880 <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1378f8:	e51b300c 	ldr	r3, [fp, #-12]
  1378fc:	e2833001 	add	r3, r3, #1
  137900:	e50b300c 	str	r3, [fp, #-12]
  137904:	e51b300c 	ldr	r3, [fp, #-12]
  137908:	e3530005 	cmp	r3, #5
  13790c:	9affffd3 	bls	137860 <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  137910:	e51b3008 	ldr	r3, [fp, #-8]
  137914:	e3530000 	cmp	r3, #0
  137918:	ba00000b 	blt	13794c <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  13791c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137920:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137924:	e51b3008 	ldr	r3, [fp, #-8]
  137928:	e1a03d23 	lsr	r3, r3, #26
  13792c:	e203301f 	and	r3, r3, #31
  137930:	e3a01001 	mov	r1, #1
  137934:	e1a03311 	lsl	r3, r1, r3
  137938:	e1e03003 	mvn	r3, r3
  13793c:	e0022003 	and	r2, r2, r3
  137940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137944:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  137948:	ea00000a 	b	137978 <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  13794c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137950:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137954:	e51b3008 	ldr	r3, [fp, #-8]
  137958:	e1a03d23 	lsr	r3, r3, #26
  13795c:	e203301f 	and	r3, r3, #31
  137960:	e3a01001 	mov	r1, #1
  137964:	e1a03311 	lsl	r3, r1, r3
  137968:	e1e03003 	mvn	r3, r3
  13796c:	e0022003 	and	r2, r2, r3
  137970:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137974:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137978:	e320f000 	nop	{0}
  13797c:	e24bd004 	sub	sp, fp, #4
  137980:	e8bd8800 	pop	{fp, pc}

00137984 <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137984:	e92d4800 	push	{fp, lr}
  137988:	e28db004 	add	fp, sp, #4
  13798c:	e24dd008 	sub	sp, sp, #8
  137990:	e50b0008 	str	r0, [fp, #-8]
  137994:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137998:	e51b300c 	ldr	r3, [fp, #-12]
  13799c:	e3530000 	cmp	r3, #0
  1379a0:	1a000005 	bne	1379bc <ENET_TransmitIRQHandler+0x38>
  1379a4:	e30023c2 	movw	r2, #962	; 0x3c2
  1379a8:	e30a1378 	movw	r1, #41848	; 0xa378
  1379ac:	e3401014 	movt	r1, #20
  1379b0:	e3090f08 	movw	r0, #40712	; 0x9f08
  1379b4:	e3400014 	movt	r0, #20
  1379b8:	ebff2ef6 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  1379bc:	e51b3008 	ldr	r3, [fp, #-8]
  1379c0:	e5933004 	ldr	r3, [r3, #4]
  1379c4:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  1379c8:	e3530000 	cmp	r3, #0
  1379cc:	0a000002 	beq	1379dc <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  1379d0:	e51b3008 	ldr	r3, [fp, #-8]
  1379d4:	e3a02303 	mov	r2, #201326592	; 0xc000000
  1379d8:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  1379dc:	e51b0008 	ldr	r0, [fp, #-8]
  1379e0:	ebfff6e5 	bl	13557c <tx_enet_callback>
}
  1379e4:	e320f000 	nop	{0}
  1379e8:	e24bd004 	sub	sp, fp, #4
  1379ec:	e8bd8800 	pop	{fp, pc}

001379f0 <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  1379f0:	e92d4800 	push	{fp, lr}
  1379f4:	e28db004 	add	fp, sp, #4
  1379f8:	e24dd008 	sub	sp, sp, #8
  1379fc:	e50b0008 	str	r0, [fp, #-8]
  137a00:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137a04:	e51b300c 	ldr	r3, [fp, #-12]
  137a08:	e3530000 	cmp	r3, #0
  137a0c:	1a000005 	bne	137a28 <ENET_ReceiveIRQHandler+0x38>
  137a10:	e30023ce 	movw	r2, #974	; 0x3ce
  137a14:	e30a1390 	movw	r1, #41872	; 0xa390
  137a18:	e3401014 	movt	r1, #20
  137a1c:	e3090f08 	movw	r0, #40712	; 0x9f08
  137a20:	e3400014 	movt	r0, #20
  137a24:	ebff2edb 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  137a28:	e51b3008 	ldr	r3, [fp, #-8]
  137a2c:	e5933004 	ldr	r3, [r3, #4]
  137a30:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137a34:	e3530000 	cmp	r3, #0
  137a38:	0a000004 	beq	137a50 <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  137a3c:	e51b3008 	ldr	r3, [fp, #-8]
  137a40:	e3a02403 	mov	r2, #50331648	; 0x3000000
  137a44:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  137a48:	e51b0008 	ldr	r0, [fp, #-8]
  137a4c:	ebfff6a7 	bl	1354f0 <rx_enet_callback>
    }
}
  137a50:	e320f000 	nop	{0}
  137a54:	e24bd004 	sub	sp, fp, #4
  137a58:	e8bd8800 	pop	{fp, pc}

00137a5c <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137a5c:	e92d4810 	push	{r4, fp, lr}
  137a60:	e28db008 	add	fp, sp, #8
  137a64:	e24dd014 	sub	sp, sp, #20
  137a68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137a6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137a70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137a74:	e3530000 	cmp	r3, #0
  137a78:	1a000005 	bne	137a94 <ENET_ErrorIRQHandler+0x38>
  137a7c:	e30023da 	movw	r2, #986	; 0x3da
  137a80:	e30a13a8 	movw	r1, #41896	; 0xa3a8
  137a84:	e3401014 	movt	r1, #20
  137a88:	e3090f08 	movw	r0, #40712	; 0x9f08
  137a8c:	e3400014 	movt	r0, #20
  137a90:	ebff2ec0 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  137a94:	e3a03000 	mov	r3, #0
  137a98:	e346307c 	movt	r3, #24700	; 0x607c
  137a9c:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  137aa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137aa4:	e5933004 	ldr	r3, [r3, #4]
  137aa8:	e2033802 	and	r3, r3, #131072	; 0x20000
  137aac:	e3530000 	cmp	r3, #0
  137ab0:	0a000012 	beq	137b00 <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  137ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137ab8:	e3a02802 	mov	r2, #131072	; 0x20000
  137abc:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  137ac0:	e3a01000 	mov	r1, #0
  137ac4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137ac8:	ebfff879 	bl	135cb4 <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  137acc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137ad0:	e5933018 	ldr	r3, [r3, #24]
  137ad4:	e3530000 	cmp	r3, #0
  137ad8:	0a00001c 	beq	137b50 <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  137adc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137ae0:	e5934018 	ldr	r4, [r3, #24]
  137ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137ae8:	e593301c 	ldr	r3, [r3, #28]
  137aec:	e3a02003 	mov	r2, #3
  137af0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137af4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137af8:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  137afc:	ea000013 	b	137b50 <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  137b00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b04:	e5933004 	ldr	r3, [r3, #4]
  137b08:	e51b2010 	ldr	r2, [fp, #-16]
  137b0c:	e0033002 	and	r3, r3, r2
  137b10:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  137b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b18:	e51b2010 	ldr	r2, [fp, #-16]
  137b1c:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  137b20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b24:	e5933018 	ldr	r3, [r3, #24]
  137b28:	e3530000 	cmp	r3, #0
  137b2c:	0a000007 	beq	137b50 <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  137b30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b34:	e5934018 	ldr	r4, [r3, #24]
  137b38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b3c:	e593301c 	ldr	r3, [r3, #28]
  137b40:	e3a02002 	mov	r2, #2
  137b44:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137b48:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137b4c:	e12fff34 	blx	r4
}
  137b50:	e320f000 	nop	{0}
  137b54:	e24bd008 	sub	sp, fp, #8
  137b58:	e8bd8810 	pop	{r4, fp, pc}

00137b5c <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  137b5c:	e92d4800 	push	{fp, lr}
  137b60:	e28db004 	add	fp, sp, #4
  137b64:	e24dd010 	sub	sp, sp, #16
  137b68:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  137b6c:	e51b3010 	ldr	r3, [fp, #-16]
  137b70:	e5933004 	ldr	r3, [r3, #4]
  137b74:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  137b78:	e51b0010 	ldr	r0, [fp, #-16]
  137b7c:	ebfff633 	bl	135450 <get_instance_by_base>
  137b80:	e1a03000 	mov	r3, r0
  137b84:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  137b88:	e51b3010 	ldr	r3, [fp, #-16]
  137b8c:	e5933008 	ldr	r3, [r3, #8]
  137b90:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137b94:	e3530000 	cmp	r3, #0
  137b98:	0a000012 	beq	137be8 <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137b9c:	e51b3008 	ldr	r3, [fp, #-8]
  137ba0:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137ba4:	e3530000 	cmp	r3, #0
  137ba8:	0a00000e 	beq	137be8 <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  137bac:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  137bb0:	e3403014 	movt	r3, #20
  137bb4:	e5933000 	ldr	r3, [r3]
  137bb8:	e3530000 	cmp	r3, #0
  137bbc:	0a000009 	beq	137be8 <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  137bc0:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  137bc4:	e3403014 	movt	r3, #20
  137bc8:	e5932000 	ldr	r2, [r3]
  137bcc:	e30e3c24 	movw	r3, #60452	; 0xec24
  137bd0:	e3403014 	movt	r3, #20
  137bd4:	e51b100c 	ldr	r1, [fp, #-12]
  137bd8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137bdc:	e1a01003 	mov	r1, r3
  137be0:	e51b0010 	ldr	r0, [fp, #-16]
  137be4:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  137be8:	e51b3010 	ldr	r3, [fp, #-16]
  137bec:	e5933008 	ldr	r3, [r3, #8]
  137bf0:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137bf4:	e3530000 	cmp	r3, #0
  137bf8:	0a000012 	beq	137c48 <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  137bfc:	e51b3008 	ldr	r3, [fp, #-8]
  137c00:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137c04:	e3530000 	cmp	r3, #0
  137c08:	0a00000e 	beq	137c48 <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137c0c:	e30e3c30 	movw	r3, #60464	; 0xec30
  137c10:	e3403014 	movt	r3, #20
  137c14:	e5933000 	ldr	r3, [r3]
  137c18:	e3530000 	cmp	r3, #0
  137c1c:	0a000009 	beq	137c48 <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  137c20:	e30e3c30 	movw	r3, #60464	; 0xec30
  137c24:	e3403014 	movt	r3, #20
  137c28:	e5932000 	ldr	r2, [r3]
  137c2c:	e30e3c24 	movw	r3, #60452	; 0xec24
  137c30:	e3403014 	movt	r3, #20
  137c34:	e51b100c 	ldr	r1, [fp, #-12]
  137c38:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137c3c:	e1a01003 	mov	r1, r3
  137c40:	e51b0010 	ldr	r0, [fp, #-16]
  137c44:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  137c48:	e51b3010 	ldr	r3, [fp, #-16]
  137c4c:	e5933008 	ldr	r3, [r3, #8]
  137c50:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c54:	e3530000 	cmp	r3, #0
  137c58:	0a000012 	beq	137ca8 <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  137c5c:	e51b3008 	ldr	r3, [fp, #-8]
  137c60:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c64:	e3530000 	cmp	r3, #0
  137c68:	0a00000e 	beq	137ca8 <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  137c6c:	e30e3c38 	movw	r3, #60472	; 0xec38
  137c70:	e3403014 	movt	r3, #20
  137c74:	e5933000 	ldr	r3, [r3]
  137c78:	e3530000 	cmp	r3, #0
  137c7c:	0a000009 	beq	137ca8 <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  137c80:	e30e3c38 	movw	r3, #60472	; 0xec38
  137c84:	e3403014 	movt	r3, #20
  137c88:	e5932000 	ldr	r2, [r3]
  137c8c:	e30e3c24 	movw	r3, #60452	; 0xec24
  137c90:	e3403014 	movt	r3, #20
  137c94:	e51b100c 	ldr	r1, [fp, #-12]
  137c98:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137c9c:	e1a01003 	mov	r1, r3
  137ca0:	e51b0010 	ldr	r0, [fp, #-16]
  137ca4:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  137ca8:	e51b3010 	ldr	r3, [fp, #-16]
  137cac:	e5932008 	ldr	r2, [r3, #8]
  137cb0:	e3a03000 	mov	r3, #0
  137cb4:	e346307c 	movt	r3, #24700	; 0x607c
  137cb8:	e0033002 	and	r3, r3, r2
  137cbc:	e3530000 	cmp	r3, #0
  137cc0:	0a000014 	beq	137d18 <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  137cc4:	e51b2008 	ldr	r2, [fp, #-8]
  137cc8:	e3a03000 	mov	r3, #0
  137ccc:	e346307c 	movt	r3, #24700	; 0x607c
  137cd0:	e0033002 	and	r3, r3, r2
  137cd4:	e3530000 	cmp	r3, #0
  137cd8:	0a00000e 	beq	137d18 <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  137cdc:	e30e3c34 	movw	r3, #60468	; 0xec34
  137ce0:	e3403014 	movt	r3, #20
  137ce4:	e5933000 	ldr	r3, [r3]
  137ce8:	e3530000 	cmp	r3, #0
  137cec:	0a000009 	beq	137d18 <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  137cf0:	e30e3c34 	movw	r3, #60468	; 0xec34
  137cf4:	e3403014 	movt	r3, #20
  137cf8:	e5932000 	ldr	r2, [r3]
  137cfc:	e30e3c24 	movw	r3, #60452	; 0xec24
  137d00:	e3403014 	movt	r3, #20
  137d04:	e51b100c 	ldr	r1, [fp, #-12]
  137d08:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137d0c:	e1a01003 	mov	r1, r3
  137d10:	e51b0010 	ldr	r0, [fp, #-16]
  137d14:	e12fff32 	blx	r2
            }
        }
    }
}
  137d18:	e320f000 	nop	{0}
  137d1c:	e24bd004 	sub	sp, fp, #4
  137d20:	e8bd8800 	pop	{fp, pc}

00137d24 <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  137d24:	e92d4800 	push	{fp, lr}
  137d28:	e28db004 	add	fp, sp, #4
  137d2c:	e24dd008 	sub	sp, sp, #8
  137d30:	e50b0008 	str	r0, [fp, #-8]
  137d34:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  137d38:	e51b000c 	ldr	r0, [fp, #-12]
  137d3c:	ebffff86 	bl	137b5c <ENET_CommonFrame0IRQHandler>
  137d40:	e320f000 	nop	{0}
  137d44:	e24bd004 	sub	sp, fp, #4
  137d48:	e8bd8800 	pop	{fp, pc}

00137d4c <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  137d4c:	e92d4800 	push	{fp, lr}
  137d50:	e28db004 	add	fp, sp, #4
  137d54:	e24dd010 	sub	sp, sp, #16
  137d58:	e50b0008 	str	r0, [fp, #-8]
  137d5c:	e50b100c 	str	r1, [fp, #-12]
  137d60:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  137d64:	e51b3008 	ldr	r3, [fp, #-8]
  137d68:	e5932014 	ldr	r2, [r3, #20]
  137d6c:	e3a01001 	mov	r1, #1
  137d70:	e51b300c 	ldr	r3, [fp, #-12]
  137d74:	e1a03311 	lsl	r3, r1, r3
  137d78:	e1e03003 	mvn	r3, r3
  137d7c:	e0022003 	and	r2, r2, r3
  137d80:	e51b3008 	ldr	r3, [fp, #-8]
  137d84:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137d88:	e51b3010 	ldr	r3, [fp, #-16]
  137d8c:	e5933000 	ldr	r3, [r3]
  137d90:	e3530000 	cmp	r3, #0
  137d94:	1a000009 	bne	137dc0 <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137d98:	e51b3008 	ldr	r3, [fp, #-8]
  137d9c:	e5932004 	ldr	r2, [r3, #4]
  137da0:	e3a01001 	mov	r1, #1
  137da4:	e51b300c 	ldr	r3, [fp, #-12]
  137da8:	e1a03311 	lsl	r3, r1, r3
  137dac:	e1e03003 	mvn	r3, r3
  137db0:	e0022003 	and	r2, r2, r3
  137db4:	e51b3008 	ldr	r3, [fp, #-8]
  137db8:	e5832004 	str	r2, [r3, #4]
  137dbc:	ea00000d 	b	137df8 <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137dc0:	e51b3010 	ldr	r3, [fp, #-16]
  137dc4:	e5d33004 	ldrb	r3, [r3, #4]
  137dc8:	e1a02003 	mov	r2, r3
  137dcc:	e51b100c 	ldr	r1, [fp, #-12]
  137dd0:	e51b0008 	ldr	r0, [fp, #-8]
  137dd4:	eb000010 	bl	137e1c <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137dd8:	e51b3008 	ldr	r3, [fp, #-8]
  137ddc:	e5932004 	ldr	r2, [r3, #4]
  137de0:	e3a01001 	mov	r1, #1
  137de4:	e51b300c 	ldr	r3, [fp, #-12]
  137de8:	e1a03311 	lsl	r3, r1, r3
  137dec:	e1822003 	orr	r2, r2, r3
  137df0:	e51b3008 	ldr	r3, [fp, #-8]
  137df4:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137df8:	e51b3010 	ldr	r3, [fp, #-16]
  137dfc:	e5933008 	ldr	r3, [r3, #8]
  137e00:	e1a02003 	mov	r2, r3
  137e04:	e51b100c 	ldr	r1, [fp, #-12]
  137e08:	e51b0008 	ldr	r0, [fp, #-8]
  137e0c:	eb00002c 	bl	137ec4 <GPIO_SetPinInterruptConfig>
}
  137e10:	e320f000 	nop	{0}
  137e14:	e24bd004 	sub	sp, fp, #4
  137e18:	e8bd8800 	pop	{fp, pc}

00137e1c <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  137e1c:	e92d4800 	push	{fp, lr}
  137e20:	e28db004 	add	fp, sp, #4
  137e24:	e24dd010 	sub	sp, sp, #16
  137e28:	e50b0008 	str	r0, [fp, #-8]
  137e2c:	e50b100c 	str	r1, [fp, #-12]
  137e30:	e1a03002 	mov	r3, r2
  137e34:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  137e38:	e51b300c 	ldr	r3, [fp, #-12]
  137e3c:	e353001f 	cmp	r3, #31
  137e40:	9a000007 	bls	137e64 <GPIO_WritePinOutput+0x48>
  137e44:	e30a33f8 	movw	r3, #41976	; 0xa3f8
  137e48:	e3403014 	movt	r3, #20
  137e4c:	e3a0206a 	mov	r2, #106	; 0x6a
  137e50:	e30a13c0 	movw	r1, #41920	; 0xa3c0
  137e54:	e3401014 	movt	r1, #20
  137e58:	e30a03ec 	movw	r0, #41964	; 0xa3ec
  137e5c:	e3400014 	movt	r0, #20
  137e60:	eb000445 	bl	138f7c <__assert_fail>
    if (output == 0U)
  137e64:	e55b300d 	ldrb	r3, [fp, #-13]
  137e68:	e3530000 	cmp	r3, #0
  137e6c:	1a000009 	bne	137e98 <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  137e70:	e51b3008 	ldr	r3, [fp, #-8]
  137e74:	e5932000 	ldr	r2, [r3]
  137e78:	e3a01001 	mov	r1, #1
  137e7c:	e51b300c 	ldr	r3, [fp, #-12]
  137e80:	e1a03311 	lsl	r3, r1, r3
  137e84:	e1e03003 	mvn	r3, r3
  137e88:	e0022003 	and	r2, r2, r3
  137e8c:	e51b3008 	ldr	r3, [fp, #-8]
  137e90:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  137e94:	ea000007 	b	137eb8 <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137e98:	e51b3008 	ldr	r3, [fp, #-8]
  137e9c:	e5932000 	ldr	r2, [r3]
  137ea0:	e3a01001 	mov	r1, #1
  137ea4:	e51b300c 	ldr	r3, [fp, #-12]
  137ea8:	e1a03311 	lsl	r3, r1, r3
  137eac:	e1822003 	orr	r2, r2, r3
  137eb0:	e51b3008 	ldr	r3, [fp, #-8]
  137eb4:	e5832000 	str	r2, [r3]
}
  137eb8:	e320f000 	nop	{0}
  137ebc:	e24bd004 	sub	sp, fp, #4
  137ec0:	e8bd8800 	pop	{fp, pc}

00137ec4 <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  137ec4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137ec8:	e28db000 	add	fp, sp, #0
  137ecc:	e24dd01c 	sub	sp, sp, #28
  137ed0:	e50b0010 	str	r0, [fp, #-16]
  137ed4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137ed8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137edc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137ee0:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  137ee4:	e51b3010 	ldr	r3, [fp, #-16]
  137ee8:	e593201c 	ldr	r2, [r3, #28]
  137eec:	e3a01001 	mov	r1, #1
  137ef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137ef4:	e1a03311 	lsl	r3, r1, r3
  137ef8:	e1e03003 	mvn	r3, r3
  137efc:	e0022003 	and	r2, r2, r3
  137f00:	e51b3010 	ldr	r3, [fp, #-16]
  137f04:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137f08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137f0c:	e353000f 	cmp	r3, #15
  137f10:	8a000003 	bhi	137f24 <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  137f14:	e51b3010 	ldr	r3, [fp, #-16]
  137f18:	e283300c 	add	r3, r3, #12
  137f1c:	e50b3008 	str	r3, [fp, #-8]
  137f20:	ea000005 	b	137f3c <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  137f24:	e51b3010 	ldr	r3, [fp, #-16]
  137f28:	e2833010 	add	r3, r3, #16
  137f2c:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  137f30:	e51b300c 	ldr	r3, [fp, #-12]
  137f34:	e2433010 	sub	r3, r3, #16
  137f38:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  137f3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137f40:	e2433001 	sub	r3, r3, #1
  137f44:	e3530004 	cmp	r3, #4
  137f48:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137f4c:	ea000042 	b	13805c <GPIO_SetPinInterruptConfig+0x198>
  137f50:	00137f64 	.word	0x00137f64
  137f54:	00137f90 	.word	0x00137f90
  137f58:	00137fd0 	.word	0x00137fd0
  137f5c:	00138010 	.word	0x00138010
  137f60:	00138038 	.word	0x00138038
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  137f64:	e51b3008 	ldr	r3, [fp, #-8]
  137f68:	e5932000 	ldr	r2, [r3]
  137f6c:	e51b300c 	ldr	r3, [fp, #-12]
  137f70:	e1a03083 	lsl	r3, r3, #1
  137f74:	e3a01003 	mov	r1, #3
  137f78:	e1a03311 	lsl	r3, r1, r3
  137f7c:	e1e03003 	mvn	r3, r3
  137f80:	e0022003 	and	r2, r2, r3
  137f84:	e51b3008 	ldr	r3, [fp, #-8]
  137f88:	e5832000 	str	r2, [r3]
            break;
  137f8c:	ea000033 	b	138060 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137f90:	e51b3008 	ldr	r3, [fp, #-8]
  137f94:	e5932000 	ldr	r2, [r3]
  137f98:	e51b300c 	ldr	r3, [fp, #-12]
  137f9c:	e1a03083 	lsl	r3, r3, #1
  137fa0:	e3a01003 	mov	r1, #3
  137fa4:	e1a03311 	lsl	r3, r1, r3
  137fa8:	e1e03003 	mvn	r3, r3
  137fac:	e0022003 	and	r2, r2, r3
  137fb0:	e51b300c 	ldr	r3, [fp, #-12]
  137fb4:	e1a03083 	lsl	r3, r3, #1
  137fb8:	e3a01001 	mov	r1, #1
  137fbc:	e1a03311 	lsl	r3, r1, r3
  137fc0:	e1822003 	orr	r2, r2, r3
  137fc4:	e51b3008 	ldr	r3, [fp, #-8]
  137fc8:	e5832000 	str	r2, [r3]
            break;
  137fcc:	ea000023 	b	138060 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137fd0:	e51b3008 	ldr	r3, [fp, #-8]
  137fd4:	e5932000 	ldr	r2, [r3]
  137fd8:	e51b300c 	ldr	r3, [fp, #-12]
  137fdc:	e1a03083 	lsl	r3, r3, #1
  137fe0:	e3a01003 	mov	r1, #3
  137fe4:	e1a03311 	lsl	r3, r1, r3
  137fe8:	e1e03003 	mvn	r3, r3
  137fec:	e0022003 	and	r2, r2, r3
  137ff0:	e51b300c 	ldr	r3, [fp, #-12]
  137ff4:	e1a03083 	lsl	r3, r3, #1
  137ff8:	e3a01002 	mov	r1, #2
  137ffc:	e1a03311 	lsl	r3, r1, r3
  138000:	e1822003 	orr	r2, r2, r3
  138004:	e51b3008 	ldr	r3, [fp, #-8]
  138008:	e5832000 	str	r2, [r3]
            break;
  13800c:	ea000013 	b	138060 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  138010:	e51b3008 	ldr	r3, [fp, #-8]
  138014:	e5932000 	ldr	r2, [r3]
  138018:	e51b300c 	ldr	r3, [fp, #-12]
  13801c:	e1a03083 	lsl	r3, r3, #1
  138020:	e3a01003 	mov	r1, #3
  138024:	e1a03311 	lsl	r3, r1, r3
  138028:	e1822003 	orr	r2, r2, r3
  13802c:	e51b3008 	ldr	r3, [fp, #-8]
  138030:	e5832000 	str	r2, [r3]
            break;
  138034:	ea000009 	b	138060 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  138038:	e51b3010 	ldr	r3, [fp, #-16]
  13803c:	e593201c 	ldr	r2, [r3, #28]
  138040:	e3a01001 	mov	r1, #1
  138044:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138048:	e1a03311 	lsl	r3, r1, r3
  13804c:	e1822003 	orr	r2, r2, r3
  138050:	e51b3010 	ldr	r3, [fp, #-16]
  138054:	e583201c 	str	r2, [r3, #28]
            break;
  138058:	ea000000 	b	138060 <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  13805c:	e320f000 	nop	{0}
    }
}
  138060:	e320f000 	nop	{0}
  138064:	e28bd000 	add	sp, fp, #0
  138068:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13806c:	e12fff1e 	bx	lr

00138070 <ENET_ReadSMIData>:
{
  138070:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  138074:	e28db000 	add	fp, sp, #0
  138078:	e24dd00c 	sub	sp, sp, #12
  13807c:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  138080:	e51b3008 	ldr	r3, [fp, #-8]
  138084:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  138088:	e6ff3073 	uxth	r3, r3
}
  13808c:	e1a00003 	mov	r0, r3
  138090:	e28bd000 	add	sp, fp, #0
  138094:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  138098:	e12fff1e 	bx	lr

0013809c <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  13809c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1380a0:	e28db000 	add	fp, sp, #0
  1380a4:	e24dd00c 	sub	sp, sp, #12
  1380a8:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  1380ac:	e51b3008 	ldr	r3, [fp, #-8]
  1380b0:	e5933004 	ldr	r3, [r3, #4]
}
  1380b4:	e1a00003 	mov	r0, r3
  1380b8:	e28bd000 	add	sp, fp, #0
  1380bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1380c0:	e12fff1e 	bx	lr

001380c4 <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  1380c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1380c8:	e28db000 	add	fp, sp, #0
  1380cc:	e24dd00c 	sub	sp, sp, #12
  1380d0:	e50b0008 	str	r0, [fp, #-8]
  1380d4:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  1380d8:	e51b3008 	ldr	r3, [fp, #-8]
  1380dc:	e51b200c 	ldr	r2, [fp, #-12]
  1380e0:	e5832004 	str	r2, [r3, #4]
}
  1380e4:	e320f000 	nop	{0}
  1380e8:	e28bd000 	add	sp, fp, #0
  1380ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1380f0:	e12fff1e 	bx	lr

001380f4 <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  1380f4:	e92d4800 	push	{fp, lr}
  1380f8:	e28db004 	add	fp, sp, #4
  1380fc:	e24dd018 	sub	sp, sp, #24
  138100:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138104:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  138108:	e3a03000 	mov	r3, #0
  13810c:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  138110:	e3a03001 	mov	r3, #1
  138114:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  138118:	e3a03000 	mov	r3, #0
  13811c:	e54b3010 	strb	r3, [fp, #-16]
  138120:	e3a03000 	mov	r3, #0
  138124:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  138128:	e3a02a01 	mov	r2, #4096	; 0x1000
  13812c:	e3a01001 	mov	r1, #1
  138130:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138134:	ebff30de 	bl	1044b4 <ueth_remap>
  138138:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  13813c:	e24b3014 	sub	r3, fp, #20
  138140:	e1a02003 	mov	r2, r3
  138144:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138148:	e51b0008 	ldr	r0, [fp, #-8]
  13814c:	ebfffefe 	bl	137d4c <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  138150:	e3a02000 	mov	r2, #0
  138154:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138158:	e51b0008 	ldr	r0, [fp, #-8]
  13815c:	ebffff2e 	bl	137e1c <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  138160:	e3a00001 	mov	r0, #1
  138164:	ebff2744 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  138168:	e3a02001 	mov	r2, #1
  13816c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138170:	e51b0008 	ldr	r0, [fp, #-8]
  138174:	ebffff28 	bl	137e1c <GPIO_WritePinOutput>

    return kStatus_Success;
  138178:	e3a03000 	mov	r3, #0

}
  13817c:	e1a00003 	mov	r0, r3
  138180:	e24bd004 	sub	sp, fp, #4
  138184:	e8bd8800 	pop	{fp, pc}

00138188 <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  138188:	e92d4800 	push	{fp, lr}
  13818c:	e28db004 	add	fp, sp, #4
  138190:	e24dd018 	sub	sp, sp, #24
  138194:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138198:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  13819c:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1381a0:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  1381a4:	e3a03000 	mov	r3, #0
  1381a8:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  1381ac:	e3a03902 	mov	r3, #32768	; 0x8000
  1381b0:	e3a02000 	mov	r2, #0
  1381b4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381b8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381bc:	eb000071 	bl	138388 <PHY_Write>
  1381c0:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  1381c4:	e51b3010 	ldr	r3, [fp, #-16]
  1381c8:	e3530000 	cmp	r3, #0
  1381cc:	1a000038 	bne	1382b4 <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  1381d0:	e30031e1 	movw	r3, #481	; 0x1e1
  1381d4:	e3a02004 	mov	r2, #4
  1381d8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381e0:	eb000068 	bl	138388 <PHY_Write>
  1381e4:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  1381e8:	e51b3010 	ldr	r3, [fp, #-16]
  1381ec:	e3530000 	cmp	r3, #0
  1381f0:	1a00002f 	bne	1382b4 <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  1381f4:	e3a03c12 	mov	r3, #4608	; 0x1200
  1381f8:	e3a02000 	mov	r2, #0
  1381fc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138200:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138204:	eb00005f 	bl	138388 <PHY_Write>
  138208:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  13820c:	e51b3010 	ldr	r3, [fp, #-16]
  138210:	e3530000 	cmp	r3, #0
  138214:	1a000026 	bne	1382b4 <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  138218:	ea000020 	b	1382a0 <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  13821c:	e24b3014 	sub	r3, fp, #20
  138220:	e3a02001 	mov	r2, #1
  138224:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138228:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13822c:	eb000083 	bl	138440 <PHY_Read>
  138230:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  138234:	e51b3010 	ldr	r3, [fp, #-16]
  138238:	e3530000 	cmp	r3, #0
  13823c:	1a000010 	bne	138284 <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  138240:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138244:	e2033020 	and	r3, r3, #32
  138248:	e3530000 	cmp	r3, #0
  13824c:	0a00000c 	beq	138284 <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138250:	e3a03000 	mov	r3, #0
  138254:	e50b300c 	str	r3, [fp, #-12]
  138258:	ea000003 	b	13826c <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  13825c:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138260:	e51b300c 	ldr	r3, [fp, #-12]
  138264:	e2833001 	add	r3, r3, #1
  138268:	e50b300c 	str	r3, [fp, #-12]
  13826c:	e51b200c 	ldr	r2, [fp, #-12]
  138270:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  138274:	e34034ff 	movt	r3, #1279	; 0x4ff
  138278:	e1520003 	cmp	r2, r3
  13827c:	9afffff6 	bls	13825c <PHY_StartNegotiation+0xd4>
                            }
                            break;
  138280:	ea00000b 	b	1382b4 <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  138284:	e3a00064 	mov	r0, #100	; 0x64
  138288:	ebff26fb 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  13828c:	e51b3008 	ldr	r3, [fp, #-8]
  138290:	e3530000 	cmp	r3, #0
  138294:	1a000001 	bne	1382a0 <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  138298:	e3013006 	movw	r3, #4102	; 0x1006
  13829c:	ea000005 	b	1382b8 <PHY_StartNegotiation+0x130>
                while (counter --)
  1382a0:	e51b3008 	ldr	r3, [fp, #-8]
  1382a4:	e2432001 	sub	r2, r3, #1
  1382a8:	e50b2008 	str	r2, [fp, #-8]
  1382ac:	e3530000 	cmp	r3, #0
  1382b0:	1affffd9 	bne	13821c <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  1382b4:	e3a03000 	mov	r3, #0
}
  1382b8:	e1a00003 	mov	r0, r3
  1382bc:	e24bd004 	sub	sp, fp, #4
  1382c0:	e8bd8800 	pop	{fp, pc}

001382c4 <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  1382c4:	e92d4800 	push	{fp, lr}
  1382c8:	e28db004 	add	fp, sp, #4
  1382cc:	e24dd020 	sub	sp, sp, #32
  1382d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1382d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1382d8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1382dc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  1382e0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1382e4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  1382e8:	e3a03000 	mov	r3, #0
  1382ec:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  1382f0:	e3a03000 	mov	r3, #0
  1382f4:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  1382f8:	e3a02000 	mov	r2, #0
  1382fc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  138300:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138304:	ebfffa3c 	bl	136bfc <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138308:	e24b3010 	sub	r3, fp, #16
  13830c:	e3a02002 	mov	r2, #2
  138310:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138314:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138318:	eb000048 	bl	138440 <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  13831c:	ea000007 	b	138340 <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138320:	e24b3010 	sub	r3, fp, #16
  138324:	e3a02002 	mov	r2, #2
  138328:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13832c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138330:	eb000042 	bl	138440 <PHY_Read>
        counter --;
  138334:	e51b3008 	ldr	r3, [fp, #-8]
  138338:	e2433001 	sub	r3, r3, #1
  13833c:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  138340:	e51b3010 	ldr	r3, [fp, #-16]
  138344:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  138348:	e1520003 	cmp	r2, r3
  13834c:	0a000002 	beq	13835c <PHY_Init+0x98>
  138350:	e51b3008 	ldr	r3, [fp, #-8]
  138354:	e3530000 	cmp	r3, #0
  138358:	1afffff0 	bne	138320 <PHY_Init+0x5c>
    }
    if (!counter)
  13835c:	e51b3008 	ldr	r3, [fp, #-8]
  138360:	e3530000 	cmp	r3, #0
  138364:	1a000001 	bne	138370 <PHY_Init+0xac>
    {
        return kStatus_Fail;
  138368:	e3a03001 	mov	r3, #1
  13836c:	ea000002 	b	13837c <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  138370:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138374:	e50b3008 	str	r3, [fp, #-8]
    return result;
  138378:	e51b300c 	ldr	r3, [fp, #-12]
}
  13837c:	e1a00003 	mov	r0, r3
  138380:	e24bd004 	sub	sp, fp, #4
  138384:	e8bd8800 	pop	{fp, pc}

00138388 <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  138388:	e92d4800 	push	{fp, lr}
  13838c:	e28db004 	add	fp, sp, #4
  138390:	e24dd020 	sub	sp, sp, #32
  138394:	e50b0010 	str	r0, [fp, #-16]
  138398:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13839c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1383a0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1383a4:	e3a01502 	mov	r1, #8388608	; 0x800000
  1383a8:	e51b0010 	ldr	r0, [fp, #-16]
  1383ac:	ebffff44 	bl	1380c4 <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  1383b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1383b4:	e58d3000 	str	r3, [sp]
  1383b8:	e3a03001 	mov	r3, #1
  1383bc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1383c0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1383c4:	e51b0010 	ldr	r0, [fp, #-16]
  1383c8:	ebfffa4a 	bl	136cf8 <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1383cc:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1383d0:	e50b3008 	str	r3, [fp, #-8]
  1383d4:	ea000008 	b	1383fc <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1383d8:	e51b0010 	ldr	r0, [fp, #-16]
  1383dc:	ebffff2e 	bl	13809c <ENET_GetInterruptStatus>
  1383e0:	e1a03000 	mov	r3, r0
  1383e4:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1383e8:	e3530000 	cmp	r3, #0
  1383ec:	1a000006 	bne	13840c <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1383f0:	e51b3008 	ldr	r3, [fp, #-8]
  1383f4:	e2433001 	sub	r3, r3, #1
  1383f8:	e50b3008 	str	r3, [fp, #-8]
  1383fc:	e51b3008 	ldr	r3, [fp, #-8]
  138400:	e3530000 	cmp	r3, #0
  138404:	1afffff3 	bne	1383d8 <PHY_Write+0x50>
  138408:	ea000000 	b	138410 <PHY_Write+0x88>
        {
            break;
  13840c:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  138410:	e51b3008 	ldr	r3, [fp, #-8]
  138414:	e3530000 	cmp	r3, #0
  138418:	1a000001 	bne	138424 <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  13841c:	e3013005 	movw	r3, #4101	; 0x1005
  138420:	ea000003 	b	138434 <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138424:	e3a01502 	mov	r1, #8388608	; 0x800000
  138428:	e51b0010 	ldr	r0, [fp, #-16]
  13842c:	ebffff24 	bl	1380c4 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138430:	e3a03000 	mov	r3, #0
}
  138434:	e1a00003 	mov	r0, r3
  138438:	e24bd004 	sub	sp, fp, #4
  13843c:	e8bd8800 	pop	{fp, pc}

00138440 <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  138440:	e92d4800 	push	{fp, lr}
  138444:	e28db004 	add	fp, sp, #4
  138448:	e24dd018 	sub	sp, sp, #24
  13844c:	e50b0010 	str	r0, [fp, #-16]
  138450:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138454:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138458:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  13845c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138460:	e3530000 	cmp	r3, #0
  138464:	1a000005 	bne	138480 <PHY_Read+0x40>
  138468:	e3a020d0 	mov	r2, #208	; 0xd0
  13846c:	e30a1424 	movw	r1, #42020	; 0xa424
  138470:	e3401014 	movt	r1, #20
  138474:	e30a040c 	movw	r0, #41996	; 0xa40c
  138478:	e3400014 	movt	r0, #20
  13847c:	ebff2c45 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138480:	e3a01502 	mov	r1, #8388608	; 0x800000
  138484:	e51b0010 	ldr	r0, [fp, #-16]
  138488:	ebffff0d 	bl	1380c4 <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  13848c:	e3a03002 	mov	r3, #2
  138490:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  138494:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138498:	e51b0010 	ldr	r0, [fp, #-16]
  13849c:	ebfffa36 	bl	136d7c <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1384a0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1384a4:	e50b3008 	str	r3, [fp, #-8]
  1384a8:	ea000008 	b	1384d0 <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1384ac:	e51b0010 	ldr	r0, [fp, #-16]
  1384b0:	ebfffef9 	bl	13809c <ENET_GetInterruptStatus>
  1384b4:	e1a03000 	mov	r3, r0
  1384b8:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1384bc:	e3530000 	cmp	r3, #0
  1384c0:	1a000006 	bne	1384e0 <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1384c4:	e51b3008 	ldr	r3, [fp, #-8]
  1384c8:	e2433001 	sub	r3, r3, #1
  1384cc:	e50b3008 	str	r3, [fp, #-8]
  1384d0:	e51b3008 	ldr	r3, [fp, #-8]
  1384d4:	e3530000 	cmp	r3, #0
  1384d8:	1afffff3 	bne	1384ac <PHY_Read+0x6c>
  1384dc:	ea000000 	b	1384e4 <PHY_Read+0xa4>
        {
            break;
  1384e0:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  1384e4:	e51b3008 	ldr	r3, [fp, #-8]
  1384e8:	e3530000 	cmp	r3, #0
  1384ec:	1a000001 	bne	1384f8 <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  1384f0:	e3013005 	movw	r3, #4101	; 0x1005
  1384f4:	ea000008 	b	13851c <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  1384f8:	e51b0010 	ldr	r0, [fp, #-16]
  1384fc:	ebfffedb 	bl	138070 <ENET_ReadSMIData>
  138500:	e1a02000 	mov	r2, r0
  138504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138508:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  13850c:	e3a01502 	mov	r1, #8388608	; 0x800000
  138510:	e51b0010 	ldr	r0, [fp, #-16]
  138514:	ebfffeea 	bl	1380c4 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138518:	e3a03000 	mov	r3, #0
}
  13851c:	e1a00003 	mov	r0, r3
  138520:	e24bd004 	sub	sp, fp, #4
  138524:	e8bd8800 	pop	{fp, pc}

00138528 <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  138528:	e92d4800 	push	{fp, lr}
  13852c:	e28db004 	add	fp, sp, #4
  138530:	e24dd018 	sub	sp, sp, #24
  138534:	e50b0010 	str	r0, [fp, #-16]
  138538:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13853c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138540:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  138544:	e3a03000 	mov	r3, #0
  138548:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  13854c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  138550:	e3530000 	cmp	r3, #0
  138554:	0a000024 	beq	1385ec <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  138558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13855c:	e3530000 	cmp	r3, #0
  138560:	1a000010 	bne	1385a8 <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138564:	e24b300c 	sub	r3, fp, #12
  138568:	e3a02000 	mov	r2, #0
  13856c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138570:	e51b0010 	ldr	r0, [fp, #-16]
  138574:	ebffffb1 	bl	138440 <PHY_Read>
  138578:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  13857c:	e51b3008 	ldr	r3, [fp, #-8]
  138580:	e3530000 	cmp	r3, #0
  138584:	1a00003d 	bne	138680 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  138588:	e51b300c 	ldr	r3, [fp, #-12]
  13858c:	e3833901 	orr	r3, r3, #16384	; 0x4000
  138590:	e3a02000 	mov	r2, #0
  138594:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138598:	e51b0010 	ldr	r0, [fp, #-16]
  13859c:	ebffff79 	bl	138388 <PHY_Write>
  1385a0:	e1a03000 	mov	r3, r0
  1385a4:	ea000036 	b	138684 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  1385a8:	e24b300c 	sub	r3, fp, #12
  1385ac:	e3a0201f 	mov	r2, #31
  1385b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385b4:	e51b0010 	ldr	r0, [fp, #-16]
  1385b8:	ebffffa0 	bl	138440 <PHY_Read>
  1385bc:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1385c0:	e51b3008 	ldr	r3, [fp, #-8]
  1385c4:	e3530000 	cmp	r3, #0
  1385c8:	1a00002c 	bne	138680 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  1385cc:	e51b300c 	ldr	r3, [fp, #-12]
  1385d0:	e3833004 	orr	r3, r3, #4
  1385d4:	e3a0201f 	mov	r2, #31
  1385d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385dc:	e51b0010 	ldr	r0, [fp, #-16]
  1385e0:	ebffff68 	bl	138388 <PHY_Write>
  1385e4:	e1a03000 	mov	r3, r0
  1385e8:	ea000025 	b	138684 <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  1385ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1385f0:	e3530000 	cmp	r3, #0
  1385f4:	1a000010 	bne	13863c <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  1385f8:	e24b300c 	sub	r3, fp, #12
  1385fc:	e3a02000 	mov	r2, #0
  138600:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138604:	e51b0010 	ldr	r0, [fp, #-16]
  138608:	ebffff8c 	bl	138440 <PHY_Read>
  13860c:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138610:	e51b3008 	ldr	r3, [fp, #-8]
  138614:	e3530000 	cmp	r3, #0
  138618:	1a000018 	bne	138680 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  13861c:	e51b300c 	ldr	r3, [fp, #-12]
  138620:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  138624:	e3a02000 	mov	r2, #0
  138628:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13862c:	e51b0010 	ldr	r0, [fp, #-16]
  138630:	ebffff54 	bl	138388 <PHY_Write>
  138634:	e1a03000 	mov	r3, r0
  138638:	ea000011 	b	138684 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  13863c:	e24b300c 	sub	r3, fp, #12
  138640:	e3a0201f 	mov	r2, #31
  138644:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138648:	e51b0010 	ldr	r0, [fp, #-16]
  13864c:	ebffff7b 	bl	138440 <PHY_Read>
  138650:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138654:	e51b3008 	ldr	r3, [fp, #-8]
  138658:	e3530000 	cmp	r3, #0
  13865c:	1a000007 	bne	138680 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  138660:	e51b300c 	ldr	r3, [fp, #-12]
  138664:	e3c33004 	bic	r3, r3, #4
  138668:	e3a0201f 	mov	r2, #31
  13866c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138670:	e51b0010 	ldr	r0, [fp, #-16]
  138674:	ebffff43 	bl	138388 <PHY_Write>
  138678:	e1a03000 	mov	r3, r0
  13867c:	ea000000 	b	138684 <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  138680:	e51b3008 	ldr	r3, [fp, #-8]
}
  138684:	e1a00003 	mov	r0, r3
  138688:	e24bd004 	sub	sp, fp, #4
  13868c:	e8bd8800 	pop	{fp, pc}

00138690 <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  138690:	e92d4800 	push	{fp, lr}
  138694:	e28db004 	add	fp, sp, #4
  138698:	e24dd018 	sub	sp, sp, #24
  13869c:	e50b0010 	str	r0, [fp, #-16]
  1386a0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1386a4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  1386a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1386ac:	e3530000 	cmp	r3, #0
  1386b0:	1a000005 	bne	1386cc <PHY_GetLinkStatus+0x3c>
  1386b4:	e3a02f4a 	mov	r2, #296	; 0x128
  1386b8:	e30a1430 	movw	r1, #42032	; 0xa430
  1386bc:	e3401014 	movt	r1, #20
  1386c0:	e30a0414 	movw	r0, #42004	; 0xa414
  1386c4:	e3400014 	movt	r0, #20
  1386c8:	ebff2bb2 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1386cc:	e3a03000 	mov	r3, #0
  1386d0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  1386d4:	e24b300c 	sub	r3, fp, #12
  1386d8:	e3a02001 	mov	r2, #1
  1386dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1386e0:	e51b0010 	ldr	r0, [fp, #-16]
  1386e4:	ebffff55 	bl	138440 <PHY_Read>
  1386e8:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  1386ec:	e51b3008 	ldr	r3, [fp, #-8]
  1386f0:	e3530000 	cmp	r3, #0
  1386f4:	1a00000a 	bne	138724 <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  1386f8:	e51b300c 	ldr	r3, [fp, #-12]
  1386fc:	e2033004 	and	r3, r3, #4
  138700:	e3530000 	cmp	r3, #0
  138704:	1a000003 	bne	138718 <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  138708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13870c:	e3a02000 	mov	r2, #0
  138710:	e5c32000 	strb	r2, [r3]
  138714:	ea000002 	b	138724 <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  138718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13871c:	e3a02001 	mov	r2, #1
  138720:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  138724:	e51b3008 	ldr	r3, [fp, #-8]
}
  138728:	e1a00003 	mov	r0, r3
  13872c:	e24bd004 	sub	sp, fp, #4
  138730:	e8bd8800 	pop	{fp, pc}

00138734 <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  138734:	e92d4800 	push	{fp, lr}
  138738:	e28db004 	add	fp, sp, #4
  13873c:	e24dd020 	sub	sp, sp, #32
  138740:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138744:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  138748:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  13874c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  138750:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138754:	e3530000 	cmp	r3, #0
  138758:	1a000005 	bne	138774 <PHY_GetLinkSpeedDuplex+0x40>
  13875c:	e3002141 	movw	r2, #321	; 0x141
  138760:	e30a1444 	movw	r1, #42052	; 0xa444
  138764:	e3401014 	movt	r1, #20
  138768:	e30a041c 	movw	r0, #42012	; 0xa41c
  13876c:	e3400014 	movt	r0, #20
  138770:	ebff2b88 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138774:	e3a03000 	mov	r3, #0
  138778:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  13877c:	e24b3010 	sub	r3, fp, #16
  138780:	e3a0201f 	mov	r2, #31
  138784:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138788:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13878c:	ebffff2b 	bl	138440 <PHY_Read>
  138790:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  138794:	e51b3010 	ldr	r3, [fp, #-16]
  138798:	e1a03123 	lsr	r3, r3, #2
  13879c:	e2033007 	and	r3, r3, #7
  1387a0:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  1387a4:	e51b300c 	ldr	r3, [fp, #-12]
  1387a8:	e2433001 	sub	r3, r3, #1
  1387ac:	e3530005 	cmp	r3, #5
  1387b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1387b4:	ea000021 	b	138840 <PHY_GetLinkSpeedDuplex+0x10c>
  1387b8:	001387d0 	.word	0x001387d0
  1387bc:	00138808 	.word	0x00138808
  1387c0:	00138840 	.word	0x00138840
  1387c4:	00138840 	.word	0x00138840
  1387c8:	001387ec 	.word	0x001387ec
  1387cc:	00138824 	.word	0x00138824
    {
        case 1:
            *speed = kPHY_Speed10M;
  1387d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387d4:	e3a02000 	mov	r2, #0
  1387d8:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  1387dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1387e0:	e3a02000 	mov	r2, #0
  1387e4:	e5832000 	str	r2, [r3]
            break;
  1387e8:	ea00001a 	b	138858 <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  1387ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387f0:	e3a02000 	mov	r2, #0
  1387f4:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  1387f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1387fc:	e3a02001 	mov	r2, #1
  138800:	e5832000 	str	r2, [r3]
            break;
  138804:	ea000013 	b	138858 <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  138808:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13880c:	e3a02001 	mov	r2, #1
  138810:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138814:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138818:	e3a02000 	mov	r2, #0
  13881c:	e5832000 	str	r2, [r3]
            break;
  138820:	ea00000c 	b	138858 <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  138824:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138828:	e3a02001 	mov	r2, #1
  13882c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138830:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138834:	e3a02001 	mov	r2, #1
  138838:	e5832000 	str	r2, [r3]
            break;
  13883c:	ea000005 	b	138858 <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  138840:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138844:	e3a02001 	mov	r2, #1
  138848:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  13884c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138850:	e3a02001 	mov	r2, #1
  138854:	e5832000 	str	r2, [r3]
    }

    return result;
  138858:	e51b3008 	ldr	r3, [fp, #-8]
}
  13885c:	e1a00003 	mov	r0, r3
  138860:	e24bd004 	sub	sp, fp, #4
  138864:	e8bd8800 	pop	{fp, pc}

00138868 <__udivsi3>:
  138868:	e2512001 	subs	r2, r1, #1
  13886c:	012fff1e 	bxeq	lr
  138870:	3a000074 	bcc	138a48 <__udivsi3+0x1e0>
  138874:	e1500001 	cmp	r0, r1
  138878:	9a00006b 	bls	138a2c <__udivsi3+0x1c4>
  13887c:	e1110002 	tst	r1, r2
  138880:	0a00006c 	beq	138a38 <__udivsi3+0x1d0>
  138884:	e16f3f10 	clz	r3, r0
  138888:	e16f2f11 	clz	r2, r1
  13888c:	e0423003 	sub	r3, r2, r3
  138890:	e273301f 	rsbs	r3, r3, #31
  138894:	10833083 	addne	r3, r3, r3, lsl #1
  138898:	e3a02000 	mov	r2, #0
  13889c:	108ff103 	addne	pc, pc, r3, lsl #2
  1388a0:	e1a00000 	nop			; (mov r0, r0)
  1388a4:	e1500f81 	cmp	r0, r1, lsl #31
  1388a8:	e0a22002 	adc	r2, r2, r2
  1388ac:	20400f81 	subcs	r0, r0, r1, lsl #31
  1388b0:	e1500f01 	cmp	r0, r1, lsl #30
  1388b4:	e0a22002 	adc	r2, r2, r2
  1388b8:	20400f01 	subcs	r0, r0, r1, lsl #30
  1388bc:	e1500e81 	cmp	r0, r1, lsl #29
  1388c0:	e0a22002 	adc	r2, r2, r2
  1388c4:	20400e81 	subcs	r0, r0, r1, lsl #29
  1388c8:	e1500e01 	cmp	r0, r1, lsl #28
  1388cc:	e0a22002 	adc	r2, r2, r2
  1388d0:	20400e01 	subcs	r0, r0, r1, lsl #28
  1388d4:	e1500d81 	cmp	r0, r1, lsl #27
  1388d8:	e0a22002 	adc	r2, r2, r2
  1388dc:	20400d81 	subcs	r0, r0, r1, lsl #27
  1388e0:	e1500d01 	cmp	r0, r1, lsl #26
  1388e4:	e0a22002 	adc	r2, r2, r2
  1388e8:	20400d01 	subcs	r0, r0, r1, lsl #26
  1388ec:	e1500c81 	cmp	r0, r1, lsl #25
  1388f0:	e0a22002 	adc	r2, r2, r2
  1388f4:	20400c81 	subcs	r0, r0, r1, lsl #25
  1388f8:	e1500c01 	cmp	r0, r1, lsl #24
  1388fc:	e0a22002 	adc	r2, r2, r2
  138900:	20400c01 	subcs	r0, r0, r1, lsl #24
  138904:	e1500b81 	cmp	r0, r1, lsl #23
  138908:	e0a22002 	adc	r2, r2, r2
  13890c:	20400b81 	subcs	r0, r0, r1, lsl #23
  138910:	e1500b01 	cmp	r0, r1, lsl #22
  138914:	e0a22002 	adc	r2, r2, r2
  138918:	20400b01 	subcs	r0, r0, r1, lsl #22
  13891c:	e1500a81 	cmp	r0, r1, lsl #21
  138920:	e0a22002 	adc	r2, r2, r2
  138924:	20400a81 	subcs	r0, r0, r1, lsl #21
  138928:	e1500a01 	cmp	r0, r1, lsl #20
  13892c:	e0a22002 	adc	r2, r2, r2
  138930:	20400a01 	subcs	r0, r0, r1, lsl #20
  138934:	e1500981 	cmp	r0, r1, lsl #19
  138938:	e0a22002 	adc	r2, r2, r2
  13893c:	20400981 	subcs	r0, r0, r1, lsl #19
  138940:	e1500901 	cmp	r0, r1, lsl #18
  138944:	e0a22002 	adc	r2, r2, r2
  138948:	20400901 	subcs	r0, r0, r1, lsl #18
  13894c:	e1500881 	cmp	r0, r1, lsl #17
  138950:	e0a22002 	adc	r2, r2, r2
  138954:	20400881 	subcs	r0, r0, r1, lsl #17
  138958:	e1500801 	cmp	r0, r1, lsl #16
  13895c:	e0a22002 	adc	r2, r2, r2
  138960:	20400801 	subcs	r0, r0, r1, lsl #16
  138964:	e1500781 	cmp	r0, r1, lsl #15
  138968:	e0a22002 	adc	r2, r2, r2
  13896c:	20400781 	subcs	r0, r0, r1, lsl #15
  138970:	e1500701 	cmp	r0, r1, lsl #14
  138974:	e0a22002 	adc	r2, r2, r2
  138978:	20400701 	subcs	r0, r0, r1, lsl #14
  13897c:	e1500681 	cmp	r0, r1, lsl #13
  138980:	e0a22002 	adc	r2, r2, r2
  138984:	20400681 	subcs	r0, r0, r1, lsl #13
  138988:	e1500601 	cmp	r0, r1, lsl #12
  13898c:	e0a22002 	adc	r2, r2, r2
  138990:	20400601 	subcs	r0, r0, r1, lsl #12
  138994:	e1500581 	cmp	r0, r1, lsl #11
  138998:	e0a22002 	adc	r2, r2, r2
  13899c:	20400581 	subcs	r0, r0, r1, lsl #11
  1389a0:	e1500501 	cmp	r0, r1, lsl #10
  1389a4:	e0a22002 	adc	r2, r2, r2
  1389a8:	20400501 	subcs	r0, r0, r1, lsl #10
  1389ac:	e1500481 	cmp	r0, r1, lsl #9
  1389b0:	e0a22002 	adc	r2, r2, r2
  1389b4:	20400481 	subcs	r0, r0, r1, lsl #9
  1389b8:	e1500401 	cmp	r0, r1, lsl #8
  1389bc:	e0a22002 	adc	r2, r2, r2
  1389c0:	20400401 	subcs	r0, r0, r1, lsl #8
  1389c4:	e1500381 	cmp	r0, r1, lsl #7
  1389c8:	e0a22002 	adc	r2, r2, r2
  1389cc:	20400381 	subcs	r0, r0, r1, lsl #7
  1389d0:	e1500301 	cmp	r0, r1, lsl #6
  1389d4:	e0a22002 	adc	r2, r2, r2
  1389d8:	20400301 	subcs	r0, r0, r1, lsl #6
  1389dc:	e1500281 	cmp	r0, r1, lsl #5
  1389e0:	e0a22002 	adc	r2, r2, r2
  1389e4:	20400281 	subcs	r0, r0, r1, lsl #5
  1389e8:	e1500201 	cmp	r0, r1, lsl #4
  1389ec:	e0a22002 	adc	r2, r2, r2
  1389f0:	20400201 	subcs	r0, r0, r1, lsl #4
  1389f4:	e1500181 	cmp	r0, r1, lsl #3
  1389f8:	e0a22002 	adc	r2, r2, r2
  1389fc:	20400181 	subcs	r0, r0, r1, lsl #3
  138a00:	e1500101 	cmp	r0, r1, lsl #2
  138a04:	e0a22002 	adc	r2, r2, r2
  138a08:	20400101 	subcs	r0, r0, r1, lsl #2
  138a0c:	e1500081 	cmp	r0, r1, lsl #1
  138a10:	e0a22002 	adc	r2, r2, r2
  138a14:	20400081 	subcs	r0, r0, r1, lsl #1
  138a18:	e1500001 	cmp	r0, r1
  138a1c:	e0a22002 	adc	r2, r2, r2
  138a20:	20400001 	subcs	r0, r0, r1
  138a24:	e1a00002 	mov	r0, r2
  138a28:	e12fff1e 	bx	lr
  138a2c:	03a00001 	moveq	r0, #1
  138a30:	13a00000 	movne	r0, #0
  138a34:	e12fff1e 	bx	lr
  138a38:	e16f2f11 	clz	r2, r1
  138a3c:	e262201f 	rsb	r2, r2, #31
  138a40:	e1a00230 	lsr	r0, r0, r2
  138a44:	e12fff1e 	bx	lr
  138a48:	e3500000 	cmp	r0, #0
  138a4c:	13e00000 	mvnne	r0, #0
  138a50:	ea000097 	b	138cb4 <__aeabi_idiv0>

00138a54 <__aeabi_uidivmod>:
  138a54:	e3510000 	cmp	r1, #0
  138a58:	0afffffa 	beq	138a48 <__udivsi3+0x1e0>
  138a5c:	e92d4003 	push	{r0, r1, lr}
  138a60:	ebffff80 	bl	138868 <__udivsi3>
  138a64:	e8bd4006 	pop	{r1, r2, lr}
  138a68:	e0030092 	mul	r3, r2, r0
  138a6c:	e0411003 	sub	r1, r1, r3
  138a70:	e12fff1e 	bx	lr

00138a74 <__divsi3>:
  138a74:	e3510000 	cmp	r1, #0
  138a78:	0a000081 	beq	138c84 <.divsi3_skip_div0_test+0x208>

00138a7c <.divsi3_skip_div0_test>:
  138a7c:	e020c001 	eor	ip, r0, r1
  138a80:	42611000 	rsbmi	r1, r1, #0
  138a84:	e2512001 	subs	r2, r1, #1
  138a88:	0a000070 	beq	138c50 <.divsi3_skip_div0_test+0x1d4>
  138a8c:	e1b03000 	movs	r3, r0
  138a90:	42603000 	rsbmi	r3, r0, #0
  138a94:	e1530001 	cmp	r3, r1
  138a98:	9a00006f 	bls	138c5c <.divsi3_skip_div0_test+0x1e0>
  138a9c:	e1110002 	tst	r1, r2
  138aa0:	0a000071 	beq	138c6c <.divsi3_skip_div0_test+0x1f0>
  138aa4:	e16f2f13 	clz	r2, r3
  138aa8:	e16f0f11 	clz	r0, r1
  138aac:	e0402002 	sub	r2, r0, r2
  138ab0:	e272201f 	rsbs	r2, r2, #31
  138ab4:	10822082 	addne	r2, r2, r2, lsl #1
  138ab8:	e3a00000 	mov	r0, #0
  138abc:	108ff102 	addne	pc, pc, r2, lsl #2
  138ac0:	e1a00000 	nop			; (mov r0, r0)
  138ac4:	e1530f81 	cmp	r3, r1, lsl #31
  138ac8:	e0a00000 	adc	r0, r0, r0
  138acc:	20433f81 	subcs	r3, r3, r1, lsl #31
  138ad0:	e1530f01 	cmp	r3, r1, lsl #30
  138ad4:	e0a00000 	adc	r0, r0, r0
  138ad8:	20433f01 	subcs	r3, r3, r1, lsl #30
  138adc:	e1530e81 	cmp	r3, r1, lsl #29
  138ae0:	e0a00000 	adc	r0, r0, r0
  138ae4:	20433e81 	subcs	r3, r3, r1, lsl #29
  138ae8:	e1530e01 	cmp	r3, r1, lsl #28
  138aec:	e0a00000 	adc	r0, r0, r0
  138af0:	20433e01 	subcs	r3, r3, r1, lsl #28
  138af4:	e1530d81 	cmp	r3, r1, lsl #27
  138af8:	e0a00000 	adc	r0, r0, r0
  138afc:	20433d81 	subcs	r3, r3, r1, lsl #27
  138b00:	e1530d01 	cmp	r3, r1, lsl #26
  138b04:	e0a00000 	adc	r0, r0, r0
  138b08:	20433d01 	subcs	r3, r3, r1, lsl #26
  138b0c:	e1530c81 	cmp	r3, r1, lsl #25
  138b10:	e0a00000 	adc	r0, r0, r0
  138b14:	20433c81 	subcs	r3, r3, r1, lsl #25
  138b18:	e1530c01 	cmp	r3, r1, lsl #24
  138b1c:	e0a00000 	adc	r0, r0, r0
  138b20:	20433c01 	subcs	r3, r3, r1, lsl #24
  138b24:	e1530b81 	cmp	r3, r1, lsl #23
  138b28:	e0a00000 	adc	r0, r0, r0
  138b2c:	20433b81 	subcs	r3, r3, r1, lsl #23
  138b30:	e1530b01 	cmp	r3, r1, lsl #22
  138b34:	e0a00000 	adc	r0, r0, r0
  138b38:	20433b01 	subcs	r3, r3, r1, lsl #22
  138b3c:	e1530a81 	cmp	r3, r1, lsl #21
  138b40:	e0a00000 	adc	r0, r0, r0
  138b44:	20433a81 	subcs	r3, r3, r1, lsl #21
  138b48:	e1530a01 	cmp	r3, r1, lsl #20
  138b4c:	e0a00000 	adc	r0, r0, r0
  138b50:	20433a01 	subcs	r3, r3, r1, lsl #20
  138b54:	e1530981 	cmp	r3, r1, lsl #19
  138b58:	e0a00000 	adc	r0, r0, r0
  138b5c:	20433981 	subcs	r3, r3, r1, lsl #19
  138b60:	e1530901 	cmp	r3, r1, lsl #18
  138b64:	e0a00000 	adc	r0, r0, r0
  138b68:	20433901 	subcs	r3, r3, r1, lsl #18
  138b6c:	e1530881 	cmp	r3, r1, lsl #17
  138b70:	e0a00000 	adc	r0, r0, r0
  138b74:	20433881 	subcs	r3, r3, r1, lsl #17
  138b78:	e1530801 	cmp	r3, r1, lsl #16
  138b7c:	e0a00000 	adc	r0, r0, r0
  138b80:	20433801 	subcs	r3, r3, r1, lsl #16
  138b84:	e1530781 	cmp	r3, r1, lsl #15
  138b88:	e0a00000 	adc	r0, r0, r0
  138b8c:	20433781 	subcs	r3, r3, r1, lsl #15
  138b90:	e1530701 	cmp	r3, r1, lsl #14
  138b94:	e0a00000 	adc	r0, r0, r0
  138b98:	20433701 	subcs	r3, r3, r1, lsl #14
  138b9c:	e1530681 	cmp	r3, r1, lsl #13
  138ba0:	e0a00000 	adc	r0, r0, r0
  138ba4:	20433681 	subcs	r3, r3, r1, lsl #13
  138ba8:	e1530601 	cmp	r3, r1, lsl #12
  138bac:	e0a00000 	adc	r0, r0, r0
  138bb0:	20433601 	subcs	r3, r3, r1, lsl #12
  138bb4:	e1530581 	cmp	r3, r1, lsl #11
  138bb8:	e0a00000 	adc	r0, r0, r0
  138bbc:	20433581 	subcs	r3, r3, r1, lsl #11
  138bc0:	e1530501 	cmp	r3, r1, lsl #10
  138bc4:	e0a00000 	adc	r0, r0, r0
  138bc8:	20433501 	subcs	r3, r3, r1, lsl #10
  138bcc:	e1530481 	cmp	r3, r1, lsl #9
  138bd0:	e0a00000 	adc	r0, r0, r0
  138bd4:	20433481 	subcs	r3, r3, r1, lsl #9
  138bd8:	e1530401 	cmp	r3, r1, lsl #8
  138bdc:	e0a00000 	adc	r0, r0, r0
  138be0:	20433401 	subcs	r3, r3, r1, lsl #8
  138be4:	e1530381 	cmp	r3, r1, lsl #7
  138be8:	e0a00000 	adc	r0, r0, r0
  138bec:	20433381 	subcs	r3, r3, r1, lsl #7
  138bf0:	e1530301 	cmp	r3, r1, lsl #6
  138bf4:	e0a00000 	adc	r0, r0, r0
  138bf8:	20433301 	subcs	r3, r3, r1, lsl #6
  138bfc:	e1530281 	cmp	r3, r1, lsl #5
  138c00:	e0a00000 	adc	r0, r0, r0
  138c04:	20433281 	subcs	r3, r3, r1, lsl #5
  138c08:	e1530201 	cmp	r3, r1, lsl #4
  138c0c:	e0a00000 	adc	r0, r0, r0
  138c10:	20433201 	subcs	r3, r3, r1, lsl #4
  138c14:	e1530181 	cmp	r3, r1, lsl #3
  138c18:	e0a00000 	adc	r0, r0, r0
  138c1c:	20433181 	subcs	r3, r3, r1, lsl #3
  138c20:	e1530101 	cmp	r3, r1, lsl #2
  138c24:	e0a00000 	adc	r0, r0, r0
  138c28:	20433101 	subcs	r3, r3, r1, lsl #2
  138c2c:	e1530081 	cmp	r3, r1, lsl #1
  138c30:	e0a00000 	adc	r0, r0, r0
  138c34:	20433081 	subcs	r3, r3, r1, lsl #1
  138c38:	e1530001 	cmp	r3, r1
  138c3c:	e0a00000 	adc	r0, r0, r0
  138c40:	20433001 	subcs	r3, r3, r1
  138c44:	e35c0000 	cmp	ip, #0
  138c48:	42600000 	rsbmi	r0, r0, #0
  138c4c:	e12fff1e 	bx	lr
  138c50:	e13c0000 	teq	ip, r0
  138c54:	42600000 	rsbmi	r0, r0, #0
  138c58:	e12fff1e 	bx	lr
  138c5c:	33a00000 	movcc	r0, #0
  138c60:	01a00fcc 	asreq	r0, ip, #31
  138c64:	03800001 	orreq	r0, r0, #1
  138c68:	e12fff1e 	bx	lr
  138c6c:	e16f2f11 	clz	r2, r1
  138c70:	e262201f 	rsb	r2, r2, #31
  138c74:	e35c0000 	cmp	ip, #0
  138c78:	e1a00233 	lsr	r0, r3, r2
  138c7c:	42600000 	rsbmi	r0, r0, #0
  138c80:	e12fff1e 	bx	lr
  138c84:	e3500000 	cmp	r0, #0
  138c88:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138c8c:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  138c90:	ea000007 	b	138cb4 <__aeabi_idiv0>

00138c94 <__aeabi_idivmod>:
  138c94:	e3510000 	cmp	r1, #0
  138c98:	0afffff9 	beq	138c84 <.divsi3_skip_div0_test+0x208>
  138c9c:	e92d4003 	push	{r0, r1, lr}
  138ca0:	ebffff75 	bl	138a7c <.divsi3_skip_div0_test>
  138ca4:	e8bd4006 	pop	{r1, r2, lr}
  138ca8:	e0030092 	mul	r3, r2, r0
  138cac:	e0411003 	sub	r1, r1, r3
  138cb0:	e12fff1e 	bx	lr

00138cb4 <__aeabi_idiv0>:
  138cb4:	e92d4002 	push	{r1, lr}
  138cb8:	e3a00008 	mov	r0, #8
  138cbc:	eb00154f 	bl	13e200 <raise>
  138cc0:	e8bd8002 	pop	{r1, pc}

00138cc4 <dummy>:
  138cc4:	e12fff1e 	bx	lr

00138cc8 <dummy1>:
  138cc8:	e12fff1e 	bx	lr

00138ccc <__init_libc>:
  138ccc:	e92d4030 	push	{r4, r5, lr}
  138cd0:	e1a04000 	mov	r4, r0
  138cd4:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138cd8:	e3a02098 	mov	r2, #152	; 0x98
  138cdc:	e1a05001 	mov	r5, r1
  138ce0:	e1a0000d 	mov	r0, sp
  138ce4:	e3a01000 	mov	r1, #0
  138ce8:	eb00215d 	bl	141264 <memset>
  138cec:	e5942000 	ldr	r2, [r4]
  138cf0:	e59f3118 	ldr	r3, [pc, #280]	; 138e10 <__init_libc+0x144>
  138cf4:	e3520000 	cmp	r2, #0
  138cf8:	e5834000 	str	r4, [r3]
  138cfc:	03a02004 	moveq	r2, #4
  138d00:	0a000009 	beq	138d2c <__init_libc+0x60>
  138d04:	e1a03004 	mov	r3, r4
  138d08:	e3a02000 	mov	r2, #0
  138d0c:	ea000000 	b	138d14 <__init_libc+0x48>
  138d10:	e1a02000 	mov	r2, r0
  138d14:	e5b31004 	ldr	r1, [r3, #4]!
  138d18:	e2820001 	add	r0, r2, #1
  138d1c:	e3510000 	cmp	r1, #0
  138d20:	1afffffa 	bne	138d10 <__init_libc+0x44>
  138d24:	e2822002 	add	r2, r2, #2
  138d28:	e1a02102 	lsl	r2, r2, #2
  138d2c:	e7943002 	ldr	r3, [r4, r2]
  138d30:	e59f00dc 	ldr	r0, [pc, #220]	; 138e14 <__init_libc+0x148>
  138d34:	e0842002 	add	r2, r4, r2
  138d38:	e3530000 	cmp	r3, #0
  138d3c:	e5802010 	str	r2, [r0, #16]
  138d40:	0a00002d 	beq	138dfc <__init_libc+0x130>
  138d44:	e3530025 	cmp	r3, #37	; 0x25
  138d48:	95921004 	ldrls	r1, [r2, #4]
  138d4c:	928dc098 	addls	ip, sp, #152	; 0x98
  138d50:	908c3103 	addls	r3, ip, r3, lsl #2
  138d54:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  138d58:	e5b23008 	ldr	r3, [r2, #8]!
  138d5c:	e3530000 	cmp	r3, #0
  138d60:	1afffff7 	bne	138d44 <__init_libc+0x78>
  138d64:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  138d68:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  138d6c:	e59d2018 	ldr	r2, [sp, #24]
  138d70:	e59f10a0 	ldr	r1, [pc, #160]	; 138e18 <__init_libc+0x14c>
  138d74:	e5802024 	str	r2, [r0, #36]	; 0x24
  138d78:	e59f209c 	ldr	r2, [pc, #156]	; 138e1c <__init_libc+0x150>
  138d7c:	e3550000 	cmp	r5, #0
  138d80:	e5813000 	str	r3, [r1]
  138d84:	e582c000 	str	ip, [r2]
  138d88:	0a000012 	beq	138dd8 <__init_libc+0x10c>
  138d8c:	e59f308c 	ldr	r3, [pc, #140]	; 138e20 <__init_libc+0x154>
  138d90:	e59f208c 	ldr	r2, [pc, #140]	; 138e24 <__init_libc+0x158>
  138d94:	e5835000 	str	r5, [r3]
  138d98:	e5825000 	str	r5, [r2]
  138d9c:	e5d53000 	ldrb	r3, [r5]
  138da0:	e3530000 	cmp	r3, #0
  138da4:	0a000005 	beq	138dc0 <__init_libc+0xf4>
  138da8:	e2851001 	add	r1, r5, #1
  138dac:	e353002f 	cmp	r3, #47	; 0x2f
  138db0:	05821000 	streq	r1, [r2]
  138db4:	e4d13001 	ldrb	r3, [r1], #1
  138db8:	e3530000 	cmp	r3, #0
  138dbc:	1afffffa 	bne	138dac <__init_libc+0xe0>
  138dc0:	e1a0000d 	mov	r0, sp
  138dc4:	eb002848 	bl	142eec <__init_tls>
  138dc8:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138dcc:	eb0028bd 	bl	1430c8 <__init_ssp>
  138dd0:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138dd4:	e8bd8030 	pop	{r4, r5, pc}
  138dd8:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138ddc:	e3510000 	cmp	r1, #0
  138de0:	1a000008 	bne	138e08 <__init_libc+0x13c>
  138de4:	e59f303c 	ldr	r3, [pc, #60]	; 138e28 <__init_libc+0x15c>
  138de8:	e59f1030 	ldr	r1, [pc, #48]	; 138e20 <__init_libc+0x154>
  138dec:	e59f2030 	ldr	r2, [pc, #48]	; 138e24 <__init_libc+0x158>
  138df0:	e5813000 	str	r3, [r1]
  138df4:	e5823000 	str	r3, [r2]
  138df8:	eafffff0 	b	138dc0 <__init_libc+0xf4>
  138dfc:	e1a02003 	mov	r2, r3
  138e00:	e1a0c003 	mov	ip, r3
  138e04:	eaffffd9 	b	138d70 <__init_libc+0xa4>
  138e08:	e1a05001 	mov	r5, r1
  138e0c:	eaffffde 	b	138d8c <__init_libc+0xc0>
  138e10:	0014f4b0 	.word	0x0014f4b0
  138e14:	0015d094 	.word	0x0015d094
  138e18:	0015d090 	.word	0x0015d090
  138e1c:	0015d0d4 	.word	0x0015d0d4
  138e20:	0014ec40 	.word	0x0014ec40
  138e24:	0014ec3c 	.word	0x0014ec3c
  138e28:	0014c6d8 	.word	0x0014c6d8

00138e2c <__libc_start_init>:
  138e2c:	e92d4070 	push	{r4, r5, r6, lr}
  138e30:	e59f4020 	ldr	r4, [pc, #32]	; 138e58 <__libc_start_init+0x2c>
  138e34:	e59f5020 	ldr	r5, [pc, #32]	; 138e5c <__libc_start_init+0x30>
  138e38:	eb003147 	bl	14535c <_init>
  138e3c:	e1540005 	cmp	r4, r5
  138e40:	28bd8070 	popcs	{r4, r5, r6, pc}
  138e44:	e4943004 	ldr	r3, [r4], #4
  138e48:	e12fff33 	blx	r3
  138e4c:	e1540005 	cmp	r4, r5
  138e50:	3afffffb 	bcc	138e44 <__libc_start_init+0x18>
  138e54:	e8bd8070 	pop	{r4, r5, r6, pc}
  138e58:	0014d3e8 	.word	0x0014d3e8
  138e5c:	0014d3ec 	.word	0x0014d3ec

00138e60 <libc_start_main_stage2>:
  138e60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  138e64:	e1a05001 	mov	r5, r1
  138e68:	e1a06002 	mov	r6, r2
  138e6c:	e2814001 	add	r4, r1, #1
  138e70:	e0824104 	add	r4, r2, r4, lsl #2
  138e74:	e1a07000 	mov	r7, r0
  138e78:	ebffffeb 	bl	138e2c <__libc_start_init>
  138e7c:	e1a02004 	mov	r2, r4
  138e80:	e1a01006 	mov	r1, r6
  138e84:	e1a00005 	mov	r0, r5
  138e88:	e12fff37 	blx	r7
  138e8c:	eb000056 	bl	138fec <exit>

00138e90 <__libc_start_main>:
  138e90:	e92d4070 	push	{r4, r5, r6, lr}
  138e94:	e1a05001 	mov	r5, r1
  138e98:	e1a04002 	mov	r4, r2
  138e9c:	e1a06000 	mov	r6, r0
  138ea0:	e2810001 	add	r0, r1, #1
  138ea4:	e0820100 	add	r0, r2, r0, lsl #2
  138ea8:	e5921000 	ldr	r1, [r2]
  138eac:	ebffff86 	bl	138ccc <__init_libc>
  138eb0:	e59f3010 	ldr	r3, [pc, #16]	; 138ec8 <__libc_start_main+0x38>
  138eb4:	e1a02004 	mov	r2, r4
  138eb8:	e1a01005 	mov	r1, r5
  138ebc:	e1a00006 	mov	r0, r6
  138ec0:	e8bd4070 	pop	{r4, r5, r6, lr}
  138ec4:	e12fff13 	bx	r3
  138ec8:	00138e60 	.word	0x00138e60

00138ecc <__errno_location>:
  138ecc:	e59f3010 	ldr	r3, [pc, #16]	; 138ee4 <__errno_location+0x18>
  138ed0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138ed4:	e5930000 	ldr	r0, [r3]
  138ed8:	e12fff30 	blx	r0
  138edc:	e2400058 	sub	r0, r0, #88	; 0x58
  138ee0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  138ee4:	0014d3dc 	.word	0x0014d3dc

00138ee8 <__strerror_l>:
  138ee8:	e3500054 	cmp	r0, #84	; 0x54
  138eec:	0a000013 	beq	138f40 <__strerror_l+0x58>
  138ef0:	e3a0c001 	mov	ip, #1
  138ef4:	e3a03021 	mov	r3, #33	; 0x21
  138ef8:	e59f204c 	ldr	r2, [pc, #76]	; 138f4c <__strerror_l+0x64>
  138efc:	e1530000 	cmp	r3, r0
  138f00:	0a000003 	beq	138f14 <__strerror_l+0x2c>
  138f04:	e4d23001 	ldrb	r3, [r2], #1
  138f08:	e28cc001 	add	ip, ip, #1
  138f0c:	e3530000 	cmp	r3, #0
  138f10:	1afffff9 	bne	138efc <__strerror_l+0x14>
  138f14:	e3a02049 	mov	r2, #73	; 0x49
  138f18:	e59f3030 	ldr	r3, [pc, #48]	; 138f50 <__strerror_l+0x68>
  138f1c:	e3520000 	cmp	r2, #0
  138f20:	15f32001 	ldrbne	r2, [r3, #1]!
  138f24:	1afffffc 	bne	138f1c <__strerror_l+0x34>
  138f28:	e25cc001 	subs	ip, ip, #1
  138f2c:	e2830001 	add	r0, r3, #1
  138f30:	0a000003 	beq	138f44 <__strerror_l+0x5c>
  138f34:	e5d32001 	ldrb	r2, [r3, #1]
  138f38:	e1a03000 	mov	r3, r0
  138f3c:	eafffff6 	b	138f1c <__strerror_l+0x34>
  138f40:	e59f0008 	ldr	r0, [pc, #8]	; 138f50 <__strerror_l+0x68>
  138f44:	e5911014 	ldr	r1, [r1, #20]
  138f48:	ea000d54 	b	13c4a0 <__lctrans>
  138f4c:	0014a45e 	.word	0x0014a45e
  138f50:	0014a4b8 	.word	0x0014a4b8

00138f54 <strerror>:
  138f54:	e1a03000 	mov	r3, r0
  138f58:	e59f2018 	ldr	r2, [pc, #24]	; 138f78 <strerror+0x24>
  138f5c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f60:	e5920000 	ldr	r0, [r2]
  138f64:	e12fff30 	blx	r0
  138f68:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  138f6c:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  138f70:	e1a00003 	mov	r0, r3
  138f74:	eaffffdb 	b	138ee8 <__strerror_l>
  138f78:	0014d3dc 	.word	0x0014d3dc

00138f7c <__assert_fail>:
  138f7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f80:	e24dd00c 	sub	sp, sp, #12
  138f84:	e58d2004 	str	r2, [sp, #4]
  138f88:	e58d3000 	str	r3, [sp]
  138f8c:	e1a02000 	mov	r2, r0
  138f90:	e1a03001 	mov	r3, r1
  138f94:	e59f0010 	ldr	r0, [pc, #16]	; 138fac <__assert_fail+0x30>
  138f98:	e59f1010 	ldr	r1, [pc, #16]	; 138fb0 <__assert_fail+0x34>
  138f9c:	eb001522 	bl	13e42c <fprintf>
  138fa0:	e3a00000 	mov	r0, #0
  138fa4:	eb0014af 	bl	13e268 <fflush>
  138fa8:	eb00286a 	bl	143158 <abort>
  138fac:	0014d2a8 	.word	0x0014d2a8
  138fb0:	0014abd8 	.word	0x0014abd8

00138fb4 <__funcs_on_exit>:
  138fb4:	e12fff1e 	bx	lr

00138fb8 <__libc_exit_fini>:
  138fb8:	e92d4070 	push	{r4, r5, r6, lr}
  138fbc:	e59f4020 	ldr	r4, [pc, #32]	; 138fe4 <__libc_exit_fini+0x2c>
  138fc0:	e59f5020 	ldr	r5, [pc, #32]	; 138fe8 <__libc_exit_fini+0x30>
  138fc4:	e1540005 	cmp	r4, r5
  138fc8:	9a000003 	bls	138fdc <__libc_exit_fini+0x24>
  138fcc:	e5343004 	ldr	r3, [r4, #-4]!
  138fd0:	e12fff33 	blx	r3
  138fd4:	e1540005 	cmp	r4, r5
  138fd8:	8afffffb 	bhi	138fcc <__libc_exit_fini+0x14>
  138fdc:	e8bd4070 	pop	{r4, r5, r6, lr}
  138fe0:	ea0030e0 	b	145368 <_fini>
  138fe4:	0014d3f0 	.word	0x0014d3f0
  138fe8:	0014d3ec 	.word	0x0014d3ec

00138fec <exit>:
  138fec:	e92d4010 	push	{r4, lr}
  138ff0:	e1a04000 	mov	r4, r0
  138ff4:	ebffffee 	bl	138fb4 <__funcs_on_exit>
  138ff8:	ebffffee 	bl	138fb8 <__libc_exit_fini>
  138ffc:	eb002da2 	bl	14468c <__stdio_exit>
  139000:	e1a00004 	mov	r0, r4
  139004:	eb002846 	bl	143124 <_Exit>

00139008 <fcntl>:
  139008:	e92d000e 	push	{r1, r2, r3}
  13900c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  139010:	e24dd020 	sub	sp, sp, #32
  139014:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  139018:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  13901c:	e28d3038 	add	r3, sp, #56	; 0x38
  139020:	e3540004 	cmp	r4, #4
  139024:	e1a06000 	mov	r6, r0
  139028:	e58d3014 	str	r3, [sp, #20]
  13902c:	03855802 	orreq	r5, r5, #131072	; 0x20000
  139030:	0a00000f 	beq	139074 <fcntl+0x6c>
  139034:	e354000e 	cmp	r4, #14
  139038:	0a00001a 	beq	1390a8 <fcntl+0xa0>
  13903c:	e3540009 	cmp	r4, #9
  139040:	0a000026 	beq	1390e0 <fcntl+0xd8>
  139044:	e59f3234 	ldr	r3, [pc, #564]	; 139280 <fcntl+0x278>
  139048:	e1540003 	cmp	r4, r3
  13904c:	0a000034 	beq	139124 <fcntl+0x11c>
  139050:	e244300c 	sub	r3, r4, #12
  139054:	e3530004 	cmp	r3, #4
  139058:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13905c:	ea000004 	b	139074 <fcntl+0x6c>
  139060:	00139074 	.word	0x00139074
  139064:	00139074 	.word	0x00139074
  139068:	00139074 	.word	0x00139074
  13906c:	00139074 	.word	0x00139074
  139070:	00139074 	.word	0x00139074
  139074:	e3a000dd 	mov	r0, #221	; 0xdd
  139078:	eb000cc9 	bl	13c3a4 <get_rtt_syscall>
  13907c:	e2503000 	subs	r3, r0, #0
  139080:	0a000046 	beq	1391a0 <fcntl+0x198>
  139084:	e1a02005 	mov	r2, r5
  139088:	e1a01004 	mov	r1, r4
  13908c:	e1a00006 	mov	r0, r6
  139090:	e12fff33 	blx	r3
  139094:	eb000cf7 	bl	13c478 <__syscall_ret>
  139098:	e28dd020 	add	sp, sp, #32
  13909c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1390a0:	e28dd00c 	add	sp, sp, #12
  1390a4:	e12fff1e 	bx	lr
  1390a8:	e3a00000 	mov	r0, #0
  1390ac:	e1a03005 	mov	r3, r5
  1390b0:	e1a02004 	mov	r2, r4
  1390b4:	e1a01006 	mov	r1, r6
  1390b8:	e58d0008 	str	r0, [sp, #8]
  1390bc:	e58d0004 	str	r0, [sp, #4]
  1390c0:	e58d0000 	str	r0, [sp]
  1390c4:	e3a000dd 	mov	r0, #221	; 0xdd
  1390c8:	eb00231c 	bl	141d40 <__syscall_cp>
  1390cc:	eb000ce9 	bl	13c478 <__syscall_ret>
  1390d0:	e28dd020 	add	sp, sp, #32
  1390d4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1390d8:	e28dd00c 	add	sp, sp, #12
  1390dc:	e12fff1e 	bx	lr
  1390e0:	e3a000dd 	mov	r0, #221	; 0xdd
  1390e4:	eb000cae 	bl	13c3a4 <get_rtt_syscall>
  1390e8:	e2503000 	subs	r3, r0, #0
  1390ec:	0a000007 	beq	139110 <fcntl+0x108>
  1390f0:	e28d2018 	add	r2, sp, #24
  1390f4:	e3a01010 	mov	r1, #16
  1390f8:	e1a00006 	mov	r0, r6
  1390fc:	e12fff33 	blx	r3
  139100:	e3700016 	cmn	r0, #22
  139104:	0a000027 	beq	1391a8 <fcntl+0x1a0>
  139108:	e3500000 	cmp	r0, #0
  13910c:	1affffe0 	bne	139094 <fcntl+0x8c>
  139110:	e59d3018 	ldr	r3, [sp, #24]
  139114:	e59d001c 	ldr	r0, [sp, #28]
  139118:	e3530002 	cmp	r3, #2
  13911c:	02600000 	rsbeq	r0, r0, #0
  139120:	eaffffdc 	b	139098 <fcntl+0x90>
  139124:	e3a000dd 	mov	r0, #221	; 0xdd
  139128:	eb000c9d 	bl	13c3a4 <get_rtt_syscall>
  13912c:	e2503000 	subs	r3, r0, #0
  139130:	0a00000f 	beq	139174 <fcntl+0x16c>
  139134:	e1a02005 	mov	r2, r5
  139138:	e1a01004 	mov	r1, r4
  13913c:	e1a00006 	mov	r0, r6
  139140:	e12fff33 	blx	r3
  139144:	e3700016 	cmn	r0, #22
  139148:	e1a07000 	mov	r7, r0
  13914c:	0a00001e 	beq	1391cc <fcntl+0x1c4>
  139150:	e3500000 	cmp	r0, #0
  139154:	e1a04000 	mov	r4, r0
  139158:	aa000007 	bge	13917c <fcntl+0x174>
  13915c:	e1a00004 	mov	r0, r4
  139160:	eb000cc4 	bl	13c478 <__syscall_ret>
  139164:	e28dd020 	add	sp, sp, #32
  139168:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13916c:	e28dd00c 	add	sp, sp, #12
  139170:	e12fff1e 	bx	lr
  139174:	e1a04003 	mov	r4, r3
  139178:	e1a07003 	mov	r7, r3
  13917c:	e3a000dd 	mov	r0, #221	; 0xdd
  139180:	eb000c87 	bl	13c3a4 <get_rtt_syscall>
  139184:	e2503000 	subs	r3, r0, #0
  139188:	0afffff3 	beq	13915c <fcntl+0x154>
  13918c:	e1a00007 	mov	r0, r7
  139190:	e3a02001 	mov	r2, #1
  139194:	e3a01002 	mov	r1, #2
  139198:	e12fff33 	blx	r3
  13919c:	eaffffee 	b	13915c <fcntl+0x154>
  1391a0:	e1a00003 	mov	r0, r3
  1391a4:	eaffffba 	b	139094 <fcntl+0x8c>
  1391a8:	e3a000dd 	mov	r0, #221	; 0xdd
  1391ac:	eb000c7c 	bl	13c3a4 <get_rtt_syscall>
  1391b0:	e2503000 	subs	r3, r0, #0
  1391b4:	0a00002f 	beq	139278 <fcntl+0x270>
  1391b8:	e1a02005 	mov	r2, r5
  1391bc:	e1a01004 	mov	r1, r4
  1391c0:	e1a00006 	mov	r0, r6
  1391c4:	e12fff33 	blx	r3
  1391c8:	eaffffb2 	b	139098 <fcntl+0x90>
  1391cc:	e3a000dd 	mov	r0, #221	; 0xdd
  1391d0:	eb000c73 	bl	13c3a4 <get_rtt_syscall>
  1391d4:	e2503000 	subs	r3, r0, #0
  1391d8:	0a00000b 	beq	13920c <fcntl+0x204>
  1391dc:	e1a01004 	mov	r1, r4
  1391e0:	e3a02000 	mov	r2, #0
  1391e4:	e1a00006 	mov	r0, r6
  1391e8:	e12fff33 	blx	r3
  1391ec:	e3700016 	cmn	r0, #22
  1391f0:	e1a04000 	mov	r4, r0
  1391f4:	0a00000c 	beq	13922c <fcntl+0x224>
  1391f8:	e3500000 	cmp	r0, #0
  1391fc:	aa000003 	bge	139210 <fcntl+0x208>
  139200:	e3e00015 	mvn	r0, #21
  139204:	eb000c9b 	bl	13c478 <__syscall_ret>
  139208:	eaffffa2 	b	139098 <fcntl+0x90>
  13920c:	e1a04003 	mov	r4, r3
  139210:	e3a00006 	mov	r0, #6
  139214:	eb000c62 	bl	13c3a4 <get_rtt_syscall>
  139218:	e2503000 	subs	r3, r0, #0
  13921c:	0afffff7 	beq	139200 <fcntl+0x1f8>
  139220:	e1a00004 	mov	r0, r4
  139224:	e12fff33 	blx	r3
  139228:	eafffff4 	b	139200 <fcntl+0x1f8>
  13922c:	e3a000dd 	mov	r0, #221	; 0xdd
  139230:	eb000c5b 	bl	13c3a4 <get_rtt_syscall>
  139234:	e2504000 	subs	r4, r0, #0
  139238:	0a000005 	beq	139254 <fcntl+0x24c>
  13923c:	e1a02005 	mov	r2, r5
  139240:	e1a00006 	mov	r0, r6
  139244:	e3a01000 	mov	r1, #0
  139248:	e12fff34 	blx	r4
  13924c:	e2504000 	subs	r4, r0, #0
  139250:	baffffc1 	blt	13915c <fcntl+0x154>
  139254:	e3a000dd 	mov	r0, #221	; 0xdd
  139258:	eb000c51 	bl	13c3a4 <get_rtt_syscall>
  13925c:	e2503000 	subs	r3, r0, #0
  139260:	0affffbd 	beq	13915c <fcntl+0x154>
  139264:	e3a02001 	mov	r2, #1
  139268:	e3a01002 	mov	r1, #2
  13926c:	e1a00004 	mov	r0, r4
  139270:	e12fff33 	blx	r3
  139274:	eaffffb8 	b	13915c <fcntl+0x154>
  139278:	e1a00003 	mov	r0, r3
  13927c:	eaffff85 	b	139098 <fcntl+0x90>
  139280:	00000406 	.word	0x00000406

00139284 <syscall_set_thread_area>:
  139284:	e1a01000 	mov	r1, r0
  139288:	e3a0007b 	mov	r0, #123	; 0x7b
  13928c:	ea000c6f 	b	13c450 <syscall>

00139290 <syscall_trace>:
  139290:	e92d4070 	push	{r4, r5, r6, lr}
  139294:	e1a04000 	mov	r4, r0
  139298:	e1a05001 	mov	r5, r1
  13929c:	e3a0201d 	mov	r2, #29
  1392a0:	e59f1018 	ldr	r1, [pc, #24]	; 1392c0 <syscall_trace+0x30>
  1392a4:	e3a000ff 	mov	r0, #255	; 0xff
  1392a8:	eb000c68 	bl	13c450 <syscall>
  1392ac:	e1a02005 	mov	r2, r5
  1392b0:	e1a01004 	mov	r1, r4
  1392b4:	e8bd4070 	pop	{r4, r5, r6, lr}
  1392b8:	e3a000ff 	mov	r0, #255	; 0xff
  1392bc:	ea000c63 	b	13c450 <syscall>
  1392c0:	0014cd1c 	.word	0x0014cd1c

001392c4 <syscall_io_pgetevents>:
  1392c4:	e92d4010 	push	{r4, lr}
  1392c8:	e3a01016 	mov	r1, #22
  1392cc:	e59f0008 	ldr	r0, [pc, #8]	; 1392dc <syscall_io_pgetevents+0x18>
  1392d0:	ebffffee 	bl	139290 <syscall_trace>
  1392d4:	e3a00000 	mov	r0, #0
  1392d8:	e8bd8010 	pop	{r4, pc}
  1392dc:	0014c6a4 	.word	0x0014c6a4

001392e0 <syscall_rseq>:
  1392e0:	e92d4010 	push	{r4, lr}
  1392e4:	e3a0100d 	mov	r1, #13
  1392e8:	e59f0008 	ldr	r0, [pc, #8]	; 1392f8 <syscall_rseq+0x18>
  1392ec:	ebffffe7 	bl	139290 <syscall_trace>
  1392f0:	e3a00000 	mov	r0, #0
  1392f4:	e8bd8010 	pop	{r4, pc}
  1392f8:	0014c694 	.word	0x0014c694

001392fc <syscall_statx>:
  1392fc:	e92d4010 	push	{r4, lr}
  139300:	e3a0100e 	mov	r1, #14
  139304:	e59f0008 	ldr	r0, [pc, #8]	; 139314 <syscall_statx+0x18>
  139308:	ebffffe0 	bl	139290 <syscall_trace>
  13930c:	e3a00000 	mov	r0, #0
  139310:	e8bd8010 	pop	{r4, pc}
  139314:	0014c684 	.word	0x0014c684

00139318 <syscall_pkey_free>:
  139318:	e92d4010 	push	{r4, lr}
  13931c:	e3a01012 	mov	r1, #18
  139320:	e59f0008 	ldr	r0, [pc, #8]	; 139330 <syscall_pkey_free+0x18>
  139324:	ebffffd9 	bl	139290 <syscall_trace>
  139328:	e3a00000 	mov	r0, #0
  13932c:	e8bd8010 	pop	{r4, pc}
  139330:	0014c670 	.word	0x0014c670

00139334 <syscall_pkey_alloc>:
  139334:	e92d4010 	push	{r4, lr}
  139338:	e3a01013 	mov	r1, #19
  13933c:	e59f0008 	ldr	r0, [pc, #8]	; 13934c <syscall_pkey_alloc+0x18>
  139340:	ebffffd2 	bl	139290 <syscall_trace>
  139344:	e3a00000 	mov	r0, #0
  139348:	e8bd8010 	pop	{r4, pc}
  13934c:	0014c65c 	.word	0x0014c65c

00139350 <syscall_pkey_mprotect>:
  139350:	e92d4010 	push	{r4, lr}
  139354:	e3a01016 	mov	r1, #22
  139358:	e59f0008 	ldr	r0, [pc, #8]	; 139368 <syscall_pkey_mprotect+0x18>
  13935c:	ebffffcb 	bl	139290 <syscall_trace>
  139360:	e3a00000 	mov	r0, #0
  139364:	e8bd8010 	pop	{r4, pc}
  139368:	0014c644 	.word	0x0014c644

0013936c <syscall_pwritev2>:
  13936c:	e92d4010 	push	{r4, lr}
  139370:	e3a01011 	mov	r1, #17
  139374:	e59f0008 	ldr	r0, [pc, #8]	; 139384 <syscall_pwritev2+0x18>
  139378:	ebffffc4 	bl	139290 <syscall_trace>
  13937c:	e3a00000 	mov	r0, #0
  139380:	e8bd8010 	pop	{r4, pc}
  139384:	0014c630 	.word	0x0014c630

00139388 <syscall_preadv2>:
  139388:	e92d4010 	push	{r4, lr}
  13938c:	e3a01010 	mov	r1, #16
  139390:	e59f0008 	ldr	r0, [pc, #8]	; 1393a0 <syscall_preadv2+0x18>
  139394:	ebffffbd 	bl	139290 <syscall_trace>
  139398:	e3a00000 	mov	r0, #0
  13939c:	e8bd8010 	pop	{r4, pc}
  1393a0:	0014c620 	.word	0x0014c620

001393a4 <syscall_copy_file_range>:
  1393a4:	e92d4010 	push	{r4, lr}
  1393a8:	e3a01018 	mov	r1, #24
  1393ac:	e59f0008 	ldr	r0, [pc, #8]	; 1393bc <syscall_copy_file_range+0x18>
  1393b0:	ebffffb6 	bl	139290 <syscall_trace>
  1393b4:	e3a00000 	mov	r0, #0
  1393b8:	e8bd8010 	pop	{r4, pc}
  1393bc:	0014c608 	.word	0x0014c608

001393c0 <syscall_mlock2>:
  1393c0:	e92d4010 	push	{r4, lr}
  1393c4:	e3a0100f 	mov	r1, #15
  1393c8:	e59f0008 	ldr	r0, [pc, #8]	; 1393d8 <syscall_mlock2+0x18>
  1393cc:	ebffffaf 	bl	139290 <syscall_trace>
  1393d0:	e3a00000 	mov	r0, #0
  1393d4:	e8bd8010 	pop	{r4, pc}
  1393d8:	0014c5f8 	.word	0x0014c5f8

001393dc <syscall_membarrier>:
  1393dc:	e92d4010 	push	{r4, lr}
  1393e0:	e3a01013 	mov	r1, #19
  1393e4:	e59f0008 	ldr	r0, [pc, #8]	; 1393f4 <syscall_membarrier+0x18>
  1393e8:	ebffffa8 	bl	139290 <syscall_trace>
  1393ec:	e3a00000 	mov	r0, #0
  1393f0:	e8bd8010 	pop	{r4, pc}
  1393f4:	0014c5e4 	.word	0x0014c5e4

001393f8 <syscall_userfaultfd>:
  1393f8:	e92d4010 	push	{r4, lr}
  1393fc:	e3a01014 	mov	r1, #20
  139400:	e59f0008 	ldr	r0, [pc, #8]	; 139410 <syscall_userfaultfd+0x18>
  139404:	ebffffa1 	bl	139290 <syscall_trace>
  139408:	e3a00000 	mov	r0, #0
  13940c:	e8bd8010 	pop	{r4, pc}
  139410:	0014c5d0 	.word	0x0014c5d0

00139414 <syscall_execveat>:
  139414:	e92d4010 	push	{r4, lr}
  139418:	e3a01011 	mov	r1, #17
  13941c:	e59f0008 	ldr	r0, [pc, #8]	; 13942c <syscall_execveat+0x18>
  139420:	ebffff9a 	bl	139290 <syscall_trace>
  139424:	e3a00000 	mov	r0, #0
  139428:	e8bd8010 	pop	{r4, pc}
  13942c:	0014c5bc 	.word	0x0014c5bc

00139430 <syscall_bpf>:
  139430:	e92d4010 	push	{r4, lr}
  139434:	e3a0100c 	mov	r1, #12
  139438:	e59f0008 	ldr	r0, [pc, #8]	; 139448 <syscall_bpf+0x18>
  13943c:	ebffff93 	bl	139290 <syscall_trace>
  139440:	e3a00000 	mov	r0, #0
  139444:	e8bd8010 	pop	{r4, pc}
  139448:	0014c5b0 	.word	0x0014c5b0

0013944c <syscall_memfd_create>:
  13944c:	e92d4010 	push	{r4, lr}
  139450:	e3a01015 	mov	r1, #21
  139454:	e59f0008 	ldr	r0, [pc, #8]	; 139464 <syscall_memfd_create+0x18>
  139458:	ebffff8c 	bl	139290 <syscall_trace>
  13945c:	e3a00000 	mov	r0, #0
  139460:	e8bd8010 	pop	{r4, pc}
  139464:	0014c598 	.word	0x0014c598

00139468 <syscall_seccomp>:
  139468:	e92d4010 	push	{r4, lr}
  13946c:	e3a01010 	mov	r1, #16
  139470:	e59f0008 	ldr	r0, [pc, #8]	; 139480 <syscall_seccomp+0x18>
  139474:	ebffff85 	bl	139290 <syscall_trace>
  139478:	e3a00000 	mov	r0, #0
  13947c:	e8bd8010 	pop	{r4, pc}
  139480:	0014c574 	.word	0x0014c574

00139484 <syscall_renameat2>:
  139484:	e92d4010 	push	{r4, lr}
  139488:	e3a01012 	mov	r1, #18
  13948c:	e59f0008 	ldr	r0, [pc, #8]	; 13949c <syscall_renameat2+0x18>
  139490:	ebffff7e 	bl	139290 <syscall_trace>
  139494:	e3a00000 	mov	r0, #0
  139498:	e8bd8010 	pop	{r4, pc}
  13949c:	0014c560 	.word	0x0014c560

001394a0 <syscall_sched_getattr>:
  1394a0:	e92d4010 	push	{r4, lr}
  1394a4:	e3a01016 	mov	r1, #22
  1394a8:	e59f0008 	ldr	r0, [pc, #8]	; 1394b8 <syscall_sched_getattr+0x18>
  1394ac:	ebffff77 	bl	139290 <syscall_trace>
  1394b0:	e3a00000 	mov	r0, #0
  1394b4:	e8bd8010 	pop	{r4, pc}
  1394b8:	0014c548 	.word	0x0014c548

001394bc <syscall_sched_setattr>:
  1394bc:	e92d4010 	push	{r4, lr}
  1394c0:	e3a01016 	mov	r1, #22
  1394c4:	e59f0008 	ldr	r0, [pc, #8]	; 1394d4 <syscall_sched_setattr+0x18>
  1394c8:	ebffff70 	bl	139290 <syscall_trace>
  1394cc:	e3a00000 	mov	r0, #0
  1394d0:	e8bd8010 	pop	{r4, pc}
  1394d4:	0014c530 	.word	0x0014c530

001394d8 <syscall_finit_module>:
  1394d8:	e92d4010 	push	{r4, lr}
  1394dc:	e3a01015 	mov	r1, #21
  1394e0:	e59f0008 	ldr	r0, [pc, #8]	; 1394f0 <syscall_finit_module+0x18>
  1394e4:	ebffff69 	bl	139290 <syscall_trace>
  1394e8:	e3a00000 	mov	r0, #0
  1394ec:	e8bd8010 	pop	{r4, pc}
  1394f0:	0014c518 	.word	0x0014c518

001394f4 <syscall_kcmp>:
  1394f4:	e92d4010 	push	{r4, lr}
  1394f8:	e3a0100d 	mov	r1, #13
  1394fc:	e59f0008 	ldr	r0, [pc, #8]	; 13950c <syscall_kcmp+0x18>
  139500:	ebffff62 	bl	139290 <syscall_trace>
  139504:	e3a00000 	mov	r0, #0
  139508:	e8bd8010 	pop	{r4, pc}
  13950c:	0014c508 	.word	0x0014c508

00139510 <syscall_process_vm_writev>:
  139510:	e92d4010 	push	{r4, lr}
  139514:	e3a0101a 	mov	r1, #26
  139518:	e59f0008 	ldr	r0, [pc, #8]	; 139528 <syscall_process_vm_writev+0x18>
  13951c:	ebffff5b 	bl	139290 <syscall_trace>
  139520:	e3a00000 	mov	r0, #0
  139524:	e8bd8010 	pop	{r4, pc}
  139528:	0014c4ec 	.word	0x0014c4ec

0013952c <syscall_process_vm_readv>:
  13952c:	e92d4010 	push	{r4, lr}
  139530:	e3a01019 	mov	r1, #25
  139534:	e59f0008 	ldr	r0, [pc, #8]	; 139544 <syscall_process_vm_readv+0x18>
  139538:	ebffff54 	bl	139290 <syscall_trace>
  13953c:	e3a00000 	mov	r0, #0
  139540:	e8bd8010 	pop	{r4, pc}
  139544:	0014c4d0 	.word	0x0014c4d0

00139548 <syscall_setns>:
  139548:	e92d4010 	push	{r4, lr}
  13954c:	e3a0100e 	mov	r1, #14
  139550:	e59f0008 	ldr	r0, [pc, #8]	; 139560 <syscall_setns+0x18>
  139554:	ebffff4d 	bl	139290 <syscall_trace>
  139558:	e3a00000 	mov	r0, #0
  13955c:	e8bd8010 	pop	{r4, pc}
  139560:	0014c4c0 	.word	0x0014c4c0

00139564 <syscall_sendmmsg>:
  139564:	e92d4010 	push	{r4, lr}
  139568:	e3a01011 	mov	r1, #17
  13956c:	e59f0008 	ldr	r0, [pc, #8]	; 13957c <syscall_sendmmsg+0x18>
  139570:	ebffff46 	bl	139290 <syscall_trace>
  139574:	e3a00000 	mov	r0, #0
  139578:	e8bd8010 	pop	{r4, pc}
  13957c:	0014c4ac 	.word	0x0014c4ac

00139580 <syscall_syncfs>:
  139580:	e92d4010 	push	{r4, lr}
  139584:	e3a0100f 	mov	r1, #15
  139588:	e59f0008 	ldr	r0, [pc, #8]	; 139598 <syscall_syncfs+0x18>
  13958c:	ebffff3f 	bl	139290 <syscall_trace>
  139590:	e3a00000 	mov	r0, #0
  139594:	e8bd8010 	pop	{r4, pc}
  139598:	0014c49c 	.word	0x0014c49c

0013959c <syscall_clock_adjtime>:
  13959c:	e92d4010 	push	{r4, lr}
  1395a0:	e3a01016 	mov	r1, #22
  1395a4:	e59f0008 	ldr	r0, [pc, #8]	; 1395b4 <syscall_clock_adjtime+0x18>
  1395a8:	ebffff38 	bl	139290 <syscall_trace>
  1395ac:	e3a00000 	mov	r0, #0
  1395b0:	e8bd8010 	pop	{r4, pc}
  1395b4:	0014c484 	.word	0x0014c484

001395b8 <syscall_open_by_handle_at>:
  1395b8:	e92d4010 	push	{r4, lr}
  1395bc:	e3a0101a 	mov	r1, #26
  1395c0:	e59f0008 	ldr	r0, [pc, #8]	; 1395d0 <syscall_open_by_handle_at+0x18>
  1395c4:	ebffff31 	bl	139290 <syscall_trace>
  1395c8:	e3a00000 	mov	r0, #0
  1395cc:	e8bd8010 	pop	{r4, pc}
  1395d0:	0014c468 	.word	0x0014c468

001395d4 <syscall_name_to_handle_at>:
  1395d4:	e92d4010 	push	{r4, lr}
  1395d8:	e3a0101a 	mov	r1, #26
  1395dc:	e59f0008 	ldr	r0, [pc, #8]	; 1395ec <syscall_name_to_handle_at+0x18>
  1395e0:	ebffff2a 	bl	139290 <syscall_trace>
  1395e4:	e3a00000 	mov	r0, #0
  1395e8:	e8bd8010 	pop	{r4, pc}
  1395ec:	0014c44c 	.word	0x0014c44c

001395f0 <syscall_fanotify_mark>:
  1395f0:	e92d4010 	push	{r4, lr}
  1395f4:	e3a01016 	mov	r1, #22
  1395f8:	e59f0008 	ldr	r0, [pc, #8]	; 139608 <syscall_fanotify_mark+0x18>
  1395fc:	ebffff23 	bl	139290 <syscall_trace>
  139600:	e3a00000 	mov	r0, #0
  139604:	e8bd8010 	pop	{r4, pc}
  139608:	0014c420 	.word	0x0014c420

0013960c <syscall_fanotify_init>:
  13960c:	e92d4010 	push	{r4, lr}
  139610:	e3a01016 	mov	r1, #22
  139614:	e59f0008 	ldr	r0, [pc, #8]	; 139624 <syscall_fanotify_init+0x18>
  139618:	ebffff1c 	bl	139290 <syscall_trace>
  13961c:	e3a00000 	mov	r0, #0
  139620:	e8bd8010 	pop	{r4, pc}
  139624:	0014c408 	.word	0x0014c408

00139628 <syscall_accept4>:
  139628:	e92d4010 	push	{r4, lr}
  13962c:	e3a01010 	mov	r1, #16
  139630:	e59f0008 	ldr	r0, [pc, #8]	; 139640 <syscall_accept4+0x18>
  139634:	ebffff15 	bl	139290 <syscall_trace>
  139638:	e3a00000 	mov	r0, #0
  13963c:	e8bd8010 	pop	{r4, pc}
  139640:	0014c3f8 	.word	0x0014c3f8

00139644 <syscall_recvmmsg>:
  139644:	e92d4010 	push	{r4, lr}
  139648:	e3a01011 	mov	r1, #17
  13964c:	e59f0008 	ldr	r0, [pc, #8]	; 13965c <syscall_recvmmsg+0x18>
  139650:	ebffff0e 	bl	139290 <syscall_trace>
  139654:	e3a00000 	mov	r0, #0
  139658:	e8bd8010 	pop	{r4, pc}
  13965c:	0014c3e4 	.word	0x0014c3e4

00139660 <syscall_perf_event_open>:
  139660:	e92d4010 	push	{r4, lr}
  139664:	e3a01018 	mov	r1, #24
  139668:	e59f0008 	ldr	r0, [pc, #8]	; 139678 <syscall_perf_event_open+0x18>
  13966c:	ebffff07 	bl	139290 <syscall_trace>
  139670:	e3a00000 	mov	r0, #0
  139674:	e8bd8010 	pop	{r4, pc}
  139678:	0014c3cc 	.word	0x0014c3cc

0013967c <syscall_rt_tgsigqueueinfo>:
  13967c:	e92d4010 	push	{r4, lr}
  139680:	e3a0101a 	mov	r1, #26
  139684:	e59f0008 	ldr	r0, [pc, #8]	; 139694 <syscall_rt_tgsigqueueinfo+0x18>
  139688:	ebffff00 	bl	139290 <syscall_trace>
  13968c:	e3a00000 	mov	r0, #0
  139690:	e8bd8010 	pop	{r4, pc}
  139694:	0014c3b0 	.word	0x0014c3b0

00139698 <syscall_pwritev>:
  139698:	e92d4010 	push	{r4, lr}
  13969c:	e3a01010 	mov	r1, #16
  1396a0:	e59f0008 	ldr	r0, [pc, #8]	; 1396b0 <syscall_pwritev+0x18>
  1396a4:	ebfffef9 	bl	139290 <syscall_trace>
  1396a8:	e3a00000 	mov	r0, #0
  1396ac:	e8bd8010 	pop	{r4, pc}
  1396b0:	0014c3a0 	.word	0x0014c3a0

001396b4 <syscall_preadv>:
  1396b4:	e92d4010 	push	{r4, lr}
  1396b8:	e3a0100f 	mov	r1, #15
  1396bc:	e59f0008 	ldr	r0, [pc, #8]	; 1396cc <syscall_preadv+0x18>
  1396c0:	ebfffef2 	bl	139290 <syscall_trace>
  1396c4:	e3a00000 	mov	r0, #0
  1396c8:	e8bd8010 	pop	{r4, pc}
  1396cc:	0014c390 	.word	0x0014c390

001396d0 <syscall_inotify_init1>:
  1396d0:	e92d4010 	push	{r4, lr}
  1396d4:	e3a01016 	mov	r1, #22
  1396d8:	e59f0008 	ldr	r0, [pc, #8]	; 1396e8 <syscall_inotify_init1+0x18>
  1396dc:	ebfffeeb 	bl	139290 <syscall_trace>
  1396e0:	e3a00000 	mov	r0, #0
  1396e4:	e8bd8010 	pop	{r4, pc}
  1396e8:	0014c378 	.word	0x0014c378

001396ec <syscall_pipe2>:
  1396ec:	e92d4010 	push	{r4, lr}
  1396f0:	e3a0100e 	mov	r1, #14
  1396f4:	e59f0008 	ldr	r0, [pc, #8]	; 139704 <syscall_pipe2+0x18>
  1396f8:	ebfffee4 	bl	139290 <syscall_trace>
  1396fc:	e3a00000 	mov	r0, #0
  139700:	e8bd8010 	pop	{r4, pc}
  139704:	0014c368 	.word	0x0014c368

00139708 <syscall_dup3>:
  139708:	e92d4010 	push	{r4, lr}
  13970c:	e3a0100d 	mov	r1, #13
  139710:	e59f0008 	ldr	r0, [pc, #8]	; 139720 <syscall_dup3+0x18>
  139714:	ebfffedd 	bl	139290 <syscall_trace>
  139718:	e3a00000 	mov	r0, #0
  13971c:	e8bd8010 	pop	{r4, pc}
  139720:	0014c358 	.word	0x0014c358

00139724 <syscall_epoll_create1>:
  139724:	e92d4010 	push	{r4, lr}
  139728:	e3a01016 	mov	r1, #22
  13972c:	e59f0008 	ldr	r0, [pc, #8]	; 13973c <syscall_epoll_create1+0x18>
  139730:	ebfffed6 	bl	139290 <syscall_trace>
  139734:	e3e00025 	mvn	r0, #37	; 0x25
  139738:	e8bd8010 	pop	{r4, pc}
  13973c:	0014c340 	.word	0x0014c340

00139740 <syscall_eventfd2>:
  139740:	e92d4010 	push	{r4, lr}
  139744:	e3a01011 	mov	r1, #17
  139748:	e59f0008 	ldr	r0, [pc, #8]	; 139758 <syscall_eventfd2+0x18>
  13974c:	ebfffecf 	bl	139290 <syscall_trace>
  139750:	e3a00000 	mov	r0, #0
  139754:	e8bd8010 	pop	{r4, pc}
  139758:	0014c32c 	.word	0x0014c32c

0013975c <syscall_signalfd4>:
  13975c:	e92d4010 	push	{r4, lr}
  139760:	e3a01012 	mov	r1, #18
  139764:	e59f0008 	ldr	r0, [pc, #8]	; 139774 <syscall_signalfd4+0x18>
  139768:	ebfffec8 	bl	139290 <syscall_trace>
  13976c:	e3a00000 	mov	r0, #0
  139770:	e8bd8010 	pop	{r4, pc}
  139774:	0014c318 	.word	0x0014c318

00139778 <syscall_timerfd_gettime>:
  139778:	e92d4010 	push	{r4, lr}
  13977c:	e3a01018 	mov	r1, #24
  139780:	e59f0008 	ldr	r0, [pc, #8]	; 139790 <syscall_timerfd_gettime+0x18>
  139784:	ebfffec1 	bl	139290 <syscall_trace>
  139788:	e3a00000 	mov	r0, #0
  13978c:	e8bd8010 	pop	{r4, pc}
  139790:	0014c300 	.word	0x0014c300

00139794 <syscall_timerfd_settime>:
  139794:	e92d4010 	push	{r4, lr}
  139798:	e3a01018 	mov	r1, #24
  13979c:	e59f0008 	ldr	r0, [pc, #8]	; 1397ac <syscall_timerfd_settime+0x18>
  1397a0:	ebfffeba 	bl	139290 <syscall_trace>
  1397a4:	e3a00000 	mov	r0, #0
  1397a8:	e8bd8010 	pop	{r4, pc}
  1397ac:	0014c2e8 	.word	0x0014c2e8

001397b0 <syscall_fallocate>:
  1397b0:	e92d4010 	push	{r4, lr}
  1397b4:	e3a01012 	mov	r1, #18
  1397b8:	e59f0008 	ldr	r0, [pc, #8]	; 1397c8 <syscall_fallocate+0x18>
  1397bc:	ebfffeb3 	bl	139290 <syscall_trace>
  1397c0:	e3a00000 	mov	r0, #0
  1397c4:	e8bd8010 	pop	{r4, pc}
  1397c8:	0014c2d4 	.word	0x0014c2d4

001397cc <syscall_eventfd>:
  1397cc:	e92d4010 	push	{r4, lr}
  1397d0:	e3a01010 	mov	r1, #16
  1397d4:	e59f0008 	ldr	r0, [pc, #8]	; 1397e4 <syscall_eventfd+0x18>
  1397d8:	ebfffeac 	bl	139290 <syscall_trace>
  1397dc:	e3a00000 	mov	r0, #0
  1397e0:	e8bd8010 	pop	{r4, pc}
  1397e4:	0014c2c4 	.word	0x0014c2c4

001397e8 <syscall_timerfd_create>:
  1397e8:	e92d4010 	push	{r4, lr}
  1397ec:	e3a01017 	mov	r1, #23
  1397f0:	e59f0008 	ldr	r0, [pc, #8]	; 139800 <syscall_timerfd_create+0x18>
  1397f4:	ebfffea5 	bl	139290 <syscall_trace>
  1397f8:	e3a00000 	mov	r0, #0
  1397fc:	e8bd8010 	pop	{r4, pc}
  139800:	0014c2ac 	.word	0x0014c2ac

00139804 <syscall_signalfd>:
  139804:	e92d4010 	push	{r4, lr}
  139808:	e3a01011 	mov	r1, #17
  13980c:	e59f0008 	ldr	r0, [pc, #8]	; 13981c <syscall_signalfd+0x18>
  139810:	ebfffe9e 	bl	139290 <syscall_trace>
  139814:	e3a00000 	mov	r0, #0
  139818:	e8bd8010 	pop	{r4, pc}
  13981c:	0014c298 	.word	0x0014c298

00139820 <syscall_utimensat>:
  139820:	e92d4010 	push	{r4, lr}
  139824:	e3a01012 	mov	r1, #18
  139828:	e59f0008 	ldr	r0, [pc, #8]	; 139838 <syscall_utimensat+0x18>
  13982c:	ebfffe97 	bl	139290 <syscall_trace>
  139830:	e3a00000 	mov	r0, #0
  139834:	e8bd8010 	pop	{r4, pc}
  139838:	0014c284 	.word	0x0014c284

0013983c <syscall_kexec_load>:
  13983c:	e92d4010 	push	{r4, lr}
  139840:	e3a01013 	mov	r1, #19
  139844:	e59f0008 	ldr	r0, [pc, #8]	; 139854 <syscall_kexec_load+0x18>
  139848:	ebfffe90 	bl	139290 <syscall_trace>
  13984c:	e3a00000 	mov	r0, #0
  139850:	e8bd8010 	pop	{r4, pc}
  139854:	0014c270 	.word	0x0014c270

00139858 <syscall_epoll_pwait>:
  139858:	e92d4010 	push	{r4, lr}
  13985c:	e3a01014 	mov	r1, #20
  139860:	e59f0008 	ldr	r0, [pc, #8]	; 139870 <syscall_epoll_pwait+0x18>
  139864:	ebfffe89 	bl	139290 <syscall_trace>
  139868:	e3e00025 	mvn	r0, #37	; 0x25
  13986c:	e8bd8010 	pop	{r4, pc}
  139870:	0014c25c 	.word	0x0014c25c

00139874 <syscall_getcpu>:
  139874:	e92d4010 	push	{r4, lr}
  139878:	e3a0100f 	mov	r1, #15
  13987c:	e59f0008 	ldr	r0, [pc, #8]	; 13988c <syscall_getcpu+0x18>
  139880:	ebfffe82 	bl	139290 <syscall_trace>
  139884:	e3a00000 	mov	r0, #0
  139888:	e8bd8010 	pop	{r4, pc}
  13988c:	0014c24c 	.word	0x0014c24c

00139890 <syscall_move_pages>:
  139890:	e92d4010 	push	{r4, lr}
  139894:	e3a01013 	mov	r1, #19
  139898:	e59f0008 	ldr	r0, [pc, #8]	; 1398a8 <syscall_move_pages+0x18>
  13989c:	ebfffe7b 	bl	139290 <syscall_trace>
  1398a0:	e3a00000 	mov	r0, #0
  1398a4:	e8bd8010 	pop	{r4, pc}
  1398a8:	0014c238 	.word	0x0014c238

001398ac <syscall_vmsplice>:
  1398ac:	e92d4010 	push	{r4, lr}
  1398b0:	e3a01011 	mov	r1, #17
  1398b4:	e59f0008 	ldr	r0, [pc, #8]	; 1398c4 <syscall_vmsplice+0x18>
  1398b8:	ebfffe74 	bl	139290 <syscall_trace>
  1398bc:	e3a00000 	mov	r0, #0
  1398c0:	e8bd8010 	pop	{r4, pc}
  1398c4:	0014c224 	.word	0x0014c224

001398c8 <syscall_tee>:
  1398c8:	e92d4010 	push	{r4, lr}
  1398cc:	e3a0100c 	mov	r1, #12
  1398d0:	e59f0008 	ldr	r0, [pc, #8]	; 1398e0 <syscall_tee+0x18>
  1398d4:	ebfffe6d 	bl	139290 <syscall_trace>
  1398d8:	e3a00000 	mov	r0, #0
  1398dc:	e8bd8010 	pop	{r4, pc}
  1398e0:	0014c218 	.word	0x0014c218

001398e4 <syscall_arm_sync_file_range>:
  1398e4:	e92d4010 	push	{r4, lr}
  1398e8:	e3a0101c 	mov	r1, #28
  1398ec:	e59f0008 	ldr	r0, [pc, #8]	; 1398fc <syscall_arm_sync_file_range+0x18>
  1398f0:	ebfffe66 	bl	139290 <syscall_trace>
  1398f4:	e3a00000 	mov	r0, #0
  1398f8:	e8bd8010 	pop	{r4, pc}
  1398fc:	0014c1fc 	.word	0x0014c1fc

00139900 <syscall_splice>:
  139900:	e92d4010 	push	{r4, lr}
  139904:	e3a0100f 	mov	r1, #15
  139908:	e59f0008 	ldr	r0, [pc, #8]	; 139918 <syscall_splice+0x18>
  13990c:	ebfffe5f 	bl	139290 <syscall_trace>
  139910:	e3a00000 	mov	r0, #0
  139914:	e8bd8010 	pop	{r4, pc}
  139918:	0014c1ec 	.word	0x0014c1ec

0013991c <syscall_get_robust_list>:
  13991c:	e92d4010 	push	{r4, lr}
  139920:	e3a01018 	mov	r1, #24
  139924:	e59f0008 	ldr	r0, [pc, #8]	; 139934 <syscall_get_robust_list+0x18>
  139928:	ebfffe58 	bl	139290 <syscall_trace>
  13992c:	e3a00000 	mov	r0, #0
  139930:	e8bd8010 	pop	{r4, pc}
  139934:	0014c1d4 	.word	0x0014c1d4

00139938 <syscall_set_robust_list>:
  139938:	e92d4010 	push	{r4, lr}
  13993c:	e3a01018 	mov	r1, #24
  139940:	e59f0008 	ldr	r0, [pc, #8]	; 139950 <syscall_set_robust_list+0x18>
  139944:	ebfffe51 	bl	139290 <syscall_trace>
  139948:	e3a00000 	mov	r0, #0
  13994c:	e8bd8010 	pop	{r4, pc}
  139950:	0014c1bc 	.word	0x0014c1bc

00139954 <syscall_unshare>:
  139954:	e92d4010 	push	{r4, lr}
  139958:	e3a01010 	mov	r1, #16
  13995c:	e59f0008 	ldr	r0, [pc, #8]	; 13996c <syscall_unshare+0x18>
  139960:	ebfffe4a 	bl	139290 <syscall_trace>
  139964:	e3a00000 	mov	r0, #0
  139968:	e8bd8010 	pop	{r4, pc}
  13996c:	0014c1ac 	.word	0x0014c1ac

00139970 <syscall_ppoll>:
  139970:	e92d4010 	push	{r4, lr}
  139974:	e3a0100e 	mov	r1, #14
  139978:	e59f0008 	ldr	r0, [pc, #8]	; 139988 <syscall_ppoll+0x18>
  13997c:	ebfffe43 	bl	139290 <syscall_trace>
  139980:	e3a00000 	mov	r0, #0
  139984:	e8bd8010 	pop	{r4, pc}
  139988:	0014c19c 	.word	0x0014c19c

0013998c <syscall_pselect6>:
  13998c:	e92d4010 	push	{r4, lr}
  139990:	e3a01011 	mov	r1, #17
  139994:	e59f0008 	ldr	r0, [pc, #8]	; 1399a4 <syscall_pselect6+0x18>
  139998:	ebfffe3c 	bl	139290 <syscall_trace>
  13999c:	e3a00000 	mov	r0, #0
  1399a0:	e8bd8010 	pop	{r4, pc}
  1399a4:	0014c188 	.word	0x0014c188

001399a8 <syscall_faccessat>:
  1399a8:	e92d4010 	push	{r4, lr}
  1399ac:	e3a01012 	mov	r1, #18
  1399b0:	e59f0008 	ldr	r0, [pc, #8]	; 1399c0 <syscall_faccessat+0x18>
  1399b4:	ebfffe35 	bl	139290 <syscall_trace>
  1399b8:	e3a00000 	mov	r0, #0
  1399bc:	e8bd8010 	pop	{r4, pc}
  1399c0:	0014c174 	.word	0x0014c174

001399c4 <syscall_fchmodat>:
  1399c4:	e92d4010 	push	{r4, lr}
  1399c8:	e3a01011 	mov	r1, #17
  1399cc:	e59f0008 	ldr	r0, [pc, #8]	; 1399dc <syscall_fchmodat+0x18>
  1399d0:	ebfffe2e 	bl	139290 <syscall_trace>
  1399d4:	e3a00000 	mov	r0, #0
  1399d8:	e8bd8010 	pop	{r4, pc}
  1399dc:	0014c160 	.word	0x0014c160

001399e0 <syscall_readlinkat>:
  1399e0:	e92d4010 	push	{r4, lr}
  1399e4:	e3a01013 	mov	r1, #19
  1399e8:	e59f0008 	ldr	r0, [pc, #8]	; 1399f8 <syscall_readlinkat+0x18>
  1399ec:	ebfffe27 	bl	139290 <syscall_trace>
  1399f0:	e3a00000 	mov	r0, #0
  1399f4:	e8bd8010 	pop	{r4, pc}
  1399f8:	0014c14c 	.word	0x0014c14c

001399fc <syscall_symlinkat>:
  1399fc:	e92d4010 	push	{r4, lr}
  139a00:	e3a01012 	mov	r1, #18
  139a04:	e59f0008 	ldr	r0, [pc, #8]	; 139a14 <syscall_symlinkat+0x18>
  139a08:	ebfffe20 	bl	139290 <syscall_trace>
  139a0c:	e3a00000 	mov	r0, #0
  139a10:	e8bd8010 	pop	{r4, pc}
  139a14:	0014c138 	.word	0x0014c138

00139a18 <syscall_linkat>:
  139a18:	e92d4010 	push	{r4, lr}
  139a1c:	e3a0100f 	mov	r1, #15
  139a20:	e59f0008 	ldr	r0, [pc, #8]	; 139a30 <syscall_linkat+0x18>
  139a24:	ebfffe19 	bl	139290 <syscall_trace>
  139a28:	e3a00000 	mov	r0, #0
  139a2c:	e8bd8010 	pop	{r4, pc}
  139a30:	0014c128 	.word	0x0014c128

00139a34 <syscall_renameat>:
  139a34:	e92d4010 	push	{r4, lr}
  139a38:	e3a01011 	mov	r1, #17
  139a3c:	e59f0008 	ldr	r0, [pc, #8]	; 139a4c <syscall_renameat+0x18>
  139a40:	ebfffe12 	bl	139290 <syscall_trace>
  139a44:	e3a00000 	mov	r0, #0
  139a48:	e8bd8010 	pop	{r4, pc}
  139a4c:	0014c114 	.word	0x0014c114

00139a50 <syscall_unlinkat>:
  139a50:	e92d4010 	push	{r4, lr}
  139a54:	e3a01011 	mov	r1, #17
  139a58:	e59f0008 	ldr	r0, [pc, #8]	; 139a68 <syscall_unlinkat+0x18>
  139a5c:	ebfffe0b 	bl	139290 <syscall_trace>
  139a60:	e3a00000 	mov	r0, #0
  139a64:	e8bd8010 	pop	{r4, pc}
  139a68:	0014c100 	.word	0x0014c100

00139a6c <syscall_fstatat64>:
  139a6c:	e92d4010 	push	{r4, lr}
  139a70:	e3a01012 	mov	r1, #18
  139a74:	e59f0008 	ldr	r0, [pc, #8]	; 139a84 <syscall_fstatat64+0x18>
  139a78:	ebfffe04 	bl	139290 <syscall_trace>
  139a7c:	e3a00000 	mov	r0, #0
  139a80:	e8bd8010 	pop	{r4, pc}
  139a84:	0014c0ec 	.word	0x0014c0ec

00139a88 <syscall_futimesat>:
  139a88:	e92d4010 	push	{r4, lr}
  139a8c:	e3a01012 	mov	r1, #18
  139a90:	e59f0008 	ldr	r0, [pc, #8]	; 139aa0 <syscall_futimesat+0x18>
  139a94:	ebfffdfd 	bl	139290 <syscall_trace>
  139a98:	e3a00000 	mov	r0, #0
  139a9c:	e8bd8010 	pop	{r4, pc}
  139aa0:	0014c0d8 	.word	0x0014c0d8

00139aa4 <syscall_fchownat>:
  139aa4:	e92d4010 	push	{r4, lr}
  139aa8:	e3a01011 	mov	r1, #17
  139aac:	e59f0008 	ldr	r0, [pc, #8]	; 139abc <syscall_fchownat+0x18>
  139ab0:	ebfffdf6 	bl	139290 <syscall_trace>
  139ab4:	e3a00000 	mov	r0, #0
  139ab8:	e8bd8010 	pop	{r4, pc}
  139abc:	0014c0c4 	.word	0x0014c0c4

00139ac0 <syscall_mknodat>:
  139ac0:	e92d4010 	push	{r4, lr}
  139ac4:	e3a01010 	mov	r1, #16
  139ac8:	e59f0008 	ldr	r0, [pc, #8]	; 139ad8 <syscall_mknodat+0x18>
  139acc:	ebfffdef 	bl	139290 <syscall_trace>
  139ad0:	e3a00000 	mov	r0, #0
  139ad4:	e8bd8010 	pop	{r4, pc}
  139ad8:	0014c0b4 	.word	0x0014c0b4

00139adc <syscall_mkdirat>:
  139adc:	e92d4010 	push	{r4, lr}
  139ae0:	e3a01010 	mov	r1, #16
  139ae4:	e59f0008 	ldr	r0, [pc, #8]	; 139af4 <syscall_mkdirat+0x18>
  139ae8:	ebfffde8 	bl	139290 <syscall_trace>
  139aec:	e3a00000 	mov	r0, #0
  139af0:	e8bd8010 	pop	{r4, pc}
  139af4:	0014c0a4 	.word	0x0014c0a4

00139af8 <syscall_openat>:
  139af8:	e92d4010 	push	{r4, lr}
  139afc:	e3a0100f 	mov	r1, #15
  139b00:	e59f0008 	ldr	r0, [pc, #8]	; 139b10 <syscall_openat+0x18>
  139b04:	ebfffde1 	bl	139290 <syscall_trace>
  139b08:	e3a00000 	mov	r0, #0
  139b0c:	e8bd8010 	pop	{r4, pc}
  139b10:	0014c094 	.word	0x0014c094

00139b14 <syscall_set_mempolicy>:
  139b14:	e92d4010 	push	{r4, lr}
  139b18:	e3a01016 	mov	r1, #22
  139b1c:	e59f0008 	ldr	r0, [pc, #8]	; 139b2c <syscall_set_mempolicy+0x18>
  139b20:	ebfffdda 	bl	139290 <syscall_trace>
  139b24:	e3a00000 	mov	r0, #0
  139b28:	e8bd8010 	pop	{r4, pc}
  139b2c:	0014c07c 	.word	0x0014c07c

00139b30 <syscall_get_mempolicy>:
  139b30:	e92d4010 	push	{r4, lr}
  139b34:	e3a01016 	mov	r1, #22
  139b38:	e59f0008 	ldr	r0, [pc, #8]	; 139b48 <syscall_get_mempolicy+0x18>
  139b3c:	ebfffdd3 	bl	139290 <syscall_trace>
  139b40:	e3a00000 	mov	r0, #0
  139b44:	e8bd8010 	pop	{r4, pc}
  139b48:	0014c064 	.word	0x0014c064

00139b4c <syscall_mbind>:
  139b4c:	e92d4010 	push	{r4, lr}
  139b50:	e3a0100e 	mov	r1, #14
  139b54:	e59f0008 	ldr	r0, [pc, #8]	; 139b64 <syscall_mbind+0x18>
  139b58:	ebfffdcc 	bl	139290 <syscall_trace>
  139b5c:	e3a00000 	mov	r0, #0
  139b60:	e8bd8010 	pop	{r4, pc}
  139b64:	0014c054 	.word	0x0014c054

00139b68 <syscall_inotify_rm_watch>:
  139b68:	e92d4010 	push	{r4, lr}
  139b6c:	e3a01019 	mov	r1, #25
  139b70:	e59f0008 	ldr	r0, [pc, #8]	; 139b80 <syscall_inotify_rm_watch+0x18>
  139b74:	ebfffdc5 	bl	139290 <syscall_trace>
  139b78:	e3a00000 	mov	r0, #0
  139b7c:	e8bd8010 	pop	{r4, pc}
  139b80:	0014c038 	.word	0x0014c038

00139b84 <syscall_inotify_add_watch>:
  139b84:	e92d4010 	push	{r4, lr}
  139b88:	e3a0101a 	mov	r1, #26
  139b8c:	e59f0008 	ldr	r0, [pc, #8]	; 139b9c <syscall_inotify_add_watch+0x18>
  139b90:	ebfffdbe 	bl	139290 <syscall_trace>
  139b94:	e3a00000 	mov	r0, #0
  139b98:	e8bd8010 	pop	{r4, pc}
  139b9c:	0014c01c 	.word	0x0014c01c

00139ba0 <syscall_inotify_init>:
  139ba0:	e92d4010 	push	{r4, lr}
  139ba4:	e3a01015 	mov	r1, #21
  139ba8:	e59f0008 	ldr	r0, [pc, #8]	; 139bb8 <syscall_inotify_init+0x18>
  139bac:	ebfffdb7 	bl	139290 <syscall_trace>
  139bb0:	e3a00000 	mov	r0, #0
  139bb4:	e8bd8010 	pop	{r4, pc}
  139bb8:	0014c004 	.word	0x0014c004

00139bbc <syscall_ioprio_get>:
  139bbc:	e92d4010 	push	{r4, lr}
  139bc0:	e3a01013 	mov	r1, #19
  139bc4:	e59f0008 	ldr	r0, [pc, #8]	; 139bd4 <syscall_ioprio_get+0x18>
  139bc8:	ebfffdb0 	bl	139290 <syscall_trace>
  139bcc:	e3a00000 	mov	r0, #0
  139bd0:	e8bd8010 	pop	{r4, pc}
  139bd4:	0014bff0 	.word	0x0014bff0

00139bd8 <syscall_ioprio_set>:
  139bd8:	e92d4010 	push	{r4, lr}
  139bdc:	e3a01013 	mov	r1, #19
  139be0:	e59f0008 	ldr	r0, [pc, #8]	; 139bf0 <syscall_ioprio_set+0x18>
  139be4:	ebfffda9 	bl	139290 <syscall_trace>
  139be8:	e3a00000 	mov	r0, #0
  139bec:	e8bd8010 	pop	{r4, pc}
  139bf0:	0014bfdc 	.word	0x0014bfdc

00139bf4 <syscall_vserver>:
  139bf4:	e92d4010 	push	{r4, lr}
  139bf8:	e3a01010 	mov	r1, #16
  139bfc:	e59f0008 	ldr	r0, [pc, #8]	; 139c0c <syscall_vserver+0x18>
  139c00:	ebfffda2 	bl	139290 <syscall_trace>
  139c04:	e3a00000 	mov	r0, #0
  139c08:	e8bd8010 	pop	{r4, pc}
  139c0c:	0014bfcc 	.word	0x0014bfcc

00139c10 <syscall_semtimedop>:
  139c10:	e92d4010 	push	{r4, lr}
  139c14:	e3a01013 	mov	r1, #19
  139c18:	e59f0008 	ldr	r0, [pc, #8]	; 139c28 <syscall_semtimedop+0x18>
  139c1c:	ebfffd9b 	bl	139290 <syscall_trace>
  139c20:	e3a00000 	mov	r0, #0
  139c24:	e8bd8010 	pop	{r4, pc}
  139c28:	0014bfb8 	.word	0x0014bfb8

00139c2c <syscall_keyctl>:
  139c2c:	e92d4010 	push	{r4, lr}
  139c30:	e3a0100f 	mov	r1, #15
  139c34:	e59f0008 	ldr	r0, [pc, #8]	; 139c44 <syscall_keyctl+0x18>
  139c38:	ebfffd94 	bl	139290 <syscall_trace>
  139c3c:	e3a00000 	mov	r0, #0
  139c40:	e8bd8010 	pop	{r4, pc}
  139c44:	0014bfa8 	.word	0x0014bfa8

00139c48 <syscall_request_key>:
  139c48:	e92d4010 	push	{r4, lr}
  139c4c:	e3a01014 	mov	r1, #20
  139c50:	e59f0008 	ldr	r0, [pc, #8]	; 139c60 <syscall_request_key+0x18>
  139c54:	ebfffd8d 	bl	139290 <syscall_trace>
  139c58:	e3a00000 	mov	r0, #0
  139c5c:	e8bd8010 	pop	{r4, pc}
  139c60:	0014bf94 	.word	0x0014bf94

00139c64 <syscall_add_key>:
  139c64:	e92d4010 	push	{r4, lr}
  139c68:	e3a01010 	mov	r1, #16
  139c6c:	e59f0008 	ldr	r0, [pc, #8]	; 139c7c <syscall_add_key+0x18>
  139c70:	ebfffd86 	bl	139290 <syscall_trace>
  139c74:	e3a00000 	mov	r0, #0
  139c78:	e8bd8010 	pop	{r4, pc}
  139c7c:	0014bf84 	.word	0x0014bf84

00139c80 <syscall_msgctl>:
  139c80:	e92d4010 	push	{r4, lr}
  139c84:	e3a0100f 	mov	r1, #15
  139c88:	e59f0008 	ldr	r0, [pc, #8]	; 139c98 <syscall_msgctl+0x18>
  139c8c:	ebfffd7f 	bl	139290 <syscall_trace>
  139c90:	e3a00000 	mov	r0, #0
  139c94:	e8bd8010 	pop	{r4, pc}
  139c98:	0014bf34 	.word	0x0014bf34

00139c9c <syscall_msgget>:
  139c9c:	e92d4010 	push	{r4, lr}
  139ca0:	e3a0100f 	mov	r1, #15
  139ca4:	e59f0008 	ldr	r0, [pc, #8]	; 139cb4 <syscall_msgget+0x18>
  139ca8:	ebfffd78 	bl	139290 <syscall_trace>
  139cac:	e3a00000 	mov	r0, #0
  139cb0:	e8bd8010 	pop	{r4, pc}
  139cb4:	0014bf24 	.word	0x0014bf24

00139cb8 <syscall_msgrcv>:
  139cb8:	e92d4010 	push	{r4, lr}
  139cbc:	e3a0100f 	mov	r1, #15
  139cc0:	e59f0008 	ldr	r0, [pc, #8]	; 139cd0 <syscall_msgrcv+0x18>
  139cc4:	ebfffd71 	bl	139290 <syscall_trace>
  139cc8:	e3a00000 	mov	r0, #0
  139ccc:	e8bd8010 	pop	{r4, pc}
  139cd0:	0014bf14 	.word	0x0014bf14

00139cd4 <syscall_msgsnd>:
  139cd4:	e92d4010 	push	{r4, lr}
  139cd8:	e3a0100f 	mov	r1, #15
  139cdc:	e59f0008 	ldr	r0, [pc, #8]	; 139cec <syscall_msgsnd+0x18>
  139ce0:	ebfffd6a 	bl	139290 <syscall_trace>
  139ce4:	e3a00000 	mov	r0, #0
  139ce8:	e8bd8010 	pop	{r4, pc}
  139cec:	0014bf04 	.word	0x0014bf04

00139cf0 <syscall_semctl>:
  139cf0:	e92d4010 	push	{r4, lr}
  139cf4:	e3a0100f 	mov	r1, #15
  139cf8:	e59f0008 	ldr	r0, [pc, #8]	; 139d08 <syscall_semctl+0x18>
  139cfc:	ebfffd63 	bl	139290 <syscall_trace>
  139d00:	e3a00000 	mov	r0, #0
  139d04:	e8bd8010 	pop	{r4, pc}
  139d08:	0014bef4 	.word	0x0014bef4

00139d0c <syscall_semget>:
  139d0c:	e92d4010 	push	{r4, lr}
  139d10:	e3a0100f 	mov	r1, #15
  139d14:	e59f0008 	ldr	r0, [pc, #8]	; 139d24 <syscall_semget+0x18>
  139d18:	ebfffd5c 	bl	139290 <syscall_trace>
  139d1c:	e3a00000 	mov	r0, #0
  139d20:	e8bd8010 	pop	{r4, pc}
  139d24:	0014bee4 	.word	0x0014bee4

00139d28 <syscall_semop>:
  139d28:	e92d4010 	push	{r4, lr}
  139d2c:	e3a0100e 	mov	r1, #14
  139d30:	e59f0008 	ldr	r0, [pc, #8]	; 139d40 <syscall_semop+0x18>
  139d34:	ebfffd55 	bl	139290 <syscall_trace>
  139d38:	e3a00000 	mov	r0, #0
  139d3c:	e8bd8010 	pop	{r4, pc}
  139d40:	0014bed4 	.word	0x0014bed4

00139d44 <syscall_recvmsg>:
  139d44:	e92d4010 	push	{r4, lr}
  139d48:	e3a01010 	mov	r1, #16
  139d4c:	e59f0008 	ldr	r0, [pc, #8]	; 139d5c <syscall_recvmsg+0x18>
  139d50:	ebfffd4e 	bl	139290 <syscall_trace>
  139d54:	e3a00000 	mov	r0, #0
  139d58:	e8bd8010 	pop	{r4, pc}
  139d5c:	0014bec4 	.word	0x0014bec4

00139d60 <syscall_sendmsg>:
  139d60:	e92d4010 	push	{r4, lr}
  139d64:	e3a01010 	mov	r1, #16
  139d68:	e59f0008 	ldr	r0, [pc, #8]	; 139d78 <syscall_sendmsg+0x18>
  139d6c:	ebfffd47 	bl	139290 <syscall_trace>
  139d70:	e3a00000 	mov	r0, #0
  139d74:	e8bd8010 	pop	{r4, pc}
  139d78:	0014beb4 	.word	0x0014beb4

00139d7c <syscall_shutdown>:
  139d7c:	e92d4010 	push	{r4, lr}
  139d80:	e3a01011 	mov	r1, #17
  139d84:	e59f0008 	ldr	r0, [pc, #8]	; 139d94 <syscall_shutdown+0x18>
  139d88:	ebfffd40 	bl	139290 <syscall_trace>
  139d8c:	e3a00000 	mov	r0, #0
  139d90:	e8bd8010 	pop	{r4, pc}
  139d94:	0014be78 	.word	0x0014be78

00139d98 <syscall_socketpair>:
  139d98:	e92d4010 	push	{r4, lr}
  139d9c:	e3a01013 	mov	r1, #19
  139da0:	e59f0008 	ldr	r0, [pc, #8]	; 139db0 <syscall_socketpair+0x18>
  139da4:	ebfffd39 	bl	139290 <syscall_trace>
  139da8:	e3a00000 	mov	r0, #0
  139dac:	e8bd8010 	pop	{r4, pc}
  139db0:	0014be20 	.word	0x0014be20

00139db4 <syscall_waitid>:
  139db4:	e92d4010 	push	{r4, lr}
  139db8:	e3a0100f 	mov	r1, #15
  139dbc:	e59f0008 	ldr	r0, [pc, #8]	; 139dcc <syscall_waitid+0x18>
  139dc0:	ebfffd32 	bl	139290 <syscall_trace>
  139dc4:	e3a00000 	mov	r0, #0
  139dc8:	e8bd8010 	pop	{r4, pc}
  139dcc:	0014bd98 	.word	0x0014bd98

00139dd0 <syscall_mq_getsetattr>:
  139dd0:	e92d4010 	push	{r4, lr}
  139dd4:	e3a01016 	mov	r1, #22
  139dd8:	e59f0008 	ldr	r0, [pc, #8]	; 139de8 <syscall_mq_getsetattr+0x18>
  139ddc:	ebfffd2b 	bl	139290 <syscall_trace>
  139de0:	e3a00000 	mov	r0, #0
  139de4:	e8bd8010 	pop	{r4, pc}
  139de8:	0014bd80 	.word	0x0014bd80

00139dec <syscall_mq_notify>:
  139dec:	e92d4010 	push	{r4, lr}
  139df0:	e3a01012 	mov	r1, #18
  139df4:	e59f0008 	ldr	r0, [pc, #8]	; 139e04 <syscall_mq_notify+0x18>
  139df8:	ebfffd24 	bl	139290 <syscall_trace>
  139dfc:	e3a00000 	mov	r0, #0
  139e00:	e8bd8010 	pop	{r4, pc}
  139e04:	0014bd6c 	.word	0x0014bd6c

00139e08 <syscall_mq_timedreceive>:
  139e08:	e92d4010 	push	{r4, lr}
  139e0c:	e3a01018 	mov	r1, #24
  139e10:	e59f0008 	ldr	r0, [pc, #8]	; 139e20 <syscall_mq_timedreceive+0x18>
  139e14:	ebfffd1d 	bl	139290 <syscall_trace>
  139e18:	e3a00000 	mov	r0, #0
  139e1c:	e8bd8010 	pop	{r4, pc}
  139e20:	0014bd54 	.word	0x0014bd54

00139e24 <syscall_mq_timedsend>:
  139e24:	e92d4010 	push	{r4, lr}
  139e28:	e3a01015 	mov	r1, #21
  139e2c:	e59f0008 	ldr	r0, [pc, #8]	; 139e3c <syscall_mq_timedsend+0x18>
  139e30:	ebfffd16 	bl	139290 <syscall_trace>
  139e34:	e3a00000 	mov	r0, #0
  139e38:	e8bd8010 	pop	{r4, pc}
  139e3c:	0014bd3c 	.word	0x0014bd3c

00139e40 <syscall_mq_unlink>:
  139e40:	e92d4010 	push	{r4, lr}
  139e44:	e3a01012 	mov	r1, #18
  139e48:	e59f0008 	ldr	r0, [pc, #8]	; 139e58 <syscall_mq_unlink+0x18>
  139e4c:	ebfffd0f 	bl	139290 <syscall_trace>
  139e50:	e3a00000 	mov	r0, #0
  139e54:	e8bd8010 	pop	{r4, pc}
  139e58:	0014bd28 	.word	0x0014bd28

00139e5c <syscall_mq_open>:
  139e5c:	e92d4010 	push	{r4, lr}
  139e60:	e3a01010 	mov	r1, #16
  139e64:	e59f0008 	ldr	r0, [pc, #8]	; 139e74 <syscall_mq_open+0x18>
  139e68:	ebfffd08 	bl	139290 <syscall_trace>
  139e6c:	e3a00000 	mov	r0, #0
  139e70:	e8bd8010 	pop	{r4, pc}
  139e74:	0014bd18 	.word	0x0014bd18

00139e78 <syscall_pciconfig_write>:
  139e78:	e92d4010 	push	{r4, lr}
  139e7c:	e3a01018 	mov	r1, #24
  139e80:	e59f0008 	ldr	r0, [pc, #8]	; 139e90 <syscall_pciconfig_write+0x18>
  139e84:	ebfffd01 	bl	139290 <syscall_trace>
  139e88:	e3a00000 	mov	r0, #0
  139e8c:	e8bd8010 	pop	{r4, pc}
  139e90:	0014bd00 	.word	0x0014bd00

00139e94 <syscall_pciconfig_read>:
  139e94:	e92d4010 	push	{r4, lr}
  139e98:	e3a01017 	mov	r1, #23
  139e9c:	e59f0008 	ldr	r0, [pc, #8]	; 139eac <syscall_pciconfig_read+0x18>
  139ea0:	ebfffcfa 	bl	139290 <syscall_trace>
  139ea4:	e3a00000 	mov	r0, #0
  139ea8:	e8bd8010 	pop	{r4, pc}
  139eac:	0014bce8 	.word	0x0014bce8

00139eb0 <syscall_pciconfig_iobase>:
  139eb0:	e92d4010 	push	{r4, lr}
  139eb4:	e3a01019 	mov	r1, #25
  139eb8:	e59f0008 	ldr	r0, [pc, #8]	; 139ec8 <syscall_pciconfig_iobase+0x18>
  139ebc:	ebfffcf3 	bl	139290 <syscall_trace>
  139ec0:	e3a00000 	mov	r0, #0
  139ec4:	e8bd8010 	pop	{r4, pc}
  139ec8:	0014bccc 	.word	0x0014bccc

00139ecc <syscall_arm_fadvise64_64>:
  139ecc:	e92d4010 	push	{r4, lr}
  139ed0:	e3a01019 	mov	r1, #25
  139ed4:	e59f0008 	ldr	r0, [pc, #8]	; 139ee4 <syscall_arm_fadvise64_64+0x18>
  139ed8:	ebfffcec 	bl	139290 <syscall_trace>
  139edc:	e3a00000 	mov	r0, #0
  139ee0:	e8bd8010 	pop	{r4, pc}
  139ee4:	0014bcb0 	.word	0x0014bcb0

00139ee8 <syscall_utimes>:
  139ee8:	e92d4010 	push	{r4, lr}
  139eec:	e3a0100f 	mov	r1, #15
  139ef0:	e59f0008 	ldr	r0, [pc, #8]	; 139f00 <syscall_utimes+0x18>
  139ef4:	ebfffce5 	bl	139290 <syscall_trace>
  139ef8:	e3a00000 	mov	r0, #0
  139efc:	e8bd8010 	pop	{r4, pc}
  139f00:	0014bca0 	.word	0x0014bca0

00139f04 <syscall_tgkill>:
  139f04:	e92d4010 	push	{r4, lr}
  139f08:	e3a0100f 	mov	r1, #15
  139f0c:	e59f0008 	ldr	r0, [pc, #8]	; 139f1c <syscall_tgkill+0x18>
  139f10:	ebfffcde 	bl	139290 <syscall_trace>
  139f14:	e3a00000 	mov	r0, #0
  139f18:	e8bd8010 	pop	{r4, pc}
  139f1c:	0014bc90 	.word	0x0014bc90

00139f20 <syscall_fstatfs64>:
  139f20:	e92d4010 	push	{r4, lr}
  139f24:	e3a01012 	mov	r1, #18
  139f28:	e59f0008 	ldr	r0, [pc, #8]	; 139f38 <syscall_fstatfs64+0x18>
  139f2c:	ebfffcd7 	bl	139290 <syscall_trace>
  139f30:	e3a00000 	mov	r0, #0
  139f34:	e8bd8010 	pop	{r4, pc}
  139f38:	0014bc7c 	.word	0x0014bc7c

00139f3c <syscall_statfs64>:
  139f3c:	e92d4010 	push	{r4, lr}
  139f40:	e3a01011 	mov	r1, #17
  139f44:	e59f0008 	ldr	r0, [pc, #8]	; 139f54 <syscall_statfs64+0x18>
  139f48:	ebfffcd0 	bl	139290 <syscall_trace>
  139f4c:	e3a00000 	mov	r0, #0
  139f50:	e8bd8010 	pop	{r4, pc}
  139f54:	0014bc68 	.word	0x0014bc68

00139f58 <syscall_clock_nanosleep>:
  139f58:	e92d4010 	push	{r4, lr}
  139f5c:	e3a01018 	mov	r1, #24
  139f60:	e59f0008 	ldr	r0, [pc, #8]	; 139f70 <syscall_clock_nanosleep+0x18>
  139f64:	ebfffcc9 	bl	139290 <syscall_trace>
  139f68:	e3a00000 	mov	r0, #0
  139f6c:	e8bd8010 	pop	{r4, pc}
  139f70:	0014bc50 	.word	0x0014bc50

00139f74 <syscall_timer_delete>:
  139f74:	e92d4010 	push	{r4, lr}
  139f78:	e3a01015 	mov	r1, #21
  139f7c:	e59f0008 	ldr	r0, [pc, #8]	; 139f8c <syscall_timer_delete+0x18>
  139f80:	ebfffcc2 	bl	139290 <syscall_trace>
  139f84:	e3a00000 	mov	r0, #0
  139f88:	e8bd8010 	pop	{r4, pc}
  139f8c:	0014bbf0 	.word	0x0014bbf0

00139f90 <syscall_timer_getoverrun>:
  139f90:	e92d4010 	push	{r4, lr}
  139f94:	e3a01019 	mov	r1, #25
  139f98:	e59f0008 	ldr	r0, [pc, #8]	; 139fa8 <syscall_timer_getoverrun+0x18>
  139f9c:	ebfffcbb 	bl	139290 <syscall_trace>
  139fa0:	e3a00000 	mov	r0, #0
  139fa4:	e8bd8010 	pop	{r4, pc}
  139fa8:	0014bbd4 	.word	0x0014bbd4

00139fac <syscall_timer_gettime>:
  139fac:	e92d4010 	push	{r4, lr}
  139fb0:	e3a01016 	mov	r1, #22
  139fb4:	e59f0008 	ldr	r0, [pc, #8]	; 139fc4 <syscall_timer_gettime+0x18>
  139fb8:	ebfffcb4 	bl	139290 <syscall_trace>
  139fbc:	e3a00000 	mov	r0, #0
  139fc0:	e8bd8010 	pop	{r4, pc}
  139fc4:	0014bbbc 	.word	0x0014bbbc

00139fc8 <syscall_timer_settime>:
  139fc8:	e92d4010 	push	{r4, lr}
  139fcc:	e3a01016 	mov	r1, #22
  139fd0:	e59f0008 	ldr	r0, [pc, #8]	; 139fe0 <syscall_timer_settime+0x18>
  139fd4:	ebfffcad 	bl	139290 <syscall_trace>
  139fd8:	e3a00000 	mov	r0, #0
  139fdc:	e8bd8010 	pop	{r4, pc}
  139fe0:	0014bba4 	.word	0x0014bba4

00139fe4 <syscall_timer_create>:
  139fe4:	e92d4010 	push	{r4, lr}
  139fe8:	e3a01015 	mov	r1, #21
  139fec:	e59f0008 	ldr	r0, [pc, #8]	; 139ffc <syscall_timer_create+0x18>
  139ff0:	ebfffca6 	bl	139290 <syscall_trace>
  139ff4:	e3a00000 	mov	r0, #0
  139ff8:	e8bd8010 	pop	{r4, pc}
  139ffc:	0014bb8c 	.word	0x0014bb8c

0013a000 <syscall_remap_file_pages>:
  13a000:	e92d4010 	push	{r4, lr}
  13a004:	e3a01019 	mov	r1, #25
  13a008:	e59f0008 	ldr	r0, [pc, #8]	; 13a018 <syscall_remap_file_pages+0x18>
  13a00c:	ebfffc9f 	bl	139290 <syscall_trace>
  13a010:	e3a00000 	mov	r0, #0
  13a014:	e8bd8010 	pop	{r4, pc}
  13a018:	0014bb58 	.word	0x0014bb58

0013a01c <syscall_epoll_wait>:
  13a01c:	e92d4010 	push	{r4, lr}
  13a020:	e3a01013 	mov	r1, #19
  13a024:	e59f0008 	ldr	r0, [pc, #8]	; 13a034 <syscall_epoll_wait+0x18>
  13a028:	ebfffc98 	bl	139290 <syscall_trace>
  13a02c:	e3e00025 	mvn	r0, #37	; 0x25
  13a030:	e8bd8010 	pop	{r4, pc}
  13a034:	0014bb44 	.word	0x0014bb44

0013a038 <syscall_epoll_ctl>:
  13a038:	e92d4010 	push	{r4, lr}
  13a03c:	e3a01012 	mov	r1, #18
  13a040:	e59f0008 	ldr	r0, [pc, #8]	; 13a050 <syscall_epoll_ctl+0x18>
  13a044:	ebfffc91 	bl	139290 <syscall_trace>
  13a048:	e3e00025 	mvn	r0, #37	; 0x25
  13a04c:	e8bd8010 	pop	{r4, pc}
  13a050:	0014bb30 	.word	0x0014bb30

0013a054 <syscall_epoll_create>:
  13a054:	e92d4010 	push	{r4, lr}
  13a058:	e3a01015 	mov	r1, #21
  13a05c:	e59f0008 	ldr	r0, [pc, #8]	; 13a06c <syscall_epoll_create+0x18>
  13a060:	ebfffc8a 	bl	139290 <syscall_trace>
  13a064:	e3e00025 	mvn	r0, #37	; 0x25
  13a068:	e8bd8010 	pop	{r4, pc}
  13a06c:	0014bb18 	.word	0x0014bb18

0013a070 <syscall_lookup_dcookie>:
  13a070:	e92d4010 	push	{r4, lr}
  13a074:	e3a01017 	mov	r1, #23
  13a078:	e59f0008 	ldr	r0, [pc, #8]	; 13a088 <syscall_lookup_dcookie+0x18>
  13a07c:	ebfffc83 	bl	139290 <syscall_trace>
  13a080:	e3a00000 	mov	r0, #0
  13a084:	e8bd8010 	pop	{r4, pc}
  13a088:	0014bb00 	.word	0x0014bb00

0013a08c <syscall_io_cancel>:
  13a08c:	e92d4010 	push	{r4, lr}
  13a090:	e3a01012 	mov	r1, #18
  13a094:	e59f0008 	ldr	r0, [pc, #8]	; 13a0a4 <syscall_io_cancel+0x18>
  13a098:	ebfffc7c 	bl	139290 <syscall_trace>
  13a09c:	e3a00000 	mov	r0, #0
  13a0a0:	e8bd8010 	pop	{r4, pc}
  13a0a4:	0014bad8 	.word	0x0014bad8

0013a0a8 <syscall_io_submit>:
  13a0a8:	e92d4010 	push	{r4, lr}
  13a0ac:	e3a01012 	mov	r1, #18
  13a0b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a0c0 <syscall_io_submit+0x18>
  13a0b4:	ebfffc75 	bl	139290 <syscall_trace>
  13a0b8:	e3a00000 	mov	r0, #0
  13a0bc:	e8bd8010 	pop	{r4, pc}
  13a0c0:	0014bac4 	.word	0x0014bac4

0013a0c4 <syscall_io_getevents>:
  13a0c4:	e92d4010 	push	{r4, lr}
  13a0c8:	e3a01015 	mov	r1, #21
  13a0cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a0dc <syscall_io_getevents+0x18>
  13a0d0:	ebfffc6e 	bl	139290 <syscall_trace>
  13a0d4:	e3a00000 	mov	r0, #0
  13a0d8:	e8bd8010 	pop	{r4, pc}
  13a0dc:	0014baac 	.word	0x0014baac

0013a0e0 <syscall_io_destroy>:
  13a0e0:	e92d4010 	push	{r4, lr}
  13a0e4:	e3a01013 	mov	r1, #19
  13a0e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a0f8 <syscall_io_destroy+0x18>
  13a0ec:	ebfffc67 	bl	139290 <syscall_trace>
  13a0f0:	e3a00000 	mov	r0, #0
  13a0f4:	e8bd8010 	pop	{r4, pc}
  13a0f8:	0014ba98 	.word	0x0014ba98

0013a0fc <syscall_io_setup>:
  13a0fc:	e92d4010 	push	{r4, lr}
  13a100:	e3a01011 	mov	r1, #17
  13a104:	e59f0008 	ldr	r0, [pc, #8]	; 13a114 <syscall_io_setup+0x18>
  13a108:	ebfffc60 	bl	139290 <syscall_trace>
  13a10c:	e3a00000 	mov	r0, #0
  13a110:	e8bd8010 	pop	{r4, pc}
  13a114:	0014ba84 	.word	0x0014ba84

0013a118 <syscall_sched_getaffinity>:
  13a118:	e92d4010 	push	{r4, lr}
  13a11c:	e3a0101a 	mov	r1, #26
  13a120:	e59f0008 	ldr	r0, [pc, #8]	; 13a130 <syscall_sched_getaffinity+0x18>
  13a124:	ebfffc59 	bl	139290 <syscall_trace>
  13a128:	e3a00000 	mov	r0, #0
  13a12c:	e8bd8010 	pop	{r4, pc}
  13a130:	0014ba68 	.word	0x0014ba68

0013a134 <syscall_sendfile64>:
  13a134:	e92d4010 	push	{r4, lr}
  13a138:	e3a01013 	mov	r1, #19
  13a13c:	e59f0008 	ldr	r0, [pc, #8]	; 13a14c <syscall_sendfile64+0x18>
  13a140:	ebfffc52 	bl	139290 <syscall_trace>
  13a144:	e3a00000 	mov	r0, #0
  13a148:	e8bd8010 	pop	{r4, pc}
  13a14c:	0014ba28 	.word	0x0014ba28

0013a150 <syscall_fremovexattr>:
  13a150:	e92d4010 	push	{r4, lr}
  13a154:	e3a01015 	mov	r1, #21
  13a158:	e59f0008 	ldr	r0, [pc, #8]	; 13a168 <syscall_fremovexattr+0x18>
  13a15c:	ebfffc4b 	bl	139290 <syscall_trace>
  13a160:	e3a00000 	mov	r0, #0
  13a164:	e8bd8010 	pop	{r4, pc}
  13a168:	0014ba00 	.word	0x0014ba00

0013a16c <syscall_lremovexattr>:
  13a16c:	e92d4010 	push	{r4, lr}
  13a170:	e3a01015 	mov	r1, #21
  13a174:	e59f0008 	ldr	r0, [pc, #8]	; 13a184 <syscall_lremovexattr+0x18>
  13a178:	ebfffc44 	bl	139290 <syscall_trace>
  13a17c:	e3a00000 	mov	r0, #0
  13a180:	e8bd8010 	pop	{r4, pc}
  13a184:	0014b9e8 	.word	0x0014b9e8

0013a188 <syscall_removexattr>:
  13a188:	e92d4010 	push	{r4, lr}
  13a18c:	e3a01014 	mov	r1, #20
  13a190:	e59f0008 	ldr	r0, [pc, #8]	; 13a1a0 <syscall_removexattr+0x18>
  13a194:	ebfffc3d 	bl	139290 <syscall_trace>
  13a198:	e3a00000 	mov	r0, #0
  13a19c:	e8bd8010 	pop	{r4, pc}
  13a1a0:	0014b9d4 	.word	0x0014b9d4

0013a1a4 <syscall_flistxattr>:
  13a1a4:	e92d4010 	push	{r4, lr}
  13a1a8:	e3a01013 	mov	r1, #19
  13a1ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a1bc <syscall_flistxattr+0x18>
  13a1b0:	ebfffc36 	bl	139290 <syscall_trace>
  13a1b4:	e3a00000 	mov	r0, #0
  13a1b8:	e8bd8010 	pop	{r4, pc}
  13a1bc:	0014b9c0 	.word	0x0014b9c0

0013a1c0 <syscall_llistxattr>:
  13a1c0:	e92d4010 	push	{r4, lr}
  13a1c4:	e3a01013 	mov	r1, #19
  13a1c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a1d8 <syscall_llistxattr+0x18>
  13a1cc:	ebfffc2f 	bl	139290 <syscall_trace>
  13a1d0:	e3a00000 	mov	r0, #0
  13a1d4:	e8bd8010 	pop	{r4, pc}
  13a1d8:	0014b9ac 	.word	0x0014b9ac

0013a1dc <syscall_listxattr>:
  13a1dc:	e92d4010 	push	{r4, lr}
  13a1e0:	e3a01012 	mov	r1, #18
  13a1e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a1f4 <syscall_listxattr+0x18>
  13a1e8:	ebfffc28 	bl	139290 <syscall_trace>
  13a1ec:	e3a00000 	mov	r0, #0
  13a1f0:	e8bd8010 	pop	{r4, pc}
  13a1f4:	0014b998 	.word	0x0014b998

0013a1f8 <syscall_fgetxattr>:
  13a1f8:	e92d4010 	push	{r4, lr}
  13a1fc:	e3a01012 	mov	r1, #18
  13a200:	e59f0008 	ldr	r0, [pc, #8]	; 13a210 <syscall_fgetxattr+0x18>
  13a204:	ebfffc21 	bl	139290 <syscall_trace>
  13a208:	e3a00000 	mov	r0, #0
  13a20c:	e8bd8010 	pop	{r4, pc}
  13a210:	0014b984 	.word	0x0014b984

0013a214 <syscall_lgetxattr>:
  13a214:	e92d4010 	push	{r4, lr}
  13a218:	e3a01012 	mov	r1, #18
  13a21c:	e59f0008 	ldr	r0, [pc, #8]	; 13a22c <syscall_lgetxattr+0x18>
  13a220:	ebfffc1a 	bl	139290 <syscall_trace>
  13a224:	e3a00000 	mov	r0, #0
  13a228:	e8bd8010 	pop	{r4, pc}
  13a22c:	0014b970 	.word	0x0014b970

0013a230 <syscall_getxattr>:
  13a230:	e92d4010 	push	{r4, lr}
  13a234:	e3a01011 	mov	r1, #17
  13a238:	e59f0008 	ldr	r0, [pc, #8]	; 13a248 <syscall_getxattr+0x18>
  13a23c:	ebfffc13 	bl	139290 <syscall_trace>
  13a240:	e3a00000 	mov	r0, #0
  13a244:	e8bd8010 	pop	{r4, pc}
  13a248:	0014b95c 	.word	0x0014b95c

0013a24c <syscall_fsetxattr>:
  13a24c:	e92d4010 	push	{r4, lr}
  13a250:	e3a01012 	mov	r1, #18
  13a254:	e59f0008 	ldr	r0, [pc, #8]	; 13a264 <syscall_fsetxattr+0x18>
  13a258:	ebfffc0c 	bl	139290 <syscall_trace>
  13a25c:	e3a00000 	mov	r0, #0
  13a260:	e8bd8010 	pop	{r4, pc}
  13a264:	0014b948 	.word	0x0014b948

0013a268 <syscall_lsetxattr>:
  13a268:	e92d4010 	push	{r4, lr}
  13a26c:	e3a01012 	mov	r1, #18
  13a270:	e59f0008 	ldr	r0, [pc, #8]	; 13a280 <syscall_lsetxattr+0x18>
  13a274:	ebfffc05 	bl	139290 <syscall_trace>
  13a278:	e3a00000 	mov	r0, #0
  13a27c:	e8bd8010 	pop	{r4, pc}
  13a280:	0014b934 	.word	0x0014b934

0013a284 <syscall_setxattr>:
  13a284:	e92d4010 	push	{r4, lr}
  13a288:	e3a01011 	mov	r1, #17
  13a28c:	e59f0008 	ldr	r0, [pc, #8]	; 13a29c <syscall_setxattr+0x18>
  13a290:	ebfffbfe 	bl	139290 <syscall_trace>
  13a294:	e3a00000 	mov	r0, #0
  13a298:	e8bd8010 	pop	{r4, pc}
  13a29c:	0014b920 	.word	0x0014b920

0013a2a0 <syscall_readahead>:
  13a2a0:	e92d4010 	push	{r4, lr}
  13a2a4:	e3a01012 	mov	r1, #18
  13a2a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a2b8 <syscall_readahead+0x18>
  13a2ac:	ebfffbf7 	bl	139290 <syscall_trace>
  13a2b0:	e3a00000 	mov	r0, #0
  13a2b4:	e8bd8010 	pop	{r4, pc}
  13a2b8:	0014b90c 	.word	0x0014b90c

0013a2bc <syscall_mincore>:
  13a2bc:	e92d4010 	push	{r4, lr}
  13a2c0:	e3a01010 	mov	r1, #16
  13a2c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a2d4 <syscall_mincore+0x18>
  13a2c8:	ebfffbf0 	bl	139290 <syscall_trace>
  13a2cc:	e3a00000 	mov	r0, #0
  13a2d0:	e8bd8010 	pop	{r4, pc}
  13a2d4:	0014b8cc 	.word	0x0014b8cc

0013a2d8 <syscall_pivot_root>:
  13a2d8:	e92d4010 	push	{r4, lr}
  13a2dc:	e3a01013 	mov	r1, #19
  13a2e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a2f0 <syscall_pivot_root+0x18>
  13a2e4:	ebfffbe9 	bl	139290 <syscall_trace>
  13a2e8:	e3a00000 	mov	r0, #0
  13a2ec:	e8bd8010 	pop	{r4, pc}
  13a2f0:	0014b8b8 	.word	0x0014b8b8

0013a2f4 <syscall_setfsgid32>:
  13a2f4:	e92d4010 	push	{r4, lr}
  13a2f8:	e3a01013 	mov	r1, #19
  13a2fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a30c <syscall_setfsgid32+0x18>
  13a300:	ebfffbe2 	bl	139290 <syscall_trace>
  13a304:	e3a00000 	mov	r0, #0
  13a308:	e8bd8010 	pop	{r4, pc}
  13a30c:	0014b890 	.word	0x0014b890

0013a310 <syscall_setfsuid32>:
  13a310:	e92d4010 	push	{r4, lr}
  13a314:	e3a01013 	mov	r1, #19
  13a318:	e59f0008 	ldr	r0, [pc, #8]	; 13a328 <syscall_setfsuid32+0x18>
  13a31c:	ebfffbdb 	bl	139290 <syscall_trace>
  13a320:	e3a00000 	mov	r0, #0
  13a324:	e8bd8010 	pop	{r4, pc}
  13a328:	0014b87c 	.word	0x0014b87c

0013a32c <syscall_setgid32>:
  13a32c:	e92d4010 	push	{r4, lr}
  13a330:	e3a01011 	mov	r1, #17
  13a334:	e59f0008 	ldr	r0, [pc, #8]	; 13a344 <syscall_setgid32+0x18>
  13a338:	ebfffbd4 	bl	139290 <syscall_trace>
  13a33c:	e3a00000 	mov	r0, #0
  13a340:	e8bd8010 	pop	{r4, pc}
  13a344:	0014b868 	.word	0x0014b868

0013a348 <syscall_setuid32>:
  13a348:	e92d4010 	push	{r4, lr}
  13a34c:	e3a01011 	mov	r1, #17
  13a350:	e59f0008 	ldr	r0, [pc, #8]	; 13a360 <syscall_setuid32+0x18>
  13a354:	ebfffbcd 	bl	139290 <syscall_trace>
  13a358:	e3a00000 	mov	r0, #0
  13a35c:	e8bd8010 	pop	{r4, pc}
  13a360:	0014b854 	.word	0x0014b854

0013a364 <syscall_chown32>:
  13a364:	e92d4010 	push	{r4, lr}
  13a368:	e3a01010 	mov	r1, #16
  13a36c:	e59f0008 	ldr	r0, [pc, #8]	; 13a37c <syscall_chown32+0x18>
  13a370:	ebfffbc6 	bl	139290 <syscall_trace>
  13a374:	e3a00000 	mov	r0, #0
  13a378:	e8bd8010 	pop	{r4, pc}
  13a37c:	0014b844 	.word	0x0014b844

0013a380 <syscall_getresgid32>:
  13a380:	e92d4010 	push	{r4, lr}
  13a384:	e3a01014 	mov	r1, #20
  13a388:	e59f0008 	ldr	r0, [pc, #8]	; 13a398 <syscall_getresgid32+0x18>
  13a38c:	ebfffbbf 	bl	139290 <syscall_trace>
  13a390:	e3a00000 	mov	r0, #0
  13a394:	e8bd8010 	pop	{r4, pc}
  13a398:	0014b830 	.word	0x0014b830

0013a39c <syscall_setresgid32>:
  13a39c:	e92d4010 	push	{r4, lr}
  13a3a0:	e3a01014 	mov	r1, #20
  13a3a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a3b4 <syscall_setresgid32+0x18>
  13a3a8:	ebfffbb8 	bl	139290 <syscall_trace>
  13a3ac:	e3a00000 	mov	r0, #0
  13a3b0:	e8bd8010 	pop	{r4, pc}
  13a3b4:	0014b81c 	.word	0x0014b81c

0013a3b8 <syscall_getresuid32>:
  13a3b8:	e92d4010 	push	{r4, lr}
  13a3bc:	e3a01014 	mov	r1, #20
  13a3c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a3d0 <syscall_getresuid32+0x18>
  13a3c4:	ebfffbb1 	bl	139290 <syscall_trace>
  13a3c8:	e3a00000 	mov	r0, #0
  13a3cc:	e8bd8010 	pop	{r4, pc}
  13a3d0:	0014b808 	.word	0x0014b808

0013a3d4 <syscall_setresuid32>:
  13a3d4:	e92d4010 	push	{r4, lr}
  13a3d8:	e3a01014 	mov	r1, #20
  13a3dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a3ec <syscall_setresuid32+0x18>
  13a3e0:	ebfffbaa 	bl	139290 <syscall_trace>
  13a3e4:	e3a00000 	mov	r0, #0
  13a3e8:	e8bd8010 	pop	{r4, pc}
  13a3ec:	0014b7f4 	.word	0x0014b7f4

0013a3f0 <syscall_fchown32>:
  13a3f0:	e92d4010 	push	{r4, lr}
  13a3f4:	e3a01011 	mov	r1, #17
  13a3f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a408 <syscall_fchown32+0x18>
  13a3fc:	ebfffba3 	bl	139290 <syscall_trace>
  13a400:	e3a00000 	mov	r0, #0
  13a404:	e8bd8010 	pop	{r4, pc}
  13a408:	0014b7e0 	.word	0x0014b7e0

0013a40c <syscall_setgroups32>:
  13a40c:	e92d4010 	push	{r4, lr}
  13a410:	e3a01014 	mov	r1, #20
  13a414:	e59f0008 	ldr	r0, [pc, #8]	; 13a424 <syscall_setgroups32+0x18>
  13a418:	ebfffb9c 	bl	139290 <syscall_trace>
  13a41c:	e3a00000 	mov	r0, #0
  13a420:	e8bd8010 	pop	{r4, pc}
  13a424:	0014b7cc 	.word	0x0014b7cc

0013a428 <syscall_getgroups32>:
  13a428:	e92d4010 	push	{r4, lr}
  13a42c:	e3a01014 	mov	r1, #20
  13a430:	e59f0008 	ldr	r0, [pc, #8]	; 13a440 <syscall_getgroups32+0x18>
  13a434:	ebfffb95 	bl	139290 <syscall_trace>
  13a438:	e3a00000 	mov	r0, #0
  13a43c:	e8bd8010 	pop	{r4, pc}
  13a440:	0014b7b8 	.word	0x0014b7b8

0013a444 <syscall_setregid32>:
  13a444:	e92d4010 	push	{r4, lr}
  13a448:	e3a01013 	mov	r1, #19
  13a44c:	e59f0008 	ldr	r0, [pc, #8]	; 13a45c <syscall_setregid32+0x18>
  13a450:	ebfffb8e 	bl	139290 <syscall_trace>
  13a454:	e3a00000 	mov	r0, #0
  13a458:	e8bd8010 	pop	{r4, pc}
  13a45c:	0014b7a4 	.word	0x0014b7a4

0013a460 <syscall_setreuid32>:
  13a460:	e92d4010 	push	{r4, lr}
  13a464:	e3a01013 	mov	r1, #19
  13a468:	e59f0008 	ldr	r0, [pc, #8]	; 13a478 <syscall_setreuid32+0x18>
  13a46c:	ebfffb87 	bl	139290 <syscall_trace>
  13a470:	e3a00000 	mov	r0, #0
  13a474:	e8bd8010 	pop	{r4, pc}
  13a478:	0014b790 	.word	0x0014b790

0013a47c <syscall_getegid32>:
  13a47c:	e92d4010 	push	{r4, lr}
  13a480:	e3a01012 	mov	r1, #18
  13a484:	e59f0008 	ldr	r0, [pc, #8]	; 13a494 <syscall_getegid32+0x18>
  13a488:	ebfffb80 	bl	139290 <syscall_trace>
  13a48c:	e3a00000 	mov	r0, #0
  13a490:	e8bd8010 	pop	{r4, pc}
  13a494:	0014b77c 	.word	0x0014b77c

0013a498 <syscall_geteuid32>:
  13a498:	e92d4010 	push	{r4, lr}
  13a49c:	e3a01012 	mov	r1, #18
  13a4a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a4b0 <syscall_geteuid32+0x18>
  13a4a4:	ebfffb79 	bl	139290 <syscall_trace>
  13a4a8:	e3a00000 	mov	r0, #0
  13a4ac:	e8bd8010 	pop	{r4, pc}
  13a4b0:	0014b768 	.word	0x0014b768

0013a4b4 <syscall_getgid32>:
  13a4b4:	e92d4010 	push	{r4, lr}
  13a4b8:	e3a01011 	mov	r1, #17
  13a4bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a4cc <syscall_getgid32+0x18>
  13a4c0:	ebfffb72 	bl	139290 <syscall_trace>
  13a4c4:	e3a00000 	mov	r0, #0
  13a4c8:	e8bd8010 	pop	{r4, pc}
  13a4cc:	0014b754 	.word	0x0014b754

0013a4d0 <syscall_getuid32>:
  13a4d0:	e92d4010 	push	{r4, lr}
  13a4d4:	e3a01011 	mov	r1, #17
  13a4d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a4e8 <syscall_getuid32+0x18>
  13a4dc:	ebfffb6b 	bl	139290 <syscall_trace>
  13a4e0:	e3a00000 	mov	r0, #0
  13a4e4:	e8bd8010 	pop	{r4, pc}
  13a4e8:	0014b740 	.word	0x0014b740

0013a4ec <syscall_lchown32>:
  13a4ec:	e92d4010 	push	{r4, lr}
  13a4f0:	e3a01011 	mov	r1, #17
  13a4f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a504 <syscall_lchown32+0x18>
  13a4f8:	ebfffb64 	bl	139290 <syscall_trace>
  13a4fc:	e3a00000 	mov	r0, #0
  13a500:	e8bd8010 	pop	{r4, pc}
  13a504:	0014b72c 	.word	0x0014b72c

0013a508 <syscall_ftruncate64>:
  13a508:	e92d4010 	push	{r4, lr}
  13a50c:	e3a01014 	mov	r1, #20
  13a510:	e59f0008 	ldr	r0, [pc, #8]	; 13a520 <syscall_ftruncate64+0x18>
  13a514:	ebfffb5d 	bl	139290 <syscall_trace>
  13a518:	e3a00000 	mov	r0, #0
  13a51c:	e8bd8010 	pop	{r4, pc}
  13a520:	0014b6e8 	.word	0x0014b6e8

0013a524 <syscall_truncate64>:
  13a524:	e92d4010 	push	{r4, lr}
  13a528:	e3a01013 	mov	r1, #19
  13a52c:	e59f0008 	ldr	r0, [pc, #8]	; 13a53c <syscall_truncate64+0x18>
  13a530:	ebfffb56 	bl	139290 <syscall_trace>
  13a534:	e3a00000 	mov	r0, #0
  13a538:	e8bd8010 	pop	{r4, pc}
  13a53c:	0014b6d4 	.word	0x0014b6d4

0013a540 <syscall_sendfile>:
  13a540:	e92d4010 	push	{r4, lr}
  13a544:	e3a01011 	mov	r1, #17
  13a548:	e59f0008 	ldr	r0, [pc, #8]	; 13a558 <syscall_sendfile+0x18>
  13a54c:	ebfffb4f 	bl	139290 <syscall_trace>
  13a550:	e3a00000 	mov	r0, #0
  13a554:	e8bd8010 	pop	{r4, pc}
  13a558:	0014b68c 	.word	0x0014b68c

0013a55c <syscall_sigaltstack>:
  13a55c:	e92d4010 	push	{r4, lr}
  13a560:	e3a01014 	mov	r1, #20
  13a564:	e59f0008 	ldr	r0, [pc, #8]	; 13a574 <syscall_sigaltstack+0x18>
  13a568:	ebfffb48 	bl	139290 <syscall_trace>
  13a56c:	e3a00000 	mov	r0, #0
  13a570:	e8bd8010 	pop	{r4, pc}
  13a574:	0014b678 	.word	0x0014b678

0013a578 <syscall_capset>:
  13a578:	e92d4010 	push	{r4, lr}
  13a57c:	e3a0100f 	mov	r1, #15
  13a580:	e59f0008 	ldr	r0, [pc, #8]	; 13a590 <syscall_capset+0x18>
  13a584:	ebfffb41 	bl	139290 <syscall_trace>
  13a588:	e3a00000 	mov	r0, #0
  13a58c:	e8bd8010 	pop	{r4, pc}
  13a590:	0014b668 	.word	0x0014b668

0013a594 <syscall_capget>:
  13a594:	e92d4010 	push	{r4, lr}
  13a598:	e3a0100f 	mov	r1, #15
  13a59c:	e59f0008 	ldr	r0, [pc, #8]	; 13a5ac <syscall_capget+0x18>
  13a5a0:	ebfffb3a 	bl	139290 <syscall_trace>
  13a5a4:	e3a00000 	mov	r0, #0
  13a5a8:	e8bd8010 	pop	{r4, pc}
  13a5ac:	0014b658 	.word	0x0014b658

0013a5b0 <syscall_chown>:
  13a5b0:	e92d4010 	push	{r4, lr}
  13a5b4:	e3a0100e 	mov	r1, #14
  13a5b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a5c8 <syscall_chown+0x18>
  13a5bc:	ebfffb33 	bl	139290 <syscall_trace>
  13a5c0:	e3a00000 	mov	r0, #0
  13a5c4:	e8bd8010 	pop	{r4, pc}
  13a5c8:	0014b638 	.word	0x0014b638

0013a5cc <syscall_pwrite64>:
  13a5cc:	e92d4010 	push	{r4, lr}
  13a5d0:	e3a01011 	mov	r1, #17
  13a5d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a5e4 <syscall_pwrite64+0x18>
  13a5d8:	ebfffb2c 	bl	139290 <syscall_trace>
  13a5dc:	e3a00000 	mov	r0, #0
  13a5e0:	e8bd8010 	pop	{r4, pc}
  13a5e4:	0014b624 	.word	0x0014b624

0013a5e8 <syscall_pread64>:
  13a5e8:	e92d4010 	push	{r4, lr}
  13a5ec:	e3a01010 	mov	r1, #16
  13a5f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a600 <syscall_pread64+0x18>
  13a5f4:	ebfffb25 	bl	139290 <syscall_trace>
  13a5f8:	e3a00000 	mov	r0, #0
  13a5fc:	e8bd8010 	pop	{r4, pc}
  13a600:	0014b614 	.word	0x0014b614

0013a604 <syscall_rt_sigsuspend>:
  13a604:	e92d4010 	push	{r4, lr}
  13a608:	e3a01016 	mov	r1, #22
  13a60c:	e59f0008 	ldr	r0, [pc, #8]	; 13a61c <syscall_rt_sigsuspend+0x18>
  13a610:	ebfffb1e 	bl	139290 <syscall_trace>
  13a614:	e3a00000 	mov	r0, #0
  13a618:	e8bd8010 	pop	{r4, pc}
  13a61c:	0014b5fc 	.word	0x0014b5fc

0013a620 <syscall_rt_sigqueueinfo>:
  13a620:	e92d4010 	push	{r4, lr}
  13a624:	e3a01018 	mov	r1, #24
  13a628:	e59f0008 	ldr	r0, [pc, #8]	; 13a638 <syscall_rt_sigqueueinfo+0x18>
  13a62c:	ebfffb17 	bl	139290 <syscall_trace>
  13a630:	e3a00000 	mov	r0, #0
  13a634:	e8bd8010 	pop	{r4, pc}
  13a638:	0014b5e4 	.word	0x0014b5e4

0013a63c <syscall_rt_sigtimedwait>:
  13a63c:	e92d4010 	push	{r4, lr}
  13a640:	e3a01018 	mov	r1, #24
  13a644:	e59f0008 	ldr	r0, [pc, #8]	; 13a654 <syscall_rt_sigtimedwait+0x18>
  13a648:	ebfffb10 	bl	139290 <syscall_trace>
  13a64c:	e3a00000 	mov	r0, #0
  13a650:	e8bd8010 	pop	{r4, pc}
  13a654:	0014b5cc 	.word	0x0014b5cc

0013a658 <syscall_rt_sigpending>:
  13a658:	e92d4010 	push	{r4, lr}
  13a65c:	e3a01016 	mov	r1, #22
  13a660:	e59f0008 	ldr	r0, [pc, #8]	; 13a670 <syscall_rt_sigpending+0x18>
  13a664:	ebfffb09 	bl	139290 <syscall_trace>
  13a668:	e3a00000 	mov	r0, #0
  13a66c:	e8bd8010 	pop	{r4, pc}
  13a670:	0014b5b4 	.word	0x0014b5b4

0013a674 <syscall_rt_sigreturn>:
  13a674:	e92d4010 	push	{r4, lr}
  13a678:	e3a01015 	mov	r1, #21
  13a67c:	e59f0008 	ldr	r0, [pc, #8]	; 13a68c <syscall_rt_sigreturn+0x18>
  13a680:	ebfffb02 	bl	139290 <syscall_trace>
  13a684:	e3a00000 	mov	r0, #0
  13a688:	e8bd8010 	pop	{r4, pc}
  13a68c:	0014b56c 	.word	0x0014b56c

0013a690 <syscall_prctl>:
  13a690:	e92d4010 	push	{r4, lr}
  13a694:	e3a0100e 	mov	r1, #14
  13a698:	e59f0008 	ldr	r0, [pc, #8]	; 13a6a8 <syscall_prctl+0x18>
  13a69c:	ebfffafb 	bl	139290 <syscall_trace>
  13a6a0:	e3a00000 	mov	r0, #0
  13a6a4:	e8bd8010 	pop	{r4, pc}
  13a6a8:	0014b55c 	.word	0x0014b55c

0013a6ac <syscall_getresgid>:
  13a6ac:	e92d4010 	push	{r4, lr}
  13a6b0:	e3a01012 	mov	r1, #18
  13a6b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a6c4 <syscall_getresgid+0x18>
  13a6b8:	ebfffaf4 	bl	139290 <syscall_trace>
  13a6bc:	e3a00000 	mov	r0, #0
  13a6c0:	e8bd8010 	pop	{r4, pc}
  13a6c4:	0014b548 	.word	0x0014b548

0013a6c8 <syscall_setresgid>:
  13a6c8:	e92d4010 	push	{r4, lr}
  13a6cc:	e3a01012 	mov	r1, #18
  13a6d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a6e0 <syscall_setresgid+0x18>
  13a6d4:	ebfffaed 	bl	139290 <syscall_trace>
  13a6d8:	e3a00000 	mov	r0, #0
  13a6dc:	e8bd8010 	pop	{r4, pc}
  13a6e0:	0014b534 	.word	0x0014b534

0013a6e4 <syscall_nfsservctl>:
  13a6e4:	e92d4010 	push	{r4, lr}
  13a6e8:	e3a01013 	mov	r1, #19
  13a6ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a6fc <syscall_nfsservctl+0x18>
  13a6f0:	ebfffae6 	bl	139290 <syscall_trace>
  13a6f4:	e3a00000 	mov	r0, #0
  13a6f8:	e8bd8010 	pop	{r4, pc}
  13a6fc:	0014b520 	.word	0x0014b520

0013a700 <syscall_getresuid>:
  13a700:	e92d4010 	push	{r4, lr}
  13a704:	e3a01012 	mov	r1, #18
  13a708:	e59f0008 	ldr	r0, [pc, #8]	; 13a718 <syscall_getresuid+0x18>
  13a70c:	ebfffadf 	bl	139290 <syscall_trace>
  13a710:	e3a00000 	mov	r0, #0
  13a714:	e8bd8010 	pop	{r4, pc}
  13a718:	0014b4fc 	.word	0x0014b4fc

0013a71c <syscall_setresuid>:
  13a71c:	e92d4010 	push	{r4, lr}
  13a720:	e3a01012 	mov	r1, #18
  13a724:	e59f0008 	ldr	r0, [pc, #8]	; 13a734 <syscall_setresuid+0x18>
  13a728:	ebfffad8 	bl	139290 <syscall_trace>
  13a72c:	e3a00000 	mov	r0, #0
  13a730:	e8bd8010 	pop	{r4, pc}
  13a734:	0014b4e8 	.word	0x0014b4e8

0013a738 <syscall_sched_rr_get_interval>:
  13a738:	e92d4010 	push	{r4, lr}
  13a73c:	e3a0101e 	mov	r1, #30
  13a740:	e59f0008 	ldr	r0, [pc, #8]	; 13a750 <syscall_sched_rr_get_interval+0x18>
  13a744:	ebfffad1 	bl	139290 <syscall_trace>
  13a748:	e3a00000 	mov	r0, #0
  13a74c:	e8bd8010 	pop	{r4, pc}
  13a750:	0014b4a4 	.word	0x0014b4a4

0013a754 <syscall_sched_yield>:
  13a754:	e92d4010 	push	{r4, lr}
  13a758:	e3a01014 	mov	r1, #20
  13a75c:	e59f0008 	ldr	r0, [pc, #8]	; 13a76c <syscall_sched_yield+0x18>
  13a760:	ebfffaca 	bl	139290 <syscall_trace>
  13a764:	e3a00000 	mov	r0, #0
  13a768:	e8bd8010 	pop	{r4, pc}
  13a76c:	0014b450 	.word	0x0014b450

0013a770 <syscall_munlockall>:
  13a770:	e92d4010 	push	{r4, lr}
  13a774:	e3a01013 	mov	r1, #19
  13a778:	e59f0008 	ldr	r0, [pc, #8]	; 13a788 <syscall_munlockall+0x18>
  13a77c:	ebfffac3 	bl	139290 <syscall_trace>
  13a780:	e3a00000 	mov	r0, #0
  13a784:	e8bd8010 	pop	{r4, pc}
  13a788:	0014b3d4 	.word	0x0014b3d4

0013a78c <syscall_mlockall>:
  13a78c:	e92d4010 	push	{r4, lr}
  13a790:	e3a01011 	mov	r1, #17
  13a794:	e59f0008 	ldr	r0, [pc, #8]	; 13a7a4 <syscall_mlockall+0x18>
  13a798:	ebfffabc 	bl	139290 <syscall_trace>
  13a79c:	e3a00000 	mov	r0, #0
  13a7a0:	e8bd8010 	pop	{r4, pc}
  13a7a4:	0014b3c0 	.word	0x0014b3c0

0013a7a8 <syscall_munlock>:
  13a7a8:	e92d4010 	push	{r4, lr}
  13a7ac:	e3a01010 	mov	r1, #16
  13a7b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a7c0 <syscall_munlock+0x18>
  13a7b4:	ebfffab5 	bl	139290 <syscall_trace>
  13a7b8:	e3a00000 	mov	r0, #0
  13a7bc:	e8bd8010 	pop	{r4, pc}
  13a7c0:	0014b3b0 	.word	0x0014b3b0

0013a7c4 <syscall_mlock>:
  13a7c4:	e92d4010 	push	{r4, lr}
  13a7c8:	e3a0100e 	mov	r1, #14
  13a7cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a7dc <syscall_mlock+0x18>
  13a7d0:	ebfffaae 	bl	139290 <syscall_trace>
  13a7d4:	e3a00000 	mov	r0, #0
  13a7d8:	e8bd8010 	pop	{r4, pc}
  13a7dc:	0014b3a0 	.word	0x0014b3a0

0013a7e0 <syscall__sysctl>:
  13a7e0:	e92d4010 	push	{r4, lr}
  13a7e4:	e3a01010 	mov	r1, #16
  13a7e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a7f8 <syscall__sysctl+0x18>
  13a7ec:	ebfffaa7 	bl	139290 <syscall_trace>
  13a7f0:	e3a00000 	mov	r0, #0
  13a7f4:	e8bd8010 	pop	{r4, pc}
  13a7f8:	0014b390 	.word	0x0014b390

0013a7fc <syscall_fdatasync>:
  13a7fc:	e92d4010 	push	{r4, lr}
  13a800:	e3a01012 	mov	r1, #18
  13a804:	e59f0008 	ldr	r0, [pc, #8]	; 13a814 <syscall_fdatasync+0x18>
  13a808:	ebfffaa0 	bl	139290 <syscall_trace>
  13a80c:	e3a00000 	mov	r0, #0
  13a810:	e8bd8010 	pop	{r4, pc}
  13a814:	0014b37c 	.word	0x0014b37c

0013a818 <syscall_getsid>:
  13a818:	e92d4010 	push	{r4, lr}
  13a81c:	e3a0100f 	mov	r1, #15
  13a820:	e59f0008 	ldr	r0, [pc, #8]	; 13a830 <syscall_getsid+0x18>
  13a824:	ebfffa99 	bl	139290 <syscall_trace>
  13a828:	e3a00000 	mov	r0, #0
  13a82c:	e8bd8010 	pop	{r4, pc}
  13a830:	0014b36c 	.word	0x0014b36c

0013a834 <syscall_msync>:
  13a834:	e92d4010 	push	{r4, lr}
  13a838:	e3a0100e 	mov	r1, #14
  13a83c:	e59f0008 	ldr	r0, [pc, #8]	; 13a84c <syscall_msync+0x18>
  13a840:	ebfffa92 	bl	139290 <syscall_trace>
  13a844:	e3a00000 	mov	r0, #0
  13a848:	e8bd8010 	pop	{r4, pc}
  13a84c:	0014b33c 	.word	0x0014b33c

0013a850 <syscall_flock>:
  13a850:	e92d4010 	push	{r4, lr}
  13a854:	e3a0100e 	mov	r1, #14
  13a858:	e59f0008 	ldr	r0, [pc, #8]	; 13a868 <syscall_flock+0x18>
  13a85c:	ebfffa8b 	bl	139290 <syscall_trace>
  13a860:	e3a00000 	mov	r0, #0
  13a864:	e8bd8010 	pop	{r4, pc}
  13a868:	0014b32c 	.word	0x0014b32c

0013a86c <syscall_setfsgid>:
  13a86c:	e92d4010 	push	{r4, lr}
  13a870:	e3a01011 	mov	r1, #17
  13a874:	e59f0008 	ldr	r0, [pc, #8]	; 13a884 <syscall_setfsgid+0x18>
  13a878:	ebfffa84 	bl	139290 <syscall_trace>
  13a87c:	e3a00000 	mov	r0, #0
  13a880:	e8bd8010 	pop	{r4, pc}
  13a884:	0014b2e0 	.word	0x0014b2e0

0013a888 <syscall_setfsuid>:
  13a888:	e92d4010 	push	{r4, lr}
  13a88c:	e3a01011 	mov	r1, #17
  13a890:	e59f0008 	ldr	r0, [pc, #8]	; 13a8a0 <syscall_setfsuid+0x18>
  13a894:	ebfffa7d 	bl	139290 <syscall_trace>
  13a898:	e3a00000 	mov	r0, #0
  13a89c:	e8bd8010 	pop	{r4, pc}
  13a8a0:	0014b2cc 	.word	0x0014b2cc

0013a8a4 <syscall_personality>:
  13a8a4:	e92d4010 	push	{r4, lr}
  13a8a8:	e3a01014 	mov	r1, #20
  13a8ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a8bc <syscall_personality+0x18>
  13a8b0:	ebfffa76 	bl	139290 <syscall_trace>
  13a8b4:	e3a00000 	mov	r0, #0
  13a8b8:	e8bd8010 	pop	{r4, pc}
  13a8bc:	0014b2b8 	.word	0x0014b2b8

0013a8c0 <syscall_sysfs>:
  13a8c0:	e92d4010 	push	{r4, lr}
  13a8c4:	e3a0100e 	mov	r1, #14
  13a8c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a8d8 <syscall_sysfs+0x18>
  13a8cc:	ebfffa6f 	bl	139290 <syscall_trace>
  13a8d0:	e3a00000 	mov	r0, #0
  13a8d4:	e8bd8010 	pop	{r4, pc}
  13a8d8:	0014b2a8 	.word	0x0014b2a8

0013a8dc <syscall_bdflush>:
  13a8dc:	e92d4010 	push	{r4, lr}
  13a8e0:	e3a01010 	mov	r1, #16
  13a8e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a8f4 <syscall_bdflush+0x18>
  13a8e8:	ebfffa68 	bl	139290 <syscall_trace>
  13a8ec:	e3a00000 	mov	r0, #0
  13a8f0:	e8bd8010 	pop	{r4, pc}
  13a8f4:	0014b298 	.word	0x0014b298

0013a8f8 <syscall_fchdir>:
  13a8f8:	e92d4010 	push	{r4, lr}
  13a8fc:	e3a0100f 	mov	r1, #15
  13a900:	e59f0008 	ldr	r0, [pc, #8]	; 13a910 <syscall_fchdir+0x18>
  13a904:	ebfffa61 	bl	139290 <syscall_trace>
  13a908:	e3a00000 	mov	r0, #0
  13a90c:	e8bd8010 	pop	{r4, pc}
  13a910:	0014b288 	.word	0x0014b288

0013a914 <syscall_getpgid>:
  13a914:	e92d4010 	push	{r4, lr}
  13a918:	e3a01010 	mov	r1, #16
  13a91c:	e59f0008 	ldr	r0, [pc, #8]	; 13a92c <syscall_getpgid+0x18>
  13a920:	ebfffa5a 	bl	139290 <syscall_trace>
  13a924:	e3a00000 	mov	r0, #0
  13a928:	e8bd8010 	pop	{r4, pc}
  13a92c:	0014b278 	.word	0x0014b278

0013a930 <syscall_quotactl>:
  13a930:	e92d4010 	push	{r4, lr}
  13a934:	e3a01011 	mov	r1, #17
  13a938:	e59f0008 	ldr	r0, [pc, #8]	; 13a948 <syscall_quotactl+0x18>
  13a93c:	ebfffa53 	bl	139290 <syscall_trace>
  13a940:	e3a00000 	mov	r0, #0
  13a944:	e8bd8010 	pop	{r4, pc}
  13a948:	0014b264 	.word	0x0014b264

0013a94c <syscall_delete_module>:
  13a94c:	e92d4010 	push	{r4, lr}
  13a950:	e3a01016 	mov	r1, #22
  13a954:	e59f0008 	ldr	r0, [pc, #8]	; 13a964 <syscall_delete_module+0x18>
  13a958:	ebfffa4c 	bl	139290 <syscall_trace>
  13a95c:	e3a00000 	mov	r0, #0
  13a960:	e8bd8010 	pop	{r4, pc}
  13a964:	0014b24c 	.word	0x0014b24c

0013a968 <syscall_init_module>:
  13a968:	e92d4010 	push	{r4, lr}
  13a96c:	e3a01014 	mov	r1, #20
  13a970:	e59f0008 	ldr	r0, [pc, #8]	; 13a980 <syscall_init_module+0x18>
  13a974:	ebfffa45 	bl	139290 <syscall_trace>
  13a978:	e3a00000 	mov	r0, #0
  13a97c:	e8bd8010 	pop	{r4, pc}
  13a980:	0014b238 	.word	0x0014b238

0013a984 <syscall_mprotect>:
  13a984:	e92d4010 	push	{r4, lr}
  13a988:	e3a01011 	mov	r1, #17
  13a98c:	e59f0008 	ldr	r0, [pc, #8]	; 13a99c <syscall_mprotect+0x18>
  13a990:	ebfffa3e 	bl	139290 <syscall_trace>
  13a994:	e3a00000 	mov	r0, #0
  13a998:	e8bd8010 	pop	{r4, pc}
  13a99c:	0014b210 	.word	0x0014b210

0013a9a0 <syscall_adjtimex>:
  13a9a0:	e92d4010 	push	{r4, lr}
  13a9a4:	e3a01011 	mov	r1, #17
  13a9a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a9b8 <syscall_adjtimex+0x18>
  13a9ac:	ebfffa37 	bl	139290 <syscall_trace>
  13a9b0:	e3a00000 	mov	r0, #0
  13a9b4:	e8bd8010 	pop	{r4, pc}
  13a9b8:	0014b1fc 	.word	0x0014b1fc

0013a9bc <syscall_uname>:
  13a9bc:	e92d4010 	push	{r4, lr}
  13a9c0:	e3a0100e 	mov	r1, #14
  13a9c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a9d4 <syscall_uname+0x18>
  13a9c8:	ebfffa30 	bl	139290 <syscall_trace>
  13a9cc:	e3a00000 	mov	r0, #0
  13a9d0:	e8bd8010 	pop	{r4, pc}
  13a9d4:	0014b1ec 	.word	0x0014b1ec

0013a9d8 <syscall_setdomainname>:
  13a9d8:	e92d4010 	push	{r4, lr}
  13a9dc:	e3a01016 	mov	r1, #22
  13a9e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a9f0 <syscall_setdomainname+0x18>
  13a9e4:	ebfffa29 	bl	139290 <syscall_trace>
  13a9e8:	e3a00000 	mov	r0, #0
  13a9ec:	e8bd8010 	pop	{r4, pc}
  13a9f0:	0014b1d4 	.word	0x0014b1d4

0013a9f4 <syscall_clone>:
  13a9f4:	e92d4010 	push	{r4, lr}
  13a9f8:	e3a0100e 	mov	r1, #14
  13a9fc:	e59f0008 	ldr	r0, [pc, #8]	; 13aa0c <syscall_clone+0x18>
  13aa00:	ebfffa22 	bl	139290 <syscall_trace>
  13aa04:	e3a00000 	mov	r0, #0
  13aa08:	e8bd8010 	pop	{r4, pc}
  13aa0c:	0014b1c4 	.word	0x0014b1c4

0013aa10 <syscall_sigreturn>:
  13aa10:	e92d4010 	push	{r4, lr}
  13aa14:	e3a01012 	mov	r1, #18
  13aa18:	e59f0008 	ldr	r0, [pc, #8]	; 13aa28 <syscall_sigreturn+0x18>
  13aa1c:	ebfffa1b 	bl	139290 <syscall_trace>
  13aa20:	e3a00000 	mov	r0, #0
  13aa24:	e8bd8010 	pop	{r4, pc}
  13aa28:	0014b1b0 	.word	0x0014b1b0

0013aa2c <syscall_sysinfo>:
  13aa2c:	e92d4010 	push	{r4, lr}
  13aa30:	e3a01010 	mov	r1, #16
  13aa34:	e59f0008 	ldr	r0, [pc, #8]	; 13aa44 <syscall_sysinfo+0x18>
  13aa38:	ebfffa14 	bl	139290 <syscall_trace>
  13aa3c:	e3a00000 	mov	r0, #0
  13aa40:	e8bd8010 	pop	{r4, pc}
  13aa44:	0014b190 	.word	0x0014b190

0013aa48 <syscall_swapoff>:
  13aa48:	e92d4010 	push	{r4, lr}
  13aa4c:	e3a01010 	mov	r1, #16
  13aa50:	e59f0008 	ldr	r0, [pc, #8]	; 13aa60 <syscall_swapoff+0x18>
  13aa54:	ebfffa0d 	bl	139290 <syscall_trace>
  13aa58:	e3a00000 	mov	r0, #0
  13aa5c:	e8bd8010 	pop	{r4, pc}
  13aa60:	0014b180 	.word	0x0014b180

0013aa64 <syscall_wait4>:
  13aa64:	e92d4010 	push	{r4, lr}
  13aa68:	e3a0100e 	mov	r1, #14
  13aa6c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa7c <syscall_wait4+0x18>
  13aa70:	ebfffa06 	bl	139290 <syscall_trace>
  13aa74:	e3a00000 	mov	r0, #0
  13aa78:	e8bd8010 	pop	{r4, pc}
  13aa7c:	0014b170 	.word	0x0014b170

0013aa80 <syscall_vhangup>:
  13aa80:	e92d4010 	push	{r4, lr}
  13aa84:	e3a01010 	mov	r1, #16
  13aa88:	e59f0008 	ldr	r0, [pc, #8]	; 13aa98 <syscall_vhangup+0x18>
  13aa8c:	ebfff9ff 	bl	139290 <syscall_trace>
  13aa90:	e3a00000 	mov	r0, #0
  13aa94:	e8bd8010 	pop	{r4, pc}
  13aa98:	0014b160 	.word	0x0014b160

0013aa9c <syscall_fstat>:
  13aa9c:	e92d4010 	push	{r4, lr}
  13aaa0:	e3a0100e 	mov	r1, #14
  13aaa4:	e59f0008 	ldr	r0, [pc, #8]	; 13aab4 <syscall_fstat+0x18>
  13aaa8:	ebfff9f8 	bl	139290 <syscall_trace>
  13aaac:	e3a00000 	mov	r0, #0
  13aab0:	e8bd8010 	pop	{r4, pc}
  13aab4:	0014b150 	.word	0x0014b150

0013aab8 <syscall_getitimer>:
  13aab8:	e92d4010 	push	{r4, lr}
  13aabc:	e3a01012 	mov	r1, #18
  13aac0:	e59f0008 	ldr	r0, [pc, #8]	; 13aad0 <syscall_getitimer+0x18>
  13aac4:	ebfff9f1 	bl	139290 <syscall_trace>
  13aac8:	e3a00000 	mov	r0, #0
  13aacc:	e8bd8010 	pop	{r4, pc}
  13aad0:	0014b11c 	.word	0x0014b11c

0013aad4 <syscall_setitimer>:
  13aad4:	e92d4010 	push	{r4, lr}
  13aad8:	e3a01012 	mov	r1, #18
  13aadc:	e59f0008 	ldr	r0, [pc, #8]	; 13aaec <syscall_setitimer+0x18>
  13aae0:	ebfff9ea 	bl	139290 <syscall_trace>
  13aae4:	e3a00000 	mov	r0, #0
  13aae8:	e8bd8010 	pop	{r4, pc}
  13aaec:	0014b108 	.word	0x0014b108

0013aaf0 <syscall_syslog>:
  13aaf0:	e92d4010 	push	{r4, lr}
  13aaf4:	e3a0100f 	mov	r1, #15
  13aaf8:	e59f0008 	ldr	r0, [pc, #8]	; 13ab08 <syscall_syslog+0x18>
  13aafc:	ebfff9e3 	bl	139290 <syscall_trace>
  13ab00:	e3a00000 	mov	r0, #0
  13ab04:	e8bd8010 	pop	{r4, pc}
  13ab08:	0014b0f8 	.word	0x0014b0f8

0013ab0c <syscall_fstatfs>:
  13ab0c:	e92d4010 	push	{r4, lr}
  13ab10:	e3a01010 	mov	r1, #16
  13ab14:	e59f0008 	ldr	r0, [pc, #8]	; 13ab24 <syscall_fstatfs+0x18>
  13ab18:	ebfff9dc 	bl	139290 <syscall_trace>
  13ab1c:	e3a00000 	mov	r0, #0
  13ab20:	e8bd8010 	pop	{r4, pc}
  13ab24:	0014b0e8 	.word	0x0014b0e8

0013ab28 <syscall_statfs>:
  13ab28:	e92d4010 	push	{r4, lr}
  13ab2c:	e3a0100f 	mov	r1, #15
  13ab30:	e59f0008 	ldr	r0, [pc, #8]	; 13ab40 <syscall_statfs+0x18>
  13ab34:	ebfff9d5 	bl	139290 <syscall_trace>
  13ab38:	e3a00000 	mov	r0, #0
  13ab3c:	e8bd8010 	pop	{r4, pc}
  13ab40:	0014b0d8 	.word	0x0014b0d8

0013ab44 <syscall_setpriority>:
  13ab44:	e92d4010 	push	{r4, lr}
  13ab48:	e3a01014 	mov	r1, #20
  13ab4c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab5c <syscall_setpriority+0x18>
  13ab50:	ebfff9ce 	bl	139290 <syscall_trace>
  13ab54:	e3a00000 	mov	r0, #0
  13ab58:	e8bd8010 	pop	{r4, pc}
  13ab5c:	0014b0c4 	.word	0x0014b0c4

0013ab60 <syscall_getpriority>:
  13ab60:	e92d4010 	push	{r4, lr}
  13ab64:	e3a01014 	mov	r1, #20
  13ab68:	e59f0008 	ldr	r0, [pc, #8]	; 13ab78 <syscall_getpriority+0x18>
  13ab6c:	ebfff9c7 	bl	139290 <syscall_trace>
  13ab70:	e3a00000 	mov	r0, #0
  13ab74:	e8bd8010 	pop	{r4, pc}
  13ab78:	0014b0b0 	.word	0x0014b0b0

0013ab7c <syscall_fchown>:
  13ab7c:	e92d4010 	push	{r4, lr}
  13ab80:	e3a0100f 	mov	r1, #15
  13ab84:	e59f0008 	ldr	r0, [pc, #8]	; 13ab94 <syscall_fchown+0x18>
  13ab88:	ebfff9c0 	bl	139290 <syscall_trace>
  13ab8c:	e3a00000 	mov	r0, #0
  13ab90:	e8bd8010 	pop	{r4, pc}
  13ab94:	0014b0a0 	.word	0x0014b0a0

0013ab98 <syscall_fchmod>:
  13ab98:	e92d4010 	push	{r4, lr}
  13ab9c:	e3a0100f 	mov	r1, #15
  13aba0:	e59f0008 	ldr	r0, [pc, #8]	; 13abb0 <syscall_fchmod+0x18>
  13aba4:	ebfff9b9 	bl	139290 <syscall_trace>
  13aba8:	e3a00000 	mov	r0, #0
  13abac:	e8bd8010 	pop	{r4, pc}
  13abb0:	0014b090 	.word	0x0014b090

0013abb4 <syscall_ftruncate>:
  13abb4:	e92d4010 	push	{r4, lr}
  13abb8:	e3a01012 	mov	r1, #18
  13abbc:	e59f0008 	ldr	r0, [pc, #8]	; 13abcc <syscall_ftruncate+0x18>
  13abc0:	ebfff9b2 	bl	139290 <syscall_trace>
  13abc4:	e3a00000 	mov	r0, #0
  13abc8:	e8bd8010 	pop	{r4, pc}
  13abcc:	0014b07c 	.word	0x0014b07c

0013abd0 <syscall_truncate>:
  13abd0:	e92d4010 	push	{r4, lr}
  13abd4:	e3a01011 	mov	r1, #17
  13abd8:	e59f0008 	ldr	r0, [pc, #8]	; 13abe8 <syscall_truncate+0x18>
  13abdc:	ebfff9ab 	bl	139290 <syscall_trace>
  13abe0:	e3a00000 	mov	r0, #0
  13abe4:	e8bd8010 	pop	{r4, pc}
  13abe8:	0014b068 	.word	0x0014b068

0013abec <syscall_reboot>:
  13abec:	e92d4010 	push	{r4, lr}
  13abf0:	e3a0100f 	mov	r1, #15
  13abf4:	e59f0008 	ldr	r0, [pc, #8]	; 13ac04 <syscall_reboot+0x18>
  13abf8:	ebfff9a4 	bl	139290 <syscall_trace>
  13abfc:	e3a00000 	mov	r0, #0
  13ac00:	e8bd8010 	pop	{r4, pc}
  13ac04:	0014b048 	.word	0x0014b048

0013ac08 <syscall_swapon>:
  13ac08:	e92d4010 	push	{r4, lr}
  13ac0c:	e3a0100f 	mov	r1, #15
  13ac10:	e59f0008 	ldr	r0, [pc, #8]	; 13ac20 <syscall_swapon+0x18>
  13ac14:	ebfff99d 	bl	139290 <syscall_trace>
  13ac18:	e3a00000 	mov	r0, #0
  13ac1c:	e8bd8010 	pop	{r4, pc}
  13ac20:	0014b038 	.word	0x0014b038

0013ac24 <syscall_uselib>:
  13ac24:	e92d4010 	push	{r4, lr}
  13ac28:	e3a0100f 	mov	r1, #15
  13ac2c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac3c <syscall_uselib+0x18>
  13ac30:	ebfff996 	bl	139290 <syscall_trace>
  13ac34:	e3a00000 	mov	r0, #0
  13ac38:	e8bd8010 	pop	{r4, pc}
  13ac3c:	0014b028 	.word	0x0014b028

0013ac40 <syscall_symlink>:
  13ac40:	e92d4010 	push	{r4, lr}
  13ac44:	e3a01010 	mov	r1, #16
  13ac48:	e59f0008 	ldr	r0, [pc, #8]	; 13ac58 <syscall_symlink+0x18>
  13ac4c:	ebfff98f 	bl	139290 <syscall_trace>
  13ac50:	e3a00000 	mov	r0, #0
  13ac54:	e8bd8010 	pop	{r4, pc}
  13ac58:	0014b004 	.word	0x0014b004

0013ac5c <syscall_setgroups>:
  13ac5c:	e92d4010 	push	{r4, lr}
  13ac60:	e3a01012 	mov	r1, #18
  13ac64:	e59f0008 	ldr	r0, [pc, #8]	; 13ac74 <syscall_setgroups+0x18>
  13ac68:	ebfff988 	bl	139290 <syscall_trace>
  13ac6c:	e3a00000 	mov	r0, #0
  13ac70:	e8bd8010 	pop	{r4, pc}
  13ac74:	0014aff0 	.word	0x0014aff0

0013ac78 <syscall_getgroups>:
  13ac78:	e92d4010 	push	{r4, lr}
  13ac7c:	e3a01012 	mov	r1, #18
  13ac80:	e59f0008 	ldr	r0, [pc, #8]	; 13ac90 <syscall_getgroups+0x18>
  13ac84:	ebfff981 	bl	139290 <syscall_trace>
  13ac88:	e3a00000 	mov	r0, #0
  13ac8c:	e8bd8010 	pop	{r4, pc}
  13ac90:	0014afdc 	.word	0x0014afdc

0013ac94 <syscall_settimeofday>:
  13ac94:	e92d4010 	push	{r4, lr}
  13ac98:	e3a01015 	mov	r1, #21
  13ac9c:	e59f0008 	ldr	r0, [pc, #8]	; 13acac <syscall_settimeofday+0x18>
  13aca0:	ebfff97a 	bl	139290 <syscall_trace>
  13aca4:	e3a00000 	mov	r0, #0
  13aca8:	e8bd8010 	pop	{r4, pc}
  13acac:	0014afc4 	.word	0x0014afc4

0013acb0 <syscall_gettimeofday>:
  13acb0:	e92d4010 	push	{r4, lr}
  13acb4:	e3a01015 	mov	r1, #21
  13acb8:	e59f0008 	ldr	r0, [pc, #8]	; 13acc8 <syscall_gettimeofday+0x18>
  13acbc:	ebfff973 	bl	139290 <syscall_trace>
  13acc0:	e3a00000 	mov	r0, #0
  13acc4:	e8bd8010 	pop	{r4, pc}
  13acc8:	0014afac 	.word	0x0014afac

0013accc <syscall_getrusage>:
  13accc:	e92d4010 	push	{r4, lr}
  13acd0:	e3a01012 	mov	r1, #18
  13acd4:	e59f0008 	ldr	r0, [pc, #8]	; 13ace4 <syscall_getrusage+0x18>
  13acd8:	ebfff96c 	bl	139290 <syscall_trace>
  13acdc:	e3a00000 	mov	r0, #0
  13ace0:	e8bd8010 	pop	{r4, pc}
  13ace4:	0014af98 	.word	0x0014af98

0013ace8 <syscall_sethostname>:
  13ace8:	e92d4010 	push	{r4, lr}
  13acec:	e3a01014 	mov	r1, #20
  13acf0:	e59f0008 	ldr	r0, [pc, #8]	; 13ad00 <syscall_sethostname+0x18>
  13acf4:	ebfff965 	bl	139290 <syscall_trace>
  13acf8:	e3a00000 	mov	r0, #0
  13acfc:	e8bd8010 	pop	{r4, pc}
  13ad00:	0014af70 	.word	0x0014af70

0013ad04 <syscall_sigpending>:
  13ad04:	e92d4010 	push	{r4, lr}
  13ad08:	e3a01013 	mov	r1, #19
  13ad0c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad1c <syscall_sigpending+0x18>
  13ad10:	ebfff95e 	bl	139290 <syscall_trace>
  13ad14:	e3a00000 	mov	r0, #0
  13ad18:	e8bd8010 	pop	{r4, pc}
  13ad1c:	0014af5c 	.word	0x0014af5c

0013ad20 <syscall_sigsuspend>:
  13ad20:	e92d4010 	push	{r4, lr}
  13ad24:	e3a01013 	mov	r1, #19
  13ad28:	e59f0008 	ldr	r0, [pc, #8]	; 13ad38 <syscall_sigsuspend+0x18>
  13ad2c:	ebfff957 	bl	139290 <syscall_trace>
  13ad30:	e3a00000 	mov	r0, #0
  13ad34:	e8bd8010 	pop	{r4, pc}
  13ad38:	0014af48 	.word	0x0014af48

0013ad3c <syscall_setregid>:
  13ad3c:	e92d4010 	push	{r4, lr}
  13ad40:	e3a01011 	mov	r1, #17
  13ad44:	e59f0008 	ldr	r0, [pc, #8]	; 13ad54 <syscall_setregid+0x18>
  13ad48:	ebfff950 	bl	139290 <syscall_trace>
  13ad4c:	e3a00000 	mov	r0, #0
  13ad50:	e8bd8010 	pop	{r4, pc}
  13ad54:	0014af34 	.word	0x0014af34

0013ad58 <syscall_setreuid>:
  13ad58:	e92d4010 	push	{r4, lr}
  13ad5c:	e3a01011 	mov	r1, #17
  13ad60:	e59f0008 	ldr	r0, [pc, #8]	; 13ad70 <syscall_setreuid+0x18>
  13ad64:	ebfff949 	bl	139290 <syscall_trace>
  13ad68:	e3a00000 	mov	r0, #0
  13ad6c:	e8bd8010 	pop	{r4, pc}
  13ad70:	0014af20 	.word	0x0014af20

0013ad74 <syscall_getpgrp>:
  13ad74:	e92d4010 	push	{r4, lr}
  13ad78:	e3a01010 	mov	r1, #16
  13ad7c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad8c <syscall_getpgrp+0x18>
  13ad80:	ebfff942 	bl	139290 <syscall_trace>
  13ad84:	e3a00000 	mov	r0, #0
  13ad88:	e8bd8010 	pop	{r4, pc}
  13ad8c:	0014aeec 	.word	0x0014aeec

0013ad90 <syscall_getppid>:
  13ad90:	e92d4010 	push	{r4, lr}
  13ad94:	e3a01010 	mov	r1, #16
  13ad98:	e59f0008 	ldr	r0, [pc, #8]	; 13ada8 <syscall_getppid+0x18>
  13ad9c:	ebfff93b 	bl	139290 <syscall_trace>
  13ada0:	e3a00000 	mov	r0, #0
  13ada4:	e8bd8010 	pop	{r4, pc}
  13ada8:	0014aedc 	.word	0x0014aedc

0013adac <syscall_ustat>:
  13adac:	e92d4010 	push	{r4, lr}
  13adb0:	e3a0100e 	mov	r1, #14
  13adb4:	e59f0008 	ldr	r0, [pc, #8]	; 13adc4 <syscall_ustat+0x18>
  13adb8:	ebfff934 	bl	139290 <syscall_trace>
  13adbc:	e3a00000 	mov	r0, #0
  13adc0:	e8bd8010 	pop	{r4, pc}
  13adc4:	0014aebc 	.word	0x0014aebc

0013adc8 <syscall_chroot>:
  13adc8:	e92d4010 	push	{r4, lr}
  13adcc:	e3a0100f 	mov	r1, #15
  13add0:	e59f0008 	ldr	r0, [pc, #8]	; 13ade0 <syscall_chroot+0x18>
  13add4:	ebfff92d 	bl	139290 <syscall_trace>
  13add8:	e3a00000 	mov	r0, #0
  13addc:	e8bd8010 	pop	{r4, pc}
  13ade0:	0014aeac 	.word	0x0014aeac

0013ade4 <syscall_umask>:
  13ade4:	e92d4010 	push	{r4, lr}
  13ade8:	e3a0100e 	mov	r1, #14
  13adec:	e59f0008 	ldr	r0, [pc, #8]	; 13adfc <syscall_umask+0x18>
  13adf0:	ebfff926 	bl	139290 <syscall_trace>
  13adf4:	e3a00000 	mov	r0, #0
  13adf8:	e8bd8010 	pop	{r4, pc}
  13adfc:	0014ae9c 	.word	0x0014ae9c

0013ae00 <syscall_setpgid>:
  13ae00:	e92d4010 	push	{r4, lr}
  13ae04:	e3a01010 	mov	r1, #16
  13ae08:	e59f0008 	ldr	r0, [pc, #8]	; 13ae18 <syscall_setpgid+0x18>
  13ae0c:	ebfff91f 	bl	139290 <syscall_trace>
  13ae10:	e3a00000 	mov	r0, #0
  13ae14:	e8bd8010 	pop	{r4, pc}
  13ae18:	0014ae8c 	.word	0x0014ae8c

0013ae1c <syscall_umount2>:
  13ae1c:	e92d4010 	push	{r4, lr}
  13ae20:	e3a01010 	mov	r1, #16
  13ae24:	e59f0008 	ldr	r0, [pc, #8]	; 13ae34 <syscall_umount2+0x18>
  13ae28:	ebfff918 	bl	139290 <syscall_trace>
  13ae2c:	e3a00000 	mov	r0, #0
  13ae30:	e8bd8010 	pop	{r4, pc}
  13ae34:	0014ae5c 	.word	0x0014ae5c

0013ae38 <syscall_acct>:
  13ae38:	e92d4010 	push	{r4, lr}
  13ae3c:	e3a0100d 	mov	r1, #13
  13ae40:	e59f0008 	ldr	r0, [pc, #8]	; 13ae50 <syscall_acct+0x18>
  13ae44:	ebfff911 	bl	139290 <syscall_trace>
  13ae48:	e3a00000 	mov	r0, #0
  13ae4c:	e8bd8010 	pop	{r4, pc}
  13ae50:	0014ae4c 	.word	0x0014ae4c

0013ae54 <syscall_getegid>:
  13ae54:	e92d4010 	push	{r4, lr}
  13ae58:	e3a01010 	mov	r1, #16
  13ae5c:	e59f0008 	ldr	r0, [pc, #8]	; 13ae6c <syscall_getegid+0x18>
  13ae60:	ebfff90a 	bl	139290 <syscall_trace>
  13ae64:	e3a00000 	mov	r0, #0
  13ae68:	e8bd8010 	pop	{r4, pc}
  13ae6c:	0014ae3c 	.word	0x0014ae3c

0013ae70 <syscall_geteuid>:
  13ae70:	e92d4010 	push	{r4, lr}
  13ae74:	e3a01010 	mov	r1, #16
  13ae78:	e59f0008 	ldr	r0, [pc, #8]	; 13ae88 <syscall_geteuid+0x18>
  13ae7c:	ebfff903 	bl	139290 <syscall_trace>
  13ae80:	e3a00000 	mov	r0, #0
  13ae84:	e8bd8010 	pop	{r4, pc}
  13ae88:	0014ae2c 	.word	0x0014ae2c

0013ae8c <syscall_getgid>:
  13ae8c:	e92d4010 	push	{r4, lr}
  13ae90:	e3a0100f 	mov	r1, #15
  13ae94:	e59f0008 	ldr	r0, [pc, #8]	; 13aea4 <syscall_getgid+0x18>
  13ae98:	ebfff8fc 	bl	139290 <syscall_trace>
  13ae9c:	e3a00000 	mov	r0, #0
  13aea0:	e8bd8010 	pop	{r4, pc}
  13aea4:	0014ae1c 	.word	0x0014ae1c

0013aea8 <syscall_setgid>:
  13aea8:	e92d4010 	push	{r4, lr}
  13aeac:	e3a0100f 	mov	r1, #15
  13aeb0:	e59f0008 	ldr	r0, [pc, #8]	; 13aec0 <syscall_setgid+0x18>
  13aeb4:	ebfff8f5 	bl	139290 <syscall_trace>
  13aeb8:	e3a00000 	mov	r0, #0
  13aebc:	e8bd8010 	pop	{r4, pc}
  13aec0:	0014ae0c 	.word	0x0014ae0c

0013aec4 <syscall_times>:
  13aec4:	e92d4010 	push	{r4, lr}
  13aec8:	e3a0100e 	mov	r1, #14
  13aecc:	e59f0008 	ldr	r0, [pc, #8]	; 13aedc <syscall_times+0x18>
  13aed0:	ebfff8ee 	bl	139290 <syscall_trace>
  13aed4:	e3a00000 	mov	r0, #0
  13aed8:	e8bd8010 	pop	{r4, pc}
  13aedc:	0014adf0 	.word	0x0014adf0

0013aee0 <syscall_sync>:
  13aee0:	e92d4010 	push	{r4, lr}
  13aee4:	e3a0100d 	mov	r1, #13
  13aee8:	e59f0008 	ldr	r0, [pc, #8]	; 13aef8 <syscall_sync+0x18>
  13aeec:	ebfff8e7 	bl	139290 <syscall_trace>
  13aef0:	e3a00000 	mov	r0, #0
  13aef4:	e8bd8010 	pop	{r4, pc}
  13aef8:	0014ad84 	.word	0x0014ad84

0013aefc <syscall_nice>:
  13aefc:	e92d4010 	push	{r4, lr}
  13af00:	e3a0100d 	mov	r1, #13
  13af04:	e59f0008 	ldr	r0, [pc, #8]	; 13af14 <syscall_nice+0x18>
  13af08:	ebfff8e0 	bl	139290 <syscall_trace>
  13af0c:	e3a00000 	mov	r0, #0
  13af10:	e8bd8010 	pop	{r4, pc}
  13af14:	0014ad74 	.word	0x0014ad74

0013af18 <syscall_pause>:
  13af18:	e92d4010 	push	{r4, lr}
  13af1c:	e3a0100e 	mov	r1, #14
  13af20:	e59f0008 	ldr	r0, [pc, #8]	; 13af30 <syscall_pause+0x18>
  13af24:	ebfff8d9 	bl	139290 <syscall_trace>
  13af28:	e3a00000 	mov	r0, #0
  13af2c:	e8bd8010 	pop	{r4, pc}
  13af30:	0014ad54 	.word	0x0014ad54

0013af34 <syscall_ptrace>:
  13af34:	e92d4010 	push	{r4, lr}
  13af38:	e3a0100f 	mov	r1, #15
  13af3c:	e59f0008 	ldr	r0, [pc, #8]	; 13af4c <syscall_ptrace+0x18>
  13af40:	ebfff8d2 	bl	139290 <syscall_trace>
  13af44:	e3a00000 	mov	r0, #0
  13af48:	e8bd8010 	pop	{r4, pc}
  13af4c:	0014ad44 	.word	0x0014ad44

0013af50 <syscall_getuid>:
  13af50:	e92d4010 	push	{r4, lr}
  13af54:	e3a0100f 	mov	r1, #15
  13af58:	e59f0008 	ldr	r0, [pc, #8]	; 13af68 <syscall_getuid+0x18>
  13af5c:	ebfff8cb 	bl	139290 <syscall_trace>
  13af60:	e3a00000 	mov	r0, #0
  13af64:	e8bd8010 	pop	{r4, pc}
  13af68:	0014ad34 	.word	0x0014ad34

0013af6c <syscall_setuid>:
  13af6c:	e92d4010 	push	{r4, lr}
  13af70:	e3a0100f 	mov	r1, #15
  13af74:	e59f0008 	ldr	r0, [pc, #8]	; 13af84 <syscall_setuid+0x18>
  13af78:	ebfff8c4 	bl	139290 <syscall_trace>
  13af7c:	e3a00000 	mov	r0, #0
  13af80:	e8bd8010 	pop	{r4, pc}
  13af84:	0014ad24 	.word	0x0014ad24

0013af88 <syscall_mount>:
  13af88:	e92d4010 	push	{r4, lr}
  13af8c:	e3a0100e 	mov	r1, #14
  13af90:	e59f0008 	ldr	r0, [pc, #8]	; 13afa0 <syscall_mount+0x18>
  13af94:	ebfff8bd 	bl	139290 <syscall_trace>
  13af98:	e3a00000 	mov	r0, #0
  13af9c:	e8bd8010 	pop	{r4, pc}
  13afa0:	0014ad14 	.word	0x0014ad14

0013afa4 <syscall_lchown>:
  13afa4:	e92d4010 	push	{r4, lr}
  13afa8:	e3a0100f 	mov	r1, #15
  13afac:	e59f0008 	ldr	r0, [pc, #8]	; 13afbc <syscall_lchown+0x18>
  13afb0:	ebfff8b6 	bl	139290 <syscall_trace>
  13afb4:	e3a00000 	mov	r0, #0
  13afb8:	e8bd8010 	pop	{r4, pc}
  13afbc:	0014ace4 	.word	0x0014ace4

0013afc0 <syscall_chmod>:
  13afc0:	e92d4010 	push	{r4, lr}
  13afc4:	e3a0100e 	mov	r1, #14
  13afc8:	e59f0008 	ldr	r0, [pc, #8]	; 13afd8 <syscall_chmod+0x18>
  13afcc:	ebfff8af 	bl	139290 <syscall_trace>
  13afd0:	e3a00000 	mov	r0, #0
  13afd4:	e8bd8010 	pop	{r4, pc}
  13afd8:	0014acd4 	.word	0x0014acd4

0013afdc <syscall_mknod>:
  13afdc:	e92d4010 	push	{r4, lr}
  13afe0:	e3a0100e 	mov	r1, #14
  13afe4:	e59f0008 	ldr	r0, [pc, #8]	; 13aff4 <syscall_mknod+0x18>
  13afe8:	ebfff8a8 	bl	139290 <syscall_trace>
  13afec:	e3a00000 	mov	r0, #0
  13aff0:	e8bd8010 	pop	{r4, pc}
  13aff4:	0014acc4 	.word	0x0014acc4

0013aff8 <syscall_link>:
  13aff8:	e92d4010 	push	{r4, lr}
  13affc:	e3a0100d 	mov	r1, #13
  13b000:	e59f0008 	ldr	r0, [pc, #8]	; 13b010 <syscall_link+0x18>
  13b004:	ebfff8a1 	bl	139290 <syscall_trace>
  13b008:	e3a00000 	mov	r0, #0
  13b00c:	e8bd8010 	pop	{r4, pc}
  13b010:	0014ac84 	.word	0x0014ac84

0013b014 <syscall_creat>:
  13b014:	e92d4010 	push	{r4, lr}
  13b018:	e3a0100e 	mov	r1, #14
  13b01c:	e59f0008 	ldr	r0, [pc, #8]	; 13b02c <syscall_creat+0x18>
  13b020:	ebfff89a 	bl	139290 <syscall_trace>
  13b024:	e3a00000 	mov	r0, #0
  13b028:	e8bd8010 	pop	{r4, pc}
  13b02c:	0014ac74 	.word	0x0014ac74

0013b030 <syscall_restart_syscall>:
  13b030:	e92d4010 	push	{r4, lr}
  13b034:	e3a01018 	mov	r1, #24
  13b038:	e59f0008 	ldr	r0, [pc, #8]	; 13b048 <syscall_restart_syscall+0x18>
  13b03c:	ebfff893 	bl	139290 <syscall_trace>
  13b040:	e3a00000 	mov	r0, #0
  13b044:	e8bd8010 	pop	{r4, pc}
  13b048:	0014abfc 	.word	0x0014abfc

0013b04c <syscall_debug>:
  13b04c:	e92d4070 	push	{r4, r5, r6, lr}
  13b050:	e1a04000 	mov	r4, r0
  13b054:	e1a05001 	mov	r5, r1
  13b058:	e3a0201d 	mov	r2, #29
  13b05c:	e59f1018 	ldr	r1, [pc, #24]	; 13b07c <syscall_debug+0x30>
  13b060:	e3a000ff 	mov	r0, #255	; 0xff
  13b064:	eb0004f9 	bl	13c450 <syscall>
  13b068:	e1a02005 	mov	r2, r5
  13b06c:	e1a01004 	mov	r1, r4
  13b070:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b074:	e3a000ff 	mov	r0, #255	; 0xff
  13b078:	ea0004f4 	b	13c450 <syscall>
  13b07c:	0014c6bc 	.word	0x0014c6bc

0013b080 <syscall_shmdt>:
  13b080:	e92d4010 	push	{r4, lr}
  13b084:	e1a04000 	mov	r4, r0
  13b088:	e3a0100e 	mov	r1, #14
  13b08c:	e59f0010 	ldr	r0, [pc, #16]	; 13b0a4 <syscall_shmdt+0x24>
  13b090:	ebffffed 	bl	13b04c <syscall_debug>
  13b094:	e1a01004 	mov	r1, r4
  13b098:	e8bd4010 	pop	{r4, lr}
  13b09c:	e59f0004 	ldr	r0, [pc, #4]	; 13b0a8 <syscall_shmdt+0x28>
  13b0a0:	ea0004ea 	b	13c450 <syscall>
  13b0a4:	0014bf54 	.word	0x0014bf54
  13b0a8:	00000132 	.word	0x00000132

0013b0ac <syscall_set_tid_address>:
  13b0ac:	e92d4010 	push	{r4, lr}
  13b0b0:	e1a04000 	mov	r4, r0
  13b0b4:	e3a01018 	mov	r1, #24
  13b0b8:	e59f0010 	ldr	r0, [pc, #16]	; 13b0d0 <syscall_set_tid_address+0x24>
  13b0bc:	ebffffe2 	bl	13b04c <syscall_debug>
  13b0c0:	e1a01004 	mov	r1, r4
  13b0c4:	e8bd4010 	pop	{r4, lr}
  13b0c8:	e3a0007c 	mov	r0, #124	; 0x7c
  13b0cc:	ea0004df 	b	13c450 <syscall>
  13b0d0:	0014bb74 	.word	0x0014bb74

0013b0d4 <syscall_exit_group>:
  13b0d4:	e92d4010 	push	{r4, lr}
  13b0d8:	e1a04000 	mov	r4, r0
  13b0dc:	e3a01013 	mov	r1, #19
  13b0e0:	e59f0010 	ldr	r0, [pc, #16]	; 13b0f8 <syscall_exit_group+0x24>
  13b0e4:	ebffffd8 	bl	13b04c <syscall_debug>
  13b0e8:	e1a01004 	mov	r1, r4
  13b0ec:	e8bd4010 	pop	{r4, lr}
  13b0f0:	e3a00062 	mov	r0, #98	; 0x62
  13b0f4:	ea0004d5 	b	13c450 <syscall>
  13b0f8:	0014baec 	.word	0x0014baec

0013b0fc <syscall_sched_get_priority_min>:
  13b0fc:	e92d4010 	push	{r4, lr}
  13b100:	e1a04000 	mov	r4, r0
  13b104:	e3a0101f 	mov	r1, #31
  13b108:	e59f0010 	ldr	r0, [pc, #16]	; 13b120 <syscall_sched_get_priority_min+0x24>
  13b10c:	ebffffce 	bl	13b04c <syscall_debug>
  13b110:	e1a01004 	mov	r1, r4
  13b114:	e8bd4010 	pop	{r4, lr}
  13b118:	e3a00097 	mov	r0, #151	; 0x97
  13b11c:	ea0004cb 	b	13c450 <syscall>
  13b120:	0014b484 	.word	0x0014b484

0013b124 <syscall_sched_get_priority_max>:
  13b124:	e92d4010 	push	{r4, lr}
  13b128:	e1a04000 	mov	r4, r0
  13b12c:	e3a0101f 	mov	r1, #31
  13b130:	e59f0010 	ldr	r0, [pc, #16]	; 13b148 <syscall_sched_get_priority_max+0x24>
  13b134:	ebffffc4 	bl	13b04c <syscall_debug>
  13b138:	e1a01004 	mov	r1, r4
  13b13c:	e8bd4010 	pop	{r4, lr}
  13b140:	e3a00096 	mov	r0, #150	; 0x96
  13b144:	ea0004c1 	b	13c450 <syscall>
  13b148:	0014b464 	.word	0x0014b464

0013b14c <syscall_fsync>:
  13b14c:	e92d4010 	push	{r4, lr}
  13b150:	e1a04000 	mov	r4, r0
  13b154:	e3a0100e 	mov	r1, #14
  13b158:	e59f0010 	ldr	r0, [pc, #16]	; 13b170 <syscall_fsync+0x24>
  13b15c:	ebffffba 	bl	13b04c <syscall_debug>
  13b160:	e1a01004 	mov	r1, r4
  13b164:	e8bd4010 	pop	{r4, lr}
  13b168:	e3a0009b 	mov	r0, #155	; 0x9b
  13b16c:	ea0004b7 	b	13c450 <syscall>
  13b170:	0014b1a0 	.word	0x0014b1a0

0013b174 <syscall_brk>:
  13b174:	e92d4010 	push	{r4, lr}
  13b178:	e1a04000 	mov	r4, r0
  13b17c:	e3a0100c 	mov	r1, #12
  13b180:	e59f0010 	ldr	r0, [pc, #16]	; 13b198 <syscall_brk+0x24>
  13b184:	ebffffb0 	bl	13b04c <syscall_debug>
  13b188:	e1a01004 	mov	r1, r4
  13b18c:	e8bd4010 	pop	{r4, lr}
  13b190:	e3a00034 	mov	r0, #52	; 0x34
  13b194:	ea0004ad 	b	13c450 <syscall>
  13b198:	0014ae00 	.word	0x0014ae00

0013b19c <syscall_pipe>:
  13b19c:	e92d4010 	push	{r4, lr}
  13b1a0:	e1a04000 	mov	r4, r0
  13b1a4:	e3a0100d 	mov	r1, #13
  13b1a8:	e59f0010 	ldr	r0, [pc, #16]	; 13b1c0 <syscall_pipe+0x24>
  13b1ac:	ebffffa6 	bl	13b04c <syscall_debug>
  13b1b0:	e1a01004 	mov	r1, r4
  13b1b4:	e8bd4010 	pop	{r4, lr}
  13b1b8:	e3a0007e 	mov	r0, #126	; 0x7e
  13b1bc:	ea0004a3 	b	13c450 <syscall>
  13b1c0:	0014ade0 	.word	0x0014ade0

0013b1c4 <syscall_dup>:
  13b1c4:	e92d4010 	push	{r4, lr}
  13b1c8:	e1a04000 	mov	r4, r0
  13b1cc:	e3a0100c 	mov	r1, #12
  13b1d0:	e59f0010 	ldr	r0, [pc, #16]	; 13b1e8 <syscall_dup+0x24>
  13b1d4:	ebffff9c 	bl	13b04c <syscall_debug>
  13b1d8:	e1a01004 	mov	r1, r4
  13b1dc:	e8bd4010 	pop	{r4, lr}
  13b1e0:	e3a00085 	mov	r0, #133	; 0x85
  13b1e4:	ea000499 	b	13c450 <syscall>
  13b1e8:	0014add4 	.word	0x0014add4

0013b1ec <syscall_rmdir>:
  13b1ec:	e92d4010 	push	{r4, lr}
  13b1f0:	e1a04000 	mov	r4, r0
  13b1f4:	e3a0100e 	mov	r1, #14
  13b1f8:	e59f0010 	ldr	r0, [pc, #16]	; 13b210 <syscall_rmdir+0x24>
  13b1fc:	ebffff92 	bl	13b04c <syscall_debug>
  13b200:	e1a01004 	mov	r1, r4
  13b204:	e8bd4010 	pop	{r4, lr}
  13b208:	e3a00078 	mov	r0, #120	; 0x78
  13b20c:	ea00048f 	b	13c450 <syscall>
  13b210:	0014adc4 	.word	0x0014adc4

0013b214 <syscall_chdir>:
  13b214:	e92d4010 	push	{r4, lr}
  13b218:	e1a04000 	mov	r4, r0
  13b21c:	e3a0100e 	mov	r1, #14
  13b220:	e59f0010 	ldr	r0, [pc, #16]	; 13b238 <syscall_chdir+0x24>
  13b224:	ebffff88 	bl	13b04c <syscall_debug>
  13b228:	e1a01004 	mov	r1, r4
  13b22c:	e8bd4010 	pop	{r4, lr}
  13b230:	e3a00075 	mov	r0, #117	; 0x75
  13b234:	ea000485 	b	13c450 <syscall>
  13b238:	0014acb4 	.word	0x0014acb4

0013b23c <syscall_unlink>:
  13b23c:	e92d4010 	push	{r4, lr}
  13b240:	e1a04000 	mov	r4, r0
  13b244:	e3a0100f 	mov	r1, #15
  13b248:	e59f0010 	ldr	r0, [pc, #16]	; 13b260 <syscall_unlink+0x24>
  13b24c:	ebffff7e 	bl	13b04c <syscall_debug>
  13b250:	e1a01004 	mov	r1, r4
  13b254:	e8bd4010 	pop	{r4, lr}
  13b258:	e3a00076 	mov	r0, #118	; 0x76
  13b25c:	ea00047b 	b	13c450 <syscall>
  13b260:	0014ac94 	.word	0x0014ac94

0013b264 <syscall_close>:
  13b264:	e92d4010 	push	{r4, lr}
  13b268:	e1a04000 	mov	r4, r0
  13b26c:	e3a0100e 	mov	r1, #14
  13b270:	e59f0010 	ldr	r0, [pc, #16]	; 13b288 <syscall_close+0x24>
  13b274:	ebffff74 	bl	13b04c <syscall_debug>
  13b278:	e1a01004 	mov	r1, r4
  13b27c:	e8bd4010 	pop	{r4, lr}
  13b280:	e3a00006 	mov	r0, #6
  13b284:	ea000471 	b	13c450 <syscall>
  13b288:	0014ac64 	.word	0x0014ac64

0013b28c <syscall_exit>:
  13b28c:	e92d4010 	push	{r4, lr}
  13b290:	e1a04000 	mov	r4, r0
  13b294:	e3a0100d 	mov	r1, #13
  13b298:	e59f0010 	ldr	r0, [pc, #16]	; 13b2b0 <syscall_exit+0x24>
  13b29c:	ebffff6a 	bl	13b04c <syscall_debug>
  13b2a0:	e1a01004 	mov	r1, r4
  13b2a4:	e8bd4010 	pop	{r4, lr}
  13b2a8:	e3a00001 	mov	r0, #1
  13b2ac:	ea000467 	b	13c450 <syscall>
  13b2b0:	0014ac14 	.word	0x0014ac14

0013b2b4 <syscall_listen>:
  13b2b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b2b8:	e1a04000 	mov	r4, r0
  13b2bc:	e1a05001 	mov	r5, r1
  13b2c0:	e59f0018 	ldr	r0, [pc, #24]	; 13b2e0 <syscall_listen+0x2c>
  13b2c4:	e3a0100f 	mov	r1, #15
  13b2c8:	ebffff5f 	bl	13b04c <syscall_debug>
  13b2cc:	e1a02005 	mov	r2, r5
  13b2d0:	e1a01004 	mov	r1, r4
  13b2d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2d8:	e3a0004d 	mov	r0, #77	; 0x4d
  13b2dc:	ea00045b 	b	13c450 <syscall>
  13b2e0:	0014bdd8 	.word	0x0014bdd8

0013b2e4 <syscall_clock_getres>:
  13b2e4:	e92d4070 	push	{r4, r5, r6, lr}
  13b2e8:	e1a04000 	mov	r4, r0
  13b2ec:	e1a05001 	mov	r5, r1
  13b2f0:	e59f0018 	ldr	r0, [pc, #24]	; 13b310 <syscall_clock_getres+0x2c>
  13b2f4:	e3a01015 	mov	r1, #21
  13b2f8:	ebffff53 	bl	13b04c <syscall_debug>
  13b2fc:	e1a02005 	mov	r2, r5
  13b300:	e1a01004 	mov	r1, r4
  13b304:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b308:	e3a00081 	mov	r0, #129	; 0x81
  13b30c:	ea00044f 	b	13c450 <syscall>
  13b310:	0014bc38 	.word	0x0014bc38

0013b314 <syscall_clock_gettime>:
  13b314:	e92d4070 	push	{r4, r5, r6, lr}
  13b318:	e1a04000 	mov	r4, r0
  13b31c:	e1a05001 	mov	r5, r1
  13b320:	e59f0018 	ldr	r0, [pc, #24]	; 13b340 <syscall_clock_gettime+0x2c>
  13b324:	e3a01016 	mov	r1, #22
  13b328:	ebffff47 	bl	13b04c <syscall_debug>
  13b32c:	e1a02005 	mov	r2, r5
  13b330:	e1a01004 	mov	r1, r4
  13b334:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b338:	e3a00080 	mov	r0, #128	; 0x80
  13b33c:	ea000443 	b	13c450 <syscall>
  13b340:	0014bc20 	.word	0x0014bc20

0013b344 <syscall_clock_settime>:
  13b344:	e92d4070 	push	{r4, r5, r6, lr}
  13b348:	e1a04000 	mov	r4, r0
  13b34c:	e1a05001 	mov	r5, r1
  13b350:	e59f0018 	ldr	r0, [pc, #24]	; 13b370 <syscall_clock_settime+0x2c>
  13b354:	e3a01016 	mov	r1, #22
  13b358:	ebffff3b 	bl	13b04c <syscall_debug>
  13b35c:	e1a02005 	mov	r2, r5
  13b360:	e1a01004 	mov	r1, r4
  13b364:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b368:	e3a0007f 	mov	r0, #127	; 0x7f
  13b36c:	ea000437 	b	13c450 <syscall>
  13b370:	0014bc08 	.word	0x0014bc08

0013b374 <syscall_tkill>:
  13b374:	e92d4070 	push	{r4, r5, r6, lr}
  13b378:	e1a04000 	mov	r4, r0
  13b37c:	e1a05001 	mov	r5, r1
  13b380:	e59f0018 	ldr	r0, [pc, #24]	; 13b3a0 <syscall_tkill+0x2c>
  13b384:	e3a0100e 	mov	r1, #14
  13b388:	ebffff2f 	bl	13b04c <syscall_debug>
  13b38c:	e1a02005 	mov	r2, r5
  13b390:	e1a01004 	mov	r1, r4
  13b394:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b398:	e3a00069 	mov	r0, #105	; 0x69
  13b39c:	ea00042b 	b	13c450 <syscall>
  13b3a0:	0014ba18 	.word	0x0014ba18

0013b3a4 <syscall_fstat64>:
  13b3a4:	e92d4070 	push	{r4, r5, r6, lr}
  13b3a8:	e1a04000 	mov	r4, r0
  13b3ac:	e1a05001 	mov	r5, r1
  13b3b0:	e59f0018 	ldr	r0, [pc, #24]	; 13b3d0 <syscall_fstat64+0x2c>
  13b3b4:	e3a01010 	mov	r1, #16
  13b3b8:	ebffff23 	bl	13b04c <syscall_debug>
  13b3bc:	e1a02005 	mov	r2, r5
  13b3c0:	e1a01004 	mov	r1, r4
  13b3c4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3c8:	e3a00008 	mov	r0, #8
  13b3cc:	ea00041f 	b	13c450 <syscall>
  13b3d0:	0014b71c 	.word	0x0014b71c

0013b3d4 <syscall_lstat64>:
  13b3d4:	e92d4070 	push	{r4, r5, r6, lr}
  13b3d8:	e1a04000 	mov	r4, r0
  13b3dc:	e1a05001 	mov	r5, r1
  13b3e0:	e59f0018 	ldr	r0, [pc, #24]	; 13b400 <syscall_lstat64+0x2c>
  13b3e4:	e3a01010 	mov	r1, #16
  13b3e8:	ebffff17 	bl	13b04c <syscall_debug>
  13b3ec:	e1a02005 	mov	r2, r5
  13b3f0:	e1a01004 	mov	r1, r4
  13b3f4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3f8:	e3a00043 	mov	r0, #67	; 0x43
  13b3fc:	ea000413 	b	13c450 <syscall>
  13b400:	0014b70c 	.word	0x0014b70c

0013b404 <syscall_stat64>:
  13b404:	e92d4070 	push	{r4, r5, r6, lr}
  13b408:	e1a04000 	mov	r4, r0
  13b40c:	e1a05001 	mov	r5, r1
  13b410:	e59f0018 	ldr	r0, [pc, #24]	; 13b430 <syscall_stat64+0x2c>
  13b414:	e3a0100f 	mov	r1, #15
  13b418:	ebffff0b 	bl	13b04c <syscall_debug>
  13b41c:	e1a02005 	mov	r2, r5
  13b420:	e1a01004 	mov	r1, r4
  13b424:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b428:	e3a00043 	mov	r0, #67	; 0x43
  13b42c:	ea000407 	b	13c450 <syscall>
  13b430:	0014b6fc 	.word	0x0014b6fc

0013b434 <syscall_ugetrlimit>:
  13b434:	e92d4070 	push	{r4, r5, r6, lr}
  13b438:	e1a04000 	mov	r4, r0
  13b43c:	e1a05001 	mov	r5, r1
  13b440:	e59f0018 	ldr	r0, [pc, #24]	; 13b460 <syscall_ugetrlimit+0x2c>
  13b444:	e3a01013 	mov	r1, #19
  13b448:	ebfffeff 	bl	13b04c <syscall_debug>
  13b44c:	e1a02005 	mov	r2, r5
  13b450:	e1a01004 	mov	r1, r4
  13b454:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b458:	e3a0008d 	mov	r0, #141	; 0x8d
  13b45c:	ea0003fb 	b	13c450 <syscall>
  13b460:	0014b6b0 	.word	0x0014b6b0

0013b464 <syscall_getcwd>:
  13b464:	e92d4070 	push	{r4, r5, r6, lr}
  13b468:	e1a04000 	mov	r4, r0
  13b46c:	e1a05001 	mov	r5, r1
  13b470:	e59f0018 	ldr	r0, [pc, #24]	; 13b490 <syscall_getcwd+0x2c>
  13b474:	e3a0100f 	mov	r1, #15
  13b478:	ebfffef3 	bl	13b04c <syscall_debug>
  13b47c:	e1a02005 	mov	r2, r5
  13b480:	e1a01004 	mov	r1, r4
  13b484:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b488:	e3a00074 	mov	r0, #116	; 0x74
  13b48c:	ea0003ef 	b	13c450 <syscall>
  13b490:	0014b648 	.word	0x0014b648

0013b494 <syscall_nanosleep>:
  13b494:	e92d4070 	push	{r4, r5, r6, lr}
  13b498:	e1a04000 	mov	r4, r0
  13b49c:	e1a05001 	mov	r5, r1
  13b4a0:	e59f0018 	ldr	r0, [pc, #24]	; 13b4c0 <syscall_nanosleep+0x2c>
  13b4a4:	e3a01012 	mov	r1, #18
  13b4a8:	ebfffee7 	bl	13b04c <syscall_debug>
  13b4ac:	e1a02005 	mov	r2, r5
  13b4b0:	e1a01004 	mov	r1, r4
  13b4b4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4b8:	e3a0000a 	mov	r0, #10
  13b4bc:	ea0003e3 	b	13c450 <syscall>
  13b4c0:	0014b4c4 	.word	0x0014b4c4

0013b4c4 <syscall_sched_getparam>:
  13b4c4:	e92d4070 	push	{r4, r5, r6, lr}
  13b4c8:	e1a04000 	mov	r4, r0
  13b4cc:	e1a05001 	mov	r5, r1
  13b4d0:	e59f0018 	ldr	r0, [pc, #24]	; 13b4f0 <syscall_sched_getparam+0x2c>
  13b4d4:	e3a01017 	mov	r1, #23
  13b4d8:	ebfffedb 	bl	13b04c <syscall_debug>
  13b4dc:	e1a02005 	mov	r2, r5
  13b4e0:	e1a01004 	mov	r1, r4
  13b4e4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4e8:	e3a00095 	mov	r0, #149	; 0x95
  13b4ec:	ea0003d7 	b	13c450 <syscall>
  13b4f0:	0014b400 	.word	0x0014b400

0013b4f4 <syscall_sched_setparam>:
  13b4f4:	e92d4070 	push	{r4, r5, r6, lr}
  13b4f8:	e1a04000 	mov	r4, r0
  13b4fc:	e1a05001 	mov	r5, r1
  13b500:	e59f0018 	ldr	r0, [pc, #24]	; 13b520 <syscall_sched_setparam+0x2c>
  13b504:	e3a01017 	mov	r1, #23
  13b508:	ebfffecf 	bl	13b04c <syscall_debug>
  13b50c:	e1a02005 	mov	r2, r5
  13b510:	e1a01004 	mov	r1, r4
  13b514:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b518:	e3a00094 	mov	r0, #148	; 0x94
  13b51c:	ea0003cb 	b	13c450 <syscall>
  13b520:	0014b3e8 	.word	0x0014b3e8

0013b524 <syscall_lstat>:
  13b524:	e92d4070 	push	{r4, r5, r6, lr}
  13b528:	e1a04000 	mov	r4, r0
  13b52c:	e1a05001 	mov	r5, r1
  13b530:	e59f0018 	ldr	r0, [pc, #24]	; 13b550 <syscall_lstat+0x2c>
  13b534:	e3a0100e 	mov	r1, #14
  13b538:	ebfffec3 	bl	13b04c <syscall_debug>
  13b53c:	e1a02005 	mov	r2, r5
  13b540:	e1a01004 	mov	r1, r4
  13b544:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b548:	e3a00043 	mov	r0, #67	; 0x43
  13b54c:	ea0003bf 	b	13c450 <syscall>
  13b550:	0014b140 	.word	0x0014b140

0013b554 <syscall_stat>:
  13b554:	e92d4070 	push	{r4, r5, r6, lr}
  13b558:	e1a04000 	mov	r4, r0
  13b55c:	e1a05001 	mov	r5, r1
  13b560:	e59f0018 	ldr	r0, [pc, #24]	; 13b580 <syscall_stat+0x2c>
  13b564:	e3a0100d 	mov	r1, #13
  13b568:	ebfffeb7 	bl	13b04c <syscall_debug>
  13b56c:	e1a02005 	mov	r2, r5
  13b570:	e1a01004 	mov	r1, r4
  13b574:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b578:	e3a00043 	mov	r0, #67	; 0x43
  13b57c:	ea0003b3 	b	13c450 <syscall>
  13b580:	0014b130 	.word	0x0014b130

0013b584 <syscall_munmap>:
  13b584:	e92d4070 	push	{r4, r5, r6, lr}
  13b588:	e1a04000 	mov	r4, r0
  13b58c:	e1a05001 	mov	r5, r1
  13b590:	e59f0018 	ldr	r0, [pc, #24]	; 13b5b0 <syscall_munmap+0x2c>
  13b594:	e3a0100f 	mov	r1, #15
  13b598:	ebfffeab 	bl	13b04c <syscall_debug>
  13b59c:	e1a02005 	mov	r2, r5
  13b5a0:	e1a01004 	mov	r1, r4
  13b5a4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5a8:	e3a00036 	mov	r0, #54	; 0x36
  13b5ac:	ea0003a7 	b	13c450 <syscall>
  13b5b0:	0014b058 	.word	0x0014b058

0013b5b4 <syscall_setrlimit>:
  13b5b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b5b8:	e1a04000 	mov	r4, r0
  13b5bc:	e1a05001 	mov	r5, r1
  13b5c0:	e59f0018 	ldr	r0, [pc, #24]	; 13b5e0 <syscall_setrlimit+0x2c>
  13b5c4:	e3a01012 	mov	r1, #18
  13b5c8:	ebfffe9f 	bl	13b04c <syscall_debug>
  13b5cc:	e1a02005 	mov	r2, r5
  13b5d0:	e1a01004 	mov	r1, r4
  13b5d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5d8:	e3a0008e 	mov	r0, #142	; 0x8e
  13b5dc:	ea00039b 	b	13c450 <syscall>
  13b5e0:	0014af84 	.word	0x0014af84

0013b5e4 <syscall_dup2>:
  13b5e4:	e92d4070 	push	{r4, r5, r6, lr}
  13b5e8:	e1a04000 	mov	r4, r0
  13b5ec:	e1a05001 	mov	r5, r1
  13b5f0:	e59f0018 	ldr	r0, [pc, #24]	; 13b610 <syscall_dup2+0x2c>
  13b5f4:	e3a0100d 	mov	r1, #13
  13b5f8:	ebfffe93 	bl	13b04c <syscall_debug>
  13b5fc:	e1a02005 	mov	r2, r5
  13b600:	e1a01004 	mov	r1, r4
  13b604:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b608:	e3a00086 	mov	r0, #134	; 0x86
  13b60c:	ea00038f 	b	13c450 <syscall>
  13b610:	0014aecc 	.word	0x0014aecc

0013b614 <syscall_mkdir>:
  13b614:	e92d4070 	push	{r4, r5, r6, lr}
  13b618:	e1a04000 	mov	r4, r0
  13b61c:	e1a05001 	mov	r5, r1
  13b620:	e59f0018 	ldr	r0, [pc, #24]	; 13b640 <syscall_mkdir+0x2c>
  13b624:	e3a0100e 	mov	r1, #14
  13b628:	ebfffe87 	bl	13b04c <syscall_debug>
  13b62c:	e1a02005 	mov	r2, r5
  13b630:	e1a01004 	mov	r1, r4
  13b634:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b638:	e3a00077 	mov	r0, #119	; 0x77
  13b63c:	ea000383 	b	13c450 <syscall>
  13b640:	0014adb4 	.word	0x0014adb4

0013b644 <syscall_rename>:
  13b644:	e92d4070 	push	{r4, r5, r6, lr}
  13b648:	e1a04000 	mov	r4, r0
  13b64c:	e1a05001 	mov	r5, r1
  13b650:	e59f0018 	ldr	r0, [pc, #24]	; 13b670 <syscall_rename+0x2c>
  13b654:	e3a0100f 	mov	r1, #15
  13b658:	ebfffe7b 	bl	13b04c <syscall_debug>
  13b65c:	e1a02005 	mov	r2, r5
  13b660:	e1a01004 	mov	r1, r4
  13b664:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b668:	e3a00087 	mov	r0, #135	; 0x87
  13b66c:	ea000377 	b	13c450 <syscall>
  13b670:	0014ada4 	.word	0x0014ada4

0013b674 <syscall_kill>:
  13b674:	e92d4070 	push	{r4, r5, r6, lr}
  13b678:	e1a04000 	mov	r4, r0
  13b67c:	e1a05001 	mov	r5, r1
  13b680:	e59f0018 	ldr	r0, [pc, #24]	; 13b6a0 <syscall_kill+0x2c>
  13b684:	e3a0100d 	mov	r1, #13
  13b688:	ebfffe6f 	bl	13b04c <syscall_debug>
  13b68c:	e1a02005 	mov	r2, r5
  13b690:	e1a01004 	mov	r1, r4
  13b694:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b698:	e3a0000e 	mov	r0, #14
  13b69c:	ea00036b 	b	13c450 <syscall>
  13b6a0:	0014ad94 	.word	0x0014ad94

0013b6a4 <syscall_access>:
  13b6a4:	e92d4070 	push	{r4, r5, r6, lr}
  13b6a8:	e1a04000 	mov	r4, r0
  13b6ac:	e1a05001 	mov	r5, r1
  13b6b0:	e59f0018 	ldr	r0, [pc, #24]	; 13b6d0 <syscall_access+0x2c>
  13b6b4:	e3a0100f 	mov	r1, #15
  13b6b8:	ebfffe63 	bl	13b04c <syscall_debug>
  13b6bc:	e1a02005 	mov	r2, r5
  13b6c0:	e1a01004 	mov	r1, r4
  13b6c4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6c8:	e3a0007d 	mov	r0, #125	; 0x7d
  13b6cc:	ea00035f 	b	13c450 <syscall>
  13b6d0:	0014ad64 	.word	0x0014ad64

0013b6d4 <syscall_getrandom>:
  13b6d4:	e92d4070 	push	{r4, r5, r6, lr}
  13b6d8:	e1a06002 	mov	r6, r2
  13b6dc:	e1a04000 	mov	r4, r0
  13b6e0:	e1a05001 	mov	r5, r1
  13b6e4:	e59f001c 	ldr	r0, [pc, #28]	; 13b708 <syscall_getrandom+0x34>
  13b6e8:	e3a01012 	mov	r1, #18
  13b6ec:	ebfffe56 	bl	13b04c <syscall_debug>
  13b6f0:	e1a03006 	mov	r3, r6
  13b6f4:	e1a02005 	mov	r2, r5
  13b6f8:	e1a01004 	mov	r1, r4
  13b6fc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b700:	e3a00090 	mov	r0, #144	; 0x90
  13b704:	ea000351 	b	13c450 <syscall>
  13b708:	0014c584 	.word	0x0014c584

0013b70c <syscall_shmctl>:
  13b70c:	e92d4070 	push	{r4, r5, r6, lr}
  13b710:	e1a06002 	mov	r6, r2
  13b714:	e1a04000 	mov	r4, r0
  13b718:	e1a05001 	mov	r5, r1
  13b71c:	e59f001c 	ldr	r0, [pc, #28]	; 13b740 <syscall_shmctl+0x34>
  13b720:	e3a0100f 	mov	r1, #15
  13b724:	ebfffe48 	bl	13b04c <syscall_debug>
  13b728:	e1a03006 	mov	r3, r6
  13b72c:	e1a02005 	mov	r2, r5
  13b730:	e1a01004 	mov	r1, r4
  13b734:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b738:	e3a00f4d 	mov	r0, #308	; 0x134
  13b73c:	ea000343 	b	13c450 <syscall>
  13b740:	0014bf74 	.word	0x0014bf74

0013b744 <syscall_shmget>:
  13b744:	e92d4070 	push	{r4, r5, r6, lr}
  13b748:	e1a06002 	mov	r6, r2
  13b74c:	e1a04000 	mov	r4, r0
  13b750:	e1a05001 	mov	r5, r1
  13b754:	e59f001c 	ldr	r0, [pc, #28]	; 13b778 <syscall_shmget+0x34>
  13b758:	e3a0100f 	mov	r1, #15
  13b75c:	ebfffe3a 	bl	13b04c <syscall_debug>
  13b760:	e1a03006 	mov	r3, r6
  13b764:	e1a02005 	mov	r2, r5
  13b768:	e1a01004 	mov	r1, r4
  13b76c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b770:	e59f0004 	ldr	r0, [pc, #4]	; 13b77c <syscall_shmget+0x38>
  13b774:	ea000335 	b	13c450 <syscall>
  13b778:	0014bf64 	.word	0x0014bf64
  13b77c:	00000133 	.word	0x00000133

0013b780 <syscall_shmat>:
  13b780:	e92d4070 	push	{r4, r5, r6, lr}
  13b784:	e1a06002 	mov	r6, r2
  13b788:	e1a04000 	mov	r4, r0
  13b78c:	e1a05001 	mov	r5, r1
  13b790:	e59f001c 	ldr	r0, [pc, #28]	; 13b7b4 <syscall_shmat+0x34>
  13b794:	e3a0100e 	mov	r1, #14
  13b798:	ebfffe2b 	bl	13b04c <syscall_debug>
  13b79c:	e1a03006 	mov	r3, r6
  13b7a0:	e1a02005 	mov	r2, r5
  13b7a4:	e1a01004 	mov	r1, r4
  13b7a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7ac:	e59f0004 	ldr	r0, [pc, #4]	; 13b7b8 <syscall_shmat+0x38>
  13b7b0:	ea000326 	b	13c450 <syscall>
  13b7b4:	0014bf44 	.word	0x0014bf44
  13b7b8:	00000131 	.word	0x00000131

0013b7bc <syscall_getpeername>:
  13b7bc:	e92d4070 	push	{r4, r5, r6, lr}
  13b7c0:	e1a06002 	mov	r6, r2
  13b7c4:	e1a04000 	mov	r4, r0
  13b7c8:	e1a05001 	mov	r5, r1
  13b7cc:	e59f001c 	ldr	r0, [pc, #28]	; 13b7f0 <syscall_getpeername+0x34>
  13b7d0:	e3a01014 	mov	r1, #20
  13b7d4:	ebfffe1c 	bl	13b04c <syscall_debug>
  13b7d8:	e1a03006 	mov	r3, r6
  13b7dc:	e1a02005 	mov	r2, r5
  13b7e0:	e1a01004 	mov	r1, r4
  13b7e4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7e8:	e3a00048 	mov	r0, #72	; 0x48
  13b7ec:	ea000317 	b	13c450 <syscall>
  13b7f0:	0014be0c 	.word	0x0014be0c

0013b7f4 <syscall_getsockname>:
  13b7f4:	e92d4070 	push	{r4, r5, r6, lr}
  13b7f8:	e1a06002 	mov	r6, r2
  13b7fc:	e1a04000 	mov	r4, r0
  13b800:	e1a05001 	mov	r5, r1
  13b804:	e59f001c 	ldr	r0, [pc, #28]	; 13b828 <syscall_getsockname+0x34>
  13b808:	e3a01014 	mov	r1, #20
  13b80c:	ebfffe0e 	bl	13b04c <syscall_debug>
  13b810:	e1a03006 	mov	r3, r6
  13b814:	e1a02005 	mov	r2, r5
  13b818:	e1a01004 	mov	r1, r4
  13b81c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b820:	e3a00049 	mov	r0, #73	; 0x49
  13b824:	ea000309 	b	13c450 <syscall>
  13b828:	0014bdf8 	.word	0x0014bdf8

0013b82c <syscall_accept>:
  13b82c:	e92d4070 	push	{r4, r5, r6, lr}
  13b830:	e1a06002 	mov	r6, r2
  13b834:	e1a04000 	mov	r4, r0
  13b838:	e1a05001 	mov	r5, r1
  13b83c:	e59f001c 	ldr	r0, [pc, #28]	; 13b860 <syscall_accept+0x34>
  13b840:	e3a0100f 	mov	r1, #15
  13b844:	ebfffe00 	bl	13b04c <syscall_debug>
  13b848:	e1a03006 	mov	r3, r6
  13b84c:	e1a02005 	mov	r2, r5
  13b850:	e1a01004 	mov	r1, r4
  13b854:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b858:	e3a00045 	mov	r0, #69	; 0x45
  13b85c:	ea0002fb 	b	13c450 <syscall>
  13b860:	0014bde8 	.word	0x0014bde8

0013b864 <syscall_connect>:
  13b864:	e92d4070 	push	{r4, r5, r6, lr}
  13b868:	e1a06002 	mov	r6, r2
  13b86c:	e1a04000 	mov	r4, r0
  13b870:	e1a05001 	mov	r5, r1
  13b874:	e59f001c 	ldr	r0, [pc, #28]	; 13b898 <syscall_connect+0x34>
  13b878:	e3a01010 	mov	r1, #16
  13b87c:	ebfffdf2 	bl	13b04c <syscall_debug>
  13b880:	e1a03006 	mov	r3, r6
  13b884:	e1a02005 	mov	r2, r5
  13b888:	e1a01004 	mov	r1, r4
  13b88c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b890:	e3a0004c 	mov	r0, #76	; 0x4c
  13b894:	ea0002ed 	b	13c450 <syscall>
  13b898:	0014bdc8 	.word	0x0014bdc8

0013b89c <syscall_bind>:
  13b89c:	e92d4070 	push	{r4, r5, r6, lr}
  13b8a0:	e1a06002 	mov	r6, r2
  13b8a4:	e1a04000 	mov	r4, r0
  13b8a8:	e1a05001 	mov	r5, r1
  13b8ac:	e59f001c 	ldr	r0, [pc, #28]	; 13b8d0 <syscall_bind+0x34>
  13b8b0:	e3a0100d 	mov	r1, #13
  13b8b4:	ebfffde4 	bl	13b04c <syscall_debug>
  13b8b8:	e1a03006 	mov	r3, r6
  13b8bc:	e1a02005 	mov	r2, r5
  13b8c0:	e1a01004 	mov	r1, r4
  13b8c4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8c8:	e3a00046 	mov	r0, #70	; 0x46
  13b8cc:	ea0002df 	b	13c450 <syscall>
  13b8d0:	0014bdb8 	.word	0x0014bdb8

0013b8d4 <syscall_socket>:
  13b8d4:	e92d4070 	push	{r4, r5, r6, lr}
  13b8d8:	e1a06002 	mov	r6, r2
  13b8dc:	e1a04000 	mov	r4, r0
  13b8e0:	e1a05001 	mov	r5, r1
  13b8e4:	e59f001c 	ldr	r0, [pc, #28]	; 13b908 <syscall_socket+0x34>
  13b8e8:	e3a0100f 	mov	r1, #15
  13b8ec:	ebfffdd6 	bl	13b04c <syscall_debug>
  13b8f0:	e1a03006 	mov	r3, r6
  13b8f4:	e1a02005 	mov	r2, r5
  13b8f8:	e1a01004 	mov	r1, r4
  13b8fc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b900:	e3a00052 	mov	r0, #82	; 0x52
  13b904:	ea0002d1 	b	13c450 <syscall>
  13b908:	0014bda8 	.word	0x0014bda8

0013b90c <syscall_sched_setaffinity>:
  13b90c:	e92d4070 	push	{r4, r5, r6, lr}
  13b910:	e1a06002 	mov	r6, r2
  13b914:	e1a04000 	mov	r4, r0
  13b918:	e1a05001 	mov	r5, r1
  13b91c:	e59f001c 	ldr	r0, [pc, #28]	; 13b940 <syscall_sched_setaffinity+0x34>
  13b920:	e3a0101a 	mov	r1, #26
  13b924:	ebfffdc8 	bl	13b04c <syscall_debug>
  13b928:	e1a03006 	mov	r3, r6
  13b92c:	e1a02005 	mov	r2, r5
  13b930:	e1a01004 	mov	r1, r4
  13b934:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b938:	e3a0009a 	mov	r0, #154	; 0x9a
  13b93c:	ea0002c3 	b	13c450 <syscall>
  13b940:	0014ba4c 	.word	0x0014ba4c

0013b944 <syscall_fcntl64>:
  13b944:	e92d4070 	push	{r4, r5, r6, lr}
  13b948:	e1a06002 	mov	r6, r2
  13b94c:	e1a04000 	mov	r4, r0
  13b950:	e1a05001 	mov	r5, r1
  13b954:	e59f001c 	ldr	r0, [pc, #28]	; 13b978 <syscall_fcntl64+0x34>
  13b958:	e3a01010 	mov	r1, #16
  13b95c:	ebfffdba 	bl	13b04c <syscall_debug>
  13b960:	e1a03006 	mov	r3, r6
  13b964:	e1a02005 	mov	r2, r5
  13b968:	e1a01004 	mov	r1, r4
  13b96c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b970:	e3a00007 	mov	r0, #7
  13b974:	ea0002b5 	b	13c450 <syscall>
  13b978:	0014b8ec 	.word	0x0014b8ec

0013b97c <syscall_madvise>:
  13b97c:	e92d4070 	push	{r4, r5, r6, lr}
  13b980:	e1a06002 	mov	r6, r2
  13b984:	e1a04000 	mov	r4, r0
  13b988:	e1a05001 	mov	r5, r1
  13b98c:	e59f001c 	ldr	r0, [pc, #28]	; 13b9b0 <syscall_madvise+0x34>
  13b990:	e3a01010 	mov	r1, #16
  13b994:	ebfffdac 	bl	13b04c <syscall_debug>
  13b998:	e1a03006 	mov	r3, r6
  13b99c:	e1a02005 	mov	r2, r5
  13b9a0:	e1a01004 	mov	r1, r4
  13b9a4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9a8:	e3a00093 	mov	r0, #147	; 0x93
  13b9ac:	ea0002a7 	b	13c450 <syscall>
  13b9b0:	0014b8dc 	.word	0x0014b8dc

0013b9b4 <syscall_getdents64>:
  13b9b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b9b8:	e1a06002 	mov	r6, r2
  13b9bc:	e1a04000 	mov	r4, r0
  13b9c0:	e1a05001 	mov	r5, r1
  13b9c4:	e59f001c 	ldr	r0, [pc, #28]	; 13b9e8 <syscall_getdents64+0x34>
  13b9c8:	e3a01013 	mov	r1, #19
  13b9cc:	ebfffd9e 	bl	13b04c <syscall_debug>
  13b9d0:	e1a03006 	mov	r3, r6
  13b9d4:	e1a02005 	mov	r2, r5
  13b9d8:	e1a01004 	mov	r1, r4
  13b9dc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9e0:	e3a00079 	mov	r0, #121	; 0x79
  13b9e4:	ea000299 	b	13c450 <syscall>
  13b9e8:	0014b8a4 	.word	0x0014b8a4

0013b9ec <syscall_poll>:
  13b9ec:	e92d4070 	push	{r4, r5, r6, lr}
  13b9f0:	e1a06002 	mov	r6, r2
  13b9f4:	e1a04000 	mov	r4, r0
  13b9f8:	e1a05001 	mov	r5, r1
  13b9fc:	e59f001c 	ldr	r0, [pc, #28]	; 13ba20 <syscall_poll+0x34>
  13ba00:	e3a0100d 	mov	r1, #13
  13ba04:	ebfffd90 	bl	13b04c <syscall_debug>
  13ba08:	e1a03006 	mov	r3, r6
  13ba0c:	e1a02005 	mov	r2, r5
  13ba10:	e1a01004 	mov	r1, r4
  13ba14:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba18:	e3a00009 	mov	r0, #9
  13ba1c:	ea00028b 	b	13c450 <syscall>
  13ba20:	0014b510 	.word	0x0014b510

0013ba24 <syscall_sched_getscheduler>:
  13ba24:	e92d4070 	push	{r4, r5, r6, lr}
  13ba28:	e1a06002 	mov	r6, r2
  13ba2c:	e1a04000 	mov	r4, r0
  13ba30:	e1a05001 	mov	r5, r1
  13ba34:	e59f001c 	ldr	r0, [pc, #28]	; 13ba58 <syscall_sched_getscheduler+0x34>
  13ba38:	e3a0101b 	mov	r1, #27
  13ba3c:	ebfffd82 	bl	13b04c <syscall_debug>
  13ba40:	e1a03006 	mov	r3, r6
  13ba44:	e1a02005 	mov	r2, r5
  13ba48:	e1a01004 	mov	r1, r4
  13ba4c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba50:	e3a00099 	mov	r0, #153	; 0x99
  13ba54:	ea00027d 	b	13c450 <syscall>
  13ba58:	0014b434 	.word	0x0014b434

0013ba5c <syscall_sched_setscheduler>:
  13ba5c:	e92d4070 	push	{r4, r5, r6, lr}
  13ba60:	e1a06002 	mov	r6, r2
  13ba64:	e1a04000 	mov	r4, r0
  13ba68:	e1a05001 	mov	r5, r1
  13ba6c:	e59f001c 	ldr	r0, [pc, #28]	; 13ba90 <syscall_sched_setscheduler+0x34>
  13ba70:	e3a0101b 	mov	r1, #27
  13ba74:	ebfffd74 	bl	13b04c <syscall_debug>
  13ba78:	e1a03006 	mov	r3, r6
  13ba7c:	e1a02005 	mov	r2, r5
  13ba80:	e1a01004 	mov	r1, r4
  13ba84:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba88:	e3a00098 	mov	r0, #152	; 0x98
  13ba8c:	ea00026f 	b	13c450 <syscall>
  13ba90:	0014b418 	.word	0x0014b418

0013ba94 <syscall_writev>:
  13ba94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13ba98:	e1a06002 	mov	r6, r2
  13ba9c:	e1a08000 	mov	r8, r0
  13baa0:	e1a04001 	mov	r4, r1
  13baa4:	e59f0088 	ldr	r0, [pc, #136]	; 13bb34 <syscall_writev+0xa0>
  13baa8:	e3a0100f 	mov	r1, #15
  13baac:	ebfffd66 	bl	13b04c <syscall_debug>
  13bab0:	e3560000 	cmp	r6, #0
  13bab4:	e3a07000 	mov	r7, #0
  13bab8:	da000013 	ble	13bb0c <syscall_writev+0x78>
  13babc:	e1a05007 	mov	r5, r7
  13bac0:	ea000003 	b	13bad4 <syscall_writev+0x40>
  13bac4:	e2855001 	add	r5, r5, #1
  13bac8:	e1560005 	cmp	r6, r5
  13bacc:	e2844008 	add	r4, r4, #8
  13bad0:	0a00000d 	beq	13bb0c <syscall_writev+0x78>
  13bad4:	e5943004 	ldr	r3, [r4, #4]
  13bad8:	e3530000 	cmp	r3, #0
  13badc:	0afffff8 	beq	13bac4 <syscall_writev+0x30>
  13bae0:	e5942000 	ldr	r2, [r4]
  13bae4:	e1a01008 	mov	r1, r8
  13bae8:	e3a00003 	mov	r0, #3
  13baec:	eb000257 	bl	13c450 <syscall>
  13baf0:	e3500000 	cmp	r0, #0
  13baf4:	da000006 	ble	13bb14 <syscall_writev+0x80>
  13baf8:	e2855001 	add	r5, r5, #1
  13bafc:	e1560005 	cmp	r6, r5
  13bb00:	e0877000 	add	r7, r7, r0
  13bb04:	e2844008 	add	r4, r4, #8
  13bb08:	1afffff1 	bne	13bad4 <syscall_writev+0x40>
  13bb0c:	e1a00007 	mov	r0, r7
  13bb10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb14:	13a03000 	movne	r3, #0
  13bb18:	03a03001 	moveq	r3, #1
  13bb1c:	e3570000 	cmp	r7, #0
  13bb20:	13a03001 	movne	r3, #1
  13bb24:	e3530000 	cmp	r3, #0
  13bb28:	01a07000 	moveq	r7, r0
  13bb2c:	e1a00007 	mov	r0, r7
  13bb30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb34:	0014b35c 	.word	0x0014b35c

0013bb38 <syscall_readv>:
  13bb38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bb3c:	e1a06002 	mov	r6, r2
  13bb40:	e1a08000 	mov	r8, r0
  13bb44:	e1a04001 	mov	r4, r1
  13bb48:	e59f0088 	ldr	r0, [pc, #136]	; 13bbd8 <syscall_readv+0xa0>
  13bb4c:	e3a0100e 	mov	r1, #14
  13bb50:	ebfffd3d 	bl	13b04c <syscall_debug>
  13bb54:	e3560000 	cmp	r6, #0
  13bb58:	e3a07000 	mov	r7, #0
  13bb5c:	da000013 	ble	13bbb0 <syscall_readv+0x78>
  13bb60:	e1a05007 	mov	r5, r7
  13bb64:	ea000003 	b	13bb78 <syscall_readv+0x40>
  13bb68:	e2855001 	add	r5, r5, #1
  13bb6c:	e1560005 	cmp	r6, r5
  13bb70:	e2844008 	add	r4, r4, #8
  13bb74:	0a00000d 	beq	13bbb0 <syscall_readv+0x78>
  13bb78:	e5943004 	ldr	r3, [r4, #4]
  13bb7c:	e3530000 	cmp	r3, #0
  13bb80:	0afffff8 	beq	13bb68 <syscall_readv+0x30>
  13bb84:	e5942000 	ldr	r2, [r4]
  13bb88:	e1a01008 	mov	r1, r8
  13bb8c:	e3a00002 	mov	r0, #2
  13bb90:	eb00022e 	bl	13c450 <syscall>
  13bb94:	e3500000 	cmp	r0, #0
  13bb98:	da000006 	ble	13bbb8 <syscall_readv+0x80>
  13bb9c:	e2855001 	add	r5, r5, #1
  13bba0:	e1560005 	cmp	r6, r5
  13bba4:	e0877000 	add	r7, r7, r0
  13bba8:	e2844008 	add	r4, r4, #8
  13bbac:	1afffff1 	bne	13bb78 <syscall_readv+0x40>
  13bbb0:	e1a00007 	mov	r0, r7
  13bbb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bbb8:	13a03000 	movne	r3, #0
  13bbbc:	03a03001 	moveq	r3, #1
  13bbc0:	e3570000 	cmp	r7, #0
  13bbc4:	13a03001 	movne	r3, #1
  13bbc8:	e3530000 	cmp	r3, #0
  13bbcc:	01a07000 	moveq	r7, r0
  13bbd0:	e1a00007 	mov	r0, r7
  13bbd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bbd8:	0014b34c 	.word	0x0014b34c

0013bbdc <syscall_getdents>:
  13bbdc:	e92d4070 	push	{r4, r5, r6, lr}
  13bbe0:	e1a06002 	mov	r6, r2
  13bbe4:	e1a04000 	mov	r4, r0
  13bbe8:	e1a05001 	mov	r5, r1
  13bbec:	e59f001c 	ldr	r0, [pc, #28]	; 13bc10 <syscall_getdents+0x34>
  13bbf0:	e3a01011 	mov	r1, #17
  13bbf4:	ebfffd14 	bl	13b04c <syscall_debug>
  13bbf8:	e1a03006 	mov	r3, r6
  13bbfc:	e1a02005 	mov	r2, r5
  13bc00:	e1a01004 	mov	r1, r4
  13bc04:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc08:	e3a00079 	mov	r0, #121	; 0x79
  13bc0c:	ea00020f 	b	13c450 <syscall>
  13bc10:	0014b304 	.word	0x0014b304

0013bc14 <syscall_readlink>:
  13bc14:	e92d4070 	push	{r4, r5, r6, lr}
  13bc18:	e1a06002 	mov	r6, r2
  13bc1c:	e1a04000 	mov	r4, r0
  13bc20:	e1a05001 	mov	r5, r1
  13bc24:	e59f001c 	ldr	r0, [pc, #28]	; 13bc48 <syscall_readlink+0x34>
  13bc28:	e3a01011 	mov	r1, #17
  13bc2c:	ebfffd06 	bl	13b04c <syscall_debug>
  13bc30:	e1a03006 	mov	r3, r6
  13bc34:	e1a02005 	mov	r2, r5
  13bc38:	e1a01004 	mov	r1, r4
  13bc3c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc40:	e3a00091 	mov	r0, #145	; 0x91
  13bc44:	ea000201 	b	13c450 <syscall>
  13bc48:	0014b014 	.word	0x0014b014

0013bc4c <syscall_fcntl>:
  13bc4c:	e92d4070 	push	{r4, r5, r6, lr}
  13bc50:	e1a06002 	mov	r6, r2
  13bc54:	e1a04000 	mov	r4, r0
  13bc58:	e1a05001 	mov	r5, r1
  13bc5c:	e59f001c 	ldr	r0, [pc, #28]	; 13bc80 <syscall_fcntl+0x34>
  13bc60:	e3a0100e 	mov	r1, #14
  13bc64:	ebfffcf8 	bl	13b04c <syscall_debug>
  13bc68:	e1a03006 	mov	r3, r6
  13bc6c:	e1a02005 	mov	r2, r5
  13bc70:	e1a01004 	mov	r1, r4
  13bc74:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc78:	e3a00007 	mov	r0, #7
  13bc7c:	ea0001f3 	b	13c450 <syscall>
  13bc80:	0014ae7c 	.word	0x0014ae7c

0013bc84 <syscall_execve>:
  13bc84:	e92d4070 	push	{r4, r5, r6, lr}
  13bc88:	e1a06002 	mov	r6, r2
  13bc8c:	e1a04000 	mov	r4, r0
  13bc90:	e1a05001 	mov	r5, r1
  13bc94:	e59f001c 	ldr	r0, [pc, #28]	; 13bcb8 <syscall_execve+0x34>
  13bc98:	e3a0100f 	mov	r1, #15
  13bc9c:	ebfffcea 	bl	13b04c <syscall_debug>
  13bca0:	e1a03006 	mov	r3, r6
  13bca4:	e1a02005 	mov	r2, r5
  13bca8:	e1a01004 	mov	r1, r4
  13bcac:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bcb0:	e3a00089 	mov	r0, #137	; 0x89
  13bcb4:	ea0001e5 	b	13c450 <syscall>
  13bcb8:	0014aca4 	.word	0x0014aca4

0013bcbc <syscall_open>:
  13bcbc:	e92d4070 	push	{r4, r5, r6, lr}
  13bcc0:	e1a06002 	mov	r6, r2
  13bcc4:	e1a04000 	mov	r4, r0
  13bcc8:	e1a05001 	mov	r5, r1
  13bccc:	e59f001c 	ldr	r0, [pc, #28]	; 13bcf0 <syscall_open+0x34>
  13bcd0:	e3a0100d 	mov	r1, #13
  13bcd4:	ebfffcdc 	bl	13b04c <syscall_debug>
  13bcd8:	e1a03006 	mov	r3, r6
  13bcdc:	e1a02005 	mov	r2, r5
  13bce0:	e1a01004 	mov	r1, r4
  13bce4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bce8:	e3a00005 	mov	r0, #5
  13bcec:	ea0001d7 	b	13c450 <syscall>
  13bcf0:	0014ac54 	.word	0x0014ac54

0013bcf4 <syscall_write>:
  13bcf4:	e92d4070 	push	{r4, r5, r6, lr}
  13bcf8:	e1a06002 	mov	r6, r2
  13bcfc:	e1a04000 	mov	r4, r0
  13bd00:	e1a05001 	mov	r5, r1
  13bd04:	e59f001c 	ldr	r0, [pc, #28]	; 13bd28 <syscall_write+0x34>
  13bd08:	e3a0100e 	mov	r1, #14
  13bd0c:	ebfffcce 	bl	13b04c <syscall_debug>
  13bd10:	e1a03006 	mov	r3, r6
  13bd14:	e1a02005 	mov	r2, r5
  13bd18:	e1a01004 	mov	r1, r4
  13bd1c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bd20:	e3a00003 	mov	r0, #3
  13bd24:	ea0001c9 	b	13c450 <syscall>
  13bd28:	0014ac44 	.word	0x0014ac44

0013bd2c <syscall_read>:
  13bd2c:	e92d4070 	push	{r4, r5, r6, lr}
  13bd30:	e1a06002 	mov	r6, r2
  13bd34:	e1a04000 	mov	r4, r0
  13bd38:	e1a05001 	mov	r5, r1
  13bd3c:	e59f001c 	ldr	r0, [pc, #28]	; 13bd60 <syscall_read+0x34>
  13bd40:	e3a0100d 	mov	r1, #13
  13bd44:	ebfffcc0 	bl	13b04c <syscall_debug>
  13bd48:	e1a03006 	mov	r3, r6
  13bd4c:	e1a02005 	mov	r2, r5
  13bd50:	e1a01004 	mov	r1, r4
  13bd54:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bd58:	e3a00002 	mov	r0, #2
  13bd5c:	ea0001bb 	b	13c450 <syscall>
  13bd60:	0014ac34 	.word	0x0014ac34

0013bd64 <syscall_prlimit64>:
  13bd64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bd68:	e1a06002 	mov	r6, r2
  13bd6c:	e1a07003 	mov	r7, r3
  13bd70:	e1a04000 	mov	r4, r0
  13bd74:	e1a05001 	mov	r5, r1
  13bd78:	e24dd00c 	sub	sp, sp, #12
  13bd7c:	e3a01012 	mov	r1, #18
  13bd80:	e59f0020 	ldr	r0, [pc, #32]	; 13bda8 <syscall_prlimit64+0x44>
  13bd84:	ebfffcb0 	bl	13b04c <syscall_debug>
  13bd88:	e58d7000 	str	r7, [sp]
  13bd8c:	e1a03006 	mov	r3, r6
  13bd90:	e1a02005 	mov	r2, r5
  13bd94:	e1a01004 	mov	r1, r4
  13bd98:	e3a0008c 	mov	r0, #140	; 0x8c
  13bd9c:	eb0001ab 	bl	13c450 <syscall>
  13bda0:	e28dd00c 	add	sp, sp, #12
  13bda4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bda8:	0014c438 	.word	0x0014c438

0013bdac <syscall_recv>:
  13bdac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bdb0:	e1a06002 	mov	r6, r2
  13bdb4:	e1a07003 	mov	r7, r3
  13bdb8:	e1a04000 	mov	r4, r0
  13bdbc:	e1a05001 	mov	r5, r1
  13bdc0:	e24dd00c 	sub	sp, sp, #12
  13bdc4:	e3a0100d 	mov	r1, #13
  13bdc8:	e59f0020 	ldr	r0, [pc, #32]	; 13bdf0 <syscall_recv+0x44>
  13bdcc:	ebfffc9e 	bl	13b04c <syscall_debug>
  13bdd0:	e58d7000 	str	r7, [sp]
  13bdd4:	e1a03006 	mov	r3, r6
  13bdd8:	e1a02005 	mov	r2, r5
  13bddc:	e1a01004 	mov	r1, r4
  13bde0:	e3a0004e 	mov	r0, #78	; 0x4e
  13bde4:	eb000199 	bl	13c450 <syscall>
  13bde8:	e28dd00c 	add	sp, sp, #12
  13bdec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bdf0:	0014be54 	.word	0x0014be54

0013bdf4 <syscall_send>:
  13bdf4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bdf8:	e1a06002 	mov	r6, r2
  13bdfc:	e1a07003 	mov	r7, r3
  13be00:	e1a04000 	mov	r4, r0
  13be04:	e1a05001 	mov	r5, r1
  13be08:	e24dd00c 	sub	sp, sp, #12
  13be0c:	e3a0100d 	mov	r1, #13
  13be10:	e59f0020 	ldr	r0, [pc, #32]	; 13be38 <syscall_send+0x44>
  13be14:	ebfffc8c 	bl	13b04c <syscall_debug>
  13be18:	e58d7000 	str	r7, [sp]
  13be1c:	e1a03006 	mov	r3, r6
  13be20:	e1a02005 	mov	r2, r5
  13be24:	e1a01004 	mov	r1, r4
  13be28:	e3a00050 	mov	r0, #80	; 0x50
  13be2c:	eb000187 	bl	13c450 <syscall>
  13be30:	e28dd00c 	add	sp, sp, #12
  13be34:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be38:	0014be34 	.word	0x0014be34

0013be3c <syscall_rt_sigprocmask>:
  13be3c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be40:	e1a06002 	mov	r6, r2
  13be44:	e1a07003 	mov	r7, r3
  13be48:	e1a04000 	mov	r4, r0
  13be4c:	e1a05001 	mov	r5, r1
  13be50:	e24dd00c 	sub	sp, sp, #12
  13be54:	e3a01017 	mov	r1, #23
  13be58:	e59f0020 	ldr	r0, [pc, #32]	; 13be80 <syscall_rt_sigprocmask+0x44>
  13be5c:	ebfffc7a 	bl	13b04c <syscall_debug>
  13be60:	e58d7000 	str	r7, [sp]
  13be64:	e1a03006 	mov	r3, r6
  13be68:	e1a02005 	mov	r2, r5
  13be6c:	e1a01004 	mov	r1, r4
  13be70:	e3a00068 	mov	r0, #104	; 0x68
  13be74:	eb000175 	bl	13c450 <syscall>
  13be78:	e28dd00c 	add	sp, sp, #12
  13be7c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be80:	0014b59c 	.word	0x0014b59c

0013be84 <syscall_rt_sigaction>:
  13be84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be88:	e1a06002 	mov	r6, r2
  13be8c:	e1a07003 	mov	r7, r3
  13be90:	e1a04000 	mov	r4, r0
  13be94:	e1a05001 	mov	r5, r1
  13be98:	e24dd00c 	sub	sp, sp, #12
  13be9c:	e3a01015 	mov	r1, #21
  13bea0:	e59f0020 	ldr	r0, [pc, #32]	; 13bec8 <syscall_rt_sigaction+0x44>
  13bea4:	ebfffc68 	bl	13b04c <syscall_debug>
  13bea8:	e58d7000 	str	r7, [sp]
  13beac:	e1a03006 	mov	r3, r6
  13beb0:	e1a02005 	mov	r2, r5
  13beb4:	e1a01004 	mov	r1, r4
  13beb8:	e3a00067 	mov	r0, #103	; 0x67
  13bebc:	eb000163 	bl	13c450 <syscall>
  13bec0:	e28dd00c 	add	sp, sp, #12
  13bec4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bec8:	0014b584 	.word	0x0014b584

0013becc <syscall_sigprocmask>:
  13becc:	e92d4070 	push	{r4, r5, r6, lr}
  13bed0:	e1a04000 	mov	r4, r0
  13bed4:	e24dd008 	sub	sp, sp, #8
  13bed8:	e1a05001 	mov	r5, r1
  13bedc:	e59f002c 	ldr	r0, [pc, #44]	; 13bf10 <syscall_sigprocmask+0x44>
  13bee0:	e3a01014 	mov	r1, #20
  13bee4:	e1a06002 	mov	r6, r2
  13bee8:	ebfffc57 	bl	13b04c <syscall_debug>
  13beec:	e3a00080 	mov	r0, #128	; 0x80
  13bef0:	e1a03006 	mov	r3, r6
  13bef4:	e58d0000 	str	r0, [sp]
  13bef8:	e1a02005 	mov	r2, r5
  13befc:	e1a01004 	mov	r1, r4
  13bf00:	e3a00068 	mov	r0, #104	; 0x68
  13bf04:	eb000151 	bl	13c450 <syscall>
  13bf08:	e28dd008 	add	sp, sp, #8
  13bf0c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf10:	0014b224 	.word	0x0014b224

0013bf14 <syscall_sigaction>:
  13bf14:	e92d4070 	push	{r4, r5, r6, lr}
  13bf18:	e1a04000 	mov	r4, r0
  13bf1c:	e24dd008 	sub	sp, sp, #8
  13bf20:	e1a05001 	mov	r5, r1
  13bf24:	e59f002c 	ldr	r0, [pc, #44]	; 13bf58 <syscall_sigaction+0x44>
  13bf28:	e3a01012 	mov	r1, #18
  13bf2c:	e1a06002 	mov	r6, r2
  13bf30:	ebfffc45 	bl	13b04c <syscall_debug>
  13bf34:	e3a00080 	mov	r0, #128	; 0x80
  13bf38:	e1a03006 	mov	r3, r6
  13bf3c:	e58d0000 	str	r0, [sp]
  13bf40:	e1a02005 	mov	r2, r5
  13bf44:	e1a01004 	mov	r1, r4
  13bf48:	e3a00067 	mov	r0, #103	; 0x67
  13bf4c:	eb00013f 	bl	13c450 <syscall>
  13bf50:	e28dd008 	add	sp, sp, #8
  13bf54:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf58:	0014af0c 	.word	0x0014af0c

0013bf5c <syscall_getsockopt>:
  13bf5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bf60:	e1a06002 	mov	r6, r2
  13bf64:	e1a08003 	mov	r8, r3
  13bf68:	e1a04000 	mov	r4, r0
  13bf6c:	e1a05001 	mov	r5, r1
  13bf70:	e24dd008 	sub	sp, sp, #8
  13bf74:	e59d7020 	ldr	r7, [sp, #32]
  13bf78:	e3a01013 	mov	r1, #19
  13bf7c:	e59f0024 	ldr	r0, [pc, #36]	; 13bfa8 <syscall_getsockopt+0x4c>
  13bf80:	ebfffc31 	bl	13b04c <syscall_debug>
  13bf84:	e58d8000 	str	r8, [sp]
  13bf88:	e58d7004 	str	r7, [sp, #4]
  13bf8c:	e1a03006 	mov	r3, r6
  13bf90:	e1a02005 	mov	r2, r5
  13bf94:	e1a01004 	mov	r1, r4
  13bf98:	e3a0004a 	mov	r0, #74	; 0x4a
  13bf9c:	eb00012b 	bl	13c450 <syscall>
  13bfa0:	e28dd008 	add	sp, sp, #8
  13bfa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bfa8:	0014bea0 	.word	0x0014bea0

0013bfac <syscall_setsockopt>:
  13bfac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bfb0:	e1a06002 	mov	r6, r2
  13bfb4:	e1a08003 	mov	r8, r3
  13bfb8:	e1a04000 	mov	r4, r0
  13bfbc:	e1a05001 	mov	r5, r1
  13bfc0:	e24dd008 	sub	sp, sp, #8
  13bfc4:	e59d7020 	ldr	r7, [sp, #32]
  13bfc8:	e3a01013 	mov	r1, #19
  13bfcc:	e59f0024 	ldr	r0, [pc, #36]	; 13bff8 <syscall_setsockopt+0x4c>
  13bfd0:	ebfffc1d 	bl	13b04c <syscall_debug>
  13bfd4:	e58d8000 	str	r8, [sp]
  13bfd8:	e58d7004 	str	r7, [sp, #4]
  13bfdc:	e1a03006 	mov	r3, r6
  13bfe0:	e1a02005 	mov	r2, r5
  13bfe4:	e1a01004 	mov	r1, r4
  13bfe8:	e3a0004b 	mov	r0, #75	; 0x4b
  13bfec:	eb000117 	bl	13c450 <syscall>
  13bff0:	e28dd008 	add	sp, sp, #8
  13bff4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bff8:	0014be8c 	.word	0x0014be8c

0013bffc <syscall_mremap>:
  13bffc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c000:	e1a06002 	mov	r6, r2
  13c004:	e1a08003 	mov	r8, r3
  13c008:	e1a04000 	mov	r4, r0
  13c00c:	e1a05001 	mov	r5, r1
  13c010:	e24dd008 	sub	sp, sp, #8
  13c014:	e59d7020 	ldr	r7, [sp, #32]
  13c018:	e3a0100f 	mov	r1, #15
  13c01c:	e59f0024 	ldr	r0, [pc, #36]	; 13c048 <syscall_mremap+0x4c>
  13c020:	ebfffc09 	bl	13b04c <syscall_debug>
  13c024:	e58d8000 	str	r8, [sp]
  13c028:	e58d7004 	str	r7, [sp, #4]
  13c02c:	e1a03006 	mov	r3, r6
  13c030:	e1a02005 	mov	r2, r5
  13c034:	e1a01004 	mov	r1, r4
  13c038:	e3a00092 	mov	r0, #146	; 0x92
  13c03c:	eb000103 	bl	13c450 <syscall>
  13c040:	e28dd008 	add	sp, sp, #8
  13c044:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c048:	0014b4d8 	.word	0x0014b4d8

0013c04c <syscall__newselect>:
  13c04c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c050:	e1a06002 	mov	r6, r2
  13c054:	e1a08003 	mov	r8, r3
  13c058:	e1a04000 	mov	r4, r0
  13c05c:	e1a05001 	mov	r5, r1
  13c060:	e24dd008 	sub	sp, sp, #8
  13c064:	e59d7020 	ldr	r7, [sp, #32]
  13c068:	e3a01013 	mov	r1, #19
  13c06c:	e59f0024 	ldr	r0, [pc, #36]	; 13c098 <syscall__newselect+0x4c>
  13c070:	ebfffbf5 	bl	13b04c <syscall_debug>
  13c074:	e58d8000 	str	r8, [sp]
  13c078:	e58d7004 	str	r7, [sp, #4]
  13c07c:	e1a03006 	mov	r3, r6
  13c080:	e1a02005 	mov	r2, r5
  13c084:	e1a01004 	mov	r1, r4
  13c088:	e3a0005e 	mov	r0, #94	; 0x5e
  13c08c:	eb0000ef 	bl	13c450 <syscall>
  13c090:	e28dd008 	add	sp, sp, #8
  13c094:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c098:	0014b318 	.word	0x0014b318

0013c09c <syscall__llseek>:
  13c09c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c0a0:	e1a06002 	mov	r6, r2
  13c0a4:	e1a05000 	mov	r5, r0
  13c0a8:	e1a08001 	mov	r8, r1
  13c0ac:	e24dd008 	sub	sp, sp, #8
  13c0b0:	e59d7020 	ldr	r7, [sp, #32]
  13c0b4:	e3a01010 	mov	r1, #16
  13c0b8:	e59f0034 	ldr	r0, [pc, #52]	; 13c0f4 <syscall__llseek+0x58>
  13c0bc:	e1a04003 	mov	r4, r3
  13c0c0:	ebfffbe1 	bl	13b04c <syscall_debug>
  13c0c4:	e1a01005 	mov	r1, r5
  13c0c8:	e58d8000 	str	r8, [sp]
  13c0cc:	e58d7004 	str	r7, [sp, #4]
  13c0d0:	e1a03006 	mov	r3, r6
  13c0d4:	e3a02000 	mov	r2, #0
  13c0d8:	e3a00004 	mov	r0, #4
  13c0dc:	eb0000db 	bl	13c450 <syscall>
  13c0e0:	e1a01fc0 	asr	r1, r0, #31
  13c0e4:	e8840003 	stm	r4, {r0, r1}
  13c0e8:	e1a00fc1 	asr	r0, r1, #31
  13c0ec:	e28dd008 	add	sp, sp, #8
  13c0f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c0f4:	0014b2f4 	.word	0x0014b2f4

0013c0f8 <syscall_recvfrom>:
  13c0f8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c0fc:	e1a06002 	mov	r6, r2
  13c100:	e1a09003 	mov	r9, r3
  13c104:	e1a04000 	mov	r4, r0
  13c108:	e1a05001 	mov	r5, r1
  13c10c:	e24dd014 	sub	sp, sp, #20
  13c110:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c114:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c118:	e3a01011 	mov	r1, #17
  13c11c:	e59f0024 	ldr	r0, [pc, #36]	; 13c148 <syscall_recvfrom+0x50>
  13c120:	ebfffbc9 	bl	13b04c <syscall_debug>
  13c124:	e58d9000 	str	r9, [sp]
  13c128:	e98d0180 	stmib	sp, {r7, r8}
  13c12c:	e1a03006 	mov	r3, r6
  13c130:	e1a02005 	mov	r2, r5
  13c134:	e1a01004 	mov	r1, r4
  13c138:	e3a0004f 	mov	r0, #79	; 0x4f
  13c13c:	eb0000c3 	bl	13c450 <syscall>
  13c140:	e28dd014 	add	sp, sp, #20
  13c144:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c148:	0014be64 	.word	0x0014be64

0013c14c <syscall_sendto>:
  13c14c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c150:	e1a06002 	mov	r6, r2
  13c154:	e1a09003 	mov	r9, r3
  13c158:	e1a04000 	mov	r4, r0
  13c15c:	e1a05001 	mov	r5, r1
  13c160:	e24dd014 	sub	sp, sp, #20
  13c164:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c168:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c16c:	e3a0100f 	mov	r1, #15
  13c170:	e59f0024 	ldr	r0, [pc, #36]	; 13c19c <syscall_sendto+0x50>
  13c174:	ebfffbb4 	bl	13b04c <syscall_debug>
  13c178:	e58d9000 	str	r9, [sp]
  13c17c:	e98d0180 	stmib	sp, {r7, r8}
  13c180:	e1a03006 	mov	r3, r6
  13c184:	e1a02005 	mov	r2, r5
  13c188:	e1a01004 	mov	r1, r4
  13c18c:	e3a00051 	mov	r0, #81	; 0x51
  13c190:	eb0000ae 	bl	13c450 <syscall>
  13c194:	e28dd014 	add	sp, sp, #20
  13c198:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c19c:	0014be44 	.word	0x0014be44

0013c1a0 <syscall_futex>:
  13c1a0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c1a4:	e1a06002 	mov	r6, r2
  13c1a8:	e1a09003 	mov	r9, r3
  13c1ac:	e1a04000 	mov	r4, r0
  13c1b0:	e1a05001 	mov	r5, r1
  13c1b4:	e24dd014 	sub	sp, sp, #20
  13c1b8:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c1bc:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c1c0:	e3a0100e 	mov	r1, #14
  13c1c4:	e59f0024 	ldr	r0, [pc, #36]	; 13c1f0 <syscall_futex+0x50>
  13c1c8:	ebfffb9f 	bl	13b04c <syscall_debug>
  13c1cc:	e58d9000 	str	r9, [sp]
  13c1d0:	e98d0180 	stmib	sp, {r7, r8}
  13c1d4:	e1a03006 	mov	r3, r6
  13c1d8:	e1a02005 	mov	r2, r5
  13c1dc:	e1a01004 	mov	r1, r4
  13c1e0:	e3a00083 	mov	r0, #131	; 0x83
  13c1e4:	eb000099 	bl	13c450 <syscall>
  13c1e8:	e28dd014 	add	sp, sp, #20
  13c1ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c1f0:	0014ba3c 	.word	0x0014ba3c

0013c1f4 <syscall_mmap2>:
  13c1f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c1f8:	e1a06002 	mov	r6, r2
  13c1fc:	e1a09003 	mov	r9, r3
  13c200:	e1a04000 	mov	r4, r0
  13c204:	e1a05001 	mov	r5, r1
  13c208:	e59d7020 	ldr	r7, [sp, #32]
  13c20c:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13c210:	e3a0100e 	mov	r1, #14
  13c214:	e59f0024 	ldr	r0, [pc, #36]	; 13c240 <syscall_mmap2+0x4c>
  13c218:	ebfffb8b 	bl	13b04c <syscall_debug>
  13c21c:	e58d9020 	str	r9, [sp, #32]
  13c220:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13c224:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13c228:	e1a03006 	mov	r3, r6
  13c22c:	e1a02005 	mov	r2, r5
  13c230:	e1a01004 	mov	r1, r4
  13c234:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c238:	e3a00035 	mov	r0, #53	; 0x35
  13c23c:	ea000083 	b	13c450 <syscall>
  13c240:	0014b6c4 	.word	0x0014b6c4

0013c244 <syscall_gettid>:
  13c244:	e92d4010 	push	{r4, lr}
  13c248:	e59f0010 	ldr	r0, [pc, #16]	; 13c260 <syscall_gettid+0x1c>
  13c24c:	e3a0100f 	mov	r1, #15
  13c250:	ebfffb7d 	bl	13b04c <syscall_debug>
  13c254:	e8bd4010 	pop	{r4, lr}
  13c258:	e3a0008b 	mov	r0, #139	; 0x8b
  13c25c:	ea00007b 	b	13c450 <syscall>
  13c260:	0014b8fc 	.word	0x0014b8fc

0013c264 <syscall_vfork>:
  13c264:	e92d4010 	push	{r4, lr}
  13c268:	e59f0010 	ldr	r0, [pc, #16]	; 13c280 <syscall_vfork+0x1c>
  13c26c:	e3a0100e 	mov	r1, #14
  13c270:	ebfffb75 	bl	13b04c <syscall_debug>
  13c274:	e8bd4010 	pop	{r4, lr}
  13c278:	e3a0008a 	mov	r0, #138	; 0x8a
  13c27c:	ea000073 	b	13c450 <syscall>
  13c280:	0014b6a0 	.word	0x0014b6a0

0013c284 <syscall_setsid>:
  13c284:	e92d4010 	push	{r4, lr}
  13c288:	e59f0010 	ldr	r0, [pc, #16]	; 13c2a0 <syscall_setsid+0x1c>
  13c28c:	e3a0100f 	mov	r1, #15
  13c290:	ebfffb6d 	bl	13b04c <syscall_debug>
  13c294:	e8bd4010 	pop	{r4, lr}
  13c298:	e3a0008f 	mov	r0, #143	; 0x8f
  13c29c:	ea00006b 	b	13c450 <syscall>
  13c2a0:	0014aefc 	.word	0x0014aefc

0013c2a4 <syscall_getpid>:
  13c2a4:	e92d4010 	push	{r4, lr}
  13c2a8:	e59f0010 	ldr	r0, [pc, #16]	; 13c2c0 <syscall_getpid+0x1c>
  13c2ac:	e3a0100f 	mov	r1, #15
  13c2b0:	ebfffb65 	bl	13b04c <syscall_debug>
  13c2b4:	e8bd4010 	pop	{r4, lr}
  13c2b8:	e3a0000f 	mov	r0, #15
  13c2bc:	ea000063 	b	13c450 <syscall>
  13c2c0:	0014ad04 	.word	0x0014ad04

0013c2c4 <syscall_fork>:
  13c2c4:	e92d4010 	push	{r4, lr}
  13c2c8:	e59f0010 	ldr	r0, [pc, #16]	; 13c2e0 <syscall_fork+0x1c>
  13c2cc:	e3a0100d 	mov	r1, #13
  13c2d0:	ebfffb5d 	bl	13b04c <syscall_debug>
  13c2d4:	e8bd4010 	pop	{r4, lr}
  13c2d8:	e3a00088 	mov	r0, #136	; 0x88
  13c2dc:	ea00005b 	b	13c450 <syscall>
  13c2e0:	0014ac24 	.word	0x0014ac24

0013c2e4 <syscall_ioctl>:
  13c2e4:	e92d4070 	push	{r4, r5, r6, lr}
  13c2e8:	e1a04000 	mov	r4, r0
  13c2ec:	e1a05001 	mov	r5, r1
  13c2f0:	e59f0030 	ldr	r0, [pc, #48]	; 13c328 <syscall_ioctl+0x44>
  13c2f4:	e3a0100e 	mov	r1, #14
  13c2f8:	e1a06002 	mov	r6, r2
  13c2fc:	ebfffb52 	bl	13b04c <syscall_debug>
  13c300:	e3540001 	cmp	r4, #1
  13c304:	0a000005 	beq	13c320 <syscall_ioctl+0x3c>
  13c308:	e1a03006 	mov	r3, r6
  13c30c:	e1a02005 	mov	r2, r5
  13c310:	e1a01004 	mov	r1, r4
  13c314:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c318:	e3a00007 	mov	r0, #7
  13c31c:	ea00004b 	b	13c450 <syscall>
  13c320:	e3a00000 	mov	r0, #0
  13c324:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c328:	0014ae6c 	.word	0x0014ae6c

0013c32c <syscall_lseek>:
  13c32c:	e92d4070 	push	{r4, r5, r6, lr}
  13c330:	e1a04001 	mov	r4, r1
  13c334:	e24dd008 	sub	sp, sp, #8
  13c338:	e1a05000 	mov	r5, r0
  13c33c:	e3a0100e 	mov	r1, #14
  13c340:	e59f0058 	ldr	r0, [pc, #88]	; 13c3a0 <syscall_lseek+0x74>
  13c344:	e1a06002 	mov	r6, r2
  13c348:	ebfffb3f 	bl	13b04c <syscall_debug>
  13c34c:	e3540000 	cmp	r4, #0
  13c350:	ba000008 	blt	13c378 <syscall_lseek+0x4c>
  13c354:	e3a02000 	mov	r2, #0
  13c358:	e58d6004 	str	r6, [sp, #4]
  13c35c:	e1a03004 	mov	r3, r4
  13c360:	e1a01005 	mov	r1, r5
  13c364:	e58d2000 	str	r2, [sp]
  13c368:	e3a00004 	mov	r0, #4
  13c36c:	eb000037 	bl	13c450 <syscall>
  13c370:	e28dd008 	add	sp, sp, #8
  13c374:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c378:	e3e02000 	mvn	r2, #0
  13c37c:	e58d6004 	str	r6, [sp, #4]
  13c380:	e58d2000 	str	r2, [sp]
  13c384:	e1a03004 	mov	r3, r4
  13c388:	e1a01005 	mov	r1, r5
  13c38c:	e3a02000 	mov	r2, #0
  13c390:	e3a00004 	mov	r0, #4
  13c394:	eb00002d 	bl	13c450 <syscall>
  13c398:	e28dd008 	add	sp, sp, #8
  13c39c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c3a0:	0014acf4 	.word	0x0014acf4

0013c3a4 <get_rtt_syscall>:
  13c3a4:	e3500e19 	cmp	r0, #400	; 0x190
  13c3a8:	3a000005 	bcc	13c3c4 <get_rtt_syscall+0x20>
  13c3ac:	e59f201c 	ldr	r2, [pc, #28]	; 13c3d0 <get_rtt_syscall+0x2c>
  13c3b0:	e59f301c 	ldr	r3, [pc, #28]	; 13c3d4 <get_rtt_syscall+0x30>
  13c3b4:	e1500002 	cmp	r0, r2
  13c3b8:	01a00003 	moveq	r0, r3
  13c3bc:	13a00000 	movne	r0, #0
  13c3c0:	e12fff1e 	bx	lr
  13c3c4:	e59f300c 	ldr	r3, [pc, #12]	; 13c3d8 <get_rtt_syscall+0x34>
  13c3c8:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c3cc:	e12fff1e 	bx	lr
  13c3d0:	000f0005 	.word	0x000f0005
  13c3d4:	00139284 	.word	0x00139284
  13c3d8:	0014c6dc 	.word	0x0014c6dc

0013c3dc <___syscall>:
  13c3dc:	e92d4070 	push	{r4, r5, r6, lr}
  13c3e0:	e1a0c001 	mov	ip, r1
  13c3e4:	e3500e19 	cmp	r0, #400	; 0x190
  13c3e8:	e1a01002 	mov	r1, r2
  13c3ec:	e1a02003 	mov	r2, r3
  13c3f0:	e28d3010 	add	r3, sp, #16
  13c3f4:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c3f8:	2a00000a 	bcs	13c428 <___syscall+0x4c>
  13c3fc:	e59fe03c 	ldr	lr, [pc, #60]	; 13c440 <___syscall+0x64>
  13c400:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c404:	e35e0000 	cmp	lr, #0
  13c408:	0a00000a 	beq	13c438 <___syscall+0x5c>
  13c40c:	e58d6018 	str	r6, [sp, #24]
  13c410:	e58d5014 	str	r5, [sp, #20]
  13c414:	e58d4010 	str	r4, [sp, #16]
  13c418:	e1a0000c 	mov	r0, ip
  13c41c:	e1a0c00e 	mov	ip, lr
  13c420:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c424:	e12fff1c 	bx	ip
  13c428:	e59fe014 	ldr	lr, [pc, #20]	; 13c444 <___syscall+0x68>
  13c42c:	e150000e 	cmp	r0, lr
  13c430:	059fe010 	ldreq	lr, [pc, #16]	; 13c448 <___syscall+0x6c>
  13c434:	0afffff4 	beq	13c40c <___syscall+0x30>
  13c438:	e3a00000 	mov	r0, #0
  13c43c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c440:	0014c6dc 	.word	0x0014c6dc
  13c444:	000f0005 	.word	0x000f0005
  13c448:	00139284 	.word	0x00139284

0013c44c <__syscall>:
  13c44c:	eaffffe2 	b	13c3dc <___syscall>

0013c450 <syscall>:
  13c450:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c454:	e1a07000 	mov	r7, r0
  13c458:	e1a00001 	mov	r0, r1
  13c45c:	e1a01002 	mov	r1, r2
  13c460:	e1a02003 	mov	r2, r3
  13c464:	e28d6014 	add	r6, sp, #20
  13c468:	e8960038 	ldm	r6, {r3, r4, r5}
  13c46c:	ef000000 	svc	0x00000000
  13c470:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c474:	e12fff1e 	bx	lr

0013c478 <__syscall_ret>:
  13c478:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c47c:	912fff1e 	bxls	lr
  13c480:	e92d4010 	push	{r4, lr}
  13c484:	e1a04000 	mov	r4, r0
  13c488:	ebfff28f 	bl	138ecc <__errno_location>
  13c48c:	e2644000 	rsb	r4, r4, #0
  13c490:	e5804000 	str	r4, [r0]
  13c494:	e3e00000 	mvn	r0, #0
  13c498:	e8bd8010 	pop	{r4, pc}

0013c49c <__lctrans_impl>:
  13c49c:	e12fff1e 	bx	lr

0013c4a0 <__lctrans>:
  13c4a0:	eafffffd 	b	13c49c <__lctrans_impl>

0013c4a4 <__lctrans_cur>:
  13c4a4:	e1a02000 	mov	r2, r0
  13c4a8:	e59f301c 	ldr	r3, [pc, #28]	; 13c4cc <__lctrans_cur+0x28>
  13c4ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c4b0:	e5930000 	ldr	r0, [r3]
  13c4b4:	e12fff30 	blx	r0
  13c4b8:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c4bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c4c0:	e1a00002 	mov	r0, r2
  13c4c4:	e5931014 	ldr	r1, [r3, #20]
  13c4c8:	eafffff3 	b	13c49c <__lctrans_impl>
  13c4cc:	0014d3dc 	.word	0x0014d3dc

0013c4d0 <__simple_malloc>:
  13c4d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c4d4:	e2505000 	subs	r5, r0, #0
  13c4d8:	e24dd008 	sub	sp, sp, #8
  13c4dc:	0a000016 	beq	13c53c <__simple_malloc+0x6c>
  13c4e0:	e3550001 	cmp	r5, #1
  13c4e4:	9a000037 	bls	13c5c8 <__simple_malloc+0xf8>
  13c4e8:	e3a03001 	mov	r3, #1
  13c4ec:	e1a03083 	lsl	r3, r3, #1
  13c4f0:	e1550003 	cmp	r5, r3
  13c4f4:	83a02001 	movhi	r2, #1
  13c4f8:	93a02000 	movls	r2, #0
  13c4fc:	e353000f 	cmp	r3, #15
  13c500:	83a02000 	movhi	r2, #0
  13c504:	e3520000 	cmp	r2, #0
  13c508:	1afffff7 	bne	13c4ec <__simple_malloc+0x1c>
  13c50c:	e2434001 	sub	r4, r3, #1
  13c510:	e59f60c8 	ldr	r6, [pc, #200]	; 13c5e0 <__simple_malloc+0x110>
  13c514:	e59f00c8 	ldr	r0, [pc, #200]	; 13c5e4 <__simple_malloc+0x114>
  13c518:	eb001586 	bl	141b38 <__lock>
  13c51c:	e5962000 	ldr	r2, [r6]
  13c520:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c524:	e2623000 	rsb	r3, r2, #0
  13c528:	e0044003 	and	r4, r4, r3
  13c52c:	8a000009 	bhi	13c558 <__simple_malloc+0x88>
  13c530:	e0853004 	add	r3, r5, r4
  13c534:	e1a05004 	mov	r5, r4
  13c538:	ea000004 	b	13c550 <__simple_malloc+0x80>
  13c53c:	e59f00a0 	ldr	r0, [pc, #160]	; 13c5e4 <__simple_malloc+0x114>
  13c540:	eb00157c 	bl	141b38 <__lock>
  13c544:	e3a03001 	mov	r3, #1
  13c548:	e59f6090 	ldr	r6, [pc, #144]	; 13c5e0 <__simple_malloc+0x110>
  13c54c:	e5962000 	ldr	r2, [r6]
  13c550:	e1a04005 	mov	r4, r5
  13c554:	e1a05003 	mov	r5, r3
  13c558:	e59f8088 	ldr	r8, [pc, #136]	; 13c5e8 <__simple_malloc+0x118>
  13c55c:	e5981000 	ldr	r1, [r8]
  13c560:	e0411002 	sub	r1, r1, r2
  13c564:	e1510005 	cmp	r1, r5
  13c568:	20827004 	addcs	r7, r2, r4
  13c56c:	2a00000e 	bcs	13c5ac <__simple_malloc+0xdc>
  13c570:	e28d0008 	add	r0, sp, #8
  13c574:	e5205004 	str	r5, [r0, #-4]!
  13c578:	eb001b2d 	bl	143234 <__expand_heap>
  13c57c:	e2503000 	subs	r3, r0, #0
  13c580:	0a000012 	beq	13c5d0 <__simple_malloc+0x100>
  13c584:	e5982000 	ldr	r2, [r8]
  13c588:	e59d1004 	ldr	r1, [sp, #4]
  13c58c:	e1520003 	cmp	r2, r3
  13c590:	05962000 	ldreq	r2, [r6]
  13c594:	11a07003 	movne	r7, r3
  13c598:	11a02003 	movne	r2, r3
  13c59c:	e0833001 	add	r3, r3, r1
  13c5a0:	00827004 	addeq	r7, r2, r4
  13c5a4:	10455004 	subne	r5, r5, r4
  13c5a8:	e5883000 	str	r3, [r8]
  13c5ac:	e0825005 	add	r5, r2, r5
  13c5b0:	e59f002c 	ldr	r0, [pc, #44]	; 13c5e4 <__simple_malloc+0x114>
  13c5b4:	e5865000 	str	r5, [r6]
  13c5b8:	eb0015b6 	bl	141c98 <__unlock>
  13c5bc:	e1a00007 	mov	r0, r7
  13c5c0:	e28dd008 	add	sp, sp, #8
  13c5c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c5c8:	e3a04000 	mov	r4, #0
  13c5cc:	eaffffcf 	b	13c510 <__simple_malloc+0x40>
  13c5d0:	e59f000c 	ldr	r0, [pc, #12]	; 13c5e4 <__simple_malloc+0x114>
  13c5d4:	e1a07003 	mov	r7, r3
  13c5d8:	eb0015ae 	bl	141c98 <__unlock>
  13c5dc:	eafffff6 	b	13c5bc <__simple_malloc+0xec>
  13c5e0:	0014ec44 	.word	0x0014ec44
  13c5e4:	0014ec4c 	.word	0x0014ec4c
  13c5e8:	0014ec48 	.word	0x0014ec48

0013c5ec <__simple_calloc>:
  13c5ec:	e3510000 	cmp	r1, #0
  13c5f0:	e1a0c000 	mov	ip, r0
  13c5f4:	0a000002 	beq	13c604 <__simple_calloc+0x18>
  13c5f8:	e0832190 	umull	r2, r3, r0, r1
  13c5fc:	e3530000 	cmp	r3, #0
  13c600:	1a000001 	bne	13c60c <__simple_calloc+0x20>
  13c604:	e0000c91 	mul	r0, r1, ip
  13c608:	eaffffb0 	b	13c4d0 <__simple_malloc>
  13c60c:	e92d4010 	push	{r4, lr}
  13c610:	ebfff22d 	bl	138ecc <__errno_location>
  13c614:	e3a0300c 	mov	r3, #12
  13c618:	e5803000 	str	r3, [r0]
  13c61c:	e3a00000 	mov	r0, #0
  13c620:	e8bd8010 	pop	{r4, pc}

0013c624 <adjust_size>:
  13c624:	e5903000 	ldr	r3, [r0]
  13c628:	e59f2058 	ldr	r2, [pc, #88]	; 13c688 <adjust_size+0x64>
  13c62c:	e2431001 	sub	r1, r3, #1
  13c630:	e1510002 	cmp	r1, r2
  13c634:	9a000006 	bls	13c654 <adjust_size+0x30>
  13c638:	e3530000 	cmp	r3, #0
  13c63c:	03a01010 	moveq	r1, #16
  13c640:	01a02003 	moveq	r2, r3
  13c644:	05801000 	streq	r1, [r0]
  13c648:	1a000007 	bne	13c66c <adjust_size+0x48>
  13c64c:	e1a00002 	mov	r0, r2
  13c650:	e12fff1e 	bx	lr
  13c654:	e3a02000 	mov	r2, #0
  13c658:	e2833017 	add	r3, r3, #23
  13c65c:	e3c3300f 	bic	r3, r3, #15
  13c660:	e5803000 	str	r3, [r0]
  13c664:	e1a00002 	mov	r0, r2
  13c668:	e12fff1e 	bx	lr
  13c66c:	e92d4010 	push	{r4, lr}
  13c670:	ebfff215 	bl	138ecc <__errno_location>
  13c674:	e3a0300c 	mov	r3, #12
  13c678:	e3e02000 	mvn	r2, #0
  13c67c:	e5803000 	str	r3, [r0]
  13c680:	e1a00002 	mov	r0, r2
  13c684:	e8bd8010 	pop	{r4, pc}
  13c688:	7fffefef 	.word	0x7fffefef

0013c68c <unbin>:
  13c68c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c690:	e590200c 	ldr	r2, [r0, #12]
  13c694:	e1a07000 	mov	r7, r0
  13c698:	e5900008 	ldr	r0, [r0, #8]
  13c69c:	e24dd00c 	sub	sp, sp, #12
  13c6a0:	e1520000 	cmp	r2, r0
  13c6a4:	0a00000b 	beq	13c6d8 <unbin+0x4c>
  13c6a8:	e5973004 	ldr	r3, [r7, #4]
  13c6ac:	e5820008 	str	r0, [r2, #8]
  13c6b0:	e3c30001 	bic	r0, r3, #1
  13c6b4:	e7971000 	ldr	r1, [r7, r0]
  13c6b8:	e597c008 	ldr	ip, [r7, #8]
  13c6bc:	e3833001 	orr	r3, r3, #1
  13c6c0:	e3811001 	orr	r1, r1, #1
  13c6c4:	e58c200c 	str	r2, [ip, #12]
  13c6c8:	e5873004 	str	r3, [r7, #4]
  13c6cc:	e7871000 	str	r1, [r7, r0]
  13c6d0:	e28dd00c 	add	sp, sp, #12
  13c6d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c6d8:	e3a00001 	mov	r0, #1
  13c6dc:	e241c020 	sub	ip, r1, #32
  13c6e0:	e1a0a110 	lsl	sl, r0, r1
  13c6e4:	e1a0bc10 	lsl	fp, r0, ip
  13c6e8:	e261c020 	rsb	ip, r1, #32
  13c6ec:	e1e0100a 	mvn	r1, sl
  13c6f0:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c6f4:	e3710001 	cmn	r1, #1
  13c6f8:	e1e0200b 	mvn	r2, fp
  13c6fc:	0a000014 	beq	13c754 <unbin+0xc8>
  13c700:	e59f40a4 	ldr	r4, [pc, #164]	; 13c7ac <unbin+0x120>
  13c704:	e1a0b007 	mov	fp, r7
  13c708:	e1a09004 	mov	r9, r4
  13c70c:	e1a07001 	mov	r7, r1
  13c710:	e88d0006 	stm	sp, {r1, r2}
  13c714:	e59f6094 	ldr	r6, [pc, #148]	; 13c7b0 <unbin+0x124>
  13c718:	e5945000 	ldr	r5, [r4]
  13c71c:	e0078005 	and	r8, r7, r5
  13c720:	ea000002 	b	13c730 <unbin+0xa4>
  13c724:	e5943000 	ldr	r3, [r4]
  13c728:	e1550003 	cmp	r5, r3
  13c72c:	1afffff9 	bne	13c718 <unbin+0x8c>
  13c730:	e1a00005 	mov	r0, r5
  13c734:	e1a01008 	mov	r1, r8
  13c738:	e1a02009 	mov	r2, r9
  13c73c:	e5963000 	ldr	r3, [r6]
  13c740:	e12fff33 	blx	r3
  13c744:	e3500000 	cmp	r0, #0
  13c748:	1afffff5 	bne	13c724 <unbin+0x98>
  13c74c:	e1a0700b 	mov	r7, fp
  13c750:	e89d0006 	ldm	sp, {r1, r2}
  13c754:	e3720001 	cmn	r2, #1
  13c758:	0a000010 	beq	13c7a0 <unbin+0x114>
  13c75c:	e1a0a002 	mov	sl, r2
  13c760:	e59f4044 	ldr	r4, [pc, #68]	; 13c7ac <unbin+0x120>
  13c764:	e59f6044 	ldr	r6, [pc, #68]	; 13c7b0 <unbin+0x124>
  13c768:	e2849004 	add	r9, r4, #4
  13c76c:	e5945004 	ldr	r5, [r4, #4]
  13c770:	e00a8005 	and	r8, sl, r5
  13c774:	ea000002 	b	13c784 <unbin+0xf8>
  13c778:	e5943004 	ldr	r3, [r4, #4]
  13c77c:	e1550003 	cmp	r5, r3
  13c780:	1afffff9 	bne	13c76c <unbin+0xe0>
  13c784:	e1a00005 	mov	r0, r5
  13c788:	e1a01008 	mov	r1, r8
  13c78c:	e1a02009 	mov	r2, r9
  13c790:	e5963000 	ldr	r3, [r6]
  13c794:	e12fff33 	blx	r3
  13c798:	e3500000 	cmp	r0, #0
  13c79c:	1afffff5 	bne	13c778 <unbin+0xec>
  13c7a0:	e597200c 	ldr	r2, [r7, #12]
  13c7a4:	e5970008 	ldr	r0, [r7, #8]
  13c7a8:	eaffffbe 	b	13c6a8 <unbin+0x1c>
  13c7ac:	0014ec60 	.word	0x0014ec60
  13c7b0:	0014d3d8 	.word	0x0014d3d8

0013c7b4 <alloc_fwd>:
  13c7b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c7b8:	e59f925c 	ldr	r9, [pc, #604]	; 13ca1c <alloc_fwd+0x268>
  13c7bc:	e24dd00c 	sub	sp, sp, #12
  13c7c0:	e58d0004 	str	r0, [sp, #4]
  13c7c4:	e59f6254 	ldr	r6, [pc, #596]	; 13ca20 <alloc_fwd+0x26c>
  13c7c8:	e59d3004 	ldr	r3, [sp, #4]
  13c7cc:	e5938004 	ldr	r8, [r3, #4]
  13c7d0:	e3180001 	tst	r8, #1
  13c7d4:	1a000055 	bne	13c930 <alloc_fwd+0x17c>
  13c7d8:	e1a07228 	lsr	r7, r8, #4
  13c7dc:	e2477001 	sub	r7, r7, #1
  13c7e0:	e3570020 	cmp	r7, #32
  13c7e4:	9a000005 	bls	13c800 <alloc_fwd+0x4c>
  13c7e8:	e59f3234 	ldr	r3, [pc, #564]	; 13ca24 <alloc_fwd+0x270>
  13c7ec:	e1570003 	cmp	r7, r3
  13c7f0:	8a000058 	bhi	13c958 <alloc_fwd+0x1a4>
  13c7f4:	e59f322c 	ldr	r3, [pc, #556]	; 13ca28 <alloc_fwd+0x274>
  13c7f8:	e08371a7 	add	r7, r3, r7, lsr #3
  13c7fc:	e5577004 	ldrb	r7, [r7, #-4]
  13c800:	e1a0b007 	mov	fp, r7
  13c804:	e1a04207 	lsl	r4, r7, #4
  13c808:	e2844008 	add	r4, r4, #8
  13c80c:	e59f3218 	ldr	r3, [pc, #536]	; 13ca2c <alloc_fwd+0x278>
  13c810:	e0894004 	add	r4, r9, r4
  13c814:	e593300c 	ldr	r3, [r3, #12]
  13c818:	e3530000 	cmp	r3, #0
  13c81c:	1284a004 	addne	sl, r4, #4
  13c820:	1a000032 	bne	13c8f0 <alloc_fwd+0x13c>
  13c824:	e28b3001 	add	r3, fp, #1
  13c828:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c82c:	e3520000 	cmp	r2, #0
  13c830:	1a000053 	bne	13c984 <alloc_fwd+0x1d0>
  13c834:	e1a02008 	mov	r2, r8
  13c838:	e0891207 	add	r1, r9, r7, lsl #4
  13c83c:	e2811008 	add	r1, r1, #8
  13c840:	e0890203 	add	r0, r9, r3, lsl #4
  13c844:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c848:	e5801004 	str	r1, [r0, #4]
  13c84c:	e1580002 	cmp	r8, r2
  13c850:	0a00004b 	beq	13c984 <alloc_fwd+0x1d0>
  13c854:	e5943000 	ldr	r3, [r4]
  13c858:	e3530000 	cmp	r3, #0
  13c85c:	0a000030 	beq	13c924 <alloc_fwd+0x170>
  13c860:	e59f31c8 	ldr	r3, [pc, #456]	; 13ca30 <alloc_fwd+0x27c>
  13c864:	e593c000 	ldr	ip, [r3]
  13c868:	e12fff3c 	blx	ip
  13c86c:	e3a02000 	mov	r2, #0
  13c870:	e593c000 	ldr	ip, [r3]
  13c874:	e5842000 	str	r2, [r4]
  13c878:	e12fff3c 	blx	ip
  13c87c:	e5943004 	ldr	r3, [r4, #4]
  13c880:	e1530002 	cmp	r3, r2
  13c884:	0affffcf 	beq	13c7c8 <alloc_fwd+0x14>
  13c888:	e3a000f0 	mov	r0, #240	; 0xf0
  13c88c:	ebfffec4 	bl	13c3a4 <get_rtt_syscall>
  13c890:	e2503000 	subs	r3, r0, #0
  13c894:	0affffca 	beq	13c7c4 <alloc_fwd+0x10>
  13c898:	e3a02001 	mov	r2, #1
  13c89c:	e3a01081 	mov	r1, #129	; 0x81
  13c8a0:	e1a00004 	mov	r0, r4
  13c8a4:	e12fff33 	blx	r3
  13c8a8:	e3700026 	cmn	r0, #38	; 0x26
  13c8ac:	1affffc4 	bne	13c7c4 <alloc_fwd+0x10>
  13c8b0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c8b4:	ebfffeba 	bl	13c3a4 <get_rtt_syscall>
  13c8b8:	e2503000 	subs	r3, r0, #0
  13c8bc:	0affffc0 	beq	13c7c4 <alloc_fwd+0x10>
  13c8c0:	e3a02001 	mov	r2, #1
  13c8c4:	e1a00004 	mov	r0, r4
  13c8c8:	e1a01002 	mov	r1, r2
  13c8cc:	e12fff33 	blx	r3
  13c8d0:	eaffffbb 	b	13c7c4 <alloc_fwd+0x10>
  13c8d4:	e3550000 	cmp	r5, #0
  13c8d8:	0a000017 	beq	13c93c <alloc_fwd+0x188>
  13c8dc:	e1a03001 	mov	r3, r1
  13c8e0:	e1a02001 	mov	r2, r1
  13c8e4:	e1a00004 	mov	r0, r4
  13c8e8:	e1a0100a 	mov	r1, sl
  13c8ec:	eb001514 	bl	141d44 <__wait>
  13c8f0:	e5945000 	ldr	r5, [r4]
  13c8f4:	ea000002 	b	13c904 <alloc_fwd+0x150>
  13c8f8:	e5943000 	ldr	r3, [r4]
  13c8fc:	e1550003 	cmp	r5, r3
  13c900:	1afffffa 	bne	13c8f0 <alloc_fwd+0x13c>
  13c904:	e1a00005 	mov	r0, r5
  13c908:	e3a01001 	mov	r1, #1
  13c90c:	e1a02004 	mov	r2, r4
  13c910:	e5963000 	ldr	r3, [r6]
  13c914:	e12fff33 	blx	r3
  13c918:	e3500000 	cmp	r0, #0
  13c91c:	1afffff5 	bne	13c8f8 <alloc_fwd+0x144>
  13c920:	eaffffeb 	b	13c8d4 <alloc_fwd+0x120>
  13c924:	e1a08002 	mov	r8, r2
  13c928:	e3180001 	tst	r8, #1
  13c92c:	0affffa9 	beq	13c7d8 <alloc_fwd+0x24>
  13c930:	e3a00000 	mov	r0, #0
  13c934:	e28dd00c 	add	sp, sp, #12
  13c938:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c93c:	e28b3001 	add	r3, fp, #1
  13c940:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c944:	e59d2004 	ldr	r2, [sp, #4]
  13c948:	e3510000 	cmp	r1, #0
  13c94c:	e5922004 	ldr	r2, [r2, #4]
  13c950:	1affffbd 	bne	13c84c <alloc_fwd+0x98>
  13c954:	eaffffb7 	b	13c838 <alloc_fwd+0x84>
  13c958:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c95c:	83a0703f 	movhi	r7, #63	; 0x3f
  13c960:	959f30c0 	ldrls	r3, [pc, #192]	; 13ca28 <alloc_fwd+0x274>
  13c964:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c968:	908373a7 	addls	r7, r3, r7, lsr #7
  13c96c:	95577004 	ldrbls	r7, [r7, #-4]
  13c970:	92877010 	addls	r7, r7, #16
  13c974:	91a04207 	lslls	r4, r7, #4
  13c978:	92844008 	addls	r4, r4, #8
  13c97c:	e1a0b007 	mov	fp, r7
  13c980:	eaffffa1 	b	13c80c <alloc_fwd+0x58>
  13c984:	e1a0100b 	mov	r1, fp
  13c988:	e59d0004 	ldr	r0, [sp, #4]
  13c98c:	ebffff3e 	bl	13c68c <unbin>
  13c990:	e5943000 	ldr	r3, [r4]
  13c994:	e3530000 	cmp	r3, #0
  13c998:	0a000009 	beq	13c9c4 <alloc_fwd+0x210>
  13c99c:	e59f308c 	ldr	r3, [pc, #140]	; 13ca30 <alloc_fwd+0x27c>
  13c9a0:	e593c000 	ldr	ip, [r3]
  13c9a4:	e12fff3c 	blx	ip
  13c9a8:	e3a02000 	mov	r2, #0
  13c9ac:	e593c000 	ldr	ip, [r3]
  13c9b0:	e5842000 	str	r2, [r4]
  13c9b4:	e12fff3c 	blx	ip
  13c9b8:	e5943004 	ldr	r3, [r4, #4]
  13c9bc:	e1530002 	cmp	r3, r2
  13c9c0:	1a000002 	bne	13c9d0 <alloc_fwd+0x21c>
  13c9c4:	e3a00001 	mov	r0, #1
  13c9c8:	e28dd00c 	add	sp, sp, #12
  13c9cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c9d0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c9d4:	ebfffe72 	bl	13c3a4 <get_rtt_syscall>
  13c9d8:	e2503000 	subs	r3, r0, #0
  13c9dc:	0afffff8 	beq	13c9c4 <alloc_fwd+0x210>
  13c9e0:	e3a02001 	mov	r2, #1
  13c9e4:	e3a01081 	mov	r1, #129	; 0x81
  13c9e8:	e1a00004 	mov	r0, r4
  13c9ec:	e12fff33 	blx	r3
  13c9f0:	e3700026 	cmn	r0, #38	; 0x26
  13c9f4:	1afffff2 	bne	13c9c4 <alloc_fwd+0x210>
  13c9f8:	e3a000f0 	mov	r0, #240	; 0xf0
  13c9fc:	ebfffe68 	bl	13c3a4 <get_rtt_syscall>
  13ca00:	e2503000 	subs	r3, r0, #0
  13ca04:	0affffee 	beq	13c9c4 <alloc_fwd+0x210>
  13ca08:	e3a02001 	mov	r2, #1
  13ca0c:	e1a00004 	mov	r0, r4
  13ca10:	e1a01002 	mov	r1, r2
  13ca14:	e12fff33 	blx	r3
  13ca18:	eaffffe9 	b	13c9c4 <alloc_fwd+0x210>
  13ca1c:	0014ec60 	.word	0x0014ec60
  13ca20:	0014d3d8 	.word	0x0014d3d8
  13ca24:	000001ff 	.word	0x000001ff
  13ca28:	0014cd3c 	.word	0x0014cd3c
  13ca2c:	0015d094 	.word	0x0015d094
  13ca30:	0014d3d4 	.word	0x0014d3d4

0013ca34 <alloc_rev>:
  13ca34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ca38:	e59f9264 	ldr	r9, [pc, #612]	; 13cca4 <alloc_rev+0x270>
  13ca3c:	e24dd00c 	sub	sp, sp, #12
  13ca40:	e58d0004 	str	r0, [sp, #4]
  13ca44:	e59f625c 	ldr	r6, [pc, #604]	; 13cca8 <alloc_rev+0x274>
  13ca48:	e59d3004 	ldr	r3, [sp, #4]
  13ca4c:	e5938000 	ldr	r8, [r3]
  13ca50:	e3180001 	tst	r8, #1
  13ca54:	1a000055 	bne	13cbb0 <alloc_rev+0x17c>
  13ca58:	e1a07228 	lsr	r7, r8, #4
  13ca5c:	e2477001 	sub	r7, r7, #1
  13ca60:	e3570020 	cmp	r7, #32
  13ca64:	9a000005 	bls	13ca80 <alloc_rev+0x4c>
  13ca68:	e59f323c 	ldr	r3, [pc, #572]	; 13ccac <alloc_rev+0x278>
  13ca6c:	e1570003 	cmp	r7, r3
  13ca70:	8a000058 	bhi	13cbd8 <alloc_rev+0x1a4>
  13ca74:	e59f3234 	ldr	r3, [pc, #564]	; 13ccb0 <alloc_rev+0x27c>
  13ca78:	e08371a7 	add	r7, r3, r7, lsr #3
  13ca7c:	e5577004 	ldrb	r7, [r7, #-4]
  13ca80:	e1a0b007 	mov	fp, r7
  13ca84:	e1a04207 	lsl	r4, r7, #4
  13ca88:	e2844008 	add	r4, r4, #8
  13ca8c:	e59f3220 	ldr	r3, [pc, #544]	; 13ccb4 <alloc_rev+0x280>
  13ca90:	e0894004 	add	r4, r9, r4
  13ca94:	e593300c 	ldr	r3, [r3, #12]
  13ca98:	e3530000 	cmp	r3, #0
  13ca9c:	1284a004 	addne	sl, r4, #4
  13caa0:	1a000032 	bne	13cb70 <alloc_rev+0x13c>
  13caa4:	e28b3001 	add	r3, fp, #1
  13caa8:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13caac:	e3520000 	cmp	r2, #0
  13cab0:	1a000053 	bne	13cc04 <alloc_rev+0x1d0>
  13cab4:	e1a02008 	mov	r2, r8
  13cab8:	e0891207 	add	r1, r9, r7, lsl #4
  13cabc:	e2811008 	add	r1, r1, #8
  13cac0:	e0890203 	add	r0, r9, r3, lsl #4
  13cac4:	e7891203 	str	r1, [r9, r3, lsl #4]
  13cac8:	e5801004 	str	r1, [r0, #4]
  13cacc:	e1580002 	cmp	r8, r2
  13cad0:	0a00004b 	beq	13cc04 <alloc_rev+0x1d0>
  13cad4:	e5943000 	ldr	r3, [r4]
  13cad8:	e3530000 	cmp	r3, #0
  13cadc:	0a000030 	beq	13cba4 <alloc_rev+0x170>
  13cae0:	e59f31d0 	ldr	r3, [pc, #464]	; 13ccb8 <alloc_rev+0x284>
  13cae4:	e593c000 	ldr	ip, [r3]
  13cae8:	e12fff3c 	blx	ip
  13caec:	e3a02000 	mov	r2, #0
  13caf0:	e593c000 	ldr	ip, [r3]
  13caf4:	e5842000 	str	r2, [r4]
  13caf8:	e12fff3c 	blx	ip
  13cafc:	e5943004 	ldr	r3, [r4, #4]
  13cb00:	e1530002 	cmp	r3, r2
  13cb04:	0affffcf 	beq	13ca48 <alloc_rev+0x14>
  13cb08:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb0c:	ebfffe24 	bl	13c3a4 <get_rtt_syscall>
  13cb10:	e2503000 	subs	r3, r0, #0
  13cb14:	0affffca 	beq	13ca44 <alloc_rev+0x10>
  13cb18:	e3a02001 	mov	r2, #1
  13cb1c:	e3a01081 	mov	r1, #129	; 0x81
  13cb20:	e1a00004 	mov	r0, r4
  13cb24:	e12fff33 	blx	r3
  13cb28:	e3700026 	cmn	r0, #38	; 0x26
  13cb2c:	1affffc4 	bne	13ca44 <alloc_rev+0x10>
  13cb30:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb34:	ebfffe1a 	bl	13c3a4 <get_rtt_syscall>
  13cb38:	e2503000 	subs	r3, r0, #0
  13cb3c:	0affffc0 	beq	13ca44 <alloc_rev+0x10>
  13cb40:	e3a02001 	mov	r2, #1
  13cb44:	e1a00004 	mov	r0, r4
  13cb48:	e1a01002 	mov	r1, r2
  13cb4c:	e12fff33 	blx	r3
  13cb50:	eaffffbb 	b	13ca44 <alloc_rev+0x10>
  13cb54:	e3550000 	cmp	r5, #0
  13cb58:	0a000017 	beq	13cbbc <alloc_rev+0x188>
  13cb5c:	e1a03001 	mov	r3, r1
  13cb60:	e1a02001 	mov	r2, r1
  13cb64:	e1a00004 	mov	r0, r4
  13cb68:	e1a0100a 	mov	r1, sl
  13cb6c:	eb001474 	bl	141d44 <__wait>
  13cb70:	e5945000 	ldr	r5, [r4]
  13cb74:	ea000002 	b	13cb84 <alloc_rev+0x150>
  13cb78:	e5943000 	ldr	r3, [r4]
  13cb7c:	e1550003 	cmp	r5, r3
  13cb80:	1afffffa 	bne	13cb70 <alloc_rev+0x13c>
  13cb84:	e1a00005 	mov	r0, r5
  13cb88:	e3a01001 	mov	r1, #1
  13cb8c:	e1a02004 	mov	r2, r4
  13cb90:	e5963000 	ldr	r3, [r6]
  13cb94:	e12fff33 	blx	r3
  13cb98:	e3500000 	cmp	r0, #0
  13cb9c:	1afffff5 	bne	13cb78 <alloc_rev+0x144>
  13cba0:	eaffffeb 	b	13cb54 <alloc_rev+0x120>
  13cba4:	e1a08002 	mov	r8, r2
  13cba8:	e3180001 	tst	r8, #1
  13cbac:	0affffa9 	beq	13ca58 <alloc_rev+0x24>
  13cbb0:	e3a00000 	mov	r0, #0
  13cbb4:	e28dd00c 	add	sp, sp, #12
  13cbb8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cbbc:	e28b3001 	add	r3, fp, #1
  13cbc0:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13cbc4:	e59d2004 	ldr	r2, [sp, #4]
  13cbc8:	e3510000 	cmp	r1, #0
  13cbcc:	e5922000 	ldr	r2, [r2]
  13cbd0:	1affffbd 	bne	13cacc <alloc_rev+0x98>
  13cbd4:	eaffffb7 	b	13cab8 <alloc_rev+0x84>
  13cbd8:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13cbdc:	83a0703f 	movhi	r7, #63	; 0x3f
  13cbe0:	959f30c8 	ldrls	r3, [pc, #200]	; 13ccb0 <alloc_rev+0x27c>
  13cbe4:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cbe8:	908373a7 	addls	r7, r3, r7, lsr #7
  13cbec:	95577004 	ldrbls	r7, [r7, #-4]
  13cbf0:	92877010 	addls	r7, r7, #16
  13cbf4:	91a04207 	lslls	r4, r7, #4
  13cbf8:	92844008 	addls	r4, r4, #8
  13cbfc:	e1a0b007 	mov	fp, r7
  13cc00:	eaffffa1 	b	13ca8c <alloc_rev+0x58>
  13cc04:	e59d3004 	ldr	r3, [sp, #4]
  13cc08:	e3c80001 	bic	r0, r8, #1
  13cc0c:	e0430000 	sub	r0, r3, r0
  13cc10:	e1a0100b 	mov	r1, fp
  13cc14:	ebfffe9c 	bl	13c68c <unbin>
  13cc18:	e5943000 	ldr	r3, [r4]
  13cc1c:	e3530000 	cmp	r3, #0
  13cc20:	0a000009 	beq	13cc4c <alloc_rev+0x218>
  13cc24:	e59f308c 	ldr	r3, [pc, #140]	; 13ccb8 <alloc_rev+0x284>
  13cc28:	e593c000 	ldr	ip, [r3]
  13cc2c:	e12fff3c 	blx	ip
  13cc30:	e3a02000 	mov	r2, #0
  13cc34:	e593c000 	ldr	ip, [r3]
  13cc38:	e5842000 	str	r2, [r4]
  13cc3c:	e12fff3c 	blx	ip
  13cc40:	e5943004 	ldr	r3, [r4, #4]
  13cc44:	e1530002 	cmp	r3, r2
  13cc48:	1a000002 	bne	13cc58 <alloc_rev+0x224>
  13cc4c:	e3a00001 	mov	r0, #1
  13cc50:	e28dd00c 	add	sp, sp, #12
  13cc54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cc58:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc5c:	ebfffdd0 	bl	13c3a4 <get_rtt_syscall>
  13cc60:	e2503000 	subs	r3, r0, #0
  13cc64:	0afffff8 	beq	13cc4c <alloc_rev+0x218>
  13cc68:	e3a02001 	mov	r2, #1
  13cc6c:	e3a01081 	mov	r1, #129	; 0x81
  13cc70:	e1a00004 	mov	r0, r4
  13cc74:	e12fff33 	blx	r3
  13cc78:	e3700026 	cmn	r0, #38	; 0x26
  13cc7c:	1afffff2 	bne	13cc4c <alloc_rev+0x218>
  13cc80:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc84:	ebfffdc6 	bl	13c3a4 <get_rtt_syscall>
  13cc88:	e2503000 	subs	r3, r0, #0
  13cc8c:	0affffee 	beq	13cc4c <alloc_rev+0x218>
  13cc90:	e3a02001 	mov	r2, #1
  13cc94:	e1a00004 	mov	r0, r4
  13cc98:	e1a01002 	mov	r1, r2
  13cc9c:	e12fff33 	blx	r3
  13cca0:	eaffffe9 	b	13cc4c <alloc_rev+0x218>
  13cca4:	0014ec60 	.word	0x0014ec60
  13cca8:	0014d3d8 	.word	0x0014d3d8
  13ccac:	000001ff 	.word	0x000001ff
  13ccb0:	0014cd3c 	.word	0x0014cd3c
  13ccb4:	0015d094 	.word	0x0015d094
  13ccb8:	0014d3d4 	.word	0x0014d3d4

0013ccbc <__bin_chunk>:
  13ccbc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ccc0:	e5903004 	ldr	r3, [r0, #4]
  13ccc4:	e24dd01c 	sub	sp, sp, #28
  13ccc8:	e3c31001 	bic	r1, r3, #1
  13cccc:	e7902001 	ldr	r2, [r0, r1]
  13ccd0:	e1a06000 	mov	r6, r0
  13ccd4:	e1530002 	cmp	r3, r2
  13ccd8:	e58d1010 	str	r1, [sp, #16]
  13ccdc:	e080b001 	add	fp, r0, r1
  13cce0:	0a000000 	beq	13cce8 <__bin_chunk+0x2c>
  13cce4:	e7f000f0 	.word	0xe7f000f0
  13cce8:	e59d3010 	ldr	r3, [sp, #16]
  13ccec:	e59f55e8 	ldr	r5, [pc, #1512]	; 13d2dc <__bin_chunk+0x620>
  13ccf0:	e58d3000 	str	r3, [sp]
  13ccf4:	e3a03000 	mov	r3, #0
  13ccf8:	e58d3014 	str	r3, [sp, #20]
  13ccfc:	e2853b01 	add	r3, r5, #1024	; 0x400
  13cd00:	e283300c 	add	r3, r3, #12
  13cd04:	e59f95d4 	ldr	r9, [pc, #1492]	; 13d2e0 <__bin_chunk+0x624>
  13cd08:	e58d300c 	str	r3, [sp, #12]
  13cd0c:	e5963000 	ldr	r3, [r6]
  13cd10:	e59b2004 	ldr	r2, [fp, #4]
  13cd14:	e0033002 	and	r3, r3, r2
  13cd18:	e3130001 	tst	r3, #1
  13cd1c:	0a000038 	beq	13ce04 <__bin_chunk+0x148>
  13cd20:	e59d1000 	ldr	r1, [sp]
  13cd24:	e1a03221 	lsr	r3, r1, #4
  13cd28:	e2432001 	sub	r2, r3, #1
  13cd2c:	e3520020 	cmp	r2, #32
  13cd30:	e3813001 	orr	r3, r1, #1
  13cd34:	e5863004 	str	r3, [r6, #4]
  13cd38:	e58d2008 	str	r2, [sp, #8]
  13cd3c:	e58b3000 	str	r3, [fp]
  13cd40:	8a00006c 	bhi	13cef8 <__bin_chunk+0x23c>
  13cd44:	e1a04202 	lsl	r4, r2, #4
  13cd48:	e2844008 	add	r4, r4, #8
  13cd4c:	e58d2004 	str	r2, [sp, #4]
  13cd50:	e59f358c 	ldr	r3, [pc, #1420]	; 13d2e4 <__bin_chunk+0x628>
  13cd54:	e0854004 	add	r4, r5, r4
  13cd58:	e593300c 	ldr	r3, [r3, #12]
  13cd5c:	e3530000 	cmp	r3, #0
  13cd60:	12848004 	addne	r8, r4, #4
  13cd64:	1a000056 	bne	13cec4 <__bin_chunk+0x208>
  13cd68:	e59d3004 	ldr	r3, [sp, #4]
  13cd6c:	e2837001 	add	r7, r3, #1
  13cd70:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13cd74:	e3530000 	cmp	r3, #0
  13cd78:	0a000069 	beq	13cf24 <__bin_chunk+0x268>
  13cd7c:	e59f3560 	ldr	r3, [pc, #1376]	; 13d2e4 <__bin_chunk+0x628>
  13cd80:	e593300c 	ldr	r3, [r3, #12]
  13cd84:	e3530000 	cmp	r3, #0
  13cd88:	1a00006f 	bne	13cf4c <__bin_chunk+0x290>
  13cd8c:	e5963000 	ldr	r3, [r6]
  13cd90:	e59b2004 	ldr	r2, [fp, #4]
  13cd94:	e0033002 	and	r3, r3, r2
  13cd98:	e2133001 	ands	r3, r3, #1
  13cd9c:	1a0000b5 	bne	13d078 <__bin_chunk+0x3bc>
  13cda0:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13cda4:	e3520000 	cmp	r2, #0
  13cda8:	0a000008 	beq	13cdd0 <__bin_chunk+0x114>
  13cdac:	e59f2534 	ldr	r2, [pc, #1332]	; 13d2e8 <__bin_chunk+0x62c>
  13cdb0:	e592c000 	ldr	ip, [r2]
  13cdb4:	e12fff3c 	blx	ip
  13cdb8:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13cdbc:	e592c000 	ldr	ip, [r2]
  13cdc0:	e12fff3c 	blx	ip
  13cdc4:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cdc8:	e3530000 	cmp	r3, #0
  13cdcc:	1a000095 	bne	13d028 <__bin_chunk+0x36c>
  13cdd0:	e5943000 	ldr	r3, [r4]
  13cdd4:	e3530000 	cmp	r3, #0
  13cdd8:	0a000009 	beq	13ce04 <__bin_chunk+0x148>
  13cddc:	e59f2504 	ldr	r2, [pc, #1284]	; 13d2e8 <__bin_chunk+0x62c>
  13cde0:	e592c000 	ldr	ip, [r2]
  13cde4:	e12fff3c 	blx	ip
  13cde8:	e3a03000 	mov	r3, #0
  13cdec:	e592c000 	ldr	ip, [r2]
  13cdf0:	e5843000 	str	r3, [r4]
  13cdf4:	e12fff3c 	blx	ip
  13cdf8:	e5943004 	ldr	r3, [r4, #4]
  13cdfc:	e3530000 	cmp	r3, #0
  13ce00:	1a000075 	bne	13cfdc <__bin_chunk+0x320>
  13ce04:	e1a00006 	mov	r0, r6
  13ce08:	ebffff09 	bl	13ca34 <alloc_rev>
  13ce0c:	e3500000 	cmp	r0, #0
  13ce10:	0a000010 	beq	13ce58 <__bin_chunk+0x19c>
  13ce14:	e5963000 	ldr	r3, [r6]
  13ce18:	e59d2010 	ldr	r2, [sp, #16]
  13ce1c:	e3c33001 	bic	r3, r3, #1
  13ce20:	e0466003 	sub	r6, r6, r3
  13ce24:	e5963004 	ldr	r3, [r6, #4]
  13ce28:	e59d1000 	ldr	r1, [sp]
  13ce2c:	e3c33001 	bic	r3, r3, #1
  13ce30:	e0822003 	add	r2, r2, r3
  13ce34:	e0811003 	add	r1, r1, r3
  13ce38:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce3c:	e58d1000 	str	r1, [sp]
  13ce40:	9a000004 	bls	13ce58 <__bin_chunk+0x19c>
  13ce44:	e0222003 	eor	r2, r2, r3
  13ce48:	e1520003 	cmp	r2, r3
  13ce4c:	e59d1014 	ldr	r1, [sp, #20]
  13ce50:	83a01001 	movhi	r1, #1
  13ce54:	e58d1014 	str	r1, [sp, #20]
  13ce58:	e1a0000b 	mov	r0, fp
  13ce5c:	ebfffe54 	bl	13c7b4 <alloc_fwd>
  13ce60:	e3500000 	cmp	r0, #0
  13ce64:	0affffa8 	beq	13cd0c <__bin_chunk+0x50>
  13ce68:	e59b3004 	ldr	r3, [fp, #4]
  13ce6c:	e59d2010 	ldr	r2, [sp, #16]
  13ce70:	e3c33001 	bic	r3, r3, #1
  13ce74:	e59d1000 	ldr	r1, [sp]
  13ce78:	e0822003 	add	r2, r2, r3
  13ce7c:	e0811003 	add	r1, r1, r3
  13ce80:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce84:	e58d1000 	str	r1, [sp]
  13ce88:	9a000004 	bls	13cea0 <__bin_chunk+0x1e4>
  13ce8c:	e0222003 	eor	r2, r2, r3
  13ce90:	e1520003 	cmp	r2, r3
  13ce94:	e59d1014 	ldr	r1, [sp, #20]
  13ce98:	83a01001 	movhi	r1, #1
  13ce9c:	e58d1014 	str	r1, [sp, #20]
  13cea0:	e08bb003 	add	fp, fp, r3
  13cea4:	eaffff98 	b	13cd0c <__bin_chunk+0x50>
  13cea8:	e3570000 	cmp	r7, #0
  13ceac:	0affffad 	beq	13cd68 <__bin_chunk+0xac>
  13ceb0:	e1a03001 	mov	r3, r1
  13ceb4:	e1a02001 	mov	r2, r1
  13ceb8:	e1a00004 	mov	r0, r4
  13cebc:	e1a01008 	mov	r1, r8
  13cec0:	eb00139f 	bl	141d44 <__wait>
  13cec4:	e5947000 	ldr	r7, [r4]
  13cec8:	ea000002 	b	13ced8 <__bin_chunk+0x21c>
  13cecc:	e5943000 	ldr	r3, [r4]
  13ced0:	e1570003 	cmp	r7, r3
  13ced4:	1afffffa 	bne	13cec4 <__bin_chunk+0x208>
  13ced8:	e1a00007 	mov	r0, r7
  13cedc:	e3a01001 	mov	r1, #1
  13cee0:	e1a02004 	mov	r2, r4
  13cee4:	e5993000 	ldr	r3, [r9]
  13cee8:	e12fff33 	blx	r3
  13ceec:	e3500000 	cmp	r0, #0
  13cef0:	1afffff5 	bne	13cecc <__bin_chunk+0x210>
  13cef4:	eaffffeb 	b	13cea8 <__bin_chunk+0x1ec>
  13cef8:	e59d3008 	ldr	r3, [sp, #8]
  13cefc:	e3530c02 	cmp	r3, #512	; 0x200
  13cf00:	2a000027 	bcs	13cfa4 <__bin_chunk+0x2e8>
  13cf04:	e59f23e0 	ldr	r2, [pc, #992]	; 13d2ec <__bin_chunk+0x630>
  13cf08:	e08231a3 	add	r3, r2, r3, lsr #3
  13cf0c:	e5533004 	ldrb	r3, [r3, #-4]
  13cf10:	e1a04203 	lsl	r4, r3, #4
  13cf14:	e58d3008 	str	r3, [sp, #8]
  13cf18:	e2844008 	add	r4, r4, #8
  13cf1c:	e58d3004 	str	r3, [sp, #4]
  13cf20:	eaffff8a 	b	13cd50 <__bin_chunk+0x94>
  13cf24:	e59d3008 	ldr	r3, [sp, #8]
  13cf28:	e0852207 	add	r2, r5, r7, lsl #4
  13cf2c:	e0853203 	add	r3, r5, r3, lsl #4
  13cf30:	e2833008 	add	r3, r3, #8
  13cf34:	e7853207 	str	r3, [r5, r7, lsl #4]
  13cf38:	e5823004 	str	r3, [r2, #4]
  13cf3c:	e59f33a0 	ldr	r3, [pc, #928]	; 13d2e4 <__bin_chunk+0x628>
  13cf40:	e593300c 	ldr	r3, [r3, #12]
  13cf44:	e3530000 	cmp	r3, #0
  13cf48:	0affff8f 	beq	13cd8c <__bin_chunk+0xd0>
  13cf4c:	e59f339c 	ldr	r3, [pc, #924]	; 13d2f0 <__bin_chunk+0x634>
  13cf50:	e283a008 	add	sl, r3, #8
  13cf54:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13cf58:	ea000002 	b	13cf68 <__bin_chunk+0x2ac>
  13cf5c:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cf60:	e1580003 	cmp	r8, r3
  13cf64:	1afffffa 	bne	13cf54 <__bin_chunk+0x298>
  13cf68:	e1a00008 	mov	r0, r8
  13cf6c:	e3a01001 	mov	r1, #1
  13cf70:	e1a0200a 	mov	r2, sl
  13cf74:	e5993000 	ldr	r3, [r9]
  13cf78:	e12fff33 	blx	r3
  13cf7c:	e3500000 	cmp	r0, #0
  13cf80:	1afffff5 	bne	13cf5c <__bin_chunk+0x2a0>
  13cf84:	e3580000 	cmp	r8, #0
  13cf88:	0affff7f 	beq	13cd8c <__bin_chunk+0xd0>
  13cf8c:	e1a03001 	mov	r3, r1
  13cf90:	e1a02001 	mov	r2, r1
  13cf94:	e1a0000a 	mov	r0, sl
  13cf98:	e59d100c 	ldr	r1, [sp, #12]
  13cf9c:	eb001368 	bl	141d44 <__wait>
  13cfa0:	eaffffeb 	b	13cf54 <__bin_chunk+0x298>
  13cfa4:	e59d3008 	ldr	r3, [sp, #8]
  13cfa8:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cfac:	83a0303f 	movhi	r3, #63	; 0x3f
  13cfb0:	959f2334 	ldrls	r2, [pc, #820]	; 13d2ec <__bin_chunk+0x630>
  13cfb4:	858d3008 	strhi	r3, [sp, #8]
  13cfb8:	908233a3 	addls	r3, r2, r3, lsr #7
  13cfbc:	95533004 	ldrbls	r3, [r3, #-4]
  13cfc0:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cfc4:	92833010 	addls	r3, r3, #16
  13cfc8:	91a04203 	lslls	r4, r3, #4
  13cfcc:	958d3008 	strls	r3, [sp, #8]
  13cfd0:	92844008 	addls	r4, r4, #8
  13cfd4:	e58d3004 	str	r3, [sp, #4]
  13cfd8:	eaffff5c 	b	13cd50 <__bin_chunk+0x94>
  13cfdc:	e3a000f0 	mov	r0, #240	; 0xf0
  13cfe0:	ebfffcef 	bl	13c3a4 <get_rtt_syscall>
  13cfe4:	e2503000 	subs	r3, r0, #0
  13cfe8:	0affff85 	beq	13ce04 <__bin_chunk+0x148>
  13cfec:	e3a02001 	mov	r2, #1
  13cff0:	e3a01081 	mov	r1, #129	; 0x81
  13cff4:	e1a00004 	mov	r0, r4
  13cff8:	e12fff33 	blx	r3
  13cffc:	e3700026 	cmn	r0, #38	; 0x26
  13d000:	1affff7f 	bne	13ce04 <__bin_chunk+0x148>
  13d004:	e3a000f0 	mov	r0, #240	; 0xf0
  13d008:	ebfffce5 	bl	13c3a4 <get_rtt_syscall>
  13d00c:	e2503000 	subs	r3, r0, #0
  13d010:	0affff7b 	beq	13ce04 <__bin_chunk+0x148>
  13d014:	e3a02001 	mov	r2, #1
  13d018:	e1a00004 	mov	r0, r4
  13d01c:	e1a01002 	mov	r1, r2
  13d020:	e12fff33 	blx	r3
  13d024:	eaffff76 	b	13ce04 <__bin_chunk+0x148>
  13d028:	e3a000f0 	mov	r0, #240	; 0xf0
  13d02c:	ebfffcdc 	bl	13c3a4 <get_rtt_syscall>
  13d030:	e2503000 	subs	r3, r0, #0
  13d034:	e59f72b8 	ldr	r7, [pc, #696]	; 13d2f4 <__bin_chunk+0x638>
  13d038:	0affff64 	beq	13cdd0 <__bin_chunk+0x114>
  13d03c:	e3a02001 	mov	r2, #1
  13d040:	e3a01081 	mov	r1, #129	; 0x81
  13d044:	e1a00007 	mov	r0, r7
  13d048:	e12fff33 	blx	r3
  13d04c:	e3700026 	cmn	r0, #38	; 0x26
  13d050:	1affff5e 	bne	13cdd0 <__bin_chunk+0x114>
  13d054:	e3a000f0 	mov	r0, #240	; 0xf0
  13d058:	ebfffcd1 	bl	13c3a4 <get_rtt_syscall>
  13d05c:	e2503000 	subs	r3, r0, #0
  13d060:	0affff5a 	beq	13cdd0 <__bin_chunk+0x114>
  13d064:	e3a02001 	mov	r2, #1
  13d068:	e1a00007 	mov	r0, r7
  13d06c:	e1a01002 	mov	r1, r2
  13d070:	e12fff33 	blx	r3
  13d074:	eaffff55 	b	13cdd0 <__bin_chunk+0x114>
  13d078:	e59d3004 	ldr	r3, [sp, #4]
  13d07c:	e8950006 	ldm	r5, {r1, r2}
  13d080:	e263c020 	rsb	ip, r3, #32
  13d084:	e1a08331 	lsr	r8, r1, r3
  13d088:	e2430020 	sub	r0, r3, #32
  13d08c:	e3a03000 	mov	r3, #0
  13d090:	e1888c12 	orr	r8, r8, r2, lsl ip
  13d094:	e1888032 	orr	r8, r8, r2, lsr r0
  13d098:	e2082001 	and	r2, r8, #1
  13d09c:	e1923003 	orrs	r3, r2, r3
  13d0a0:	0a00005d 	beq	13d21c <__bin_chunk+0x560>
  13d0a4:	e59d3000 	ldr	r3, [sp]
  13d0a8:	e5863004 	str	r3, [r6, #4]
  13d0ac:	e58b3000 	str	r3, [fp]
  13d0b0:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13d0b4:	e3530000 	cmp	r3, #0
  13d0b8:	0a000009 	beq	13d0e4 <__bin_chunk+0x428>
  13d0bc:	e59f3224 	ldr	r3, [pc, #548]	; 13d2e8 <__bin_chunk+0x62c>
  13d0c0:	e593c000 	ldr	ip, [r3]
  13d0c4:	e12fff3c 	blx	ip
  13d0c8:	e3a02000 	mov	r2, #0
  13d0cc:	e593c000 	ldr	ip, [r3]
  13d0d0:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13d0d4:	e12fff3c 	blx	ip
  13d0d8:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13d0dc:	e1530002 	cmp	r3, r2
  13d0e0:	1a000039 	bne	13d1cc <__bin_chunk+0x510>
  13d0e4:	e59d3008 	ldr	r3, [sp, #8]
  13d0e8:	e0857207 	add	r7, r5, r7, lsl #4
  13d0ec:	e2833001 	add	r3, r3, #1
  13d0f0:	e5972004 	ldr	r2, [r7, #4]
  13d0f4:	e0855203 	add	r5, r5, r3, lsl #4
  13d0f8:	e2453008 	sub	r3, r5, #8
  13d0fc:	e586200c 	str	r2, [r6, #12]
  13d100:	e5863008 	str	r3, [r6, #8]
  13d104:	e59d2014 	ldr	r2, [sp, #20]
  13d108:	e5856004 	str	r6, [r5, #4]
  13d10c:	e596300c 	ldr	r3, [r6, #12]
  13d110:	e3520000 	cmp	r2, #0
  13d114:	e5836008 	str	r6, [r3, #8]
  13d118:	0a000008 	beq	13d140 <__bin_chunk+0x484>
  13d11c:	e59f31d4 	ldr	r3, [pc, #468]	; 13d2f8 <__bin_chunk+0x63c>
  13d120:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13d124:	e286600f 	add	r6, r6, #15
  13d128:	e24b1010 	sub	r1, fp, #16
  13d12c:	e0060003 	and	r0, r6, r3
  13d130:	e0011003 	and	r1, r1, r3
  13d134:	e0411000 	sub	r1, r1, r0
  13d138:	e3a02004 	mov	r2, #4
  13d13c:	eb0002ca 	bl	13dc6c <__madvise>
  13d140:	e5943000 	ldr	r3, [r4]
  13d144:	e3530000 	cmp	r3, #0
  13d148:	0a000009 	beq	13d174 <__bin_chunk+0x4b8>
  13d14c:	e59f3194 	ldr	r3, [pc, #404]	; 13d2e8 <__bin_chunk+0x62c>
  13d150:	e593c000 	ldr	ip, [r3]
  13d154:	e12fff3c 	blx	ip
  13d158:	e3a02000 	mov	r2, #0
  13d15c:	e593c000 	ldr	ip, [r3]
  13d160:	e5842000 	str	r2, [r4]
  13d164:	e12fff3c 	blx	ip
  13d168:	e5943004 	ldr	r3, [r4, #4]
  13d16c:	e1530002 	cmp	r3, r2
  13d170:	1a000001 	bne	13d17c <__bin_chunk+0x4c0>
  13d174:	e28dd01c 	add	sp, sp, #28
  13d178:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d17c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d180:	ebfffc87 	bl	13c3a4 <get_rtt_syscall>
  13d184:	e2503000 	subs	r3, r0, #0
  13d188:	0afffff9 	beq	13d174 <__bin_chunk+0x4b8>
  13d18c:	e3a02001 	mov	r2, #1
  13d190:	e3a01081 	mov	r1, #129	; 0x81
  13d194:	e1a00004 	mov	r0, r4
  13d198:	e12fff33 	blx	r3
  13d19c:	e3700026 	cmn	r0, #38	; 0x26
  13d1a0:	1afffff3 	bne	13d174 <__bin_chunk+0x4b8>
  13d1a4:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1a8:	ebfffc7d 	bl	13c3a4 <get_rtt_syscall>
  13d1ac:	e2503000 	subs	r3, r0, #0
  13d1b0:	0affffef 	beq	13d174 <__bin_chunk+0x4b8>
  13d1b4:	e3a02001 	mov	r2, #1
  13d1b8:	e1a00004 	mov	r0, r4
  13d1bc:	e1a01002 	mov	r1, r2
  13d1c0:	e28dd01c 	add	sp, sp, #28
  13d1c4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d1c8:	e12fff13 	bx	r3
  13d1cc:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1d0:	ebfffc73 	bl	13c3a4 <get_rtt_syscall>
  13d1d4:	e2503000 	subs	r3, r0, #0
  13d1d8:	e59f8114 	ldr	r8, [pc, #276]	; 13d2f4 <__bin_chunk+0x638>
  13d1dc:	0affffc0 	beq	13d0e4 <__bin_chunk+0x428>
  13d1e0:	e3a02001 	mov	r2, #1
  13d1e4:	e3a01081 	mov	r1, #129	; 0x81
  13d1e8:	e1a00008 	mov	r0, r8
  13d1ec:	e12fff33 	blx	r3
  13d1f0:	e3700026 	cmn	r0, #38	; 0x26
  13d1f4:	1affffba 	bne	13d0e4 <__bin_chunk+0x428>
  13d1f8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1fc:	ebfffc68 	bl	13c3a4 <get_rtt_syscall>
  13d200:	e2503000 	subs	r3, r0, #0
  13d204:	0affffb6 	beq	13d0e4 <__bin_chunk+0x428>
  13d208:	e3a02001 	mov	r2, #1
  13d20c:	e1a00008 	mov	r0, r8
  13d210:	e1a01002 	mov	r1, r2
  13d214:	e12fff33 	blx	r3
  13d218:	eaffffb1 	b	13d0e4 <__bin_chunk+0x428>
  13d21c:	e3a03001 	mov	r3, #1
  13d220:	e59d1004 	ldr	r1, [sp, #4]
  13d224:	e1a02013 	lsl	r2, r3, r0
  13d228:	e1b01113 	lsls	r1, r3, r1
  13d22c:	e1823c33 	orr	r3, r2, r3, lsr ip
  13d230:	e58d100c 	str	r1, [sp, #12]
  13d234:	e58d3004 	str	r3, [sp, #4]
  13d238:	0a000011 	beq	13d284 <__bin_chunk+0x5c8>
  13d23c:	e59f809c 	ldr	r8, [pc, #156]	; 13d2e0 <__bin_chunk+0x624>
  13d240:	e59fa094 	ldr	sl, [pc, #148]	; 13d2dc <__bin_chunk+0x620>
  13d244:	e58db010 	str	fp, [sp, #16]
  13d248:	e5959000 	ldr	r9, [r5]
  13d24c:	e59d300c 	ldr	r3, [sp, #12]
  13d250:	e183b009 	orr	fp, r3, r9
  13d254:	ea000002 	b	13d264 <__bin_chunk+0x5a8>
  13d258:	e5953000 	ldr	r3, [r5]
  13d25c:	e1590003 	cmp	r9, r3
  13d260:	1afffff8 	bne	13d248 <__bin_chunk+0x58c>
  13d264:	e1a00009 	mov	r0, r9
  13d268:	e1a0100b 	mov	r1, fp
  13d26c:	e1a0200a 	mov	r2, sl
  13d270:	e5983000 	ldr	r3, [r8]
  13d274:	e12fff33 	blx	r3
  13d278:	e3500000 	cmp	r0, #0
  13d27c:	1afffff5 	bne	13d258 <__bin_chunk+0x59c>
  13d280:	e59db010 	ldr	fp, [sp, #16]
  13d284:	e59d3004 	ldr	r3, [sp, #4]
  13d288:	e3530000 	cmp	r3, #0
  13d28c:	0affff84 	beq	13d0a4 <__bin_chunk+0x3e8>
  13d290:	e59f8048 	ldr	r8, [pc, #72]	; 13d2e0 <__bin_chunk+0x624>
  13d294:	e59fa060 	ldr	sl, [pc, #96]	; 13d2fc <__bin_chunk+0x640>
  13d298:	e58db00c 	str	fp, [sp, #12]
  13d29c:	e5959004 	ldr	r9, [r5, #4]
  13d2a0:	e59d3004 	ldr	r3, [sp, #4]
  13d2a4:	e183b009 	orr	fp, r3, r9
  13d2a8:	ea000002 	b	13d2b8 <__bin_chunk+0x5fc>
  13d2ac:	e5953004 	ldr	r3, [r5, #4]
  13d2b0:	e1590003 	cmp	r9, r3
  13d2b4:	1afffff8 	bne	13d29c <__bin_chunk+0x5e0>
  13d2b8:	e1a00009 	mov	r0, r9
  13d2bc:	e1a0100b 	mov	r1, fp
  13d2c0:	e1a0200a 	mov	r2, sl
  13d2c4:	e5983000 	ldr	r3, [r8]
  13d2c8:	e12fff33 	blx	r3
  13d2cc:	e3500000 	cmp	r0, #0
  13d2d0:	1afffff5 	bne	13d2ac <__bin_chunk+0x5f0>
  13d2d4:	e59db00c 	ldr	fp, [sp, #12]
  13d2d8:	eaffff71 	b	13d0a4 <__bin_chunk+0x3e8>
  13d2dc:	0014ec60 	.word	0x0014ec60
  13d2e0:	0014d3d8 	.word	0x0014d3d8
  13d2e4:	0015d094 	.word	0x0015d094
  13d2e8:	0014d3d4 	.word	0x0014d3d4
  13d2ec:	0014cd3c 	.word	0x0014cd3c
  13d2f0:	0014f060 	.word	0x0014f060
  13d2f4:	0014f068 	.word	0x0014f068
  13d2f8:	fffff000 	.word	0xfffff000
  13d2fc:	0014ec64 	.word	0x0014ec64

0013d300 <trim>:
  13d300:	e5903004 	ldr	r3, [r0, #4]
  13d304:	e1a02000 	mov	r2, r0
  13d308:	e3c33001 	bic	r3, r3, #1
  13d30c:	e2430010 	sub	r0, r3, #16
  13d310:	e1500001 	cmp	r0, r1
  13d314:	912fff1e 	bxls	lr
  13d318:	e043c001 	sub	ip, r3, r1
  13d31c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d320:	e38cc001 	orr	ip, ip, #1
  13d324:	e381e001 	orr	lr, r1, #1
  13d328:	e0820001 	add	r0, r2, r1
  13d32c:	e782e001 	str	lr, [r2, r1]
  13d330:	e580c004 	str	ip, [r0, #4]
  13d334:	e782c003 	str	ip, [r2, r3]
  13d338:	e582e004 	str	lr, [r2, #4]
  13d33c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d340:	eafffe5d 	b	13ccbc <__bin_chunk>

0013d344 <malloc>:
  13d344:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d348:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13d34c:	e28d3028 	add	r3, sp, #40	; 0x28
  13d350:	e523000c 	str	r0, [r3, #-12]!
  13d354:	e1a00003 	mov	r0, r3
  13d358:	ebfffcb1 	bl	13c624 <adjust_size>
  13d35c:	e3500000 	cmp	r0, #0
  13d360:	ba000145 	blt	13d87c <malloc+0x538>
  13d364:	e59d301c 	ldr	r3, [sp, #28]
  13d368:	e3530907 	cmp	r3, #114688	; 0x1c000
  13d36c:	8a000076 	bhi	13d54c <malloc+0x208>
  13d370:	e1a03223 	lsr	r3, r3, #4
  13d374:	e2432001 	sub	r2, r3, #1
  13d378:	e3520020 	cmp	r2, #32
  13d37c:	958d2018 	strls	r2, [sp, #24]
  13d380:	8a000066 	bhi	13d520 <malloc+0x1dc>
  13d384:	e3a01001 	mov	r1, #1
  13d388:	e59dc018 	ldr	ip, [sp, #24]
  13d38c:	e59f85a8 	ldr	r8, [pc, #1448]	; 13d93c <malloc+0x5f8>
  13d390:	e24c0020 	sub	r0, ip, #32
  13d394:	e1a03011 	lsl	r3, r1, r0
  13d398:	e1a02c11 	lsl	r2, r1, ip
  13d39c:	e26c0020 	rsb	r0, ip, #32
  13d3a0:	e2722000 	rsbs	r2, r2, #0
  13d3a4:	e1833031 	orr	r3, r3, r1, lsr r0
  13d3a8:	e2e33000 	rsc	r3, r3, #0
  13d3ac:	e58d2010 	str	r2, [sp, #16]
  13d3b0:	e58d3014 	str	r3, [sp, #20]
  13d3b4:	e59fb584 	ldr	fp, [pc, #1412]	; 13d940 <malloc+0x5fc>
  13d3b8:	e59f6584 	ldr	r6, [pc, #1412]	; 13d944 <malloc+0x600>
  13d3bc:	e898000c 	ldm	r8, {r2, r3}
  13d3c0:	e28d1010 	add	r1, sp, #16
  13d3c4:	e8910003 	ldm	r1, {r0, r1}
  13d3c8:	e0011003 	and	r1, r1, r3
  13d3cc:	e0000002 	and	r0, r0, r2
  13d3d0:	e1a02000 	mov	r2, r0
  13d3d4:	e1a03001 	mov	r3, r1
  13d3d8:	e1921003 	orrs	r1, r2, r3
  13d3dc:	0a000073 	beq	13d5b0 <malloc+0x26c>
  13d3e0:	e3500000 	cmp	r0, #0
  13d3e4:	1a000048 	bne	13d50c <malloc+0x1c8>
  13d3e8:	e2637000 	rsb	r7, r3, #0
  13d3ec:	e0077003 	and	r7, r7, r3
  13d3f0:	e16f7f17 	clz	r7, r7
  13d3f4:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d3f8:	e59b300c 	ldr	r3, [fp, #12]
  13d3fc:	e1a09207 	lsl	r9, r7, #4
  13d400:	e2899008 	add	r9, r9, #8
  13d404:	e3530000 	cmp	r3, #0
  13d408:	e0885009 	add	r5, r8, r9
  13d40c:	1285a004 	addne	sl, r5, #4
  13d410:	1a000030 	bne	13d4d8 <malloc+0x194>
  13d414:	e2873001 	add	r3, r7, #1
  13d418:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d41c:	e0882009 	add	r2, r8, r9
  13d420:	e3540000 	cmp	r4, #0
  13d424:	00881203 	addeq	r1, r8, r3, lsl #4
  13d428:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d42c:	05812004 	streq	r2, [r1, #4]
  13d430:	0a000001 	beq	13d43c <malloc+0xf8>
  13d434:	e1540002 	cmp	r4, r2
  13d438:	1a00009d 	bne	13d6b4 <malloc+0x370>
  13d43c:	e7983009 	ldr	r3, [r8, r9]
  13d440:	e3530000 	cmp	r3, #0
  13d444:	0affffdc 	beq	13d3bc <malloc+0x78>
  13d448:	e59f24f8 	ldr	r2, [pc, #1272]	; 13d948 <malloc+0x604>
  13d44c:	e592c000 	ldr	ip, [r2]
  13d450:	e12fff3c 	blx	ip
  13d454:	e3a03000 	mov	r3, #0
  13d458:	e592c000 	ldr	ip, [r2]
  13d45c:	e5853000 	str	r3, [r5]
  13d460:	e12fff3c 	blx	ip
  13d464:	e5953004 	ldr	r3, [r5, #4]
  13d468:	e3530000 	cmp	r3, #0
  13d46c:	0affffd2 	beq	13d3bc <malloc+0x78>
  13d470:	e3a000f0 	mov	r0, #240	; 0xf0
  13d474:	ebfffbca 	bl	13c3a4 <get_rtt_syscall>
  13d478:	e2503000 	subs	r3, r0, #0
  13d47c:	0affffce 	beq	13d3bc <malloc+0x78>
  13d480:	e3a02001 	mov	r2, #1
  13d484:	e3a01081 	mov	r1, #129	; 0x81
  13d488:	e1a00005 	mov	r0, r5
  13d48c:	e12fff33 	blx	r3
  13d490:	e3700026 	cmn	r0, #38	; 0x26
  13d494:	1affffc8 	bne	13d3bc <malloc+0x78>
  13d498:	e3a000f0 	mov	r0, #240	; 0xf0
  13d49c:	ebfffbc0 	bl	13c3a4 <get_rtt_syscall>
  13d4a0:	e2503000 	subs	r3, r0, #0
  13d4a4:	0affffc4 	beq	13d3bc <malloc+0x78>
  13d4a8:	e3a02001 	mov	r2, #1
  13d4ac:	e1a00005 	mov	r0, r5
  13d4b0:	e1a01002 	mov	r1, r2
  13d4b4:	e12fff33 	blx	r3
  13d4b8:	eaffffbf 	b	13d3bc <malloc+0x78>
  13d4bc:	e3540000 	cmp	r4, #0
  13d4c0:	0affffd3 	beq	13d414 <malloc+0xd0>
  13d4c4:	e1a03001 	mov	r3, r1
  13d4c8:	e1a02001 	mov	r2, r1
  13d4cc:	e1a00005 	mov	r0, r5
  13d4d0:	e1a0100a 	mov	r1, sl
  13d4d4:	eb00121a 	bl	141d44 <__wait>
  13d4d8:	e5954000 	ldr	r4, [r5]
  13d4dc:	ea000002 	b	13d4ec <malloc+0x1a8>
  13d4e0:	e5953000 	ldr	r3, [r5]
  13d4e4:	e1540003 	cmp	r4, r3
  13d4e8:	1afffffa 	bne	13d4d8 <malloc+0x194>
  13d4ec:	e1a00004 	mov	r0, r4
  13d4f0:	e3a01001 	mov	r1, #1
  13d4f4:	e1a02005 	mov	r2, r5
  13d4f8:	e5963000 	ldr	r3, [r6]
  13d4fc:	e12fff33 	blx	r3
  13d500:	e3500000 	cmp	r0, #0
  13d504:	1afffff5 	bne	13d4e0 <malloc+0x19c>
  13d508:	eaffffeb 	b	13d4bc <malloc+0x178>
  13d50c:	e2607000 	rsb	r7, r0, #0
  13d510:	e0077000 	and	r7, r7, r0
  13d514:	e16f7f17 	clz	r7, r7
  13d518:	e267701f 	rsb	r7, r7, #31
  13d51c:	eaffffb5 	b	13d3f8 <malloc+0xb4>
  13d520:	e2433002 	sub	r3, r3, #2
  13d524:	e59f2420 	ldr	r2, [pc, #1056]	; 13d94c <malloc+0x608>
  13d528:	e3530c02 	cmp	r3, #512	; 0x200
  13d52c:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d530:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d534:	35533004 	ldrbcc	r3, [r3, #-4]
  13d538:	25533004 	ldrbcs	r3, [r3, #-4]
  13d53c:	32833001 	addcc	r3, r3, #1
  13d540:	22833011 	addcs	r3, r3, #17
  13d544:	e58d3018 	str	r3, [sp, #24]
  13d548:	eaffff8d 	b	13d384 <malloc+0x40>
  13d54c:	e3e02000 	mvn	r2, #0
  13d550:	e3a06000 	mov	r6, #0
  13d554:	e3a07000 	mov	r7, #0
  13d558:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d55c:	e2833007 	add	r3, r3, #7
  13d560:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d564:	e3c4400f 	bic	r4, r4, #15
  13d568:	e58d2000 	str	r2, [sp]
  13d56c:	e1a01004 	mov	r1, r4
  13d570:	e58d6008 	str	r6, [sp, #8]
  13d574:	e58d700c 	str	r7, [sp, #12]
  13d578:	e3a03022 	mov	r3, #34	; 0x22
  13d57c:	e3a02003 	mov	r2, #3
  13d580:	e3a00000 	mov	r0, #0
  13d584:	eb0001c9 	bl	13dcb0 <__mmap>
  13d588:	e3700001 	cmn	r0, #1
  13d58c:	0a0000ba 	beq	13d87c <malloc+0x538>
  13d590:	e3a03008 	mov	r3, #8
  13d594:	e2444008 	sub	r4, r4, #8
  13d598:	e580400c 	str	r4, [r0, #12]
  13d59c:	e5803008 	str	r3, [r0, #8]
  13d5a0:	e2804010 	add	r4, r0, #16
  13d5a4:	e1a00004 	mov	r0, r4
  13d5a8:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d5ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d5b0:	e59b200c 	ldr	r2, [fp, #12]
  13d5b4:	e59d301c 	ldr	r3, [sp, #28]
  13d5b8:	e3520000 	cmp	r2, #0
  13d5bc:	e2833010 	add	r3, r3, #16
  13d5c0:	e59f5388 	ldr	r5, [pc, #904]	; 13d950 <malloc+0x60c>
  13d5c4:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d5c8:	1a000094 	bne	13d820 <malloc+0x4dc>
  13d5cc:	e28d0024 	add	r0, sp, #36	; 0x24
  13d5d0:	eb001717 	bl	143234 <__expand_heap>
  13d5d4:	e2504000 	subs	r4, r0, #0
  13d5d8:	0a0000b8 	beq	13d8c0 <malloc+0x57c>
  13d5dc:	e59f1370 	ldr	r1, [pc, #880]	; 13d954 <malloc+0x610>
  13d5e0:	e3a07001 	mov	r7, #1
  13d5e4:	e5916000 	ldr	r6, [r1]
  13d5e8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d5ec:	e1540006 	cmp	r4, r6
  13d5f0:	13a02001 	movne	r2, #1
  13d5f4:	e5950000 	ldr	r0, [r5]
  13d5f8:	12433010 	subne	r3, r3, #16
  13d5fc:	12846010 	addne	r6, r4, #16
  13d600:	15842008 	strne	r2, [r4, #8]
  13d604:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d608:	e0862003 	add	r2, r6, r3
  13d60c:	e3500000 	cmp	r0, #0
  13d610:	e1833007 	orr	r3, r3, r7
  13d614:	e9020088 	stmdb	r2, {r3, r7}
  13d618:	e5812000 	str	r2, [r1]
  13d61c:	e5063004 	str	r3, [r6, #-4]
  13d620:	e2464008 	sub	r4, r6, #8
  13d624:	0a000009 	beq	13d650 <malloc+0x30c>
  13d628:	e59f3318 	ldr	r3, [pc, #792]	; 13d948 <malloc+0x604>
  13d62c:	e593c000 	ldr	ip, [r3]
  13d630:	e12fff3c 	blx	ip
  13d634:	e3a02000 	mov	r2, #0
  13d638:	e593c000 	ldr	ip, [r3]
  13d63c:	e5852000 	str	r2, [r5]
  13d640:	e12fff3c 	blx	ip
  13d644:	e5953004 	ldr	r3, [r5, #4]
  13d648:	e1530002 	cmp	r3, r2
  13d64c:	1a000060 	bne	13d7d4 <malloc+0x490>
  13d650:	e3540000 	cmp	r4, #0
  13d654:	0a000088 	beq	13d87c <malloc+0x538>
  13d658:	e1a00004 	mov	r0, r4
  13d65c:	ebfffcf4 	bl	13ca34 <alloc_rev>
  13d660:	e3500000 	cmp	r0, #0
  13d664:	0a00000b 	beq	13d698 <malloc+0x354>
  13d668:	e5163008 	ldr	r3, [r6, #-8]
  13d66c:	e5161004 	ldr	r1, [r6, #-4]
  13d670:	e3c33001 	bic	r3, r3, #1
  13d674:	e0443003 	sub	r3, r4, r3
  13d678:	e5932004 	ldr	r2, [r3, #4]
  13d67c:	e3c22001 	bic	r2, r2, #1
  13d680:	e0822001 	add	r2, r2, r1
  13d684:	e5832004 	str	r2, [r3, #4]
  13d688:	e5161004 	ldr	r1, [r6, #-4]
  13d68c:	e3c11001 	bic	r1, r1, #1
  13d690:	e7842001 	str	r2, [r4, r1]
  13d694:	e1a04003 	mov	r4, r3
  13d698:	e1a00004 	mov	r0, r4
  13d69c:	e59d101c 	ldr	r1, [sp, #28]
  13d6a0:	e2844008 	add	r4, r4, #8
  13d6a4:	ebffff15 	bl	13d300 <trim>
  13d6a8:	e1a00004 	mov	r0, r4
  13d6ac:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d6b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d6b4:	e3570027 	cmp	r7, #39	; 0x27
  13d6b8:	da000041 	ble	13d7c4 <malloc+0x480>
  13d6bc:	e59d3018 	ldr	r3, [sp, #24]
  13d6c0:	e59d001c 	ldr	r0, [sp, #28]
  13d6c4:	e2833002 	add	r3, r3, #2
  13d6c8:	e1570003 	cmp	r7, r3
  13d6cc:	da00003a 	ble	13d7bc <malloc+0x478>
  13d6d0:	e5942004 	ldr	r2, [r4, #4]
  13d6d4:	e3c22001 	bic	r2, r2, #1
  13d6d8:	e0421000 	sub	r1, r2, r0
  13d6dc:	e1a03221 	lsr	r3, r1, #4
  13d6e0:	e2433001 	sub	r3, r3, #1
  13d6e4:	e3530020 	cmp	r3, #32
  13d6e8:	9a000035 	bls	13d7c4 <malloc+0x480>
  13d6ec:	e3530c02 	cmp	r3, #512	; 0x200
  13d6f0:	2a000065 	bcs	13d88c <malloc+0x548>
  13d6f4:	e59fc250 	ldr	ip, [pc, #592]	; 13d94c <malloc+0x608>
  13d6f8:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d6fc:	e5533004 	ldrb	r3, [r3, #-4]
  13d700:	e1570003 	cmp	r7, r3
  13d704:	1a00002e 	bne	13d7c4 <malloc+0x480>
  13d708:	e594c00c 	ldr	ip, [r4, #12]
  13d70c:	e594e008 	ldr	lr, [r4, #8]
  13d710:	e0843000 	add	r3, r4, r0
  13d714:	e583c00c 	str	ip, [r3, #12]
  13d718:	e583e008 	str	lr, [r3, #8]
  13d71c:	e58c3008 	str	r3, [ip, #8]
  13d720:	e593e008 	ldr	lr, [r3, #8]
  13d724:	e380c001 	orr	ip, r0, #1
  13d728:	e58e300c 	str	r3, [lr, #12]
  13d72c:	e784c000 	str	ip, [r4, r0]
  13d730:	e5831004 	str	r1, [r3, #4]
  13d734:	e7841002 	str	r1, [r4, r2]
  13d738:	e584c004 	str	ip, [r4, #4]
  13d73c:	e5953000 	ldr	r3, [r5]
  13d740:	e3530000 	cmp	r3, #0
  13d744:	0affffd3 	beq	13d698 <malloc+0x354>
  13d748:	e59f31f8 	ldr	r3, [pc, #504]	; 13d948 <malloc+0x604>
  13d74c:	e593c000 	ldr	ip, [r3]
  13d750:	e12fff3c 	blx	ip
  13d754:	e3a02000 	mov	r2, #0
  13d758:	e593c000 	ldr	ip, [r3]
  13d75c:	e5852000 	str	r2, [r5]
  13d760:	e12fff3c 	blx	ip
  13d764:	e5953004 	ldr	r3, [r5, #4]
  13d768:	e1530002 	cmp	r3, r2
  13d76c:	0affffc9 	beq	13d698 <malloc+0x354>
  13d770:	e3a000f0 	mov	r0, #240	; 0xf0
  13d774:	ebfffb0a 	bl	13c3a4 <get_rtt_syscall>
  13d778:	e2503000 	subs	r3, r0, #0
  13d77c:	0affffc5 	beq	13d698 <malloc+0x354>
  13d780:	e3a02001 	mov	r2, #1
  13d784:	e3a01081 	mov	r1, #129	; 0x81
  13d788:	e1a00005 	mov	r0, r5
  13d78c:	e12fff33 	blx	r3
  13d790:	e3700026 	cmn	r0, #38	; 0x26
  13d794:	1affffbf 	bne	13d698 <malloc+0x354>
  13d798:	e3a000f0 	mov	r0, #240	; 0xf0
  13d79c:	ebfffb00 	bl	13c3a4 <get_rtt_syscall>
  13d7a0:	e2503000 	subs	r3, r0, #0
  13d7a4:	0affffbb 	beq	13d698 <malloc+0x354>
  13d7a8:	e3a02001 	mov	r2, #1
  13d7ac:	e1a00005 	mov	r0, r5
  13d7b0:	e1a01002 	mov	r1, r2
  13d7b4:	e12fff33 	blx	r3
  13d7b8:	eaffffb6 	b	13d698 <malloc+0x354>
  13d7bc:	e357003f 	cmp	r7, #63	; 0x3f
  13d7c0:	0a000038 	beq	13d8a8 <malloc+0x564>
  13d7c4:	e1a01007 	mov	r1, r7
  13d7c8:	e1a00004 	mov	r0, r4
  13d7cc:	ebfffbae 	bl	13c68c <unbin>
  13d7d0:	eaffffd9 	b	13d73c <malloc+0x3f8>
  13d7d4:	e3a000f0 	mov	r0, #240	; 0xf0
  13d7d8:	ebfffaf1 	bl	13c3a4 <get_rtt_syscall>
  13d7dc:	e2503000 	subs	r3, r0, #0
  13d7e0:	0affff9a 	beq	13d650 <malloc+0x30c>
  13d7e4:	e1a02007 	mov	r2, r7
  13d7e8:	e3a01081 	mov	r1, #129	; 0x81
  13d7ec:	e59f015c 	ldr	r0, [pc, #348]	; 13d950 <malloc+0x60c>
  13d7f0:	e12fff33 	blx	r3
  13d7f4:	e3700026 	cmn	r0, #38	; 0x26
  13d7f8:	1affff94 	bne	13d650 <malloc+0x30c>
  13d7fc:	e3a000f0 	mov	r0, #240	; 0xf0
  13d800:	ebfffae7 	bl	13c3a4 <get_rtt_syscall>
  13d804:	e2503000 	subs	r3, r0, #0
  13d808:	0affff90 	beq	13d650 <malloc+0x30c>
  13d80c:	e1a02007 	mov	r2, r7
  13d810:	e1a01007 	mov	r1, r7
  13d814:	e59f0134 	ldr	r0, [pc, #308]	; 13d950 <malloc+0x60c>
  13d818:	e12fff33 	blx	r3
  13d81c:	eaffff8b 	b	13d650 <malloc+0x30c>
  13d820:	e1a06005 	mov	r6, r5
  13d824:	e59f7118 	ldr	r7, [pc, #280]	; 13d944 <malloc+0x600>
  13d828:	e2858004 	add	r8, r5, #4
  13d82c:	e5954000 	ldr	r4, [r5]
  13d830:	ea000002 	b	13d840 <malloc+0x4fc>
  13d834:	e5953000 	ldr	r3, [r5]
  13d838:	e1540003 	cmp	r4, r3
  13d83c:	1afffffa 	bne	13d82c <malloc+0x4e8>
  13d840:	e1a00004 	mov	r0, r4
  13d844:	e3a01001 	mov	r1, #1
  13d848:	e1a02006 	mov	r2, r6
  13d84c:	e5973000 	ldr	r3, [r7]
  13d850:	e12fff33 	blx	r3
  13d854:	e3500000 	cmp	r0, #0
  13d858:	1afffff5 	bne	13d834 <malloc+0x4f0>
  13d85c:	e3540000 	cmp	r4, #0
  13d860:	0affff59 	beq	13d5cc <malloc+0x288>
  13d864:	e1a03001 	mov	r3, r1
  13d868:	e1a02001 	mov	r2, r1
  13d86c:	e59f00dc 	ldr	r0, [pc, #220]	; 13d950 <malloc+0x60c>
  13d870:	e1a01008 	mov	r1, r8
  13d874:	eb001132 	bl	141d44 <__wait>
  13d878:	eaffffeb 	b	13d82c <malloc+0x4e8>
  13d87c:	e3a04000 	mov	r4, #0
  13d880:	e1a00004 	mov	r0, r4
  13d884:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d888:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d88c:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d890:	959fc0b4 	ldrls	ip, [pc, #180]	; 13d94c <malloc+0x608>
  13d894:	83a0303f 	movhi	r3, #63	; 0x3f
  13d898:	908c33a3 	addls	r3, ip, r3, lsr #7
  13d89c:	95533004 	ldrbls	r3, [r3, #-4]
  13d8a0:	92833010 	addls	r3, r3, #16
  13d8a4:	eaffff95 	b	13d700 <malloc+0x3bc>
  13d8a8:	e5942004 	ldr	r2, [r4, #4]
  13d8ac:	e3c22001 	bic	r2, r2, #1
  13d8b0:	e0421000 	sub	r1, r2, r0
  13d8b4:	e3510907 	cmp	r1, #114688	; 0x1c000
  13d8b8:	8affff87 	bhi	13d6dc <malloc+0x398>
  13d8bc:	eaffffc0 	b	13d7c4 <malloc+0x480>
  13d8c0:	e5953000 	ldr	r3, [r5]
  13d8c4:	e3530000 	cmp	r3, #0
  13d8c8:	0affffeb 	beq	13d87c <malloc+0x538>
  13d8cc:	e59f3074 	ldr	r3, [pc, #116]	; 13d948 <malloc+0x604>
  13d8d0:	e593c000 	ldr	ip, [r3]
  13d8d4:	e12fff3c 	blx	ip
  13d8d8:	e5854000 	str	r4, [r5]
  13d8dc:	e593c000 	ldr	ip, [r3]
  13d8e0:	e12fff3c 	blx	ip
  13d8e4:	e5953004 	ldr	r3, [r5, #4]
  13d8e8:	e3530000 	cmp	r3, #0
  13d8ec:	0affffe2 	beq	13d87c <malloc+0x538>
  13d8f0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d8f4:	ebfffaaa 	bl	13c3a4 <get_rtt_syscall>
  13d8f8:	e2503000 	subs	r3, r0, #0
  13d8fc:	0affffde 	beq	13d87c <malloc+0x538>
  13d900:	e3a02001 	mov	r2, #1
  13d904:	e3a01081 	mov	r1, #129	; 0x81
  13d908:	e59f0040 	ldr	r0, [pc, #64]	; 13d950 <malloc+0x60c>
  13d90c:	e12fff33 	blx	r3
  13d910:	e3700026 	cmn	r0, #38	; 0x26
  13d914:	1affffd8 	bne	13d87c <malloc+0x538>
  13d918:	e3a000f0 	mov	r0, #240	; 0xf0
  13d91c:	ebfffaa0 	bl	13c3a4 <get_rtt_syscall>
  13d920:	e2503000 	subs	r3, r0, #0
  13d924:	0affffd4 	beq	13d87c <malloc+0x538>
  13d928:	e3a02001 	mov	r2, #1
  13d92c:	e59f001c 	ldr	r0, [pc, #28]	; 13d950 <malloc+0x60c>
  13d930:	e1a01002 	mov	r1, r2
  13d934:	e12fff33 	blx	r3
  13d938:	eaffff19 	b	13d5a4 <malloc+0x260>
  13d93c:	0014ec60 	.word	0x0014ec60
  13d940:	0015d094 	.word	0x0015d094
  13d944:	0014d3d8 	.word	0x0014d3d8
  13d948:	0014d3d4 	.word	0x0014d3d4
  13d94c:	0014cd3c 	.word	0x0014cd3c
  13d950:	0014ec54 	.word	0x0014ec54
  13d954:	0014ec50 	.word	0x0014ec50

0013d958 <calloc>:
  13d958:	e3510000 	cmp	r1, #0
  13d95c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d960:	0a000002 	beq	13d970 <calloc+0x18>
  13d964:	e0832190 	umull	r2, r3, r0, r1
  13d968:	e3530000 	cmp	r3, #0
  13d96c:	1a000013 	bne	13d9c0 <calloc+0x68>
  13d970:	e0040190 	mul	r4, r0, r1
  13d974:	e1a00004 	mov	r0, r4
  13d978:	ebfffe71 	bl	13d344 <malloc>
  13d97c:	e2509000 	subs	r9, r0, #0
  13d980:	0a000012 	beq	13d9d0 <calloc+0x78>
  13d984:	e59f30a0 	ldr	r3, [pc, #160]	; 13da2c <calloc+0xd4>
  13d988:	e5933000 	ldr	r3, [r3]
  13d98c:	e3530000 	cmp	r3, #0
  13d990:	1a000005 	bne	13d9ac <calloc+0x54>
  13d994:	e5193004 	ldr	r3, [r9, #-4]
  13d998:	e3130001 	tst	r3, #1
  13d99c:	0a00000b 	beq	13d9d0 <calloc+0x78>
  13d9a0:	e59f3088 	ldr	r3, [pc, #136]	; 13da30 <calloc+0xd8>
  13d9a4:	e1540003 	cmp	r4, r3
  13d9a8:	8a00000a 	bhi	13d9d8 <calloc+0x80>
  13d9ac:	e1a02004 	mov	r2, r4
  13d9b0:	e1a00009 	mov	r0, r9
  13d9b4:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d9b8:	e3a01000 	mov	r1, #0
  13d9bc:	ea000e28 	b	141264 <memset>
  13d9c0:	ebffed41 	bl	138ecc <__errno_location>
  13d9c4:	e3a0300c 	mov	r3, #12
  13d9c8:	e3a09000 	mov	r9, #0
  13d9cc:	e5803000 	str	r3, [r0]
  13d9d0:	e1a00009 	mov	r0, r9
  13d9d4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d9d8:	e1a08003 	mov	r8, r3
  13d9dc:	e0890004 	add	r0, r9, r4
  13d9e0:	e0002003 	and	r2, r0, r3
  13d9e4:	e0400002 	sub	r0, r0, r2
  13d9e8:	e3a01000 	mov	r1, #0
  13d9ec:	eb000e1c 	bl	141264 <memset>
  13d9f0:	e0404009 	sub	r4, r0, r9
  13d9f4:	e1540008 	cmp	r4, r8
  13d9f8:	9affffeb 	bls	13d9ac <calloc+0x54>
  13d9fc:	e3a02a01 	mov	r2, #4096	; 0x1000
  13da00:	e9100030 	ldmdb	r0, {r4, r5}
  13da04:	e2407010 	sub	r7, r0, #16
  13da08:	e89700c0 	ldm	r7, {r6, r7}
  13da0c:	e184b006 	orr	fp, r4, r6
  13da10:	e185c007 	orr	ip, r5, r7
  13da14:	e19b300c 	orrs	r3, fp, ip
  13da18:	1afffff1 	bne	13d9e4 <calloc+0x8c>
  13da1c:	e2522010 	subs	r2, r2, #16
  13da20:	e2400010 	sub	r0, r0, #16
  13da24:	1afffff5 	bne	13da00 <calloc+0xa8>
  13da28:	eaffffed 	b	13d9e4 <calloc+0x8c>
  13da2c:	0015d0d8 	.word	0x0015d0d8
  13da30:	00000fff 	.word	0x00000fff

0013da34 <free>:
  13da34:	e2502000 	subs	r2, r0, #0
  13da38:	012fff1e 	bxeq	lr
  13da3c:	e5123004 	ldr	r3, [r2, #-4]
  13da40:	e2420008 	sub	r0, r2, #8
  13da44:	e3130001 	tst	r3, #1
  13da48:	0a000000 	beq	13da50 <free+0x1c>
  13da4c:	eafffc9a 	b	13ccbc <__bin_chunk>
  13da50:	e5121008 	ldr	r1, [r2, #-8]
  13da54:	e3c33001 	bic	r3, r3, #1
  13da58:	e3110001 	tst	r1, #1
  13da5c:	e0400001 	sub	r0, r0, r1
  13da60:	e0831001 	add	r1, r3, r1
  13da64:	0a000000 	beq	13da6c <free+0x38>
  13da68:	e7f000f0 	.word	0xe7f000f0
  13da6c:	ea0000f5 	b	13de48 <__munmap>

0013da70 <realloc>:
  13da70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13da74:	e2505000 	subs	r5, r0, #0
  13da78:	e24dd008 	sub	sp, sp, #8
  13da7c:	e58d1004 	str	r1, [sp, #4]
  13da80:	0a000034 	beq	13db58 <realloc+0xe8>
  13da84:	e28d0004 	add	r0, sp, #4
  13da88:	ebfffae5 	bl	13c624 <adjust_size>
  13da8c:	e3500000 	cmp	r0, #0
  13da90:	ba00005b 	blt	13dc04 <realloc+0x194>
  13da94:	e5153004 	ldr	r3, [r5, #-4]
  13da98:	e2459008 	sub	r9, r5, #8
  13da9c:	e3130001 	tst	r3, #1
  13daa0:	e3c36001 	bic	r6, r3, #1
  13daa4:	0a000010 	beq	13daec <realloc+0x7c>
  13daa8:	e7992006 	ldr	r2, [r9, r6]
  13daac:	e0894006 	add	r4, r9, r6
  13dab0:	e1530002 	cmp	r3, r2
  13dab4:	0a000000 	beq	13dabc <realloc+0x4c>
  13dab8:	e7f000f0 	.word	0xe7f000f0
  13dabc:	e59d1004 	ldr	r1, [sp, #4]
  13dac0:	e1510006 	cmp	r1, r6
  13dac4:	93866001 	orrls	r6, r6, #1
  13dac8:	95056004 	strls	r6, [r5, #-4]
  13dacc:	95846000 	strls	r6, [r4]
  13dad0:	8a000038 	bhi	13dbb8 <realloc+0x148>
  13dad4:	e1a00009 	mov	r0, r9
  13dad8:	ebfffe08 	bl	13d300 <trim>
  13dadc:	e1a07005 	mov	r7, r5
  13dae0:	e1a00007 	mov	r0, r7
  13dae4:	e28dd008 	add	sp, sp, #8
  13dae8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13daec:	e5158008 	ldr	r8, [r5, #-8]
  13daf0:	e59d4004 	ldr	r4, [sp, #4]
  13daf4:	e3180001 	tst	r8, #1
  13daf8:	e086a008 	add	sl, r6, r8
  13dafc:	e0884004 	add	r4, r8, r4
  13db00:	1a00001a 	bne	13db70 <realloc+0x100>
  13db04:	e3540a01 	cmp	r4, #4096	; 0x1000
  13db08:	3a00001b 	bcc	13db7c <realloc+0x10c>
  13db0c:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13db10:	e284400f 	add	r4, r4, #15
  13db14:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13db18:	e3c4400f 	bic	r4, r4, #15
  13db1c:	e15a0004 	cmp	sl, r4
  13db20:	01a07005 	moveq	r7, r5
  13db24:	0affffed 	beq	13dae0 <realloc+0x70>
  13db28:	e1a0100a 	mov	r1, sl
  13db2c:	e0490008 	sub	r0, r9, r8
  13db30:	e3a03001 	mov	r3, #1
  13db34:	e1a02004 	mov	r2, r4
  13db38:	eb000099 	bl	13dda4 <__mremap>
  13db3c:	e3700001 	cmn	r0, #1
  13db40:	0a000031 	beq	13dc0c <realloc+0x19c>
  13db44:	e0800008 	add	r0, r0, r8
  13db48:	e0444008 	sub	r4, r4, r8
  13db4c:	e5804004 	str	r4, [r0, #4]
  13db50:	e2807008 	add	r7, r0, #8
  13db54:	eaffffe1 	b	13dae0 <realloc+0x70>
  13db58:	e1a00001 	mov	r0, r1
  13db5c:	ebfffdf8 	bl	13d344 <malloc>
  13db60:	e1a07000 	mov	r7, r0
  13db64:	e1a00007 	mov	r0, r7
  13db68:	e28dd008 	add	sp, sp, #8
  13db6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13db70:	e7f000f0 	.word	0xe7f000f0
  13db74:	e3540a01 	cmp	r4, #4096	; 0x1000
  13db78:	2affffe3 	bcs	13db0c <realloc+0x9c>
  13db7c:	e59d0004 	ldr	r0, [sp, #4]
  13db80:	e2400008 	sub	r0, r0, #8
  13db84:	ebfffdee 	bl	13d344 <malloc>
  13db88:	e2507000 	subs	r7, r0, #0
  13db8c:	0affffde 	beq	13db0c <realloc+0x9c>
  13db90:	e59d6004 	ldr	r6, [sp, #4]
  13db94:	e2462008 	sub	r2, r6, #8
  13db98:	e1a01005 	mov	r1, r5
  13db9c:	e1a00007 	mov	r0, r7
  13dba0:	eb000c77 	bl	140d84 <memcpy>
  13dba4:	e1a00005 	mov	r0, r5
  13dba8:	ebffffa1 	bl	13da34 <free>
  13dbac:	e1a00007 	mov	r0, r7
  13dbb0:	e28dd008 	add	sp, sp, #8
  13dbb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dbb8:	e1a00004 	mov	r0, r4
  13dbbc:	ebfffafc 	bl	13c7b4 <alloc_fwd>
  13dbc0:	e3500000 	cmp	r0, #0
  13dbc4:	01a03006 	moveq	r3, r6
  13dbc8:	15943004 	ldrne	r3, [r4, #4]
  13dbcc:	059d1004 	ldreq	r1, [sp, #4]
  13dbd0:	13c33001 	bicne	r3, r3, #1
  13dbd4:	159d1004 	ldrne	r1, [sp, #4]
  13dbd8:	10844003 	addne	r4, r4, r3
  13dbdc:	10833006 	addne	r3, r3, r6
  13dbe0:	e1530001 	cmp	r3, r1
  13dbe4:	e3833001 	orr	r3, r3, #1
  13dbe8:	e5053004 	str	r3, [r5, #-4]
  13dbec:	e5843000 	str	r3, [r4]
  13dbf0:	2affffb7 	bcs	13dad4 <realloc+0x64>
  13dbf4:	e2410008 	sub	r0, r1, #8
  13dbf8:	ebfffdd1 	bl	13d344 <malloc>
  13dbfc:	e2507000 	subs	r7, r0, #0
  13dc00:	1affffe3 	bne	13db94 <realloc+0x124>
  13dc04:	e3a07000 	mov	r7, #0
  13dc08:	eaffffb4 	b	13dae0 <realloc+0x70>
  13dc0c:	e59d1004 	ldr	r1, [sp, #4]
  13dc10:	eafffff7 	b	13dbf4 <realloc+0x184>

0013dc14 <__malloc_donate>:
  13dc14:	e2602008 	rsb	r2, r0, #8
  13dc18:	e201300f 	and	r3, r1, #15
  13dc1c:	e202200f 	and	r2, r2, #15
  13dc20:	e2833008 	add	r3, r3, #8
  13dc24:	e0833002 	add	r3, r3, r2
  13dc28:	e041c000 	sub	ip, r1, r0
  13dc2c:	e15c0003 	cmp	ip, r3
  13dc30:	912fff1e 	bxls	lr
  13dc34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dc38:	e3a0e001 	mov	lr, #1
  13dc3c:	e2823008 	add	r3, r2, #8
  13dc40:	e0803003 	add	r3, r0, r3
  13dc44:	e3c1100f 	bic	r1, r1, #15
  13dc48:	e041c003 	sub	ip, r1, r3
  13dc4c:	e18cc00e 	orr	ip, ip, lr
  13dc50:	e501e004 	str	lr, [r1, #-4]
  13dc54:	e0800002 	add	r0, r0, r2
  13dc58:	e503e008 	str	lr, [r3, #-8]
  13dc5c:	e501c008 	str	ip, [r1, #-8]
  13dc60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dc64:	e503c004 	str	ip, [r3, #-4]
  13dc68:	eafffc13 	b	13ccbc <__bin_chunk>

0013dc6c <__madvise>:
  13dc6c:	e92d4070 	push	{r4, r5, r6, lr}
  13dc70:	e1a04000 	mov	r4, r0
  13dc74:	e3a000dc 	mov	r0, #220	; 0xdc
  13dc78:	e1a05001 	mov	r5, r1
  13dc7c:	e1a06002 	mov	r6, r2
  13dc80:	ebfff9c7 	bl	13c3a4 <get_rtt_syscall>
  13dc84:	e2503000 	subs	r3, r0, #0
  13dc88:	0a000005 	beq	13dca4 <__madvise+0x38>
  13dc8c:	e1a02006 	mov	r2, r6
  13dc90:	e1a01005 	mov	r1, r5
  13dc94:	e1a00004 	mov	r0, r4
  13dc98:	e12fff33 	blx	r3
  13dc9c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dca0:	eafff9f4 	b	13c478 <__syscall_ret>
  13dca4:	e1a00003 	mov	r0, r3
  13dca8:	eafffffb 	b	13dc9c <__madvise+0x30>

0013dcac <dummy>:
  13dcac:	e12fff1e 	bx	lr

0013dcb0 <__mmap>:
  13dcb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dcb4:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13dcb8:	e8950030 	ldm	r5, {r4, r5}
  13dcbc:	e24dd00c 	sub	sp, sp, #12
  13dcc0:	e28d7038 	add	r7, sp, #56	; 0x38
  13dcc4:	e89700c0 	ldm	r7, {r6, r7}
  13dcc8:	e0048006 	and	r8, r4, r6
  13dccc:	e0059007 	and	r9, r5, r7
  13dcd0:	e198c009 	orrs	ip, r8, r9
  13dcd4:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13dcd8:	1a000024 	bne	13dd70 <__mmap+0xc0>
  13dcdc:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13dce0:	e1a08001 	mov	r8, r1
  13dce4:	8a00001b 	bhi	13dd58 <__mmap+0xa8>
  13dce8:	e3130010 	tst	r3, #16
  13dcec:	e1a09000 	mov	r9, r0
  13dcf0:	e1a0a002 	mov	sl, r2
  13dcf4:	e1a05003 	mov	r5, r3
  13dcf8:	1a000022 	bne	13dd88 <__mmap+0xd8>
  13dcfc:	e3a000c0 	mov	r0, #192	; 0xc0
  13dd00:	ebfff9a7 	bl	13c3a4 <get_rtt_syscall>
  13dd04:	e1a03626 	lsr	r3, r6, #12
  13dd08:	e2504000 	subs	r4, r0, #0
  13dd0c:	e1833a07 	orr	r3, r3, r7, lsl #20
  13dd10:	0a00001e 	beq	13dd90 <__mmap+0xe0>
  13dd14:	e58d3004 	str	r3, [sp, #4]
  13dd18:	e58db000 	str	fp, [sp]
  13dd1c:	e1a0200a 	mov	r2, sl
  13dd20:	e1a01008 	mov	r1, r8
  13dd24:	e1a03005 	mov	r3, r5
  13dd28:	e1a00009 	mov	r0, r9
  13dd2c:	e12fff34 	blx	r4
  13dd30:	e3590000 	cmp	r9, #0
  13dd34:	03700001 	cmneq	r0, #1
  13dd38:	1a000003 	bne	13dd4c <__mmap+0x9c>
  13dd3c:	e2055030 	and	r5, r5, #48	; 0x30
  13dd40:	e3550020 	cmp	r5, #32
  13dd44:	03e0000b 	mvneq	r0, #11
  13dd48:	13e00000 	mvnne	r0, #0
  13dd4c:	e28dd00c 	add	sp, sp, #12
  13dd50:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dd54:	eafff9c7 	b	13c478 <__syscall_ret>
  13dd58:	ebffec5b 	bl	138ecc <__errno_location>
  13dd5c:	e3a0300c 	mov	r3, #12
  13dd60:	e5803000 	str	r3, [r0]
  13dd64:	e3e00000 	mvn	r0, #0
  13dd68:	e28dd00c 	add	sp, sp, #12
  13dd6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dd70:	ebffec55 	bl	138ecc <__errno_location>
  13dd74:	e3a03016 	mov	r3, #22
  13dd78:	e5803000 	str	r3, [r0]
  13dd7c:	e3e00000 	mvn	r0, #0
  13dd80:	e28dd00c 	add	sp, sp, #12
  13dd84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dd88:	eb00139d 	bl	142c04 <__vm_wait>
  13dd8c:	eaffffda 	b	13dcfc <__mmap+0x4c>
  13dd90:	e1a00004 	mov	r0, r4
  13dd94:	eaffffec 	b	13dd4c <__mmap+0x9c>
  13dd98:	00000fff 	.word	0x00000fff
  13dd9c:	fffff000 	.word	0xfffff000

0013dda0 <dummy>:
  13dda0:	e12fff1e 	bx	lr

0013dda4 <__mremap>:
  13dda4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13dda8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13ddac:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13ddb0:	e24dd014 	sub	sp, sp, #20
  13ddb4:	8a00001b 	bhi	13de28 <__mremap+0x84>
  13ddb8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13ddbc:	e1a05002 	mov	r5, r2
  13ddc0:	e2136002 	ands	r6, r3, #2
  13ddc4:	e1a07000 	mov	r7, r0
  13ddc8:	e1a08001 	mov	r8, r1
  13ddcc:	1a000010 	bne	13de14 <__mremap+0x70>
  13ddd0:	e3a000a3 	mov	r0, #163	; 0xa3
  13ddd4:	ebfff972 	bl	13c3a4 <get_rtt_syscall>
  13ddd8:	e2504000 	subs	r4, r0, #0
  13dddc:	0a000016 	beq	13de3c <__mremap+0x98>
  13dde0:	e58d6000 	str	r6, [sp]
  13dde4:	e1a02005 	mov	r2, r5
  13dde8:	e1a01008 	mov	r1, r8
  13ddec:	e1a00007 	mov	r0, r7
  13ddf0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13ddf4:	e12fff34 	blx	r4
  13ddf8:	ebfff99e 	bl	13c478 <__syscall_ret>
  13ddfc:	e1a03000 	mov	r3, r0
  13de00:	e1a00003 	mov	r0, r3
  13de04:	e28dd014 	add	sp, sp, #20
  13de08:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13de0c:	e28dd004 	add	sp, sp, #4
  13de10:	e12fff1e 	bx	lr
  13de14:	eb00137a 	bl	142c04 <__vm_wait>
  13de18:	e28d3030 	add	r3, sp, #48	; 0x30
  13de1c:	e58d300c 	str	r3, [sp, #12]
  13de20:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13de24:	eaffffe9 	b	13ddd0 <__mremap+0x2c>
  13de28:	ebffec27 	bl	138ecc <__errno_location>
  13de2c:	e3a0200c 	mov	r2, #12
  13de30:	e3e03000 	mvn	r3, #0
  13de34:	e5802000 	str	r2, [r0]
  13de38:	eafffff0 	b	13de00 <__mremap+0x5c>
  13de3c:	e1a00004 	mov	r0, r4
  13de40:	eaffffec 	b	13ddf8 <__mremap+0x54>

0013de44 <dummy>:
  13de44:	e12fff1e 	bx	lr

0013de48 <__munmap>:
  13de48:	e92d4070 	push	{r4, r5, r6, lr}
  13de4c:	e1a04000 	mov	r4, r0
  13de50:	e1a05001 	mov	r5, r1
  13de54:	eb00136a 	bl	142c04 <__vm_wait>
  13de58:	e3a0005b 	mov	r0, #91	; 0x5b
  13de5c:	ebfff950 	bl	13c3a4 <get_rtt_syscall>
  13de60:	e2503000 	subs	r3, r0, #0
  13de64:	0a000004 	beq	13de7c <__munmap+0x34>
  13de68:	e1a01005 	mov	r1, r5
  13de6c:	e1a00004 	mov	r0, r4
  13de70:	e12fff33 	blx	r3
  13de74:	e8bd4070 	pop	{r4, r5, r6, lr}
  13de78:	eafff97e 	b	13c478 <__syscall_ret>
  13de7c:	e1a00003 	mov	r0, r3
  13de80:	eafffffb 	b	13de74 <__munmap+0x2c>

0013de84 <accept>:
  13de84:	e3a0c000 	mov	ip, #0
  13de88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13de8c:	e24dd014 	sub	sp, sp, #20
  13de90:	e1a03002 	mov	r3, r2
  13de94:	e58dc008 	str	ip, [sp, #8]
  13de98:	e1a02001 	mov	r2, r1
  13de9c:	e58dc004 	str	ip, [sp, #4]
  13dea0:	e1a01000 	mov	r1, r0
  13dea4:	e58dc000 	str	ip, [sp]
  13dea8:	e59f000c 	ldr	r0, [pc, #12]	; 13debc <accept+0x38>
  13deac:	eb000fa3 	bl	141d40 <__syscall_cp>
  13deb0:	e28dd014 	add	sp, sp, #20
  13deb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13deb8:	eafff96e 	b	13c478 <__syscall_ret>
  13debc:	0000011d 	.word	0x0000011d

0013dec0 <bind>:
  13dec0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13dec4:	e1a05000 	mov	r5, r0
  13dec8:	e24dd00c 	sub	sp, sp, #12
  13decc:	e59f0040 	ldr	r0, [pc, #64]	; 13df14 <bind+0x54>
  13ded0:	e1a06001 	mov	r6, r1
  13ded4:	e1a07002 	mov	r7, r2
  13ded8:	ebfff931 	bl	13c3a4 <get_rtt_syscall>
  13dedc:	e2504000 	subs	r4, r0, #0
  13dee0:	0a000009 	beq	13df0c <bind+0x4c>
  13dee4:	e3a03000 	mov	r3, #0
  13dee8:	e1a02007 	mov	r2, r7
  13deec:	e1a01006 	mov	r1, r6
  13def0:	e1a00005 	mov	r0, r5
  13def4:	e58d3004 	str	r3, [sp, #4]
  13def8:	e58d3000 	str	r3, [sp]
  13defc:	e12fff34 	blx	r4
  13df00:	e28dd00c 	add	sp, sp, #12
  13df04:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13df08:	eafff95a 	b	13c478 <__syscall_ret>
  13df0c:	e1a00004 	mov	r0, r4
  13df10:	eafffffa 	b	13df00 <bind+0x40>
  13df14:	0000011a 	.word	0x0000011a

0013df18 <connect>:
  13df18:	e3a0c000 	mov	ip, #0
  13df1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13df20:	e24dd014 	sub	sp, sp, #20
  13df24:	e1a03002 	mov	r3, r2
  13df28:	e58dc008 	str	ip, [sp, #8]
  13df2c:	e1a02001 	mov	r2, r1
  13df30:	e58dc004 	str	ip, [sp, #4]
  13df34:	e1a01000 	mov	r1, r0
  13df38:	e58dc000 	str	ip, [sp]
  13df3c:	e59f000c 	ldr	r0, [pc, #12]	; 13df50 <connect+0x38>
  13df40:	eb000f7e 	bl	141d40 <__syscall_cp>
  13df44:	e28dd014 	add	sp, sp, #20
  13df48:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13df4c:	eafff949 	b	13c478 <__syscall_ret>
  13df50:	0000011b 	.word	0x0000011b

0013df54 <htonl>:
  13df54:	e0203860 	eor	r3, r0, r0, ror #16
  13df58:	e1a03423 	lsr	r3, r3, #8
  13df5c:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13df60:	e0230460 	eor	r0, r3, r0, ror #8
  13df64:	e12fff1e 	bx	lr

0013df68 <htons>:
  13df68:	e1a03420 	lsr	r3, r0, #8
  13df6c:	e1830400 	orr	r0, r3, r0, lsl #8
  13df70:	e1a00800 	lsl	r0, r0, #16
  13df74:	e1a00820 	lsr	r0, r0, #16
  13df78:	e12fff1e 	bx	lr

0013df7c <listen>:
  13df7c:	e92d4070 	push	{r4, r5, r6, lr}
  13df80:	e1a05000 	mov	r5, r0
  13df84:	e24dd008 	sub	sp, sp, #8
  13df88:	e3a00f47 	mov	r0, #284	; 0x11c
  13df8c:	e1a06001 	mov	r6, r1
  13df90:	ebfff903 	bl	13c3a4 <get_rtt_syscall>
  13df94:	e2504000 	subs	r4, r0, #0
  13df98:	0a000009 	beq	13dfc4 <listen+0x48>
  13df9c:	e3a03000 	mov	r3, #0
  13dfa0:	e1a01006 	mov	r1, r6
  13dfa4:	e1a00005 	mov	r0, r5
  13dfa8:	e58d3004 	str	r3, [sp, #4]
  13dfac:	e58d3000 	str	r3, [sp]
  13dfb0:	e1a02003 	mov	r2, r3
  13dfb4:	e12fff34 	blx	r4
  13dfb8:	e28dd008 	add	sp, sp, #8
  13dfbc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dfc0:	eafff92c 	b	13c478 <__syscall_ret>
  13dfc4:	e1a00004 	mov	r0, r4
  13dfc8:	eafffffa 	b	13dfb8 <listen+0x3c>

0013dfcc <setsockopt>:
  13dfcc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13dfd0:	e1a05000 	mov	r5, r0
  13dfd4:	e24dd00c 	sub	sp, sp, #12
  13dfd8:	e59f004c 	ldr	r0, [pc, #76]	; 13e02c <setsockopt+0x60>
  13dfdc:	e1a06001 	mov	r6, r1
  13dfe0:	e1a07002 	mov	r7, r2
  13dfe4:	e1a08003 	mov	r8, r3
  13dfe8:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13dfec:	ebfff8ec 	bl	13c3a4 <get_rtt_syscall>
  13dff0:	e2504000 	subs	r4, r0, #0
  13dff4:	0a00000a 	beq	13e024 <setsockopt+0x58>
  13dff8:	e3a0c000 	mov	ip, #0
  13dffc:	e58d9000 	str	r9, [sp]
  13e000:	e1a03008 	mov	r3, r8
  13e004:	e1a02007 	mov	r2, r7
  13e008:	e1a01006 	mov	r1, r6
  13e00c:	e1a00005 	mov	r0, r5
  13e010:	e58dc004 	str	ip, [sp, #4]
  13e014:	e12fff34 	blx	r4
  13e018:	e28dd00c 	add	sp, sp, #12
  13e01c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13e020:	eafff914 	b	13c478 <__syscall_ret>
  13e024:	e1a00004 	mov	r0, r4
  13e028:	eafffffa 	b	13e018 <setsockopt+0x4c>
  13e02c:	00000126 	.word	0x00000126

0013e030 <socket>:
  13e030:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13e034:	e1a06000 	mov	r6, r0
  13e038:	e24dd00c 	sub	sp, sp, #12
  13e03c:	e59f0118 	ldr	r0, [pc, #280]	; 13e15c <socket+0x12c>
  13e040:	e1a05001 	mov	r5, r1
  13e044:	e1a07002 	mov	r7, r2
  13e048:	ebfff8d5 	bl	13c3a4 <get_rtt_syscall>
  13e04c:	e2504000 	subs	r4, r0, #0
  13e050:	0a000034 	beq	13e128 <socket+0xf8>
  13e054:	e3a03000 	mov	r3, #0
  13e058:	e1a02007 	mov	r2, r7
  13e05c:	e58d3004 	str	r3, [sp, #4]
  13e060:	e58d3000 	str	r3, [sp]
  13e064:	e1a01005 	mov	r1, r5
  13e068:	e1a00006 	mov	r0, r6
  13e06c:	e12fff34 	blx	r4
  13e070:	ebfff900 	bl	13c478 <__syscall_ret>
  13e074:	e2504000 	subs	r4, r0, #0
  13e078:	ba000002 	blt	13e088 <socket+0x58>
  13e07c:	e1a00004 	mov	r0, r4
  13e080:	e28dd00c 	add	sp, sp, #12
  13e084:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13e088:	ebffeb8f 	bl	138ecc <__errno_location>
  13e08c:	e5903000 	ldr	r3, [r0]
  13e090:	e3530016 	cmp	r3, #22
  13e094:	1a00001e 	bne	13e114 <socket+0xe4>
  13e098:	e59f30c0 	ldr	r3, [pc, #192]	; 13e160 <socket+0x130>
  13e09c:	e1150003 	tst	r5, r3
  13e0a0:	0afffff5 	beq	13e07c <socket+0x4c>
  13e0a4:	e59f00b0 	ldr	r0, [pc, #176]	; 13e15c <socket+0x12c>
  13e0a8:	ebfff8bd 	bl	13c3a4 <get_rtt_syscall>
  13e0ac:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13e0b0:	e2504000 	subs	r4, r0, #0
  13e0b4:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13e0b8:	0a000025 	beq	13e154 <socket+0x124>
  13e0bc:	e3a03000 	mov	r3, #0
  13e0c0:	e1a02007 	mov	r2, r7
  13e0c4:	e1a00006 	mov	r0, r6
  13e0c8:	e58d3004 	str	r3, [sp, #4]
  13e0cc:	e58d3000 	str	r3, [sp]
  13e0d0:	e12fff34 	blx	r4
  13e0d4:	ebfff8e7 	bl	13c478 <__syscall_ret>
  13e0d8:	e2504000 	subs	r4, r0, #0
  13e0dc:	baffffe6 	blt	13e07c <socket+0x4c>
  13e0e0:	e3150702 	tst	r5, #524288	; 0x80000
  13e0e4:	1a000011 	bne	13e130 <socket+0x100>
  13e0e8:	e3150b02 	tst	r5, #2048	; 0x800
  13e0ec:	0affffe2 	beq	13e07c <socket+0x4c>
  13e0f0:	e3a000dd 	mov	r0, #221	; 0xdd
  13e0f4:	ebfff8aa 	bl	13c3a4 <get_rtt_syscall>
  13e0f8:	e2503000 	subs	r3, r0, #0
  13e0fc:	0affffde 	beq	13e07c <socket+0x4c>
  13e100:	e3a02b02 	mov	r2, #2048	; 0x800
  13e104:	e3a01004 	mov	r1, #4
  13e108:	e1a00004 	mov	r0, r4
  13e10c:	e12fff33 	blx	r3
  13e110:	eaffffd9 	b	13e07c <socket+0x4c>
  13e114:	ebffeb6c 	bl	138ecc <__errno_location>
  13e118:	e5903000 	ldr	r3, [r0]
  13e11c:	e353005d 	cmp	r3, #93	; 0x5d
  13e120:	1affffd5 	bne	13e07c <socket+0x4c>
  13e124:	eaffffdb 	b	13e098 <socket+0x68>
  13e128:	e1a00004 	mov	r0, r4
  13e12c:	eaffffcf 	b	13e070 <socket+0x40>
  13e130:	e3a000dd 	mov	r0, #221	; 0xdd
  13e134:	ebfff89a 	bl	13c3a4 <get_rtt_syscall>
  13e138:	e2503000 	subs	r3, r0, #0
  13e13c:	0affffe9 	beq	13e0e8 <socket+0xb8>
  13e140:	e3a02001 	mov	r2, #1
  13e144:	e3a01002 	mov	r1, #2
  13e148:	e1a00004 	mov	r0, r4
  13e14c:	e12fff33 	blx	r3
  13e150:	eaffffe4 	b	13e0e8 <socket+0xb8>
  13e154:	e1a00004 	mov	r0, r4
  13e158:	eaffffdd 	b	13e0d4 <socket+0xa4>
  13e15c:	00000119 	.word	0x00000119
  13e160:	00080800 	.word	0x00080800

0013e164 <srand>:
  13e164:	e3a02000 	mov	r2, #0
  13e168:	e59f3008 	ldr	r3, [pc, #8]	; 13e178 <srand+0x14>
  13e16c:	e2400001 	sub	r0, r0, #1
  13e170:	e8830005 	stm	r3, {r0, r2}
  13e174:	e12fff1e 	bx	lr
  13e178:	0014f070 	.word	0x0014f070

0013e17c <rand>:
  13e17c:	e59f1034 	ldr	r1, [pc, #52]	; 13e1b8 <rand+0x3c>
  13e180:	e92d4800 	push	{fp, lr}
  13e184:	e59f3030 	ldr	r3, [pc, #48]	; 13e1bc <rand+0x40>
  13e188:	e591e000 	ldr	lr, [r1]
  13e18c:	e5912004 	ldr	r2, [r1, #4]
  13e190:	e00b039e 	mul	fp, lr, r3
  13e194:	e59fc024 	ldr	ip, [pc, #36]	; 13e1c0 <rand+0x44>
  13e198:	e020b29c 	mla	r0, ip, r2, fp
  13e19c:	e0832c9e 	umull	r2, r3, lr, ip
  13e1a0:	e0803003 	add	r3, r0, r3
  13e1a4:	e292b001 	adds	fp, r2, #1
  13e1a8:	e2a3c000 	adc	ip, r3, #0
  13e1ac:	e8811800 	stm	r1, {fp, ip}
  13e1b0:	e1a000ac 	lsr	r0, ip, #1
  13e1b4:	e8bd8800 	pop	{fp, pc}
  13e1b8:	0014f070 	.word	0x0014f070
  13e1bc:	5851f42d 	.word	0x5851f42d
  13e1c0:	4c957f2d 	.word	0x4c957f2d

0013e1c4 <select>:
  13e1c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e1c8:	e3a0e000 	mov	lr, #0
  13e1cc:	e24dd014 	sub	sp, sp, #20
  13e1d0:	e59dc018 	ldr	ip, [sp, #24]
  13e1d4:	e58d3000 	str	r3, [sp]
  13e1d8:	e58de008 	str	lr, [sp, #8]
  13e1dc:	e1a03002 	mov	r3, r2
  13e1e0:	e58dc004 	str	ip, [sp, #4]
  13e1e4:	e1a02001 	mov	r2, r1
  13e1e8:	e1a01000 	mov	r1, r0
  13e1ec:	e3a0008e 	mov	r0, #142	; 0x8e
  13e1f0:	eb000ed2 	bl	141d40 <__syscall_cp>
  13e1f4:	e28dd014 	add	sp, sp, #20
  13e1f8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e1fc:	eafff89d 	b	13c478 <__syscall_ret>

0013e200 <raise>:
  13e200:	e92d4030 	push	{r4, r5, lr}
  13e204:	e24dd084 	sub	sp, sp, #132	; 0x84
  13e208:	e1a05000 	mov	r5, r0
  13e20c:	e1a0000d 	mov	r0, sp
  13e210:	eb001496 	bl	143470 <__block_app_sigs>
  13e214:	e59f3048 	ldr	r3, [pc, #72]	; 13e264 <raise+0x64>
  13e218:	e5930000 	ldr	r0, [r3]
  13e21c:	e12fff30 	blx	r0
  13e220:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13e224:	e3a000ee 	mov	r0, #238	; 0xee
  13e228:	ebfff85d 	bl	13c3a4 <get_rtt_syscall>
  13e22c:	e2503000 	subs	r3, r0, #0
  13e230:	0a000009 	beq	13e25c <raise+0x5c>
  13e234:	e1a01005 	mov	r1, r5
  13e238:	e1a00004 	mov	r0, r4
  13e23c:	e12fff33 	blx	r3
  13e240:	ebfff88c 	bl	13c478 <__syscall_ret>
  13e244:	e1a04000 	mov	r4, r0
  13e248:	e1a0000d 	mov	r0, sp
  13e24c:	eb001495 	bl	1434a8 <__restore_sigs>
  13e250:	e1a00004 	mov	r0, r4
  13e254:	e28dd084 	add	sp, sp, #132	; 0x84
  13e258:	e8bd8030 	pop	{r4, r5, pc}
  13e25c:	e1a00003 	mov	r0, r3
  13e260:	eafffff6 	b	13e240 <raise+0x40>
  13e264:	0014d3dc 	.word	0x0014d3dc

0013e268 <fflush>:
  13e268:	e92d4070 	push	{r4, r5, r6, lr}
  13e26c:	e2504000 	subs	r4, r0, #0
  13e270:	e24dd008 	sub	sp, sp, #8
  13e274:	0a000027 	beq	13e318 <fflush+0xb0>
  13e278:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e27c:	e3530000 	cmp	r3, #0
  13e280:	b3a05000 	movlt	r5, #0
  13e284:	aa000020 	bge	13e30c <fflush+0xa4>
  13e288:	e5942014 	ldr	r2, [r4, #20]
  13e28c:	e594301c 	ldr	r3, [r4, #28]
  13e290:	e1520003 	cmp	r2, r3
  13e294:	0a000007 	beq	13e2b8 <fflush+0x50>
  13e298:	e3a02000 	mov	r2, #0
  13e29c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13e2a0:	e1a01002 	mov	r1, r2
  13e2a4:	e1a00004 	mov	r0, r4
  13e2a8:	e12fff33 	blx	r3
  13e2ac:	e5943014 	ldr	r3, [r4, #20]
  13e2b0:	e3530000 	cmp	r3, #0
  13e2b4:	0a00003d 	beq	13e3b0 <fflush+0x148>
  13e2b8:	e994000c 	ldmib	r4, {r2, r3}
  13e2bc:	e1520003 	cmp	r2, r3
  13e2c0:	0a000006 	beq	13e2e0 <fflush+0x78>
  13e2c4:	e3a01001 	mov	r1, #1
  13e2c8:	e0422003 	sub	r2, r2, r3
  13e2cc:	e58d1000 	str	r1, [sp]
  13e2d0:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13e2d4:	e1a03fc2 	asr	r3, r2, #31
  13e2d8:	e1a00004 	mov	r0, r4
  13e2dc:	e12fff31 	blx	r1
  13e2e0:	e3a06000 	mov	r6, #0
  13e2e4:	e1550006 	cmp	r5, r6
  13e2e8:	e5846010 	str	r6, [r4, #16]
  13e2ec:	e584601c 	str	r6, [r4, #28]
  13e2f0:	e5846014 	str	r6, [r4, #20]
  13e2f4:	e5846008 	str	r6, [r4, #8]
  13e2f8:	e5846004 	str	r6, [r4, #4]
  13e2fc:	1a000032 	bne	13e3cc <fflush+0x164>
  13e300:	e1a00005 	mov	r0, r5
  13e304:	e28dd008 	add	sp, sp, #8
  13e308:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e30c:	eb001472 	bl	1434dc <__lockfile>
  13e310:	e1a05000 	mov	r5, r0
  13e314:	eaffffdb 	b	13e288 <fflush+0x20>
  13e318:	e59f3104 	ldr	r3, [pc, #260]	; 13e424 <fflush+0x1bc>
  13e31c:	e5935000 	ldr	r5, [r3]
  13e320:	e3550000 	cmp	r5, #0
  13e324:	1a00003a 	bne	13e414 <fflush+0x1ac>
  13e328:	e59f30f8 	ldr	r3, [pc, #248]	; 13e428 <fflush+0x1c0>
  13e32c:	e5932000 	ldr	r2, [r3]
  13e330:	e3520000 	cmp	r2, #0
  13e334:	1a000032 	bne	13e404 <fflush+0x19c>
  13e338:	eb000047 	bl	13e45c <__ofl_lock>
  13e33c:	e5904000 	ldr	r4, [r0]
  13e340:	e3540000 	cmp	r4, #0
  13e344:	0a000009 	beq	13e370 <fflush+0x108>
  13e348:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e34c:	e3530000 	cmp	r3, #0
  13e350:	aa00000a 	bge	13e380 <fflush+0x118>
  13e354:	e5942014 	ldr	r2, [r4, #20]
  13e358:	e594301c 	ldr	r3, [r4, #28]
  13e35c:	e1520003 	cmp	r2, r3
  13e360:	1a00001f 	bne	13e3e4 <fflush+0x17c>
  13e364:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13e368:	e3540000 	cmp	r4, #0
  13e36c:	1afffff5 	bne	13e348 <fflush+0xe0>
  13e370:	eb000040 	bl	13e478 <__ofl_unlock>
  13e374:	e1a00005 	mov	r0, r5
  13e378:	e28dd008 	add	sp, sp, #8
  13e37c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e380:	e1a00004 	mov	r0, r4
  13e384:	eb001454 	bl	1434dc <__lockfile>
  13e388:	e5942014 	ldr	r2, [r4, #20]
  13e38c:	e594301c 	ldr	r3, [r4, #28]
  13e390:	e1a06000 	mov	r6, r0
  13e394:	e1520003 	cmp	r2, r3
  13e398:	1a000015 	bne	13e3f4 <fflush+0x18c>
  13e39c:	e3560000 	cmp	r6, #0
  13e3a0:	0affffef 	beq	13e364 <fflush+0xfc>
  13e3a4:	e1a00004 	mov	r0, r4
  13e3a8:	eb001498 	bl	143610 <__unlockfile>
  13e3ac:	eaffffec 	b	13e364 <fflush+0xfc>
  13e3b0:	e3550000 	cmp	r5, #0
  13e3b4:	03e05000 	mvneq	r5, #0
  13e3b8:	0affffd0 	beq	13e300 <fflush+0x98>
  13e3bc:	e1a00004 	mov	r0, r4
  13e3c0:	eb001492 	bl	143610 <__unlockfile>
  13e3c4:	e3e05000 	mvn	r5, #0
  13e3c8:	eaffffcc 	b	13e300 <fflush+0x98>
  13e3cc:	e1a05006 	mov	r5, r6
  13e3d0:	e1a00004 	mov	r0, r4
  13e3d4:	eb00148d 	bl	143610 <__unlockfile>
  13e3d8:	e1a00005 	mov	r0, r5
  13e3dc:	e28dd008 	add	sp, sp, #8
  13e3e0:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e3e4:	e1a00004 	mov	r0, r4
  13e3e8:	ebffff9e 	bl	13e268 <fflush>
  13e3ec:	e1855000 	orr	r5, r5, r0
  13e3f0:	eaffffdb 	b	13e364 <fflush+0xfc>
  13e3f4:	e1a00004 	mov	r0, r4
  13e3f8:	ebffff9a 	bl	13e268 <fflush>
  13e3fc:	e1855000 	orr	r5, r5, r0
  13e400:	eaffffe5 	b	13e39c <fflush+0x134>
  13e404:	e5930000 	ldr	r0, [r3]
  13e408:	ebffff96 	bl	13e268 <fflush>
  13e40c:	e1855000 	orr	r5, r5, r0
  13e410:	eaffffc8 	b	13e338 <fflush+0xd0>
  13e414:	e5930000 	ldr	r0, [r3]
  13e418:	ebffff92 	bl	13e268 <fflush>
  13e41c:	e1a05000 	mov	r5, r0
  13e420:	eaffffc0 	b	13e328 <fflush+0xc0>
  13e424:	0014d3d0 	.word	0x0014d3d0
  13e428:	0014d338 	.word	0x0014d338

0013e42c <fprintf>:
  13e42c:	e92d000e 	push	{r1, r2, r3}
  13e430:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e434:	e24dd008 	sub	sp, sp, #8
  13e438:	e28d3010 	add	r3, sp, #16
  13e43c:	e1a02003 	mov	r2, r3
  13e440:	e59d100c 	ldr	r1, [sp, #12]
  13e444:	e58d3004 	str	r3, [sp, #4]
  13e448:	eb000959 	bl	1409b4 <vfprintf>
  13e44c:	e28dd008 	add	sp, sp, #8
  13e450:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e454:	e28dd00c 	add	sp, sp, #12
  13e458:	e12fff1e 	bx	lr

0013e45c <__ofl_lock>:
  13e45c:	e92d4010 	push	{r4, lr}
  13e460:	e59f0008 	ldr	r0, [pc, #8]	; 13e470 <__ofl_lock+0x14>
  13e464:	eb000db3 	bl	141b38 <__lock>
  13e468:	e59f0004 	ldr	r0, [pc, #4]	; 13e474 <__ofl_lock+0x18>
  13e46c:	e8bd8010 	pop	{r4, pc}
  13e470:	0014f080 	.word	0x0014f080
  13e474:	0014f07c 	.word	0x0014f07c

0013e478 <__ofl_unlock>:
  13e478:	e59f0000 	ldr	r0, [pc]	; 13e480 <__ofl_unlock+0x8>
  13e47c:	ea000e05 	b	141c98 <__unlock>
  13e480:	0014f080 	.word	0x0014f080

0013e484 <perror>:
  13e484:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e488:	e1a05000 	mov	r5, r0
  13e48c:	ebffea8e 	bl	138ecc <__errno_location>
  13e490:	e5900000 	ldr	r0, [r0]
  13e494:	ebffeaae 	bl	138f54 <strerror>
  13e498:	e59f4104 	ldr	r4, [pc, #260]	; 13e5a4 <perror+0x120>
  13e49c:	e1a06000 	mov	r6, r0
  13e4a0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e4a4:	e3530000 	cmp	r3, #0
  13e4a8:	aa000026 	bge	13e548 <perror+0xc4>
  13e4ac:	e3550000 	cmp	r5, #0
  13e4b0:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e4b4:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e4b8:	13a09000 	movne	r9, #0
  13e4bc:	0a00002c 	beq	13e574 <perror+0xf0>
  13e4c0:	e5d53000 	ldrb	r3, [r5]
  13e4c4:	e3530000 	cmp	r3, #0
  13e4c8:	1a000010 	bne	13e510 <perror+0x8c>
  13e4cc:	e1a00006 	mov	r0, r6
  13e4d0:	eb000bf4 	bl	1414a8 <strlen>
  13e4d4:	e59f30c8 	ldr	r3, [pc, #200]	; 13e5a4 <perror+0x120>
  13e4d8:	e1a01000 	mov	r1, r0
  13e4dc:	e3a02001 	mov	r2, #1
  13e4e0:	e1a00006 	mov	r0, r6
  13e4e4:	eb0015fa 	bl	143cd4 <fwrite>
  13e4e8:	e59f10b4 	ldr	r1, [pc, #180]	; 13e5a4 <perror+0x120>
  13e4ec:	e3a0000a 	mov	r0, #10
  13e4f0:	eb001578 	bl	143ad8 <fputc>
  13e4f4:	e3590000 	cmp	r9, #0
  13e4f8:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e4fc:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e500:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e504:	e59f0098 	ldr	r0, [pc, #152]	; 13e5a4 <perror+0x120>
  13e508:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e50c:	ea00143f 	b	143610 <__unlockfile>
  13e510:	e1a00005 	mov	r0, r5
  13e514:	eb000be3 	bl	1414a8 <strlen>
  13e518:	e59f3084 	ldr	r3, [pc, #132]	; 13e5a4 <perror+0x120>
  13e51c:	e1a01000 	mov	r1, r0
  13e520:	e3a02001 	mov	r2, #1
  13e524:	e1a00005 	mov	r0, r5
  13e528:	eb0015e9 	bl	143cd4 <fwrite>
  13e52c:	e59f1070 	ldr	r1, [pc, #112]	; 13e5a4 <perror+0x120>
  13e530:	e3a0003a 	mov	r0, #58	; 0x3a
  13e534:	eb001567 	bl	143ad8 <fputc>
  13e538:	e59f1064 	ldr	r1, [pc, #100]	; 13e5a4 <perror+0x120>
  13e53c:	e3a00020 	mov	r0, #32
  13e540:	eb001564 	bl	143ad8 <fputc>
  13e544:	eaffffe0 	b	13e4cc <perror+0x48>
  13e548:	e1a00004 	mov	r0, r4
  13e54c:	eb0013e2 	bl	1434dc <__lockfile>
  13e550:	e3550000 	cmp	r5, #0
  13e554:	e1a09000 	mov	r9, r0
  13e558:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e55c:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e560:	0affffd9 	beq	13e4cc <perror+0x48>
  13e564:	e5d53000 	ldrb	r3, [r5]
  13e568:	e3530000 	cmp	r3, #0
  13e56c:	0affffd6 	beq	13e4cc <perror+0x48>
  13e570:	eaffffe6 	b	13e510 <perror+0x8c>
  13e574:	eb000bcb 	bl	1414a8 <strlen>
  13e578:	e1a03004 	mov	r3, r4
  13e57c:	e1a01000 	mov	r1, r0
  13e580:	e3a02001 	mov	r2, #1
  13e584:	e1a00006 	mov	r0, r6
  13e588:	eb0015d1 	bl	143cd4 <fwrite>
  13e58c:	e1a01004 	mov	r1, r4
  13e590:	e3a0000a 	mov	r0, #10
  13e594:	eb00154f 	bl	143ad8 <fputc>
  13e598:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e59c:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e5a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e5a4:	0014d2a8 	.word	0x0014d2a8

0013e5a8 <printf>:
  13e5a8:	e92d000f 	push	{r0, r1, r2, r3}
  13e5ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e5b0:	e24dd00c 	sub	sp, sp, #12
  13e5b4:	e28d3014 	add	r3, sp, #20
  13e5b8:	e1a02003 	mov	r2, r3
  13e5bc:	e59d1010 	ldr	r1, [sp, #16]
  13e5c0:	e59f0014 	ldr	r0, [pc, #20]	; 13e5dc <printf+0x34>
  13e5c4:	e58d3004 	str	r3, [sp, #4]
  13e5c8:	eb0008f9 	bl	1409b4 <vfprintf>
  13e5cc:	e28dd00c 	add	sp, sp, #12
  13e5d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e5d4:	e28dd010 	add	sp, sp, #16
  13e5d8:	e12fff1e 	bx	lr
  13e5dc:	0014d340 	.word	0x0014d340

0013e5e0 <puts>:
  13e5e0:	e92d4070 	push	{r4, r5, r6, lr}
  13e5e4:	e59f40b0 	ldr	r4, [pc, #176]	; 13e69c <puts+0xbc>
  13e5e8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e5ec:	e3530000 	cmp	r3, #0
  13e5f0:	aa00001b 	bge	13e664 <puts+0x84>
  13e5f4:	e1a01004 	mov	r1, r4
  13e5f8:	eb001569 	bl	143ba4 <fputs>
  13e5fc:	e3500000 	cmp	r0, #0
  13e600:	a3a05000 	movge	r5, #0
  13e604:	ba000021 	blt	13e690 <puts+0xb0>
  13e608:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e60c:	e353000a 	cmp	r3, #10
  13e610:	0a00000e 	beq	13e650 <puts+0x70>
  13e614:	e5943014 	ldr	r3, [r4, #20]
  13e618:	e5942010 	ldr	r2, [r4, #16]
  13e61c:	e1530002 	cmp	r3, r2
  13e620:	0a00000a 	beq	13e650 <puts+0x70>
  13e624:	e3a0200a 	mov	r2, #10
  13e628:	e2831001 	add	r1, r3, #1
  13e62c:	e5841014 	str	r1, [r4, #20]
  13e630:	e3a04000 	mov	r4, #0
  13e634:	e5c32000 	strb	r2, [r3]
  13e638:	e3550000 	cmp	r5, #0
  13e63c:	0a000001 	beq	13e648 <puts+0x68>
  13e640:	e59f0054 	ldr	r0, [pc, #84]	; 13e69c <puts+0xbc>
  13e644:	eb0013f1 	bl	143610 <__unlockfile>
  13e648:	e1a00004 	mov	r0, r4
  13e64c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e650:	e3a0100a 	mov	r1, #10
  13e654:	e59f0040 	ldr	r0, [pc, #64]	; 13e69c <puts+0xbc>
  13e658:	eb001412 	bl	1436a8 <__overflow>
  13e65c:	e1a04fc0 	asr	r4, r0, #31
  13e660:	eafffff4 	b	13e638 <puts+0x58>
  13e664:	e1a06000 	mov	r6, r0
  13e668:	e1a00004 	mov	r0, r4
  13e66c:	eb00139a 	bl	1434dc <__lockfile>
  13e670:	e1a01004 	mov	r1, r4
  13e674:	e1a05000 	mov	r5, r0
  13e678:	e1a00006 	mov	r0, r6
  13e67c:	eb001548 	bl	143ba4 <fputs>
  13e680:	e3500000 	cmp	r0, #0
  13e684:	b3e04000 	mvnlt	r4, #0
  13e688:	aaffffde 	bge	13e608 <puts+0x28>
  13e68c:	eaffffe9 	b	13e638 <puts+0x58>
  13e690:	e3e04000 	mvn	r4, #0
  13e694:	e1a00004 	mov	r0, r4
  13e698:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e69c:	0014d340 	.word	0x0014d340

0013e6a0 <pop_arg>:
  13e6a0:	e2411009 	sub	r1, r1, #9
  13e6a4:	e92d0030 	push	{r4, r5}
  13e6a8:	e3510011 	cmp	r1, #17
  13e6ac:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e6b0:	ea000018 	b	13e718 <pop_arg+0x78>
  13e6b4:	0013e7e0 	.word	0x0013e7e0
  13e6b8:	0013e744 	.word	0x0013e744
  13e6bc:	0013e764 	.word	0x0013e764
  13e6c0:	0013e720 	.word	0x0013e720
  13e6c4:	0013e744 	.word	0x0013e744
  13e6c8:	0013e764 	.word	0x0013e764
  13e6cc:	0013e818 	.word	0x0013e818
  13e6d0:	0013e788 	.word	0x0013e788
  13e6d4:	0013e7a8 	.word	0x0013e7a8
  13e6d8:	0013e7c4 	.word	0x0013e7c4
  13e6dc:	0013e720 	.word	0x0013e720
  13e6e0:	0013e764 	.word	0x0013e764
  13e6e4:	0013e720 	.word	0x0013e720
  13e6e8:	0013e720 	.word	0x0013e720
  13e6ec:	0013e744 	.word	0x0013e744
  13e6f0:	0013e7f8 	.word	0x0013e7f8
  13e6f4:	0013e6fc 	.word	0x0013e6fc
  13e6f8:	0013e6fc 	.word	0x0013e6fc
  13e6fc:	e5923000 	ldr	r3, [r2]
  13e700:	e2833007 	add	r3, r3, #7
  13e704:	e3c33007 	bic	r3, r3, #7
  13e708:	e2831008 	add	r1, r3, #8
  13e70c:	e5821000 	str	r1, [r2]
  13e710:	e893000c 	ldm	r3, {r2, r3}
  13e714:	e880000c 	stm	r0, {r2, r3}
  13e718:	e8bd0030 	pop	{r4, r5}
  13e71c:	e12fff1e 	bx	lr
  13e720:	e5923000 	ldr	r3, [r2]
  13e724:	e8bd0030 	pop	{r4, r5}
  13e728:	e2833007 	add	r3, r3, #7
  13e72c:	e3c33007 	bic	r3, r3, #7
  13e730:	e2831008 	add	r1, r3, #8
  13e734:	e5821000 	str	r1, [r2]
  13e738:	e893000c 	ldm	r3, {r2, r3}
  13e73c:	e880000c 	stm	r0, {r2, r3}
  13e740:	e12fff1e 	bx	lr
  13e744:	e5923000 	ldr	r3, [r2]
  13e748:	e5934000 	ldr	r4, [r3]
  13e74c:	e2833004 	add	r3, r3, #4
  13e750:	e1a05fc4 	asr	r5, r4, #31
  13e754:	e5823000 	str	r3, [r2]
  13e758:	e8800030 	stm	r0, {r4, r5}
  13e75c:	e8bd0030 	pop	{r4, r5}
  13e760:	e12fff1e 	bx	lr
  13e764:	e3a01000 	mov	r1, #0
  13e768:	e8bd0030 	pop	{r4, r5}
  13e76c:	e5923000 	ldr	r3, [r2]
  13e770:	e593c000 	ldr	ip, [r3]
  13e774:	e2833004 	add	r3, r3, #4
  13e778:	e5823000 	str	r3, [r2]
  13e77c:	e580c000 	str	ip, [r0]
  13e780:	e5801004 	str	r1, [r0, #4]
  13e784:	e12fff1e 	bx	lr
  13e788:	e3a01000 	mov	r1, #0
  13e78c:	e5923000 	ldr	r3, [r2]
  13e790:	e1d3c0b0 	ldrh	ip, [r3]
  13e794:	e2833004 	add	r3, r3, #4
  13e798:	e5823000 	str	r3, [r2]
  13e79c:	e580c000 	str	ip, [r0]
  13e7a0:	e5801004 	str	r1, [r0, #4]
  13e7a4:	eaffffdb 	b	13e718 <pop_arg+0x78>
  13e7a8:	e5923000 	ldr	r3, [r2]
  13e7ac:	e1d340d0 	ldrsb	r4, [r3]
  13e7b0:	e2833004 	add	r3, r3, #4
  13e7b4:	e1a05fc4 	asr	r5, r4, #31
  13e7b8:	e5823000 	str	r3, [r2]
  13e7bc:	e8800030 	stm	r0, {r4, r5}
  13e7c0:	eaffffd4 	b	13e718 <pop_arg+0x78>
  13e7c4:	e3a05000 	mov	r5, #0
  13e7c8:	e5923000 	ldr	r3, [r2]
  13e7cc:	e5d34000 	ldrb	r4, [r3]
  13e7d0:	e2833004 	add	r3, r3, #4
  13e7d4:	e5823000 	str	r3, [r2]
  13e7d8:	e8800030 	stm	r0, {r4, r5}
  13e7dc:	eaffffcd 	b	13e718 <pop_arg+0x78>
  13e7e0:	e5923000 	ldr	r3, [r2]
  13e7e4:	e2831004 	add	r1, r3, #4
  13e7e8:	e5821000 	str	r1, [r2]
  13e7ec:	e5933000 	ldr	r3, [r3]
  13e7f0:	e5803000 	str	r3, [r0]
  13e7f4:	eaffffc7 	b	13e718 <pop_arg+0x78>
  13e7f8:	e3a01000 	mov	r1, #0
  13e7fc:	e5923000 	ldr	r3, [r2]
  13e800:	e283c004 	add	ip, r3, #4
  13e804:	e582c000 	str	ip, [r2]
  13e808:	e5933000 	ldr	r3, [r3]
  13e80c:	e5801004 	str	r1, [r0, #4]
  13e810:	e5803000 	str	r3, [r0]
  13e814:	eaffffbf 	b	13e718 <pop_arg+0x78>
  13e818:	e5923000 	ldr	r3, [r2]
  13e81c:	e1d340f0 	ldrsh	r4, [r3]
  13e820:	e2833004 	add	r3, r3, #4
  13e824:	e1a05fc4 	asr	r5, r4, #31
  13e828:	e5823000 	str	r3, [r2]
  13e82c:	e8800030 	stm	r0, {r4, r5}
  13e830:	eaffffb8 	b	13e718 <pop_arg+0x78>

0013e834 <pad.part.0>:
  13e834:	e92d4070 	push	{r4, r5, r6, lr}
  13e838:	e0425003 	sub	r5, r2, r3
  13e83c:	e3550c01 	cmp	r5, #256	; 0x100
  13e840:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13e844:	31a02005 	movcc	r2, r5
  13e848:	23a02c01 	movcs	r2, #256	; 0x100
  13e84c:	e1a06000 	mov	r6, r0
  13e850:	e1a0000d 	mov	r0, sp
  13e854:	eb000a82 	bl	141264 <memset>
  13e858:	e35500ff 	cmp	r5, #255	; 0xff
  13e85c:	9a00001b 	bls	13e8d0 <pad.part.0+0x9c>
  13e860:	e5962000 	ldr	r2, [r6]
  13e864:	e1a04005 	mov	r4, r5
  13e868:	e2022020 	and	r2, r2, #32
  13e86c:	ea000001 	b	13e878 <pad.part.0+0x44>
  13e870:	e35400ff 	cmp	r4, #255	; 0xff
  13e874:	9a00000c 	bls	13e8ac <pad.part.0+0x78>
  13e878:	e3520000 	cmp	r2, #0
  13e87c:	e2444c01 	sub	r4, r4, #256	; 0x100
  13e880:	e1a01002 	mov	r1, r2
  13e884:	1afffff9 	bne	13e870 <pad.part.0+0x3c>
  13e888:	e1a02006 	mov	r2, r6
  13e88c:	e3a01c01 	mov	r1, #256	; 0x100
  13e890:	e1a0000d 	mov	r0, sp
  13e894:	eb0014cf 	bl	143bd8 <__fwritex>
  13e898:	e5962000 	ldr	r2, [r6]
  13e89c:	e35400ff 	cmp	r4, #255	; 0xff
  13e8a0:	e2022020 	and	r2, r2, #32
  13e8a4:	e1a01002 	mov	r1, r2
  13e8a8:	8afffff2 	bhi	13e878 <pad.part.0+0x44>
  13e8ac:	e20550ff 	and	r5, r5, #255	; 0xff
  13e8b0:	e3510000 	cmp	r1, #0
  13e8b4:	1a000003 	bne	13e8c8 <pad.part.0+0x94>
  13e8b8:	e1a02006 	mov	r2, r6
  13e8bc:	e1a01005 	mov	r1, r5
  13e8c0:	e1a0000d 	mov	r0, sp
  13e8c4:	eb0014c3 	bl	143bd8 <__fwritex>
  13e8c8:	e28ddc01 	add	sp, sp, #256	; 0x100
  13e8cc:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e8d0:	e5961000 	ldr	r1, [r6]
  13e8d4:	e2011020 	and	r1, r1, #32
  13e8d8:	eafffff4 	b	13e8b0 <pad.part.0+0x7c>
  13e8dc:	00000000 	andeq	r0, r0, r0

0013e8e0 <printf_core>:
  13e8e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13e8e4:	e3a0a000 	mov	sl, #0
  13e8e8:	e1a0b001 	mov	fp, r1
  13e8ec:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13e8f0:	e58d0004 	str	r0, [sp, #4]
  13e8f4:	e58d2018 	str	r2, [sp, #24]
  13e8f8:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13e8fc:	e58da000 	str	sl, [sp]
  13e900:	e58da00c 	str	sl, [sp, #12]
  13e904:	e59d2000 	ldr	r2, [sp]
  13e908:	e5db3000 	ldrb	r3, [fp]
  13e90c:	e082200a 	add	r2, r2, sl
  13e910:	e3530000 	cmp	r3, #0
  13e914:	e58d2000 	str	r2, [sp]
  13e918:	0a0001c8 	beq	13f040 <printf_core+0x760>
  13e91c:	e3530025 	cmp	r3, #37	; 0x25
  13e920:	e1a0300b 	mov	r3, fp
  13e924:	0a000005 	beq	13e940 <printf_core+0x60>
  13e928:	e5f32001 	ldrb	r2, [r3, #1]!
  13e92c:	e3520000 	cmp	r2, #0
  13e930:	13520025 	cmpne	r2, #37	; 0x25
  13e934:	1afffffb 	bne	13e928 <printf_core+0x48>
  13e938:	e3520025 	cmp	r2, #37	; 0x25
  13e93c:	1a00019c 	bne	13efb4 <printf_core+0x6d4>
  13e940:	e5d32001 	ldrb	r2, [r3, #1]
  13e944:	e1a04003 	mov	r4, r3
  13e948:	e3520025 	cmp	r2, #37	; 0x25
  13e94c:	0a000003 	beq	13e960 <printf_core+0x80>
  13e950:	ea000006 	b	13e970 <printf_core+0x90>
  13e954:	e5d42001 	ldrb	r2, [r4, #1]
  13e958:	e3520025 	cmp	r2, #37	; 0x25
  13e95c:	1a000003 	bne	13e970 <printf_core+0x90>
  13e960:	e5f42002 	ldrb	r2, [r4, #2]!
  13e964:	e2833001 	add	r3, r3, #1
  13e968:	e3520025 	cmp	r2, #37	; 0x25
  13e96c:	0afffff8 	beq	13e954 <printf_core+0x74>
  13e970:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e974:	e043a00b 	sub	sl, r3, fp
  13e978:	e59d3000 	ldr	r3, [sp]
  13e97c:	e0423003 	sub	r3, r2, r3
  13e980:	e15a0003 	cmp	sl, r3
  13e984:	e58d3008 	str	r3, [sp, #8]
  13e988:	ca000181 	bgt	13ef94 <printf_core+0x6b4>
  13e98c:	e59d3004 	ldr	r3, [sp, #4]
  13e990:	e3530000 	cmp	r3, #0
  13e994:	0a000002 	beq	13e9a4 <printf_core+0xc4>
  13e998:	e5933000 	ldr	r3, [r3]
  13e99c:	e3130020 	tst	r3, #32
  13e9a0:	0a000146 	beq	13eec0 <printf_core+0x5e0>
  13e9a4:	e35a0000 	cmp	sl, #0
  13e9a8:	1a0000b7 	bne	13ec8c <printf_core+0x3ac>
  13e9ac:	e5d42001 	ldrb	r2, [r4, #1]
  13e9b0:	e242c030 	sub	ip, r2, #48	; 0x30
  13e9b4:	e35c0009 	cmp	ip, #9
  13e9b8:	8a000002 	bhi	13e9c8 <printf_core+0xe8>
  13e9bc:	e5d43002 	ldrb	r3, [r4, #2]
  13e9c0:	e3530024 	cmp	r3, #36	; 0x24
  13e9c4:	0a000194 	beq	13f01c <printf_core+0x73c>
  13e9c8:	e2423020 	sub	r3, r2, #32
  13e9cc:	e353001f 	cmp	r3, #31
  13e9d0:	e3e0c000 	mvn	ip, #0
  13e9d4:	e2846001 	add	r6, r4, #1
  13e9d8:	8a000196 	bhi	13f038 <printf_core+0x758>
  13e9dc:	e59f0f44 	ldr	r0, [pc, #3908]	; 13f928 <printf_core+0x1048>
  13e9e0:	e1a01330 	lsr	r1, r0, r3
  13e9e4:	e2118001 	ands	r8, r1, #1
  13e9e8:	0a00000a 	beq	13ea18 <printf_core+0x138>
  13e9ec:	e3a08000 	mov	r8, #0
  13e9f0:	e3a0e001 	mov	lr, #1
  13e9f4:	ea000002 	b	13ea04 <printf_core+0x124>
  13e9f8:	e1a01330 	lsr	r1, r0, r3
  13e9fc:	e3110001 	tst	r1, #1
  13ea00:	0a000004 	beq	13ea18 <printf_core+0x138>
  13ea04:	e5f62001 	ldrb	r2, [r6, #1]!
  13ea08:	e188831e 	orr	r8, r8, lr, lsl r3
  13ea0c:	e2423020 	sub	r3, r2, #32
  13ea10:	e353001f 	cmp	r3, #31
  13ea14:	9afffff7 	bls	13e9f8 <printf_core+0x118>
  13ea18:	e352002a 	cmp	r2, #42	; 0x2a
  13ea1c:	0a00009c 	beq	13ec94 <printf_core+0x3b4>
  13ea20:	e5d61000 	ldrb	r1, [r6]
  13ea24:	e2413030 	sub	r3, r1, #48	; 0x30
  13ea28:	e3530009 	cmp	r3, #9
  13ea2c:	81a02001 	movhi	r2, r1
  13ea30:	83a09000 	movhi	r9, #0
  13ea34:	8a000012 	bhi	13ea84 <printf_core+0x1a4>
  13ea38:	e3a09000 	mov	r9, #0
  13ea3c:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13f92c <printf_core+0x104c>
  13ea40:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13ea44:	e0693103 	rsb	r3, r9, r3, lsl #2
  13ea48:	e5f62001 	ldrb	r2, [r6, #1]!
  13ea4c:	e1a03083 	lsl	r3, r3, #1
  13ea50:	e1590000 	cmp	r9, r0
  13ea54:	e2411030 	sub	r1, r1, #48	; 0x30
  13ea58:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ea5c:	e242e030 	sub	lr, r2, #48	; 0x30
  13ea60:	8a000025 	bhi	13eafc <printf_core+0x21c>
  13ea64:	e1510003 	cmp	r1, r3
  13ea68:	e0899109 	add	r9, r9, r9, lsl #2
  13ea6c:	ca000022 	bgt	13eafc <printf_core+0x21c>
  13ea70:	e35e0009 	cmp	lr, #9
  13ea74:	e0819089 	add	r9, r1, r9, lsl #1
  13ea78:	9a000022 	bls	13eb08 <printf_core+0x228>
  13ea7c:	e3590000 	cmp	r9, #0
  13ea80:	ba000143 	blt	13ef94 <printf_core+0x6b4>
  13ea84:	e352002e 	cmp	r2, #46	; 0x2e
  13ea88:	1a000097 	bne	13ecec <printf_core+0x40c>
  13ea8c:	e5d62001 	ldrb	r2, [r6, #1]
  13ea90:	e352002a 	cmp	r2, #42	; 0x2a
  13ea94:	1a00011e 	bne	13ef14 <printf_core+0x634>
  13ea98:	e5d62002 	ldrb	r2, [r6, #2]
  13ea9c:	e2423030 	sub	r3, r2, #48	; 0x30
  13eaa0:	e3530009 	cmp	r3, #9
  13eaa4:	8a000002 	bhi	13eab4 <printf_core+0x1d4>
  13eaa8:	e5d63003 	ldrb	r3, [r6, #3]
  13eaac:	e3530024 	cmp	r3, #36	; 0x24
  13eab0:	0a000143 	beq	13efc4 <printf_core+0x6e4>
  13eab4:	e59d300c 	ldr	r3, [sp, #12]
  13eab8:	e3530000 	cmp	r3, #0
  13eabc:	1a00009f 	bne	13ed40 <printf_core+0x460>
  13eac0:	e59d3004 	ldr	r3, [sp, #4]
  13eac4:	e2866002 	add	r6, r6, #2
  13eac8:	e3530000 	cmp	r3, #0
  13eacc:	159d1018 	ldrne	r1, [sp, #24]
  13ead0:	03a03001 	moveq	r3, #1
  13ead4:	15913000 	ldrne	r3, [r1]
  13ead8:	059d5004 	ldreq	r5, [sp, #4]
  13eadc:	15935000 	ldrne	r5, [r3]
  13eae0:	12832004 	addne	r2, r3, #4
  13eae4:	11e03005 	mvnne	r3, r5
  13eae8:	15812000 	strne	r2, [r1]
  13eaec:	11a03fa3 	lsrne	r3, r3, #31
  13eaf0:	15d62000 	ldrbne	r2, [r6]
  13eaf4:	e58d301c 	str	r3, [sp, #28]
  13eaf8:	ea00007e 	b	13ecf8 <printf_core+0x418>
  13eafc:	e35e0009 	cmp	lr, #9
  13eb00:	8a000123 	bhi	13ef94 <printf_core+0x6b4>
  13eb04:	e3e09000 	mvn	r9, #0
  13eb08:	e1a01002 	mov	r1, r2
  13eb0c:	eaffffcb 	b	13ea40 <printf_core+0x160>
  13eb10:	e28d3070 	add	r3, sp, #112	; 0x70
  13eb14:	e893000c 	ldm	r3, {r2, r3}
  13eb18:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13eb1c:	e1921003 	orrs	r1, r2, r3
  13eb20:	e1a0b00a 	mov	fp, sl
  13eb24:	0a000009 	beq	13eb50 <printf_core+0x270>
  13eb28:	e1a001a2 	lsr	r0, r2, #3
  13eb2c:	e1800e83 	orr	r0, r0, r3, lsl #29
  13eb30:	e1a0c1a3 	lsr	ip, r3, #3
  13eb34:	e2021007 	and	r1, r2, #7
  13eb38:	e1a0300c 	mov	r3, ip
  13eb3c:	e1a02000 	mov	r2, r0
  13eb40:	e2811030 	add	r1, r1, #48	; 0x30
  13eb44:	e1920003 	orrs	r0, r2, r3
  13eb48:	e56b1001 	strb	r1, [fp, #-1]!
  13eb4c:	1afffff5 	bne	13eb28 <printf_core+0x248>
  13eb50:	e2183008 	ands	r3, r8, #8
  13eb54:	0a00026f 	beq	13f518 <printf_core+0xc38>
  13eb58:	e04a300b 	sub	r3, sl, fp
  13eb5c:	e1530005 	cmp	r3, r5
  13eb60:	ba00026b 	blt	13f514 <printf_core+0xc34>
  13eb64:	e2835001 	add	r5, r3, #1
  13eb68:	e3a03000 	mov	r3, #0
  13eb6c:	e58d3020 	str	r3, [sp, #32]
  13eb70:	e59f3db8 	ldr	r3, [pc, #3512]	; 13f930 <printf_core+0x1050>
  13eb74:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13eb78:	e59d301c 	ldr	r3, [sp, #28]
  13eb7c:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13eb80:	1a000103 	bne	13ef94 <printf_core+0x6b4>
  13eb84:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13eb88:	e3530000 	cmp	r3, #0
  13eb8c:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13eb90:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13eb94:	e1923003 	orrs	r3, r2, r3
  13eb98:	03a03001 	moveq	r3, #1
  13eb9c:	13a03000 	movne	r3, #0
  13eba0:	e3550000 	cmp	r5, #0
  13eba4:	01a02003 	moveq	r2, r3
  13eba8:	13a02000 	movne	r2, #0
  13ebac:	e3520000 	cmp	r2, #0
  13ebb0:	1a0002a8 	bne	13f658 <printf_core+0xd78>
  13ebb4:	e04a600b 	sub	r6, sl, fp
  13ebb8:	e1560005 	cmp	r6, r5
  13ebbc:	a1a05006 	movge	r5, r6
  13ebc0:	e0833006 	add	r3, r3, r6
  13ebc4:	e1530005 	cmp	r3, r5
  13ebc8:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13ebcc:	a1a05003 	movge	r5, r3
  13ebd0:	e59d3020 	ldr	r3, [sp, #32]
  13ebd4:	e0423003 	sub	r3, r2, r3
  13ebd8:	e1530005 	cmp	r3, r5
  13ebdc:	ba0000ec 	blt	13ef94 <printf_core+0x6b4>
  13ebe0:	e59d3020 	ldr	r3, [sp, #32]
  13ebe4:	e0857003 	add	r7, r5, r3
  13ebe8:	e1570009 	cmp	r7, r9
  13ebec:	a1a0a007 	movge	sl, r7
  13ebf0:	b1a0a009 	movlt	sl, r9
  13ebf4:	e59d3008 	ldr	r3, [sp, #8]
  13ebf8:	e153000a 	cmp	r3, sl
  13ebfc:	ba0000e4 	blt	13ef94 <printf_core+0x6b4>
  13ec00:	e157000a 	cmp	r7, sl
  13ec04:	b3a09000 	movlt	r9, #0
  13ec08:	a3a09001 	movge	r9, #1
  13ec0c:	e3180a12 	tst	r8, #73728	; 0x12000
  13ec10:	01a03009 	moveq	r3, r9
  13ec14:	13a03001 	movne	r3, #1
  13ec18:	e3530000 	cmp	r3, #0
  13ec1c:	0a000281 	beq	13f628 <printf_core+0xd48>
  13ec20:	e59d3004 	ldr	r3, [sp, #4]
  13ec24:	e5933000 	ldr	r3, [r3]
  13ec28:	e3130020 	tst	r3, #32
  13ec2c:	0a000233 	beq	13f500 <printf_core+0xc20>
  13ec30:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13ec34:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec38:	01a03009 	moveq	r3, r9
  13ec3c:	13a03001 	movne	r3, #1
  13ec40:	e3530000 	cmp	r3, #0
  13ec44:	0a00027d 	beq	13f640 <printf_core+0xd60>
  13ec48:	e1550006 	cmp	r5, r6
  13ec4c:	ca000225 	bgt	13f4e8 <printf_core+0xc08>
  13ec50:	e59d3004 	ldr	r3, [sp, #4]
  13ec54:	e5933000 	ldr	r3, [r3]
  13ec58:	e3130020 	tst	r3, #32
  13ec5c:	0a00021c 	beq	13f4d4 <printf_core+0xbf4>
  13ec60:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ec64:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec68:	01a03009 	moveq	r3, r9
  13ec6c:	13a03001 	movne	r3, #1
  13ec70:	e3530000 	cmp	r3, #0
  13ec74:	1a000004 	bne	13ec8c <printf_core+0x3ac>
  13ec78:	e1a03007 	mov	r3, r7
  13ec7c:	e1a0200a 	mov	r2, sl
  13ec80:	e3a01020 	mov	r1, #32
  13ec84:	e59d0004 	ldr	r0, [sp, #4]
  13ec88:	ebfffee9 	bl	13e834 <pad.part.0>
  13ec8c:	e1a0b004 	mov	fp, r4
  13ec90:	eaffff1b 	b	13e904 <printf_core+0x24>
  13ec94:	e5d62001 	ldrb	r2, [r6, #1]
  13ec98:	e2423030 	sub	r3, r2, #48	; 0x30
  13ec9c:	e3530009 	cmp	r3, #9
  13eca0:	9a00008b 	bls	13eed4 <printf_core+0x5f4>
  13eca4:	e59d300c 	ldr	r3, [sp, #12]
  13eca8:	e3530000 	cmp	r3, #0
  13ecac:	1a000023 	bne	13ed40 <printf_core+0x460>
  13ecb0:	e59d3004 	ldr	r3, [sp, #4]
  13ecb4:	e2866001 	add	r6, r6, #1
  13ecb8:	e3530000 	cmp	r3, #0
  13ecbc:	0a0000be 	beq	13efbc <printf_core+0x6dc>
  13ecc0:	e59d1018 	ldr	r1, [sp, #24]
  13ecc4:	e5913000 	ldr	r3, [r1]
  13ecc8:	e2832004 	add	r2, r3, #4
  13eccc:	e5939000 	ldr	r9, [r3]
  13ecd0:	e5812000 	str	r2, [r1]
  13ecd4:	e5d62000 	ldrb	r2, [r6]
  13ecd8:	e3590000 	cmp	r9, #0
  13ecdc:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13ece0:	b2699000 	rsblt	r9, r9, #0
  13ece4:	e352002e 	cmp	r2, #46	; 0x2e
  13ece8:	0affff67 	beq	13ea8c <printf_core+0x1ac>
  13ecec:	e3a03000 	mov	r3, #0
  13ecf0:	e3e05000 	mvn	r5, #0
  13ecf4:	e58d301c 	str	r3, [sp, #28]
  13ecf8:	e3a07000 	mov	r7, #0
  13ecfc:	e59f0c30 	ldr	r0, [pc, #3120]	; 13f934 <printf_core+0x1054>
  13ed00:	ea000007 	b	13ed24 <printf_core+0x444>
  13ed04:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13ed08:	e2864001 	add	r4, r6, #1
  13ed0c:	e2413001 	sub	r3, r1, #1
  13ed10:	e3530007 	cmp	r3, #7
  13ed14:	8a000011 	bhi	13ed60 <printf_core+0x480>
  13ed18:	e5d62001 	ldrb	r2, [r6, #1]
  13ed1c:	e1a07001 	mov	r7, r1
  13ed20:	e1a06004 	mov	r6, r4
  13ed24:	e0673187 	rsb	r3, r7, r7, lsl #3
  13ed28:	e0873103 	add	r3, r7, r3, lsl #2
  13ed2c:	e0803083 	add	r3, r0, r3, lsl #1
  13ed30:	e0833002 	add	r3, r3, r2
  13ed34:	e2422041 	sub	r2, r2, #65	; 0x41
  13ed38:	e3520039 	cmp	r2, #57	; 0x39
  13ed3c:	9afffff0 	bls	13ed04 <printf_core+0x424>
  13ed40:	ebffe861 	bl	138ecc <__errno_location>
  13ed44:	e3a03016 	mov	r3, #22
  13ed48:	e3e02000 	mvn	r2, #0
  13ed4c:	e58d2000 	str	r2, [sp]
  13ed50:	e5803000 	str	r3, [r0]
  13ed54:	e59d0000 	ldr	r0, [sp]
  13ed58:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ed5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ed60:	e3510000 	cmp	r1, #0
  13ed64:	0afffff5 	beq	13ed40 <printf_core+0x460>
  13ed68:	e351001b 	cmp	r1, #27
  13ed6c:	0a000080 	beq	13ef74 <printf_core+0x694>
  13ed70:	e35c0000 	cmp	ip, #0
  13ed74:	ba0000a1 	blt	13f000 <printf_core+0x720>
  13ed78:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ed7c:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13ed80:	e083318c 	add	r3, r3, ip, lsl #3
  13ed84:	e782110c 	str	r1, [r2, ip, lsl #2]
  13ed88:	e893000c 	ldm	r3, {r2, r3}
  13ed8c:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13ed90:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13ed94:	e59d3004 	ldr	r3, [sp, #4]
  13ed98:	e3530000 	cmp	r3, #0
  13ed9c:	0a000079 	beq	13ef88 <printf_core+0x6a8>
  13eda0:	e5d63000 	ldrb	r3, [r6]
  13eda4:	e3570000 	cmp	r7, #0
  13eda8:	e58d3010 	str	r3, [sp, #16]
  13edac:	0a000004 	beq	13edc4 <printf_core+0x4e4>
  13edb0:	e203300f 	and	r3, r3, #15
  13edb4:	e3530003 	cmp	r3, #3
  13edb8:	059d3010 	ldreq	r3, [sp, #16]
  13edbc:	03c33020 	biceq	r3, r3, #32
  13edc0:	058d3010 	streq	r3, [sp, #16]
  13edc4:	e59d3010 	ldr	r3, [sp, #16]
  13edc8:	e3180a02 	tst	r8, #8192	; 0x2000
  13edcc:	e2433041 	sub	r3, r3, #65	; 0x41
  13edd0:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13edd4:	e3530037 	cmp	r3, #55	; 0x37
  13edd8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13eddc:	ea0001a2 	b	13f46c <printf_core+0xb8c>
  13ede0:	0013f2c0 	.word	0x0013f2c0
  13ede4:	0013f46c 	.word	0x0013f46c
  13ede8:	0013f15c 	.word	0x0013f15c
  13edec:	0013f46c 	.word	0x0013f46c
  13edf0:	0013f2c0 	.word	0x0013f2c0
  13edf4:	0013f2c0 	.word	0x0013f2c0
  13edf8:	0013f2c0 	.word	0x0013f2c0
  13edfc:	0013f46c 	.word	0x0013f46c
  13ee00:	0013f46c 	.word	0x0013f46c
  13ee04:	0013f46c 	.word	0x0013f46c
  13ee08:	0013f46c 	.word	0x0013f46c
  13ee0c:	0013f46c 	.word	0x0013f46c
  13ee10:	0013f46c 	.word	0x0013f46c
  13ee14:	0013f46c 	.word	0x0013f46c
  13ee18:	0013f46c 	.word	0x0013f46c
  13ee1c:	0013f46c 	.word	0x0013f46c
  13ee20:	0013f46c 	.word	0x0013f46c
  13ee24:	0013f46c 	.word	0x0013f46c
  13ee28:	0013f1cc 	.word	0x0013f1cc
  13ee2c:	0013f46c 	.word	0x0013f46c
  13ee30:	0013f46c 	.word	0x0013f46c
  13ee34:	0013f46c 	.word	0x0013f46c
  13ee38:	0013f46c 	.word	0x0013f46c
  13ee3c:	0013f460 	.word	0x0013f460
  13ee40:	0013f46c 	.word	0x0013f46c
  13ee44:	0013f46c 	.word	0x0013f46c
  13ee48:	0013f46c 	.word	0x0013f46c
  13ee4c:	0013f46c 	.word	0x0013f46c
  13ee50:	0013f46c 	.word	0x0013f46c
  13ee54:	0013f46c 	.word	0x0013f46c
  13ee58:	0013f46c 	.word	0x0013f46c
  13ee5c:	0013f46c 	.word	0x0013f46c
  13ee60:	0013f2c0 	.word	0x0013f2c0
  13ee64:	0013f46c 	.word	0x0013f46c
  13ee68:	0013f1e0 	.word	0x0013f1e0
  13ee6c:	0013f21c 	.word	0x0013f21c
  13ee70:	0013f2c0 	.word	0x0013f2c0
  13ee74:	0013f2c0 	.word	0x0013f2c0
  13ee78:	0013f2c0 	.word	0x0013f2c0
  13ee7c:	0013f46c 	.word	0x0013f46c
  13ee80:	0013f21c 	.word	0x0013f21c
  13ee84:	0013f46c 	.word	0x0013f46c
  13ee88:	0013f46c 	.word	0x0013f46c
  13ee8c:	0013f46c 	.word	0x0013f46c
  13ee90:	0013f264 	.word	0x0013f264
  13ee94:	0013f294 	.word	0x0013f294
  13ee98:	0013eb10 	.word	0x0013eb10
  13ee9c:	0013f3b4 	.word	0x0013f3b4
  13eea0:	0013f46c 	.word	0x0013f46c
  13eea4:	0013f46c 	.word	0x0013f46c
  13eea8:	0013f44c 	.word	0x0013f44c
  13eeac:	0013f46c 	.word	0x0013f46c
  13eeb0:	0013f0a0 	.word	0x0013f0a0
  13eeb4:	0013f46c 	.word	0x0013f46c
  13eeb8:	0013f46c 	.word	0x0013f46c
  13eebc:	0013f460 	.word	0x0013f460
  13eec0:	e59d2004 	ldr	r2, [sp, #4]
  13eec4:	e1a0100a 	mov	r1, sl
  13eec8:	e1a0000b 	mov	r0, fp
  13eecc:	eb001341 	bl	143bd8 <__fwritex>
  13eed0:	eafffeb3 	b	13e9a4 <printf_core+0xc4>
  13eed4:	e5d63002 	ldrb	r3, [r6, #2]
  13eed8:	e3530024 	cmp	r3, #36	; 0x24
  13eedc:	1affff70 	bne	13eca4 <printf_core+0x3c4>
  13eee0:	e3a0300a 	mov	r3, #10
  13eee4:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13eee8:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13eeec:	e7813102 	str	r3, [r1, r2, lsl #2]
  13eef0:	e3a02001 	mov	r2, #1
  13eef4:	e5d63001 	ldrb	r3, [r6, #1]
  13eef8:	e58d200c 	str	r2, [sp, #12]
  13eefc:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13ef00:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13ef04:	e2433030 	sub	r3, r3, #48	; 0x30
  13ef08:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13ef0c:	e2866003 	add	r6, r6, #3
  13ef10:	eaffff6f 	b	13ecd4 <printf_core+0x3f4>
  13ef14:	e2421030 	sub	r1, r2, #48	; 0x30
  13ef18:	e3510009 	cmp	r1, #9
  13ef1c:	e3a05000 	mov	r5, #0
  13ef20:	e2866001 	add	r6, r6, #1
  13ef24:	8a00000f 	bhi	13ef68 <printf_core+0x688>
  13ef28:	e59f09fc 	ldr	r0, [pc, #2556]	; 13f92c <printf_core+0x104c>
  13ef2c:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13ef30:	e0653103 	rsb	r3, r5, r3, lsl #2
  13ef34:	e1a03083 	lsl	r3, r3, #1
  13ef38:	e1550000 	cmp	r5, r0
  13ef3c:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ef40:	8a000003 	bhi	13ef54 <printf_core+0x674>
  13ef44:	e1510003 	cmp	r1, r3
  13ef48:	e0855105 	add	r5, r5, r5, lsl #2
  13ef4c:	d0815085 	addle	r5, r1, r5, lsl #1
  13ef50:	da000000 	ble	13ef58 <printf_core+0x678>
  13ef54:	e3e05000 	mvn	r5, #0
  13ef58:	e5f62001 	ldrb	r2, [r6, #1]!
  13ef5c:	e2421030 	sub	r1, r2, #48	; 0x30
  13ef60:	e3510009 	cmp	r1, #9
  13ef64:	9afffff0 	bls	13ef2c <printf_core+0x64c>
  13ef68:	e3a03001 	mov	r3, #1
  13ef6c:	e58d301c 	str	r3, [sp, #28]
  13ef70:	eaffff60 	b	13ecf8 <printf_core+0x418>
  13ef74:	e35c0000 	cmp	ip, #0
  13ef78:	aaffff70 	bge	13ed40 <printf_core+0x460>
  13ef7c:	e59d3004 	ldr	r3, [sp, #4]
  13ef80:	e3530000 	cmp	r3, #0
  13ef84:	1affff85 	bne	13eda0 <printf_core+0x4c0>
  13ef88:	e59d3008 	ldr	r3, [sp, #8]
  13ef8c:	e153000a 	cmp	r3, sl
  13ef90:	aaffff3d 	bge	13ec8c <printf_core+0x3ac>
  13ef94:	ebffe7cc 	bl	138ecc <__errno_location>
  13ef98:	e3e02000 	mvn	r2, #0
  13ef9c:	e3a0304b 	mov	r3, #75	; 0x4b
  13efa0:	e58d2000 	str	r2, [sp]
  13efa4:	e5803000 	str	r3, [r0]
  13efa8:	e59d0000 	ldr	r0, [sp]
  13efac:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13efb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13efb4:	e1a04003 	mov	r4, r3
  13efb8:	eafffe6c 	b	13e970 <printf_core+0x90>
  13efbc:	e59d9004 	ldr	r9, [sp, #4]
  13efc0:	eafffeaf 	b	13ea84 <printf_core+0x1a4>
  13efc4:	e3a0300a 	mov	r3, #10
  13efc8:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13efcc:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13efd0:	e7813102 	str	r3, [r1, r2, lsl #2]
  13efd4:	e5d63002 	ldrb	r3, [r6, #2]
  13efd8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13efdc:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13efe0:	e2433030 	sub	r3, r3, #48	; 0x30
  13efe4:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13efe8:	e5d62004 	ldrb	r2, [r6, #4]
  13efec:	e1e03005 	mvn	r3, r5
  13eff0:	e1a03fa3 	lsr	r3, r3, #31
  13eff4:	e2866004 	add	r6, r6, #4
  13eff8:	e58d301c 	str	r3, [sp, #28]
  13effc:	eaffff3d 	b	13ecf8 <printf_core+0x418>
  13f000:	e59d3004 	ldr	r3, [sp, #4]
  13f004:	e3530000 	cmp	r3, #0
  13f008:	0a000409 	beq	140034 <printf_core+0x1754>
  13f00c:	e59d2018 	ldr	r2, [sp, #24]
  13f010:	e28d0070 	add	r0, sp, #112	; 0x70
  13f014:	ebfffda1 	bl	13e6a0 <pop_arg>
  13f018:	eaffff60 	b	13eda0 <printf_core+0x4c0>
  13f01c:	e3a03001 	mov	r3, #1
  13f020:	e5d42003 	ldrb	r2, [r4, #3]
  13f024:	e58d300c 	str	r3, [sp, #12]
  13f028:	e2423020 	sub	r3, r2, #32
  13f02c:	e353001f 	cmp	r3, #31
  13f030:	e2846003 	add	r6, r4, #3
  13f034:	9afffe68 	bls	13e9dc <printf_core+0xfc>
  13f038:	e3a08000 	mov	r8, #0
  13f03c:	eafffe75 	b	13ea18 <printf_core+0x138>
  13f040:	e59d3004 	ldr	r3, [sp, #4]
  13f044:	e3530000 	cmp	r3, #0
  13f048:	1affff41 	bne	13ed54 <printf_core+0x474>
  13f04c:	e59d300c 	ldr	r3, [sp, #12]
  13f050:	e3530000 	cmp	r3, #0
  13f054:	0a0003f6 	beq	140034 <printf_core+0x1754>
  13f058:	e3a05001 	mov	r5, #1
  13f05c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13f060:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13f064:	e59d7018 	ldr	r7, [sp, #24]
  13f068:	e2834008 	add	r4, r3, #8
  13f06c:	e5b61004 	ldr	r1, [r6, #4]!
  13f070:	e3510000 	cmp	r1, #0
  13f074:	0a0004f8 	beq	14045c <printf_core+0x1b7c>
  13f078:	e1a00004 	mov	r0, r4
  13f07c:	e2855001 	add	r5, r5, #1
  13f080:	e1a02007 	mov	r2, r7
  13f084:	ebfffd85 	bl	13e6a0 <pop_arg>
  13f088:	e355000a 	cmp	r5, #10
  13f08c:	e2844008 	add	r4, r4, #8
  13f090:	1afffff5 	bne	13f06c <printf_core+0x78c>
  13f094:	e3a03001 	mov	r3, #1
  13f098:	e58d3000 	str	r3, [sp]
  13f09c:	eaffff2c 	b	13ed54 <printf_core+0x474>
  13f0a0:	e3a03000 	mov	r3, #0
  13f0a4:	e28d7070 	add	r7, sp, #112	; 0x70
  13f0a8:	e89700c0 	ldm	r7, {r6, r7}
  13f0ac:	e58d3020 	str	r3, [sp, #32]
  13f0b0:	e59f3878 	ldr	r3, [pc, #2168]	; 13f930 <printf_core+0x1050>
  13f0b4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f0b8:	e3a03000 	mov	r3, #0
  13f0bc:	e3e02000 	mvn	r2, #0
  13f0c0:	e1570003 	cmp	r7, r3
  13f0c4:	01560002 	cmpeq	r6, r2
  13f0c8:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f0cc:	91a0b00a 	movls	fp, sl
  13f0d0:	9a000015 	bls	13f12c <printf_core+0x84c>
  13f0d4:	e1a0b00a 	mov	fp, sl
  13f0d8:	e58d2010 	str	r2, [sp, #16]
  13f0dc:	e58d3014 	str	r3, [sp, #20]
  13f0e0:	e1a00006 	mov	r0, r6
  13f0e4:	e1a01007 	mov	r1, r7
  13f0e8:	e3a0200a 	mov	r2, #10
  13f0ec:	e3a03000 	mov	r3, #0
  13f0f0:	eb001834 	bl	1451c8 <__aeabi_uldivmod>
  13f0f4:	e2822030 	add	r2, r2, #48	; 0x30
  13f0f8:	e56b2001 	strb	r2, [fp, #-1]!
  13f0fc:	e1a00006 	mov	r0, r6
  13f100:	e1a01007 	mov	r1, r7
  13f104:	e3a0200a 	mov	r2, #10
  13f108:	e3a03000 	mov	r3, #0
  13f10c:	eb00182d 	bl	1451c8 <__aeabi_uldivmod>
  13f110:	e28d3010 	add	r3, sp, #16
  13f114:	e893000c 	ldm	r3, {r2, r3}
  13f118:	e1510003 	cmp	r1, r3
  13f11c:	01500002 	cmpeq	r0, r2
  13f120:	e1a06000 	mov	r6, r0
  13f124:	e1a07001 	mov	r7, r1
  13f128:	8affffec 	bhi	13f0e0 <printf_core+0x800>
  13f12c:	e3560000 	cmp	r6, #0
  13f130:	0afffe90 	beq	13eb78 <printf_core+0x298>
  13f134:	e59f1838 	ldr	r1, [pc, #2104]	; 13f974 <printf_core+0x1094>
  13f138:	e0832196 	umull	r2, r3, r6, r1
  13f13c:	e1a031a3 	lsr	r3, r3, #3
  13f140:	e0832103 	add	r2, r3, r3, lsl #2
  13f144:	e0466082 	sub	r6, r6, r2, lsl #1
  13f148:	e2862030 	add	r2, r6, #48	; 0x30
  13f14c:	e2536000 	subs	r6, r3, #0
  13f150:	e56b2001 	strb	r2, [fp, #-1]!
  13f154:	1afffff6 	bne	13f134 <printf_core+0x854>
  13f158:	eafffe86 	b	13eb78 <printf_core+0x298>
  13f15c:	e3a03000 	mov	r3, #0
  13f160:	e3e0a000 	mvn	sl, #0
  13f164:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f168:	e28d707c 	add	r7, sp, #124	; 0x7c
  13f16c:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13f170:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13f174:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13f178:	e3510000 	cmp	r1, #0
  13f17c:	0a000112 	beq	13f5cc <printf_core+0xcec>
  13f180:	e3a05000 	mov	r5, #0
  13f184:	e28d6068 	add	r6, sp, #104	; 0x68
  13f188:	ea000007 	b	13f1ac <printf_core+0x8cc>
  13f18c:	e1530000 	cmp	r3, r0
  13f190:	3a0000e4 	bcc	13f528 <printf_core+0xc48>
  13f194:	e0855000 	add	r5, r5, r0
  13f198:	e155000a 	cmp	r5, sl
  13f19c:	2a0000e1 	bcs	13f528 <printf_core+0xc48>
  13f1a0:	e5b71004 	ldr	r1, [r7, #4]!
  13f1a4:	e3510000 	cmp	r1, #0
  13f1a8:	0a0000de 	beq	13f528 <printf_core+0xc48>
  13f1ac:	e1a00006 	mov	r0, r6
  13f1b0:	eb00109c 	bl	143428 <wctomb>
  13f1b4:	e3500000 	cmp	r0, #0
  13f1b8:	e04a3005 	sub	r3, sl, r5
  13f1bc:	aafffff2 	bge	13f18c <printf_core+0x8ac>
  13f1c0:	e3e03000 	mvn	r3, #0
  13f1c4:	e58d3000 	str	r3, [sp]
  13f1c8:	eafffee1 	b	13ed54 <printf_core+0x474>
  13f1cc:	e255a000 	subs	sl, r5, #0
  13f1d0:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f1d4:	0a0000fc 	beq	13f5cc <printf_core+0xcec>
  13f1d8:	e5971000 	ldr	r1, [r7]
  13f1dc:	eaffffe5 	b	13f178 <printf_core+0x898>
  13f1e0:	e3a00001 	mov	r0, #1
  13f1e4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f1e8:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f1ec:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13f1f0:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f1f4:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13f1f8:	e3a03000 	mov	r3, #0
  13f1fc:	e046600b 	sub	r6, r6, fp
  13f200:	e58d3020 	str	r3, [sp, #32]
  13f204:	e59f3724 	ldr	r3, [pc, #1828]	; 13f930 <printf_core+0x1050>
  13f208:	e1560000 	cmp	r6, r0
  13f20c:	a1a05006 	movge	r5, r6
  13f210:	b1a05000 	movlt	r5, r0
  13f214:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f218:	eafffe70 	b	13ebe0 <printf_core+0x300>
  13f21c:	e28d7070 	add	r7, sp, #112	; 0x70
  13f220:	e89700c0 	ldm	r7, {r6, r7}
  13f224:	e3560000 	cmp	r6, #0
  13f228:	e2d73000 	sbcs	r3, r7, #0
  13f22c:	ba000122 	blt	13f6bc <printf_core+0xddc>
  13f230:	e3180b02 	tst	r8, #2048	; 0x800
  13f234:	1a000379 	bne	140020 <printf_core+0x1740>
  13f238:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13f930 <printf_core+0x1050>
  13f23c:	e2083001 	and	r3, r8, #1
  13f240:	e3530000 	cmp	r3, #0
  13f244:	e28a2002 	add	r2, sl, #2
  13f248:	01a0300a 	moveq	r3, sl
  13f24c:	11a03002 	movne	r3, r2
  13f250:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f254:	13a03001 	movne	r3, #1
  13f258:	03a03000 	moveq	r3, #0
  13f25c:	e58d3020 	str	r3, [sp, #32]
  13f260:	eaffff94 	b	13f0b8 <printf_core+0x7d8>
  13f264:	ebffe718 	bl	138ecc <__errno_location>
  13f268:	e5900000 	ldr	r0, [r0]
  13f26c:	ebffe738 	bl	138f54 <strerror>
  13f270:	e1a0b000 	mov	fp, r0
  13f274:	e3550000 	cmp	r5, #0
  13f278:	ba0000fa 	blt	13f668 <printf_core+0xd88>
  13f27c:	e1a01005 	mov	r1, r5
  13f280:	e1a0000b 	mov	r0, fp
  13f284:	eb0008dd 	bl	141600 <strnlen>
  13f288:	e08b6000 	add	r6, fp, r0
  13f28c:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f290:	eaffffd8 	b	13f1f8 <printf_core+0x918>
  13f294:	e3570007 	cmp	r7, #7
  13f298:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13f29c:	eaffff39 	b	13ef88 <printf_core+0x6a8>
  13f2a0:	0013f490 	.word	0x0013f490
  13f2a4:	0013f490 	.word	0x0013f490
  13f2a8:	0013f4a0 	.word	0x0013f4a0
  13f2ac:	0013f4b4 	.word	0x0013f4b4
  13f2b0:	0013f4c4 	.word	0x0013f4c4
  13f2b4:	0013ef88 	.word	0x0013ef88
  13f2b8:	0013f490 	.word	0x0013f490
  13f2bc:	0013f4a0 	.word	0x0013f4a0
  13f2c0:	e59d301c 	ldr	r3, [sp, #28]
  13f2c4:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13f2c8:	1affff31 	bne	13ef94 <printf_core+0x6b4>
  13f2cc:	e28d7070 	add	r7, sp, #112	; 0x70
  13f2d0:	e89700c0 	ldm	r7, {r6, r7}
  13f2d4:	e1b02fa7 	lsrs	r2, r7, #31
  13f2d8:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13f2dc:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f2e0:	0a0000e8 	beq	13f688 <printf_core+0xda8>
  13f2e4:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13f2e8:	e1a07003 	mov	r7, r3
  13f2ec:	e59f3644 	ldr	r3, [pc, #1604]	; 13f938 <printf_core+0x1058>
  13f2f0:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f2f4:	e3e02000 	mvn	r2, #0
  13f2f8:	e59f363c 	ldr	r3, [pc, #1596]	; 13f93c <printf_core+0x105c>
  13f2fc:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13f300:	e1510003 	cmp	r1, r3
  13f304:	01560002 	cmpeq	r6, r2
  13f308:	e1a00006 	mov	r0, r6
  13f30c:	9a0000fb 	bls	13f700 <printf_core+0xe20>
  13f310:	e59d3010 	ldr	r3, [sp, #16]
  13f314:	e59fe624 	ldr	lr, [pc, #1572]	; 13f940 <printf_core+0x1060>
  13f318:	e59fc624 	ldr	ip, [pc, #1572]	; 13f944 <printf_core+0x1064>
  13f31c:	e213a020 	ands	sl, r3, #32
  13f320:	e1a02006 	mov	r2, r6
  13f324:	e1a03007 	mov	r3, r7
  13f328:	e1a01007 	mov	r1, r7
  13f32c:	01a0600e 	moveq	r6, lr
  13f330:	11a0600c 	movne	r6, ip
  13f334:	eb001729 	bl	144fe0 <__aeabi_dcmpeq>
  13f338:	e3500000 	cmp	r0, #0
  13f33c:	1a000004 	bne	13f354 <printf_core+0xa74>
  13f340:	e59fe600 	ldr	lr, [pc, #1536]	; 13f948 <printf_core+0x1068>
  13f344:	e59fc600 	ldr	ip, [pc, #1536]	; 13f94c <printf_core+0x106c>
  13f348:	e35a0000 	cmp	sl, #0
  13f34c:	01a0600e 	moveq	r6, lr
  13f350:	11a0600c 	movne	r6, ip
  13f354:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f358:	e283a003 	add	sl, r3, #3
  13f35c:	e159000a 	cmp	r9, sl
  13f360:	c3a07000 	movgt	r7, #0
  13f364:	d3a07001 	movle	r7, #1
  13f368:	e3180a02 	tst	r8, #8192	; 0x2000
  13f36c:	01a03007 	moveq	r3, r7
  13f370:	13a03001 	movne	r3, #1
  13f374:	e3530000 	cmp	r3, #0
  13f378:	0a00042e 	beq	140438 <printf_core+0x1b58>
  13f37c:	e59d3004 	ldr	r3, [sp, #4]
  13f380:	e5933000 	ldr	r3, [r3]
  13f384:	e3130020 	tst	r3, #32
  13f388:	0a00032c 	beq	140040 <printf_core+0x1760>
  13f38c:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f390:	e3130a12 	tst	r3, #73728	; 0x12000
  13f394:	13a07001 	movne	r7, #1
  13f398:	e3570000 	cmp	r7, #0
  13f39c:	0a00034f 	beq	1400e0 <printf_core+0x1800>
  13f3a0:	e159000a 	cmp	r9, sl
  13f3a4:	a1a0a009 	movge	sl, r9
  13f3a8:	e35a0000 	cmp	sl, #0
  13f3ac:	aafffef5 	bge	13ef88 <printf_core+0x6a8>
  13f3b0:	eafffef7 	b	13ef94 <printf_core+0x6b4>
  13f3b4:	e3550008 	cmp	r5, #8
  13f3b8:	e3a03078 	mov	r3, #120	; 0x78
  13f3bc:	33a05008 	movcc	r5, #8
  13f3c0:	e3a0c020 	mov	ip, #32
  13f3c4:	e58d3010 	str	r3, [sp, #16]
  13f3c8:	e3888008 	orr	r8, r8, #8
  13f3cc:	e28d3070 	add	r3, sp, #112	; 0x70
  13f3d0:	e893000c 	ldm	r3, {r2, r3}
  13f3d4:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f3d8:	e1921003 	orrs	r1, r2, r3
  13f3dc:	e1a0b00a 	mov	fp, sl
  13f3e0:	0a00004b 	beq	13f514 <printf_core+0xc34>
  13f3e4:	e59f6584 	ldr	r6, [pc, #1412]	; 13f970 <printf_core+0x1090>
  13f3e8:	e3a01000 	mov	r1, #0
  13f3ec:	e202000f 	and	r0, r2, #15
  13f3f0:	e1a0e222 	lsr	lr, r2, #4
  13f3f4:	e58d0020 	str	r0, [sp, #32]
  13f3f8:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f3fc:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f400:	e1a01223 	lsr	r1, r3, #4
  13f404:	e1a03001 	mov	r3, r1
  13f408:	e1a0200e 	mov	r2, lr
  13f40c:	e59d1020 	ldr	r1, [sp, #32]
  13f410:	e0860001 	add	r0, r6, r1
  13f414:	e5d01000 	ldrb	r1, [r0]
  13f418:	e1920003 	orrs	r0, r2, r3
  13f41c:	e18c1001 	orr	r1, ip, r1
  13f420:	e56b1001 	strb	r1, [fp, #-1]!
  13f424:	1affffef 	bne	13f3e8 <printf_core+0xb08>
  13f428:	e2183008 	ands	r3, r8, #8
  13f42c:	0a000039 	beq	13f518 <printf_core+0xc38>
  13f430:	e3a02002 	mov	r2, #2
  13f434:	e59f34f4 	ldr	r3, [pc, #1268]	; 13f930 <printf_core+0x1050>
  13f438:	e58d2020 	str	r2, [sp, #32]
  13f43c:	e59d2010 	ldr	r2, [sp, #16]
  13f440:	e0833242 	add	r3, r3, r2, asr #4
  13f444:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f448:	eafffdca 	b	13eb78 <printf_core+0x298>
  13f44c:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f450:	e59f34f8 	ldr	r3, [pc, #1272]	; 13f950 <printf_core+0x1070>
  13f454:	e35b0000 	cmp	fp, #0
  13f458:	01a0b003 	moveq	fp, r3
  13f45c:	eaffff84 	b	13f274 <printf_core+0x994>
  13f460:	e59d3010 	ldr	r3, [sp, #16]
  13f464:	e203c020 	and	ip, r3, #32
  13f468:	eaffffd7 	b	13f3cc <printf_core+0xaec>
  13f46c:	e3a03000 	mov	r3, #0
  13f470:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f474:	e046600b 	sub	r6, r6, fp
  13f478:	e58d3020 	str	r3, [sp, #32]
  13f47c:	e59f34ac 	ldr	r3, [pc, #1196]	; 13f930 <printf_core+0x1050>
  13f480:	e1560005 	cmp	r6, r5
  13f484:	a1a05006 	movge	r5, r6
  13f488:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f48c:	eafffdd3 	b	13ebe0 <printf_core+0x300>
  13f490:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f494:	e59d2000 	ldr	r2, [sp]
  13f498:	e5832000 	str	r2, [r3]
  13f49c:	eafffeb9 	b	13ef88 <printf_core+0x6a8>
  13f4a0:	e59d2000 	ldr	r2, [sp]
  13f4a4:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f4a8:	e1a03fc2 	asr	r3, r2, #31
  13f4ac:	e881000c 	stm	r1, {r2, r3}
  13f4b0:	eafffeb4 	b	13ef88 <printf_core+0x6a8>
  13f4b4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4b8:	e59d2000 	ldr	r2, [sp]
  13f4bc:	e1c320b0 	strh	r2, [r3]
  13f4c0:	eafffeb0 	b	13ef88 <printf_core+0x6a8>
  13f4c4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4c8:	e59d2000 	ldr	r2, [sp]
  13f4cc:	e5c32000 	strb	r2, [r3]
  13f4d0:	eafffeac 	b	13ef88 <printf_core+0x6a8>
  13f4d4:	e1a01006 	mov	r1, r6
  13f4d8:	e1a0000b 	mov	r0, fp
  13f4dc:	e59d2004 	ldr	r2, [sp, #4]
  13f4e0:	eb0011bc 	bl	143bd8 <__fwritex>
  13f4e4:	eafffddd 	b	13ec60 <printf_core+0x380>
  13f4e8:	e1a02005 	mov	r2, r5
  13f4ec:	e1a03006 	mov	r3, r6
  13f4f0:	e3a01030 	mov	r1, #48	; 0x30
  13f4f4:	e59d0004 	ldr	r0, [sp, #4]
  13f4f8:	ebfffccd 	bl	13e834 <pad.part.0>
  13f4fc:	eafffdd3 	b	13ec50 <printf_core+0x370>
  13f500:	e59d1020 	ldr	r1, [sp, #32]
  13f504:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f508:	e59d2004 	ldr	r2, [sp, #4]
  13f50c:	eb0011b1 	bl	143bd8 <__fwritex>
  13f510:	eafffdc6 	b	13ec30 <printf_core+0x350>
  13f514:	e3a03000 	mov	r3, #0
  13f518:	e58d3020 	str	r3, [sp, #32]
  13f51c:	e59f340c 	ldr	r3, [pc, #1036]	; 13f930 <printf_core+0x1050>
  13f520:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f524:	eafffd93 	b	13eb78 <printf_core+0x298>
  13f528:	e3550000 	cmp	r5, #0
  13f52c:	e1a0b005 	mov	fp, r5
  13f530:	bafffe97 	blt	13ef94 <printf_core+0x6b4>
  13f534:	e1550009 	cmp	r5, r9
  13f538:	b3a03000 	movlt	r3, #0
  13f53c:	a3a03001 	movge	r3, #1
  13f540:	e3180a12 	tst	r8, #73728	; 0x12000
  13f544:	e58d3010 	str	r3, [sp, #16]
  13f548:	13a03001 	movne	r3, #1
  13f54c:	e3530000 	cmp	r3, #0
  13f550:	0a000062 	beq	13f6e0 <printf_core+0xe00>
  13f554:	e3550000 	cmp	r5, #0
  13f558:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f55c:	0a000025 	beq	13f5f8 <printf_core+0xd18>
  13f560:	e5971000 	ldr	r1, [r7]
  13f564:	e3510000 	cmp	r1, #0
  13f568:	0a000022 	beq	13f5f8 <printf_core+0xd18>
  13f56c:	e3a0a000 	mov	sl, #0
  13f570:	e58d401c 	str	r4, [sp, #28]
  13f574:	e28d6068 	add	r6, sp, #104	; 0x68
  13f578:	e1a0400a 	mov	r4, sl
  13f57c:	e59da004 	ldr	sl, [sp, #4]
  13f580:	ea000004 	b	13f598 <printf_core+0xcb8>
  13f584:	e1540005 	cmp	r4, r5
  13f588:	2a000024 	bcs	13f620 <printf_core+0xd40>
  13f58c:	e5b71004 	ldr	r1, [r7, #4]!
  13f590:	e3510000 	cmp	r1, #0
  13f594:	0a000021 	beq	13f620 <printf_core+0xd40>
  13f598:	e1a00006 	mov	r0, r6
  13f59c:	eb000fa1 	bl	143428 <wctomb>
  13f5a0:	e0844000 	add	r4, r4, r0
  13f5a4:	e1540005 	cmp	r4, r5
  13f5a8:	8a00001c 	bhi	13f620 <printf_core+0xd40>
  13f5ac:	e59a2000 	ldr	r2, [sl]
  13f5b0:	e3120020 	tst	r2, #32
  13f5b4:	1afffff2 	bne	13f584 <printf_core+0xca4>
  13f5b8:	e1a01000 	mov	r1, r0
  13f5bc:	e1a0200a 	mov	r2, sl
  13f5c0:	e1a00006 	mov	r0, r6
  13f5c4:	eb001183 	bl	143bd8 <__fwritex>
  13f5c8:	eaffffed 	b	13f584 <printf_core+0xca4>
  13f5cc:	e3590000 	cmp	r9, #0
  13f5d0:	c3a03000 	movgt	r3, #0
  13f5d4:	d3a03001 	movle	r3, #1
  13f5d8:	e3180a12 	tst	r8, #73728	; 0x12000
  13f5dc:	e58d3010 	str	r3, [sp, #16]
  13f5e0:	13a03001 	movne	r3, #1
  13f5e4:	e3530000 	cmp	r3, #0
  13f5e8:	01a0b003 	moveq	fp, r3
  13f5ec:	01a0500b 	moveq	r5, fp
  13f5f0:	0a00003a 	beq	13f6e0 <printf_core+0xe00>
  13f5f4:	e3a0b000 	mov	fp, #0
  13f5f8:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f5fc:	e3130a12 	tst	r3, #73728	; 0x12000
  13f600:	e59d3010 	ldr	r3, [sp, #16]
  13f604:	13a03001 	movne	r3, #1
  13f608:	e3530000 	cmp	r3, #0
  13f60c:	0a00027d 	beq	140008 <printf_core+0x1728>
  13f610:	e159000b 	cmp	r9, fp
  13f614:	a1a0a009 	movge	sl, r9
  13f618:	b1a0a00b 	movlt	sl, fp
  13f61c:	eafffe59 	b	13ef88 <printf_core+0x6a8>
  13f620:	e59d401c 	ldr	r4, [sp, #28]
  13f624:	eafffff3 	b	13f5f8 <printf_core+0xd18>
  13f628:	e1a03007 	mov	r3, r7
  13f62c:	e1a0200a 	mov	r2, sl
  13f630:	e3a01020 	mov	r1, #32
  13f634:	e59d0004 	ldr	r0, [sp, #4]
  13f638:	ebfffc7d 	bl	13e834 <pad.part.0>
  13f63c:	eafffd77 	b	13ec20 <printf_core+0x340>
  13f640:	e1a03007 	mov	r3, r7
  13f644:	e1a0200a 	mov	r2, sl
  13f648:	e3a01030 	mov	r1, #48	; 0x30
  13f64c:	e59d0004 	ldr	r0, [sp, #4]
  13f650:	ebfffc77 	bl	13e834 <pad.part.0>
  13f654:	eafffd7b 	b	13ec48 <printf_core+0x368>
  13f658:	e3a05000 	mov	r5, #0
  13f65c:	e1a0b00a 	mov	fp, sl
  13f660:	e1a06005 	mov	r6, r5
  13f664:	eafffd5d 	b	13ebe0 <printf_core+0x300>
  13f668:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f66c:	e1a0000b 	mov	r0, fp
  13f670:	eb0007e2 	bl	141600 <strnlen>
  13f674:	e7db3000 	ldrb	r3, [fp, r0]
  13f678:	e08b6000 	add	r6, fp, r0
  13f67c:	e3530000 	cmp	r3, #0
  13f680:	0affff01 	beq	13f28c <printf_core+0x9ac>
  13f684:	eafffe42 	b	13ef94 <printf_core+0x6b4>
  13f688:	e3180b02 	tst	r8, #2048	; 0x800
  13f68c:	1a000278 	bne	140074 <printf_core+0x1794>
  13f690:	e59f22bc 	ldr	r2, [pc, #700]	; 13f954 <printf_core+0x1074>
  13f694:	e2083001 	and	r3, r8, #1
  13f698:	e3530000 	cmp	r3, #0
  13f69c:	e2821005 	add	r1, r2, #5
  13f6a0:	01a03002 	moveq	r3, r2
  13f6a4:	11a03001 	movne	r3, r1
  13f6a8:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f6ac:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f6b0:	13a03001 	movne	r3, #1
  13f6b4:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f6b8:	eaffff0d 	b	13f2f4 <printf_core+0xa14>
  13f6bc:	e3a03001 	mov	r3, #1
  13f6c0:	e2766000 	rsbs	r6, r6, #0
  13f6c4:	e58d3020 	str	r3, [sp, #32]
  13f6c8:	e59f3260 	ldr	r3, [pc, #608]	; 13f930 <printf_core+0x1050>
  13f6cc:	e2e77000 	rsc	r7, r7, #0
  13f6d0:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f6d4:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f6d8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f6dc:	eafffe75 	b	13f0b8 <printf_core+0x7d8>
  13f6e0:	e1a0300b 	mov	r3, fp
  13f6e4:	e1a02009 	mov	r2, r9
  13f6e8:	e3a01020 	mov	r1, #32
  13f6ec:	e59d0004 	ldr	r0, [sp, #4]
  13f6f0:	ebfffc4f 	bl	13e834 <pad.part.0>
  13f6f4:	e3a03000 	mov	r3, #0
  13f6f8:	e58d3010 	str	r3, [sp, #16]
  13f6fc:	eaffff94 	b	13f554 <printf_core+0xc74>
  13f700:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f704:	e1a01007 	mov	r1, r7
  13f708:	eb000f2f 	bl	1433cc <frexpl>
  13f70c:	e1a02000 	mov	r2, r0
  13f710:	e1a03001 	mov	r3, r1
  13f714:	eb0013f6 	bl	1446f4 <__adddf3>
  13f718:	e3a03000 	mov	r3, #0
  13f71c:	e3a02000 	mov	r2, #0
  13f720:	e58d001c 	str	r0, [sp, #28]
  13f724:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f728:	eb00162c 	bl	144fe0 <__aeabi_dcmpeq>
  13f72c:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f730:	e3500000 	cmp	r0, #0
  13f734:	02433001 	subeq	r3, r3, #1
  13f738:	158d3020 	strne	r3, [sp, #32]
  13f73c:	058d3020 	streq	r3, [sp, #32]
  13f740:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f744:	e59d3010 	ldr	r3, [sp, #16]
  13f748:	e3833020 	orr	r3, r3, #32
  13f74c:	e3530061 	cmp	r3, #97	; 0x61
  13f750:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f754:	0a000267 	beq	1400f8 <printf_core+0x1818>
  13f758:	e3550000 	cmp	r5, #0
  13f75c:	ba000460 	blt	1408e4 <printf_core+0x2004>
  13f760:	13a03001 	movne	r3, #1
  13f764:	03a03000 	moveq	r3, #0
  13f768:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f76c:	e59d701c 	ldr	r7, [sp, #28]
  13f770:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f774:	e1a00007 	mov	r0, r7
  13f778:	e1a01006 	mov	r1, r6
  13f77c:	e3a02000 	mov	r2, #0
  13f780:	e3a03000 	mov	r3, #0
  13f784:	eb001615 	bl	144fe0 <__aeabi_dcmpeq>
  13f788:	e3500000 	cmp	r0, #0
  13f78c:	1a00000a 	bne	13f7bc <printf_core+0xedc>
  13f790:	e59f31c0 	ldr	r3, [pc, #448]	; 13f958 <printf_core+0x1078>
  13f794:	e1a00007 	mov	r0, r7
  13f798:	e1a01006 	mov	r1, r6
  13f79c:	e3a02000 	mov	r2, #0
  13f7a0:	eb0014c0 	bl	144aa8 <__aeabi_dmul>
  13f7a4:	e59d3020 	ldr	r3, [sp, #32]
  13f7a8:	e58d001c 	str	r0, [sp, #28]
  13f7ac:	e243301c 	sub	r3, r3, #28
  13f7b0:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f7b4:	e58d3020 	str	r3, [sp, #32]
  13f7b8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f7bc:	e59d3020 	ldr	r3, [sp, #32]
  13f7c0:	e59d601c 	ldr	r6, [sp, #28]
  13f7c4:	e3530000 	cmp	r3, #0
  13f7c8:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f7cc:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f7d0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f7d4:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f7d8:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f7dc:	e1a01007 	mov	r1, r7
  13f7e0:	e1a00006 	mov	r0, r6
  13f7e4:	eb00162d 	bl	1450a0 <__aeabi_d2uiz>
  13f7e8:	e48b0004 	str	r0, [fp], #4
  13f7ec:	eb00146b 	bl	1449a0 <__aeabi_ui2d>
  13f7f0:	e1a02000 	mov	r2, r0
  13f7f4:	e1a03001 	mov	r3, r1
  13f7f8:	e1a00006 	mov	r0, r6
  13f7fc:	e1a01007 	mov	r1, r7
  13f800:	eb0013ba 	bl	1446f0 <__aeabi_dsub>
  13f804:	e3a02000 	mov	r2, #0
  13f808:	e59f314c 	ldr	r3, [pc, #332]	; 13f95c <printf_core+0x107c>
  13f80c:	eb0014a5 	bl	144aa8 <__aeabi_dmul>
  13f810:	e3a02000 	mov	r2, #0
  13f814:	e3a03000 	mov	r3, #0
  13f818:	e1a07001 	mov	r7, r1
  13f81c:	e1a06000 	mov	r6, r0
  13f820:	eb0015ee 	bl	144fe0 <__aeabi_dcmpeq>
  13f824:	e3500000 	cmp	r0, #0
  13f828:	0affffeb 	beq	13f7dc <printf_core+0xefc>
  13f82c:	e59d2020 	ldr	r2, [sp, #32]
  13f830:	e1a0300b 	mov	r3, fp
  13f834:	e3520000 	cmp	r2, #0
  13f838:	e58db01c 	str	fp, [sp, #28]
  13f83c:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f840:	da000067 	ble	13f9e4 <printf_core+0x1104>
  13f844:	e58da048 	str	sl, [sp, #72]	; 0x48
  13f848:	e1a0a003 	mov	sl, r3
  13f84c:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13f850:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13f854:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13f858:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13f85c:	e28d9050 	add	r9, sp, #80	; 0x50
  13f860:	e8990300 	ldm	r9, {r8, r9}
  13f864:	e59d2020 	ldr	r2, [sp, #32]
  13f868:	e24a3004 	sub	r3, sl, #4
  13f86c:	e352001d 	cmp	r2, #29
  13f870:	b1a05002 	movlt	r5, r2
  13f874:	a3a0501d 	movge	r5, #29
  13f878:	e153000b 	cmp	r3, fp
  13f87c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13f880:	3a00001e 	bcc	13f900 <printf_core+0x1020>
  13f884:	e1a04003 	mov	r4, r3
  13f888:	e2453020 	sub	r3, r5, #32
  13f88c:	e58da040 	str	sl, [sp, #64]	; 0x40
  13f890:	e3a00000 	mov	r0, #0
  13f894:	e1a0a003 	mov	sl, r3
  13f898:	e2652020 	rsb	r2, r5, #32
  13f89c:	e58d201c 	str	r2, [sp, #28]
  13f8a0:	e5941000 	ldr	r1, [r4]
  13f8a4:	e59dc01c 	ldr	ip, [sp, #28]
  13f8a8:	e1a09a11 	lsl	r9, r1, sl
  13f8ac:	e1a08511 	lsl	r8, r1, r5
  13f8b0:	e0986000 	adds	r6, r8, r0
  13f8b4:	e1899c31 	orr	r9, r9, r1, lsr ip
  13f8b8:	e2a97000 	adc	r7, r9, #0
  13f8bc:	e28f305c 	add	r3, pc, #92	; 0x5c
  13f8c0:	e893000c 	ldm	r3, {r2, r3}
  13f8c4:	e1a00006 	mov	r0, r6
  13f8c8:	e1a01007 	mov	r1, r7
  13f8cc:	eb00163d 	bl	1451c8 <__aeabi_uldivmod>
  13f8d0:	e1a00006 	mov	r0, r6
  13f8d4:	e4042004 	str	r2, [r4], #-4
  13f8d8:	e1a01007 	mov	r1, r7
  13f8dc:	e28f303c 	add	r3, pc, #60	; 0x3c
  13f8e0:	e893000c 	ldm	r3, {r2, r3}
  13f8e4:	eb001637 	bl	1451c8 <__aeabi_uldivmod>
  13f8e8:	e154000b 	cmp	r4, fp
  13f8ec:	2affffeb 	bcs	13f8a0 <printf_core+0xfc0>
  13f8f0:	e3500000 	cmp	r0, #0
  13f8f4:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13f8f8:	150b0004 	strne	r0, [fp, #-4]
  13f8fc:	124bb004 	subne	fp, fp, #4
  13f900:	e15b000a 	cmp	fp, sl
  13f904:	2a000028 	bcs	13f9ac <printf_core+0x10cc>
  13f908:	e51a3004 	ldr	r3, [sl, #-4]
  13f90c:	e3530000 	cmp	r3, #0
  13f910:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13f914:	0a000021 	beq	13f9a0 <printf_core+0x10c0>
  13f918:	ea000023 	b	13f9ac <printf_core+0x10cc>
  13f91c:	e1a00000 	nop			; (mov r0, r0)
  13f920:	3b9aca00 	.word	0x3b9aca00
  13f924:	00000000 	.word	0x00000000
  13f928:	00012889 	.word	0x00012889
  13f92c:	0ccccccc 	.word	0x0ccccccc
  13f930:	0014cd80 	.word	0x0014cd80
  13f934:	0014cdbc 	.word	0x0014cdbc
  13f938:	0014cd94 	.word	0x0014cd94
  13f93c:	7fefffff 	.word	0x7fefffff
  13f940:	0014cdac 	.word	0x0014cdac
  13f944:	0014cda8 	.word	0x0014cda8
  13f948:	0014cdb4 	.word	0x0014cdb4
  13f94c:	0014cdb0 	.word	0x0014cdb0
  13f950:	0014cd8c 	.word	0x0014cd8c
  13f954:	0014cd95 	.word	0x0014cd95
  13f958:	41b00000 	.word	0x41b00000
  13f95c:	41cdcd65 	.word	0x41cdcd65
  13f960:	38e38e39 	.word	0x38e38e39
  13f964:	3b9aca00 	.word	0x3b9aca00
  13f968:	0014cd81 	.word	0x0014cd81
  13f96c:	0014cd97 	.word	0x0014cd97
  13f970:	0014cf8c 	.word	0x0014cf8c
  13f974:	cccccccd 	.word	0xcccccccd
  13f978:	0014cdb8 	.word	0x0014cdb8
  13f97c:	3b9ac9ff 	.word	0x3b9ac9ff
  13f980:	40300000 	.word	0x40300000
  13f984:	3fe00000 	.word	0x3fe00000
  13f988:	43400000 	.word	0x43400000
  13f98c:	3ff00000 	.word	0x3ff00000
  13f990:	3ff80000 	.word	0x3ff80000
  13f994:	e5332004 	ldr	r2, [r3, #-4]!
  13f998:	e3520000 	cmp	r2, #0
  13f99c:	1a000002 	bne	13f9ac <printf_core+0x10cc>
  13f9a0:	e153000b 	cmp	r3, fp
  13f9a4:	e1a0a003 	mov	sl, r3
  13f9a8:	8afffff9 	bhi	13f994 <printf_core+0x10b4>
  13f9ac:	e59d3020 	ldr	r3, [sp, #32]
  13f9b0:	e0433005 	sub	r3, r3, r5
  13f9b4:	e3530000 	cmp	r3, #0
  13f9b8:	e58d3020 	str	r3, [sp, #32]
  13f9bc:	caffffa8 	bgt	13f864 <printf_core+0xf84>
  13f9c0:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f9c4:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f9c8:	e58da01c 	str	sl, [sp, #28]
  13f9cc:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f9d0:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f9d4:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f9d8:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f9dc:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f9e0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f9e4:	e59dc020 	ldr	ip, [sp, #32]
  13f9e8:	e35c0000 	cmp	ip, #0
  13f9ec:	0a000037 	beq	13fad0 <printf_core+0x11f0>
  13f9f0:	e58da038 	str	sl, [sp, #56]	; 0x38
  13f9f4:	e1a0a00c 	mov	sl, ip
  13f9f8:	e51f10a0 	ldr	r1, [pc, #-160]	; 13f960 <printf_core+0x1080>
  13f9fc:	e2850019 	add	r0, r5, #25
  13fa00:	e0832190 	umull	r2, r3, r0, r1
  13fa04:	e1a030a3 	lsr	r3, r3, #1
  13fa08:	e2836001 	add	r6, r3, #1
  13fa0c:	e1a03106 	lsl	r3, r6, #2
  13fa10:	e51f70b4 	ldr	r7, [pc, #-180]	; 13f964 <printf_core+0x1084>
  13fa14:	e59d001c 	ldr	r0, [sp, #28]
  13fa18:	e58d3020 	str	r3, [sp, #32]
  13fa1c:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13fa20:	e37a0009 	cmn	sl, #9
  13fa24:	a26ac000 	rsbge	ip, sl, #0
  13fa28:	b28aa009 	addlt	sl, sl, #9
  13fa2c:	b3a0c009 	movlt	ip, #9
  13fa30:	a3a0a000 	movge	sl, #0
  13fa34:	e150000b 	cmp	r0, fp
  13fa38:	e59b1000 	ldr	r1, [fp]
  13fa3c:	9a000191 	bls	140088 <printf_core+0x17a8>
  13fa40:	e3a0e001 	mov	lr, #1
  13fa44:	e1a0ec1e 	lsl	lr, lr, ip
  13fa48:	e1a0200b 	mov	r2, fp
  13fa4c:	e3a03000 	mov	r3, #0
  13fa50:	e24ee001 	sub	lr, lr, #1
  13fa54:	e1a09c57 	asr	r9, r7, ip
  13fa58:	ea000000 	b	13fa60 <printf_core+0x1180>
  13fa5c:	e5921000 	ldr	r1, [r2]
  13fa60:	e0833c31 	add	r3, r3, r1, lsr ip
  13fa64:	e4823004 	str	r3, [r2], #4
  13fa68:	e00e3001 	and	r3, lr, r1
  13fa6c:	e0010399 	mul	r1, r9, r3
  13fa70:	e1520000 	cmp	r2, r0
  13fa74:	e1a03001 	mov	r3, r1
  13fa78:	3afffff7 	bcc	13fa5c <printf_core+0x117c>
  13fa7c:	e59b2000 	ldr	r2, [fp]
  13fa80:	e3520000 	cmp	r2, #0
  13fa84:	028bb004 	addeq	fp, fp, #4
  13fa88:	e3510000 	cmp	r1, #0
  13fa8c:	15801000 	strne	r1, [r0]
  13fa90:	12800004 	addne	r0, r0, #4
  13fa94:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fa98:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fa9c:	e3520066 	cmp	r2, #102	; 0x66
  13faa0:	11a0300b 	movne	r3, fp
  13faa4:	e0402003 	sub	r2, r0, r3
  13faa8:	e1560142 	cmp	r6, r2, asr #2
  13faac:	b59d2020 	ldrlt	r2, [sp, #32]
  13fab0:	b0830002 	addlt	r0, r3, r2
  13fab4:	e35a0000 	cmp	sl, #0
  13fab8:	1affffd8 	bne	13fa20 <printf_core+0x1140>
  13fabc:	e1a0300a 	mov	r3, sl
  13fac0:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13fac4:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13fac8:	e58d001c 	str	r0, [sp, #28]
  13facc:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13fad0:	e59d301c 	ldr	r3, [sp, #28]
  13fad4:	e153000b 	cmp	r3, fp
  13fad8:	91a03005 	movls	r3, r5
  13fadc:	93a06000 	movls	r6, #0
  13fae0:	9a000013 	bls	13fb34 <printf_core+0x1254>
  13fae4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fae8:	e59b1000 	ldr	r1, [fp]
  13faec:	e043600b 	sub	r6, r3, fp
  13faf0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13faf4:	e1a06146 	asr	r6, r6, #2
  13faf8:	e2530066 	subs	r0, r3, #102	; 0x66
  13fafc:	13a00001 	movne	r0, #1
  13fb00:	e3510009 	cmp	r1, #9
  13fb04:	e0866186 	add	r6, r6, r6, lsl #3
  13fb08:	83a0200a 	movhi	r2, #10
  13fb0c:	81a03000 	movhi	r3, r0
  13fb10:	9a000005 	bls	13fb2c <printf_core+0x124c>
  13fb14:	e0822102 	add	r2, r2, r2, lsl #2
  13fb18:	e1a02082 	lsl	r2, r2, #1
  13fb1c:	e1510002 	cmp	r1, r2
  13fb20:	e2866001 	add	r6, r6, #1
  13fb24:	2afffffa 	bcs	13fb14 <printf_core+0x1234>
  13fb28:	e1a00003 	mov	r0, r3
  13fb2c:	e0030096 	mul	r3, r6, r0
  13fb30:	e0453003 	sub	r3, r5, r3
  13fb34:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fb38:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13fb3c:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13fb40:	e3520067 	cmp	r2, #103	; 0x67
  13fb44:	13a01000 	movne	r1, #0
  13fb48:	02011001 	andeq	r1, r1, #1
  13fb4c:	e59d201c 	ldr	r2, [sp, #28]
  13fb50:	e0433001 	sub	r3, r3, r1
  13fb54:	e042200c 	sub	r2, r2, ip
  13fb58:	e1a02142 	asr	r2, r2, #2
  13fb5c:	e2422001 	sub	r2, r2, #1
  13fb60:	e0822182 	add	r2, r2, r2, lsl #3
  13fb64:	e1530002 	cmp	r3, r2
  13fb68:	aa000057 	bge	13fccc <printf_core+0x13ec>
  13fb6c:	e51f2214 	ldr	r2, [pc, #-532]	; 13f960 <printf_core+0x1080>
  13fb70:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13fb74:	e0c10293 	smull	r0, r1, r3, r2
  13fb78:	e1a07fc3 	asr	r7, r3, #31
  13fb7c:	e06770c1 	rsb	r7, r7, r1, asr #1
  13fb80:	e0872187 	add	r2, r7, r7, lsl #3
  13fb84:	e0433002 	sub	r3, r3, r2
  13fb88:	e2833001 	add	r3, r3, #1
  13fb8c:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13fb90:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13fb94:	e3530009 	cmp	r3, #9
  13fb98:	e08c7107 	add	r7, ip, r7, lsl #2
  13fb9c:	0a00036b 	beq	140950 <printf_core+0x2070>
  13fba0:	e3a0200a 	mov	r2, #10
  13fba4:	e2833001 	add	r3, r3, #1
  13fba8:	e0822102 	add	r2, r2, r2, lsl #2
  13fbac:	e3530009 	cmp	r3, #9
  13fbb0:	e1a02082 	lsl	r2, r2, #1
  13fbb4:	1afffffa 	bne	13fba4 <printf_core+0x12c4>
  13fbb8:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13fbbc:	e5973000 	ldr	r3, [r7]
  13fbc0:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13fbc4:	e1a00003 	mov	r0, r3
  13fbc8:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13fbcc:	ebffe3a0 	bl	138a54 <__aeabi_uidivmod>
  13fbd0:	e2513000 	subs	r3, r1, #0
  13fbd4:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13fbd8:	1a000003 	bne	13fbec <printf_core+0x130c>
  13fbdc:	e59d301c 	ldr	r3, [sp, #28]
  13fbe0:	e287c004 	add	ip, r7, #4
  13fbe4:	e153000c 	cmp	r3, ip
  13fbe8:	0a000033 	beq	13fcbc <printf_core+0x13dc>
  13fbec:	e3100001 	tst	r0, #1
  13fbf0:	1a000336 	bne	1408d0 <printf_core+0x1ff0>
  13fbf4:	e51f3298 	ldr	r3, [pc, #-664]	; 13f964 <printf_core+0x1084>
  13fbf8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fbfc:	e157000b 	cmp	r7, fp
  13fc00:	e0422003 	sub	r2, r2, r3
  13fc04:	e16f2f12 	clz	r2, r2
  13fc08:	e1a022a2 	lsr	r2, r2, #5
  13fc0c:	93a02000 	movls	r2, #0
  13fc10:	e3520000 	cmp	r2, #0
  13fc14:	0a000329 	beq	1408c0 <printf_core+0x1fe0>
  13fc18:	e5173004 	ldr	r3, [r7, #-4]
  13fc1c:	e51f229c 	ldr	r2, [pc, #-668]	; 13f988 <printf_core+0x10a8>
  13fc20:	e2033001 	and	r3, r3, #1
  13fc24:	e58d2020 	str	r2, [sp, #32]
  13fc28:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13fc2c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fc30:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fc34:	e15300c2 	cmp	r3, r2, asr #1
  13fc38:	3a00031d 	bcc	1408b4 <printf_core+0x1fd4>
  13fc3c:	13a0e000 	movne	lr, #0
  13fc40:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f990 <printf_core+0x10b0>
  13fc44:	0a00032a 	beq	1408f4 <printf_core+0x2014>
  13fc48:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fc4c:	e3530000 	cmp	r3, #0
  13fc50:	0a000006 	beq	13fc70 <printf_core+0x1390>
  13fc54:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13fc58:	e5d33000 	ldrb	r3, [r3]
  13fc5c:	e353002d 	cmp	r3, #45	; 0x2d
  13fc60:	059d3020 	ldreq	r3, [sp, #32]
  13fc64:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13fc68:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13fc6c:	058d3020 	streq	r3, [sp, #32]
  13fc70:	e1a0200e 	mov	r2, lr
  13fc74:	e1a0300c 	mov	r3, ip
  13fc78:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13fc7c:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13fc80:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fc84:	e04cc00e 	sub	ip, ip, lr
  13fc88:	e59d1020 	ldr	r1, [sp, #32]
  13fc8c:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13fc90:	eb001297 	bl	1446f4 <__adddf3>
  13fc94:	e1a02000 	mov	r2, r0
  13fc98:	e1a03001 	mov	r3, r1
  13fc9c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fca0:	e59d1020 	ldr	r1, [sp, #32]
  13fca4:	eb0014cd 	bl	144fe0 <__aeabi_dcmpeq>
  13fca8:	e2502000 	subs	r2, r0, #0
  13fcac:	0a0002ab 	beq	140760 <printf_core+0x1e80>
  13fcb0:	e1a0c007 	mov	ip, r7
  13fcb4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fcb8:	e48c3004 	str	r3, [ip], #4
  13fcbc:	e59d301c 	ldr	r3, [sp, #28]
  13fcc0:	e153000c 	cmp	r3, ip
  13fcc4:	21a0300c 	movcs	r3, ip
  13fcc8:	e58d301c 	str	r3, [sp, #28]
  13fccc:	e59d301c 	ldr	r3, [sp, #28]
  13fcd0:	e15b0003 	cmp	fp, r3
  13fcd4:	2a00000c 	bcs	13fd0c <printf_core+0x142c>
  13fcd8:	e5133004 	ldr	r3, [r3, #-4]
  13fcdc:	e3530000 	cmp	r3, #0
  13fce0:	059d301c 	ldreq	r3, [sp, #28]
  13fce4:	02433004 	subeq	r3, r3, #4
  13fce8:	0a000003 	beq	13fcfc <printf_core+0x141c>
  13fcec:	ea000006 	b	13fd0c <printf_core+0x142c>
  13fcf0:	e5332004 	ldr	r2, [r3, #-4]!
  13fcf4:	e3520000 	cmp	r2, #0
  13fcf8:	1a000002 	bne	13fd08 <printf_core+0x1428>
  13fcfc:	e153000b 	cmp	r3, fp
  13fd00:	e1a01003 	mov	r1, r3
  13fd04:	8afffff9 	bhi	13fcf0 <printf_core+0x1410>
  13fd08:	e58d101c 	str	r1, [sp, #28]
  13fd0c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fd10:	e3530067 	cmp	r3, #103	; 0x67
  13fd14:	0a000192 	beq	140364 <printf_core+0x1a84>
  13fd18:	e3550000 	cmp	r5, #0
  13fd1c:	1a00018b 	bne	140350 <printf_core+0x1a70>
  13fd20:	e3a02001 	mov	r2, #1
  13fd24:	e1a031a8 	lsr	r3, r8, #3
  13fd28:	e0033002 	and	r3, r3, r2
  13fd2c:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13fd30:	e59d1010 	ldr	r1, [sp, #16]
  13fd34:	e0833002 	add	r3, r3, r2
  13fd38:	e381a020 	orr	sl, r1, #32
  13fd3c:	e35a0066 	cmp	sl, #102	; 0x66
  13fd40:	e04ee003 	sub	lr, lr, r3
  13fd44:	0a000280 	beq	14074c <printf_core+0x1e6c>
  13fd48:	e026cfc6 	eor	ip, r6, r6, asr #31
  13fd4c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fd50:	e3560000 	cmp	r6, #0
  13fd54:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13fd58:	e1a02007 	mov	r2, r7
  13fd5c:	0a00000a 	beq	13fd8c <printf_core+0x14ac>
  13fd60:	e58d3020 	str	r3, [sp, #32]
  13fd64:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13f974 <printf_core+0x1094>
  13fd68:	e081039c 	umull	r0, r1, ip, r3
  13fd6c:	e1a001a1 	lsr	r0, r1, #3
  13fd70:	e0801100 	add	r1, r0, r0, lsl #2
  13fd74:	e04c1081 	sub	r1, ip, r1, lsl #1
  13fd78:	e2811030 	add	r1, r1, #48	; 0x30
  13fd7c:	e250c000 	subs	ip, r0, #0
  13fd80:	e5621001 	strb	r1, [r2, #-1]!
  13fd84:	1afffff6 	bne	13fd64 <printf_core+0x1484>
  13fd88:	e59d3020 	ldr	r3, [sp, #32]
  13fd8c:	e0471002 	sub	r1, r7, r2
  13fd90:	e3510001 	cmp	r1, #1
  13fd94:	ca000004 	bgt	13fdac <printf_core+0x14cc>
  13fd98:	e3a01030 	mov	r1, #48	; 0x30
  13fd9c:	e5621001 	strb	r1, [r2, #-1]!
  13fda0:	e0470002 	sub	r0, r7, r2
  13fda4:	e3500001 	cmp	r0, #1
  13fda8:	dafffffb 	ble	13fd9c <printf_core+0x14bc>
  13fdac:	e3560000 	cmp	r6, #0
  13fdb0:	a3a0102b 	movge	r1, #43	; 0x2b
  13fdb4:	b3a0102d 	movlt	r1, #45	; 0x2d
  13fdb8:	e2420002 	sub	r0, r2, #2
  13fdbc:	e0477000 	sub	r7, r7, r0
  13fdc0:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13fdc4:	e59d0010 	ldr	r0, [sp, #16]
  13fdc8:	e157000e 	cmp	r7, lr
  13fdcc:	e5420002 	strb	r0, [r2, #-2]
  13fdd0:	e5421001 	strb	r1, [r2, #-1]
  13fdd4:	cafffc6e 	bgt	13ef94 <printf_core+0x6b4>
  13fdd8:	e0833007 	add	r3, r3, r7
  13fddc:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13fde0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fde4:	e0422001 	sub	r2, r2, r1
  13fde8:	e1520003 	cmp	r2, r3
  13fdec:	bafffc68 	blt	13ef94 <printf_core+0x6b4>
  13fdf0:	e0813003 	add	r3, r1, r3
  13fdf4:	e1590003 	cmp	r9, r3
  13fdf8:	e58d3010 	str	r3, [sp, #16]
  13fdfc:	c3a03000 	movgt	r3, #0
  13fe00:	d3a03001 	movle	r3, #1
  13fe04:	e3180a12 	tst	r8, #73728	; 0x12000
  13fe08:	e58d3020 	str	r3, [sp, #32]
  13fe0c:	13a03001 	movne	r3, #1
  13fe10:	e3530000 	cmp	r3, #0
  13fe14:	0a000246 	beq	140734 <printf_core+0x1e54>
  13fe18:	e59d3004 	ldr	r3, [sp, #4]
  13fe1c:	e5933000 	ldr	r3, [r3]
  13fe20:	e3130020 	tst	r3, #32
  13fe24:	0a00023d 	beq	140720 <printf_core+0x1e40>
  13fe28:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fe2c:	e3130a12 	tst	r3, #73728	; 0x12000
  13fe30:	e59d3020 	ldr	r3, [sp, #32]
  13fe34:	13a03001 	movne	r3, #1
  13fe38:	e3530000 	cmp	r3, #0
  13fe3c:	0a000231 	beq	140708 <printf_core+0x1e28>
  13fe40:	e35a0066 	cmp	sl, #102	; 0x66
  13fe44:	0a00018f 	beq	140488 <printf_core+0x1ba8>
  13fe48:	e59d301c 	ldr	r3, [sp, #28]
  13fe4c:	e15b0003 	cmp	fp, r3
  13fe50:	228b3004 	addcs	r3, fp, #4
  13fe54:	258d301c 	strcs	r3, [sp, #28]
  13fe58:	e59d301c 	ldr	r3, [sp, #28]
  13fe5c:	e15b0003 	cmp	fp, r3
  13fe60:	23a03000 	movcs	r3, #0
  13fe64:	33a03001 	movcc	r3, #1
  13fe68:	e3550000 	cmp	r5, #0
  13fe6c:	b3a03000 	movlt	r3, #0
  13fe70:	e3530000 	cmp	r3, #0
  13fe74:	0a000036 	beq	13ff54 <printf_core+0x1674>
  13fe78:	e1a0600b 	mov	r6, fp
  13fe7c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fe80:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13fe84:	e59d9004 	ldr	r9, [sp, #4]
  13fe88:	e287a009 	add	sl, r7, #9
  13fe8c:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13fe90:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13fe94:	e5962000 	ldr	r2, [r6]
  13fe98:	e599e000 	ldr	lr, [r9]
  13fe9c:	e3520000 	cmp	r2, #0
  13fea0:	1287c009 	addne	ip, r7, #9
  13fea4:	0a000046 	beq	13ffc4 <printf_core+0x16e4>
  13fea8:	e51f353c 	ldr	r3, [pc, #-1340]	; 13f974 <printf_core+0x1094>
  13feac:	e0810392 	umull	r0, r1, r2, r3
  13feb0:	e1a031a1 	lsr	r3, r1, #3
  13feb4:	e0831103 	add	r1, r3, r3, lsl #2
  13feb8:	e0422081 	sub	r2, r2, r1, lsl #1
  13febc:	e2821030 	add	r1, r2, #48	; 0x30
  13fec0:	e2532000 	subs	r2, r3, #0
  13fec4:	e56c1001 	strb	r1, [ip, #-1]!
  13fec8:	1afffff6 	bne	13fea8 <printf_core+0x15c8>
  13fecc:	e2872009 	add	r2, r7, #9
  13fed0:	e15c0002 	cmp	ip, r2
  13fed4:	0a00003a 	beq	13ffc4 <printf_core+0x16e4>
  13fed8:	e15b0006 	cmp	fp, r6
  13fedc:	e20ee020 	and	lr, lr, #32
  13fee0:	0a00003d 	beq	13ffdc <printf_core+0x16fc>
  13fee4:	e15c0007 	cmp	ip, r7
  13fee8:	9a000003 	bls	13fefc <printf_core+0x161c>
  13feec:	e3a02030 	mov	r2, #48	; 0x30
  13fef0:	e56c2001 	strb	r2, [ip, #-1]!
  13fef4:	e15c0007 	cmp	ip, r7
  13fef8:	8afffffc 	bhi	13fef0 <printf_core+0x1610>
  13fefc:	e04a400c 	sub	r4, sl, ip
  13ff00:	e35e0000 	cmp	lr, #0
  13ff04:	1a000005 	bne	13ff20 <printf_core+0x1640>
  13ff08:	e1550004 	cmp	r5, r4
  13ff0c:	e1a0000c 	mov	r0, ip
  13ff10:	b1a01005 	movlt	r1, r5
  13ff14:	a1a01004 	movge	r1, r4
  13ff18:	e1a02009 	mov	r2, r9
  13ff1c:	eb000f2d 	bl	143bd8 <__fwritex>
  13ff20:	e59d201c 	ldr	r2, [sp, #28]
  13ff24:	e2866004 	add	r6, r6, #4
  13ff28:	e1560002 	cmp	r6, r2
  13ff2c:	e0455004 	sub	r5, r5, r4
  13ff30:	23a02000 	movcs	r2, #0
  13ff34:	33a02001 	movcc	r2, #1
  13ff38:	e3550000 	cmp	r5, #0
  13ff3c:	b3a02000 	movlt	r2, #0
  13ff40:	e3520000 	cmp	r2, #0
  13ff44:	1affffd2 	bne	13fe94 <printf_core+0x15b4>
  13ff48:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13ff4c:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13ff50:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13ff54:	e2852012 	add	r2, r5, #18
  13ff58:	e3520012 	cmp	r2, #18
  13ff5c:	da000003 	ble	13ff70 <printf_core+0x1690>
  13ff60:	e3a03012 	mov	r3, #18
  13ff64:	e3a01030 	mov	r1, #48	; 0x30
  13ff68:	e59d0004 	ldr	r0, [sp, #4]
  13ff6c:	ebfffa30 	bl	13e834 <pad.part.0>
  13ff70:	e59d3004 	ldr	r3, [sp, #4]
  13ff74:	e5933000 	ldr	r3, [r3]
  13ff78:	e3130020 	tst	r3, #32
  13ff7c:	1a000005 	bne	13ff98 <printf_core+0x16b8>
  13ff80:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13ff84:	e28d7090 	add	r7, sp, #144	; 0x90
  13ff88:	e0471003 	sub	r1, r7, r3
  13ff8c:	e59d2004 	ldr	r2, [sp, #4]
  13ff90:	e1a00003 	mov	r0, r3
  13ff94:	eb000f0f 	bl	143bd8 <__fwritex>
  13ff98:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ff9c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ffa0:	e59d3020 	ldr	r3, [sp, #32]
  13ffa4:	13a03001 	movne	r3, #1
  13ffa8:	e3530000 	cmp	r3, #0
  13ffac:	0a00023a 	beq	14089c <printf_core+0x1fbc>
  13ffb0:	e59d3010 	ldr	r3, [sp, #16]
  13ffb4:	e1590003 	cmp	r9, r3
  13ffb8:	a1a0a009 	movge	sl, r9
  13ffbc:	b1a0a003 	movlt	sl, r3
  13ffc0:	eafffbf0 	b	13ef88 <printf_core+0x6a8>
  13ffc4:	e3a02030 	mov	r2, #48	; 0x30
  13ffc8:	e15b0006 	cmp	fp, r6
  13ffcc:	e28dc098 	add	ip, sp, #152	; 0x98
  13ffd0:	e20ee020 	and	lr, lr, #32
  13ffd4:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13ffd8:	1affffc3 	bne	13feec <printf_core+0x160c>
  13ffdc:	e35e0000 	cmp	lr, #0
  13ffe0:	e28c8001 	add	r8, ip, #1
  13ffe4:	0a00002a 	beq	140094 <printf_core+0x17b4>
  13ffe8:	e3550000 	cmp	r5, #0
  13ffec:	e04a4008 	sub	r4, sl, r8
  13fff0:	1affffca 	bne	13ff20 <printf_core+0x1640>
  13fff4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fff8:	e3130008 	tst	r3, #8
  13fffc:	1a00002d 	bne	1400b8 <printf_core+0x17d8>
  140000:	e1a0c008 	mov	ip, r8
  140004:	eaffffbd 	b	13ff00 <printf_core+0x1620>
  140008:	e1a0300b 	mov	r3, fp
  14000c:	e1a02009 	mov	r2, r9
  140010:	e3a01020 	mov	r1, #32
  140014:	e59d0004 	ldr	r0, [sp, #4]
  140018:	ebfffa05 	bl	13e834 <pad.part.0>
  14001c:	eafffd7b 	b	13f610 <printf_core+0xd30>
  140020:	e3a03001 	mov	r3, #1
  140024:	e58d3020 	str	r3, [sp, #32]
  140028:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13f968 <printf_core+0x1088>
  14002c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140030:	eafffc20 	b	13f0b8 <printf_core+0x7d8>
  140034:	e3a03000 	mov	r3, #0
  140038:	e58d3000 	str	r3, [sp]
  14003c:	eafffb44 	b	13ed54 <printf_core+0x474>
  140040:	e59d5004 	ldr	r5, [sp, #4]
  140044:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140048:	e1a02005 	mov	r2, r5
  14004c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140050:	eb000ee0 	bl	143bd8 <__fwritex>
  140054:	e5953000 	ldr	r3, [r5]
  140058:	e1a02005 	mov	r2, r5
  14005c:	e3130020 	tst	r3, #32
  140060:	1afffcc9 	bne	13f38c <printf_core+0xaac>
  140064:	e1a00006 	mov	r0, r6
  140068:	e3a01003 	mov	r1, #3
  14006c:	eb000ed9 	bl	143bd8 <__fwritex>
  140070:	eafffcc5 	b	13f38c <printf_core+0xaac>
  140074:	e3a03001 	mov	r3, #1
  140078:	e58d3030 	str	r3, [sp, #48]	; 0x30
  14007c:	e51f3718 	ldr	r3, [pc, #-1816]	; 13f96c <printf_core+0x108c>
  140080:	e58d3034 	str	r3, [sp, #52]	; 0x34
  140084:	eafffc9a 	b	13f2f4 <printf_core+0xa14>
  140088:	e3510000 	cmp	r1, #0
  14008c:	028bb004 	addeq	fp, fp, #4
  140090:	eafffe7f 	b	13fa94 <printf_core+0x11b4>
  140094:	e1a0000c 	mov	r0, ip
  140098:	e1a02009 	mov	r2, r9
  14009c:	e3a01001 	mov	r1, #1
  1400a0:	eb000ecc 	bl	143bd8 <__fwritex>
  1400a4:	e599e000 	ldr	lr, [r9]
  1400a8:	e3550000 	cmp	r5, #0
  1400ac:	e20ee020 	and	lr, lr, #32
  1400b0:	e04a4008 	sub	r4, sl, r8
  1400b4:	0affffce 	beq	13fff4 <printf_core+0x1714>
  1400b8:	e35e0000 	cmp	lr, #0
  1400bc:	1affff97 	bne	13ff20 <printf_core+0x1640>
  1400c0:	e1a02009 	mov	r2, r9
  1400c4:	e3a01001 	mov	r1, #1
  1400c8:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f978 <printf_core+0x1098>
  1400cc:	eb000ec1 	bl	143bd8 <__fwritex>
  1400d0:	e599e000 	ldr	lr, [r9]
  1400d4:	e1a0c008 	mov	ip, r8
  1400d8:	e20ee020 	and	lr, lr, #32
  1400dc:	eaffff87 	b	13ff00 <printf_core+0x1620>
  1400e0:	e1a0300a 	mov	r3, sl
  1400e4:	e1a02009 	mov	r2, r9
  1400e8:	e3a01020 	mov	r1, #32
  1400ec:	e59d0004 	ldr	r0, [sp, #4]
  1400f0:	ebfff9cf 	bl	13e834 <pad.part.0>
  1400f4:	eafffca9 	b	13f3a0 <printf_core+0xac0>
  1400f8:	e59d3010 	ldr	r3, [sp, #16]
  1400fc:	e213b020 	ands	fp, r3, #32
  140100:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  140104:	12833009 	addne	r3, r3, #9
  140108:	158d3034 	strne	r3, [sp, #52]	; 0x34
  14010c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140110:	e355000b 	cmp	r5, #11
  140114:	e2833002 	add	r3, r3, #2
  140118:	e58d3030 	str	r3, [sp, #48]	; 0x30
  14011c:	9a0001b8 	bls	140804 <printf_core+0x1f24>
  140120:	e59d2020 	ldr	r2, [sp, #32]
  140124:	e28d7090 	add	r7, sp, #144	; 0x90
  140128:	e3520000 	cmp	r2, #0
  14012c:	e1a03002 	mov	r3, r2
  140130:	b2623000 	rsblt	r3, r2, #0
  140134:	e3520000 	cmp	r2, #0
  140138:	11a0c007 	movne	ip, r7
  14013c:	0a0001ac 	beq	1407f4 <printf_core+0x1f14>
  140140:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13f974 <printf_core+0x1094>
  140144:	e0810293 	umull	r0, r1, r3, r2
  140148:	e1a021a1 	lsr	r2, r1, #3
  14014c:	e0821102 	add	r1, r2, r2, lsl #2
  140150:	e0433081 	sub	r3, r3, r1, lsl #1
  140154:	e2831030 	add	r1, r3, #48	; 0x30
  140158:	e2523000 	subs	r3, r2, #0
  14015c:	e56c1001 	strb	r1, [ip, #-1]!
  140160:	1afffff6 	bne	140140 <printf_core+0x1860>
  140164:	e15c0007 	cmp	ip, r7
  140168:	0a0001a1 	beq	1407f4 <printf_core+0x1f14>
  14016c:	e59d3020 	ldr	r3, [sp, #32]
  140170:	e59d2010 	ldr	r2, [sp, #16]
  140174:	e3530000 	cmp	r3, #0
  140178:	a3a0302b 	movge	r3, #43	; 0x2b
  14017c:	b3a0302d 	movlt	r3, #45	; 0x2d
  140180:	e54c3001 	strb	r3, [ip, #-1]
  140184:	e24c3002 	sub	r3, ip, #2
  140188:	e282200f 	add	r2, r2, #15
  14018c:	e58d3010 	str	r3, [sp, #16]
  140190:	e2083008 	and	r3, r8, #8
  140194:	e58db020 	str	fp, [sp, #32]
  140198:	e58d8040 	str	r8, [sp, #64]	; 0x40
  14019c:	e58d4044 	str	r4, [sp, #68]	; 0x44
  1401a0:	e1a0b007 	mov	fp, r7
  1401a4:	e51f683c 	ldr	r6, [pc, #-2108]	; 13f970 <printf_core+0x1090>
  1401a8:	e54c2002 	strb	r2, [ip, #-2]
  1401ac:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1401b0:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  1401b4:	e59d401c 	ldr	r4, [sp, #28]
  1401b8:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  1401bc:	ea000007 	b	1401e0 <printf_core+0x1900>
  1401c0:	e1a0b00a 	mov	fp, sl
  1401c4:	e1a00004 	mov	r0, r4
  1401c8:	e1a01008 	mov	r1, r8
  1401cc:	e3a02000 	mov	r2, #0
  1401d0:	e3a03000 	mov	r3, #0
  1401d4:	eb001381 	bl	144fe0 <__aeabi_dcmpeq>
  1401d8:	e3500000 	cmp	r0, #0
  1401dc:	1a000026 	bne	14027c <printf_core+0x199c>
  1401e0:	e1a01008 	mov	r1, r8
  1401e4:	e1a00004 	mov	r0, r4
  1401e8:	eb001395 	bl	145044 <__aeabi_d2iz>
  1401ec:	e59d2020 	ldr	r2, [sp, #32]
  1401f0:	e7d63000 	ldrb	r3, [r6, r0]
  1401f4:	e28ba001 	add	sl, fp, #1
  1401f8:	e1823003 	orr	r3, r2, r3
  1401fc:	e5cb3000 	strb	r3, [fp]
  140200:	eb0011ef 	bl	1449c4 <__aeabi_i2d>
  140204:	e1a02000 	mov	r2, r0
  140208:	e1a03001 	mov	r3, r1
  14020c:	e1a00004 	mov	r0, r4
  140210:	e1a01008 	mov	r1, r8
  140214:	eb001135 	bl	1446f0 <__aeabi_dsub>
  140218:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f980 <printf_core+0x10a0>
  14021c:	e3a02000 	mov	r2, #0
  140220:	eb001220 	bl	144aa8 <__aeabi_dmul>
  140224:	e04a3007 	sub	r3, sl, r7
  140228:	e3530001 	cmp	r3, #1
  14022c:	e1a04000 	mov	r4, r0
  140230:	e1a08001 	mov	r8, r1
  140234:	1affffe1 	bne	1401c0 <printf_core+0x18e0>
  140238:	e3a03000 	mov	r3, #0
  14023c:	e3a02000 	mov	r2, #0
  140240:	eb001366 	bl	144fe0 <__aeabi_dcmpeq>
  140244:	e3500000 	cmp	r0, #0
  140248:	e3a03001 	mov	r3, #1
  14024c:	13a03000 	movne	r3, #0
  140250:	e3550000 	cmp	r5, #0
  140254:	c3833001 	orrgt	r3, r3, #1
  140258:	e3130001 	tst	r3, #1
  14025c:	1a000002 	bne	14026c <printf_core+0x198c>
  140260:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140264:	e3530000 	cmp	r3, #0
  140268:	0affffd4 	beq	1401c0 <printf_core+0x18e0>
  14026c:	e3a0302e 	mov	r3, #46	; 0x2e
  140270:	e28bb002 	add	fp, fp, #2
  140274:	e54b3001 	strb	r3, [fp, #-1]
  140278:	eaffffd1 	b	1401c4 <printf_core+0x18e4>
  14027c:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  140280:	e59d2010 	ldr	r2, [sp, #16]
  140284:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  140288:	e0476002 	sub	r6, r7, r2
  14028c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  140290:	e0433006 	sub	r3, r3, r6
  140294:	e0433002 	sub	r3, r3, r2
  140298:	e1550003 	cmp	r5, r3
  14029c:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  1402a0:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  1402a4:	cafffb3a 	bgt	13ef94 <printf_core+0x6b4>
  1402a8:	e04b2007 	sub	r2, fp, r7
  1402ac:	e3550000 	cmp	r5, #0
  1402b0:	e58d201c 	str	r2, [sp, #28]
  1402b4:	0a000065 	beq	140450 <printf_core+0x1b70>
  1402b8:	e2423001 	sub	r3, r2, #1
  1402bc:	e1550003 	cmp	r5, r3
  1402c0:	ba000062 	blt	140450 <printf_core+0x1b70>
  1402c4:	e2853002 	add	r3, r5, #2
  1402c8:	e0865003 	add	r5, r6, r3
  1402cc:	e043a002 	sub	sl, r3, r2
  1402d0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1402d4:	e0835005 	add	r5, r3, r5
  1402d8:	e1590005 	cmp	r9, r5
  1402dc:	c3a0b000 	movgt	fp, #0
  1402e0:	d3a0b001 	movle	fp, #1
  1402e4:	e3180a12 	tst	r8, #73728	; 0x12000
  1402e8:	01a0300b 	moveq	r3, fp
  1402ec:	13a03001 	movne	r3, #1
  1402f0:	e3530000 	cmp	r3, #0
  1402f4:	0a0001a8 	beq	14099c <printf_core+0x20bc>
  1402f8:	e59d3004 	ldr	r3, [sp, #4]
  1402fc:	e5933000 	ldr	r3, [r3]
  140300:	e3130020 	tst	r3, #32
  140304:	0a0000e4 	beq	14069c <printf_core+0x1dbc>
  140308:	e2283801 	eor	r3, r8, #65536	; 0x10000
  14030c:	e3130a12 	tst	r3, #73728	; 0x12000
  140310:	01a0300b 	moveq	r3, fp
  140314:	13a03001 	movne	r3, #1
  140318:	e3530000 	cmp	r3, #0
  14031c:	0a000198 	beq	140984 <printf_core+0x20a4>
  140320:	e35a0000 	cmp	sl, #0
  140324:	ca00012c 	bgt	1407dc <printf_core+0x1efc>
  140328:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  14032c:	e3130a12 	tst	r3, #73728	; 0x12000
  140330:	01a0300b 	moveq	r3, fp
  140334:	13a03001 	movne	r3, #1
  140338:	e3530000 	cmp	r3, #0
  14033c:	0a000186 	beq	14095c <printf_core+0x207c>
  140340:	e1590005 	cmp	r9, r5
  140344:	a1a0a009 	movge	sl, r9
  140348:	b1a0a005 	movlt	sl, r5
  14034c:	eafffb0d 	b	13ef88 <printf_core+0x6a8>
  140350:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  140354:	cafffb0e 	bgt	13ef94 <printf_core+0x6b4>
  140358:	e2852001 	add	r2, r5, #1
  14035c:	e3a03001 	mov	r3, #1
  140360:	eafffe71 	b	13fd2c <printf_core+0x144c>
  140364:	e3550000 	cmp	r5, #0
  140368:	03a05001 	moveq	r5, #1
  14036c:	e3760004 	cmn	r6, #4
  140370:	a1550006 	cmpge	r5, r6
  140374:	c59d2010 	ldrgt	r2, [sp, #16]
  140378:	d59d3010 	ldrle	r3, [sp, #16]
  14037c:	c2863001 	addgt	r3, r6, #1
  140380:	c2422001 	subgt	r2, r2, #1
  140384:	d2433002 	suble	r3, r3, #2
  140388:	c58d2010 	strgt	r2, [sp, #16]
  14038c:	c0455003 	subgt	r5, r5, r3
  140390:	d58d3010 	strle	r3, [sp, #16]
  140394:	d2455001 	suble	r5, r5, #1
  140398:	e3180008 	tst	r8, #8
  14039c:	1afffe5d 	bne	13fd18 <printf_core+0x1438>
  1403a0:	e59d301c 	ldr	r3, [sp, #28]
  1403a4:	e15b0003 	cmp	fp, r3
  1403a8:	2a000034 	bcs	140480 <printf_core+0x1ba0>
  1403ac:	e5137004 	ldr	r7, [r3, #-4]
  1403b0:	e3570000 	cmp	r7, #0
  1403b4:	0a000031 	beq	140480 <printf_core+0x1ba0>
  1403b8:	e3a0100a 	mov	r1, #10
  1403bc:	e1a00007 	mov	r0, r7
  1403c0:	ebffe1a3 	bl	138a54 <__aeabi_uidivmod>
  1403c4:	e3510000 	cmp	r1, #0
  1403c8:	1a00000b 	bne	1403fc <printf_core+0x1b1c>
  1403cc:	e3a0300a 	mov	r3, #10
  1403d0:	e58d4020 	str	r4, [sp, #32]
  1403d4:	e1a04003 	mov	r4, r3
  1403d8:	e0844104 	add	r4, r4, r4, lsl #2
  1403dc:	e1a04084 	lsl	r4, r4, #1
  1403e0:	e1a01004 	mov	r1, r4
  1403e4:	e1a00007 	mov	r0, r7
  1403e8:	ebffe199 	bl	138a54 <__aeabi_uidivmod>
  1403ec:	e3510000 	cmp	r1, #0
  1403f0:	e28aa001 	add	sl, sl, #1
  1403f4:	0afffff7 	beq	1403d8 <printf_core+0x1af8>
  1403f8:	e59d4020 	ldr	r4, [sp, #32]
  1403fc:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  140400:	e59d301c 	ldr	r3, [sp, #28]
  140404:	e0433002 	sub	r3, r3, r2
  140408:	e59d2010 	ldr	r2, [sp, #16]
  14040c:	e1a03143 	asr	r3, r3, #2
  140410:	e3822020 	orr	r2, r2, #32
  140414:	e2433001 	sub	r3, r3, #1
  140418:	e3520066 	cmp	r2, #102	; 0x66
  14041c:	e0833183 	add	r3, r3, r3, lsl #3
  140420:	10863003 	addne	r3, r6, r3
  140424:	e043300a 	sub	r3, r3, sl
  140428:	e1c33fc3 	bic	r3, r3, r3, asr #31
  14042c:	e1550003 	cmp	r5, r3
  140430:	a1a05003 	movge	r5, r3
  140434:	eafffe37 	b	13fd18 <printf_core+0x1438>
  140438:	e1a0300a 	mov	r3, sl
  14043c:	e1a02009 	mov	r2, r9
  140440:	e3a01020 	mov	r1, #32
  140444:	e59d0004 	ldr	r0, [sp, #4]
  140448:	ebfff8f9 	bl	13e834 <pad.part.0>
  14044c:	eafffbca 	b	13f37c <printf_core+0xa9c>
  140450:	e59d301c 	ldr	r3, [sp, #28]
  140454:	e0865003 	add	r5, r6, r3
  140458:	eaffff9c 	b	1402d0 <printf_core+0x19f0>
  14045c:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  140460:	e0832105 	add	r2, r3, r5, lsl #2
  140464:	e2833024 	add	r3, r3, #36	; 0x24
  140468:	e1530002 	cmp	r3, r2
  14046c:	0afffb08 	beq	13f094 <printf_core+0x7b4>
  140470:	e5b21004 	ldr	r1, [r2, #4]!
  140474:	e3510000 	cmp	r1, #0
  140478:	0afffffa 	beq	140468 <printf_core+0x1b88>
  14047c:	eafffa2f 	b	13ed40 <printf_core+0x460>
  140480:	e3a0a009 	mov	sl, #9
  140484:	eaffffdc 	b	1403fc <printf_core+0x1b1c>
  140488:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14048c:	e15b0003 	cmp	fp, r3
  140490:	31a0a00b 	movcc	sl, fp
  140494:	21a0a003 	movcs	sl, r3
  140498:	e15a0003 	cmp	sl, r3
  14049c:	8a00002f 	bhi	140560 <printf_core+0x1c80>
  1404a0:	e28d7090 	add	r7, sp, #144	; 0x90
  1404a4:	e043b00a 	sub	fp, r3, sl
  1404a8:	e2872009 	add	r2, r7, #9
  1404ac:	e58d2030 	str	r2, [sp, #48]	; 0x30
  1404b0:	e58d2034 	str	r2, [sp, #52]	; 0x34
  1404b4:	e3cb2003 	bic	r2, fp, #3
  1404b8:	e08a3002 	add	r3, sl, r2
  1404bc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1404c0:	e24a3004 	sub	r3, sl, #4
  1404c4:	e58db038 	str	fp, [sp, #56]	; 0x38
  1404c8:	e3a06030 	mov	r6, #48	; 0x30
  1404cc:	e1a0b004 	mov	fp, r4
  1404d0:	e1a04003 	mov	r4, r3
  1404d4:	e5b4c004 	ldr	ip, [r4, #4]!
  1404d8:	e35c0000 	cmp	ip, #0
  1404dc:	0a000068 	beq	140684 <printf_core+0x1da4>
  1404e0:	e2870009 	add	r0, r7, #9
  1404e4:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13f974 <printf_core+0x1094>
  1404e8:	e083219c 	umull	r2, r3, ip, r1
  1404ec:	e1a021a3 	lsr	r2, r3, #3
  1404f0:	e0823102 	add	r3, r2, r2, lsl #2
  1404f4:	e04c3083 	sub	r3, ip, r3, lsl #1
  1404f8:	e2833030 	add	r3, r3, #48	; 0x30
  1404fc:	e252c000 	subs	ip, r2, #0
  140500:	e5603001 	strb	r3, [r0, #-1]!
  140504:	1afffff6 	bne	1404e4 <printf_core+0x1c04>
  140508:	e15a0004 	cmp	sl, r4
  14050c:	1a000001 	bne	140518 <printf_core+0x1c38>
  140510:	ea000117 	b	140974 <printf_core+0x2094>
  140514:	e5606001 	strb	r6, [r0, #-1]!
  140518:	e1500007 	cmp	r0, r7
  14051c:	8afffffc 	bhi	140514 <printf_core+0x1c34>
  140520:	e59d3004 	ldr	r3, [sp, #4]
  140524:	e5932000 	ldr	r2, [r3]
  140528:	e3120020 	tst	r2, #32
  14052c:	1a000003 	bne	140540 <printf_core+0x1c60>
  140530:	e1a02003 	mov	r2, r3
  140534:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140538:	e0431000 	sub	r1, r3, r0
  14053c:	eb000da5 	bl	143bd8 <__fwritex>
  140540:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140544:	e1530004 	cmp	r3, r4
  140548:	1affffe1 	bne	1404d4 <printf_core+0x1bf4>
  14054c:	e1a0400b 	mov	r4, fp
  140550:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  140554:	e3cb3003 	bic	r3, fp, #3
  140558:	e2833004 	add	r3, r3, #4
  14055c:	e08aa003 	add	sl, sl, r3
  140560:	e3550000 	cmp	r5, #0
  140564:	0a00003b 	beq	140658 <printf_core+0x1d78>
  140568:	e59d3004 	ldr	r3, [sp, #4]
  14056c:	e5933000 	ldr	r3, [r3]
  140570:	e3130020 	tst	r3, #32
  140574:	0a00003d 	beq	140670 <printf_core+0x1d90>
  140578:	e59d201c 	ldr	r2, [sp, #28]
  14057c:	e3550000 	cmp	r5, #0
  140580:	d3a03000 	movle	r3, #0
  140584:	c3a03001 	movgt	r3, #1
  140588:	e15a0002 	cmp	sl, r2
  14058c:	23a03000 	movcs	r3, #0
  140590:	e3530000 	cmp	r3, #0
  140594:	0a000027 	beq	140638 <printf_core+0x1d58>
  140598:	e1a0600a 	mov	r6, sl
  14059c:	e3a0a030 	mov	sl, #48	; 0x30
  1405a0:	e59db004 	ldr	fp, [sp, #4]
  1405a4:	e28d7090 	add	r7, sp, #144	; 0x90
  1405a8:	e4963004 	ldr	r3, [r6], #4
  1405ac:	e287c009 	add	ip, r7, #9
  1405b0:	e3530000 	cmp	r3, #0
  1405b4:	0a00000a 	beq	1405e4 <printf_core+0x1d04>
  1405b8:	e1a01003 	mov	r1, r3
  1405bc:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13f974 <printf_core+0x1094>
  1405c0:	e0832091 	umull	r2, r3, r1, r0
  1405c4:	e1a031a3 	lsr	r3, r3, #3
  1405c8:	e0832103 	add	r2, r3, r3, lsl #2
  1405cc:	e0412082 	sub	r2, r1, r2, lsl #1
  1405d0:	e2822030 	add	r2, r2, #48	; 0x30
  1405d4:	e2531000 	subs	r1, r3, #0
  1405d8:	e56c2001 	strb	r2, [ip, #-1]!
  1405dc:	1afffff6 	bne	1405bc <printf_core+0x1cdc>
  1405e0:	ea000000 	b	1405e8 <printf_core+0x1d08>
  1405e4:	e56ca001 	strb	sl, [ip, #-1]!
  1405e8:	e15c0007 	cmp	ip, r7
  1405ec:	8afffffc 	bhi	1405e4 <printf_core+0x1d04>
  1405f0:	e59b3000 	ldr	r3, [fp]
  1405f4:	e3130020 	tst	r3, #32
  1405f8:	1a000005 	bne	140614 <printf_core+0x1d34>
  1405fc:	e3550009 	cmp	r5, #9
  140600:	e1a0000c 	mov	r0, ip
  140604:	b1a01005 	movlt	r1, r5
  140608:	a3a01009 	movge	r1, #9
  14060c:	e1a0200b 	mov	r2, fp
  140610:	eb000d70 	bl	143bd8 <__fwritex>
  140614:	e59d301c 	ldr	r3, [sp, #28]
  140618:	e2455009 	sub	r5, r5, #9
  14061c:	e1530006 	cmp	r3, r6
  140620:	93a03000 	movls	r3, #0
  140624:	83a03001 	movhi	r3, #1
  140628:	e3550000 	cmp	r5, #0
  14062c:	d3a03000 	movle	r3, #0
  140630:	e3530000 	cmp	r3, #0
  140634:	1affffdb 	bne	1405a8 <printf_core+0x1cc8>
  140638:	e2852009 	add	r2, r5, #9
  14063c:	e3520009 	cmp	r2, #9
  140640:	dafffe54 	ble	13ff98 <printf_core+0x16b8>
  140644:	e3a03009 	mov	r3, #9
  140648:	e3a01030 	mov	r1, #48	; 0x30
  14064c:	e59d0004 	ldr	r0, [sp, #4]
  140650:	ebfff877 	bl	13e834 <pad.part.0>
  140654:	eafffe4f 	b	13ff98 <printf_core+0x16b8>
  140658:	e3180008 	tst	r8, #8
  14065c:	0afffe4d 	beq	13ff98 <printf_core+0x16b8>
  140660:	e59d3004 	ldr	r3, [sp, #4]
  140664:	e5933000 	ldr	r3, [r3]
  140668:	e3130020 	tst	r3, #32
  14066c:	1afffe49 	bne	13ff98 <printf_core+0x16b8>
  140670:	e59d2004 	ldr	r2, [sp, #4]
  140674:	e3a01001 	mov	r1, #1
  140678:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f978 <printf_core+0x1098>
  14067c:	eb000d55 	bl	143bd8 <__fwritex>
  140680:	eaffffbc 	b	140578 <printf_core+0x1c98>
  140684:	e15a0004 	cmp	sl, r4
  140688:	12870009 	addne	r0, r7, #9
  14068c:	1affffa0 	bne	140514 <printf_core+0x1c34>
  140690:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  140694:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  140698:	eaffffa0 	b	140520 <printf_core+0x1c40>
  14069c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1406a0:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  1406a4:	e59d2004 	ldr	r2, [sp, #4]
  1406a8:	eb000d4a 	bl	143bd8 <__fwritex>
  1406ac:	e2283801 	eor	r3, r8, #65536	; 0x10000
  1406b0:	e3130a12 	tst	r3, #73728	; 0x12000
  1406b4:	01a0300b 	moveq	r3, fp
  1406b8:	13a03001 	movne	r3, #1
  1406bc:	e3530000 	cmp	r3, #0
  1406c0:	0a0000af 	beq	140984 <printf_core+0x20a4>
  1406c4:	e59d2004 	ldr	r2, [sp, #4]
  1406c8:	e5923000 	ldr	r3, [r2]
  1406cc:	e3130020 	tst	r3, #32
  1406d0:	1affff12 	bne	140320 <printf_core+0x1a40>
  1406d4:	e59d101c 	ldr	r1, [sp, #28]
  1406d8:	e1a00007 	mov	r0, r7
  1406dc:	eb000d3d 	bl	143bd8 <__fwritex>
  1406e0:	e35a0000 	cmp	sl, #0
  1406e4:	ca00003c 	bgt	1407dc <printf_core+0x1efc>
  1406e8:	e59d2004 	ldr	r2, [sp, #4]
  1406ec:	e5923000 	ldr	r3, [r2]
  1406f0:	e3130020 	tst	r3, #32
  1406f4:	1affff0b 	bne	140328 <printf_core+0x1a48>
  1406f8:	e1a01006 	mov	r1, r6
  1406fc:	e59d0010 	ldr	r0, [sp, #16]
  140700:	eb000d34 	bl	143bd8 <__fwritex>
  140704:	eaffff07 	b	140328 <printf_core+0x1a48>
  140708:	e59d3010 	ldr	r3, [sp, #16]
  14070c:	e1a02009 	mov	r2, r9
  140710:	e3a01030 	mov	r1, #48	; 0x30
  140714:	e59d0004 	ldr	r0, [sp, #4]
  140718:	ebfff845 	bl	13e834 <pad.part.0>
  14071c:	eafffdc7 	b	13fe40 <printf_core+0x1560>
  140720:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140724:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140728:	e59d2004 	ldr	r2, [sp, #4]
  14072c:	eb000d29 	bl	143bd8 <__fwritex>
  140730:	eafffdbc 	b	13fe28 <printf_core+0x1548>
  140734:	e59d3010 	ldr	r3, [sp, #16]
  140738:	e1a02009 	mov	r2, r9
  14073c:	e3a01020 	mov	r1, #32
  140740:	e59d0004 	ldr	r0, [sp, #4]
  140744:	ebfff83a 	bl	13e834 <pad.part.0>
  140748:	eafffdb2 	b	13fe18 <printf_core+0x1538>
  14074c:	e156000e 	cmp	r6, lr
  140750:	cafffa0f 	bgt	13ef94 <printf_core+0x6b4>
  140754:	e3560000 	cmp	r6, #0
  140758:	c0833006 	addgt	r3, r3, r6
  14075c:	eafffd9e 	b	13fddc <printf_core+0x14fc>
  140760:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140764:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  140768:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f97c <printf_core+0x109c>
  14076c:	e0811000 	add	r1, r1, r0
  140770:	e1510003 	cmp	r1, r3
  140774:	e5871000 	str	r1, [r7]
  140778:	9a000008 	bls	1407a0 <printf_core+0x1ec0>
  14077c:	e4072004 	str	r2, [r7], #-4
  140780:	e157000b 	cmp	r7, fp
  140784:	350b2004 	strcc	r2, [fp, #-4]
  140788:	e5971000 	ldr	r1, [r7]
  14078c:	324bb004 	subcc	fp, fp, #4
  140790:	e2811001 	add	r1, r1, #1
  140794:	e1510003 	cmp	r1, r3
  140798:	e5871000 	str	r1, [r7]
  14079c:	8afffff6 	bhi	14077c <printf_core+0x1e9c>
  1407a0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1407a4:	e59b2000 	ldr	r2, [fp]
  1407a8:	e043600b 	sub	r6, r3, fp
  1407ac:	e1a06146 	asr	r6, r6, #2
  1407b0:	e3520009 	cmp	r2, #9
  1407b4:	e0866186 	add	r6, r6, r6, lsl #3
  1407b8:	83a0300a 	movhi	r3, #10
  1407bc:	9a000004 	bls	1407d4 <printf_core+0x1ef4>
  1407c0:	e0833103 	add	r3, r3, r3, lsl #2
  1407c4:	e1a03083 	lsl	r3, r3, #1
  1407c8:	e1520003 	cmp	r2, r3
  1407cc:	e2866001 	add	r6, r6, #1
  1407d0:	2afffffa 	bcs	1407c0 <printf_core+0x1ee0>
  1407d4:	e287c004 	add	ip, r7, #4
  1407d8:	eafffd37 	b	13fcbc <printf_core+0x13dc>
  1407dc:	e1a0200a 	mov	r2, sl
  1407e0:	e3a03000 	mov	r3, #0
  1407e4:	e3a01030 	mov	r1, #48	; 0x30
  1407e8:	e59d0004 	ldr	r0, [sp, #4]
  1407ec:	ebfff810 	bl	13e834 <pad.part.0>
  1407f0:	eaffffbc 	b	1406e8 <printf_core+0x1e08>
  1407f4:	e3a03030 	mov	r3, #48	; 0x30
  1407f8:	e28dc08f 	add	ip, sp, #143	; 0x8f
  1407fc:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  140800:	eafffe59 	b	14016c <printf_core+0x188c>
  140804:	e265300b 	rsb	r3, r5, #11
  140808:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  14080c:	e1a0300b 	mov	r3, fp
  140810:	e3a06000 	mov	r6, #0
  140814:	e1a0b004 	mov	fp, r4
  140818:	e1a04003 	mov	r4, r3
  14081c:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f980 <printf_core+0x10a0>
  140820:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140824:	e1a00006 	mov	r0, r6
  140828:	e2433001 	sub	r3, r3, #1
  14082c:	e1a01007 	mov	r1, r7
  140830:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140834:	e3a02000 	mov	r2, #0
  140838:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f980 <printf_core+0x10a0>
  14083c:	eb001099 	bl	144aa8 <__aeabi_dmul>
  140840:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140844:	e1a06000 	mov	r6, r0
  140848:	e3730001 	cmn	r3, #1
  14084c:	e1a07001 	mov	r7, r1
  140850:	1afffff2 	bne	140820 <printf_core+0x1f40>
  140854:	e1a03004 	mov	r3, r4
  140858:	e1a0400b 	mov	r4, fp
  14085c:	e1a0b003 	mov	fp, r3
  140860:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140864:	e59d001c 	ldr	r0, [sp, #28]
  140868:	e5d33000 	ldrb	r3, [r3]
  14086c:	e353002d 	cmp	r3, #45	; 0x2d
  140870:	0a000028 	beq	140918 <printf_core+0x2038>
  140874:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140878:	e1a02006 	mov	r2, r6
  14087c:	e1a03007 	mov	r3, r7
  140880:	eb000f9b 	bl	1446f4 <__adddf3>
  140884:	e1a02006 	mov	r2, r6
  140888:	e1a03007 	mov	r3, r7
  14088c:	eb000f97 	bl	1446f0 <__aeabi_dsub>
  140890:	e58d001c 	str	r0, [sp, #28]
  140894:	e58d1038 	str	r1, [sp, #56]	; 0x38
  140898:	eafffe20 	b	140120 <printf_core+0x1840>
  14089c:	e59d3010 	ldr	r3, [sp, #16]
  1408a0:	e1a02009 	mov	r2, r9
  1408a4:	e3a01020 	mov	r1, #32
  1408a8:	e59d0004 	ldr	r0, [sp, #4]
  1408ac:	ebfff7e0 	bl	13e834 <pad.part.0>
  1408b0:	eafffdbe 	b	13ffb0 <printf_core+0x16d0>
  1408b4:	e3a0e000 	mov	lr, #0
  1408b8:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f984 <printf_core+0x10a4>
  1408bc:	eafffce1 	b	13fc48 <printf_core+0x1368>
  1408c0:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f988 <printf_core+0x10a8>
  1408c4:	e58d2040 	str	r2, [sp, #64]	; 0x40
  1408c8:	e58d3020 	str	r3, [sp, #32]
  1408cc:	eafffcd6 	b	13fc2c <printf_core+0x134c>
  1408d0:	e3a03001 	mov	r3, #1
  1408d4:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1408d8:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f988 <printf_core+0x10a8>
  1408dc:	e58d3020 	str	r3, [sp, #32]
  1408e0:	eafffcd1 	b	13fc2c <printf_core+0x134c>
  1408e4:	e3a03001 	mov	r3, #1
  1408e8:	e3a05006 	mov	r5, #6
  1408ec:	e58d3044 	str	r3, [sp, #68]	; 0x44
  1408f0:	eafffb9d 	b	13f76c <printf_core+0xe8c>
  1408f4:	e59d101c 	ldr	r1, [sp, #28]
  1408f8:	e287c004 	add	ip, r7, #4
  1408fc:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f98c <printf_core+0x10ac>
  140900:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f990 <printf_core+0x10b0>
  140904:	e151000c 	cmp	r1, ip
  140908:	01a0c002 	moveq	ip, r2
  14090c:	11a0c003 	movne	ip, r3
  140910:	e3a0e000 	mov	lr, #0
  140914:	eafffccb 	b	13fc48 <printf_core+0x1368>
  140918:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  14091c:	e1a02006 	mov	r2, r6
  140920:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  140924:	e1a03007 	mov	r3, r7
  140928:	eb000f70 	bl	1446f0 <__aeabi_dsub>
  14092c:	e1a03001 	mov	r3, r1
  140930:	e1a02000 	mov	r2, r0
  140934:	e1a01007 	mov	r1, r7
  140938:	e1a00006 	mov	r0, r6
  14093c:	eb000f6c 	bl	1446f4 <__adddf3>
  140940:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  140944:	e58d001c 	str	r0, [sp, #28]
  140948:	e58d3038 	str	r3, [sp, #56]	; 0x38
  14094c:	eafffdf3 	b	140120 <printf_core+0x1840>
  140950:	e3a0300a 	mov	r3, #10
  140954:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140958:	eafffc97 	b	13fbbc <printf_core+0x12dc>
  14095c:	e1a03005 	mov	r3, r5
  140960:	e1a02009 	mov	r2, r9
  140964:	e3a01020 	mov	r1, #32
  140968:	e59d0004 	ldr	r0, [sp, #4]
  14096c:	ebfff7b0 	bl	13e834 <pad.part.0>
  140970:	eafffe72 	b	140340 <printf_core+0x1a60>
  140974:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140978:	e1500003 	cmp	r0, r3
  14097c:	1afffee7 	bne	140520 <printf_core+0x1c40>
  140980:	eaffff42 	b	140690 <printf_core+0x1db0>
  140984:	e1a03005 	mov	r3, r5
  140988:	e1a02009 	mov	r2, r9
  14098c:	e3a01030 	mov	r1, #48	; 0x30
  140990:	e59d0004 	ldr	r0, [sp, #4]
  140994:	ebfff7a6 	bl	13e834 <pad.part.0>
  140998:	eaffff49 	b	1406c4 <printf_core+0x1de4>
  14099c:	e1a03005 	mov	r3, r5
  1409a0:	e1a02009 	mov	r2, r9
  1409a4:	e3a01020 	mov	r1, #32
  1409a8:	e59d0004 	ldr	r0, [sp, #4]
  1409ac:	ebfff7a0 	bl	13e834 <pad.part.0>
  1409b0:	eafffe50 	b	1402f8 <printf_core+0x1a18>

001409b4 <vfprintf>:
  1409b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1409b8:	e1a09001 	mov	r9, r1
  1409bc:	e1a06002 	mov	r6, r2
  1409c0:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  1409c4:	e28d5010 	add	r5, sp, #16
  1409c8:	e3a02028 	mov	r2, #40	; 0x28
  1409cc:	e3a01000 	mov	r1, #0
  1409d0:	e1a04000 	mov	r4, r0
  1409d4:	e1a00005 	mov	r0, r5
  1409d8:	eb000221 	bl	141264 <memset>
  1409dc:	e58d5000 	str	r5, [sp]
  1409e0:	e1a01009 	mov	r1, r9
  1409e4:	e28d3038 	add	r3, sp, #56	; 0x38
  1409e8:	e28d200c 	add	r2, sp, #12
  1409ec:	e3a00000 	mov	r0, #0
  1409f0:	e58d600c 	str	r6, [sp, #12]
  1409f4:	ebfff7b9 	bl	13e8e0 <printf_core>
  1409f8:	e3500000 	cmp	r0, #0
  1409fc:	ba000047 	blt	140b20 <vfprintf+0x16c>
  140a00:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  140a04:	e3530000 	cmp	r3, #0
  140a08:	b3a08000 	movlt	r8, #0
  140a0c:	ba000002 	blt	140a1c <vfprintf+0x68>
  140a10:	e1a00004 	mov	r0, r4
  140a14:	eb000ab0 	bl	1434dc <__lockfile>
  140a18:	e1a08000 	mov	r8, r0
  140a1c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  140a20:	e5943000 	ldr	r3, [r4]
  140a24:	e3520000 	cmp	r2, #0
  140a28:	e2036020 	and	r6, r3, #32
  140a2c:	d3c33020 	bicle	r3, r3, #32
  140a30:	d5843000 	strle	r3, [r4]
  140a34:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  140a38:	e3530000 	cmp	r3, #0
  140a3c:	0a000024 	beq	140ad4 <vfprintf+0x120>
  140a40:	e5947010 	ldr	r7, [r4, #16]
  140a44:	e3570000 	cmp	r7, #0
  140a48:	13a07000 	movne	r7, #0
  140a4c:	0a000035 	beq	140b28 <vfprintf+0x174>
  140a50:	e58d5000 	str	r5, [sp]
  140a54:	e28d3038 	add	r3, sp, #56	; 0x38
  140a58:	e28d200c 	add	r2, sp, #12
  140a5c:	e1a01009 	mov	r1, r9
  140a60:	e1a00004 	mov	r0, r4
  140a64:	ebfff79d 	bl	13e8e0 <printf_core>
  140a68:	e1a05000 	mov	r5, r0
  140a6c:	e3570000 	cmp	r7, #0
  140a70:	0a00000d 	beq	140aac <vfprintf+0xf8>
  140a74:	e3a02000 	mov	r2, #0
  140a78:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  140a7c:	e1a01002 	mov	r1, r2
  140a80:	e1a00004 	mov	r0, r4
  140a84:	e12fff33 	blx	r3
  140a88:	e3a03000 	mov	r3, #0
  140a8c:	e5942014 	ldr	r2, [r4, #20]
  140a90:	e584702c 	str	r7, [r4, #44]	; 0x2c
  140a94:	e1520003 	cmp	r2, r3
  140a98:	03e05000 	mvneq	r5, #0
  140a9c:	e5843030 	str	r3, [r4, #48]	; 0x30
  140aa0:	e5843010 	str	r3, [r4, #16]
  140aa4:	e584301c 	str	r3, [r4, #28]
  140aa8:	e5843014 	str	r3, [r4, #20]
  140aac:	e5943000 	ldr	r3, [r4]
  140ab0:	e3130020 	tst	r3, #32
  140ab4:	13e05000 	mvnne	r5, #0
  140ab8:	e1866003 	orr	r6, r6, r3
  140abc:	e3580000 	cmp	r8, #0
  140ac0:	e5846000 	str	r6, [r4]
  140ac4:	1a000010 	bne	140b0c <vfprintf+0x158>
  140ac8:	e1a00005 	mov	r0, r5
  140acc:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140ad0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140ad4:	e3a01050 	mov	r1, #80	; 0x50
  140ad8:	e28d2088 	add	r2, sp, #136	; 0x88
  140adc:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  140ae0:	e5843010 	str	r3, [r4, #16]
  140ae4:	e584301c 	str	r3, [r4, #28]
  140ae8:	e5843014 	str	r3, [r4, #20]
  140aec:	e5841030 	str	r1, [r4, #48]	; 0x30
  140af0:	e584202c 	str	r2, [r4, #44]	; 0x2c
  140af4:	e1a00004 	mov	r0, r4
  140af8:	eb000b95 	bl	143954 <__towrite>
  140afc:	e3500000 	cmp	r0, #0
  140b00:	13e05000 	mvnne	r5, #0
  140b04:	1affffd8 	bne	140a6c <vfprintf+0xb8>
  140b08:	eaffffd0 	b	140a50 <vfprintf+0x9c>
  140b0c:	e1a00004 	mov	r0, r4
  140b10:	eb000abe 	bl	143610 <__unlockfile>
  140b14:	e1a00005 	mov	r0, r5
  140b18:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140b1c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140b20:	e3e05000 	mvn	r5, #0
  140b24:	eaffffe7 	b	140ac8 <vfprintf+0x114>
  140b28:	e1a00004 	mov	r0, r4
  140b2c:	eb000b88 	bl	143954 <__towrite>
  140b30:	e3500000 	cmp	r0, #0
  140b34:	13e05000 	mvnne	r5, #0
  140b38:	1affffdb 	bne	140aac <vfprintf+0xf8>
  140b3c:	eaffffc3 	b	140a50 <vfprintf+0x9c>

00140b40 <sn_write>:
  140b40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  140b44:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  140b48:	e590c01c 	ldr	ip, [r0, #28]
  140b4c:	e1a05000 	mov	r5, r0
  140b50:	e5900014 	ldr	r0, [r0, #20]
  140b54:	e5963004 	ldr	r3, [r6, #4]
  140b58:	e040000c 	sub	r0, r0, ip
  140b5c:	e1500003 	cmp	r0, r3
  140b60:	31a04000 	movcc	r4, r0
  140b64:	21a04003 	movcs	r4, r3
  140b68:	e3540000 	cmp	r4, #0
  140b6c:	e1a08001 	mov	r8, r1
  140b70:	e1a07002 	mov	r7, r2
  140b74:	e5960000 	ldr	r0, [r6]
  140b78:	1a000012 	bne	140bc8 <sn_write+0x88>
  140b7c:	e1570003 	cmp	r7, r3
  140b80:	31a04007 	movcc	r4, r7
  140b84:	21a04003 	movcs	r4, r3
  140b88:	e3540000 	cmp	r4, #0
  140b8c:	0a000006 	beq	140bac <sn_write+0x6c>
  140b90:	e1a01008 	mov	r1, r8
  140b94:	e1a02004 	mov	r2, r4
  140b98:	eb000079 	bl	140d84 <memcpy>
  140b9c:	e8960009 	ldm	r6, {r0, r3}
  140ba0:	e0800004 	add	r0, r0, r4
  140ba4:	e0433004 	sub	r3, r3, r4
  140ba8:	e8860009 	stm	r6, {r0, r3}
  140bac:	e3a03000 	mov	r3, #0
  140bb0:	e5c03000 	strb	r3, [r0]
  140bb4:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  140bb8:	e1a00007 	mov	r0, r7
  140bbc:	e585301c 	str	r3, [r5, #28]
  140bc0:	e5853014 	str	r3, [r5, #20]
  140bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  140bc8:	e1a0100c 	mov	r1, ip
  140bcc:	e1a02004 	mov	r2, r4
  140bd0:	eb00006b 	bl	140d84 <memcpy>
  140bd4:	e8960009 	ldm	r6, {r0, r3}
  140bd8:	e0800004 	add	r0, r0, r4
  140bdc:	e0433004 	sub	r3, r3, r4
  140be0:	e8860009 	stm	r6, {r0, r3}
  140be4:	eaffffe4 	b	140b7c <sn_write+0x3c>

00140be8 <vsnprintf>:
  140be8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140bec:	e2516000 	subs	r6, r1, #0
  140bf0:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  140bf4:	e1a08002 	mov	r8, r2
  140bf8:	e1a09003 	mov	r9, r3
  140bfc:	1a000018 	bne	140c64 <vsnprintf+0x7c>
  140c00:	e28d7010 	add	r7, sp, #16
  140c04:	e3a02090 	mov	r2, #144	; 0x90
  140c08:	e1a00007 	mov	r0, r7
  140c0c:	e28d4004 	add	r4, sp, #4
  140c10:	e58d600c 	str	r6, [sp, #12]
  140c14:	e58d4008 	str	r4, [sp, #8]
  140c18:	eb000191 	bl	141264 <memset>
  140c1c:	e3e02000 	mvn	r2, #0
  140c20:	e59f1098 	ldr	r1, [pc, #152]	; 140cc0 <vsnprintf+0xd8>
  140c24:	e28d3008 	add	r3, sp, #8
  140c28:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  140c2c:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140c30:	e58d1034 	str	r1, [sp, #52]	; 0x34
  140c34:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140c38:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140c3c:	e3a0c000 	mov	ip, #0
  140c40:	e1a02009 	mov	r2, r9
  140c44:	e1a01008 	mov	r1, r8
  140c48:	e1a00007 	mov	r0, r7
  140c4c:	e5c4c000 	strb	ip, [r4]
  140c50:	ebffff57 	bl	1409b4 <vfprintf>
  140c54:	e1a05000 	mov	r5, r0
  140c58:	e1a00005 	mov	r0, r5
  140c5c:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  140c60:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140c64:	e3e05000 	mvn	r5, #0
  140c68:	e1a04000 	mov	r4, r0
  140c6c:	e28d7010 	add	r7, sp, #16
  140c70:	e0863005 	add	r3, r6, r5
  140c74:	e3a02090 	mov	r2, #144	; 0x90
  140c78:	e1a00007 	mov	r0, r7
  140c7c:	e3a01000 	mov	r1, #0
  140c80:	e58d300c 	str	r3, [sp, #12]
  140c84:	e58d4008 	str	r4, [sp, #8]
  140c88:	eb000175 	bl	141264 <memset>
  140c8c:	e59f202c 	ldr	r2, [pc, #44]	; 140cc0 <vsnprintf+0xd8>
  140c90:	e28d3008 	add	r3, sp, #8
  140c94:	e3560000 	cmp	r6, #0
  140c98:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140c9c:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140ca0:	e58d2034 	str	r2, [sp, #52]	; 0x34
  140ca4:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140ca8:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140cac:	aaffffe2 	bge	140c3c <vsnprintf+0x54>
  140cb0:	ebffe085 	bl	138ecc <__errno_location>
  140cb4:	e3a0204b 	mov	r2, #75	; 0x4b
  140cb8:	e5802000 	str	r2, [r0]
  140cbc:	eaffffe5 	b	140c58 <vsnprintf+0x70>
  140cc0:	00140b40 	.word	0x00140b40

00140cc4 <vsprintf>:
  140cc4:	e1a03002 	mov	r3, r2
  140cc8:	e1a02001 	mov	r2, r1
  140ccc:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140cd0:	eaffffc4 	b	140be8 <vsnprintf>

00140cd4 <atoi>:
  140cd4:	e5d03000 	ldrb	r3, [r0]
  140cd8:	e2432009 	sub	r2, r3, #9
  140cdc:	e3530020 	cmp	r3, #32
  140ce0:	13520004 	cmpne	r2, #4
  140ce4:	8a000004 	bhi	140cfc <atoi+0x28>
  140ce8:	e5f03001 	ldrb	r3, [r0, #1]!
  140cec:	e2432009 	sub	r2, r3, #9
  140cf0:	e3530020 	cmp	r3, #32
  140cf4:	13520004 	cmpne	r2, #4
  140cf8:	9afffffa 	bls	140ce8 <atoi+0x14>
  140cfc:	e353002b 	cmp	r3, #43	; 0x2b
  140d00:	0a000019 	beq	140d6c <atoi+0x98>
  140d04:	e353002d 	cmp	r3, #45	; 0x2d
  140d08:	0a00000f 	beq	140d4c <atoi+0x78>
  140d0c:	e5d01000 	ldrb	r1, [r0]
  140d10:	e2412030 	sub	r2, r1, #48	; 0x30
  140d14:	e3520009 	cmp	r2, #9
  140d18:	91a03000 	movls	r3, r0
  140d1c:	8a000010 	bhi	140d64 <atoi+0x90>
  140d20:	e3a0c000 	mov	ip, #0
  140d24:	e3a00000 	mov	r0, #0
  140d28:	e5f31001 	ldrb	r1, [r3, #1]!
  140d2c:	e0800100 	add	r0, r0, r0, lsl #2
  140d30:	e0620080 	rsb	r0, r2, r0, lsl #1
  140d34:	e2412030 	sub	r2, r1, #48	; 0x30
  140d38:	e3520009 	cmp	r2, #9
  140d3c:	9afffff9 	bls	140d28 <atoi+0x54>
  140d40:	e35c0000 	cmp	ip, #0
  140d44:	02600000 	rsbeq	r0, r0, #0
  140d48:	e12fff1e 	bx	lr
  140d4c:	e5d01001 	ldrb	r1, [r0, #1]
  140d50:	e2803001 	add	r3, r0, #1
  140d54:	e2412030 	sub	r2, r1, #48	; 0x30
  140d58:	e3520009 	cmp	r2, #9
  140d5c:	93a0c001 	movls	ip, #1
  140d60:	9affffef 	bls	140d24 <atoi+0x50>
  140d64:	e3a00000 	mov	r0, #0
  140d68:	e12fff1e 	bx	lr
  140d6c:	e5d01001 	ldrb	r1, [r0, #1]
  140d70:	e2803001 	add	r3, r0, #1
  140d74:	e2412030 	sub	r2, r1, #48	; 0x30
  140d78:	e3520009 	cmp	r2, #9
  140d7c:	9affffe7 	bls	140d20 <atoi+0x4c>
  140d80:	eafffff7 	b	140d64 <atoi+0x90>

00140d84 <memcpy>:
  140d84:	e92d4011 	push	{r0, r4, lr}
  140d88:	e24dd01c 	sub	sp, sp, #28
  140d8c:	e3520004 	cmp	r2, #4
  140d90:	3a0000b0 	bcc	141058 <copy_last_3_and_return>
  140d94:	e2613000 	rsb	r3, r1, #0
  140d98:	e2133003 	ands	r3, r3, #3
  140d9c:	0a000007 	beq	140dc0 <src_aligned>
  140da0:	e1b0cf83 	lsls	ip, r3, #31
  140da4:	e0422003 	sub	r2, r2, r3
  140da8:	44d13001 	ldrbmi	r3, [r1], #1
  140dac:	24d14001 	ldrbcs	r4, [r1], #1
  140db0:	24d1c001 	ldrbcs	ip, [r1], #1
  140db4:	44c03001 	strbmi	r3, [r0], #1
  140db8:	24c04001 	strbcs	r4, [r0], #1
  140dbc:	24c0c001 	strbcs	ip, [r0], #1

00140dc0 <src_aligned>:
  140dc0:	e020c001 	eor	ip, r0, r1
  140dc4:	e31c0003 	tst	ip, #3
  140dc8:	1a000027 	bne	140e6c <non_congruent>
  140dcc:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140dd0:	e2603000 	rsb	r3, r0, #0
  140dd4:	e213301c 	ands	r3, r3, #28
  140dd8:	0a00000a 	beq	140e08 <cached_aligned32>
  140ddc:	e1530002 	cmp	r3, r2
  140de0:	8202301c 	andhi	r3, r2, #28
  140de4:	e1b0ce03 	lsls	ip, r3, #28
  140de8:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140dec:	48b10300 	ldmmi	r1!, {r8, r9}
  140df0:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140df4:	48a00300 	stmiami	r0!, {r8, r9}
  140df8:	e3130004 	tst	r3, #4
  140dfc:	1491a004 	ldrne	sl, [r1], #4
  140e00:	1480a004 	strne	sl, [r0], #4
  140e04:	e0422003 	sub	r2, r2, r3

00140e08 <cached_aligned32>:
  140e08:	e2522020 	subs	r2, r2, #32
  140e0c:	3a000004 	bcc	140e24 <less_than_32_left>
  140e10:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140e14:	e2522020 	subs	r2, r2, #32
  140e18:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140e1c:	2afffffb 	bcs	140e10 <cached_aligned32+0x8>
  140e20:	e2822020 	add	r2, r2, #32

00140e24 <less_than_32_left>:
  140e24:	e312001f 	tst	r2, #31
  140e28:	0a00000c 	beq	140e60 <less_than_32_left+0x3c>
  140e2c:	e1b0ce02 	lsls	ip, r2, #28
  140e30:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140e34:	48b10300 	ldmmi	r1!, {r8, r9}
  140e38:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140e3c:	48a00300 	stmiami	r0!, {r8, r9}
  140e40:	e1b0cf02 	lsls	ip, r2, #30
  140e44:	24913004 	ldrcs	r3, [r1], #4
  140e48:	40d140b2 	ldrhmi	r4, [r1], #2
  140e4c:	24803004 	strcs	r3, [r0], #4
  140e50:	40c040b2 	strhmi	r4, [r0], #2
  140e54:	e3120001 	tst	r2, #1
  140e58:	15d13000 	ldrbne	r3, [r1]
  140e5c:	15c03000 	strbne	r3, [r0]
  140e60:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  140e64:	e8bd4011 	pop	{r0, r4, lr}
  140e68:	e12fff1e 	bx	lr

00140e6c <non_congruent>:
  140e6c:	e3520004 	cmp	r2, #4
  140e70:	3a000078 	bcc	141058 <copy_last_3_and_return>
  140e74:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140e78:	e2605000 	rsb	r5, r0, #0
  140e7c:	e2055003 	and	r5, r5, #3
  140e80:	e1a0c185 	lsl	ip, r5, #3
  140e84:	e26ce020 	rsb	lr, ip, #32
  140e88:	e4913004 	ldr	r3, [r1], #4
  140e8c:	e2422004 	sub	r2, r2, #4
  140e90:	e1b05f85 	lsls	r5, r5, #31
  140e94:	44c03001 	strbmi	r3, [r0], #1
  140e98:	41a03423 	lsrmi	r3, r3, #8
  140e9c:	24c03001 	strbcs	r3, [r0], #1
  140ea0:	21a03423 	lsrcs	r3, r3, #8
  140ea4:	24c03001 	strbcs	r3, [r0], #1
  140ea8:	21a03423 	lsrcs	r3, r3, #8
  140eac:	e3520004 	cmp	r2, #4
  140eb0:	3a000061 	bcc	14103c <partial_word_tail>
  140eb4:	e310001c 	tst	r0, #28
  140eb8:	0a000007 	beq	140edc <non_congruent+0x70>
  140ebc:	e4915004 	ldr	r5, [r1], #4
  140ec0:	e2422004 	sub	r2, r2, #4
  140ec4:	e1834e15 	orr	r4, r3, r5, lsl lr
  140ec8:	e1a03c35 	lsr	r3, r5, ip
  140ecc:	e4804004 	str	r4, [r0], #4
  140ed0:	e3520004 	cmp	r2, #4
  140ed4:	2afffff6 	bcs	140eb4 <non_congruent+0x48>
  140ed8:	3a000057 	bcc	14103c <partial_word_tail>
  140edc:	e2522020 	subs	r2, r2, #32
  140ee0:	3a00004a 	bcc	141010 <less_than_thirtytwo>
  140ee4:	e35c0018 	cmp	ip, #24
  140ee8:	0a000031 	beq	140fb4 <loop24>
  140eec:	e35c0008 	cmp	ip, #8
  140ef0:	0a000017 	beq	140f54 <loop8>

00140ef4 <loop16>:
  140ef4:	e491c004 	ldr	ip, [r1], #4
  140ef8:	e1a0400c 	mov	r4, ip
  140efc:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f00:	e2522020 	subs	r2, r2, #32
  140f04:	2491c004 	ldrcs	ip, [r1], #4
  140f08:	e1833804 	orr	r3, r3, r4, lsl #16
  140f0c:	e1a04824 	lsr	r4, r4, #16
  140f10:	e1844805 	orr	r4, r4, r5, lsl #16
  140f14:	e1a05825 	lsr	r5, r5, #16
  140f18:	e1855806 	orr	r5, r5, r6, lsl #16
  140f1c:	e1a06826 	lsr	r6, r6, #16
  140f20:	e1866807 	orr	r6, r6, r7, lsl #16
  140f24:	e1a07827 	lsr	r7, r7, #16
  140f28:	e1877808 	orr	r7, r7, r8, lsl #16
  140f2c:	e1a08828 	lsr	r8, r8, #16
  140f30:	e1888809 	orr	r8, r8, r9, lsl #16
  140f34:	e1a09829 	lsr	r9, r9, #16
  140f38:	e189980a 	orr	r9, r9, sl, lsl #16
  140f3c:	e1a0a82a 	lsr	sl, sl, #16
  140f40:	e18aa80b 	orr	sl, sl, fp, lsl #16
  140f44:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140f48:	e1a0382b 	lsr	r3, fp, #16
  140f4c:	2affffe9 	bcs	140ef8 <loop16+0x4>
  140f50:	ea00002e 	b	141010 <less_than_thirtytwo>

00140f54 <loop8>:
  140f54:	e491c004 	ldr	ip, [r1], #4
  140f58:	e1a0400c 	mov	r4, ip
  140f5c:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f60:	e2522020 	subs	r2, r2, #32
  140f64:	2491c004 	ldrcs	ip, [r1], #4
  140f68:	e1833c04 	orr	r3, r3, r4, lsl #24
  140f6c:	e1a04424 	lsr	r4, r4, #8
  140f70:	e1844c05 	orr	r4, r4, r5, lsl #24
  140f74:	e1a05425 	lsr	r5, r5, #8
  140f78:	e1855c06 	orr	r5, r5, r6, lsl #24
  140f7c:	e1a06426 	lsr	r6, r6, #8
  140f80:	e1866c07 	orr	r6, r6, r7, lsl #24
  140f84:	e1a07427 	lsr	r7, r7, #8
  140f88:	e1877c08 	orr	r7, r7, r8, lsl #24
  140f8c:	e1a08428 	lsr	r8, r8, #8
  140f90:	e1888c09 	orr	r8, r8, r9, lsl #24
  140f94:	e1a09429 	lsr	r9, r9, #8
  140f98:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140f9c:	e1a0a42a 	lsr	sl, sl, #8
  140fa0:	e18aac0b 	orr	sl, sl, fp, lsl #24
  140fa4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140fa8:	e1a0342b 	lsr	r3, fp, #8
  140fac:	2affffe9 	bcs	140f58 <loop8+0x4>
  140fb0:	ea000016 	b	141010 <less_than_thirtytwo>

00140fb4 <loop24>:
  140fb4:	e491c004 	ldr	ip, [r1], #4
  140fb8:	e1a0400c 	mov	r4, ip
  140fbc:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140fc0:	e2522020 	subs	r2, r2, #32
  140fc4:	2491c004 	ldrcs	ip, [r1], #4
  140fc8:	e1833404 	orr	r3, r3, r4, lsl #8
  140fcc:	e1a04c24 	lsr	r4, r4, #24
  140fd0:	e1844405 	orr	r4, r4, r5, lsl #8
  140fd4:	e1a05c25 	lsr	r5, r5, #24
  140fd8:	e1855406 	orr	r5, r5, r6, lsl #8
  140fdc:	e1a06c26 	lsr	r6, r6, #24
  140fe0:	e1866407 	orr	r6, r6, r7, lsl #8
  140fe4:	e1a07c27 	lsr	r7, r7, #24
  140fe8:	e1877408 	orr	r7, r7, r8, lsl #8
  140fec:	e1a08c28 	lsr	r8, r8, #24
  140ff0:	e1888409 	orr	r8, r8, r9, lsl #8
  140ff4:	e1a09c29 	lsr	r9, r9, #24
  140ff8:	e189940a 	orr	r9, r9, sl, lsl #8
  140ffc:	e1a0ac2a 	lsr	sl, sl, #24
  141000:	e18aa40b 	orr	sl, sl, fp, lsl #8
  141004:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  141008:	e1a03c2b 	lsr	r3, fp, #24
  14100c:	2affffe9 	bcs	140fb8 <loop24+0x4>

00141010 <less_than_thirtytwo>:
  141010:	e26ec020 	rsb	ip, lr, #32
  141014:	e2822020 	add	r2, r2, #32
  141018:	e3520004 	cmp	r2, #4
  14101c:	3a000006 	bcc	14103c <partial_word_tail>
  141020:	e4915004 	ldr	r5, [r1], #4
  141024:	e2422004 	sub	r2, r2, #4
  141028:	e1834e15 	orr	r4, r3, r5, lsl lr
  14102c:	e1a03c35 	lsr	r3, r5, ip
  141030:	e4804004 	str	r4, [r0], #4
  141034:	e3520004 	cmp	r2, #4
  141038:	2afffff8 	bcs	141020 <less_than_thirtytwo+0x10>

0014103c <partial_word_tail>:
  14103c:	e1b05e0e 	lsls	r5, lr, #28
  141040:	44c03001 	strbmi	r3, [r0], #1
  141044:	41a03423 	lsrmi	r3, r3, #8
  141048:	24c03001 	strbcs	r3, [r0], #1
  14104c:	21a03423 	lsrcs	r3, r3, #8
  141050:	24c03001 	strbcs	r3, [r0], #1
  141054:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00141058 <copy_last_3_and_return>:
  141058:	e1b02f82 	lsls	r2, r2, #31
  14105c:	44d12001 	ldrbmi	r2, [r1], #1
  141060:	24d13001 	ldrbcs	r3, [r1], #1
  141064:	25d1c000 	ldrbcs	ip, [r1]
  141068:	44c02001 	strbmi	r2, [r0], #1
  14106c:	24c03001 	strbcs	r3, [r0], #1
  141070:	25c0c000 	strbcs	ip, [r0]
  141074:	e28dd01c 	add	sp, sp, #28
  141078:	e8bd4011 	pop	{r0, r4, lr}
  14107c:	e12fff1e 	bx	lr

00141080 <memcmp>:
  141080:	e3520000 	cmp	r2, #0
  141084:	0a00000c 	beq	1410bc <memcmp+0x3c>
  141088:	e5d0c000 	ldrb	ip, [r0]
  14108c:	e5d13000 	ldrb	r3, [r1]
  141090:	e153000c 	cmp	r3, ip
  141094:	1a00000a 	bne	1410c4 <memcmp+0x44>
  141098:	e2422001 	sub	r2, r2, #1
  14109c:	e0812002 	add	r2, r1, r2
  1410a0:	ea000003 	b	1410b4 <memcmp+0x34>
  1410a4:	e5f0c001 	ldrb	ip, [r0, #1]!
  1410a8:	e5f13001 	ldrb	r3, [r1, #1]!
  1410ac:	e15c0003 	cmp	ip, r3
  1410b0:	1a000003 	bne	1410c4 <memcmp+0x44>
  1410b4:	e1510002 	cmp	r1, r2
  1410b8:	1afffff9 	bne	1410a4 <memcmp+0x24>
  1410bc:	e3a00000 	mov	r0, #0
  1410c0:	e12fff1e 	bx	lr
  1410c4:	e04c0003 	sub	r0, ip, r3
  1410c8:	e12fff1e 	bx	lr

001410cc <memmove>:
  1410cc:	e1500001 	cmp	r0, r1
  1410d0:	e92d4030 	push	{r4, r5, lr}
  1410d4:	e1a0e000 	mov	lr, r0
  1410d8:	0a000030 	beq	1411a0 <memmove+0xd4>
  1410dc:	e0414000 	sub	r4, r1, r0
  1410e0:	e0444002 	sub	r4, r4, r2
  1410e4:	e0625f82 	rsb	r5, r2, r2, lsl #31
  1410e8:	e1540085 	cmp	r4, r5, lsl #1
  1410ec:	e1a0c001 	mov	ip, r1
  1410f0:	e1a03002 	mov	r3, r2
  1410f4:	9a000054 	bls	14124c <memmove+0x180>
  1410f8:	e0212000 	eor	r2, r1, r0
  1410fc:	e1500001 	cmp	r0, r1
  141100:	e2022003 	and	r2, r2, #3
  141104:	2a000027 	bcs	1411a8 <memmove+0xdc>
  141108:	e3520000 	cmp	r2, #0
  14110c:	1a00001a 	bne	14117c <memmove+0xb0>
  141110:	e3100003 	tst	r0, #3
  141114:	0a000050 	beq	14125c <memmove+0x190>
  141118:	e3530000 	cmp	r3, #0
  14111c:	11a02000 	movne	r2, r0
  141120:	e2433001 	sub	r3, r3, #1
  141124:	1a000002 	bne	141134 <memmove+0x68>
  141128:	ea00001c 	b	1411a0 <memmove+0xd4>
  14112c:	e2533001 	subs	r3, r3, #1
  141130:	3a00001a 	bcc	1411a0 <memmove+0xd4>
  141134:	e4dc1001 	ldrb	r1, [ip], #1
  141138:	e4c21001 	strb	r1, [r2], #1
  14113c:	e3120003 	tst	r2, #3
  141140:	1afffff9 	bne	14112c <memmove+0x60>
  141144:	e3530003 	cmp	r3, #3
  141148:	9a00000c 	bls	141180 <memmove+0xb4>
  14114c:	e2435004 	sub	r5, r3, #4
  141150:	e3c55003 	bic	r5, r5, #3
  141154:	e2855004 	add	r5, r5, #4
  141158:	e0824005 	add	r4, r2, r5
  14115c:	e24c1004 	sub	r1, ip, #4
  141160:	e5b10004 	ldr	r0, [r1, #4]!
  141164:	e4820004 	str	r0, [r2], #4
  141168:	e1540002 	cmp	r4, r2
  14116c:	1afffffb 	bne	141160 <memmove+0x94>
  141170:	e2033003 	and	r3, r3, #3
  141174:	e08cc005 	add	ip, ip, r5
  141178:	ea000000 	b	141180 <memmove+0xb4>
  14117c:	e1a02000 	mov	r2, r0
  141180:	e3530000 	cmp	r3, #0
  141184:	12422001 	subne	r2, r2, #1
  141188:	108c3003 	addne	r3, ip, r3
  14118c:	0a000003 	beq	1411a0 <memmove+0xd4>
  141190:	e4dc1001 	ldrb	r1, [ip], #1
  141194:	e153000c 	cmp	r3, ip
  141198:	e5e21001 	strb	r1, [r2, #1]!
  14119c:	1afffffb 	bne	141190 <memmove+0xc4>
  1411a0:	e1a0000e 	mov	r0, lr
  1411a4:	e8bd8030 	pop	{r4, r5, pc}
  1411a8:	e3520000 	cmp	r2, #0
  1411ac:	1a00001c 	bne	141224 <memmove+0x158>
  1411b0:	e0801003 	add	r1, r0, r3
  1411b4:	e3110003 	tst	r1, #3
  1411b8:	0a000025 	beq	141254 <memmove+0x188>
  1411bc:	e3530000 	cmp	r3, #0
  1411c0:	e2432001 	sub	r2, r3, #1
  1411c4:	0afffff5 	beq	1411a0 <memmove+0xd4>
  1411c8:	e08c3003 	add	r3, ip, r3
  1411cc:	ea000001 	b	1411d8 <memmove+0x10c>
  1411d0:	e2522001 	subs	r2, r2, #1
  1411d4:	3afffff1 	bcc	1411a0 <memmove+0xd4>
  1411d8:	e5730001 	ldrb	r0, [r3, #-1]!
  1411dc:	e5610001 	strb	r0, [r1, #-1]!
  1411e0:	e3110003 	tst	r1, #3
  1411e4:	1afffff9 	bne	1411d0 <memmove+0x104>
  1411e8:	e3520003 	cmp	r2, #3
  1411ec:	91a03002 	movls	r3, r2
  1411f0:	9a00000b 	bls	141224 <memmove+0x158>
  1411f4:	e24c0004 	sub	r0, ip, #4
  1411f8:	e2423004 	sub	r3, r2, #4
  1411fc:	e3c33003 	bic	r3, r3, #3
  141200:	e0800002 	add	r0, r0, r2
  141204:	e0400003 	sub	r0, r0, r3
  141208:	e08e1002 	add	r1, lr, r2
  14120c:	e08c3002 	add	r3, ip, r2
  141210:	e5334004 	ldr	r4, [r3, #-4]!
  141214:	e1530000 	cmp	r3, r0
  141218:	e5214004 	str	r4, [r1, #-4]!
  14121c:	1afffffb 	bne	141210 <memmove+0x144>
  141220:	e2023003 	and	r3, r2, #3
  141224:	e3530000 	cmp	r3, #0
  141228:	108c2003 	addne	r2, ip, r3
  14122c:	108e3003 	addne	r3, lr, r3
  141230:	0affffda 	beq	1411a0 <memmove+0xd4>
  141234:	e5721001 	ldrb	r1, [r2, #-1]!
  141238:	e15c0002 	cmp	ip, r2
  14123c:	e5631001 	strb	r1, [r3, #-1]!
  141240:	1afffffb 	bne	141234 <memmove+0x168>
  141244:	e1a0000e 	mov	r0, lr
  141248:	e8bd8030 	pop	{r4, r5, pc}
  14124c:	e8bd4030 	pop	{r4, r5, lr}
  141250:	eafffecb 	b	140d84 <memcpy>
  141254:	e1a02003 	mov	r2, r3
  141258:	eaffffe2 	b	1411e8 <memmove+0x11c>
  14125c:	e1a02000 	mov	r2, r0
  141260:	eaffffb7 	b	141144 <memmove+0x78>

00141264 <memset>:
  141264:	e3520000 	cmp	r2, #0
  141268:	012fff1e 	bxeq	lr
  14126c:	e1a03000 	mov	r3, r0
  141270:	e20110ff 	and	r1, r1, #255	; 0xff
  141274:	e6c31002 	strb	r1, [r3], r2
  141278:	e3520002 	cmp	r2, #2
  14127c:	e5431001 	strb	r1, [r3, #-1]
  141280:	912fff1e 	bxls	lr
  141284:	e3520006 	cmp	r2, #6
  141288:	e5c01001 	strb	r1, [r0, #1]
  14128c:	e5c01002 	strb	r1, [r0, #2]
  141290:	e5431002 	strb	r1, [r3, #-2]
  141294:	e5431003 	strb	r1, [r3, #-3]
  141298:	912fff1e 	bxls	lr
  14129c:	e3520008 	cmp	r2, #8
  1412a0:	e5c01003 	strb	r1, [r0, #3]
  1412a4:	e5431004 	strb	r1, [r3, #-4]
  1412a8:	912fff1e 	bxls	lr
  1412ac:	e260c000 	rsb	ip, r0, #0
  1412b0:	e20cc003 	and	ip, ip, #3
  1412b4:	e042200c 	sub	r2, r2, ip
  1412b8:	e3c22003 	bic	r2, r2, #3
  1412bc:	e0811401 	add	r1, r1, r1, lsl #8
  1412c0:	e080300c 	add	r3, r0, ip
  1412c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1412c8:	e0811801 	add	r1, r1, r1, lsl #16
  1412cc:	e3520008 	cmp	r2, #8
  1412d0:	e083e002 	add	lr, r3, r2
  1412d4:	e780100c 	str	r1, [r0, ip]
  1412d8:	e50e1004 	str	r1, [lr, #-4]
  1412dc:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1412e0:	e3520018 	cmp	r2, #24
  1412e4:	e5831004 	str	r1, [r3, #4]
  1412e8:	e5831008 	str	r1, [r3, #8]
  1412ec:	e50e100c 	str	r1, [lr, #-12]
  1412f0:	e50e1008 	str	r1, [lr, #-8]
  1412f4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1412f8:	e3a04000 	mov	r4, #0
  1412fc:	e203c004 	and	ip, r3, #4
  141300:	e28cc018 	add	ip, ip, #24
  141304:	e042200c 	sub	r2, r2, ip
  141308:	e352001f 	cmp	r2, #31
  14130c:	e583100c 	str	r1, [r3, #12]
  141310:	e5831010 	str	r1, [r3, #16]
  141314:	e5831014 	str	r1, [r3, #20]
  141318:	e5831018 	str	r1, [r3, #24]
  14131c:	e1a05001 	mov	r5, r1
  141320:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  141324:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  141328:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  14132c:	e50e1010 	str	r1, [lr, #-16]
  141330:	e1846001 	orr	r6, r4, r1
  141334:	e1a07001 	mov	r7, r1
  141338:	e083100c 	add	r1, r3, ip
  14133c:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141340:	e2422020 	sub	r2, r2, #32
  141344:	e3c2301f 	bic	r3, r2, #31
  141348:	e2812040 	add	r2, r1, #64	; 0x40
  14134c:	e0833002 	add	r3, r3, r2
  141350:	e2812020 	add	r2, r1, #32
  141354:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  141358:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  14135c:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  141360:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  141364:	e5026010 	str	r6, [r2, #-16]
  141368:	e502700c 	str	r7, [r2, #-12]
  14136c:	e90200c0 	stmdb	r2, {r6, r7}
  141370:	e2822020 	add	r2, r2, #32
  141374:	e1520003 	cmp	r2, r3
  141378:	1afffff5 	bne	141354 <memset+0xf0>
  14137c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00141380 <strcasecmp>:
  141380:	e92d4070 	push	{r4, r5, r6, lr}
  141384:	e1a05000 	mov	r5, r0
  141388:	e5d00000 	ldrb	r0, [r0]
  14138c:	e1a04001 	mov	r4, r1
  141390:	e3500000 	cmp	r0, #0
  141394:	1a00000c 	bne	1413cc <strcasecmp+0x4c>
  141398:	ea00000e 	b	1413d8 <strcasecmp+0x58>
  14139c:	e1500003 	cmp	r0, r3
  1413a0:	0a000005 	beq	1413bc <strcasecmp+0x3c>
  1413a4:	eb00067f 	bl	142da8 <tolower>
  1413a8:	e1a06000 	mov	r6, r0
  1413ac:	e5d40000 	ldrb	r0, [r4]
  1413b0:	eb00067c 	bl	142da8 <tolower>
  1413b4:	e1560000 	cmp	r6, r0
  1413b8:	1a00000c 	bne	1413f0 <strcasecmp+0x70>
  1413bc:	e5f50001 	ldrb	r0, [r5, #1]!
  1413c0:	e2844001 	add	r4, r4, #1
  1413c4:	e3500000 	cmp	r0, #0
  1413c8:	0a000002 	beq	1413d8 <strcasecmp+0x58>
  1413cc:	e5d43000 	ldrb	r3, [r4]
  1413d0:	e3530000 	cmp	r3, #0
  1413d4:	1afffff0 	bne	14139c <strcasecmp+0x1c>
  1413d8:	eb000672 	bl	142da8 <tolower>
  1413dc:	e1a05000 	mov	r5, r0
  1413e0:	e5d40000 	ldrb	r0, [r4]
  1413e4:	eb00066f 	bl	142da8 <tolower>
  1413e8:	e0450000 	sub	r0, r5, r0
  1413ec:	e8bd8070 	pop	{r4, r5, r6, pc}
  1413f0:	e5d50000 	ldrb	r0, [r5]
  1413f4:	eafffff7 	b	1413d8 <strcasecmp+0x58>

001413f8 <__strcasecmp_l>:
  1413f8:	eaffffe0 	b	141380 <strcasecmp>

001413fc <strcat>:
  1413fc:	e92d4070 	push	{r4, r5, r6, lr}
  141400:	e1a04000 	mov	r4, r0
  141404:	e1a05001 	mov	r5, r1
  141408:	eb000026 	bl	1414a8 <strlen>
  14140c:	e1a01005 	mov	r1, r5
  141410:	e0840000 	add	r0, r4, r0
  141414:	eb000012 	bl	141464 <strcpy>
  141418:	e1a00004 	mov	r0, r4
  14141c:	e8bd8070 	pop	{r4, r5, r6, pc}

00141420 <strcmp>:
  141420:	e5d02000 	ldrb	r2, [r0]
  141424:	e5d13000 	ldrb	r3, [r1]
  141428:	e1530002 	cmp	r3, r2
  14142c:	0a000004 	beq	141444 <strcmp+0x24>
  141430:	ea000009 	b	14145c <strcmp+0x3c>
  141434:	e5f03001 	ldrb	r3, [r0, #1]!
  141438:	e5f12001 	ldrb	r2, [r1, #1]!
  14143c:	e1530002 	cmp	r3, r2
  141440:	1a000003 	bne	141454 <strcmp+0x34>
  141444:	e3530000 	cmp	r3, #0
  141448:	1afffff9 	bne	141434 <strcmp+0x14>
  14144c:	e1a00003 	mov	r0, r3
  141450:	e12fff1e 	bx	lr
  141454:	e0430002 	sub	r0, r3, r2
  141458:	e12fff1e 	bx	lr
  14145c:	e0420003 	sub	r0, r2, r3
  141460:	e12fff1e 	bx	lr

00141464 <strcpy>:
  141464:	e92d4010 	push	{r4, lr}
  141468:	e1a04000 	mov	r4, r0
  14146c:	eb000a94 	bl	143ec4 <__stpcpy>
  141470:	e1a00004 	mov	r0, r4
  141474:	e8bd8010 	pop	{r4, pc}

00141478 <strdup>:
  141478:	e92d4070 	push	{r4, r5, r6, lr}
  14147c:	e1a05000 	mov	r5, r0
  141480:	eb000008 	bl	1414a8 <strlen>
  141484:	e2804001 	add	r4, r0, #1
  141488:	e1a00004 	mov	r0, r4
  14148c:	ebffefac 	bl	13d344 <malloc>
  141490:	e3500000 	cmp	r0, #0
  141494:	08bd8070 	popeq	{r4, r5, r6, pc}
  141498:	e1a02004 	mov	r2, r4
  14149c:	e1a01005 	mov	r1, r5
  1414a0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1414a4:	eafffe36 	b	140d84 <memcpy>

001414a8 <strlen>:
  1414a8:	e3100003 	tst	r0, #3
  1414ac:	0a000023 	beq	141540 <strlen+0x98>
  1414b0:	e5d03000 	ldrb	r3, [r0]
  1414b4:	e3530000 	cmp	r3, #0
  1414b8:	12803001 	addne	r3, r0, #1
  1414bc:	1a000005 	bne	1414d8 <strlen+0x30>
  1414c0:	ea000020 	b	141548 <strlen+0xa0>
  1414c4:	e5d31000 	ldrb	r1, [r3]
  1414c8:	e283c001 	add	ip, r3, #1
  1414cc:	e3510000 	cmp	r1, #0
  1414d0:	0a000018 	beq	141538 <strlen+0x90>
  1414d4:	e1a0300c 	mov	r3, ip
  1414d8:	e3130003 	tst	r3, #3
  1414dc:	e1a02003 	mov	r2, r3
  1414e0:	1afffff7 	bne	1414c4 <strlen+0x1c>
  1414e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1414e8:	e59fe060 	ldr	lr, [pc, #96]	; 141550 <strlen+0xa8>
  1414ec:	e592c000 	ldr	ip, [r2]
  1414f0:	e59f305c 	ldr	r3, [pc, #92]	; 141554 <strlen+0xac>
  1414f4:	e08c100e 	add	r1, ip, lr
  1414f8:	e1c1100c 	bic	r1, r1, ip
  1414fc:	e1110003 	tst	r1, r3
  141500:	1a000004 	bne	141518 <strlen+0x70>
  141504:	e5b2c004 	ldr	ip, [r2, #4]!
  141508:	e08c100e 	add	r1, ip, lr
  14150c:	e1c1100c 	bic	r1, r1, ip
  141510:	e1110003 	tst	r1, r3
  141514:	0afffffa 	beq	141504 <strlen+0x5c>
  141518:	e5d23000 	ldrb	r3, [r2]
  14151c:	e3530000 	cmp	r3, #0
  141520:	0a000002 	beq	141530 <strlen+0x88>
  141524:	e5f23001 	ldrb	r3, [r2, #1]!
  141528:	e3530000 	cmp	r3, #0
  14152c:	1afffffc 	bne	141524 <strlen+0x7c>
  141530:	e0420000 	sub	r0, r2, r0
  141534:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141538:	e0430000 	sub	r0, r3, r0
  14153c:	e12fff1e 	bx	lr
  141540:	e1a02000 	mov	r2, r0
  141544:	eaffffe6 	b	1414e4 <strlen+0x3c>
  141548:	e1a00003 	mov	r0, r3
  14154c:	e12fff1e 	bx	lr
  141550:	fefefeff 	.word	0xfefefeff
  141554:	80808080 	.word	0x80808080

00141558 <strncmp>:
  141558:	e3520000 	cmp	r2, #0
  14155c:	0a00001e 	beq	1415dc <strncmp+0x84>
  141560:	e92d4010 	push	{r4, lr}
  141564:	e5d04000 	ldrb	r4, [r0]
  141568:	e5d1c000 	ldrb	ip, [r1]
  14156c:	e3540000 	cmp	r4, #0
  141570:	0a00001b 	beq	1415e4 <strncmp+0x8c>
  141574:	e3520001 	cmp	r2, #1
  141578:	135c0000 	cmpne	ip, #0
  14157c:	13a03001 	movne	r3, #1
  141580:	03a03000 	moveq	r3, #0
  141584:	e154000c 	cmp	r4, ip
  141588:	13a03000 	movne	r3, #0
  14158c:	02033001 	andeq	r3, r3, #1
  141590:	e3530000 	cmp	r3, #0
  141594:	e242e001 	sub	lr, r2, #1
  141598:	0a000011 	beq	1415e4 <strncmp+0x8c>
  14159c:	e5f02001 	ldrb	r2, [r0, #1]!
  1415a0:	e24ee001 	sub	lr, lr, #1
  1415a4:	e3520000 	cmp	r2, #0
  1415a8:	e5f1c001 	ldrb	ip, [r1, #1]!
  1415ac:	0a000008 	beq	1415d4 <strncmp+0x7c>
  1415b0:	e042300c 	sub	r3, r2, ip
  1415b4:	e16f3f13 	clz	r3, r3
  1415b8:	e35c0000 	cmp	ip, #0
  1415bc:	e1a032a3 	lsr	r3, r3, #5
  1415c0:	03a03000 	moveq	r3, #0
  1415c4:	e35e0000 	cmp	lr, #0
  1415c8:	03a03000 	moveq	r3, #0
  1415cc:	e3530000 	cmp	r3, #0
  1415d0:	1afffff1 	bne	14159c <strncmp+0x44>
  1415d4:	e042000c 	sub	r0, r2, ip
  1415d8:	e8bd8010 	pop	{r4, pc}
  1415dc:	e1a00002 	mov	r0, r2
  1415e0:	e12fff1e 	bx	lr
  1415e4:	e1a02004 	mov	r2, r4
  1415e8:	eafffff9 	b	1415d4 <strncmp+0x7c>

001415ec <strncpy>:
  1415ec:	e92d4010 	push	{r4, lr}
  1415f0:	e1a04000 	mov	r4, r0
  1415f4:	eb000a63 	bl	143f88 <__stpncpy>
  1415f8:	e1a00004 	mov	r0, r4
  1415fc:	e8bd8010 	pop	{r4, pc}

00141600 <strnlen>:
  141600:	e92d4070 	push	{r4, r5, r6, lr}
  141604:	e1a04001 	mov	r4, r1
  141608:	e3a01000 	mov	r1, #0
  14160c:	e1a02004 	mov	r2, r4
  141610:	e1a05000 	mov	r5, r0
  141614:	eb0009d4 	bl	143d6c <memchr>
  141618:	e3500000 	cmp	r0, #0
  14161c:	10400005 	subne	r0, r0, r5
  141620:	01a00004 	moveq	r0, r4
  141624:	e8bd8070 	pop	{r4, r5, r6, pc}

00141628 <twoway_strstr>:
  141628:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  14162c:	e1a08001 	mov	r8, r1
  141630:	e24dde43 	sub	sp, sp, #1072	; 0x430
  141634:	e24dd004 	sub	sp, sp, #4
  141638:	e1a09000 	mov	r9, r0
  14163c:	e3a02020 	mov	r2, #32
  141640:	e3a01000 	mov	r1, #0
  141644:	e28d0010 	add	r0, sp, #16
  141648:	ebffff05 	bl	141264 <memset>
  14164c:	e5d83000 	ldrb	r3, [r8]
  141650:	e3530000 	cmp	r3, #0
  141654:	0a0000c8 	beq	14197c <twoway_strstr+0x354>
  141658:	e5d92000 	ldrb	r2, [r9]
  14165c:	e3520000 	cmp	r2, #0
  141660:	11a0c008 	movne	ip, r8
  141664:	11a0e009 	movne	lr, r9
  141668:	13a05000 	movne	r5, #0
  14166c:	13a06001 	movne	r6, #1
  141670:	1a000003 	bne	141684 <twoway_strstr+0x5c>
  141674:	ea000075 	b	141850 <twoway_strstr+0x228>
  141678:	e5fe2001 	ldrb	r2, [lr, #1]!
  14167c:	e3520000 	cmp	r2, #0
  141680:	0a000072 	beq	141850 <twoway_strstr+0x228>
  141684:	e28d1e43 	add	r1, sp, #1072	; 0x430
  141688:	e1a022a3 	lsr	r2, r3, #5
  14168c:	e0812102 	add	r2, r1, r2, lsl #2
  141690:	e0810103 	add	r0, r1, r3, lsl #2
  141694:	e203401f 	and	r4, r3, #31
  141698:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  14169c:	e5fc3001 	ldrb	r3, [ip, #1]!
  1416a0:	e2855001 	add	r5, r5, #1
  1416a4:	e1811416 	orr	r1, r1, r6, lsl r4
  1416a8:	e3530000 	cmp	r3, #0
  1416ac:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  1416b0:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  1416b4:	1affffef 	bne	141678 <twoway_strstr+0x50>
  1416b8:	e3a00001 	mov	r0, #1
  1416bc:	e3e0c000 	mvn	ip, #0
  1416c0:	e1a01000 	mov	r1, r0
  1416c4:	e0832001 	add	r2, r3, r1
  1416c8:	e1550002 	cmp	r5, r2
  1416cc:	e088e00c 	add	lr, r8, ip
  1416d0:	9a00000b 	bls	141704 <twoway_strstr+0xdc>
  1416d4:	e7de4001 	ldrb	r4, [lr, r1]
  1416d8:	e7d8e002 	ldrb	lr, [r8, r2]
  1416dc:	e154000e 	cmp	r4, lr
  1416e0:	0a00008f 	beq	141924 <twoway_strstr+0x2fc>
  1416e4:	9a000096 	bls	141944 <twoway_strstr+0x31c>
  1416e8:	e042000c 	sub	r0, r2, ip
  1416ec:	e1a03002 	mov	r3, r2
  1416f0:	e3a01001 	mov	r1, #1
  1416f4:	e0832001 	add	r2, r3, r1
  1416f8:	e1550002 	cmp	r5, r2
  1416fc:	e088e00c 	add	lr, r8, ip
  141700:	8afffff3 	bhi	1416d4 <twoway_strstr+0xac>
  141704:	e3a06001 	mov	r6, #1
  141708:	e3a01000 	mov	r1, #0
  14170c:	e1a02006 	mov	r2, r6
  141710:	e3e0a000 	mvn	sl, #0
  141714:	e0813002 	add	r3, r1, r2
  141718:	e1550003 	cmp	r5, r3
  14171c:	e088e002 	add	lr, r8, r2
  141720:	9a00000b 	bls	141754 <twoway_strstr+0x12c>
  141724:	e7de400a 	ldrb	r4, [lr, sl]
  141728:	e7d8e003 	ldrb	lr, [r8, r3]
  14172c:	e154000e 	cmp	r4, lr
  141730:	0a00007f 	beq	141934 <twoway_strstr+0x30c>
  141734:	2a000087 	bcs	141958 <twoway_strstr+0x330>
  141738:	e043600a 	sub	r6, r3, sl
  14173c:	e3a02001 	mov	r2, #1
  141740:	e1a01003 	mov	r1, r3
  141744:	e0813002 	add	r3, r1, r2
  141748:	e1550003 	cmp	r5, r3
  14174c:	e088e002 	add	lr, r8, r2
  141750:	8afffff3 	bhi	141724 <twoway_strstr+0xfc>
  141754:	e58d6008 	str	r6, [sp, #8]
  141758:	e28a2001 	add	r2, sl, #1
  14175c:	e28c3001 	add	r3, ip, #1
  141760:	e1520003 	cmp	r2, r3
  141764:	91a0b003 	movls	fp, r3
  141768:	81a0b002 	movhi	fp, r2
  14176c:	e59d3008 	ldr	r3, [sp, #8]
  141770:	91a03000 	movls	r3, r0
  141774:	e1a0200b 	mov	r2, fp
  141778:	e0881003 	add	r1, r8, r3
  14177c:	e1a00008 	mov	r0, r8
  141780:	91a0a00c 	movls	sl, ip
  141784:	e58d3008 	str	r3, [sp, #8]
  141788:	ebfffe3c 	bl	141080 <memcmp>
  14178c:	e3500000 	cmp	r0, #0
  141790:	0a000075 	beq	14196c <twoway_strstr+0x344>
  141794:	e2452001 	sub	r2, r5, #1
  141798:	e042200a 	sub	r2, r2, sl
  14179c:	e152000a 	cmp	r2, sl
  1417a0:	e3a03000 	mov	r3, #0
  1417a4:	31a0200a 	movcc	r2, sl
  1417a8:	e58d300c 	str	r3, [sp, #12]
  1417ac:	e2823001 	add	r3, r2, #1
  1417b0:	e58d3008 	str	r3, [sp, #8]
  1417b4:	e1a04009 	mov	r4, r9
  1417b8:	e3a06000 	mov	r6, #0
  1417bc:	e3a07001 	mov	r7, #1
  1417c0:	e385303f 	orr	r3, r5, #63	; 0x3f
  1417c4:	e58d3004 	str	r3, [sp, #4]
  1417c8:	e0493004 	sub	r3, r9, r4
  1417cc:	e1530005 	cmp	r3, r5
  1417d0:	3a000014 	bcc	141828 <twoway_strstr+0x200>
  1417d4:	e0841005 	add	r1, r4, r5
  1417d8:	e5513001 	ldrb	r3, [r1, #-1]
  1417dc:	e28d0e43 	add	r0, sp, #1072	; 0x430
  1417e0:	e1a022a3 	lsr	r2, r3, #5
  1417e4:	e0802102 	add	r2, r0, r2, lsl #2
  1417e8:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  1417ec:	e203001f 	and	r0, r3, #31
  1417f0:	e0122017 	ands	r2, r2, r7, lsl r0
  1417f4:	0a000040 	beq	1418fc <twoway_strstr+0x2d4>
  1417f8:	e28d2e43 	add	r2, sp, #1072	; 0x430
  1417fc:	e0823103 	add	r3, r2, r3, lsl #2
  141800:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  141804:	e0553003 	subs	r3, r5, r3
  141808:	0a000015 	beq	141864 <twoway_strstr+0x23c>
  14180c:	e1560003 	cmp	r6, r3
  141810:	20844006 	addcs	r4, r4, r6
  141814:	30844003 	addcc	r4, r4, r3
  141818:	e0493004 	sub	r3, r9, r4
  14181c:	e1530005 	cmp	r3, r5
  141820:	e3a06000 	mov	r6, #0
  141824:	2affffea 	bcs	1417d4 <twoway_strstr+0x1ac>
  141828:	e59d2004 	ldr	r2, [sp, #4]
  14182c:	e3a01000 	mov	r1, #0
  141830:	e1a00009 	mov	r0, r9
  141834:	eb00094c 	bl	143d6c <memchr>
  141838:	e3500000 	cmp	r0, #0
  14183c:	0a000035 	beq	141918 <twoway_strstr+0x2f0>
  141840:	e0403004 	sub	r3, r0, r4
  141844:	e1530005 	cmp	r3, r5
  141848:	21a09000 	movcs	r9, r0
  14184c:	2affffe0 	bcs	1417d4 <twoway_strstr+0x1ac>
  141850:	e3a04000 	mov	r4, #0
  141854:	e1a00004 	mov	r0, r4
  141858:	e28dde43 	add	sp, sp, #1072	; 0x430
  14185c:	e28dd004 	add	sp, sp, #4
  141860:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  141864:	e156000b 	cmp	r6, fp
  141868:	21a03006 	movcs	r3, r6
  14186c:	31a0300b 	movcc	r3, fp
  141870:	e7d82003 	ldrb	r2, [r8, r3]
  141874:	e0881003 	add	r1, r8, r3
  141878:	e3520000 	cmp	r2, #0
  14187c:	0a00000b 	beq	1418b0 <twoway_strstr+0x288>
  141880:	e7d4c003 	ldrb	ip, [r4, r3]
  141884:	e0840003 	add	r0, r4, r3
  141888:	e15c0002 	cmp	ip, r2
  14188c:	0a000003 	beq	1418a0 <twoway_strstr+0x278>
  141890:	ea00001c 	b	141908 <twoway_strstr+0x2e0>
  141894:	e5f0c001 	ldrb	ip, [r0, #1]!
  141898:	e15c0002 	cmp	ip, r2
  14189c:	1a000019 	bne	141908 <twoway_strstr+0x2e0>
  1418a0:	e5f12001 	ldrb	r2, [r1, #1]!
  1418a4:	e2833001 	add	r3, r3, #1
  1418a8:	e3520000 	cmp	r2, #0
  1418ac:	1afffff8 	bne	141894 <twoway_strstr+0x26c>
  1418b0:	e156000b 	cmp	r6, fp
  1418b4:	2affffe6 	bcs	141854 <twoway_strstr+0x22c>
  1418b8:	e7d8300a 	ldrb	r3, [r8, sl]
  1418bc:	e7d4100a 	ldrb	r1, [r4, sl]
  1418c0:	e088200a 	add	r2, r8, sl
  1418c4:	e1510003 	cmp	r1, r3
  1418c8:	e084300a 	add	r3, r4, sl
  1418cc:	1a000006 	bne	1418ec <twoway_strstr+0x2c4>
  1418d0:	e0431004 	sub	r1, r3, r4
  1418d4:	e1560001 	cmp	r6, r1
  1418d8:	2affffdd 	bcs	141854 <twoway_strstr+0x22c>
  1418dc:	e5720001 	ldrb	r0, [r2, #-1]!
  1418e0:	e5731001 	ldrb	r1, [r3, #-1]!
  1418e4:	e1500001 	cmp	r0, r1
  1418e8:	0afffff8 	beq	1418d0 <twoway_strstr+0x2a8>
  1418ec:	e59d3008 	ldr	r3, [sp, #8]
  1418f0:	e59d600c 	ldr	r6, [sp, #12]
  1418f4:	e0844003 	add	r4, r4, r3
  1418f8:	eaffffb2 	b	1417c8 <twoway_strstr+0x1a0>
  1418fc:	e1a04001 	mov	r4, r1
  141900:	e1a06002 	mov	r6, r2
  141904:	eaffffaf 	b	1417c8 <twoway_strstr+0x1a0>
  141908:	e043300a 	sub	r3, r3, sl
  14190c:	e0844003 	add	r4, r4, r3
  141910:	e3a06000 	mov	r6, #0
  141914:	eaffffab 	b	1417c8 <twoway_strstr+0x1a0>
  141918:	e59d3004 	ldr	r3, [sp, #4]
  14191c:	e0899003 	add	r9, r9, r3
  141920:	eaffffab 	b	1417d4 <twoway_strstr+0x1ac>
  141924:	e1510000 	cmp	r1, r0
  141928:	12811001 	addne	r1, r1, #1
  14192c:	1affff64 	bne	1416c4 <twoway_strstr+0x9c>
  141930:	eaffff6d 	b	1416ec <twoway_strstr+0xc4>
  141934:	e1520006 	cmp	r2, r6
  141938:	12822001 	addne	r2, r2, #1
  14193c:	1affff74 	bne	141714 <twoway_strstr+0xec>
  141940:	eaffff7d 	b	14173c <twoway_strstr+0x114>
  141944:	e3a00001 	mov	r0, #1
  141948:	e1a0c003 	mov	ip, r3
  14194c:	e1a01000 	mov	r1, r0
  141950:	e0833000 	add	r3, r3, r0
  141954:	eaffff5a 	b	1416c4 <twoway_strstr+0x9c>
  141958:	e3a06001 	mov	r6, #1
  14195c:	e1a0a001 	mov	sl, r1
  141960:	e1a02006 	mov	r2, r6
  141964:	e0811006 	add	r1, r1, r6
  141968:	eaffff69 	b	141714 <twoway_strstr+0xec>
  14196c:	e59d3008 	ldr	r3, [sp, #8]
  141970:	e0453003 	sub	r3, r5, r3
  141974:	e58d300c 	str	r3, [sp, #12]
  141978:	eaffff8d 	b	1417b4 <twoway_strstr+0x18c>
  14197c:	e3e0c000 	mvn	ip, #0
  141980:	e3a00001 	mov	r0, #1
  141984:	e1a05003 	mov	r5, r3
  141988:	e1a0a00c 	mov	sl, ip
  14198c:	e58d0008 	str	r0, [sp, #8]
  141990:	eaffff70 	b	141758 <twoway_strstr+0x130>

00141994 <strstr>:
  141994:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141998:	e1a04001 	mov	r4, r1
  14199c:	e5d11000 	ldrb	r1, [r1]
  1419a0:	e1a03000 	mov	r3, r0
  1419a4:	e3510000 	cmp	r1, #0
  1419a8:	1a000001 	bne	1419b4 <strstr+0x20>
  1419ac:	e1a00003 	mov	r0, r3
  1419b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1419b4:	eb0009c5 	bl	1440d0 <strchr>
  1419b8:	e2503000 	subs	r3, r0, #0
  1419bc:	0afffffa 	beq	1419ac <strstr+0x18>
  1419c0:	e5d41001 	ldrb	r1, [r4, #1]
  1419c4:	e3510000 	cmp	r1, #0
  1419c8:	0afffff7 	beq	1419ac <strstr+0x18>
  1419cc:	e5d3c001 	ldrb	ip, [r3, #1]
  1419d0:	e35c0000 	cmp	ip, #0
  1419d4:	0a000051 	beq	141b20 <strstr+0x18c>
  1419d8:	e5d4e002 	ldrb	lr, [r4, #2]
  1419dc:	e35e0000 	cmp	lr, #0
  1419e0:	0a000029 	beq	141a8c <strstr+0xf8>
  1419e4:	e5d35002 	ldrb	r5, [r3, #2]
  1419e8:	e3550000 	cmp	r5, #0
  1419ec:	0a00004d 	beq	141b28 <strstr+0x194>
  1419f0:	e5d47003 	ldrb	r7, [r4, #3]
  1419f4:	e3570000 	cmp	r7, #0
  1419f8:	0a000032 	beq	141ac8 <strstr+0x134>
  1419fc:	e5d36003 	ldrb	r6, [r3, #3]
  141a00:	e3560000 	cmp	r6, #0
  141a04:	0a000049 	beq	141b30 <strstr+0x19c>
  141a08:	e5d42004 	ldrb	r2, [r4, #4]
  141a0c:	e3520000 	cmp	r2, #0
  141a10:	0a000002 	beq	141a20 <strstr+0x8c>
  141a14:	e1a01004 	mov	r1, r4
  141a18:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141a1c:	eaffff01 	b	141628 <twoway_strstr>
  141a20:	e5d40000 	ldrb	r0, [r4]
  141a24:	e4d32003 	ldrb	r2, [r3], #3
  141a28:	e1800401 	orr	r0, r0, r1, lsl #8
  141a2c:	e182240c 	orr	r2, r2, ip, lsl #8
  141a30:	e180080e 	orr	r0, r0, lr, lsl #16
  141a34:	e1822805 	orr	r2, r2, r5, lsl #16
  141a38:	e180ec07 	orr	lr, r0, r7, lsl #24
  141a3c:	e1825c06 	orr	r5, r2, r6, lsl #24
  141a40:	e0252865 	eor	r2, r5, r5, ror #16
  141a44:	e02e086e 	eor	r0, lr, lr, ror #16
  141a48:	e1a02422 	lsr	r2, r2, #8
  141a4c:	e1a00420 	lsr	r0, r0, #8
  141a50:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  141a54:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  141a58:	e0222465 	eor	r2, r2, r5, ror #8
  141a5c:	e020046e 	eor	r0, r0, lr, ror #8
  141a60:	e1520000 	cmp	r2, r0
  141a64:	1a000002 	bne	141a74 <strstr+0xe0>
  141a68:	ea000028 	b	141b10 <strstr+0x17c>
  141a6c:	e1500002 	cmp	r0, r2
  141a70:	0a000026 	beq	141b10 <strstr+0x17c>
  141a74:	e5f31001 	ldrb	r1, [r3, #1]!
  141a78:	e3510000 	cmp	r1, #0
  141a7c:	e1812402 	orr	r2, r1, r2, lsl #8
  141a80:	1afffff9 	bne	141a6c <strstr+0xd8>
  141a84:	e1a03001 	mov	r3, r1
  141a88:	eaffffc7 	b	1419ac <strstr+0x18>
  141a8c:	e5d40000 	ldrb	r0, [r4]
  141a90:	e4d32001 	ldrb	r2, [r3], #1
  141a94:	e1811400 	orr	r1, r1, r0, lsl #8
  141a98:	e18c2402 	orr	r2, ip, r2, lsl #8
  141a9c:	ea000005 	b	141ab8 <strstr+0x124>
  141aa0:	e5f30001 	ldrb	r0, [r3, #1]!
  141aa4:	e1802402 	orr	r2, r0, r2, lsl #8
  141aa8:	e1a02802 	lsl	r2, r2, #16
  141aac:	e3500000 	cmp	r0, #0
  141ab0:	e1a02822 	lsr	r2, r2, #16
  141ab4:	0a000017 	beq	141b18 <strstr+0x184>
  141ab8:	e1510002 	cmp	r1, r2
  141abc:	1afffff7 	bne	141aa0 <strstr+0x10c>
  141ac0:	e2433001 	sub	r3, r3, #1
  141ac4:	eaffffb8 	b	1419ac <strstr+0x18>
  141ac8:	e5d46000 	ldrb	r6, [r4]
  141acc:	e4d34002 	ldrb	r4, [r3], #2
  141ad0:	e1a00801 	lsl	r0, r1, #16
  141ad4:	e1a0280c 	lsl	r2, ip, #16
  141ad8:	e1800c06 	orr	r0, r0, r6, lsl #24
  141adc:	e1822c04 	orr	r2, r2, r4, lsl #24
  141ae0:	e180040e 	orr	r0, r0, lr, lsl #8
  141ae4:	e1822405 	orr	r2, r2, r5, lsl #8
  141ae8:	ea000004 	b	141b00 <strstr+0x16c>
  141aec:	e5f31001 	ldrb	r1, [r3, #1]!
  141af0:	e1812002 	orr	r2, r1, r2
  141af4:	e3510000 	cmp	r1, #0
  141af8:	e1a02402 	lsl	r2, r2, #8
  141afc:	0affffe0 	beq	141a84 <strstr+0xf0>
  141b00:	e1500002 	cmp	r0, r2
  141b04:	1afffff8 	bne	141aec <strstr+0x158>
  141b08:	e2433002 	sub	r3, r3, #2
  141b0c:	eaffffa6 	b	1419ac <strstr+0x18>
  141b10:	e2433003 	sub	r3, r3, #3
  141b14:	eaffffa4 	b	1419ac <strstr+0x18>
  141b18:	e1a03000 	mov	r3, r0
  141b1c:	eaffffa2 	b	1419ac <strstr+0x18>
  141b20:	e1a0300c 	mov	r3, ip
  141b24:	eaffffa0 	b	1419ac <strstr+0x18>
  141b28:	e1a03005 	mov	r3, r5
  141b2c:	eaffff9e 	b	1419ac <strstr+0x18>
  141b30:	e1a03006 	mov	r3, r6
  141b34:	eaffff9c 	b	1419ac <strstr+0x18>

00141b38 <__lock>:
  141b38:	e59f3150 	ldr	r3, [pc, #336]	; 141c90 <__lock+0x158>
  141b3c:	e593300c 	ldr	r3, [r3, #12]
  141b40:	e3530000 	cmp	r3, #0
  141b44:	012fff1e 	bxeq	lr
  141b48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141b4c:	e1a04000 	mov	r4, r0
  141b50:	e59f613c 	ldr	r6, [pc, #316]	; 141c94 <__lock+0x15c>
  141b54:	e3a00000 	mov	r0, #0
  141b58:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  141b5c:	e1a02004 	mov	r2, r4
  141b60:	e5963000 	ldr	r3, [r6]
  141b64:	e12fff33 	blx	r3
  141b68:	e3500000 	cmp	r0, #0
  141b6c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141b70:	e5945000 	ldr	r5, [r4]
  141b74:	e3550000 	cmp	r5, #0
  141b78:	0afffff5 	beq	141b54 <__lock+0x1c>
  141b7c:	e3a0800a 	mov	r8, #10
  141b80:	e3550000 	cmp	r5, #0
  141b84:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141b88:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  141b8c:	e1a00005 	mov	r0, r5
  141b90:	e1a01007 	mov	r1, r7
  141b94:	e1a02004 	mov	r2, r4
  141b98:	e5963000 	ldr	r3, [r6]
  141b9c:	e12fff33 	blx	r3
  141ba0:	e3500000 	cmp	r0, #0
  141ba4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141ba8:	e5943000 	ldr	r3, [r4]
  141bac:	e1550003 	cmp	r5, r3
  141bb0:	0afffff5 	beq	141b8c <__lock+0x54>
  141bb4:	e2588001 	subs	r8, r8, #1
  141bb8:	e1a05003 	mov	r5, r3
  141bbc:	1affffef 	bne	141b80 <__lock+0x48>
  141bc0:	e5947000 	ldr	r7, [r4]
  141bc4:	e2875001 	add	r5, r7, #1
  141bc8:	ea000002 	b	141bd8 <__lock+0xa0>
  141bcc:	e5943000 	ldr	r3, [r4]
  141bd0:	e1570003 	cmp	r7, r3
  141bd4:	1afffff9 	bne	141bc0 <__lock+0x88>
  141bd8:	e1a00007 	mov	r0, r7
  141bdc:	e1a01005 	mov	r1, r5
  141be0:	e1a02004 	mov	r2, r4
  141be4:	e5963000 	ldr	r3, [r6]
  141be8:	e12fff33 	blx	r3
  141bec:	e3500000 	cmp	r0, #0
  141bf0:	1afffff5 	bne	141bcc <__lock+0x94>
  141bf4:	e3550000 	cmp	r5, #0
  141bf8:	ba00000d 	blt	141c34 <__lock+0xfc>
  141bfc:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141c00:	e1a00005 	mov	r0, r5
  141c04:	e1a01007 	mov	r1, r7
  141c08:	e1a02004 	mov	r2, r4
  141c0c:	e5963000 	ldr	r3, [r6]
  141c10:	e12fff33 	blx	r3
  141c14:	e3500000 	cmp	r0, #0
  141c18:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141c1c:	e5943000 	ldr	r3, [r4]
  141c20:	e1550003 	cmp	r5, r3
  141c24:	0afffff5 	beq	141c00 <__lock+0xc8>
  141c28:	e1a05003 	mov	r5, r3
  141c2c:	e3550000 	cmp	r5, #0
  141c30:	aafffff1 	bge	141bfc <__lock+0xc4>
  141c34:	e3a000f0 	mov	r0, #240	; 0xf0
  141c38:	ebffe9d9 	bl	13c3a4 <get_rtt_syscall>
  141c3c:	e2507000 	subs	r7, r0, #0
  141c40:	0a000006 	beq	141c60 <__lock+0x128>
  141c44:	e3a03000 	mov	r3, #0
  141c48:	e1a02005 	mov	r2, r5
  141c4c:	e3a01080 	mov	r1, #128	; 0x80
  141c50:	e1a00004 	mov	r0, r4
  141c54:	e12fff37 	blx	r7
  141c58:	e3700026 	cmn	r0, #38	; 0x26
  141c5c:	0a000001 	beq	141c68 <__lock+0x130>
  141c60:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  141c64:	eaffffe4 	b	141bfc <__lock+0xc4>
  141c68:	e3a000f0 	mov	r0, #240	; 0xf0
  141c6c:	ebffe9cc 	bl	13c3a4 <get_rtt_syscall>
  141c70:	e2507000 	subs	r7, r0, #0
  141c74:	0afffff9 	beq	141c60 <__lock+0x128>
  141c78:	e3a03000 	mov	r3, #0
  141c7c:	e1a02005 	mov	r2, r5
  141c80:	e1a01003 	mov	r1, r3
  141c84:	e1a00004 	mov	r0, r4
  141c88:	e12fff37 	blx	r7
  141c8c:	eafffff3 	b	141c60 <__lock+0x128>
  141c90:	0015d094 	.word	0x0015d094
  141c94:	0014d3d8 	.word	0x0014d3d8

00141c98 <__unlock>:
  141c98:	e5903000 	ldr	r3, [r0]
  141c9c:	e3530000 	cmp	r3, #0
  141ca0:	a12fff1e 	bxge	lr
  141ca4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141ca8:	e1a05000 	mov	r5, r0
  141cac:	e59f7084 	ldr	r7, [pc, #132]	; 141d38 <__unlock+0xa0>
  141cb0:	e5954000 	ldr	r4, [r5]
  141cb4:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141cb8:	ea000002 	b	141cc8 <__unlock+0x30>
  141cbc:	e5953000 	ldr	r3, [r5]
  141cc0:	e1540003 	cmp	r4, r3
  141cc4:	1afffff9 	bne	141cb0 <__unlock+0x18>
  141cc8:	e1a00004 	mov	r0, r4
  141ccc:	e1a01006 	mov	r1, r6
  141cd0:	e1a02005 	mov	r2, r5
  141cd4:	e5973000 	ldr	r3, [r7]
  141cd8:	e12fff33 	blx	r3
  141cdc:	e3500000 	cmp	r0, #0
  141ce0:	1afffff5 	bne	141cbc <__unlock+0x24>
  141ce4:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141ce8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141cec:	e3a000f0 	mov	r0, #240	; 0xf0
  141cf0:	ebffe9ab 	bl	13c3a4 <get_rtt_syscall>
  141cf4:	e2503000 	subs	r3, r0, #0
  141cf8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141cfc:	e3a02001 	mov	r2, #1
  141d00:	e3a01081 	mov	r1, #129	; 0x81
  141d04:	e1a00005 	mov	r0, r5
  141d08:	e12fff33 	blx	r3
  141d0c:	e3700026 	cmn	r0, #38	; 0x26
  141d10:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  141d14:	e3a000f0 	mov	r0, #240	; 0xf0
  141d18:	ebffe9a1 	bl	13c3a4 <get_rtt_syscall>
  141d1c:	e2503000 	subs	r3, r0, #0
  141d20:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141d24:	e3a02001 	mov	r2, #1
  141d28:	e1a00005 	mov	r0, r5
  141d2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141d30:	e1a01002 	mov	r1, r2
  141d34:	e12fff13 	bx	r3
  141d38:	0014d3d8 	.word	0x0014d3d8

00141d3c <__syscall_cp_c>:
  141d3c:	eaffe9c2 	b	13c44c <__syscall>

00141d40 <__syscall_cp>:
  141d40:	eaffe9c1 	b	13c44c <__syscall>

00141d44 <__wait>:
  141d44:	e3530000 	cmp	r3, #0
  141d48:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141d4c:	e3a03064 	mov	r3, #100	; 0x64
  141d50:	e1a04001 	mov	r4, r1
  141d54:	e1a07000 	mov	r7, r0
  141d58:	e1a08002 	mov	r8, r2
  141d5c:	13a09080 	movne	r9, #128	; 0x80
  141d60:	03a09000 	moveq	r9, #0
  141d64:	e59f1120 	ldr	r1, [pc, #288]	; 141e8c <__wait+0x148>
  141d68:	ea000006 	b	141d88 <__wait+0x44>
  141d6c:	e5972000 	ldr	r2, [r7]
  141d70:	e1520008 	cmp	r2, r8
  141d74:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141d78:	e591c000 	ldr	ip, [r1]
  141d7c:	e12fff3c 	blx	ip
  141d80:	e2533001 	subs	r3, r3, #1
  141d84:	0a00003d 	beq	141e80 <__wait+0x13c>
  141d88:	e3540000 	cmp	r4, #0
  141d8c:	0afffff6 	beq	141d6c <__wait+0x28>
  141d90:	e5942000 	ldr	r2, [r4]
  141d94:	e3520000 	cmp	r2, #0
  141d98:	0afffff3 	beq	141d6c <__wait+0x28>
  141d9c:	e59f60ec 	ldr	r6, [pc, #236]	; 141e90 <__wait+0x14c>
  141da0:	e5945000 	ldr	r5, [r4]
  141da4:	e285a001 	add	sl, r5, #1
  141da8:	ea000002 	b	141db8 <__wait+0x74>
  141dac:	e5943000 	ldr	r3, [r4]
  141db0:	e1550003 	cmp	r5, r3
  141db4:	1afffff9 	bne	141da0 <__wait+0x5c>
  141db8:	e1a00005 	mov	r0, r5
  141dbc:	e1a0100a 	mov	r1, sl
  141dc0:	e1a02004 	mov	r2, r4
  141dc4:	e5963000 	ldr	r3, [r6]
  141dc8:	e12fff33 	blx	r3
  141dcc:	e3500000 	cmp	r0, #0
  141dd0:	1afffff5 	bne	141dac <__wait+0x68>
  141dd4:	e5973000 	ldr	r3, [r7]
  141dd8:	e1530008 	cmp	r3, r8
  141ddc:	1a000006 	bne	141dfc <__wait+0xb8>
  141de0:	e3a000f0 	mov	r0, #240	; 0xf0
  141de4:	ebffe96e 	bl	13c3a4 <get_rtt_syscall>
  141de8:	e2505000 	subs	r5, r0, #0
  141dec:	1a000012 	bne	141e3c <__wait+0xf8>
  141df0:	e5973000 	ldr	r3, [r7]
  141df4:	e1530008 	cmp	r3, r8
  141df8:	0afffff8 	beq	141de0 <__wait+0x9c>
  141dfc:	e3540000 	cmp	r4, #0
  141e00:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141e04:	e59f6084 	ldr	r6, [pc, #132]	; 141e90 <__wait+0x14c>
  141e08:	e5945000 	ldr	r5, [r4]
  141e0c:	e2457001 	sub	r7, r5, #1
  141e10:	e1a00005 	mov	r0, r5
  141e14:	e1a01007 	mov	r1, r7
  141e18:	e1a02004 	mov	r2, r4
  141e1c:	e5963000 	ldr	r3, [r6]
  141e20:	e12fff33 	blx	r3
  141e24:	e3500000 	cmp	r0, #0
  141e28:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141e2c:	e5943000 	ldr	r3, [r4]
  141e30:	e1550003 	cmp	r5, r3
  141e34:	0afffff5 	beq	141e10 <__wait+0xcc>
  141e38:	eafffff2 	b	141e08 <__wait+0xc4>
  141e3c:	e3a03000 	mov	r3, #0
  141e40:	e1a02008 	mov	r2, r8
  141e44:	e1a01009 	mov	r1, r9
  141e48:	e1a00007 	mov	r0, r7
  141e4c:	e12fff35 	blx	r5
  141e50:	e3700026 	cmn	r0, #38	; 0x26
  141e54:	1affffe5 	bne	141df0 <__wait+0xac>
  141e58:	e3a000f0 	mov	r0, #240	; 0xf0
  141e5c:	ebffe950 	bl	13c3a4 <get_rtt_syscall>
  141e60:	e2505000 	subs	r5, r0, #0
  141e64:	0affffe1 	beq	141df0 <__wait+0xac>
  141e68:	e3a03000 	mov	r3, #0
  141e6c:	e1a02008 	mov	r2, r8
  141e70:	e1a01003 	mov	r1, r3
  141e74:	e1a00007 	mov	r0, r7
  141e78:	e12fff35 	blx	r5
  141e7c:	eaffffdb 	b	141df0 <__wait+0xac>
  141e80:	e3540000 	cmp	r4, #0
  141e84:	0affffd9 	beq	141df0 <__wait+0xac>
  141e88:	eaffffc3 	b	141d9c <__wait+0x58>
  141e8c:	0014d3d4 	.word	0x0014d3d4
  141e90:	0014d3d8 	.word	0x0014d3d8

00141e94 <__a_barrier_dummy>:
  141e94:	e12fff1e 	bx	lr

00141e98 <__a_barrier_oldkuser>:
  141e98:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141e9c:	e1a01000 	mov	r1, r0
  141ea0:	e1a0200d 	mov	r2, sp
  141ea4:	e59fc080 	ldr	ip, [pc, #128]	; 141f2c <__a_gettp_cp15+0x8>
  141ea8:	e1a0e00f 	mov	lr, pc
  141eac:	e1a0f00c 	mov	pc, ip
  141eb0:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  141eb4:	e12fff1e 	bx	lr

00141eb8 <__a_barrier_v6>:
  141eb8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141ebc:	e12fff1e 	bx	lr

00141ec0 <__a_barrier_v7>:
  141ec0:	f57ff05b 	dmb	ish
  141ec4:	e12fff1e 	bx	lr

00141ec8 <__a_cas_dummy>:
  141ec8:	e1a03000 	mov	r3, r0
  141ecc:	e5920000 	ldr	r0, [r2]
  141ed0:	e0530000 	subs	r0, r3, r0
  141ed4:	05821000 	streq	r1, [r2]
  141ed8:	e12fff1e 	bx	lr

00141edc <__a_cas_v6>:
  141edc:	e1a03000 	mov	r3, r0
  141ee0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141ee4:	e1920f9f 	ldrex	r0, [r2]
  141ee8:	e0530000 	subs	r0, r3, r0
  141eec:	01820f91 	strexeq	r0, r1, [r2]
  141ef0:	03300001 	teqeq	r0, #1
  141ef4:	0afffffa 	beq	141ee4 <__a_cas_v6+0x8>
  141ef8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141efc:	e12fff1e 	bx	lr

00141f00 <__a_cas_v7>:
  141f00:	e1a03000 	mov	r3, r0
  141f04:	f57ff05b 	dmb	ish
  141f08:	e1920f9f 	ldrex	r0, [r2]
  141f0c:	e0530000 	subs	r0, r3, r0
  141f10:	01820f91 	strexeq	r0, r1, [r2]
  141f14:	03300001 	teqeq	r0, #1
  141f18:	0afffffa 	beq	141f08 <__a_cas_v7+0x8>
  141f1c:	f57ff05b 	dmb	ish
  141f20:	e12fff1e 	bx	lr

00141f24 <__a_gettp_cp15>:
  141f24:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  141f28:	e12fff1e 	bx	lr
  141f2c:	ffff0fc0 	.word	0xffff0fc0

00141f30 <__wake.constprop.2>:
  141f30:	e92d4070 	push	{r4, r5, r6, lr}
  141f34:	e3510000 	cmp	r1, #0
  141f38:	e1a04000 	mov	r4, r0
  141f3c:	e3a000f0 	mov	r0, #240	; 0xf0
  141f40:	03a05001 	moveq	r5, #1
  141f44:	13a05081 	movne	r5, #129	; 0x81
  141f48:	ebffe915 	bl	13c3a4 <get_rtt_syscall>
  141f4c:	e2503000 	subs	r3, r0, #0
  141f50:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f54:	e1a01005 	mov	r1, r5
  141f58:	e3a02001 	mov	r2, #1
  141f5c:	e1a00004 	mov	r0, r4
  141f60:	e12fff33 	blx	r3
  141f64:	e3700026 	cmn	r0, #38	; 0x26
  141f68:	18bd8070 	popne	{r4, r5, r6, pc}
  141f6c:	e3a000f0 	mov	r0, #240	; 0xf0
  141f70:	ebffe90b 	bl	13c3a4 <get_rtt_syscall>
  141f74:	e2503000 	subs	r3, r0, #0
  141f78:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f7c:	e3a02001 	mov	r2, #1
  141f80:	e1a00004 	mov	r0, r4
  141f84:	e8bd4070 	pop	{r4, r5, r6, lr}
  141f88:	e1a01002 	mov	r1, r2
  141f8c:	e12fff13 	bx	r3

00141f90 <__acquire_ptc>:
  141f90:	e12fff1e 	bx	lr

00141f94 <__tl_lock>:
  141f94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141f98:	e59f3070 	ldr	r3, [pc, #112]	; 142010 <__tl_lock+0x7c>
  141f9c:	e59f4070 	ldr	r4, [pc, #112]	; 142014 <__tl_lock+0x80>
  141fa0:	e5930000 	ldr	r0, [r3]
  141fa4:	e5943000 	ldr	r3, [r4]
  141fa8:	e12fff30 	blx	r0
  141fac:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141fb0:	e1550003 	cmp	r5, r3
  141fb4:	0a000010 	beq	141ffc <__tl_lock+0x68>
  141fb8:	e59f6058 	ldr	r6, [pc, #88]	; 142018 <__tl_lock+0x84>
  141fbc:	e59f7058 	ldr	r7, [pc, #88]	; 14201c <__tl_lock+0x88>
  141fc0:	e3a00000 	mov	r0, #0
  141fc4:	e1a01005 	mov	r1, r5
  141fc8:	e1a02004 	mov	r2, r4
  141fcc:	e5963000 	ldr	r3, [r6]
  141fd0:	e12fff33 	blx	r3
  141fd4:	e3500000 	cmp	r0, #0
  141fd8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141fdc:	e5942000 	ldr	r2, [r4]
  141fe0:	e3520000 	cmp	r2, #0
  141fe4:	0afffff5 	beq	141fc0 <__tl_lock+0x2c>
  141fe8:	e3a03000 	mov	r3, #0
  141fec:	e1a01007 	mov	r1, r7
  141ff0:	e1a00004 	mov	r0, r4
  141ff4:	ebffff52 	bl	141d44 <__wait>
  141ff8:	eafffff0 	b	141fc0 <__tl_lock+0x2c>
  141ffc:	e59f201c 	ldr	r2, [pc, #28]	; 142020 <__tl_lock+0x8c>
  142000:	e5923000 	ldr	r3, [r2]
  142004:	e2833001 	add	r3, r3, #1
  142008:	e5823000 	str	r3, [r2]
  14200c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  142010:	0014d3dc 	.word	0x0014d3dc
  142014:	0015d0dc 	.word	0x0015d0dc
  142018:	0014d3d8 	.word	0x0014d3d8
  14201c:	0014f4a4 	.word	0x0014f4a4
  142020:	0014f4a0 	.word	0x0014f4a0

00142024 <__tl_unlock>:
  142024:	e59f2090 	ldr	r2, [pc, #144]	; 1420bc <__tl_unlock+0x98>
  142028:	e5923000 	ldr	r3, [r2]
  14202c:	e3530000 	cmp	r3, #0
  142030:	1a00001e 	bne	1420b0 <__tl_unlock+0x8c>
  142034:	e59f2084 	ldr	r2, [pc, #132]	; 1420c0 <__tl_unlock+0x9c>
  142038:	e92d4010 	push	{r4, lr}
  14203c:	e592c000 	ldr	ip, [r2]
  142040:	e12fff3c 	blx	ip
  142044:	e59f4078 	ldr	r4, [pc, #120]	; 1420c4 <__tl_unlock+0xa0>
  142048:	e592c000 	ldr	ip, [r2]
  14204c:	e5843000 	str	r3, [r4]
  142050:	e12fff3c 	blx	ip
  142054:	e59f306c 	ldr	r3, [pc, #108]	; 1420c8 <__tl_unlock+0xa4>
  142058:	e5933000 	ldr	r3, [r3]
  14205c:	e3530000 	cmp	r3, #0
  142060:	08bd8010 	popeq	{r4, pc}
  142064:	e3a000f0 	mov	r0, #240	; 0xf0
  142068:	ebffe8cd 	bl	13c3a4 <get_rtt_syscall>
  14206c:	e2503000 	subs	r3, r0, #0
  142070:	08bd8010 	popeq	{r4, pc}
  142074:	e3a02001 	mov	r2, #1
  142078:	e1a00004 	mov	r0, r4
  14207c:	e1a01002 	mov	r1, r2
  142080:	e12fff33 	blx	r3
  142084:	e3700026 	cmn	r0, #38	; 0x26
  142088:	18bd8010 	popne	{r4, pc}
  14208c:	e3a000f0 	mov	r0, #240	; 0xf0
  142090:	ebffe8c3 	bl	13c3a4 <get_rtt_syscall>
  142094:	e2503000 	subs	r3, r0, #0
  142098:	08bd8010 	popeq	{r4, pc}
  14209c:	e3a02001 	mov	r2, #1
  1420a0:	e1a00004 	mov	r0, r4
  1420a4:	e8bd4010 	pop	{r4, lr}
  1420a8:	e1a01002 	mov	r1, r2
  1420ac:	e12fff13 	bx	r3
  1420b0:	e2433001 	sub	r3, r3, #1
  1420b4:	e5823000 	str	r3, [r2]
  1420b8:	e12fff1e 	bx	lr
  1420bc:	0014f4a0 	.word	0x0014f4a0
  1420c0:	0014d3d4 	.word	0x0014d3d4
  1420c4:	0015d0dc 	.word	0x0015d0dc
  1420c8:	0014f4a4 	.word	0x0014f4a4

001420cc <__tl_sync>:
  1420cc:	e59f3084 	ldr	r3, [pc, #132]	; 142158 <__tl_sync+0x8c>
  1420d0:	e92d4070 	push	{r4, r5, r6, lr}
  1420d4:	e593c000 	ldr	ip, [r3]
  1420d8:	e12fff3c 	blx	ip
  1420dc:	e59f4078 	ldr	r4, [pc, #120]	; 14215c <__tl_sync+0x90>
  1420e0:	e5942000 	ldr	r2, [r4]
  1420e4:	e3520000 	cmp	r2, #0
  1420e8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1420ec:	e59f506c 	ldr	r5, [pc, #108]	; 142160 <__tl_sync+0x94>
  1420f0:	e3a03000 	mov	r3, #0
  1420f4:	e1a01005 	mov	r1, r5
  1420f8:	e1a00004 	mov	r0, r4
  1420fc:	ebffff10 	bl	141d44 <__wait>
  142100:	e5953000 	ldr	r3, [r5]
  142104:	e3530000 	cmp	r3, #0
  142108:	08bd8070 	popeq	{r4, r5, r6, pc}
  14210c:	e3a000f0 	mov	r0, #240	; 0xf0
  142110:	ebffe8a3 	bl	13c3a4 <get_rtt_syscall>
  142114:	e2503000 	subs	r3, r0, #0
  142118:	08bd8070 	popeq	{r4, r5, r6, pc}
  14211c:	e3a02001 	mov	r2, #1
  142120:	e1a00004 	mov	r0, r4
  142124:	e1a01002 	mov	r1, r2
  142128:	e12fff33 	blx	r3
  14212c:	e3700026 	cmn	r0, #38	; 0x26
  142130:	18bd8070 	popne	{r4, r5, r6, pc}
  142134:	e3a000f0 	mov	r0, #240	; 0xf0
  142138:	ebffe899 	bl	13c3a4 <get_rtt_syscall>
  14213c:	e2503000 	subs	r3, r0, #0
  142140:	08bd8070 	popeq	{r4, r5, r6, pc}
  142144:	e3a02001 	mov	r2, #1
  142148:	e1a00004 	mov	r0, r4
  14214c:	e8bd4070 	pop	{r4, r5, r6, lr}
  142150:	e1a01002 	mov	r1, r2
  142154:	e12fff13 	bx	r3
  142158:	0014d3d4 	.word	0x0014d3d4
  14215c:	0015d0dc 	.word	0x0015d0dc
  142160:	0014f4a4 	.word	0x0014f4a4

00142164 <__pthread_exit>:
  142164:	e3a02000 	mov	r2, #0
  142168:	e1a0c000 	mov	ip, r0
  14216c:	e3a01001 	mov	r1, #1
  142170:	e59f3224 	ldr	r3, [pc, #548]	; 14239c <__pthread_exit+0x238>
  142174:	e92d4880 	push	{r7, fp, lr}
  142178:	e5930000 	ldr	r0, [r3]
  14217c:	e12fff30 	blx	r0
  142180:	e2404078 	sub	r4, r0, #120	; 0x78
  142184:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  142188:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  14218c:	e1530002 	cmp	r3, r2
  142190:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  142194:	e584c044 	str	ip, [r4, #68]	; 0x44
  142198:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  14219c:	0a000006 	beq	1421bc <__pthread_exit+0x58>
  1421a0:	e9930005 	ldmib	r3, {r0, r2}
  1421a4:	e5933000 	ldr	r3, [r3]
  1421a8:	e5842048 	str	r2, [r4, #72]	; 0x48
  1421ac:	e12fff33 	blx	r3
  1421b0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  1421b4:	e3530000 	cmp	r3, #0
  1421b8:	1afffff8 	bne	1421a0 <__pthread_exit+0x3c>
  1421bc:	e2849064 	add	r9, r4, #100	; 0x64
  1421c0:	ebffff72 	bl	141f90 <__acquire_ptc>
  1421c4:	e1a00009 	mov	r0, r9
  1421c8:	ebfffe5a 	bl	141b38 <__lock>
  1421cc:	e28d0008 	add	r0, sp, #8
  1421d0:	eb0004a6 	bl	143470 <__block_app_sigs>
  1421d4:	ebffff6e 	bl	141f94 <__tl_lock>
  1421d8:	e594300c 	ldr	r3, [r4, #12]
  1421dc:	e1530004 	cmp	r3, r4
  1421e0:	0a000041 	beq	1422ec <__pthread_exit+0x188>
  1421e4:	e59f11b4 	ldr	r1, [pc, #436]	; 1423a0 <__pthread_exit+0x23c>
  1421e8:	e5940008 	ldr	r0, [r4, #8]
  1421ec:	e591200c 	ldr	r2, [r1, #12]
  1421f0:	e59f81ac 	ldr	r8, [pc, #428]	; 1423a4 <__pthread_exit+0x240>
  1421f4:	e2422001 	sub	r2, r2, #1
  1421f8:	e581200c 	str	r2, [r1, #12]
  1421fc:	e5830008 	str	r0, [r3, #8]
  142200:	e5942008 	ldr	r2, [r4, #8]
  142204:	e582300c 	str	r3, [r2, #12]
  142208:	e584400c 	str	r4, [r4, #12]
  14220c:	e5844008 	str	r4, [r4, #8]
  142210:	eb00028a 	bl	142c40 <__vm_lock>
  142214:	e2843050 	add	r3, r4, #80	; 0x50
  142218:	e58d3004 	str	r3, [sp, #4]
  14221c:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  142220:	e3560000 	cmp	r6, #0
  142224:	0a000020 	beq	1422ac <__pthread_exit+0x148>
  142228:	e59d3004 	ldr	r3, [sp, #4]
  14222c:	e1560003 	cmp	r6, r3
  142230:	0a00001d 	beq	1422ac <__pthread_exit+0x148>
  142234:	e1a07006 	mov	r7, r6
  142238:	e516b008 	ldr	fp, [r6, #-8]
  14223c:	e516a010 	ldr	sl, [r6, #-16]
  142240:	e5846058 	str	r6, [r4, #88]	; 0x58
  142244:	e417300c 	ldr	r3, [r7], #-12
  142248:	e5843050 	str	r3, [r4, #80]	; 0x50
  14224c:	e516500c 	ldr	r5, [r6, #-12]
  142250:	ea000002 	b	142260 <__pthread_exit+0xfc>
  142254:	e516300c 	ldr	r3, [r6, #-12]
  142258:	e1550003 	cmp	r5, r3
  14225c:	1afffffa 	bne	14224c <__pthread_exit+0xe8>
  142260:	e1a00005 	mov	r0, r5
  142264:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  142268:	e1a02007 	mov	r2, r7
  14226c:	e5983000 	ldr	r3, [r8]
  142270:	e12fff33 	blx	r3
  142274:	e3500000 	cmp	r0, #0
  142278:	1afffff5 	bne	142254 <__pthread_exit+0xf0>
  14227c:	e29bb000 	adds	fp, fp, #0
  142280:	13a0b001 	movne	fp, #1
  142284:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  142288:	e5840058 	str	r0, [r4, #88]	; 0x58
  14228c:	0affffe2 	beq	14221c <__pthread_exit+0xb8>
  142290:	e1e0100a 	mvn	r1, sl
  142294:	e1a00007 	mov	r0, r7
  142298:	e2011080 	and	r1, r1, #128	; 0x80
  14229c:	ebffff23 	bl	141f30 <__wake.constprop.2>
  1422a0:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  1422a4:	e3560000 	cmp	r6, #0
  1422a8:	1affffde 	bne	142228 <__pthread_exit+0xc4>
  1422ac:	eb000276 	bl	142c8c <__vm_unlock>
  1422b0:	e2845024 	add	r5, r4, #36	; 0x24
  1422b4:	ebffff35 	bl	141f90 <__acquire_ptc>
  1422b8:	ebffff34 	bl	141f90 <__acquire_ptc>
  1422bc:	ea000002 	b	1422cc <__pthread_exit+0x168>
  1422c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1422c4:	e3530001 	cmp	r3, #1
  1422c8:	1a00000e 	bne	142308 <__pthread_exit+0x1a4>
  1422cc:	e3a00001 	mov	r0, #1
  1422d0:	e3a01000 	mov	r1, #0
  1422d4:	e1a02005 	mov	r2, r5
  1422d8:	e5983000 	ldr	r3, [r8]
  1422dc:	e12fff33 	blx	r3
  1422e0:	e1500001 	cmp	r0, r1
  1422e4:	1afffff5 	bne	1422c0 <__pthread_exit+0x15c>
  1422e8:	ea000008 	b	142310 <__pthread_exit+0x1ac>
  1422ec:	ebffff4c 	bl	142024 <__tl_unlock>
  1422f0:	e28d0008 	add	r0, sp, #8
  1422f4:	eb00046b 	bl	1434a8 <__restore_sigs>
  1422f8:	e1a00009 	mov	r0, r9
  1422fc:	ebfffe65 	bl	141c98 <__unlock>
  142300:	e3a00000 	mov	r0, #0
  142304:	ebffdb38 	bl	138fec <exit>
  142308:	e3530002 	cmp	r3, #2
  14230c:	0a00000d 	beq	142348 <__pthread_exit+0x1e4>
  142310:	e1a00005 	mov	r0, r5
  142314:	e3a01001 	mov	r1, #1
  142318:	ebffff04 	bl	141f30 <__wake.constprop.2>
  14231c:	e3a03000 	mov	r3, #0
  142320:	e1a00009 	mov	r0, r9
  142324:	e584301c 	str	r3, [r4, #28]
  142328:	ebfffe5a 	bl	141c98 <__unlock>
  14232c:	e3a00001 	mov	r0, #1
  142330:	ebffe81b 	bl	13c3a4 <get_rtt_syscall>
  142334:	e2503000 	subs	r3, r0, #0
  142338:	0afffffb 	beq	14232c <__pthread_exit+0x1c8>
  14233c:	e3a00000 	mov	r0, #0
  142340:	e12fff33 	blx	r3
  142344:	eafffff8 	b	14232c <__pthread_exit+0x1c8>
  142348:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  14234c:	e1530001 	cmp	r3, r1
  142350:	0affffee 	beq	142310 <__pthread_exit+0x1ac>
  142354:	e28d0008 	add	r0, sp, #8
  142358:	eb000436 	bl	143438 <__block_all_sigs>
  14235c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  142360:	e3530000 	cmp	r3, #0
  142364:	1a000004 	bne	14237c <__pthread_exit+0x218>
  142368:	eb000225 	bl	142c04 <__vm_wait>
  14236c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  142370:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  142374:	eb0007ec 	bl	14432c <__unmapself>
  142378:	eaffffe4 	b	142310 <__pthread_exit+0x1ac>
  14237c:	e59f0024 	ldr	r0, [pc, #36]	; 1423a8 <__pthread_exit+0x244>
  142380:	ebffe807 	bl	13c3a4 <get_rtt_syscall>
  142384:	e2503000 	subs	r3, r0, #0
  142388:	0afffff6 	beq	142368 <__pthread_exit+0x204>
  14238c:	e3a0100c 	mov	r1, #12
  142390:	e3a00000 	mov	r0, #0
  142394:	e12fff33 	blx	r3
  142398:	eafffff2 	b	142368 <__pthread_exit+0x204>
  14239c:	0014d3dc 	.word	0x0014d3dc
  1423a0:	0015d094 	.word	0x0015d094
  1423a4:	0014d3d8 	.word	0x0014d3d8
  1423a8:	00000152 	.word	0x00000152

001423ac <start>:
  1423ac:	e5902008 	ldr	r2, [r0, #8]
  1423b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1423b4:	e3520000 	cmp	r2, #0
  1423b8:	e1a08000 	mov	r8, r0
  1423bc:	0a000022 	beq	14244c <start+0xa0>
  1423c0:	e59f30d8 	ldr	r3, [pc, #216]	; 1424a0 <start+0xf4>
  1423c4:	e5926014 	ldr	r6, [r2, #20]
  1423c8:	e5930000 	ldr	r0, [r3]
  1423cc:	e12fff30 	blx	r0
  1423d0:	e2409078 	sub	r9, r0, #120	; 0x78
  1423d4:	e3a0009c 	mov	r0, #156	; 0x9c
  1423d8:	e599501c 	ldr	r5, [r9, #28]
  1423dc:	e2824018 	add	r4, r2, #24
  1423e0:	ebffe7ef 	bl	13c3a4 <get_rtt_syscall>
  1423e4:	e250a000 	subs	sl, r0, #0
  1423e8:	0a000004 	beq	142400 <start+0x54>
  1423ec:	e1a02004 	mov	r2, r4
  1423f0:	e1a01006 	mov	r1, r6
  1423f4:	e1a00005 	mov	r0, r5
  1423f8:	e12fff3a 	blx	sl
  1423fc:	e1a0a000 	mov	sl, r0
  142400:	e598500c 	ldr	r5, [r8, #12]
  142404:	e59f7098 	ldr	r7, [pc, #152]	; 1424a4 <start+0xf8>
  142408:	e26a6000 	rsb	r6, sl, #0
  14240c:	e5954000 	ldr	r4, [r5]
  142410:	ea000002 	b	142420 <start+0x74>
  142414:	e5953000 	ldr	r3, [r5]
  142418:	e1540003 	cmp	r4, r3
  14241c:	1afffffa 	bne	14240c <start+0x60>
  142420:	e1a00004 	mov	r0, r4
  142424:	e1a01006 	mov	r1, r6
  142428:	e1a02005 	mov	r2, r5
  14242c:	e5973000 	ldr	r3, [r7]
  142430:	e12fff33 	blx	r3
  142434:	e3500000 	cmp	r0, #0
  142438:	1afffff5 	bne	142414 <start+0x68>
  14243c:	e3740002 	cmn	r4, #2
  142440:	0a000012 	beq	142490 <start+0xe4>
  142444:	e35a0000 	cmp	sl, #0
  142448:	1a00000c 	bne	142480 <start+0xd4>
  14244c:	e3a000af 	mov	r0, #175	; 0xaf
  142450:	ebffe7d3 	bl	13c3a4 <get_rtt_syscall>
  142454:	e2504000 	subs	r4, r0, #0
  142458:	e2881010 	add	r1, r8, #16
  14245c:	0a000003 	beq	142470 <start+0xc4>
  142460:	e3a03008 	mov	r3, #8
  142464:	e3a02000 	mov	r2, #0
  142468:	e3a00002 	mov	r0, #2
  14246c:	e12fff34 	blx	r4
  142470:	e5983000 	ldr	r3, [r8]
  142474:	e5980004 	ldr	r0, [r8, #4]
  142478:	e12fff33 	blx	r3
  14247c:	ebffff38 	bl	142164 <__pthread_exit>
  142480:	e3a03002 	mov	r3, #2
  142484:	e3a00000 	mov	r0, #0
  142488:	e5893024 	str	r3, [r9, #36]	; 0x24
  14248c:	ebffff34 	bl	142164 <__pthread_exit>
  142490:	e3a01001 	mov	r1, #1
  142494:	e598000c 	ldr	r0, [r8, #12]
  142498:	ebfffea4 	bl	141f30 <__wake.constprop.2>
  14249c:	eaffffe8 	b	142444 <start+0x98>
  1424a0:	0014d3dc 	.word	0x0014d3dc
  1424a4:	0014d3d8 	.word	0x0014d3d8

001424a8 <start_c11>:
  1424a8:	e5903000 	ldr	r3, [r0]
  1424ac:	e92d4010 	push	{r4, lr}
  1424b0:	e5900004 	ldr	r0, [r0, #4]
  1424b4:	e12fff33 	blx	r3
  1424b8:	ebffff29 	bl	142164 <__pthread_exit>

001424bc <__do_cleanup_push>:
  1424bc:	e1a03000 	mov	r3, r0
  1424c0:	e59f2018 	ldr	r2, [pc, #24]	; 1424e0 <__do_cleanup_push+0x24>
  1424c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1424c8:	e5920000 	ldr	r0, [r2]
  1424cc:	e12fff30 	blx	r0
  1424d0:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  1424d4:	e5832008 	str	r2, [r3, #8]
  1424d8:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1424dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1424e0:	0014d3dc 	.word	0x0014d3dc

001424e4 <__do_cleanup_pop>:
  1424e4:	e5903008 	ldr	r3, [r0, #8]
  1424e8:	e59f2010 	ldr	r2, [pc, #16]	; 142500 <__do_cleanup_pop+0x1c>
  1424ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1424f0:	e5920000 	ldr	r0, [r2]
  1424f4:	e12fff30 	blx	r0
  1424f8:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1424fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  142500:	0014d3dc 	.word	0x0014d3dc

00142504 <__pthread_create>:
  142504:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142508:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  14250c:	e58d001c 	str	r0, [sp, #28]
  142510:	e58d2014 	str	r2, [sp, #20]
  142514:	e1a09001 	mov	r9, r1
  142518:	e28d0034 	add	r0, sp, #52	; 0x34
  14251c:	e3a02024 	mov	r2, #36	; 0x24
  142520:	e3a01000 	mov	r1, #0
  142524:	e58d3018 	str	r3, [sp, #24]
  142528:	ebfffb4d 	bl	141264 <memset>
  14252c:	e3e03000 	mvn	r3, #0
  142530:	e59f656c 	ldr	r6, [pc, #1388]	; 142aa4 <__pthread_create+0x5a0>
  142534:	e58d3028 	str	r3, [sp, #40]	; 0x28
  142538:	e5963000 	ldr	r3, [r6]
  14253c:	e3530000 	cmp	r3, #0
  142540:	03a00026 	moveq	r0, #38	; 0x26
  142544:	0a0000a3 	beq	1427d8 <__pthread_create+0x2d4>
  142548:	e59f3558 	ldr	r3, [pc, #1368]	; 142aa8 <__pthread_create+0x5a4>
  14254c:	e5964004 	ldr	r4, [r6, #4]
  142550:	e5930000 	ldr	r0, [r3]
  142554:	e12fff30 	blx	r0
  142558:	e3540000 	cmp	r4, #0
  14255c:	e240a078 	sub	sl, r0, #120	; 0x78
  142560:	0a0000da 	beq	1428d0 <__pthread_create+0x3cc>
  142564:	e2493001 	sub	r3, r9, #1
  142568:	e3730003 	cmn	r3, #3
  14256c:	9a00009b 	bls	1427e0 <__pthread_create+0x2dc>
  142570:	ebfffe86 	bl	141f90 <__acquire_ptc>
  142574:	e59f2530 	ldr	r2, [pc, #1328]	; 142aac <__pthread_create+0x5a8>
  142578:	e59f3530 	ldr	r3, [pc, #1328]	; 142ab0 <__pthread_create+0x5ac>
  14257c:	e5927000 	ldr	r7, [r2]
  142580:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142584:	e5933000 	ldr	r3, [r3]
  142588:	e3520000 	cmp	r2, #0
  14258c:	e58d7034 	str	r7, [sp, #52]	; 0x34
  142590:	e58d3038 	str	r3, [sp, #56]	; 0x38
  142594:	e5960018 	ldr	r0, [r6, #24]
  142598:	0a00009e 	beq	142818 <__pthread_create+0x314>
  14259c:	e59f4510 	ldr	r4, [pc, #1296]	; 142ab4 <__pthread_create+0x5b0>
  1425a0:	e1a031a7 	lsr	r3, r7, #3
  1425a4:	e5941000 	ldr	r1, [r4]
  1425a8:	e3c2500f 	bic	r5, r2, #15
  1425ac:	e0811000 	add	r1, r1, r0
  1425b0:	e3510b02 	cmp	r1, #2048	; 0x800
  1425b4:	23a0c000 	movcs	ip, #0
  1425b8:	33a0c001 	movcc	ip, #1
  1425bc:	e1530001 	cmp	r3, r1
  1425c0:	93a0c000 	movls	ip, #0
  1425c4:	e0423007 	sub	r3, r2, r7
  1425c8:	e35c0000 	cmp	ip, #0
  1425cc:	e58d3020 	str	r3, [sp, #32]
  1425d0:	1a000111 	bne	142a1c <__pthread_create+0x518>
  1425d4:	e2817eff 	add	r7, r1, #4080	; 0xff0
  1425d8:	e287700f 	add	r7, r7, #15
  1425dc:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  1425e0:	e3c7700f 	bic	r7, r7, #15
  1425e4:	e3a00000 	mov	r0, #0
  1425e8:	e3a01000 	mov	r1, #0
  1425ec:	e3e03000 	mvn	r3, #0
  1425f0:	e58d0008 	str	r0, [sp, #8]
  1425f4:	e58d100c 	str	r1, [sp, #12]
  1425f8:	e58d3000 	str	r3, [sp]
  1425fc:	e3a02003 	mov	r2, #3
  142600:	e3a03022 	mov	r3, #34	; 0x22
  142604:	e1a01007 	mov	r1, r7
  142608:	ebffeda8 	bl	13dcb0 <__mmap>
  14260c:	e3700001 	cmn	r0, #1
  142610:	e1a0b000 	mov	fp, r0
  142614:	0a0000ed 	beq	1429d0 <__pthread_create+0x4cc>
  142618:	e5943000 	ldr	r3, [r4]
  14261c:	e5960018 	ldr	r0, [r6, #24]
  142620:	e0473003 	sub	r3, r7, r3
  142624:	e08b3003 	add	r3, fp, r3
  142628:	e3550000 	cmp	r5, #0
  14262c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142630:	e2600000 	rsb	r0, r0, #0
  142634:	0a000108 	beq	142a5c <__pthread_create+0x558>
  142638:	e3a08000 	mov	r8, #0
  14263c:	e0830000 	add	r0, r3, r0
  142640:	eb000202 	bl	142e50 <__copy_tls>
  142644:	e1a04000 	mov	r4, r0
  142648:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  14264c:	e5805038 	str	r5, [r0, #56]	; 0x38
  142650:	e3530000 	cmp	r3, #0
  142654:	e59f345c 	ldr	r3, [pc, #1116]	; 142ab8 <__pthread_create+0x5b4>
  142658:	e5808040 	str	r8, [r0, #64]	; 0x40
  14265c:	e580b030 	str	fp, [r0, #48]	; 0x30
  142660:	e5807034 	str	r7, [r0, #52]	; 0x34
  142664:	e5840000 	str	r0, [r4]
  142668:	e5803060 	str	r3, [r0, #96]	; 0x60
  14266c:	13a03002 	movne	r3, #2
  142670:	03a03001 	moveq	r3, #1
  142674:	e59d2020 	ldr	r2, [sp, #32]
  142678:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  14267c:	e0452002 	sub	r2, r5, r2
  142680:	e5803024 	str	r3, [r0, #36]	; 0x24
  142684:	e580203c 	str	r2, [r0, #60]	; 0x3c
  142688:	e59a2014 	ldr	r2, [sl, #20]
  14268c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142690:	e5802014 	str	r2, [r0, #20]
  142694:	e2802050 	add	r2, r0, #80	; 0x50
  142698:	e5802050 	str	r2, [r0, #80]	; 0x50
  14269c:	e59d2014 	ldr	r2, [sp, #20]
  1426a0:	e3c55003 	bic	r5, r5, #3
  1426a4:	e580104c 	str	r1, [r0, #76]	; 0x4c
  1426a8:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  1426ac:	e59d2018 	ldr	r2, [sp, #24]
  1426b0:	e3530000 	cmp	r3, #0
  1426b4:	128d3028 	addne	r3, sp, #40	; 0x28
  1426b8:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  1426bc:	128d2034 	addne	r2, sp, #52	; 0x34
  1426c0:	15052010 	strne	r2, [r5, #-16]
  1426c4:	05053010 	streq	r3, [r5, #-16]
  1426c8:	e505300c 	str	r3, [r5, #-12]
  1426cc:	e28d0058 	add	r0, sp, #88	; 0x58
  1426d0:	eb000366 	bl	143470 <__block_app_sigs>
  1426d4:	e28d1058 	add	r1, sp, #88	; 0x58
  1426d8:	e3a02008 	mov	r2, #8
  1426dc:	e2450008 	sub	r0, r5, #8
  1426e0:	ebfff9a7 	bl	140d84 <memcpy>
  1426e4:	e5153004 	ldr	r3, [r5, #-4]
  1426e8:	e2458018 	sub	r8, r5, #24
  1426ec:	e3c33001 	bic	r3, r3, #1
  1426f0:	e5053004 	str	r3, [r5, #-4]
  1426f4:	ebfffe26 	bl	141f94 <__tl_lock>
  1426f8:	e59f33bc 	ldr	r3, [pc, #956]	; 142abc <__pthread_create+0x5b8>
  1426fc:	e596c00c 	ldr	ip, [r6, #12]
  142700:	e3790001 	cmn	r9, #1
  142704:	e59f13b4 	ldr	r1, [pc, #948]	; 142ac0 <__pthread_create+0x5bc>
  142708:	e59f03b4 	ldr	r0, [pc, #948]	; 142ac4 <__pthread_create+0x5c0>
  14270c:	e2842078 	add	r2, r4, #120	; 0x78
  142710:	01a00003 	moveq	r0, r3
  142714:	e284301c 	add	r3, r4, #28
  142718:	e28cc001 	add	ip, ip, #1
  14271c:	e58d1008 	str	r1, [sp, #8]
  142720:	e58d2004 	str	r2, [sp, #4]
  142724:	e58d3000 	str	r3, [sp]
  142728:	e1a01008 	mov	r1, r8
  14272c:	e1a03008 	mov	r3, r8
  142730:	e59f2390 	ldr	r2, [pc, #912]	; 142ac8 <__pthread_create+0x5c4>
  142734:	e586c00c 	str	ip, [r6, #12]
  142738:	eb0006ff 	bl	14433c <__clone>
  14273c:	e3500000 	cmp	r0, #0
  142740:	ba0000a5 	blt	1429dc <__pthread_create+0x4d8>
  142744:	e59a300c 	ldr	r3, [sl, #12]
  142748:	e584a008 	str	sl, [r4, #8]
  14274c:	e584300c 	str	r3, [r4, #12]
  142750:	e5834008 	str	r4, [r3, #8]
  142754:	e5943008 	ldr	r3, [r4, #8]
  142758:	e583400c 	str	r4, [r3, #12]
  14275c:	ebfffe30 	bl	142024 <__tl_unlock>
  142760:	e28d0058 	add	r0, sp, #88	; 0x58
  142764:	eb00034f 	bl	1434a8 <__restore_sigs>
  142768:	ebfffe08 	bl	141f90 <__acquire_ptc>
  14276c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142770:	e3530000 	cmp	r3, #0
  142774:	0a000014 	beq	1427cc <__pthread_create+0x2c8>
  142778:	e59f534c 	ldr	r5, [pc, #844]	; 142acc <__pthread_create+0x5c8>
  14277c:	ea000002 	b	14278c <__pthread_create+0x288>
  142780:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  142784:	e3730001 	cmn	r3, #1
  142788:	1a00000c 	bne	1427c0 <__pthread_create+0x2bc>
  14278c:	e3e00000 	mvn	r0, #0
  142790:	e3e01001 	mvn	r1, #1
  142794:	e28d2028 	add	r2, sp, #40	; 0x28
  142798:	e5953000 	ldr	r3, [r5]
  14279c:	e12fff33 	blx	r3
  1427a0:	e3500000 	cmp	r0, #0
  1427a4:	1afffff5 	bne	142780 <__pthread_create+0x27c>
  1427a8:	e1a03000 	mov	r3, r0
  1427ac:	e1a02001 	mov	r2, r1
  1427b0:	e28d0028 	add	r0, sp, #40	; 0x28
  1427b4:	e1a01003 	mov	r1, r3
  1427b8:	e3a03001 	mov	r3, #1
  1427bc:	ebfffd60 	bl	141d44 <__wait>
  1427c0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  1427c4:	e3500000 	cmp	r0, #0
  1427c8:	1a000002 	bne	1427d8 <__pthread_create+0x2d4>
  1427cc:	e3a00000 	mov	r0, #0
  1427d0:	e59d301c 	ldr	r3, [sp, #28]
  1427d4:	e5834000 	str	r4, [r3]
  1427d8:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1427dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1427e0:	e1a0e009 	mov	lr, r9
  1427e4:	e28dc034 	add	ip, sp, #52	; 0x34
  1427e8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1427ec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1427f0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1427f4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1427f8:	e59e3000 	ldr	r3, [lr]
  1427fc:	e58c3000 	str	r3, [ip]
  142800:	ebfffde2 	bl	141f90 <__acquire_ptc>
  142804:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142808:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  14280c:	e3520000 	cmp	r2, #0
  142810:	e5960018 	ldr	r0, [r6, #24]
  142814:	1affff60 	bne	14259c <__pthread_create+0x98>
  142818:	e59f5294 	ldr	r5, [pc, #660]	; 142ab4 <__pthread_create+0x5b0>
  14281c:	e3a01000 	mov	r1, #0
  142820:	e5953000 	ldr	r3, [r5]
  142824:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142828:	e0833000 	add	r3, r3, r0
  14282c:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142830:	e283300f 	add	r3, r3, #15
  142834:	e0837007 	add	r7, r3, r7
  142838:	e3a00000 	mov	r0, #0
  14283c:	e3e03000 	mvn	r3, #0
  142840:	e59f4288 	ldr	r4, [pc, #648]	; 142ad0 <__pthread_create+0x5cc>
  142844:	e2888eff 	add	r8, r8, #4080	; 0xff0
  142848:	e288800f 	add	r8, r8, #15
  14284c:	e0088004 	and	r8, r8, r4
  142850:	e3580000 	cmp	r8, #0
  142854:	e0044007 	and	r4, r4, r7
  142858:	e58d3000 	str	r3, [sp]
  14285c:	e58d0008 	str	r0, [sp, #8]
  142860:	e58d100c 	str	r1, [sp, #12]
  142864:	e3a03022 	mov	r3, #34	; 0x22
  142868:	e0847008 	add	r7, r4, r8
  14286c:	0a00007d 	beq	142a68 <__pthread_create+0x564>
  142870:	e1a00002 	mov	r0, r2
  142874:	e1a01007 	mov	r1, r7
  142878:	ebffed0c 	bl	13dcb0 <__mmap>
  14287c:	e3700001 	cmn	r0, #1
  142880:	e1a0b000 	mov	fp, r0
  142884:	0a000051 	beq	1429d0 <__pthread_create+0x4cc>
  142888:	e0803008 	add	r3, r0, r8
  14288c:	e1a01004 	mov	r1, r4
  142890:	e1a00003 	mov	r0, r3
  142894:	e3a02003 	mov	r2, #3
  142898:	e58d3020 	str	r3, [sp, #32]
  14289c:	eb0002cb 	bl	1433d0 <__mprotect>
  1428a0:	e3500000 	cmp	r0, #0
  1428a4:	1a000042 	bne	1429b4 <__pthread_create+0x4b0>
  1428a8:	e5953000 	ldr	r3, [r5]
  1428ac:	e5960018 	ldr	r0, [r6, #24]
  1428b0:	e0473003 	sub	r3, r7, r3
  1428b4:	e08b3003 	add	r3, fp, r3
  1428b8:	e58d3024 	str	r3, [sp, #36]	; 0x24
  1428bc:	e2600000 	rsb	r0, r0, #0
  1428c0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  1428c4:	e0835000 	add	r5, r3, r0
  1428c8:	e1a00005 	mov	r0, r5
  1428cc:	eaffff5b 	b	142640 <__pthread_create+0x13c>
  1428d0:	ebffeee1 	bl	13e45c <__ofl_lock>
  1428d4:	e5903000 	ldr	r3, [r0]
  1428d8:	e3530000 	cmp	r3, #0
  1428dc:	0a000005 	beq	1428f8 <__pthread_create+0x3f4>
  1428e0:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1428e4:	e3520000 	cmp	r2, #0
  1428e8:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  1428ec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1428f0:	e3530000 	cmp	r3, #0
  1428f4:	1afffff9 	bne	1428e0 <__pthread_create+0x3dc>
  1428f8:	ebffeede 	bl	13e478 <__ofl_unlock>
  1428fc:	e59f31d0 	ldr	r3, [pc, #464]	; 142ad4 <__pthread_create+0x5d0>
  142900:	e5933000 	ldr	r3, [r3]
  142904:	e3530000 	cmp	r3, #0
  142908:	0a000003 	beq	14291c <__pthread_create+0x418>
  14290c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142910:	e3520000 	cmp	r2, #0
  142914:	b3a02000 	movlt	r2, #0
  142918:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14291c:	e59f31b4 	ldr	r3, [pc, #436]	; 142ad8 <__pthread_create+0x5d4>
  142920:	e5933000 	ldr	r3, [r3]
  142924:	e3530000 	cmp	r3, #0
  142928:	0a000003 	beq	14293c <__pthread_create+0x438>
  14292c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142930:	e3520000 	cmp	r2, #0
  142934:	b3a02000 	movlt	r2, #0
  142938:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14293c:	e59f3198 	ldr	r3, [pc, #408]	; 142adc <__pthread_create+0x5d8>
  142940:	e5933000 	ldr	r3, [r3]
  142944:	e3530000 	cmp	r3, #0
  142948:	0a000003 	beq	14295c <__pthread_create+0x458>
  14294c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142950:	e3520000 	cmp	r2, #0
  142954:	b3a02000 	movlt	r2, #0
  142958:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14295c:	e3a03003 	mov	r3, #3
  142960:	e3a04000 	mov	r4, #0
  142964:	e3a000af 	mov	r0, #175	; 0xaf
  142968:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  14296c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  142970:	ebffe68b 	bl	13c3a4 <get_rtt_syscall>
  142974:	e2505000 	subs	r5, r0, #0
  142978:	0a000004 	beq	142990 <__pthread_create+0x48c>
  14297c:	e1a02004 	mov	r2, r4
  142980:	e28d102c 	add	r1, sp, #44	; 0x2c
  142984:	e3a03008 	mov	r3, #8
  142988:	e3a00001 	mov	r0, #1
  14298c:	e12fff35 	blx	r5
  142990:	e59f3148 	ldr	r3, [pc, #328]	; 142ae0 <__pthread_create+0x5dc>
  142994:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  142998:	ebfffd7c 	bl	141f90 <__acquire_ptc>
  14299c:	e3a03001 	mov	r3, #1
  1429a0:	e5863004 	str	r3, [r6, #4]
  1429a4:	e2493001 	sub	r3, r9, #1
  1429a8:	e3730003 	cmn	r3, #3
  1429ac:	8afffeef 	bhi	142570 <__pthread_create+0x6c>
  1429b0:	eaffff8a 	b	1427e0 <__pthread_create+0x2dc>
  1429b4:	ebffd944 	bl	138ecc <__errno_location>
  1429b8:	e5903000 	ldr	r3, [r0]
  1429bc:	e3530026 	cmp	r3, #38	; 0x26
  1429c0:	0affffb8 	beq	1428a8 <__pthread_create+0x3a4>
  1429c4:	e1a01007 	mov	r1, r7
  1429c8:	e1a0000b 	mov	r0, fp
  1429cc:	ebffed1d 	bl	13de48 <__munmap>
  1429d0:	ebfffd6e 	bl	141f90 <__acquire_ptc>
  1429d4:	e3a0000b 	mov	r0, #11
  1429d8:	eaffff7e 	b	1427d8 <__pthread_create+0x2d4>
  1429dc:	ebfffd90 	bl	142024 <__tl_unlock>
  1429e0:	e28d0058 	add	r0, sp, #88	; 0x58
  1429e4:	eb0002af 	bl	1434a8 <__restore_sigs>
  1429e8:	ebfffd68 	bl	141f90 <__acquire_ptc>
  1429ec:	e596300c 	ldr	r3, [r6, #12]
  1429f0:	e35b0000 	cmp	fp, #0
  1429f4:	e2433001 	sub	r3, r3, #1
  1429f8:	e586300c 	str	r3, [r6, #12]
  1429fc:	03a0000b 	moveq	r0, #11
  142a00:	0affff74 	beq	1427d8 <__pthread_create+0x2d4>
  142a04:	e1a01007 	mov	r1, r7
  142a08:	e1a0000b 	mov	r0, fp
  142a0c:	ebffed0d 	bl	13de48 <__munmap>
  142a10:	e3a0000b 	mov	r0, #11
  142a14:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142a18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142a1c:	e5943000 	ldr	r3, [r4]
  142a20:	e1a02001 	mov	r2, r1
  142a24:	e0458003 	sub	r8, r5, r3
  142a28:	e0485000 	sub	r5, r8, r0
  142a2c:	e1a00005 	mov	r0, r5
  142a30:	e3a01000 	mov	r1, #0
  142a34:	e58d8024 	str	r8, [sp, #36]	; 0x24
  142a38:	ebfffa09 	bl	141264 <memset>
  142a3c:	e3580000 	cmp	r8, #0
  142a40:	e1a03008 	mov	r3, r8
  142a44:	0afffee6 	beq	1425e4 <__pthread_create+0xe0>
  142a48:	e3a08000 	mov	r8, #0
  142a4c:	e5960018 	ldr	r0, [r6, #24]
  142a50:	e1a0b008 	mov	fp, r8
  142a54:	e0430000 	sub	r0, r3, r0
  142a58:	eafffef8 	b	142640 <__pthread_create+0x13c>
  142a5c:	e1a08005 	mov	r8, r5
  142a60:	e58db020 	str	fp, [sp, #32]
  142a64:	eaffff95 	b	1428c0 <__pthread_create+0x3bc>
  142a68:	e3a02003 	mov	r2, #3
  142a6c:	e1a01007 	mov	r1, r7
  142a70:	e1a00008 	mov	r0, r8
  142a74:	ebffec8d 	bl	13dcb0 <__mmap>
  142a78:	e3700001 	cmn	r0, #1
  142a7c:	e1a0b000 	mov	fp, r0
  142a80:	0affffd2 	beq	1429d0 <__pthread_create+0x4cc>
  142a84:	e5953000 	ldr	r3, [r5]
  142a88:	e5960018 	ldr	r0, [r6, #24]
  142a8c:	e0473003 	sub	r3, r7, r3
  142a90:	e08b3003 	add	r3, fp, r3
  142a94:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142a98:	e2600000 	rsb	r0, r0, #0
  142a9c:	e58db020 	str	fp, [sp, #32]
  142aa0:	eaffff86 	b	1428c0 <__pthread_create+0x3bc>
  142aa4:	0015d094 	.word	0x0015d094
  142aa8:	0014d3dc 	.word	0x0014d3dc
  142aac:	0014d3e4 	.word	0x0014d3e4
  142ab0:	0014d3e0 	.word	0x0014d3e0
  142ab4:	0014f494 	.word	0x0014f494
  142ab8:	0015d0bc 	.word	0x0015d0bc
  142abc:	001424a8 	.word	0x001424a8
  142ac0:	0015d0dc 	.word	0x0015d0dc
  142ac4:	001423ac 	.word	0x001423ac
  142ac8:	007d0f00 	.word	0x007d0f00
  142acc:	0014d3d8 	.word	0x0014d3d8
  142ad0:	fffff000 	.word	0xfffff000
  142ad4:	0014f498 	.word	0x0014f498
  142ad8:	0014d3d0 	.word	0x0014d3d0
  142adc:	0014d338 	.word	0x0014d338
  142ae0:	0014f49c 	.word	0x0014f49c

00142ae4 <__get_thread_map>:
  142ae4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142ae8:	e2504000 	subs	r4, r0, #0
  142aec:	e24dd014 	sub	sp, sp, #20
  142af0:	0a000002 	beq	142b00 <__get_thread_map+0x1c>
  142af4:	e2840078 	add	r0, r4, #120	; 0x78
  142af8:	e28dd014 	add	sp, sp, #20
  142afc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142b00:	e3a06000 	mov	r6, #0
  142b04:	e3a07000 	mov	r7, #0
  142b08:	e3e03000 	mvn	r3, #0
  142b0c:	e58d6008 	str	r6, [sp, #8]
  142b10:	e58d700c 	str	r7, [sp, #12]
  142b14:	e59f5074 	ldr	r5, [pc, #116]	; 142b90 <__get_thread_map+0xac>
  142b18:	e3a02003 	mov	r2, #3
  142b1c:	e5951018 	ldr	r1, [r5, #24]
  142b20:	e58d3000 	str	r3, [sp]
  142b24:	e3510000 	cmp	r1, #0
  142b28:	03a01078 	moveq	r1, #120	; 0x78
  142b2c:	e3a03022 	mov	r3, #34	; 0x22
  142b30:	ebffec5e 	bl	13dcb0 <__mmap>
  142b34:	e2504000 	subs	r4, r0, #0
  142b38:	0a000012 	beq	142b88 <__get_thread_map+0xa4>
  142b3c:	e59f3050 	ldr	r3, [pc, #80]	; 142b94 <__get_thread_map+0xb0>
  142b40:	e2855028 	add	r5, r5, #40	; 0x28
  142b44:	e5932000 	ldr	r2, [r3]
  142b48:	e2843050 	add	r3, r4, #80	; 0x50
  142b4c:	e5845060 	str	r5, [r4, #96]	; 0x60
  142b50:	e5844000 	str	r4, [r4]
  142b54:	e5844008 	str	r4, [r4, #8]
  142b58:	e584400c 	str	r4, [r4, #12]
  142b5c:	e5842014 	str	r2, [r4, #20]
  142b60:	e5843050 	str	r3, [r4, #80]	; 0x50
  142b64:	e3a000e0 	mov	r0, #224	; 0xe0
  142b68:	ebffe60d 	bl	13c3a4 <get_rtt_syscall>
  142b6c:	e3500000 	cmp	r0, #0
  142b70:	0a000000 	beq	142b78 <__get_thread_map+0x94>
  142b74:	e12fff30 	blx	r0
  142b78:	e3a03000 	mov	r3, #0
  142b7c:	e584001c 	str	r0, [r4, #28]
  142b80:	e5843020 	str	r3, [r4, #32]
  142b84:	eaffffda 	b	142af4 <__get_thread_map+0x10>
  142b88:	e1a00004 	mov	r0, r4
  142b8c:	eaffffd9 	b	142af8 <__get_thread_map+0x14>
  142b90:	0015d094 	.word	0x0015d094
  142b94:	0015d0e0 	.word	0x0015d0e0

00142b98 <__put_thread_map>:
  142b98:	e3500000 	cmp	r0, #0
  142b9c:	012fff1e 	bxeq	lr
  142ba0:	e59f3010 	ldr	r3, [pc, #16]	; 142bb8 <__put_thread_map+0x20>
  142ba4:	e2400078 	sub	r0, r0, #120	; 0x78
  142ba8:	e5931018 	ldr	r1, [r3, #24]
  142bac:	e3510000 	cmp	r1, #0
  142bb0:	03a01078 	moveq	r1, #120	; 0x78
  142bb4:	eaffeca3 	b	13de48 <__munmap>
  142bb8:	0015d094 	.word	0x0015d094

00142bbc <__pthread_init_run>:
  142bbc:	e92d4070 	push	{r4, r5, r6, lr}
  142bc0:	e1a05000 	mov	r5, r0
  142bc4:	e3a00000 	mov	r0, #0
  142bc8:	e1a06001 	mov	r6, r1
  142bcc:	ebffffc4 	bl	142ae4 <__get_thread_map>
  142bd0:	e2504000 	subs	r4, r0, #0
  142bd4:	08bd8070 	popeq	{r4, r5, r6, pc}
  142bd8:	eb000582 	bl	1441e8 <__set_thread_area>
  142bdc:	e1a00006 	mov	r0, r6
  142be0:	e12fff35 	blx	r5
  142be4:	e59f3014 	ldr	r3, [pc, #20]	; 142c00 <__pthread_init_run+0x44>
  142be8:	e2440078 	sub	r0, r4, #120	; 0x78
  142bec:	e5931018 	ldr	r1, [r3, #24]
  142bf0:	e8bd4070 	pop	{r4, r5, r6, lr}
  142bf4:	e3510000 	cmp	r1, #0
  142bf8:	03a01078 	moveq	r1, #120	; 0x78
  142bfc:	eaffec91 	b	13de48 <__munmap>
  142c00:	0015d094 	.word	0x0015d094

00142c04 <__vm_wait>:
  142c04:	e92d4070 	push	{r4, r5, r6, lr}
  142c08:	e59f402c 	ldr	r4, [pc, #44]	; 142c3c <__vm_wait+0x38>
  142c0c:	e5942000 	ldr	r2, [r4]
  142c10:	e3520000 	cmp	r2, #0
  142c14:	08bd8070 	popeq	{r4, r5, r6, pc}
  142c18:	e2845004 	add	r5, r4, #4
  142c1c:	e3a03001 	mov	r3, #1
  142c20:	e1a01005 	mov	r1, r5
  142c24:	e59f0010 	ldr	r0, [pc, #16]	; 142c3c <__vm_wait+0x38>
  142c28:	ebfffc45 	bl	141d44 <__wait>
  142c2c:	e5942000 	ldr	r2, [r4]
  142c30:	e3520000 	cmp	r2, #0
  142c34:	1afffff8 	bne	142c1c <__vm_wait+0x18>
  142c38:	e8bd8070 	pop	{r4, r5, r6, pc}
  142c3c:	0014f4a8 	.word	0x0014f4a8

00142c40 <__vm_lock>:
  142c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142c44:	e59f6038 	ldr	r6, [pc, #56]	; 142c84 <__vm_lock+0x44>
  142c48:	e59f8038 	ldr	r8, [pc, #56]	; 142c88 <__vm_lock+0x48>
  142c4c:	e1a07006 	mov	r7, r6
  142c50:	e5964000 	ldr	r4, [r6]
  142c54:	e2845001 	add	r5, r4, #1
  142c58:	e1a00004 	mov	r0, r4
  142c5c:	e1a01005 	mov	r1, r5
  142c60:	e1a02007 	mov	r2, r7
  142c64:	e5983000 	ldr	r3, [r8]
  142c68:	e12fff33 	blx	r3
  142c6c:	e3500000 	cmp	r0, #0
  142c70:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142c74:	e5963000 	ldr	r3, [r6]
  142c78:	e1540003 	cmp	r4, r3
  142c7c:	0afffff5 	beq	142c58 <__vm_lock+0x18>
  142c80:	eafffff2 	b	142c50 <__vm_lock+0x10>
  142c84:	0014f4a8 	.word	0x0014f4a8
  142c88:	0014d3d8 	.word	0x0014d3d8

00142c8c <__vm_unlock>:
  142c8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142c90:	e59f6098 	ldr	r6, [pc, #152]	; 142d30 <__vm_unlock+0xa4>
  142c94:	e59f8098 	ldr	r8, [pc, #152]	; 142d34 <__vm_unlock+0xa8>
  142c98:	e1a07006 	mov	r7, r6
  142c9c:	e5964000 	ldr	r4, [r6]
  142ca0:	e2445001 	sub	r5, r4, #1
  142ca4:	ea000002 	b	142cb4 <__vm_unlock+0x28>
  142ca8:	e5963000 	ldr	r3, [r6]
  142cac:	e1540003 	cmp	r4, r3
  142cb0:	1afffff9 	bne	142c9c <__vm_unlock+0x10>
  142cb4:	e1a00004 	mov	r0, r4
  142cb8:	e1a01005 	mov	r1, r5
  142cbc:	e1a02007 	mov	r2, r7
  142cc0:	e5983000 	ldr	r3, [r8]
  142cc4:	e12fff33 	blx	r3
  142cc8:	e3500000 	cmp	r0, #0
  142ccc:	1afffff5 	bne	142ca8 <__vm_unlock+0x1c>
  142cd0:	e3540001 	cmp	r4, #1
  142cd4:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142cd8:	e5963004 	ldr	r3, [r6, #4]
  142cdc:	e3530000 	cmp	r3, #0
  142ce0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142ce4:	e3a000f0 	mov	r0, #240	; 0xf0
  142ce8:	ebffe5ad 	bl	13c3a4 <get_rtt_syscall>
  142cec:	e2503000 	subs	r3, r0, #0
  142cf0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142cf4:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142cf8:	e3a01081 	mov	r1, #129	; 0x81
  142cfc:	e59f002c 	ldr	r0, [pc, #44]	; 142d30 <__vm_unlock+0xa4>
  142d00:	e12fff33 	blx	r3
  142d04:	e3700026 	cmn	r0, #38	; 0x26
  142d08:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142d0c:	e3a000f0 	mov	r0, #240	; 0xf0
  142d10:	ebffe5a3 	bl	13c3a4 <get_rtt_syscall>
  142d14:	e2503000 	subs	r3, r0, #0
  142d18:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142d1c:	e1a01004 	mov	r1, r4
  142d20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142d24:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142d28:	e59f0000 	ldr	r0, [pc]	; 142d30 <__vm_unlock+0xa4>
  142d2c:	e12fff13 	bx	r3
  142d30:	0014f4a8 	.word	0x0014f4a8
  142d34:	0014d3d8 	.word	0x0014d3d8

00142d38 <time>:
  142d38:	e92d4010 	push	{r4, lr}
  142d3c:	e1a04000 	mov	r4, r0
  142d40:	e24dd010 	sub	sp, sp, #16
  142d44:	e1a0100d 	mov	r1, sp
  142d48:	e3a00000 	mov	r0, #0
  142d4c:	eb000595 	bl	1443a8 <__clock_gettime>
  142d50:	e89d0003 	ldm	sp, {r0, r1}
  142d54:	e3540000 	cmp	r4, #0
  142d58:	18840003 	stmne	r4, {r0, r1}
  142d5c:	e28dd010 	add	sp, sp, #16
  142d60:	e8bd8010 	pop	{r4, pc}

00142d64 <__aio_close>:
  142d64:	e12fff1e 	bx	lr

00142d68 <close>:
  142d68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142d6c:	e24dd014 	sub	sp, sp, #20
  142d70:	ebfffffb 	bl	142d64 <__aio_close>
  142d74:	e3a03000 	mov	r3, #0
  142d78:	e1a01000 	mov	r1, r0
  142d7c:	e58d3008 	str	r3, [sp, #8]
  142d80:	e58d3004 	str	r3, [sp, #4]
  142d84:	e58d3000 	str	r3, [sp]
  142d88:	e1a02003 	mov	r2, r3
  142d8c:	e3a00006 	mov	r0, #6
  142d90:	ebfffbea 	bl	141d40 <__syscall_cp>
  142d94:	e3700004 	cmn	r0, #4
  142d98:	03a00000 	moveq	r0, #0
  142d9c:	e28dd014 	add	sp, sp, #20
  142da0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142da4:	eaffe5b3 	b	13c478 <__syscall_ret>

00142da8 <tolower>:
  142da8:	e2403041 	sub	r3, r0, #65	; 0x41
  142dac:	e3530019 	cmp	r3, #25
  142db0:	93800020 	orrls	r0, r0, #32
  142db4:	e12fff1e 	bx	lr

00142db8 <__tolower_l>:
  142db8:	e2403041 	sub	r3, r0, #65	; 0x41
  142dbc:	e3530019 	cmp	r3, #25
  142dc0:	93800020 	orrls	r0, r0, #32
  142dc4:	e12fff1e 	bx	lr

00142dc8 <__init_tp>:
  142dc8:	e92d4010 	push	{r4, lr}
  142dcc:	e5800000 	str	r0, [r0]
  142dd0:	e1a04000 	mov	r4, r0
  142dd4:	e2800078 	add	r0, r0, #120	; 0x78
  142dd8:	eb000502 	bl	1441e8 <__set_thread_area>
  142ddc:	e3500000 	cmp	r0, #0
  142de0:	ba000015 	blt	142e3c <__init_tp+0x74>
  142de4:	03a02001 	moveq	r2, #1
  142de8:	059f3054 	ldreq	r3, [pc, #84]	; 142e44 <__init_tp+0x7c>
  142dec:	e3a00c01 	mov	r0, #256	; 0x100
  142df0:	05832000 	streq	r2, [r3]
  142df4:	e3a03001 	mov	r3, #1
  142df8:	e5843024 	str	r3, [r4, #36]	; 0x24
  142dfc:	ebffe568 	bl	13c3a4 <get_rtt_syscall>
  142e00:	e2503000 	subs	r3, r0, #0
  142e04:	0a00000a 	beq	142e34 <__init_tp+0x6c>
  142e08:	e59f0038 	ldr	r0, [pc, #56]	; 142e48 <__init_tp+0x80>
  142e0c:	e12fff33 	blx	r3
  142e10:	e59f2034 	ldr	r2, [pc, #52]	; 142e4c <__init_tp+0x84>
  142e14:	e2843050 	add	r3, r4, #80	; 0x50
  142e18:	e584001c 	str	r0, [r4, #28]
  142e1c:	e5844008 	str	r4, [r4, #8]
  142e20:	e584400c 	str	r4, [r4, #12]
  142e24:	e5842060 	str	r2, [r4, #96]	; 0x60
  142e28:	e5843050 	str	r3, [r4, #80]	; 0x50
  142e2c:	e3a00000 	mov	r0, #0
  142e30:	e8bd8010 	pop	{r4, pc}
  142e34:	e1a00003 	mov	r0, r3
  142e38:	eafffff4 	b	142e10 <__init_tp+0x48>
  142e3c:	e3e00000 	mvn	r0, #0
  142e40:	e8bd8010 	pop	{r4, pc}
  142e44:	0015d094 	.word	0x0015d094
  142e48:	0015d0dc 	.word	0x0015d0dc
  142e4c:	0015d0bc 	.word	0x0015d0bc

00142e50 <__copy_tls>:
  142e50:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142e54:	e59f808c 	ldr	r8, [pc, #140]	; 142ee8 <__copy_tls+0x98>
  142e58:	e3e03077 	mvn	r3, #119	; 0x77
  142e5c:	e5982020 	ldr	r2, [r8, #32]
  142e60:	e598601c 	ldr	r6, [r8, #28]
  142e64:	e1a07102 	lsl	r7, r2, #2
  142e68:	e2277003 	eor	r7, r7, #3
  142e6c:	e1e07007 	mvn	r7, r7
  142e70:	e5981018 	ldr	r1, [r8, #24]
  142e74:	e5984014 	ldr	r4, [r8, #20]
  142e78:	e2466001 	sub	r6, r6, #1
  142e7c:	e0433000 	sub	r3, r3, r0
  142e80:	e0066003 	and	r6, r6, r3
  142e84:	e0877001 	add	r7, r7, r1
  142e88:	e3540000 	cmp	r4, #0
  142e8c:	e1a09000 	mov	r9, r0
  142e90:	e0806006 	add	r6, r0, r6
  142e94:	e080a007 	add	sl, r0, r7
  142e98:	0a00000d 	beq	142ed4 <__copy_tls+0x84>
  142e9c:	e1a0b00a 	mov	fp, sl
  142ea0:	e2865078 	add	r5, r6, #120	; 0x78
  142ea4:	e5943014 	ldr	r3, [r4, #20]
  142ea8:	e5941004 	ldr	r1, [r4, #4]
  142eac:	e0853003 	add	r3, r5, r3
  142eb0:	e5ab3004 	str	r3, [fp, #4]!
  142eb4:	e5940014 	ldr	r0, [r4, #20]
  142eb8:	e5942008 	ldr	r2, [r4, #8]
  142ebc:	e0850000 	add	r0, r5, r0
  142ec0:	ebfff7af 	bl	140d84 <memcpy>
  142ec4:	e5944000 	ldr	r4, [r4]
  142ec8:	e3540000 	cmp	r4, #0
  142ecc:	1afffff4 	bne	142ea4 <__copy_tls+0x54>
  142ed0:	e5982020 	ldr	r2, [r8, #32]
  142ed4:	e7892007 	str	r2, [r9, r7]
  142ed8:	e1a00006 	mov	r0, r6
  142edc:	e586a074 	str	sl, [r6, #116]	; 0x74
  142ee0:	e586a004 	str	sl, [r6, #4]
  142ee4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142ee8:	0015d094 	.word	0x0015d094

00142eec <__init_tls>:
  142eec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142ef0:	e5901014 	ldr	r1, [r0, #20]
  142ef4:	e24dd00c 	sub	sp, sp, #12
  142ef8:	e3510000 	cmp	r1, #0
  142efc:	e590600c 	ldr	r6, [r0, #12]
  142f00:	0a000062 	beq	143090 <__init_tls+0x1a4>
  142f04:	e3a04000 	mov	r4, #0
  142f08:	e59f81a0 	ldr	r8, [pc, #416]	; 1430b0 <__init_tls+0x1c4>
  142f0c:	e1a02006 	mov	r2, r6
  142f10:	e1a03004 	mov	r3, r4
  142f14:	e1a0e004 	mov	lr, r4
  142f18:	e590c010 	ldr	ip, [r0, #16]
  142f1c:	e5987000 	ldr	r7, [r8]
  142f20:	e59f918c 	ldr	r9, [pc, #396]	; 1430b4 <__init_tls+0x1c8>
  142f24:	e59f518c 	ldr	r5, [pc, #396]	; 1430b8 <__init_tls+0x1cc>
  142f28:	ea000007 	b	142f4c <__init_tls+0x60>
  142f2c:	e3500002 	cmp	r0, #2
  142f30:	1a00003c 	bne	143028 <__init_tls+0x13c>
  142f34:	e3550000 	cmp	r5, #0
  142f38:	15923008 	ldrne	r3, [r2, #8]
  142f3c:	10453003 	subne	r3, r5, r3
  142f40:	e2511001 	subs	r1, r1, #1
  142f44:	e082200c 	add	r2, r2, ip
  142f48:	0a000007 	beq	142f6c <__init_tls+0x80>
  142f4c:	e5920000 	ldr	r0, [r2]
  142f50:	e3500006 	cmp	r0, #6
  142f54:	1afffff4 	bne	142f2c <__init_tls+0x40>
  142f58:	e5923008 	ldr	r3, [r2, #8]
  142f5c:	e2511001 	subs	r1, r1, #1
  142f60:	e0463003 	sub	r3, r6, r3
  142f64:	e082200c 	add	r2, r2, ip
  142f68:	1afffff7 	bne	142f4c <__init_tls+0x60>
  142f6c:	e3540000 	cmp	r4, #0
  142f70:	15887000 	strne	r7, [r8]
  142f74:	e35e0000 	cmp	lr, #0
  142f78:	0a000044 	beq	143090 <__init_tls+0x1a4>
  142f7c:	e3a04001 	mov	r4, #1
  142f80:	e59ec008 	ldr	ip, [lr, #8]
  142f84:	e59e1010 	ldr	r1, [lr, #16]
  142f88:	e59f212c 	ldr	r2, [pc, #300]	; 1430bc <__init_tls+0x1d0>
  142f8c:	e59e001c 	ldr	r0, [lr, #28]
  142f90:	e083300c 	add	r3, r3, ip
  142f94:	e59fc124 	ldr	ip, [pc, #292]	; 1430c0 <__init_tls+0x1d4>
  142f98:	e5821008 	str	r1, [r2, #8]
  142f9c:	e5823004 	str	r3, [r2, #4]
  142fa0:	e59e1014 	ldr	r1, [lr, #20]
  142fa4:	e5820010 	str	r0, [r2, #16]
  142fa8:	e58c2014 	str	r2, [ip, #20]
  142fac:	e58c4020 	str	r4, [ip, #32]
  142fb0:	e3500003 	cmp	r0, #3
  142fb4:	93a0e004 	movls	lr, #4
  142fb8:	e0833001 	add	r3, r3, r1
  142fbc:	e2404001 	sub	r4, r0, #1
  142fc0:	e2633000 	rsb	r3, r3, #0
  142fc4:	e0033004 	and	r3, r3, r4
  142fc8:	e0833001 	add	r3, r3, r1
  142fcc:	93a01087 	movls	r1, #135	; 0x87
  142fd0:	91a0000e 	movls	r0, lr
  142fd4:	e3c44007 	bic	r4, r4, #7
  142fd8:	e2844008 	add	r4, r4, #8
  142fdc:	82801083 	addhi	r1, r0, #131	; 0x83
  142fe0:	e5824014 	str	r4, [r2, #20]
  142fe4:	e0834004 	add	r4, r3, r4
  142fe8:	e0844001 	add	r4, r4, r1
  142fec:	e3c44003 	bic	r4, r4, #3
  142ff0:	9582e010 	strls	lr, [r2, #16]
  142ff4:	e35400bc 	cmp	r4, #188	; 0xbc
  142ff8:	e58c001c 	str	r0, [ip, #28]
  142ffc:	e582300c 	str	r3, [r2, #12]
  143000:	e58c4018 	str	r4, [ip, #24]
  143004:	959f00b8 	ldrls	r0, [pc, #184]	; 1430c4 <__init_tls+0x1d8>
  143008:	8a000013 	bhi	14305c <__init_tls+0x170>
  14300c:	ebffff8f 	bl	142e50 <__copy_tls>
  143010:	ebffff6c 	bl	142dc8 <__init_tp>
  143014:	e3500000 	cmp	r0, #0
  143018:	aa000000 	bge	143020 <__init_tls+0x134>
  14301c:	e7f000f0 	.word	0xe7f000f0
  143020:	e28dd00c 	add	sp, sp, #12
  143024:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143028:	e3500007 	cmp	r0, #7
  14302c:	01a0e002 	moveq	lr, r2
  143030:	0affffc2 	beq	142f40 <__init_tls+0x54>
  143034:	e1500009 	cmp	r0, r9
  143038:	1affffc0 	bne	142f40 <__init_tls+0x54>
  14303c:	e5920014 	ldr	r0, [r2, #20]
  143040:	e1500007 	cmp	r0, r7
  143044:	9affffbd 	bls	142f40 <__init_tls+0x54>
  143048:	e3500502 	cmp	r0, #8388608	; 0x800000
  14304c:	31a07000 	movcc	r7, r0
  143050:	23a07502 	movcs	r7, #8388608	; 0x800000
  143054:	e3a04001 	mov	r4, #1
  143058:	eaffffb8 	b	142f40 <__init_tls+0x54>
  14305c:	e3a000c0 	mov	r0, #192	; 0xc0
  143060:	ebffe4cf 	bl	13c3a4 <get_rtt_syscall>
  143064:	e2505000 	subs	r5, r0, #0
  143068:	0a00000e 	beq	1430a8 <__init_tls+0x1bc>
  14306c:	e3e03000 	mvn	r3, #0
  143070:	e3a00000 	mov	r0, #0
  143074:	e58d3000 	str	r3, [sp]
  143078:	e1a01004 	mov	r1, r4
  14307c:	e58d0004 	str	r0, [sp, #4]
  143080:	e3a03022 	mov	r3, #34	; 0x22
  143084:	e3a02003 	mov	r2, #3
  143088:	e12fff35 	blx	r5
  14308c:	eaffffde 	b	14300c <__init_tls+0x120>
  143090:	e59f2024 	ldr	r2, [pc, #36]	; 1430bc <__init_tls+0x1d0>
  143094:	e59fc024 	ldr	ip, [pc, #36]	; 1430c0 <__init_tls+0x1d4>
  143098:	e592100c 	ldr	r1, [r2, #12]
  14309c:	e5923004 	ldr	r3, [r2, #4]
  1430a0:	e5920010 	ldr	r0, [r2, #16]
  1430a4:	eaffffc1 	b	142fb0 <__init_tls+0xc4>
  1430a8:	e1a00005 	mov	r0, r5
  1430ac:	eaffffd6 	b	14300c <__init_tls+0x120>
  1430b0:	0014d3e4 	.word	0x0014d3e4
  1430b4:	6474e551 	.word	0x6474e551
  1430b8:	00000000 	.word	0x00000000
  1430bc:	0014f570 	.word	0x0014f570
  1430c0:	0015d094 	.word	0x0015d094
  1430c4:	0014f4b4 	.word	0x0014f4b4

001430c8 <__init_ssp>:
  1430c8:	e2501000 	subs	r1, r0, #0
  1430cc:	e92d4010 	push	{r4, lr}
  1430d0:	1a000009 	bne	1430fc <__init_ssp+0x34>
  1430d4:	e59f3034 	ldr	r3, [pc, #52]	; 143110 <__init_ssp+0x48>
  1430d8:	e59f2034 	ldr	r2, [pc, #52]	; 143114 <__init_ssp+0x4c>
  1430dc:	e0010293 	mul	r1, r3, r2
  1430e0:	e5831000 	str	r1, [r3]
  1430e4:	e5933000 	ldr	r3, [r3]
  1430e8:	e59f2028 	ldr	r2, [pc, #40]	; 143118 <__init_ssp+0x50>
  1430ec:	e5920000 	ldr	r0, [r2]
  1430f0:	e12fff30 	blx	r0
  1430f4:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  1430f8:	e8bd8010 	pop	{r4, pc}
  1430fc:	e3a02004 	mov	r2, #4
  143100:	e59f0008 	ldr	r0, [pc, #8]	; 143110 <__init_ssp+0x48>
  143104:	ebfff71e 	bl	140d84 <memcpy>
  143108:	e59f3000 	ldr	r3, [pc]	; 143110 <__init_ssp+0x48>
  14310c:	eafffff4 	b	1430e4 <__init_ssp+0x1c>
  143110:	0015d0e0 	.word	0x0015d0e0
  143114:	41c64e6d 	.word	0x41c64e6d
  143118:	0014d3dc 	.word	0x0014d3dc

0014311c <__stack_chk_fail>:
  14311c:	e7f000f0 	.word	0xe7f000f0
  143120:	e12fff1e 	bx	lr

00143124 <_Exit>:
  143124:	e92d4010 	push	{r4, lr}
  143128:	e1a04000 	mov	r4, r0
  14312c:	e3a000f8 	mov	r0, #248	; 0xf8
  143130:	ebffe49b 	bl	13c3a4 <get_rtt_syscall>
  143134:	e2503000 	subs	r3, r0, #0
  143138:	0a000001 	beq	143144 <_Exit+0x20>
  14313c:	e1a00004 	mov	r0, r4
  143140:	e12fff33 	blx	r3
  143144:	e3a00001 	mov	r0, #1
  143148:	ebffe495 	bl	13c3a4 <get_rtt_syscall>
  14314c:	e2503000 	subs	r3, r0, #0
  143150:	0afffffb 	beq	143144 <_Exit+0x20>
  143154:	eafffff8 	b	14313c <_Exit+0x18>

00143158 <abort>:
  143158:	e3a04000 	mov	r4, #0
  14315c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143160:	e3a00006 	mov	r0, #6
  143164:	e24dd024 	sub	sp, sp, #36	; 0x24
  143168:	ebffec24 	bl	13e200 <raise>
  14316c:	e1a00004 	mov	r0, r4
  143170:	eb0000b0 	bl	143438 <__block_all_sigs>
  143174:	e59f00b0 	ldr	r0, [pc, #176]	; 14322c <abort+0xd4>
  143178:	ebfffa6e 	bl	141b38 <__lock>
  14317c:	e3a000ae 	mov	r0, #174	; 0xae
  143180:	e58d400c 	str	r4, [sp, #12]
  143184:	e58d4010 	str	r4, [sp, #16]
  143188:	e58d4014 	str	r4, [sp, #20]
  14318c:	e58d4018 	str	r4, [sp, #24]
  143190:	e58d401c 	str	r4, [sp, #28]
  143194:	ebffe482 	bl	13c3a4 <get_rtt_syscall>
  143198:	e2505000 	subs	r5, r0, #0
  14319c:	0a000004 	beq	1431b4 <abort+0x5c>
  1431a0:	e1a02004 	mov	r2, r4
  1431a4:	e28d100c 	add	r1, sp, #12
  1431a8:	e3a03008 	mov	r3, #8
  1431ac:	e3a00006 	mov	r0, #6
  1431b0:	e12fff35 	blx	r5
  1431b4:	e59f3074 	ldr	r3, [pc, #116]	; 143230 <abort+0xd8>
  1431b8:	e5930000 	ldr	r0, [r3]
  1431bc:	e12fff30 	blx	r0
  1431c0:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  1431c4:	e3a000ee 	mov	r0, #238	; 0xee
  1431c8:	ebffe475 	bl	13c3a4 <get_rtt_syscall>
  1431cc:	e2503000 	subs	r3, r0, #0
  1431d0:	0a000002 	beq	1431e0 <abort+0x88>
  1431d4:	e1a00004 	mov	r0, r4
  1431d8:	e3a01006 	mov	r1, #6
  1431dc:	e12fff33 	blx	r3
  1431e0:	e3a03020 	mov	r3, #32
  1431e4:	e3a05000 	mov	r5, #0
  1431e8:	e08d4003 	add	r4, sp, r3
  1431ec:	e3a000af 	mov	r0, #175	; 0xaf
  1431f0:	e58d5008 	str	r5, [sp, #8]
  1431f4:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  1431f8:	ebffe469 	bl	13c3a4 <get_rtt_syscall>
  1431fc:	e2506000 	subs	r6, r0, #0
  143200:	0a000004 	beq	143218 <abort+0xc0>
  143204:	e1a02005 	mov	r2, r5
  143208:	e1a01004 	mov	r1, r4
  14320c:	e3a03008 	mov	r3, #8
  143210:	e3a00001 	mov	r0, #1
  143214:	e12fff36 	blx	r6
  143218:	e7f000f0 	.word	0xe7f000f0
  14321c:	e3a00009 	mov	r0, #9
  143220:	ebffebf6 	bl	13e200 <raise>
  143224:	e3a0007f 	mov	r0, #127	; 0x7f
  143228:	ebffffbd 	bl	143124 <_Exit>
  14322c:	0015d0e4 	.word	0x0015d0e4
  143230:	0014d3dc 	.word	0x0014d3dc

00143234 <__expand_heap>:
  143234:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  143238:	e59f2178 	ldr	r2, [pc, #376]	; 1433b8 <__expand_heap+0x184>
  14323c:	e5903000 	ldr	r3, [r0]
  143240:	e24dd01c 	sub	sp, sp, #28
  143244:	e1530002 	cmp	r3, r2
  143248:	8a000051 	bhi	143394 <__expand_heap+0x160>
  14324c:	e59f7168 	ldr	r7, [pc, #360]	; 1433bc <__expand_heap+0x188>
  143250:	e59f8168 	ldr	r8, [pc, #360]	; 1433c0 <__expand_heap+0x18c>
  143254:	e5975000 	ldr	r5, [r7]
  143258:	e2634000 	rsb	r4, r3, #0
  14325c:	e3550000 	cmp	r5, #0
  143260:	e0044008 	and	r4, r4, r8
  143264:	e0844003 	add	r4, r4, r3
  143268:	e1a06000 	mov	r6, r0
  14326c:	11e03005 	mvnne	r3, r5
  143270:	0a00003b 	beq	143364 <__expand_heap+0x130>
  143274:	e1540003 	cmp	r4, r3
  143278:	2a00001d 	bcs	1432f4 <__expand_heap+0xc0>
  14327c:	e59f3140 	ldr	r3, [pc, #320]	; 1433c4 <__expand_heap+0x190>
  143280:	e0848005 	add	r8, r4, r5
  143284:	e5933010 	ldr	r3, [r3, #16]
  143288:	e3530502 	cmp	r3, #8388608	; 0x800000
  14328c:	21a02003 	movcs	r2, r3
  143290:	33a02502 	movcc	r2, #8388608	; 0x800000
  143294:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  143298:	e1580002 	cmp	r8, r2
  14329c:	81530005 	cmphi	r3, r5
  1432a0:	8a000013 	bhi	1432f4 <__expand_heap+0xc0>
  1432a4:	e28d3014 	add	r3, sp, #20
  1432a8:	e3530502 	cmp	r3, #8388608	; 0x800000
  1432ac:	21a02003 	movcs	r2, r3
  1432b0:	33a02502 	movcc	r2, #8388608	; 0x800000
  1432b4:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  1432b8:	e1580002 	cmp	r8, r2
  1432bc:	81530005 	cmphi	r3, r5
  1432c0:	8a00000b 	bhi	1432f4 <__expand_heap+0xc0>
  1432c4:	e3a0002d 	mov	r0, #45	; 0x2d
  1432c8:	ebffe435 	bl	13c3a4 <get_rtt_syscall>
  1432cc:	e2503000 	subs	r3, r0, #0
  1432d0:	0a000036 	beq	1433b0 <__expand_heap+0x17c>
  1432d4:	e1a00008 	mov	r0, r8
  1432d8:	e12fff33 	blx	r3
  1432dc:	e5972000 	ldr	r2, [r7]
  1432e0:	e0823004 	add	r3, r2, r4
  1432e4:	e1530000 	cmp	r3, r0
  1432e8:	05864000 	streq	r4, [r6]
  1432ec:	05870000 	streq	r0, [r7]
  1432f0:	0a000018 	beq	143358 <__expand_heap+0x124>
  1432f4:	e3a01a01 	mov	r1, #4096	; 0x1000
  1432f8:	e59f50c8 	ldr	r5, [pc, #200]	; 1433c8 <__expand_heap+0x194>
  1432fc:	e3a08000 	mov	r8, #0
  143300:	e5953000 	ldr	r3, [r5]
  143304:	e3a09000 	mov	r9, #0
  143308:	e1a030a3 	lsr	r3, r3, #1
  14330c:	e1a01311 	lsl	r1, r1, r3
  143310:	e1510004 	cmp	r1, r4
  143314:	21a04001 	movcs	r4, r1
  143318:	e3e03000 	mvn	r3, #0
  14331c:	e3a02003 	mov	r2, #3
  143320:	e58d3000 	str	r3, [sp]
  143324:	e58d8008 	str	r8, [sp, #8]
  143328:	e58d900c 	str	r9, [sp, #12]
  14332c:	e3a03022 	mov	r3, #34	; 0x22
  143330:	e1a01004 	mov	r1, r4
  143334:	e3a00000 	mov	r0, #0
  143338:	ebffea5c 	bl	13dcb0 <__mmap>
  14333c:	e3700001 	cmn	r0, #1
  143340:	e1a02000 	mov	r2, r0
  143344:	03a02000 	moveq	r2, #0
  143348:	15953000 	ldrne	r3, [r5]
  14334c:	15864000 	strne	r4, [r6]
  143350:	12833001 	addne	r3, r3, #1
  143354:	15853000 	strne	r3, [r5]
  143358:	e1a00002 	mov	r0, r2
  14335c:	e28dd01c 	add	sp, sp, #28
  143360:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143364:	e3a0002d 	mov	r0, #45	; 0x2d
  143368:	ebffe40d 	bl	13c3a4 <get_rtt_syscall>
  14336c:	e2503000 	subs	r3, r0, #0
  143370:	0a00000c 	beq	1433a8 <__expand_heap+0x174>
  143374:	e1a00005 	mov	r0, r5
  143378:	e12fff33 	blx	r3
  14337c:	e2605000 	rsb	r5, r0, #0
  143380:	e0055008 	and	r5, r5, r8
  143384:	e0855000 	add	r5, r5, r0
  143388:	e1e03005 	mvn	r3, r5
  14338c:	e5875000 	str	r5, [r7]
  143390:	eaffffb7 	b	143274 <__expand_heap+0x40>
  143394:	ebffd6cc 	bl	138ecc <__errno_location>
  143398:	e3a0300c 	mov	r3, #12
  14339c:	e3a02000 	mov	r2, #0
  1433a0:	e5803000 	str	r3, [r0]
  1433a4:	eaffffeb 	b	143358 <__expand_heap+0x124>
  1433a8:	e3e03000 	mvn	r3, #0
  1433ac:	eafffff6 	b	14338c <__expand_heap+0x158>
  1433b0:	e1a00003 	mov	r0, r3
  1433b4:	eaffffc8 	b	1432dc <__expand_heap+0xa8>
  1433b8:	7fffefff 	.word	0x7fffefff
  1433bc:	0014f588 	.word	0x0014f588
  1433c0:	00000fff 	.word	0x00000fff
  1433c4:	0015d094 	.word	0x0015d094
  1433c8:	0014f58c 	.word	0x0014f58c

001433cc <frexpl>:
  1433cc:	ea000417 	b	144430 <frexp>

001433d0 <__mprotect>:
  1433d0:	e2811eff 	add	r1, r1, #4080	; 0xff0
  1433d4:	e92d4070 	push	{r4, r5, r6, lr}
  1433d8:	e281100f 	add	r1, r1, #15
  1433dc:	e59f5040 	ldr	r5, [pc, #64]	; 143424 <__mprotect+0x54>
  1433e0:	e0801001 	add	r1, r0, r1
  1433e4:	e0011005 	and	r1, r1, r5
  1433e8:	e0055000 	and	r5, r5, r0
  1433ec:	e3a0007d 	mov	r0, #125	; 0x7d
  1433f0:	e1a06002 	mov	r6, r2
  1433f4:	e0414005 	sub	r4, r1, r5
  1433f8:	ebffe3e9 	bl	13c3a4 <get_rtt_syscall>
  1433fc:	e2503000 	subs	r3, r0, #0
  143400:	0a000005 	beq	14341c <__mprotect+0x4c>
  143404:	e1a02006 	mov	r2, r6
  143408:	e1a01004 	mov	r1, r4
  14340c:	e1a00005 	mov	r0, r5
  143410:	e12fff33 	blx	r3
  143414:	e8bd4070 	pop	{r4, r5, r6, lr}
  143418:	eaffe416 	b	13c478 <__syscall_ret>
  14341c:	e1a00003 	mov	r0, r3
  143420:	eafffffb 	b	143414 <__mprotect+0x44>
  143424:	fffff000 	.word	0xfffff000

00143428 <wctomb>:
  143428:	e3500000 	cmp	r0, #0
  14342c:	012fff1e 	bxeq	lr
  143430:	e3a02000 	mov	r2, #0
  143434:	ea00042a 	b	1444e4 <wcrtomb>

00143438 <__block_all_sigs>:
  143438:	e92d4010 	push	{r4, lr}
  14343c:	e1a04000 	mov	r4, r0
  143440:	e3a000af 	mov	r0, #175	; 0xaf
  143444:	ebffe3d6 	bl	13c3a4 <get_rtt_syscall>
  143448:	e250e000 	subs	lr, r0, #0
  14344c:	08bd8010 	popeq	{r4, pc}
  143450:	e1a02004 	mov	r2, r4
  143454:	e1a0c00e 	mov	ip, lr
  143458:	e8bd4010 	pop	{r4, lr}
  14345c:	e3a03008 	mov	r3, #8
  143460:	e59f1004 	ldr	r1, [pc, #4]	; 14346c <__block_all_sigs+0x34>
  143464:	e3a00000 	mov	r0, #0
  143468:	e12fff1c 	bx	ip
  14346c:	0014cf9c 	.word	0x0014cf9c

00143470 <__block_app_sigs>:
  143470:	e92d4010 	push	{r4, lr}
  143474:	e1a04000 	mov	r4, r0
  143478:	e3a000af 	mov	r0, #175	; 0xaf
  14347c:	ebffe3c8 	bl	13c3a4 <get_rtt_syscall>
  143480:	e250e000 	subs	lr, r0, #0
  143484:	08bd8010 	popeq	{r4, pc}
  143488:	e1a02004 	mov	r2, r4
  14348c:	e1a0c00e 	mov	ip, lr
  143490:	e8bd4010 	pop	{r4, lr}
  143494:	e3a03008 	mov	r3, #8
  143498:	e59f1004 	ldr	r1, [pc, #4]	; 1434a4 <__block_app_sigs+0x34>
  14349c:	e3a00000 	mov	r0, #0
  1434a0:	e12fff1c 	bx	ip
  1434a4:	0014cfa4 	.word	0x0014cfa4

001434a8 <__restore_sigs>:
  1434a8:	e92d4010 	push	{r4, lr}
  1434ac:	e1a04000 	mov	r4, r0
  1434b0:	e3a000af 	mov	r0, #175	; 0xaf
  1434b4:	ebffe3ba 	bl	13c3a4 <get_rtt_syscall>
  1434b8:	e250e000 	subs	lr, r0, #0
  1434bc:	08bd8010 	popeq	{r4, pc}
  1434c0:	e1a01004 	mov	r1, r4
  1434c4:	e1a0c00e 	mov	ip, lr
  1434c8:	e8bd4010 	pop	{r4, lr}
  1434cc:	e3a03008 	mov	r3, #8
  1434d0:	e3a02000 	mov	r2, #0
  1434d4:	e3a00002 	mov	r0, #2
  1434d8:	e12fff1c 	bx	ip

001434dc <__lockfile>:
  1434dc:	e59f2124 	ldr	r2, [pc, #292]	; 143608 <__lockfile+0x12c>
  1434e0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  1434e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1434e8:	e1a06000 	mov	r6, r0
  1434ec:	e5920000 	ldr	r0, [r2]
  1434f0:	e12fff30 	blx	r0
  1434f4:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  1434f8:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  1434fc:	e1530008 	cmp	r3, r8
  143500:	0a00003e 	beq	143600 <__lockfile+0x124>
  143504:	e59f7100 	ldr	r7, [pc, #256]	; 14360c <__lockfile+0x130>
  143508:	e286504c 	add	r5, r6, #76	; 0x4c
  14350c:	ea000002 	b	14351c <__lockfile+0x40>
  143510:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  143514:	e3530000 	cmp	r3, #0
  143518:	1a000008 	bne	143540 <__lockfile+0x64>
  14351c:	e3a00000 	mov	r0, #0
  143520:	e1a01008 	mov	r1, r8
  143524:	e1a02005 	mov	r2, r5
  143528:	e5973000 	ldr	r3, [r7]
  14352c:	e12fff33 	blx	r3
  143530:	e3500000 	cmp	r0, #0
  143534:	1afffff5 	bne	143510 <__lockfile+0x34>
  143538:	e3a00001 	mov	r0, #1
  14353c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143540:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  143544:	ea000002 	b	143554 <__lockfile+0x78>
  143548:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  14354c:	e3540000 	cmp	r4, #0
  143550:	1a000007 	bne	143574 <__lockfile+0x98>
  143554:	e3a00000 	mov	r0, #0
  143558:	e1a01008 	mov	r1, r8
  14355c:	e1a02005 	mov	r2, r5
  143560:	e5973000 	ldr	r3, [r7]
  143564:	e12fff33 	blx	r3
  143568:	e3500000 	cmp	r0, #0
  14356c:	1afffff5 	bne	143548 <__lockfile+0x6c>
  143570:	eafffff0 	b	143538 <__lockfile+0x5c>
  143574:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143578:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  14357c:	0a000017 	beq	1435e0 <__lockfile+0x104>
  143580:	e3a000f0 	mov	r0, #240	; 0xf0
  143584:	ebffe386 	bl	13c3a4 <get_rtt_syscall>
  143588:	e2504000 	subs	r4, r0, #0
  14358c:	0afffff0 	beq	143554 <__lockfile+0x78>
  143590:	e3a03000 	mov	r3, #0
  143594:	e1a02009 	mov	r2, r9
  143598:	e3a01080 	mov	r1, #128	; 0x80
  14359c:	e1a00005 	mov	r0, r5
  1435a0:	e12fff34 	blx	r4
  1435a4:	e3700026 	cmn	r0, #38	; 0x26
  1435a8:	1affffe9 	bne	143554 <__lockfile+0x78>
  1435ac:	e3a000f0 	mov	r0, #240	; 0xf0
  1435b0:	ebffe37b 	bl	13c3a4 <get_rtt_syscall>
  1435b4:	e2504000 	subs	r4, r0, #0
  1435b8:	0affffe5 	beq	143554 <__lockfile+0x78>
  1435bc:	e3a03000 	mov	r3, #0
  1435c0:	e1a02009 	mov	r2, r9
  1435c4:	e1a01003 	mov	r1, r3
  1435c8:	e1a00005 	mov	r0, r5
  1435cc:	e12fff34 	blx	r4
  1435d0:	eaffffdf 	b	143554 <__lockfile+0x78>
  1435d4:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1435d8:	e1530004 	cmp	r3, r4
  1435dc:	1affffdc 	bne	143554 <__lockfile+0x78>
  1435e0:	e1a00004 	mov	r0, r4
  1435e4:	e1a01009 	mov	r1, r9
  1435e8:	e1a02005 	mov	r2, r5
  1435ec:	e5973000 	ldr	r3, [r7]
  1435f0:	e12fff33 	blx	r3
  1435f4:	e3500000 	cmp	r0, #0
  1435f8:	1afffff5 	bne	1435d4 <__lockfile+0xf8>
  1435fc:	eaffffdf 	b	143580 <__lockfile+0xa4>
  143600:	e3a00000 	mov	r0, #0
  143604:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143608:	0014d3dc 	.word	0x0014d3dc
  14360c:	0014d3d8 	.word	0x0014d3d8

00143610 <__unlockfile>:
  143610:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143614:	e1a05000 	mov	r5, r0
  143618:	e59f7084 	ldr	r7, [pc, #132]	; 1436a4 <__unlockfile+0x94>
  14361c:	e280604c 	add	r6, r0, #76	; 0x4c
  143620:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143624:	ea000002 	b	143634 <__unlockfile+0x24>
  143628:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  14362c:	e1540003 	cmp	r4, r3
  143630:	1afffffa 	bne	143620 <__unlockfile+0x10>
  143634:	e1a00004 	mov	r0, r4
  143638:	e3a01000 	mov	r1, #0
  14363c:	e1a02006 	mov	r2, r6
  143640:	e5973000 	ldr	r3, [r7]
  143644:	e12fff33 	blx	r3
  143648:	e1500001 	cmp	r0, r1
  14364c:	1afffff5 	bne	143628 <__unlockfile+0x18>
  143650:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143654:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143658:	e3a000f0 	mov	r0, #240	; 0xf0
  14365c:	ebffe350 	bl	13c3a4 <get_rtt_syscall>
  143660:	e2503000 	subs	r3, r0, #0
  143664:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143668:	e3a02001 	mov	r2, #1
  14366c:	e3a01081 	mov	r1, #129	; 0x81
  143670:	e1a00006 	mov	r0, r6
  143674:	e12fff33 	blx	r3
  143678:	e3700026 	cmn	r0, #38	; 0x26
  14367c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  143680:	e3a000f0 	mov	r0, #240	; 0xf0
  143684:	ebffe346 	bl	13c3a4 <get_rtt_syscall>
  143688:	e2503000 	subs	r3, r0, #0
  14368c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143690:	e3a02001 	mov	r2, #1
  143694:	e1a00006 	mov	r0, r6
  143698:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  14369c:	e1a01002 	mov	r1, r2
  1436a0:	e12fff13 	bx	r3
  1436a4:	0014d3d8 	.word	0x0014d3d8

001436a8 <__overflow>:
  1436a8:	e92d4010 	push	{r4, lr}
  1436ac:	e5903010 	ldr	r3, [r0, #16]
  1436b0:	e24dd008 	sub	sp, sp, #8
  1436b4:	e3530000 	cmp	r3, #0
  1436b8:	e1a04000 	mov	r4, r0
  1436bc:	e5cd1007 	strb	r1, [sp, #7]
  1436c0:	0a000015 	beq	14371c <__overflow+0x74>
  1436c4:	e5942014 	ldr	r2, [r4, #20]
  1436c8:	e1520003 	cmp	r2, r3
  1436cc:	1a000009 	bne	1436f8 <__overflow+0x50>
  1436d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1436d4:	e1a00004 	mov	r0, r4
  1436d8:	e3a02001 	mov	r2, #1
  1436dc:	e28d1007 	add	r1, sp, #7
  1436e0:	e12fff33 	blx	r3
  1436e4:	e3500001 	cmp	r0, #1
  1436e8:	1a00000f 	bne	14372c <__overflow+0x84>
  1436ec:	e5dd0007 	ldrb	r0, [sp, #7]
  1436f0:	e28dd008 	add	sp, sp, #8
  1436f4:	e8bd8010 	pop	{r4, pc}
  1436f8:	e5dd0007 	ldrb	r0, [sp, #7]
  1436fc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  143700:	e1500003 	cmp	r0, r3
  143704:	0afffff1 	beq	1436d0 <__overflow+0x28>
  143708:	e2823001 	add	r3, r2, #1
  14370c:	e5843014 	str	r3, [r4, #20]
  143710:	e5c20000 	strb	r0, [r2]
  143714:	e28dd008 	add	sp, sp, #8
  143718:	e8bd8010 	pop	{r4, pc}
  14371c:	eb00008c 	bl	143954 <__towrite>
  143720:	e3500000 	cmp	r0, #0
  143724:	05943010 	ldreq	r3, [r4, #16]
  143728:	0affffe5 	beq	1436c4 <__overflow+0x1c>
  14372c:	e3e00000 	mvn	r0, #0
  143730:	eaffffee 	b	1436f0 <__overflow+0x48>

00143734 <dummy>:
  143734:	e12fff1e 	bx	lr

00143738 <__stdio_close>:
  143738:	e92d4010 	push	{r4, lr}
  14373c:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  143740:	ebfffd87 	bl	142d64 <__aio_close>
  143744:	e1a04000 	mov	r4, r0
  143748:	e3a00006 	mov	r0, #6
  14374c:	ebffe314 	bl	13c3a4 <get_rtt_syscall>
  143750:	e2503000 	subs	r3, r0, #0
  143754:	0a000003 	beq	143768 <__stdio_close+0x30>
  143758:	e1a00004 	mov	r0, r4
  14375c:	e12fff33 	blx	r3
  143760:	e8bd4010 	pop	{r4, lr}
  143764:	eaffe343 	b	13c478 <__syscall_ret>
  143768:	e1a00003 	mov	r0, r3
  14376c:	eafffffb 	b	143760 <__stdio_close+0x28>

00143770 <__stdio_seek>:
  143770:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  143774:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  143778:	e24dd014 	sub	sp, sp, #20
  14377c:	e3a0008c 	mov	r0, #140	; 0x8c
  143780:	e1a07002 	mov	r7, r2
  143784:	e1a06003 	mov	r6, r3
  143788:	ebffe305 	bl	13c3a4 <get_rtt_syscall>
  14378c:	e2504000 	subs	r4, r0, #0
  143790:	0a00000e 	beq	1437d0 <__stdio_seek+0x60>
  143794:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  143798:	e1a02007 	mov	r2, r7
  14379c:	e58d3000 	str	r3, [sp]
  1437a0:	e1a01006 	mov	r1, r6
  1437a4:	e28d3008 	add	r3, sp, #8
  1437a8:	e1a00005 	mov	r0, r5
  1437ac:	e12fff34 	blx	r4
  1437b0:	ebffe330 	bl	13c478 <__syscall_ret>
  1437b4:	e3500000 	cmp	r0, #0
  1437b8:	b3e00000 	mvnlt	r0, #0
  1437bc:	b3e01000 	mvnlt	r1, #0
  1437c0:	a28d1008 	addge	r1, sp, #8
  1437c4:	a8910003 	ldmge	r1, {r0, r1}
  1437c8:	e28dd014 	add	sp, sp, #20
  1437cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1437d0:	e1a00004 	mov	r0, r4
  1437d4:	eafffff5 	b	1437b0 <__stdio_seek+0x40>

001437d8 <__stdio_write>:
  1437d8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1437dc:	e590301c 	ldr	r3, [r0, #28]
  1437e0:	e5905014 	ldr	r5, [r0, #20]
  1437e4:	e24dd014 	sub	sp, sp, #20
  1437e8:	e0455003 	sub	r5, r5, r3
  1437ec:	e88d0028 	stm	sp, {r3, r5}
  1437f0:	e1a06000 	mov	r6, r0
  1437f4:	e1a08002 	mov	r8, r2
  1437f8:	e3a07002 	mov	r7, #2
  1437fc:	e58d200c 	str	r2, [sp, #12]
  143800:	e58d1008 	str	r1, [sp, #8]
  143804:	e0855002 	add	r5, r5, r2
  143808:	e1a0400d 	mov	r4, sp
  14380c:	ea00000d 	b	143848 <__stdio_write+0x70>
  143810:	e3500000 	cmp	r0, #0
  143814:	ba000020 	blt	14389c <__stdio_write+0xc4>
  143818:	e5943004 	ldr	r3, [r4, #4]
  14381c:	e0455000 	sub	r5, r5, r0
  143820:	e1500003 	cmp	r0, r3
  143824:	80400003 	subhi	r0, r0, r3
  143828:	8594300c 	ldrhi	r3, [r4, #12]
  14382c:	82844008 	addhi	r4, r4, #8
  143830:	e5942000 	ldr	r2, [r4]
  143834:	e0433000 	sub	r3, r3, r0
  143838:	e0820000 	add	r0, r2, r0
  14383c:	82477001 	subhi	r7, r7, #1
  143840:	e5843004 	str	r3, [r4, #4]
  143844:	e5840000 	str	r0, [r4]
  143848:	e3a00092 	mov	r0, #146	; 0x92
  14384c:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  143850:	ebffe2d3 	bl	13c3a4 <get_rtt_syscall>
  143854:	e2503000 	subs	r3, r0, #0
  143858:	0a00001c 	beq	1438d0 <__stdio_write+0xf8>
  14385c:	e1a00009 	mov	r0, r9
  143860:	e1a02007 	mov	r2, r7
  143864:	e1a01004 	mov	r1, r4
  143868:	e12fff33 	blx	r3
  14386c:	ebffe301 	bl	13c478 <__syscall_ret>
  143870:	e1500005 	cmp	r0, r5
  143874:	1affffe5 	bne	143810 <__stdio_write+0x38>
  143878:	e1a00008 	mov	r0, r8
  14387c:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  143880:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  143884:	e586201c 	str	r2, [r6, #28]
  143888:	e0823003 	add	r3, r2, r3
  14388c:	e5862014 	str	r2, [r6, #20]
  143890:	e5863010 	str	r3, [r6, #16]
  143894:	e28dd014 	add	sp, sp, #20
  143898:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14389c:	e3a00000 	mov	r0, #0
  1438a0:	e5963000 	ldr	r3, [r6]
  1438a4:	e3570002 	cmp	r7, #2
  1438a8:	e3833020 	orr	r3, r3, #32
  1438ac:	e5863000 	str	r3, [r6]
  1438b0:	e5860010 	str	r0, [r6, #16]
  1438b4:	e586001c 	str	r0, [r6, #28]
  1438b8:	e5860014 	str	r0, [r6, #20]
  1438bc:	0afffff4 	beq	143894 <__stdio_write+0xbc>
  1438c0:	e5940004 	ldr	r0, [r4, #4]
  1438c4:	e0480000 	sub	r0, r8, r0
  1438c8:	e28dd014 	add	sp, sp, #20
  1438cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1438d0:	e1a00003 	mov	r0, r3
  1438d4:	eaffffe4 	b	14386c <__stdio_write+0x94>

001438d8 <__stdout_write>:
  1438d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1438dc:	e1a04000 	mov	r4, r0
  1438e0:	e5900000 	ldr	r0, [r0]
  1438e4:	e59f3060 	ldr	r3, [pc, #96]	; 14394c <__stdout_write+0x74>
  1438e8:	e3100040 	tst	r0, #64	; 0x40
  1438ec:	e24dd00c 	sub	sp, sp, #12
  1438f0:	e1a05001 	mov	r5, r1
  1438f4:	e1a06002 	mov	r6, r2
  1438f8:	e5843024 	str	r3, [r4, #36]	; 0x24
  1438fc:	0a000005 	beq	143918 <__stdout_write+0x40>
  143900:	e1a02006 	mov	r2, r6
  143904:	e1a01005 	mov	r1, r5
  143908:	e1a00004 	mov	r0, r4
  14390c:	ebffffb1 	bl	1437d8 <__stdio_write>
  143910:	e28dd00c 	add	sp, sp, #12
  143914:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143918:	e3a00036 	mov	r0, #54	; 0x36
  14391c:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  143920:	ebffe29f 	bl	13c3a4 <get_rtt_syscall>
  143924:	e2503000 	subs	r3, r0, #0
  143928:	0afffff4 	beq	143900 <__stdout_write+0x28>
  14392c:	e1a0200d 	mov	r2, sp
  143930:	e1a00007 	mov	r0, r7
  143934:	e59f1014 	ldr	r1, [pc, #20]	; 143950 <__stdout_write+0x78>
  143938:	e12fff33 	blx	r3
  14393c:	e3500000 	cmp	r0, #0
  143940:	13e03000 	mvnne	r3, #0
  143944:	15843050 	strne	r3, [r4, #80]	; 0x50
  143948:	eaffffec 	b	143900 <__stdout_write+0x28>
  14394c:	001437d8 	.word	0x001437d8
  143950:	00005413 	.word	0x00005413

00143954 <__towrite>:
  143954:	e1a03000 	mov	r3, r0
  143958:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  14395c:	e5900000 	ldr	r0, [r0]
  143960:	e2412001 	sub	r2, r1, #1
  143964:	e1822001 	orr	r2, r2, r1
  143968:	e2101008 	ands	r1, r0, #8
  14396c:	e5832048 	str	r2, [r3, #72]	; 0x48
  143970:	1a000009 	bne	14399c <__towrite+0x48>
  143974:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143978:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  14397c:	e1a00001 	mov	r0, r1
  143980:	e08c2002 	add	r2, ip, r2
  143984:	e5831008 	str	r1, [r3, #8]
  143988:	e5831004 	str	r1, [r3, #4]
  14398c:	e583c01c 	str	ip, [r3, #28]
  143990:	e583c014 	str	ip, [r3, #20]
  143994:	e5832010 	str	r2, [r3, #16]
  143998:	e12fff1e 	bx	lr
  14399c:	e3800020 	orr	r0, r0, #32
  1439a0:	e5830000 	str	r0, [r3]
  1439a4:	e3e00000 	mvn	r0, #0
  1439a8:	e12fff1e 	bx	lr

001439ac <__towrite_needs_stdio_exit>:
  1439ac:	ea000336 	b	14468c <__stdio_exit>

001439b0 <locking_putc>:
  1439b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1439b4:	e1a05001 	mov	r5, r1
  1439b8:	e1a04000 	mov	r4, r0
  1439bc:	e59f7110 	ldr	r7, [pc, #272]	; 143ad4 <locking_putc+0x124>
  1439c0:	e281604c 	add	r6, r1, #76	; 0x4c
  1439c4:	ea000002 	b	1439d4 <locking_putc+0x24>
  1439c8:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  1439cc:	e3530000 	cmp	r3, #0
  1439d0:	1a000021 	bne	143a5c <locking_putc+0xac>
  1439d4:	e3a00000 	mov	r0, #0
  1439d8:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  1439dc:	e1a02006 	mov	r2, r6
  1439e0:	e5973000 	ldr	r3, [r7]
  1439e4:	e12fff33 	blx	r3
  1439e8:	e3500000 	cmp	r0, #0
  1439ec:	1afffff5 	bne	1439c8 <locking_putc+0x18>
  1439f0:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1439f4:	e20480ff 	and	r8, r4, #255	; 0xff
  1439f8:	e1530008 	cmp	r3, r8
  1439fc:	0a00001c 	beq	143a74 <locking_putc+0xc4>
  143a00:	e5953014 	ldr	r3, [r5, #20]
  143a04:	e5952010 	ldr	r2, [r5, #16]
  143a08:	e1530002 	cmp	r3, r2
  143a0c:	0a000018 	beq	143a74 <locking_putc+0xc4>
  143a10:	e2832001 	add	r2, r3, #1
  143a14:	e5852014 	str	r2, [r5, #20]
  143a18:	e5c34000 	strb	r4, [r3]
  143a1c:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143a20:	ea000002 	b	143a30 <locking_putc+0x80>
  143a24:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143a28:	e1540003 	cmp	r4, r3
  143a2c:	1afffffa 	bne	143a1c <locking_putc+0x6c>
  143a30:	e1a00004 	mov	r0, r4
  143a34:	e3a01000 	mov	r1, #0
  143a38:	e1a02006 	mov	r2, r6
  143a3c:	e5973000 	ldr	r3, [r7]
  143a40:	e12fff33 	blx	r3
  143a44:	e1500001 	cmp	r0, r1
  143a48:	1afffff5 	bne	143a24 <locking_putc+0x74>
  143a4c:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143a50:	1a00000c 	bne	143a88 <locking_putc+0xd8>
  143a54:	e1a00008 	mov	r0, r8
  143a58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143a5c:	e1a00005 	mov	r0, r5
  143a60:	ebfffe9d 	bl	1434dc <__lockfile>
  143a64:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143a68:	e20480ff 	and	r8, r4, #255	; 0xff
  143a6c:	e1530008 	cmp	r3, r8
  143a70:	1affffe2 	bne	143a00 <locking_putc+0x50>
  143a74:	e1a01008 	mov	r1, r8
  143a78:	e1a00005 	mov	r0, r5
  143a7c:	ebffff09 	bl	1436a8 <__overflow>
  143a80:	e1a08000 	mov	r8, r0
  143a84:	eaffffe4 	b	143a1c <locking_putc+0x6c>
  143a88:	e3a000f0 	mov	r0, #240	; 0xf0
  143a8c:	ebffe244 	bl	13c3a4 <get_rtt_syscall>
  143a90:	e2503000 	subs	r3, r0, #0
  143a94:	0affffee 	beq	143a54 <locking_putc+0xa4>
  143a98:	e3a02001 	mov	r2, #1
  143a9c:	e3a01081 	mov	r1, #129	; 0x81
  143aa0:	e1a00006 	mov	r0, r6
  143aa4:	e12fff33 	blx	r3
  143aa8:	e3700026 	cmn	r0, #38	; 0x26
  143aac:	1affffe8 	bne	143a54 <locking_putc+0xa4>
  143ab0:	e3a000f0 	mov	r0, #240	; 0xf0
  143ab4:	ebffe23a 	bl	13c3a4 <get_rtt_syscall>
  143ab8:	e2503000 	subs	r3, r0, #0
  143abc:	0affffe4 	beq	143a54 <locking_putc+0xa4>
  143ac0:	e3a02001 	mov	r2, #1
  143ac4:	e1a00006 	mov	r0, r6
  143ac8:	e1a01002 	mov	r1, r2
  143acc:	e12fff33 	blx	r3
  143ad0:	eaffffdf 	b	143a54 <locking_putc+0xa4>
  143ad4:	0014d3d8 	.word	0x0014d3d8

00143ad8 <fputc>:
  143ad8:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  143adc:	e1a03001 	mov	r3, r1
  143ae0:	e3520000 	cmp	r2, #0
  143ae4:	e1a0c000 	mov	ip, r0
  143ae8:	ba00001d 	blt	143b64 <fputc+0x8c>
  143aec:	0a000017 	beq	143b50 <fputc+0x78>
  143af0:	e59f10a8 	ldr	r1, [pc, #168]	; 143ba0 <fputc+0xc8>
  143af4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143af8:	e5910000 	ldr	r0, [r1]
  143afc:	e12fff30 	blx	r0
  143b00:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  143b04:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143b08:	e1520001 	cmp	r2, r1
  143b0c:	0a000003 	beq	143b20 <fputc+0x48>
  143b10:	e1a01003 	mov	r1, r3
  143b14:	e1a0000c 	mov	r0, ip
  143b18:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143b1c:	eaffffa3 	b	1439b0 <locking_putc>
  143b20:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  143b24:	e20c00ff 	and	r0, ip, #255	; 0xff
  143b28:	e1500002 	cmp	r0, r2
  143b2c:	0a000008 	beq	143b54 <fputc+0x7c>
  143b30:	e5932014 	ldr	r2, [r3, #20]
  143b34:	e5931010 	ldr	r1, [r3, #16]
  143b38:	e1520001 	cmp	r2, r1
  143b3c:	0a000004 	beq	143b54 <fputc+0x7c>
  143b40:	e2821001 	add	r1, r2, #1
  143b44:	e5831014 	str	r1, [r3, #20]
  143b48:	e5c2c000 	strb	ip, [r2]
  143b4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  143b50:	eaffff96 	b	1439b0 <locking_putc>
  143b54:	e1a01000 	mov	r1, r0
  143b58:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143b5c:	e1a00003 	mov	r0, r3
  143b60:	eafffed0 	b	1436a8 <__overflow>
  143b64:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  143b68:	e20000ff 	and	r0, r0, #255	; 0xff
  143b6c:	e1500002 	cmp	r0, r2
  143b70:	0a000007 	beq	143b94 <fputc+0xbc>
  143b74:	e5912014 	ldr	r2, [r1, #20]
  143b78:	e5911010 	ldr	r1, [r1, #16]
  143b7c:	e1520001 	cmp	r2, r1
  143b80:	0a000003 	beq	143b94 <fputc+0xbc>
  143b84:	e2821001 	add	r1, r2, #1
  143b88:	e5831014 	str	r1, [r3, #20]
  143b8c:	e5c2c000 	strb	ip, [r2]
  143b90:	e12fff1e 	bx	lr
  143b94:	e1a01000 	mov	r1, r0
  143b98:	e1a00003 	mov	r0, r3
  143b9c:	eafffec1 	b	1436a8 <__overflow>
  143ba0:	0014d3dc 	.word	0x0014d3dc

00143ba4 <fputs>:
  143ba4:	e92d4070 	push	{r4, r5, r6, lr}
  143ba8:	e1a06001 	mov	r6, r1
  143bac:	e1a05000 	mov	r5, r0
  143bb0:	ebfff63c 	bl	1414a8 <strlen>
  143bb4:	e1a03006 	mov	r3, r6
  143bb8:	e1a04000 	mov	r4, r0
  143bbc:	e1a02000 	mov	r2, r0
  143bc0:	e3a01001 	mov	r1, #1
  143bc4:	e1a00005 	mov	r0, r5
  143bc8:	eb000041 	bl	143cd4 <fwrite>
  143bcc:	e0500004 	subs	r0, r0, r4
  143bd0:	13e00000 	mvnne	r0, #0
  143bd4:	e8bd8070 	pop	{r4, r5, r6, pc}

00143bd8 <__fwritex>:
  143bd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143bdc:	e5924010 	ldr	r4, [r2, #16]
  143be0:	e1a05002 	mov	r5, r2
  143be4:	e3540000 	cmp	r4, #0
  143be8:	e1a06000 	mov	r6, r0
  143bec:	e1a07001 	mov	r7, r1
  143bf0:	0a000009 	beq	143c1c <__fwritex+0x44>
  143bf4:	e5950014 	ldr	r0, [r5, #20]
  143bf8:	e0444000 	sub	r4, r4, r0
  143bfc:	e1540007 	cmp	r4, r7
  143c00:	2a00000b 	bcs	143c34 <__fwritex+0x5c>
  143c04:	e1a02007 	mov	r2, r7
  143c08:	e1a01006 	mov	r1, r6
  143c0c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143c10:	e1a00005 	mov	r0, r5
  143c14:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143c18:	e12fff13 	bx	r3
  143c1c:	e1a00002 	mov	r0, r2
  143c20:	ebffff4b 	bl	143954 <__towrite>
  143c24:	e3500000 	cmp	r0, #0
  143c28:	1a000027 	bne	143ccc <__fwritex+0xf4>
  143c2c:	e5954010 	ldr	r4, [r5, #16]
  143c30:	eaffffef 	b	143bf4 <__fwritex+0x1c>
  143c34:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143c38:	e3530000 	cmp	r3, #0
  143c3c:	ba00000d 	blt	143c78 <__fwritex+0xa0>
  143c40:	e3570000 	cmp	r7, #0
  143c44:	0a00000b 	beq	143c78 <__fwritex+0xa0>
  143c48:	e2473001 	sub	r3, r7, #1
  143c4c:	e7d62003 	ldrb	r2, [r6, r3]
  143c50:	e0863003 	add	r3, r6, r3
  143c54:	e352000a 	cmp	r2, #10
  143c58:	1a000003 	bne	143c6c <__fwritex+0x94>
  143c5c:	ea00000e 	b	143c9c <__fwritex+0xc4>
  143c60:	e5732001 	ldrb	r2, [r3, #-1]!
  143c64:	e352000a 	cmp	r2, #10
  143c68:	0a00000c 	beq	143ca0 <__fwritex+0xc8>
  143c6c:	e1530006 	cmp	r3, r6
  143c70:	e0434006 	sub	r4, r3, r6
  143c74:	1afffff9 	bne	143c60 <__fwritex+0x88>
  143c78:	e1a04007 	mov	r4, r7
  143c7c:	e1a02004 	mov	r2, r4
  143c80:	e1a01006 	mov	r1, r6
  143c84:	ebfff43e 	bl	140d84 <memcpy>
  143c88:	e5953014 	ldr	r3, [r5, #20]
  143c8c:	e1a00007 	mov	r0, r7
  143c90:	e0834004 	add	r4, r3, r4
  143c94:	e5854014 	str	r4, [r5, #20]
  143c98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143c9c:	e1a04007 	mov	r4, r7
  143ca0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143ca4:	e1a02004 	mov	r2, r4
  143ca8:	e1a01006 	mov	r1, r6
  143cac:	e1a00005 	mov	r0, r5
  143cb0:	e12fff33 	blx	r3
  143cb4:	e1500004 	cmp	r0, r4
  143cb8:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143cbc:	e0866004 	add	r6, r6, r4
  143cc0:	e5950014 	ldr	r0, [r5, #20]
  143cc4:	e0474004 	sub	r4, r7, r4
  143cc8:	eaffffeb 	b	143c7c <__fwritex+0xa4>
  143ccc:	e1a00004 	mov	r0, r4
  143cd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00143cd4 <fwrite>:
  143cd4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143cd8:	e1a05003 	mov	r5, r3
  143cdc:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143ce0:	e3510000 	cmp	r1, #0
  143ce4:	e1a04002 	mov	r4, r2
  143ce8:	11a04002 	movne	r4, r2
  143cec:	03a04000 	moveq	r4, #0
  143cf0:	e3530000 	cmp	r3, #0
  143cf4:	e1a06001 	mov	r6, r1
  143cf8:	e0070192 	mul	r7, r2, r1
  143cfc:	aa000009 	bge	143d28 <fwrite+0x54>
  143d00:	e1a02005 	mov	r2, r5
  143d04:	e1a01007 	mov	r1, r7
  143d08:	ebffffb2 	bl	143bd8 <__fwritex>
  143d0c:	e1a08000 	mov	r8, r0
  143d10:	e1570008 	cmp	r7, r8
  143d14:	0a000012 	beq	143d64 <fwrite+0x90>
  143d18:	e1a01006 	mov	r1, r6
  143d1c:	e1a00008 	mov	r0, r8
  143d20:	ebffd2d0 	bl	138868 <__udivsi3>
  143d24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143d28:	e1a08000 	mov	r8, r0
  143d2c:	e1a00005 	mov	r0, r5
  143d30:	ebfffde9 	bl	1434dc <__lockfile>
  143d34:	e1a02005 	mov	r2, r5
  143d38:	e1a09000 	mov	r9, r0
  143d3c:	e1a01007 	mov	r1, r7
  143d40:	e1a00008 	mov	r0, r8
  143d44:	ebffffa3 	bl	143bd8 <__fwritex>
  143d48:	e3590000 	cmp	r9, #0
  143d4c:	e1a08000 	mov	r8, r0
  143d50:	0affffee 	beq	143d10 <fwrite+0x3c>
  143d54:	e1a00005 	mov	r0, r5
  143d58:	ebfffe2c 	bl	143610 <__unlockfile>
  143d5c:	e1570008 	cmp	r7, r8
  143d60:	1affffec 	bne	143d18 <fwrite+0x44>
  143d64:	e1a00004 	mov	r0, r4
  143d68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00143d6c <memchr>:
  143d6c:	e3100003 	tst	r0, #3
  143d70:	e20110ff 	and	r1, r1, #255	; 0xff
  143d74:	0a000010 	beq	143dbc <memchr+0x50>
  143d78:	e3520000 	cmp	r2, #0
  143d7c:	0a000031 	beq	143e48 <memchr+0xdc>
  143d80:	e5d03000 	ldrb	r3, [r0]
  143d84:	e1530001 	cmp	r3, r1
  143d88:	0a00003e 	beq	143e88 <memchr+0x11c>
  143d8c:	e2803001 	add	r3, r0, #1
  143d90:	ea000005 	b	143dac <memchr+0x40>
  143d94:	e3520000 	cmp	r2, #0
  143d98:	0a00002a 	beq	143e48 <memchr+0xdc>
  143d9c:	e5d3c000 	ldrb	ip, [r3]
  143da0:	e2833001 	add	r3, r3, #1
  143da4:	e15c0001 	cmp	ip, r1
  143da8:	0a000036 	beq	143e88 <memchr+0x11c>
  143dac:	e3130003 	tst	r3, #3
  143db0:	e2422001 	sub	r2, r2, #1
  143db4:	e1a00003 	mov	r0, r3
  143db8:	1afffff5 	bne	143d94 <memchr+0x28>
  143dbc:	e3520000 	cmp	r2, #0
  143dc0:	0a000020 	beq	143e48 <memchr+0xdc>
  143dc4:	e5d03000 	ldrb	r3, [r0]
  143dc8:	e1530001 	cmp	r3, r1
  143dcc:	0a00002d 	beq	143e88 <memchr+0x11c>
  143dd0:	e92d4070 	push	{r4, r5, r6, lr}
  143dd4:	e3520003 	cmp	r2, #3
  143dd8:	e0814401 	add	r4, r1, r1, lsl #8
  143ddc:	e0844804 	add	r4, r4, r4, lsl #16
  143de0:	9a00001d 	bls	143e5c <memchr+0xf0>
  143de4:	e5903000 	ldr	r3, [r0]
  143de8:	e59f60cc 	ldr	r6, [pc, #204]	; 143ebc <memchr+0x150>
  143dec:	e0233004 	eor	r3, r3, r4
  143df0:	e083c006 	add	ip, r3, r6
  143df4:	e59f50c4 	ldr	r5, [pc, #196]	; 143ec0 <memchr+0x154>
  143df8:	e1cc3003 	bic	r3, ip, r3
  143dfc:	e1130005 	tst	r3, r5
  143e00:	1a000015 	bne	143e5c <memchr+0xf0>
  143e04:	e280e004 	add	lr, r0, #4
  143e08:	ea000006 	b	143e28 <memchr+0xbc>
  143e0c:	e59e3000 	ldr	r3, [lr]
  143e10:	e28ee004 	add	lr, lr, #4
  143e14:	e0233004 	eor	r3, r3, r4
  143e18:	e083c006 	add	ip, r3, r6
  143e1c:	e1cc3003 	bic	r3, ip, r3
  143e20:	e1130005 	tst	r3, r5
  143e24:	1a000009 	bne	143e50 <memchr+0xe4>
  143e28:	e2422004 	sub	r2, r2, #4
  143e2c:	e3520003 	cmp	r2, #3
  143e30:	e1a0000e 	mov	r0, lr
  143e34:	8afffff4 	bhi	143e0c <memchr+0xa0>
  143e38:	e3520000 	cmp	r2, #0
  143e3c:	1a000003 	bne	143e50 <memchr+0xe4>
  143e40:	e3a00000 	mov	r0, #0
  143e44:	e8bd8070 	pop	{r4, r5, r6, pc}
  143e48:	e3a00000 	mov	r0, #0
  143e4c:	e12fff1e 	bx	lr
  143e50:	e5d03000 	ldrb	r3, [r0]
  143e54:	e1510003 	cmp	r1, r3
  143e58:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e5c:	e0802002 	add	r2, r0, r2
  143e60:	e2803001 	add	r3, r0, #1
  143e64:	ea000003 	b	143e78 <memchr+0x10c>
  143e68:	e5d3c000 	ldrb	ip, [r3]
  143e6c:	e2833001 	add	r3, r3, #1
  143e70:	e15c0001 	cmp	ip, r1
  143e74:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e78:	e1520003 	cmp	r2, r3
  143e7c:	e1a00003 	mov	r0, r3
  143e80:	1afffff8 	bne	143e68 <memchr+0xfc>
  143e84:	eaffffed 	b	143e40 <memchr+0xd4>
  143e88:	e5d03000 	ldrb	r3, [r0]
  143e8c:	e1510003 	cmp	r1, r3
  143e90:	012fff1e 	bxeq	lr
  143e94:	e0802002 	add	r2, r0, r2
  143e98:	e2803001 	add	r3, r0, #1
  143e9c:	e1520003 	cmp	r2, r3
  143ea0:	e1a00003 	mov	r0, r3
  143ea4:	0affffe7 	beq	143e48 <memchr+0xdc>
  143ea8:	e5d3c000 	ldrb	ip, [r3]
  143eac:	e2833001 	add	r3, r3, #1
  143eb0:	e15c0001 	cmp	ip, r1
  143eb4:	1afffff8 	bne	143e9c <memchr+0x130>
  143eb8:	e12fff1e 	bx	lr
  143ebc:	fefefeff 	.word	0xfefefeff
  143ec0:	80808080 	.word	0x80808080

00143ec4 <__stpcpy>:
  143ec4:	e0203001 	eor	r3, r0, r1
  143ec8:	e3130003 	tst	r3, #3
  143ecc:	e92d4010 	push	{r4, lr}
  143ed0:	1a00001f 	bne	143f54 <__stpcpy+0x90>
  143ed4:	e3110003 	tst	r1, #3
  143ed8:	0a00000e 	beq	143f18 <__stpcpy+0x54>
  143edc:	e5d13000 	ldrb	r3, [r1]
  143ee0:	e3530000 	cmp	r3, #0
  143ee4:	e5c03000 	strb	r3, [r0]
  143ee8:	08bd8010 	popeq	{r4, pc}
  143eec:	e2813001 	add	r3, r1, #1
  143ef0:	e2802001 	add	r2, r0, #1
  143ef4:	ea000003 	b	143f08 <__stpcpy+0x44>
  143ef8:	e4d31001 	ldrb	r1, [r3], #1
  143efc:	e3510000 	cmp	r1, #0
  143f00:	e4c21001 	strb	r1, [r2], #1
  143f04:	08bd8010 	popeq	{r4, pc}
  143f08:	e3130003 	tst	r3, #3
  143f0c:	e1a01003 	mov	r1, r3
  143f10:	e1a00002 	mov	r0, r2
  143f14:	1afffff7 	bne	143ef8 <__stpcpy+0x34>
  143f18:	e5913000 	ldr	r3, [r1]
  143f1c:	e59f405c 	ldr	r4, [pc, #92]	; 143f80 <__stpcpy+0xbc>
  143f20:	e59fe05c 	ldr	lr, [pc, #92]	; 143f84 <__stpcpy+0xc0>
  143f24:	e0832004 	add	r2, r3, r4
  143f28:	e1c22003 	bic	r2, r2, r3
  143f2c:	e112000e 	tst	r2, lr
  143f30:	1a000007 	bne	143f54 <__stpcpy+0x90>
  143f34:	e281c004 	add	ip, r1, #4
  143f38:	e4803004 	str	r3, [r0], #4
  143f3c:	e1a0100c 	mov	r1, ip
  143f40:	e49c3004 	ldr	r3, [ip], #4
  143f44:	e0832004 	add	r2, r3, r4
  143f48:	e1c22003 	bic	r2, r2, r3
  143f4c:	e112000e 	tst	r2, lr
  143f50:	0afffff8 	beq	143f38 <__stpcpy+0x74>
  143f54:	e5d13000 	ldrb	r3, [r1]
  143f58:	e3530000 	cmp	r3, #0
  143f5c:	e5c03000 	strb	r3, [r0]
  143f60:	08bd8010 	popeq	{r4, pc}
  143f64:	e2803001 	add	r3, r0, #1
  143f68:	e5f12001 	ldrb	r2, [r1, #1]!
  143f6c:	e1a00003 	mov	r0, r3
  143f70:	e3520000 	cmp	r2, #0
  143f74:	e4c32001 	strb	r2, [r3], #1
  143f78:	1afffffa 	bne	143f68 <__stpcpy+0xa4>
  143f7c:	e8bd8010 	pop	{r4, pc}
  143f80:	fefefeff 	.word	0xfefefeff
  143f84:	80808080 	.word	0x80808080

00143f88 <__stpncpy>:
  143f88:	e0203001 	eor	r3, r0, r1
  143f8c:	e3130003 	tst	r3, #3
  143f90:	e92d4070 	push	{r4, r5, r6, lr}
  143f94:	1a000030 	bne	14405c <__stpncpy+0xd4>
  143f98:	e3110003 	tst	r1, #3
  143f9c:	0a000044 	beq	1440b4 <__stpncpy+0x12c>
  143fa0:	e3520000 	cmp	r2, #0
  143fa4:	0a000040 	beq	1440ac <__stpncpy+0x124>
  143fa8:	e5d13000 	ldrb	r3, [r1]
  143fac:	e3530000 	cmp	r3, #0
  143fb0:	e5c03000 	strb	r3, [r0]
  143fb4:	0a00003c 	beq	1440ac <__stpncpy+0x124>
  143fb8:	e2813001 	add	r3, r1, #1
  143fbc:	e2800001 	add	r0, r0, #1
  143fc0:	ea000005 	b	143fdc <__stpncpy+0x54>
  143fc4:	e3520000 	cmp	r2, #0
  143fc8:	0a000032 	beq	144098 <__stpncpy+0x110>
  143fcc:	e4d31001 	ldrb	r1, [r3], #1
  143fd0:	e3510000 	cmp	r1, #0
  143fd4:	e4c01001 	strb	r1, [r0], #1
  143fd8:	0a00002e 	beq	144098 <__stpncpy+0x110>
  143fdc:	e3130003 	tst	r3, #3
  143fe0:	e2422001 	sub	r2, r2, #1
  143fe4:	e1a01003 	mov	r1, r3
  143fe8:	e1a04000 	mov	r4, r0
  143fec:	1afffff4 	bne	143fc4 <__stpncpy+0x3c>
  143ff0:	e3520000 	cmp	r2, #0
  143ff4:	0a000027 	beq	144098 <__stpncpy+0x110>
  143ff8:	e5d1c000 	ldrb	ip, [r1]
  143ffc:	e35c0000 	cmp	ip, #0
  144000:	0a000024 	beq	144098 <__stpncpy+0x110>
  144004:	e3520003 	cmp	r2, #3
  144008:	9a00002b 	bls	1440bc <__stpncpy+0x134>
  14400c:	e5913000 	ldr	r3, [r1]
  144010:	e59f60b0 	ldr	r6, [pc, #176]	; 1440c8 <__stpncpy+0x140>
  144014:	e59f50b0 	ldr	r5, [pc, #176]	; 1440cc <__stpncpy+0x144>
  144018:	e0830006 	add	r0, r3, r6
  14401c:	e1c00003 	bic	r0, r0, r3
  144020:	e1100005 	tst	r0, r5
  144024:	1a000024 	bne	1440bc <__stpncpy+0x134>
  144028:	e281e004 	add	lr, r1, #4
  14402c:	ea000004 	b	144044 <__stpncpy+0xbc>
  144030:	e49e3004 	ldr	r3, [lr], #4
  144034:	e083c006 	add	ip, r3, r6
  144038:	e1ccc003 	bic	ip, ip, r3
  14403c:	e11c0005 	tst	ip, r5
  144040:	1a000007 	bne	144064 <__stpncpy+0xdc>
  144044:	e2422004 	sub	r2, r2, #4
  144048:	e4843004 	str	r3, [r4], #4
  14404c:	e3520003 	cmp	r2, #3
  144050:	e1a00004 	mov	r0, r4
  144054:	e1a0100e 	mov	r1, lr
  144058:	8afffff4 	bhi	144030 <__stpncpy+0xa8>
  14405c:	e3520000 	cmp	r2, #0
  144060:	0a000011 	beq	1440ac <__stpncpy+0x124>
  144064:	e5d13000 	ldrb	r3, [r1]
  144068:	e3530000 	cmp	r3, #0
  14406c:	e5c03000 	strb	r3, [r0]
  144070:	0a00000d 	beq	1440ac <__stpncpy+0x124>
  144074:	e2800001 	add	r0, r0, #1
  144078:	ea000003 	b	14408c <__stpncpy+0x104>
  14407c:	e5f13001 	ldrb	r3, [r1, #1]!
  144080:	e3530000 	cmp	r3, #0
  144084:	e4c03001 	strb	r3, [r0], #1
  144088:	0a000002 	beq	144098 <__stpncpy+0x110>
  14408c:	e2522001 	subs	r2, r2, #1
  144090:	e1a04000 	mov	r4, r0
  144094:	1afffff8 	bne	14407c <__stpncpy+0xf4>
  144098:	e3a01000 	mov	r1, #0
  14409c:	e1a00004 	mov	r0, r4
  1440a0:	ebfff46f 	bl	141264 <memset>
  1440a4:	e1a00004 	mov	r0, r4
  1440a8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1440ac:	e1a04000 	mov	r4, r0
  1440b0:	eafffff8 	b	144098 <__stpncpy+0x110>
  1440b4:	e1a04000 	mov	r4, r0
  1440b8:	eaffffcc 	b	143ff0 <__stpncpy+0x68>
  1440bc:	e5c4c000 	strb	ip, [r4]
  1440c0:	e1a00004 	mov	r0, r4
  1440c4:	eaffffea 	b	144074 <__stpncpy+0xec>
  1440c8:	fefefeff 	.word	0xfefefeff
  1440cc:	80808080 	.word	0x80808080

001440d0 <strchr>:
  1440d0:	e92d4010 	push	{r4, lr}
  1440d4:	e1a04001 	mov	r4, r1
  1440d8:	eb000004 	bl	1440f0 <__strchrnul>
  1440dc:	e5d03000 	ldrb	r3, [r0]
  1440e0:	e20440ff 	and	r4, r4, #255	; 0xff
  1440e4:	e1540003 	cmp	r4, r3
  1440e8:	13a00000 	movne	r0, #0
  1440ec:	e8bd8010 	pop	{r4, pc}

001440f0 <__strchrnul>:
  1440f0:	e20110ff 	and	r1, r1, #255	; 0xff
  1440f4:	e3510000 	cmp	r1, #0
  1440f8:	e92d4070 	push	{r4, r5, r6, lr}
  1440fc:	e1a04000 	mov	r4, r0
  144100:	0a000031 	beq	1441cc <__strchrnul+0xdc>
  144104:	e3100003 	tst	r0, #3
  144108:	0a00000e 	beq	144148 <__strchrnul+0x58>
  14410c:	e5d02000 	ldrb	r2, [r0]
  144110:	e3520000 	cmp	r2, #0
  144114:	0a00002f 	beq	1441d8 <__strchrnul+0xe8>
  144118:	e1510002 	cmp	r1, r2
  14411c:	0a00002d 	beq	1441d8 <__strchrnul+0xe8>
  144120:	e2803001 	add	r3, r0, #1
  144124:	ea000004 	b	14413c <__strchrnul+0x4c>
  144128:	e4d32001 	ldrb	r2, [r3], #1
  14412c:	e3520000 	cmp	r2, #0
  144130:	08bd8070 	popeq	{r4, r5, r6, pc}
  144134:	e1520001 	cmp	r2, r1
  144138:	08bd8070 	popeq	{r4, r5, r6, pc}
  14413c:	e3130003 	tst	r3, #3
  144140:	e1a00003 	mov	r0, r3
  144144:	1afffff7 	bne	144128 <__strchrnul+0x38>
  144148:	e590c000 	ldr	ip, [r0]
  14414c:	e0815401 	add	r5, r1, r1, lsl #8
  144150:	e59f4088 	ldr	r4, [pc, #136]	; 1441e0 <__strchrnul+0xf0>
  144154:	e0855805 	add	r5, r5, r5, lsl #16
  144158:	e025e00c 	eor	lr, r5, ip
  14415c:	e08e2004 	add	r2, lr, r4
  144160:	e08c3004 	add	r3, ip, r4
  144164:	e1c2200e 	bic	r2, r2, lr
  144168:	e1c3300c 	bic	r3, r3, ip
  14416c:	e59f6070 	ldr	r6, [pc, #112]	; 1441e4 <__strchrnul+0xf4>
  144170:	e1833002 	orr	r3, r3, r2
  144174:	e1130006 	tst	r3, r6
  144178:	1a000008 	bne	1441a0 <__strchrnul+0xb0>
  14417c:	e5b0c004 	ldr	ip, [r0, #4]!
  144180:	e02ce005 	eor	lr, ip, r5
  144184:	e08e2004 	add	r2, lr, r4
  144188:	e08c3004 	add	r3, ip, r4
  14418c:	e1c2200e 	bic	r2, r2, lr
  144190:	e1c3300c 	bic	r3, r3, ip
  144194:	e1833002 	orr	r3, r3, r2
  144198:	e1130006 	tst	r3, r6
  14419c:	0afffff6 	beq	14417c <__strchrnul+0x8c>
  1441a0:	e5d03000 	ldrb	r3, [r0]
  1441a4:	e3530000 	cmp	r3, #0
  1441a8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441ac:	e1510003 	cmp	r1, r3
  1441b0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441b4:	e5f03001 	ldrb	r3, [r0, #1]!
  1441b8:	e3530000 	cmp	r3, #0
  1441bc:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441c0:	e1530001 	cmp	r3, r1
  1441c4:	1afffffa 	bne	1441b4 <__strchrnul+0xc4>
  1441c8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441cc:	ebfff4b5 	bl	1414a8 <strlen>
  1441d0:	e0840000 	add	r0, r4, r0
  1441d4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441d8:	e1a00004 	mov	r0, r4
  1441dc:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441e0:	fefefeff 	.word	0xfefefeff
  1441e4:	80808080 	.word	0x80808080

001441e8 <__set_thread_area>:
  1441e8:	e59f3108 	ldr	r3, [pc, #264]	; 1442f8 <__set_thread_area+0x110>
  1441ec:	e92d4010 	push	{r4, lr}
  1441f0:	e5933000 	ldr	r3, [r3]
  1441f4:	e1a04000 	mov	r4, r0
  1441f8:	e3130902 	tst	r3, #32768	; 0x8000
  1441fc:	0a000017 	beq	144260 <__set_thread_area+0x78>
  144200:	e59f20f4 	ldr	r2, [pc, #244]	; 1442fc <__set_thread_area+0x114>
  144204:	e59f10f4 	ldr	r1, [pc, #244]	; 144300 <__set_thread_area+0x118>
  144208:	e59f00f4 	ldr	r0, [pc, #244]	; 144304 <__set_thread_area+0x11c>
  14420c:	e59fc0f4 	ldr	ip, [pc, #244]	; 144308 <__set_thread_area+0x120>
  144210:	e59f30f4 	ldr	r3, [pc, #244]	; 14430c <__set_thread_area+0x124>
  144214:	e5922010 	ldr	r2, [r2, #16]
  144218:	e580c000 	str	ip, [r0]
  14421c:	e5831000 	str	r1, [r3]
  144220:	e5921000 	ldr	r1, [r2]
  144224:	e3510000 	cmp	r1, #0
  144228:	0a000005 	beq	144244 <__set_thread_area+0x5c>
  14422c:	e351000f 	cmp	r1, #15
  144230:	1a00001b 	bne	1442a4 <__set_thread_area+0xbc>
  144234:	e5922004 	ldr	r2, [r2, #4]
  144238:	e5d21000 	ldrb	r1, [r2]
  14423c:	e3510076 	cmp	r1, #118	; 0x76
  144240:	0a000021 	beq	1442cc <__set_thread_area+0xe4>
  144244:	e59f00c4 	ldr	r0, [pc, #196]	; 144310 <__set_thread_area+0x128>
  144248:	ebffe055 	bl	13c3a4 <get_rtt_syscall>
  14424c:	e2503000 	subs	r3, r0, #0
  144250:	08bd8010 	popeq	{r4, pc}
  144254:	e1a00004 	mov	r0, r4
  144258:	e8bd4010 	pop	{r4, lr}
  14425c:	e12fff13 	bx	r3
  144260:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  144264:	e59f10a8 	ldr	r1, [pc, #168]	; 144314 <__set_thread_area+0x12c>
  144268:	e5132003 	ldr	r2, [r3, #-3]
  14426c:	e59f30a4 	ldr	r3, [pc, #164]	; 144318 <__set_thread_area+0x130>
  144270:	e59f008c 	ldr	r0, [pc, #140]	; 144304 <__set_thread_area+0x11c>
  144274:	e5831000 	str	r1, [r3]
  144278:	e59fc09c 	ldr	ip, [pc, #156]	; 14431c <__set_thread_area+0x134>
  14427c:	e59f3088 	ldr	r3, [pc, #136]	; 14430c <__set_thread_area+0x124>
  144280:	e2411040 	sub	r1, r1, #64	; 0x40
  144284:	e3520001 	cmp	r2, #1
  144288:	e580c000 	str	ip, [r0]
  14428c:	e5831000 	str	r1, [r3]
  144290:	da000009 	ble	1442bc <__set_thread_area+0xd4>
  144294:	e3520002 	cmp	r2, #2
  144298:	059f2080 	ldreq	r2, [pc, #128]	; 144320 <__set_thread_area+0x138>
  14429c:	05832000 	streq	r2, [r3]
  1442a0:	eaffffe7 	b	144244 <__set_thread_area+0x5c>
  1442a4:	e5b21008 	ldr	r1, [r2, #8]!
  1442a8:	e3510000 	cmp	r1, #0
  1442ac:	0affffe4 	beq	144244 <__set_thread_area+0x5c>
  1442b0:	e351000f 	cmp	r1, #15
  1442b4:	0affffde 	beq	144234 <__set_thread_area+0x4c>
  1442b8:	eafffff9 	b	1442a4 <__set_thread_area+0xbc>
  1442bc:	e7f000f0 	.word	0xe7f000f0
  1442c0:	e59f2058 	ldr	r2, [pc, #88]	; 144320 <__set_thread_area+0x138>
  1442c4:	e5832000 	str	r2, [r3]
  1442c8:	eaffffdd 	b	144244 <__set_thread_area+0x5c>
  1442cc:	e5d21001 	ldrb	r1, [r2, #1]
  1442d0:	e3510036 	cmp	r1, #54	; 0x36
  1442d4:	1affffda 	bne	144244 <__set_thread_area+0x5c>
  1442d8:	e5d22002 	ldrb	r2, [r2, #2]
  1442dc:	e2422030 	sub	r2, r2, #48	; 0x30
  1442e0:	e3520009 	cmp	r2, #9
  1442e4:	859f1038 	ldrhi	r1, [pc, #56]	; 144324 <__set_thread_area+0x13c>
  1442e8:	859f2038 	ldrhi	r2, [pc, #56]	; 144328 <__set_thread_area+0x140>
  1442ec:	85801000 	strhi	r1, [r0]
  1442f0:	85832000 	strhi	r2, [r3]
  1442f4:	eaffffd2 	b	144244 <__set_thread_area+0x5c>
  1442f8:	0015d090 	.word	0x0015d090
  1442fc:	0015d094 	.word	0x0015d094
  144300:	00141ec0 	.word	0x00141ec0
  144304:	0014d3d8 	.word	0x0014d3d8
  144308:	00141f00 	.word	0x00141f00
  14430c:	0014d3d4 	.word	0x0014d3d4
  144310:	000f0005 	.word	0x000f0005
  144314:	ffff0fe0 	.word	0xffff0fe0
  144318:	0014d3dc 	.word	0x0014d3dc
  14431c:	ffff0fc0 	.word	0xffff0fc0
  144320:	00141e98 	.word	0x00141e98
  144324:	00141edc 	.word	0x00141edc
  144328:	00141eb8 	.word	0x00141eb8

0014432c <__unmapself>:
  14432c:	e3a07036 	mov	r7, #54	; 0x36
  144330:	ef000000 	svc	0x00000000
  144334:	e3a07001 	mov	r7, #1
  144338:	ef000000 	svc	0x00000000

0014433c <__clone>:
  14433c:	e92d00f0 	push	{r4, r5, r6, r7}
  144340:	e3a07082 	mov	r7, #130	; 0x82
  144344:	e1a06003 	mov	r6, r3
  144348:	e1a05000 	mov	r5, r0
  14434c:	e1a00002 	mov	r0, r2
  144350:	e3c1100f 	bic	r1, r1, #15
  144354:	e59d2010 	ldr	r2, [sp, #16]
  144358:	e59d3014 	ldr	r3, [sp, #20]
  14435c:	e59d4018 	ldr	r4, [sp, #24]
  144360:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  144364:	e1a0000d 	mov	r0, sp
  144368:	ef000000 	svc	0x00000000
  14436c:	e1100000 	tst	r0, r0
  144370:	0a000002 	beq	144380 <__clone+0x44>
  144374:	e28dd01c 	add	sp, sp, #28
  144378:	e8bd00f0 	pop	{r4, r5, r6, r7}
  14437c:	e12fff1e 	bx	lr
  144380:	e1a00006 	mov	r0, r6
  144384:	e3150001 	tst	r5, #1
  144388:	1a000003 	bne	14439c <__clone+0x60>
  14438c:	e1a0e00f 	mov	lr, pc
  144390:	e1a0f005 	mov	pc, r5
  144394:	e3a07001 	mov	r7, #1
  144398:	ef000000 	svc	0x00000000
  14439c:	e1a0e00f 	mov	lr, pc
  1443a0:	e12fff15 	bx	r5
  1443a4:	eafffffa 	b	144394 <__clone+0x58>

001443a8 <__clock_gettime>:
  1443a8:	e92d4070 	push	{r4, r5, r6, lr}
  1443ac:	e1a04000 	mov	r4, r0
  1443b0:	e59f0074 	ldr	r0, [pc, #116]	; 14442c <__clock_gettime+0x84>
  1443b4:	e1a05001 	mov	r5, r1
  1443b8:	ebffdff9 	bl	13c3a4 <get_rtt_syscall>
  1443bc:	e2503000 	subs	r3, r0, #0
  1443c0:	0a000017 	beq	144424 <__clock_gettime+0x7c>
  1443c4:	e1a01005 	mov	r1, r5
  1443c8:	e1a00004 	mov	r0, r4
  1443cc:	e12fff33 	blx	r3
  1443d0:	e3700026 	cmn	r0, #38	; 0x26
  1443d4:	0a000001 	beq	1443e0 <__clock_gettime+0x38>
  1443d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1443dc:	eaffe025 	b	13c478 <__syscall_ret>
  1443e0:	e3540000 	cmp	r4, #0
  1443e4:	13e00015 	mvnne	r0, #21
  1443e8:	1afffffa 	bne	1443d8 <__clock_gettime+0x30>
  1443ec:	e3a0004e 	mov	r0, #78	; 0x4e
  1443f0:	ebffdfeb 	bl	13c3a4 <get_rtt_syscall>
  1443f4:	e2503000 	subs	r3, r0, #0
  1443f8:	0a000002 	beq	144408 <__clock_gettime+0x60>
  1443fc:	e1a01004 	mov	r1, r4
  144400:	e1a00005 	mov	r0, r5
  144404:	e12fff33 	blx	r3
  144408:	e5953008 	ldr	r3, [r5, #8]
  14440c:	e3a00000 	mov	r0, #0
  144410:	e0632283 	rsb	r2, r3, r3, lsl #5
  144414:	e0833102 	add	r3, r3, r2, lsl #2
  144418:	e1a03183 	lsl	r3, r3, #3
  14441c:	e5853008 	str	r3, [r5, #8]
  144420:	e8bd8070 	pop	{r4, r5, r6, pc}
  144424:	e1a00003 	mov	r0, r3
  144428:	eaffffea 	b	1443d8 <__clock_gettime+0x30>
  14442c:	00000107 	.word	0x00000107

00144430 <frexp>:
  144430:	e59fc09c 	ldr	ip, [pc, #156]	; 1444d4 <frexp+0xa4>
  144434:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  144438:	e01c6a21 	ands	r6, ip, r1, lsr #20
  14443c:	e1a04000 	mov	r4, r0
  144440:	e1a05001 	mov	r5, r1
  144444:	1a000009 	bne	144470 <frexp+0x40>
  144448:	e1a07002 	mov	r7, r2
  14444c:	e3a03000 	mov	r3, #0
  144450:	e3a02000 	mov	r2, #0
  144454:	eb0002e1 	bl	144fe0 <__aeabi_dcmpeq>
  144458:	e3500000 	cmp	r0, #0
  14445c:	0a000011 	beq	1444a8 <frexp+0x78>
  144460:	e5876000 	str	r6, [r7]
  144464:	e1a00004 	mov	r0, r4
  144468:	e1a01005 	mov	r1, r5
  14446c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144470:	e156000c 	cmp	r6, ip
  144474:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  144478:	e3e00000 	mvn	r0, #0
  14447c:	e0007004 	and	r7, r0, r4
  144480:	e3a04000 	mov	r4, #0
  144484:	e59f104c 	ldr	r1, [pc, #76]	; 1444d8 <frexp+0xa8>
  144488:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  14448c:	e0018005 	and	r8, r1, r5
  144490:	e59f5044 	ldr	r5, [pc, #68]	; 1444dc <frexp+0xac>
  144494:	e2433002 	sub	r3, r3, #2
  144498:	e5823000 	str	r3, [r2]
  14449c:	e1870004 	orr	r0, r7, r4
  1444a0:	e1881005 	orr	r1, r8, r5
  1444a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1444a8:	e59f3030 	ldr	r3, [pc, #48]	; 1444e0 <frexp+0xb0>
  1444ac:	e1a00004 	mov	r0, r4
  1444b0:	e1a01005 	mov	r1, r5
  1444b4:	e3a02000 	mov	r2, #0
  1444b8:	eb00017a 	bl	144aa8 <__aeabi_dmul>
  1444bc:	e1a02007 	mov	r2, r7
  1444c0:	ebffffda 	bl	144430 <frexp>
  1444c4:	e5973000 	ldr	r3, [r7]
  1444c8:	e2433040 	sub	r3, r3, #64	; 0x40
  1444cc:	e5873000 	str	r3, [r7]
  1444d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1444d4:	000007ff 	.word	0x000007ff
  1444d8:	800fffff 	.word	0x800fffff
  1444dc:	3fe00000 	.word	0x3fe00000
  1444e0:	43f00000 	.word	0x43f00000

001444e4 <wcrtomb>:
  1444e4:	e2502000 	subs	r2, r0, #0
  1444e8:	0a000025 	beq	144584 <wcrtomb+0xa0>
  1444ec:	e351007f 	cmp	r1, #127	; 0x7f
  1444f0:	9a000022 	bls	144580 <wcrtomb+0x9c>
  1444f4:	e59f0114 	ldr	r0, [pc, #276]	; 144610 <wcrtomb+0x12c>
  1444f8:	e92d4010 	push	{r4, lr}
  1444fc:	e5900000 	ldr	r0, [r0]
  144500:	e12fff30 	blx	r0
  144504:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  144508:	e1a03001 	mov	r3, r1
  14450c:	e5900000 	ldr	r0, [r0]
  144510:	e1a0c002 	mov	ip, r2
  144514:	e3500000 	cmp	r0, #0
  144518:	0a000025 	beq	1445b4 <wcrtomb+0xd0>
  14451c:	e3510b02 	cmp	r1, #2048	; 0x800
  144520:	3a00001a 	bcc	144590 <wcrtomb+0xac>
  144524:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144528:	e3510b36 	cmp	r1, #55296	; 0xd800
  14452c:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144530:	3a00002a 	bcc	1445e0 <wcrtomb+0xfc>
  144534:	e2412801 	sub	r2, r1, #65536	; 0x10000
  144538:	e3520601 	cmp	r2, #1048576	; 0x100000
  14453c:	2a000022 	bcs	1445cc <wcrtomb+0xe8>
  144540:	e3e0e00f 	mvn	lr, #15
  144544:	e3e0207f 	mvn	r2, #127	; 0x7f
  144548:	e18ee923 	orr	lr, lr, r3, lsr #18
  14454c:	e203303f 	and	r3, r3, #63	; 0x3f
  144550:	e1823003 	orr	r3, r2, r3
  144554:	e5cc3003 	strb	r3, [ip, #3]
  144558:	e3a03004 	mov	r3, #4
  14455c:	e1a00701 	lsl	r0, r1, #14
  144560:	e1a01a01 	lsl	r1, r1, #20
  144564:	e1820d20 	orr	r0, r2, r0, lsr #26
  144568:	e1821d21 	orr	r1, r2, r1, lsr #26
  14456c:	e5cce000 	strb	lr, [ip]
  144570:	e5cc0001 	strb	r0, [ip, #1]
  144574:	e5cc1002 	strb	r1, [ip, #2]
  144578:	e1a00003 	mov	r0, r3
  14457c:	e8bd8010 	pop	{r4, pc}
  144580:	e5c21000 	strb	r1, [r2]
  144584:	e3a03001 	mov	r3, #1
  144588:	e1a00003 	mov	r0, r3
  14458c:	e12fff1e 	bx	lr
  144590:	e201203f 	and	r2, r1, #63	; 0x3f
  144594:	e1e02c82 	mvn	r2, r2, lsl #25
  144598:	e3e0103f 	mvn	r1, #63	; 0x3f
  14459c:	e1e02ca2 	mvn	r2, r2, lsr #25
  1445a0:	e1813323 	orr	r3, r1, r3, lsr #6
  1445a4:	e5cc3000 	strb	r3, [ip]
  1445a8:	e5cc2001 	strb	r2, [ip, #1]
  1445ac:	e3a03002 	mov	r3, #2
  1445b0:	eafffff0 	b	144578 <wcrtomb+0x94>
  1445b4:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  1445b8:	e2433080 	sub	r3, r3, #128	; 0x80
  1445bc:	e353007f 	cmp	r3, #127	; 0x7f
  1445c0:	95c21000 	strbls	r1, [r2]
  1445c4:	93a03001 	movls	r3, #1
  1445c8:	9affffea 	bls	144578 <wcrtomb+0x94>
  1445cc:	ebffd23e 	bl	138ecc <__errno_location>
  1445d0:	e3a02054 	mov	r2, #84	; 0x54
  1445d4:	e3e03000 	mvn	r3, #0
  1445d8:	e5802000 	str	r2, [r0]
  1445dc:	eaffffe5 	b	144578 <wcrtomb+0x94>
  1445e0:	e3e0207f 	mvn	r2, #127	; 0x7f
  1445e4:	e3e0001f 	mvn	r0, #31
  1445e8:	e203e03f 	and	lr, r3, #63	; 0x3f
  1445ec:	e1a01a01 	lsl	r1, r1, #20
  1445f0:	e1803623 	orr	r3, r0, r3, lsr #12
  1445f4:	e1821d21 	orr	r1, r2, r1, lsr #26
  1445f8:	e182200e 	orr	r2, r2, lr
  1445fc:	e5cc3000 	strb	r3, [ip]
  144600:	e5cc1001 	strb	r1, [ip, #1]
  144604:	e5cc2002 	strb	r2, [ip, #2]
  144608:	e3a03003 	mov	r3, #3
  14460c:	eaffffd9 	b	144578 <wcrtomb+0x94>
  144610:	0014d3dc 	.word	0x0014d3dc

00144614 <close_file>:
  144614:	e92d4010 	push	{r4, lr}
  144618:	e2504000 	subs	r4, r0, #0
  14461c:	e24dd008 	sub	sp, sp, #8
  144620:	0a000015 	beq	14467c <close_file+0x68>
  144624:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144628:	e3530000 	cmp	r3, #0
  14462c:	aa000014 	bge	144684 <close_file+0x70>
  144630:	e5942014 	ldr	r2, [r4, #20]
  144634:	e594301c 	ldr	r3, [r4, #28]
  144638:	e1520003 	cmp	r2, r3
  14463c:	0a000004 	beq	144654 <close_file+0x40>
  144640:	e3a02000 	mov	r2, #0
  144644:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  144648:	e1a01002 	mov	r1, r2
  14464c:	e1a00004 	mov	r0, r4
  144650:	e12fff33 	blx	r3
  144654:	e994000c 	ldmib	r4, {r2, r3}
  144658:	e1520003 	cmp	r2, r3
  14465c:	0a000006 	beq	14467c <close_file+0x68>
  144660:	e3a01001 	mov	r1, #1
  144664:	e0422003 	sub	r2, r2, r3
  144668:	e58d1000 	str	r1, [sp]
  14466c:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  144670:	e1a00004 	mov	r0, r4
  144674:	e1a03fc2 	asr	r3, r2, #31
  144678:	e12fff31 	blx	r1
  14467c:	e28dd008 	add	sp, sp, #8
  144680:	e8bd8010 	pop	{r4, pc}
  144684:	ebfffb94 	bl	1434dc <__lockfile>
  144688:	eaffffe8 	b	144630 <close_file+0x1c>

0014468c <__stdio_exit>:
  14468c:	e92d4010 	push	{r4, lr}
  144690:	ebffe771 	bl	13e45c <__ofl_lock>
  144694:	e5904000 	ldr	r4, [r0]
  144698:	e3540000 	cmp	r4, #0
  14469c:	0a000004 	beq	1446b4 <__stdio_exit+0x28>
  1446a0:	e1a00004 	mov	r0, r4
  1446a4:	ebffffda 	bl	144614 <close_file>
  1446a8:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  1446ac:	e3540000 	cmp	r4, #0
  1446b0:	1afffffa 	bne	1446a0 <__stdio_exit+0x14>
  1446b4:	e59f3020 	ldr	r3, [pc, #32]	; 1446dc <__stdio_exit+0x50>
  1446b8:	e5930000 	ldr	r0, [r3]
  1446bc:	ebffffd4 	bl	144614 <close_file>
  1446c0:	e59f3018 	ldr	r3, [pc, #24]	; 1446e0 <__stdio_exit+0x54>
  1446c4:	e5930000 	ldr	r0, [r3]
  1446c8:	ebffffd1 	bl	144614 <close_file>
  1446cc:	e8bd4010 	pop	{r4, lr}
  1446d0:	e59f300c 	ldr	r3, [pc, #12]	; 1446e4 <__stdio_exit+0x58>
  1446d4:	e5930000 	ldr	r0, [r3]
  1446d8:	eaffffcd 	b	144614 <close_file>
  1446dc:	0014f498 	.word	0x0014f498
  1446e0:	0014d3d0 	.word	0x0014d3d0
  1446e4:	0014d338 	.word	0x0014d338

001446e8 <__aeabi_drsub>:
  1446e8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  1446ec:	ea000000 	b	1446f4 <__adddf3>

001446f0 <__aeabi_dsub>:
  1446f0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

001446f4 <__adddf3>:
  1446f4:	e92d4030 	push	{r4, r5, lr}
  1446f8:	e1a04081 	lsl	r4, r1, #1
  1446fc:	e1a05083 	lsl	r5, r3, #1
  144700:	e1340005 	teq	r4, r5
  144704:	01300002 	teqeq	r0, r2
  144708:	1194c000 	orrsne	ip, r4, r0
  14470c:	1195c002 	orrsne	ip, r5, r2
  144710:	11f0cac4 	mvnsne	ip, r4, asr #21
  144714:	11f0cac5 	mvnsne	ip, r5, asr #21
  144718:	0a000079 	beq	144904 <__adddf3+0x210>
  14471c:	e1a04aa4 	lsr	r4, r4, #21
  144720:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  144724:	b2655000 	rsblt	r5, r5, #0
  144728:	da000006 	ble	144748 <__adddf3+0x54>
  14472c:	e0844005 	add	r4, r4, r5
  144730:	e0202002 	eor	r2, r0, r2
  144734:	e0213003 	eor	r3, r1, r3
  144738:	e0220000 	eor	r0, r2, r0
  14473c:	e0231001 	eor	r1, r3, r1
  144740:	e0202002 	eor	r2, r0, r2
  144744:	e0213003 	eor	r3, r1, r3
  144748:	e3550036 	cmp	r5, #54	; 0x36
  14474c:	88bd8030 	pophi	{r4, r5, pc}
  144750:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  144754:	e1a01601 	lsl	r1, r1, #12
  144758:	e3a0c601 	mov	ip, #1048576	; 0x100000
  14475c:	e18c1621 	orr	r1, ip, r1, lsr #12
  144760:	0a000001 	beq	14476c <__adddf3+0x78>
  144764:	e2700000 	rsbs	r0, r0, #0
  144768:	e2e11000 	rsc	r1, r1, #0
  14476c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  144770:	e1a03603 	lsl	r3, r3, #12
  144774:	e18c3623 	orr	r3, ip, r3, lsr #12
  144778:	0a000001 	beq	144784 <__adddf3+0x90>
  14477c:	e2722000 	rsbs	r2, r2, #0
  144780:	e2e33000 	rsc	r3, r3, #0
  144784:	e1340005 	teq	r4, r5
  144788:	0a000057 	beq	1448ec <__adddf3+0x1f8>
  14478c:	e2444001 	sub	r4, r4, #1
  144790:	e275e020 	rsbs	lr, r5, #32
  144794:	ba000005 	blt	1447b0 <__adddf3+0xbc>
  144798:	e1a0ce12 	lsl	ip, r2, lr
  14479c:	e0900532 	adds	r0, r0, r2, lsr r5
  1447a0:	e2a11000 	adc	r1, r1, #0
  1447a4:	e0900e13 	adds	r0, r0, r3, lsl lr
  1447a8:	e0b11553 	adcs	r1, r1, r3, asr r5
  1447ac:	ea000006 	b	1447cc <__adddf3+0xd8>
  1447b0:	e2455020 	sub	r5, r5, #32
  1447b4:	e28ee020 	add	lr, lr, #32
  1447b8:	e3520001 	cmp	r2, #1
  1447bc:	e1a0ce13 	lsl	ip, r3, lr
  1447c0:	238cc002 	orrcs	ip, ip, #2
  1447c4:	e0900553 	adds	r0, r0, r3, asr r5
  1447c8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  1447cc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1447d0:	5a000002 	bpl	1447e0 <__adddf3+0xec>
  1447d4:	e27cc000 	rsbs	ip, ip, #0
  1447d8:	e2f00000 	rscs	r0, r0, #0
  1447dc:	e2e11000 	rsc	r1, r1, #0
  1447e0:	e3510601 	cmp	r1, #1048576	; 0x100000
  1447e4:	3a00000e 	bcc	144824 <__adddf3+0x130>
  1447e8:	e3510602 	cmp	r1, #2097152	; 0x200000
  1447ec:	3a000006 	bcc	14480c <__adddf3+0x118>
  1447f0:	e1b010a1 	lsrs	r1, r1, #1
  1447f4:	e1b00060 	rrxs	r0, r0
  1447f8:	e1a0c06c 	rrx	ip, ip
  1447fc:	e2844001 	add	r4, r4, #1
  144800:	e1a02a84 	lsl	r2, r4, #21
  144804:	e3720501 	cmn	r2, #4194304	; 0x400000
  144808:	2a000055 	bcs	144964 <__adddf3+0x270>
  14480c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  144810:	01b0c0a0 	lsrseq	ip, r0, #1
  144814:	e2b00000 	adcs	r0, r0, #0
  144818:	e0a11a04 	adc	r1, r1, r4, lsl #20
  14481c:	e1811005 	orr	r1, r1, r5
  144820:	e8bd8030 	pop	{r4, r5, pc}
  144824:	e1b0c08c 	lsls	ip, ip, #1
  144828:	e0b00000 	adcs	r0, r0, r0
  14482c:	e0a11001 	adc	r1, r1, r1
  144830:	e3110601 	tst	r1, #1048576	; 0x100000
  144834:	e2444001 	sub	r4, r4, #1
  144838:	1afffff3 	bne	14480c <__adddf3+0x118>
  14483c:	e3310000 	teq	r1, #0
  144840:	01a01000 	moveq	r1, r0
  144844:	03a00000 	moveq	r0, #0
  144848:	e16f3f11 	clz	r3, r1
  14484c:	02833020 	addeq	r3, r3, #32
  144850:	e243300b 	sub	r3, r3, #11
  144854:	e2532020 	subs	r2, r3, #32
  144858:	aa000007 	bge	14487c <__adddf3+0x188>
  14485c:	e292200c 	adds	r2, r2, #12
  144860:	da000004 	ble	144878 <__adddf3+0x184>
  144864:	e282c014 	add	ip, r2, #20
  144868:	e262200c 	rsb	r2, r2, #12
  14486c:	e1a00c11 	lsl	r0, r1, ip
  144870:	e1a01231 	lsr	r1, r1, r2
  144874:	ea000004 	b	14488c <__adddf3+0x198>
  144878:	e2822014 	add	r2, r2, #20
  14487c:	d262c020 	rsble	ip, r2, #32
  144880:	e1a01211 	lsl	r1, r1, r2
  144884:	d1811c30 	orrle	r1, r1, r0, lsr ip
  144888:	d1a00210 	lslle	r0, r0, r2
  14488c:	e0544003 	subs	r4, r4, r3
  144890:	a0811a04 	addge	r1, r1, r4, lsl #20
  144894:	a1811005 	orrge	r1, r1, r5
  144898:	a8bd8030 	popge	{r4, r5, pc}
  14489c:	e1e04004 	mvn	r4, r4
  1448a0:	e254401f 	subs	r4, r4, #31
  1448a4:	aa00000d 	bge	1448e0 <__adddf3+0x1ec>
  1448a8:	e294400c 	adds	r4, r4, #12
  1448ac:	ca000005 	bgt	1448c8 <__adddf3+0x1d4>
  1448b0:	e2844014 	add	r4, r4, #20
  1448b4:	e2642020 	rsb	r2, r4, #32
  1448b8:	e1a00430 	lsr	r0, r0, r4
  1448bc:	e1800211 	orr	r0, r0, r1, lsl r2
  1448c0:	e1851431 	orr	r1, r5, r1, lsr r4
  1448c4:	e8bd8030 	pop	{r4, r5, pc}
  1448c8:	e264400c 	rsb	r4, r4, #12
  1448cc:	e2642020 	rsb	r2, r4, #32
  1448d0:	e1a00230 	lsr	r0, r0, r2
  1448d4:	e1800411 	orr	r0, r0, r1, lsl r4
  1448d8:	e1a01005 	mov	r1, r5
  1448dc:	e8bd8030 	pop	{r4, r5, pc}
  1448e0:	e1a00431 	lsr	r0, r1, r4
  1448e4:	e1a01005 	mov	r1, r5
  1448e8:	e8bd8030 	pop	{r4, r5, pc}
  1448ec:	e3340000 	teq	r4, #0
  1448f0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  1448f4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  1448f8:	02844001 	addeq	r4, r4, #1
  1448fc:	12455001 	subne	r5, r5, #1
  144900:	eaffffa1 	b	14478c <__adddf3+0x98>
  144904:	e1f0cac4 	mvns	ip, r4, asr #21
  144908:	11f0cac5 	mvnsne	ip, r5, asr #21
  14490c:	0a000018 	beq	144974 <__adddf3+0x280>
  144910:	e1340005 	teq	r4, r5
  144914:	01300002 	teqeq	r0, r2
  144918:	0a000003 	beq	14492c <__adddf3+0x238>
  14491c:	e194c000 	orrs	ip, r4, r0
  144920:	01a01003 	moveq	r1, r3
  144924:	01a00002 	moveq	r0, r2
  144928:	e8bd8030 	pop	{r4, r5, pc}
  14492c:	e1310003 	teq	r1, r3
  144930:	13a01000 	movne	r1, #0
  144934:	13a00000 	movne	r0, #0
  144938:	18bd8030 	popne	{r4, r5, pc}
  14493c:	e1b0caa4 	lsrs	ip, r4, #21
  144940:	1a000003 	bne	144954 <__adddf3+0x260>
  144944:	e1b00080 	lsls	r0, r0, #1
  144948:	e0b11001 	adcs	r1, r1, r1
  14494c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  144950:	e8bd8030 	pop	{r4, r5, pc}
  144954:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  144958:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  14495c:	38bd8030 	popcc	{r4, r5, pc}
  144960:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144964:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  144968:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  14496c:	e3a00000 	mov	r0, #0
  144970:	e8bd8030 	pop	{r4, r5, pc}
  144974:	e1f0cac4 	mvns	ip, r4, asr #21
  144978:	11a01003 	movne	r1, r3
  14497c:	11a00002 	movne	r0, r2
  144980:	01f0cac5 	mvnseq	ip, r5, asr #21
  144984:	11a03001 	movne	r3, r1
  144988:	11a02000 	movne	r2, r0
  14498c:	e1904601 	orrs	r4, r0, r1, lsl #12
  144990:	01925603 	orrseq	r5, r2, r3, lsl #12
  144994:	01310003 	teqeq	r1, r3
  144998:	13811702 	orrne	r1, r1, #524288	; 0x80000
  14499c:	e8bd8030 	pop	{r4, r5, pc}

001449a0 <__aeabi_ui2d>:
  1449a0:	e3300000 	teq	r0, #0
  1449a4:	03a01000 	moveq	r1, #0
  1449a8:	012fff1e 	bxeq	lr
  1449ac:	e92d4030 	push	{r4, r5, lr}
  1449b0:	e3a04b01 	mov	r4, #1024	; 0x400
  1449b4:	e2844032 	add	r4, r4, #50	; 0x32
  1449b8:	e3a05000 	mov	r5, #0
  1449bc:	e3a01000 	mov	r1, #0
  1449c0:	eaffff9d 	b	14483c <__adddf3+0x148>

001449c4 <__aeabi_i2d>:
  1449c4:	e3300000 	teq	r0, #0
  1449c8:	03a01000 	moveq	r1, #0
  1449cc:	012fff1e 	bxeq	lr
  1449d0:	e92d4030 	push	{r4, r5, lr}
  1449d4:	e3a04b01 	mov	r4, #1024	; 0x400
  1449d8:	e2844032 	add	r4, r4, #50	; 0x32
  1449dc:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  1449e0:	42600000 	rsbmi	r0, r0, #0
  1449e4:	e3a01000 	mov	r1, #0
  1449e8:	eaffff93 	b	14483c <__adddf3+0x148>

001449ec <__aeabi_f2d>:
  1449ec:	e1b02080 	lsls	r2, r0, #1
  1449f0:	e1a011c2 	asr	r1, r2, #3
  1449f4:	e1a01061 	rrx	r1, r1
  1449f8:	e1a00e02 	lsl	r0, r2, #28
  1449fc:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  144a00:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  144a04:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144a08:	112fff1e 	bxne	lr
  144a0c:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144a10:	012fff1e 	bxeq	lr
  144a14:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  144a18:	03811702 	orreq	r1, r1, #524288	; 0x80000
  144a1c:	012fff1e 	bxeq	lr
  144a20:	e92d4030 	push	{r4, r5, lr}
  144a24:	e3a04d0e 	mov	r4, #896	; 0x380
  144a28:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144a2c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144a30:	eaffff81 	b	14483c <__adddf3+0x148>

00144a34 <__aeabi_ul2d>:
  144a34:	e1902001 	orrs	r2, r0, r1
  144a38:	012fff1e 	bxeq	lr
  144a3c:	e92d4030 	push	{r4, r5, lr}
  144a40:	e3a05000 	mov	r5, #0
  144a44:	ea000006 	b	144a64 <__aeabi_l2d+0x1c>

00144a48 <__aeabi_l2d>:
  144a48:	e1902001 	orrs	r2, r0, r1
  144a4c:	012fff1e 	bxeq	lr
  144a50:	e92d4030 	push	{r4, r5, lr}
  144a54:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  144a58:	5a000001 	bpl	144a64 <__aeabi_l2d+0x1c>
  144a5c:	e2700000 	rsbs	r0, r0, #0
  144a60:	e2e11000 	rsc	r1, r1, #0
  144a64:	e3a04b01 	mov	r4, #1024	; 0x400
  144a68:	e2844032 	add	r4, r4, #50	; 0x32
  144a6c:	e1b0cb21 	lsrs	ip, r1, #22
  144a70:	0affff5a 	beq	1447e0 <__adddf3+0xec>
  144a74:	e3a02003 	mov	r2, #3
  144a78:	e1b0c1ac 	lsrs	ip, ip, #3
  144a7c:	12822003 	addne	r2, r2, #3
  144a80:	e1b0c1ac 	lsrs	ip, ip, #3
  144a84:	12822003 	addne	r2, r2, #3
  144a88:	e08221ac 	add	r2, r2, ip, lsr #3
  144a8c:	e2623020 	rsb	r3, r2, #32
  144a90:	e1a0c310 	lsl	ip, r0, r3
  144a94:	e1a00230 	lsr	r0, r0, r2
  144a98:	e1800311 	orr	r0, r0, r1, lsl r3
  144a9c:	e1a01231 	lsr	r1, r1, r2
  144aa0:	e0844002 	add	r4, r4, r2
  144aa4:	eaffff4d 	b	1447e0 <__adddf3+0xec>

00144aa8 <__aeabi_dmul>:
  144aa8:	e92d4070 	push	{r4, r5, r6, lr}
  144aac:	e3a0c0ff 	mov	ip, #255	; 0xff
  144ab0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144ab4:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144ab8:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144abc:	1134000c 	teqne	r4, ip
  144ac0:	1135000c 	teqne	r5, ip
  144ac4:	0b00006f 	bleq	144c88 <__aeabi_dmul+0x1e0>
  144ac8:	e0844005 	add	r4, r4, r5
  144acc:	e0216003 	eor	r6, r1, r3
  144ad0:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  144ad4:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  144ad8:	e1905601 	orrs	r5, r0, r1, lsl #12
  144adc:	11925603 	orrsne	r5, r2, r3, lsl #12
  144ae0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144ae4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  144ae8:	0a00001c 	beq	144b60 <__aeabi_dmul+0xb8>
  144aec:	e08ec290 	umull	ip, lr, r0, r2
  144af0:	e3a05000 	mov	r5, #0
  144af4:	e0a5e291 	umlal	lr, r5, r1, r2
  144af8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  144afc:	e0a5e390 	umlal	lr, r5, r0, r3
  144b00:	e3a06000 	mov	r6, #0
  144b04:	e0a65391 	umlal	r5, r6, r1, r3
  144b08:	e33c0000 	teq	ip, #0
  144b0c:	138ee001 	orrne	lr, lr, #1
  144b10:	e24440ff 	sub	r4, r4, #255	; 0xff
  144b14:	e3560c02 	cmp	r6, #512	; 0x200
  144b18:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  144b1c:	2a000002 	bcs	144b2c <__aeabi_dmul+0x84>
  144b20:	e1b0e08e 	lsls	lr, lr, #1
  144b24:	e0b55005 	adcs	r5, r5, r5
  144b28:	e0a66006 	adc	r6, r6, r6
  144b2c:	e1821586 	orr	r1, r2, r6, lsl #11
  144b30:	e1811aa5 	orr	r1, r1, r5, lsr #21
  144b34:	e1a00585 	lsl	r0, r5, #11
  144b38:	e1800aae 	orr	r0, r0, lr, lsr #21
  144b3c:	e1a0e58e 	lsl	lr, lr, #11
  144b40:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144b44:	835c0c07 	cmphi	ip, #1792	; 0x700
  144b48:	8a00000f 	bhi	144b8c <__aeabi_dmul+0xe4>
  144b4c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  144b50:	01b0e0a0 	lsrseq	lr, r0, #1
  144b54:	e2b00000 	adcs	r0, r0, #0
  144b58:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144b60:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  144b64:	e1861001 	orr	r1, r6, r1
  144b68:	e1800002 	orr	r0, r0, r2
  144b6c:	e0211003 	eor	r1, r1, r3
  144b70:	e05440ac 	subs	r4, r4, ip, lsr #1
  144b74:	c074500c 	rsbsgt	r5, r4, ip
  144b78:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144b7c:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144b80:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144b84:	e3a0e000 	mov	lr, #0
  144b88:	e2544001 	subs	r4, r4, #1
  144b8c:	ca000058 	bgt	144cf4 <__aeabi_dmul+0x24c>
  144b90:	e3740036 	cmn	r4, #54	; 0x36
  144b94:	d3a00000 	movle	r0, #0
  144b98:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144b9c:	d8bd8070 	pople	{r4, r5, r6, pc}
  144ba0:	e2644000 	rsb	r4, r4, #0
  144ba4:	e2544020 	subs	r4, r4, #32
  144ba8:	aa000018 	bge	144c10 <__aeabi_dmul+0x168>
  144bac:	e294400c 	adds	r4, r4, #12
  144bb0:	ca00000b 	bgt	144be4 <__aeabi_dmul+0x13c>
  144bb4:	e2844014 	add	r4, r4, #20
  144bb8:	e2645020 	rsb	r5, r4, #32
  144bbc:	e1a03510 	lsl	r3, r0, r5
  144bc0:	e1a00430 	lsr	r0, r0, r4
  144bc4:	e1800511 	orr	r0, r0, r1, lsl r5
  144bc8:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  144bcc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144bd0:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144bd4:	e0a21431 	adc	r1, r2, r1, lsr r4
  144bd8:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144bdc:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144be0:	e8bd8070 	pop	{r4, r5, r6, pc}
  144be4:	e264400c 	rsb	r4, r4, #12
  144be8:	e2645020 	rsb	r5, r4, #32
  144bec:	e1a03410 	lsl	r3, r0, r4
  144bf0:	e1a00530 	lsr	r0, r0, r5
  144bf4:	e1800411 	orr	r0, r0, r1, lsl r4
  144bf8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144bfc:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144c00:	e2a11000 	adc	r1, r1, #0
  144c04:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144c08:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144c0c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c10:	e2645020 	rsb	r5, r4, #32
  144c14:	e18ee510 	orr	lr, lr, r0, lsl r5
  144c18:	e1a03430 	lsr	r3, r0, r4
  144c1c:	e1833511 	orr	r3, r3, r1, lsl r5
  144c20:	e1a00431 	lsr	r0, r1, r4
  144c24:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144c28:	e1c00431 	bic	r0, r0, r1, lsr r4
  144c2c:	e0800fa3 	add	r0, r0, r3, lsr #31
  144c30:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144c34:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144c38:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c3c:	e3340000 	teq	r4, #0
  144c40:	1a000008 	bne	144c68 <__aeabi_dmul+0x1c0>
  144c44:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  144c48:	e1b00080 	lsls	r0, r0, #1
  144c4c:	e0a11001 	adc	r1, r1, r1
  144c50:	e3110601 	tst	r1, #1048576	; 0x100000
  144c54:	02444001 	subeq	r4, r4, #1
  144c58:	0afffffa 	beq	144c48 <__aeabi_dmul+0x1a0>
  144c5c:	e1811006 	orr	r1, r1, r6
  144c60:	e3350000 	teq	r5, #0
  144c64:	112fff1e 	bxne	lr
  144c68:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  144c6c:	e1b02082 	lsls	r2, r2, #1
  144c70:	e0a33003 	adc	r3, r3, r3
  144c74:	e3130601 	tst	r3, #1048576	; 0x100000
  144c78:	02455001 	subeq	r5, r5, #1
  144c7c:	0afffffa 	beq	144c6c <__aeabi_dmul+0x1c4>
  144c80:	e1833006 	orr	r3, r3, r6
  144c84:	e12fff1e 	bx	lr
  144c88:	e134000c 	teq	r4, ip
  144c8c:	e00c5a23 	and	r5, ip, r3, lsr #20
  144c90:	1135000c 	teqne	r5, ip
  144c94:	0a000006 	beq	144cb4 <__aeabi_dmul+0x20c>
  144c98:	e1906081 	orrs	r6, r0, r1, lsl #1
  144c9c:	11926083 	orrsne	r6, r2, r3, lsl #1
  144ca0:	1affffe5 	bne	144c3c <__aeabi_dmul+0x194>
  144ca4:	e0211003 	eor	r1, r1, r3
  144ca8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144cac:	e3a00000 	mov	r0, #0
  144cb0:	e8bd8070 	pop	{r4, r5, r6, pc}
  144cb4:	e1906081 	orrs	r6, r0, r1, lsl #1
  144cb8:	01a00002 	moveq	r0, r2
  144cbc:	01a01003 	moveq	r1, r3
  144cc0:	11926083 	orrsne	r6, r2, r3, lsl #1
  144cc4:	0a00000f 	beq	144d08 <__aeabi_dmul+0x260>
  144cc8:	e134000c 	teq	r4, ip
  144ccc:	1a000001 	bne	144cd8 <__aeabi_dmul+0x230>
  144cd0:	e1906601 	orrs	r6, r0, r1, lsl #12
  144cd4:	1a00000b 	bne	144d08 <__aeabi_dmul+0x260>
  144cd8:	e135000c 	teq	r5, ip
  144cdc:	1a000003 	bne	144cf0 <__aeabi_dmul+0x248>
  144ce0:	e1926603 	orrs	r6, r2, r3, lsl #12
  144ce4:	11a00002 	movne	r0, r2
  144ce8:	11a01003 	movne	r1, r3
  144cec:	1a000005 	bne	144d08 <__aeabi_dmul+0x260>
  144cf0:	e0211003 	eor	r1, r1, r3
  144cf4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144cf8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144cfc:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144d00:	e3a00000 	mov	r0, #0
  144d04:	e8bd8070 	pop	{r4, r5, r6, pc}
  144d08:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144d0c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144d10:	e8bd8070 	pop	{r4, r5, r6, pc}

00144d14 <__aeabi_ddiv>:
  144d14:	e92d4070 	push	{r4, r5, r6, lr}
  144d18:	e3a0c0ff 	mov	ip, #255	; 0xff
  144d1c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144d20:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144d24:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144d28:	1134000c 	teqne	r4, ip
  144d2c:	1135000c 	teqne	r5, ip
  144d30:	0b00005c 	bleq	144ea8 <__aeabi_ddiv+0x194>
  144d34:	e0444005 	sub	r4, r4, r5
  144d38:	e021e003 	eor	lr, r1, r3
  144d3c:	e1925603 	orrs	r5, r2, r3, lsl #12
  144d40:	e1a01601 	lsl	r1, r1, #12
  144d44:	0a00004b 	beq	144e78 <__aeabi_ddiv+0x164>
  144d48:	e1a03603 	lsl	r3, r3, #12
  144d4c:	e3a05201 	mov	r5, #268435456	; 0x10000000
  144d50:	e1853223 	orr	r3, r5, r3, lsr #4
  144d54:	e1833c22 	orr	r3, r3, r2, lsr #24
  144d58:	e1a02402 	lsl	r2, r2, #8
  144d5c:	e1855221 	orr	r5, r5, r1, lsr #4
  144d60:	e1855c20 	orr	r5, r5, r0, lsr #24
  144d64:	e1a06400 	lsl	r6, r0, #8
  144d68:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  144d6c:	e1550003 	cmp	r5, r3
  144d70:	01560002 	cmpeq	r6, r2
  144d74:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144d78:	e2844c03 	add	r4, r4, #768	; 0x300
  144d7c:	2a000001 	bcs	144d88 <__aeabi_ddiv+0x74>
  144d80:	e1b030a3 	lsrs	r3, r3, #1
  144d84:	e1a02062 	rrx	r2, r2
  144d88:	e0566002 	subs	r6, r6, r2
  144d8c:	e0c55003 	sbc	r5, r5, r3
  144d90:	e1b030a3 	lsrs	r3, r3, #1
  144d94:	e1a02062 	rrx	r2, r2
  144d98:	e3a00601 	mov	r0, #1048576	; 0x100000
  144d9c:	e3a0c702 	mov	ip, #524288	; 0x80000
  144da0:	e056e002 	subs	lr, r6, r2
  144da4:	e0d5e003 	sbcs	lr, r5, r3
  144da8:	20466002 	subcs	r6, r6, r2
  144dac:	21a0500e 	movcs	r5, lr
  144db0:	2180000c 	orrcs	r0, r0, ip
  144db4:	e1b030a3 	lsrs	r3, r3, #1
  144db8:	e1a02062 	rrx	r2, r2
  144dbc:	e056e002 	subs	lr, r6, r2
  144dc0:	e0d5e003 	sbcs	lr, r5, r3
  144dc4:	20466002 	subcs	r6, r6, r2
  144dc8:	21a0500e 	movcs	r5, lr
  144dcc:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144dd0:	e1b030a3 	lsrs	r3, r3, #1
  144dd4:	e1a02062 	rrx	r2, r2
  144dd8:	e056e002 	subs	lr, r6, r2
  144ddc:	e0d5e003 	sbcs	lr, r5, r3
  144de0:	20466002 	subcs	r6, r6, r2
  144de4:	21a0500e 	movcs	r5, lr
  144de8:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144dec:	e1b030a3 	lsrs	r3, r3, #1
  144df0:	e1a02062 	rrx	r2, r2
  144df4:	e056e002 	subs	lr, r6, r2
  144df8:	e0d5e003 	sbcs	lr, r5, r3
  144dfc:	20466002 	subcs	r6, r6, r2
  144e00:	21a0500e 	movcs	r5, lr
  144e04:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144e08:	e195e006 	orrs	lr, r5, r6
  144e0c:	0a00000d 	beq	144e48 <__aeabi_ddiv+0x134>
  144e10:	e1a05205 	lsl	r5, r5, #4
  144e14:	e1855e26 	orr	r5, r5, r6, lsr #28
  144e18:	e1a06206 	lsl	r6, r6, #4
  144e1c:	e1a03183 	lsl	r3, r3, #3
  144e20:	e1833ea2 	orr	r3, r3, r2, lsr #29
  144e24:	e1a02182 	lsl	r2, r2, #3
  144e28:	e1b0c22c 	lsrs	ip, ip, #4
  144e2c:	1affffdb 	bne	144da0 <__aeabi_ddiv+0x8c>
  144e30:	e3110601 	tst	r1, #1048576	; 0x100000
  144e34:	1a000006 	bne	144e54 <__aeabi_ddiv+0x140>
  144e38:	e1811000 	orr	r1, r1, r0
  144e3c:	e3a00000 	mov	r0, #0
  144e40:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  144e44:	eaffffd5 	b	144da0 <__aeabi_ddiv+0x8c>
  144e48:	e3110601 	tst	r1, #1048576	; 0x100000
  144e4c:	01811000 	orreq	r1, r1, r0
  144e50:	03a00000 	moveq	r0, #0
  144e54:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144e58:	835c0c07 	cmphi	ip, #1792	; 0x700
  144e5c:	8affff4a 	bhi	144b8c <__aeabi_dmul+0xe4>
  144e60:	e055c003 	subs	ip, r5, r3
  144e64:	0056c002 	subseq	ip, r6, r2
  144e68:	01b0c0a0 	lsrseq	ip, r0, #1
  144e6c:	e2b00000 	adcs	r0, r0, #0
  144e70:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144e74:	e8bd8070 	pop	{r4, r5, r6, pc}
  144e78:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144e7c:	e18e1621 	orr	r1, lr, r1, lsr #12
  144e80:	e09440ac 	adds	r4, r4, ip, lsr #1
  144e84:	c074500c 	rsbsgt	r5, r4, ip
  144e88:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144e8c:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144e90:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144e94:	e3a0e000 	mov	lr, #0
  144e98:	e2544001 	subs	r4, r4, #1
  144e9c:	eaffff3a 	b	144b8c <__aeabi_dmul+0xe4>
  144ea0:	e185e006 	orr	lr, r5, r6
  144ea4:	eaffff38 	b	144b8c <__aeabi_dmul+0xe4>
  144ea8:	e00c5a23 	and	r5, ip, r3, lsr #20
  144eac:	e134000c 	teq	r4, ip
  144eb0:	0135000c 	teqeq	r5, ip
  144eb4:	0affff93 	beq	144d08 <__aeabi_dmul+0x260>
  144eb8:	e134000c 	teq	r4, ip
  144ebc:	1a000006 	bne	144edc <__aeabi_ddiv+0x1c8>
  144ec0:	e1904601 	orrs	r4, r0, r1, lsl #12
  144ec4:	1affff8f 	bne	144d08 <__aeabi_dmul+0x260>
  144ec8:	e135000c 	teq	r5, ip
  144ecc:	1affff87 	bne	144cf0 <__aeabi_dmul+0x248>
  144ed0:	e1a00002 	mov	r0, r2
  144ed4:	e1a01003 	mov	r1, r3
  144ed8:	eaffff8a 	b	144d08 <__aeabi_dmul+0x260>
  144edc:	e135000c 	teq	r5, ip
  144ee0:	1a000004 	bne	144ef8 <__aeabi_ddiv+0x1e4>
  144ee4:	e1925603 	orrs	r5, r2, r3, lsl #12
  144ee8:	0affff6d 	beq	144ca4 <__aeabi_dmul+0x1fc>
  144eec:	e1a00002 	mov	r0, r2
  144ef0:	e1a01003 	mov	r1, r3
  144ef4:	eaffff83 	b	144d08 <__aeabi_dmul+0x260>
  144ef8:	e1906081 	orrs	r6, r0, r1, lsl #1
  144efc:	11926083 	orrsne	r6, r2, r3, lsl #1
  144f00:	1affff4d 	bne	144c3c <__aeabi_dmul+0x194>
  144f04:	e1904081 	orrs	r4, r0, r1, lsl #1
  144f08:	1affff78 	bne	144cf0 <__aeabi_dmul+0x248>
  144f0c:	e1925083 	orrs	r5, r2, r3, lsl #1
  144f10:	1affff63 	bne	144ca4 <__aeabi_dmul+0x1fc>
  144f14:	eaffff7b 	b	144d08 <__aeabi_dmul+0x260>

00144f18 <__gedf2>:
  144f18:	e3e0c000 	mvn	ip, #0
  144f1c:	ea000002 	b	144f2c <__cmpdf2+0x4>

00144f20 <__ledf2>:
  144f20:	e3a0c001 	mov	ip, #1
  144f24:	ea000000 	b	144f2c <__cmpdf2+0x4>

00144f28 <__cmpdf2>:
  144f28:	e3a0c001 	mov	ip, #1
  144f2c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  144f30:	e1a0c081 	lsl	ip, r1, #1
  144f34:	e1f0cacc 	mvns	ip, ip, asr #21
  144f38:	e1a0c083 	lsl	ip, r3, #1
  144f3c:	11f0cacc 	mvnsne	ip, ip, asr #21
  144f40:	0a00000e 	beq	144f80 <__cmpdf2+0x58>
  144f44:	e28dd004 	add	sp, sp, #4
  144f48:	e190c081 	orrs	ip, r0, r1, lsl #1
  144f4c:	0192c083 	orrseq	ip, r2, r3, lsl #1
  144f50:	11310003 	teqne	r1, r3
  144f54:	01300002 	teqeq	r0, r2
  144f58:	03a00000 	moveq	r0, #0
  144f5c:	012fff1e 	bxeq	lr
  144f60:	e3700000 	cmn	r0, #0
  144f64:	e1310003 	teq	r1, r3
  144f68:	51510003 	cmppl	r1, r3
  144f6c:	01500002 	cmpeq	r0, r2
  144f70:	21a00fc3 	asrcs	r0, r3, #31
  144f74:	31e00fc3 	mvncc	r0, r3, asr #31
  144f78:	e3800001 	orr	r0, r0, #1
  144f7c:	e12fff1e 	bx	lr
  144f80:	e1a0c081 	lsl	ip, r1, #1
  144f84:	e1f0cacc 	mvns	ip, ip, asr #21
  144f88:	1a000001 	bne	144f94 <__cmpdf2+0x6c>
  144f8c:	e190c601 	orrs	ip, r0, r1, lsl #12
  144f90:	1a000004 	bne	144fa8 <__cmpdf2+0x80>
  144f94:	e1a0c083 	lsl	ip, r3, #1
  144f98:	e1f0cacc 	mvns	ip, ip, asr #21
  144f9c:	1affffe8 	bne	144f44 <__cmpdf2+0x1c>
  144fa0:	e192c603 	orrs	ip, r2, r3, lsl #12
  144fa4:	0affffe6 	beq	144f44 <__cmpdf2+0x1c>
  144fa8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144fac:	e12fff1e 	bx	lr

00144fb0 <__aeabi_cdrcmple>:
  144fb0:	e1a0c000 	mov	ip, r0
  144fb4:	e1a00002 	mov	r0, r2
  144fb8:	e1a0200c 	mov	r2, ip
  144fbc:	e1a0c001 	mov	ip, r1
  144fc0:	e1a01003 	mov	r1, r3
  144fc4:	e1a0300c 	mov	r3, ip
  144fc8:	eaffffff 	b	144fcc <__aeabi_cdcmpeq>

00144fcc <__aeabi_cdcmpeq>:
  144fcc:	e92d4001 	push	{r0, lr}
  144fd0:	ebffffd4 	bl	144f28 <__cmpdf2>
  144fd4:	e3500000 	cmp	r0, #0
  144fd8:	43700000 	cmnmi	r0, #0
  144fdc:	e8bd8001 	pop	{r0, pc}

00144fe0 <__aeabi_dcmpeq>:
  144fe0:	e52de008 	str	lr, [sp, #-8]!
  144fe4:	ebfffff8 	bl	144fcc <__aeabi_cdcmpeq>
  144fe8:	03a00001 	moveq	r0, #1
  144fec:	13a00000 	movne	r0, #0
  144ff0:	e49df008 	ldr	pc, [sp], #8

00144ff4 <__aeabi_dcmplt>:
  144ff4:	e52de008 	str	lr, [sp, #-8]!
  144ff8:	ebfffff3 	bl	144fcc <__aeabi_cdcmpeq>
  144ffc:	33a00001 	movcc	r0, #1
  145000:	23a00000 	movcs	r0, #0
  145004:	e49df008 	ldr	pc, [sp], #8

00145008 <__aeabi_dcmple>:
  145008:	e52de008 	str	lr, [sp, #-8]!
  14500c:	ebffffee 	bl	144fcc <__aeabi_cdcmpeq>
  145010:	93a00001 	movls	r0, #1
  145014:	83a00000 	movhi	r0, #0
  145018:	e49df008 	ldr	pc, [sp], #8

0014501c <__aeabi_dcmpge>:
  14501c:	e52de008 	str	lr, [sp, #-8]!
  145020:	ebffffe2 	bl	144fb0 <__aeabi_cdrcmple>
  145024:	93a00001 	movls	r0, #1
  145028:	83a00000 	movhi	r0, #0
  14502c:	e49df008 	ldr	pc, [sp], #8

00145030 <__aeabi_dcmpgt>:
  145030:	e52de008 	str	lr, [sp, #-8]!
  145034:	ebffffdd 	bl	144fb0 <__aeabi_cdrcmple>
  145038:	33a00001 	movcc	r0, #1
  14503c:	23a00000 	movcs	r0, #0
  145040:	e49df008 	ldr	pc, [sp], #8

00145044 <__aeabi_d2iz>:
  145044:	e1a02081 	lsl	r2, r1, #1
  145048:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  14504c:	2a00000c 	bcs	145084 <__aeabi_d2iz+0x40>
  145050:	5a000009 	bpl	14507c <__aeabi_d2iz+0x38>
  145054:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  145058:	e0532ac2 	subs	r2, r3, r2, asr #21
  14505c:	9a00000a 	bls	14508c <__aeabi_d2iz+0x48>
  145060:	e1a03581 	lsl	r3, r1, #11
  145064:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  145068:	e1833aa0 	orr	r3, r3, r0, lsr #21
  14506c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  145070:	e1a00233 	lsr	r0, r3, r2
  145074:	12600000 	rsbne	r0, r0, #0
  145078:	e12fff1e 	bx	lr
  14507c:	e3a00000 	mov	r0, #0
  145080:	e12fff1e 	bx	lr
  145084:	e1900601 	orrs	r0, r0, r1, lsl #12
  145088:	1a000002 	bne	145098 <__aeabi_d2iz+0x54>
  14508c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  145090:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  145094:	e12fff1e 	bx	lr
  145098:	e3a00000 	mov	r0, #0
  14509c:	e12fff1e 	bx	lr

001450a0 <__aeabi_d2uiz>:
  1450a0:	e1b02081 	lsls	r2, r1, #1
  1450a4:	2a00000a 	bcs	1450d4 <__aeabi_d2uiz+0x34>
  1450a8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  1450ac:	2a00000a 	bcs	1450dc <__aeabi_d2uiz+0x3c>
  1450b0:	5a000007 	bpl	1450d4 <__aeabi_d2uiz+0x34>
  1450b4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  1450b8:	e0532ac2 	subs	r2, r3, r2, asr #21
  1450bc:	4a000008 	bmi	1450e4 <__aeabi_d2uiz+0x44>
  1450c0:	e1a03581 	lsl	r3, r1, #11
  1450c4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  1450c8:	e1833aa0 	orr	r3, r3, r0, lsr #21
  1450cc:	e1a00233 	lsr	r0, r3, r2
  1450d0:	e12fff1e 	bx	lr
  1450d4:	e3a00000 	mov	r0, #0
  1450d8:	e12fff1e 	bx	lr
  1450dc:	e1900601 	orrs	r0, r0, r1, lsl #12
  1450e0:	1a000001 	bne	1450ec <__aeabi_d2uiz+0x4c>
  1450e4:	e3e00000 	mvn	r0, #0
  1450e8:	e12fff1e 	bx	lr
  1450ec:	e3a00000 	mov	r0, #0
  1450f0:	e12fff1e 	bx	lr

001450f4 <__aeabi_ldivmod>:
  1450f4:	e3530000 	cmp	r3, #0
  1450f8:	03520000 	cmpeq	r2, #0
  1450fc:	1a000007 	bne	145120 <__aeabi_ldivmod+0x2c>
  145100:	e3510000 	cmp	r1, #0
  145104:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  145108:	b3a00000 	movlt	r0, #0
  14510c:	ba000002 	blt	14511c <__aeabi_ldivmod+0x28>
  145110:	03500000 	cmpeq	r0, #0
  145114:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  145118:	13e00000 	mvnne	r0, #0
  14511c:	eaffcee4 	b	138cb4 <__aeabi_idiv0>
  145120:	e24dd008 	sub	sp, sp, #8
  145124:	e92d6000 	push	{sp, lr}
  145128:	e3510000 	cmp	r1, #0
  14512c:	ba000006 	blt	14514c <__aeabi_ldivmod+0x58>
  145130:	e3530000 	cmp	r3, #0
  145134:	ba000011 	blt	145180 <__aeabi_ldivmod+0x8c>
  145138:	eb000031 	bl	145204 <__udivmoddi4>
  14513c:	e59de004 	ldr	lr, [sp, #4]
  145140:	e28dd008 	add	sp, sp, #8
  145144:	e8bd000c 	pop	{r2, r3}
  145148:	e12fff1e 	bx	lr
  14514c:	e2700000 	rsbs	r0, r0, #0
  145150:	e0c11081 	sbc	r1, r1, r1, lsl #1
  145154:	e3530000 	cmp	r3, #0
  145158:	ba000011 	blt	1451a4 <__aeabi_ldivmod+0xb0>
  14515c:	eb000028 	bl	145204 <__udivmoddi4>
  145160:	e59de004 	ldr	lr, [sp, #4]
  145164:	e28dd008 	add	sp, sp, #8
  145168:	e8bd000c 	pop	{r2, r3}
  14516c:	e2700000 	rsbs	r0, r0, #0
  145170:	e0c11081 	sbc	r1, r1, r1, lsl #1
  145174:	e2722000 	rsbs	r2, r2, #0
  145178:	e0c33083 	sbc	r3, r3, r3, lsl #1
  14517c:	e12fff1e 	bx	lr
  145180:	e2722000 	rsbs	r2, r2, #0
  145184:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145188:	eb00001d 	bl	145204 <__udivmoddi4>
  14518c:	e59de004 	ldr	lr, [sp, #4]
  145190:	e28dd008 	add	sp, sp, #8
  145194:	e8bd000c 	pop	{r2, r3}
  145198:	e2700000 	rsbs	r0, r0, #0
  14519c:	e0c11081 	sbc	r1, r1, r1, lsl #1
  1451a0:	e12fff1e 	bx	lr
  1451a4:	e2722000 	rsbs	r2, r2, #0
  1451a8:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1451ac:	eb000014 	bl	145204 <__udivmoddi4>
  1451b0:	e59de004 	ldr	lr, [sp, #4]
  1451b4:	e28dd008 	add	sp, sp, #8
  1451b8:	e8bd000c 	pop	{r2, r3}
  1451bc:	e2722000 	rsbs	r2, r2, #0
  1451c0:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1451c4:	e12fff1e 	bx	lr

001451c8 <__aeabi_uldivmod>:
  1451c8:	e3530000 	cmp	r3, #0
  1451cc:	03520000 	cmpeq	r2, #0
  1451d0:	1a000004 	bne	1451e8 <__aeabi_uldivmod+0x20>
  1451d4:	e3510000 	cmp	r1, #0
  1451d8:	03500000 	cmpeq	r0, #0
  1451dc:	13e01000 	mvnne	r1, #0
  1451e0:	13e00000 	mvnne	r0, #0
  1451e4:	eaffceb2 	b	138cb4 <__aeabi_idiv0>
  1451e8:	e24dd008 	sub	sp, sp, #8
  1451ec:	e92d6000 	push	{sp, lr}
  1451f0:	eb000003 	bl	145204 <__udivmoddi4>
  1451f4:	e59de004 	ldr	lr, [sp, #4]
  1451f8:	e28dd008 	add	sp, sp, #8
  1451fc:	e8bd000c 	pop	{r2, r3}
  145200:	e12fff1e 	bx	lr

00145204 <__udivmoddi4>:
  145204:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  145208:	e1510003 	cmp	r1, r3
  14520c:	e24dd008 	sub	sp, sp, #8
  145210:	01500002 	cmpeq	r0, r2
  145214:	e1a09000 	mov	r9, r0
  145218:	e1a0a001 	mov	sl, r1
  14521c:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  145220:	3a00003c 	bcc	145318 <__udivmoddi4+0x114>
  145224:	e1a00002 	mov	r0, r2
  145228:	e3530000 	cmp	r3, #0
  14522c:	e1a01003 	mov	r1, r3
  145230:	016f3f10 	clzeq	r3, r0
  145234:	116f2f13 	clzne	r2, r3
  145238:	02832020 	addeq	r2, r3, #32
  14523c:	e35a0000 	cmp	sl, #0
  145240:	016f3f19 	clzeq	r3, r9
  145244:	116f3f1a 	clzne	r3, sl
  145248:	02833020 	addeq	r3, r3, #32
  14524c:	e0423003 	sub	r3, r2, r3
  145250:	e243c020 	sub	ip, r3, #32
  145254:	e1a07311 	lsl	r7, r1, r3
  145258:	e1877c10 	orr	r7, r7, r0, lsl ip
  14525c:	e263e020 	rsb	lr, r3, #32
  145260:	e1877e30 	orr	r7, r7, r0, lsr lr
  145264:	e1a06310 	lsl	r6, r0, r3
  145268:	e15a0007 	cmp	sl, r7
  14526c:	01590006 	cmpeq	r9, r6
  145270:	2a000030 	bcs	145338 <__udivmoddi4+0x134>
  145274:	e3a01000 	mov	r1, #0
  145278:	e3a02000 	mov	r2, #0
  14527c:	e88d0006 	stm	sp, {r1, r2}
  145280:	e3530000 	cmp	r3, #0
  145284:	0a000026 	beq	145324 <__udivmoddi4+0x120>
  145288:	e1b070a7 	lsrs	r7, r7, #1
  14528c:	e1a06066 	rrx	r6, r6
  145290:	e1a02003 	mov	r2, r3
  145294:	ea000007 	b	1452b8 <__udivmoddi4+0xb4>
  145298:	e0590006 	subs	r0, r9, r6
  14529c:	e0ca1007 	sbc	r1, sl, r7
  1452a0:	e0904000 	adds	r4, r0, r0
  1452a4:	e0a15001 	adc	r5, r1, r1
  1452a8:	e2949001 	adds	r9, r4, #1
  1452ac:	e2a5a000 	adc	sl, r5, #0
  1452b0:	e2522001 	subs	r2, r2, #1
  1452b4:	0a000006 	beq	1452d4 <__udivmoddi4+0xd0>
  1452b8:	e15a0007 	cmp	sl, r7
  1452bc:	01590006 	cmpeq	r9, r6
  1452c0:	2afffff4 	bcs	145298 <__udivmoddi4+0x94>
  1452c4:	e0999009 	adds	r9, r9, r9
  1452c8:	e0aaa00a 	adc	sl, sl, sl
  1452cc:	e2522001 	subs	r2, r2, #1
  1452d0:	1afffff8 	bne	1452b8 <__udivmoddi4+0xb4>
  1452d4:	e89d00c0 	ldm	sp, {r6, r7}
  1452d8:	e1a02339 	lsr	r2, r9, r3
  1452dc:	e0966009 	adds	r6, r6, r9
  1452e0:	e1822e1a 	orr	r2, r2, sl, lsl lr
  1452e4:	e1a0133a 	lsr	r1, sl, r3
  1452e8:	e1822c3a 	orr	r2, r2, sl, lsr ip
  1452ec:	e0a7700a 	adc	r7, r7, sl
  1452f0:	e1a0a001 	mov	sl, r1
  1452f4:	e1a0131a 	lsl	r1, sl, r3
  1452f8:	e1811c12 	orr	r1, r1, r2, lsl ip
  1452fc:	e1a00312 	lsl	r0, r2, r3
  145300:	e0566000 	subs	r6, r6, r0
  145304:	e1811e32 	orr	r1, r1, r2, lsr lr
  145308:	e0c77001 	sbc	r7, r7, r1
  14530c:	e1a09002 	mov	r9, r2
  145310:	e88d00c0 	stm	sp, {r6, r7}
  145314:	ea000002 	b	145324 <__udivmoddi4+0x120>
  145318:	e3a03000 	mov	r3, #0
  14531c:	e3a04000 	mov	r4, #0
  145320:	e88d0018 	stm	sp, {r3, r4}
  145324:	e3580000 	cmp	r8, #0
  145328:	18880600 	stmne	r8, {r9, sl}
  14532c:	e89d0003 	ldm	sp, {r0, r1}
  145330:	e28dd008 	add	sp, sp, #8
  145334:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  145338:	e3a02001 	mov	r2, #1
  14533c:	e1a01c12 	lsl	r1, r2, ip
  145340:	e1811e32 	orr	r1, r1, r2, lsr lr
  145344:	e0599006 	subs	r9, r9, r6
  145348:	e1a02312 	lsl	r2, r2, r3
  14534c:	e58d1004 	str	r1, [sp, #4]
  145350:	e0caa007 	sbc	sl, sl, r7
  145354:	e58d2000 	str	r2, [sp]
  145358:	eaffffc8 	b	145280 <__udivmoddi4+0x7c>

0014535c <_init>:
  14535c:	e92d4001 	push	{r0, lr}
  145360:	e8bd4001 	pop	{r0, lr}
  145364:	e12fff1e 	bx	lr

00145368 <_fini>:
  145368:	e92d4001 	push	{r0, lr}
  14536c:	e8bd4001 	pop	{r0, lr}
  145370:	e12fff1e 	bx	lr
  145374:	706d6f63 	.word	0x706d6f63
  145378:	6974656c 	.word	0x6974656c
  14537c:	00006e6f 	.word	0x00006e6f
  145380:	20746553 	.word	0x20746553
  145384:	6c626f6e 	.word	0x6c626f6e
  145388:	696b636f 	.word	0x696b636f
  14538c:	6520676e 	.word	0x6520676e
  145390:	726f7272 	.word	0x726f7272
  145394:	00000021 	.word	0x00000021
  145398:	61657243 	.word	0x61657243
  14539c:	6c206574 	.word	0x6c206574
  1453a0:	65747369 	.word	0x65747369
  1453a4:	2064666e 	.word	0x2064666e
  1453a8:	6b636f73 	.word	0x6b636f73
  1453ac:	65207465 	.word	0x65207465
  1453b0:	726f7272 	.word	0x726f7272
  1453b4:	7325203a 	.word	0x7325203a
  1453b8:	72726528 	.word	0x72726528
  1453bc:	203a6f6e 	.word	0x203a6f6e
  1453c0:	0a296425 	.word	0x0a296425
  1453c4:	00000000 	.word	0x00000000
  1453c8:	73746553 	.word	0x73746553
  1453cc:	6f6b636f 	.word	0x6f6b636f
  1453d0:	72207470 	.word	0x72207470
  1453d4:	65737565 	.word	0x65737565
  1453d8:	20646461 	.word	0x20646461
  1453dc:	6c696166 	.word	0x6c696166
  1453e0:	00006465 	.word	0x00006465
  1453e4:	646e6942 	.word	0x646e6942
  1453e8:	636f7320 	.word	0x636f7320
  1453ec:	2074656b 	.word	0x2074656b
  1453f0:	6f727265 	.word	0x6f727265
  1453f4:	25203a72 	.word	0x25203a72
  1453f8:	72652873 	.word	0x72652873
  1453fc:	3a6f6e72 	.word	0x3a6f6e72
  145400:	29642520 	.word	0x29642520
  145404:	6466202c 	.word	0x6466202c
  145408:	0a64253d 	.word	0x0a64253d
  14540c:	00000000 	.word	0x00000000
  145410:	7473694c 	.word	0x7473694c
  145414:	73206e65 	.word	0x73206e65
  145418:	656b636f 	.word	0x656b636f
  14541c:	72652074 	.word	0x72652074
  145420:	3a726f72 	.word	0x3a726f72
  145424:	28732520 	.word	0x28732520
  145428:	6e727265 	.word	0x6e727265
  14542c:	25203a6f 	.word	0x25203a6f
  145430:	000a2964 	.word	0x000a2964
  145434:	61657243 	.word	0x61657243
  145438:	63206574 	.word	0x63206574
  14543c:	6e65696c 	.word	0x6e65696c
  145440:	20646674 	.word	0x20646674
  145444:	6b636f73 	.word	0x6b636f73
  145448:	65207465 	.word	0x65207465
  14544c:	726f7272 	.word	0x726f7272
  145450:	7325203a 	.word	0x7325203a
  145454:	72726528 	.word	0x72726528
  145458:	203a6f6e 	.word	0x203a6f6e
  14545c:	0a296425 	.word	0x0a296425
  145460:	00000000 	.word	0x00000000
  145464:	656c6573 	.word	0x656c6573
  145468:	65207463 	.word	0x65207463
  14546c:	726f7272 	.word	0x726f7272
  145470:	00000000 	.word	0x00000000
  145474:	746e6f63 	.word	0x746e6f63
  145478:	65756e69 	.word	0x65756e69
  14547c:	00000000 	.word	0x00000000
  145480:	69745f75 	.word	0x69745f75
  145484:	0072656d 	.word	0x0072656d
  145488:	5f6d7475 	.word	0x5f6d7475
  14548c:	6574756d 	.word	0x6574756d
  145490:	00000078 	.word	0x00000078
  145494:	00007325 	.word	0x00007325
  145498:	72657355 	.word	0x72657355
  14549c:	3a505041 	.word	0x3a505041
  1454a0:	73252820 	.word	0x73252820
  1454a4:	73612029 	.word	0x73612029
  1454a8:	74726573 	.word	0x74726573
  1454ac:	206e6f69 	.word	0x206e6f69
  1454b0:	6c696166 	.word	0x6c696166
  1454b4:	61206465 	.word	0x61206465
  1454b8:	75662074 	.word	0x75662074
  1454bc:	6974636e 	.word	0x6974636e
  1454c0:	253a6e6f 	.word	0x253a6e6f
  1454c4:	6c202c73 	.word	0x6c202c73
  1454c8:	20656e69 	.word	0x20656e69
  1454cc:	626d756e 	.word	0x626d756e
  1454d0:	253a7265 	.word	0x253a7265
  1454d4:	000a2064 	.word	0x000a2064
  1454d8:	6e616863 	.word	0x6e616863
  1454dc:	206c656e 	.word	0x206c656e
  1454e0:	30203d3e 	.word	0x30203d3e
  1454e4:	00000000 	.word	0x00000000
  1454e8:	5049776c 	.word	0x5049776c
  1454ec:	0074694b 	.word	0x0074694b
  1454f0:	61746164 	.word	0x61746164
  1454f4:	00646e49 	.word	0x00646e49
  1454f8:	6c207325 	.word	0x6c207325
  1454fc:	20656e69 	.word	0x20656e69
  145500:	73206425 	.word	0x73206425
  145504:	74646e65 	.word	0x74646e65
  145508:	7265206f 	.word	0x7265206f
  14550c:	0a726f72 	.word	0x0a726f72
  145510:	00000000 	.word	0x00000000
  145514:	5049776c 	.word	0x5049776c
  145518:	2074694b 	.word	0x2074694b
  14551c:	67617355 	.word	0x67617355
  145520:	090a3a65 	.word	0x090a3a65
  145524:	5049776c 	.word	0x5049776c
  145528:	2074694b 	.word	0x2074694b
  14552c:	20202020 	.word	0x20202020
  145530:	20202020 	.word	0x20202020
  145534:	20202020 	.word	0x20202020
  145538:	203a2020 	.word	0x203a2020
  14553c:	6e757220 	.word	0x6e757220
  145540:	49776c20 	.word	0x49776c20
  145544:	74694b50 	.word	0x74694b50
  145548:	6177202c 	.word	0x6177202c
  14554c:	66207469 	.word	0x66207469
  145550:	6520726f 	.word	0x6520726f
  145554:	65646874 	.word	0x65646874
  145558:	6f742076 	.word	0x6f742076
  14555c:	74746120 	.word	0x74746120
  145560:	0a686361 	.word	0x0a686361
  145564:	49776c09 	.word	0x49776c09
  145568:	74694b50 	.word	0x74694b50
  14556c:	74746120 	.word	0x74746120
  145570:	20686361 	.word	0x20686361
  145574:	653c2020 	.word	0x653c2020
  145578:	3a3e6874 	.word	0x3a3e6874
  14557c:	74612020 	.word	0x74612020
  145580:	68636174 	.word	0x68636174
  145584:	65687420 	.word	0x65687420
  145588:	76656420 	.word	0x76656420
  14558c:	20656369 	.word	0x20656369
  145590:	6874653c 	.word	0x6874653c
  145594:	6f74203e 	.word	0x6f74203e
  145598:	49776c20 	.word	0x49776c20
  14559c:	74694b50 	.word	0x74694b50
  1455a0:	776c090a 	.word	0x776c090a
  1455a4:	694b5049 	.word	0x694b5049
  1455a8:	65642074 	.word	0x65642074
  1455ac:	61747461 	.word	0x61747461
  1455b0:	3c206863 	.word	0x3c206863
  1455b4:	3e687465 	.word	0x3e687465
  1455b8:	6420203a 	.word	0x6420203a
  1455bc:	74612d65 	.word	0x74612d65
  1455c0:	68636174 	.word	0x68636174
  1455c4:	65687420 	.word	0x65687420
  1455c8:	76656420 	.word	0x76656420
  1455cc:	20656369 	.word	0x20656369
  1455d0:	6874653c 	.word	0x6874653c
  1455d4:	7266203e 	.word	0x7266203e
  1455d8:	6c206d6f 	.word	0x6c206d6f
  1455dc:	4b504977 	.word	0x4b504977
  1455e0:	090a7469 	.word	0x090a7469
  1455e4:	5049776c 	.word	0x5049776c
  1455e8:	2074694b 	.word	0x2074694b
  1455ec:	61666564 	.word	0x61666564
  1455f0:	20746c75 	.word	0x20746c75
  1455f4:	74653c20 	.word	0x74653c20
  1455f8:	203a3e68 	.word	0x203a3e68
  1455fc:	74657320 	.word	0x74657320
  145600:	74653c20 	.word	0x74653c20
  145604:	61203e68 	.word	0x61203e68
  145608:	68742073 	.word	0x68742073
  14560c:	65642065 	.word	0x65642065
  145610:	6c756166 	.word	0x6c756166
  145614:	65642074 	.word	0x65642074
  145618:	65636976 	.word	0x65636976
  14561c:	776c090a 	.word	0x776c090a
  145620:	694b5049 	.word	0x694b5049
  145624:	74732074 	.word	0x74732074
  145628:	73757461 	.word	0x73757461
  14562c:	20202020 	.word	0x20202020
  145630:	20202020 	.word	0x20202020
  145634:	7320203a 	.word	0x7320203a
  145638:	20776f68 	.word	0x20776f68
  14563c:	20656874 	.word	0x20656874
  145640:	74617473 	.word	0x74617473
  145644:	6f207375 	.word	0x6f207375
  145648:	75722066 	.word	0x75722066
  14564c:	6e696e6e 	.word	0x6e696e6e
  145650:	776c2067 	.word	0x776c2067
  145654:	494b5049 	.word	0x494b5049
  145658:	00000074 	.word	0x00000074
  14565c:	5049776c 	.word	0x5049776c
  145660:	3a74694b 	.word	0x3a74694b
  145664:	61747320 	.word	0x61747320
  145668:	20737472 	.word	0x20737472
  14566c:	72206f74 	.word	0x72206f74
  145670:	61206e75 	.word	0x61206e75
  145674:	68742073 	.word	0x68742073
  145678:	65732065 	.word	0x65732065
  14567c:	72657672 	.word	0x72657672
  145680:	00000000 	.word	0x00000000
  145684:	2e2e2e20 	.word	0x2e2e2e20
  145688:	6c696166 	.word	0x6c696166
  14568c:	00216465 	.word	0x00216465
  145690:	2e2e2e20 	.word	0x2e2e2e20
  145694:	70696b73 	.word	0x70696b73
  145698:	21646570 	.word	0x21646570
  14569c:	726c4120 	.word	0x726c4120
  1456a0:	79646165 	.word	0x79646165
  1456a4:	696e6920 	.word	0x696e6920
  1456a8:	6c616974 	.word	0x6c616974
  1456ac:	64657a69 	.word	0x64657a69
  1456b0:	00000000 	.word	0x00000000
  1456b4:	2e2e2e20 	.word	0x2e2e2e20
  1456b8:	63637573 	.word	0x63637573
  1456bc:	65646565 	.word	0x65646565
  1456c0:	00002164 	.word	0x00002164
  1456c4:	5049776c 	.word	0x5049776c
  1456c8:	3a74694b 	.word	0x3a74694b
  1456cc:	696e6920 	.word	0x696e6920
  1456d0:	74652074 	.word	0x74652074
  1456d4:	65642068 	.word	0x65642068
  1456d8:	2e2e2e76 	.word	0x2e2e2e76
  1456dc:	00000000 	.word	0x00000000
  1456e0:	63637573 	.word	0x63637573
  1456e4:	65646565 	.word	0x65646565
  1456e8:	00000064 	.word	0x00000064
  1456ec:	61747461 	.word	0x61747461
  1456f0:	00006863 	.word	0x00006863
  1456f4:	5049776c 	.word	0x5049776c
  1456f8:	3a74694b 	.word	0x3a74694b
  1456fc:	74746120 	.word	0x74746120
  145700:	20686361 	.word	0x20686361
  145704:	69766564 	.word	0x69766564
  145708:	25206563 	.word	0x25206563
  14570c:	00000a73 	.word	0x00000a73
  145710:	6e6e6163 	.word	0x6e6e6163
  145714:	6f20746f 	.word	0x6f20746f
  145718:	206e6570 	.word	0x206e6570
  14571c:	61746164 	.word	0x61746164
  145720:	6168635f 	.word	0x6168635f
  145724:	6c656e6e 	.word	0x6c656e6e
  145728:	6c70202c 	.word	0x6c70202c
  14572c:	65736165 	.word	0x65736165
  145730:	6b616d20 	.word	0x6b616d20
  145734:	75732065 	.word	0x75732065
  145738:	6c206572 	.word	0x6c206572
  14573c:	4b504977 	.word	0x4b504977
  145740:	73207469 	.word	0x73207469
  145744:	65767265 	.word	0x65767265
  145748:	73692072 	.word	0x73692072
  14574c:	6e757220 	.word	0x6e757220
  145750:	676e696e 	.word	0x676e696e
  145754:	00000021 	.word	0x00000021
  145758:	74616564 	.word	0x74616564
  14575c:	68636174 	.word	0x68636174
  145760:	00000000 	.word	0x00000000
  145764:	5049776c 	.word	0x5049776c
  145768:	3a74694b 	.word	0x3a74694b
  14576c:	2d656420 	.word	0x2d656420
  145770:	61747461 	.word	0x61747461
  145774:	64206863 	.word	0x64206863
  145778:	63697665 	.word	0x63697665
  14577c:	73252065 	.word	0x73252065
  145780:	0000000a 	.word	0x0000000a
  145784:	61666564 	.word	0x61666564
  145788:	00746c75 	.word	0x00746c75
  14578c:	5049776c 	.word	0x5049776c
  145790:	3a74694b 	.word	0x3a74694b
  145794:	74657320 	.word	0x74657320
  145798:	65687420 	.word	0x65687420
  14579c:	66656420 	.word	0x66656420
  1457a0:	746c7561 	.word	0x746c7561
  1457a4:	76656420 	.word	0x76656420
  1457a8:	20656369 	.word	0x20656369
  1457ac:	00007325 	.word	0x00007325
  1457b0:	74617473 	.word	0x74617473
  1457b4:	00007375 	.word	0x00007375
  1457b8:	5049776c 	.word	0x5049776c
  1457bc:	3a74694b 	.word	0x3a74694b
  1457c0:	65687420 	.word	0x65687420
  1457c4:	61747320 	.word	0x61747320
  1457c8:	20737574 	.word	0x20737574
  1457cc:	7420666f 	.word	0x7420666f
  1457d0:	61206568 	.word	0x61206568
  1457d4:	63617474 	.word	0x63617474
  1457d8:	20646568 	.word	0x20646568
  1457dc:	69766564 	.word	0x69766564
  1457e0:	20736563 	.word	0x20736563
  1457e4:	66207361 	.word	0x66207361
  1457e8:	6f6c6c6f 	.word	0x6f6c6c6f
  1457ec:	00007377 	.word	0x00007377

001457f0 <__func__.9579>:
  1457f0:	63617473 75725f6b 0000006e              stack_run...

001457fc <__FUNCTION__.6247>:
  1457fc:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  14580c:	00000000                                ....

00145810 <__FUNCTION__.6253>:
  145810:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  145820:	00000079                                y...

00145824 <__FUNCTION__.6242>:
  145824:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145834:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  145844:	6f6c6c61 65746163 73206120 65726168     allocate a share
  145854:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  145864:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  145874:	65746163 68732064 64657261 6d656d20     cated shared mem
  145884:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  145894:	76206120 64696c61 64646120 73736572      a valid address
  1458a4:	00000021                                !...

001458a8 <__func__.6282>:
  1458a8:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  1458b8:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  1458c8:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  1458d8:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  1458e8:	20732520 6c696166 000a6465               %s failed..

001458f4 <__FUNCTION__.5856>:
  1458f4:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145904:	00000000                                ....

00145908 <__FUNCTION__.5845>:
  145908:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145918:	6365725f 00000076                       _recv...

00145920 <unet_socket_ops>:
  145920:	00108e10 00108e8c 00108eb8 00108ef0     ................
  145930:	00108f20 00108f58 00108f94 00109044      ...X.......D...
  145940:	001090d8 00109120 00109168 00109198     .... ...h.......
  145950:	001091d0 001048d4 00000000              .....H......

0014595c <unet_netdb_ops>:
  14595c:	00109278 001093b8 001093e8 00109428     x...........(...

0014596c <unet_inet_family>:
  14596c:	00000002 00000002 00145920 0014595c     ........ Y..\Y..
  14597c:	6474656e 00007665                       netdev..

00145984 <__FUNCTION__.7159>:
  145984:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  145994:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  1459a4:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  1459b4:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  1459c4:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  1459d4:	69766544 00006563 69206f54 6974696e     Device..To initi
  1459e4:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  1459f4:	6c696166 202e6465 20656854 6f727265     failed. The erro
  145a04:	6f632072 69206564 6c252073 00000a64     r code is %ld...

00145a14 <__FUNCTION__.6035>:
  145a14:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  145a24:	74736967 00007265                       gister..

00145a2c <__FUNCTION__.6044>:
  145a2c:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  145a3c:	00000000                                ....

00145a40 <__FUNCTION__.6049>:
  145a40:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  145a50:	00000065                                e...

00145a54 <__FUNCTION__.6055>:
  145a54:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  145a64:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  145a74:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  145a84:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  145a94:	206b726f 65746e69 63616672 65642065     ork interface de
  145aa4:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145ab4:	74726f70 206f7420 20746573 74617473     port to set stat
  145ac4:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  145ad4:	7774656e 206b726f 65746e69 63616672     network interfac
  145ae4:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145af4:	70757320 74726f70 206f7420 20746573      support to set 
  145b04:	50434844 61747320 2e737574 00000000     DHCP status.....
  145b14:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  145b24:	206b726f 65746e69 63616672 65642065     ork interface de
  145b34:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145b44:	74726f70 206f7420 20746573 61205049     port to set IP a
  145b54:	65726464 002e7373 20656854 7774656e     ddress..The netw
  145b64:	206b726f 65746e69 63616672 65642065     ork interface de
  145b74:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  145b84:	69626170 7974696c 20736920 62616e65     pability is enab
  145b94:	202c656c 20746f6e 70707573 2074726f     le, not support 
  145ba4:	20746573 61205049 65726464 002e7373     set IP address..
  145bb4:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  145bc4:	206b726f 65746e69 63616672 65642065     ork interface de
  145bd4:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145be4:	74726f70 206f7420 20746573 6d74656e     port to set netm
  145bf4:	206b7361 72646461 2e737365 00000000     ask address.....
  145c04:	20656854 7774656e 206b726f 65746e69     The network inte
  145c14:	63616672 65642065 65636976 29732528     rface device(%s)
  145c24:	43484420 61632050 69626170 7974696c      DHCP capability
  145c34:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  145c44:	70707573 2074726f 20746573 6d74656e     support set netm
  145c54:	206b7361 72646461 2e737365 00000000     ask address.....
  145c64:	00007767 20656854 7774656e 206b726f     gw..The network 
  145c74:	65746e69 63616672 65642065 65636976     interface device
  145c84:	29732528 746f6e20 70757320 74726f70     (%s) not support
  145c94:	206f7420 20746573 65746167 20796177      to set gateway 
  145ca4:	72646461 2e737365 00000000 20656854     address.....The 
  145cb4:	7774656e 206b726f 65746e69 63616672     network interfac
  145cc4:	65642065 65636976 29732528 43484420     e device(%s) DHC
  145cd4:	61632050 69626170 7974696c 20736920     P capability is 
  145ce4:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  145cf4:	2074726f 20746573 65746167 20796177     ort set gateway 
  145d04:	72646461 2e737365 00000000 5f736e64     address.....dns_
  145d14:	76726573 00007265 20656854 626d756e     server..The numb
  145d24:	6f207265 4e442066 65732053 72657672     er of DNS server
  145d34:	64252873 65732029 78652074 64656563     s(%d) set exceed
  145d44:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  145d54:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  145d64:	7774656e 206b726f 65746e69 63616672     network interfac
  145d74:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145d84:	70757320 74726f70 206f7420 20746573      support to set 
  145d94:	20534e44 76726573 61207265 65726464     DNS server addre
  145da4:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145db4:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145dc4:	0000006b                                k...

00145dc8 <__FUNCTION__.6920>:
  145dc8:	6474656e 725f7665 73696765 00726574     netdev_register.

00145dd8 <__FUNCTION__.6929>:
  145dd8:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145de8:	00000072                                r...

00145dec <__FUNCTION__.6975>:
  145dec:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145dfc:	00000074                                t...

00145e00 <__FUNCTION__.6982>:
  145e00:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145e10 <__FUNCTION__.6986>:
  145e10:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145e20 <__FUNCTION__.6991>:
  145e20:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145e30:	0064656c                                led.

00145e34 <__FUNCTION__.6996>:
  145e34:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  145e44:	00000072                                r...

00145e48 <__FUNCTION__.7001>:
  145e48:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  145e58:	00006b73                                sk..

00145e5c <__FUNCTION__.7006>:
  145e5c:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00145e6c <__FUNCTION__.7012>:
  145e6c:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  145e7c:	65767265 00000072                       erver...

00145e84 <__FUNCTION__.7017>:
  145e84:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  145e94:	61635f73 61626c6c 00006b63              s_callback..

00145ea0 <__FUNCTION__.7022>:
  145ea0:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145eb0:	6c6c6163 6b636162 00000000              callback....

00145ebc <__FUNCTION__.7027>:
  145ebc:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ecc:	7465735f 6170695f 00726464              _set_ipaddr.

00145ed8 <__FUNCTION__.7032>:
  145ed8:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ee8:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145ef8 <__FUNCTION__.7037>:
  145ef8:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145f08:	7465735f 0077675f                       _set_gw.

00145f10 <__FUNCTION__.7044>:
  145f10:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145f20:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145f30:	00000030                                0...

00145f34 <__FUNCTION__.5841>:
  145f34:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  145f44:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  145f54:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  145f64:	6f662079 6f732072 74656b63 62617420     y for socket tab
  145f74:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  145f84:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  145f94:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  145fa4:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  145fb4:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  145fc4:	20657a69 63637573 2e737365 00000000     ize success.....
  145fd4:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  145fe4:	00006772 20706553 32203220 00323230     rg..Sep  2 2022.
  145ff4:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  146004:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  146014:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  146024:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  146034:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  146044:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  146054:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  146064:	74656e20 6b726f77 746e6920 61667265      network interfa
  146074:	64206563 63697665 79622065 6f727020     ce device by pro
  146084:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  146094:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  1460a4:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  1460b4:	73696765 65726574 61662064 64656c69     egistered failed
  1460c4:	6572202c 6e727574 72726520 2520726f     , return error %
  1460d4:	00002e64 656d616e 00000000 204c4153     d...name....SAL 
  1460e4:	6b636f73 70207465 6f746f72 206c6f63     socket protocol 
  1460f4:	696d6166 6920796c 7475706e 69616620     family input fai
  146104:	2c64656c 74657220 206e7275 6f727265     led, return erro
  146114:	64252072 0000002e                       r %d....

0014611c <__FUNCTION__.6969>:
  14611c:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

0014612c <__FUNCTION__.6974>:
  14612c:	5f6c6173 6b636f6c 00000000              sal_lock....

00146138 <__FUNCTION__.7032>:
  146138:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00146148 <__FUNCTION__.7057>:
  146148:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  146158:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  146168:	0a726f72 00000000                       ror.....

00146170 <__func__.6506>:
  146170:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  146180:	65726c61 20796461 74696e69 00000a2e     already init....
  146190:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  1461a0:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  1461b0:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  1461c0:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  1461d0:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  1461e0:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  1461f0:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  146200:	44465f53 47414d5f 00004349              S_FD_MAGIC..

0014620c <__FUNCTION__.6409>:
  14620c:	5f736664 6b636f6c 00000000              dfs_lock....

00146218 <__FUNCTION__.6417>:
  146218:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

00146224 <__FUNCTION__.6470>:
  146224:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  146234:	5f736664 0072676d                       dfs_mgr.

0014623c <_net_fops>:
  14623c:	0010a3f0 0010a26c 0010a2e0 0010a368     ....l.......h...
  14624c:	0010a448 7069776c 73797320 206d6574     H...lwip system 
  14625c:	65726c61 20796461 74696e69 00000a2e     already init....
  14626c:	656e6f64 00000000 6c696146 74206465     done....Failed t
  14627c:	7263206f 65746165 6d657320 6f687061     o create semapho
  14628c:	00006572 76726573 73656369 49776c2f     re..services/lwI
  14629c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1462ac:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  1462bc:	00632e68 69706374 6e695f70 5f747570     h.c.tcpip_input_
  1462cc:	656d6974 00000072 006d6573 64257325     timer...sem.%s%d
  1462dc:	00000000 0000756d 20746573 786f626d     ....mu..set mbox
  1462ec:	6f6c675f 006c6162 786f626d 00000000     _global.mbox....
  1462fc:	6d5f7472 65725f62 72207663 72757465     rt_mb_recv retur
  14630c:	2064656e 68746977 72726520 0021726f     ned with error!.
  14631c:	3d212074 5f545220 4c4c554e 00000000     t != RT_NULL....
  14632c:	7373410a 69747265 203a6e6f 69206425     .Assertion: %d i
  14633c:	7325206e 0000000a 00000030              n %s....0...

00146348 <__FUNCTION__.7500>:
  146348:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

00146358 <__FUNCTION__.7512>:
  146358:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  146368:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  146378:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  146388:	00000000 76726573 73656369 49776c2f     ....services/lwI
  146398:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1463a8:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  1463b8:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  1463c8:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  1463d8:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  1463e8:	6e646c75 65207427 74736978 00000000     uldn't exist....
  1463f8:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  146408:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  146418:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146428:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  146438:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146448:	64696c61 64646120 00000072 6374656e     alid addr...netc
  146458:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146468:	64696c61 726f7020 00000074 6374656e     alid port...netc
  146478:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  146488:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  146498:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  1464a8:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  1464b8:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  1464c8:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1464d8:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  1464e8:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1464f8:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146508:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  146518:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146528:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146538:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146548:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  146558:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146568:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  146578:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  146588:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  146598:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  1465a8:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  1465b8:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  1465c8:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  1465d8:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  1465e8:	74697277 69203a65 6c61766e 63206469     write: invalid c
  1465f8:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  146608:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  146618:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146628:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  146638:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  146648:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  146658:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  146668:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  146678:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  146688:	61206469 00726464 76726573 73656369     id addr.services
  146698:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1466a8:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  1466b8:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  1466c8:	73756d20 61682074 61206576 62637020      must have a pcb
  1466d8:	67726120 6e656d75 00000074 76636572      argument...recv
  1466e8:	7064755f 73756d20 61682074 61206576     _udp must have a
  1466f8:	7261206e 656d7567 0000746e 76636572     n argument..recv
  146708:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  146718:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  146728:	7063745f 73756d20 61682074 61206576     _tcp must have a
  146738:	62637020 67726120 6e656d75 00000074      pcb argument...
  146748:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  146758:	61206576 7261206e 656d7567 0000746e     ve an argument..
  146768:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  146778:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  146788:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  146798:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  1467a8:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  1467b8:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  1467c8:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  1467d8:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  1467e8:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  1467f8:	726c6120 79646165 6c6c6120 7461636f      already allocat
  146808:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  146818:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  146828:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  146838:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  146848:	20646574 7374756f 20656469 73696874     ted outside this
  146858:	6e756620 6f697463 0000006e 76636572      function...recv
  146868:	786f626d 73756d20 65622074 61656420     mbox must be dea
  146878:	636f6c6c 64657461 66656220 2065726f     llocated before 
  146888:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  146898:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  1468a8:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  1468b8:	7461636f 62206465 726f6665 61632065     ocated before ca
  1468c8:	6e696c6c 68742067 66207369 74636e75     lling this funct
  1468d8:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  1468e8:	00000000 73696874 20736920 20726f66     ....this is for 
  1468f8:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  146908:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  146918:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  146928:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  146938:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  146948:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  146958:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  146968:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  146978:	6374656e 206e6e6f 74617473 72652065     netconn state er
  146988:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  146998:	7463656e 206e6920 676f7270 73736572     nect in progress
  1469a8:	00000000 65726c61 20796461 74697277     ....already writ
  1469b8:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  1469c8:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  1469d8:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  1469e8:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  1469f8:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  146a08:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  146a18:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  146a28:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  146a38:	6e6f6320 7463656e 61747320 65206574      connect state e
  146a48:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  146a58:	6374656e 206e6e6f 65707974 00000000     netconn type....
  146a68:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  146a78:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  146a88:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  146a98:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  146aa8:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  146ab8:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  146ac8:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  146ad8:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  146ae8:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  146af8:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  146b08:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  146b18:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  146b28:	00000000                                ....

00146b2c <err_to_errno_table>:
  146b2c:	00000000 0000000c 00000069 0000000b     ........i.......
  146b3c:	00000071 00000073 00000016 0000000b     q...s...........
  146b4c:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  146b5c:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  146b6c:	00000005 76726573 73656369 49776c2f     ....services/lwI
  146b7c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146b8c:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  146b9c:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  146bac:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146bbc:	63656863 6874206b 66207461 74737269     check that first
  146bcc:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146bdc:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146bec:	766e6920 64696c61 66756220 00000000      invalid buf....
  146bfc:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146c0c:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146c1c:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146c2c:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146c3c:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146c4c:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  146c5c:	64696c61 66756220 00000000 6274656e     alid buf....netb
  146c6c:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146c7c:	74616420 72747061 00000000 6274656e      dataptr....netb
  146c8c:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146c9c:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  146cac:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146cbc:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146ccc:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146cdc:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146cec:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146cfc:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d0c:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146d1c:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146d2c:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146d3c:	7361656c 65722065 74726f70 69687420     lease report thi
  146d4c:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  146d5c:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  146d6c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d7c:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  146d8c:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  146d9c:	69207465 7865646e 00000000 72646461     et index....addr
  146dac:	6c617620 62206469 61207475 6c726464      valid but addrl
  146dbc:	4e206e65 004c4c55 7069776c 6e69625f     en NULL.lwip_bin
  146dcc:	69203a64 6c61766e 61206469 65726464     d: invalid addre
  146ddc:	00007373 6b636f73 616c3e2d 61647473     ss..sock->lastda
  146dec:	3d206174 554e203d 00004c4c 7069776c     ta == NULL..lwip
  146dfc:	6e6f635f 7463656e 6e69203a 696c6176     _connect: invali
  146e0c:	64612064 73657264 00000073 20667562     d address...buf 
  146e1c:	4e203d21 004c4c55 61766e69 2064696c     != NULL.invalid 
  146e2c:	79706f63 2c6e656c 6e656c20 756f7720     copylen, len wou
  146e3c:	7520646c 7265646e 776f6c66 00000000     ld underflow....
  146e4c:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e5c:	696c6176 736d2064 72646867 00000000     valid msghdr....
  146e6c:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e7c:	696c6176 736d2064 72646867 766f6920     valid msghdr iov
  146e8c:	00000000 7069776c 6e65735f 67736d64     ....lwip_sendmsg
  146e9c:	6e69203a 696c6176 736d2064 72646867     : invalid msghdr
  146eac:	6d616e20 00000065 5f766f69 206e656c      name...iov_len 
  146ebc:	3175203c 00745f36 7069776c 6e65735f     < u16_t.lwip_sen
  146ecc:	3a6f7464 7a697320 756d2065 66207473     dto: size must f
  146edc:	69207469 3175206e 00745f36 7069776c     it in u16_t.lwip
  146eec:	6e65735f 3a6f7464 766e6920 64696c61     _sendto: invalid
  146efc:	64646120 73736572 00000000 6165726e      address....nrea
  146f0c:	3e207964 0030203d 6b636f73 65733e2d     dy >= 0.sock->se
  146f1c:	7463656c 6961775f 676e6974 30203e20     lect_waiting > 0
  146f2c:	00000000 656c6573 635f7463 72702e62     ....select_cb.pr
  146f3c:	3d207665 554e203d 00004c4c 656c6573     ev == NULL..sele
  146f4c:	635f7463 72702e62 21207665 554e203d     ct_cb.prev != NU
  146f5c:	00004c4c 6e6b6e75 206e776f 6e657665     LL..unknown even
  146f6c:	00000074 69706374 68745f70 64616572     t...tcpip_thread
  146f7c:	6e69203a 696c6176 656d2064 67617373     : invalid messag
  146f8c:	00000065 76726573 73656369 49776c2f     e...services/lwI
  146f9c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146fac:	2f637273 2f697061 69706374 00632e70     src/api/tcpip.c.
  146fbc:	61766e49 2064696c 786f626d 00000000     Invalid mbox....
  146fcc:	6c696166 74206465 7263206f 65746165     failed to create
  146fdc:	70637420 745f7069 61657268 626d2064      tcpip_thread mb
  146fec:	0000786f 6c696166 74206465 7263206f     ox..failed to cr
  146ffc:	65746165 636f6c20 63745f6b 5f706970     eate lock_tcpip_
  14700c:	65726f63 00000000 69706374 00000070     core....tcpip...
  14701c:	7778797a 73747576 6f707172 6b6c6d6e     zyxwvutsrqponmlk
  14702c:	6768696a 63646566 38396162 34353637     jihgfedcba987654
  14703c:	30313233 34333231 38373635 63626139     3210123456789abc
  14704c:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
  14705c:	77767574 007a7978                       tuvwxyz.

00147064 <dns_mquery_v4group>:
  147064:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  147074:	6f207475 72612066 00796172 76726573     ut of array.serv
  147084:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147094:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1470a4:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  1470b4:	20786564 2074756f 6220666f 646e756f     dex out of bound
  1470c4:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  1470d4:	6c626174 6e652065 20797274 74617473     table entry stat
  1470e4:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  1470f4:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  147104:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  147114:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  147124:	0000632e 5f574152 00424350              .c..RAW_PCB.

00147130 <memp_RAW_PCB>:
  147130:	00147128 0014e0ec 0004001c 00151bb8     (q..............
  147140:	0014e0fc 5f504455 00424350              ....UDP_PCB.

0014714c <memp_UDP_PCB>:
  14714c:	00147144 0014e100 00080028 0015ba2c     Dq......(...,...
  14715c:	0014e110 5f504354 00424350              ....TCP_PCB.

00147168 <memp_TCP_PCB>:
  147168:	00147160 0014e114 000800a4 0015c218     `q..............
  147178:	0014e124 5f504354 5f424350 5453494c     $...TCP_PCB_LIST
  147188:	00004e45                                EN..

0014718c <memp_TCP_PCB_LISTEN>:
  14718c:	0014717c 0014e128 00080020 0015b4cc     |q..(... .......
  14719c:	0014e138 5f504354 00474553              8...TCP_SEG.

001471a8 <memp_TCP_SEG>:
  1471a8:	001471a0 0014e13c 00280010 00151cdc     .q..<.....(.....
  1471b8:	0014e14c 53414552 54414453 00000041     L...REASSDATA...

001471c8 <memp_REASSDATA>:
  1471c8:	001471bc 0014e150 000a0020 0015b730     .q..P... ...0...
  1471d8:	0014e160 47415246 5542505f 00000046     `...FRAG_PBUF...

001471e8 <memp_FRAG_PBUF>:
  1471e8:	001471dc 0014e164 000f0018 00158ac4     .q..d...........
  1471f8:	0014e174 4254454e 00004655              t...NETBUF..

00147204 <memp_NETBUF>:
  147204:	001471fc 0014e178 00400010 0014f794     .q..x.....@.....
  147214:	0014e188 4354454e 004e4e4f              ....NETCONN.

00147220 <memp_NETCONN>:
  147220:	00147218 0014e18c 00080040 0015bcd0     .r......@.......
  147230:	0014e19c 49504354 534d5f50 50415f47     ....TCPIP_MSG_AP
  147240:	00000049                                I...

00147244 <memp_TCPIP_MSG_API>:
  147244:	00147234 0014e1a0 00400010 00158ec4     4r........@.....
  147254:	0014e1b0 49504354 534d5f50 4e495f47     ....TCPIP_MSG_IN
  147264:	00544b50                                PKT.

00147268 <memp_TCPIP_MSG_INPKT>:
  147268:	00147258 0014e1b4 00400010 00150698     Xr........@.....
  147278:	0014e1c4 5f505241 55455551 00000045     ....ARP_QUEUE...

00147288 <memp_ARP_QUEUE>:
  147288:	0014727c 0014e1c8 001e0008 0015159c     |r..............
  147298:	0014e1d8 504d4749 4f52475f 00005055     ....IGMP_GROUP..

001472a8 <memp_IGMP_GROUP>:
  1472a8:	0014729c 0014e1dc 00080010 0015c034     .r..........4...
  1472b8:	0014e1ec 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

001472c8 <memp_SYS_TIMEOUT>:
  1472c8:	001472bc 0014e1f0 00070010 0015c89c     .r..............
  1472d8:	0014e200 4454454e 00000042              ....NETDB...

001472e4 <memp_NETDB>:
  1472e4:	001472dc 0014e204 00010134 0014f630     .r......4...0...
  1472f4:	0014e214 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  147304:	00000000                                ....

00147308 <memp_PBUF>:
  147308:	001472f8 0014e218 00400030 00159dc8     .r......0.@.....
  147318:	0014e228 46554250 4f4f505f 0000004c     (...PBUF_POOL...

00147328 <memp_PBUF_POOL>:
  147328:	0014731c 0014e22c 0010061c 00152640     .s..,.......@&..
  147338:	0014e23c                                <...

0014733c <memp_pools>:
  14733c:	00147130 0014714c 00147168 0014718c     0q..Lq..hq...q..
  14734c:	001471a8 001471c8 001471e8 00147204     .q...q...q...r..
  14735c:	00147220 00147244 00147268 00147288      r..Dr..hr...r..
  14736c:	001472a8 001472c8 001472e4 00147308     .r...r...r...s..
  14737c:	00147328 76726573 73656369 49776c2f     (s..services/lwI
  14738c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14739c:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  1473ac:	65746564 64657463 6d656d20 766f2070     detected memp ov
  1473bc:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  14742c:	65746564 64657463 6d656d20 6e752070     detected memp un
  14743c:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  1474ac:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  1474bc:	72702070 7265706f 6120796c 6e67696c     p properly align
  1474cc:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  1474dc:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  1474ec:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  1474fc:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  14750c:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  14751c:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  14752c:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  14753c:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  14754c:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  14755c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14756c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14757c:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  14758c:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  14759c:	6d207473 20747375 6f736c61 20656220     st must also be 
  1475ac:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  1475bc:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  1475cc:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  1475dc:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  1475ec:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  1475fc:	72696620 21207473 616c203d 00217473      first != last!.
  14760c:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  14761c:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  14762c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14763c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14764c:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  14765c:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  14766c:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  14767c:	64656e67 00000000 63656863 2d70206b     gned....check p-
  14768c:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  14769c:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  1476ac:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  1476bc:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  1476cc:	62207473 69622065 72656767 61687420     st be bigger tha
  1476dc:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  1476ec:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  1476fc:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  14770c:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  14771c:	706f7270 796c7265 696c6120 64656e67     properly aligned
  14772c:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  14773c:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  14774c:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  14775c:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  14776c:	756f656e 79742073 00006570 66756270     neous type..pbuf
  14777c:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  14778c:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  14779c:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  1477ac:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  1477bc:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  1477cc:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  1477dc:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  1477ec:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  1477fc:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  14780c:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  14781c:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  14782c:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  14783c:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  14784c:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  14785c:	73203a65 20656e61 65707974 00000000     e: sane type....
  14786c:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  14787c:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  14788c:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  14789c:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  1478ac:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  1478bc:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  1478cc:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  1478dc:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  1478ec:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  1478fc:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  14790c:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  14791c:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  14792c:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  14793c:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  14794c:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  14795c:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  14796c:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  14797c:	65677261 6f6e2074 69622074 6e652067     arget not big en
  14798c:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  14799c:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  1479ac:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  1479bc:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  1479cc:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  1479dc:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  1479ec:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  1479fc:	7020776f 656b6361 75712074 73657565     ow packet queues
  147a0c:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  147a1c:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147a2c:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147a3c:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  147a4c:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  147a5c:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  147a6c:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  147a7c:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  147a8c:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  147a9c:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  147aac:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147abc:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147acc:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147adc:	706f635f 61662079 64656c69 00000000     _copy failed....
  147aec:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147afc:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147b0c:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147b1c:	77207265 6f687469 65207475 6e697461     er without eatin
  147b2c:	61702067 74656b63 00000000 76726573     g packet....serv
  147b3c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147b4c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147b5c:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  147b6c:	726f7473 65682065 72656461 20657720     store header we 
  147b7c:	7473756a 6d657220 6465766f 00000021     just removed!...
  147b8c:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  147b9c:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  147bac:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147bbc:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147bcc:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147bdc:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147bec:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147bfc:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147c0c:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147c1c:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147c2c:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147c3c:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147c4c:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  147c5c:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  147c6c:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  147c7c:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  147c8c:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  147c9c:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  147cac:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147cbc:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147ccc:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147cdc:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147cec:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147cfc:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147d0c:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147d1c:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147d2c:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147d3c:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147d4c:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  147d5c:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  147d6c:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  147d7c:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  147d8c:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  147d9c:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147dac:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147dbc:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147dcc:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147ddc:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147dec:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147dfc:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147e0c:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147e1c:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147e2c:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147e3c:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  147e4c:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  147e5c:	454d4954 4941575f 00000054              TIME_WAIT...

00147e68 <tcp_state_str>:
  147e68:	00147df0 00147df8 00147e00 00147e0c     .}...}...~...~..
  147e78:	00147e18 00147e24 00147e30 00147e3c     .~..$~..0~..<~..
  147e88:	00147e48 00147e50 00147e5c              H~..P~..\~..

00147e94 <tcp_backoff>:
  147e94:	04030201 07070605 07070707 00000007     ................

00147ea4 <tcp_persist_backoff>:
  147ea4:	180c0603 00786030                       ....0`x.

00147eac <tcp_pcb_lists>:
  147eac:	0015cc48 0015cc4c 0015cc40 0015cc50     H...L...@...P...
  147ebc:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147ecc:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147edc:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147eec:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147efc:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147f0c:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147f1c:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147f2c:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147f3c:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  147f4c:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  147f5c:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  147f6c:	6220796c 20646e69 73206e69 65746174     ly bind in state
  147f7c:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  147f8c:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  147f9c:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147fac:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147fbc:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147fcc:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147fdc:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  147fec:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  147ffc:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  14800c:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  14801c:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  14802c:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  14803c:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  14804c:	74636120 20657669 2d626370 6174733e      active pcb->sta
  14805c:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  14806c:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  14807c:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  14808c:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  14809c:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  1480ac:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  1480bc:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  1480cc:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  1480dc:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  1480ec:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  1480fc:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  14810c:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  14811c:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  14812c:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  14813c:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  14814c:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  14815c:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  14816c:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  14817c:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  14818c:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  14819c:	00000073 61766e69 2064696c 74617473     s...invalid stat
  1481ac:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  1481bc:	73207465 65746174 726f6620 63657220     et state for rec
  1481cc:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  1481dc:	2064696c 6b636f73 73207465 65746174     lid socket state
  1481ec:	726f6620 6e657320 61632074 61626c6c      for sent callba
  1481fc:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  14820c:	73207465 65746174 726f6620 72726520     et state for err
  14821c:	6c616320 6361626c 0000006b 61766e69      callback...inva
  14822c:	2064696c 6b636f73 73207465 65746174     lid socket state
  14823c:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  14824c:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  14825c:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  14826c:	73746e65 61656c20 676e696b 00000000     ents leaking....
  14827c:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  14828c:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  14829c:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  1482ac:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1482bc:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  1482cc:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  1482dc:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  1482ec:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  1482fc:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  14830c:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  14831c:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  14832c:	75706e69 61203a74 76697463 63702065     input: active pc
  14833c:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  14834c:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  14835c:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  14836c:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  14837c:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  14838c:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  14839c:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  1483ac:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  1483bc:	203d2120 20626370 74666128 63207265      != pcb (after c
  1483cc:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  1483dc:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  1483ec:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  1483fc:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  14840c:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  14841c:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  14842c:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  14843c:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  14844c:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  14845c:	656d6765 7420746e 7266206f 00006565     egment to free..
  14846c:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  14847c:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  14848c:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  14849c:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  1484ac:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  1484bc:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  1484cc:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  1484dc:	6c617620 71206469 65756575 6e656c20      valid queue len
  1484ec:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  1484fc:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  14850c:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  14851c:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  14852c:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  14853c:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  14854c:	69727420 64656d6d 726f6320 74636572      trimmed correct
  14855c:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  14856c:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  14857c:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  14858c:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  14859c:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  1485ac:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  1485bc:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  1485cc:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  1485dc:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  1485ec:	00000000 63656863 6874206b 66207461     ....check that f
  1485fc:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  14860c:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  14861c:	00000072 76726573 73656369 49776c2f     r...services/lwI
  14862c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14863c:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  14864c:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  14865c:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  14866c:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  14867c:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  14868c:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  14869c:	7361656c 6e6f2074 75712065 20657565     least one queue 
  1486ac:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  1486bc:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  1486cc:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  1486dc:	65757120 20736575 74706d65 00000079      queues empty...
  1486ec:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  1486fc:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  14870c:	76207265 616c6f69 20736574 29495041     er violates API)
  14871c:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  14872c:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  14873c:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  14874c:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  14875c:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  14876c:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  14877c:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  14878c:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  14879c:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  1487ac:	73726576 20657a69 6d73696d 68637461     versize mismatch
  1487bc:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  1487cc:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  1487dc:	63203a65 6b636568 61687420 69662074     e: check that fi
  1487ec:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  1487fc:	68742064 6f632065 656c706d 73206574     d the complete s
  14880c:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  14881c:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  14882c:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  14883c:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  14884c:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  14885c:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  14886c:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  14887c:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  14888c:	636e6572 65722065 72697571 72207365     rence requires r
  14889c:	72656665 65636e65 00000000 5f706374     eference....tcp_
  1488ac:	74697277 76203a65 64696c61 65757120     write: valid que
  1488bc:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  1488cc:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  1488dc:	20646565 68746965 54207265 535f5043     eed either TCP_S
  1488ec:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  1488fc:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  14890c:	76207265 616c6f69 20736574 29495041     er violates API)
  14891c:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  14892c:	67616c66 63203a73 6b636568 61687420     flags: check tha
  14893c:	69662074 20747372 66756270 6e616320     t first pbuf can
  14894c:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  14895c:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  14896c:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  14897c:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  14898c:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  14899c:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  1489ac:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  1489bc:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  1489cc:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  1489dc:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  1489ec:	00000073 20545352 20746f6e 65707865     s...RST not expe
  1489fc:	64657463 72656820 00002165              cted here!..

00148a08 <lwip_cyclic_timers>:
  148a08:	000000fa 0011cfc0 000003e8 00132ccc     .............,..
  148a18:	000003e8 0012d91c 0000ea60 0012a55c     ........`...\...
  148a28:	000001f4 0012a690 00000064 00130cc8     ........d.......
  148a38:	000003e8 00116adc 76726573 73656369     .....j..services
  148a48:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148a58:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  148a68:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  148a78:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  148a88:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  148a98:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  148aa8:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  148ab8:	20726564 6c696166 000a6465 76726573     der failed..serv
  148ac8:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148ad8:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148ae8:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  148af8:	66207461 74737269 75627020 61632066     at first pbuf ca
  148b08:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  148b18:	64685f70 00000072                       p_hdr...

00148b20 <ethbroadcast>:
  148b20:	ffffffff 0000ffff                       ........

00148b28 <ethzero>:
	...
  148b30:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148b40:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  148b50:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  148b60:	00000000 76726573 73656369 49776c2f     ....services/lwI
  148b70:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148b80:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  148b90:	632e7465 00000000 6974656e 00000066     et.c....netif...
  148ba0:	74736f68 00000000 676e6970 7365725f     host....ping_res
  148bb0:	00000070                                p...

00148bb4 <lwip_netdev_ops>:
  148bb4:	00128ff4 00129024 00129054 00129120     ....$...T... ...
  148bc4:	0012915c 001291bc 00000000 0012947c     \...........|...
  148bd4:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148be4:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148bf4:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148c04:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148c14:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148c24:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148c34:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148c44:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148c54:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  148c64:	206b726f 65746e69 63616672 616e2065     ork interface na
  148c74:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  148c84:	7774656e 206b726f 65746e69 63616672     network interfac
  148c94:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  148ca4:	00000a0d                                ....

00148ca8 <__FUNCTION__.7783>:
  148ca8:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  148cb8:	00000000                                ....

00148cbc <__FUNCTION__.7795>:
  148cbc:	6474656e 615f7665 00006464              netdev_add..

00148cc8 <__FUNCTION__.7804>:
  148cc8:	6474656e 645f7665 00006c65              netdev_del..

00148cd4 <__FUNCTION__.7809>:
  148cd4:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148ce4:	00000063                                c...

00148ce8 <__FUNCTION__.7815>:
  148ce8:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  148cf8:	75707475 00000074                       utput...

00148d00 <__FUNCTION__.7847>:
  148d00:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148d10:	676e6168 00000065                       hange...

00148d18 <__FUNCTION__.7871>:
  148d18:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  148d28:	6e695f65 705f7469 61766972 00006574     e_init_private..
  148d38:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  148d48:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  148d58:	6b61656c 00000000 76726573 73656369     leak....services
  148d68:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148d78:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148d88:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  148d98:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  148da8:	66657220 6e756f63 72652074 00726f72      refcount error.
  148db8:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148dc8:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148dd8:	6974656e 6c612066 64616572 61682079     netif already ha
  148de8:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148df8:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148e08:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148e18:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  148e28:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  148e38:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  148e48:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  148e58:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  148e68:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  148e78:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  148e88:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  148e98:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  148ea8:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  148eb8:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  148ec8:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  148ed8:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  148ee8:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  148ef8:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148f08:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  148f18:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  148f28:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  148f38:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  148f48:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  148f58:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  148f68:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  148f78:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148f88:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  148f98:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  148fa8:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  148fb8:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  148fc8:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  148fd8:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  148fe8:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  148ff8:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  149008:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  149018:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  149028:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  149038:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  149048:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  149058:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  149068:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149078:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  149088:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149098:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  1490a8:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1490b8:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  1490c8:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  1490d8:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  1490e8:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  1490f8:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149108:	65686320 74206b63 20746168 73726966      check that firs
  149118:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  149128:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  149138:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149148:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  149158:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149168:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  149178:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  149188:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  149198:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  1491a8:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  1491b8:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  1491c8:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  1491d8:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  1491e8:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  1491f8:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  149208:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  149218:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  149228:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  149238:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  149248:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  149258:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  149268:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  149278:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  149288:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  149298:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  1492a8:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  1492b8:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  1492c8:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  1492d8:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  1492e8:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  1492f8:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  149308:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  149318:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  149328:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  149338:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  149348:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  149358:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  149368:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  149378:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  149388:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  149398:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  1493a8:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  1493b8:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  1493c8:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  1493d8:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  1493e8:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  1493f8:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  149408:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  149418:	00000021 63656863 6874206b 66207461     !...check that f
  149428:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  149438:	7320646c 63757274 74652074 70726168     ld struct etharp
  149448:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  149458:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  149468:	68742065 61732065 6120656d 54452073     e the same as ET
  149478:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  149488:	68746520 21707261 00000000 706d6369      etharp!....icmp
  149498:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  1494a8:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  1494b8:	65682070 72656461 69616620 0a64656c     p header failed.
  1494c8:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1494d8:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1494e8:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  1494f8:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  149508:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  149518:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  149528:	61662064 64656c69 0000000a 63656863     d failed....chec
  149538:	6874206b 66207461 74737269 75627020     k that first pbu
  149548:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  149558:	7373656d 00656761 76726573 73656369     message.services
  149568:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  149578:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  149588:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  149598:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  1495a8:	74737269 6f726720 6d207075 20747375     irst group must 
  1495b8:	61206562 79736c6c 6d657473 00000073     be allsystems...
  1495c8:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  1495d8:	61203a70 65206c6c 70656378 69662074     p: all except fi
  1495e8:	20747372 756f7267 756d2070 6e207473     rst group must n
  1495f8:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  149608:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  149618:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  149628:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  149638:	64612074 73657264 00000073 706d6769     t address...igmp
  149648:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  149658:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  149668:	65747379 6120736d 65726464 00007373     ystems address..
  149678:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  149688:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  149698:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  1496a8:	20747361 72646461 00737365 706d6769     ast address.igmp
  1496b8:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  1496c8:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  1496d8:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  1496e8:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  1496f8:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  149708:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  149718:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  149728:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  149738:	74746120 74706d65 206f7420 7661656c      attempt to leav
  149748:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  149758:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  149768:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  149778:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  149788:	736d6574 64646120 73736572 00000000     tems address....
  149798:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1497a8:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1497b8:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  1497c8:	73616369 64612074 73657264 00000073     icast address...
  1497d8:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1497e8:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1497f8:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  149808:	6120736d 65726464 00007373 706d6769     ms address..igmp
  149818:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  149828:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  149838:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  149848:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  149858:	63203a64 6b636568 61687420 69662074     d: check that fi
  149868:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  149878:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  149888:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  149898:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1498a8:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  1498b8:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  1498c8:	63656863 6874206b 66207461 74737269     check that first
  1498d8:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  1498e8:	63757274 70692074 7264685f 00000000     truct ip_hdr....

001498f8 <ip_addr_any>:
  1498f8:	00000000                                ....

001498fc <ip_addr_broadcast>:
  1498fc:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  14990c:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  14991c:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  14992c:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  14993c:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  14994c:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  14995c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14996c:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  14997c:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  14998c:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  14999c:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  1499ac:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  1499bc:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  1499cc:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  1499dc:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  1499ec:	7473696c 00000000 63656863 7266206b     list....check fr
  1499fc:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  149a0c:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  149a1c:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149a2c:	6d207369 20747375 74206562 66206568     is must be the f
  149a3c:	74737269 61726620 6e656d67 00002174     irst fragment!..
  149a4c:	696e6173 63207974 6b636568 00000000     sanity check....
  149a5c:	696c6176 65746164 7461645f 61726761     validate_datagra
  149a6c:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  149a7c:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  149a8c:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  149a9c:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  149aac:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149abc:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149acc:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149adc:	64202928 2073656f 20746f6e 70707573     () does not supp
  149aec:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149afc:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149b0c:	64616572 65732079 00000074 73696874     ready set...this
  149b1c:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149b2c:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149b3c:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149b4c:	00000000 76726573 73656369 49776c2f     ....services/lwI
  149b5c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149b6c:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  149b7c:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  149b8c:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  149b9c:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  149bac:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149bbc:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149bcc:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149bdc:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149bec:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149bfc:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149c0c:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149c1c:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149c2c:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149c3c:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149c4c:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  149c5c:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  149c6c:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149c7c:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  149c8c:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149c9c:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  149cac:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149cbc:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149ccc:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149cdc:	65732072 6c20646e 74676e65 64252068     r send length %d
  149cec:	63786520 20646565 2078616d 676e656c      exceed max leng
  149cfc:	00006874 2074656e 6f727265 65722072     th..net error re
  149d0c:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149d1c:	20646565 2078616d 676e656c 00006874     eed max length..
  149d2c:	20687465 64616572 766e6920 64696c61     eth read invalid
  149d3c:	72617020 74656d61 62207265 65666675      parameter buffe
  149d4c:	70252072 7a697320 64252065 00000000     r %p size %d....
  149d5c:	20687465 74697277 6e692065 696c6176     eth write invali
  149d6c:	61702064 656d6172 20726574 66667562     d parameter buff
  149d7c:	25207265 69732070 2520657a 00000064     er %p size %d...
  149d8c:	65746e69 75707272 616d2074 20686374     interrput match 
  149d9c:	65736162 64646120 72652072 00726f72     base addr error.
  149dac:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149dbc:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149dcc:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149ddc:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149dec:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149dfc:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149e0c <_k_enet_ops>:
  149e0c:	00000000 0013524c 00135294 001352d0     ....LR...R...R..
  149e1c:	00135380 00134c80 32335b1b 2f495b6d     .S...L...[32m[I/
  149e2c:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149e3c:	76656420 20656369 74696e69 63757320      device init suc
  149e4c:	73736563 00000000 63616d65 76656420     cess....emac dev
  149e5c:	20656369 74696e69 69616620 203a646c     ice init faild: 
  149e6c:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

00149e7c <__FUNCTION__.9268>:
  149e7c:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  149e8c:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  149e9c:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  149eac:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149ebc:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149ecc:	0000000a                                ....

00149ed0 <s_enetBases>:
  149ed0:	00000000 02188000 020b4000 74736e69     .........@..inst
  149ee0:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149ef0:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149f00:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149f10:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149f20:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149f30:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149f40:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149f50:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  149f60:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  149f70:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  149f80:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  149f90:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  149fa0:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  149fb0:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149fc0:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149fd0:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149fe0:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149ff0:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a000:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a010:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  14a020:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  14a030:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  14a040:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  14a050:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a060:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a070:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a080:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  14a090:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  14a0a0:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  14a0b0:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  14a0c0:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  14a0d0:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  14a0e0:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  14a0f0:	6e654c65 00000000 64427874 72617453     eLen....txBdStar
  14a100:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  14a110:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  14a120:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  14a130:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  14a140:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  14a150:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  14a160:	72724565 7453726f 63697461 00000000     eErrorStatic....
  14a170:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  14a180:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  14a190:	72652065 30726f72 72756320 66667542     e error0 curBuff
  14a1a0:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a1b0:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a1c0:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  14a1d0:	72652065 31726f72 72756320 66667542     e error1 curBuff
  14a1e0:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a1f0:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a200:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  14a210:	72727543 00746e65 61746164 00000000     Current.data....
  14a220:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  14a230:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  14a240:	0000004e 72646461 00737365              N...address.

0014a24c <__FUNCTION__.9236>:
  14a24c:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  14a25c:	00000000                                ....

0014a260 <__FUNCTION__.9241>:
  14a260:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  14a270:	69666e6f 00000067                       onfig...

0014a278 <__FUNCTION__.9250>:
  14a278:	54454e45 696e495f 00000074              ENET_Init...

0014a284 <__FUNCTION__.9259>:
  14a284:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  14a294:	00000000                                ....

0014a298 <__FUNCTION__.9288>:
  14a298:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  14a2a8:	63736544 74706972 0073726f              Descriptors.

0014a2b4 <__FUNCTION__.9302>:
  14a2b4:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  14a2c4:	63736544 74706972 0073726f              Descriptors.

0014a2d0 <__FUNCTION__.9324>:
  14a2d0:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

0014a2e0 <__FUNCTION__.9331>:
  14a2e0:	54454e45 7465535f 00494d53              ENET_SetSMI.

0014a2ec <__FUNCTION__.9371>:
  14a2ec:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  14a2fc:	5265726f 46646165 656d6172 00000000     oreReadFrame....

0014a30c <__FUNCTION__.9383>:
  14a30c:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

0014a31c <__FUNCTION__.9390>:
  14a31c:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  14a32c:	65666675 00007372                       uffers..

0014a334 <__FUNCTION__.9398>:
  14a334:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

0014a344 <__FUNCTION__.9407>:
  14a344:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  14a354:	6f724774 00007075                       tGroup..

0014a35c <__FUNCTION__.9422>:
  14a35c:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  14a36c:	47747361 70756f72 00000000              astGroup....

0014a378 <__FUNCTION__.9439>:
  14a378:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  14a388:	646e6148 0072656c                       Handler.

0014a390 <__FUNCTION__.9446>:
  14a390:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  14a3a0:	6c646e61 00007265                       andler..

0014a3a8 <__FUNCTION__.9451>:
  14a3a8:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  14a3b8:	72656c64 00000000 76726573 73656369     dler....services
  14a3c8:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a3d8:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a3e8:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a3f8 <__func__.6332>:
  14a3f8:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a408:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a418:	00007375 6c707564 00007865              us..duplex..

0014a424 <__FUNCTION__.8416>:
  14a424:	5f594850 64616552 00000000              PHY_Read....

0014a430 <__FUNCTION__.8434>:
  14a430:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a440:	00000073                                s...

0014a444 <__FUNCTION__.8443>:
  14a444:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a454:	6c707544 00007865                       Duplex..

0014a45c <errid>:
  14a45c:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a46c:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a47c:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a48c:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a49c:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a4ac:	79747372 487c7b7a 00000000              rstyz{|H....

0014a4b8 <errmsg>:
  14a4b8:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a4c8:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a4d8:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a4e8:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a4f8:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a508:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a518:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a528:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a538:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a548:	72702068 7365636f 69460073 6520656c     h process.File e
  14a558:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a568:	6772616c 6f662065 61642072 74206174     large for data t
  14a578:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a588:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a598:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a5a8:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a5b8:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a5c8:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a5d8:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a5e8:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a5f8:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a608:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a618:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a628:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a638:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a648:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a658:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a668:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a678:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a688:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a698:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a6a8:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a6b8:	73206f4e 20686375 69766564 6f206563     No such device o
  14a6c8:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a6d8:	69766564 72206563 69757165 00646572     device required.
  14a6e8:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a6f8:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a708:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a718:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a728:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a738:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a748:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a758:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a768:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a778:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a788:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a798:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a7a8:	65642065 69726373 726f7470 76612073     e descriptors av
  14a7b8:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a7c8:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a7d8:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a7e8:	64646120 73736572 6c694600 6f742065      address.File to
  14a7f8:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a808:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a818:	69617661 6c62616c 65520065 72756f73     available.Resour
  14a828:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14a838:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14a848:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14a858:	6f697665 6f207375 72656e77 65696420     evious owner die
  14a868:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14a878:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14a888:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14a898:	73656d20 65676173 20666f20 69736564      message of desi
  14a8a8:	20646572 65707974 65644900 6669746e     red type.Identif
  14a8b8:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14a8c8:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14a8d8:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14a8e8:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14a8f8:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14a908:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14a918:	62207361 206e6565 65766573 00646572     as been severed.
  14a928:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14a938:	6d206461 61737365 46006567 20656c69     ad message.File 
  14a948:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14a958:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14a968:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14a978:	64646120 73736572 71657220 65726975      address require
  14a988:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14a998:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14a9a8:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14a9b8:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14a9c8:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14a9d8:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14a9e8:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14a9f8:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14aa08:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14aa18:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14aa28:	74726f70 41006465 65726464 66207373     ported.Address f
  14aa38:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14aa48:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14aa58:	72646441 20737365 20746f6e 69617661     Address not avai
  14aa68:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14aa78:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14aa88:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14aa98:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14aaa8:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14aab8:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14aac8:	73207265 65636170 61766120 62616c69     er space availab
  14aad8:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14aae8:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14aaf8:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14ab08:	7320746f 20646e65 65746661 6f732072     ot send after so
  14ab18:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14ab28:	74617265 206e6f69 65726c61 20796461     eration already 
  14ab38:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14ab48:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14ab58:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14ab68:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14ab78:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14ab88:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14ab98:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14aba8:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14abb8:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14abc8:	6e692072 6d726f66 6f697461 0000006e     r information...
  14abd8:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14abe8:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14abf8:	00000a29                                )...

0014abfc <__FUNCTION__.6013>:
  14abfc:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14ac0c:	63737973 006c6c61                       syscall.

0014ac14 <__FUNCTION__.6017>:
  14ac14:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014ac24 <__FUNCTION__.6020>:
  14ac24:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014ac34 <__FUNCTION__.6026>:
  14ac34:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014ac44 <__FUNCTION__.6032>:
  14ac44:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014ac54 <__FUNCTION__.6038>:
  14ac54:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014ac64 <__FUNCTION__.6042>:
  14ac64:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014ac74 <__FUNCTION__.6045>:
  14ac74:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014ac84 <__FUNCTION__.6048>:
  14ac84:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014ac94 <__FUNCTION__.6052>:
  14ac94:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014aca4 <__FUNCTION__.6058>:
  14aca4:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014acb4 <__FUNCTION__.6062>:
  14acb4:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014acc4 <__FUNCTION__.6065>:
  14acc4:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014acd4 <__FUNCTION__.6068>:
  14acd4:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014ace4 <__FUNCTION__.6071>:
  14ace4:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014acf4 <__FUNCTION__.6077>:
  14acf4:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014ad04 <__FUNCTION__.6080>:
  14ad04:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014ad14 <__FUNCTION__.6083>:
  14ad14:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014ad24 <__FUNCTION__.6086>:
  14ad24:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014ad34 <__FUNCTION__.6089>:
  14ad34:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014ad44 <__FUNCTION__.6092>:
  14ad44:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014ad54 <__FUNCTION__.6095>:
  14ad54:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014ad64 <__FUNCTION__.6100>:
  14ad64:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014ad74 <__FUNCTION__.6103>:
  14ad74:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014ad84 <__FUNCTION__.6106>:
  14ad84:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014ad94 <__FUNCTION__.6111>:
  14ad94:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014ada4 <__FUNCTION__.6116>:
  14ada4:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014adb4 <__FUNCTION__.6121>:
  14adb4:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014adc4 <__FUNCTION__.6125>:
  14adc4:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014add4 <__FUNCTION__.6129>:
  14add4:	63737973 5f6c6c61 00707564              syscall_dup.

0014ade0 <__FUNCTION__.6133>:
  14ade0:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014adf0 <__FUNCTION__.6136>:
  14adf0:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014ae00 <__FUNCTION__.6140>:
  14ae00:	63737973 5f6c6c61 006b7262              syscall_brk.

0014ae0c <__FUNCTION__.6143>:
  14ae0c:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014ae1c <__FUNCTION__.6146>:
  14ae1c:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014ae2c <__FUNCTION__.6149>:
  14ae2c:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014ae3c <__FUNCTION__.6152>:
  14ae3c:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014ae4c <__FUNCTION__.6155>:
  14ae4c:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014ae5c <__FUNCTION__.6158>:
  14ae5c:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014ae6c <__FUNCTION__.6164>:
  14ae6c:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014ae7c <__FUNCTION__.6170>:
  14ae7c:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014ae8c <__FUNCTION__.6173>:
  14ae8c:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014ae9c <__FUNCTION__.6176>:
  14ae9c:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014aeac <__FUNCTION__.6179>:
  14aeac:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014aebc <__FUNCTION__.6182>:
  14aebc:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014aecc <__FUNCTION__.6187>:
  14aecc:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014aedc <__FUNCTION__.6190>:
  14aedc:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014aeec <__FUNCTION__.6193>:
  14aeec:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014aefc <__FUNCTION__.6196>:
  14aefc:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014af0c <__FUNCTION__.6203>:
  14af0c:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14af1c:	0000006e                                n...

0014af20 <__FUNCTION__.6206>:
  14af20:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14af30:	00000000                                ....

0014af34 <__FUNCTION__.6209>:
  14af34:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14af44:	00000000                                ....

0014af48 <__FUNCTION__.6212>:
  14af48:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14af58:	0000646e                                nd..

0014af5c <__FUNCTION__.6215>:
  14af5c:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14af6c:	0000676e                                ng..

0014af70 <__FUNCTION__.6218>:
  14af70:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14af80:	00656d61                                ame.

0014af84 <__FUNCTION__.6223>:
  14af84:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14af94:	00000074                                t...

0014af98 <__FUNCTION__.6226>:
  14af98:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14afa8:	00000065                                e...

0014afac <__FUNCTION__.6229>:
  14afac:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14afbc:	79616466 00000000                       fday....

0014afc4 <__FUNCTION__.6232>:
  14afc4:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14afd4:	79616466 00000000                       fday....

0014afdc <__FUNCTION__.6235>:
  14afdc:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14afec:	00000073                                s...

0014aff0 <__FUNCTION__.6238>:
  14aff0:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b000:	00000073                                s...

0014b004 <__FUNCTION__.6241>:
  14b004:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014b014 <__FUNCTION__.6247>:
  14b014:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14b024:	00000000                                ....

0014b028 <__FUNCTION__.6250>:
  14b028:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014b038 <__FUNCTION__.6253>:
  14b038:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014b048 <__FUNCTION__.6256>:
  14b048:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014b058 <__FUNCTION__.6261>:
  14b058:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014b068 <__FUNCTION__.6264>:
  14b068:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b078:	00000000                                ....

0014b07c <__FUNCTION__.6267>:
  14b07c:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b08c:	00000065                                e...

0014b090 <__FUNCTION__.6270>:
  14b090:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014b0a0 <__FUNCTION__.6273>:
  14b0a0:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014b0b0 <__FUNCTION__.6276>:
  14b0b0:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14b0c0:	00797469                                ity.

0014b0c4 <__FUNCTION__.6279>:
  14b0c4:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14b0d4:	00797469                                ity.

0014b0d8 <__FUNCTION__.6285>:
  14b0d8:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014b0e8 <__FUNCTION__.6291>:
  14b0e8:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014b0f8 <__FUNCTION__.6294>:
  14b0f8:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014b108 <__FUNCTION__.6297>:
  14b108:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14b118:	00000072                                r...

0014b11c <__FUNCTION__.6300>:
  14b11c:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14b12c:	00000072                                r...

0014b130 <__FUNCTION__.6305>:
  14b130:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014b140 <__FUNCTION__.6310>:
  14b140:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014b150 <__FUNCTION__.6315>:
  14b150:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014b160 <__FUNCTION__.6318>:
  14b160:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014b170 <__FUNCTION__.6321>:
  14b170:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014b180 <__FUNCTION__.6324>:
  14b180:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014b190 <__FUNCTION__.6327>:
  14b190:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014b1a0 <__FUNCTION__.6331>:
  14b1a0:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014b1b0 <__FUNCTION__.6334>:
  14b1b0:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14b1c0:	0000006e                                n...

0014b1c4 <__FUNCTION__.6337>:
  14b1c4:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014b1d4 <__FUNCTION__.6340>:
  14b1d4:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14b1e4:	6d616e6e 00000065                       nname...

0014b1ec <__FUNCTION__.6343>:
  14b1ec:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014b1fc <__FUNCTION__.6346>:
  14b1fc:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14b20c:	00000000                                ....

0014b210 <__FUNCTION__.6349>:
  14b210:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14b220:	00000000                                ....

0014b224 <__FUNCTION__.6356>:
  14b224:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14b234:	006b7361                                ask.

0014b238 <__FUNCTION__.6359>:
  14b238:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14b248:	00656c75                                ule.

0014b24c <__FUNCTION__.6362>:
  14b24c:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14b25c:	6c75646f 00000065                       odule...

0014b264 <__FUNCTION__.6365>:
  14b264:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14b274:	00000000                                ....

0014b278 <__FUNCTION__.6368>:
  14b278:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014b288 <__FUNCTION__.6371>:
  14b288:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014b298 <__FUNCTION__.6374>:
  14b298:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014b2a8 <__FUNCTION__.6377>:
  14b2a8:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014b2b8 <__FUNCTION__.6380>:
  14b2b8:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14b2c8:	00797469                                ity.

0014b2cc <__FUNCTION__.6383>:
  14b2cc:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b2dc:	00000000                                ....

0014b2e0 <__FUNCTION__.6386>:
  14b2e0:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b2f0:	00000000                                ....

0014b2f4 <__FUNCTION__.6394>:
  14b2f4:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014b304 <__FUNCTION__.6400>:
  14b304:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b314:	00000000                                ....

0014b318 <__FUNCTION__.6408>:
  14b318:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14b328:	00007463                                ct..

0014b32c <__FUNCTION__.6411>:
  14b32c:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014b33c <__FUNCTION__.6414>:
  14b33c:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014b34c <__FUNCTION__.6422>:
  14b34c:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014b35c <__FUNCTION__.6434>:
  14b35c:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014b36c <__FUNCTION__.6441>:
  14b36c:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014b37c <__FUNCTION__.6444>:
  14b37c:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14b38c:	00000063                                c...

0014b390 <__FUNCTION__.6447>:
  14b390:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014b3a0 <__FUNCTION__.6450>:
  14b3a0:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014b3b0 <__FUNCTION__.6453>:
  14b3b0:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b3c0 <__FUNCTION__.6456>:
  14b3c0:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b3d0:	00000000                                ....

0014b3d4 <__FUNCTION__.6459>:
  14b3d4:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b3e4:	00006c6c                                ll..

0014b3e8 <__FUNCTION__.6464>:
  14b3e8:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b3f8:	72617074 00006d61                       tparam..

0014b400 <__FUNCTION__.6469>:
  14b400:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b410:	72617074 00006d61                       tparam..

0014b418 <__FUNCTION__.6475>:
  14b418:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b428:	68637374 6c756465 00007265              tscheduler..

0014b434 <__FUNCTION__.6481>:
  14b434:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b444:	68637374 6c756465 00007265              tscheduler..

0014b450 <__FUNCTION__.6484>:
  14b450:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b460:	00646c65                                eld.

0014b464 <__FUNCTION__.6488>:
  14b464:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b474:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b484 <__FUNCTION__.6492>:
  14b484:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b494:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b4a4 <__FUNCTION__.6495>:
  14b4a4:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b4b4:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b4c4 <__FUNCTION__.6500>:
  14b4c4:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b4d4:	00000070                                p...

0014b4d8 <__FUNCTION__.6508>:
  14b4d8:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b4e8 <__FUNCTION__.6511>:
  14b4e8:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b4f8:	00000064                                d...

0014b4fc <__FUNCTION__.6514>:
  14b4fc:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b50c:	00000064                                d...

0014b510 <__FUNCTION__.6520>:
  14b510:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b520 <__FUNCTION__.6523>:
  14b520:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b530:	00006c74                                tl..

0014b534 <__FUNCTION__.6526>:
  14b534:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b544:	00000064                                d...

0014b548 <__FUNCTION__.6529>:
  14b548:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b558:	00000064                                d...

0014b55c <__FUNCTION__.6532>:
  14b55c:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b56c <__FUNCTION__.6535>:
  14b56c:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b57c:	6e727574 00000000                       turn....

0014b584 <__FUNCTION__.6543>:
  14b584:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b594:	6e6f6974 00000000                       tion....

0014b59c <__FUNCTION__.6551>:
  14b59c:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b5ac:	616d636f 00006b73                       ocmask..

0014b5b4 <__FUNCTION__.6554>:
  14b5b4:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b5c4:	6e69646e 00000067                       nding...

0014b5cc <__FUNCTION__.6557>:
  14b5cc:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b5dc:	7764656d 00746961                       medwait.

0014b5e4 <__FUNCTION__.6560>:
  14b5e4:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b5f4:	69657565 006f666e                       eueinfo.

0014b5fc <__FUNCTION__.6563>:
  14b5fc:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b60c:	6e657073 00000064                       spend...

0014b614 <__FUNCTION__.6566>:
  14b614:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b624 <__FUNCTION__.6569>:
  14b624:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b634:	00000000                                ....

0014b638 <__FUNCTION__.6572>:
  14b638:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b648 <__FUNCTION__.6577>:
  14b648:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b658 <__FUNCTION__.6580>:
  14b658:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b668 <__FUNCTION__.6583>:
  14b668:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b678 <__FUNCTION__.6586>:
  14b678:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b688:	006b6361                                ack.

0014b68c <__FUNCTION__.6589>:
  14b68c:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b69c:	00000000                                ....

0014b6a0 <__FUNCTION__.6592>:
  14b6a0:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b6b0 <__FUNCTION__.6597>:
  14b6b0:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b6c0:	00007469                                it..

0014b6c4 <__FUNCTION__.6606>:
  14b6c4:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b6d4 <__FUNCTION__.6609>:
  14b6d4:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b6e4:	00003436                                64..

0014b6e8 <__FUNCTION__.6612>:
  14b6e8:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b6f8:	00343665                                e64.

0014b6fc <__FUNCTION__.6617>:
  14b6fc:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b70c <__FUNCTION__.6622>:
  14b70c:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b71c <__FUNCTION__.6627>:
  14b71c:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b72c <__FUNCTION__.6630>:
  14b72c:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b73c:	00000000                                ....

0014b740 <__FUNCTION__.6633>:
  14b740:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b750:	00000000                                ....

0014b754 <__FUNCTION__.6636>:
  14b754:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b764:	00000000                                ....

0014b768 <__FUNCTION__.6639>:
  14b768:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b778:	00000032                                2...

0014b77c <__FUNCTION__.6642>:
  14b77c:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b78c:	00000032                                2...

0014b790 <__FUNCTION__.6645>:
  14b790:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b7a0:	00003233                                32..

0014b7a4 <__FUNCTION__.6648>:
  14b7a4:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b7b4:	00003233                                32..

0014b7b8 <__FUNCTION__.6651>:
  14b7b8:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b7c8:	00323373                                s32.

0014b7cc <__FUNCTION__.6654>:
  14b7cc:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b7dc:	00323373                                s32.

0014b7e0 <__FUNCTION__.6657>:
  14b7e0:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b7f0:	00000000                                ....

0014b7f4 <__FUNCTION__.6660>:
  14b7f4:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b804:	00323364                                d32.

0014b808 <__FUNCTION__.6663>:
  14b808:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b818:	00323364                                d32.

0014b81c <__FUNCTION__.6666>:
  14b81c:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b82c:	00323364                                d32.

0014b830 <__FUNCTION__.6669>:
  14b830:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b840:	00323364                                d32.

0014b844 <__FUNCTION__.6672>:
  14b844:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014b854 <__FUNCTION__.6675>:
  14b854:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14b864:	00000000                                ....

0014b868 <__FUNCTION__.6678>:
  14b868:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14b878:	00000000                                ....

0014b87c <__FUNCTION__.6681>:
  14b87c:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b88c:	00003233                                32..

0014b890 <__FUNCTION__.6684>:
  14b890:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b8a0:	00003233                                32..

0014b8a4 <__FUNCTION__.6690>:
  14b8a4:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b8b4:	00003436                                64..

0014b8b8 <__FUNCTION__.6693>:
  14b8b8:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14b8c8:	0000746f                                ot..

0014b8cc <__FUNCTION__.6696>:
  14b8cc:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014b8dc <__FUNCTION__.6702>:
  14b8dc:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014b8ec <__FUNCTION__.6708>:
  14b8ec:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014b8fc <__FUNCTION__.6711>:
  14b8fc:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014b90c <__FUNCTION__.6714>:
  14b90c:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14b91c:	00000064                                d...

0014b920 <__FUNCTION__.6717>:
  14b920:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14b930:	00000000                                ....

0014b934 <__FUNCTION__.6720>:
  14b934:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14b944:	00000072                                r...

0014b948 <__FUNCTION__.6723>:
  14b948:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14b958:	00000072                                r...

0014b95c <__FUNCTION__.6726>:
  14b95c:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14b96c:	00000000                                ....

0014b970 <__FUNCTION__.6729>:
  14b970:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14b980:	00000072                                r...

0014b984 <__FUNCTION__.6732>:
  14b984:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14b994:	00000072                                r...

0014b998 <__FUNCTION__.6735>:
  14b998:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14b9a8:	00000072                                r...

0014b9ac <__FUNCTION__.6738>:
  14b9ac:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14b9bc:	00007274                                tr..

0014b9c0 <__FUNCTION__.6741>:
  14b9c0:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14b9d0:	00007274                                tr..

0014b9d4 <__FUNCTION__.6744>:
  14b9d4:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14b9e4:	00727474                                ttr.

0014b9e8 <__FUNCTION__.6747>:
  14b9e8:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14b9f8:	72747461 00000000                       attr....

0014ba00 <__FUNCTION__.6750>:
  14ba00:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14ba10:	72747461 00000000                       attr....

0014ba18 <__FUNCTION__.6755>:
  14ba18:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014ba28 <__FUNCTION__.6758>:
  14ba28:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14ba38:	00003436                                64..

0014ba3c <__FUNCTION__.6767>:
  14ba3c:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014ba4c <__FUNCTION__.6773>:
  14ba4c:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14ba5c:	66666174 74696e69 00000079              taffinity...

0014ba68 <__FUNCTION__.6776>:
  14ba68:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14ba78:	66666174 74696e69 00000079              taffinity...

0014ba84 <__FUNCTION__.6779>:
  14ba84:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14ba94:	00000000                                ....

0014ba98 <__FUNCTION__.6782>:
  14ba98:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14baa8:	0000796f                                oy..

0014baac <__FUNCTION__.6785>:
  14baac:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14babc:	73746e65 00000000                       ents....

0014bac4 <__FUNCTION__.6788>:
  14bac4:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14bad4:	00000074                                t...

0014bad8 <__FUNCTION__.6791>:
  14bad8:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14bae8:	0000006c                                l...

0014baec <__FUNCTION__.6795>:
  14baec:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14bafc:	00007075                                up..

0014bb00 <__FUNCTION__.6798>:
  14bb00:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14bb10:	6b6f6f63 00006569                       cookie..

0014bb18 <__FUNCTION__.6801>:
  14bb18:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14bb28:	65746165 00000000                       eate....

0014bb30 <__FUNCTION__.6804>:
  14bb30:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14bb40:	0000006c                                l...

0014bb44 <__FUNCTION__.6807>:
  14bb44:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14bb54:	00007469                                it..

0014bb58 <__FUNCTION__.6810>:
  14bb58:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14bb68:	705f656c 73656761 00000000              le_pages....

0014bb74 <__FUNCTION__.6814>:
  14bb74:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14bb84:	72646461 00737365                       address.

0014bb8c <__FUNCTION__.6817>:
  14bb8c:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14bb9c:	65746165 00000000                       eate....

0014bba4 <__FUNCTION__.6820>:
  14bba4:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14bbb4:	6d697474 00000065                       ttime...

0014bbbc <__FUNCTION__.6823>:
  14bbbc:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bbcc:	6d697474 00000065                       ttime...

0014bbd4 <__FUNCTION__.6826>:
  14bbd4:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bbe4:	65766f74 6e757272 00000000              toverrun....

0014bbf0 <__FUNCTION__.6829>:
  14bbf0:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14bc00:	6574656c 00000000                       lete....

0014bc08 <__FUNCTION__.6834>:
  14bc08:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14bc18:	6d697474 00000065                       ttime...

0014bc20 <__FUNCTION__.6839>:
  14bc20:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc30:	6d697474 00000065                       ttime...

0014bc38 <__FUNCTION__.6844>:
  14bc38:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc48:	73657274 00000000                       tres....

0014bc50 <__FUNCTION__.6847>:
  14bc50:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14bc60:	6c736f6e 00706565                       nosleep.

0014bc68 <__FUNCTION__.6853>:
  14bc68:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14bc78:	00000000                                ....

0014bc7c <__FUNCTION__.6859>:
  14bc7c:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14bc8c:	00000034                                4...

0014bc90 <__FUNCTION__.6862>:
  14bc90:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014bca0 <__FUNCTION__.6865>:
  14bca0:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014bcb0 <__FUNCTION__.6868>:
  14bcb0:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14bcc0:	36657369 34365f34 00000000              ise64_64....

0014bccc <__FUNCTION__.6871>:
  14bccc:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bcdc:	6f695f67 65736162 00000000              g_iobase....

0014bce8 <__FUNCTION__.6874>:
  14bce8:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bcf8:	65725f67 00006461                       g_read..

0014bd00 <__FUNCTION__.6877>:
  14bd00:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bd10:	72775f67 00657469                       g_write.

0014bd18 <__FUNCTION__.6880>:
  14bd18:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014bd28 <__FUNCTION__.6883>:
  14bd28:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14bd38:	0000006b                                k...

0014bd3c <__FUNCTION__.6886>:
  14bd3c:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd4c:	646e6573 00000000                       send....

0014bd54 <__FUNCTION__.6889>:
  14bd54:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd64:	65636572 00657669                       receive.

0014bd6c <__FUNCTION__.6892>:
  14bd6c:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14bd7c:	00000079                                y...

0014bd80 <__FUNCTION__.6895>:
  14bd80:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14bd90:	74746174 00000072                       tattr...

0014bd98 <__FUNCTION__.6898>:
  14bd98:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014bda8 <__FUNCTION__.6904>:
  14bda8:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014bdb8 <__FUNCTION__.6910>:
  14bdb8:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014bdc8 <__FUNCTION__.6916>:
  14bdc8:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014bdd8 <__FUNCTION__.6921>:
  14bdd8:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014bde8 <__FUNCTION__.6927>:
  14bde8:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014bdf8 <__FUNCTION__.6933>:
  14bdf8:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14be08:	00656d61                                ame.

0014be0c <__FUNCTION__.6939>:
  14be0c:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14be1c:	00656d61                                ame.

0014be20 <__FUNCTION__.6942>:
  14be20:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14be30:	00007269                                ir..

0014be34 <__FUNCTION__.6949>:
  14be34:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014be44 <__FUNCTION__.6958>:
  14be44:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014be54 <__FUNCTION__.6965>:
  14be54:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014be64 <__FUNCTION__.6974>:
  14be64:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14be74:	00000000                                ....

0014be78 <__FUNCTION__.6977>:
  14be78:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14be88:	00000000                                ....

0014be8c <__FUNCTION__.6985>:
  14be8c:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14be9c:	00007470                                pt..

0014bea0 <__FUNCTION__.6993>:
  14bea0:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14beb0:	00007470                                pt..

0014beb4 <__FUNCTION__.6996>:
  14beb4:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014bec4 <__FUNCTION__.6999>:
  14bec4:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014bed4 <__FUNCTION__.7002>:
  14bed4:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014bee4 <__FUNCTION__.7005>:
  14bee4:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014bef4 <__FUNCTION__.7008>:
  14bef4:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014bf04 <__FUNCTION__.7011>:
  14bf04:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014bf14 <__FUNCTION__.7014>:
  14bf14:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014bf24 <__FUNCTION__.7017>:
  14bf24:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014bf34 <__FUNCTION__.7020>:
  14bf34:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014bf44 <__FUNCTION__.7026>:
  14bf44:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014bf54 <__FUNCTION__.7030>:
  14bf54:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014bf64 <__FUNCTION__.7036>:
  14bf64:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014bf74 <__FUNCTION__.7042>:
  14bf74:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014bf84 <__FUNCTION__.7045>:
  14bf84:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014bf94 <__FUNCTION__.7048>:
  14bf94:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14bfa4:	0079656b                                key.

0014bfa8 <__FUNCTION__.7051>:
  14bfa8:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014bfb8 <__FUNCTION__.7054>:
  14bfb8:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14bfc8:	0000706f                                op..

0014bfcc <__FUNCTION__.7057>:
  14bfcc:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014bfdc <__FUNCTION__.7060>:
  14bfdc:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14bfec:	00007465                                et..

0014bff0 <__FUNCTION__.7063>:
  14bff0:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14c000:	00007465                                et..

0014c004 <__FUNCTION__.7066>:
  14c004:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c014:	74696e69 00000000                       init....

0014c01c <__FUNCTION__.7069>:
  14c01c:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c02c:	5f646461 63746177 00000068              add_watch...

0014c038 <__FUNCTION__.7072>:
  14c038:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c048:	775f6d72 68637461 00000000              rm_watch....

0014c054 <__FUNCTION__.7075>:
  14c054:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014c064 <__FUNCTION__.7078>:
  14c064:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14c074:	63696c6f 00000079                       olicy...

0014c07c <__FUNCTION__.7081>:
  14c07c:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14c08c:	63696c6f 00000079                       olicy...

0014c094 <__FUNCTION__.7084>:
  14c094:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014c0a4 <__FUNCTION__.7087>:
  14c0a4:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014c0b4 <__FUNCTION__.7090>:
  14c0b4:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014c0c4 <__FUNCTION__.7093>:
  14c0c4:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14c0d4:	00000000                                ....

0014c0d8 <__FUNCTION__.7096>:
  14c0d8:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14c0e8:	00000074                                t...

0014c0ec <__FUNCTION__.7099>:
  14c0ec:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14c0fc:	00000034                                4...

0014c100 <__FUNCTION__.7102>:
  14c100:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14c110:	00000000                                ....

0014c114 <__FUNCTION__.7105>:
  14c114:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c124:	00000000                                ....

0014c128 <__FUNCTION__.7108>:
  14c128:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014c138 <__FUNCTION__.7111>:
  14c138:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14c148:	00000074                                t...

0014c14c <__FUNCTION__.7114>:
  14c14c:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14c15c:	00007461                                at..

0014c160 <__FUNCTION__.7117>:
  14c160:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14c170:	00000000                                ....

0014c174 <__FUNCTION__.7120>:
  14c174:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14c184:	00000074                                t...

0014c188 <__FUNCTION__.7123>:
  14c188:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14c198:	00000000                                ....

0014c19c <__FUNCTION__.7126>:
  14c19c:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014c1ac <__FUNCTION__.7129>:
  14c1ac:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014c1bc <__FUNCTION__.7132>:
  14c1bc:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14c1cc:	6c5f7473 00747369                       st_list.

0014c1d4 <__FUNCTION__.7135>:
  14c1d4:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14c1e4:	6c5f7473 00747369                       st_list.

0014c1ec <__FUNCTION__.7138>:
  14c1ec:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014c1fc <__FUNCTION__.7141>:
  14c1fc:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14c20c:	6c69665f 61725f65 0065676e              _file_range.

0014c218 <__FUNCTION__.7144>:
  14c218:	63737973 5f6c6c61 00656574              syscall_tee.

0014c224 <__FUNCTION__.7147>:
  14c224:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14c234:	00000000                                ....

0014c238 <__FUNCTION__.7150>:
  14c238:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14c248:	00007365                                es..

0014c24c <__FUNCTION__.7153>:
  14c24c:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014c25c <__FUNCTION__.7156>:
  14c25c:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14c26c:	00746961                                ait.

0014c270 <__FUNCTION__.7159>:
  14c270:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14c280:	00006461                                ad..

0014c284 <__FUNCTION__.7162>:
  14c284:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14c294:	00000074                                t...

0014c298 <__FUNCTION__.7165>:
  14c298:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c2a8:	00000000                                ....

0014c2ac <__FUNCTION__.7168>:
  14c2ac:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c2bc:	61657263 00006574                       create..

0014c2c4 <__FUNCTION__.7171>:
  14c2c4:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014c2d4 <__FUNCTION__.7174>:
  14c2d4:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14c2e4:	00000065                                e...

0014c2e8 <__FUNCTION__.7177>:
  14c2e8:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c2f8:	74746573 00656d69                       settime.

0014c300 <__FUNCTION__.7180>:
  14c300:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c310:	74746567 00656d69                       gettime.

0014c318 <__FUNCTION__.7183>:
  14c318:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c328:	00000034                                4...

0014c32c <__FUNCTION__.7186>:
  14c32c:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14c33c:	00000000                                ....

0014c340 <__FUNCTION__.7189>:
  14c340:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14c350:	65746165 00000031                       eate1...

0014c358 <__FUNCTION__.7192>:
  14c358:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014c368 <__FUNCTION__.7195>:
  14c368:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014c378 <__FUNCTION__.7198>:
  14c378:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c388:	74696e69 00000031                       init1...

0014c390 <__FUNCTION__.7201>:
  14c390:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014c3a0 <__FUNCTION__.7204>:
  14c3a0:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014c3b0 <__FUNCTION__.7207>:
  14c3b0:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c3c0:	75657571 666e6965 0000006f              queueinfo...

0014c3cc <__FUNCTION__.7210>:
  14c3cc:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c3dc:	6f5f746e 006e6570                       nt_open.

0014c3e4 <__FUNCTION__.7213>:
  14c3e4:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c3f4:	00000000                                ....

0014c3f8 <__FUNCTION__.7216>:
  14c3f8:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c408 <__FUNCTION__.7219>:
  14c408:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c418:	696e695f 00000074                       _init...

0014c420 <__FUNCTION__.7222>:
  14c420:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c430:	72616d5f 0000006b                       _mark...

0014c438 <__FUNCTION__.7230>:
  14c438:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c448:	00000034                                4...

0014c44c <__FUNCTION__.7233>:
  14c44c:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c45c:	646e6168 615f656c 00000074              handle_at...

0014c468 <__FUNCTION__.7236>:
  14c468:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c478:	646e6168 615f656c 00000074              handle_at...

0014c484 <__FUNCTION__.7239>:
  14c484:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c494:	6d69746a 00000065                       jtime...

0014c49c <__FUNCTION__.7242>:
  14c49c:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c4ac <__FUNCTION__.7245>:
  14c4ac:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c4bc:	00000000                                ....

0014c4c0 <__FUNCTION__.7248>:
  14c4c0:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c4d0 <__FUNCTION__.7251>:
  14c4d0:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c4e0:	725f6d76 76646165 00000000              vm_readv....

0014c4ec <__FUNCTION__.7254>:
  14c4ec:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c4fc:	775f6d76 65746972 00000076              vm_writev...

0014c508 <__FUNCTION__.7257>:
  14c508:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c518 <__FUNCTION__.7260>:
  14c518:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c528:	656c7564 00000000                       dule....

0014c530 <__FUNCTION__.7263>:
  14c530:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c540:	74746174 00000072                       tattr...

0014c548 <__FUNCTION__.7266>:
  14c548:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c558:	74746174 00000072                       tattr...

0014c560 <__FUNCTION__.7269>:
  14c560:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c570:	00000032                                2...

0014c574 <__FUNCTION__.7272>:
  14c574:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c584 <__FUNCTION__.7278>:
  14c584:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c594:	0000006d                                m...

0014c598 <__FUNCTION__.7281>:
  14c598:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c5a8:	65746165 00000000                       eate....

0014c5b0 <__FUNCTION__.7284>:
  14c5b0:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c5bc <__FUNCTION__.7287>:
  14c5bc:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c5cc:	00000000                                ....

0014c5d0 <__FUNCTION__.7290>:
  14c5d0:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c5e0:	00646674                                tfd.

0014c5e4 <__FUNCTION__.7293>:
  14c5e4:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c5f4:	00007265                                er..

0014c5f8 <__FUNCTION__.7296>:
  14c5f8:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c608 <__FUNCTION__.7299>:
  14c608:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c618:	61725f65 0065676e                       e_range.

0014c620 <__FUNCTION__.7302>:
  14c620:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c630 <__FUNCTION__.7305>:
  14c630:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c640:	00000000                                ....

0014c644 <__FUNCTION__.7308>:
  14c644:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c654:	6365746f 00000074                       otect...

0014c65c <__FUNCTION__.7311>:
  14c65c:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c66c:	0000636f                                oc..

0014c670 <__FUNCTION__.7314>:
  14c670:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c680:	00000065                                e...

0014c684 <__FUNCTION__.7317>:
  14c684:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c694 <__FUNCTION__.7320>:
  14c694:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c6a4 <__FUNCTION__.7323>:
  14c6a4:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c6b4:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c6c4:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c6d4:	6d305b1b 00000000                       .[0m....

0014c6dc <syscall_table>:
  14c6dc:	0013b030 0013b28c 0013c2c4 0013bd2c     0...........,...
  14c6ec:	0013bcf4 0013bcbc 0013b264 00000000     ........d.......
  14c6fc:	0013b014 0013aff8 0013b23c 0013bc84     ........<.......
  14c70c:	0013b214 00000000 0013afdc 0013afc0     ................
  14c71c:	0013afa4 00000000 00000000 0013c32c     ............,...
  14c72c:	0013c2a4 0013af88 00000000 0013af6c     ............l...
  14c73c:	0013af50 00000000 0013af34 00000000     P.......4.......
  14c74c:	00000000 0013af18 00000000 00000000     ................
  14c75c:	00000000 0013b6a4 0013aefc 00000000     ................
  14c76c:	0013aee0 0013b674 0013b644 0013b614     ....t...D.......
  14c77c:	0013b1ec 0013b1c4 0013b19c 0013aec4     ................
  14c78c:	00000000 0013b174 0013aea8 0013ae8c     ....t...........
  14c79c:	00000000 0013ae70 0013ae54 0013ae38     ....p...T...8...
  14c7ac:	0013ae1c 00000000 0013c2e4 0013bc4c     ............L...
  14c7bc:	00000000 0013ae00 00000000 00000000     ................
  14c7cc:	0013ade4 0013adc8 0013adac 0013b5e4     ................
  14c7dc:	0013ad90 0013ad74 0013c284 0013bf14     ....t...........
	...
  14c7f4:	0013ad58 0013ad3c 0013ad20 0013ad04     X...<... .......
  14c804:	0013ace8 0013b5b4 00000000 0013accc     ................
  14c814:	0013acb0 0013ac94 0013ac78 0013ac5c     ........x...\...
  14c824:	00000000 0013ac40 00000000 0013bc14     ....@...........
  14c834:	0013ac24 0013ac08 0013abec 00000000     $...............
  14c844:	00000000 0013b584 0013abd0 0013abb4     ................
  14c854:	0013ab98 0013ab7c 0013ab60 0013ab44     ....|...`...D...
  14c864:	00000000 0013ab28 0013ab0c 00000000     ....(...........
  14c874:	00000000 0013aaf0 0013aad4 0013aab8     ................
  14c884:	0013b554 0013b524 0013aa9c 00000000     T...$...........
  14c894:	00000000 0013aa80 00000000 00000000     ................
  14c8a4:	0013aa64 0013aa48 0013aa2c 00000000     d...H...,.......
  14c8b4:	0013b14c 0013aa10 0013a9f4 0013a9d8     L...............
  14c8c4:	0013a9bc 00000000 0013a9a0 0013a984     ................
  14c8d4:	0013becc 00000000 0013a968 0013a94c     ........h...L...
  14c8e4:	00000000 0013a930 0013a914 0013a8f8     ....0...........
  14c8f4:	0013a8dc 0013a8c0 0013a8a4 00000000     ................
  14c904:	0013a888 0013a86c 0013c09c 0013bbdc     ....l...........
  14c914:	0013c04c 0013a850 0013a834 0013bb38     L...P...4...8...
  14c924:	0013ba94 0013a818 0013a7fc 0013a7e0     ................
  14c934:	0013a7c4 0013a7a8 0013a78c 0013a770     ............p...
  14c944:	0013b4f4 0013b4c4 0013ba5c 0013ba24     ........\...$...
  14c954:	0013a754 0013b124 0013b0fc 0013a738     T...$.......8...
  14c964:	0013b494 0013bffc 0013a71c 0013a700     ................
	...
  14c97c:	0013b9ec 0013a6e4 0013a6c8 0013a6ac     ................
  14c98c:	0013a690 0013a674 0013be84 0013be3c     ....t.......<...
  14c99c:	0013a658 0013a63c 0013a620 0013a604     X...<... .......
  14c9ac:	0013a5e8 0013a5cc 0013a5b0 0013b464     ............d...
  14c9bc:	0013a594 0013a578 0013a55c 0013a540     ....x...\...@...
	...
  14c9d4:	0013c264 0013b434 0013c1f4 0013a524     d...4.......$...
  14c9e4:	0013a508 0013b404 0013b3d4 0013b3a4     ................
  14c9f4:	0013a4ec 0013a4d0 0013a4b4 0013a498     ................
  14ca04:	0013a47c 0013a460 0013a444 0013a428     |...`...D...(...
  14ca14:	0013a40c 0013a3f0 0013a3d4 0013a3b8     ................
  14ca24:	0013a39c 0013a380 0013a364 0013a348     ........d...H...
  14ca34:	0013a32c 0013a310 0013a2f4 0013b9b4     ,...............
  14ca44:	0013a2d8 0013a2bc 0013b97c 0013b944     ........|...D...
	...
  14ca5c:	0013c244 0013a2a0 0013a284 0013a268     D...........h...
  14ca6c:	0013a24c 0013a230 0013a214 0013a1f8     L...0...........
  14ca7c:	0013a1dc 0013a1c0 0013a1a4 0013a188     ................
  14ca8c:	0013a16c 0013a150 0013b374 0013a134     l...P...t...4...
  14ca9c:	0013c1a0 0013b90c 0013a118 0013a0fc     ................
  14caac:	0013a0e0 0013a0c4 0013a0a8 0013a08c     ................
  14cabc:	0013b0d4 0013a070 0013a054 0013a038     ....p...T...8...
  14cacc:	0013a01c 0013a000 00000000 00000000     ................
  14cadc:	0013b0ac 00139fe4 00139fc8 00139fac     ................
  14caec:	00139f90 00139f74 0013b344 0013b314     ....t...D.......
  14cafc:	0013b2e4 00139f58 00139f3c 00139f20     ....X...<... ...
  14cb0c:	00139f04 00139ee8 00139ecc 00139eb0     ................
  14cb1c:	00139e94 00139e78 00139e5c 00139e40     ....x...\...@...
  14cb2c:	00139e24 00139e08 00139dec 00139dd0     $...............
  14cb3c:	00139db4 0013b8d4 0013b89c 0013b864     ............d...
  14cb4c:	0013b2b4 0013b82c 0013b7f4 0013b7bc     ....,...........
  14cb5c:	00139d98 0013bdf4 0013c14c 0013bdac     ........L.......
  14cb6c:	0013c0f8 00139d7c 0013bfac 0013bf5c     ....|.......\...
  14cb7c:	00139d60 00139d44 00139d28 00139d0c     `...D...(.......
  14cb8c:	00139cf0 00139cd4 00139cb8 00139c9c     ................
  14cb9c:	00139c80 0013b780 0013b080 0013b744     ............D...
  14cbac:	0013b70c 00139c64 00139c48 00139c2c     ....d...H...,...
  14cbbc:	00139c10 00139bf4 00139bd8 00139bbc     ................
  14cbcc:	00139ba0 00139b84 00139b68 00139b4c     ........h...L...
  14cbdc:	00139b30 00139b14 00139af8 00139adc     0...............
  14cbec:	00139ac0 00139aa4 00139a88 00139a6c     ............l...
  14cbfc:	00139a50 00139a34 00139a18 001399fc     P...4...........
  14cc0c:	001399e0 001399c4 001399a8 0013998c     ................
  14cc1c:	00139970 00139954 00139938 0013991c     p...T...8.......
  14cc2c:	00139900 001398e4 001398c8 001398ac     ................
  14cc3c:	00139890 00139874 00139858 0013983c     ....t...X...<...
  14cc4c:	00139820 00139804 001397e8 001397cc      ...............
  14cc5c:	001397b0 00139794 00139778 0013975c     ........x...\...
  14cc6c:	00139740 00139724 00139708 001396ec     @...$...........
  14cc7c:	001396d0 001396b4 00139698 0013967c     ............|...
  14cc8c:	00139660 00139644 00139628 0013960c     `...D...(.......
  14cc9c:	001395f0 0013bd64 001395d4 001395b8     ....d...........
  14ccac:	0013959c 00139580 00139564 00139548     ........d...H...
  14ccbc:	0013952c 00139510 001394f4 001394d8     ,...............
  14cccc:	001394bc 001394a0 00139484 00139468     ............h...
  14ccdc:	0013b6d4 0013944c 00139430 00139414     ....L...0.......
  14ccec:	001393f8 001393dc 001393c0 001393a4     ................
  14ccfc:	00139388 0013936c 00139350 00139334     ....l...P...4...
  14cd0c:	00139318 001392fc 001392e0 001392c4     ................
  14cd1c:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14cd2c:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014cd3c <bin_tab>:
  14cd3c:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14cd4c:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14cd5c:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14cd6c:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014cd78 <stderr>:
  14cd78:	0014d2a8                                ....

0014cd7c <stdout>:
  14cd7c:	0014d340 20202b2d 30583020 00000078     @...-+   0X0x...
  14cd8c:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14cd9c:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14cdac:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014cdbc <states>:
  14cdbc:	000a0019 00191919 05000000 00000000     ................
  14cdcc:	00090000 0b000000 00000000 00000000     ................
  14cddc:	0a110019 03191919 0100070a 180b091b     ................
  14cdec:	06090000 0b00000b 00190600 19190000     ................
  14cdfc:	00000019 00000000 00000000 00000000     ................
  14ce0c:	00000e00 00000000 00190000 19190d0a     ................
  14ce1c:	000d0019 09000200 0000000e 000e0009     ................
  14ce2c:	00000e00 00000000 00000000 00000000     ................
	...
  14ce44:	0c000000 00000000 00000000 13000000     ................
  14ce54:	00000000 00000013 000c0900 00000000     ................
  14ce64:	0c00000c 00000000 00000000 00000000     ................
	...
  14ce80:	00001000 00000000 00000000 00000f00     ................
  14ce90:	000f0400 09000000 00000010 00100000     ................
  14cea0:	00001000 00000000 00000000 00000000     ................
	...
  14ceb8:	12000000 00000000 00000000 11000000     ................
  14cec8:	00000000 00000011 00120900 00000000     ................
  14ced8:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14cefc:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14cf2c:	14000000 00000000 00000000 17000000     ................
  14cf3c:	00000000 00000017 00140900 00000000     ................
  14cf4c:	14000014 00000000 00000000 00000000     ................
	...
  14cf68:	00001600 00000000 00000000 00001500     ................
  14cf78:	00150000 09000000 00000016 00160000     ................
  14cf88:	00001600                                ....

0014cf8c <xdigits>:
  14cf8c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014cf9c <all_mask>:
  14cf9c:	ffffffff ffffffff                       ........

0014cfa4 <app_mask>:
  14cfa4:	7fffffff fffffffc                       ........

0014cfac <__EH_FRAME_BEGIN__>:
  14cfac:	00000000                                ....
