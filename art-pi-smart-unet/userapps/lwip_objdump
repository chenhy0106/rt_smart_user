
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e2d6 	bl	138b8c <__libc_start_main>
  100030:	00145068 	.word	0x00145068
  100034:	00103c78 	.word	0x00103c78
  100038:	0014505c 	.word	0x0014505c

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3f0 	.word	0x0014d3f0
  100060:	0014d3f0 	.word	0x0014d3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3f0 	.word	0x0014d3f0
  100098:	0014d3f0 	.word	0x0014d3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3f0 	.word	0x0014d3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014cd00 	.word	0x0014cd00

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3f4 	.word	0x0014d3f4
  100114:	0014cd00 	.word	0x0014cd00

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00f003 	bl	13c14c <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00eff8 	bl	13c14c <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00efe7 	bl	13c14c <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00efd5 	bl	13c14c <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00efc8 	bl	13c14c <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00efbb 	bl	13c14c <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00efad 	bl	13c14c <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00ef9e 	bl	13c14c <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00ef90 	bl	13c14c <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e3050074 	movw	r0, #20596	; 0x5074
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00ef4d 	bl	13c14c <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00ef3d 	bl	13c14c <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00ef2e 	bl	13c14c <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00ef23 	bl	13c14c <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00ef14 	bl	13c14c <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00ef09 	bl	13c14c <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00eef7 	bl	13c14c <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00eee5 	bl	13c14c <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00eeda 	bl	13c14c <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f288 	bl	13d040 <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00eebb 	bl	13c14c <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f423 	bl	13d730 <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00ee93 	bl	13c14c <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e175 	bl	138d04 <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e16d 	bl	138d04 <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3050080 	movw	r0, #20608	; 0x5080
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f6de 	bl	13e2e0 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f550 	bl	13dd30 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e0f1 	bl	138bc8 <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e10f 	bl	138c50 <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e0eb 	bl	138bc8 <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e3050098 	movw	r0, #20632	; 0x5098
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f69c 	bl	13e2a8 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb01087a 	bl	142a38 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f580 	bl	13de64 <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f585 	bl	13de7c <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb0101ad 	bl	140f64 <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb0101a8 	bl	140f64 <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f4e2 	bl	13dc68 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f4d9 	bl	13dc54 <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f4ed 	bl	13dccc <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e30500c8 	movw	r0, #20680	; 0x50c8
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f615 	bl	13e184 <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f49e 	bl	13dbc0 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e09c 	bl	138bc8 <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e0ba 	bl	138c50 <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e096 	bl	138bc8 <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e30500e4 	movw	r0, #20708	; 0x50e4
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f647 	bl	13e2a8 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f4b8 	bl	13dc7c <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e087 	bl	138bc8 <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e0a5 	bl	138c50 <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e081 	bl	138bc8 <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3050110 	movw	r0, #20752	; 0x5110
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f632 	bl	13e2a8 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f4cf 	bl	13dd30 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e070 	bl	138bc8 <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e08e 	bl	138c50 <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e06a 	bl	138bc8 <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e3050134 	movw	r0, #20788	; 0x5134
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f61b 	bl	13e2a8 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb010141 	bl	140f64 <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f47b 	bl	13dc68 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f472 	bl	13dc54 <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f45c 	bl	13dc18 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f4c8 	bl	13dec4 <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e3050164 	movw	r0, #20836	; 0x5164
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f56e 	bl	13e184 <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e3050174 	movw	r0, #20852	; 0x5174
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f56a 	bl	13e184 <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f3d8 	bl	13db84 <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb01078b 	bl	142a68 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e02e 	bl	138d04 <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb010778 	bl	142a68 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb010773 	bl	142a68 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f0dd 	bl	13d040 <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00ed14 	bl	13c14c <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f27f 	bl	13d730 <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00ecef 	bl	13c14c <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00ecc6 	bl	13c14c <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f237 	bl	13d730 <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00eca2 	bl	13c14c <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00ec78 	bl	13c14c <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ec5c 	bl	13c14c <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00f00c 	bl	13d040 <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ec43 	bl	13c14c <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f1ae 	bl	13d730 <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ec1e 	bl	13c14c <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ebf5 	bl	13c14c <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f166 	bl	13d730 <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ebd1 	bl	13c14c <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00eba9 	bl	13c14c <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00eb8b 	bl	13c14c <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00ef3b 	bl	13d040 <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00eb72 	bl	13c14c <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f0dd 	bl	13d730 <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00eb4d 	bl	13c14c <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00eb24 	bl	13c14c <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f095 	bl	13d730 <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00eb00 	bl	13c14c <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00ead5 	bl	13c14c <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00eab7 	bl	13c14c <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00ea98 	bl	13c14c <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ee48 	bl	13d040 <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00ea7d 	bl	13c14c <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00efe8 	bl	13d730 <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00db60 	bl	138564 <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00ea51 	bl	13c14c <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00ea28 	bl	13c14c <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00ef99 	bl	13d730 <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00ea04 	bl	13c14c <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00e9d9 	bl	13c14c <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00e9ba 	bl	13c14c <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00e998 	bl	13c14c <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ed49 	bl	13d040 <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00e980 	bl	13c14c <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00eeeb 	bl	13d730 <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00e95b 	bl	13c14c <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e932 	bl	13c14c <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00eea3 	bl	13d730 <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e90e 	bl	13c14c <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e8e4 	bl	13c14c <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e8be 	bl	13c14c <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e8b6 	bl	13c14c <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e8ac 	bl	13c14c <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e89d 	bl	13c14c <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e892 	bl	13c14c <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e885 	bl	13c14c <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e87a 	bl	13c14c <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e868 	bl	13c14c <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e85b 	bl	13c14c <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e84e 	bl	13c14c <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e83f 	bl	13c14c <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e837 	bl	13c14c <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e82d 	bl	13c14c <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb0101f4 	bl	1428bc <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e7eb 	bl	13c14c <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e7d9 	bl	13c14c <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e7d1 	bl	13c14c <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e7c7 	bl	13c14c <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e7bf 	bl	13c14c <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e7b9 	bl	13c14c <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e7ac 	bl	13c14c <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3410 	movw	r3, #54288	; 0xd410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3410 	movw	r3, #54288	; 0xd410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00ea88 	bl	13d040 <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3410 	movw	r3, #54288	; 0xd410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ec20 	bl	13d730 <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3410 	movw	r3, #54288	; 0xd410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3410 	movw	r3, #54288	; 0xd410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3410 	movw	r3, #54288	; 0xd410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3418 	movw	r3, #54296	; 0xd418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3420 	movw	r3, #54304	; 0xd420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3410 	movw	r3, #54288	; 0xd410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3410 	movw	r3, #54288	; 0xd410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3410 	movw	r3, #54288	; 0xd410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3410 	movw	r3, #54288	; 0xd410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3410 	movw	r3, #54288	; 0xd410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3418 	movw	r3, #54296	; 0xd418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3410 	movw	r3, #54288	; 0xd410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0418 	movw	r0, #54296	; 0xd418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e4fc 	bl	13c14c <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e4f1 	bl	13c14c <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e4eb 	bl	13c14c <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d3414 	movw	r3, #54292	; 0xd414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d3414 	movw	r3, #54292	; 0xd414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3050180 	movw	r0, #20864	; 0x5180
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d3414 	movw	r3, #54292	; 0xd414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3410 	movw	r3, #54288	; 0xd410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e3050188 	movw	r0, #20872	; 0x5188
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3410 	movw	r3, #54288	; 0xd410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d3414 	movw	r3, #54292	; 0xd414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3051180 	movw	r1, #20864	; 0x5180
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e48b 	bl	13c14c <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d340c 	movw	r3, #54284	; 0xd40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3050180 	movw	r0, #20864	; 0x5180
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e824 	bl	13d040 <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00e9d6 	bl	13d730 <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00e9db 	bl	13d76c <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00e989 	bl	13d654 <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f61d 	bl	1408e8 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f642 	bl	1409c4 <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f5f8 	bl	1408e8 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f5e9 	bl	1408e8 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e3050194 	movw	r0, #20884	; 0x5194
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ec50 	bl	13e2a8 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f7f9 	bl	141178 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f934 	bl	141694 <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f7cb 	bl	141120 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f7e3 	bl	1411a8 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f801 	bl	141258 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f818 	bl	1412ec <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f771 	bl	141080 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f71c 	bl	140f64 <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f5d6 	bl	140a84 <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f687 	bl	140d80 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f68c 	bl	140dcc <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e3050198 	movw	r0, #20888	; 0x5198
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00eb37 	bl	13e2a8 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d5c5 	bl	138ce8 <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e305154c 	movw	r1, #21836	; 0x554c
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e30501d8 	movw	r0, #20952	; 0x51d8
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e3051528 	movw	r1, #21800	; 0x5528
  103658:	e3401014 	movt	r1, #20
  10365c:	e30501d8 	movw	r0, #20952	; 0x51d8
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <unet_cmd_reply>:
    rt_channel_recv(channel, &unet_msg);
    return unet_msg.u.d;
}

rt_inline void unet_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <unet_cmd_reply+0x38>
  1036b0:	e3a02036 	mov	r2, #54	; 0x36
  1036b4:	e305153c 	movw	r1, #21820	; 0x553c
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e30501d8 	movw	r0, #20952	; 0x51d8
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg unet_msg;
    unet_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    unet_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_reply(channel, &unet_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_RDWR);
  1036fc:	e30d3014 	movw	r3, #53268	; 0xd014
  103700:	e3403014 	movt	r3, #20
  103704:	e5933000 	ldr	r3, [r3]
  103708:	e3a01002 	mov	r1, #2
  10370c:	e1a00003 	mov	r0, r3
  103710:	ebfff280 	bl	100118 <rt_channel_open>
  103714:	e1a02000 	mov	r2, r0
  103718:	e30d3010 	movw	r3, #53264	; 0xd010
  10371c:	e3403014 	movt	r3, #20
  103720:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103724:	e30d3010 	movw	r3, #53264	; 0xd010
  103728:	e3403014 	movt	r3, #20
  10372c:	e5933000 	ldr	r3, [r3]
  103730:	e3530000 	cmp	r3, #0
  103734:	aa000001 	bge	103740 <stack_init+0x4c>
  103738:	e3a03001 	mov	r3, #1
  10373c:	ea000001 	b	103748 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  103740:	eb001b70 	bl	10a508 <lwip_system_init>
    return 0;
  103744:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  103748:	e1a00003 	mov	r0, r3
  10374c:	e8bd8800 	pop	{fp, pc}

00103750 <stack_run>:
};
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  103750:	e92d4800 	push	{fp, lr}
  103754:	e28db004 	add	fp, sp, #4
  103758:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  10375c:	e30d3010 	movw	r3, #53264	; 0xd010
  103760:	e3403014 	movt	r3, #20
  103764:	e5933000 	ldr	r3, [r3]
  103768:	e1a00003 	mov	r0, r3
  10376c:	ebffffb0 	bl	103634 <channel_cmd_recv>
  103770:	e1a03000 	mov	r3, r0
  103774:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103778:	e51b300c 	ldr	r3, [fp, #-12]
  10377c:	e3530000 	cmp	r3, #0
  103780:	ba00012b 	blt	103c34 <stack_run+0x4e4>
        {
            cmd = lwp_shmat(shmid, NULL);
  103784:	e3a01000 	mov	r1, #0
  103788:	e51b000c 	ldr	r0, [fp, #-12]
  10378c:	ebfff9df 	bl	101f10 <lwp_shmat>
  103790:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e3530000 	cmp	r3, #0
  10379c:	1a000002 	bne	1037ac <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  1037a0:	e51b000c 	ldr	r0, [fp, #-12]
  1037a4:	ebfff9ce 	bl	101ee4 <lwp_shmrm>
                continue;
  1037a8:	ea000124 	b	103c40 <stack_run+0x4f0>
            }

            switch (cmd->cmd)
  1037ac:	e51b3010 	ldr	r3, [fp, #-16]
  1037b0:	e5933000 	ldr	r3, [r3]
  1037b4:	e2433014 	sub	r3, r3, #20
  1037b8:	e3530009 	cmp	r3, #9
  1037bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1037c0:	ea00011d 	b	103c3c <stack_run+0x4ec>
  1037c4:	001037ec 	.word	0x001037ec
  1037c8:	00103c3c 	.word	0x00103c3c
  1037cc:	0010384c 	.word	0x0010384c
  1037d0:	001038cc 	.word	0x001038cc
  1037d4:	00103918 	.word	0x00103918
  1037d8:	0010397c 	.word	0x0010397c
  1037dc:	001039d8 	.word	0x001039d8
  1037e0:	00103ae4 	.word	0x00103ae4
  1037e4:	00103c3c 	.word	0x00103c3c
  1037e8:	00103bb0 	.word	0x00103bb0
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  1037ec:	e51b3010 	ldr	r3, [fp, #-16]
  1037f0:	e5933004 	ldr	r3, [r3, #4]
  1037f4:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  1037f8:	e51b3010 	ldr	r3, [fp, #-16]
  1037fc:	e5933008 	ldr	r3, [r3, #8]
  103800:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e593300c 	ldr	r3, [r3, #12]
  10380c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103810:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103814:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103818:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10381c:	eb001836 	bl	1098fc <socket_internal>
  103820:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)socket);
  10382c:	e30d3010 	movw	r3, #53264	; 0xd010
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff91 	bl	103690 <unet_cmd_reply>
                break;
  103848:	ea0000fc 	b	103c40 <stack_run+0x4f0>
            //     lwp_shmdt(cmd);
            //     unet_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e283301c 	add	r3, r3, #28
  103860:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103864:	e51b3010 	ldr	r3, [fp, #-16]
  103868:	e5933008 	ldr	r3, [r3, #8]
  10386c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  103870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103874:	e1a02003 	mov	r2, r3
  103878:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10387c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103880:	eb00177b 	bl	109674 <bind_internal>
  103884:	e50b0008 	str	r0, [fp, #-8]
                printf("****%s %d %d\n", __FILE__, __LINE__, result);
  103888:	e51b3008 	ldr	r3, [fp, #-8]
  10388c:	e3a02f46 	mov	r2, #280	; 0x118
  103890:	e30511f8 	movw	r1, #20984	; 0x51f8
  103894:	e3401014 	movt	r1, #20
  103898:	e3050214 	movw	r0, #21012	; 0x5214
  10389c:	e3400014 	movt	r0, #20
  1038a0:	eb00ea80 	bl	13e2a8 <printf>

                lwp_shmdt(cmd);
  1038a4:	e51b0010 	ldr	r0, [fp, #-16]
  1038a8:	ebfff9a5 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)result);
  1038ac:	e30d3010 	movw	r3, #53264	; 0xd010
  1038b0:	e3403014 	movt	r3, #20
  1038b4:	e5933000 	ldr	r3, [r3]
  1038b8:	e51b2008 	ldr	r2, [fp, #-8]
  1038bc:	e1a01002 	mov	r1, r2
  1038c0:	e1a00003 	mov	r0, r3
  1038c4:	ebffff71 	bl	103690 <unet_cmd_reply>
                break;
  1038c8:	ea0000dc 	b	103c40 <stack_run+0x4f0>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  1038cc:	e51b3010 	ldr	r3, [fp, #-16]
  1038d0:	e5933004 	ldr	r3, [r3, #4]
  1038d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  1038d8:	e51b3010 	ldr	r3, [fp, #-16]
  1038dc:	e5933008 	ldr	r3, [r3, #8]
  1038e0:	e1a01003 	mov	r1, r3
  1038e4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038e8:	eb001798 	bl	109750 <listen_internal>
  1038ec:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038f0:	e51b0010 	ldr	r0, [fp, #-16]
  1038f4:	ebfff992 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)result);
  1038f8:	e30d3010 	movw	r3, #53264	; 0xd010
  1038fc:	e3403014 	movt	r3, #20
  103900:	e5933000 	ldr	r3, [r3]
  103904:	e51b2008 	ldr	r2, [fp, #-8]
  103908:	e1a01002 	mov	r1, r2
  10390c:	e1a00003 	mov	r0, r3
  103910:	ebffff5e 	bl	103690 <unet_cmd_reply>
                break;
  103914:	ea0000c9 	b	103c40 <stack_run+0x4f0>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  103918:	e51b3010 	ldr	r3, [fp, #-16]
  10391c:	e5933004 	ldr	r3, [r3, #4]
  103920:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103924:	e51b3010 	ldr	r3, [fp, #-16]
  103928:	e283301c 	add	r3, r3, #28
  10392c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103930:	e51b3010 	ldr	r3, [fp, #-16]
  103934:	e5933008 	ldr	r3, [r3, #8]
  103938:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  10393c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103940:	e1a02003 	mov	r2, r3
  103944:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103948:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10394c:	eb001759 	bl	1096b8 <connect_internal>
  103950:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103954:	e51b0010 	ldr	r0, [fp, #-16]
  103958:	ebfff979 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)result);
  10395c:	e30d3010 	movw	r3, #53264	; 0xd010
  103960:	e3403014 	movt	r3, #20
  103964:	e5933000 	ldr	r3, [r3]
  103968:	e51b2008 	ldr	r2, [fp, #-8]
  10396c:	e1a01002 	mov	r1, r2
  103970:	e1a00003 	mov	r0, r3
  103974:	ebffff45 	bl	103690 <unet_cmd_reply>
                break;
  103978:	ea0000b0 	b	103c40 <stack_run+0x4f0>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  10397c:	e51b3010 	ldr	r3, [fp, #-16]
  103980:	e5933004 	ldr	r3, [r3, #4]
  103984:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103988:	e51b3010 	ldr	r3, [fp, #-16]
  10398c:	e283301c 	add	r3, r3, #28
  103990:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103994:	e51b3010 	ldr	r3, [fp, #-16]
  103998:	e2833008 	add	r3, r3, #8
  10399c:	e1a02003 	mov	r2, r3
  1039a0:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  1039a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1039a8:	eb0016c9 	bl	1094d4 <accept_internal>
  1039ac:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  1039b0:	e51b0010 	ldr	r0, [fp, #-16]
  1039b4:	ebfff962 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)result);
  1039b8:	e30d3010 	movw	r3, #53264	; 0xd010
  1039bc:	e3403014 	movt	r3, #20
  1039c0:	e5933000 	ldr	r3, [r3]
  1039c4:	e51b2008 	ldr	r2, [fp, #-8]
  1039c8:	e1a01002 	mov	r1, r2
  1039cc:	e1a00003 	mov	r0, r3
  1039d0:	ebffff2e 	bl	103690 <unet_cmd_reply>
                break;
  1039d4:	ea000099 	b	103c40 <stack_run+0x4f0>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  1039d8:	e51b3010 	ldr	r3, [fp, #-16]
  1039dc:	e5933004 	ldr	r3, [r3, #4]
  1039e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  1039e4:	e51b3010 	ldr	r3, [fp, #-16]
  1039e8:	e5933008 	ldr	r3, [r3, #8]
  1039ec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  1039f0:	e51b3010 	ldr	r3, [fp, #-16]
  1039f4:	e593300c 	ldr	r3, [r3, #12]
  1039f8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  1039fc:	e51b3010 	ldr	r3, [fp, #-16]
  103a00:	e5933010 	ldr	r3, [r3, #16]
  103a04:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103a08:	e51b3010 	ldr	r3, [fp, #-16]
  103a0c:	e283301c 	add	r3, r3, #28
  103a10:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  103a14:	e30d3424 	movw	r3, #54308	; 0xd424
  103a18:	e3403014 	movt	r3, #20
  103a1c:	e5933000 	ldr	r3, [r3]
  103a20:	e2832001 	add	r2, r3, #1
  103a24:	e30d3424 	movw	r3, #54308	; 0xd424
  103a28:	e3403014 	movt	r3, #20
  103a2c:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103a30:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a34:	e3530000 	cmp	r3, #0
  103a38:	1a000006 	bne	103a58 <stack_run+0x308>
                {
                    result = send_internal(socket, data, size, flags);
  103a3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a40:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a44:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a48:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a4c:	eb00177c 	bl	109844 <send_internal>
  103a50:	e50b0008 	str	r0, [fp, #-8]
  103a54:	ea00000f 	b	103a98 <stack_run+0x348>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103a58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103a5c:	e283301c 	add	r3, r3, #28
  103a60:	e51b2010 	ldr	r2, [fp, #-16]
  103a64:	e0823003 	add	r3, r2, r3
  103a68:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103a6c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103a70:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a74:	e58d3004 	str	r3, [sp, #4]
  103a78:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103a7c:	e58d3000 	str	r3, [sp]
  103a80:	e1a03002 	mov	r3, r2
  103a84:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a88:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a8c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a90:	eb001782 	bl	1098a0 <sendto_internal>
  103a94:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103a98:	e51b3008 	ldr	r3, [fp, #-8]
  103a9c:	e3530000 	cmp	r3, #0
  103aa0:	ca000005 	bgt	103abc <stack_run+0x36c>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103aa4:	e300214d 	movw	r2, #333	; 0x14d
  103aa8:	e305151c 	movw	r1, #21788	; 0x551c
  103aac:	e3401014 	movt	r1, #20
  103ab0:	e3050224 	movw	r0, #21028	; 0x5224
  103ab4:	e3400014 	movt	r0, #20
  103ab8:	ebfffd95 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103abc:	e51b0010 	ldr	r0, [fp, #-16]
  103ac0:	ebfff91f 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)result);
  103ac4:	e30d3010 	movw	r3, #53264	; 0xd010
  103ac8:	e3403014 	movt	r3, #20
  103acc:	e5933000 	ldr	r3, [r3]
  103ad0:	e51b2008 	ldr	r2, [fp, #-8]
  103ad4:	e1a01002 	mov	r1, r2
  103ad8:	e1a00003 	mov	r0, r3
  103adc:	ebfffeeb 	bl	103690 <unet_cmd_reply>
                break;
  103ae0:	ea000056 	b	103c40 <stack_run+0x4f0>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103ae4:	e51b3010 	ldr	r3, [fp, #-16]
  103ae8:	e5933004 	ldr	r3, [r3, #4]
  103aec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103af0:	e51b3010 	ldr	r3, [fp, #-16]
  103af4:	e5933008 	ldr	r3, [r3, #8]
  103af8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103afc:	e51b3010 	ldr	r3, [fp, #-16]
  103b00:	e593300c 	ldr	r3, [r3, #12]
  103b04:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103b08:	e51b3010 	ldr	r3, [fp, #-16]
  103b0c:	e5933010 	ldr	r3, [r3, #16]
  103b10:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103b14:	e51b3010 	ldr	r3, [fp, #-16]
  103b18:	e283301c 	add	r3, r3, #28
  103b1c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103b20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b24:	e3530000 	cmp	r3, #0
  103b28:	1a000006 	bne	103b48 <stack_run+0x3f8>
                {
                    result = recv_internal(socket, data, size, flags);
  103b2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103b30:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b34:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b38:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b3c:	eb001712 	bl	10978c <recv_internal>
  103b40:	e50b0008 	str	r0, [fp, #-8]
  103b44:	ea00000f 	b	103b88 <stack_run+0x438>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103b48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103b4c:	e283301c 	add	r3, r3, #28
  103b50:	e51b2010 	ldr	r2, [fp, #-16]
  103b54:	e0823003 	add	r3, r2, r3
  103b58:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103b5c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103b60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b64:	e58d3004 	str	r3, [sp, #4]
  103b68:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103b6c:	e58d3000 	str	r3, [sp]
  103b70:	e1a03002 	mov	r3, r2
  103b74:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b78:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b7c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b80:	eb001718 	bl	1097e8 <recvfrom_internal>
  103b84:	e50b0008 	str	r0, [fp, #-8]
                }
                lwp_shmdt(cmd);
  103b88:	e51b0010 	ldr	r0, [fp, #-16]
  103b8c:	ebfff8ec 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)result);
  103b90:	e30d3010 	movw	r3, #53264	; 0xd010
  103b94:	e3403014 	movt	r3, #20
  103b98:	e5933000 	ldr	r3, [r3]
  103b9c:	e51b2008 	ldr	r2, [fp, #-8]
  103ba0:	e1a01002 	mov	r1, r2
  103ba4:	e1a00003 	mov	r0, r3
  103ba8:	ebfffeb8 	bl	103690 <unet_cmd_reply>
                break;
  103bac:	ea000023 	b	103c40 <stack_run+0x4f0>
            //     unet_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103bb0:	e51b3010 	ldr	r3, [fp, #-16]
  103bb4:	e5933004 	ldr	r3, [r3, #4]
  103bb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103bbc:	e51b3010 	ldr	r3, [fp, #-16]
  103bc0:	e5933008 	ldr	r3, [r3, #8]
  103bc4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103bc8:	e51b3010 	ldr	r3, [fp, #-16]
  103bcc:	e593300c 	ldr	r3, [r3, #12]
  103bd0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103bd4:	e51b3010 	ldr	r3, [fp, #-16]
  103bd8:	e5933010 	ldr	r3, [r3, #16]
  103bdc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103be0:	e51b3010 	ldr	r3, [fp, #-16]
  103be4:	e283301c 	add	r3, r3, #28
  103be8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103bec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103bf0:	e58d3000 	str	r3, [sp]
  103bf4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103bf8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103bfc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103c00:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103c04:	eb0016bc 	bl	1096fc <setsockopt_internal>
  103c08:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103c0c:	e51b0010 	ldr	r0, [fp, #-16]
  103c10:	ebfff8cb 	bl	101f44 <lwp_shmdt>
                unet_cmd_reply(stack_channel, (void *)(size_t)result);
  103c14:	e30d3010 	movw	r3, #53264	; 0xd010
  103c18:	e3403014 	movt	r3, #20
  103c1c:	e5933000 	ldr	r3, [r3]
  103c20:	e51b2008 	ldr	r2, [fp, #-8]
  103c24:	e1a01002 	mov	r1, r2
  103c28:	e1a00003 	mov	r0, r3
  103c2c:	ebfffe97 	bl	103690 <unet_cmd_reply>
                break;
  103c30:	ea000002 	b	103c40 <stack_run+0x4f0>
    //             break;

            default :
                break;
            }
        }
  103c34:	e320f000 	nop	{0}
  103c38:	eafffec7 	b	10375c <stack_run+0xc>
                break;
  103c3c:	e320f000 	nop	{0}
    {
  103c40:	eafffec5 	b	10375c <stack_run+0xc>

00103c44 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103c44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103c48:	e28db000 	add	fp, sp, #0
}
  103c4c:	e320f000 	nop	{0}
  103c50:	e28bd000 	add	sp, fp, #0
  103c54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c58:	e12fff1e 	bx	lr

00103c5c <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103c5c:	e92d4800 	push	{fp, lr}
  103c60:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103c64:	e3050240 	movw	r0, #21056	; 0x5240
  103c68:	e3400014 	movt	r0, #20
  103c6c:	eb00e99b 	bl	13e2e0 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103c70:	e320f000 	nop	{0}
  103c74:	e8bd8800 	pop	{fp, pc}

00103c78 <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103c78:	e92d4810 	push	{r4, fp, lr}
  103c7c:	e28db008 	add	fp, sp, #8
  103c80:	e24dd034 	sub	sp, sp, #52	; 0x34
  103c84:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103c88:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103c8c:	e3a03000 	mov	r3, #0
  103c90:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103c94:	e3e03000 	mvn	r3, #0
  103c98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103c9c:	e3e03000 	mvn	r3, #0
  103ca0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103ca4:	e3a03000 	mov	r3, #0
  103ca8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103cac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103cb0:	e3530001 	cmp	r3, #1
  103cb4:	ca000035 	bgt	103d90 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103cb8:	e3050388 	movw	r0, #21384	; 0x5388
  103cbc:	e3400014 	movt	r0, #20
  103cc0:	eb00e978 	bl	13e2a8 <printf>
        initialized = stack_init();
  103cc4:	ebfffe8a 	bl	1036f4 <stack_init>
  103cc8:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103ccc:	e51b3010 	ldr	r3, [fp, #-16]
  103cd0:	e3530000 	cmp	r3, #0
  103cd4:	aa000004 	bge	103cec <main+0x74>
        {
            printf(" ...failed!\n");
  103cd8:	e30503b0 	movw	r0, #21424	; 0x53b0
  103cdc:	e3400014 	movt	r0, #20
  103ce0:	eb00e97e 	bl	13e2e0 <puts>
            return -1;
  103ce4:	e3e03000 	mvn	r3, #0
  103ce8:	ea0000f7 	b	1040cc <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103cec:	e51b3010 	ldr	r3, [fp, #-16]
  103cf0:	e3530000 	cmp	r3, #0
  103cf4:	da000004 	ble	103d0c <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103cf8:	e30503bc 	movw	r0, #21436	; 0x53bc
  103cfc:	e3400014 	movt	r0, #20
  103d00:	eb00e976 	bl	13e2e0 <puts>
            return 0;
  103d04:	e3a03000 	mov	r3, #0
  103d08:	ea0000ef 	b	1040cc <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103d0c:	e30503e0 	movw	r0, #21472	; 0x53e0
  103d10:	e3400014 	movt	r0, #20
  103d14:	eb00e971 	bl	13e2e0 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103d18:	e30503f0 	movw	r0, #21488	; 0x53f0
  103d1c:	e3400014 	movt	r0, #20
  103d20:	eb00e960 	bl	13e2a8 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d24:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d28:	e1a01003 	mov	r1, r3
  103d2c:	e3a00000 	mov	r0, #0
  103d30:	eb00c5e1 	bl	1354bc <imx6ul_eth_init>
  103d34:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103d38:	e51b3010 	ldr	r3, [fp, #-16]
  103d3c:	e3530000 	cmp	r3, #0
  103d40:	aa000004 	bge	103d58 <main+0xe0>
            {
                printf(" ...failed!\n");
  103d44:	e30503b0 	movw	r0, #21424	; 0x53b0
  103d48:	e3400014 	movt	r0, #20
  103d4c:	eb00e963 	bl	13e2e0 <puts>
                return -1;
  103d50:	e3e03000 	mvn	r3, #0
  103d54:	ea0000dc 	b	1040cc <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103d58:	e51b3010 	ldr	r3, [fp, #-16]
  103d5c:	e3530000 	cmp	r3, #0
  103d60:	da000004 	ble	103d78 <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103d64:	e30503bc 	movw	r0, #21436	; 0x53bc
  103d68:	e3400014 	movt	r0, #20
  103d6c:	eb00e95b 	bl	13e2e0 <puts>
                return 0;
  103d70:	e3a03000 	mov	r3, #0
  103d74:	ea0000d4 	b	1040cc <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103d78:	e305040c 	movw	r0, #21516	; 0x540c
  103d7c:	e3400014 	movt	r0, #20
  103d80:	eb00e956 	bl	13e2e0 <puts>
                dfs_init();
  103d84:	eb00173c 	bl	109a7c <dfs_init>
                sal_init();
  103d88:	eb000c20 	bl	106e10 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103d8c:	ebfffe6f 	bl	103750 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103d90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d94:	e3530002 	cmp	r3, #2
  103d98:	da000050 	ble	103ee0 <main+0x268>
  103d9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103da0:	e2833004 	add	r3, r3, #4
  103da4:	e5933000 	ldr	r3, [r3]
  103da8:	e3a02006 	mov	r2, #6
  103dac:	e3051418 	movw	r1, #21528	; 0x5418
  103db0:	e3401014 	movt	r1, #20
  103db4:	e1a00003 	mov	r0, r3
  103db8:	eb00f526 	bl	141258 <strncmp>
  103dbc:	e1a03000 	mov	r3, r0
  103dc0:	e3530000 	cmp	r3, #0
  103dc4:	1a000045 	bne	103ee0 <main+0x268>
    {
        int static_ip = 0;
  103dc8:	e3a03000 	mov	r3, #0
  103dcc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103dd0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103dd4:	e2833008 	add	r3, r3, #8
  103dd8:	e5933000 	ldr	r3, [r3]
  103ddc:	e1a01003 	mov	r1, r3
  103de0:	e3050420 	movw	r0, #21536	; 0x5420
  103de4:	e3400014 	movt	r0, #20
  103de8:	eb00e92e 	bl	13e2a8 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103dec:	e30d3018 	movw	r3, #53272	; 0xd018
  103df0:	e3403014 	movt	r3, #20
  103df4:	e5933000 	ldr	r3, [r3]
  103df8:	e3a01002 	mov	r1, #2
  103dfc:	e1a00003 	mov	r0, r3
  103e00:	ebfff0c4 	bl	100118 <rt_channel_open>
  103e04:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103e08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103e0c:	e3530000 	cmp	r3, #0
  103e10:	aa000004 	bge	103e28 <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103e14:	e305043c 	movw	r0, #21564	; 0x543c
  103e18:	e3400014 	movt	r0, #20
  103e1c:	eb00e92f 	bl	13e2e0 <puts>
            return -1;
  103e20:	e3e03000 	mvn	r3, #0
  103e24:	ea0000a8 	b	1040cc <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e28:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e30:	e2833008 	add	r3, r3, #8
  103e34:	e5933000 	ldr	r3, [r3]
  103e38:	e1a00003 	mov	r0, r3
  103e3c:	eb00f4d9 	bl	1411a8 <strlen>
  103e40:	e1a03000 	mov	r3, r0
  103e44:	e2833001 	add	r3, r3, #1
  103e48:	e58d300c 	str	r3, [sp, #12]
  103e4c:	e3a03000 	mov	r3, #0
  103e50:	e58d3008 	str	r3, [sp, #8]
  103e54:	e3a03000 	mov	r3, #0
  103e58:	e58d3004 	str	r3, [sp, #4]
  103e5c:	e3a03000 	mov	r3, #0
  103e60:	e58d3000 	str	r3, [sp]
  103e64:	e3a03000 	mov	r3, #0
  103e68:	e3a02000 	mov	r2, #0
  103e6c:	e1a01004 	mov	r1, r4
  103e70:	e3a00065 	mov	r0, #101	; 0x65
  103e74:	eb000097 	bl	1040d8 <channel_compose_cmd>
  103e78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103e7c:	e3a01000 	mov	r1, #0
  103e80:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103e84:	ebfff821 	bl	101f10 <lwp_shmat>
  103e88:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103e8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e90:	e3530000 	cmp	r3, #0
  103e94:	0a000009 	beq	103ec0 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103e98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e9c:	e283201c 	add	r2, r3, #28
  103ea0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ea4:	e2833008 	add	r3, r3, #8
  103ea8:	e5933000 	ldr	r3, [r3]
  103eac:	e1a01003 	mov	r1, r3
  103eb0:	e1a00002 	mov	r0, r2
  103eb4:	eb00f4aa 	bl	141164 <strcpy>
            lwp_shmdt(cmd);
  103eb8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103ebc:	ebfff820 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103ec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ec4:	e1a01003 	mov	r1, r3
  103ec8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ecc:	ebfffdbf 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103ed0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ed4:	ebfff09c 	bl	10014c <rt_channel_close>

        return 0;
  103ed8:	e3a03000 	mov	r3, #0
  103edc:	ea00007a 	b	1040cc <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103ee0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ee4:	e3530003 	cmp	r3, #3
  103ee8:	1a000061 	bne	104074 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103eec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ef0:	e2833004 	add	r3, r3, #4
  103ef4:	e5933000 	ldr	r3, [r3]
  103ef8:	e3a02008 	mov	r2, #8
  103efc:	e3051484 	movw	r1, #21636	; 0x5484
  103f00:	e3401014 	movt	r1, #20
  103f04:	e1a00003 	mov	r0, r3
  103f08:	eb00f4d2 	bl	141258 <strncmp>
  103f0c:	e1a03000 	mov	r3, r0
  103f10:	e3530000 	cmp	r3, #0
  103f14:	1a000042 	bne	104024 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103f18:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f1c:	e2833008 	add	r3, r3, #8
  103f20:	e5933000 	ldr	r3, [r3]
  103f24:	e1a01003 	mov	r1, r3
  103f28:	e3050490 	movw	r0, #21648	; 0x5490
  103f2c:	e3400014 	movt	r0, #20
  103f30:	eb00e8dc 	bl	13e2a8 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103f34:	e30d3018 	movw	r3, #53272	; 0xd018
  103f38:	e3403014 	movt	r3, #20
  103f3c:	e5933000 	ldr	r3, [r3]
  103f40:	e3a01002 	mov	r1, #2
  103f44:	e1a00003 	mov	r0, r3
  103f48:	ebfff072 	bl	100118 <rt_channel_open>
  103f4c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103f50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f54:	e3530000 	cmp	r3, #0
  103f58:	aa000004 	bge	103f70 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103f5c:	e305043c 	movw	r0, #21564	; 0x543c
  103f60:	e3400014 	movt	r0, #20
  103f64:	eb00e8dd 	bl	13e2e0 <puts>
                return -1;
  103f68:	e3e03000 	mvn	r3, #0
  103f6c:	ea000056 	b	1040cc <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103f70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f74:	e2833008 	add	r3, r3, #8
  103f78:	e5933000 	ldr	r3, [r3]
  103f7c:	e1a00003 	mov	r0, r3
  103f80:	eb00f488 	bl	1411a8 <strlen>
  103f84:	e1a03000 	mov	r3, r0
  103f88:	e2833001 	add	r3, r3, #1
  103f8c:	e58d300c 	str	r3, [sp, #12]
  103f90:	e3a03000 	mov	r3, #0
  103f94:	e58d3008 	str	r3, [sp, #8]
  103f98:	e3a03000 	mov	r3, #0
  103f9c:	e58d3004 	str	r3, [sp, #4]
  103fa0:	e3a03000 	mov	r3, #0
  103fa4:	e58d3000 	str	r3, [sp]
  103fa8:	e3a03000 	mov	r3, #0
  103fac:	e3a02000 	mov	r2, #0
  103fb0:	e3a01000 	mov	r1, #0
  103fb4:	e3a00066 	mov	r0, #102	; 0x66
  103fb8:	eb000046 	bl	1040d8 <channel_compose_cmd>
  103fbc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103fc0:	e3a01000 	mov	r1, #0
  103fc4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103fc8:	ebfff7d0 	bl	101f10 <lwp_shmat>
  103fcc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  103fd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fd4:	e3530000 	cmp	r3, #0
  103fd8:	0a000009 	beq	104004 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103fdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fe0:	e283201c 	add	r2, r3, #28
  103fe4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fe8:	e2833008 	add	r3, r3, #8
  103fec:	e5933000 	ldr	r3, [r3]
  103ff0:	e1a01003 	mov	r1, r3
  103ff4:	e1a00002 	mov	r0, r2
  103ff8:	eb00f459 	bl	141164 <strcpy>
                lwp_shmdt(cmd);
  103ffc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  104000:	ebfff7cf 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  104004:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104008:	e1a01003 	mov	r1, r3
  10400c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104010:	ebfffd6e 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  104014:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104018:	ebfff04b 	bl	10014c <rt_channel_close>

            return 0;
  10401c:	e3a03000 	mov	r3, #0
  104020:	ea000029 	b	1040cc <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104024:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104028:	e2833004 	add	r3, r3, #4
  10402c:	e5933000 	ldr	r3, [r3]
  104030:	e3a02008 	mov	r2, #8
  104034:	e30514b0 	movw	r1, #21680	; 0x54b0
  104038:	e3401014 	movt	r1, #20
  10403c:	e1a00003 	mov	r0, r3
  104040:	eb00f484 	bl	141258 <strncmp>
  104044:	e1a03000 	mov	r3, r0
  104048:	e3530000 	cmp	r3, #0
  10404c:	1a000008 	bne	104074 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  104050:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104054:	e2833008 	add	r3, r3, #8
  104058:	e5933000 	ldr	r3, [r3]
  10405c:	e1a01003 	mov	r1, r3
  104060:	e30504b8 	movw	r0, #21688	; 0x54b8
  104064:	e3400014 	movt	r0, #20
  104068:	eb00e88e 	bl	13e2a8 <printf>
            //eth_set_default(argv[2]);
            return 0;
  10406c:	e3a03000 	mov	r3, #0
  104070:	ea000015 	b	1040cc <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  104074:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  104078:	e3530002 	cmp	r3, #2
  10407c:	1a000010 	bne	1040c4 <main+0x44c>
  104080:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104084:	e2833004 	add	r3, r3, #4
  104088:	e5933000 	ldr	r3, [r3]
  10408c:	e3a02006 	mov	r2, #6
  104090:	e30514dc 	movw	r1, #21724	; 0x54dc
  104094:	e3401014 	movt	r1, #20
  104098:	e1a00003 	mov	r0, r3
  10409c:	eb00f46d 	bl	141258 <strncmp>
  1040a0:	e1a03000 	mov	r3, r0
  1040a4:	e3530000 	cmp	r3, #0
  1040a8:	1a000005 	bne	1040c4 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  1040ac:	e30504e4 	movw	r0, #21732	; 0x54e4
  1040b0:	e3400014 	movt	r0, #20
  1040b4:	eb00e889 	bl	13e2e0 <puts>
        lwipkit_status();
  1040b8:	ebfffee1 	bl	103c44 <lwipkit_status>
        return 0;
  1040bc:	e3a03000 	mov	r3, #0
  1040c0:	ea000001 	b	1040cc <main+0x454>
    }

    lwipkit_usage();
  1040c4:	ebfffee4 	bl	103c5c <lwipkit_usage>
    return -1;
  1040c8:	e3e03000 	mvn	r3, #0
}
  1040cc:	e1a00003 	mov	r0, r3
  1040d0:	e24bd008 	sub	sp, fp, #8
  1040d4:	e8bd8810 	pop	{r4, fp, pc}

001040d8 <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  1040d8:	e92d4800 	push	{fp, lr}
  1040dc:	e28db004 	add	fp, sp, #4
  1040e0:	e24dd020 	sub	sp, sp, #32
  1040e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040ec:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1040f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  1040f4:	e3a03000 	mov	r3, #0
  1040f8:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  1040fc:	e3a03000 	mov	r3, #0
  104100:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  104104:	e59b3010 	ldr	r3, [fp, #16]
  104108:	e283301c 	add	r3, r3, #28
  10410c:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  104110:	e30d301c 	movw	r3, #53276	; 0xd01c
  104114:	e3403014 	movt	r3, #20
  104118:	e5933000 	ldr	r3, [r3]
  10411c:	e3730001 	cmn	r3, #1
  104120:	1a000005 	bne	10413c <channel_compose_cmd+0x64>
  104124:	ebfff832 	bl	1021f4 <rt_thread_self>
  104128:	e1a03000 	mov	r3, r0
  10412c:	e1a02003 	mov	r2, r3
  104130:	e30d301c 	movw	r3, #53276	; 0xd01c
  104134:	e3403014 	movt	r3, #20
  104138:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  10413c:	e30d301c 	movw	r3, #53276	; 0xd01c
  104140:	e3403014 	movt	r3, #20
  104144:	e5933000 	ldr	r3, [r3]
  104148:	e2832002 	add	r2, r3, #2
  10414c:	e30d301c 	movw	r3, #53276	; 0xd01c
  104150:	e3403014 	movt	r3, #20
  104154:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  104158:	e30d301c 	movw	r3, #53276	; 0xd01c
  10415c:	e3403014 	movt	r3, #20
  104160:	e5933000 	ldr	r3, [r3]
  104164:	e3a02001 	mov	r2, #1
  104168:	e51b1010 	ldr	r1, [fp, #-16]
  10416c:	e1a00003 	mov	r0, r3
  104170:	ebfff74c 	bl	101ea8 <lwp_shmget>
  104174:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  104178:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10417c:	e3730001 	cmn	r3, #1
  104180:	1a00000a 	bne	1041b0 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  104184:	e30d301c 	movw	r3, #53276	; 0xd01c
  104188:	e3403014 	movt	r3, #20
  10418c:	e5933000 	ldr	r3, [r3]
  104190:	e1a02003 	mov	r2, r3
  104194:	e30515d0 	movw	r1, #21968	; 0x55d0
  104198:	e3401014 	movt	r1, #20
  10419c:	e3050560 	movw	r0, #21856	; 0x5560
  1041a0:	e3400014 	movt	r0, #20
  1041a4:	ebfffbda 	bl	103114 <rt_kprintf>
        return -1;
  1041a8:	e3e03000 	mvn	r3, #0
  1041ac:	ea000027 	b	104250 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  1041b0:	e3a01000 	mov	r1, #0
  1041b4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041b8:	ebfff754 	bl	101f10 <lwp_shmat>
  1041bc:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  1041c0:	e51b3008 	ldr	r3, [fp, #-8]
  1041c4:	e3530000 	cmp	r3, #0
  1041c8:	1a000006 	bne	1041e8 <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  1041cc:	e3050594 	movw	r0, #21908	; 0x5594
  1041d0:	e3400014 	movt	r0, #20
  1041d4:	eb00e841 	bl	13e2e0 <puts>
        lwp_shmrm(shmid);
  1041d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041dc:	ebfff740 	bl	101ee4 <lwp_shmrm>
        return -1;
  1041e0:	e3e03000 	mvn	r3, #0
  1041e4:	ea000019 	b	104250 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  1041e8:	e51b3008 	ldr	r3, [fp, #-8]
  1041ec:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  1041f0:	e51b300c 	ldr	r3, [fp, #-12]
  1041f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1041f8:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  1041fc:	e51b300c 	ldr	r3, [fp, #-12]
  104200:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  104204:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  104208:	e51b300c 	ldr	r3, [fp, #-12]
  10420c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104210:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  104214:	e51b300c 	ldr	r3, [fp, #-12]
  104218:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10421c:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104220:	e51b300c 	ldr	r3, [fp, #-12]
  104224:	e59b2004 	ldr	r2, [fp, #4]
  104228:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  10422c:	e51b300c 	ldr	r3, [fp, #-12]
  104230:	e59b2008 	ldr	r2, [fp, #8]
  104234:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  104238:	e51b300c 	ldr	r3, [fp, #-12]
  10423c:	e59b200c 	ldr	r2, [fp, #12]
  104240:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  104244:	e51b0008 	ldr	r0, [fp, #-8]
  104248:	ebfff73d 	bl	101f44 <lwp_shmdt>

    return shmid;
  10424c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  104250:	e1a00003 	mov	r0, r3
  104254:	e24bd004 	sub	sp, fp, #4
  104258:	e8bd8800 	pop	{fp, pc}

0010425c <channel_cmd_send_recv>:
{
  10425c:	e92d4800 	push	{fp, lr}
  104260:	e28db004 	add	fp, sp, #4
  104264:	e24dd018 	sub	sp, sp, #24
  104268:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10426c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  104270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104274:	e3530000 	cmp	r3, #0
  104278:	aa000005 	bge	104294 <channel_cmd_send_recv+0x38>
  10427c:	e3a0200a 	mov	r2, #10
  104280:	e3051630 	movw	r1, #22064	; 0x5630
  104284:	e3401014 	movt	r1, #20
  104288:	e30505e4 	movw	r0, #21988	; 0x55e4
  10428c:	e3400014 	movt	r0, #20
  104290:	ebfffcc0 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104294:	e3a03000 	mov	r3, #0
  104298:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  10429c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1042a0:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  1042a4:	e24b2014 	sub	r2, fp, #20
  1042a8:	e24b3014 	sub	r3, fp, #20
  1042ac:	e1a01003 	mov	r1, r3
  1042b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1042b4:	ebffefaf 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  1042b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042bc:	e1a00003 	mov	r0, r3
  1042c0:	e24bd004 	sub	sp, fp, #4
  1042c4:	e8bd8800 	pop	{fp, pc}

001042c8 <channel_cmd_recv>:
{
  1042c8:	e92d4800 	push	{fp, lr}
  1042cc:	e28db004 	add	fp, sp, #4
  1042d0:	e24dd018 	sub	sp, sp, #24
  1042d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1042d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042dc:	e3530000 	cmp	r3, #0
  1042e0:	aa000005 	bge	1042fc <channel_cmd_recv+0x34>
  1042e4:	e3a02027 	mov	r2, #39	; 0x27
  1042e8:	e305161c 	movw	r1, #22044	; 0x561c
  1042ec:	e3401014 	movt	r1, #20
  1042f0:	e30505e4 	movw	r0, #21988	; 0x55e4
  1042f4:	e3400014 	movt	r0, #20
  1042f8:	ebfffca6 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  1042fc:	e3a03000 	mov	r3, #0
  104300:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  104304:	e24b3014 	sub	r3, fp, #20
  104308:	e1a01003 	mov	r1, r3
  10430c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104310:	ebffefd5 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  104314:	e51b300c 	ldr	r3, [fp, #-12]
}
  104318:	e1a00003 	mov	r0, r3
  10431c:	e24bd004 	sub	sp, fp, #4
  104320:	e8bd8800 	pop	{fp, pc}

00104324 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104324:	e92d4800 	push	{fp, lr}
  104328:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  10432c:	e30d3024 	movw	r3, #53284	; 0xd024
  104330:	e3403014 	movt	r3, #20
  104334:	e5933000 	ldr	r3, [r3]
  104338:	e3a01002 	mov	r1, #2
  10433c:	e1a00003 	mov	r0, r3
  104340:	ebffef74 	bl	100118 <rt_channel_open>
  104344:	e1a02000 	mov	r2, r0
  104348:	e30d3020 	movw	r3, #53280	; 0xd020
  10434c:	e3403014 	movt	r3, #20
  104350:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  104354:	e30d3020 	movw	r3, #53280	; 0xd020
  104358:	e3403014 	movt	r3, #20
  10435c:	e5933000 	ldr	r3, [r3]
  104360:	e3530000 	cmp	r3, #0
  104364:	aa000008 	bge	10438c <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  104368:	e30d3024 	movw	r3, #53284	; 0xd024
  10436c:	e3403014 	movt	r3, #20
  104370:	e5933000 	ldr	r3, [r3]
  104374:	e1a01003 	mov	r1, r3
  104378:	e305060c 	movw	r0, #22028	; 0x560c
  10437c:	e3400014 	movt	r0, #20
  104380:	eb00e7c8 	bl	13e2a8 <printf>
        return RT_ERROR;
  104384:	e3a03001 	mov	r3, #1
  104388:	ea000018 	b	1043f0 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  10438c:	e30d302c 	movw	r3, #53292	; 0xd02c
  104390:	e3403014 	movt	r3, #20
  104394:	e5933000 	ldr	r3, [r3]
  104398:	e3a01002 	mov	r1, #2
  10439c:	e1a00003 	mov	r0, r3
  1043a0:	ebffef5c 	bl	100118 <rt_channel_open>
  1043a4:	e1a02000 	mov	r2, r0
  1043a8:	e30d3028 	movw	r3, #53288	; 0xd028
  1043ac:	e3403014 	movt	r3, #20
  1043b0:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  1043b4:	e30d3028 	movw	r3, #53288	; 0xd028
  1043b8:	e3403014 	movt	r3, #20
  1043bc:	e5933000 	ldr	r3, [r3]
  1043c0:	e3530000 	cmp	r3, #0
  1043c4:	aa000008 	bge	1043ec <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  1043c8:	e30d302c 	movw	r3, #53292	; 0xd02c
  1043cc:	e3403014 	movt	r3, #20
  1043d0:	e5933000 	ldr	r3, [r3]
  1043d4:	e1a01003 	mov	r1, r3
  1043d8:	e305060c 	movw	r0, #22028	; 0x560c
  1043dc:	e3400014 	movt	r0, #20
  1043e0:	eb00e7b0 	bl	13e2a8 <printf>
        return RT_ERROR;
  1043e4:	e3a03001 	mov	r3, #1
  1043e8:	ea000000 	b	1043f0 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  1043ec:	e3a03000 	mov	r3, #0
}
  1043f0:	e1a00003 	mov	r0, r3
  1043f4:	e8bd8800 	pop	{fp, pc}

001043f8 <ueth_int_recv>:

void ueth_int_recv(void)
{
  1043f8:	e92d4800 	push	{fp, lr}
  1043fc:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  104400:	e30d3028 	movw	r3, #53288	; 0xd028
  104404:	e3403014 	movt	r3, #20
  104408:	e5933000 	ldr	r3, [r3]
  10440c:	e1a00003 	mov	r0, r3
  104410:	ebffffac 	bl	1042c8 <channel_cmd_recv>
}
  104414:	e320f000 	nop	{0}
  104418:	e8bd8800 	pop	{fp, pc}

0010441c <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  10441c:	e92d4800 	push	{fp, lr}
  104420:	e28db004 	add	fp, sp, #4
  104424:	e24dd028 	sub	sp, sp, #40	; 0x28
  104428:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  10442c:	ebfff770 	bl	1021f4 <rt_thread_self>
  104430:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104434:	e3a03000 	mov	r3, #0
  104438:	e58d300c 	str	r3, [sp, #12]
  10443c:	e3a03000 	mov	r3, #0
  104440:	e58d3008 	str	r3, [sp, #8]
  104444:	e3a03000 	mov	r3, #0
  104448:	e58d3004 	str	r3, [sp, #4]
  10444c:	e3a03000 	mov	r3, #0
  104450:	e58d3000 	str	r3, [sp]
  104454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104458:	e51b200c 	ldr	r2, [fp, #-12]
  10445c:	e3a01000 	mov	r1, #0
  104460:	e3a00005 	mov	r0, #5
  104464:	ebffff1b 	bl	1040d8 <channel_compose_cmd>
  104468:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  10446c:	e3a03000 	mov	r3, #0
  104470:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104474:	e3a01000 	mov	r1, #0
  104478:	e51b0010 	ldr	r0, [fp, #-16]
  10447c:	ebfff6a3 	bl	101f10 <lwp_shmat>
  104480:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104484:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104488:	e3530000 	cmp	r3, #0
  10448c:	0a000009 	beq	1044b8 <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104490:	e30d3020 	movw	r3, #53280	; 0xd020
  104494:	e3403014 	movt	r3, #20
  104498:	e5933000 	ldr	r3, [r3]
  10449c:	e51b2010 	ldr	r2, [fp, #-16]
  1044a0:	e1a01002 	mov	r1, r2
  1044a4:	e1a00003 	mov	r0, r3
  1044a8:	ebffff6b 	bl	10425c <channel_cmd_send_recv>
  1044ac:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  1044b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1044b4:	ebfff6a2 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1044b8:	e51b0010 	ldr	r0, [fp, #-16]
  1044bc:	ebfff688 	bl	101ee4 <lwp_shmrm>
    return res;
  1044c0:	e51b3008 	ldr	r3, [fp, #-8]

}
  1044c4:	e1a00003 	mov	r0, r3
  1044c8:	e24bd004 	sub	sp, fp, #4
  1044cc:	e8bd8800 	pop	{fp, pc}

001044d0 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1044d0:	e92d4800 	push	{fp, lr}
  1044d4:	e28db004 	add	fp, sp, #4
  1044d8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1044dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1044e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1044e4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1044e8:	ebfff741 	bl	1021f4 <rt_thread_self>
  1044ec:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1044f0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1044f4:	e3a03004 	mov	r3, #4
  1044f8:	e58d300c 	str	r3, [sp, #12]
  1044fc:	e3a03000 	mov	r3, #0
  104500:	e58d3008 	str	r3, [sp, #8]
  104504:	e3a03000 	mov	r3, #0
  104508:	e58d3004 	str	r3, [sp, #4]
  10450c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104510:	e58d3000 	str	r3, [sp]
  104514:	e1a03002 	mov	r3, r2
  104518:	e51b200c 	ldr	r2, [fp, #-12]
  10451c:	e3a01000 	mov	r1, #0
  104520:	e3a00001 	mov	r0, #1
  104524:	ebfffeeb 	bl	1040d8 <channel_compose_cmd>
  104528:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  10452c:	e3a03000 	mov	r3, #0
  104530:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104534:	e3a01000 	mov	r1, #0
  104538:	e51b0010 	ldr	r0, [fp, #-16]
  10453c:	ebfff673 	bl	101f10 <lwp_shmat>
  104540:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104548:	e3530000 	cmp	r3, #0
  10454c:	0a00000d 	beq	104588 <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104554:	e283301c 	add	r3, r3, #28
  104558:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10455c:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104560:	e30d3020 	movw	r3, #53280	; 0xd020
  104564:	e3403014 	movt	r3, #20
  104568:	e5933000 	ldr	r3, [r3]
  10456c:	e51b2010 	ldr	r2, [fp, #-16]
  104570:	e1a01002 	mov	r1, r2
  104574:	e1a00003 	mov	r0, r3
  104578:	ebffff37 	bl	10425c <channel_cmd_send_recv>
  10457c:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104580:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104584:	ebfff66e 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104588:	e51b0010 	ldr	r0, [fp, #-16]
  10458c:	ebfff654 	bl	101ee4 <lwp_shmrm>
    return res;
  104590:	e51b3008 	ldr	r3, [fp, #-8]
}
  104594:	e1a00003 	mov	r0, r3
  104598:	e24bd004 	sub	sp, fp, #4
  10459c:	e8bd8800 	pop	{fp, pc}

001045a0 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  1045a0:	e92d4800 	push	{fp, lr}
  1045a4:	e28db004 	add	fp, sp, #4
  1045a8:	e24dd020 	sub	sp, sp, #32
  1045ac:	e50b0010 	str	r0, [fp, #-16]
  1045b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  1045b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1045b8:	e58d300c 	str	r3, [sp, #12]
  1045bc:	e3a03000 	mov	r3, #0
  1045c0:	e58d3008 	str	r3, [sp, #8]
  1045c4:	e3a03000 	mov	r3, #0
  1045c8:	e58d3004 	str	r3, [sp, #4]
  1045cc:	e3a03000 	mov	r3, #0
  1045d0:	e58d3000 	str	r3, [sp]
  1045d4:	e3a03000 	mov	r3, #0
  1045d8:	e3a02000 	mov	r2, #0
  1045dc:	e3a01000 	mov	r1, #0
  1045e0:	e3a00002 	mov	r0, #2
  1045e4:	ebfffebb 	bl	1040d8 <channel_compose_cmd>
  1045e8:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1045ec:	e3a01000 	mov	r1, #0
  1045f0:	e51b0008 	ldr	r0, [fp, #-8]
  1045f4:	ebfff645 	bl	101f10 <lwp_shmat>
  1045f8:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1045fc:	e51b300c 	ldr	r3, [fp, #-12]
  104600:	e3530000 	cmp	r3, #0
  104604:	0a00000e 	beq	104644 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  104608:	e51b300c 	ldr	r3, [fp, #-12]
  10460c:	e283301c 	add	r3, r3, #28
  104610:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104614:	e51b1010 	ldr	r1, [fp, #-16]
  104618:	e1a00003 	mov	r0, r3
  10461c:	eb00f118 	bl	140a84 <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104620:	e30d3020 	movw	r3, #53280	; 0xd020
  104624:	e3403014 	movt	r3, #20
  104628:	e5933000 	ldr	r3, [r3]
  10462c:	e51b2008 	ldr	r2, [fp, #-8]
  104630:	e1a01002 	mov	r1, r2
  104634:	e1a00003 	mov	r0, r3
  104638:	ebffff07 	bl	10425c <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  10463c:	e51b000c 	ldr	r0, [fp, #-12]
  104640:	ebfff63f 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104644:	e51b0008 	ldr	r0, [fp, #-8]
  104648:	ebfff625 	bl	101ee4 <lwp_shmrm>
}
  10464c:	e320f000 	nop	{0}
  104650:	e24bd004 	sub	sp, fp, #4
  104654:	e8bd8800 	pop	{fp, pc}

00104658 <ueth_init_clock>:

void ueth_init_clock() 
{
  104658:	e92d4800 	push	{fp, lr}
  10465c:	e28db004 	add	fp, sp, #4
  104660:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104664:	e3a03000 	mov	r3, #0
  104668:	e58d300c 	str	r3, [sp, #12]
  10466c:	e3a03000 	mov	r3, #0
  104670:	e58d3008 	str	r3, [sp, #8]
  104674:	e3a03000 	mov	r3, #0
  104678:	e58d3004 	str	r3, [sp, #4]
  10467c:	e3a03000 	mov	r3, #0
  104680:	e58d3000 	str	r3, [sp]
  104684:	e3a03000 	mov	r3, #0
  104688:	e3a02000 	mov	r2, #0
  10468c:	e3a01000 	mov	r1, #0
  104690:	e3a00003 	mov	r0, #3
  104694:	ebfffe8f 	bl	1040d8 <channel_compose_cmd>
  104698:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  10469c:	e3a01000 	mov	r1, #0
  1046a0:	e51b0008 	ldr	r0, [fp, #-8]
  1046a4:	ebfff619 	bl	101f10 <lwp_shmat>
  1046a8:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1046ac:	e51b300c 	ldr	r3, [fp, #-12]
  1046b0:	e3530000 	cmp	r3, #0
  1046b4:	0a000008 	beq	1046dc <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1046b8:	e30d3020 	movw	r3, #53280	; 0xd020
  1046bc:	e3403014 	movt	r3, #20
  1046c0:	e5933000 	ldr	r3, [r3]
  1046c4:	e51b2008 	ldr	r2, [fp, #-8]
  1046c8:	e1a01002 	mov	r1, r2
  1046cc:	e1a00003 	mov	r0, r3
  1046d0:	ebfffee1 	bl	10425c <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046d4:	e51b000c 	ldr	r0, [fp, #-12]
  1046d8:	ebfff619 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046dc:	e51b0008 	ldr	r0, [fp, #-8]
  1046e0:	ebfff5ff 	bl	101ee4 <lwp_shmrm>
}
  1046e4:	e320f000 	nop	{0}
  1046e8:	e24bd004 	sub	sp, fp, #4
  1046ec:	e8bd8800 	pop	{fp, pc}

001046f0 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  1046f0:	e92d4800 	push	{fp, lr}
  1046f4:	e28db004 	add	fp, sp, #4
  1046f8:	e24dd020 	sub	sp, sp, #32
  1046fc:	e50b0010 	str	r0, [fp, #-16]
  104700:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  104704:	e3a03004 	mov	r3, #4
  104708:	e58d300c 	str	r3, [sp, #12]
  10470c:	e3a03000 	mov	r3, #0
  104710:	e58d3008 	str	r3, [sp, #8]
  104714:	e3a03000 	mov	r3, #0
  104718:	e58d3004 	str	r3, [sp, #4]
  10471c:	e3a03000 	mov	r3, #0
  104720:	e58d3000 	str	r3, [sp]
  104724:	e51b3010 	ldr	r3, [fp, #-16]
  104728:	e3a02001 	mov	r2, #1
  10472c:	e3a01000 	mov	r1, #0
  104730:	e3a00004 	mov	r0, #4
  104734:	ebfffe67 	bl	1040d8 <channel_compose_cmd>
  104738:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  10473c:	e3a01000 	mov	r1, #0
  104740:	e51b0008 	ldr	r0, [fp, #-8]
  104744:	ebfff5f1 	bl	101f10 <lwp_shmat>
  104748:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  10474c:	e51b300c 	ldr	r3, [fp, #-12]
  104750:	e3530000 	cmp	r3, #0
  104754:	0a00000c 	beq	10478c <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104758:	e51b300c 	ldr	r3, [fp, #-12]
  10475c:	e283301c 	add	r3, r3, #28
  104760:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104764:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104768:	e30d3020 	movw	r3, #53280	; 0xd020
  10476c:	e3403014 	movt	r3, #20
  104770:	e5933000 	ldr	r3, [r3]
  104774:	e51b2008 	ldr	r2, [fp, #-8]
  104778:	e1a01002 	mov	r1, r2
  10477c:	e1a00003 	mov	r0, r3
  104780:	ebfffeb5 	bl	10425c <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104784:	e51b000c 	ldr	r0, [fp, #-12]
  104788:	ebfff5ed 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10478c:	e51b0008 	ldr	r0, [fp, #-8]
  104790:	ebfff5d3 	bl	101ee4 <lwp_shmrm>
    return;
  104794:	e320f000 	nop	{0}
}
  104798:	e24bd004 	sub	sp, fp, #4
  10479c:	e8bd8800 	pop	{fp, pc}

001047a0 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  1047a0:	e92d4800 	push	{fp, lr}
  1047a4:	e28db004 	add	fp, sp, #4
  1047a8:	e24dd020 	sub	sp, sp, #32
  1047ac:	e50b0010 	str	r0, [fp, #-16]
  1047b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  1047b4:	e3a03004 	mov	r3, #4
  1047b8:	e58d300c 	str	r3, [sp, #12]
  1047bc:	e3a03000 	mov	r3, #0
  1047c0:	e58d3008 	str	r3, [sp, #8]
  1047c4:	e3a03000 	mov	r3, #0
  1047c8:	e58d3004 	str	r3, [sp, #4]
  1047cc:	e3a03000 	mov	r3, #0
  1047d0:	e58d3000 	str	r3, [sp]
  1047d4:	e51b3010 	ldr	r3, [fp, #-16]
  1047d8:	e3a02002 	mov	r2, #2
  1047dc:	e3a01000 	mov	r1, #0
  1047e0:	e3a00004 	mov	r0, #4
  1047e4:	ebfffe3b 	bl	1040d8 <channel_compose_cmd>
  1047e8:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047ec:	e3a01000 	mov	r1, #0
  1047f0:	e51b0008 	ldr	r0, [fp, #-8]
  1047f4:	ebfff5c5 	bl	101f10 <lwp_shmat>
  1047f8:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047fc:	e51b300c 	ldr	r3, [fp, #-12]
  104800:	e3530000 	cmp	r3, #0
  104804:	0a00000c 	beq	10483c <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104808:	e51b300c 	ldr	r3, [fp, #-12]
  10480c:	e283301c 	add	r3, r3, #28
  104810:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104814:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104818:	e30d3020 	movw	r3, #53280	; 0xd020
  10481c:	e3403014 	movt	r3, #20
  104820:	e5933000 	ldr	r3, [r3]
  104824:	e51b2008 	ldr	r2, [fp, #-8]
  104828:	e1a01002 	mov	r1, r2
  10482c:	e1a00003 	mov	r0, r3
  104830:	ebfffe89 	bl	10425c <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104834:	e51b000c 	ldr	r0, [fp, #-12]
  104838:	ebfff5c1 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10483c:	e51b0008 	ldr	r0, [fp, #-8]
  104840:	ebfff5a7 	bl	101ee4 <lwp_shmrm>
    return;
  104844:	e320f000 	nop	{0}
}
  104848:	e24bd004 	sub	sp, fp, #4
  10484c:	e8bd8800 	pop	{fp, pc}

00104850 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  104850:	e92d4800 	push	{fp, lr}
  104854:	e28db004 	add	fp, sp, #4
  104858:	e24dd020 	sub	sp, sp, #32
  10485c:	e50b0010 	str	r0, [fp, #-16]
  104860:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  104864:	e51b2010 	ldr	r2, [fp, #-16]
  104868:	e3a03000 	mov	r3, #0
  10486c:	e58d300c 	str	r3, [sp, #12]
  104870:	e3a03000 	mov	r3, #0
  104874:	e58d3008 	str	r3, [sp, #8]
  104878:	e3a03000 	mov	r3, #0
  10487c:	e58d3004 	str	r3, [sp, #4]
  104880:	e3a03000 	mov	r3, #0
  104884:	e58d3000 	str	r3, [sp]
  104888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10488c:	e3a01000 	mov	r1, #0
  104890:	e3a00006 	mov	r0, #6
  104894:	ebfffe0f 	bl	1040d8 <channel_compose_cmd>
  104898:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  10489c:	e3a01000 	mov	r1, #0
  1048a0:	e51b0008 	ldr	r0, [fp, #-8]
  1048a4:	ebfff599 	bl	101f10 <lwp_shmat>
  1048a8:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1048ac:	e51b300c 	ldr	r3, [fp, #-12]
  1048b0:	e3530000 	cmp	r3, #0
  1048b4:	0a000008 	beq	1048dc <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1048b8:	e30d3020 	movw	r3, #53280	; 0xd020
  1048bc:	e3403014 	movt	r3, #20
  1048c0:	e5933000 	ldr	r3, [r3]
  1048c4:	e51b2008 	ldr	r2, [fp, #-8]
  1048c8:	e1a01002 	mov	r1, r2
  1048cc:	e1a00003 	mov	r0, r3
  1048d0:	ebfffe61 	bl	10425c <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048d4:	e51b000c 	ldr	r0, [fp, #-12]
  1048d8:	ebfff599 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  1048dc:	e51b0008 	ldr	r0, [fp, #-8]
  1048e0:	ebfff57f 	bl	101ee4 <lwp_shmrm>
  1048e4:	e320f000 	nop	{0}
  1048e8:	e24bd004 	sub	sp, fp, #4
  1048ec:	e8bd8800 	pop	{fp, pc}

001048f0 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  1048f0:	e92d4800 	push	{fp, lr}
  1048f4:	e28db004 	add	fp, sp, #4
  1048f8:	e24dd010 	sub	sp, sp, #16
  1048fc:	e50b0008 	str	r0, [fp, #-8]
  104900:	e50b100c 	str	r1, [fp, #-12]
  104904:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  104908:	e51b300c 	ldr	r3, [fp, #-12]
  10490c:	e2433003 	sub	r3, r3, #3
  104910:	e3530001 	cmp	r3, #1
  104914:	8a000006 	bhi	104934 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  104918:	e51b3010 	ldr	r3, [fp, #-16]
  10491c:	e1a02003 	mov	r2, r3
  104920:	e51b100c 	ldr	r1, [fp, #-12]
  104924:	e51b0008 	ldr	r0, [fp, #-8]
  104928:	eb001249 	bl	109254 <unet_fcntl>
  10492c:	e1a03000 	mov	r3, r0
  104930:	ea000004 	b	104948 <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  104934:	e51b2010 	ldr	r2, [fp, #-16]
  104938:	e51b100c 	ldr	r1, [fp, #-12]
  10493c:	e51b0008 	ldr	r0, [fp, #-8]
  104940:	eb001251 	bl	10928c <unet_ioctl>
  104944:	e1a03000 	mov	r3, r0
    }
}
  104948:	e1a00003 	mov	r0, r3
  10494c:	e24bd004 	sub	sp, fp, #4
  104950:	e8bd8800 	pop	{fp, pc}

00104954 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  104954:	e92d4800 	push	{fp, lr}
  104958:	e28db004 	add	fp, sp, #4
  10495c:	e24dd008 	sub	sp, sp, #8
  104960:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  104964:	e51b3008 	ldr	r3, [fp, #-8]
  104968:	e3530000 	cmp	r3, #0
  10496c:	1a000005 	bne	104988 <sal_unet_netdev_set_pf_info+0x34>
  104970:	e3a02086 	mov	r2, #134	; 0x86
  104974:	e30516ac 	movw	r1, #22188	; 0x56ac
  104978:	e3401014 	movt	r1, #20
  10497c:	e30506a4 	movw	r0, #22180	; 0x56a4
  104980:	e3400014 	movt	r0, #20
  104984:	ebfffb03 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  104988:	e51b2008 	ldr	r2, [fp, #-8]
  10498c:	e3053694 	movw	r3, #22164	; 0x5694
  104990:	e3403014 	movt	r3, #20
  104994:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  104998:	e3a03000 	mov	r3, #0
}
  10499c:	e1a00003 	mov	r0, r3
  1049a0:	e24bd004 	sub	sp, fp, #4
  1049a4:	e8bd8800 	pop	{fp, pc}

001049a8 <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  1049a8:	e92d4800 	push	{fp, lr}
  1049ac:	e28db004 	add	fp, sp, #4
  1049b0:	e24dd010 	sub	sp, sp, #16
  1049b4:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  1049b8:	e3a03000 	mov	r3, #0
  1049bc:	e50b3008 	str	r3, [fp, #-8]
  1049c0:	ea00001f 	b	104a44 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  1049c4:	e30d344c 	movw	r3, #54348	; 0xd44c
  1049c8:	e3403014 	movt	r3, #20
  1049cc:	e51b2008 	ldr	r2, [fp, #-8]
  1049d0:	e0833002 	add	r3, r3, r2
  1049d4:	e5d33000 	ldrb	r3, [r3]
  1049d8:	e3530000 	cmp	r3, #0
  1049dc:	0a000015 	beq	104a38 <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  1049e0:	e51b3008 	ldr	r3, [fp, #-8]
  1049e4:	e3a0200c 	mov	r2, #12
  1049e8:	e0020392 	mul	r2, r2, r3
  1049ec:	e30d3428 	movw	r3, #54312	; 0xd428
  1049f0:	e3403014 	movt	r3, #20
  1049f4:	e0823003 	add	r3, r2, r3
  1049f8:	e2833004 	add	r3, r3, #4
  1049fc:	e3a02008 	mov	r2, #8
  104a00:	e51b1010 	ldr	r1, [fp, #-16]
  104a04:	e1a00003 	mov	r0, r3
  104a08:	eb00f212 	bl	141258 <strncmp>
  104a0c:	e1a03000 	mov	r3, r0
  104a10:	e3530000 	cmp	r3, #0
  104a14:	1a000007 	bne	104a38 <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  104a18:	e30d3428 	movw	r3, #54312	; 0xd428
  104a1c:	e3403014 	movt	r3, #20
  104a20:	e51b2008 	ldr	r2, [fp, #-8]
  104a24:	e3a0100c 	mov	r1, #12
  104a28:	e0020291 	mul	r2, r1, r2
  104a2c:	e0833002 	add	r3, r3, r2
  104a30:	e5933000 	ldr	r3, [r3]
  104a34:	ea000006 	b	104a54 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a38:	e51b3008 	ldr	r3, [fp, #-8]
  104a3c:	e2833001 	add	r3, r3, #1
  104a40:	e50b3008 	str	r3, [fp, #-8]
  104a44:	e51b3008 	ldr	r3, [fp, #-8]
  104a48:	e3530002 	cmp	r3, #2
  104a4c:	daffffdc 	ble	1049c4 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104a50:	e3a03000 	mov	r3, #0
}
  104a54:	e1a00003 	mov	r0, r3
  104a58:	e24bd004 	sub	sp, fp, #4
  104a5c:	e8bd8800 	pop	{fp, pc}

00104a60 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104a60:	e92d4800 	push	{fp, lr}
  104a64:	e28db004 	add	fp, sp, #4
  104a68:	e24dd018 	sub	sp, sp, #24
  104a6c:	e50b0010 	str	r0, [fp, #-16]
  104a70:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104a74:	e1a03002 	mov	r3, r2
  104a78:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104a7c:	e51b3010 	ldr	r3, [fp, #-16]
  104a80:	e3530000 	cmp	r3, #0
  104a84:	1a000001 	bne	104a90 <ueth_device_register+0x30>
        return -RT_ERROR;
  104a88:	e3e03000 	mvn	r3, #0
  104a8c:	ea000042 	b	104b9c <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104a90:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104a94:	ebffffc3 	bl	1049a8 <ueth_device_find>
  104a98:	e1a03000 	mov	r3, r0
  104a9c:	e3530000 	cmp	r3, #0
  104aa0:	0a000001 	beq	104aac <ueth_device_register+0x4c>
        return -RT_ERROR;
  104aa4:	e3e03000 	mvn	r3, #0
  104aa8:	ea00003b 	b	104b9c <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104aac:	e3a03000 	mov	r3, #0
  104ab0:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ab4:	ea000009 	b	104ae0 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104ab8:	e30d344c 	movw	r3, #54348	; 0xd44c
  104abc:	e3403014 	movt	r3, #20
  104ac0:	e51b2008 	ldr	r2, [fp, #-8]
  104ac4:	e0833002 	add	r3, r3, r2
  104ac8:	e5d33000 	ldrb	r3, [r3]
  104acc:	e3530000 	cmp	r3, #0
  104ad0:	0a000006 	beq	104af0 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104ad4:	e51b3008 	ldr	r3, [fp, #-8]
  104ad8:	e2833001 	add	r3, r3, #1
  104adc:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ae0:	e51b3008 	ldr	r3, [fp, #-8]
  104ae4:	e3530002 	cmp	r3, #2
  104ae8:	dafffff2 	ble	104ab8 <ueth_device_register+0x58>
  104aec:	ea000000 	b	104af4 <ueth_device_register+0x94>
            break;
  104af0:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104af4:	e51b3008 	ldr	r3, [fp, #-8]
  104af8:	e3530003 	cmp	r3, #3
  104afc:	1a000001 	bne	104b08 <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104b00:	e3e03000 	mvn	r3, #0
  104b04:	ea000024 	b	104b9c <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104b08:	e51b3008 	ldr	r3, [fp, #-8]
  104b0c:	e3a0200c 	mov	r2, #12
  104b10:	e0020392 	mul	r2, r2, r3
  104b14:	e30d3428 	movw	r3, #54312	; 0xd428
  104b18:	e3403014 	movt	r3, #20
  104b1c:	e0823003 	add	r3, r2, r3
  104b20:	e2833004 	add	r3, r3, #4
  104b24:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b28:	e1a00003 	mov	r0, r3
  104b2c:	eb00f18c 	bl	141164 <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104b30:	e30d3428 	movw	r3, #54312	; 0xd428
  104b34:	e3403014 	movt	r3, #20
  104b38:	e51b2008 	ldr	r2, [fp, #-8]
  104b3c:	e3a0100c 	mov	r1, #12
  104b40:	e0020291 	mul	r2, r1, r2
  104b44:	e0833002 	add	r3, r3, r2
  104b48:	e51b2010 	ldr	r2, [fp, #-16]
  104b4c:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104b50:	e30d344c 	movw	r3, #54348	; 0xd44c
  104b54:	e3403014 	movt	r3, #20
  104b58:	e51b2008 	ldr	r2, [fp, #-8]
  104b5c:	e0833002 	add	r3, r3, r2
  104b60:	e3a02001 	mov	r2, #1
  104b64:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104b68:	e51b3010 	ldr	r3, [fp, #-16]
  104b6c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104b70:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104b74:	e51b3010 	ldr	r3, [fp, #-16]
  104b78:	e3a02000 	mov	r2, #0
  104b7c:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104b80:	e51b3010 	ldr	r3, [fp, #-16]
  104b84:	e3a02000 	mov	r2, #0
  104b88:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104b8c:	e51b3010 	ldr	r3, [fp, #-16]
  104b90:	e3a02009 	mov	r2, #9
  104b94:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104b98:	e3a03000 	mov	r3, #0
}
  104b9c:	e1a00003 	mov	r0, r3
  104ba0:	e24bd004 	sub	sp, fp, #4
  104ba4:	e8bd8800 	pop	{fp, pc}

00104ba8 <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104ba8:	e92d4800 	push	{fp, lr}
  104bac:	e28db004 	add	fp, sp, #4
  104bb0:	e24dd010 	sub	sp, sp, #16
  104bb4:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104bb8:	e51b3010 	ldr	r3, [fp, #-16]
  104bbc:	e3530000 	cmp	r3, #0
  104bc0:	1a000005 	bne	104bdc <ueth_device_unregister+0x34>
  104bc4:	e3a02048 	mov	r2, #72	; 0x48
  104bc8:	e305173c 	movw	r1, #22332	; 0x573c
  104bcc:	e3401014 	movt	r1, #20
  104bd0:	e30506c8 	movw	r0, #22216	; 0x56c8
  104bd4:	e3400014 	movt	r0, #20
  104bd8:	ebfffa6e 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104bdc:	e51b3010 	ldr	r3, [fp, #-16]
  104be0:	e5d33008 	ldrb	r3, [r3, #8]
  104be4:	e3530009 	cmp	r3, #9
  104be8:	0a000005 	beq	104c04 <ueth_device_unregister+0x5c>
  104bec:	e3a02049 	mov	r2, #73	; 0x49
  104bf0:	e305173c 	movw	r1, #22332	; 0x573c
  104bf4:	e3401014 	movt	r1, #20
  104bf8:	e30506d8 	movw	r0, #22232	; 0x56d8
  104bfc:	e3400014 	movt	r0, #20
  104c00:	ebfffa64 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c04:	e3a03000 	mov	r3, #0
  104c08:	e50b3008 	str	r3, [fp, #-8]
  104c0c:	ea000019 	b	104c78 <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104c10:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c14:	e3403014 	movt	r3, #20
  104c18:	e51b2008 	ldr	r2, [fp, #-8]
  104c1c:	e0833002 	add	r3, r3, r2
  104c20:	e5d33000 	ldrb	r3, [r3]
  104c24:	e3530000 	cmp	r3, #0
  104c28:	0a00000f 	beq	104c6c <ueth_device_unregister+0xc4>
  104c2c:	e30d3428 	movw	r3, #54312	; 0xd428
  104c30:	e3403014 	movt	r3, #20
  104c34:	e51b2008 	ldr	r2, [fp, #-8]
  104c38:	e3a0100c 	mov	r1, #12
  104c3c:	e0020291 	mul	r2, r1, r2
  104c40:	e0833002 	add	r3, r3, r2
  104c44:	e5933000 	ldr	r3, [r3]
  104c48:	e51b2010 	ldr	r2, [fp, #-16]
  104c4c:	e1520003 	cmp	r2, r3
  104c50:	1a000005 	bne	104c6c <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104c54:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c58:	e3403014 	movt	r3, #20
  104c5c:	e51b2008 	ldr	r2, [fp, #-8]
  104c60:	e0833002 	add	r3, r3, r2
  104c64:	e3a02000 	mov	r2, #0
  104c68:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c6c:	e51b3008 	ldr	r3, [fp, #-8]
  104c70:	e2833001 	add	r3, r3, #1
  104c74:	e50b3008 	str	r3, [fp, #-8]
  104c78:	e51b3008 	ldr	r3, [fp, #-8]
  104c7c:	e3530002 	cmp	r3, #2
  104c80:	daffffe2 	ble	104c10 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104c84:	e3a03000 	mov	r3, #0
}
  104c88:	e1a00003 	mov	r0, r3
  104c8c:	e24bd004 	sub	sp, fp, #4
  104c90:	e8bd8800 	pop	{fp, pc}

00104c94 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104c94:	e92d4800 	push	{fp, lr}
  104c98:	e28db004 	add	fp, sp, #4
  104c9c:	e24dd010 	sub	sp, sp, #16
  104ca0:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104ca4:	e3a03000 	mov	r3, #0
  104ca8:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104cac:	e51b3010 	ldr	r3, [fp, #-16]
  104cb0:	e3530000 	cmp	r3, #0
  104cb4:	1a000005 	bne	104cd0 <ueth_device_init+0x3c>
  104cb8:	e3a0205a 	mov	r2, #90	; 0x5a
  104cbc:	e3051754 	movw	r1, #22356	; 0x5754
  104cc0:	e3401014 	movt	r1, #20
  104cc4:	e30506c8 	movw	r0, #22216	; 0x56c8
  104cc8:	e3400014 	movt	r0, #20
  104ccc:	ebfffa31 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104cd0:	e51b3010 	ldr	r3, [fp, #-16]
  104cd4:	e5d33008 	ldrb	r3, [r3, #8]
  104cd8:	e3530009 	cmp	r3, #9
  104cdc:	0a000005 	beq	104cf8 <ueth_device_init+0x64>
  104ce0:	e3a0205b 	mov	r2, #91	; 0x5b
  104ce4:	e3051754 	movw	r1, #22356	; 0x5754
  104ce8:	e3401014 	movt	r1, #20
  104cec:	e30506d8 	movw	r0, #22232	; 0x56d8
  104cf0:	e3400014 	movt	r0, #20
  104cf4:	ebfffa27 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104cf8:	e51b3010 	ldr	r3, [fp, #-16]
  104cfc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d00:	e5933000 	ldr	r3, [r3]
  104d04:	e3530000 	cmp	r3, #0
  104d08:	0a00001a 	beq	104d78 <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104d0c:	e51b3010 	ldr	r3, [fp, #-16]
  104d10:	e1d331bc 	ldrh	r3, [r3, #28]
  104d14:	e2033010 	and	r3, r3, #16
  104d18:	e3530000 	cmp	r3, #0
  104d1c:	1a000015 	bne	104d78 <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d20:	e51b3010 	ldr	r3, [fp, #-16]
  104d24:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d28:	e5933000 	ldr	r3, [r3]
  104d2c:	e51b0010 	ldr	r0, [fp, #-16]
  104d30:	e12fff33 	blx	r3
  104d34:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104d38:	e51b3008 	ldr	r3, [fp, #-8]
  104d3c:	e3530000 	cmp	r3, #0
  104d40:	0a000006 	beq	104d60 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104d44:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104d48:	e51b2008 	ldr	r2, [fp, #-8]
  104d4c:	e1a01003 	mov	r1, r3
  104d50:	e3050704 	movw	r0, #22276	; 0x5704
  104d54:	e3400014 	movt	r0, #20
  104d58:	eb00e552 	bl	13e2a8 <printf>
  104d5c:	ea000005 	b	104d78 <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104d60:	e51b3010 	ldr	r3, [fp, #-16]
  104d64:	e1d331bc 	ldrh	r3, [r3, #28]
  104d68:	e3833010 	orr	r3, r3, #16
  104d6c:	e6ff2073 	uxth	r2, r3
  104d70:	e51b3010 	ldr	r3, [fp, #-16]
  104d74:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104d78:	e51b3008 	ldr	r3, [fp, #-8]
}
  104d7c:	e1a00003 	mov	r0, r3
  104d80:	e24bd004 	sub	sp, fp, #4
  104d84:	e8bd8800 	pop	{fp, pc}

00104d88 <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104d88:	e92d4800 	push	{fp, lr}
  104d8c:	e28db004 	add	fp, sp, #4
  104d90:	e24dd010 	sub	sp, sp, #16
  104d94:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d98:	e3a03000 	mov	r3, #0
  104d9c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104da0:	e51b3010 	ldr	r3, [fp, #-16]
  104da4:	e3530000 	cmp	r3, #0
  104da8:	1a000005 	bne	104dc4 <ueth_device_close+0x3c>
  104dac:	e3a02076 	mov	r2, #118	; 0x76
  104db0:	e3051768 	movw	r1, #22376	; 0x5768
  104db4:	e3401014 	movt	r1, #20
  104db8:	e30506c8 	movw	r0, #22216	; 0x56c8
  104dbc:	e3400014 	movt	r0, #20
  104dc0:	ebfff9f4 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104dc4:	e51b3010 	ldr	r3, [fp, #-16]
  104dc8:	e5d33008 	ldrb	r3, [r3, #8]
  104dcc:	e3530009 	cmp	r3, #9
  104dd0:	0a000005 	beq	104dec <ueth_device_close+0x64>
  104dd4:	e3a02077 	mov	r2, #119	; 0x77
  104dd8:	e3051768 	movw	r1, #22376	; 0x5768
  104ddc:	e3401014 	movt	r1, #20
  104de0:	e30506d8 	movw	r0, #22232	; 0x56d8
  104de4:	e3400014 	movt	r0, #20
  104de8:	ebfff9ea 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104dec:	e51b3010 	ldr	r3, [fp, #-16]
  104df0:	e5d33020 	ldrb	r3, [r3, #32]
  104df4:	e3530000 	cmp	r3, #0
  104df8:	1a000001 	bne	104e04 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104dfc:	e3e03000 	mvn	r3, #0
  104e00:	ea000020 	b	104e88 <ueth_device_close+0x100>

    dev->ref_count--;
  104e04:	e51b3010 	ldr	r3, [fp, #-16]
  104e08:	e5d33020 	ldrb	r3, [r3, #32]
  104e0c:	e2433001 	sub	r3, r3, #1
  104e10:	e6ef2073 	uxtb	r2, r3
  104e14:	e51b3010 	ldr	r3, [fp, #-16]
  104e18:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e1c:	e51b3010 	ldr	r3, [fp, #-16]
  104e20:	e5d33020 	ldrb	r3, [r3, #32]
  104e24:	e3530000 	cmp	r3, #0
  104e28:	0a000001 	beq	104e34 <ueth_device_close+0xac>
        return RT_EOK;
  104e2c:	e3a03000 	mov	r3, #0
  104e30:	ea000014 	b	104e88 <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104e34:	e51b3010 	ldr	r3, [fp, #-16]
  104e38:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e3c:	e5933008 	ldr	r3, [r3, #8]
  104e40:	e3530000 	cmp	r3, #0
  104e44:	0a000005 	beq	104e60 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104e48:	e51b3010 	ldr	r3, [fp, #-16]
  104e4c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e50:	e5933008 	ldr	r3, [r3, #8]
  104e54:	e51b0010 	ldr	r0, [fp, #-16]
  104e58:	e12fff33 	blx	r3
  104e5c:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104e60:	e51b3008 	ldr	r3, [fp, #-8]
  104e64:	e3530000 	cmp	r3, #0
  104e68:	0a000002 	beq	104e78 <ueth_device_close+0xf0>
  104e6c:	e51b3008 	ldr	r3, [fp, #-8]
  104e70:	e3730006 	cmn	r3, #6
  104e74:	1a000002 	bne	104e84 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104e78:	e51b3010 	ldr	r3, [fp, #-16]
  104e7c:	e3a02000 	mov	r2, #0
  104e80:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104e84:	e51b3008 	ldr	r3, [fp, #-8]
}
  104e88:	e1a00003 	mov	r0, r3
  104e8c:	e24bd004 	sub	sp, fp, #4
  104e90:	e8bd8800 	pop	{fp, pc}

00104e94 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104e94:	e92d4800 	push	{fp, lr}
  104e98:	e28db004 	add	fp, sp, #4
  104e9c:	e24dd010 	sub	sp, sp, #16
  104ea0:	e50b0008 	str	r0, [fp, #-8]
  104ea4:	e50b100c 	str	r1, [fp, #-12]
  104ea8:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104eac:	e51b3008 	ldr	r3, [fp, #-8]
  104eb0:	e3530000 	cmp	r3, #0
  104eb4:	1a000005 	bne	104ed0 <ueth_device_control+0x3c>
  104eb8:	e3a02090 	mov	r2, #144	; 0x90
  104ebc:	e305177c 	movw	r1, #22396	; 0x577c
  104ec0:	e3401014 	movt	r1, #20
  104ec4:	e30506c8 	movw	r0, #22216	; 0x56c8
  104ec8:	e3400014 	movt	r0, #20
  104ecc:	ebfff9b1 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104ed0:	e51b3008 	ldr	r3, [fp, #-8]
  104ed4:	e5d33008 	ldrb	r3, [r3, #8]
  104ed8:	e3530009 	cmp	r3, #9
  104edc:	0a000005 	beq	104ef8 <ueth_device_control+0x64>
  104ee0:	e3a02091 	mov	r2, #145	; 0x91
  104ee4:	e305177c 	movw	r1, #22396	; 0x577c
  104ee8:	e3401014 	movt	r1, #20
  104eec:	e30506d8 	movw	r0, #22232	; 0x56d8
  104ef0:	e3400014 	movt	r0, #20
  104ef4:	ebfff9a7 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104ef8:	e51b3008 	ldr	r3, [fp, #-8]
  104efc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104f00:	e5933014 	ldr	r3, [r3, #20]
  104f04:	e3530000 	cmp	r3, #0
  104f08:	0a000008 	beq	104f30 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104f0c:	e51b3008 	ldr	r3, [fp, #-8]
  104f10:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104f14:	e5933014 	ldr	r3, [r3, #20]
  104f18:	e51b2010 	ldr	r2, [fp, #-16]
  104f1c:	e51b100c 	ldr	r1, [fp, #-12]
  104f20:	e51b0008 	ldr	r0, [fp, #-8]
  104f24:	e12fff33 	blx	r3
  104f28:	e1a03000 	mov	r3, r0
  104f2c:	ea000000 	b	104f34 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104f30:	e3e03005 	mvn	r3, #5
  104f34:	e1a00003 	mov	r0, r3
  104f38:	e24bd004 	sub	sp, fp, #4
  104f3c:	e8bd8800 	pop	{fp, pc}

00104f40 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104f40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f44:	e28db000 	add	fp, sp, #0
  104f48:	e24dd00c 	sub	sp, sp, #12
  104f4c:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104f50:	e51b3008 	ldr	r3, [fp, #-8]
  104f54:	e3a02000 	mov	r2, #0
  104f58:	e5832000 	str	r2, [r3]
}
  104f5c:	e320f000 	nop	{0}
  104f60:	e28bd000 	add	sp, fp, #0
  104f64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104f68:	e12fff1e 	bx	lr

00104f6c <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104f6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f70:	e28db000 	add	fp, sp, #0
  104f74:	e24dd014 	sub	sp, sp, #20
  104f78:	e50b0010 	str	r0, [fp, #-16]
  104f7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104f80:	e51b3010 	ldr	r3, [fp, #-16]
  104f84:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104f88:	ea000002 	b	104f98 <rt_slist_append+0x2c>
  104f8c:	e51b3008 	ldr	r3, [fp, #-8]
  104f90:	e5933000 	ldr	r3, [r3]
  104f94:	e50b3008 	str	r3, [fp, #-8]
  104f98:	e51b3008 	ldr	r3, [fp, #-8]
  104f9c:	e5933000 	ldr	r3, [r3]
  104fa0:	e3530000 	cmp	r3, #0
  104fa4:	1afffff8 	bne	104f8c <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104fa8:	e51b3008 	ldr	r3, [fp, #-8]
  104fac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104fb0:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104fb8:	e3a02000 	mov	r2, #0
  104fbc:	e5832000 	str	r2, [r3]
}
  104fc0:	e320f000 	nop	{0}
  104fc4:	e28bd000 	add	sp, fp, #0
  104fc8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fcc:	e12fff1e 	bx	lr

00104fd0 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104fd0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fd4:	e28db000 	add	fp, sp, #0
  104fd8:	e24dd014 	sub	sp, sp, #20
  104fdc:	e50b0010 	str	r0, [fp, #-16]
  104fe0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104fe4:	e51b3010 	ldr	r3, [fp, #-16]
  104fe8:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104fec:	ea000002 	b	104ffc <rt_slist_remove+0x2c>
  104ff0:	e51b3008 	ldr	r3, [fp, #-8]
  104ff4:	e5933000 	ldr	r3, [r3]
  104ff8:	e50b3008 	str	r3, [fp, #-8]
  104ffc:	e51b3008 	ldr	r3, [fp, #-8]
  105000:	e5933000 	ldr	r3, [r3]
  105004:	e3530000 	cmp	r3, #0
  105008:	0a000004 	beq	105020 <rt_slist_remove+0x50>
  10500c:	e51b3008 	ldr	r3, [fp, #-8]
  105010:	e5933000 	ldr	r3, [r3]
  105014:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105018:	e1520003 	cmp	r2, r3
  10501c:	1afffff3 	bne	104ff0 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105020:	e51b3008 	ldr	r3, [fp, #-8]
  105024:	e5933000 	ldr	r3, [r3]
  105028:	e3530000 	cmp	r3, #0
  10502c:	0a000004 	beq	105044 <rt_slist_remove+0x74>
  105030:	e51b3008 	ldr	r3, [fp, #-8]
  105034:	e5933000 	ldr	r3, [r3]
  105038:	e5932000 	ldr	r2, [r3]
  10503c:	e51b3008 	ldr	r3, [fp, #-8]
  105040:	e5832000 	str	r2, [r3]

    return l;
  105044:	e51b3010 	ldr	r3, [fp, #-16]
}
  105048:	e1a00003 	mov	r0, r3
  10504c:	e28bd000 	add	sp, fp, #0
  105050:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105054:	e12fff1e 	bx	lr

00105058 <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  105058:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10505c:	e28db000 	add	fp, sp, #0
  105060:	e24dd00c 	sub	sp, sp, #12
  105064:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  105068:	e51b3008 	ldr	r3, [fp, #-8]
  10506c:	e5933000 	ldr	r3, [r3]
}
  105070:	e1a00003 	mov	r0, r3
  105074:	e28bd000 	add	sp, fp, #0
  105078:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10507c:	e12fff1e 	bx	lr

00105080 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  105080:	e92d4810 	push	{r4, fp, lr}
  105084:	e28db008 	add	fp, sp, #8
  105088:	e24dd01c 	sub	sp, sp, #28
  10508c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105090:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105094:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  105098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10509c:	e3530000 	cmp	r3, #0
  1050a0:	1a000005 	bne	1050bc <netdev_register+0x3c>
  1050a4:	e3a02032 	mov	r2, #50	; 0x32
  1050a8:	e3051af0 	movw	r1, #23280	; 0x5af0
  1050ac:	e3401014 	movt	r1, #20
  1050b0:	e3050790 	movw	r0, #22416	; 0x5790
  1050b4:	e3400014 	movt	r0, #20
  1050b8:	ebfff936 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  1050bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1050c0:	e3530000 	cmp	r3, #0
  1050c4:	1a000005 	bne	1050e0 <netdev_register+0x60>
  1050c8:	e3a02033 	mov	r2, #51	; 0x33
  1050cc:	e3051af0 	movw	r1, #23280	; 0x5af0
  1050d0:	e3401014 	movt	r1, #20
  1050d4:	e3050798 	movw	r0, #22424	; 0x5798
  1050d8:	e3400014 	movt	r0, #20
  1050dc:	ebfff92d 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  1050e0:	e3003185 	movw	r3, #389	; 0x185
  1050e4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  1050e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050ec:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1050f0:	e6bf2073 	sxth	r2, r3
  1050f4:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  1050f8:	e1e03003 	mvn	r3, r3
  1050fc:	e6bf3073 	sxth	r3, r3
  105100:	e0033002 	and	r3, r3, r2
  105104:	e6bf3073 	sxth	r3, r3
  105108:	e6ff2073 	uxth	r2, r3
  10510c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105110:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  105114:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105118:	e3a02000 	mov	r2, #0
  10511c:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105124:	e3a02000 	mov	r2, #0
  105128:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  10512c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105130:	e3a02000 	mov	r2, #0
  105134:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  105138:	e3a03000 	mov	r3, #0
  10513c:	e50b3010 	str	r3, [fp, #-16]
  105140:	ea000007 	b	105164 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  105144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105148:	e51b2010 	ldr	r2, [fp, #-16]
  10514c:	e2822006 	add	r2, r2, #6
  105150:	e3a01000 	mov	r1, #0
  105154:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  105158:	e51b3010 	ldr	r3, [fp, #-16]
  10515c:	e2833001 	add	r3, r3, #1
  105160:	e50b3010 	str	r3, [fp, #-16]
  105164:	e51b3010 	ldr	r3, [fp, #-16]
  105168:	e3530001 	cmp	r3, #1
  10516c:	9afffff4 	bls	105144 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  105170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105174:	e3a02000 	mov	r2, #0
  105178:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  10517c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105180:	e3a02000 	mov	r2, #0
  105184:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  105188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10518c:	e2834004 	add	r4, r3, #4
  105190:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105194:	ebfff819 	bl	103200 <rt_strlen>
  105198:	e1a03000 	mov	r3, r0
  10519c:	e1a02003 	mov	r2, r3
  1051a0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1051a4:	e1a00004 	mov	r0, r4
  1051a8:	ebfff82c 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  1051ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051b0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1051b4:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  1051b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051bc:	e1a00003 	mov	r0, r3
  1051c0:	ebffff5e 	bl	104f40 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  1051c4:	e30f3560 	movw	r3, #62816	; 0xf560
  1051c8:	e3403014 	movt	r3, #20
  1051cc:	e5933000 	ldr	r3, [r3]
  1051d0:	e3530000 	cmp	r3, #0
  1051d4:	1a000008 	bne	1051fc <netdev_register+0x17c>
    {
        netdev_list = netdev;
  1051d8:	e30f3560 	movw	r3, #62816	; 0xf560
  1051dc:	e3403014 	movt	r3, #20
  1051e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051e4:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  1051e8:	e30f355c 	movw	r3, #62812	; 0xf55c
  1051ec:	e3403014 	movt	r3, #20
  1051f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051f4:	e5832000 	str	r2, [r3]
  1051f8:	ea000007 	b	10521c <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  1051fc:	e30f3560 	movw	r3, #62816	; 0xf560
  105200:	e3403014 	movt	r3, #20
  105204:	e5933000 	ldr	r3, [r3]
  105208:	e1a02003 	mov	r2, r3
  10520c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105210:	e1a01003 	mov	r1, r3
  105214:	e1a00002 	mov	r0, r2
  105218:	ebffff53 	bl	104f6c <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  10521c:	e3a03000 	mov	r3, #0
}
  105220:	e1a00003 	mov	r0, r3
  105224:	e24bd008 	sub	sp, fp, #8
  105228:	e8bd8810 	pop	{r4, fp, pc}

0010522c <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  10522c:	e92d4800 	push	{fp, lr}
  105230:	e28db004 	add	fp, sp, #4
  105234:	e24dd010 	sub	sp, sp, #16
  105238:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  10523c:	e3a03000 	mov	r3, #0
  105240:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  105244:	e3a03000 	mov	r3, #0
  105248:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  10524c:	e51b3010 	ldr	r3, [fp, #-16]
  105250:	e3530000 	cmp	r3, #0
  105254:	1a000005 	bne	105270 <netdev_unregister+0x44>
  105258:	e3a02077 	mov	r2, #119	; 0x77
  10525c:	e3051b00 	movw	r1, #23296	; 0x5b00
  105260:	e3401014 	movt	r1, #20
  105264:	e3050790 	movw	r0, #22416	; 0x5790
  105268:	e3400014 	movt	r0, #20
  10526c:	ebfff8c9 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  105270:	e30f3560 	movw	r3, #62816	; 0xf560
  105274:	e3403014 	movt	r3, #20
  105278:	e5933000 	ldr	r3, [r3]
  10527c:	e3530000 	cmp	r3, #0
  105280:	1a000001 	bne	10528c <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  105284:	e3e03000 	mvn	r3, #0
  105288:	ea000045 	b	1053a4 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10528c:	e30f3560 	movw	r3, #62816	; 0xf560
  105290:	e3403014 	movt	r3, #20
  105294:	e5933000 	ldr	r3, [r3]
  105298:	e50b3008 	str	r3, [fp, #-8]
  10529c:	ea000030 	b	105364 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  1052a0:	e51b3008 	ldr	r3, [fp, #-8]
  1052a4:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  1052a8:	e51b200c 	ldr	r2, [fp, #-12]
  1052ac:	e51b3010 	ldr	r3, [fp, #-16]
  1052b0:	e1520003 	cmp	r2, r3
  1052b4:	1a000027 	bne	105358 <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  1052b8:	e30f3560 	movw	r3, #62816	; 0xf560
  1052bc:	e3403014 	movt	r3, #20
  1052c0:	e5933000 	ldr	r3, [r3]
  1052c4:	e51b2010 	ldr	r2, [fp, #-16]
  1052c8:	e1520003 	cmp	r2, r3
  1052cc:	1a00000c 	bne	105304 <netdev_unregister+0xd8>
  1052d0:	e30f3560 	movw	r3, #62816	; 0xf560
  1052d4:	e3403014 	movt	r3, #20
  1052d8:	e5933000 	ldr	r3, [r3]
  1052dc:	e1a00003 	mov	r0, r3
  1052e0:	ebffff5c 	bl	105058 <rt_slist_next>
  1052e4:	e1a03000 	mov	r3, r0
  1052e8:	e3530000 	cmp	r3, #0
  1052ec:	1a000004 	bne	105304 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  1052f0:	e30f3560 	movw	r3, #62816	; 0xf560
  1052f4:	e3403014 	movt	r3, #20
  1052f8:	e3a02000 	mov	r2, #0
  1052fc:	e5832000 	str	r2, [r3]
  105300:	ea000007 	b	105324 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  105304:	e30f3560 	movw	r3, #62816	; 0xf560
  105308:	e3403014 	movt	r3, #20
  10530c:	e5933000 	ldr	r3, [r3]
  105310:	e1a02003 	mov	r2, r3
  105314:	e51b300c 	ldr	r3, [fp, #-12]
  105318:	e1a01003 	mov	r1, r3
  10531c:	e1a00002 	mov	r0, r2
  105320:	ebffff2a 	bl	104fd0 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105324:	e30f355c 	movw	r3, #62812	; 0xf55c
  105328:	e3403014 	movt	r3, #20
  10532c:	e5933000 	ldr	r3, [r3]
  105330:	e51b2010 	ldr	r2, [fp, #-16]
  105334:	e1520003 	cmp	r2, r3
  105338:	1a00000d 	bne	105374 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  10533c:	e30f3560 	movw	r3, #62816	; 0xf560
  105340:	e3403014 	movt	r3, #20
  105344:	e5932000 	ldr	r2, [r3]
  105348:	e30f355c 	movw	r3, #62812	; 0xf55c
  10534c:	e3403014 	movt	r3, #20
  105350:	e5832000 	str	r2, [r3]
            }
            break;
  105354:	ea000006 	b	105374 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105358:	e51b0008 	ldr	r0, [fp, #-8]
  10535c:	ebffff3d 	bl	105058 <rt_slist_next>
  105360:	e50b0008 	str	r0, [fp, #-8]
  105364:	e51b3008 	ldr	r3, [fp, #-8]
  105368:	e3530000 	cmp	r3, #0
  10536c:	1affffcb 	bne	1052a0 <netdev_unregister+0x74>
  105370:	ea000000 	b	105378 <netdev_unregister+0x14c>
            break;
  105374:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  105378:	e51b200c 	ldr	r2, [fp, #-12]
  10537c:	e51b3010 	ldr	r3, [fp, #-16]
  105380:	e1520003 	cmp	r2, r3
  105384:	1a000005 	bne	1053a0 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  105388:	e51b0010 	ldr	r0, [fp, #-16]
  10538c:	eb000823 	bl	107420 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105390:	e3a02044 	mov	r2, #68	; 0x44
  105394:	e3a01000 	mov	r1, #0
  105398:	e51b0010 	ldr	r0, [fp, #-16]
  10539c:	ebfff7c9 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  1053a0:	e3e03000 	mvn	r3, #0
}
  1053a4:	e1a00003 	mov	r0, r3
  1053a8:	e24bd004 	sub	sp, fp, #4
  1053ac:	e8bd8800 	pop	{fp, pc}

001053b0 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  1053b0:	e92d4800 	push	{fp, lr}
  1053b4:	e28db004 	add	fp, sp, #4
  1053b8:	e24dd010 	sub	sp, sp, #16
  1053bc:	e1a03000 	mov	r3, r0
  1053c0:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1053c4:	e3a03000 	mov	r3, #0
  1053c8:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1053cc:	e3a03000 	mov	r3, #0
  1053d0:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1053d4:	e30f3560 	movw	r3, #62816	; 0xf560
  1053d8:	e3403014 	movt	r3, #20
  1053dc:	e5933000 	ldr	r3, [r3]
  1053e0:	e3530000 	cmp	r3, #0
  1053e4:	1a000001 	bne	1053f0 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  1053e8:	e3a03000 	mov	r3, #0
  1053ec:	ea000019 	b	105458 <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053f0:	e30f3560 	movw	r3, #62816	; 0xf560
  1053f4:	e3403014 	movt	r3, #20
  1053f8:	e5933000 	ldr	r3, [r3]
  1053fc:	e50b3008 	str	r3, [fp, #-8]
  105400:	ea000010 	b	105448 <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105404:	e51b3008 	ldr	r3, [fp, #-8]
  105408:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  10540c:	e51b300c 	ldr	r3, [fp, #-12]
  105410:	e3530000 	cmp	r3, #0
  105414:	0a000008 	beq	10543c <netdev_get_first_by_flags+0x8c>
  105418:	e51b300c 	ldr	r3, [fp, #-12]
  10541c:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105420:	e15b30be 	ldrh	r3, [fp, #-14]
  105424:	e0033002 	and	r3, r3, r2
  105428:	e6ff3073 	uxth	r3, r3
  10542c:	e3530000 	cmp	r3, #0
  105430:	0a000001 	beq	10543c <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105434:	e51b300c 	ldr	r3, [fp, #-12]
  105438:	ea000006 	b	105458 <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10543c:	e51b0008 	ldr	r0, [fp, #-8]
  105440:	ebffff04 	bl	105058 <rt_slist_next>
  105444:	e50b0008 	str	r0, [fp, #-8]
  105448:	e51b3008 	ldr	r3, [fp, #-8]
  10544c:	e3530000 	cmp	r3, #0
  105450:	1affffeb 	bne	105404 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105454:	e3a03000 	mov	r3, #0
}
  105458:	e1a00003 	mov	r0, r3
  10545c:	e24bd004 	sub	sp, fp, #4
  105460:	e8bd8800 	pop	{fp, pc}

00105464 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  105464:	e92d4800 	push	{fp, lr}
  105468:	e28db004 	add	fp, sp, #4
  10546c:	e24dd010 	sub	sp, sp, #16
  105470:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105474:	e3a03000 	mov	r3, #0
  105478:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  10547c:	e3a03000 	mov	r3, #0
  105480:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105484:	e30f3560 	movw	r3, #62816	; 0xf560
  105488:	e3403014 	movt	r3, #20
  10548c:	e5933000 	ldr	r3, [r3]
  105490:	e3530000 	cmp	r3, #0
  105494:	1a000001 	bne	1054a0 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  105498:	e3a03000 	mov	r3, #0
  10549c:	ea000018 	b	105504 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054a0:	e30f3560 	movw	r3, #62816	; 0xf560
  1054a4:	e3403014 	movt	r3, #20
  1054a8:	e5933000 	ldr	r3, [r3]
  1054ac:	e50b3008 	str	r3, [fp, #-8]
  1054b0:	ea00000f 	b	1054f4 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1054b4:	e51b3008 	ldr	r3, [fp, #-8]
  1054b8:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  1054bc:	e51b300c 	ldr	r3, [fp, #-12]
  1054c0:	e3530000 	cmp	r3, #0
  1054c4:	0a000007 	beq	1054e8 <netdev_get_by_ipaddr+0x84>
  1054c8:	e51b300c 	ldr	r3, [fp, #-12]
  1054cc:	e593200c 	ldr	r2, [r3, #12]
  1054d0:	e51b3010 	ldr	r3, [fp, #-16]
  1054d4:	e5933000 	ldr	r3, [r3]
  1054d8:	e1520003 	cmp	r2, r3
  1054dc:	1a000001 	bne	1054e8 <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054e0:	e51b300c 	ldr	r3, [fp, #-12]
  1054e4:	ea000006 	b	105504 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054e8:	e51b0008 	ldr	r0, [fp, #-8]
  1054ec:	ebfffed9 	bl	105058 <rt_slist_next>
  1054f0:	e50b0008 	str	r0, [fp, #-8]
  1054f4:	e51b3008 	ldr	r3, [fp, #-8]
  1054f8:	e3530000 	cmp	r3, #0
  1054fc:	1affffec 	bne	1054b4 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105500:	e3a03000 	mov	r3, #0
}
  105504:	e1a00003 	mov	r0, r3
  105508:	e24bd004 	sub	sp, fp, #4
  10550c:	e8bd8800 	pop	{fp, pc}

00105510 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  105510:	e92d4810 	push	{r4, fp, lr}
  105514:	e28db008 	add	fp, sp, #8
  105518:	e24dd014 	sub	sp, sp, #20
  10551c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105520:	e3a03000 	mov	r3, #0
  105524:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  105528:	e3a03000 	mov	r3, #0
  10552c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  105530:	e30f3560 	movw	r3, #62816	; 0xf560
  105534:	e3403014 	movt	r3, #20
  105538:	e5933000 	ldr	r3, [r3]
  10553c:	e3530000 	cmp	r3, #0
  105540:	1a000001 	bne	10554c <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  105544:	e3a03000 	mov	r3, #0
  105548:	ea000020 	b	1055d0 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10554c:	e30f3560 	movw	r3, #62816	; 0xf560
  105550:	e3403014 	movt	r3, #20
  105554:	e5933000 	ldr	r3, [r3]
  105558:	e50b3010 	str	r3, [fp, #-16]
  10555c:	ea000017 	b	1055c0 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105560:	e51b3010 	ldr	r3, [fp, #-16]
  105564:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  105568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10556c:	e3530000 	cmp	r3, #0
  105570:	0a00000f 	beq	1055b4 <netdev_get_by_name+0xa4>
  105574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105578:	e2834004 	add	r4, r3, #4
  10557c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105580:	e2833004 	add	r3, r3, #4
  105584:	e1a00003 	mov	r0, r3
  105588:	ebfff71c 	bl	103200 <rt_strlen>
  10558c:	e1a03000 	mov	r3, r0
  105590:	e1a02003 	mov	r2, r3
  105594:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  105598:	e1a00004 	mov	r0, r4
  10559c:	ebfff721 	bl	103228 <rt_strncmp>
  1055a0:	e1a03000 	mov	r3, r0
  1055a4:	e3530000 	cmp	r3, #0
  1055a8:	1a000001 	bne	1055b4 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1055ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1055b0:	ea000006 	b	1055d0 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1055b4:	e51b0010 	ldr	r0, [fp, #-16]
  1055b8:	ebfffea6 	bl	105058 <rt_slist_next>
  1055bc:	e50b0010 	str	r0, [fp, #-16]
  1055c0:	e51b3010 	ldr	r3, [fp, #-16]
  1055c4:	e3530000 	cmp	r3, #0
  1055c8:	1affffe4 	bne	105560 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1055cc:	e3a03000 	mov	r3, #0
}
  1055d0:	e1a00003 	mov	r0, r3
  1055d4:	e24bd008 	sub	sp, fp, #8
  1055d8:	e8bd8810 	pop	{r4, fp, pc}

001055dc <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  1055dc:	e92d4800 	push	{fp, lr}
  1055e0:	e28db004 	add	fp, sp, #4
  1055e4:	e24dd018 	sub	sp, sp, #24
  1055e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1055ec:	e3a03000 	mov	r3, #0
  1055f0:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1055f4:	e3a03000 	mov	r3, #0
  1055f8:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  1055fc:	e3a03000 	mov	r3, #0
  105600:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  105604:	e30f3560 	movw	r3, #62816	; 0xf560
  105608:	e3403014 	movt	r3, #20
  10560c:	e5933000 	ldr	r3, [r3]
  105610:	e3530000 	cmp	r3, #0
  105614:	1a000001 	bne	105620 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  105618:	e3a03000 	mov	r3, #0
  10561c:	ea000048 	b	105744 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105620:	e30f3560 	movw	r3, #62816	; 0xf560
  105624:	e3403014 	movt	r3, #20
  105628:	e5933000 	ldr	r3, [r3]
  10562c:	e50b3008 	str	r3, [fp, #-8]
  105630:	ea00001b 	b	1056a4 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105634:	e51b3008 	ldr	r3, [fp, #-8]
  105638:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  10563c:	e51b300c 	ldr	r3, [fp, #-12]
  105640:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105644:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  105648:	e51b3010 	ldr	r3, [fp, #-16]
  10564c:	e3530000 	cmp	r3, #0
  105650:	0a000010 	beq	105698 <netdev_get_by_family+0xbc>
  105654:	e51b3010 	ldr	r3, [fp, #-16]
  105658:	e5933008 	ldr	r3, [r3, #8]
  10565c:	e3530000 	cmp	r3, #0
  105660:	0a00000c 	beq	105698 <netdev_get_by_family+0xbc>
  105664:	e51b3010 	ldr	r3, [fp, #-16]
  105668:	e5933000 	ldr	r3, [r3]
  10566c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105670:	e1520003 	cmp	r2, r3
  105674:	1a000007 	bne	105698 <netdev_get_by_family+0xbc>
  105678:	e51b300c 	ldr	r3, [fp, #-12]
  10567c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105680:	e2033001 	and	r3, r3, #1
  105684:	e6ef3073 	uxtb	r3, r3
  105688:	e3530000 	cmp	r3, #0
  10568c:	0a000001 	beq	105698 <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105690:	e51b300c 	ldr	r3, [fp, #-12]
  105694:	ea00002a 	b	105744 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105698:	e51b0008 	ldr	r0, [fp, #-8]
  10569c:	ebfffe6d 	bl	105058 <rt_slist_next>
  1056a0:	e50b0008 	str	r0, [fp, #-8]
  1056a4:	e51b3008 	ldr	r3, [fp, #-8]
  1056a8:	e3530000 	cmp	r3, #0
  1056ac:	1affffe0 	bne	105634 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1056b0:	e30f3560 	movw	r3, #62816	; 0xf560
  1056b4:	e3403014 	movt	r3, #20
  1056b8:	e5933000 	ldr	r3, [r3]
  1056bc:	e50b3008 	str	r3, [fp, #-8]
  1056c0:	ea00001b 	b	105734 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056c4:	e51b3008 	ldr	r3, [fp, #-8]
  1056c8:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056cc:	e51b300c 	ldr	r3, [fp, #-12]
  1056d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056d4:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  1056d8:	e51b3010 	ldr	r3, [fp, #-16]
  1056dc:	e3530000 	cmp	r3, #0
  1056e0:	0a000010 	beq	105728 <netdev_get_by_family+0x14c>
  1056e4:	e51b3010 	ldr	r3, [fp, #-16]
  1056e8:	e5933008 	ldr	r3, [r3, #8]
  1056ec:	e3530000 	cmp	r3, #0
  1056f0:	0a00000c 	beq	105728 <netdev_get_by_family+0x14c>
  1056f4:	e51b3010 	ldr	r3, [fp, #-16]
  1056f8:	e5933004 	ldr	r3, [r3, #4]
  1056fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105700:	e1520003 	cmp	r2, r3
  105704:	1a000007 	bne	105728 <netdev_get_by_family+0x14c>
  105708:	e51b300c 	ldr	r3, [fp, #-12]
  10570c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105710:	e2033001 	and	r3, r3, #1
  105714:	e6ef3073 	uxtb	r3, r3
  105718:	e3530000 	cmp	r3, #0
  10571c:	0a000001 	beq	105728 <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105720:	e51b300c 	ldr	r3, [fp, #-12]
  105724:	ea000006 	b	105744 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105728:	e51b0008 	ldr	r0, [fp, #-8]
  10572c:	ebfffe49 	bl	105058 <rt_slist_next>
  105730:	e50b0008 	str	r0, [fp, #-8]
  105734:	e51b3008 	ldr	r3, [fp, #-8]
  105738:	e3530000 	cmp	r3, #0
  10573c:	1affffe0 	bne	1056c4 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105740:	e3a03000 	mov	r3, #0
}
  105744:	e1a00003 	mov	r0, r3
  105748:	e24bd004 	sub	sp, fp, #4
  10574c:	e8bd8800 	pop	{fp, pc}

00105750 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  105750:	e92d4800 	push	{fp, lr}
  105754:	e28db004 	add	fp, sp, #4
  105758:	e24dd008 	sub	sp, sp, #8
  10575c:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105760:	e51b3008 	ldr	r3, [fp, #-8]
  105764:	e3530000 	cmp	r3, #0
  105768:	1a000005 	bne	105784 <netdev_family_get+0x34>
  10576c:	e300214e 	movw	r2, #334	; 0x14e
  105770:	e3051b14 	movw	r1, #23316	; 0x5b14
  105774:	e3401014 	movt	r1, #20
  105778:	e3050790 	movw	r0, #22416	; 0x5790
  10577c:	e3400014 	movt	r0, #20
  105780:	ebfff784 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105784:	e51b3008 	ldr	r3, [fp, #-8]
  105788:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10578c:	e5933000 	ldr	r3, [r3]
}
  105790:	e1a00003 	mov	r0, r3
  105794:	e24bd004 	sub	sp, fp, #4
  105798:	e8bd8800 	pop	{fp, pc}

0010579c <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  10579c:	e92d4800 	push	{fp, lr}
  1057a0:	e28db004 	add	fp, sp, #4
  1057a4:	e24dd008 	sub	sp, sp, #8
  1057a8:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  1057ac:	e51b3008 	ldr	r3, [fp, #-8]
  1057b0:	e3530000 	cmp	r3, #0
  1057b4:	0a00000d 	beq	1057f0 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  1057b8:	e30f355c 	movw	r3, #62812	; 0xf55c
  1057bc:	e3403014 	movt	r3, #20
  1057c0:	e51b2008 	ldr	r2, [fp, #-8]
  1057c4:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  1057c8:	e51b3008 	ldr	r3, [fp, #-8]
  1057cc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057d0:	e593301c 	ldr	r3, [r3, #28]
  1057d4:	e3530000 	cmp	r3, #0
  1057d8:	0a000004 	beq	1057f0 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  1057dc:	e51b3008 	ldr	r3, [fp, #-8]
  1057e0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057e4:	e593301c 	ldr	r3, [r3, #28]
  1057e8:	e51b0008 	ldr	r0, [fp, #-8]
  1057ec:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  1057f0:	e320f000 	nop	{0}
  1057f4:	e24bd004 	sub	sp, fp, #4
  1057f8:	e8bd8800 	pop	{fp, pc}

001057fc <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  1057fc:	e92d4800 	push	{fp, lr}
  105800:	e28db004 	add	fp, sp, #4
  105804:	e24dd008 	sub	sp, sp, #8
  105808:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  10580c:	e51b3008 	ldr	r3, [fp, #-8]
  105810:	e3530000 	cmp	r3, #0
  105814:	1a000005 	bne	105830 <netdev_set_up+0x34>
  105818:	e3002173 	movw	r2, #371	; 0x173
  10581c:	e3051b28 	movw	r1, #23336	; 0x5b28
  105820:	e3401014 	movt	r1, #20
  105824:	e3050790 	movw	r0, #22416	; 0x5790
  105828:	e3400014 	movt	r0, #20
  10582c:	ebfff759 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  105830:	e51b3008 	ldr	r3, [fp, #-8]
  105834:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105838:	e3530000 	cmp	r3, #0
  10583c:	0a000004 	beq	105854 <netdev_set_up+0x58>
  105840:	e51b3008 	ldr	r3, [fp, #-8]
  105844:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105848:	e5933000 	ldr	r3, [r3]
  10584c:	e3530000 	cmp	r3, #0
  105850:	1a00000d 	bne	10588c <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105854:	e30507a0 	movw	r0, #22432	; 0x57a0
  105858:	e3400014 	movt	r0, #20
  10585c:	ebfff62c 	bl	103114 <rt_kprintf>
  105860:	e51b3008 	ldr	r3, [fp, #-8]
  105864:	e2833004 	add	r3, r3, #4
  105868:	e1a01003 	mov	r1, r3
  10586c:	e30507b4 	movw	r0, #22452	; 0x57b4
  105870:	e3400014 	movt	r0, #20
  105874:	ebfff626 	bl	103114 <rt_kprintf>
  105878:	e30507f0 	movw	r0, #22512	; 0x57f0
  10587c:	e3400014 	movt	r0, #20
  105880:	ebfff623 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105884:	e3e03000 	mvn	r3, #0
  105888:	ea00000d 	b	1058c4 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  10588c:	e51b3008 	ldr	r3, [fp, #-8]
  105890:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105894:	e2033001 	and	r3, r3, #1
  105898:	e6ef3073 	uxtb	r3, r3
  10589c:	e3530000 	cmp	r3, #0
  1058a0:	0a000001 	beq	1058ac <netdev_set_up+0xb0>
    {
        return RT_EOK;
  1058a4:	e3a03000 	mov	r3, #0
  1058a8:	ea000005 	b	1058c4 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  1058ac:	e51b3008 	ldr	r3, [fp, #-8]
  1058b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058b4:	e5933000 	ldr	r3, [r3]
  1058b8:	e51b0008 	ldr	r0, [fp, #-8]
  1058bc:	e12fff33 	blx	r3
  1058c0:	e1a03000 	mov	r3, r0
}
  1058c4:	e1a00003 	mov	r0, r3
  1058c8:	e24bd004 	sub	sp, fp, #4
  1058cc:	e8bd8800 	pop	{fp, pc}

001058d0 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  1058d0:	e92d4800 	push	{fp, lr}
  1058d4:	e28db004 	add	fp, sp, #4
  1058d8:	e24dd008 	sub	sp, sp, #8
  1058dc:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1058e0:	e51b3008 	ldr	r3, [fp, #-8]
  1058e4:	e3530000 	cmp	r3, #0
  1058e8:	1a000005 	bne	105904 <netdev_set_down+0x34>
  1058ec:	e300218e 	movw	r2, #398	; 0x18e
  1058f0:	e3051b38 	movw	r1, #23352	; 0x5b38
  1058f4:	e3401014 	movt	r1, #20
  1058f8:	e3050790 	movw	r0, #22416	; 0x5790
  1058fc:	e3400014 	movt	r0, #20
  105900:	ebfff724 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  105904:	e51b3008 	ldr	r3, [fp, #-8]
  105908:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10590c:	e3530000 	cmp	r3, #0
  105910:	0a000004 	beq	105928 <netdev_set_down+0x58>
  105914:	e51b3008 	ldr	r3, [fp, #-8]
  105918:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10591c:	e5933004 	ldr	r3, [r3, #4]
  105920:	e3530000 	cmp	r3, #0
  105924:	1a00000d 	bne	105960 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105928:	e30507a0 	movw	r0, #22432	; 0x57a0
  10592c:	e3400014 	movt	r0, #20
  105930:	ebfff5f7 	bl	103114 <rt_kprintf>
  105934:	e51b3008 	ldr	r3, [fp, #-8]
  105938:	e2833004 	add	r3, r3, #4
  10593c:	e1a01003 	mov	r1, r3
  105940:	e30507b4 	movw	r0, #22452	; 0x57b4
  105944:	e3400014 	movt	r0, #20
  105948:	ebfff5f1 	bl	103114 <rt_kprintf>
  10594c:	e30507f0 	movw	r0, #22512	; 0x57f0
  105950:	e3400014 	movt	r0, #20
  105954:	ebfff5ee 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105958:	e3e03000 	mvn	r3, #0
  10595c:	ea00000c 	b	105994 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  105960:	e51b3008 	ldr	r3, [fp, #-8]
  105964:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105968:	e2033001 	and	r3, r3, #1
  10596c:	e3530000 	cmp	r3, #0
  105970:	1a000001 	bne	10597c <netdev_set_down+0xac>
    {
        return RT_EOK;
  105974:	e3a03000 	mov	r3, #0
  105978:	ea000005 	b	105994 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  10597c:	e51b3008 	ldr	r3, [fp, #-8]
  105980:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105984:	e5933004 	ldr	r3, [r3, #4]
  105988:	e51b0008 	ldr	r0, [fp, #-8]
  10598c:	e12fff33 	blx	r3
  105990:	e1a03000 	mov	r3, r0
}
  105994:	e1a00003 	mov	r0, r3
  105998:	e24bd004 	sub	sp, fp, #4
  10599c:	e8bd8800 	pop	{fp, pc}

001059a0 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  1059a0:	e92d4800 	push	{fp, lr}
  1059a4:	e28db004 	add	fp, sp, #4
  1059a8:	e24dd008 	sub	sp, sp, #8
  1059ac:	e50b0008 	str	r0, [fp, #-8]
  1059b0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  1059b4:	e51b3008 	ldr	r3, [fp, #-8]
  1059b8:	e3530000 	cmp	r3, #0
  1059bc:	1a000005 	bne	1059d8 <netdev_dhcp_enabled+0x38>
  1059c0:	e30021ab 	movw	r2, #427	; 0x1ab
  1059c4:	e3051b48 	movw	r1, #23368	; 0x5b48
  1059c8:	e3401014 	movt	r1, #20
  1059cc:	e3050790 	movw	r0, #22416	; 0x5790
  1059d0:	e3400014 	movt	r0, #20
  1059d4:	ebfff6ef 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  1059d8:	e51b3008 	ldr	r3, [fp, #-8]
  1059dc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059e0:	e3530000 	cmp	r3, #0
  1059e4:	0a000004 	beq	1059fc <netdev_dhcp_enabled+0x5c>
  1059e8:	e51b3008 	ldr	r3, [fp, #-8]
  1059ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059f0:	e5933010 	ldr	r3, [r3, #16]
  1059f4:	e3530000 	cmp	r3, #0
  1059f8:	1a00000d 	bne	105a34 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  1059fc:	e30507a0 	movw	r0, #22432	; 0x57a0
  105a00:	e3400014 	movt	r0, #20
  105a04:	ebfff5c2 	bl	103114 <rt_kprintf>
  105a08:	e51b3008 	ldr	r3, [fp, #-8]
  105a0c:	e2833004 	add	r3, r3, #4
  105a10:	e1a01003 	mov	r1, r3
  105a14:	e30507f8 	movw	r0, #22520	; 0x57f8
  105a18:	e3400014 	movt	r0, #20
  105a1c:	ebfff5bc 	bl	103114 <rt_kprintf>
  105a20:	e30507f0 	movw	r0, #22512	; 0x57f0
  105a24:	e3400014 	movt	r0, #20
  105a28:	ebfff5b9 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a2c:	e3e03000 	mvn	r3, #0
  105a30:	ea00000f 	b	105a74 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105a34:	e51b3008 	ldr	r3, [fp, #-8]
  105a38:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105a3c:	e1a03423 	lsr	r3, r3, #8
  105a40:	e2033001 	and	r3, r3, #1
  105a44:	e51b200c 	ldr	r2, [fp, #-12]
  105a48:	e1520003 	cmp	r2, r3
  105a4c:	1a000001 	bne	105a58 <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105a50:	e3a03000 	mov	r3, #0
  105a54:	ea000006 	b	105a74 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105a58:	e51b3008 	ldr	r3, [fp, #-8]
  105a5c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a60:	e5933010 	ldr	r3, [r3, #16]
  105a64:	e51b100c 	ldr	r1, [fp, #-12]
  105a68:	e51b0008 	ldr	r0, [fp, #-8]
  105a6c:	e12fff33 	blx	r3
  105a70:	e1a03000 	mov	r3, r0
}
  105a74:	e1a00003 	mov	r0, r3
  105a78:	e24bd004 	sub	sp, fp, #4
  105a7c:	e8bd8800 	pop	{fp, pc}

00105a80 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105a80:	e92d4810 	push	{r4, fp, lr}
  105a84:	e28db008 	add	fp, sp, #8
  105a88:	e24dd00c 	sub	sp, sp, #12
  105a8c:	e50b0010 	str	r0, [fp, #-16]
  105a90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105a94:	e51b3010 	ldr	r3, [fp, #-16]
  105a98:	e3530000 	cmp	r3, #0
  105a9c:	1a000005 	bne	105ab8 <netdev_set_ipaddr+0x38>
  105aa0:	e3a02f72 	mov	r2, #456	; 0x1c8
  105aa4:	e3051b5c 	movw	r1, #23388	; 0x5b5c
  105aa8:	e3401014 	movt	r1, #20
  105aac:	e3050790 	movw	r0, #22416	; 0x5790
  105ab0:	e3400014 	movt	r0, #20
  105ab4:	ebfff6b7 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105abc:	e3530000 	cmp	r3, #0
  105ac0:	1a000005 	bne	105adc <netdev_set_ipaddr+0x5c>
  105ac4:	e30021c9 	movw	r2, #457	; 0x1c9
  105ac8:	e3051b5c 	movw	r1, #23388	; 0x5b5c
  105acc:	e3401014 	movt	r1, #20
  105ad0:	e305083c 	movw	r0, #22588	; 0x583c
  105ad4:	e3400014 	movt	r0, #20
  105ad8:	ebfff6ae 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105adc:	e51b3010 	ldr	r3, [fp, #-16]
  105ae0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ae4:	e3530000 	cmp	r3, #0
  105ae8:	0a000004 	beq	105b00 <netdev_set_ipaddr+0x80>
  105aec:	e51b3010 	ldr	r3, [fp, #-16]
  105af0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105af4:	e5933008 	ldr	r3, [r3, #8]
  105af8:	e3530000 	cmp	r3, #0
  105afc:	1a00000d 	bne	105b38 <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105b00:	e30507a0 	movw	r0, #22432	; 0x57a0
  105b04:	e3400014 	movt	r0, #20
  105b08:	ebfff581 	bl	103114 <rt_kprintf>
  105b0c:	e51b3010 	ldr	r3, [fp, #-16]
  105b10:	e2833004 	add	r3, r3, #4
  105b14:	e1a01003 	mov	r1, r3
  105b18:	e3050844 	movw	r0, #22596	; 0x5844
  105b1c:	e3400014 	movt	r0, #20
  105b20:	ebfff57b 	bl	103114 <rt_kprintf>
  105b24:	e30507f0 	movw	r0, #22512	; 0x57f0
  105b28:	e3400014 	movt	r0, #20
  105b2c:	ebfff578 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b30:	e3e03000 	mvn	r3, #0
  105b34:	ea00001d 	b	105bb0 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105b38:	e51b3010 	ldr	r3, [fp, #-16]
  105b3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b40:	e1a03423 	lsr	r3, r3, #8
  105b44:	e2033001 	and	r3, r3, #1
  105b48:	e6ef3073 	uxtb	r3, r3
  105b4c:	e3530000 	cmp	r3, #0
  105b50:	0a00000d 	beq	105b8c <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105b54:	e30507a0 	movw	r0, #22432	; 0x57a0
  105b58:	e3400014 	movt	r0, #20
  105b5c:	ebfff56c 	bl	103114 <rt_kprintf>
  105b60:	e51b3010 	ldr	r3, [fp, #-16]
  105b64:	e2833004 	add	r3, r3, #4
  105b68:	e1a01003 	mov	r1, r3
  105b6c:	e3050884 	movw	r0, #22660	; 0x5884
  105b70:	e3400014 	movt	r0, #20
  105b74:	ebfff566 	bl	103114 <rt_kprintf>
  105b78:	e30507f0 	movw	r0, #22512	; 0x57f0
  105b7c:	e3400014 	movt	r0, #20
  105b80:	ebfff563 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b84:	e3e03000 	mvn	r3, #0
  105b88:	ea000008 	b	105bb0 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105b8c:	e51b3010 	ldr	r3, [fp, #-16]
  105b90:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b94:	e5934008 	ldr	r4, [r3, #8]
  105b98:	e3a03000 	mov	r3, #0
  105b9c:	e3a02000 	mov	r2, #0
  105ba0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105ba4:	e51b0010 	ldr	r0, [fp, #-16]
  105ba8:	e12fff34 	blx	r4
  105bac:	e1a03000 	mov	r3, r0
}
  105bb0:	e1a00003 	mov	r0, r3
  105bb4:	e24bd008 	sub	sp, fp, #8
  105bb8:	e8bd8810 	pop	{r4, fp, pc}

00105bbc <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105bbc:	e92d4810 	push	{r4, fp, lr}
  105bc0:	e28db008 	add	fp, sp, #8
  105bc4:	e24dd00c 	sub	sp, sp, #12
  105bc8:	e50b0010 	str	r0, [fp, #-16]
  105bcc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105bd0:	e51b3010 	ldr	r3, [fp, #-16]
  105bd4:	e3530000 	cmp	r3, #0
  105bd8:	1a000005 	bne	105bf4 <netdev_set_netmask+0x38>
  105bdc:	e30021e6 	movw	r2, #486	; 0x1e6
  105be0:	e3051b70 	movw	r1, #23408	; 0x5b70
  105be4:	e3401014 	movt	r1, #20
  105be8:	e3050790 	movw	r0, #22416	; 0x5790
  105bec:	e3400014 	movt	r0, #20
  105bf0:	ebfff668 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bf8:	e3530000 	cmp	r3, #0
  105bfc:	1a000005 	bne	105c18 <netdev_set_netmask+0x5c>
  105c00:	e30021e7 	movw	r2, #487	; 0x1e7
  105c04:	e3051b70 	movw	r1, #23408	; 0x5b70
  105c08:	e3401014 	movt	r1, #20
  105c0c:	e30508dc 	movw	r0, #22748	; 0x58dc
  105c10:	e3400014 	movt	r0, #20
  105c14:	ebfff65f 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105c18:	e51b3010 	ldr	r3, [fp, #-16]
  105c1c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c20:	e3530000 	cmp	r3, #0
  105c24:	0a000004 	beq	105c3c <netdev_set_netmask+0x80>
  105c28:	e51b3010 	ldr	r3, [fp, #-16]
  105c2c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c30:	e5933008 	ldr	r3, [r3, #8]
  105c34:	e3530000 	cmp	r3, #0
  105c38:	1a00000d 	bne	105c74 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105c3c:	e30507a0 	movw	r0, #22432	; 0x57a0
  105c40:	e3400014 	movt	r0, #20
  105c44:	ebfff532 	bl	103114 <rt_kprintf>
  105c48:	e51b3010 	ldr	r3, [fp, #-16]
  105c4c:	e2833004 	add	r3, r3, #4
  105c50:	e1a01003 	mov	r1, r3
  105c54:	e30508e4 	movw	r0, #22756	; 0x58e4
  105c58:	e3400014 	movt	r0, #20
  105c5c:	ebfff52c 	bl	103114 <rt_kprintf>
  105c60:	e30507f0 	movw	r0, #22512	; 0x57f0
  105c64:	e3400014 	movt	r0, #20
  105c68:	ebfff529 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105c6c:	e3e03000 	mvn	r3, #0
  105c70:	ea00001d 	b	105cec <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105c74:	e51b3010 	ldr	r3, [fp, #-16]
  105c78:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c7c:	e1a03423 	lsr	r3, r3, #8
  105c80:	e2033001 	and	r3, r3, #1
  105c84:	e6ef3073 	uxtb	r3, r3
  105c88:	e3530000 	cmp	r3, #0
  105c8c:	0a00000d 	beq	105cc8 <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105c90:	e30507a0 	movw	r0, #22432	; 0x57a0
  105c94:	e3400014 	movt	r0, #20
  105c98:	ebfff51d 	bl	103114 <rt_kprintf>
  105c9c:	e51b3010 	ldr	r3, [fp, #-16]
  105ca0:	e2833004 	add	r3, r3, #4
  105ca4:	e1a01003 	mov	r1, r3
  105ca8:	e305092c 	movw	r0, #22828	; 0x592c
  105cac:	e3400014 	movt	r0, #20
  105cb0:	ebfff517 	bl	103114 <rt_kprintf>
  105cb4:	e30507f0 	movw	r0, #22512	; 0x57f0
  105cb8:	e3400014 	movt	r0, #20
  105cbc:	ebfff514 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105cc0:	e3e03000 	mvn	r3, #0
  105cc4:	ea000008 	b	105cec <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105cc8:	e51b3010 	ldr	r3, [fp, #-16]
  105ccc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105cd0:	e5934008 	ldr	r4, [r3, #8]
  105cd4:	e3a03000 	mov	r3, #0
  105cd8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105cdc:	e3a01000 	mov	r1, #0
  105ce0:	e51b0010 	ldr	r0, [fp, #-16]
  105ce4:	e12fff34 	blx	r4
  105ce8:	e1a03000 	mov	r3, r0
}
  105cec:	e1a00003 	mov	r0, r3
  105cf0:	e24bd008 	sub	sp, fp, #8
  105cf4:	e8bd8810 	pop	{r4, fp, pc}

00105cf8 <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cf8:	e92d4810 	push	{r4, fp, lr}
  105cfc:	e28db008 	add	fp, sp, #8
  105d00:	e24dd00c 	sub	sp, sp, #12
  105d04:	e50b0010 	str	r0, [fp, #-16]
  105d08:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105d0c:	e51b3010 	ldr	r3, [fp, #-16]
  105d10:	e3530000 	cmp	r3, #0
  105d14:	1a000005 	bne	105d30 <netdev_set_gw+0x38>
  105d18:	e3a02f81 	mov	r2, #516	; 0x204
  105d1c:	e3051b84 	movw	r1, #23428	; 0x5b84
  105d20:	e3401014 	movt	r1, #20
  105d24:	e3050790 	movw	r0, #22416	; 0x5790
  105d28:	e3400014 	movt	r0, #20
  105d2c:	ebfff619 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105d30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d34:	e3530000 	cmp	r3, #0
  105d38:	1a000005 	bne	105d54 <netdev_set_gw+0x5c>
  105d3c:	e3002205 	movw	r2, #517	; 0x205
  105d40:	e3051b84 	movw	r1, #23428	; 0x5b84
  105d44:	e3401014 	movt	r1, #20
  105d48:	e305098c 	movw	r0, #22924	; 0x598c
  105d4c:	e3400014 	movt	r0, #20
  105d50:	ebfff610 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105d54:	e51b3010 	ldr	r3, [fp, #-16]
  105d58:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d5c:	e3530000 	cmp	r3, #0
  105d60:	0a000004 	beq	105d78 <netdev_set_gw+0x80>
  105d64:	e51b3010 	ldr	r3, [fp, #-16]
  105d68:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d6c:	e5933008 	ldr	r3, [r3, #8]
  105d70:	e3530000 	cmp	r3, #0
  105d74:	1a00000d 	bne	105db0 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105d78:	e30507a0 	movw	r0, #22432	; 0x57a0
  105d7c:	e3400014 	movt	r0, #20
  105d80:	ebfff4e3 	bl	103114 <rt_kprintf>
  105d84:	e51b3010 	ldr	r3, [fp, #-16]
  105d88:	e2833004 	add	r3, r3, #4
  105d8c:	e1a01003 	mov	r1, r3
  105d90:	e3050990 	movw	r0, #22928	; 0x5990
  105d94:	e3400014 	movt	r0, #20
  105d98:	ebfff4dd 	bl	103114 <rt_kprintf>
  105d9c:	e30507f0 	movw	r0, #22512	; 0x57f0
  105da0:	e3400014 	movt	r0, #20
  105da4:	ebfff4da 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105da8:	e3e03000 	mvn	r3, #0
  105dac:	ea00001d 	b	105e28 <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105db0:	e51b3010 	ldr	r3, [fp, #-16]
  105db4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105db8:	e1a03423 	lsr	r3, r3, #8
  105dbc:	e2033001 	and	r3, r3, #1
  105dc0:	e6ef3073 	uxtb	r3, r3
  105dc4:	e3530000 	cmp	r3, #0
  105dc8:	0a00000d 	beq	105e04 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105dcc:	e30507a0 	movw	r0, #22432	; 0x57a0
  105dd0:	e3400014 	movt	r0, #20
  105dd4:	ebfff4ce 	bl	103114 <rt_kprintf>
  105dd8:	e51b3010 	ldr	r3, [fp, #-16]
  105ddc:	e2833004 	add	r3, r3, #4
  105de0:	e1a01003 	mov	r1, r3
  105de4:	e30509d8 	movw	r0, #23000	; 0x59d8
  105de8:	e3400014 	movt	r0, #20
  105dec:	ebfff4c8 	bl	103114 <rt_kprintf>
  105df0:	e30507f0 	movw	r0, #22512	; 0x57f0
  105df4:	e3400014 	movt	r0, #20
  105df8:	ebfff4c5 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105dfc:	e3e03000 	mvn	r3, #0
  105e00:	ea000008 	b	105e28 <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105e04:	e51b3010 	ldr	r3, [fp, #-16]
  105e08:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105e0c:	e5934008 	ldr	r4, [r3, #8]
  105e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105e14:	e3a02000 	mov	r2, #0
  105e18:	e3a01000 	mov	r1, #0
  105e1c:	e51b0010 	ldr	r0, [fp, #-16]
  105e20:	e12fff34 	blx	r4
  105e24:	e1a03000 	mov	r3, r0
}
  105e28:	e1a00003 	mov	r0, r3
  105e2c:	e24bd008 	sub	sp, fp, #8
  105e30:	e8bd8810 	pop	{r4, fp, pc}

00105e34 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105e34:	e92d4800 	push	{fp, lr}
  105e38:	e28db004 	add	fp, sp, #4
  105e3c:	e24dd010 	sub	sp, sp, #16
  105e40:	e50b0008 	str	r0, [fp, #-8]
  105e44:	e1a03001 	mov	r3, r1
  105e48:	e50b2010 	str	r2, [fp, #-16]
  105e4c:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105e50:	e51b3008 	ldr	r3, [fp, #-8]
  105e54:	e3530000 	cmp	r3, #0
  105e58:	1a000005 	bne	105e74 <netdev_set_dns_server+0x40>
  105e5c:	e3002222 	movw	r2, #546	; 0x222
  105e60:	e3051b94 	movw	r1, #23444	; 0x5b94
  105e64:	e3401014 	movt	r1, #20
  105e68:	e3050790 	movw	r0, #22416	; 0x5790
  105e6c:	e3400014 	movt	r0, #20
  105e70:	ebfff5c8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105e74:	e51b3010 	ldr	r3, [fp, #-16]
  105e78:	e3530000 	cmp	r3, #0
  105e7c:	1a000005 	bne	105e98 <netdev_set_dns_server+0x64>
  105e80:	e3002223 	movw	r2, #547	; 0x223
  105e84:	e3051b94 	movw	r1, #23444	; 0x5b94
  105e88:	e3401014 	movt	r1, #20
  105e8c:	e3050a38 	movw	r0, #23096	; 0x5a38
  105e90:	e3400014 	movt	r0, #20
  105e94:	ebfff5bf 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105e98:	e55b3009 	ldrb	r3, [fp, #-9]
  105e9c:	e3530001 	cmp	r3, #1
  105ea0:	9a00000e 	bls	105ee0 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105ea4:	e30507a0 	movw	r0, #22432	; 0x57a0
  105ea8:	e3400014 	movt	r0, #20
  105eac:	ebfff498 	bl	103114 <rt_kprintf>
  105eb0:	e55b3009 	ldrb	r3, [fp, #-9]
  105eb4:	e2833001 	add	r3, r3, #1
  105eb8:	e3a02002 	mov	r2, #2
  105ebc:	e1a01003 	mov	r1, r3
  105ec0:	e3050a44 	movw	r0, #23108	; 0x5a44
  105ec4:	e3400014 	movt	r0, #20
  105ec8:	ebfff491 	bl	103114 <rt_kprintf>
  105ecc:	e30507f0 	movw	r0, #22512	; 0x57f0
  105ed0:	e3400014 	movt	r0, #20
  105ed4:	ebfff48e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ed8:	e3e03000 	mvn	r3, #0
  105edc:	ea00001e 	b	105f5c <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105ee0:	e51b3008 	ldr	r3, [fp, #-8]
  105ee4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ee8:	e3530000 	cmp	r3, #0
  105eec:	0a000004 	beq	105f04 <netdev_set_dns_server+0xd0>
  105ef0:	e51b3008 	ldr	r3, [fp, #-8]
  105ef4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ef8:	e593300c 	ldr	r3, [r3, #12]
  105efc:	e3530000 	cmp	r3, #0
  105f00:	1a00000d 	bne	105f3c <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105f04:	e30507a0 	movw	r0, #22432	; 0x57a0
  105f08:	e3400014 	movt	r0, #20
  105f0c:	ebfff480 	bl	103114 <rt_kprintf>
  105f10:	e51b3008 	ldr	r3, [fp, #-8]
  105f14:	e2833004 	add	r3, r3, #4
  105f18:	e1a01003 	mov	r1, r3
  105f1c:	e3050a88 	movw	r0, #23176	; 0x5a88
  105f20:	e3400014 	movt	r0, #20
  105f24:	ebfff47a 	bl	103114 <rt_kprintf>
  105f28:	e30507f0 	movw	r0, #22512	; 0x57f0
  105f2c:	e3400014 	movt	r0, #20
  105f30:	ebfff477 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f34:	e3e03000 	mvn	r3, #0
  105f38:	ea000007 	b	105f5c <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105f3c:	e51b3008 	ldr	r3, [fp, #-8]
  105f40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f44:	e593300c 	ldr	r3, [r3, #12]
  105f48:	e55b1009 	ldrb	r1, [fp, #-9]
  105f4c:	e51b2010 	ldr	r2, [fp, #-16]
  105f50:	e51b0008 	ldr	r0, [fp, #-8]
  105f54:	e12fff33 	blx	r3
  105f58:	e1a03000 	mov	r3, r0
}
  105f5c:	e1a00003 	mov	r0, r3
  105f60:	e24bd004 	sub	sp, fp, #4
  105f64:	e8bd8800 	pop	{fp, pc}

00105f68 <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105f68:	e92d4800 	push	{fp, lr}
  105f6c:	e28db004 	add	fp, sp, #4
  105f70:	e24dd008 	sub	sp, sp, #8
  105f74:	e50b0008 	str	r0, [fp, #-8]
  105f78:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105f7c:	e51b3008 	ldr	r3, [fp, #-8]
  105f80:	e3530000 	cmp	r3, #0
  105f84:	1a000005 	bne	105fa0 <netdev_set_status_callback+0x38>
  105f88:	e300223d 	movw	r2, #573	; 0x23d
  105f8c:	e3051bac 	movw	r1, #23468	; 0x5bac
  105f90:	e3401014 	movt	r1, #20
  105f94:	e3050790 	movw	r0, #22416	; 0x5790
  105f98:	e3400014 	movt	r0, #20
  105f9c:	ebfff57d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105fa0:	e51b300c 	ldr	r3, [fp, #-12]
  105fa4:	e3530000 	cmp	r3, #0
  105fa8:	1a000005 	bne	105fc4 <netdev_set_status_callback+0x5c>
  105fac:	e300223e 	movw	r2, #574	; 0x23e
  105fb0:	e3051bac 	movw	r1, #23468	; 0x5bac
  105fb4:	e3401014 	movt	r1, #20
  105fb8:	e3050ad0 	movw	r0, #23248	; 0x5ad0
  105fbc:	e3400014 	movt	r0, #20
  105fc0:	ebfff574 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105fc4:	e51b3008 	ldr	r3, [fp, #-8]
  105fc8:	e51b200c 	ldr	r2, [fp, #-12]
  105fcc:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105fd0:	e320f000 	nop	{0}
  105fd4:	e24bd004 	sub	sp, fp, #4
  105fd8:	e8bd8800 	pop	{fp, pc}

00105fdc <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105fdc:	e92d4800 	push	{fp, lr}
  105fe0:	e28db004 	add	fp, sp, #4
  105fe4:	e24dd008 	sub	sp, sp, #8
  105fe8:	e50b0008 	str	r0, [fp, #-8]
  105fec:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105ff0:	e51b3008 	ldr	r3, [fp, #-8]
  105ff4:	e3530000 	cmp	r3, #0
  105ff8:	1a000005 	bne	106014 <netdev_set_addr_callback+0x38>
  105ffc:	e300224b 	movw	r2, #587	; 0x24b
  106000:	e3051bc8 	movw	r1, #23496	; 0x5bc8
  106004:	e3401014 	movt	r1, #20
  106008:	e3050790 	movw	r0, #22416	; 0x5790
  10600c:	e3400014 	movt	r0, #20
  106010:	ebfff560 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  106014:	e51b300c 	ldr	r3, [fp, #-12]
  106018:	e3530000 	cmp	r3, #0
  10601c:	1a000005 	bne	106038 <netdev_set_addr_callback+0x5c>
  106020:	e3a02f93 	mov	r2, #588	; 0x24c
  106024:	e3051bc8 	movw	r1, #23496	; 0x5bc8
  106028:	e3401014 	movt	r1, #20
  10602c:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  106030:	e3400014 	movt	r0, #20
  106034:	ebfff557 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  106038:	e51b3008 	ldr	r3, [fp, #-8]
  10603c:	e51b200c 	ldr	r2, [fp, #-12]
  106040:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  106044:	e320f000 	nop	{0}
  106048:	e24bd004 	sub	sp, fp, #4
  10604c:	e8bd8800 	pop	{fp, pc}

00106050 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  106050:	e92d4800 	push	{fp, lr}
  106054:	e28db004 	add	fp, sp, #4
  106058:	e24dd008 	sub	sp, sp, #8
  10605c:	e50b0008 	str	r0, [fp, #-8]
  106060:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  106064:	e51b300c 	ldr	r3, [fp, #-12]
  106068:	e3530000 	cmp	r3, #0
  10606c:	1a000005 	bne	106088 <netdev_low_level_set_ipaddr+0x38>
  106070:	e300225b 	movw	r2, #603	; 0x25b
  106074:	e3051be4 	movw	r1, #23524	; 0x5be4
  106078:	e3401014 	movt	r1, #20
  10607c:	e305083c 	movw	r0, #22588	; 0x583c
  106080:	e3400014 	movt	r0, #20
  106084:	ebfff543 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  106088:	e51b3008 	ldr	r3, [fp, #-8]
  10608c:	e3530000 	cmp	r3, #0
  106090:	0a000025 	beq	10612c <netdev_low_level_set_ipaddr+0xdc>
  106094:	e51b3008 	ldr	r3, [fp, #-8]
  106098:	e593200c 	ldr	r2, [r3, #12]
  10609c:	e51b300c 	ldr	r3, [fp, #-12]
  1060a0:	e5933000 	ldr	r3, [r3]
  1060a4:	e1520003 	cmp	r2, r3
  1060a8:	0a00001f 	beq	10612c <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  1060ac:	e51b300c 	ldr	r3, [fp, #-12]
  1060b0:	e5932000 	ldr	r2, [r3]
  1060b4:	e51b3008 	ldr	r3, [fp, #-8]
  1060b8:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  1060bc:	e51b3008 	ldr	r3, [fp, #-8]
  1060c0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060c4:	e2033001 	and	r3, r3, #1
  1060c8:	e6ef3073 	uxtb	r3, r3
  1060cc:	e3530000 	cmp	r3, #0
  1060d0:	0a00000c 	beq	106108 <netdev_low_level_set_ipaddr+0xb8>
  1060d4:	e51b3008 	ldr	r3, [fp, #-8]
  1060d8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060dc:	e1a03123 	lsr	r3, r3, #2
  1060e0:	e2033001 	and	r3, r3, #1
  1060e4:	e6ef3073 	uxtb	r3, r3
  1060e8:	e3530000 	cmp	r3, #0
  1060ec:	0a000005 	beq	106108 <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1060f0:	e51b3008 	ldr	r3, [fp, #-8]
  1060f4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060f8:	e3833080 	orr	r3, r3, #128	; 0x80
  1060fc:	e6ff2073 	uxth	r2, r3
  106100:	e51b3008 	ldr	r3, [fp, #-8]
  106104:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  106108:	e51b3008 	ldr	r3, [fp, #-8]
  10610c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106110:	e3530000 	cmp	r3, #0
  106114:	0a000004 	beq	10612c <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  106118:	e51b3008 	ldr	r3, [fp, #-8]
  10611c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106120:	e3a01000 	mov	r1, #0
  106124:	e51b0008 	ldr	r0, [fp, #-8]
  106128:	e12fff33 	blx	r3
        }
    }
}
  10612c:	e320f000 	nop	{0}
  106130:	e24bd004 	sub	sp, fp, #4
  106134:	e8bd8800 	pop	{fp, pc}

00106138 <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  106138:	e92d4800 	push	{fp, lr}
  10613c:	e28db004 	add	fp, sp, #4
  106140:	e24dd008 	sub	sp, sp, #8
  106144:	e50b0008 	str	r0, [fp, #-8]
  106148:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  10614c:	e51b300c 	ldr	r3, [fp, #-12]
  106150:	e3530000 	cmp	r3, #0
  106154:	1a000005 	bne	106170 <netdev_low_level_set_netmask+0x38>
  106158:	e3a02f9f 	mov	r2, #636	; 0x27c
  10615c:	e3051c00 	movw	r1, #23552	; 0x5c00
  106160:	e3401014 	movt	r1, #20
  106164:	e30508dc 	movw	r0, #22748	; 0x58dc
  106168:	e3400014 	movt	r0, #20
  10616c:	ebfff509 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  106170:	e51b3008 	ldr	r3, [fp, #-8]
  106174:	e3530000 	cmp	r3, #0
  106178:	0a00002d 	beq	106234 <netdev_low_level_set_netmask+0xfc>
  10617c:	e51b3008 	ldr	r3, [fp, #-8]
  106180:	e5932010 	ldr	r2, [r3, #16]
  106184:	e51b300c 	ldr	r3, [fp, #-12]
  106188:	e5933000 	ldr	r3, [r3]
  10618c:	e1520003 	cmp	r2, r3
  106190:	0a000027 	beq	106234 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106194:	e51b300c 	ldr	r3, [fp, #-12]
  106198:	e5932000 	ldr	r2, [r3]
  10619c:	e51b3008 	ldr	r3, [fp, #-8]
  1061a0:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061a4:	e51b3008 	ldr	r3, [fp, #-8]
  1061a8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061ac:	e2033001 	and	r3, r3, #1
  1061b0:	e6ef3073 	uxtb	r3, r3
  1061b4:	e3530000 	cmp	r3, #0
  1061b8:	0a000014 	beq	106210 <netdev_low_level_set_netmask+0xd8>
  1061bc:	e51b3008 	ldr	r3, [fp, #-8]
  1061c0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061c4:	e1a03123 	lsr	r3, r3, #2
  1061c8:	e2033001 	and	r3, r3, #1
  1061cc:	e6ef3073 	uxtb	r3, r3
  1061d0:	e3530000 	cmp	r3, #0
  1061d4:	0a00000d 	beq	106210 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061d8:	e51b3008 	ldr	r3, [fp, #-8]
  1061dc:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061e0:	e3530000 	cmp	r3, #0
  1061e4:	0a000009 	beq	106210 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061e8:	e51b3008 	ldr	r3, [fp, #-8]
  1061ec:	e593300c 	ldr	r3, [r3, #12]
  1061f0:	e3530000 	cmp	r3, #0
  1061f4:	0a000005 	beq	106210 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1061f8:	e51b3008 	ldr	r3, [fp, #-8]
  1061fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106200:	e3833080 	orr	r3, r3, #128	; 0x80
  106204:	e6ff2073 	uxth	r2, r3
  106208:	e51b3008 	ldr	r3, [fp, #-8]
  10620c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  106210:	e51b3008 	ldr	r3, [fp, #-8]
  106214:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106218:	e3530000 	cmp	r3, #0
  10621c:	0a000004 	beq	106234 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106220:	e51b3008 	ldr	r3, [fp, #-8]
  106224:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106228:	e3a01001 	mov	r1, #1
  10622c:	e51b0008 	ldr	r0, [fp, #-8]
  106230:	e12fff33 	blx	r3
        }
    }
}
  106234:	e320f000 	nop	{0}
  106238:	e24bd004 	sub	sp, fp, #4
  10623c:	e8bd8800 	pop	{fp, pc}

00106240 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  106240:	e92d4800 	push	{fp, lr}
  106244:	e28db004 	add	fp, sp, #4
  106248:	e24dd008 	sub	sp, sp, #8
  10624c:	e50b0008 	str	r0, [fp, #-8]
  106250:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  106254:	e51b300c 	ldr	r3, [fp, #-12]
  106258:	e3530000 	cmp	r3, #0
  10625c:	1a000005 	bne	106278 <netdev_low_level_set_gw+0x38>
  106260:	e300229e 	movw	r2, #670	; 0x29e
  106264:	e3051c20 	movw	r1, #23584	; 0x5c20
  106268:	e3401014 	movt	r1, #20
  10626c:	e305098c 	movw	r0, #22924	; 0x598c
  106270:	e3400014 	movt	r0, #20
  106274:	ebfff4c7 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  106278:	e51b3008 	ldr	r3, [fp, #-8]
  10627c:	e3530000 	cmp	r3, #0
  106280:	0a00002d 	beq	10633c <netdev_low_level_set_gw+0xfc>
  106284:	e51b3008 	ldr	r3, [fp, #-8]
  106288:	e5932014 	ldr	r2, [r3, #20]
  10628c:	e51b300c 	ldr	r3, [fp, #-12]
  106290:	e5933000 	ldr	r3, [r3]
  106294:	e1520003 	cmp	r2, r3
  106298:	0a000027 	beq	10633c <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  10629c:	e51b300c 	ldr	r3, [fp, #-12]
  1062a0:	e5932000 	ldr	r2, [r3]
  1062a4:	e51b3008 	ldr	r3, [fp, #-8]
  1062a8:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062ac:	e51b3008 	ldr	r3, [fp, #-8]
  1062b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062b4:	e2033001 	and	r3, r3, #1
  1062b8:	e6ef3073 	uxtb	r3, r3
  1062bc:	e3530000 	cmp	r3, #0
  1062c0:	0a000014 	beq	106318 <netdev_low_level_set_gw+0xd8>
  1062c4:	e51b3008 	ldr	r3, [fp, #-8]
  1062c8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062cc:	e1a03123 	lsr	r3, r3, #2
  1062d0:	e2033001 	and	r3, r3, #1
  1062d4:	e6ef3073 	uxtb	r3, r3
  1062d8:	e3530000 	cmp	r3, #0
  1062dc:	0a00000d 	beq	106318 <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062e0:	e51b3008 	ldr	r3, [fp, #-8]
  1062e4:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062e8:	e3530000 	cmp	r3, #0
  1062ec:	0a000009 	beq	106318 <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062f0:	e51b3008 	ldr	r3, [fp, #-8]
  1062f4:	e593300c 	ldr	r3, [r3, #12]
  1062f8:	e3530000 	cmp	r3, #0
  1062fc:	0a000005 	beq	106318 <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106300:	e51b3008 	ldr	r3, [fp, #-8]
  106304:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106308:	e3833080 	orr	r3, r3, #128	; 0x80
  10630c:	e6ff2073 	uxth	r2, r3
  106310:	e51b3008 	ldr	r3, [fp, #-8]
  106314:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  106318:	e51b3008 	ldr	r3, [fp, #-8]
  10631c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106320:	e3530000 	cmp	r3, #0
  106324:	0a000004 	beq	10633c <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  106328:	e51b3008 	ldr	r3, [fp, #-8]
  10632c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106330:	e3a01002 	mov	r1, #2
  106334:	e51b0008 	ldr	r0, [fp, #-8]
  106338:	e12fff33 	blx	r3
        }
    }
}
  10633c:	e320f000 	nop	{0}
  106340:	e24bd004 	sub	sp, fp, #4
  106344:	e8bd8800 	pop	{fp, pc}

00106348 <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  106348:	e92d4800 	push	{fp, lr}
  10634c:	e28db004 	add	fp, sp, #4
  106350:	e24dd018 	sub	sp, sp, #24
  106354:	e50b0010 	str	r0, [fp, #-16]
  106358:	e1a03001 	mov	r3, r1
  10635c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106360:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  106364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106368:	e3530000 	cmp	r3, #0
  10636c:	1a000005 	bne	106388 <netdev_low_level_set_dns_server+0x40>
  106370:	e30022c3 	movw	r2, #707	; 0x2c3
  106374:	e3051c38 	movw	r1, #23608	; 0x5c38
  106378:	e3401014 	movt	r1, #20
  10637c:	e3050a38 	movw	r0, #23096	; 0x5a38
  106380:	e3400014 	movt	r0, #20
  106384:	ebfff483 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  106388:	e51b3010 	ldr	r3, [fp, #-16]
  10638c:	e3530000 	cmp	r3, #0
  106390:	0a000023 	beq	106424 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106394:	e3a03000 	mov	r3, #0
  106398:	e50b3008 	str	r3, [fp, #-8]
  10639c:	ea00000a 	b	1063cc <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  1063a0:	e51b3010 	ldr	r3, [fp, #-16]
  1063a4:	e51b2008 	ldr	r2, [fp, #-8]
  1063a8:	e2822006 	add	r2, r2, #6
  1063ac:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1063b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063b4:	e5933000 	ldr	r3, [r3]
  1063b8:	e1520003 	cmp	r2, r3
  1063bc:	0a00001a 	beq	10642c <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1063c0:	e51b3008 	ldr	r3, [fp, #-8]
  1063c4:	e2833001 	add	r3, r3, #1
  1063c8:	e50b3008 	str	r3, [fp, #-8]
  1063cc:	e51b3008 	ldr	r3, [fp, #-8]
  1063d0:	e3530001 	cmp	r3, #1
  1063d4:	9afffff1 	bls	1063a0 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  1063d8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1063dc:	e3530001 	cmp	r3, #1
  1063e0:	8a000012 	bhi	106430 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  1063e4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1063e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063ec:	e5931000 	ldr	r1, [r3]
  1063f0:	e51b3010 	ldr	r3, [fp, #-16]
  1063f4:	e2822006 	add	r2, r2, #6
  1063f8:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  1063fc:	e51b3010 	ldr	r3, [fp, #-16]
  106400:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106404:	e3530000 	cmp	r3, #0
  106408:	0a000008 	beq	106430 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  10640c:	e51b3010 	ldr	r3, [fp, #-16]
  106410:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106414:	e3a01003 	mov	r1, #3
  106418:	e51b0010 	ldr	r0, [fp, #-16]
  10641c:	e12fff33 	blx	r3
  106420:	ea000002 	b	106430 <netdev_low_level_set_dns_server+0xe8>
        return;
  106424:	e320f000 	nop	{0}
  106428:	ea000000 	b	106430 <netdev_low_level_set_dns_server+0xe8>
            return;
  10642c:	e320f000 	nop	{0}
        }
    }
}
  106430:	e24bd004 	sub	sp, fp, #4
  106434:	e8bd8800 	pop	{fp, pc}

00106438 <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  106438:	e92d4800 	push	{fp, lr}
  10643c:	e28db004 	add	fp, sp, #4
  106440:	e24dd008 	sub	sp, sp, #8
  106444:	e50b0008 	str	r0, [fp, #-8]
  106448:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  10644c:	e51b3008 	ldr	r3, [fp, #-8]
  106450:	e3530000 	cmp	r3, #0
  106454:	0a000024 	beq	1064ec <netdev_low_level_set_status+0xb4>
  106458:	e51b3008 	ldr	r3, [fp, #-8]
  10645c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106460:	e2033001 	and	r3, r3, #1
  106464:	e51b200c 	ldr	r2, [fp, #-12]
  106468:	e1520003 	cmp	r2, r3
  10646c:	0a00001e 	beq	1064ec <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  106470:	e51b300c 	ldr	r3, [fp, #-12]
  106474:	e3530000 	cmp	r3, #0
  106478:	0a000006 	beq	106498 <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  10647c:	e51b3008 	ldr	r3, [fp, #-8]
  106480:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106484:	e3833001 	orr	r3, r3, #1
  106488:	e6ff2073 	uxth	r2, r3
  10648c:	e51b3008 	ldr	r3, [fp, #-8]
  106490:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106494:	ea000005 	b	1064b0 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  106498:	e51b3008 	ldr	r3, [fp, #-8]
  10649c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1064a0:	e3c33001 	bic	r3, r3, #1
  1064a4:	e6ff2073 	uxth	r2, r3
  1064a8:	e51b3008 	ldr	r3, [fp, #-8]
  1064ac:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  1064b0:	e51b3008 	ldr	r3, [fp, #-8]
  1064b4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064b8:	e3530000 	cmp	r3, #0
  1064bc:	0a00000a 	beq	1064ec <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  1064c0:	e51b3008 	ldr	r3, [fp, #-8]
  1064c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064c8:	e51b200c 	ldr	r2, [fp, #-12]
  1064cc:	e3520000 	cmp	r2, #0
  1064d0:	0a000001 	beq	1064dc <netdev_low_level_set_status+0xa4>
  1064d4:	e3a02004 	mov	r2, #4
  1064d8:	ea000000 	b	1064e0 <netdev_low_level_set_status+0xa8>
  1064dc:	e3a02005 	mov	r2, #5
  1064e0:	e1a01002 	mov	r1, r2
  1064e4:	e51b0008 	ldr	r0, [fp, #-8]
  1064e8:	e12fff33 	blx	r3
        }
    }
}
  1064ec:	e320f000 	nop	{0}
  1064f0:	e24bd004 	sub	sp, fp, #4
  1064f4:	e8bd8800 	pop	{fp, pc}

001064f8 <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064f8:	e92d4800 	push	{fp, lr}
  1064fc:	e28db004 	add	fp, sp, #4
  106500:	e24dd008 	sub	sp, sp, #8
  106504:	e50b0008 	str	r0, [fp, #-8]
  106508:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  10650c:	e51b3008 	ldr	r3, [fp, #-8]
  106510:	e3530000 	cmp	r3, #0
  106514:	0a00003f 	beq	106618 <netdev_low_level_set_link_status+0x120>
  106518:	e51b3008 	ldr	r3, [fp, #-8]
  10651c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106520:	e1a03123 	lsr	r3, r3, #2
  106524:	e2033001 	and	r3, r3, #1
  106528:	e51b200c 	ldr	r2, [fp, #-12]
  10652c:	e1520003 	cmp	r2, r3
  106530:	0a000038 	beq	106618 <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  106534:	e51b300c 	ldr	r3, [fp, #-12]
  106538:	e3530000 	cmp	r3, #0
  10653c:	0a00001a 	beq	1065ac <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  106540:	e51b3008 	ldr	r3, [fp, #-8]
  106544:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106548:	e3833004 	orr	r3, r3, #4
  10654c:	e6ff2073 	uxth	r2, r3
  106550:	e51b3008 	ldr	r3, [fp, #-8]
  106554:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  106558:	e51b3008 	ldr	r3, [fp, #-8]
  10655c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106560:	e2033001 	and	r3, r3, #1
  106564:	e6ef3073 	uxtb	r3, r3
  106568:	e3530000 	cmp	r3, #0
  10656c:	0a00001a 	beq	1065dc <netdev_low_level_set_link_status+0xe4>
  106570:	e51b3008 	ldr	r3, [fp, #-8]
  106574:	e283300c 	add	r3, r3, #12
  106578:	e3530000 	cmp	r3, #0
  10657c:	0a000016 	beq	1065dc <netdev_low_level_set_link_status+0xe4>
  106580:	e51b3008 	ldr	r3, [fp, #-8]
  106584:	e593300c 	ldr	r3, [r3, #12]
  106588:	e3530000 	cmp	r3, #0
  10658c:	0a000012 	beq	1065dc <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106590:	e51b3008 	ldr	r3, [fp, #-8]
  106594:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106598:	e3833080 	orr	r3, r3, #128	; 0x80
  10659c:	e6ff2073 	uxth	r2, r3
  1065a0:	e51b3008 	ldr	r3, [fp, #-8]
  1065a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1065a8:	ea00000b 	b	1065dc <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  1065ac:	e51b3008 	ldr	r3, [fp, #-8]
  1065b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b4:	e3c33004 	bic	r3, r3, #4
  1065b8:	e6ff2073 	uxth	r2, r3
  1065bc:	e51b3008 	ldr	r3, [fp, #-8]
  1065c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1065c4:	e51b3008 	ldr	r3, [fp, #-8]
  1065c8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065cc:	e3c33080 	bic	r3, r3, #128	; 0x80
  1065d0:	e6ff2073 	uxth	r2, r3
  1065d4:	e51b3008 	ldr	r3, [fp, #-8]
  1065d8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  1065dc:	e51b3008 	ldr	r3, [fp, #-8]
  1065e0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065e4:	e3530000 	cmp	r3, #0
  1065e8:	0a00000a 	beq	106618 <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  1065ec:	e51b3008 	ldr	r3, [fp, #-8]
  1065f0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065f4:	e51b200c 	ldr	r2, [fp, #-12]
  1065f8:	e3520000 	cmp	r2, #0
  1065fc:	0a000001 	beq	106608 <netdev_low_level_set_link_status+0x110>
  106600:	e3a02006 	mov	r2, #6
  106604:	ea000000 	b	10660c <netdev_low_level_set_link_status+0x114>
  106608:	e3a02007 	mov	r2, #7
  10660c:	e1a01002 	mov	r1, r2
  106610:	e51b0008 	ldr	r0, [fp, #-8]
  106614:	e12fff33 	blx	r3
        }
    }
}
  106618:	e320f000 	nop	{0}
  10661c:	e24bd004 	sub	sp, fp, #4
  106620:	e8bd8800 	pop	{fp, pc}

00106624 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106624:	e92d4800 	push	{fp, lr}
  106628:	e28db004 	add	fp, sp, #4
  10662c:	e24dd008 	sub	sp, sp, #8
  106630:	e50b0008 	str	r0, [fp, #-8]
  106634:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  106638:	e51b3008 	ldr	r3, [fp, #-8]
  10663c:	e3530000 	cmp	r3, #0
  106640:	0a000025 	beq	1066dc <netdev_low_level_set_dhcp_status+0xb8>
  106644:	e51b3008 	ldr	r3, [fp, #-8]
  106648:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10664c:	e1a03423 	lsr	r3, r3, #8
  106650:	e2033001 	and	r3, r3, #1
  106654:	e51b200c 	ldr	r2, [fp, #-12]
  106658:	e1520003 	cmp	r2, r3
  10665c:	0a00001e 	beq	1066dc <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  106660:	e51b300c 	ldr	r3, [fp, #-12]
  106664:	e3530000 	cmp	r3, #0
  106668:	0a000006 	beq	106688 <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  10666c:	e51b3008 	ldr	r3, [fp, #-8]
  106670:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106674:	e3833c01 	orr	r3, r3, #256	; 0x100
  106678:	e6ff2073 	uxth	r2, r3
  10667c:	e51b3008 	ldr	r3, [fp, #-8]
  106680:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106684:	ea000005 	b	1066a0 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  106688:	e51b3008 	ldr	r3, [fp, #-8]
  10668c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106690:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106694:	e6ff2073 	uxth	r2, r3
  106698:	e51b3008 	ldr	r3, [fp, #-8]
  10669c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  1066a0:	e51b3008 	ldr	r3, [fp, #-8]
  1066a4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1066a8:	e3530000 	cmp	r3, #0
  1066ac:	0a00000a 	beq	1066dc <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  1066b0:	e51b3008 	ldr	r3, [fp, #-8]
  1066b4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1066b8:	e51b200c 	ldr	r2, [fp, #-12]
  1066bc:	e3520000 	cmp	r2, #0
  1066c0:	0a000001 	beq	1066cc <netdev_low_level_set_dhcp_status+0xa8>
  1066c4:	e3a0200a 	mov	r2, #10
  1066c8:	ea000000 	b	1066d0 <netdev_low_level_set_dhcp_status+0xac>
  1066cc:	e3a0200b 	mov	r2, #11
  1066d0:	e1a01002 	mov	r1, r2
  1066d4:	e51b0008 	ldr	r0, [fp, #-8]
  1066d8:	e12fff33 	blx	r3
        }
    }
}
  1066dc:	e320f000 	nop	{0}
  1066e0:	e24bd004 	sub	sp, fp, #4
  1066e4:	e8bd8800 	pop	{fp, pc}

001066e8 <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1066e8:	e92d4800 	push	{fp, lr}
  1066ec:	e28db004 	add	fp, sp, #4
  1066f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1066f4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1066f8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  1066fc:	e24b3020 	sub	r3, fp, #32
  106700:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  106704:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106708:	e5d33000 	ldrb	r3, [r3]
  10670c:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  106710:	e55b300a 	ldrb	r3, [fp, #-10]
  106714:	e353002f 	cmp	r3, #47	; 0x2f
  106718:	9a000002 	bls	106728 <netdev_ip4addr_aton+0x40>
  10671c:	e55b300a 	ldrb	r3, [fp, #-10]
  106720:	e3530039 	cmp	r3, #57	; 0x39
  106724:	9a000001 	bls	106730 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  106728:	e3a03000 	mov	r3, #0
  10672c:	ea0000f7 	b	106b10 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  106730:	e3a03000 	mov	r3, #0
  106734:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  106738:	e3a0300a 	mov	r3, #10
  10673c:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  106740:	e55b300a 	ldrb	r3, [fp, #-10]
  106744:	e3530030 	cmp	r3, #48	; 0x30
  106748:	1a000016 	bne	1067a8 <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  10674c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106750:	e2833001 	add	r3, r3, #1
  106754:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106758:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10675c:	e5d33000 	ldrb	r3, [r3]
  106760:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  106764:	e55b300a 	ldrb	r3, [fp, #-10]
  106768:	e3530078 	cmp	r3, #120	; 0x78
  10676c:	0a000002 	beq	10677c <netdev_ip4addr_aton+0x94>
  106770:	e55b300a 	ldrb	r3, [fp, #-10]
  106774:	e3530058 	cmp	r3, #88	; 0x58
  106778:	1a000008 	bne	1067a0 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  10677c:	e3a03010 	mov	r3, #16
  106780:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106784:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106788:	e2833001 	add	r3, r3, #1
  10678c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106790:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106794:	e5d33000 	ldrb	r3, [r3]
  106798:	e54b300a 	strb	r3, [fp, #-10]
  10679c:	ea000001 	b	1067a8 <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  1067a0:	e3a03008 	mov	r3, #8
  1067a4:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  1067a8:	e55b300a 	ldrb	r3, [fp, #-10]
  1067ac:	e353002f 	cmp	r3, #47	; 0x2f
  1067b0:	9a000010 	bls	1067f8 <netdev_ip4addr_aton+0x110>
  1067b4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b8:	e3530039 	cmp	r3, #57	; 0x39
  1067bc:	8a00000d 	bhi	1067f8 <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  1067c0:	e55b3009 	ldrb	r3, [fp, #-9]
  1067c4:	e51b2008 	ldr	r2, [fp, #-8]
  1067c8:	e0020392 	mul	r2, r2, r3
  1067cc:	e55b300a 	ldrb	r3, [fp, #-10]
  1067d0:	e0823003 	add	r3, r2, r3
  1067d4:	e2433030 	sub	r3, r3, #48	; 0x30
  1067d8:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1067dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067e0:	e2833001 	add	r3, r3, #1
  1067e4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067ec:	e5d33000 	ldrb	r3, [r3]
  1067f0:	e54b300a 	strb	r3, [fp, #-10]
  1067f4:	ea00002a 	b	1068a4 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  1067f8:	e55b3009 	ldrb	r3, [fp, #-9]
  1067fc:	e3530010 	cmp	r3, #16
  106800:	1a000028 	bne	1068a8 <netdev_ip4addr_aton+0x1c0>
  106804:	e55b300a 	ldrb	r3, [fp, #-10]
  106808:	e353002f 	cmp	r3, #47	; 0x2f
  10680c:	9a000002 	bls	10681c <netdev_ip4addr_aton+0x134>
  106810:	e55b300a 	ldrb	r3, [fp, #-10]
  106814:	e3530039 	cmp	r3, #57	; 0x39
  106818:	9a00000b 	bls	10684c <netdev_ip4addr_aton+0x164>
  10681c:	e55b300a 	ldrb	r3, [fp, #-10]
  106820:	e3530060 	cmp	r3, #96	; 0x60
  106824:	9a000002 	bls	106834 <netdev_ip4addr_aton+0x14c>
  106828:	e55b300a 	ldrb	r3, [fp, #-10]
  10682c:	e3530066 	cmp	r3, #102	; 0x66
  106830:	9a000005 	bls	10684c <netdev_ip4addr_aton+0x164>
  106834:	e55b300a 	ldrb	r3, [fp, #-10]
  106838:	e3530040 	cmp	r3, #64	; 0x40
  10683c:	9a000019 	bls	1068a8 <netdev_ip4addr_aton+0x1c0>
  106840:	e55b300a 	ldrb	r3, [fp, #-10]
  106844:	e3530046 	cmp	r3, #70	; 0x46
  106848:	8a000016 	bhi	1068a8 <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  10684c:	e51b3008 	ldr	r3, [fp, #-8]
  106850:	e1a03203 	lsl	r3, r3, #4
  106854:	e55b200a 	ldrb	r2, [fp, #-10]
  106858:	e282100a 	add	r1, r2, #10
  10685c:	e55b200a 	ldrb	r2, [fp, #-10]
  106860:	e3520060 	cmp	r2, #96	; 0x60
  106864:	9a000004 	bls	10687c <netdev_ip4addr_aton+0x194>
  106868:	e55b200a 	ldrb	r2, [fp, #-10]
  10686c:	e352007a 	cmp	r2, #122	; 0x7a
  106870:	8a000001 	bhi	10687c <netdev_ip4addr_aton+0x194>
  106874:	e3a02061 	mov	r2, #97	; 0x61
  106878:	ea000000 	b	106880 <netdev_ip4addr_aton+0x198>
  10687c:	e3a02041 	mov	r2, #65	; 0x41
  106880:	e0412002 	sub	r2, r1, r2
  106884:	e1833002 	orr	r3, r3, r2
  106888:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  10688c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106890:	e2833001 	add	r3, r3, #1
  106894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106898:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10689c:	e5d33000 	ldrb	r3, [r3]
  1068a0:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  1068a4:	eaffffbf 	b	1067a8 <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  1068a8:	e55b300a 	ldrb	r3, [fp, #-10]
  1068ac:	e353002e 	cmp	r3, #46	; 0x2e
  1068b0:	1a000012 	bne	106900 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  1068b4:	e24b3020 	sub	r3, fp, #32
  1068b8:	e283300c 	add	r3, r3, #12
  1068bc:	e51b2010 	ldr	r2, [fp, #-16]
  1068c0:	e1520003 	cmp	r2, r3
  1068c4:	3a000001 	bcc	1068d0 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  1068c8:	e3a03000 	mov	r3, #0
  1068cc:	ea00008f 	b	106b10 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  1068d0:	e51b3010 	ldr	r3, [fp, #-16]
  1068d4:	e2832004 	add	r2, r3, #4
  1068d8:	e50b2010 	str	r2, [fp, #-16]
  1068dc:	e51b2008 	ldr	r2, [fp, #-8]
  1068e0:	e5832000 	str	r2, [r3]
            c = *++cp;
  1068e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068e8:	e2833001 	add	r3, r3, #1
  1068ec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1068f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068f4:	e5d33000 	ldrb	r3, [r3]
  1068f8:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  1068fc:	eaffff83 	b	106710 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  106900:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  106904:	e55b300a 	ldrb	r3, [fp, #-10]
  106908:	e3530000 	cmp	r3, #0
  10690c:	0a000013 	beq	106960 <netdev_ip4addr_aton+0x278>
  106910:	e55b300a 	ldrb	r3, [fp, #-10]
  106914:	e3530020 	cmp	r3, #32
  106918:	0a000010 	beq	106960 <netdev_ip4addr_aton+0x278>
  10691c:	e55b300a 	ldrb	r3, [fp, #-10]
  106920:	e353000c 	cmp	r3, #12
  106924:	0a00000d 	beq	106960 <netdev_ip4addr_aton+0x278>
  106928:	e55b300a 	ldrb	r3, [fp, #-10]
  10692c:	e353000a 	cmp	r3, #10
  106930:	0a00000a 	beq	106960 <netdev_ip4addr_aton+0x278>
  106934:	e55b300a 	ldrb	r3, [fp, #-10]
  106938:	e353000d 	cmp	r3, #13
  10693c:	0a000007 	beq	106960 <netdev_ip4addr_aton+0x278>
  106940:	e55b300a 	ldrb	r3, [fp, #-10]
  106944:	e3530009 	cmp	r3, #9
  106948:	0a000004 	beq	106960 <netdev_ip4addr_aton+0x278>
  10694c:	e55b300a 	ldrb	r3, [fp, #-10]
  106950:	e353000b 	cmp	r3, #11
  106954:	0a000001 	beq	106960 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  106958:	e3a03000 	mov	r3, #0
  10695c:	ea00006b 	b	106b10 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  106960:	e51b2010 	ldr	r2, [fp, #-16]
  106964:	e24b3020 	sub	r3, fp, #32
  106968:	e0423003 	sub	r3, r2, r3
  10696c:	e1a03143 	asr	r3, r3, #2
  106970:	e2833001 	add	r3, r3, #1
  106974:	e3530004 	cmp	r3, #4
  106978:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  10697c:	ea000048 	b	106aa4 <netdev_ip4addr_aton+0x3bc>
  106980:	00106994 	.word	0x00106994
  106984:	00106ac0 	.word	0x00106ac0
  106988:	0010699c 	.word	0x0010699c
  10698c:	001069dc 	.word	0x001069dc
  106990:	00106a34 	.word	0x00106a34
    {

    case 0:
        return 0; /* initial nondigit */
  106994:	e3a03000 	mov	r3, #0
  106998:	ea00005c 	b	106b10 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  10699c:	e51b3008 	ldr	r3, [fp, #-8]
  1069a0:	e3530401 	cmp	r3, #16777216	; 0x1000000
  1069a4:	3a000001 	bcc	1069b0 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  1069a8:	e3a03000 	mov	r3, #0
  1069ac:	ea000057 	b	106b10 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  1069b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069b4:	e35300ff 	cmp	r3, #255	; 0xff
  1069b8:	9a000001 	bls	1069c4 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  1069bc:	e3a03000 	mov	r3, #0
  1069c0:	ea000052 	b	106b10 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  1069c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069c8:	e1a03c03 	lsl	r3, r3, #24
  1069cc:	e51b2008 	ldr	r2, [fp, #-8]
  1069d0:	e1823003 	orr	r3, r2, r3
  1069d4:	e50b3008 	str	r3, [fp, #-8]
        break;
  1069d8:	ea000039 	b	106ac4 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  1069dc:	e51b3008 	ldr	r3, [fp, #-8]
  1069e0:	e3530801 	cmp	r3, #65536	; 0x10000
  1069e4:	3a000001 	bcc	1069f0 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  1069e8:	e3a03000 	mov	r3, #0
  1069ec:	ea000047 	b	106b10 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  1069f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f4:	e35300ff 	cmp	r3, #255	; 0xff
  1069f8:	8a000002 	bhi	106a08 <netdev_ip4addr_aton+0x320>
  1069fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a00:	e35300ff 	cmp	r3, #255	; 0xff
  106a04:	9a000001 	bls	106a10 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  106a08:	e3a03000 	mov	r3, #0
  106a0c:	ea00003f 	b	106b10 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  106a10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a14:	e1a02c03 	lsl	r2, r3, #24
  106a18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a1c:	e1a03803 	lsl	r3, r3, #16
  106a20:	e1823003 	orr	r3, r2, r3
  106a24:	e51b2008 	ldr	r2, [fp, #-8]
  106a28:	e1823003 	orr	r3, r2, r3
  106a2c:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a30:	ea000023 	b	106ac4 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106a34:	e51b3008 	ldr	r3, [fp, #-8]
  106a38:	e35300ff 	cmp	r3, #255	; 0xff
  106a3c:	9a000001 	bls	106a48 <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106a40:	e3a03000 	mov	r3, #0
  106a44:	ea000031 	b	106b10 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a4c:	e35300ff 	cmp	r3, #255	; 0xff
  106a50:	8a000005 	bhi	106a6c <netdev_ip4addr_aton+0x384>
  106a54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a58:	e35300ff 	cmp	r3, #255	; 0xff
  106a5c:	8a000002 	bhi	106a6c <netdev_ip4addr_aton+0x384>
  106a60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a64:	e35300ff 	cmp	r3, #255	; 0xff
  106a68:	9a000001 	bls	106a74 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106a6c:	e3a03000 	mov	r3, #0
  106a70:	ea000026 	b	106b10 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a78:	e1a02c03 	lsl	r2, r3, #24
  106a7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a80:	e1a03803 	lsl	r3, r3, #16
  106a84:	e1822003 	orr	r2, r2, r3
  106a88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a8c:	e1a03403 	lsl	r3, r3, #8
  106a90:	e1823003 	orr	r3, r2, r3
  106a94:	e51b2008 	ldr	r2, [fp, #-8]
  106a98:	e1823003 	orr	r3, r2, r3
  106a9c:	e50b3008 	str	r3, [fp, #-8]
        break;
  106aa0:	ea000007 	b	106ac4 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106aa4:	e3a020a7 	mov	r2, #167	; 0xa7
  106aa8:	e3051c5c 	movw	r1, #23644	; 0x5c5c
  106aac:	e3401014 	movt	r1, #20
  106ab0:	e3050c58 	movw	r0, #23640	; 0x5c58
  106ab4:	e3400014 	movt	r0, #20
  106ab8:	ebfff2b6 	bl	103598 <rt_assert_handler>
        break;
  106abc:	ea000000 	b	106ac4 <netdev_ip4addr_aton+0x3dc>
        break;
  106ac0:	e320f000 	nop	{0}
    }
    if (addr)
  106ac4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106ac8:	e3530000 	cmp	r3, #0
  106acc:	0a00000e 	beq	106b0c <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106ad0:	e51b3008 	ldr	r3, [fp, #-8]
  106ad4:	e1a02c03 	lsl	r2, r3, #24
  106ad8:	e51b3008 	ldr	r3, [fp, #-8]
  106adc:	e1a03403 	lsl	r3, r3, #8
  106ae0:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106ae4:	e1822003 	orr	r2, r2, r3
  106ae8:	e51b3008 	ldr	r3, [fp, #-8]
  106aec:	e1a03423 	lsr	r3, r3, #8
  106af0:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106af4:	e1822003 	orr	r2, r2, r3
  106af8:	e51b3008 	ldr	r3, [fp, #-8]
  106afc:	e1a03c23 	lsr	r3, r3, #24
  106b00:	e1822003 	orr	r2, r2, r3
  106b04:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b08:	e5832000 	str	r2, [r3]
    }
    return 1;
  106b0c:	e3a03001 	mov	r3, #1
}
  106b10:	e1a00003 	mov	r0, r3
  106b14:	e24bd004 	sub	sp, fp, #4
  106b18:	e8bd8800 	pop	{fp, pc}

00106b1c <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b20:	e28db000 	add	fp, sp, #0
  106b24:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b28:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b2c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106b30:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106b34:	e3a03000 	mov	r3, #0
  106b38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106b3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106b40:	e5933000 	ldr	r3, [r3]
  106b44:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106b48:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b4c:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106b50:	e24b301c 	sub	r3, fp, #28
  106b54:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106b58:	e3a03000 	mov	r3, #0
  106b5c:	e54b300d 	strb	r3, [fp, #-13]
  106b60:	ea00004b 	b	106c94 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106b64:	e3a03000 	mov	r3, #0
  106b68:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106b6c:	e51b300c 	ldr	r3, [fp, #-12]
  106b70:	e5d31000 	ldrb	r1, [r3]
  106b74:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b78:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b7c:	e0832391 	umull	r2, r3, r1, r3
  106b80:	e1a031a3 	lsr	r3, r3, #3
  106b84:	e3a0200a 	mov	r2, #10
  106b88:	e0030392 	mul	r3, r2, r3
  106b8c:	e0413003 	sub	r3, r1, r3
  106b90:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106b94:	e51b300c 	ldr	r3, [fp, #-12]
  106b98:	e5d32000 	ldrb	r2, [r3]
  106b9c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106ba0:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106ba4:	e0832392 	umull	r2, r3, r2, r3
  106ba8:	e1a031a3 	lsr	r3, r3, #3
  106bac:	e6ef2073 	uxtb	r2, r3
  106bb0:	e51b300c 	ldr	r3, [fp, #-12]
  106bb4:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106bb8:	e55b300e 	ldrb	r3, [fp, #-14]
  106bbc:	e2832001 	add	r2, r3, #1
  106bc0:	e54b200e 	strb	r2, [fp, #-14]
  106bc4:	e1a01003 	mov	r1, r3
  106bc8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106bcc:	e2833030 	add	r3, r3, #48	; 0x30
  106bd0:	e6ef2073 	uxtb	r2, r3
  106bd4:	e24b3004 	sub	r3, fp, #4
  106bd8:	e0833001 	add	r3, r3, r1
  106bdc:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106be0:	e51b300c 	ldr	r3, [fp, #-12]
  106be4:	e5d33000 	ldrb	r3, [r3]
  106be8:	e3530000 	cmp	r3, #0
  106bec:	1affffde 	bne	106b6c <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106bf0:	ea00000f 	b	106c34 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106bf8:	e2832001 	add	r2, r3, #1
  106bfc:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c00:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c04:	e1520003 	cmp	r2, r3
  106c08:	ca000001 	bgt	106c14 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106c0c:	e3a03000 	mov	r3, #0
  106c10:	ea000029 	b	106cbc <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106c14:	e55b200e 	ldrb	r2, [fp, #-14]
  106c18:	e51b3008 	ldr	r3, [fp, #-8]
  106c1c:	e2831001 	add	r1, r3, #1
  106c20:	e50b1008 	str	r1, [fp, #-8]
  106c24:	e24b1004 	sub	r1, fp, #4
  106c28:	e0812002 	add	r2, r1, r2
  106c2c:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106c30:	e5c32000 	strb	r2, [r3]
        while (i--)
  106c34:	e55b300e 	ldrb	r3, [fp, #-14]
  106c38:	e2432001 	sub	r2, r3, #1
  106c3c:	e54b200e 	strb	r2, [fp, #-14]
  106c40:	e3530000 	cmp	r3, #0
  106c44:	1affffea 	bne	106bf4 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106c48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c4c:	e2832001 	add	r2, r3, #1
  106c50:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c54:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c58:	e1520003 	cmp	r2, r3
  106c5c:	ca000001 	bgt	106c68 <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106c60:	e3a03000 	mov	r3, #0
  106c64:	ea000014 	b	106cbc <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106c68:	e51b3008 	ldr	r3, [fp, #-8]
  106c6c:	e2832001 	add	r2, r3, #1
  106c70:	e50b2008 	str	r2, [fp, #-8]
  106c74:	e3a0202e 	mov	r2, #46	; 0x2e
  106c78:	e5c32000 	strb	r2, [r3]
        ap++;
  106c7c:	e51b300c 	ldr	r3, [fp, #-12]
  106c80:	e2833001 	add	r3, r3, #1
  106c84:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106c88:	e55b300d 	ldrb	r3, [fp, #-13]
  106c8c:	e2833001 	add	r3, r3, #1
  106c90:	e54b300d 	strb	r3, [fp, #-13]
  106c94:	e55b300d 	ldrb	r3, [fp, #-13]
  106c98:	e3530003 	cmp	r3, #3
  106c9c:	9affffb0 	bls	106b64 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106ca0:	e51b3008 	ldr	r3, [fp, #-8]
  106ca4:	e2433001 	sub	r3, r3, #1
  106ca8:	e50b3008 	str	r3, [fp, #-8]
  106cac:	e51b3008 	ldr	r3, [fp, #-8]
  106cb0:	e3a02000 	mov	r2, #0
  106cb4:	e5c32000 	strb	r2, [r3]
    return buf;
  106cb8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106cbc:	e1a00003 	mov	r0, r3
  106cc0:	e28bd000 	add	sp, fp, #0
  106cc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106cc8:	e12fff1e 	bx	lr

00106ccc <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106ccc:	e92d4800 	push	{fp, lr}
  106cd0:	e28db004 	add	fp, sp, #4
  106cd4:	e24dd008 	sub	sp, sp, #8
  106cd8:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106cdc:	e3a02010 	mov	r2, #16
  106ce0:	e30d1450 	movw	r1, #54352	; 0xd450
  106ce4:	e3401014 	movt	r1, #20
  106ce8:	e51b0008 	ldr	r0, [fp, #-8]
  106cec:	ebffff8a 	bl	106b1c <netdev_ip4addr_ntoa_r>
  106cf0:	e1a03000 	mov	r3, r0
}
  106cf4:	e1a00003 	mov	r0, r3
  106cf8:	e24bd004 	sub	sp, fp, #4
  106cfc:	e8bd8800 	pop	{fp, pc}

00106d00 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106d00:	e92d4800 	push	{fp, lr}
  106d04:	e28db004 	add	fp, sp, #4
  106d08:	e24dd010 	sub	sp, sp, #16
  106d0c:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106d10:	e24b3008 	sub	r3, fp, #8
  106d14:	e1a01003 	mov	r1, r3
  106d18:	e51b0010 	ldr	r0, [fp, #-16]
  106d1c:	ebfffe71 	bl	1066e8 <netdev_ip4addr_aton>
  106d20:	e1a03000 	mov	r3, r0
  106d24:	e3530000 	cmp	r3, #0
  106d28:	0a000001 	beq	106d34 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d2c:	e51b3008 	ldr	r3, [fp, #-8]
  106d30:	ea000000 	b	106d38 <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106d34:	e3e03000 	mvn	r3, #0
}
  106d38:	e1a00003 	mov	r0, r3
  106d3c:	e24bd004 	sub	sp, fp, #4
  106d40:	e8bd8800 	pop	{fp, pc}

00106d44 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106d44:	e92d4800 	push	{fp, lr}
  106d48:	e28db004 	add	fp, sp, #4
  106d4c:	e24dd018 	sub	sp, sp, #24
  106d50:	e50b0010 	str	r0, [fp, #-16]
  106d54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106d58:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106d5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106d60:	e3a03000 	mov	r3, #0
  106d64:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106d68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106d6c:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106d70:	e51b300c 	ldr	r3, [fp, #-12]
  106d74:	e3530000 	cmp	r3, #0
  106d78:	aa000001 	bge	106d84 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106d7c:	e3a03000 	mov	r3, #0
  106d80:	ea00000a 	b	106db0 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106d84:	e51b3010 	ldr	r3, [fp, #-16]
  106d88:	e3530002 	cmp	r3, #2
  106d8c:	0a000002 	beq	106d9c <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106d90:	e320f000 	nop	{0}
    }
    return ret;
  106d94:	e51b3008 	ldr	r3, [fp, #-8]
  106d98:	ea000004 	b	106db0 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106d9c:	e51b200c 	ldr	r2, [fp, #-12]
  106da0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106da4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106da8:	ebffff5b 	bl	106b1c <netdev_ip4addr_ntoa_r>
  106dac:	e1a03000 	mov	r3, r0
}
  106db0:	e1a00003 	mov	r0, r3
  106db4:	e24bd004 	sub	sp, fp, #4
  106db8:	e8bd8800 	pop	{fp, pc}

00106dbc <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106dbc:	e92d4800 	push	{fp, lr}
  106dc0:	e28db004 	add	fp, sp, #4
  106dc4:	e24dd018 	sub	sp, sp, #24
  106dc8:	e50b0010 	str	r0, [fp, #-16]
  106dcc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106dd0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106dd4:	e51b3010 	ldr	r3, [fp, #-16]
  106dd8:	e3530002 	cmp	r3, #2
  106ddc:	1a000004 	bne	106df4 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106de0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106de4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106de8:	ebfffe3e 	bl	1066e8 <netdev_ip4addr_aton>
  106dec:	e50b0008 	str	r0, [fp, #-8]
        break;
  106df0:	ea000002 	b	106e00 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106df4:	e3e03000 	mvn	r3, #0
  106df8:	e50b3008 	str	r3, [fp, #-8]
        break;
  106dfc:	e320f000 	nop	{0}
    }
    return err;
  106e00:	e51b3008 	ldr	r3, [fp, #-8]
}
  106e04:	e1a00003 	mov	r0, r3
  106e08:	e24bd004 	sub	sp, fp, #4
  106e0c:	e8bd8800 	pop	{fp, pc}

00106e10 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106e10:	e92d4800 	push	{fp, lr}
  106e14:	e28db004 	add	fp, sp, #4
  106e18:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e1c:	e30d3490 	movw	r3, #54416	; 0xd490
  106e20:	e3403014 	movt	r3, #20
  106e24:	e5933000 	ldr	r3, [r3]
  106e28:	e3530000 	cmp	r3, #0
  106e2c:	0a000001 	beq	106e38 <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106e30:	e3a03000 	mov	r3, #0
  106e34:	ea000032 	b	106f04 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106e38:	e3a03004 	mov	r3, #4
  106e3c:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106e40:	e51b2008 	ldr	r2, [fp, #-8]
  106e44:	e30d3460 	movw	r3, #54368	; 0xd460
  106e48:	e3403014 	movt	r3, #20
  106e4c:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106e50:	e51b3008 	ldr	r3, [fp, #-8]
  106e54:	e1a03103 	lsl	r3, r3, #2
  106e58:	e1a01003 	mov	r1, r3
  106e5c:	e3a00001 	mov	r0, #1
  106e60:	ebfff069 	bl	10300c <rt_calloc>
  106e64:	e1a02000 	mov	r2, r0
  106e68:	e30d3460 	movw	r3, #54368	; 0xd460
  106e6c:	e3403014 	movt	r3, #20
  106e70:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106e74:	e30d3460 	movw	r3, #54368	; 0xd460
  106e78:	e3403014 	movt	r3, #20
  106e7c:	e5933004 	ldr	r3, [r3, #4]
  106e80:	e3530000 	cmp	r3, #0
  106e84:	1a00000a 	bne	106eb4 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106e88:	e3050c70 	movw	r0, #23664	; 0x5c70
  106e8c:	e3400014 	movt	r0, #20
  106e90:	ebfff09f 	bl	103114 <rt_kprintf>
  106e94:	e3050c84 	movw	r0, #23684	; 0x5c84
  106e98:	e3400014 	movt	r0, #20
  106e9c:	ebfff09c 	bl	103114 <rt_kprintf>
  106ea0:	e3050ca4 	movw	r0, #23716	; 0x5ca4
  106ea4:	e3400014 	movt	r0, #20
  106ea8:	ebfff099 	bl	103114 <rt_kprintf>
        return -1;
  106eac:	e3e03000 	mvn	r3, #0
  106eb0:	ea000013 	b	106f04 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106eb4:	e3a02000 	mov	r2, #0
  106eb8:	e3051cac 	movw	r1, #23724	; 0x5cac
  106ebc:	e3401014 	movt	r1, #20
  106ec0:	e30d0468 	movw	r0, #54376	; 0xd468
  106ec4:	e3400014 	movt	r0, #20
  106ec8:	ebffe79e 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106ecc:	e3050cb8 	movw	r0, #23736	; 0x5cb8
  106ed0:	e3400014 	movt	r0, #20
  106ed4:	ebfff08e 	bl	103114 <rt_kprintf>
  106ed8:	e3050ccc 	movw	r0, #23756	; 0x5ccc
  106edc:	e3400014 	movt	r0, #20
  106ee0:	ebfff08b 	bl	103114 <rt_kprintf>
  106ee4:	e3050ca4 	movw	r0, #23716	; 0x5ca4
  106ee8:	e3400014 	movt	r0, #20
  106eec:	ebfff088 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106ef0:	e30d3490 	movw	r3, #54416	; 0xd490
  106ef4:	e3403014 	movt	r3, #20
  106ef8:	e3a02001 	mov	r2, #1
  106efc:	e5832000 	str	r2, [r3]

    return 0;
  106f00:	e3a03000 	mov	r3, #0
}
  106f04:	e1a00003 	mov	r0, r3
  106f08:	e24bd004 	sub	sp, fp, #4
  106f0c:	e8bd8800 	pop	{fp, pc}

00106f10 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106f10:	e92d4810 	push	{r4, fp, lr}
  106f14:	e28db008 	add	fp, sp, #8
  106f18:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f1c:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f20:	e3e03000 	mvn	r3, #0
  106f24:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f28:	e3a03000 	mov	r3, #0
  106f2c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106f30:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106f34:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106f38:	e3a03010 	mov	r3, #16
  106f3c:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106f40:	e3a03000 	mov	r3, #0
  106f44:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106f48:	e3053d20 	movw	r3, #23840	; 0x5d20
  106f4c:	e3403014 	movt	r3, #20
  106f50:	e24bc090 	sub	ip, fp, #144	; 0x90
  106f54:	e1a0e003 	mov	lr, r3
  106f58:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f5c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f60:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f64:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f68:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106f6c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106f70:	e3a03000 	mov	r3, #0
  106f74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106f78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106f7c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106f80:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106f84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f88:	e3530000 	cmp	r3, #0
  106f8c:	0a000003 	beq	106fa0 <check_netdev_internet_up_work+0x90>
  106f90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f94:	e5933008 	ldr	r3, [r3, #8]
  106f98:	e3530000 	cmp	r3, #0
  106f9c:	1a000002 	bne	106fac <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106fa0:	e3e03000 	mvn	r3, #0
  106fa4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fa8:	ea0000bc 	b	1072a0 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106fac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fb0:	e593300c 	ldr	r3, [r3, #12]
  106fb4:	e5933000 	ldr	r3, [r3]
  106fb8:	e3050cfc 	movw	r0, #23804	; 0x5cfc
  106fbc:	e3400014 	movt	r0, #20
  106fc0:	e12fff33 	blx	r3
  106fc4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106fcc:	e3530000 	cmp	r3, #0
  106fd0:	1a000002 	bne	106fe0 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106fd4:	e3e03000 	mvn	r3, #0
  106fd8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fdc:	ea0000af 	b	1072a0 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106fe0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fe4:	e5933008 	ldr	r3, [r3, #8]
  106fe8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106fec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106ff0:	e5933000 	ldr	r3, [r3]
  106ff4:	e3a02000 	mov	r2, #0
  106ff8:	e3a01002 	mov	r1, #2
  106ffc:	e3a00002 	mov	r0, #2
  107000:	e12fff33 	blx	r3
  107004:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  107008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10700c:	e3530000 	cmp	r3, #0
  107010:	aa000002 	bge	107020 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  107014:	e3e03000 	mvn	r3, #0
  107018:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  10701c:	ea00009f 	b	1072a0 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107020:	e3a03002 	mov	r3, #2
  107024:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  107028:	e30a351f 	movw	r3, #42271	; 0xa51f
  10702c:	e34f3fff 	movt	r3, #65535	; 0xffff
  107030:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  107034:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107038:	e5933010 	ldr	r3, [r3, #16]
  10703c:	e5933000 	ldr	r3, [r3]
  107040:	e5933000 	ldr	r3, [r3]
  107044:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  107048:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10704c:	e2833008 	add	r3, r3, #8
  107050:	e3a02008 	mov	r2, #8
  107054:	e3a01000 	mov	r1, #0
  107058:	e1a00003 	mov	r0, r3
  10705c:	ebfff099 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  107060:	e3a02002 	mov	r2, #2
  107064:	e3a03000 	mov	r3, #0
  107068:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  10706c:	e3a03000 	mov	r3, #0
  107070:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  107074:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107078:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  10707c:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107080:	e3a03010 	mov	r3, #16
  107084:	e58d3000 	str	r3, [sp]
  107088:	e1a03002 	mov	r3, r2
  10708c:	e3012006 	movw	r2, #4102	; 0x1006
  107090:	e3001fff 	movw	r1, #4095	; 0xfff
  107094:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107098:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  10709c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1070a0:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  1070a4:	e24b204c 	sub	r2, fp, #76	; 0x4c
  1070a8:	e3a03010 	mov	r3, #16
  1070ac:	e58d3000 	str	r3, [sp]
  1070b0:	e1a03002 	mov	r3, r2
  1070b4:	e3012005 	movw	r2, #4101	; 0x1005
  1070b8:	e3001fff 	movw	r1, #4095	; 0xfff
  1070bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1070c0:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  1070c4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070c8:	e3a02010 	mov	r2, #16
  1070cc:	e3a01000 	mov	r1, #0
  1070d0:	e1a00003 	mov	r0, r3
  1070d4:	ebfff07b 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  1070d8:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  1070dc:	e3053d10 	movw	r3, #23824	; 0x5d10
  1070e0:	e3403014 	movt	r3, #20
  1070e4:	e3052d1c 	movw	r2, #23836	; 0x5d1c
  1070e8:	e3402014 	movt	r2, #20
  1070ec:	e3a01010 	mov	r1, #16
  1070f0:	ebffefd1 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1070f4:	e3a03000 	mov	r3, #0
  1070f8:	e50b3010 	str	r3, [fp, #-16]
  1070fc:	ea000011 	b	107148 <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  107100:	e24b2090 	sub	r2, fp, #144	; 0x90
  107104:	e51b3010 	ldr	r3, [fp, #-16]
  107108:	e1a03103 	lsl	r3, r3, #2
  10710c:	e0821003 	add	r1, r2, r3
  107110:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  107114:	e3a02003 	mov	r2, #3
  107118:	e1a00003 	mov	r0, r3
  10711c:	ebfff085 	bl	103338 <rt_memcmp>
  107120:	e1a03000 	mov	r3, r0
  107124:	e3530000 	cmp	r3, #0
  107128:	1a000003 	bne	10713c <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  10712c:	e51b3010 	ldr	r3, [fp, #-16]
  107130:	e2833001 	add	r3, r3, #1
  107134:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  107138:	ea000005 	b	107154 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  10713c:	e51b3010 	ldr	r3, [fp, #-16]
  107140:	e2833001 	add	r3, r3, #1
  107144:	e50b3010 	str	r3, [fp, #-16]
  107148:	e51b3010 	ldr	r3, [fp, #-16]
  10714c:	e353000b 	cmp	r3, #11
  107150:	9affffea 	bls	107100 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  107154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107158:	e3530000 	cmp	r3, #0
  10715c:	0a000002 	beq	10716c <check_netdev_internet_up_work+0x25c>
  107160:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107164:	e353000c 	cmp	r3, #12
  107168:	9a000002 	bls	107178 <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  10716c:	e3e03000 	mvn	r3, #0
  107170:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107174:	ea000049 	b	1072a0 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  107178:	e24b305c 	sub	r3, fp, #92	; 0x5c
  10717c:	e3a0200c 	mov	r2, #12
  107180:	e3a01000 	mov	r1, #0
  107184:	e1a00003 	mov	r0, r3
  107188:	ebfff04e 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  10718c:	e3a03000 	mov	r3, #0
  107190:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107194:	e3a03000 	mov	r3, #0
  107198:	e50b3010 	str	r3, [fp, #-16]
  10719c:	ea000010 	b	1071e4 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  1071a0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1071a4:	e51b3010 	ldr	r3, [fp, #-16]
  1071a8:	e0823003 	add	r3, r2, r3
  1071ac:	e2833021 	add	r3, r3, #33	; 0x21
  1071b0:	e5d31000 	ldrb	r1, [r3]
  1071b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1071b8:	e6ef2073 	uxtb	r2, r3
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e2833001 	add	r3, r3, #1
  1071c4:	e0812002 	add	r2, r1, r2
  1071c8:	e6ef2072 	uxtb	r2, r2
  1071cc:	e24b100c 	sub	r1, fp, #12
  1071d0:	e0813003 	add	r3, r1, r3
  1071d4:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  1071d8:	e51b3010 	ldr	r3, [fp, #-16]
  1071dc:	e2833001 	add	r3, r3, #1
  1071e0:	e50b3010 	str	r3, [fp, #-16]
  1071e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1071e8:	e5d33020 	ldrb	r3, [r3, #32]
  1071ec:	e1a02003 	mov	r2, r3
  1071f0:	e51b3010 	ldr	r3, [fp, #-16]
  1071f4:	e1530002 	cmp	r3, r2
  1071f8:	baffffe8 	blt	1071a0 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  1071fc:	e3a03005 	mov	r3, #5
  107200:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  107204:	e3a03000 	mov	r3, #0
  107208:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  10720c:	e3a03000 	mov	r3, #0
  107210:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  107214:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107218:	e5934018 	ldr	r4, [r3, #24]
  10721c:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107220:	e3a03010 	mov	r3, #16
  107224:	e58d3004 	str	r3, [sp, #4]
  107228:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10722c:	e58d3000 	str	r3, [sp]
  107230:	e3a03000 	mov	r3, #0
  107234:	e3a0200c 	mov	r2, #12
  107238:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10723c:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  107240:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107244:	e593401c 	ldr	r4, [r3, #28]
  107248:	e24b105d 	sub	r1, fp, #93	; 0x5d
  10724c:	e24b3050 	sub	r3, fp, #80	; 0x50
  107250:	e58d3004 	str	r3, [sp, #4]
  107254:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107258:	e58d3000 	str	r3, [sp]
  10725c:	e3a03000 	mov	r3, #0
  107260:	e3a02001 	mov	r2, #1
  107264:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107268:	e12fff34 	blx	r4
  10726c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  107270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107274:	e3530000 	cmp	r3, #0
  107278:	ba000005 	blt	107294 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  10727c:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  107280:	e3530000 	cmp	r3, #0
  107284:	1a000004 	bne	10729c <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  107288:	e3e03000 	mvn	r3, #0
  10728c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107290:	ea000002 	b	1072a0 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107294:	e320f000 	nop	{0}
  107298:	ea000000 	b	1072a0 <check_netdev_internet_up_work+0x390>
    }

__exit:
  10729c:	e320f000 	nop	{0}
    if (result > 0)
  1072a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1072a4:	e3530000 	cmp	r3, #0
  1072a8:	da000006 	ble	1072c8 <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1072ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072b4:	e3833080 	orr	r3, r3, #128	; 0x80
  1072b8:	e6ff2073 	uxth	r2, r3
  1072bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1072c4:	ea000005 	b	1072e0 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1072c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072cc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072d0:	e3c33080 	bic	r3, r3, #128	; 0x80
  1072d4:	e6ff2073 	uxth	r2, r3
  1072d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072dc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  1072e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1072e4:	e3530000 	cmp	r3, #0
  1072e8:	ba000003 	blt	1072fc <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  1072ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072f0:	e5933004 	ldr	r3, [r3, #4]
  1072f4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072f8:	e12fff33 	blx	r3
    }
}
  1072fc:	e320f000 	nop	{0}
  107300:	e24bd008 	sub	sp, fp, #8
  107304:	e8bd8810 	pop	{r4, fp, pc}

00107308 <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  107308:	e92d4800 	push	{fp, lr}
  10730c:	e28db004 	add	fp, sp, #4
  107310:	e24dd010 	sub	sp, sp, #16
  107314:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  107318:	e30d3460 	movw	r3, #54368	; 0xd460
  10731c:	e3403014 	movt	r3, #20
  107320:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107324:	e51b3010 	ldr	r3, [fp, #-16]
  107328:	e3530000 	cmp	r3, #0
  10732c:	ba000005 	blt	107348 <sal_get_socket+0x40>
  107330:	e51b3008 	ldr	r3, [fp, #-8]
  107334:	e5933000 	ldr	r3, [r3]
  107338:	e1a02003 	mov	r2, r3
  10733c:	e51b3010 	ldr	r3, [fp, #-16]
  107340:	e1530002 	cmp	r3, r2
  107344:	ba000001 	blt	107350 <sal_get_socket+0x48>
    {
        return RT_NULL;
  107348:	e3a03000 	mov	r3, #0
  10734c:	ea000015 	b	1073a8 <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  107350:	e51b3008 	ldr	r3, [fp, #-8]
  107354:	e5932004 	ldr	r2, [r3, #4]
  107358:	e51b3010 	ldr	r3, [fp, #-16]
  10735c:	e1a03103 	lsl	r3, r3, #2
  107360:	e0823003 	add	r3, r2, r3
  107364:	e5933000 	ldr	r3, [r3]
  107368:	e5933000 	ldr	r3, [r3]
  10736c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107370:	e1530002 	cmp	r3, r2
  107374:	0a000005 	beq	107390 <sal_get_socket+0x88>
  107378:	e300213b 	movw	r2, #315	; 0x13b
  10737c:	e3051e78 	movw	r1, #24184	; 0x5e78
  107380:	e3401014 	movt	r1, #20
  107384:	e3050d50 	movw	r0, #23888	; 0x5d50
  107388:	e3400014 	movt	r0, #20
  10738c:	ebfff081 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107390:	e51b3008 	ldr	r3, [fp, #-8]
  107394:	e5932004 	ldr	r2, [r3, #4]
  107398:	e51b3010 	ldr	r3, [fp, #-16]
  10739c:	e1a03103 	lsl	r3, r3, #2
  1073a0:	e0823003 	add	r3, r2, r3
  1073a4:	e5933000 	ldr	r3, [r3]
}
  1073a8:	e1a00003 	mov	r0, r3
  1073ac:	e24bd004 	sub	sp, fp, #4
  1073b0:	e8bd8800 	pop	{fp, pc}

001073b4 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  1073b4:	e92d4800 	push	{fp, lr}
  1073b8:	e28db004 	add	fp, sp, #4
  1073bc:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  1073c0:	e3e01000 	mvn	r1, #0
  1073c4:	e30d0468 	movw	r0, #54376	; 0xd468
  1073c8:	e3400014 	movt	r0, #20
  1073cc:	ebffe6cb 	bl	100f00 <rt_mutex_take>
  1073d0:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  1073d4:	e51b3008 	ldr	r3, [fp, #-8]
  1073d8:	e3530000 	cmp	r3, #0
  1073dc:	0a000005 	beq	1073f8 <sal_lock+0x44>
    {
        RT_ASSERT(0);
  1073e0:	e3a02f53 	mov	r2, #332	; 0x14c
  1073e4:	e3051e88 	movw	r1, #24200	; 0x5e88
  1073e8:	e3401014 	movt	r1, #20
  1073ec:	e3050d80 	movw	r0, #23936	; 0x5d80
  1073f0:	e3400014 	movt	r0, #20
  1073f4:	ebfff067 	bl	103598 <rt_assert_handler>
    }
}
  1073f8:	e320f000 	nop	{0}
  1073fc:	e24bd004 	sub	sp, fp, #4
  107400:	e8bd8800 	pop	{fp, pc}

00107404 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  107404:	e92d4800 	push	{fp, lr}
  107408:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  10740c:	e30d0468 	movw	r0, #54376	; 0xd468
  107410:	e3400014 	movt	r0, #20
  107414:	ebffe6d7 	bl	100f78 <rt_mutex_release>
}
  107418:	e320f000 	nop	{0}
  10741c:	e8bd8800 	pop	{fp, pc}

00107420 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107420:	e92d4800 	push	{fp, lr}
  107424:	e28db004 	add	fp, sp, #4
  107428:	e24dd010 	sub	sp, sp, #16
  10742c:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  107430:	e3a03000 	mov	r3, #0
  107434:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  107438:	e3a03000 	mov	r3, #0
  10743c:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  107440:	ebffffdb 	bl	1073b4 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107444:	e3a03000 	mov	r3, #0
  107448:	e50b3008 	str	r3, [fp, #-8]
  10744c:	ea000019 	b	1074b8 <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  107450:	e30d3460 	movw	r3, #54368	; 0xd460
  107454:	e3403014 	movt	r3, #20
  107458:	e5932004 	ldr	r2, [r3, #4]
  10745c:	e51b3008 	ldr	r3, [fp, #-8]
  107460:	e1a03103 	lsl	r3, r3, #2
  107464:	e0823003 	add	r3, r2, r3
  107468:	e5933000 	ldr	r3, [r3]
  10746c:	e3530000 	cmp	r3, #0
  107470:	0a00000d 	beq	1074ac <sal_netdev_cleanup+0x8c>
  107474:	e30d3460 	movw	r3, #54368	; 0xd460
  107478:	e3403014 	movt	r3, #20
  10747c:	e5932004 	ldr	r2, [r3, #4]
  107480:	e51b3008 	ldr	r3, [fp, #-8]
  107484:	e1a03103 	lsl	r3, r3, #2
  107488:	e0823003 	add	r3, r2, r3
  10748c:	e5933000 	ldr	r3, [r3]
  107490:	e5933014 	ldr	r3, [r3, #20]
  107494:	e51b2010 	ldr	r2, [fp, #-16]
  107498:	e1520003 	cmp	r2, r3
  10749c:	1a000002 	bne	1074ac <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  1074a0:	e3a03001 	mov	r3, #1
  1074a4:	e50b300c 	str	r3, [fp, #-12]
                break;
  1074a8:	ea000008 	b	1074d0 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  1074ac:	e51b3008 	ldr	r3, [fp, #-8]
  1074b0:	e2833001 	add	r3, r3, #1
  1074b4:	e50b3008 	str	r3, [fp, #-8]
  1074b8:	e30d3460 	movw	r3, #54368	; 0xd460
  1074bc:	e3403014 	movt	r3, #20
  1074c0:	e5932000 	ldr	r2, [r3]
  1074c4:	e51b3008 	ldr	r3, [fp, #-8]
  1074c8:	e1520003 	cmp	r2, r3
  1074cc:	8affffdf 	bhi	107450 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  1074d0:	ebffffcb 	bl	107404 <sal_unlock>
        if (find_dev)
  1074d4:	e51b300c 	ldr	r3, [fp, #-12]
  1074d8:	e3530000 	cmp	r3, #0
  1074dc:	0a000001 	beq	1074e8 <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  1074e0:	e3a00064 	mov	r0, #100	; 0x64
  1074e4:	ebffea64 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  1074e8:	e51b300c 	ldr	r3, [fp, #-12]
  1074ec:	e3530000 	cmp	r3, #0
  1074f0:	1affffd0 	bne	107438 <sal_netdev_cleanup+0x18>

    return 0;
  1074f4:	e3a03000 	mov	r3, #0
}
  1074f8:	e1a00003 	mov	r0, r3
  1074fc:	e24bd004 	sub	sp, fp, #4
  107500:	e8bd8800 	pop	{fp, pc}

00107504 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  107504:	e92d4800 	push	{fp, lr}
  107508:	e28db004 	add	fp, sp, #4
  10750c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107510:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107514:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107518:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10751c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107520:	e30f355c 	movw	r3, #62812	; 0xf55c
  107524:	e3403014 	movt	r3, #20
  107528:	e5933000 	ldr	r3, [r3]
  10752c:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  107530:	e3a03000 	mov	r3, #0
  107534:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  107538:	e3a03000 	mov	r3, #0
  10753c:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  107540:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107544:	e3530000 	cmp	r3, #0
  107548:	ba000002 	blt	107558 <socket_init+0x54>
  10754c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107550:	e353002f 	cmp	r3, #47	; 0x2f
  107554:	da000001 	ble	107560 <socket_init+0x5c>
    {
        return -1;
  107558:	e3e03000 	mvn	r3, #0
  10755c:	ea000050 	b	1076a4 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  107560:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107564:	e3530000 	cmp	r3, #0
  107568:	ba000004 	blt	107580 <socket_init+0x7c>
  10756c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107570:	e3a03001 	mov	r3, #1
  107574:	e3403008 	movt	r3, #8
  107578:	e1520003 	cmp	r2, r3
  10757c:	da000001 	ble	107588 <socket_init+0x84>
    {
        return -2;
  107580:	e3e03001 	mvn	r3, #1
  107584:	ea000046 	b	1076a4 <socket_init+0x1a0>
    }

    sock = *res;
  107588:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10758c:	e5933000 	ldr	r3, [r3]
  107590:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107598:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10759c:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  1075a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1075a4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1075a8:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  1075ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1075b0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1075b4:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  1075b8:	e51b300c 	ldr	r3, [fp, #-12]
  1075bc:	e3530000 	cmp	r3, #0
  1075c0:	0a00001e 	beq	107640 <socket_init+0x13c>
  1075c4:	e51b300c 	ldr	r3, [fp, #-12]
  1075c8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1075cc:	e2033001 	and	r3, r3, #1
  1075d0:	e6ef3073 	uxtb	r3, r3
  1075d4:	e3530000 	cmp	r3, #0
  1075d8:	0a000018 	beq	107640 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  1075dc:	e51b300c 	ldr	r3, [fp, #-12]
  1075e0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1075e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  1075e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075ec:	e3530000 	cmp	r3, #0
  1075f0:	0a000012 	beq	107640 <socket_init+0x13c>
  1075f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075f8:	e5933008 	ldr	r3, [r3, #8]
  1075fc:	e3530000 	cmp	r3, #0
  107600:	0a00000e 	beq	107640 <socket_init+0x13c>
  107604:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107608:	e5933000 	ldr	r3, [r3]
  10760c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107610:	e1520003 	cmp	r2, r3
  107614:	0a000004 	beq	10762c <socket_init+0x128>
  107618:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10761c:	e5933004 	ldr	r3, [r3, #4]
  107620:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107624:	e1520003 	cmp	r2, r3
  107628:	1a000004 	bne	107640 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  10762c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107630:	e51b200c 	ldr	r2, [fp, #-12]
  107634:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  107638:	e3a03001 	mov	r3, #1
  10763c:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  107640:	e51b3008 	ldr	r3, [fp, #-8]
  107644:	e3530000 	cmp	r3, #0
  107648:	1a000014 	bne	1076a0 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  10764c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107650:	ebfff7e1 	bl	1055dc <netdev_get_by_family>
  107654:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  107658:	e51b3010 	ldr	r3, [fp, #-16]
  10765c:	e3530000 	cmp	r3, #0
  107660:	1a00000b 	bne	107694 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  107664:	e3050c70 	movw	r0, #23664	; 0x5c70
  107668:	e3400014 	movt	r0, #20
  10766c:	ebffeea8 	bl	103114 <rt_kprintf>
  107670:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107674:	e3050d84 	movw	r0, #23940	; 0x5d84
  107678:	e3400014 	movt	r0, #20
  10767c:	ebffeea4 	bl	103114 <rt_kprintf>
  107680:	e3050ca4 	movw	r0, #23716	; 0x5ca4
  107684:	e3400014 	movt	r0, #20
  107688:	ebffeea1 	bl	103114 <rt_kprintf>
            return -3;
  10768c:	e3e03002 	mvn	r3, #2
  107690:	ea000003 	b	1076a4 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107698:	e51b2010 	ldr	r2, [fp, #-16]
  10769c:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  1076a0:	e3a03000 	mov	r3, #0
}
  1076a4:	e1a00003 	mov	r0, r3
  1076a8:	e24bd004 	sub	sp, fp, #4
  1076ac:	e8bd8800 	pop	{fp, pc}

001076b0 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  1076b0:	e92d4810 	push	{r4, fp, lr}
  1076b4:	e28db008 	add	fp, sp, #8
  1076b8:	e24dd01c 	sub	sp, sp, #28
  1076bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1076c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1076c8:	e50b3010 	str	r3, [fp, #-16]
  1076cc:	ea00000a 	b	1076fc <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  1076d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076d4:	e5932004 	ldr	r2, [r3, #4]
  1076d8:	e51b3010 	ldr	r3, [fp, #-16]
  1076dc:	e1a03103 	lsl	r3, r3, #2
  1076e0:	e0823003 	add	r3, r2, r3
  1076e4:	e5933000 	ldr	r3, [r3]
  1076e8:	e3530000 	cmp	r3, #0
  1076ec:	0a000009 	beq	107718 <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076f0:	e51b3010 	ldr	r3, [fp, #-16]
  1076f4:	e2833001 	add	r3, r3, #1
  1076f8:	e50b3010 	str	r3, [fp, #-16]
  1076fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107700:	e5933000 	ldr	r3, [r3]
  107704:	e1a02003 	mov	r2, r3
  107708:	e51b3010 	ldr	r3, [fp, #-16]
  10770c:	e1530002 	cmp	r3, r2
  107710:	baffffee 	blt	1076d0 <socket_alloc+0x20>
  107714:	ea000000 	b	10771c <socket_alloc+0x6c>
        {
            break;
  107718:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  10771c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107720:	e5933000 	ldr	r3, [r3]
  107724:	e1a02003 	mov	r2, r3
  107728:	e51b3010 	ldr	r3, [fp, #-16]
  10772c:	e1530002 	cmp	r3, r2
  107730:	1a00002e 	bne	1077f0 <socket_alloc+0x140>
  107734:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107738:	e5933000 	ldr	r3, [r3]
  10773c:	e353001f 	cmp	r3, #31
  107740:	8a00002a 	bhi	1077f0 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  107744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107748:	e5933000 	ldr	r3, [r3]
  10774c:	e2833004 	add	r3, r3, #4
  107750:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  107754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107758:	e3530020 	cmp	r3, #32
  10775c:	b1a03003 	movlt	r3, r3
  107760:	a3a03020 	movge	r3, #32
  107764:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  107768:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10776c:	e5932004 	ldr	r2, [r3, #4]
  107770:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107774:	e1a03103 	lsl	r3, r3, #2
  107778:	e1a01003 	mov	r1, r3
  10777c:	e1a00002 	mov	r0, r2
  107780:	ebffee15 	bl	102fdc <rt_realloc>
  107784:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  107788:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10778c:	e3530000 	cmp	r3, #0
  107790:	0a00003a 	beq	107880 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107794:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107798:	e5933000 	ldr	r3, [r3]
  10779c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077a0:	ea000008 	b	1077c8 <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  1077a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077a8:	e1a03103 	lsl	r3, r3, #2
  1077ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077b0:	e0823003 	add	r3, r2, r3
  1077b4:	e3a02000 	mov	r2, #0
  1077b8:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  1077bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077c0:	e2833001 	add	r3, r3, #1
  1077c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077c8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1077cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077d0:	e1520003 	cmp	r2, r3
  1077d4:	bafffff2 	blt	1077a4 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  1077d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077e0:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  1077e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1077e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077ec:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  1077f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077f4:	e5933000 	ldr	r3, [r3]
  1077f8:	e1a02003 	mov	r2, r3
  1077fc:	e51b3010 	ldr	r3, [fp, #-16]
  107800:	e1530002 	cmp	r3, r2
  107804:	aa00001f 	bge	107888 <socket_alloc+0x1d8>
  107808:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10780c:	e5932004 	ldr	r2, [r3, #4]
  107810:	e51b3010 	ldr	r3, [fp, #-16]
  107814:	e1a03103 	lsl	r3, r3, #2
  107818:	e0823003 	add	r3, r2, r3
  10781c:	e5933000 	ldr	r3, [r3]
  107820:	e3530000 	cmp	r3, #0
  107824:	1a000017 	bne	107888 <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  107828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10782c:	e5932004 	ldr	r2, [r3, #4]
  107830:	e51b3010 	ldr	r3, [fp, #-16]
  107834:	e1a03103 	lsl	r3, r3, #2
  107838:	e0824003 	add	r4, r2, r3
  10783c:	e3a0101c 	mov	r1, #28
  107840:	e3a00001 	mov	r0, #1
  107844:	ebffedf0 	bl	10300c <rt_calloc>
  107848:	e1a03000 	mov	r3, r0
  10784c:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  107850:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107854:	e5932004 	ldr	r2, [r3, #4]
  107858:	e51b3010 	ldr	r3, [fp, #-16]
  10785c:	e1a03103 	lsl	r3, r3, #2
  107860:	e0823003 	add	r3, r2, r3
  107864:	e5933000 	ldr	r3, [r3]
  107868:	e3530000 	cmp	r3, #0
  10786c:	1a000005 	bne	107888 <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107870:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107874:	e5933000 	ldr	r3, [r3]
  107878:	e50b3010 	str	r3, [fp, #-16]
  10787c:	ea000002 	b	10788c <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107880:	e320f000 	nop	{0}
  107884:	ea000000 	b	10788c <socket_alloc+0x1dc>
        }
    }

__result:
  107888:	e320f000 	nop	{0}
    return idx;
  10788c:	e51b3010 	ldr	r3, [fp, #-16]
}
  107890:	e1a00003 	mov	r0, r3
  107894:	e24bd008 	sub	sp, fp, #8
  107898:	e8bd8810 	pop	{r4, fp, pc}

0010789c <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  10789c:	e92d4800 	push	{fp, lr}
  1078a0:	e28db004 	add	fp, sp, #4
  1078a4:	e24dd010 	sub	sp, sp, #16
  1078a8:	e50b0010 	str	r0, [fp, #-16]
  1078ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  1078b0:	e51b3010 	ldr	r3, [fp, #-16]
  1078b4:	e5932004 	ldr	r2, [r3, #4]
  1078b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078bc:	e1a03103 	lsl	r3, r3, #2
  1078c0:	e0823003 	add	r3, r2, r3
  1078c4:	e5933000 	ldr	r3, [r3]
  1078c8:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  1078cc:	e51b3010 	ldr	r3, [fp, #-16]
  1078d0:	e5932004 	ldr	r2, [r3, #4]
  1078d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078d8:	e1a03103 	lsl	r3, r3, #2
  1078dc:	e0823003 	add	r3, r2, r3
  1078e0:	e3a02000 	mov	r2, #0
  1078e4:	e5832000 	str	r2, [r3]
    rt_free(sock);
  1078e8:	e51b0008 	ldr	r0, [fp, #-8]
  1078ec:	ebffedb2 	bl	102fbc <rt_free>
}
  1078f0:	e320f000 	nop	{0}
  1078f4:	e24bd004 	sub	sp, fp, #4
  1078f8:	e8bd8800 	pop	{fp, pc}

001078fc <socket_new>:

static int socket_new(void)
{
  1078fc:	e92d4800 	push	{fp, lr}
  107900:	e28db004 	add	fp, sp, #4
  107904:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  107908:	e30d3460 	movw	r3, #54368	; 0xd460
  10790c:	e3403014 	movt	r3, #20
  107910:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  107914:	ebfffea6 	bl	1073b4 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  107918:	e3a01000 	mov	r1, #0
  10791c:	e51b000c 	ldr	r0, [fp, #-12]
  107920:	ebffff62 	bl	1076b0 <socket_alloc>
  107924:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  107928:	e51b300c 	ldr	r3, [fp, #-12]
  10792c:	e5933000 	ldr	r3, [r3]
  107930:	e1a02003 	mov	r2, r3
  107934:	e51b3008 	ldr	r3, [fp, #-8]
  107938:	e1530002 	cmp	r3, r2
  10793c:	1a000002 	bne	10794c <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  107940:	e3e03000 	mvn	r3, #0
  107944:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  107948:	ea000012 	b	107998 <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  10794c:	e51b300c 	ldr	r3, [fp, #-12]
  107950:	e5932004 	ldr	r2, [r3, #4]
  107954:	e51b3008 	ldr	r3, [fp, #-8]
  107958:	e1a03103 	lsl	r3, r3, #2
  10795c:	e0823003 	add	r3, r2, r3
  107960:	e5933000 	ldr	r3, [r3]
  107964:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  107968:	e51b3010 	ldr	r3, [fp, #-16]
  10796c:	e51b2008 	ldr	r2, [fp, #-8]
  107970:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107974:	e51b3010 	ldr	r3, [fp, #-16]
  107978:	e3052a10 	movw	r2, #23056	; 0x5a10
  10797c:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107980:	e51b3010 	ldr	r3, [fp, #-16]
  107984:	e3a02000 	mov	r2, #0
  107988:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  10798c:	e51b3010 	ldr	r3, [fp, #-16]
  107990:	e3a02000 	mov	r2, #0
  107994:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  107998:	ebfffe99 	bl	107404 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  10799c:	e51b3008 	ldr	r3, [fp, #-8]
}
  1079a0:	e1a00003 	mov	r0, r3
  1079a4:	e24bd004 	sub	sp, fp, #4
  1079a8:	e8bd8800 	pop	{fp, pc}

001079ac <socket_delete>:

static void socket_delete(int socket)
{
  1079ac:	e92d4800 	push	{fp, lr}
  1079b0:	e28db004 	add	fp, sp, #4
  1079b4:	e24dd018 	sub	sp, sp, #24
  1079b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1079bc:	e30d3460 	movw	r3, #54368	; 0xd460
  1079c0:	e3403014 	movt	r3, #20
  1079c4:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  1079c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1079cc:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  1079d0:	e51b300c 	ldr	r3, [fp, #-12]
  1079d4:	e3530000 	cmp	r3, #0
  1079d8:	ba00001d 	blt	107a54 <socket_delete+0xa8>
  1079dc:	e51b3008 	ldr	r3, [fp, #-8]
  1079e0:	e5933000 	ldr	r3, [r3]
  1079e4:	e1a02003 	mov	r2, r3
  1079e8:	e51b300c 	ldr	r3, [fp, #-12]
  1079ec:	e1530002 	cmp	r3, r2
  1079f0:	aa000017 	bge	107a54 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  1079f4:	ebfffe6e 	bl	1073b4 <sal_lock>
    sock = sal_get_socket(socket);
  1079f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1079fc:	ebfffe41 	bl	107308 <sal_get_socket>
  107a00:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  107a04:	e51b3010 	ldr	r3, [fp, #-16]
  107a08:	e3530000 	cmp	r3, #0
  107a0c:	1a000005 	bne	107a28 <socket_delete+0x7c>
  107a10:	e3002223 	movw	r2, #547	; 0x223
  107a14:	e3051e94 	movw	r1, #24212	; 0x5e94
  107a18:	e3401014 	movt	r1, #20
  107a1c:	e3050dc0 	movw	r0, #24000	; 0x5dc0
  107a20:	e3400014 	movt	r0, #20
  107a24:	ebffeedb 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a28:	e51b3010 	ldr	r3, [fp, #-16]
  107a2c:	e3a02000 	mov	r2, #0
  107a30:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107a34:	e51b3010 	ldr	r3, [fp, #-16]
  107a38:	e3a02000 	mov	r2, #0
  107a3c:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107a40:	e51b100c 	ldr	r1, [fp, #-12]
  107a44:	e51b0008 	ldr	r0, [fp, #-8]
  107a48:	ebffff93 	bl	10789c <socket_free>
    sal_unlock();
  107a4c:	ebfffe6c 	bl	107404 <sal_unlock>
  107a50:	ea000000 	b	107a58 <socket_delete+0xac>
        return;
  107a54:	e320f000 	nop	{0}
}
  107a58:	e24bd004 	sub	sp, fp, #4
  107a5c:	e8bd8800 	pop	{fp, pc}

00107a60 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107a60:	e92d4800 	push	{fp, lr}
  107a64:	e28db004 	add	fp, sp, #4
  107a68:	e24dd028 	sub	sp, sp, #40	; 0x28
  107a6c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107a70:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107a74:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a78:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107a7c:	ebfffe21 	bl	107308 <sal_get_socket>
  107a80:	e50b0008 	str	r0, [fp, #-8]
  107a84:	e51b3008 	ldr	r3, [fp, #-8]
  107a88:	e3530000 	cmp	r3, #0
  107a8c:	1a000001 	bne	107a98 <sal_accept+0x38>
  107a90:	e3e03000 	mvn	r3, #0
  107a94:	ea000059 	b	107c00 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107a98:	e51b3008 	ldr	r3, [fp, #-8]
  107a9c:	e5933014 	ldr	r3, [r3, #20]
  107aa0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107aa4:	e2033001 	and	r3, r3, #1
  107aa8:	e3530000 	cmp	r3, #0
  107aac:	1a000001 	bne	107ab8 <sal_accept+0x58>
  107ab0:	e3e03000 	mvn	r3, #0
  107ab4:	ea000051 	b	107c00 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107ab8:	e51b3008 	ldr	r3, [fp, #-8]
  107abc:	e5933014 	ldr	r3, [r3, #20]
  107ac0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107ac4:	e50b300c 	str	r3, [fp, #-12]
  107ac8:	e51b300c 	ldr	r3, [fp, #-12]
  107acc:	e5933008 	ldr	r3, [r3, #8]
  107ad0:	e5933014 	ldr	r3, [r3, #20]
  107ad4:	e3530000 	cmp	r3, #0
  107ad8:	1a000001 	bne	107ae4 <sal_accept+0x84>
  107adc:	e3e03000 	mvn	r3, #0
  107ae0:	ea000046 	b	107c00 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107ae4:	e51b300c 	ldr	r3, [fp, #-12]
  107ae8:	e5933008 	ldr	r3, [r3, #8]
  107aec:	e5933014 	ldr	r3, [r3, #20]
  107af0:	e51b2008 	ldr	r2, [fp, #-8]
  107af4:	e5922018 	ldr	r2, [r2, #24]
  107af8:	e1a00002 	mov	r0, r2
  107afc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107b00:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107b04:	e12fff33 	blx	r3
  107b08:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107b0c:	e51b3010 	ldr	r3, [fp, #-16]
  107b10:	e3730001 	cmn	r3, #1
  107b14:	0a000038 	beq	107bfc <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107b18:	ebffff77 	bl	1078fc <socket_new>
  107b1c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b20:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b24:	ebfffdf7 	bl	107308 <sal_get_socket>
  107b28:	e1a03000 	mov	r3, r0
  107b2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107b30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b34:	e3530000 	cmp	r3, #0
  107b38:	1a000006 	bne	107b58 <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107b3c:	e51b300c 	ldr	r3, [fp, #-12]
  107b40:	e5933008 	ldr	r3, [r3, #8]
  107b44:	e5933004 	ldr	r3, [r3, #4]
  107b48:	e51b0010 	ldr	r0, [fp, #-16]
  107b4c:	e12fff33 	blx	r3
            return -1;
  107b50:	e3e03000 	mvn	r3, #0
  107b54:	ea000029 	b	107c00 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107b58:	e51b3008 	ldr	r3, [fp, #-8]
  107b5c:	e5930008 	ldr	r0, [r3, #8]
  107b60:	e51b3008 	ldr	r3, [fp, #-8]
  107b64:	e593100c 	ldr	r1, [r3, #12]
  107b68:	e51b3008 	ldr	r3, [fp, #-8]
  107b6c:	e5932010 	ldr	r2, [r3, #16]
  107b70:	e24b301c 	sub	r3, fp, #28
  107b74:	ebfffe62 	bl	107504 <socket_init>
  107b78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107b80:	e3530000 	cmp	r3, #0
  107b84:	aa000017 	bge	107be8 <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107b88:	e51b300c 	ldr	r3, [fp, #-12]
  107b8c:	e5933008 	ldr	r3, [r3, #8]
  107b90:	e5933004 	ldr	r3, [r3, #4]
  107b94:	e51b0010 	ldr	r0, [fp, #-16]
  107b98:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107b9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107ba0:	e3a0201c 	mov	r2, #28
  107ba4:	e3a01000 	mov	r1, #0
  107ba8:	e1a00003 	mov	r0, r3
  107bac:	ebffedc5 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107bb0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107bb4:	ebffff7c 	bl	1079ac <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107bb8:	e3050c70 	movw	r0, #23664	; 0x5c70
  107bbc:	e3400014 	movt	r0, #20
  107bc0:	ebffed53 	bl	103114 <rt_kprintf>
  107bc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107bc8:	e3050dd0 	movw	r0, #24016	; 0x5dd0
  107bcc:	e3400014 	movt	r0, #20
  107bd0:	ebffed4f 	bl	103114 <rt_kprintf>
  107bd4:	e3050ca4 	movw	r0, #23716	; 0x5ca4
  107bd8:	e3400014 	movt	r0, #20
  107bdc:	ebffed4c 	bl	103114 <rt_kprintf>
            return -1;
  107be0:	e3e03000 	mvn	r3, #0
  107be4:	ea000005 	b	107c00 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107be8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107bec:	e51b2010 	ldr	r2, [fp, #-16]
  107bf0:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bf8:	ea000000 	b	107c00 <sal_accept+0x1a0>
    }

    return -1;
  107bfc:	e3e03000 	mvn	r3, #0
}
  107c00:	e1a00003 	mov	r0, r3
  107c04:	e24bd004 	sub	sp, fp, #4
  107c08:	e8bd8800 	pop	{fp, pc}

00107c0c <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107c0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107c10:	e28db000 	add	fp, sp, #0
  107c14:	e24dd014 	sub	sp, sp, #20
  107c18:	e50b0010 	str	r0, [fp, #-16]
  107c1c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c20:	e51b3010 	ldr	r3, [fp, #-16]
  107c24:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c28:	e51b3008 	ldr	r3, [fp, #-8]
  107c2c:	e5932004 	ldr	r2, [r3, #4]
  107c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c34:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107c38:	e320f000 	nop	{0}
  107c3c:	e28bd000 	add	sp, fp, #0
  107c40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107c44:	e12fff1e 	bx	lr

00107c48 <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c48:	e92d4800 	push	{fp, lr}
  107c4c:	e28db004 	add	fp, sp, #4
  107c50:	e24dd030 	sub	sp, sp, #48	; 0x30
  107c54:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107c58:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107c5c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107c60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c64:	e3530000 	cmp	r3, #0
  107c68:	1a000005 	bne	107c84 <sal_bind+0x3c>
  107c6c:	e3002271 	movw	r2, #625	; 0x271
  107c70:	e3051ea4 	movw	r1, #24228	; 0x5ea4
  107c74:	e3401014 	movt	r1, #20
  107c78:	e3050e00 	movw	r0, #24064	; 0x5e00
  107c7c:	e3400014 	movt	r0, #20
  107c80:	ebffee44 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c84:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107c88:	ebfffd9e 	bl	107308 <sal_get_socket>
  107c8c:	e50b0008 	str	r0, [fp, #-8]
  107c90:	e51b3008 	ldr	r3, [fp, #-8]
  107c94:	e3530000 	cmp	r3, #0
  107c98:	1a000001 	bne	107ca4 <sal_bind+0x5c>
  107c9c:	e3e03000 	mvn	r3, #0
  107ca0:	ea00006e 	b	107e60 <sal_bind+0x218>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107ca4:	e24b3020 	sub	r3, fp, #32
  107ca8:	e1a01003 	mov	r1, r3
  107cac:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107cb0:	ebffffd5 	bl	107c0c <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107cb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107cb8:	e3530000 	cmp	r3, #0
  107cbc:	0a000052 	beq	107e0c <sal_bind+0x1c4>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107cc0:	e3a03000 	mov	r3, #0
  107cc4:	e50b300c 	str	r3, [fp, #-12]
  107cc8:	e3a03000 	mov	r3, #0
  107ccc:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107cd0:	e3a03000 	mov	r3, #0
  107cd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107cd8:	e24b3020 	sub	r3, fp, #32
  107cdc:	e1a00003 	mov	r0, r3
  107ce0:	ebfff5df 	bl	105464 <netdev_get_by_ipaddr>
  107ce4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107ce8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107cec:	e3530000 	cmp	r3, #0
  107cf0:	1a000007 	bne	107d14 <sal_bind+0xcc>
        {
            printf("****%s %d\n", __FILE__, __LINE__);
  107cf4:	e3002282 	movw	r2, #642	; 0x282
  107cf8:	e3051e08 	movw	r1, #24072	; 0x5e08
  107cfc:	e3401014 	movt	r1, #20
  107d00:	e3050e30 	movw	r0, #24112	; 0x5e30
  107d04:	e3400014 	movt	r0, #20
  107d08:	eb00d966 	bl	13e2a8 <printf>
            return -1;
  107d0c:	e3e03000 	mvn	r3, #0
  107d10:	ea000052 	b	107e60 <sal_bind+0x218>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107d14:	e51b3008 	ldr	r3, [fp, #-8]
  107d18:	e5933014 	ldr	r3, [r3, #20]
  107d1c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d20:	e50b3010 	str	r3, [fp, #-16]
  107d24:	e51b3010 	ldr	r3, [fp, #-16]
  107d28:	e5933008 	ldr	r3, [r3, #8]
  107d2c:	e5933008 	ldr	r3, [r3, #8]
  107d30:	e3530000 	cmp	r3, #0
  107d34:	1a000001 	bne	107d40 <sal_bind+0xf8>
  107d38:	e3e03000 	mvn	r3, #0
  107d3c:	ea000047 	b	107e60 <sal_bind+0x218>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d44:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d48:	e50b300c 	str	r3, [fp, #-12]
  107d4c:	e51b300c 	ldr	r3, [fp, #-12]
  107d50:	e5933008 	ldr	r3, [r3, #8]
  107d54:	e5933008 	ldr	r3, [r3, #8]
  107d58:	e3530000 	cmp	r3, #0
  107d5c:	1a000001 	bne	107d68 <sal_bind+0x120>
  107d60:	e3e03000 	mvn	r3, #0
  107d64:	ea00003d 	b	107e60 <sal_bind+0x218>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107d68:	e51b300c 	ldr	r3, [fp, #-12]
  107d6c:	e5932000 	ldr	r2, [r3]
  107d70:	e51b3010 	ldr	r3, [fp, #-16]
  107d74:	e5933000 	ldr	r3, [r3]
  107d78:	e1520003 	cmp	r2, r3
  107d7c:	0a000022 	beq	107e0c <sal_bind+0x1c4>
        {
            int new_socket = -1;
  107d80:	e3e03000 	mvn	r3, #0
  107d84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107d88:	e51b3010 	ldr	r3, [fp, #-16]
  107d8c:	e5933008 	ldr	r3, [r3, #8]
  107d90:	e5933004 	ldr	r3, [r3, #4]
  107d94:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107d98:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107d9c:	e51b300c 	ldr	r3, [fp, #-12]
  107da0:	e5933008 	ldr	r3, [r3, #8]
  107da4:	e5933000 	ldr	r3, [r3]
  107da8:	e51b200c 	ldr	r2, [fp, #-12]
  107dac:	e5920000 	ldr	r0, [r2]
  107db0:	e51b2008 	ldr	r2, [fp, #-8]
  107db4:	e592100c 	ldr	r1, [r2, #12]
  107db8:	e51b2008 	ldr	r2, [fp, #-8]
  107dbc:	e5922010 	ldr	r2, [r2, #16]
  107dc0:	e12fff33 	blx	r3
  107dc4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107dc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107dcc:	e3530000 	cmp	r3, #0
  107dd0:	aa000007 	bge	107df4 <sal_bind+0x1ac>
            {
                printf("****%s %d\n", __FILE__, __LINE__);
  107dd4:	e3002295 	movw	r2, #661	; 0x295
  107dd8:	e3051e08 	movw	r1, #24072	; 0x5e08
  107ddc:	e3401014 	movt	r1, #20
  107de0:	e3050e30 	movw	r0, #24112	; 0x5e30
  107de4:	e3400014 	movt	r0, #20
  107de8:	eb00d92e 	bl	13e2a8 <printf>
                return -1;
  107dec:	e3e03000 	mvn	r3, #0
  107df0:	ea00001a 	b	107e60 <sal_bind+0x218>
            }
            sock->netdev = new_netdev;
  107df4:	e51b3008 	ldr	r3, [fp, #-8]
  107df8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107dfc:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107e00:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107e04:	e51b3008 	ldr	r3, [fp, #-8]
  107e08:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107e0c:	e51b3008 	ldr	r3, [fp, #-8]
  107e10:	e5933014 	ldr	r3, [r3, #20]
  107e14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107e1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107e20:	e5933008 	ldr	r3, [r3, #8]
  107e24:	e5933008 	ldr	r3, [r3, #8]
  107e28:	e3530000 	cmp	r3, #0
  107e2c:	1a000001 	bne	107e38 <sal_bind+0x1f0>
  107e30:	e3e03000 	mvn	r3, #0
  107e34:	ea000009 	b	107e60 <sal_bind+0x218>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107e38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107e3c:	e5933008 	ldr	r3, [r3, #8]
  107e40:	e5933008 	ldr	r3, [r3, #8]
  107e44:	e51b2008 	ldr	r2, [fp, #-8]
  107e48:	e5922018 	ldr	r2, [r2, #24]
  107e4c:	e1a00002 	mov	r0, r2
  107e50:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107e54:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107e58:	e12fff33 	blx	r3
  107e5c:	e1a03000 	mov	r3, r0
}
  107e60:	e1a00003 	mov	r0, r3
  107e64:	e24bd004 	sub	sp, fp, #4
  107e68:	e8bd8800 	pop	{fp, pc}

00107e6c <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107e6c:	e92d4800 	push	{fp, lr}
  107e70:	e28db004 	add	fp, sp, #4
  107e74:	e24dd018 	sub	sp, sp, #24
  107e78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e7c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107e80:	e3a03000 	mov	r3, #0
  107e84:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e8c:	ebfffd1d 	bl	107308 <sal_get_socket>
  107e90:	e50b000c 	str	r0, [fp, #-12]
  107e94:	e51b300c 	ldr	r3, [fp, #-12]
  107e98:	e3530000 	cmp	r3, #0
  107e9c:	1a000001 	bne	107ea8 <sal_shutdown+0x3c>
  107ea0:	e3e03000 	mvn	r3, #0
  107ea4:	ea00001b 	b	107f18 <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107ea8:	e51b300c 	ldr	r3, [fp, #-12]
  107eac:	e5933014 	ldr	r3, [r3, #20]
  107eb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107eb4:	e50b3010 	str	r3, [fp, #-16]
  107eb8:	e51b3010 	ldr	r3, [fp, #-16]
  107ebc:	e5933008 	ldr	r3, [r3, #8]
  107ec0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107ec4:	e3530000 	cmp	r3, #0
  107ec8:	1a000001 	bne	107ed4 <sal_shutdown+0x68>
  107ecc:	e3e03000 	mvn	r3, #0
  107ed0:	ea000010 	b	107f18 <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107ed4:	e51b3010 	ldr	r3, [fp, #-16]
  107ed8:	e5933008 	ldr	r3, [r3, #8]
  107edc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107ee0:	e51b200c 	ldr	r2, [fp, #-12]
  107ee4:	e5922018 	ldr	r2, [r2, #24]
  107ee8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107eec:	e1a00002 	mov	r0, r2
  107ef0:	e12fff33 	blx	r3
  107ef4:	e1a03000 	mov	r3, r0
  107ef8:	e3530000 	cmp	r3, #0
  107efc:	1a000002 	bne	107f0c <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107f00:	e3a03000 	mov	r3, #0
  107f04:	e50b3008 	str	r3, [fp, #-8]
  107f08:	ea000001 	b	107f14 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107f0c:	e3e03000 	mvn	r3, #0
  107f10:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107f14:	e51b3008 	ldr	r3, [fp, #-8]
}
  107f18:	e1a00003 	mov	r0, r3
  107f1c:	e24bd004 	sub	sp, fp, #4
  107f20:	e8bd8800 	pop	{fp, pc}

00107f24 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f24:	e92d4800 	push	{fp, lr}
  107f28:	e28db004 	add	fp, sp, #4
  107f2c:	e24dd018 	sub	sp, sp, #24
  107f30:	e50b0010 	str	r0, [fp, #-16]
  107f34:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107f38:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107f3c:	e51b0010 	ldr	r0, [fp, #-16]
  107f40:	ebfffcf0 	bl	107308 <sal_get_socket>
  107f44:	e50b0008 	str	r0, [fp, #-8]
  107f48:	e51b3008 	ldr	r3, [fp, #-8]
  107f4c:	e3530000 	cmp	r3, #0
  107f50:	1a000001 	bne	107f5c <sal_getpeername+0x38>
  107f54:	e3e03000 	mvn	r3, #0
  107f58:	ea000014 	b	107fb0 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107f5c:	e51b3008 	ldr	r3, [fp, #-8]
  107f60:	e5933014 	ldr	r3, [r3, #20]
  107f64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f68:	e50b300c 	str	r3, [fp, #-12]
  107f6c:	e51b300c 	ldr	r3, [fp, #-12]
  107f70:	e5933008 	ldr	r3, [r3, #8]
  107f74:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f78:	e3530000 	cmp	r3, #0
  107f7c:	1a000001 	bne	107f88 <sal_getpeername+0x64>
  107f80:	e3e03000 	mvn	r3, #0
  107f84:	ea000009 	b	107fb0 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107f88:	e51b300c 	ldr	r3, [fp, #-12]
  107f8c:	e5933008 	ldr	r3, [r3, #8]
  107f90:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f94:	e51b2008 	ldr	r2, [fp, #-8]
  107f98:	e5922018 	ldr	r2, [r2, #24]
  107f9c:	e1a00002 	mov	r0, r2
  107fa0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107fa4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107fa8:	e12fff33 	blx	r3
  107fac:	e1a03000 	mov	r3, r0
}
  107fb0:	e1a00003 	mov	r0, r3
  107fb4:	e24bd004 	sub	sp, fp, #4
  107fb8:	e8bd8800 	pop	{fp, pc}

00107fbc <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107fbc:	e92d4800 	push	{fp, lr}
  107fc0:	e28db004 	add	fp, sp, #4
  107fc4:	e24dd018 	sub	sp, sp, #24
  107fc8:	e50b0010 	str	r0, [fp, #-16]
  107fcc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107fd0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107fd4:	e51b0010 	ldr	r0, [fp, #-16]
  107fd8:	ebfffcca 	bl	107308 <sal_get_socket>
  107fdc:	e50b0008 	str	r0, [fp, #-8]
  107fe0:	e51b3008 	ldr	r3, [fp, #-8]
  107fe4:	e3530000 	cmp	r3, #0
  107fe8:	1a000001 	bne	107ff4 <sal_getsockname+0x38>
  107fec:	e3e03000 	mvn	r3, #0
  107ff0:	ea000014 	b	108048 <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107ff4:	e51b3008 	ldr	r3, [fp, #-8]
  107ff8:	e5933014 	ldr	r3, [r3, #20]
  107ffc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108000:	e50b300c 	str	r3, [fp, #-12]
  108004:	e51b300c 	ldr	r3, [fp, #-12]
  108008:	e5933008 	ldr	r3, [r3, #8]
  10800c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  108010:	e3530000 	cmp	r3, #0
  108014:	1a000001 	bne	108020 <sal_getsockname+0x64>
  108018:	e3e03000 	mvn	r3, #0
  10801c:	ea000009 	b	108048 <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  108020:	e51b300c 	ldr	r3, [fp, #-12]
  108024:	e5933008 	ldr	r3, [r3, #8]
  108028:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10802c:	e51b2008 	ldr	r2, [fp, #-8]
  108030:	e5922018 	ldr	r2, [r2, #24]
  108034:	e1a00002 	mov	r0, r2
  108038:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10803c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108040:	e12fff33 	blx	r3
  108044:	e1a03000 	mov	r3, r0
}
  108048:	e1a00003 	mov	r0, r3
  10804c:	e24bd004 	sub	sp, fp, #4
  108050:	e8bd8800 	pop	{fp, pc}

00108054 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108054:	e92d4810 	push	{r4, fp, lr}
  108058:	e28db008 	add	fp, sp, #8
  10805c:	e24dd024 	sub	sp, sp, #36	; 0x24
  108060:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108064:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108068:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10806c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108070:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108074:	ebfffca3 	bl	107308 <sal_get_socket>
  108078:	e50b0010 	str	r0, [fp, #-16]
  10807c:	e51b3010 	ldr	r3, [fp, #-16]
  108080:	e3530000 	cmp	r3, #0
  108084:	1a000001 	bne	108090 <sal_getsockopt+0x3c>
  108088:	e3e03000 	mvn	r3, #0
  10808c:	ea000017 	b	1080f0 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108090:	e51b3010 	ldr	r3, [fp, #-16]
  108094:	e5933014 	ldr	r3, [r3, #20]
  108098:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10809c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1080a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1080a4:	e5933008 	ldr	r3, [r3, #8]
  1080a8:	e5933020 	ldr	r3, [r3, #32]
  1080ac:	e3530000 	cmp	r3, #0
  1080b0:	1a000001 	bne	1080bc <sal_getsockopt+0x68>
  1080b4:	e3e03000 	mvn	r3, #0
  1080b8:	ea00000c 	b	1080f0 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  1080bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1080c0:	e5933008 	ldr	r3, [r3, #8]
  1080c4:	e5934020 	ldr	r4, [r3, #32]
  1080c8:	e51b3010 	ldr	r3, [fp, #-16]
  1080cc:	e5933018 	ldr	r3, [r3, #24]
  1080d0:	e1a00003 	mov	r0, r3
  1080d4:	e59b3004 	ldr	r3, [fp, #4]
  1080d8:	e58d3000 	str	r3, [sp]
  1080dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1080e0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1080e4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1080e8:	e12fff34 	blx	r4
  1080ec:	e1a03000 	mov	r3, r0
}
  1080f0:	e1a00003 	mov	r0, r3
  1080f4:	e24bd008 	sub	sp, fp, #8
  1080f8:	e8bd8810 	pop	{r4, fp, pc}

001080fc <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1080fc:	e92d4810 	push	{r4, fp, lr}
  108100:	e28db008 	add	fp, sp, #8
  108104:	e24dd024 	sub	sp, sp, #36	; 0x24
  108108:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10810c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108110:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108118:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10811c:	ebfffc79 	bl	107308 <sal_get_socket>
  108120:	e50b0010 	str	r0, [fp, #-16]
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e3530000 	cmp	r3, #0
  10812c:	1a000001 	bne	108138 <sal_setsockopt+0x3c>
  108130:	e3e03000 	mvn	r3, #0
  108134:	ea000017 	b	108198 <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  108138:	e51b3010 	ldr	r3, [fp, #-16]
  10813c:	e5933014 	ldr	r3, [r3, #20]
  108140:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108144:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10814c:	e5933008 	ldr	r3, [r3, #8]
  108150:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108154:	e3530000 	cmp	r3, #0
  108158:	1a000001 	bne	108164 <sal_setsockopt+0x68>
  10815c:	e3e03000 	mvn	r3, #0
  108160:	ea00000c 	b	108198 <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108168:	e5933008 	ldr	r3, [r3, #8]
  10816c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  108170:	e51b3010 	ldr	r3, [fp, #-16]
  108174:	e5933018 	ldr	r3, [r3, #24]
  108178:	e1a00003 	mov	r0, r3
  10817c:	e59b3004 	ldr	r3, [fp, #4]
  108180:	e58d3000 	str	r3, [sp]
  108184:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108188:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10818c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108190:	e12fff34 	blx	r4
  108194:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  108198:	e1a00003 	mov	r0, r3
  10819c:	e24bd008 	sub	sp, fp, #8
  1081a0:	e8bd8810 	pop	{r4, fp, pc}

001081a4 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  1081a4:	e92d4800 	push	{fp, lr}
  1081a8:	e28db004 	add	fp, sp, #4
  1081ac:	e24dd020 	sub	sp, sp, #32
  1081b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1081b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1081b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1081bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1081c0:	ebfffc50 	bl	107308 <sal_get_socket>
  1081c4:	e50b0008 	str	r0, [fp, #-8]
  1081c8:	e51b3008 	ldr	r3, [fp, #-8]
  1081cc:	e3530000 	cmp	r3, #0
  1081d0:	1a000001 	bne	1081dc <sal_connect+0x38>
  1081d4:	e3e03000 	mvn	r3, #0
  1081d8:	ea00001d 	b	108254 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  1081dc:	e51b3008 	ldr	r3, [fp, #-8]
  1081e0:	e5933014 	ldr	r3, [r3, #20]
  1081e4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1081e8:	e2033001 	and	r3, r3, #1
  1081ec:	e3530000 	cmp	r3, #0
  1081f0:	1a000001 	bne	1081fc <sal_connect+0x58>
  1081f4:	e3e03000 	mvn	r3, #0
  1081f8:	ea000015 	b	108254 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  1081fc:	e51b3008 	ldr	r3, [fp, #-8]
  108200:	e5933014 	ldr	r3, [r3, #20]
  108204:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108208:	e50b300c 	str	r3, [fp, #-12]
  10820c:	e51b300c 	ldr	r3, [fp, #-12]
  108210:	e5933008 	ldr	r3, [r3, #8]
  108214:	e5933010 	ldr	r3, [r3, #16]
  108218:	e3530000 	cmp	r3, #0
  10821c:	1a000001 	bne	108228 <sal_connect+0x84>
  108220:	e3e03000 	mvn	r3, #0
  108224:	ea00000a 	b	108254 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  108228:	e51b300c 	ldr	r3, [fp, #-12]
  10822c:	e5933008 	ldr	r3, [r3, #8]
  108230:	e5933010 	ldr	r3, [r3, #16]
  108234:	e51b2008 	ldr	r2, [fp, #-8]
  108238:	e5922018 	ldr	r2, [r2, #24]
  10823c:	e1a00002 	mov	r0, r2
  108240:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108244:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108248:	e12fff33 	blx	r3
  10824c:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  108250:	e51b3010 	ldr	r3, [fp, #-16]
}
  108254:	e1a00003 	mov	r0, r3
  108258:	e24bd004 	sub	sp, fp, #4
  10825c:	e8bd8800 	pop	{fp, pc}

00108260 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  108260:	e92d4800 	push	{fp, lr}
  108264:	e28db004 	add	fp, sp, #4
  108268:	e24dd010 	sub	sp, sp, #16
  10826c:	e50b0010 	str	r0, [fp, #-16]
  108270:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108274:	e51b0010 	ldr	r0, [fp, #-16]
  108278:	ebfffc22 	bl	107308 <sal_get_socket>
  10827c:	e50b0008 	str	r0, [fp, #-8]
  108280:	e51b3008 	ldr	r3, [fp, #-8]
  108284:	e3530000 	cmp	r3, #0
  108288:	1a000001 	bne	108294 <sal_listen+0x34>
  10828c:	e3e03000 	mvn	r3, #0
  108290:	ea000013 	b	1082e4 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108294:	e51b3008 	ldr	r3, [fp, #-8]
  108298:	e5933014 	ldr	r3, [r3, #20]
  10829c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1082a0:	e50b300c 	str	r3, [fp, #-12]
  1082a4:	e51b300c 	ldr	r3, [fp, #-12]
  1082a8:	e5933008 	ldr	r3, [r3, #8]
  1082ac:	e593300c 	ldr	r3, [r3, #12]
  1082b0:	e3530000 	cmp	r3, #0
  1082b4:	1a000001 	bne	1082c0 <sal_listen+0x60>
  1082b8:	e3e03000 	mvn	r3, #0
  1082bc:	ea000008 	b	1082e4 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  1082c0:	e51b300c 	ldr	r3, [fp, #-12]
  1082c4:	e5933008 	ldr	r3, [r3, #8]
  1082c8:	e593300c 	ldr	r3, [r3, #12]
  1082cc:	e51b2008 	ldr	r2, [fp, #-8]
  1082d0:	e5922018 	ldr	r2, [r2, #24]
  1082d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1082d8:	e1a00002 	mov	r0, r2
  1082dc:	e12fff33 	blx	r3
  1082e0:	e1a03000 	mov	r3, r0
}
  1082e4:	e1a00003 	mov	r0, r3
  1082e8:	e24bd004 	sub	sp, fp, #4
  1082ec:	e8bd8800 	pop	{fp, pc}

001082f0 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  1082f0:	e92d4810 	push	{r4, fp, lr}
  1082f4:	e28db008 	add	fp, sp, #8
  1082f8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1082fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108300:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108304:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108308:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  10830c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108310:	ebfffbfc 	bl	107308 <sal_get_socket>
  108314:	e50b0010 	str	r0, [fp, #-16]
  108318:	e51b3010 	ldr	r3, [fp, #-16]
  10831c:	e3530000 	cmp	r3, #0
  108320:	1a000001 	bne	10832c <sal_recvfrom+0x3c>
  108324:	e3e03000 	mvn	r3, #0
  108328:	ea000021 	b	1083b4 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  10832c:	e51b3010 	ldr	r3, [fp, #-16]
  108330:	e5933014 	ldr	r3, [r3, #20]
  108334:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108338:	e2033001 	and	r3, r3, #1
  10833c:	e3530000 	cmp	r3, #0
  108340:	1a000001 	bne	10834c <sal_recvfrom+0x5c>
  108344:	e3e03000 	mvn	r3, #0
  108348:	ea000019 	b	1083b4 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  10834c:	e51b3010 	ldr	r3, [fp, #-16]
  108350:	e5933014 	ldr	r3, [r3, #20]
  108354:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108358:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  10835c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108360:	e5933008 	ldr	r3, [r3, #8]
  108364:	e593301c 	ldr	r3, [r3, #28]
  108368:	e3530000 	cmp	r3, #0
  10836c:	1a000001 	bne	108378 <sal_recvfrom+0x88>
  108370:	e3e03000 	mvn	r3, #0
  108374:	ea00000e 	b	1083b4 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  108378:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10837c:	e5933008 	ldr	r3, [r3, #8]
  108380:	e593401c 	ldr	r4, [r3, #28]
  108384:	e51b3010 	ldr	r3, [fp, #-16]
  108388:	e5933018 	ldr	r3, [r3, #24]
  10838c:	e1a00003 	mov	r0, r3
  108390:	e59b3008 	ldr	r3, [fp, #8]
  108394:	e58d3004 	str	r3, [sp, #4]
  108398:	e59b3004 	ldr	r3, [fp, #4]
  10839c:	e58d3000 	str	r3, [sp]
  1083a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1083a4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1083a8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1083ac:	e12fff34 	blx	r4
  1083b0:	e1a03000 	mov	r3, r0
#endif
}
  1083b4:	e1a00003 	mov	r0, r3
  1083b8:	e24bd008 	sub	sp, fp, #8
  1083bc:	e8bd8810 	pop	{r4, fp, pc}

001083c0 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  1083c0:	e92d4810 	push	{r4, fp, lr}
  1083c4:	e28db008 	add	fp, sp, #8
  1083c8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1083cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1083d0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1083d4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1083d8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1083dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1083e0:	ebfffbc8 	bl	107308 <sal_get_socket>
  1083e4:	e50b0010 	str	r0, [fp, #-16]
  1083e8:	e51b3010 	ldr	r3, [fp, #-16]
  1083ec:	e3530000 	cmp	r3, #0
  1083f0:	1a000001 	bne	1083fc <sal_sendto+0x3c>
  1083f4:	e3e03000 	mvn	r3, #0
  1083f8:	ea000021 	b	108484 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083fc:	e51b3010 	ldr	r3, [fp, #-16]
  108400:	e5933014 	ldr	r3, [r3, #20]
  108404:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108408:	e2033001 	and	r3, r3, #1
  10840c:	e3530000 	cmp	r3, #0
  108410:	1a000001 	bne	10841c <sal_sendto+0x5c>
  108414:	e3e03000 	mvn	r3, #0
  108418:	ea000019 	b	108484 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  10841c:	e51b3010 	ldr	r3, [fp, #-16]
  108420:	e5933014 	ldr	r3, [r3, #20]
  108424:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108428:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  10842c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108430:	e5933008 	ldr	r3, [r3, #8]
  108434:	e5933018 	ldr	r3, [r3, #24]
  108438:	e3530000 	cmp	r3, #0
  10843c:	1a000001 	bne	108448 <sal_sendto+0x88>
  108440:	e3e03000 	mvn	r3, #0
  108444:	ea00000e 	b	108484 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  108448:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10844c:	e5933008 	ldr	r3, [r3, #8]
  108450:	e5934018 	ldr	r4, [r3, #24]
  108454:	e51b3010 	ldr	r3, [fp, #-16]
  108458:	e5933018 	ldr	r3, [r3, #24]
  10845c:	e1a00003 	mov	r0, r3
  108460:	e59b3008 	ldr	r3, [fp, #8]
  108464:	e58d3004 	str	r3, [sp, #4]
  108468:	e59b3004 	ldr	r3, [fp, #4]
  10846c:	e58d3000 	str	r3, [sp]
  108470:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108474:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108478:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10847c:	e12fff34 	blx	r4
  108480:	e1a03000 	mov	r3, r0
#endif
}
  108484:	e1a00003 	mov	r0, r3
  108488:	e24bd008 	sub	sp, fp, #8
  10848c:	e8bd8810 	pop	{r4, fp, pc}

00108490 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108490:	e92d4800 	push	{fp, lr}
  108494:	e28db004 	add	fp, sp, #4
  108498:	e24dd028 	sub	sp, sp, #40	; 0x28
  10849c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1084a0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1084a4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  1084a8:	ebfffd13 	bl	1078fc <socket_new>
  1084ac:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  1084b0:	e51b3008 	ldr	r3, [fp, #-8]
  1084b4:	e3530000 	cmp	r3, #0
  1084b8:	aa000001 	bge	1084c4 <sal_socket+0x34>
    {
        return -1;
  1084bc:	e3e03000 	mvn	r3, #0
  1084c0:	ea000040 	b	1085c8 <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  1084c4:	e51b0008 	ldr	r0, [fp, #-8]
  1084c8:	ebfffb8e 	bl	107308 <sal_get_socket>
  1084cc:	e1a03000 	mov	r3, r0
  1084d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  1084d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1084d8:	e3530000 	cmp	r3, #0
  1084dc:	1a000003 	bne	1084f0 <sal_socket+0x60>
    {
        socket_delete(socket);
  1084e0:	e51b0008 	ldr	r0, [fp, #-8]
  1084e4:	ebfffd30 	bl	1079ac <socket_delete>
        return -1;
  1084e8:	e3e03000 	mvn	r3, #0
  1084ec:	ea000035 	b	1085c8 <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  1084f0:	e24b3018 	sub	r3, fp, #24
  1084f4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1084f8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1084fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108500:	ebfffbff 	bl	107504 <socket_init>
  108504:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  108508:	e51b300c 	ldr	r3, [fp, #-12]
  10850c:	e3530000 	cmp	r3, #0
  108510:	aa00000d 	bge	10854c <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  108514:	e3050c70 	movw	r0, #23664	; 0x5c70
  108518:	e3400014 	movt	r0, #20
  10851c:	ebffeafc 	bl	103114 <rt_kprintf>
  108520:	e51b100c 	ldr	r1, [fp, #-12]
  108524:	e3050e3c 	movw	r0, #24124	; 0x5e3c
  108528:	e3400014 	movt	r0, #20
  10852c:	ebffeaf8 	bl	103114 <rt_kprintf>
  108530:	e3050ca4 	movw	r0, #23716	; 0x5ca4
  108534:	e3400014 	movt	r0, #20
  108538:	ebffeaf5 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  10853c:	e51b0008 	ldr	r0, [fp, #-8]
  108540:	ebfffd19 	bl	1079ac <socket_delete>
        return -1;
  108544:	e3e03000 	mvn	r3, #0
  108548:	ea00001e 	b	1085c8 <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  10854c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108550:	e5933014 	ldr	r3, [r3, #20]
  108554:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108558:	e50b3010 	str	r3, [fp, #-16]
  10855c:	e51b3010 	ldr	r3, [fp, #-16]
  108560:	e5933008 	ldr	r3, [r3, #8]
  108564:	e5933000 	ldr	r3, [r3]
  108568:	e3530000 	cmp	r3, #0
  10856c:	1a000001 	bne	108578 <sal_socket+0xe8>
  108570:	e3e03000 	mvn	r3, #0
  108574:	ea000013 	b	1085c8 <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  108578:	e51b3010 	ldr	r3, [fp, #-16]
  10857c:	e5933008 	ldr	r3, [r3, #8]
  108580:	e5933000 	ldr	r3, [r3]
  108584:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108588:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10858c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108590:	e12fff33 	blx	r3
  108594:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  108598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10859c:	e3530000 	cmp	r3, #0
  1085a0:	ba000005 	blt	1085bc <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  1085a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1085a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1085ac:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  1085b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1085b4:	e5933004 	ldr	r3, [r3, #4]
  1085b8:	ea000002 	b	1085c8 <sal_socket+0x138>
    }
    socket_delete(socket);
  1085bc:	e51b0008 	ldr	r0, [fp, #-8]
  1085c0:	ebfffcf9 	bl	1079ac <socket_delete>
    return -1;
  1085c4:	e3e03000 	mvn	r3, #0
}
  1085c8:	e1a00003 	mov	r0, r3
  1085cc:	e24bd004 	sub	sp, fp, #4
  1085d0:	e8bd8800 	pop	{fp, pc}

001085d4 <sal_closesocket>:

int sal_closesocket(int socket)
{
  1085d4:	e92d4800 	push	{fp, lr}
  1085d8:	e28db004 	add	fp, sp, #4
  1085dc:	e24dd018 	sub	sp, sp, #24
  1085e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  1085e4:	e3a03000 	mov	r3, #0
  1085e8:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1085ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085f0:	ebfffb44 	bl	107308 <sal_get_socket>
  1085f4:	e50b000c 	str	r0, [fp, #-12]
  1085f8:	e51b300c 	ldr	r3, [fp, #-12]
  1085fc:	e3530000 	cmp	r3, #0
  108600:	1a000001 	bne	10860c <sal_closesocket+0x38>
  108604:	e3e03000 	mvn	r3, #0
  108608:	ea00001c 	b	108680 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  10860c:	e51b300c 	ldr	r3, [fp, #-12]
  108610:	e5933014 	ldr	r3, [r3, #20]
  108614:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108618:	e50b3010 	str	r3, [fp, #-16]
  10861c:	e51b3010 	ldr	r3, [fp, #-16]
  108620:	e5933008 	ldr	r3, [r3, #8]
  108624:	e5933000 	ldr	r3, [r3]
  108628:	e3530000 	cmp	r3, #0
  10862c:	1a000001 	bne	108638 <sal_closesocket+0x64>
  108630:	e3e03000 	mvn	r3, #0
  108634:	ea000011 	b	108680 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  108638:	e51b3010 	ldr	r3, [fp, #-16]
  10863c:	e5933008 	ldr	r3, [r3, #8]
  108640:	e5933004 	ldr	r3, [r3, #4]
  108644:	e51b200c 	ldr	r2, [fp, #-12]
  108648:	e5922018 	ldr	r2, [r2, #24]
  10864c:	e1a00002 	mov	r0, r2
  108650:	e12fff33 	blx	r3
  108654:	e1a03000 	mov	r3, r0
  108658:	e3530000 	cmp	r3, #0
  10865c:	1a000002 	bne	10866c <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  108660:	e3a03000 	mov	r3, #0
  108664:	e50b3008 	str	r3, [fp, #-8]
  108668:	ea000001 	b	108674 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  10866c:	e3e03000 	mvn	r3, #0
  108670:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  108674:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108678:	ebfffccb 	bl	1079ac <socket_delete>

    return error;
  10867c:	e51b3008 	ldr	r3, [fp, #-8]
}
  108680:	e1a00003 	mov	r0, r3
  108684:	e24bd004 	sub	sp, fp, #4
  108688:	e8bd8800 	pop	{fp, pc}

0010868c <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  10868c:	e92d4800 	push	{fp, lr}
  108690:	e28db004 	add	fp, sp, #4
  108694:	e24dd028 	sub	sp, sp, #40	; 0x28
  108698:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10869c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1086a0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  1086a4:	e3a03000 	mov	r3, #0
  1086a8:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  1086ac:	e3a03000 	mov	r3, #0
  1086b0:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1086b4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1086b8:	ebfffb12 	bl	107308 <sal_get_socket>
  1086bc:	e50b0010 	str	r0, [fp, #-16]
  1086c0:	e51b3010 	ldr	r3, [fp, #-16]
  1086c4:	e3530000 	cmp	r3, #0
  1086c8:	1a000001 	bne	1086d4 <sal_ioctlsocket+0x48>
  1086cc:	e3e03000 	mvn	r3, #0
  1086d0:	ea000086 	b	1088f0 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  1086d4:	e51b3010 	ldr	r3, [fp, #-16]
  1086d8:	e5933014 	ldr	r3, [r3, #20]
  1086dc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1086e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1086e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1086e8:	e5933008 	ldr	r3, [r3, #8]
  1086ec:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1086f0:	e3530000 	cmp	r3, #0
  1086f4:	1a000001 	bne	108700 <sal_ioctlsocket+0x74>
  1086f8:	e3e03000 	mvn	r3, #0
  1086fc:	ea00007b 	b	1088f0 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  108700:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  108704:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  108708:	e51b3010 	ldr	r3, [fp, #-16]
  10870c:	e5933008 	ldr	r3, [r3, #8]
  108710:	e3530002 	cmp	r3, #2
  108714:	1a000068 	bne	1088bc <sal_ioctlsocket+0x230>
  108718:	e51b3010 	ldr	r3, [fp, #-16]
  10871c:	e5933014 	ldr	r3, [r3, #20]
  108720:	e3530000 	cmp	r3, #0
  108724:	0a000064 	beq	1088bc <sal_ioctlsocket+0x230>
  108728:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10872c:	e3530000 	cmp	r3, #0
  108730:	0a000061 	beq	1088bc <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  108734:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108738:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  10873c:	e2433015 	sub	r3, r3, #21
  108740:	e3530012 	cmp	r3, #18
  108744:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  108748:	ea00005d 	b	1088c4 <sal_ioctlsocket+0x238>
  10874c:	00108798 	.word	0x00108798
  108750:	001087c0 	.word	0x001087c0
  108754:	001088c4 	.word	0x001088c4
  108758:	001088c4 	.word	0x001088c4
  10875c:	001088c4 	.word	0x001088c4
  108760:	001088c4 	.word	0x001088c4
  108764:	001087fc 	.word	0x001087fc
  108768:	00108824 	.word	0x00108824
  10876c:	001088c4 	.word	0x001088c4
  108770:	001088c4 	.word	0x001088c4
  108774:	001088c4 	.word	0x001088c4
  108778:	001088c4 	.word	0x001088c4
  10877c:	0010889c 	.word	0x0010889c
  108780:	001088c4 	.word	0x001088c4
  108784:	001088c4 	.word	0x001088c4
  108788:	001088c4 	.word	0x001088c4
  10878c:	001088c4 	.word	0x001088c4
  108790:	001088c4 	.word	0x001088c4
  108794:	00108860 	.word	0x00108860
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  108798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10879c:	e2833010 	add	r3, r3, #16
  1087a0:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  1087a4:	e51b3010 	ldr	r3, [fp, #-16]
  1087a8:	e5933014 	ldr	r3, [r3, #20]
  1087ac:	e593200c 	ldr	r2, [r3, #12]
  1087b0:	e51b3008 	ldr	r3, [fp, #-8]
  1087b4:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  1087b8:	e3a03000 	mov	r3, #0
  1087bc:	ea00004b 	b	1088f0 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  1087c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087c4:	e2833010 	add	r3, r3, #16
  1087c8:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1087cc:	e24b301c 	sub	r3, fp, #28
  1087d0:	e1a01003 	mov	r1, r3
  1087d4:	e51b000c 	ldr	r0, [fp, #-12]
  1087d8:	ebfffd0b 	bl	107c0c <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  1087dc:	e51b3010 	ldr	r3, [fp, #-16]
  1087e0:	e5933014 	ldr	r3, [r3, #20]
  1087e4:	e24b201c 	sub	r2, fp, #28
  1087e8:	e1a01002 	mov	r1, r2
  1087ec:	e1a00003 	mov	r0, r3
  1087f0:	ebfff4a2 	bl	105a80 <netdev_set_ipaddr>
            return 0;    
  1087f4:	e3a03000 	mov	r3, #0
  1087f8:	ea00003c 	b	1088f0 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  1087fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108800:	e2833010 	add	r3, r3, #16
  108804:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  108808:	e51b3010 	ldr	r3, [fp, #-16]
  10880c:	e5933014 	ldr	r3, [r3, #20]
  108810:	e5932010 	ldr	r2, [r3, #16]
  108814:	e51b3008 	ldr	r3, [fp, #-8]
  108818:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10881c:	e3a03000 	mov	r3, #0
  108820:	ea000032 	b	1088f0 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  108824:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108828:	e2833010 	add	r3, r3, #16
  10882c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108830:	e24b301c 	sub	r3, fp, #28
  108834:	e1a01003 	mov	r1, r3
  108838:	e51b000c 	ldr	r0, [fp, #-12]
  10883c:	ebfffcf2 	bl	107c0c <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  108840:	e51b3010 	ldr	r3, [fp, #-16]
  108844:	e5933014 	ldr	r3, [r3, #20]
  108848:	e24b201c 	sub	r2, fp, #28
  10884c:	e1a01002 	mov	r1, r2
  108850:	e1a00003 	mov	r0, r3
  108854:	ebfff4d8 	bl	105bbc <netdev_set_netmask>
            return 0;            
  108858:	e3a03000 	mov	r3, #0
  10885c:	ea000023 	b	1088f0 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  108860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108864:	e2833010 	add	r3, r3, #16
  108868:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  10886c:	e51b300c 	ldr	r3, [fp, #-12]
  108870:	e2830002 	add	r0, r3, #2
  108874:	e51b3010 	ldr	r3, [fp, #-16]
  108878:	e5933014 	ldr	r3, [r3, #20]
  10887c:	e2831021 	add	r1, r3, #33	; 0x21
  108880:	e51b3010 	ldr	r3, [fp, #-16]
  108884:	e5933014 	ldr	r3, [r3, #20]
  108888:	e5d33020 	ldrb	r3, [r3, #32]
  10888c:	e1a02003 	mov	r2, r3
  108890:	ebffea9a 	bl	103300 <rt_memcpy>
            return 0;
  108894:	e3a03000 	mov	r3, #0
  108898:	ea000014 	b	1088f0 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  10889c:	e51b3010 	ldr	r3, [fp, #-16]
  1088a0:	e5933014 	ldr	r3, [r3, #20]
  1088a4:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  1088a8:	e1a02003 	mov	r2, r3
  1088ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088b0:	e5832010 	str	r2, [r3, #16]
            return 0;            
  1088b4:	e3a03000 	mov	r3, #0
  1088b8:	ea00000c 	b	1088f0 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  1088bc:	e320f000 	nop	{0}
  1088c0:	ea000000 	b	1088c8 <sal_ioctlsocket+0x23c>
            break;
  1088c4:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  1088c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1088cc:	e5933008 	ldr	r3, [r3, #8]
  1088d0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1088d4:	e51b2010 	ldr	r2, [fp, #-16]
  1088d8:	e5922018 	ldr	r2, [r2, #24]
  1088dc:	e1a00002 	mov	r0, r2
  1088e0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1088e4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1088e8:	e12fff33 	blx	r3
  1088ec:	e1a03000 	mov	r3, r0
}
  1088f0:	e1a00003 	mov	r0, r3
  1088f4:	e24bd004 	sub	sp, fp, #4
  1088f8:	e8bd8800 	pop	{fp, pc}

001088fc <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  1088fc:	e92d4800 	push	{fp, lr}
  108900:	e28db004 	add	fp, sp, #4
  108904:	e24dd018 	sub	sp, sp, #24
  108908:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10890c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  108910:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108914:	e5933018 	ldr	r3, [r3, #24]
  108918:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10891c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108920:	e51b0008 	ldr	r0, [fp, #-8]
  108924:	ebfffa77 	bl	107308 <sal_get_socket>
  108928:	e50b000c 	str	r0, [fp, #-12]
  10892c:	e51b300c 	ldr	r3, [fp, #-12]
  108930:	e3530000 	cmp	r3, #0
  108934:	1a000001 	bne	108940 <sal_poll+0x44>
  108938:	e3e03000 	mvn	r3, #0
  10893c:	ea000019 	b	1089a8 <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  108940:	e51b300c 	ldr	r3, [fp, #-12]
  108944:	e5933014 	ldr	r3, [r3, #20]
  108948:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10894c:	e2033001 	and	r3, r3, #1
  108950:	e3530000 	cmp	r3, #0
  108954:	1a000001 	bne	108960 <sal_poll+0x64>
  108958:	e3e03000 	mvn	r3, #0
  10895c:	ea000011 	b	1089a8 <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  108960:	e51b300c 	ldr	r3, [fp, #-12]
  108964:	e5933014 	ldr	r3, [r3, #20]
  108968:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10896c:	e50b3010 	str	r3, [fp, #-16]
  108970:	e51b3010 	ldr	r3, [fp, #-16]
  108974:	e5933008 	ldr	r3, [r3, #8]
  108978:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10897c:	e3530000 	cmp	r3, #0
  108980:	1a000001 	bne	10898c <sal_poll+0x90>
  108984:	e3e03000 	mvn	r3, #0
  108988:	ea000006 	b	1089a8 <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  10898c:	e51b3010 	ldr	r3, [fp, #-16]
  108990:	e5933008 	ldr	r3, [r3, #8]
  108994:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108998:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10899c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1089a0:	e12fff33 	blx	r3
  1089a4:	e1a03000 	mov	r3, r0
}
  1089a8:	e1a00003 	mov	r0, r3
  1089ac:	e24bd004 	sub	sp, fp, #4
  1089b0:	e8bd8800 	pop	{fp, pc}

001089b4 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  1089b4:	e92d4800 	push	{fp, lr}
  1089b8:	e28db004 	add	fp, sp, #4
  1089bc:	e24dd010 	sub	sp, sp, #16
  1089c0:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  1089c4:	e30f355c 	movw	r3, #62812	; 0xf55c
  1089c8:	e3403014 	movt	r3, #20
  1089cc:	e5933000 	ldr	r3, [r3]
  1089d0:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  1089d4:	e51b3008 	ldr	r3, [fp, #-8]
  1089d8:	e3530000 	cmp	r3, #0
  1089dc:	0a000017 	beq	108a40 <sal_gethostbyname+0x8c>
  1089e0:	e51b3008 	ldr	r3, [fp, #-8]
  1089e4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1089e8:	e2033001 	and	r3, r3, #1
  1089ec:	e6ef3073 	uxtb	r3, r3
  1089f0:	e3530000 	cmp	r3, #0
  1089f4:	0a000011 	beq	108a40 <sal_gethostbyname+0x8c>
  1089f8:	e51b3008 	ldr	r3, [fp, #-8]
  1089fc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a00:	e50b300c 	str	r3, [fp, #-12]
  108a04:	e51b300c 	ldr	r3, [fp, #-12]
  108a08:	e3530000 	cmp	r3, #0
  108a0c:	0a00000b 	beq	108a40 <sal_gethostbyname+0x8c>
  108a10:	e51b300c 	ldr	r3, [fp, #-12]
  108a14:	e593300c 	ldr	r3, [r3, #12]
  108a18:	e5933000 	ldr	r3, [r3]
  108a1c:	e3530000 	cmp	r3, #0
  108a20:	0a000006 	beq	108a40 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  108a24:	e51b300c 	ldr	r3, [fp, #-12]
  108a28:	e593300c 	ldr	r3, [r3, #12]
  108a2c:	e5933000 	ldr	r3, [r3]
  108a30:	e51b0010 	ldr	r0, [fp, #-16]
  108a34:	e12fff33 	blx	r3
  108a38:	e1a03000 	mov	r3, r0
  108a3c:	ea00001e 	b	108abc <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108a40:	e3a00001 	mov	r0, #1
  108a44:	ebfff259 	bl	1053b0 <netdev_get_first_by_flags>
  108a48:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a4c:	e51b3008 	ldr	r3, [fp, #-8]
  108a50:	e3530000 	cmp	r3, #0
  108a54:	0a000017 	beq	108ab8 <sal_gethostbyname+0x104>
  108a58:	e51b3008 	ldr	r3, [fp, #-8]
  108a5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a60:	e2033001 	and	r3, r3, #1
  108a64:	e6ef3073 	uxtb	r3, r3
  108a68:	e3530000 	cmp	r3, #0
  108a6c:	0a000011 	beq	108ab8 <sal_gethostbyname+0x104>
  108a70:	e51b3008 	ldr	r3, [fp, #-8]
  108a74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a78:	e50b300c 	str	r3, [fp, #-12]
  108a7c:	e51b300c 	ldr	r3, [fp, #-12]
  108a80:	e3530000 	cmp	r3, #0
  108a84:	0a00000b 	beq	108ab8 <sal_gethostbyname+0x104>
  108a88:	e51b300c 	ldr	r3, [fp, #-12]
  108a8c:	e593300c 	ldr	r3, [r3, #12]
  108a90:	e5933000 	ldr	r3, [r3]
  108a94:	e3530000 	cmp	r3, #0
  108a98:	0a000006 	beq	108ab8 <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108a9c:	e51b300c 	ldr	r3, [fp, #-12]
  108aa0:	e593300c 	ldr	r3, [r3, #12]
  108aa4:	e5933000 	ldr	r3, [r3]
  108aa8:	e51b0010 	ldr	r0, [fp, #-16]
  108aac:	e12fff33 	blx	r3
  108ab0:	e1a03000 	mov	r3, r0
  108ab4:	ea000000 	b	108abc <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108ab8:	e3a03000 	mov	r3, #0
}
  108abc:	e1a00003 	mov	r0, r3
  108ac0:	e24bd004 	sub	sp, fp, #4
  108ac4:	e8bd8800 	pop	{fp, pc}

00108ac8 <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108ac8:	e92d4810 	push	{r4, fp, lr}
  108acc:	e28db008 	add	fp, sp, #8
  108ad0:	e24dd024 	sub	sp, sp, #36	; 0x24
  108ad4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108ad8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108adc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108ae0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108ae4:	e30f355c 	movw	r3, #62812	; 0xf55c
  108ae8:	e3403014 	movt	r3, #20
  108aec:	e5933000 	ldr	r3, [r3]
  108af0:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108af4:	e51b3010 	ldr	r3, [fp, #-16]
  108af8:	e3530000 	cmp	r3, #0
  108afc:	0a00001e 	beq	108b7c <sal_gethostbyname_r+0xb4>
  108b00:	e51b3010 	ldr	r3, [fp, #-16]
  108b04:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b08:	e2033001 	and	r3, r3, #1
  108b0c:	e6ef3073 	uxtb	r3, r3
  108b10:	e3530000 	cmp	r3, #0
  108b14:	0a000018 	beq	108b7c <sal_gethostbyname_r+0xb4>
  108b18:	e51b3010 	ldr	r3, [fp, #-16]
  108b1c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b20:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b28:	e3530000 	cmp	r3, #0
  108b2c:	0a000012 	beq	108b7c <sal_gethostbyname_r+0xb4>
  108b30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b34:	e593300c 	ldr	r3, [r3, #12]
  108b38:	e5933004 	ldr	r3, [r3, #4]
  108b3c:	e3530000 	cmp	r3, #0
  108b40:	0a00000d 	beq	108b7c <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108b44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b48:	e593300c 	ldr	r3, [r3, #12]
  108b4c:	e5934004 	ldr	r4, [r3, #4]
  108b50:	e59b3008 	ldr	r3, [fp, #8]
  108b54:	e58d3004 	str	r3, [sp, #4]
  108b58:	e59b3004 	ldr	r3, [fp, #4]
  108b5c:	e58d3000 	str	r3, [sp]
  108b60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108b64:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108b68:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b6c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108b70:	e12fff34 	blx	r4
  108b74:	e1a03000 	mov	r3, r0
  108b78:	ea000025 	b	108c14 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108b7c:	e3a00001 	mov	r0, #1
  108b80:	ebfff20a 	bl	1053b0 <netdev_get_first_by_flags>
  108b84:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b88:	e51b3010 	ldr	r3, [fp, #-16]
  108b8c:	e3530000 	cmp	r3, #0
  108b90:	0a00001e 	beq	108c10 <sal_gethostbyname_r+0x148>
  108b94:	e51b3010 	ldr	r3, [fp, #-16]
  108b98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b9c:	e2033001 	and	r3, r3, #1
  108ba0:	e6ef3073 	uxtb	r3, r3
  108ba4:	e3530000 	cmp	r3, #0
  108ba8:	0a000018 	beq	108c10 <sal_gethostbyname_r+0x148>
  108bac:	e51b3010 	ldr	r3, [fp, #-16]
  108bb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108bb4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108bb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108bbc:	e3530000 	cmp	r3, #0
  108bc0:	0a000012 	beq	108c10 <sal_gethostbyname_r+0x148>
  108bc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108bc8:	e593300c 	ldr	r3, [r3, #12]
  108bcc:	e5933004 	ldr	r3, [r3, #4]
  108bd0:	e3530000 	cmp	r3, #0
  108bd4:	0a00000d 	beq	108c10 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108bdc:	e593300c 	ldr	r3, [r3, #12]
  108be0:	e5934004 	ldr	r4, [r3, #4]
  108be4:	e59b3008 	ldr	r3, [fp, #8]
  108be8:	e58d3004 	str	r3, [sp, #4]
  108bec:	e59b3004 	ldr	r3, [fp, #4]
  108bf0:	e58d3000 	str	r3, [sp]
  108bf4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bf8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bfc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c04:	e12fff34 	blx	r4
  108c08:	e1a03000 	mov	r3, r0
  108c0c:	ea000000 	b	108c14 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108c10:	e3e03000 	mvn	r3, #0
}
  108c14:	e1a00003 	mov	r0, r3
  108c18:	e24bd008 	sub	sp, fp, #8
  108c1c:	e8bd8810 	pop	{r4, fp, pc}

00108c20 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108c20:	e92d4810 	push	{r4, fp, lr}
  108c24:	e28db008 	add	fp, sp, #8
  108c28:	e24dd01c 	sub	sp, sp, #28
  108c2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108c30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108c34:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108c38:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108c3c:	e30f355c 	movw	r3, #62812	; 0xf55c
  108c40:	e3403014 	movt	r3, #20
  108c44:	e5933000 	ldr	r3, [r3]
  108c48:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c4c:	e51b3010 	ldr	r3, [fp, #-16]
  108c50:	e3530000 	cmp	r3, #0
  108c54:	0a00001a 	beq	108cc4 <sal_getaddrinfo+0xa4>
  108c58:	e51b3010 	ldr	r3, [fp, #-16]
  108c5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c60:	e2033001 	and	r3, r3, #1
  108c64:	e6ef3073 	uxtb	r3, r3
  108c68:	e3530000 	cmp	r3, #0
  108c6c:	0a000014 	beq	108cc4 <sal_getaddrinfo+0xa4>
  108c70:	e51b3010 	ldr	r3, [fp, #-16]
  108c74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c80:	e3530000 	cmp	r3, #0
  108c84:	0a00000e 	beq	108cc4 <sal_getaddrinfo+0xa4>
  108c88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c8c:	e593300c 	ldr	r3, [r3, #12]
  108c90:	e5933008 	ldr	r3, [r3, #8]
  108c94:	e3530000 	cmp	r3, #0
  108c98:	0a000009 	beq	108cc4 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108c9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ca0:	e593300c 	ldr	r3, [r3, #12]
  108ca4:	e5934008 	ldr	r4, [r3, #8]
  108ca8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108cac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108cb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108cb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108cb8:	e12fff34 	blx	r4
  108cbc:	e1a03000 	mov	r3, r0
  108cc0:	ea000021 	b	108d4c <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108cc4:	e3a00001 	mov	r0, #1
  108cc8:	ebfff1b8 	bl	1053b0 <netdev_get_first_by_flags>
  108ccc:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108cd0:	e51b3010 	ldr	r3, [fp, #-16]
  108cd4:	e3530000 	cmp	r3, #0
  108cd8:	0a00001a 	beq	108d48 <sal_getaddrinfo+0x128>
  108cdc:	e51b3010 	ldr	r3, [fp, #-16]
  108ce0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108ce4:	e2033001 	and	r3, r3, #1
  108ce8:	e6ef3073 	uxtb	r3, r3
  108cec:	e3530000 	cmp	r3, #0
  108cf0:	0a000014 	beq	108d48 <sal_getaddrinfo+0x128>
  108cf4:	e51b3010 	ldr	r3, [fp, #-16]
  108cf8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108cfc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108d00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108d04:	e3530000 	cmp	r3, #0
  108d08:	0a00000e 	beq	108d48 <sal_getaddrinfo+0x128>
  108d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108d10:	e593300c 	ldr	r3, [r3, #12]
  108d14:	e5933008 	ldr	r3, [r3, #8]
  108d18:	e3530000 	cmp	r3, #0
  108d1c:	0a000009 	beq	108d48 <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108d20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108d24:	e593300c 	ldr	r3, [r3, #12]
  108d28:	e5934008 	ldr	r4, [r3, #8]
  108d2c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108d30:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108d34:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108d38:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108d3c:	e12fff34 	blx	r4
  108d40:	e1a03000 	mov	r3, r0
  108d44:	ea000000 	b	108d4c <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108d48:	e3e03000 	mvn	r3, #0
}
  108d4c:	e1a00003 	mov	r0, r3
  108d50:	e24bd008 	sub	sp, fp, #8
  108d54:	e8bd8810 	pop	{r4, fp, pc}

00108d58 <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108d58:	e92d4800 	push	{fp, lr}
  108d5c:	e28db004 	add	fp, sp, #4
  108d60:	e24dd010 	sub	sp, sp, #16
  108d64:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108d68:	e30f355c 	movw	r3, #62812	; 0xf55c
  108d6c:	e3403014 	movt	r3, #20
  108d70:	e5933000 	ldr	r3, [r3]
  108d74:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108d78:	e51b3008 	ldr	r3, [fp, #-8]
  108d7c:	e3530000 	cmp	r3, #0
  108d80:	0a000016 	beq	108de0 <sal_freeaddrinfo+0x88>
  108d84:	e51b3008 	ldr	r3, [fp, #-8]
  108d88:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d8c:	e2033001 	and	r3, r3, #1
  108d90:	e6ef3073 	uxtb	r3, r3
  108d94:	e3530000 	cmp	r3, #0
  108d98:	0a000010 	beq	108de0 <sal_freeaddrinfo+0x88>
  108d9c:	e51b3008 	ldr	r3, [fp, #-8]
  108da0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108da4:	e50b300c 	str	r3, [fp, #-12]
  108da8:	e51b300c 	ldr	r3, [fp, #-12]
  108dac:	e3530000 	cmp	r3, #0
  108db0:	0a00000a 	beq	108de0 <sal_freeaddrinfo+0x88>
  108db4:	e51b300c 	ldr	r3, [fp, #-12]
  108db8:	e593300c 	ldr	r3, [r3, #12]
  108dbc:	e593300c 	ldr	r3, [r3, #12]
  108dc0:	e3530000 	cmp	r3, #0
  108dc4:	0a000005 	beq	108de0 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108dc8:	e51b300c 	ldr	r3, [fp, #-12]
  108dcc:	e593300c 	ldr	r3, [r3, #12]
  108dd0:	e593300c 	ldr	r3, [r3, #12]
  108dd4:	e51b0010 	ldr	r0, [fp, #-16]
  108dd8:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108ddc:	ea00001b 	b	108e50 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108de0:	e3a00001 	mov	r0, #1
  108de4:	ebfff171 	bl	1053b0 <netdev_get_first_by_flags>
  108de8:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108dec:	e51b3008 	ldr	r3, [fp, #-8]
  108df0:	e3530000 	cmp	r3, #0
  108df4:	0a000015 	beq	108e50 <sal_freeaddrinfo+0xf8>
  108df8:	e51b3008 	ldr	r3, [fp, #-8]
  108dfc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108e00:	e2033001 	and	r3, r3, #1
  108e04:	e6ef3073 	uxtb	r3, r3
  108e08:	e3530000 	cmp	r3, #0
  108e0c:	0a00000f 	beq	108e50 <sal_freeaddrinfo+0xf8>
  108e10:	e51b3008 	ldr	r3, [fp, #-8]
  108e14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108e18:	e50b300c 	str	r3, [fp, #-12]
  108e1c:	e51b300c 	ldr	r3, [fp, #-12]
  108e20:	e3530000 	cmp	r3, #0
  108e24:	0a000009 	beq	108e50 <sal_freeaddrinfo+0xf8>
  108e28:	e51b300c 	ldr	r3, [fp, #-12]
  108e2c:	e593300c 	ldr	r3, [r3, #12]
  108e30:	e593300c 	ldr	r3, [r3, #12]
  108e34:	e3530000 	cmp	r3, #0
  108e38:	0a000004 	beq	108e50 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108e3c:	e51b300c 	ldr	r3, [fp, #-12]
  108e40:	e593300c 	ldr	r3, [r3, #12]
  108e44:	e593300c 	ldr	r3, [r3, #12]
  108e48:	e51b0010 	ldr	r0, [fp, #-16]
  108e4c:	e12fff33 	blx	r3
}
  108e50:	e320f000 	nop	{0}
  108e54:	e24bd004 	sub	sp, fp, #4
  108e58:	e8bd8800 	pop	{fp, pc}

00108e5c <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108e5c:	e92d4800 	push	{fp, lr}
  108e60:	e28db004 	add	fp, sp, #4
  108e64:	e24dd018 	sub	sp, sp, #24
  108e68:	e50b0010 	str	r0, [fp, #-16]
  108e6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108e70:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108e74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e78:	e2033b02 	and	r3, r3, #2048	; 0x800
  108e7c:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e84:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108e88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108e8c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108e90:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108e94:	e51b0010 	ldr	r0, [fp, #-16]
  108e98:	eb0026c6 	bl	1129b8 <lwip_socket>
  108e9c:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108ea0:	e51b300c 	ldr	r3, [fp, #-12]
  108ea4:	e3530000 	cmp	r3, #0
  108ea8:	ba000006 	blt	108ec8 <unet_socket+0x6c>
  108eac:	e51b3008 	ldr	r3, [fp, #-8]
  108eb0:	e3530000 	cmp	r3, #0
  108eb4:	0a000003 	beq	108ec8 <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108eb8:	e51b2008 	ldr	r2, [fp, #-8]
  108ebc:	e3a01004 	mov	r1, #4
  108ec0:	e51b000c 	ldr	r0, [fp, #-12]
  108ec4:	eb0000e2 	bl	109254 <unet_fcntl>

    return socket;
  108ec8:	e51b300c 	ldr	r3, [fp, #-12]
}
  108ecc:	e1a00003 	mov	r0, r3
  108ed0:	e24bd004 	sub	sp, fp, #4
  108ed4:	e8bd8800 	pop	{fp, pc}

00108ed8 <unet_close>:

int unet_close(int socket)
{
  108ed8:	e92d4800 	push	{fp, lr}
  108edc:	e28db004 	add	fp, sp, #4
  108ee0:	e24dd010 	sub	sp, sp, #16
  108ee4:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108ee8:	e51b0010 	ldr	r0, [fp, #-16]
  108eec:	eb00219b 	bl	111560 <lwip_close>
  108ef0:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108ef4:	e51b3008 	ldr	r3, [fp, #-8]
}
  108ef8:	e1a00003 	mov	r0, r3
  108efc:	e24bd004 	sub	sp, fp, #4
  108f00:	e8bd8800 	pop	{fp, pc}

00108f04 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f04:	e92d4800 	push	{fp, lr}
  108f08:	e28db004 	add	fp, sp, #4
  108f0c:	e24dd010 	sub	sp, sp, #16
  108f10:	e50b0008 	str	r0, [fp, #-8]
  108f14:	e50b100c 	str	r1, [fp, #-12]
  108f18:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108f1c:	e51b2010 	ldr	r2, [fp, #-16]
  108f20:	e51b100c 	ldr	r1, [fp, #-12]
  108f24:	e51b0008 	ldr	r0, [fp, #-8]
  108f28:	eb00211a 	bl	111398 <lwip_bind>
  108f2c:	e1a03000 	mov	r3, r0
}
  108f30:	e1a00003 	mov	r0, r3
  108f34:	e24bd004 	sub	sp, fp, #4
  108f38:	e8bd8800 	pop	{fp, pc}

00108f3c <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108f3c:	e92d4800 	push	{fp, lr}
  108f40:	e28db004 	add	fp, sp, #4
  108f44:	e24dd008 	sub	sp, sp, #8
  108f48:	e50b0008 	str	r0, [fp, #-8]
  108f4c:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108f50:	e51b100c 	ldr	r1, [fp, #-12]
  108f54:	e51b0008 	ldr	r0, [fp, #-8]
  108f58:	eb00223f 	bl	11185c <lwip_listen>
  108f5c:	e1a03000 	mov	r3, r0
}
  108f60:	e1a00003 	mov	r0, r3
  108f64:	e24bd004 	sub	sp, fp, #4
  108f68:	e8bd8800 	pop	{fp, pc}

00108f6c <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f6c:	e92d4800 	push	{fp, lr}
  108f70:	e28db004 	add	fp, sp, #4
  108f74:	e24dd010 	sub	sp, sp, #16
  108f78:	e50b0008 	str	r0, [fp, #-8]
  108f7c:	e50b100c 	str	r1, [fp, #-12]
  108f80:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108f84:	e51b2010 	ldr	r2, [fp, #-16]
  108f88:	e51b100c 	ldr	r1, [fp, #-12]
  108f8c:	e51b0008 	ldr	r0, [fp, #-8]
  108f90:	eb0021bc 	bl	111688 <lwip_connect>
  108f94:	e1a03000 	mov	r3, r0
}
  108f98:	e1a00003 	mov	r0, r3
  108f9c:	e24bd004 	sub	sp, fp, #4
  108fa0:	e8bd8800 	pop	{fp, pc}

00108fa4 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108fa4:	e92d4800 	push	{fp, lr}
  108fa8:	e28db004 	add	fp, sp, #4
  108fac:	e24dd010 	sub	sp, sp, #16
  108fb0:	e50b0008 	str	r0, [fp, #-8]
  108fb4:	e50b100c 	str	r1, [fp, #-12]
  108fb8:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108fbc:	e51b2010 	ldr	r2, [fp, #-16]
  108fc0:	e51b100c 	ldr	r1, [fp, #-12]
  108fc4:	e51b0008 	ldr	r0, [fp, #-8]
  108fc8:	eb001fe4 	bl	110f60 <lwip_accept>
  108fcc:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  108fd0:	e51b3008 	ldr	r3, [fp, #-8]
}
  108fd4:	e1a00003 	mov	r0, r3
  108fd8:	e24bd004 	sub	sp, fp, #4
  108fdc:	e8bd8800 	pop	{fp, pc}

00108fe0 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108fe0:	e92d4800 	push	{fp, lr}
  108fe4:	e28db004 	add	fp, sp, #4
  108fe8:	e24dd020 	sub	sp, sp, #32
  108fec:	e50b0010 	str	r0, [fp, #-16]
  108ff0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108ff4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108ff8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108ffc:	e59b3008 	ldr	r3, [fp, #8]
  109000:	e3530000 	cmp	r3, #0
  109004:	1a00000a 	bne	109034 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  109008:	e3a03000 	mov	r3, #0
  10900c:	e58d3004 	str	r3, [sp, #4]
  109010:	e3a03000 	mov	r3, #0
  109014:	e58d3000 	str	r3, [sp]
  109018:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10901c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109020:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109024:	e51b0010 	ldr	r0, [fp, #-16]
  109028:	eb0025ce 	bl	112768 <lwip_sendto>
  10902c:	e50b0008 	str	r0, [fp, #-8]
  109030:	ea000009 	b	10905c <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  109034:	e59b3008 	ldr	r3, [fp, #8]
  109038:	e58d3004 	str	r3, [sp, #4]
  10903c:	e59b3004 	ldr	r3, [fp, #4]
  109040:	e58d3000 	str	r3, [sp]
  109044:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109048:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10904c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109050:	e51b0010 	ldr	r0, [fp, #-16]
  109054:	eb0025c3 	bl	112768 <lwip_sendto>
  109058:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  10905c:	e51b3008 	ldr	r3, [fp, #-8]
  109060:	e3530000 	cmp	r3, #0
  109064:	ca000005 	bgt	109080 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  109068:	e3a02058 	mov	r2, #88	; 0x58
  10906c:	e3051ecc 	movw	r1, #24268	; 0x5ecc
  109070:	e3401014 	movt	r1, #20
  109074:	e3050eb0 	movw	r0, #24240	; 0x5eb0
  109078:	e3400014 	movt	r0, #20
  10907c:	ebffe824 	bl	103114 <rt_kprintf>
    }
    return result;
  109080:	e51b3008 	ldr	r3, [fp, #-8]
}
  109084:	e1a00003 	mov	r0, r3
  109088:	e24bd004 	sub	sp, fp, #4
  10908c:	e8bd8800 	pop	{fp, pc}

00109090 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109090:	e92d4800 	push	{fp, lr}
  109094:	e28db004 	add	fp, sp, #4
  109098:	e24dd018 	sub	sp, sp, #24
  10909c:	e50b0008 	str	r0, [fp, #-8]
  1090a0:	e50b100c 	str	r1, [fp, #-12]
  1090a4:	e50b2010 	str	r2, [fp, #-16]
  1090a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  1090ac:	e59b3004 	ldr	r3, [fp, #4]
  1090b0:	e3530000 	cmp	r3, #0
  1090b4:	0a00000d 	beq	1090f0 <unet_recvfrom+0x60>
  1090b8:	e59b3008 	ldr	r3, [fp, #8]
  1090bc:	e3530000 	cmp	r3, #0
  1090c0:	0a00000a 	beq	1090f0 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  1090c4:	e59b3008 	ldr	r3, [fp, #8]
  1090c8:	e58d3004 	str	r3, [sp, #4]
  1090cc:	e59b3004 	ldr	r3, [fp, #4]
  1090d0:	e58d3000 	str	r3, [sp]
  1090d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1090d8:	e51b2010 	ldr	r2, [fp, #-16]
  1090dc:	e51b100c 	ldr	r1, [fp, #-12]
  1090e0:	e51b0008 	ldr	r0, [fp, #-8]
  1090e4:	eb002234 	bl	1119bc <lwip_recvfrom>
  1090e8:	e1a03000 	mov	r3, r0
  1090ec:	ea000009 	b	109118 <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  1090f0:	e3a03000 	mov	r3, #0
  1090f4:	e58d3004 	str	r3, [sp, #4]
  1090f8:	e3a03000 	mov	r3, #0
  1090fc:	e58d3000 	str	r3, [sp]
  109100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109104:	e51b2010 	ldr	r2, [fp, #-16]
  109108:	e51b100c 	ldr	r1, [fp, #-12]
  10910c:	e51b0008 	ldr	r0, [fp, #-8]
  109110:	eb002229 	bl	1119bc <lwip_recvfrom>
  109114:	e1a03000 	mov	r3, r0
    }
}
  109118:	e1a00003 	mov	r0, r3
  10911c:	e24bd004 	sub	sp, fp, #4
  109120:	e8bd8800 	pop	{fp, pc}

00109124 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  109124:	e92d4800 	push	{fp, lr}
  109128:	e28db004 	add	fp, sp, #4
  10912c:	e24dd018 	sub	sp, sp, #24
  109130:	e50b0008 	str	r0, [fp, #-8]
  109134:	e50b100c 	str	r1, [fp, #-12]
  109138:	e50b2010 	str	r2, [fp, #-16]
  10913c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  109140:	e59b3004 	ldr	r3, [fp, #4]
  109144:	e58d3000 	str	r3, [sp]
  109148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10914c:	e51b2010 	ldr	r2, [fp, #-16]
  109150:	e51b100c 	ldr	r1, [fp, #-12]
  109154:	e51b0008 	ldr	r0, [fp, #-8]
  109158:	eb002b2c 	bl	113e10 <lwip_getsockopt>
  10915c:	e1a03000 	mov	r3, r0
}
  109160:	e1a00003 	mov	r0, r3
  109164:	e24bd004 	sub	sp, fp, #4
  109168:	e8bd8800 	pop	{fp, pc}

0010916c <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  10916c:	e92d4800 	push	{fp, lr}
  109170:	e28db004 	add	fp, sp, #4
  109174:	e24dd018 	sub	sp, sp, #24
  109178:	e50b0008 	str	r0, [fp, #-8]
  10917c:	e50b100c 	str	r1, [fp, #-12]
  109180:	e50b2010 	str	r2, [fp, #-16]
  109184:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  109188:	e59b3004 	ldr	r3, [fp, #4]
  10918c:	e58d3000 	str	r3, [sp]
  109190:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109194:	e51b2010 	ldr	r2, [fp, #-16]
  109198:	e51b100c 	ldr	r1, [fp, #-12]
  10919c:	e51b0008 	ldr	r0, [fp, #-8]
  1091a0:	eb002de2 	bl	114930 <lwip_setsockopt>
  1091a4:	e1a03000 	mov	r3, r0
}
  1091a8:	e1a00003 	mov	r0, r3
  1091ac:	e24bd004 	sub	sp, fp, #4
  1091b0:	e8bd8800 	pop	{fp, pc}

001091b4 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  1091b4:	e92d4800 	push	{fp, lr}
  1091b8:	e28db004 	add	fp, sp, #4
  1091bc:	e24dd008 	sub	sp, sp, #8
  1091c0:	e50b0008 	str	r0, [fp, #-8]
  1091c4:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  1091c8:	e51b100c 	ldr	r1, [fp, #-12]
  1091cc:	e51b0008 	ldr	r0, [fp, #-8]
  1091d0:	eb002a14 	bl	113a28 <lwip_shutdown>
  1091d4:	e1a03000 	mov	r3, r0
}
  1091d8:	e1a00003 	mov	r0, r3
  1091dc:	e24bd004 	sub	sp, fp, #4
  1091e0:	e8bd8800 	pop	{fp, pc}

001091e4 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  1091e4:	e92d4800 	push	{fp, lr}
  1091e8:	e28db004 	add	fp, sp, #4
  1091ec:	e24dd010 	sub	sp, sp, #16
  1091f0:	e50b0008 	str	r0, [fp, #-8]
  1091f4:	e50b100c 	str	r1, [fp, #-12]
  1091f8:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  1091fc:	e51b2010 	ldr	r2, [fp, #-16]
  109200:	e51b100c 	ldr	r1, [fp, #-12]
  109204:	e51b0008 	ldr	r0, [fp, #-8]
  109208:	eb002ae2 	bl	113d98 <lwip_getpeername>
  10920c:	e1a03000 	mov	r3, r0
}
  109210:	e1a00003 	mov	r0, r3
  109214:	e24bd004 	sub	sp, fp, #4
  109218:	e8bd8800 	pop	{fp, pc}

0010921c <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  10921c:	e92d4800 	push	{fp, lr}
  109220:	e28db004 	add	fp, sp, #4
  109224:	e24dd010 	sub	sp, sp, #16
  109228:	e50b0008 	str	r0, [fp, #-8]
  10922c:	e50b100c 	str	r1, [fp, #-12]
  109230:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  109234:	e51b2010 	ldr	r2, [fp, #-16]
  109238:	e51b100c 	ldr	r1, [fp, #-12]
  10923c:	e51b0008 	ldr	r0, [fp, #-8]
  109240:	eb002ae3 	bl	113dd4 <lwip_getsockname>
  109244:	e1a03000 	mov	r3, r0
}
  109248:	e1a00003 	mov	r0, r3
  10924c:	e24bd004 	sub	sp, fp, #4
  109250:	e8bd8800 	pop	{fp, pc}

00109254 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  109254:	e92d4800 	push	{fp, lr}
  109258:	e28db004 	add	fp, sp, #4
  10925c:	e24dd010 	sub	sp, sp, #16
  109260:	e50b0008 	str	r0, [fp, #-8]
  109264:	e50b100c 	str	r1, [fp, #-12]
  109268:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  10926c:	e51b2010 	ldr	r2, [fp, #-16]
  109270:	e51b100c 	ldr	r1, [fp, #-12]
  109274:	e51b0008 	ldr	r0, [fp, #-8]
  109278:	eb0030f8 	bl	115660 <lwip_fcntl>
  10927c:	e1a03000 	mov	r3, r0
}
  109280:	e1a00003 	mov	r0, r3
  109284:	e24bd004 	sub	sp, fp, #4
  109288:	e8bd8800 	pop	{fp, pc}

0010928c <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  10928c:	e92d4800 	push	{fp, lr}
  109290:	e28db004 	add	fp, sp, #4
  109294:	e24dd010 	sub	sp, sp, #16
  109298:	e50b0008 	str	r0, [fp, #-8]
  10929c:	e50b100c 	str	r1, [fp, #-12]
  1092a0:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  1092a4:	e51b2010 	ldr	r2, [fp, #-16]
  1092a8:	e51b100c 	ldr	r1, [fp, #-12]
  1092ac:	e51b0008 	ldr	r0, [fp, #-8]
  1092b0:	eb003043 	bl	1153c4 <lwip_ioctl>
  1092b4:	e1a03000 	mov	r3, r0
}
  1092b8:	e1a00003 	mov	r0, r3
  1092bc:	e24bd004 	sub	sp, fp, #4
  1092c0:	e8bd8800 	pop	{fp, pc}

001092c4 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  1092c4:	e92d4800 	push	{fp, lr}
  1092c8:	e28db004 	add	fp, sp, #4
  1092cc:	e24dd008 	sub	sp, sp, #8
  1092d0:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  1092d4:	e51b0008 	ldr	r0, [fp, #-8]
  1092d8:	eb001b9b 	bl	11014c <lwip_gethostbyname>
  1092dc:	e1a02000 	mov	r2, r0
  1092e0:	e30d3494 	movw	r3, #54420	; 0xd494
  1092e4:	e3403014 	movt	r3, #20
  1092e8:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  1092ec:	e3a02014 	mov	r2, #20
  1092f0:	e3a01000 	mov	r1, #0
  1092f4:	e30d0498 	movw	r0, #54424	; 0xd498
  1092f8:	e3400014 	movt	r0, #20
  1092fc:	eb00df18 	bl	140f64 <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  109300:	e30d3494 	movw	r3, #54420	; 0xd494
  109304:	e3403014 	movt	r3, #20
  109308:	e5933000 	ldr	r3, [r3]
  10930c:	e5933010 	ldr	r3, [r3, #16]
  109310:	e5932000 	ldr	r2, [r3]
  109314:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  109318:	e3403014 	movt	r3, #20
  10931c:	e5922000 	ldr	r2, [r2]
  109320:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  109324:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  109328:	e3403014 	movt	r3, #20
  10932c:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  109330:	e3402014 	movt	r2, #20
  109334:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  109338:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  10933c:	e3403014 	movt	r3, #20
  109340:	e3a02000 	mov	r2, #0
  109344:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  109348:	e3a02c01 	mov	r2, #256	; 0x100
  10934c:	e51b1008 	ldr	r1, [fp, #-8]
  109350:	e30d04b8 	movw	r0, #54456	; 0xd4b8
  109354:	e3400014 	movt	r0, #20
  109358:	eb00dfe3 	bl	1412ec <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  10935c:	e30d34b8 	movw	r3, #54456	; 0xd4b8
  109360:	e3403014 	movt	r3, #20
  109364:	e3a02000 	mov	r2, #0
  109368:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  10936c:	e30d3498 	movw	r3, #54424	; 0xd498
  109370:	e3403014 	movt	r3, #20
  109374:	e30d24b8 	movw	r2, #54456	; 0xd4b8
  109378:	e3402014 	movt	r2, #20
  10937c:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  109380:	e30d35bc 	movw	r3, #54716	; 0xd5bc
  109384:	e3403014 	movt	r3, #20
  109388:	e3a02000 	mov	r2, #0
  10938c:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109390:	e30d3498 	movw	r3, #54424	; 0xd498
  109394:	e3403014 	movt	r3, #20
  109398:	e30d25bc 	movw	r2, #54716	; 0xd5bc
  10939c:	e3402014 	movt	r2, #20
  1093a0:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  1093a4:	e30d3498 	movw	r3, #54424	; 0xd498
  1093a8:	e3403014 	movt	r3, #20
  1093ac:	e3a02002 	mov	r2, #2
  1093b0:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  1093b4:	e30d3498 	movw	r3, #54424	; 0xd498
  1093b8:	e3403014 	movt	r3, #20
  1093bc:	e3a02004 	mov	r2, #4
  1093c0:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  1093c4:	e30d3498 	movw	r3, #54424	; 0xd498
  1093c8:	e3403014 	movt	r3, #20
  1093cc:	e30d24b0 	movw	r2, #54448	; 0xd4b0
  1093d0:	e3402014 	movt	r2, #20
  1093d4:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  1093d8:	e30d3494 	movw	r3, #54420	; 0xd494
  1093dc:	e3403014 	movt	r3, #20
  1093e0:	e30d2498 	movw	r2, #54424	; 0xd498
  1093e4:	e3402014 	movt	r2, #20
  1093e8:	e5832000 	str	r2, [r3]

    return p_hostent;
  1093ec:	e30d3494 	movw	r3, #54420	; 0xd494
  1093f0:	e3403014 	movt	r3, #20
  1093f4:	e5933000 	ldr	r3, [r3]
}
  1093f8:	e1a00003 	mov	r0, r3
  1093fc:	e24bd004 	sub	sp, fp, #4
  109400:	e8bd8800 	pop	{fp, pc}

00109404 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  109404:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109408:	e28db000 	add	fp, sp, #0
  10940c:	e24dd014 	sub	sp, sp, #20
  109410:	e50b0008 	str	r0, [fp, #-8]
  109414:	e50b100c 	str	r1, [fp, #-12]
  109418:	e50b2010 	str	r2, [fp, #-16]
  10941c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  109420:	e3a03000 	mov	r3, #0
}
  109424:	e1a00003 	mov	r0, r3
  109428:	e28bd000 	add	sp, fp, #0
  10942c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109430:	e12fff1e 	bx	lr

00109434 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  109434:	e92d4800 	push	{fp, lr}
  109438:	e28db004 	add	fp, sp, #4
  10943c:	e24dd010 	sub	sp, sp, #16
  109440:	e50b0008 	str	r0, [fp, #-8]
  109444:	e50b100c 	str	r1, [fp, #-12]
  109448:	e50b2010 	str	r2, [fp, #-16]
  10944c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  109450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109454:	e51b2010 	ldr	r2, [fp, #-16]
  109458:	e51b100c 	ldr	r1, [fp, #-12]
  10945c:	e51b0008 	ldr	r0, [fp, #-8]
  109460:	eb001c07 	bl	110484 <lwip_getaddrinfo>
  109464:	e1a03000 	mov	r3, r0
}
  109468:	e1a00003 	mov	r0, r3
  10946c:	e24bd004 	sub	sp, fp, #4
  109470:	e8bd8800 	pop	{fp, pc}

00109474 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  109474:	e92d4800 	push	{fp, lr}
  109478:	e28db004 	add	fp, sp, #4
  10947c:	e24dd008 	sub	sp, sp, #8
  109480:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  109484:	e51b0008 	ldr	r0, [fp, #-8]
  109488:	eb001bea 	bl	110438 <lwip_freeaddrinfo>
}
  10948c:	e320f000 	nop	{0}
  109490:	e24bd004 	sub	sp, fp, #4
  109494:	e8bd8800 	pop	{fp, pc}

00109498 <rt_list_init>:
{
  109498:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10949c:	e28db000 	add	fp, sp, #0
  1094a0:	e24dd00c 	sub	sp, sp, #12
  1094a4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1094a8:	e51b3008 	ldr	r3, [fp, #-8]
  1094ac:	e51b2008 	ldr	r2, [fp, #-8]
  1094b0:	e5832004 	str	r2, [r3, #4]
  1094b4:	e51b3008 	ldr	r3, [fp, #-8]
  1094b8:	e5932004 	ldr	r2, [r3, #4]
  1094bc:	e51b3008 	ldr	r3, [fp, #-8]
  1094c0:	e5832000 	str	r2, [r3]
}
  1094c4:	e320f000 	nop	{0}
  1094c8:	e28bd000 	add	sp, fp, #0
  1094cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1094d0:	e12fff1e 	bx	lr

001094d4 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  1094d4:	e92d4810 	push	{r4, fp, lr}
  1094d8:	e28db008 	add	fp, sp, #8
  1094dc:	e24dd024 	sub	sp, sp, #36	; 0x24
  1094e0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1094e4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1094e8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  1094ec:	e3e03000 	mvn	r3, #0
  1094f0:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  1094f4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1094f8:	eb000352 	bl	10a248 <dfs_net_getsocket>
  1094fc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  109500:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109504:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  109508:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10950c:	ebfff953 	bl	107a60 <sal_accept>
  109510:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  109514:	e51b3010 	ldr	r3, [fp, #-16]
  109518:	e3730001 	cmn	r3, #1
  10951c:	0a000050 	beq	109664 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  109520:	eb000272 	bl	109ef0 <fd_new>
  109524:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  109528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10952c:	e3530000 	cmp	r3, #0
  109530:	aa000003 	bge	109544 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  109534:	e51b0010 	ldr	r0, [fp, #-16]
  109538:	ebfffc25 	bl	1085d4 <sal_closesocket>
            return -ENOMEM;
  10953c:	e3e0300b 	mvn	r3, #11
  109540:	ea000048 	b	109668 <accept_internal+0x194>
        }

        d = fd_get(fd);
  109544:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109548:	eb00029d 	bl	109fc4 <fd_get>
  10954c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  109550:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109554:	e3530000 	cmp	r3, #0
  109558:	0a00003d 	beq	109654 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  10955c:	e3a00028 	mov	r0, #40	; 0x28
  109560:	ebffe68b 	bl	102f94 <rt_malloc>
  109564:	e1a02000 	mov	r2, r0
  109568:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10956c:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  109570:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109574:	e5933018 	ldr	r3, [r3, #24]
  109578:	e3530000 	cmp	r3, #0
  10957c:	1a000003 	bne	109590 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  109580:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109584:	eb0002ed 	bl	10a140 <fd_release>
                return -ENOMEM;
  109588:	e3e0300b 	mvn	r3, #11
  10958c:	ea000035 	b	109668 <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109594:	e5933018 	ldr	r3, [r3, #24]
  109598:	e3a02028 	mov	r2, #40	; 0x28
  10959c:	e3a01000 	mov	r1, #0
  1095a0:	e1a00003 	mov	r0, r3
  1095a4:	ebffe747 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  1095a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095ac:	e5933018 	ldr	r3, [r3, #24]
  1095b0:	e2833010 	add	r3, r3, #16
  1095b4:	e1a00003 	mov	r0, r3
  1095b8:	ebffffb6 	bl	109498 <rt_list_init>

            d->fnode->type = FT_SOCKET;
  1095bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c0:	e5933018 	ldr	r3, [r3, #24]
  1095c4:	e3a02001 	mov	r2, #1
  1095c8:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  1095cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095d0:	e5933018 	ldr	r3, [r3, #24]
  1095d4:	e3a02000 	mov	r2, #0
  1095d8:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  1095dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095e0:	e5933018 	ldr	r3, [r3, #24]
  1095e4:	e3a02000 	mov	r2, #0
  1095e8:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  1095ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095f0:	e5933018 	ldr	r3, [r3, #24]
  1095f4:	e3a02001 	mov	r2, #1
  1095f8:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  1095fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109600:	e5934018 	ldr	r4, [r3, #24]
  109604:	eb0003ae 	bl	10a4c4 <dfs_net_get_fops>
  109608:	e1a03000 	mov	r3, r0
  10960c:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  109610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109614:	e3a02002 	mov	r2, #2
  109618:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  10961c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109620:	e5933018 	ldr	r3, [r3, #24]
  109624:	e3a02000 	mov	r2, #0
  109628:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  10962c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109630:	e3a02000 	mov	r2, #0
  109634:	e3a03000 	mov	r3, #0
  109638:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  10963c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109640:	e5933018 	ldr	r3, [r3, #24]
  109644:	e51b2010 	ldr	r2, [fp, #-16]
  109648:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  10964c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109650:	ea000004 	b	109668 <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  109654:	e51b0010 	ldr	r0, [fp, #-16]
  109658:	ebfffbdd 	bl	1085d4 <sal_closesocket>
        return -ENOMEM;
  10965c:	e3e0300b 	mvn	r3, #11
  109660:	ea000000 	b	109668 <accept_internal+0x194>
    }

    return -1;
  109664:	e3e03000 	mvn	r3, #0
}
  109668:	e1a00003 	mov	r0, r3
  10966c:	e24bd008 	sub	sp, fp, #8
  109670:	e8bd8810 	pop	{r4, fp, pc}

00109674 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109674:	e92d4800 	push	{fp, lr}
  109678:	e28db004 	add	fp, sp, #4
  10967c:	e24dd018 	sub	sp, sp, #24
  109680:	e50b0010 	str	r0, [fp, #-16]
  109684:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109688:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  10968c:	e51b0010 	ldr	r0, [fp, #-16]
  109690:	eb0002ec 	bl	10a248 <dfs_net_getsocket>
  109694:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  109698:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10969c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096a0:	e51b0008 	ldr	r0, [fp, #-8]
  1096a4:	ebfff967 	bl	107c48 <sal_bind>
  1096a8:	e1a03000 	mov	r3, r0
}
  1096ac:	e1a00003 	mov	r0, r3
  1096b0:	e24bd004 	sub	sp, fp, #4
  1096b4:	e8bd8800 	pop	{fp, pc}

001096b8 <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  1096b8:	e92d4800 	push	{fp, lr}
  1096bc:	e28db004 	add	fp, sp, #4
  1096c0:	e24dd018 	sub	sp, sp, #24
  1096c4:	e50b0010 	str	r0, [fp, #-16]
  1096c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  1096d0:	e51b0010 	ldr	r0, [fp, #-16]
  1096d4:	eb0002db 	bl	10a248 <dfs_net_getsocket>
  1096d8:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  1096dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1096e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096e4:	e51b0008 	ldr	r0, [fp, #-8]
  1096e8:	ebfffaad 	bl	1081a4 <sal_connect>
  1096ec:	e1a03000 	mov	r3, r0
}
  1096f0:	e1a00003 	mov	r0, r3
  1096f4:	e24bd004 	sub	sp, fp, #4
  1096f8:	e8bd8800 	pop	{fp, pc}

001096fc <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1096fc:	e92d4800 	push	{fp, lr}
  109700:	e28db004 	add	fp, sp, #4
  109704:	e24dd020 	sub	sp, sp, #32
  109708:	e50b0010 	str	r0, [fp, #-16]
  10970c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109710:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109714:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109718:	e51b0010 	ldr	r0, [fp, #-16]
  10971c:	eb0002c9 	bl	10a248 <dfs_net_getsocket>
  109720:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  109724:	e59b3004 	ldr	r3, [fp, #4]
  109728:	e58d3000 	str	r3, [sp]
  10972c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109730:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109734:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109738:	e51b0008 	ldr	r0, [fp, #-8]
  10973c:	ebfffa6e 	bl	1080fc <sal_setsockopt>
  109740:	e1a03000 	mov	r3, r0
}
  109744:	e1a00003 	mov	r0, r3
  109748:	e24bd004 	sub	sp, fp, #4
  10974c:	e8bd8800 	pop	{fp, pc}

00109750 <listen_internal>:

int listen_internal(int s, int backlog)
{
  109750:	e92d4800 	push	{fp, lr}
  109754:	e28db004 	add	fp, sp, #4
  109758:	e24dd010 	sub	sp, sp, #16
  10975c:	e50b0010 	str	r0, [fp, #-16]
  109760:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  109764:	e51b0010 	ldr	r0, [fp, #-16]
  109768:	eb0002b6 	bl	10a248 <dfs_net_getsocket>
  10976c:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  109770:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109774:	e51b0008 	ldr	r0, [fp, #-8]
  109778:	ebfffab8 	bl	108260 <sal_listen>
  10977c:	e1a03000 	mov	r3, r0
}
  109780:	e1a00003 	mov	r0, r3
  109784:	e24bd004 	sub	sp, fp, #4
  109788:	e8bd8800 	pop	{fp, pc}

0010978c <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  10978c:	e92d4800 	push	{fp, lr}
  109790:	e28db004 	add	fp, sp, #4
  109794:	e24dd020 	sub	sp, sp, #32
  109798:	e50b0010 	str	r0, [fp, #-16]
  10979c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097a0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1097a4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1097a8:	e51b0010 	ldr	r0, [fp, #-16]
  1097ac:	eb0002a5 	bl	10a248 <dfs_net_getsocket>
  1097b0:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  1097b4:	e3a03000 	mov	r3, #0
  1097b8:	e58d3004 	str	r3, [sp, #4]
  1097bc:	e3a03000 	mov	r3, #0
  1097c0:	e58d3000 	str	r3, [sp]
  1097c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097d0:	e51b0008 	ldr	r0, [fp, #-8]
  1097d4:	ebfffac5 	bl	1082f0 <sal_recvfrom>
  1097d8:	e1a03000 	mov	r3, r0
}
  1097dc:	e1a00003 	mov	r0, r3
  1097e0:	e24bd004 	sub	sp, fp, #4
  1097e4:	e8bd8800 	pop	{fp, pc}

001097e8 <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  1097e8:	e92d4800 	push	{fp, lr}
  1097ec:	e28db004 	add	fp, sp, #4
  1097f0:	e24dd020 	sub	sp, sp, #32
  1097f4:	e50b0010 	str	r0, [fp, #-16]
  1097f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097fc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109800:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109804:	e51b0010 	ldr	r0, [fp, #-16]
  109808:	eb00028e 	bl	10a248 <dfs_net_getsocket>
  10980c:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  109810:	e59b3008 	ldr	r3, [fp, #8]
  109814:	e58d3004 	str	r3, [sp, #4]
  109818:	e59b3004 	ldr	r3, [fp, #4]
  10981c:	e58d3000 	str	r3, [sp]
  109820:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109824:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109828:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10982c:	e51b0008 	ldr	r0, [fp, #-8]
  109830:	ebfffaae 	bl	1082f0 <sal_recvfrom>
  109834:	e1a03000 	mov	r3, r0
}
  109838:	e1a00003 	mov	r0, r3
  10983c:	e24bd004 	sub	sp, fp, #4
  109840:	e8bd8800 	pop	{fp, pc}

00109844 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  109844:	e92d4800 	push	{fp, lr}
  109848:	e28db004 	add	fp, sp, #4
  10984c:	e24dd020 	sub	sp, sp, #32
  109850:	e50b0010 	str	r0, [fp, #-16]
  109854:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109858:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10985c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109860:	e51b0010 	ldr	r0, [fp, #-16]
  109864:	eb000277 	bl	10a248 <dfs_net_getsocket>
  109868:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  10986c:	e3a03000 	mov	r3, #0
  109870:	e58d3004 	str	r3, [sp, #4]
  109874:	e3a03000 	mov	r3, #0
  109878:	e58d3000 	str	r3, [sp]
  10987c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109880:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109884:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109888:	e51b0008 	ldr	r0, [fp, #-8]
  10988c:	ebfffacb 	bl	1083c0 <sal_sendto>
  109890:	e1a03000 	mov	r3, r0
}
  109894:	e1a00003 	mov	r0, r3
  109898:	e24bd004 	sub	sp, fp, #4
  10989c:	e8bd8800 	pop	{fp, pc}

001098a0 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  1098a0:	e92d4800 	push	{fp, lr}
  1098a4:	e28db004 	add	fp, sp, #4
  1098a8:	e24dd020 	sub	sp, sp, #32
  1098ac:	e50b0010 	str	r0, [fp, #-16]
  1098b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1098b4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1098b8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1098bc:	e51b0010 	ldr	r0, [fp, #-16]
  1098c0:	eb000260 	bl	10a248 <dfs_net_getsocket>
  1098c4:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  1098c8:	e59b3008 	ldr	r3, [fp, #8]
  1098cc:	e58d3004 	str	r3, [sp, #4]
  1098d0:	e59b3004 	ldr	r3, [fp, #4]
  1098d4:	e58d3000 	str	r3, [sp]
  1098d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1098dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1098e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1098e4:	e51b0008 	ldr	r0, [fp, #-8]
  1098e8:	ebfffab4 	bl	1083c0 <sal_sendto>
  1098ec:	e1a03000 	mov	r3, r0
}
  1098f0:	e1a00003 	mov	r0, r3
  1098f4:	e24bd004 	sub	sp, fp, #4
  1098f8:	e8bd8800 	pop	{fp, pc}

001098fc <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  1098fc:	e92d4810 	push	{r4, fp, lr}
  109900:	e28db008 	add	fp, sp, #8
  109904:	e24dd024 	sub	sp, sp, #36	; 0x24
  109908:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10990c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  109910:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  109914:	eb000175 	bl	109ef0 <fd_new>
  109918:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  10991c:	e51b3010 	ldr	r3, [fp, #-16]
  109920:	e3530000 	cmp	r3, #0
  109924:	aa000001 	bge	109930 <socket_internal+0x34>
    {
        return -ENOMEM;
  109928:	e3e0300b 	mvn	r3, #11
  10992c:	ea00004f 	b	109a70 <socket_internal+0x174>
    }
    d = fd_get(fd);
  109930:	e51b0010 	ldr	r0, [fp, #-16]
  109934:	eb0001a2 	bl	109fc4 <fd_get>
  109938:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  10993c:	e3a00028 	mov	r0, #40	; 0x28
  109940:	ebffe593 	bl	102f94 <rt_malloc>
  109944:	e1a02000 	mov	r2, r0
  109948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10994c:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  109950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109954:	e5933018 	ldr	r3, [r3, #24]
  109958:	e3530000 	cmp	r3, #0
  10995c:	1a000003 	bne	109970 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  109960:	e51b0010 	ldr	r0, [fp, #-16]
  109964:	eb0001f5 	bl	10a140 <fd_release>
        return -ENOMEM;
  109968:	e3e0300b 	mvn	r3, #11
  10996c:	ea00003f 	b	109a70 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  109970:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109974:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  109978:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10997c:	ebfffac3 	bl	108490 <sal_socket>
  109980:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  109984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109988:	e3530000 	cmp	r3, #0
  10998c:	ba000030 	blt	109a54 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109994:	e5933018 	ldr	r3, [r3, #24]
  109998:	e3a02028 	mov	r2, #40	; 0x28
  10999c:	e3a01000 	mov	r1, #0
  1099a0:	e1a00003 	mov	r0, r3
  1099a4:	ebffe647 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  1099a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099ac:	e5933018 	ldr	r3, [r3, #24]
  1099b0:	e2833010 	add	r3, r3, #16
  1099b4:	e1a00003 	mov	r0, r3
  1099b8:	ebfffeb6 	bl	109498 <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  1099bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c0:	e5933018 	ldr	r3, [r3, #24]
  1099c4:	e3a02001 	mov	r2, #1
  1099c8:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  1099cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d0:	e5933018 	ldr	r3, [r3, #24]
  1099d4:	e3a02000 	mov	r2, #0
  1099d8:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  1099dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099e0:	e5933018 	ldr	r3, [r3, #24]
  1099e4:	e3a02000 	mov	r2, #0
  1099e8:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  1099ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099f0:	e5933018 	ldr	r3, [r3, #24]
  1099f4:	e3a02001 	mov	r2, #1
  1099f8:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  1099fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a00:	e5934018 	ldr	r4, [r3, #24]
  109a04:	eb0002ae 	bl	10a4c4 <dfs_net_get_fops>
  109a08:	e1a03000 	mov	r3, r0
  109a0c:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  109a10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a14:	e3a02002 	mov	r2, #2
  109a18:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  109a1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a20:	e5933018 	ldr	r3, [r3, #24]
  109a24:	e3a02000 	mov	r2, #0
  109a28:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  109a2c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109a30:	e3a02000 	mov	r2, #0
  109a34:	e3a03000 	mov	r3, #0
  109a38:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  109a3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a40:	e5933018 	ldr	r3, [r3, #24]
  109a44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109a48:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109a4c:	e51b3010 	ldr	r3, [fp, #-16]
  109a50:	ea000006 	b	109a70 <socket_internal+0x174>
        rt_free(d->fnode);
  109a54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a58:	e5933018 	ldr	r3, [r3, #24]
  109a5c:	e1a00003 	mov	r0, r3
  109a60:	ebffe555 	bl	102fbc <rt_free>
        fd_release(fd);
  109a64:	e51b0010 	ldr	r0, [fp, #-16]
  109a68:	eb0001b4 	bl	10a140 <fd_release>
        return -ENOMEM;
  109a6c:	e3e0300b 	mvn	r3, #11
  109a70:	e1a00003 	mov	r0, r3
  109a74:	e24bd008 	sub	sp, fp, #8
  109a78:	e8bd8810 	pop	{r4, fp, pc}

00109a7c <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109a7c:	e92d4800 	push	{fp, lr}
  109a80:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109a84:	e30d3618 	movw	r3, #54808	; 0xd618
  109a88:	e3403014 	movt	r3, #20
  109a8c:	e5933000 	ldr	r3, [r3]
  109a90:	e3530000 	cmp	r3, #0
  109a94:	0a000004 	beq	109aac <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109a98:	e3050ed8 	movw	r0, #24280	; 0x5ed8
  109a9c:	e3400014 	movt	r0, #20
  109aa0:	ebffe59b 	bl	103114 <rt_kprintf>
        return 0;
  109aa4:	e3a03000 	mov	r3, #0
  109aa8:	ea000016 	b	109b08 <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109aac:	eb0001c6 	bl	10a1cc <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109ab0:	e3a02008 	mov	r2, #8
  109ab4:	e3a01000 	mov	r1, #0
  109ab8:	e30d0610 	movw	r0, #54800	; 0xd610
  109abc:	e3400014 	movt	r0, #20
  109ac0:	eb00dd27 	bl	140f64 <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109ac4:	e3a02000 	mov	r2, #0
  109ac8:	e3051eec 	movw	r1, #24300	; 0x5eec
  109acc:	e3401014 	movt	r1, #20
  109ad0:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ad4:	e3400014 	movt	r0, #20
  109ad8:	ebffdc9a 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109adc:	e3a02000 	mov	r2, #0
  109ae0:	e3051ef4 	movw	r1, #24308	; 0x5ef4
  109ae4:	e3401014 	movt	r1, #20
  109ae8:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109aec:	e3400014 	movt	r0, #20
  109af0:	ebffdc94 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109af4:	e30d3618 	movw	r3, #54808	; 0xd618
  109af8:	e3403014 	movt	r3, #20
  109afc:	e3a02001 	mov	r2, #1
  109b00:	e5832000 	str	r2, [r3]

    return 0;
  109b04:	e3a03000 	mov	r3, #0
}
  109b08:	e1a00003 	mov	r0, r3
  109b0c:	e8bd8800 	pop	{fp, pc}

00109b10 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109b10:	e92d4800 	push	{fp, lr}
  109b14:	e28db004 	add	fp, sp, #4
  109b18:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b1c:	e3e03006 	mvn	r3, #6
  109b20:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b24:	ea000004 	b	109b3c <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109b28:	e3e01000 	mvn	r1, #0
  109b2c:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109b30:	e3400014 	movt	r0, #20
  109b34:	ebffdcf1 	bl	100f00 <rt_mutex_take>
  109b38:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109b3c:	e51b3008 	ldr	r3, [fp, #-8]
  109b40:	e3730007 	cmn	r3, #7
  109b44:	0afffff7 	beq	109b28 <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109b48:	e51b3008 	ldr	r3, [fp, #-8]
  109b4c:	e3530000 	cmp	r3, #0
  109b50:	0a000005 	beq	109b6c <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109b54:	e3a0203d 	mov	r2, #61	; 0x3d
  109b58:	e3051f68 	movw	r1, #24424	; 0x5f68
  109b5c:	e3401014 	movt	r1, #20
  109b60:	e3050efc 	movw	r0, #24316	; 0x5efc
  109b64:	e3400014 	movt	r0, #20
  109b68:	ebffe68a 	bl	103598 <rt_assert_handler>
    }
}
  109b6c:	e320f000 	nop	{0}
  109b70:	e24bd004 	sub	sp, fp, #4
  109b74:	e8bd8800 	pop	{fp, pc}

00109b78 <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109b78:	e92d4800 	push	{fp, lr}
  109b7c:	e28db004 	add	fp, sp, #4
  109b80:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b84:	e3e03006 	mvn	r3, #6
  109b88:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b8c:	ea000004 	b	109ba4 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109b90:	e3e01000 	mvn	r1, #0
  109b94:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109b98:	e3400014 	movt	r0, #20
  109b9c:	ebffdcd7 	bl	100f00 <rt_mutex_take>
  109ba0:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109ba4:	e51b3008 	ldr	r3, [fp, #-8]
  109ba8:	e3730007 	cmn	r3, #7
  109bac:	0afffff7 	beq	109b90 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109bb0:	e51b3008 	ldr	r3, [fp, #-8]
  109bb4:	e3530000 	cmp	r3, #0
  109bb8:	0a000005 	beq	109bd4 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109bbc:	e3a0204c 	mov	r2, #76	; 0x4c
  109bc0:	e3051f74 	movw	r1, #24436	; 0x5f74
  109bc4:	e3401014 	movt	r1, #20
  109bc8:	e3050efc 	movw	r0, #24316	; 0x5efc
  109bcc:	e3400014 	movt	r0, #20
  109bd0:	ebffe670 	bl	103598 <rt_assert_handler>
    }
}
  109bd4:	e320f000 	nop	{0}
  109bd8:	e24bd004 	sub	sp, fp, #4
  109bdc:	e8bd8800 	pop	{fp, pc}

00109be0 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109be0:	e92d4800 	push	{fp, lr}
  109be4:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109be8:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109bec:	e3400014 	movt	r0, #20
  109bf0:	ebffdce0 	bl	100f78 <rt_mutex_release>
}
  109bf4:	e320f000 	nop	{0}
  109bf8:	e8bd8800 	pop	{fp, pc}

00109bfc <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109bfc:	e92d4800 	push	{fp, lr}
  109c00:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109c04:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109c08:	e3400014 	movt	r0, #20
  109c0c:	ebffdcd9 	bl	100f78 <rt_mutex_release>
}
  109c10:	e320f000 	nop	{0}
  109c14:	e8bd8800 	pop	{fp, pc}

00109c18 <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109c18:	e92d4800 	push	{fp, lr}
  109c1c:	e28db004 	add	fp, sp, #4
  109c20:	e24dd018 	sub	sp, sp, #24
  109c24:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109c28:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109c2c:	e3a03000 	mov	r3, #0
  109c30:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109c34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c38:	e5932000 	ldr	r2, [r3]
  109c3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c40:	e1520003 	cmp	r2, r3
  109c44:	9a000001 	bls	109c50 <fd_slot_expand+0x38>
    {
        return fd;
  109c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c4c:	ea000032 	b	109d1c <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109c50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c54:	e353001f 	cmp	r3, #31
  109c58:	da000001 	ble	109c64 <fd_slot_expand+0x4c>
    {
        return -1;
  109c5c:	e3e03000 	mvn	r3, #0
  109c60:	ea00002d 	b	109d1c <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109c64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c68:	e2833004 	add	r3, r3, #4
  109c6c:	e3c33003 	bic	r3, r3, #3
  109c70:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109c74:	e51b3008 	ldr	r3, [fp, #-8]
  109c78:	e3530020 	cmp	r3, #32
  109c7c:	da000001 	ble	109c88 <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109c80:	e3a03020 	mov	r3, #32
  109c84:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109c88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c8c:	e5932004 	ldr	r2, [r3, #4]
  109c90:	e51b3008 	ldr	r3, [fp, #-8]
  109c94:	e1a03103 	lsl	r3, r3, #2
  109c98:	e1a01003 	mov	r1, r3
  109c9c:	e1a00002 	mov	r0, r2
  109ca0:	ebffe4cd 	bl	102fdc <rt_realloc>
  109ca4:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109ca8:	e51b3010 	ldr	r3, [fp, #-16]
  109cac:	e3530000 	cmp	r3, #0
  109cb0:	1a000001 	bne	109cbc <fd_slot_expand+0xa4>
    {
        return -1;
  109cb4:	e3e03000 	mvn	r3, #0
  109cb8:	ea000017 	b	109d1c <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109cbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cc0:	e5933000 	ldr	r3, [r3]
  109cc4:	e50b300c 	str	r3, [fp, #-12]
  109cc8:	ea000008 	b	109cf0 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109ccc:	e51b300c 	ldr	r3, [fp, #-12]
  109cd0:	e1a03103 	lsl	r3, r3, #2
  109cd4:	e51b2010 	ldr	r2, [fp, #-16]
  109cd8:	e0823003 	add	r3, r2, r3
  109cdc:	e3a02000 	mov	r2, #0
  109ce0:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109ce4:	e51b300c 	ldr	r3, [fp, #-12]
  109ce8:	e2833001 	add	r3, r3, #1
  109cec:	e50b300c 	str	r3, [fp, #-12]
  109cf0:	e51b200c 	ldr	r2, [fp, #-12]
  109cf4:	e51b3008 	ldr	r3, [fp, #-8]
  109cf8:	e1520003 	cmp	r2, r3
  109cfc:	bafffff2 	blt	109ccc <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109d00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109d04:	e51b2010 	ldr	r2, [fp, #-16]
  109d08:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109d0c:	e51b2008 	ldr	r2, [fp, #-8]
  109d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109d14:	e5832000 	str	r2, [r3]

    return fd;
  109d18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109d1c:	e1a00003 	mov	r0, r3
  109d20:	e24bd004 	sub	sp, fp, #4
  109d24:	e8bd8800 	pop	{fp, pc}

00109d28 <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d28:	e92d4800 	push	{fp, lr}
  109d2c:	e28db004 	add	fp, sp, #4
  109d30:	e24dd010 	sub	sp, sp, #16
  109d34:	e50b0010 	str	r0, [fp, #-16]
  109d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d40:	e50b3008 	str	r3, [fp, #-8]
  109d44:	ea00000c 	b	109d7c <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109d48:	e51b3010 	ldr	r3, [fp, #-16]
  109d4c:	e5932004 	ldr	r2, [r3, #4]
  109d50:	e51b3008 	ldr	r3, [fp, #-8]
  109d54:	e1a03103 	lsl	r3, r3, #2
  109d58:	e0823003 	add	r3, r2, r3
  109d5c:	e5933000 	ldr	r3, [r3]
  109d60:	e3530000 	cmp	r3, #0
  109d64:	1a000001 	bne	109d70 <fd_slot_alloc+0x48>
        {
            return idx;
  109d68:	e51b3008 	ldr	r3, [fp, #-8]
  109d6c:	ea00001a 	b	109ddc <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d70:	e51b3008 	ldr	r3, [fp, #-8]
  109d74:	e2833001 	add	r3, r3, #1
  109d78:	e50b3008 	str	r3, [fp, #-8]
  109d7c:	e51b3010 	ldr	r3, [fp, #-16]
  109d80:	e5933000 	ldr	r3, [r3]
  109d84:	e1a02003 	mov	r2, r3
  109d88:	e51b3008 	ldr	r3, [fp, #-8]
  109d8c:	e1530002 	cmp	r3, r2
  109d90:	baffffec 	blt	109d48 <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109d94:	e51b3010 	ldr	r3, [fp, #-16]
  109d98:	e5933000 	ldr	r3, [r3]
  109d9c:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109da0:	e51b2008 	ldr	r2, [fp, #-8]
  109da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109da8:	e1520003 	cmp	r2, r3
  109dac:	aa000001 	bge	109db8 <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109db4:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109db8:	e51b1008 	ldr	r1, [fp, #-8]
  109dbc:	e51b0010 	ldr	r0, [fp, #-16]
  109dc0:	ebffff94 	bl	109c18 <fd_slot_expand>
  109dc4:	e1a03000 	mov	r3, r0
  109dc8:	e3530000 	cmp	r3, #0
  109dcc:	aa000001 	bge	109dd8 <fd_slot_alloc+0xb0>
    {
        return -1;
  109dd0:	e3e03000 	mvn	r3, #0
  109dd4:	ea000000 	b	109ddc <fd_slot_alloc+0xb4>
    }
    return idx;
  109dd8:	e51b3008 	ldr	r3, [fp, #-8]
}
  109ddc:	e1a00003 	mov	r0, r3
  109de0:	e24bd004 	sub	sp, fp, #4
  109de4:	e8bd8800 	pop	{fp, pc}

00109de8 <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109de8:	e92d4800 	push	{fp, lr}
  109dec:	e28db004 	add	fp, sp, #4
  109df0:	e24dd010 	sub	sp, sp, #16
  109df4:	e50b0010 	str	r0, [fp, #-16]
  109df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109dfc:	e3a03000 	mov	r3, #0
  109e00:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109e04:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109e08:	e51b0010 	ldr	r0, [fp, #-16]
  109e0c:	ebffffc5 	bl	109d28 <fd_slot_alloc>
  109e10:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109e14:	e51b300c 	ldr	r3, [fp, #-12]
  109e18:	e3530000 	cmp	r3, #0
  109e1c:	aa000001 	bge	109e28 <fd_alloc+0x40>
    {
        return -1;
  109e20:	e3e03000 	mvn	r3, #0
  109e24:	ea00001a 	b	109e94 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109e28:	e3a01020 	mov	r1, #32
  109e2c:	e3a00001 	mov	r0, #1
  109e30:	ebffe475 	bl	10300c <rt_calloc>
  109e34:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109e38:	e51b3008 	ldr	r3, [fp, #-8]
  109e3c:	e3530000 	cmp	r3, #0
  109e40:	1a000001 	bne	109e4c <fd_alloc+0x64>
    {
        return -1;
  109e44:	e3e03000 	mvn	r3, #0
  109e48:	ea000011 	b	109e94 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109e4c:	e51b3008 	ldr	r3, [fp, #-8]
  109e50:	e3a02001 	mov	r2, #1
  109e54:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109e58:	e51b2008 	ldr	r2, [fp, #-8]
  109e5c:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109e60:	e34f3fff 	movt	r3, #65535	; 0xffff
  109e64:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109e68:	e51b3008 	ldr	r3, [fp, #-8]
  109e6c:	e3a02000 	mov	r2, #0
  109e70:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109e74:	e51b3010 	ldr	r3, [fp, #-16]
  109e78:	e5932004 	ldr	r2, [r3, #4]
  109e7c:	e51b300c 	ldr	r3, [fp, #-12]
  109e80:	e1a03103 	lsl	r3, r3, #2
  109e84:	e0823003 	add	r3, r2, r3
  109e88:	e51b2008 	ldr	r2, [fp, #-8]
  109e8c:	e5832000 	str	r2, [r3]

    return idx;
  109e90:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e94:	e1a00003 	mov	r0, r3
  109e98:	e24bd004 	sub	sp, fp, #4
  109e9c:	e8bd8800 	pop	{fp, pc}

00109ea0 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109ea0:	e92d4800 	push	{fp, lr}
  109ea4:	e28db004 	add	fp, sp, #4
  109ea8:	e24dd010 	sub	sp, sp, #16
  109eac:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109eb0:	ebffff30 	bl	109b78 <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109eb4:	e3a01003 	mov	r1, #3
  109eb8:	e51b0010 	ldr	r0, [fp, #-16]
  109ebc:	ebffffc9 	bl	109de8 <fd_alloc>
  109ec0:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109ec4:	e51b3008 	ldr	r3, [fp, #-8]
  109ec8:	e3530000 	cmp	r3, #0
  109ecc:	aa000002 	bge	109edc <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109ed0:	e3050f00 	movw	r0, #24320	; 0x5f00
  109ed4:	e3400014 	movt	r0, #20
  109ed8:	ebffe48d 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109edc:	ebffff46 	bl	109bfc <dfs_fd_unlock>
    return idx;
  109ee0:	e51b3008 	ldr	r3, [fp, #-8]
}
  109ee4:	e1a00003 	mov	r0, r3
  109ee8:	e24bd004 	sub	sp, fp, #4
  109eec:	e8bd8800 	pop	{fp, pc}

00109ef0 <fd_new>:

int fd_new(void)
{
  109ef0:	e92d4800 	push	{fp, lr}
  109ef4:	e28db004 	add	fp, sp, #4
  109ef8:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109efc:	e3a03000 	mov	r3, #0
  109f00:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109f04:	eb000099 	bl	10a170 <dfs_fdtable_get>
  109f08:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109f0c:	e51b0008 	ldr	r0, [fp, #-8]
  109f10:	ebffffe2 	bl	109ea0 <fdt_fd_new>
  109f14:	e1a03000 	mov	r3, r0
}
  109f18:	e1a00003 	mov	r0, r3
  109f1c:	e24bd004 	sub	sp, fp, #4
  109f20:	e8bd8800 	pop	{fp, pc}

00109f24 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109f24:	e92d4800 	push	{fp, lr}
  109f28:	e28db004 	add	fp, sp, #4
  109f2c:	e24dd010 	sub	sp, sp, #16
  109f30:	e50b0010 	str	r0, [fp, #-16]
  109f34:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f3c:	e3530000 	cmp	r3, #0
  109f40:	ba000005 	blt	109f5c <fdt_fd_get+0x38>
  109f44:	e51b3010 	ldr	r3, [fp, #-16]
  109f48:	e5933000 	ldr	r3, [r3]
  109f4c:	e1a02003 	mov	r2, r3
  109f50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f54:	e1530002 	cmp	r3, r2
  109f58:	ba000001 	blt	109f64 <fdt_fd_get+0x40>
    {
        return NULL;
  109f5c:	e3a03000 	mov	r3, #0
  109f60:	ea000014 	b	109fb8 <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109f64:	ebffff03 	bl	109b78 <dfs_fd_lock>
    d = fdt->fds[fd];
  109f68:	e51b3010 	ldr	r3, [fp, #-16]
  109f6c:	e5932004 	ldr	r2, [r3, #4]
  109f70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f74:	e1a03103 	lsl	r3, r3, #2
  109f78:	e0823003 	add	r3, r2, r3
  109f7c:	e5933000 	ldr	r3, [r3]
  109f80:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109f84:	e51b3008 	ldr	r3, [fp, #-8]
  109f88:	e3530000 	cmp	r3, #0
  109f8c:	0a000004 	beq	109fa4 <fdt_fd_get+0x80>
  109f90:	e51b3008 	ldr	r3, [fp, #-8]
  109f94:	e1d330b0 	ldrh	r3, [r3]
  109f98:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109f9c:	e1530002 	cmp	r3, r2
  109fa0:	0a000002 	beq	109fb0 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109fa4:	ebffff14 	bl	109bfc <dfs_fd_unlock>
        return NULL;
  109fa8:	e3a03000 	mov	r3, #0
  109fac:	ea000001 	b	109fb8 <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109fb0:	ebffff11 	bl	109bfc <dfs_fd_unlock>

    return d;
  109fb4:	e51b3008 	ldr	r3, [fp, #-8]
}
  109fb8:	e1a00003 	mov	r0, r3
  109fbc:	e24bd004 	sub	sp, fp, #4
  109fc0:	e8bd8800 	pop	{fp, pc}

00109fc4 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109fc4:	e92d4800 	push	{fp, lr}
  109fc8:	e28db004 	add	fp, sp, #4
  109fcc:	e24dd010 	sub	sp, sp, #16
  109fd0:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109fd4:	eb000065 	bl	10a170 <dfs_fdtable_get>
  109fd8:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109fdc:	e51b1010 	ldr	r1, [fp, #-16]
  109fe0:	e51b0008 	ldr	r0, [fp, #-8]
  109fe4:	ebffffce 	bl	109f24 <fdt_fd_get>
  109fe8:	e1a03000 	mov	r3, r0
}
  109fec:	e1a00003 	mov	r0, r3
  109ff0:	e24bd004 	sub	sp, fp, #4
  109ff4:	e8bd8800 	pop	{fp, pc}

00109ff8 <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109ff8:	e92d4800 	push	{fp, lr}
  109ffc:	e28db004 	add	fp, sp, #4
  10a000:	e24dd010 	sub	sp, sp, #16
  10a004:	e50b0010 	str	r0, [fp, #-16]
  10a008:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  10a00c:	e3a03000 	mov	r3, #0
  10a010:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  10a014:	e51b3010 	ldr	r3, [fp, #-16]
  10a018:	e3530000 	cmp	r3, #0
  10a01c:	1a000005 	bne	10a038 <fdt_fd_release+0x40>
  10a020:	e300210b 	movw	r2, #267	; 0x10b
  10a024:	e3051f80 	movw	r1, #24448	; 0x5f80
  10a028:	e3401014 	movt	r1, #20
  10a02c:	e3050f3c 	movw	r0, #24380	; 0x5f3c
  10a030:	e3400014 	movt	r0, #20
  10a034:	ebffe557 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  10a038:	ebfffece 	bl	109b78 <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  10a03c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a040:	e3530000 	cmp	r3, #0
  10a044:	ba000004 	blt	10a05c <fdt_fd_release+0x64>
  10a048:	e51b3010 	ldr	r3, [fp, #-16]
  10a04c:	e5932000 	ldr	r2, [r3]
  10a050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a054:	e1520003 	cmp	r2, r3
  10a058:	8a000001 	bhi	10a064 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a05c:	ebfffee6 	bl	109bfc <dfs_fd_unlock>
        return;
  10a060:	ea000034 	b	10a138 <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a064:	e51b3010 	ldr	r3, [fp, #-16]
  10a068:	e5932004 	ldr	r2, [r3, #4]
  10a06c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a070:	e1a03103 	lsl	r3, r3, #2
  10a074:	e0823003 	add	r3, r2, r3
  10a078:	e5933000 	ldr	r3, [r3]
  10a07c:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a080:	e51b3008 	ldr	r3, [fp, #-8]
  10a084:	e3530000 	cmp	r3, #0
  10a088:	1a000001 	bne	10a094 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a08c:	ebfffeda 	bl	109bfc <dfs_fd_unlock>
        return;
  10a090:	ea000028 	b	10a138 <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a094:	e51b3010 	ldr	r3, [fp, #-16]
  10a098:	e5932004 	ldr	r2, [r3, #4]
  10a09c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a0a0:	e1a03103 	lsl	r3, r3, #2
  10a0a4:	e0823003 	add	r3, r2, r3
  10a0a8:	e3a02000 	mov	r2, #0
  10a0ac:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a0b0:	e51b3008 	ldr	r3, [fp, #-8]
  10a0b4:	e1d330b0 	ldrh	r3, [r3]
  10a0b8:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a0bc:	e1530002 	cmp	r3, r2
  10a0c0:	0a000005 	beq	10a0dc <fdt_fd_release+0xe4>
  10a0c4:	e300211e 	movw	r2, #286	; 0x11e
  10a0c8:	e3051f80 	movw	r1, #24448	; 0x5f80
  10a0cc:	e3401014 	movt	r1, #20
  10a0d0:	e3050f48 	movw	r0, #24392	; 0x5f48
  10a0d4:	e3400014 	movt	r0, #20
  10a0d8:	ebffe52e 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a0dc:	e51b3008 	ldr	r3, [fp, #-8]
  10a0e0:	e5933008 	ldr	r3, [r3, #8]
  10a0e4:	e2432001 	sub	r2, r3, #1
  10a0e8:	e51b3008 	ldr	r3, [fp, #-8]
  10a0ec:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a0f0:	e51b3008 	ldr	r3, [fp, #-8]
  10a0f4:	e5933008 	ldr	r3, [r3, #8]
  10a0f8:	e3530000 	cmp	r3, #0
  10a0fc:	1a00000c 	bne	10a134 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a100:	e51b3008 	ldr	r3, [fp, #-8]
  10a104:	e5933018 	ldr	r3, [r3, #24]
  10a108:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a10c:	e51b300c 	ldr	r3, [fp, #-12]
  10a110:	e3530000 	cmp	r3, #0
  10a114:	0a000004 	beq	10a12c <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a118:	e51b300c 	ldr	r3, [fp, #-12]
  10a11c:	e593300c 	ldr	r3, [r3, #12]
  10a120:	e2432001 	sub	r2, r3, #1
  10a124:	e51b300c 	ldr	r3, [fp, #-12]
  10a128:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a12c:	e51b0008 	ldr	r0, [fp, #-8]
  10a130:	ebffe3a1 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a134:	ebfffeb0 	bl	109bfc <dfs_fd_unlock>
}
  10a138:	e24bd004 	sub	sp, fp, #4
  10a13c:	e8bd8800 	pop	{fp, pc}

0010a140 <fd_release>:

void fd_release(int fd)
{
  10a140:	e92d4800 	push	{fp, lr}
  10a144:	e28db004 	add	fp, sp, #4
  10a148:	e24dd010 	sub	sp, sp, #16
  10a14c:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a150:	eb000006 	bl	10a170 <dfs_fdtable_get>
  10a154:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a158:	e51b1010 	ldr	r1, [fp, #-16]
  10a15c:	e51b0008 	ldr	r0, [fp, #-8]
  10a160:	ebffffa4 	bl	109ff8 <fdt_fd_release>
}
  10a164:	e320f000 	nop	{0}
  10a168:	e24bd004 	sub	sp, fp, #4
  10a16c:	e8bd8800 	pop	{fp, pc}

0010a170 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a170:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a174:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a178:	e30d3610 	movw	r3, #54800	; 0xd610
  10a17c:	e3403014 	movt	r3, #20
}
  10a180:	e1a00003 	mov	r0, r3
  10a184:	e28bd000 	add	sp, fp, #0
  10a188:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a18c:	e12fff1e 	bx	lr

0010a190 <rt_list_init>:
{
  10a190:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a194:	e28db000 	add	fp, sp, #0
  10a198:	e24dd00c 	sub	sp, sp, #12
  10a19c:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a1a0:	e51b3008 	ldr	r3, [fp, #-8]
  10a1a4:	e51b2008 	ldr	r2, [fp, #-8]
  10a1a8:	e5832004 	str	r2, [r3, #4]
  10a1ac:	e51b3008 	ldr	r3, [fp, #-8]
  10a1b0:	e5932004 	ldr	r2, [r3, #4]
  10a1b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1b8:	e5832000 	str	r2, [r3]
}
  10a1bc:	e320f000 	nop	{0}
  10a1c0:	e28bd000 	add	sp, fp, #0
  10a1c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a1c8:	e12fff1e 	bx	lr

0010a1cc <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a1cc:	e92d4800 	push	{fp, lr}
  10a1d0:	e28db004 	add	fp, sp, #4
  10a1d4:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a1d8:	e3a03000 	mov	r3, #0
  10a1dc:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a1e0:	e3a02001 	mov	r2, #1
  10a1e4:	e3051f90 	movw	r1, #24464	; 0x5f90
  10a1e8:	e3401014 	movt	r1, #20
  10a1ec:	e30d061c 	movw	r0, #54812	; 0xd61c
  10a1f0:	e3400014 	movt	r0, #20
  10a1f4:	ebffdad3 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1f8:	e3a03000 	mov	r3, #0
  10a1fc:	e50b3008 	str	r3, [fp, #-8]
  10a200:	ea00000a 	b	10a230 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a204:	e51b3008 	ldr	r3, [fp, #-8]
  10a208:	e2833005 	add	r3, r3, #5
  10a20c:	e1a02183 	lsl	r2, r3, #3
  10a210:	e30d361c 	movw	r3, #54812	; 0xd61c
  10a214:	e3403014 	movt	r3, #20
  10a218:	e0823003 	add	r3, r2, r3
  10a21c:	e1a00003 	mov	r0, r3
  10a220:	ebffffda 	bl	10a190 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a224:	e51b3008 	ldr	r3, [fp, #-8]
  10a228:	e2833001 	add	r3, r3, #1
  10a22c:	e50b3008 	str	r3, [fp, #-8]
  10a230:	e51b3008 	ldr	r3, [fp, #-8]
  10a234:	e353007f 	cmp	r3, #127	; 0x7f
  10a238:	dafffff1 	ble	10a204 <dfs_fnode_mgr_init+0x38>
    }
  10a23c:	e320f000 	nop	{0}
  10a240:	e24bd004 	sub	sp, fp, #4
  10a244:	e8bd8800 	pop	{fp, pc}

0010a248 <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a248:	e92d4800 	push	{fp, lr}
  10a24c:	e28db004 	add	fp, sp, #4
  10a250:	e24dd010 	sub	sp, sp, #16
  10a254:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a258:	e51b0010 	ldr	r0, [fp, #-16]
  10a25c:	ebffff58 	bl	109fc4 <fd_get>
  10a260:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a264:	e51b300c 	ldr	r3, [fp, #-12]
  10a268:	e3530000 	cmp	r3, #0
  10a26c:	1a000001 	bne	10a278 <dfs_net_getsocket+0x30>
  10a270:	e3e03000 	mvn	r3, #0
  10a274:	ea00000c 	b	10a2ac <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a278:	e51b300c 	ldr	r3, [fp, #-12]
  10a27c:	e5933018 	ldr	r3, [r3, #24]
  10a280:	e1d330b0 	ldrh	r3, [r3]
  10a284:	e3530001 	cmp	r3, #1
  10a288:	0a000002 	beq	10a298 <dfs_net_getsocket+0x50>
  10a28c:	e3e03000 	mvn	r3, #0
  10a290:	e50b3008 	str	r3, [fp, #-8]
  10a294:	ea000003 	b	10a2a8 <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a298:	e51b300c 	ldr	r3, [fp, #-12]
  10a29c:	e5933018 	ldr	r3, [r3, #24]
  10a2a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a2a4:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a2a8:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a2ac:	e1a00003 	mov	r0, r3
  10a2b0:	e24bd004 	sub	sp, fp, #4
  10a2b4:	e8bd8800 	pop	{fp, pc}

0010a2b8 <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a2b8:	e92d4800 	push	{fp, lr}
  10a2bc:	e28db004 	add	fp, sp, #4
  10a2c0:	e24dd018 	sub	sp, sp, #24
  10a2c4:	e50b0010 	str	r0, [fp, #-16]
  10a2c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a2cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a2d0:	e51b3010 	ldr	r3, [fp, #-16]
  10a2d4:	e5933018 	ldr	r3, [r3, #24]
  10a2d8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a2dc:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a2e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a2e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a2e8:	e51b0008 	ldr	r0, [fp, #-8]
  10a2ec:	ebfff8e6 	bl	10868c <sal_ioctlsocket>
  10a2f0:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a2f4:	e51b300c 	ldr	r3, [fp, #-12]
  10a2f8:	e3530000 	cmp	r3, #0
  10a2fc:	aa000006 	bge	10a31c <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a300:	ebffdf55 	bl	10205c <rt_get_errno>
  10a304:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a308:	e51b300c 	ldr	r3, [fp, #-12]
  10a30c:	e3530000 	cmp	r3, #0
  10a310:	b2633000 	rsblt	r3, r3, #0
  10a314:	e2633000 	rsb	r3, r3, #0
  10a318:	ea000000 	b	10a320 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a31c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a320:	e1a00003 	mov	r0, r3
  10a324:	e24bd004 	sub	sp, fp, #4
  10a328:	e8bd8800 	pop	{fp, pc}

0010a32c <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a32c:	e92d4800 	push	{fp, lr}
  10a330:	e28db004 	add	fp, sp, #4
  10a334:	e24dd020 	sub	sp, sp, #32
  10a338:	e50b0010 	str	r0, [fp, #-16]
  10a33c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a344:	e51b3010 	ldr	r3, [fp, #-16]
  10a348:	e5933018 	ldr	r3, [r3, #24]
  10a34c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a350:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a354:	e3a03000 	mov	r3, #0
  10a358:	e58d3004 	str	r3, [sp, #4]
  10a35c:	e3a03000 	mov	r3, #0
  10a360:	e58d3000 	str	r3, [sp]
  10a364:	e3a03000 	mov	r3, #0
  10a368:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a36c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a370:	e51b0008 	ldr	r0, [fp, #-8]
  10a374:	ebfff7dd 	bl	1082f0 <sal_recvfrom>
  10a378:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a37c:	e51b300c 	ldr	r3, [fp, #-12]
  10a380:	e3530000 	cmp	r3, #0
  10a384:	aa000006 	bge	10a3a4 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a388:	ebffdf33 	bl	10205c <rt_get_errno>
  10a38c:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a390:	e51b300c 	ldr	r3, [fp, #-12]
  10a394:	e3530000 	cmp	r3, #0
  10a398:	b2633000 	rsblt	r3, r3, #0
  10a39c:	e2633000 	rsb	r3, r3, #0
  10a3a0:	ea000000 	b	10a3a8 <dfs_net_read+0x7c>
    }
    return ret;
  10a3a4:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a3a8:	e1a00003 	mov	r0, r3
  10a3ac:	e24bd004 	sub	sp, fp, #4
  10a3b0:	e8bd8800 	pop	{fp, pc}

0010a3b4 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a3b4:	e92d4800 	push	{fp, lr}
  10a3b8:	e28db004 	add	fp, sp, #4
  10a3bc:	e24dd020 	sub	sp, sp, #32
  10a3c0:	e50b0010 	str	r0, [fp, #-16]
  10a3c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a3c8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a3cc:	e51b3010 	ldr	r3, [fp, #-16]
  10a3d0:	e5933018 	ldr	r3, [r3, #24]
  10a3d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a3d8:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a3dc:	e3a03000 	mov	r3, #0
  10a3e0:	e58d3004 	str	r3, [sp, #4]
  10a3e4:	e3a03000 	mov	r3, #0
  10a3e8:	e58d3000 	str	r3, [sp]
  10a3ec:	e3a03000 	mov	r3, #0
  10a3f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3f8:	e51b0008 	ldr	r0, [fp, #-8]
  10a3fc:	ebfff7ef 	bl	1083c0 <sal_sendto>
  10a400:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a404:	e51b300c 	ldr	r3, [fp, #-12]
  10a408:	e3530000 	cmp	r3, #0
  10a40c:	aa000006 	bge	10a42c <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a410:	ebffdf11 	bl	10205c <rt_get_errno>
  10a414:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a418:	e51b300c 	ldr	r3, [fp, #-12]
  10a41c:	e3530000 	cmp	r3, #0
  10a420:	b2633000 	rsblt	r3, r3, #0
  10a424:	e2633000 	rsb	r3, r3, #0
  10a428:	ea000000 	b	10a430 <dfs_net_write+0x7c>
    }
    return ret;
  10a42c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a430:	e1a00003 	mov	r0, r3
  10a434:	e24bd004 	sub	sp, fp, #4
  10a438:	e8bd8800 	pop	{fp, pc}

0010a43c <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a43c:	e92d4800 	push	{fp, lr}
  10a440:	e28db004 	add	fp, sp, #4
  10a444:	e24dd010 	sub	sp, sp, #16
  10a448:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a44c:	e3a03000 	mov	r3, #0
  10a450:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a454:	e51b3010 	ldr	r3, [fp, #-16]
  10a458:	e5933018 	ldr	r3, [r3, #24]
  10a45c:	e593300c 	ldr	r3, [r3, #12]
  10a460:	e3530001 	cmp	r3, #1
  10a464:	1a000006 	bne	10a484 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a468:	e51b3010 	ldr	r3, [fp, #-16]
  10a46c:	e5933018 	ldr	r3, [r3, #24]
  10a470:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a474:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a478:	e51b000c 	ldr	r0, [fp, #-12]
  10a47c:	ebfff854 	bl	1085d4 <sal_closesocket>
  10a480:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a484:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a488:	e1a00003 	mov	r0, r3
  10a48c:	e24bd004 	sub	sp, fp, #4
  10a490:	e8bd8800 	pop	{fp, pc}

0010a494 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a494:	e92d4800 	push	{fp, lr}
  10a498:	e28db004 	add	fp, sp, #4
  10a49c:	e24dd008 	sub	sp, sp, #8
  10a4a0:	e50b0008 	str	r0, [fp, #-8]
  10a4a4:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a4a8:	e51b100c 	ldr	r1, [fp, #-12]
  10a4ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a4b0:	ebfff911 	bl	1088fc <sal_poll>
  10a4b4:	e1a03000 	mov	r3, r0
}
  10a4b8:	e1a00003 	mov	r0, r3
  10a4bc:	e24bd004 	sub	sp, fp, #4
  10a4c0:	e8bd8800 	pop	{fp, pc}

0010a4c4 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a4c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a4c8:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a4cc:	e3053f98 	movw	r3, #24472	; 0x5f98
  10a4d0:	e3403014 	movt	r3, #20
}
  10a4d4:	e1a00003 	mov	r0, r3
  10a4d8:	e28bd000 	add	sp, fp, #0
  10a4dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a4e0:	e12fff1e 	bx	lr

0010a4e4 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a4e4:	e92d4800 	push	{fp, lr}
  10a4e8:	e28db004 	add	fp, sp, #4
  10a4ec:	e24dd008 	sub	sp, sp, #8
  10a4f0:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a4f4:	e51b0008 	ldr	r0, [fp, #-8]
  10a4f8:	ebffdb51 	bl	101244 <rt_sem_release>
}
  10a4fc:	e320f000 	nop	{0}
  10a500:	e24bd004 	sub	sp, fp, #4
  10a504:	e8bd8800 	pop	{fp, pc}

0010a508 <lwip_system_init>:
/**
 * LwIP system initialization
 */
extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a508:	e92d4800 	push	{fp, lr}
  10a50c:	e28db004 	add	fp, sp, #4
  10a510:	e24dd008 	sub	sp, sp, #8
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a514:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a518:	e3403014 	movt	r3, #20
  10a51c:	e5933000 	ldr	r3, [r3]
  10a520:	e3530000 	cmp	r3, #0
  10a524:	0a000004 	beq	10a53c <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a528:	e3050fac 	movw	r0, #24492	; 0x5fac
  10a52c:	e3400014 	movt	r0, #20
  10a530:	ebffe2f7 	bl	103114 <rt_kprintf>
        return 0;
  10a534:	e3a03000 	mov	r3, #0
  10a538:	ea00002b 	b	10a5ec <lwip_system_init+0xe4>
    }

    eth_system_device_init_private();
  10a53c:	eb007d3d 	bl	129a38 <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a540:	e30c3a10 	movw	r3, #51728	; 0xca10
  10a544:	e3403015 	movt	r3, #21
  10a548:	e3a02000 	mov	r2, #0
  10a54c:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a550:	e3a02000 	mov	r2, #0
  10a554:	e3a01000 	mov	r1, #0
  10a558:	e3050fc8 	movw	r0, #24520	; 0x5fc8
  10a55c:	e3400014 	movt	r0, #20
  10a560:	ebffdaa0 	bl	100fe8 <rt_sem_create>
  10a564:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a568:	e51b3008 	ldr	r3, [fp, #-8]
  10a56c:	e3530000 	cmp	r3, #0
  10a570:	1a000008 	bne	10a598 <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a574:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10a578:	e3400014 	movt	r0, #20
  10a57c:	ebffe2e4 	bl	103114 <rt_kprintf>
  10a580:	e3a0105c 	mov	r1, #92	; 0x5c
  10a584:	e3050fec 	movw	r0, #24556	; 0x5fec
  10a588:	e3400014 	movt	r0, #20
  10a58c:	eb000200 	bl	10ad94 <sys_arch_assert>

        return -1;
  10a590:	e3e03000 	mvn	r3, #0
  10a594:	ea000014 	b	10a5ec <lwip_system_init+0xe4>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a598:	e51b1008 	ldr	r1, [fp, #-8]
  10a59c:	e30a04e4 	movw	r0, #42212	; 0xa4e4
  10a5a0:	e3400010 	movt	r0, #16
  10a5a4:	eb002ee5 	bl	116140 <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a5a8:	e3e01000 	mvn	r1, #0
  10a5ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a5b0:	ebffdb3f 	bl	1012b4 <rt_sem_take>
  10a5b4:	e1a03000 	mov	r3, r0
  10a5b8:	e3530000 	cmp	r3, #0
  10a5bc:	0a000003 	beq	10a5d0 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a5c0:	e51b0008 	ldr	r0, [fp, #-8]
  10a5c4:	ebffdad2 	bl	101114 <rt_sem_delete>

        return -1;
  10a5c8:	e3e03000 	mvn	r3, #0
  10a5cc:	ea000006 	b	10a5ec <lwip_system_init+0xe4>
    }
    rt_sem_delete(done_sem);
  10a5d0:	e51b0008 	ldr	r0, [fp, #-8]
  10a5d4:	ebffdace 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    init_ok = RT_TRUE;
  10a5d8:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a5dc:	e3403014 	movt	r3, #20
  10a5e0:	e3a02001 	mov	r2, #1
  10a5e4:	e5832000 	str	r2, [r3]

    return 0;
  10a5e8:	e3a03000 	mov	r3, #0
}
  10a5ec:	e1a00003 	mov	r0, r3
  10a5f0:	e24bd004 	sub	sp, fp, #4
  10a5f4:	e8bd8800 	pop	{fp, pc}

0010a5f8 <sys_init>:

void sys_init(void)
{
  10a5f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a5fc:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a600:	e320f000 	nop	{0}
  10a604:	e28bd000 	add	sp, fp, #0
  10a608:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a60c:	e12fff1e 	bx	lr

0010a610 <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a610:	e92d4800 	push	{fp, lr}
  10a614:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a618:	ebffffba 	bl	10a508 <lwip_system_init>
}
  10a61c:	e320f000 	nop	{0}
  10a620:	e8bd8800 	pop	{fp, pc}

0010a624 <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a624:	e92d4800 	push	{fp, lr}
  10a628:	e28db004 	add	fp, sp, #4
  10a62c:	e24dd020 	sub	sp, sp, #32
  10a630:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a634:	e1a03001 	mov	r3, r1
  10a638:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a63c:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a640:	e3403014 	movt	r3, #20
  10a644:	e1d330b0 	ldrh	r3, [r3]
  10a648:	e24b0010 	sub	r0, fp, #16
  10a64c:	e58d3000 	str	r3, [sp]
  10a650:	e306301c 	movw	r3, #24604	; 0x601c
  10a654:	e3403014 	movt	r3, #20
  10a658:	e3062020 	movw	r2, #24608	; 0x6020
  10a65c:	e3402014 	movt	r2, #20
  10a660:	e3a01008 	mov	r1, #8
  10a664:	ebffe274 	bl	10303c <rt_snprintf>
    counter ++;
  10a668:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a66c:	e3403014 	movt	r3, #20
  10a670:	e1d330b0 	ldrh	r3, [r3]
  10a674:	e2833001 	add	r3, r3, #1
  10a678:	e6ff2073 	uxth	r2, r3
  10a67c:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a680:	e3403014 	movt	r3, #20
  10a684:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a688:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a68c:	e24b3010 	sub	r3, fp, #16
  10a690:	e3a02000 	mov	r2, #0
  10a694:	e1a00003 	mov	r0, r3
  10a698:	ebffda52 	bl	100fe8 <rt_sem_create>
  10a69c:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a6a0:	e51b3008 	ldr	r3, [fp, #-8]
  10a6a4:	e3530000 	cmp	r3, #0
  10a6a8:	1a000001 	bne	10a6b4 <sys_sem_new+0x90>
        return ERR_MEM;
  10a6ac:	e3e03000 	mvn	r3, #0
  10a6b0:	ea000003 	b	10a6c4 <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a6b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a6b8:	e51b2008 	ldr	r2, [fp, #-8]
  10a6bc:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a6c0:	e3a03000 	mov	r3, #0
    }
}
  10a6c4:	e1a00003 	mov	r0, r3
  10a6c8:	e24bd004 	sub	sp, fp, #4
  10a6cc:	e8bd8800 	pop	{fp, pc}

0010a6d0 <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a6d0:	e92d4800 	push	{fp, lr}
  10a6d4:	e28db004 	add	fp, sp, #4
  10a6d8:	e24dd008 	sub	sp, sp, #8
  10a6dc:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10a6e4:	e5933000 	ldr	r3, [r3]
  10a6e8:	e1a00003 	mov	r0, r3
  10a6ec:	ebffda88 	bl	101114 <rt_sem_delete>
}
  10a6f0:	e320f000 	nop	{0}
  10a6f4:	e24bd004 	sub	sp, fp, #4
  10a6f8:	e8bd8800 	pop	{fp, pc}

0010a6fc <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a6fc:	e92d4800 	push	{fp, lr}
  10a700:	e28db004 	add	fp, sp, #4
  10a704:	e24dd008 	sub	sp, sp, #8
  10a708:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a70c:	e51b3008 	ldr	r3, [fp, #-8]
  10a710:	e5933000 	ldr	r3, [r3]
  10a714:	e1a00003 	mov	r0, r3
  10a718:	ebffdac9 	bl	101244 <rt_sem_release>
}
  10a71c:	e320f000 	nop	{0}
  10a720:	e24bd004 	sub	sp, fp, #4
  10a724:	e8bd8800 	pop	{fp, pc}

0010a728 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a728:	e92d4800 	push	{fp, lr}
  10a72c:	e28db004 	add	fp, sp, #4
  10a730:	e24dd018 	sub	sp, sp, #24
  10a734:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a738:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a73c:	ebffddc7 	bl	101e60 <rt_tick_get>
  10a740:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a744:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a748:	e3530000 	cmp	r3, #0
  10a74c:	1a000002 	bne	10a75c <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a750:	e3e03000 	mvn	r3, #0
  10a754:	e50b3008 	str	r3, [fp, #-8]
  10a758:	ea000007 	b	10a77c <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a75c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a760:	e3530000 	cmp	r3, #0
  10a764:	1a000002 	bne	10a774 <sys_arch_sem_wait+0x4c>
            t = 1;
  10a768:	e3a03001 	mov	r3, #1
  10a76c:	e50b3008 	str	r3, [fp, #-8]
  10a770:	ea000001 	b	10a77c <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a774:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a778:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a77c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a780:	e5933000 	ldr	r3, [r3]
  10a784:	e51b1008 	ldr	r1, [fp, #-8]
  10a788:	e1a00003 	mov	r0, r3
  10a78c:	ebffdac8 	bl	1012b4 <rt_sem_take>
  10a790:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a794:	e51b3010 	ldr	r3, [fp, #-16]
  10a798:	e3730002 	cmn	r3, #2
  10a79c:	1a000001 	bne	10a7a8 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a7a0:	e3e03000 	mvn	r3, #0
  10a7a4:	ea00000f 	b	10a7e8 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a7a8:	e51b3010 	ldr	r3, [fp, #-16]
  10a7ac:	e3530000 	cmp	r3, #0
  10a7b0:	1a000001 	bne	10a7bc <sys_arch_sem_wait+0x94>
            ret = 1;
  10a7b4:	e3a03001 	mov	r3, #1
  10a7b8:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a7bc:	ebffdda7 	bl	101e60 <rt_tick_get>
  10a7c0:	e1a02000 	mov	r2, r0
  10a7c4:	e51b300c 	ldr	r3, [fp, #-12]
  10a7c8:	e0423003 	sub	r3, r2, r3
  10a7cc:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a7d0:	e51b300c 	ldr	r3, [fp, #-12]
  10a7d4:	e3530000 	cmp	r3, #0
  10a7d8:	1a000001 	bne	10a7e4 <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a7dc:	e3a03001 	mov	r3, #1
  10a7e0:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a7e4:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a7e8:	e1a00003 	mov	r0, r3
  10a7ec:	e24bd004 	sub	sp, fp, #4
  10a7f0:	e8bd8800 	pop	{fp, pc}

0010a7f4 <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10a7f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a7f8:	e28db000 	add	fp, sp, #0
  10a7fc:	e24dd00c 	sub	sp, sp, #12
  10a800:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10a804:	e51b3008 	ldr	r3, [fp, #-8]
  10a808:	e5933000 	ldr	r3, [r3]
}
  10a80c:	e1a00003 	mov	r0, r3
  10a810:	e28bd000 	add	sp, fp, #0
  10a814:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a818:	e12fff1e 	bx	lr

0010a81c <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10a81c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a820:	e28db000 	add	fp, sp, #0
  10a824:	e24dd00c 	sub	sp, sp, #12
  10a828:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10a82c:	e51b3008 	ldr	r3, [fp, #-8]
  10a830:	e3a02000 	mov	r2, #0
  10a834:	e5832000 	str	r2, [r3]
}
  10a838:	e320f000 	nop	{0}
  10a83c:	e28bd000 	add	sp, fp, #0
  10a840:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a844:	e12fff1e 	bx	lr

0010a848 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10a848:	e92d4800 	push	{fp, lr}
  10a84c:	e28db004 	add	fp, sp, #4
  10a850:	e24dd020 	sub	sp, sp, #32
  10a854:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10a858:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a85c:	e3403014 	movt	r3, #20
  10a860:	e1d330b0 	ldrh	r3, [r3]
  10a864:	e24b0010 	sub	r0, fp, #16
  10a868:	e58d3000 	str	r3, [sp]
  10a86c:	e3063028 	movw	r3, #24616	; 0x6028
  10a870:	e3403014 	movt	r3, #20
  10a874:	e3062020 	movw	r2, #24608	; 0x6020
  10a878:	e3402014 	movt	r2, #20
  10a87c:	e3a01008 	mov	r1, #8
  10a880:	ebffe1ed 	bl	10303c <rt_snprintf>
    counter ++;
  10a884:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a888:	e3403014 	movt	r3, #20
  10a88c:	e1d330b0 	ldrh	r3, [r3]
  10a890:	e2833001 	add	r3, r3, #1
  10a894:	e6ff2073 	uxth	r2, r3
  10a898:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a89c:	e3403014 	movt	r3, #20
  10a8a0:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10a8a4:	e24b3010 	sub	r3, fp, #16
  10a8a8:	e3a01000 	mov	r1, #0
  10a8ac:	e1a00003 	mov	r0, r3
  10a8b0:	ebffd8fc 	bl	100ca8 <rt_mutex_create>
  10a8b4:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10a8b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a8bc:	e3530000 	cmp	r3, #0
  10a8c0:	1a000001 	bne	10a8cc <sys_mutex_new+0x84>
        return ERR_MEM;
  10a8c4:	e3e03000 	mvn	r3, #0
  10a8c8:	ea000003 	b	10a8dc <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10a8cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a8d0:	e51b2008 	ldr	r2, [fp, #-8]
  10a8d4:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a8d8:	e3a03000 	mov	r3, #0
    }
}
  10a8dc:	e1a00003 	mov	r0, r3
  10a8e0:	e24bd004 	sub	sp, fp, #4
  10a8e4:	e8bd8800 	pop	{fp, pc}

0010a8e8 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10a8e8:	e92d4800 	push	{fp, lr}
  10a8ec:	e28db004 	add	fp, sp, #4
  10a8f0:	e24dd008 	sub	sp, sp, #8
  10a8f4:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10a8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10a8fc:	e5933000 	ldr	r3, [r3]
  10a900:	e3e01000 	mvn	r1, #0
  10a904:	e1a00003 	mov	r0, r3
  10a908:	ebffd97c 	bl	100f00 <rt_mutex_take>

    return;
  10a90c:	e320f000 	nop	{0}
}
  10a910:	e24bd004 	sub	sp, fp, #4
  10a914:	e8bd8800 	pop	{fp, pc}

0010a918 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10a918:	e92d4800 	push	{fp, lr}
  10a91c:	e28db004 	add	fp, sp, #4
  10a920:	e24dd008 	sub	sp, sp, #8
  10a924:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10a928:	e51b3008 	ldr	r3, [fp, #-8]
  10a92c:	e5933000 	ldr	r3, [r3]
  10a930:	e1a00003 	mov	r0, r3
  10a934:	ebffd98f 	bl	100f78 <rt_mutex_release>
}
  10a938:	e320f000 	nop	{0}
  10a93c:	e24bd004 	sub	sp, fp, #4
  10a940:	e8bd8800 	pop	{fp, pc}

0010a944 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10a944:	e92d4800 	push	{fp, lr}
  10a948:	e28db004 	add	fp, sp, #4
  10a94c:	e24dd008 	sub	sp, sp, #8
  10a950:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10a954:	e51b3008 	ldr	r3, [fp, #-8]
  10a958:	e5933000 	ldr	r3, [r3]
  10a95c:	e1a00003 	mov	r0, r3
  10a960:	ebffd91a 	bl	100dd0 <rt_mutex_delete>
}
  10a964:	e320f000 	nop	{0}
  10a968:	e24bd004 	sub	sp, fp, #4
  10a96c:	e8bd8800 	pop	{fp, pc}

0010a970 <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10a970:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a974:	e28db000 	add	fp, sp, #0
  10a978:	e24dd00c 	sub	sp, sp, #12
  10a97c:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10a980:	e51b3008 	ldr	r3, [fp, #-8]
  10a984:	e5933000 	ldr	r3, [r3]
}
  10a988:	e1a00003 	mov	r0, r3
  10a98c:	e28bd000 	add	sp, fp, #0
  10a990:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a994:	e12fff1e 	bx	lr

0010a998 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10a998:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a99c:	e28db000 	add	fp, sp, #0
  10a9a0:	e24dd00c 	sub	sp, sp, #12
  10a9a4:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10a9a8:	e51b3008 	ldr	r3, [fp, #-8]
  10a9ac:	e3a02000 	mov	r2, #0
  10a9b0:	e5832000 	str	r2, [r3]
}
  10a9b4:	e320f000 	nop	{0}
  10a9b8:	e28bd000 	add	sp, fp, #0
  10a9bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a9c0:	e12fff1e 	bx	lr

0010a9c4 <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10a9c4:	e92d4800 	push	{fp, lr}
  10a9c8:	e28db004 	add	fp, sp, #4
  10a9cc:	e24dd020 	sub	sp, sp, #32
  10a9d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a9d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    char tname[RT_NAME_MAX];
    sys_mbox_t tmpmbox;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10a9d8:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10a9dc:	e3403014 	movt	r3, #20
  10a9e0:	e1d330b0 	ldrh	r3, [r3]
  10a9e4:	e24b0010 	sub	r0, fp, #16
  10a9e8:	e58d3000 	str	r3, [sp]
  10a9ec:	e306302c 	movw	r3, #24620	; 0x602c
  10a9f0:	e3403014 	movt	r3, #20
  10a9f4:	e3062020 	movw	r2, #24608	; 0x6020
  10a9f8:	e3402014 	movt	r2, #20
  10a9fc:	e3a01008 	mov	r1, #8
  10aa00:	ebffe18d 	bl	10303c <rt_snprintf>
    counter ++;
  10aa04:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10aa08:	e3403014 	movt	r3, #20
  10aa0c:	e1d330b0 	ldrh	r3, [r3]
  10aa10:	e2833001 	add	r3, r3, #1
  10aa14:	e6ff2073 	uxth	r2, r3
  10aa18:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10aa1c:	e3403014 	movt	r3, #20
  10aa20:	e1c320b0 	strh	r2, [r3]

    tmpmbox = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10aa24:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aa28:	e24b3010 	sub	r3, fp, #16
  10aa2c:	e3a02000 	mov	r2, #0
  10aa30:	e1a00003 	mov	r0, r3
  10aa34:	ebffda3c 	bl	10132c <rt_mb_create>
  10aa38:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmbox != RT_NULL)
  10aa3c:	e51b3008 	ldr	r3, [fp, #-8]
  10aa40:	e3530000 	cmp	r3, #0
  10aa44:	0a000004 	beq	10aa5c <sys_mbox_new+0x98>
    {
        *mbox = tmpmbox;
  10aa48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aa4c:	e51b2008 	ldr	r2, [fp, #-8]
  10aa50:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10aa54:	e3a03000 	mov	r3, #0
  10aa58:	ea000000 	b	10aa60 <sys_mbox_new+0x9c>
    }

    return ERR_MEM;
  10aa5c:	e3e03000 	mvn	r3, #0
}
  10aa60:	e1a00003 	mov	r0, r3
  10aa64:	e24bd004 	sub	sp, fp, #4
  10aa68:	e8bd8800 	pop	{fp, pc}

0010aa6c <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10aa6c:	e92d4800 	push	{fp, lr}
  10aa70:	e28db004 	add	fp, sp, #4
  10aa74:	e24dd008 	sub	sp, sp, #8
  10aa78:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete(*mbox);
  10aa7c:	e51b3008 	ldr	r3, [fp, #-8]
  10aa80:	e5933000 	ldr	r3, [r3]
  10aa84:	e1a00003 	mov	r0, r3
  10aa88:	ebffda72 	bl	101458 <rt_mb_delete>

    return;
  10aa8c:	e320f000 	nop	{0}
}
  10aa90:	e24bd004 	sub	sp, fp, #4
  10aa94:	e8bd8800 	pop	{fp, pc}

0010aa98 <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10aa98:	e92d4800 	push	{fp, lr}
  10aa9c:	e28db004 	add	fp, sp, #4
  10aaa0:	e24dd008 	sub	sp, sp, #8
  10aaa4:	e50b0008 	str	r0, [fp, #-8]
  10aaa8:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
  10aaac:	e51b3008 	ldr	r3, [fp, #-8]
  10aab0:	e5933000 	ldr	r3, [r3]
  10aab4:	e51b100c 	ldr	r1, [fp, #-12]
  10aab8:	e3e02000 	mvn	r2, #0
  10aabc:	e1a00003 	mov	r0, r3
  10aac0:	ebffdab0 	bl	101588 <rt_mb_send_wait>

    return;
  10aac4:	e320f000 	nop	{0}
}
  10aac8:	e24bd004 	sub	sp, fp, #4
  10aacc:	e8bd8800 	pop	{fp, pc}

0010aad0 <sys_mbox_trypost>:
 * Try to post the "msg" to the mailbox
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10aad0:	e92d4800 	push	{fp, lr}
  10aad4:	e28db004 	add	fp, sp, #4
  10aad8:	e24dd008 	sub	sp, sp, #8
  10aadc:	e50b0008 	str	r0, [fp, #-8]
  10aae0:	e50b100c 	str	r1, [fp, #-12]
    if (rt_mb_send(*mbox, (rt_ubase_t)msg) == RT_EOK)
  10aae4:	e51b3008 	ldr	r3, [fp, #-8]
  10aae8:	e5933000 	ldr	r3, [r3]
  10aaec:	e51b200c 	ldr	r2, [fp, #-12]
  10aaf0:	e1a01002 	mov	r1, r2
  10aaf4:	e1a00003 	mov	r0, r3
  10aaf8:	ebffdac1 	bl	101604 <rt_mb_send>
  10aafc:	e1a03000 	mov	r3, r0
  10ab00:	e3530000 	cmp	r3, #0
  10ab04:	1a000001 	bne	10ab10 <sys_mbox_trypost+0x40>
        return ERR_OK;
  10ab08:	e3a03000 	mov	r3, #0
  10ab0c:	ea000000 	b	10ab14 <sys_mbox_trypost+0x44>

    return ERR_MEM;
  10ab10:	e3e03000 	mvn	r3, #0
}
  10ab14:	e1a00003 	mov	r0, r3
  10ab18:	e24bd004 	sub	sp, fp, #4
  10ab1c:	e8bd8800 	pop	{fp, pc}

0010ab20 <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10ab20:	e92d4800 	push	{fp, lr}
  10ab24:	e28db004 	add	fp, sp, #4
  10ab28:	e24dd020 	sub	sp, sp, #32
  10ab2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ab30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ab34:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10ab38:	ebffdcc8 	bl	101e60 <rt_tick_get>
  10ab3c:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10ab40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ab44:	e3530000 	cmp	r3, #0
  10ab48:	1a000002 	bne	10ab58 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10ab4c:	e3e03000 	mvn	r3, #0
  10ab50:	e50b3008 	str	r3, [fp, #-8]
  10ab54:	ea000007 	b	10ab78 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10ab58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ab5c:	e3530000 	cmp	r3, #0
  10ab60:	1a000002 	bne	10ab70 <sys_arch_mbox_fetch+0x50>
            t = 1;
  10ab64:	e3a03001 	mov	r3, #1
  10ab68:	e50b3008 	str	r3, [fp, #-8]
  10ab6c:	ea000001 	b	10ab78 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10ab70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ab74:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, t);
  10ab78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ab7c:	e5933000 	ldr	r3, [r3]
  10ab80:	e51b2008 	ldr	r2, [fp, #-8]
  10ab84:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ab88:	e1a00003 	mov	r0, r3
  10ab8c:	ebffdaba 	bl	10167c <rt_mb_recv>
  10ab90:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10ab94:	e51b3010 	ldr	r3, [fp, #-16]
  10ab98:	e3730002 	cmn	r3, #2
  10ab9c:	1a000001 	bne	10aba8 <sys_arch_mbox_fetch+0x88>
        return SYS_ARCH_TIMEOUT;
  10aba0:	e3e03000 	mvn	r3, #0
  10aba4:	ea000014 	b	10abfc <sys_arch_mbox_fetch+0xdc>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10aba8:	e51b3010 	ldr	r3, [fp, #-16]
  10abac:	e3530000 	cmp	r3, #0
  10abb0:	0a000006 	beq	10abd0 <sys_arch_mbox_fetch+0xb0>
  10abb4:	e3060034 	movw	r0, #24628	; 0x6034
  10abb8:	e3400014 	movt	r0, #20
  10abbc:	ebffe154 	bl	103114 <rt_kprintf>
  10abc0:	e30011ae 	movw	r1, #430	; 0x1ae
  10abc4:	e3050fec 	movw	r0, #24556	; 0x5fec
  10abc8:	e3400014 	movt	r0, #20
  10abcc:	eb000070 	bl	10ad94 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10abd0:	ebffdca2 	bl	101e60 <rt_tick_get>
  10abd4:	e1a02000 	mov	r2, r0
  10abd8:	e51b300c 	ldr	r3, [fp, #-12]
  10abdc:	e0423003 	sub	r3, r2, r3
  10abe0:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10abe4:	e51b300c 	ldr	r3, [fp, #-12]
  10abe8:	e3530000 	cmp	r3, #0
  10abec:	1a000001 	bne	10abf8 <sys_arch_mbox_fetch+0xd8>
        tick = 1;
  10abf0:	e3a03001 	mov	r3, #1
  10abf4:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10abf8:	e51b300c 	ldr	r3, [fp, #-12]
}
  10abfc:	e1a00003 	mov	r0, r3
  10ac00:	e24bd004 	sub	sp, fp, #4
  10ac04:	e8bd8800 	pop	{fp, pc}

0010ac08 <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10ac08:	e92d4800 	push	{fp, lr}
  10ac0c:	e28db004 	add	fp, sp, #4
  10ac10:	e24dd010 	sub	sp, sp, #16
  10ac14:	e50b0010 	str	r0, [fp, #-16]
  10ac18:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, 0);
  10ac1c:	e51b3010 	ldr	r3, [fp, #-16]
  10ac20:	e5933000 	ldr	r3, [r3]
  10ac24:	e3a02000 	mov	r2, #0
  10ac28:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ac2c:	e1a00003 	mov	r0, r3
  10ac30:	ebffda91 	bl	10167c <rt_mb_recv>
  10ac34:	e50b0008 	str	r0, [fp, #-8]

    if(ret == -RT_ETIMEOUT)
  10ac38:	e51b3008 	ldr	r3, [fp, #-8]
  10ac3c:	e3730002 	cmn	r3, #2
  10ac40:	1a000001 	bne	10ac4c <sys_arch_mbox_tryfetch+0x44>
        return SYS_ARCH_TIMEOUT;
  10ac44:	e3e03000 	mvn	r3, #0
  10ac48:	ea000005 	b	10ac64 <sys_arch_mbox_tryfetch+0x5c>
    else
    {
        if (ret == RT_EOK)
  10ac4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ac50:	e3530000 	cmp	r3, #0
  10ac54:	1a000001 	bne	10ac60 <sys_arch_mbox_tryfetch+0x58>
            ret = 1;
  10ac58:	e3a03001 	mov	r3, #1
  10ac5c:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10ac60:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ac64:	e1a00003 	mov	r0, r3
  10ac68:	e24bd004 	sub	sp, fp, #4
  10ac6c:	e8bd8800 	pop	{fp, pc}

0010ac70 <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10ac70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ac74:	e28db000 	add	fp, sp, #0
  10ac78:	e24dd00c 	sub	sp, sp, #12
  10ac7c:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10ac80:	e51b3008 	ldr	r3, [fp, #-8]
  10ac84:	e5933000 	ldr	r3, [r3]
}
  10ac88:	e1a00003 	mov	r0, r3
  10ac8c:	e28bd000 	add	sp, fp, #0
  10ac90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ac94:	e12fff1e 	bx	lr

0010ac98 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10ac98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ac9c:	e28db000 	add	fp, sp, #0
  10aca0:	e24dd00c 	sub	sp, sp, #12
  10aca4:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10aca8:	e51b3008 	ldr	r3, [fp, #-8]
  10acac:	e3a02000 	mov	r2, #0
  10acb0:	e5832000 	str	r2, [r3]
}
  10acb4:	e320f000 	nop	{0}
  10acb8:	e28bd000 	add	sp, fp, #0
  10acbc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10acc0:	e12fff1e 	bx	lr

0010acc4 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10acc4:	e92d4800 	push	{fp, lr}
  10acc8:	e28db004 	add	fp, sp, #4
  10accc:	e24dd020 	sub	sp, sp, #32
  10acd0:	e50b0010 	str	r0, [fp, #-16]
  10acd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10acd8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10acdc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10ace0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ace4:	e59b3004 	ldr	r3, [fp, #4]
  10ace8:	e6ef3073 	uxtb	r3, r3
  10acec:	e3a02014 	mov	r2, #20
  10acf0:	e58d2004 	str	r2, [sp, #4]
  10acf4:	e58d3000 	str	r3, [sp]
  10acf8:	e1a03001 	mov	r3, r1
  10acfc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ad00:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ad04:	e51b0010 	ldr	r0, [fp, #-16]
  10ad08:	ebffdcf9 	bl	1020f4 <rt_thread_create>
  10ad0c:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10ad10:	e51b3008 	ldr	r3, [fp, #-8]
  10ad14:	e3530000 	cmp	r3, #0
  10ad18:	1a000005 	bne	10ad34 <sys_thread_new+0x70>
  10ad1c:	e30021fb 	movw	r2, #507	; 0x1fb
  10ad20:	e3061080 	movw	r1, #24704	; 0x6080
  10ad24:	e3401014 	movt	r1, #20
  10ad28:	e3060054 	movw	r0, #24660	; 0x6054
  10ad2c:	e3400014 	movt	r0, #20
  10ad30:	ebffe218 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10ad34:	e51b0008 	ldr	r0, [fp, #-8]
  10ad38:	ebffdd22 	bl	1021c8 <rt_thread_startup>

    return t;
  10ad3c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ad40:	e1a00003 	mov	r0, r3
  10ad44:	e24bd004 	sub	sp, fp, #4
  10ad48:	e8bd8800 	pop	{fp, pc}

0010ad4c <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10ad4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ad50:	e28db000 	add	fp, sp, #0
  10ad54:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10ad58:	e3a03000 	mov	r3, #0
  10ad5c:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10ad60:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ad64:	e1a00003 	mov	r0, r3
  10ad68:	e28bd000 	add	sp, fp, #0
  10ad6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ad70:	e12fff1e 	bx	lr

0010ad74 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10ad74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ad78:	e28db000 	add	fp, sp, #0
  10ad7c:	e24dd00c 	sub	sp, sp, #12
  10ad80:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10ad84:	e320f000 	nop	{0}
}
  10ad88:	e28bd000 	add	sp, fp, #0
  10ad8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ad90:	e12fff1e 	bx	lr

0010ad94 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10ad94:	e92d4800 	push	{fp, lr}
  10ad98:	e28db004 	add	fp, sp, #4
  10ad9c:	e24dd008 	sub	sp, sp, #8
  10ada0:	e50b0008 	str	r0, [fp, #-8]
  10ada4:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10ada8:	e51b2008 	ldr	r2, [fp, #-8]
  10adac:	e51b100c 	ldr	r1, [fp, #-12]
  10adb0:	e3060064 	movw	r0, #24676	; 0x6064
  10adb4:	e3400014 	movt	r0, #20
  10adb8:	ebffe0d5 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10adbc:	e3002219 	movw	r2, #537	; 0x219
  10adc0:	e3061090 	movw	r1, #24720	; 0x6090
  10adc4:	e3401014 	movt	r1, #20
  10adc8:	e306007c 	movw	r0, #24700	; 0x607c
  10adcc:	e3400014 	movt	r0, #20
  10add0:	ebffe1f0 	bl	103598 <rt_assert_handler>
}
  10add4:	e320f000 	nop	{0}
  10add8:	e24bd004 	sub	sp, fp, #4
  10addc:	e8bd8800 	pop	{fp, pc}

0010ade0 <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10ade0:	e92d4800 	push	{fp, lr}
  10ade4:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10ade8:	ebffdc1c 	bl	101e60 <rt_tick_get>
  10adec:	e1a03000 	mov	r3, r0
}
  10adf0:	e1a00003 	mov	r0, r3
  10adf4:	e8bd8800 	pop	{fp, pc}

0010adf8 <sys_now>:

u32_t sys_now(void)
{
  10adf8:	e92d4800 	push	{fp, lr}
  10adfc:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10ae00:	ebffdc16 	bl	101e60 <rt_tick_get>
  10ae04:	e1a03000 	mov	r3, r0
}
  10ae08:	e1a00003 	mov	r0, r3
  10ae0c:	e8bd8800 	pop	{fp, pc}

0010ae10 <mem_init>:


RT_WEAK
void mem_init(void)
{
  10ae10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae14:	e28db000 	add	fp, sp, #0
}
  10ae18:	e320f000 	nop	{0}
  10ae1c:	e28bd000 	add	sp, fp, #0
  10ae20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae24:	e12fff1e 	bx	lr

0010ae28 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10ae28:	e92d4800 	push	{fp, lr}
  10ae2c:	e28db004 	add	fp, sp, #4
  10ae30:	e24dd008 	sub	sp, sp, #8
  10ae34:	e1a03000 	mov	r3, r0
  10ae38:	e1a02001 	mov	r2, r1
  10ae3c:	e14b30b6 	strh	r3, [fp, #-6]
  10ae40:	e1a03002 	mov	r3, r2
  10ae44:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10ae48:	e15b30b6 	ldrh	r3, [fp, #-6]
  10ae4c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ae50:	e1a01002 	mov	r1, r2
  10ae54:	e1a00003 	mov	r0, r3
  10ae58:	ebffe06b 	bl	10300c <rt_calloc>
  10ae5c:	e1a03000 	mov	r3, r0
}
  10ae60:	e1a00003 	mov	r0, r3
  10ae64:	e24bd004 	sub	sp, fp, #4
  10ae68:	e8bd8800 	pop	{fp, pc}

0010ae6c <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10ae6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae70:	e28db000 	add	fp, sp, #0
  10ae74:	e24dd00c 	sub	sp, sp, #12
  10ae78:	e50b0008 	str	r0, [fp, #-8]
  10ae7c:	e1a03001 	mov	r3, r1
  10ae80:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10ae84:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ae88:	e1a00003 	mov	r0, r3
  10ae8c:	e28bd000 	add	sp, fp, #0
  10ae90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae94:	e12fff1e 	bx	lr

0010ae98 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10ae98:	e92d4800 	push	{fp, lr}
  10ae9c:	e28db004 	add	fp, sp, #4
  10aea0:	e24dd008 	sub	sp, sp, #8
  10aea4:	e1a03000 	mov	r3, r0
  10aea8:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10aeac:	e15b30b6 	ldrh	r3, [fp, #-6]
  10aeb0:	e1a00003 	mov	r0, r3
  10aeb4:	ebffe036 	bl	102f94 <rt_malloc>
  10aeb8:	e1a03000 	mov	r3, r0
}
  10aebc:	e1a00003 	mov	r0, r3
  10aec0:	e24bd004 	sub	sp, fp, #4
  10aec4:	e8bd8800 	pop	{fp, pc}

0010aec8 <mem_free>:

void  mem_free(void *mem)
{
  10aec8:	e92d4800 	push	{fp, lr}
  10aecc:	e28db004 	add	fp, sp, #4
  10aed0:	e24dd008 	sub	sp, sp, #8
  10aed4:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10aed8:	e51b0008 	ldr	r0, [fp, #-8]
  10aedc:	ebffe036 	bl	102fbc <rt_free>
}
  10aee0:	e320f000 	nop	{0}
  10aee4:	e24bd004 	sub	sp, fp, #4
  10aee8:	e8bd8800 	pop	{fp, pc}

0010aeec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10aeec:	e92d4800 	push	{fp, lr}
  10aef0:	e28db004 	add	fp, sp, #4
  10aef4:	e24dd010 	sub	sp, sp, #16
  10aef8:	e50b0010 	str	r0, [fp, #-16]
  10aefc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10af00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10af04:	e5933000 	ldr	r3, [r3]
  10af08:	e2833010 	add	r3, r3, #16
  10af0c:	e1a02003 	mov	r2, r3
  10af10:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10af14:	e51b0010 	ldr	r0, [fp, #-16]
  10af18:	eb002c21 	bl	115fa4 <tcpip_send_msg_wait_sem>
  10af1c:	e1a03000 	mov	r3, r0
  10af20:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10af24:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10af28:	e3530000 	cmp	r3, #0
  10af2c:	1a000002 	bne	10af3c <netconn_apimsg+0x50>
    return apimsg->err;
  10af30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10af34:	e1d330d4 	ldrsb	r3, [r3, #4]
  10af38:	ea000000 	b	10af40 <netconn_apimsg+0x54>
  }
  return err;
  10af3c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10af40:	e1a00003 	mov	r0, r3
  10af44:	e24bd004 	sub	sp, fp, #4
  10af48:	e8bd8800 	pop	{fp, pc}

0010af4c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10af4c:	e92d4800 	push	{fp, lr}
  10af50:	e28db004 	add	fp, sp, #4
  10af54:	e24dd030 	sub	sp, sp, #48	; 0x30
  10af58:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10af5c:	e1a03001 	mov	r3, r1
  10af60:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10af64:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10af68:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10af6c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10af70:	eb000878 	bl	10d158 <netconn_alloc>
  10af74:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10af78:	e51b3008 	ldr	r3, [fp, #-8]
  10af7c:	e3530000 	cmp	r3, #0
  10af80:	0a00004f 	beq	10b0c4 <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10af84:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10af88:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10af8c:	e51b3008 	ldr	r3, [fp, #-8]
  10af90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10af94:	e24b3024 	sub	r3, fp, #36	; 0x24
  10af98:	e1a01003 	mov	r1, r3
  10af9c:	e30d00cc 	movw	r0, #53452	; 0xd0cc
  10afa0:	e3400010 	movt	r0, #16
  10afa4:	ebffffd0 	bl	10aeec <netconn_apimsg>
  10afa8:	e1a03000 	mov	r3, r0
  10afac:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10afb0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10afb4:	e3530000 	cmp	r3, #0
  10afb8:	0a000041 	beq	10b0c4 <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10afbc:	e51b3008 	ldr	r3, [fp, #-8]
  10afc0:	e5933008 	ldr	r3, [r3, #8]
  10afc4:	e3530000 	cmp	r3, #0
  10afc8:	0a000006 	beq	10afe8 <netconn_new_with_proto_and_callback+0x9c>
  10afcc:	e30600a0 	movw	r0, #24736	; 0x60a0
  10afd0:	e3400014 	movt	r0, #20
  10afd4:	ebffe04e 	bl	103114 <rt_kprintf>
  10afd8:	e3a01089 	mov	r1, #137	; 0x89
  10afdc:	e30600c4 	movw	r0, #24772	; 0x60c4
  10afe0:	e3400014 	movt	r0, #20
  10afe4:	ebffff6a 	bl	10ad94 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10afe8:	e51b3008 	ldr	r3, [fp, #-8]
  10afec:	e2833014 	add	r3, r3, #20
  10aff0:	e1a00003 	mov	r0, r3
  10aff4:	ebffff1d 	bl	10ac70 <sys_mbox_valid>
  10aff8:	e1a03000 	mov	r3, r0
  10affc:	e3530000 	cmp	r3, #0
  10b000:	1a000006 	bne	10b020 <netconn_new_with_proto_and_callback+0xd4>
  10b004:	e30600f4 	movw	r0, #24820	; 0x60f4
  10b008:	e3400014 	movt	r0, #20
  10b00c:	ebffe040 	bl	103114 <rt_kprintf>
  10b010:	e3a0108a 	mov	r1, #138	; 0x8a
  10b014:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b018:	e3400014 	movt	r0, #20
  10b01c:	ebffff5c 	bl	10ad94 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b020:	e51b3008 	ldr	r3, [fp, #-8]
  10b024:	e2833018 	add	r3, r3, #24
  10b028:	e1a00003 	mov	r0, r3
  10b02c:	ebffff0f 	bl	10ac70 <sys_mbox_valid>
  10b030:	e1a03000 	mov	r3, r0
  10b034:	e3530000 	cmp	r3, #0
  10b038:	0a000006 	beq	10b058 <netconn_new_with_proto_and_callback+0x10c>
  10b03c:	e306010c 	movw	r0, #24844	; 0x610c
  10b040:	e3400014 	movt	r0, #20
  10b044:	ebffe032 	bl	103114 <rt_kprintf>
  10b048:	e3a0108c 	mov	r1, #140	; 0x8c
  10b04c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b050:	e3400014 	movt	r0, #20
  10b054:	ebffff4e 	bl	10ad94 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b058:	e51b3008 	ldr	r3, [fp, #-8]
  10b05c:	e2833010 	add	r3, r3, #16
  10b060:	e1a00003 	mov	r0, r3
  10b064:	ebfffde2 	bl	10a7f4 <sys_sem_valid>
  10b068:	e1a03000 	mov	r3, r0
  10b06c:	e3530000 	cmp	r3, #0
  10b070:	1a000006 	bne	10b090 <netconn_new_with_proto_and_callback+0x144>
  10b074:	e3060130 	movw	r0, #24880	; 0x6130
  10b078:	e3400014 	movt	r0, #20
  10b07c:	ebffe024 	bl	103114 <rt_kprintf>
  10b080:	e3a0108f 	mov	r1, #143	; 0x8f
  10b084:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b088:	e3400014 	movt	r0, #20
  10b08c:	ebffff40 	bl	10ad94 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b090:	e51b3008 	ldr	r3, [fp, #-8]
  10b094:	e2833010 	add	r3, r3, #16
  10b098:	e1a00003 	mov	r0, r3
  10b09c:	ebfffd8b 	bl	10a6d0 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b0a0:	e51b3008 	ldr	r3, [fp, #-8]
  10b0a4:	e2833014 	add	r3, r3, #20
  10b0a8:	e1a00003 	mov	r0, r3
  10b0ac:	ebfffe6e 	bl	10aa6c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b0b0:	e51b1008 	ldr	r1, [fp, #-8]
  10b0b4:	e3a00008 	mov	r0, #8
  10b0b8:	eb0037a3 	bl	118f4c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b0bc:	e3a03000 	mov	r3, #0
  10b0c0:	ea000000 	b	10b0c8 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b0c4:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b0c8:	e1a00003 	mov	r0, r3
  10b0cc:	e24bd004 	sub	sp, fp, #4
  10b0d0:	e8bd8800 	pop	{fp, pc}

0010b0d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b0d4:	e92d4800 	push	{fp, lr}
  10b0d8:	e28db004 	add	fp, sp, #4
  10b0dc:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b0e0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b0e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b0e8:	e3530000 	cmp	r3, #0
  10b0ec:	1a000001 	bne	10b0f8 <netconn_delete+0x24>
    return ERR_OK;
  10b0f0:	e3a03000 	mov	r3, #0
  10b0f4:	ea000013 	b	10b148 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b0f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b0fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b100:	ebffff3c 	bl	10adf8 <sys_now>
  10b104:	e1a03000 	mov	r3, r0
  10b108:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b10c:	e24b3020 	sub	r3, fp, #32
  10b110:	e1a01003 	mov	r1, r3
  10b114:	e30d0af4 	movw	r0, #56052	; 0xdaf4
  10b118:	e3400010 	movt	r0, #16
  10b11c:	ebffff72 	bl	10aeec <netconn_apimsg>
  10b120:	e1a03000 	mov	r3, r0
  10b124:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b128:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b12c:	e3530000 	cmp	r3, #0
  10b130:	0a000001 	beq	10b13c <netconn_delete+0x68>
    return err;
  10b134:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b138:	ea000002 	b	10b148 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b13c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b140:	eb000878 	bl	10d328 <netconn_free>

  return ERR_OK;
  10b144:	e3a03000 	mov	r3, #0
}
  10b148:	e1a00003 	mov	r0, r3
  10b14c:	e24bd004 	sub	sp, fp, #4
  10b150:	e8bd8800 	pop	{fp, pc}

0010b154 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b154:	e92d4800 	push	{fp, lr}
  10b158:	e28db004 	add	fp, sp, #4
  10b15c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b160:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b164:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b168:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b16c:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b170:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b174:	e3530000 	cmp	r3, #0
  10b178:	1a000008 	bne	10b1a0 <netconn_getaddr+0x4c>
  10b17c:	e306014c 	movw	r0, #24908	; 0x614c
  10b180:	e3400014 	movt	r0, #20
  10b184:	ebffdfe2 	bl	103114 <rt_kprintf>
  10b188:	e3a010d9 	mov	r1, #217	; 0xd9
  10b18c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b190:	e3400014 	movt	r0, #20
  10b194:	ebfffefe 	bl	10ad94 <sys_arch_assert>
  10b198:	e3e0300f 	mvn	r3, #15
  10b19c:	ea000027 	b	10b240 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b1a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b1a4:	e3530000 	cmp	r3, #0
  10b1a8:	1a000008 	bne	10b1d0 <netconn_getaddr+0x7c>
  10b1ac:	e306016c 	movw	r0, #24940	; 0x616c
  10b1b0:	e3400014 	movt	r0, #20
  10b1b4:	ebffdfd6 	bl	103114 <rt_kprintf>
  10b1b8:	e3a010da 	mov	r1, #218	; 0xda
  10b1bc:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b1c0:	e3400014 	movt	r0, #20
  10b1c4:	ebfffef2 	bl	10ad94 <sys_arch_assert>
  10b1c8:	e3e0300f 	mvn	r3, #15
  10b1cc:	ea00001b 	b	10b240 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b1d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b1d4:	e3530000 	cmp	r3, #0
  10b1d8:	1a000008 	bne	10b200 <netconn_getaddr+0xac>
  10b1dc:	e306018c 	movw	r0, #24972	; 0x618c
  10b1e0:	e3400014 	movt	r0, #20
  10b1e4:	ebffdfca 	bl	103114 <rt_kprintf>
  10b1e8:	e3a010db 	mov	r1, #219	; 0xdb
  10b1ec:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b1f0:	e3400014 	movt	r0, #20
  10b1f4:	ebfffee6 	bl	10ad94 <sys_arch_assert>
  10b1f8:	e3e0300f 	mvn	r3, #15
  10b1fc:	ea00000f 	b	10b240 <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b200:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b204:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b208:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b20c:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b210:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b214:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b218:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b21c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b220:	e24b3020 	sub	r3, fp, #32
  10b224:	e1a01003 	mov	r1, r3
  10b228:	e30f0414 	movw	r0, #62484	; 0xf414
  10b22c:	e3400010 	movt	r0, #16
  10b230:	ebffff2d 	bl	10aeec <netconn_apimsg>
  10b234:	e1a03000 	mov	r3, r0
  10b238:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b23c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b240:	e1a00003 	mov	r0, r3
  10b244:	e24bd004 	sub	sp, fp, #4
  10b248:	e8bd8800 	pop	{fp, pc}

0010b24c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b24c:	e92d4800 	push	{fp, lr}
  10b250:	e28db004 	add	fp, sp, #4
  10b254:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b258:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b25c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b260:	e1a03002 	mov	r3, r2
  10b264:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b268:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b26c:	e3530000 	cmp	r3, #0
  10b270:	1a000008 	bne	10b298 <netconn_bind+0x4c>
  10b274:	e30601ac 	movw	r0, #25004	; 0x61ac
  10b278:	e3400014 	movt	r0, #20
  10b27c:	ebffdfa4 	bl	103114 <rt_kprintf>
  10b280:	e3a010ff 	mov	r1, #255	; 0xff
  10b284:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b288:	e3400014 	movt	r0, #20
  10b28c:	ebfffec0 	bl	10ad94 <sys_arch_assert>
  10b290:	e3e0300f 	mvn	r3, #15
  10b294:	ea000013 	b	10b2e8 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b298:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b29c:	e3530000 	cmp	r3, #0
  10b2a0:	1a000002 	bne	10b2b0 <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b2a4:	e309363c 	movw	r3, #38460	; 0x963c
  10b2a8:	e3403014 	movt	r3, #20
  10b2ac:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b2b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b2b4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b2b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b2bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b2c0:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b2c4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b2c8:	e24b3020 	sub	r3, fp, #32
  10b2cc:	e1a01003 	mov	r1, r3
  10b2d0:	e30d0ea0 	movw	r0, #56992	; 0xdea0
  10b2d4:	e3400010 	movt	r0, #16
  10b2d8:	ebffff03 	bl	10aeec <netconn_apimsg>
  10b2dc:	e1a03000 	mov	r3, r0
  10b2e0:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b2e4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b2e8:	e1a00003 	mov	r0, r3
  10b2ec:	e24bd004 	sub	sp, fp, #4
  10b2f0:	e8bd8800 	pop	{fp, pc}

0010b2f4 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b2f4:	e92d4800 	push	{fp, lr}
  10b2f8:	e28db004 	add	fp, sp, #4
  10b2fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b300:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b304:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b308:	e1a03002 	mov	r3, r2
  10b30c:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b310:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b314:	e3530000 	cmp	r3, #0
  10b318:	1a000008 	bne	10b340 <netconn_connect+0x4c>
  10b31c:	e30601c8 	movw	r0, #25032	; 0x61c8
  10b320:	e3400014 	movt	r0, #20
  10b324:	ebffdf7a 	bl	103114 <rt_kprintf>
  10b328:	e300112b 	movw	r1, #299	; 0x12b
  10b32c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b330:	e3400014 	movt	r0, #20
  10b334:	ebfffe96 	bl	10ad94 <sys_arch_assert>
  10b338:	e3e0300f 	mvn	r3, #15
  10b33c:	ea000013 	b	10b390 <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b340:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b344:	e3530000 	cmp	r3, #0
  10b348:	1a000002 	bne	10b358 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b34c:	e309363c 	movw	r3, #38460	; 0x963c
  10b350:	e3403014 	movt	r3, #20
  10b354:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b358:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b35c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b360:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b364:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b368:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b36c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b370:	e24b3020 	sub	r3, fp, #32
  10b374:	e1a01003 	mov	r1, r3
  10b378:	e30e0244 	movw	r0, #57924	; 0xe244
  10b37c:	e3400010 	movt	r0, #16
  10b380:	ebfffed9 	bl	10aeec <netconn_apimsg>
  10b384:	e1a03000 	mov	r3, r0
  10b388:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b38c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b390:	e1a00003 	mov	r0, r3
  10b394:	e24bd004 	sub	sp, fp, #4
  10b398:	e8bd8800 	pop	{fp, pc}

0010b39c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b39c:	e92d4800 	push	{fp, lr}
  10b3a0:	e28db004 	add	fp, sp, #4
  10b3a4:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b3a8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b3ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b3b0:	e3530000 	cmp	r3, #0
  10b3b4:	1a000008 	bne	10b3dc <netconn_disconnect+0x40>
  10b3b8:	e30601e8 	movw	r0, #25064	; 0x61e8
  10b3bc:	e3400014 	movt	r0, #20
  10b3c0:	ebffdf53 	bl	103114 <rt_kprintf>
  10b3c4:	e300114b 	movw	r1, #331	; 0x14b
  10b3c8:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b3cc:	e3400014 	movt	r0, #20
  10b3d0:	ebfffe6f 	bl	10ad94 <sys_arch_assert>
  10b3d4:	e3e0300f 	mvn	r3, #15
  10b3d8:	ea000009 	b	10b404 <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b3dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b3e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b3e4:	e24b3020 	sub	r3, fp, #32
  10b3e8:	e1a01003 	mov	r1, r3
  10b3ec:	e30e057c 	movw	r0, #58748	; 0xe57c
  10b3f0:	e3400010 	movt	r0, #16
  10b3f4:	ebfffebc 	bl	10aeec <netconn_apimsg>
  10b3f8:	e1a03000 	mov	r3, r0
  10b3fc:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b400:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b404:	e1a00003 	mov	r0, r3
  10b408:	e24bd004 	sub	sp, fp, #4
  10b40c:	e8bd8800 	pop	{fp, pc}

0010b410 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b410:	e92d4800 	push	{fp, lr}
  10b414:	e28db004 	add	fp, sp, #4
  10b418:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b41c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b420:	e1a03001 	mov	r3, r1
  10b424:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b428:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b42c:	e3530000 	cmp	r3, #0
  10b430:	1a000008 	bne	10b458 <netconn_listen_with_backlog+0x48>
  10b434:	e306020c 	movw	r0, #25100	; 0x620c
  10b438:	e3400014 	movt	r0, #20
  10b43c:	ebffdf34 	bl	103114 <rt_kprintf>
  10b440:	e3a01f5a 	mov	r1, #360	; 0x168
  10b444:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b448:	e3400014 	movt	r0, #20
  10b44c:	ebfffe50 	bl	10ad94 <sys_arch_assert>
  10b450:	e3e0300f 	mvn	r3, #15
  10b454:	ea000009 	b	10b480 <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b458:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b45c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b460:	e24b3020 	sub	r3, fp, #32
  10b464:	e1a01003 	mov	r1, r3
  10b468:	e30e0628 	movw	r0, #58920	; 0xe628
  10b46c:	e3400010 	movt	r0, #16
  10b470:	ebfffe9d 	bl	10aeec <netconn_apimsg>
  10b474:	e1a03000 	mov	r3, r0
  10b478:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b47c:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b480:	e1a00003 	mov	r0, r3
  10b484:	e24bd004 	sub	sp, fp, #4
  10b488:	e8bd8800 	pop	{fp, pc}

0010b48c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b48c:	e92d4800 	push	{fp, lr}
  10b490:	e28db004 	add	fp, sp, #4
  10b494:	e24dd010 	sub	sp, sp, #16
  10b498:	e50b0010 	str	r0, [fp, #-16]
  10b49c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b4a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b4a4:	e3530000 	cmp	r3, #0
  10b4a8:	1a000008 	bne	10b4d0 <netconn_accept+0x44>
  10b4ac:	e306022c 	movw	r0, #25132	; 0x622c
  10b4b0:	e3400014 	movt	r0, #20
  10b4b4:	ebffdf16 	bl	103114 <rt_kprintf>
  10b4b8:	e300118d 	movw	r1, #397	; 0x18d
  10b4bc:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b4c0:	e3400014 	movt	r0, #20
  10b4c4:	ebfffe32 	bl	10ad94 <sys_arch_assert>
  10b4c8:	e3e0300f 	mvn	r3, #15
  10b4cc:	ea000053 	b	10b620 <netconn_accept+0x194>
  *new_conn = NULL;
  10b4d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b4d4:	e3a02000 	mov	r2, #0
  10b4d8:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b4dc:	e51b3010 	ldr	r3, [fp, #-16]
  10b4e0:	e3530000 	cmp	r3, #0
  10b4e4:	1a000008 	bne	10b50c <netconn_accept+0x80>
  10b4e8:	e306024c 	movw	r0, #25164	; 0x624c
  10b4ec:	e3400014 	movt	r0, #20
  10b4f0:	ebffdf07 	bl	103114 <rt_kprintf>
  10b4f4:	e300118f 	movw	r1, #399	; 0x18f
  10b4f8:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b4fc:	e3400014 	movt	r0, #20
  10b500:	ebfffe23 	bl	10ad94 <sys_arch_assert>
  10b504:	e3e0300f 	mvn	r3, #15
  10b508:	ea000044 	b	10b620 <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b50c:	e51b3010 	ldr	r3, [fp, #-16]
  10b510:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b514:	e373000c 	cmn	r3, #12
  10b518:	aa000002 	bge	10b528 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b51c:	e51b3010 	ldr	r3, [fp, #-16]
  10b520:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b524:	ea00003d 	b	10b620 <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b528:	e51b3010 	ldr	r3, [fp, #-16]
  10b52c:	e2833018 	add	r3, r3, #24
  10b530:	e1a00003 	mov	r0, r3
  10b534:	ebfffdcd 	bl	10ac70 <sys_mbox_valid>
  10b538:	e1a03000 	mov	r3, r0
  10b53c:	e3530000 	cmp	r3, #0
  10b540:	1a000001 	bne	10b54c <netconn_accept+0xc0>
    return ERR_CLSD;
  10b544:	e3e0300e 	mvn	r3, #14
  10b548:	ea000034 	b	10b620 <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b54c:	e51b3010 	ldr	r3, [fp, #-16]
  10b550:	e2830018 	add	r0, r3, #24
  10b554:	e51b3010 	ldr	r3, [fp, #-16]
  10b558:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b55c:	e1a02003 	mov	r2, r3
  10b560:	e24b300c 	sub	r3, fp, #12
  10b564:	e1a01003 	mov	r1, r3
  10b568:	ebfffd6c 	bl	10ab20 <sys_arch_mbox_fetch>
  10b56c:	e1a03000 	mov	r3, r0
  10b570:	e3730001 	cmn	r3, #1
  10b574:	1a000001 	bne	10b580 <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b578:	e3e03002 	mvn	r3, #2
  10b57c:	ea000027 	b	10b620 <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b580:	e51b300c 	ldr	r3, [fp, #-12]
  10b584:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b588:	e51b3010 	ldr	r3, [fp, #-16]
  10b58c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b590:	e3530000 	cmp	r3, #0
  10b594:	0a000005 	beq	10b5b0 <netconn_accept+0x124>
  10b598:	e51b3010 	ldr	r3, [fp, #-16]
  10b59c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b5a0:	e3a02000 	mov	r2, #0
  10b5a4:	e3a01001 	mov	r1, #1
  10b5a8:	e51b0010 	ldr	r0, [fp, #-16]
  10b5ac:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b5b0:	e51b200c 	ldr	r2, [fp, #-12]
  10b5b4:	e30f3574 	movw	r3, #62836	; 0xf574
  10b5b8:	e3403014 	movt	r3, #20
  10b5bc:	e1520003 	cmp	r2, r3
  10b5c0:	1a000001 	bne	10b5cc <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b5c4:	e3e0300c 	mvn	r3, #12
  10b5c8:	ea000014 	b	10b620 <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b5cc:	e51b3008 	ldr	r3, [fp, #-8]
  10b5d0:	e3530000 	cmp	r3, #0
  10b5d4:	1a00000d 	bne	10b610 <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b5d8:	e51b3010 	ldr	r3, [fp, #-16]
  10b5dc:	e3530000 	cmp	r3, #0
  10b5e0:	0a000008 	beq	10b608 <netconn_accept+0x17c>
  10b5e4:	ebffdb14 	bl	10223c <rt_enter_critical>
  10b5e8:	e51b3010 	ldr	r3, [fp, #-16]
  10b5ec:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b5f0:	e373000c 	cmn	r3, #12
  10b5f4:	ba000002 	blt	10b604 <netconn_accept+0x178>
  10b5f8:	e51b3010 	ldr	r3, [fp, #-16]
  10b5fc:	e3e0200e 	mvn	r2, #14
  10b600:	e5c3200c 	strb	r2, [r3, #12]
  10b604:	ebffdb12 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b608:	e3e0300e 	mvn	r3, #14
  10b60c:	ea000003 	b	10b620 <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b614:	e51b2008 	ldr	r2, [fp, #-8]
  10b618:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b61c:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b620:	e1a00003 	mov	r0, r3
  10b624:	e24bd004 	sub	sp, fp, #4
  10b628:	e8bd8800 	pop	{fp, pc}

0010b62c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b62c:	e92d4800 	push	{fp, lr}
  10b630:	e28db004 	add	fp, sp, #4
  10b634:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b638:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b63c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b640:	e3a03000 	mov	r3, #0
  10b644:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b648:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b64c:	e3530000 	cmp	r3, #0
  10b650:	1a000008 	bne	10b678 <netconn_recv_data+0x4c>
  10b654:	e306026c 	movw	r0, #25196	; 0x626c
  10b658:	e3400014 	movt	r0, #20
  10b65c:	ebffdeac 	bl	103114 <rt_kprintf>
  10b660:	e30011e7 	movw	r1, #487	; 0x1e7
  10b664:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b668:	e3400014 	movt	r0, #20
  10b66c:	ebfffdc8 	bl	10ad94 <sys_arch_assert>
  10b670:	e3e0300f 	mvn	r3, #15
  10b674:	ea0000a5 	b	10b910 <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b678:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b67c:	e3a02000 	mov	r2, #0
  10b680:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b684:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b688:	e3530000 	cmp	r3, #0
  10b68c:	1a000008 	bne	10b6b4 <netconn_recv_data+0x88>
  10b690:	e306028c 	movw	r0, #25228	; 0x628c
  10b694:	e3400014 	movt	r0, #20
  10b698:	ebffde9d 	bl	103114 <rt_kprintf>
  10b69c:	e30011e9 	movw	r1, #489	; 0x1e9
  10b6a0:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b6a4:	e3400014 	movt	r0, #20
  10b6a8:	ebfffdb9 	bl	10ad94 <sys_arch_assert>
  10b6ac:	e3e0300f 	mvn	r3, #15
  10b6b0:	ea000096 	b	10b910 <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b6b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6b8:	e5933000 	ldr	r3, [r3]
  10b6bc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b6c0:	e3530010 	cmp	r3, #16
  10b6c4:	1a000011 	bne	10b710 <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10b6c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6cc:	e2833014 	add	r3, r3, #20
  10b6d0:	e1a00003 	mov	r0, r3
  10b6d4:	ebfffd65 	bl	10ac70 <sys_mbox_valid>
  10b6d8:	e1a03000 	mov	r3, r0
  10b6dc:	e3530000 	cmp	r3, #0
  10b6e0:	1a00000a 	bne	10b710 <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10b6e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6e8:	e2833018 	add	r3, r3, #24
  10b6ec:	e1a00003 	mov	r0, r3
  10b6f0:	ebfffd5e 	bl	10ac70 <sys_mbox_valid>
  10b6f4:	e1a03000 	mov	r3, r0
  10b6f8:	e3530000 	cmp	r3, #0
  10b6fc:	0a000001 	beq	10b708 <netconn_recv_data+0xdc>
  10b700:	e3e0300a 	mvn	r3, #10
  10b704:	ea000081 	b	10b910 <netconn_recv_data+0x2e4>
  10b708:	e3e0300e 	mvn	r3, #14
  10b70c:	ea00007f 	b	10b910 <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10b710:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b714:	e2833014 	add	r3, r3, #20
  10b718:	e1a00003 	mov	r0, r3
  10b71c:	ebfffd53 	bl	10ac70 <sys_mbox_valid>
  10b720:	e1a03000 	mov	r3, r0
  10b724:	e3530000 	cmp	r3, #0
  10b728:	1a000008 	bne	10b750 <netconn_recv_data+0x124>
  10b72c:	e30602a8 	movw	r0, #25256	; 0x62a8
  10b730:	e3400014 	movt	r0, #20
  10b734:	ebffde76 	bl	103114 <rt_kprintf>
  10b738:	e30011f5 	movw	r1, #501	; 0x1f5
  10b73c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b740:	e3400014 	movt	r0, #20
  10b744:	ebfffd92 	bl	10ad94 <sys_arch_assert>
  10b748:	e3e0300a 	mvn	r3, #10
  10b74c:	ea00006f 	b	10b910 <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b750:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b754:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b758:	e373000c 	cmn	r3, #12
  10b75c:	aa000002 	bge	10b76c <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10b760:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b764:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b768:	ea000068 	b	10b910 <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b76c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b770:	e2830014 	add	r0, r3, #20
  10b774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b778:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b77c:	e1a02003 	mov	r2, r3
  10b780:	e24b300c 	sub	r3, fp, #12
  10b784:	e1a01003 	mov	r1, r3
  10b788:	ebfffce4 	bl	10ab20 <sys_arch_mbox_fetch>
  10b78c:	e1a03000 	mov	r3, r0
  10b790:	e3730001 	cmn	r3, #1
  10b794:	1a000001 	bne	10b7a0 <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10b798:	e3e03002 	mvn	r3, #2
  10b79c:	ea00005b 	b	10b910 <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b7a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7a4:	e5933000 	ldr	r3, [r3]
  10b7a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b7ac:	e3530010 	cmp	r3, #16
  10b7b0:	1a000032 	bne	10b880 <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10b7b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10b7bc:	e51b300c 	ldr	r3, [fp, #-12]
  10b7c0:	e3530000 	cmp	r3, #0
  10b7c4:	0a000003 	beq	10b7d8 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10b7c8:	e51b300c 	ldr	r3, [fp, #-12]
  10b7cc:	e1d330b8 	ldrh	r3, [r3, #8]
  10b7d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10b7d4:	ea000001 	b	10b7e0 <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10b7d8:	e3a03001 	mov	r3, #1
  10b7dc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10b7e0:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b7e4:	e1a01003 	mov	r1, r3
  10b7e8:	e30e0ad4 	movw	r0, #60116	; 0xead4
  10b7ec:	e3400010 	movt	r0, #16
  10b7f0:	ebfffdbd 	bl	10aeec <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10b7f4:	e51b300c 	ldr	r3, [fp, #-12]
  10b7f8:	e3530000 	cmp	r3, #0
  10b7fc:	1a00001b 	bne	10b870 <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b800:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b804:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b808:	e3530000 	cmp	r3, #0
  10b80c:	0a000005 	beq	10b828 <netconn_recv_data+0x1fc>
  10b810:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b814:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b818:	e3a02000 	mov	r2, #0
  10b81c:	e3a01001 	mov	r1, #1
  10b820:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b824:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10b828:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b82c:	e5933008 	ldr	r3, [r3, #8]
  10b830:	e3530000 	cmp	r3, #0
  10b834:	1a000008 	bne	10b85c <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10b838:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b83c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b840:	e3530000 	cmp	r3, #0
  10b844:	0a000002 	beq	10b854 <netconn_recv_data+0x228>
  10b848:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b84c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b850:	ea00002e 	b	10b910 <netconn_recv_data+0x2e4>
  10b854:	e3e0300d 	mvn	r3, #13
  10b858:	ea00002c 	b	10b910 <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10b85c:	e3a01001 	mov	r1, #1
  10b860:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b864:	eb00015a 	bl	10bdd4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10b868:	e3e0300e 	mvn	r3, #14
  10b86c:	ea000027 	b	10b910 <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10b870:	e51b300c 	ldr	r3, [fp, #-12]
  10b874:	e1d330b8 	ldrh	r3, [r3, #8]
  10b878:	e14b30b6 	strh	r3, [fp, #-6]
  10b87c:	ea00000d 	b	10b8b8 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10b880:	e51b300c 	ldr	r3, [fp, #-12]
  10b884:	e3530000 	cmp	r3, #0
  10b888:	1a000006 	bne	10b8a8 <netconn_recv_data+0x27c>
  10b88c:	e30602c8 	movw	r0, #25288	; 0x62c8
  10b890:	e3400014 	movt	r0, #20
  10b894:	ebffde1e 	bl	103114 <rt_kprintf>
  10b898:	e300123e 	movw	r1, #574	; 0x23e
  10b89c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b8a0:	e3400014 	movt	r0, #20
  10b8a4:	ebfffd3a 	bl	10ad94 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10b8a8:	e51b300c 	ldr	r3, [fp, #-12]
  10b8ac:	e5933000 	ldr	r3, [r3]
  10b8b0:	e1d330b8 	ldrh	r3, [r3, #8]
  10b8b4:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10b8b8:	ebffda5f 	bl	10223c <rt_enter_critical>
  10b8bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8c0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10b8c4:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b8c8:	e0422003 	sub	r2, r2, r3
  10b8cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8d0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10b8d4:	ebffda5e 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10b8d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8dc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8e0:	e3530000 	cmp	r3, #0
  10b8e4:	0a000005 	beq	10b900 <netconn_recv_data+0x2d4>
  10b8e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8ec:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8f0:	e15b20b6 	ldrh	r2, [fp, #-6]
  10b8f4:	e3a01001 	mov	r1, #1
  10b8f8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b8fc:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10b900:	e51b200c 	ldr	r2, [fp, #-12]
  10b904:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b908:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b90c:	e3a03000 	mov	r3, #0
}
  10b910:	e1a00003 	mov	r0, r3
  10b914:	e24bd004 	sub	sp, fp, #4
  10b918:	e8bd8800 	pop	{fp, pc}

0010b91c <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10b91c:	e92d4800 	push	{fp, lr}
  10b920:	e28db004 	add	fp, sp, #4
  10b924:	e24dd008 	sub	sp, sp, #8
  10b928:	e50b0008 	str	r0, [fp, #-8]
  10b92c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10b930:	e51b3008 	ldr	r3, [fp, #-8]
  10b934:	e3530000 	cmp	r3, #0
  10b938:	0a000004 	beq	10b950 <netconn_recv_tcp_pbuf+0x34>
  10b93c:	e51b3008 	ldr	r3, [fp, #-8]
  10b940:	e5933000 	ldr	r3, [r3]
  10b944:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b948:	e3530010 	cmp	r3, #16
  10b94c:	0a000008 	beq	10b974 <netconn_recv_tcp_pbuf+0x58>
  10b950:	e306028c 	movw	r0, #25228	; 0x628c
  10b954:	e3400014 	movt	r0, #20
  10b958:	ebffdded 	bl	103114 <rt_kprintf>
  10b95c:	e300125e 	movw	r1, #606	; 0x25e
  10b960:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b964:	e3400014 	movt	r0, #20
  10b968:	ebfffd09 	bl	10ad94 <sys_arch_assert>
  10b96c:	e3e0300f 	mvn	r3, #15
  10b970:	ea000003 	b	10b984 <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10b974:	e51b100c 	ldr	r1, [fp, #-12]
  10b978:	e51b0008 	ldr	r0, [fp, #-8]
  10b97c:	ebffff2a 	bl	10b62c <netconn_recv_data>
  10b980:	e1a03000 	mov	r3, r0
}
  10b984:	e1a00003 	mov	r0, r3
  10b988:	e24bd004 	sub	sp, fp, #4
  10b98c:	e8bd8800 	pop	{fp, pc}

0010b990 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10b990:	e92d4800 	push	{fp, lr}
  10b994:	e28db004 	add	fp, sp, #4
  10b998:	e24dd018 	sub	sp, sp, #24
  10b99c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10b9a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10b9a4:	e3a03000 	mov	r3, #0
  10b9a8:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b9ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10b9b0:	e3530000 	cmp	r3, #0
  10b9b4:	1a000008 	bne	10b9dc <netconn_recv+0x4c>
  10b9b8:	e306026c 	movw	r0, #25196	; 0x626c
  10b9bc:	e3400014 	movt	r0, #20
  10b9c0:	ebffddd3 	bl	103114 <rt_kprintf>
  10b9c4:	e3a01f9d 	mov	r1, #628	; 0x274
  10b9c8:	e30600c4 	movw	r0, #24772	; 0x60c4
  10b9cc:	e3400014 	movt	r0, #20
  10b9d0:	ebfffcef 	bl	10ad94 <sys_arch_assert>
  10b9d4:	e3e0300f 	mvn	r3, #15
  10b9d8:	ea00004d 	b	10bb14 <netconn_recv+0x184>
  *new_buf = NULL;
  10b9dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10b9e0:	e3a02000 	mov	r2, #0
  10b9e4:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b9e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10b9ec:	e3530000 	cmp	r3, #0
  10b9f0:	1a000008 	bne	10ba18 <netconn_recv+0x88>
  10b9f4:	e306028c 	movw	r0, #25228	; 0x628c
  10b9f8:	e3400014 	movt	r0, #20
  10b9fc:	ebffddc4 	bl	103114 <rt_kprintf>
  10ba00:	e3001276 	movw	r1, #630	; 0x276
  10ba04:	e30600c4 	movw	r0, #24772	; 0x60c4
  10ba08:	e3400014 	movt	r0, #20
  10ba0c:	ebfffce0 	bl	10ad94 <sys_arch_assert>
  10ba10:	e3e0300f 	mvn	r3, #15
  10ba14:	ea00003e 	b	10bb14 <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10ba18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ba1c:	e5933000 	ldr	r3, [r3]
  10ba20:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ba24:	e3530010 	cmp	r3, #16
  10ba28:	1a000035 	bne	10bb04 <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10ba2c:	e3a03000 	mov	r3, #0
  10ba30:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10ba34:	e3a02d0a 	mov	r2, #640	; 0x280
  10ba38:	e30610c4 	movw	r1, #24772	; 0x60c4
  10ba3c:	e3401014 	movt	r1, #20
  10ba40:	e3a00007 	mov	r0, #7
  10ba44:	eb0034d8 	bl	118dac <memp_malloc_fn>
  10ba48:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10ba4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ba50:	e3530000 	cmp	r3, #0
  10ba54:	1a000001 	bne	10ba60 <netconn_recv+0xd0>
      return ERR_MEM;
  10ba58:	e3e03000 	mvn	r3, #0
  10ba5c:	ea00002c 	b	10bb14 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10ba60:	e24b3010 	sub	r3, fp, #16
  10ba64:	e1a01003 	mov	r1, r3
  10ba68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10ba6c:	ebfffeee 	bl	10b62c <netconn_recv_data>
  10ba70:	e1a03000 	mov	r3, r0
  10ba74:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10ba78:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10ba7c:	e3530000 	cmp	r3, #0
  10ba80:	0a000004 	beq	10ba98 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10ba84:	e51b1008 	ldr	r1, [fp, #-8]
  10ba88:	e3a00007 	mov	r0, #7
  10ba8c:	eb00352e 	bl	118f4c <memp_free>
      return err;
  10ba90:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10ba94:	ea00001e 	b	10bb14 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10ba98:	e51b3010 	ldr	r3, [fp, #-16]
  10ba9c:	e3530000 	cmp	r3, #0
  10baa0:	1a000006 	bne	10bac0 <netconn_recv+0x130>
  10baa4:	e30602d4 	movw	r0, #25300	; 0x62d4
  10baa8:	e3400014 	movt	r0, #20
  10baac:	ebffdd98 	bl	103114 <rt_kprintf>
  10bab0:	e300128a 	movw	r1, #650	; 0x28a
  10bab4:	e30600c4 	movw	r0, #24772	; 0x60c4
  10bab8:	e3400014 	movt	r0, #20
  10babc:	ebfffcb4 	bl	10ad94 <sys_arch_assert>

    buf->p = p;
  10bac0:	e51b2010 	ldr	r2, [fp, #-16]
  10bac4:	e51b3008 	ldr	r3, [fp, #-8]
  10bac8:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10bacc:	e51b2010 	ldr	r2, [fp, #-16]
  10bad0:	e51b3008 	ldr	r3, [fp, #-8]
  10bad4:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10bad8:	e51b3008 	ldr	r3, [fp, #-8]
  10badc:	e3a02000 	mov	r2, #0
  10bae0:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10bae4:	e51b3008 	ldr	r3, [fp, #-8]
  10bae8:	e3a02000 	mov	r2, #0
  10baec:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10baf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10baf4:	e51b2008 	ldr	r2, [fp, #-8]
  10baf8:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10bafc:	e3a03000 	mov	r3, #0
  10bb00:	ea000003 	b	10bb14 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10bb04:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10bb08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bb0c:	ebfffec6 	bl	10b62c <netconn_recv_data>
  10bb10:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10bb14:	e1a00003 	mov	r0, r3
  10bb18:	e24bd004 	sub	sp, fp, #4
  10bb1c:	e8bd8800 	pop	{fp, pc}

0010bb20 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10bb20:	e92d4800 	push	{fp, lr}
  10bb24:	e28db004 	add	fp, sp, #4
  10bb28:	e24dd010 	sub	sp, sp, #16
  10bb2c:	e50b0008 	str	r0, [fp, #-8]
  10bb30:	e50b100c 	str	r1, [fp, #-12]
  10bb34:	e50b2010 	str	r2, [fp, #-16]
  10bb38:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10bb3c:	e51b300c 	ldr	r3, [fp, #-12]
  10bb40:	e3530000 	cmp	r3, #0
  10bb44:	0a000010 	beq	10bb8c <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10bb48:	e51b3010 	ldr	r3, [fp, #-16]
  10bb4c:	e3530000 	cmp	r3, #0
  10bb50:	0a000002 	beq	10bb60 <netconn_sendto+0x40>
  10bb54:	e51b3010 	ldr	r3, [fp, #-16]
  10bb58:	e5933000 	ldr	r3, [r3]
  10bb5c:	ea000000 	b	10bb64 <netconn_sendto+0x44>
  10bb60:	e3a03000 	mov	r3, #0
  10bb64:	e51b200c 	ldr	r2, [fp, #-12]
  10bb68:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10bb6c:	e51b300c 	ldr	r3, [fp, #-12]
  10bb70:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10bb74:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10bb78:	e51b100c 	ldr	r1, [fp, #-12]
  10bb7c:	e51b0008 	ldr	r0, [fp, #-8]
  10bb80:	eb000005 	bl	10bb9c <netconn_send>
  10bb84:	e1a03000 	mov	r3, r0
  10bb88:	ea000000 	b	10bb90 <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10bb8c:	e3e03005 	mvn	r3, #5
}
  10bb90:	e1a00003 	mov	r0, r3
  10bb94:	e24bd004 	sub	sp, fp, #4
  10bb98:	e8bd8800 	pop	{fp, pc}

0010bb9c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bb9c:	e92d4800 	push	{fp, lr}
  10bba0:	e28db004 	add	fp, sp, #4
  10bba4:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bba8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bbac:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bbb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbb4:	e3530000 	cmp	r3, #0
  10bbb8:	1a000008 	bne	10bbe0 <netconn_send+0x44>
  10bbbc:	e30602e0 	movw	r0, #25312	; 0x62e0
  10bbc0:	e3400014 	movt	r0, #20
  10bbc4:	ebffdd52 	bl	103114 <rt_kprintf>
  10bbc8:	e30012c3 	movw	r1, #707	; 0x2c3
  10bbcc:	e30600c4 	movw	r0, #24772	; 0x60c4
  10bbd0:	e3400014 	movt	r0, #20
  10bbd4:	ebfffc6e 	bl	10ad94 <sys_arch_assert>
  10bbd8:	e3e0300f 	mvn	r3, #15
  10bbdc:	ea00000b 	b	10bc10 <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bbe0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbe4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bbe8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bbec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bbf0:	e24b3020 	sub	r3, fp, #32
  10bbf4:	e1a01003 	mov	r1, r3
  10bbf8:	e30e08c8 	movw	r0, #59592	; 0xe8c8
  10bbfc:	e3400010 	movt	r0, #16
  10bc00:	ebfffcb9 	bl	10aeec <netconn_apimsg>
  10bc04:	e1a03000 	mov	r3, r0
  10bc08:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bc0c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bc10:	e1a00003 	mov	r0, r3
  10bc14:	e24bd004 	sub	sp, fp, #4
  10bc18:	e8bd8800 	pop	{fp, pc}

0010bc1c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bc1c:	e92d4800 	push	{fp, lr}
  10bc20:	e28db004 	add	fp, sp, #4
  10bc24:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bc28:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bc2c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bc30:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bc34:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bc38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc3c:	e3530000 	cmp	r3, #0
  10bc40:	1a000008 	bne	10bc68 <netconn_write_partly+0x4c>
  10bc44:	e30602fc 	movw	r0, #25340	; 0x62fc
  10bc48:	e3400014 	movt	r0, #20
  10bc4c:	ebffdd30 	bl	103114 <rt_kprintf>
  10bc50:	e30012e6 	movw	r1, #742	; 0x2e6
  10bc54:	e30600c4 	movw	r0, #24772	; 0x60c4
  10bc58:	e3400014 	movt	r0, #20
  10bc5c:	ebfffc4c 	bl	10ad94 <sys_arch_assert>
  10bc60:	e3e0300f 	mvn	r3, #15
  10bc64:	ea000057 	b	10bdc8 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bc68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc6c:	e5933000 	ldr	r3, [r3]
  10bc70:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bc74:	e3530010 	cmp	r3, #16
  10bc78:	0a000008 	beq	10bca0 <netconn_write_partly+0x84>
  10bc7c:	e3060318 	movw	r0, #25368	; 0x6318
  10bc80:	e3400014 	movt	r0, #20
  10bc84:	ebffdd22 	bl	103114 <rt_kprintf>
  10bc88:	e30012e7 	movw	r1, #743	; 0x2e7
  10bc8c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10bc90:	e3400014 	movt	r0, #20
  10bc94:	ebfffc3e 	bl	10ad94 <sys_arch_assert>
  10bc98:	e3e03005 	mvn	r3, #5
  10bc9c:	ea000049 	b	10bdc8 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bca0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bca4:	e3530000 	cmp	r3, #0
  10bca8:	1a000001 	bne	10bcb4 <netconn_write_partly+0x98>
    return ERR_OK;
  10bcac:	e3a03000 	mov	r3, #0
  10bcb0:	ea000044 	b	10bdc8 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10bcb4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcb8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10bcbc:	e2033002 	and	r3, r3, #2
  10bcc0:	e3530000 	cmp	r3, #0
  10bcc4:	1a000003 	bne	10bcd8 <netconn_write_partly+0xbc>
  10bcc8:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bccc:	e2033004 	and	r3, r3, #4
  10bcd0:	e3530000 	cmp	r3, #0
  10bcd4:	0a000001 	beq	10bce0 <netconn_write_partly+0xc4>
  10bcd8:	e3a03001 	mov	r3, #1
  10bcdc:	ea000000 	b	10bce4 <netconn_write_partly+0xc8>
  10bce0:	e3a03000 	mov	r3, #0
  10bce4:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bce8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcec:	e5933020 	ldr	r3, [r3, #32]
  10bcf0:	e3530000 	cmp	r3, #0
  10bcf4:	0a000001 	beq	10bd00 <netconn_write_partly+0xe4>
    dontblock = 1;
  10bcf8:	e3a03001 	mov	r3, #1
  10bcfc:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10bd00:	e55b3005 	ldrb	r3, [fp, #-5]
  10bd04:	e3530000 	cmp	r3, #0
  10bd08:	0a000004 	beq	10bd20 <netconn_write_partly+0x104>
  10bd0c:	e59b3004 	ldr	r3, [fp, #4]
  10bd10:	e3530000 	cmp	r3, #0
  10bd14:	1a000001 	bne	10bd20 <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10bd18:	e3e03005 	mvn	r3, #5
  10bd1c:	ea000029 	b	10bdc8 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10bd20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd24:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10bd28:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bd2c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10bd30:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bd34:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10bd38:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bd3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bd40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd44:	e5933020 	ldr	r3, [r3, #32]
  10bd48:	e3530000 	cmp	r3, #0
  10bd4c:	0a000003 	beq	10bd60 <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10bd50:	ebfffc28 	bl	10adf8 <sys_now>
  10bd54:	e1a03000 	mov	r3, r0
  10bd58:	e50b300c 	str	r3, [fp, #-12]
  10bd5c:	ea000001 	b	10bd68 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10bd60:	e3a03000 	mov	r3, #0
  10bd64:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10bd68:	e24b3020 	sub	r3, fp, #32
  10bd6c:	e1a01003 	mov	r1, r3
  10bd70:	e30f01c0 	movw	r0, #61888	; 0xf1c0
  10bd74:	e3400010 	movt	r0, #16
  10bd78:	ebfffc5b 	bl	10aeec <netconn_apimsg>
  10bd7c:	e1a03000 	mov	r3, r0
  10bd80:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10bd84:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10bd88:	e3530000 	cmp	r3, #0
  10bd8c:	1a00000c 	bne	10bdc4 <netconn_write_partly+0x1a8>
  10bd90:	e59b3004 	ldr	r3, [fp, #4]
  10bd94:	e3530000 	cmp	r3, #0
  10bd98:	0a000009 	beq	10bdc4 <netconn_write_partly+0x1a8>
    if (dontblock) {
  10bd9c:	e55b3005 	ldrb	r3, [fp, #-5]
  10bda0:	e3530000 	cmp	r3, #0
  10bda4:	0a000003 	beq	10bdb8 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10bda8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10bdac:	e59b3004 	ldr	r3, [fp, #4]
  10bdb0:	e5832000 	str	r2, [r3]
  10bdb4:	ea000002 	b	10bdc4 <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10bdb8:	e59b3004 	ldr	r3, [fp, #4]
  10bdbc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10bdc0:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10bdc4:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10bdc8:	e1a00003 	mov	r0, r3
  10bdcc:	e24bd004 	sub	sp, fp, #4
  10bdd0:	e8bd8800 	pop	{fp, pc}

0010bdd4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10bdd4:	e92d4800 	push	{fp, lr}
  10bdd8:	e28db004 	add	fp, sp, #4
  10bddc:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bde0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bde4:	e1a03001 	mov	r3, r1
  10bde8:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bdec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bdf0:	e3530000 	cmp	r3, #0
  10bdf4:	1a000008 	bne	10be1c <netconn_close_shutdown+0x48>
  10bdf8:	e306033c 	movw	r0, #25404	; 0x633c
  10bdfc:	e3400014 	movt	r0, #20
  10be00:	ebffdcc3 	bl	103114 <rt_kprintf>
  10be04:	e3a01fca 	mov	r1, #808	; 0x328
  10be08:	e30600c4 	movw	r0, #24772	; 0x60c4
  10be0c:	e3400014 	movt	r0, #20
  10be10:	ebfffbdf 	bl	10ad94 <sys_arch_assert>
  10be14:	e3e0300f 	mvn	r3, #15
  10be18:	ea00000e 	b	10be58 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10be1c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be20:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10be24:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10be28:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10be2c:	ebfffbf1 	bl	10adf8 <sys_now>
  10be30:	e1a03000 	mov	r3, r0
  10be34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10be38:	e24b3020 	sub	r3, fp, #32
  10be3c:	e1a01003 	mov	r1, r3
  10be40:	e30f0694 	movw	r0, #63124	; 0xf694
  10be44:	e3400010 	movt	r0, #16
  10be48:	ebfffc27 	bl	10aeec <netconn_apimsg>
  10be4c:	e1a03000 	mov	r3, r0
  10be50:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10be54:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10be58:	e1a00003 	mov	r0, r3
  10be5c:	e24bd004 	sub	sp, fp, #4
  10be60:	e8bd8800 	pop	{fp, pc}

0010be64 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10be64:	e92d4800 	push	{fp, lr}
  10be68:	e28db004 	add	fp, sp, #4
  10be6c:	e24dd008 	sub	sp, sp, #8
  10be70:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10be74:	e3a01003 	mov	r1, #3
  10be78:	e51b0008 	ldr	r0, [fp, #-8]
  10be7c:	ebffffd4 	bl	10bdd4 <netconn_close_shutdown>
  10be80:	e1a03000 	mov	r3, r0
}
  10be84:	e1a00003 	mov	r0, r3
  10be88:	e24bd004 	sub	sp, fp, #4
  10be8c:	e8bd8800 	pop	{fp, pc}

0010be90 <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10be90:	e92d4800 	push	{fp, lr}
  10be94:	e28db004 	add	fp, sp, #4
  10be98:	e24dd008 	sub	sp, sp, #8
  10be9c:	e50b0008 	str	r0, [fp, #-8]
  10bea0:	e1a03001 	mov	r3, r1
  10bea4:	e54b3009 	strb	r3, [fp, #-9]
  10bea8:	e1a03002 	mov	r3, r2
  10beac:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10beb0:	e55b3009 	ldrb	r3, [fp, #-9]
  10beb4:	e3530000 	cmp	r3, #0
  10beb8:	13a03001 	movne	r3, #1
  10bebc:	03a03000 	moveq	r3, #0
  10bec0:	e6ef3073 	uxtb	r3, r3
  10bec4:	e6af3073 	sxtb	r3, r3
  10bec8:	e55b200a 	ldrb	r2, [fp, #-10]
  10becc:	e3520000 	cmp	r2, #0
  10bed0:	0a000001 	beq	10bedc <netconn_shutdown+0x4c>
  10bed4:	e3a02002 	mov	r2, #2
  10bed8:	ea000000 	b	10bee0 <netconn_shutdown+0x50>
  10bedc:	e3a02000 	mov	r2, #0
  10bee0:	e1823003 	orr	r3, r2, r3
  10bee4:	e6af3073 	sxtb	r3, r3
  10bee8:	e6ef3073 	uxtb	r3, r3
  10beec:	e1a01003 	mov	r1, r3
  10bef0:	e51b0008 	ldr	r0, [fp, #-8]
  10bef4:	ebffffb6 	bl	10bdd4 <netconn_close_shutdown>
  10bef8:	e1a03000 	mov	r3, r0
}
  10befc:	e1a00003 	mov	r0, r3
  10bf00:	e24bd004 	sub	sp, fp, #4
  10bf04:	e8bd8800 	pop	{fp, pc}

0010bf08 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10bf08:	e92d4800 	push	{fp, lr}
  10bf0c:	e28db004 	add	fp, sp, #4
  10bf10:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bf14:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf18:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bf1c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bf20:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf28:	e3530000 	cmp	r3, #0
  10bf2c:	1a000008 	bne	10bf54 <netconn_join_leave_group+0x4c>
  10bf30:	e3060358 	movw	r0, #25432	; 0x6358
  10bf34:	e3400014 	movt	r0, #20
  10bf38:	ebffdc75 	bl	103114 <rt_kprintf>
  10bf3c:	e3a01e37 	mov	r1, #880	; 0x370
  10bf40:	e30600c4 	movw	r0, #24772	; 0x60c4
  10bf44:	e3400014 	movt	r0, #20
  10bf48:	ebfffb91 	bl	10ad94 <sys_arch_assert>
  10bf4c:	e3e0300f 	mvn	r3, #15
  10bf50:	ea00001b 	b	10bfc4 <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10bf54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf58:	e3530000 	cmp	r3, #0
  10bf5c:	1a000002 	bne	10bf6c <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10bf60:	e309363c 	movw	r3, #38460	; 0x963c
  10bf64:	e3403014 	movt	r3, #20
  10bf68:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10bf6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bf70:	e3530000 	cmp	r3, #0
  10bf74:	1a000002 	bne	10bf84 <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10bf78:	e309363c 	movw	r3, #38460	; 0x963c
  10bf7c:	e3403014 	movt	r3, #20
  10bf80:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10bf84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf88:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10bf8c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf90:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10bf94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bf98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10bf9c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10bfa0:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10bfa4:	e24b3020 	sub	r3, fp, #32
  10bfa8:	e1a01003 	mov	r1, r3
  10bfac:	e30f08d4 	movw	r0, #63700	; 0xf8d4
  10bfb0:	e3400010 	movt	r0, #16
  10bfb4:	ebfffbcc 	bl	10aeec <netconn_apimsg>
  10bfb8:	e1a03000 	mov	r3, r0
  10bfbc:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bfc0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bfc4:	e1a00003 	mov	r0, r3
  10bfc8:	e24bd004 	sub	sp, fp, #4
  10bfcc:	e8bd8800 	pop	{fp, pc}

0010bfd0 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10bfd0:	e92d4800 	push	{fp, lr}
  10bfd4:	e28db004 	add	fp, sp, #4
  10bfd8:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bfdc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bfe0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10bfe4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bfe8:	e3530000 	cmp	r3, #0
  10bfec:	1a000008 	bne	10c014 <netconn_gethostbyname+0x44>
  10bff0:	e3060380 	movw	r0, #25472	; 0x6380
  10bff4:	e3400014 	movt	r0, #20
  10bff8:	ebffdc45 	bl	103114 <rt_kprintf>
  10bffc:	e30013a5 	movw	r1, #933	; 0x3a5
  10c000:	e30600c4 	movw	r0, #24772	; 0x60c4
  10c004:	e3400014 	movt	r0, #20
  10c008:	ebfffb61 	bl	10ad94 <sys_arch_assert>
  10c00c:	e3e0300f 	mvn	r3, #15
  10c010:	ea000036 	b	10c0f0 <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c014:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c018:	e3530000 	cmp	r3, #0
  10c01c:	1a000008 	bne	10c044 <netconn_gethostbyname+0x74>
  10c020:	e30603a4 	movw	r0, #25508	; 0x63a4
  10c024:	e3400014 	movt	r0, #20
  10c028:	ebffdc39 	bl	103114 <rt_kprintf>
  10c02c:	e30013a6 	movw	r1, #934	; 0x3a6
  10c030:	e30600c4 	movw	r0, #24772	; 0x60c4
  10c034:	e3400014 	movt	r0, #20
  10c038:	ebfffb55 	bl	10ad94 <sys_arch_assert>
  10c03c:	e3e0300f 	mvn	r3, #15
  10c040:	ea00002a 	b	10c0f0 <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c044:	e24b301d 	sub	r3, fp, #29
  10c048:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c04c:	e24b301c 	sub	r3, fp, #28
  10c050:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c054:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c058:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c05c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c060:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c064:	e51b3010 	ldr	r3, [fp, #-16]
  10c068:	e3a01000 	mov	r1, #0
  10c06c:	e1a00003 	mov	r0, r3
  10c070:	ebfff96b 	bl	10a624 <sys_sem_new>
  10c074:	e1a03000 	mov	r3, r0
  10c078:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c07c:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c080:	e3530000 	cmp	r3, #0
  10c084:	0a000001 	beq	10c090 <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c088:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c08c:	ea000017 	b	10c0f0 <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c090:	e24b3018 	sub	r3, fp, #24
  10c094:	e3a02001 	mov	r2, #1
  10c098:	e1a01003 	mov	r1, r3
  10c09c:	e30f0a9c 	movw	r0, #64156	; 0xfa9c
  10c0a0:	e3400010 	movt	r0, #16
  10c0a4:	eb00277e 	bl	115ea4 <tcpip_callback_with_block>
  10c0a8:	e1a03000 	mov	r3, r0
  10c0ac:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c0b0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c0b4:	e3530000 	cmp	r3, #0
  10c0b8:	0a000004 	beq	10c0d0 <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c0bc:	e51b3010 	ldr	r3, [fp, #-16]
  10c0c0:	e1a00003 	mov	r0, r3
  10c0c4:	ebfff981 	bl	10a6d0 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c0c8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c0cc:	ea000007 	b	10c0f0 <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c0d0:	e51b3010 	ldr	r3, [fp, #-16]
  10c0d4:	e3a01000 	mov	r1, #0
  10c0d8:	e1a00003 	mov	r0, r3
  10c0dc:	ebfff991 	bl	10a728 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c0e0:	e51b3010 	ldr	r3, [fp, #-16]
  10c0e4:	e1a00003 	mov	r0, r3
  10c0e8:	ebfff978 	bl	10a6d0 <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c0ec:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c0f0:	e1a00003 	mov	r0, r3
  10c0f4:	e24bd004 	sub	sp, fp, #4
  10c0f8:	e8bd8800 	pop	{fp, pc}

0010c0fc <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c0fc:	e92d4800 	push	{fp, lr}
  10c100:	e28db004 	add	fp, sp, #4
  10c104:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c108:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c10c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c110:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c114:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c118:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c11c:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c120:	e51b300c 	ldr	r3, [fp, #-12]
  10c124:	e3530000 	cmp	r3, #0
  10c128:	0a00006b 	beq	10c2dc <recv_raw+0x1e0>
  10c12c:	e51b300c 	ldr	r3, [fp, #-12]
  10c130:	e2833014 	add	r3, r3, #20
  10c134:	e1a00003 	mov	r0, r3
  10c138:	ebfffacc 	bl	10ac70 <sys_mbox_valid>
  10c13c:	e1a03000 	mov	r3, r0
  10c140:	e3530000 	cmp	r3, #0
  10c144:	0a000064 	beq	10c2dc <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c148:	ebffd83b 	bl	10223c <rt_enter_critical>
  10c14c:	e51b300c 	ldr	r3, [fp, #-12]
  10c150:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c154:	e50b3010 	str	r3, [fp, #-16]
  10c158:	ebffd83d 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c15c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c160:	e1d330b8 	ldrh	r3, [r3, #8]
  10c164:	e1a02003 	mov	r2, r3
  10c168:	e51b3010 	ldr	r3, [fp, #-16]
  10c16c:	e0822003 	add	r2, r2, r3
  10c170:	e51b300c 	ldr	r3, [fp, #-12]
  10c174:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c178:	e1520003 	cmp	r2, r3
  10c17c:	da000001 	ble	10c188 <recv_raw+0x8c>
      return 0;
  10c180:	e3a03000 	mov	r3, #0
  10c184:	ea000055 	b	10c2e0 <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c188:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c18c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c190:	e3a02000 	mov	r2, #0
  10c194:	e1a01003 	mov	r1, r3
  10c198:	e3a00004 	mov	r0, #4
  10c19c:	eb003771 	bl	119f68 <pbuf_alloc>
  10c1a0:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c1a4:	e51b3008 	ldr	r3, [fp, #-8]
  10c1a8:	e3530000 	cmp	r3, #0
  10c1ac:	0a000009 	beq	10c1d8 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c1b0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c1b4:	e51b0008 	ldr	r0, [fp, #-8]
  10c1b8:	eb003bc6 	bl	11b0d8 <pbuf_copy>
  10c1bc:	e1a03000 	mov	r3, r0
  10c1c0:	e3530000 	cmp	r3, #0
  10c1c4:	0a000003 	beq	10c1d8 <recv_raw+0xdc>
        pbuf_free(q);
  10c1c8:	e51b0008 	ldr	r0, [fp, #-8]
  10c1cc:	eb003a6c 	bl	11ab84 <pbuf_free>
        q = NULL;
  10c1d0:	e3a03000 	mov	r3, #0
  10c1d4:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10c1dc:	e3530000 	cmp	r3, #0
  10c1e0:	0a00003d 	beq	10c2dc <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c1e4:	e3a02081 	mov	r2, #129	; 0x81
  10c1e8:	e30613c8 	movw	r1, #25544	; 0x63c8
  10c1ec:	e3401014 	movt	r1, #20
  10c1f0:	e3a00007 	mov	r0, #7
  10c1f4:	eb0032ec 	bl	118dac <memp_malloc_fn>
  10c1f8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c1fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c200:	e3530000 	cmp	r3, #0
  10c204:	1a000003 	bne	10c218 <recv_raw+0x11c>
        pbuf_free(q);
  10c208:	e51b0008 	ldr	r0, [fp, #-8]
  10c20c:	eb003a5c 	bl	11ab84 <pbuf_free>
        return 0;
  10c210:	e3a03000 	mov	r3, #0
  10c214:	ea000031 	b	10c2e0 <recv_raw+0x1e4>
      }

      buf->p = q;
  10c218:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c21c:	e51b2008 	ldr	r2, [fp, #-8]
  10c220:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c224:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c228:	e51b2008 	ldr	r2, [fp, #-8]
  10c22c:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c230:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  10c234:	e3403014 	movt	r3, #20
  10c238:	e5932010 	ldr	r2, [r3, #16]
  10c23c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c240:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c244:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c248:	e5d33010 	ldrb	r3, [r3, #16]
  10c24c:	e6ff2073 	uxth	r2, r3
  10c250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c254:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c258:	e51b3008 	ldr	r3, [fp, #-8]
  10c25c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c260:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c264:	e51b300c 	ldr	r3, [fp, #-12]
  10c268:	e2833014 	add	r3, r3, #20
  10c26c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c270:	e1a00003 	mov	r0, r3
  10c274:	ebfffa15 	bl	10aad0 <sys_mbox_trypost>
  10c278:	e1a03000 	mov	r3, r0
  10c27c:	e3530000 	cmp	r3, #0
  10c280:	0a000003 	beq	10c294 <recv_raw+0x198>
        netbuf_delete(buf);
  10c284:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c288:	eb000e50 	bl	10fbd0 <netbuf_delete>
        return 0;
  10c28c:	e3a03000 	mov	r3, #0
  10c290:	ea000012 	b	10c2e0 <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c294:	ebffd7e8 	bl	10223c <rt_enter_critical>
  10c298:	e51b300c 	ldr	r3, [fp, #-12]
  10c29c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c2a0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c2a4:	e0822003 	add	r2, r2, r3
  10c2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10c2ac:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c2b0:	ebffd7e7 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c2b4:	e51b300c 	ldr	r3, [fp, #-12]
  10c2b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c2bc:	e3530000 	cmp	r3, #0
  10c2c0:	0a000005 	beq	10c2dc <recv_raw+0x1e0>
  10c2c4:	e51b300c 	ldr	r3, [fp, #-12]
  10c2c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c2cc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c2d0:	e3a01000 	mov	r1, #0
  10c2d4:	e51b000c 	ldr	r0, [fp, #-12]
  10c2d8:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c2dc:	e3a03000 	mov	r3, #0
}
  10c2e0:	e1a00003 	mov	r0, r3
  10c2e4:	e24bd004 	sub	sp, fp, #4
  10c2e8:	e8bd8800 	pop	{fp, pc}

0010c2ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c2ec:	e92d4800 	push	{fp, lr}
  10c2f0:	e28db004 	add	fp, sp, #4
  10c2f4:	e24dd020 	sub	sp, sp, #32
  10c2f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c2fc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c300:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c304:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c308:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c30c:	e3530000 	cmp	r3, #0
  10c310:	1a000006 	bne	10c330 <recv_udp+0x44>
  10c314:	e30603f8 	movw	r0, #25592	; 0x63f8
  10c318:	e3400014 	movt	r0, #20
  10c31c:	ebffdb7c 	bl	103114 <rt_kprintf>
  10c320:	e3a010b1 	mov	r1, #177	; 0xb1
  10c324:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c328:	e3400014 	movt	r0, #20
  10c32c:	ebfffa98 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c334:	e3530000 	cmp	r3, #0
  10c338:	1a000006 	bne	10c358 <recv_udp+0x6c>
  10c33c:	e306041c 	movw	r0, #25628	; 0x641c
  10c340:	e3400014 	movt	r0, #20
  10c344:	ebffdb72 	bl	103114 <rt_kprintf>
  10c348:	e3a010b2 	mov	r1, #178	; 0xb2
  10c34c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c350:	e3400014 	movt	r0, #20
  10c354:	ebfffa8e 	bl	10ad94 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c35c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c360:	e51b3008 	ldr	r3, [fp, #-8]
  10c364:	e5933008 	ldr	r3, [r3, #8]
  10c368:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c36c:	e1520003 	cmp	r2, r3
  10c370:	0a000006 	beq	10c390 <recv_udp+0xa4>
  10c374:	e306043c 	movw	r0, #25660	; 0x643c
  10c378:	e3400014 	movt	r0, #20
  10c37c:	ebffdb64 	bl	103114 <rt_kprintf>
  10c380:	e3a010b4 	mov	r1, #180	; 0xb4
  10c384:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c388:	e3400014 	movt	r0, #20
  10c38c:	ebfffa80 	bl	10ad94 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c390:	ebffd7a9 	bl	10223c <rt_enter_critical>
  10c394:	e51b3008 	ldr	r3, [fp, #-8]
  10c398:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c39c:	e50b300c 	str	r3, [fp, #-12]
  10c3a0:	ebffd7ab 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c3a4:	e51b3008 	ldr	r3, [fp, #-8]
  10c3a8:	e3530000 	cmp	r3, #0
  10c3ac:	0a00000f 	beq	10c3f0 <recv_udp+0x104>
  10c3b0:	e51b3008 	ldr	r3, [fp, #-8]
  10c3b4:	e2833014 	add	r3, r3, #20
  10c3b8:	e1a00003 	mov	r0, r3
  10c3bc:	ebfffa2b 	bl	10ac70 <sys_mbox_valid>
  10c3c0:	e1a03000 	mov	r3, r0
  10c3c4:	e3530000 	cmp	r3, #0
  10c3c8:	0a000008 	beq	10c3f0 <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c3cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c3d0:	e1d330b8 	ldrh	r3, [r3, #8]
  10c3d4:	e1a02003 	mov	r2, r3
  10c3d8:	e51b300c 	ldr	r3, [fp, #-12]
  10c3dc:	e0822003 	add	r2, r2, r3
  10c3e0:	e51b3008 	ldr	r3, [fp, #-8]
  10c3e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c3e8:	e1520003 	cmp	r2, r3
  10c3ec:	da000002 	ble	10c3fc <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c3f0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c3f4:	eb0039e2 	bl	11ab84 <pbuf_free>
    return;
  10c3f8:	ea00003d 	b	10c4f4 <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c3fc:	e3a020c1 	mov	r2, #193	; 0xc1
  10c400:	e30613c8 	movw	r1, #25544	; 0x63c8
  10c404:	e3401014 	movt	r1, #20
  10c408:	e3a00007 	mov	r0, #7
  10c40c:	eb003266 	bl	118dac <memp_malloc_fn>
  10c410:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c414:	e51b3010 	ldr	r3, [fp, #-16]
  10c418:	e3530000 	cmp	r3, #0
  10c41c:	1a000002 	bne	10c42c <recv_udp+0x140>
    pbuf_free(p);
  10c420:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c424:	eb0039d6 	bl	11ab84 <pbuf_free>
    return;
  10c428:	ea000031 	b	10c4f4 <recv_udp+0x208>
  } else {
    buf->p = p;
  10c42c:	e51b3010 	ldr	r3, [fp, #-16]
  10c430:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c434:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c438:	e51b3010 	ldr	r3, [fp, #-16]
  10c43c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c440:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c444:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c448:	e3530000 	cmp	r3, #0
  10c44c:	0a000002 	beq	10c45c <recv_udp+0x170>
  10c450:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c454:	e5933000 	ldr	r3, [r3]
  10c458:	ea000000 	b	10c460 <recv_udp+0x174>
  10c45c:	e3a03000 	mov	r3, #0
  10c460:	e51b2010 	ldr	r2, [fp, #-16]
  10c464:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c468:	e51b3010 	ldr	r3, [fp, #-16]
  10c46c:	e1db20b4 	ldrh	r2, [fp, #4]
  10c470:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c478:	e1d330b8 	ldrh	r3, [r3, #8]
  10c47c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c480:	e51b3008 	ldr	r3, [fp, #-8]
  10c484:	e2833014 	add	r3, r3, #20
  10c488:	e51b1010 	ldr	r1, [fp, #-16]
  10c48c:	e1a00003 	mov	r0, r3
  10c490:	ebfff98e 	bl	10aad0 <sys_mbox_trypost>
  10c494:	e1a03000 	mov	r3, r0
  10c498:	e3530000 	cmp	r3, #0
  10c49c:	0a000002 	beq	10c4ac <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c4a0:	e51b0010 	ldr	r0, [fp, #-16]
  10c4a4:	eb000dc9 	bl	10fbd0 <netbuf_delete>
    return;
  10c4a8:	ea000011 	b	10c4f4 <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c4ac:	ebffd762 	bl	10223c <rt_enter_critical>
  10c4b0:	e51b3008 	ldr	r3, [fp, #-8]
  10c4b4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c4b8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c4bc:	e0822003 	add	r2, r2, r3
  10c4c0:	e51b3008 	ldr	r3, [fp, #-8]
  10c4c4:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c4c8:	ebffd761 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c4cc:	e51b3008 	ldr	r3, [fp, #-8]
  10c4d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c4d4:	e3530000 	cmp	r3, #0
  10c4d8:	0a000005 	beq	10c4f4 <recv_udp+0x208>
  10c4dc:	e51b3008 	ldr	r3, [fp, #-8]
  10c4e0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c4e4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c4e8:	e3a01000 	mov	r1, #0
  10c4ec:	e51b0008 	ldr	r0, [fp, #-8]
  10c4f0:	e12fff33 	blx	r3
  }
}
  10c4f4:	e24bd004 	sub	sp, fp, #4
  10c4f8:	e8bd8800 	pop	{fp, pc}

0010c4fc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c4fc:	e92d4800 	push	{fp, lr}
  10c500:	e28db004 	add	fp, sp, #4
  10c504:	e24dd018 	sub	sp, sp, #24
  10c508:	e50b0010 	str	r0, [fp, #-16]
  10c50c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c510:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c514:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c518:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c51c:	e3530000 	cmp	r3, #0
  10c520:	1a000006 	bne	10c540 <recv_tcp+0x44>
  10c524:	e306045c 	movw	r0, #25692	; 0x645c
  10c528:	e3400014 	movt	r0, #20
  10c52c:	ebffdaf8 	bl	103114 <rt_kprintf>
  10c530:	e3a010f3 	mov	r1, #243	; 0xf3
  10c534:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c538:	e3400014 	movt	r0, #20
  10c53c:	ebfffa14 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c540:	e51b3010 	ldr	r3, [fp, #-16]
  10c544:	e3530000 	cmp	r3, #0
  10c548:	1a000006 	bne	10c568 <recv_tcp+0x6c>
  10c54c:	e3060480 	movw	r0, #25728	; 0x6480
  10c550:	e3400014 	movt	r0, #20
  10c554:	ebffdaee 	bl	103114 <rt_kprintf>
  10c558:	e3a010f4 	mov	r1, #244	; 0xf4
  10c55c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c560:	e3400014 	movt	r0, #20
  10c564:	ebfffa0a 	bl	10ad94 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c568:	e51b3010 	ldr	r3, [fp, #-16]
  10c56c:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c570:	e51b300c 	ldr	r3, [fp, #-12]
  10c574:	e3530000 	cmp	r3, #0
  10c578:	1a000001 	bne	10c584 <recv_tcp+0x88>
    return ERR_VAL;
  10c57c:	e3e03005 	mvn	r3, #5
  10c580:	ea000053 	b	10c6d4 <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c584:	e51b300c 	ldr	r3, [fp, #-12]
  10c588:	e5933008 	ldr	r3, [r3, #8]
  10c58c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c590:	e1520003 	cmp	r2, r3
  10c594:	0a000006 	beq	10c5b4 <recv_tcp+0xb8>
  10c598:	e30604a0 	movw	r0, #25760	; 0x64a0
  10c59c:	e3400014 	movt	r0, #20
  10c5a0:	ebffdadb 	bl	103114 <rt_kprintf>
  10c5a4:	e3a010fa 	mov	r1, #250	; 0xfa
  10c5a8:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c5ac:	e3400014 	movt	r0, #20
  10c5b0:	ebfff9f7 	bl	10ad94 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c5b4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5b8:	e2833014 	add	r3, r3, #20
  10c5bc:	e1a00003 	mov	r0, r3
  10c5c0:	ebfff9aa 	bl	10ac70 <sys_mbox_valid>
  10c5c4:	e1a03000 	mov	r3, r0
  10c5c8:	e3530000 	cmp	r3, #0
  10c5cc:	1a00000b 	bne	10c600 <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c5d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c5d4:	e3530000 	cmp	r3, #0
  10c5d8:	0a000006 	beq	10c5f8 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c5dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c5e0:	e1d330b8 	ldrh	r3, [r3, #8]
  10c5e4:	e1a01003 	mov	r1, r3
  10c5e8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c5ec:	eb0045ec 	bl	11dda4 <tcp_recved>
      pbuf_free(p);
  10c5f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c5f4:	eb003962 	bl	11ab84 <pbuf_free>
    }
    return ERR_OK;
  10c5f8:	e3a03000 	mov	r3, #0
  10c5fc:	ea000034 	b	10c6d4 <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c600:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c604:	e3530000 	cmp	r3, #0
  10c608:	0a00000b 	beq	10c63c <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c60c:	e51b300c 	ldr	r3, [fp, #-12]
  10c610:	e3530000 	cmp	r3, #0
  10c614:	0a000008 	beq	10c63c <recv_tcp+0x140>
  10c618:	ebffd707 	bl	10223c <rt_enter_critical>
  10c61c:	e51b300c 	ldr	r3, [fp, #-12]
  10c620:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c624:	e373000c 	cmn	r3, #12
  10c628:	ba000002 	blt	10c638 <recv_tcp+0x13c>
  10c62c:	e51b300c 	ldr	r3, [fp, #-12]
  10c630:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c634:	e5c3200c 	strb	r2, [r3, #12]
  10c638:	ebffd705 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c63c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c640:	e3530000 	cmp	r3, #0
  10c644:	0a000003 	beq	10c658 <recv_tcp+0x15c>
    len = p->tot_len;
  10c648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c64c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c650:	e14b30b6 	strh	r3, [fp, #-6]
  10c654:	ea000001 	b	10c660 <recv_tcp+0x164>
  } else {
    len = 0;
  10c658:	e3a03000 	mov	r3, #0
  10c65c:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c660:	e51b300c 	ldr	r3, [fp, #-12]
  10c664:	e2833014 	add	r3, r3, #20
  10c668:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c66c:	e1a00003 	mov	r0, r3
  10c670:	ebfff916 	bl	10aad0 <sys_mbox_trypost>
  10c674:	e1a03000 	mov	r3, r0
  10c678:	e3530000 	cmp	r3, #0
  10c67c:	0a000001 	beq	10c688 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c680:	e3e03000 	mvn	r3, #0
  10c684:	ea000012 	b	10c6d4 <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c688:	ebffd6eb 	bl	10223c <rt_enter_critical>
  10c68c:	e51b300c 	ldr	r3, [fp, #-12]
  10c690:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c694:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c698:	e0822003 	add	r2, r2, r3
  10c69c:	e51b300c 	ldr	r3, [fp, #-12]
  10c6a0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c6a4:	ebffd6ea 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c6a8:	e51b300c 	ldr	r3, [fp, #-12]
  10c6ac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c6b0:	e3530000 	cmp	r3, #0
  10c6b4:	0a000005 	beq	10c6d0 <recv_tcp+0x1d4>
  10c6b8:	e51b300c 	ldr	r3, [fp, #-12]
  10c6bc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c6c0:	e15b20b6 	ldrh	r2, [fp, #-6]
  10c6c4:	e3a01000 	mov	r1, #0
  10c6c8:	e51b000c 	ldr	r0, [fp, #-12]
  10c6cc:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10c6d0:	e3a03000 	mov	r3, #0
}
  10c6d4:	e1a00003 	mov	r0, r3
  10c6d8:	e24bd004 	sub	sp, fp, #4
  10c6dc:	e8bd8800 	pop	{fp, pc}

0010c6e0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10c6e0:	e92d4800 	push	{fp, lr}
  10c6e4:	e28db004 	add	fp, sp, #4
  10c6e8:	e24dd010 	sub	sp, sp, #16
  10c6ec:	e50b0010 	str	r0, [fp, #-16]
  10c6f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10c6f4:	e51b3010 	ldr	r3, [fp, #-16]
  10c6f8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c6fc:	e51b3008 	ldr	r3, [fp, #-8]
  10c700:	e3530000 	cmp	r3, #0
  10c704:	1a000006 	bne	10c724 <poll_tcp+0x44>
  10c708:	e30604c0 	movw	r0, #25792	; 0x64c0
  10c70c:	e3400014 	movt	r0, #20
  10c710:	ebffda7f 	bl	103114 <rt_kprintf>
  10c714:	e3001132 	movw	r1, #306	; 0x132
  10c718:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c71c:	e3400014 	movt	r0, #20
  10c720:	ebfff99b 	bl	10ad94 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10c724:	e51b3008 	ldr	r3, [fp, #-8]
  10c728:	e5933004 	ldr	r3, [r3, #4]
  10c72c:	e3530001 	cmp	r3, #1
  10c730:	1a000003 	bne	10c744 <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c734:	e3a01001 	mov	r1, #1
  10c738:	e51b0008 	ldr	r0, [fp, #-8]
  10c73c:	eb000924 	bl	10ebd4 <lwip_netconn_do_writemore>
  10c740:	ea000006 	b	10c760 <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10c744:	e51b3008 	ldr	r3, [fp, #-8]
  10c748:	e5933004 	ldr	r3, [r3, #4]
  10c74c:	e3530004 	cmp	r3, #4
  10c750:	1a000002 	bne	10c760 <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c754:	e3a01001 	mov	r1, #1
  10c758:	e51b0008 	ldr	r0, [fp, #-8]
  10c75c:	eb000394 	bl	10d5b4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10c760:	e51b3008 	ldr	r3, [fp, #-8]
  10c764:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c768:	e2033010 	and	r3, r3, #16
  10c76c:	e3530000 	cmp	r3, #0
  10c770:	0a00001d 	beq	10c7ec <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c774:	e51b3008 	ldr	r3, [fp, #-8]
  10c778:	e5933008 	ldr	r3, [r3, #8]
  10c77c:	e3530000 	cmp	r3, #0
  10c780:	0a000019 	beq	10c7ec <poll_tcp+0x10c>
  10c784:	e51b3008 	ldr	r3, [fp, #-8]
  10c788:	e5933008 	ldr	r3, [r3, #8]
  10c78c:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c790:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c794:	9a000014 	bls	10c7ec <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c798:	e51b3008 	ldr	r3, [fp, #-8]
  10c79c:	e5933008 	ldr	r3, [r3, #8]
  10c7a0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c7a4:	e353000a 	cmp	r3, #10
  10c7a8:	8a00000f 	bhi	10c7ec <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c7ac:	e51b3008 	ldr	r3, [fp, #-8]
  10c7b0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c7b4:	e3c33010 	bic	r3, r3, #16
  10c7b8:	e6ef2073 	uxtb	r2, r3
  10c7bc:	e51b3008 	ldr	r3, [fp, #-8]
  10c7c0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10c7c4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c7cc:	e3530000 	cmp	r3, #0
  10c7d0:	0a000005 	beq	10c7ec <poll_tcp+0x10c>
  10c7d4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c7dc:	e3a02000 	mov	r2, #0
  10c7e0:	e3a01002 	mov	r1, #2
  10c7e4:	e51b0008 	ldr	r0, [fp, #-8]
  10c7e8:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c7ec:	e3a03000 	mov	r3, #0
}
  10c7f0:	e1a00003 	mov	r0, r3
  10c7f4:	e24bd004 	sub	sp, fp, #4
  10c7f8:	e8bd8800 	pop	{fp, pc}

0010c7fc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10c7fc:	e92d4800 	push	{fp, lr}
  10c800:	e28db004 	add	fp, sp, #4
  10c804:	e24dd018 	sub	sp, sp, #24
  10c808:	e50b0010 	str	r0, [fp, #-16]
  10c80c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c810:	e1a03002 	mov	r3, r2
  10c814:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10c818:	e51b3010 	ldr	r3, [fp, #-16]
  10c81c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c820:	e51b3008 	ldr	r3, [fp, #-8]
  10c824:	e3530000 	cmp	r3, #0
  10c828:	1a000006 	bne	10c848 <sent_tcp+0x4c>
  10c82c:	e30604c0 	movw	r0, #25792	; 0x64c0
  10c830:	e3400014 	movt	r0, #20
  10c834:	ebffda36 	bl	103114 <rt_kprintf>
  10c838:	e300115b 	movw	r1, #347	; 0x15b
  10c83c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c840:	e3400014 	movt	r0, #20
  10c844:	ebfff952 	bl	10ad94 <sys_arch_assert>

  if (conn) {
  10c848:	e51b3008 	ldr	r3, [fp, #-8]
  10c84c:	e3530000 	cmp	r3, #0
  10c850:	0a00002c 	beq	10c908 <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10c854:	e51b3008 	ldr	r3, [fp, #-8]
  10c858:	e5933004 	ldr	r3, [r3, #4]
  10c85c:	e3530001 	cmp	r3, #1
  10c860:	1a000003 	bne	10c874 <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c864:	e3a01001 	mov	r1, #1
  10c868:	e51b0008 	ldr	r0, [fp, #-8]
  10c86c:	eb0008d8 	bl	10ebd4 <lwip_netconn_do_writemore>
  10c870:	ea000006 	b	10c890 <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10c874:	e51b3008 	ldr	r3, [fp, #-8]
  10c878:	e5933004 	ldr	r3, [r3, #4]
  10c87c:	e3530004 	cmp	r3, #4
  10c880:	1a000002 	bne	10c890 <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c884:	e3a01001 	mov	r1, #1
  10c888:	e51b0008 	ldr	r0, [fp, #-8]
  10c88c:	eb000348 	bl	10d5b4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c890:	e51b3008 	ldr	r3, [fp, #-8]
  10c894:	e5933008 	ldr	r3, [r3, #8]
  10c898:	e3530000 	cmp	r3, #0
  10c89c:	0a000019 	beq	10c908 <sent_tcp+0x10c>
  10c8a0:	e51b3008 	ldr	r3, [fp, #-8]
  10c8a4:	e5933008 	ldr	r3, [r3, #8]
  10c8a8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c8ac:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c8b0:	9a000014 	bls	10c908 <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c8b4:	e51b3008 	ldr	r3, [fp, #-8]
  10c8b8:	e5933008 	ldr	r3, [r3, #8]
  10c8bc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c8c0:	e353000a 	cmp	r3, #10
  10c8c4:	8a00000f 	bhi	10c908 <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c8c8:	e51b3008 	ldr	r3, [fp, #-8]
  10c8cc:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c8d0:	e3c33010 	bic	r3, r3, #16
  10c8d4:	e6ef2073 	uxtb	r2, r3
  10c8d8:	e51b3008 	ldr	r3, [fp, #-8]
  10c8dc:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10c8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10c8e4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c8e8:	e3530000 	cmp	r3, #0
  10c8ec:	0a000005 	beq	10c908 <sent_tcp+0x10c>
  10c8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10c8f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c8f8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c8fc:	e3a01002 	mov	r1, #2
  10c900:	e51b0008 	ldr	r0, [fp, #-8]
  10c904:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c908:	e3a03000 	mov	r3, #0
}
  10c90c:	e1a00003 	mov	r0, r3
  10c910:	e24bd004 	sub	sp, fp, #4
  10c914:	e8bd8800 	pop	{fp, pc}

0010c918 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10c918:	e92d4800 	push	{fp, lr}
  10c91c:	e28db004 	add	fp, sp, #4
  10c920:	e24dd018 	sub	sp, sp, #24
  10c924:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c928:	e1a03001 	mov	r3, r1
  10c92c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10c930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c934:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c938:	e51b3008 	ldr	r3, [fp, #-8]
  10c93c:	e3530000 	cmp	r3, #0
  10c940:	1a000006 	bne	10c960 <err_tcp+0x48>
  10c944:	e30604c0 	movw	r0, #25792	; 0x64c0
  10c948:	e3400014 	movt	r0, #20
  10c94c:	ebffd9f0 	bl	103114 <rt_kprintf>
  10c950:	e300117e 	movw	r1, #382	; 0x17e
  10c954:	e30603c8 	movw	r0, #25544	; 0x63c8
  10c958:	e3400014 	movt	r0, #20
  10c95c:	ebfff90c 	bl	10ad94 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10c960:	e51b3008 	ldr	r3, [fp, #-8]
  10c964:	e3a02000 	mov	r2, #0
  10c968:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10c96c:	e51b3008 	ldr	r3, [fp, #-8]
  10c970:	e5933004 	ldr	r3, [r3, #4]
  10c974:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10c978:	e51b3008 	ldr	r3, [fp, #-8]
  10c97c:	e3a02000 	mov	r2, #0
  10c980:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10c984:	e51b300c 	ldr	r3, [fp, #-12]
  10c988:	e3530004 	cmp	r3, #4
  10c98c:	1a00000e 	bne	10c9cc <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10c990:	e3a03000 	mov	r3, #0
  10c994:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10c998:	e51b3008 	ldr	r3, [fp, #-8]
  10c99c:	e3530000 	cmp	r3, #0
  10c9a0:	0a00000e 	beq	10c9e0 <err_tcp+0xc8>
  10c9a4:	ebffd624 	bl	10223c <rt_enter_critical>
  10c9a8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9ac:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c9b0:	e373000c 	cmn	r3, #12
  10c9b4:	ba000002 	blt	10c9c4 <err_tcp+0xac>
  10c9b8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9bc:	e3a02000 	mov	r2, #0
  10c9c0:	e5c3200c 	strb	r2, [r3, #12]
  10c9c4:	ebffd622 	bl	102254 <rt_exit_critical>
  10c9c8:	ea000004 	b	10c9e0 <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10c9cc:	ebffd61a 	bl	10223c <rt_enter_critical>
  10c9d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c9d4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c9d8:	e5c3200c 	strb	r2, [r3, #12]
  10c9dc:	ebffd61c 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10c9e0:	e51b3008 	ldr	r3, [fp, #-8]
  10c9e4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9e8:	e3530000 	cmp	r3, #0
  10c9ec:	0a000005 	beq	10ca08 <err_tcp+0xf0>
  10c9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10c9f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9f8:	e3a02000 	mov	r2, #0
  10c9fc:	e3a01004 	mov	r1, #4
  10ca00:	e51b0008 	ldr	r0, [fp, #-8]
  10ca04:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10ca08:	e51b3008 	ldr	r3, [fp, #-8]
  10ca0c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca10:	e3530000 	cmp	r3, #0
  10ca14:	0a000005 	beq	10ca30 <err_tcp+0x118>
  10ca18:	e51b3008 	ldr	r3, [fp, #-8]
  10ca1c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca20:	e3a02000 	mov	r2, #0
  10ca24:	e3a01000 	mov	r1, #0
  10ca28:	e51b0008 	ldr	r0, [fp, #-8]
  10ca2c:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10ca30:	e51b3008 	ldr	r3, [fp, #-8]
  10ca34:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca38:	e3530000 	cmp	r3, #0
  10ca3c:	0a000005 	beq	10ca58 <err_tcp+0x140>
  10ca40:	e51b3008 	ldr	r3, [fp, #-8]
  10ca44:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca48:	e3a02000 	mov	r2, #0
  10ca4c:	e3a01002 	mov	r1, #2
  10ca50:	e51b0008 	ldr	r0, [fp, #-8]
  10ca54:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10ca58:	e51b3008 	ldr	r3, [fp, #-8]
  10ca5c:	e2833014 	add	r3, r3, #20
  10ca60:	e1a00003 	mov	r0, r3
  10ca64:	ebfff881 	bl	10ac70 <sys_mbox_valid>
  10ca68:	e1a03000 	mov	r3, r0
  10ca6c:	e3530000 	cmp	r3, #0
  10ca70:	0a000004 	beq	10ca88 <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10ca74:	e51b3008 	ldr	r3, [fp, #-8]
  10ca78:	e2833014 	add	r3, r3, #20
  10ca7c:	e3a01000 	mov	r1, #0
  10ca80:	e1a00003 	mov	r0, r3
  10ca84:	ebfff811 	bl	10aad0 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10ca88:	e51b3008 	ldr	r3, [fp, #-8]
  10ca8c:	e2833018 	add	r3, r3, #24
  10ca90:	e1a00003 	mov	r0, r3
  10ca94:	ebfff875 	bl	10ac70 <sys_mbox_valid>
  10ca98:	e1a03000 	mov	r3, r0
  10ca9c:	e3530000 	cmp	r3, #0
  10caa0:	0a000004 	beq	10cab8 <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10caa4:	e51b3008 	ldr	r3, [fp, #-8]
  10caa8:	e2833018 	add	r3, r3, #24
  10caac:	e3a01000 	mov	r1, #0
  10cab0:	e1a00003 	mov	r0, r3
  10cab4:	ebfff805 	bl	10aad0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10cab8:	e51b300c 	ldr	r3, [fp, #-12]
  10cabc:	e3530001 	cmp	r3, #1
  10cac0:	0a000005 	beq	10cadc <err_tcp+0x1c4>
  10cac4:	e51b300c 	ldr	r3, [fp, #-12]
  10cac8:	e3530004 	cmp	r3, #4
  10cacc:	0a000002 	beq	10cadc <err_tcp+0x1c4>
  10cad0:	e51b300c 	ldr	r3, [fp, #-12]
  10cad4:	e3530003 	cmp	r3, #3
  10cad8:	1a000042 	bne	10cbe8 <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10cadc:	e51b3008 	ldr	r3, [fp, #-8]
  10cae0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cae4:	e2033004 	and	r3, r3, #4
  10cae8:	e3530000 	cmp	r3, #0
  10caec:	13a03001 	movne	r3, #1
  10caf0:	03a03000 	moveq	r3, #0
  10caf4:	e6ef3073 	uxtb	r3, r3
  10caf8:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10cafc:	e51b3008 	ldr	r3, [fp, #-8]
  10cb00:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cb04:	e3c33004 	bic	r3, r3, #4
  10cb08:	e6ef2073 	uxtb	r2, r3
  10cb0c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb10:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10cb14:	e51b3010 	ldr	r3, [fp, #-16]
  10cb18:	e3530000 	cmp	r3, #0
  10cb1c:	1a00003d 	bne	10cc18 <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10cb20:	e51b3008 	ldr	r3, [fp, #-8]
  10cb24:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb28:	e3530000 	cmp	r3, #0
  10cb2c:	1a000006 	bne	10cb4c <err_tcp+0x234>
  10cb30:	e30604d0 	movw	r0, #25808	; 0x64d0
  10cb34:	e3400014 	movt	r0, #20
  10cb38:	ebffd975 	bl	103114 <rt_kprintf>
  10cb3c:	e30011ad 	movw	r1, #429	; 0x1ad
  10cb40:	e30603c8 	movw	r0, #25544	; 0x63c8
  10cb44:	e3400014 	movt	r0, #20
  10cb48:	ebfff891 	bl	10ad94 <sys_arch_assert>
      conn->current_msg->err = err;
  10cb4c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb50:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb54:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cb58:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10cb5c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb60:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb64:	e5933000 	ldr	r3, [r3]
  10cb68:	e2833010 	add	r3, r3, #16
  10cb6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10cb70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cb74:	ebfff71e 	bl	10a7f4 <sys_sem_valid>
  10cb78:	e1a03000 	mov	r3, r0
  10cb7c:	e3530000 	cmp	r3, #0
  10cb80:	1a000006 	bne	10cba0 <err_tcp+0x288>
  10cb84:	e30604ec 	movw	r0, #25836	; 0x64ec
  10cb88:	e3400014 	movt	r0, #20
  10cb8c:	ebffd960 	bl	103114 <rt_kprintf>
  10cb90:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10cb94:	e30603c8 	movw	r0, #25544	; 0x63c8
  10cb98:	e3400014 	movt	r0, #20
  10cb9c:	ebfff87c 	bl	10ad94 <sys_arch_assert>
      conn->current_msg = NULL;
  10cba0:	e51b3008 	ldr	r3, [fp, #-8]
  10cba4:	e3a02000 	mov	r2, #0
  10cba8:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cbac:	e51b3008 	ldr	r3, [fp, #-8]
  10cbb0:	e3530000 	cmp	r3, #0
  10cbb4:	0a000008 	beq	10cbdc <err_tcp+0x2c4>
  10cbb8:	ebffd59f 	bl	10223c <rt_enter_critical>
  10cbbc:	e51b3008 	ldr	r3, [fp, #-8]
  10cbc0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cbc4:	e373000c 	cmn	r3, #12
  10cbc8:	ba000002 	blt	10cbd8 <err_tcp+0x2c0>
  10cbcc:	e51b3008 	ldr	r3, [fp, #-8]
  10cbd0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cbd4:	e5c3200c 	strb	r2, [r3, #12]
  10cbd8:	ebffd59d 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cbdc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cbe0:	ebfff6c5 	bl	10a6fc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cbe4:	ea00000b 	b	10cc18 <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cbe8:	e51b3008 	ldr	r3, [fp, #-8]
  10cbec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cbf0:	e3530000 	cmp	r3, #0
  10cbf4:	0a000008 	beq	10cc1c <err_tcp+0x304>
  10cbf8:	e3060508 	movw	r0, #25864	; 0x6508
  10cbfc:	e3400014 	movt	r0, #20
  10cc00:	ebffd943 	bl	103114 <rt_kprintf>
  10cc04:	e30011b7 	movw	r1, #439	; 0x1b7
  10cc08:	e30603c8 	movw	r0, #25544	; 0x63c8
  10cc0c:	e3400014 	movt	r0, #20
  10cc10:	ebfff85f 	bl	10ad94 <sys_arch_assert>
  }
}
  10cc14:	ea000000 	b	10cc1c <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cc18:	e320f000 	nop	{0}
}
  10cc1c:	e320f000 	nop	{0}
  10cc20:	e24bd004 	sub	sp, fp, #4
  10cc24:	e8bd8800 	pop	{fp, pc}

0010cc28 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cc28:	e92d4800 	push	{fp, lr}
  10cc2c:	e28db004 	add	fp, sp, #4
  10cc30:	e24dd010 	sub	sp, sp, #16
  10cc34:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cc38:	e51b3010 	ldr	r3, [fp, #-16]
  10cc3c:	e5933008 	ldr	r3, [r3, #8]
  10cc40:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10cc44:	e51b1010 	ldr	r1, [fp, #-16]
  10cc48:	e51b0008 	ldr	r0, [fp, #-8]
  10cc4c:	eb004afb 	bl	11f840 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10cc50:	e30c14fc 	movw	r1, #50428	; 0xc4fc
  10cc54:	e3401010 	movt	r1, #16
  10cc58:	e51b0008 	ldr	r0, [fp, #-8]
  10cc5c:	eb004b06 	bl	11f87c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10cc60:	e30c17fc 	movw	r1, #51196	; 0xc7fc
  10cc64:	e3401010 	movt	r1, #16
  10cc68:	e51b0008 	ldr	r0, [fp, #-8]
  10cc6c:	eb004b1b 	bl	11f8e0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cc70:	e3a02002 	mov	r2, #2
  10cc74:	e30c16e0 	movw	r1, #50912	; 0xc6e0
  10cc78:	e3401010 	movt	r1, #16
  10cc7c:	e51b0008 	ldr	r0, [fp, #-8]
  10cc80:	eb004b5d 	bl	11f9fc <tcp_poll>
  tcp_err(pcb, err_tcp);
  10cc84:	e30c1918 	movw	r1, #51480	; 0xc918
  10cc88:	e3401010 	movt	r1, #16
  10cc8c:	e51b0008 	ldr	r0, [fp, #-8]
  10cc90:	eb004b2b 	bl	11f944 <tcp_err>
}
  10cc94:	e320f000 	nop	{0}
  10cc98:	e24bd004 	sub	sp, fp, #4
  10cc9c:	e8bd8800 	pop	{fp, pc}

0010cca0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10cca0:	e92d4800 	push	{fp, lr}
  10cca4:	e28db004 	add	fp, sp, #4
  10cca8:	e24dd020 	sub	sp, sp, #32
  10ccac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ccb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ccb4:	e1a03002 	mov	r3, r2
  10ccb8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10ccbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ccc0:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10ccc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ccc8:	e3530000 	cmp	r3, #0
  10cccc:	1a000001 	bne	10ccd8 <accept_function+0x38>
    return ERR_VAL;
  10ccd0:	e3e03005 	mvn	r3, #5
  10ccd4:	ea00007d 	b	10ced0 <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10ccd8:	e51b3008 	ldr	r3, [fp, #-8]
  10ccdc:	e2833018 	add	r3, r3, #24
  10cce0:	e1a00003 	mov	r0, r3
  10cce4:	ebfff7e1 	bl	10ac70 <sys_mbox_valid>
  10cce8:	e1a03000 	mov	r3, r0
  10ccec:	e3530000 	cmp	r3, #0
  10ccf0:	1a000001 	bne	10ccfc <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10ccf4:	e3e03005 	mvn	r3, #5
  10ccf8:	ea000074 	b	10ced0 <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10ccfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10cd00:	e3530000 	cmp	r3, #0
  10cd04:	1a000014 	bne	10cd5c <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10cd08:	e51b3008 	ldr	r3, [fp, #-8]
  10cd0c:	e2833018 	add	r3, r3, #24
  10cd10:	e30f1574 	movw	r1, #62836	; 0xf574
  10cd14:	e3401014 	movt	r1, #20
  10cd18:	e1a00003 	mov	r0, r3
  10cd1c:	ebfff76b 	bl	10aad0 <sys_mbox_trypost>
  10cd20:	e1a03000 	mov	r3, r0
  10cd24:	e3530000 	cmp	r3, #0
  10cd28:	1a000009 	bne	10cd54 <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd2c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd30:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd34:	e3530000 	cmp	r3, #0
  10cd38:	0a000005 	beq	10cd54 <accept_function+0xb4>
  10cd3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd44:	e3a02000 	mov	r2, #0
  10cd48:	e3a01000 	mov	r1, #0
  10cd4c:	e51b0008 	ldr	r0, [fp, #-8]
  10cd50:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10cd54:	e3e03005 	mvn	r3, #5
  10cd58:	ea00005c 	b	10ced0 <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10cd5c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd60:	e5932000 	ldr	r2, [r3]
  10cd64:	e51b3008 	ldr	r3, [fp, #-8]
  10cd68:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd6c:	e1a01003 	mov	r1, r3
  10cd70:	e1a00002 	mov	r0, r2
  10cd74:	eb0000f7 	bl	10d158 <netconn_alloc>
  10cd78:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10cd7c:	e51b300c 	ldr	r3, [fp, #-12]
  10cd80:	e3530000 	cmp	r3, #0
  10cd84:	1a000014 	bne	10cddc <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10cd88:	e51b3008 	ldr	r3, [fp, #-8]
  10cd8c:	e2833018 	add	r3, r3, #24
  10cd90:	e30f1574 	movw	r1, #62836	; 0xf574
  10cd94:	e3401014 	movt	r1, #20
  10cd98:	e1a00003 	mov	r0, r3
  10cd9c:	ebfff74b 	bl	10aad0 <sys_mbox_trypost>
  10cda0:	e1a03000 	mov	r3, r0
  10cda4:	e3530000 	cmp	r3, #0
  10cda8:	1a000009 	bne	10cdd4 <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cdac:	e51b3008 	ldr	r3, [fp, #-8]
  10cdb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cdb4:	e3530000 	cmp	r3, #0
  10cdb8:	0a000005 	beq	10cdd4 <accept_function+0x134>
  10cdbc:	e51b3008 	ldr	r3, [fp, #-8]
  10cdc0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cdc4:	e3a02000 	mov	r2, #0
  10cdc8:	e3a01000 	mov	r1, #0
  10cdcc:	e51b0008 	ldr	r0, [fp, #-8]
  10cdd0:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10cdd4:	e3e03000 	mvn	r3, #0
  10cdd8:	ea00003c 	b	10ced0 <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10cddc:	e51b300c 	ldr	r3, [fp, #-12]
  10cde0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10cde4:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10cde8:	e51b000c 	ldr	r0, [fp, #-12]
  10cdec:	ebffff8d 	bl	10cc28 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10cdf0:	e51b300c 	ldr	r3, [fp, #-12]
  10cdf4:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10cdf8:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10cdfc:	e51b3008 	ldr	r3, [fp, #-8]
  10ce00:	e2833018 	add	r3, r3, #24
  10ce04:	e51b100c 	ldr	r1, [fp, #-12]
  10ce08:	e1a00003 	mov	r0, r3
  10ce0c:	ebfff72f 	bl	10aad0 <sys_mbox_trypost>
  10ce10:	e1a03000 	mov	r3, r0
  10ce14:	e3530000 	cmp	r3, #0
  10ce18:	0a000021 	beq	10cea4 <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10ce1c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce20:	e5933008 	ldr	r3, [r3, #8]
  10ce24:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10ce28:	e3a01000 	mov	r1, #0
  10ce2c:	e51b0010 	ldr	r0, [fp, #-16]
  10ce30:	eb004a82 	bl	11f840 <tcp_arg>
    tcp_recv(pcb, NULL);
  10ce34:	e3a01000 	mov	r1, #0
  10ce38:	e51b0010 	ldr	r0, [fp, #-16]
  10ce3c:	eb004a8e 	bl	11f87c <tcp_recv>
    tcp_sent(pcb, NULL);
  10ce40:	e3a01000 	mov	r1, #0
  10ce44:	e51b0010 	ldr	r0, [fp, #-16]
  10ce48:	eb004aa4 	bl	11f8e0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10ce4c:	e3a02000 	mov	r2, #0
  10ce50:	e3a01000 	mov	r1, #0
  10ce54:	e51b0010 	ldr	r0, [fp, #-16]
  10ce58:	eb004ae7 	bl	11f9fc <tcp_poll>
    tcp_err(pcb, NULL);
  10ce5c:	e3a01000 	mov	r1, #0
  10ce60:	e51b0010 	ldr	r0, [fp, #-16]
  10ce64:	eb004ab6 	bl	11f944 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10ce68:	e51b300c 	ldr	r3, [fp, #-12]
  10ce6c:	e3a02000 	mov	r2, #0
  10ce70:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10ce74:	e51b300c 	ldr	r3, [fp, #-12]
  10ce78:	e2833014 	add	r3, r3, #20
  10ce7c:	e1a00003 	mov	r0, r3
  10ce80:	ebfff6f9 	bl	10aa6c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10ce84:	e51b300c 	ldr	r3, [fp, #-12]
  10ce88:	e2833014 	add	r3, r3, #20
  10ce8c:	e1a00003 	mov	r0, r3
  10ce90:	ebfff780 	bl	10ac98 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10ce94:	e51b000c 	ldr	r0, [fp, #-12]
  10ce98:	eb000122 	bl	10d328 <netconn_free>
    return ERR_MEM;
  10ce9c:	e3e03000 	mvn	r3, #0
  10cea0:	ea00000a 	b	10ced0 <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cea4:	e51b3008 	ldr	r3, [fp, #-8]
  10cea8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ceac:	e3530000 	cmp	r3, #0
  10ceb0:	0a000005 	beq	10cecc <accept_function+0x22c>
  10ceb4:	e51b3008 	ldr	r3, [fp, #-8]
  10ceb8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cebc:	e3a02000 	mov	r2, #0
  10cec0:	e3a01000 	mov	r1, #0
  10cec4:	e51b0008 	ldr	r0, [fp, #-8]
  10cec8:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10cecc:	e3a03000 	mov	r3, #0
}
  10ced0:	e1a00003 	mov	r0, r3
  10ced4:	e24bd004 	sub	sp, fp, #4
  10ced8:	e8bd8800 	pop	{fp, pc}

0010cedc <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10cedc:	e92d4810 	push	{r4, fp, lr}
  10cee0:	e28db008 	add	fp, sp, #8
  10cee4:	e24dd014 	sub	sp, sp, #20
  10cee8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10ceec:	e3a03000 	mov	r3, #0
  10cef0:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10cef4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cef8:	e5933000 	ldr	r3, [r3]
  10cefc:	e5933008 	ldr	r3, [r3, #8]
  10cf00:	e3530000 	cmp	r3, #0
  10cf04:	0a000006 	beq	10cf24 <pcb_new+0x48>
  10cf08:	e3060524 	movw	r0, #25892	; 0x6524
  10cf0c:	e3400014 	movt	r0, #20
  10cf10:	ebffd87f 	bl	103114 <rt_kprintf>
  10cf14:	e3001226 	movw	r1, #550	; 0x226
  10cf18:	e30603c8 	movw	r0, #25544	; 0x63c8
  10cf1c:	e3400014 	movt	r0, #20
  10cf20:	ebfff79b 	bl	10ad94 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10cf24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf28:	e5933000 	ldr	r3, [r3]
  10cf2c:	e5933000 	ldr	r3, [r3]
  10cf30:	e20330f0 	and	r3, r3, #240	; 0xf0
  10cf34:	e3530020 	cmp	r3, #32
  10cf38:	0a00001d 	beq	10cfb4 <pcb_new+0xd8>
  10cf3c:	e3530040 	cmp	r3, #64	; 0x40
  10cf40:	0a000002 	beq	10cf50 <pcb_new+0x74>
  10cf44:	e3530010 	cmp	r3, #16
  10cf48:	0a00003a 	beq	10d038 <pcb_new+0x15c>
  10cf4c:	ea00004b 	b	10d080 <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10cf50:	e51b3010 	ldr	r3, [fp, #-16]
  10cf54:	e6ef2073 	uxtb	r2, r3
  10cf58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf5c:	e5d31008 	ldrb	r1, [r3, #8]
  10cf60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf64:	e5934000 	ldr	r4, [r3]
  10cf68:	e1a00002 	mov	r0, r2
  10cf6c:	eb003d76 	bl	11c54c <raw_new_ip_type>
  10cf70:	e1a03000 	mov	r3, r0
  10cf74:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10cf78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf7c:	e5933000 	ldr	r3, [r3]
  10cf80:	e5933008 	ldr	r3, [r3, #8]
  10cf84:	e3530000 	cmp	r3, #0
  10cf88:	0a000040 	beq	10d090 <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10cf8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf90:	e5933000 	ldr	r3, [r3]
  10cf94:	e5930008 	ldr	r0, [r3, #8]
  10cf98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf9c:	e5933000 	ldr	r3, [r3]
  10cfa0:	e1a02003 	mov	r2, r3
  10cfa4:	e30c10fc 	movw	r1, #49404	; 0xc0fc
  10cfa8:	e3401010 	movt	r1, #16
  10cfac:	eb003c63 	bl	11c140 <raw_recv>
    }
    break;
  10cfb0:	ea000036 	b	10d090 <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10cfb4:	e51b3010 	ldr	r3, [fp, #-16]
  10cfb8:	e6ef2073 	uxtb	r2, r3
  10cfbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfc0:	e5934000 	ldr	r4, [r3]
  10cfc4:	e1a00002 	mov	r0, r2
  10cfc8:	eb006e0b 	bl	1287fc <udp_new_ip_type>
  10cfcc:	e1a03000 	mov	r3, r0
  10cfd0:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10cfd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfd8:	e5933000 	ldr	r3, [r3]
  10cfdc:	e5933008 	ldr	r3, [r3, #8]
  10cfe0:	e3530000 	cmp	r3, #0
  10cfe4:	0a00002b 	beq	10d098 <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10cfe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfec:	e5933000 	ldr	r3, [r3]
  10cff0:	e5933000 	ldr	r3, [r3]
  10cff4:	e3530022 	cmp	r3, #34	; 0x22
  10cff8:	1a000004 	bne	10d010 <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10cffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d000:	e5933000 	ldr	r3, [r3]
  10d004:	e5933008 	ldr	r3, [r3, #8]
  10d008:	e3a02001 	mov	r2, #1
  10d00c:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d010:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d014:	e5933000 	ldr	r3, [r3]
  10d018:	e5930008 	ldr	r0, [r3, #8]
  10d01c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d020:	e5933000 	ldr	r3, [r3]
  10d024:	e1a02003 	mov	r2, r3
  10d028:	e30c12ec 	movw	r1, #49900	; 0xc2ec
  10d02c:	e3401010 	movt	r1, #16
  10d030:	eb006d96 	bl	128690 <udp_recv>
    }
    break;
  10d034:	ea000017 	b	10d098 <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d038:	e51b3010 	ldr	r3, [fp, #-16]
  10d03c:	e6ef2073 	uxtb	r2, r3
  10d040:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d044:	e5934000 	ldr	r4, [r3]
  10d048:	e1a00002 	mov	r0, r2
  10d04c:	eb0049ef 	bl	11f810 <tcp_new_ip_type>
  10d050:	e1a03000 	mov	r3, r0
  10d054:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d05c:	e5933000 	ldr	r3, [r3]
  10d060:	e5933008 	ldr	r3, [r3, #8]
  10d064:	e3530000 	cmp	r3, #0
  10d068:	0a00000c 	beq	10d0a0 <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d06c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d070:	e5933000 	ldr	r3, [r3]
  10d074:	e1a00003 	mov	r0, r3
  10d078:	ebfffeea 	bl	10cc28 <setup_tcp>
    }
    break;
  10d07c:	ea000007 	b	10d0a0 <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d080:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d084:	e3e02005 	mvn	r2, #5
  10d088:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d08c:	ea00000c 	b	10d0c4 <pcb_new+0x1e8>
    break;
  10d090:	e320f000 	nop	{0}
  10d094:	ea000002 	b	10d0a4 <pcb_new+0x1c8>
    break;
  10d098:	e320f000 	nop	{0}
  10d09c:	ea000000 	b	10d0a4 <pcb_new+0x1c8>
    break;
  10d0a0:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d0a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0a8:	e5933000 	ldr	r3, [r3]
  10d0ac:	e5933008 	ldr	r3, [r3, #8]
  10d0b0:	e3530000 	cmp	r3, #0
  10d0b4:	1a000002 	bne	10d0c4 <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d0b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0bc:	e3e02000 	mvn	r2, #0
  10d0c0:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d0c4:	e24bd008 	sub	sp, fp, #8
  10d0c8:	e8bd8810 	pop	{r4, fp, pc}

0010d0cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d0cc:	e92d4800 	push	{fp, lr}
  10d0d0:	e28db004 	add	fp, sp, #4
  10d0d4:	e24dd010 	sub	sp, sp, #16
  10d0d8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d0dc:	e51b3010 	ldr	r3, [fp, #-16]
  10d0e0:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d0e4:	e51b3008 	ldr	r3, [fp, #-8]
  10d0e8:	e3a02000 	mov	r2, #0
  10d0ec:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d0f0:	e51b3008 	ldr	r3, [fp, #-8]
  10d0f4:	e5933000 	ldr	r3, [r3]
  10d0f8:	e5933008 	ldr	r3, [r3, #8]
  10d0fc:	e3530000 	cmp	r3, #0
  10d100:	1a000001 	bne	10d10c <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d104:	e51b0008 	ldr	r0, [fp, #-8]
  10d108:	ebffff73 	bl	10cedc <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d10c:	e51b3008 	ldr	r3, [fp, #-8]
  10d110:	e5933000 	ldr	r3, [r3]
  10d114:	e3530000 	cmp	r3, #0
  10d118:	0a00000b 	beq	10d14c <lwip_netconn_do_newconn+0x80>
  10d11c:	ebffd446 	bl	10223c <rt_enter_critical>
  10d120:	e51b3008 	ldr	r3, [fp, #-8]
  10d124:	e5933000 	ldr	r3, [r3]
  10d128:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d12c:	e373000c 	cmn	r3, #12
  10d130:	ba000004 	blt	10d148 <lwip_netconn_do_newconn+0x7c>
  10d134:	e51b3008 	ldr	r3, [fp, #-8]
  10d138:	e5933000 	ldr	r3, [r3]
  10d13c:	e51b2008 	ldr	r2, [fp, #-8]
  10d140:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d144:	e5c3200c 	strb	r2, [r3, #12]
  10d148:	ebffd441 	bl	102254 <rt_exit_critical>
}
  10d14c:	e320f000 	nop	{0}
  10d150:	e24bd004 	sub	sp, fp, #4
  10d154:	e8bd8800 	pop	{fp, pc}

0010d158 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d158:	e92d4800 	push	{fp, lr}
  10d15c:	e28db004 	add	fp, sp, #4
  10d160:	e24dd010 	sub	sp, sp, #16
  10d164:	e50b0010 	str	r0, [fp, #-16]
  10d168:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d16c:	e3002287 	movw	r2, #647	; 0x287
  10d170:	e30613c8 	movw	r1, #25544	; 0x63c8
  10d174:	e3401014 	movt	r1, #20
  10d178:	e3a00008 	mov	r0, #8
  10d17c:	eb002f0a 	bl	118dac <memp_malloc_fn>
  10d180:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d184:	e51b300c 	ldr	r3, [fp, #-12]
  10d188:	e3530000 	cmp	r3, #0
  10d18c:	1a000001 	bne	10d198 <netconn_alloc+0x40>
    return NULL;
  10d190:	e3a03000 	mov	r3, #0
  10d194:	ea000060 	b	10d31c <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d198:	e51b300c 	ldr	r3, [fp, #-12]
  10d19c:	e3a02000 	mov	r2, #0
  10d1a0:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d1a4:	e51b300c 	ldr	r3, [fp, #-12]
  10d1a8:	e51b2010 	ldr	r2, [fp, #-16]
  10d1ac:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d1b0:	e51b300c 	ldr	r3, [fp, #-12]
  10d1b4:	e3a02000 	mov	r2, #0
  10d1b8:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d1bc:	e51b3010 	ldr	r3, [fp, #-16]
  10d1c0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d1c4:	e3530020 	cmp	r3, #32
  10d1c8:	0a000007 	beq	10d1ec <netconn_alloc+0x94>
  10d1cc:	e3530040 	cmp	r3, #64	; 0x40
  10d1d0:	0a000002 	beq	10d1e0 <netconn_alloc+0x88>
  10d1d4:	e3530010 	cmp	r3, #16
  10d1d8:	0a000006 	beq	10d1f8 <netconn_alloc+0xa0>
  10d1dc:	ea000008 	b	10d204 <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d1e0:	e3a03001 	mov	r3, #1
  10d1e4:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d1e8:	ea00000d 	b	10d224 <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d1ec:	e3a03040 	mov	r3, #64	; 0x40
  10d1f0:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d1f4:	ea00000a 	b	10d224 <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d1f8:	e3a03040 	mov	r3, #64	; 0x40
  10d1fc:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d200:	ea000007 	b	10d224 <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d204:	e3060544 	movw	r0, #25924	; 0x6544
  10d208:	e3400014 	movt	r0, #20
  10d20c:	ebffd7c0 	bl	103114 <rt_kprintf>
  10d210:	e30012a2 	movw	r1, #674	; 0x2a2
  10d214:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d218:	e3400014 	movt	r0, #20
  10d21c:	ebfff6dc 	bl	10ad94 <sys_arch_assert>
    goto free_and_return;
  10d220:	ea000039 	b	10d30c <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d224:	e51b300c 	ldr	r3, [fp, #-12]
  10d228:	e2833014 	add	r3, r3, #20
  10d22c:	e51b1008 	ldr	r1, [fp, #-8]
  10d230:	e1a00003 	mov	r0, r3
  10d234:	ebfff5e2 	bl	10a9c4 <sys_mbox_new>
  10d238:	e1a03000 	mov	r3, r0
  10d23c:	e3530000 	cmp	r3, #0
  10d240:	1a000030 	bne	10d308 <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d244:	e51b300c 	ldr	r3, [fp, #-12]
  10d248:	e2833010 	add	r3, r3, #16
  10d24c:	e3a01000 	mov	r1, #0
  10d250:	e1a00003 	mov	r0, r3
  10d254:	ebfff4f2 	bl	10a624 <sys_sem_new>
  10d258:	e1a03000 	mov	r3, r0
  10d25c:	e3530000 	cmp	r3, #0
  10d260:	0a000004 	beq	10d278 <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d264:	e51b300c 	ldr	r3, [fp, #-12]
  10d268:	e2833014 	add	r3, r3, #20
  10d26c:	e1a00003 	mov	r0, r3
  10d270:	ebfff5fd 	bl	10aa6c <sys_mbox_free>
    goto free_and_return;
  10d274:	ea000024 	b	10d30c <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d278:	e51b300c 	ldr	r3, [fp, #-12]
  10d27c:	e2833018 	add	r3, r3, #24
  10d280:	e1a00003 	mov	r0, r3
  10d284:	ebfff683 	bl	10ac98 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d288:	e51b300c 	ldr	r3, [fp, #-12]
  10d28c:	e3a02000 	mov	r2, #0
  10d290:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d294:	e51b300c 	ldr	r3, [fp, #-12]
  10d298:	e3e02000 	mvn	r2, #0
  10d29c:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d2a0:	e51b300c 	ldr	r3, [fp, #-12]
  10d2a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d2a8:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d2ac:	e51b300c 	ldr	r3, [fp, #-12]
  10d2b0:	e3a02000 	mov	r2, #0
  10d2b4:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d2b8:	e51b300c 	ldr	r3, [fp, #-12]
  10d2bc:	e3a02000 	mov	r2, #0
  10d2c0:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d2c4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2c8:	e3a02000 	mov	r2, #0
  10d2cc:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d2d0:	e51b300c 	ldr	r3, [fp, #-12]
  10d2d4:	e3a02000 	mov	r2, #0
  10d2d8:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d2dc:	e51b300c 	ldr	r3, [fp, #-12]
  10d2e0:	e3a02601 	mov	r2, #1048576	; 0x100000
  10d2e4:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d2e8:	e51b300c 	ldr	r3, [fp, #-12]
  10d2ec:	e3a02000 	mov	r2, #0
  10d2f0:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d2f4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2f8:	e3a02000 	mov	r2, #0
  10d2fc:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d300:	e51b300c 	ldr	r3, [fp, #-12]
  10d304:	ea000004 	b	10d31c <netconn_alloc+0x1c4>
    goto free_and_return;
  10d308:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d30c:	e51b100c 	ldr	r1, [fp, #-12]
  10d310:	e3a00008 	mov	r0, #8
  10d314:	eb002f0c 	bl	118f4c <memp_free>
  return NULL;
  10d318:	e3a03000 	mov	r3, #0
}
  10d31c:	e1a00003 	mov	r0, r3
  10d320:	e24bd004 	sub	sp, fp, #4
  10d324:	e8bd8800 	pop	{fp, pc}

0010d328 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d328:	e92d4800 	push	{fp, lr}
  10d32c:	e28db004 	add	fp, sp, #4
  10d330:	e24dd008 	sub	sp, sp, #8
  10d334:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d338:	e51b3008 	ldr	r3, [fp, #-8]
  10d33c:	e5933008 	ldr	r3, [r3, #8]
  10d340:	e3530000 	cmp	r3, #0
  10d344:	0a000006 	beq	10d364 <netconn_free+0x3c>
  10d348:	e306056c 	movw	r0, #25964	; 0x656c
  10d34c:	e3400014 	movt	r0, #20
  10d350:	ebffd76f 	bl	103114 <rt_kprintf>
  10d354:	e30012da 	movw	r1, #730	; 0x2da
  10d358:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d35c:	e3400014 	movt	r0, #20
  10d360:	ebfff68b 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d364:	e51b3008 	ldr	r3, [fp, #-8]
  10d368:	e2833014 	add	r3, r3, #20
  10d36c:	e1a00003 	mov	r0, r3
  10d370:	ebfff63e 	bl	10ac70 <sys_mbox_valid>
  10d374:	e1a03000 	mov	r3, r0
  10d378:	e3530000 	cmp	r3, #0
  10d37c:	0a000006 	beq	10d39c <netconn_free+0x74>
  10d380:	e306059c 	movw	r0, #26012	; 0x659c
  10d384:	e3400014 	movt	r0, #20
  10d388:	ebffd761 	bl	103114 <rt_kprintf>
  10d38c:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d390:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d394:	e3400014 	movt	r0, #20
  10d398:	ebfff67d 	bl	10ad94 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d39c:	e51b3008 	ldr	r3, [fp, #-8]
  10d3a0:	e2833018 	add	r3, r3, #24
  10d3a4:	e1a00003 	mov	r0, r3
  10d3a8:	ebfff630 	bl	10ac70 <sys_mbox_valid>
  10d3ac:	e1a03000 	mov	r3, r0
  10d3b0:	e3530000 	cmp	r3, #0
  10d3b4:	0a000006 	beq	10d3d4 <netconn_free+0xac>
  10d3b8:	e30605d8 	movw	r0, #26072	; 0x65d8
  10d3bc:	e3400014 	movt	r0, #20
  10d3c0:	ebffd753 	bl	103114 <rt_kprintf>
  10d3c4:	e30012df 	movw	r1, #735	; 0x2df
  10d3c8:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d3cc:	e3400014 	movt	r0, #20
  10d3d0:	ebfff66f 	bl	10ad94 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d3d4:	e51b3008 	ldr	r3, [fp, #-8]
  10d3d8:	e2833010 	add	r3, r3, #16
  10d3dc:	e1a00003 	mov	r0, r3
  10d3e0:	ebfff4ba 	bl	10a6d0 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d3e4:	e51b3008 	ldr	r3, [fp, #-8]
  10d3e8:	e2833010 	add	r3, r3, #16
  10d3ec:	e1a00003 	mov	r0, r3
  10d3f0:	ebfff509 	bl	10a81c <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d3f4:	e51b1008 	ldr	r1, [fp, #-8]
  10d3f8:	e3a00008 	mov	r0, #8
  10d3fc:	eb002ed2 	bl	118f4c <memp_free>
}
  10d400:	e320f000 	nop	{0}
  10d404:	e24bd004 	sub	sp, fp, #4
  10d408:	e8bd8800 	pop	{fp, pc}

0010d40c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d40c:	e92d4800 	push	{fp, lr}
  10d410:	e28db004 	add	fp, sp, #4
  10d414:	e24dd018 	sub	sp, sp, #24
  10d418:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d41c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d420:	e2833014 	add	r3, r3, #20
  10d424:	e1a00003 	mov	r0, r3
  10d428:	ebfff610 	bl	10ac70 <sys_mbox_valid>
  10d42c:	e1a03000 	mov	r3, r0
  10d430:	e3530000 	cmp	r3, #0
  10d434:	0a00002c 	beq	10d4ec <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d438:	ea00001a 	b	10d4a8 <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d43c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d440:	e5933000 	ldr	r3, [r3]
  10d444:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d448:	e3530010 	cmp	r3, #16
  10d44c:	1a000012 	bne	10d49c <netconn_drain+0x90>
        if (mem != NULL) {
  10d450:	e51b3010 	ldr	r3, [fp, #-16]
  10d454:	e3530000 	cmp	r3, #0
  10d458:	0a000012 	beq	10d4a8 <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d45c:	e51b3010 	ldr	r3, [fp, #-16]
  10d460:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d464:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d468:	e5933008 	ldr	r3, [r3, #8]
  10d46c:	e3530000 	cmp	r3, #0
  10d470:	0a000006 	beq	10d490 <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d478:	e5932008 	ldr	r2, [r3, #8]
  10d47c:	e51b3008 	ldr	r3, [fp, #-8]
  10d480:	e1d330b8 	ldrh	r3, [r3, #8]
  10d484:	e1a01003 	mov	r1, r3
  10d488:	e1a00002 	mov	r0, r2
  10d48c:	eb004244 	bl	11dda4 <tcp_recved>
          }
          pbuf_free(p);
  10d490:	e51b0008 	ldr	r0, [fp, #-8]
  10d494:	eb0035ba 	bl	11ab84 <pbuf_free>
  10d498:	ea000002 	b	10d4a8 <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d49c:	e51b3010 	ldr	r3, [fp, #-16]
  10d4a0:	e1a00003 	mov	r0, r3
  10d4a4:	eb0009c9 	bl	10fbd0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d4a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4ac:	e2833014 	add	r3, r3, #20
  10d4b0:	e24b2010 	sub	r2, fp, #16
  10d4b4:	e1a01002 	mov	r1, r2
  10d4b8:	e1a00003 	mov	r0, r3
  10d4bc:	ebfff5d1 	bl	10ac08 <sys_arch_mbox_tryfetch>
  10d4c0:	e1a03000 	mov	r3, r0
  10d4c4:	e3730001 	cmn	r3, #1
  10d4c8:	1affffdb 	bne	10d43c <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d4cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4d0:	e2833014 	add	r3, r3, #20
  10d4d4:	e1a00003 	mov	r0, r3
  10d4d8:	ebfff563 	bl	10aa6c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d4dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4e0:	e2833014 	add	r3, r3, #20
  10d4e4:	e1a00003 	mov	r0, r3
  10d4e8:	ebfff5ea 	bl	10ac98 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d4ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4f0:	e2833018 	add	r3, r3, #24
  10d4f4:	e1a00003 	mov	r0, r3
  10d4f8:	ebfff5dc 	bl	10ac70 <sys_mbox_valid>
  10d4fc:	e1a03000 	mov	r3, r0
  10d500:	e3530000 	cmp	r3, #0
  10d504:	0a000027 	beq	10d5a8 <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d508:	ea000015 	b	10d564 <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d50c:	e51b2010 	ldr	r2, [fp, #-16]
  10d510:	e30f3574 	movw	r3, #62836	; 0xf574
  10d514:	e3403014 	movt	r3, #20
  10d518:	e1520003 	cmp	r2, r3
  10d51c:	0a000010 	beq	10d564 <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d520:	e51b3010 	ldr	r3, [fp, #-16]
  10d524:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d528:	e51b000c 	ldr	r0, [fp, #-12]
  10d52c:	ebffffb6 	bl	10d40c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d530:	e51b300c 	ldr	r3, [fp, #-12]
  10d534:	e5933008 	ldr	r3, [r3, #8]
  10d538:	e3530000 	cmp	r3, #0
  10d53c:	0a000006 	beq	10d55c <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d540:	e51b300c 	ldr	r3, [fp, #-12]
  10d544:	e5933008 	ldr	r3, [r3, #8]
  10d548:	e1a00003 	mov	r0, r3
  10d54c:	eb004065 	bl	11d6e8 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d550:	e51b300c 	ldr	r3, [fp, #-12]
  10d554:	e3a02000 	mov	r2, #0
  10d558:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d55c:	e51b000c 	ldr	r0, [fp, #-12]
  10d560:	ebffff70 	bl	10d328 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d568:	e2833018 	add	r3, r3, #24
  10d56c:	e24b2010 	sub	r2, fp, #16
  10d570:	e1a01002 	mov	r1, r2
  10d574:	e1a00003 	mov	r0, r3
  10d578:	ebfff5a2 	bl	10ac08 <sys_arch_mbox_tryfetch>
  10d57c:	e1a03000 	mov	r3, r0
  10d580:	e3730001 	cmn	r3, #1
  10d584:	1affffe0 	bne	10d50c <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d588:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d58c:	e2833018 	add	r3, r3, #24
  10d590:	e1a00003 	mov	r0, r3
  10d594:	ebfff534 	bl	10aa6c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d59c:	e2833018 	add	r3, r3, #24
  10d5a0:	e1a00003 	mov	r0, r3
  10d5a4:	ebfff5bb 	bl	10ac98 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d5a8:	e320f000 	nop	{0}
  10d5ac:	e24bd004 	sub	sp, fp, #4
  10d5b0:	e8bd8800 	pop	{fp, pc}

0010d5b4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d5b4:	e92d4800 	push	{fp, lr}
  10d5b8:	e28db004 	add	fp, sp, #4
  10d5bc:	e24dd020 	sub	sp, sp, #32
  10d5c0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d5c4:	e1a03001 	mov	r3, r1
  10d5c8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d5cc:	e3a03000 	mov	r3, #0
  10d5d0:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d5d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d5d8:	e3530000 	cmp	r3, #0
  10d5dc:	1a000006 	bne	10d5fc <lwip_netconn_do_close_internal+0x48>
  10d5e0:	e3060614 	movw	r0, #26132	; 0x6614
  10d5e4:	e3400014 	movt	r0, #20
  10d5e8:	ebffd6c9 	bl	103114 <rt_kprintf>
  10d5ec:	e300133d 	movw	r1, #829	; 0x33d
  10d5f0:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d5f4:	e3400014 	movt	r0, #20
  10d5f8:	ebfff5e5 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d5fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d600:	e5933000 	ldr	r3, [r3]
  10d604:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d608:	e3530010 	cmp	r3, #16
  10d60c:	0a000006 	beq	10d62c <lwip_netconn_do_close_internal+0x78>
  10d610:	e3060624 	movw	r0, #26148	; 0x6624
  10d614:	e3400014 	movt	r0, #20
  10d618:	ebffd6bd 	bl	103114 <rt_kprintf>
  10d61c:	e300133e 	movw	r1, #830	; 0x33e
  10d620:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d624:	e3400014 	movt	r0, #20
  10d628:	ebfff5d9 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d62c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d630:	e5933004 	ldr	r3, [r3, #4]
  10d634:	e3530004 	cmp	r3, #4
  10d638:	0a000006 	beq	10d658 <lwip_netconn_do_close_internal+0xa4>
  10d63c:	e3060644 	movw	r0, #26180	; 0x6644
  10d640:	e3400014 	movt	r0, #20
  10d644:	ebffd6b2 	bl	103114 <rt_kprintf>
  10d648:	e300133f 	movw	r1, #831	; 0x33f
  10d64c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d650:	e3400014 	movt	r0, #20
  10d654:	ebfff5ce 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d658:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d65c:	e5933008 	ldr	r3, [r3, #8]
  10d660:	e3530000 	cmp	r3, #0
  10d664:	1a000006 	bne	10d684 <lwip_netconn_do_close_internal+0xd0>
  10d668:	e3060668 	movw	r0, #26216	; 0x6668
  10d66c:	e3400014 	movt	r0, #20
  10d670:	ebffd6a7 	bl	103114 <rt_kprintf>
  10d674:	e3a01d0d 	mov	r1, #832	; 0x340
  10d678:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d67c:	e3400014 	movt	r0, #20
  10d680:	ebfff5c3 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d688:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d68c:	e3530000 	cmp	r3, #0
  10d690:	1a000006 	bne	10d6b0 <lwip_netconn_do_close_internal+0xfc>
  10d694:	e30604d0 	movw	r0, #25808	; 0x64d0
  10d698:	e3400014 	movt	r0, #20
  10d69c:	ebffd69c 	bl	103114 <rt_kprintf>
  10d6a0:	e3001341 	movw	r1, #833	; 0x341
  10d6a4:	e30603c8 	movw	r0, #25544	; 0x63c8
  10d6a8:	e3400014 	movt	r0, #20
  10d6ac:	ebfff5b8 	bl	10ad94 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10d6b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d6b4:	e5933008 	ldr	r3, [r3, #8]
  10d6b8:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10d6bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d6c0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d6c4:	e5d33008 	ldrb	r3, [r3, #8]
  10d6c8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10d6cc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d6d0:	e2033001 	and	r3, r3, #1
  10d6d4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10d6d8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d6dc:	e2033002 	and	r3, r3, #2
  10d6e0:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10d6e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d6e8:	e3530003 	cmp	r3, #3
  10d6ec:	1a000002 	bne	10d6fc <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10d6f0:	e3a03001 	mov	r3, #1
  10d6f4:	e54b3006 	strb	r3, [fp, #-6]
  10d6f8:	ea00001e 	b	10d778 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10d6fc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d700:	e3530000 	cmp	r3, #0
  10d704:	0a00000e 	beq	10d744 <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10d708:	e51b3010 	ldr	r3, [fp, #-16]
  10d70c:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10d710:	e3530005 	cmp	r3, #5
  10d714:	0a000007 	beq	10d738 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10d718:	e51b3010 	ldr	r3, [fp, #-16]
  10d71c:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10d720:	e3530006 	cmp	r3, #6
  10d724:	0a000003 	beq	10d738 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10d728:	e51b3010 	ldr	r3, [fp, #-16]
  10d72c:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10d730:	e3530008 	cmp	r3, #8
  10d734:	1a000002 	bne	10d744 <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10d738:	e3a03001 	mov	r3, #1
  10d73c:	e54b3006 	strb	r3, [fp, #-6]
  10d740:	ea00000c 	b	10d778 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10d744:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d748:	e3530000 	cmp	r3, #0
  10d74c:	0a000007 	beq	10d770 <lwip_netconn_do_close_internal+0x1bc>
  10d750:	e51b3010 	ldr	r3, [fp, #-16]
  10d754:	e5d3301e 	ldrb	r3, [r3, #30]
  10d758:	e2033010 	and	r3, r3, #16
  10d75c:	e3530000 	cmp	r3, #0
  10d760:	0a000002 	beq	10d770 <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10d764:	e3a03001 	mov	r3, #1
  10d768:	e54b3006 	strb	r3, [fp, #-6]
  10d76c:	ea000001 	b	10d778 <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10d770:	e3a03000 	mov	r3, #0
  10d774:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10d778:	e55b3006 	ldrb	r3, [fp, #-6]
  10d77c:	e3530000 	cmp	r3, #0
  10d780:	0a000002 	beq	10d790 <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10d784:	e3a01000 	mov	r1, #0
  10d788:	e51b0010 	ldr	r0, [fp, #-16]
  10d78c:	eb00482b 	bl	11f840 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10d790:	e51b3010 	ldr	r3, [fp, #-16]
  10d794:	e5933014 	ldr	r3, [r3, #20]
  10d798:	e3530001 	cmp	r3, #1
  10d79c:	1a000003 	bne	10d7b0 <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10d7a0:	e3a01000 	mov	r1, #0
  10d7a4:	e51b0010 	ldr	r0, [fp, #-16]
  10d7a8:	eb00487e 	bl	11f9a8 <tcp_accept>
  10d7ac:	ea000018 	b	10d814 <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10d7b0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d7b4:	e3530000 	cmp	r3, #0
  10d7b8:	0a000005 	beq	10d7d4 <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10d7bc:	e3a01000 	mov	r1, #0
  10d7c0:	e51b0010 	ldr	r0, [fp, #-16]
  10d7c4:	eb00482c 	bl	11f87c <tcp_recv>
      tcp_accept(tpcb, NULL);
  10d7c8:	e3a01000 	mov	r1, #0
  10d7cc:	e51b0010 	ldr	r0, [fp, #-16]
  10d7d0:	eb004874 	bl	11f9a8 <tcp_accept>
    }
    if (shut_tx) {
  10d7d4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d7d8:	e3530000 	cmp	r3, #0
  10d7dc:	0a000002 	beq	10d7ec <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10d7e0:	e3a01000 	mov	r1, #0
  10d7e4:	e51b0010 	ldr	r0, [fp, #-16]
  10d7e8:	eb00483c 	bl	11f8e0 <tcp_sent>
    }
    if (close) {
  10d7ec:	e55b3006 	ldrb	r3, [fp, #-6]
  10d7f0:	e3530000 	cmp	r3, #0
  10d7f4:	0a000006 	beq	10d814 <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10d7f8:	e3a02000 	mov	r2, #0
  10d7fc:	e3a01000 	mov	r1, #0
  10d800:	e51b0010 	ldr	r0, [fp, #-16]
  10d804:	eb00487c 	bl	11f9fc <tcp_poll>
      tcp_err(tpcb, NULL);
  10d808:	e3a01000 	mov	r1, #0
  10d80c:	e51b0010 	ldr	r0, [fp, #-16]
  10d810:	eb00484b 	bl	11f944 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10d814:	e55b3006 	ldrb	r3, [fp, #-6]
  10d818:	e3530000 	cmp	r3, #0
  10d81c:	0a000004 	beq	10d834 <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10d820:	e51b0010 	ldr	r0, [fp, #-16]
  10d824:	eb003ebb 	bl	11d318 <tcp_close>
  10d828:	e1a03000 	mov	r3, r0
  10d82c:	e54b3005 	strb	r3, [fp, #-5]
  10d830:	ea000006 	b	10d850 <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10d834:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d838:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10d83c:	e1a01003 	mov	r1, r3
  10d840:	e51b0010 	ldr	r0, [fp, #-16]
  10d844:	eb003ec8 	bl	11d36c <tcp_shutdown>
  10d848:	e1a03000 	mov	r3, r0
  10d84c:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10d850:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d854:	e3530000 	cmp	r3, #0
  10d858:	1a000002 	bne	10d868 <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10d85c:	e3a03001 	mov	r3, #1
  10d860:	e54b3007 	strb	r3, [fp, #-7]
  10d864:	ea000021 	b	10d8f0 <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10d868:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d86c:	e3730001 	cmn	r3, #1
  10d870:	1a00001c 	bne	10d8e8 <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10d874:	e3043e20 	movw	r3, #20000	; 0x4e20
  10d878:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10d87c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d880:	e5933020 	ldr	r3, [r3, #32]
  10d884:	e3530000 	cmp	r3, #0
  10d888:	da000002 	ble	10d898 <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10d88c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d890:	e5933020 	ldr	r3, [r3, #32]
  10d894:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10d898:	ebfff556 	bl	10adf8 <sys_now>
  10d89c:	e1a02000 	mov	r2, r0
  10d8a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8a4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d8a8:	e593300c 	ldr	r3, [r3, #12]
  10d8ac:	e0423003 	sub	r3, r2, r3
  10d8b0:	e1a02003 	mov	r2, r3
  10d8b4:	e51b300c 	ldr	r3, [fp, #-12]
  10d8b8:	e1530002 	cmp	r3, r2
  10d8bc:	ca00000b 	bgt	10d8f0 <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10d8c0:	e3a03001 	mov	r3, #1
  10d8c4:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10d8c8:	e55b3006 	ldrb	r3, [fp, #-6]
  10d8cc:	e3530000 	cmp	r3, #0
  10d8d0:	0a000006 	beq	10d8f0 <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10d8d4:	e51b0010 	ldr	r0, [fp, #-16]
  10d8d8:	eb003f82 	bl	11d6e8 <tcp_abort>
          err = ERR_OK;
  10d8dc:	e3a03000 	mov	r3, #0
  10d8e0:	e54b3005 	strb	r3, [fp, #-5]
  10d8e4:	ea000001 	b	10d8f0 <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10d8e8:	e3a03001 	mov	r3, #1
  10d8ec:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10d8f0:	e55b3007 	ldrb	r3, [fp, #-7]
  10d8f4:	e3530000 	cmp	r3, #0
  10d8f8:	0a00004e 	beq	10da38 <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10d8fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d900:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d904:	e5933000 	ldr	r3, [r3]
  10d908:	e2833010 	add	r3, r3, #16
  10d90c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10d910:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d914:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d918:	e55b2005 	ldrb	r2, [fp, #-5]
  10d91c:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10d920:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d924:	e3a02000 	mov	r2, #0
  10d928:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10d92c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d930:	e3a02000 	mov	r2, #0
  10d934:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10d938:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d93c:	e3530000 	cmp	r3, #0
  10d940:	1a000029 	bne	10d9ec <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10d944:	e55b3006 	ldrb	r3, [fp, #-6]
  10d948:	e3530000 	cmp	r3, #0
  10d94c:	0a00000c 	beq	10d984 <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10d950:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d954:	e3a02000 	mov	r2, #0
  10d958:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10d95c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d960:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d964:	e3530000 	cmp	r3, #0
  10d968:	0a000005 	beq	10d984 <lwip_netconn_do_close_internal+0x3d0>
  10d96c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d970:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d974:	e3a02000 	mov	r2, #0
  10d978:	e3a01004 	mov	r1, #4
  10d97c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d980:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10d984:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d988:	e3530000 	cmp	r3, #0
  10d98c:	0a000009 	beq	10d9b8 <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d994:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d998:	e3530000 	cmp	r3, #0
  10d99c:	0a000005 	beq	10d9b8 <lwip_netconn_do_close_internal+0x404>
  10d9a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9a4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9a8:	e3a02000 	mov	r2, #0
  10d9ac:	e3a01000 	mov	r1, #0
  10d9b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d9b4:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10d9b8:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d9bc:	e3530000 	cmp	r3, #0
  10d9c0:	0a000009 	beq	10d9ec <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10d9c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9cc:	e3530000 	cmp	r3, #0
  10d9d0:	0a000005 	beq	10d9ec <lwip_netconn_do_close_internal+0x438>
  10d9d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9dc:	e3a02000 	mov	r2, #0
  10d9e0:	e3a01002 	mov	r1, #2
  10d9e4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d9e8:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10d9ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9f0:	e3530000 	cmp	r3, #0
  10d9f4:	0a000008 	beq	10da1c <lwip_netconn_do_close_internal+0x468>
  10d9f8:	ebffd20f 	bl	10223c <rt_enter_critical>
  10d9fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da00:	e1d330dc 	ldrsb	r3, [r3, #12]
  10da04:	e373000c 	cmn	r3, #12
  10da08:	ba000002 	blt	10da18 <lwip_netconn_do_close_internal+0x464>
  10da0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da10:	e55b2005 	ldrb	r2, [fp, #-5]
  10da14:	e5c3200c 	strb	r2, [r3, #12]
  10da18:	ebffd20d 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10da1c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10da20:	e3530000 	cmp	r3, #0
  10da24:	0a000001 	beq	10da30 <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10da28:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10da2c:	ebfff332 	bl	10a6fc <sys_sem_signal>
    }
    return ERR_OK;
  10da30:	e3a03000 	mov	r3, #0
  10da34:	ea00002b 	b	10dae8 <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10da38:	e55b3007 	ldrb	r3, [fp, #-7]
  10da3c:	e3530000 	cmp	r3, #0
  10da40:	1a00001d 	bne	10dabc <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10da44:	e51b3010 	ldr	r3, [fp, #-16]
  10da48:	e5933014 	ldr	r3, [r3, #20]
  10da4c:	e3530001 	cmp	r3, #1
  10da50:	1a000006 	bne	10da70 <lwip_netconn_do_close_internal+0x4bc>
  10da54:	e306067c 	movw	r0, #26236	; 0x667c
  10da58:	e3400014 	movt	r0, #20
  10da5c:	ebffd5ac 	bl	103114 <rt_kprintf>
  10da60:	e30013dd 	movw	r1, #989	; 0x3dd
  10da64:	e30603c8 	movw	r0, #25544	; 0x63c8
  10da68:	e3400014 	movt	r0, #20
  10da6c:	ebfff4c8 	bl	10ad94 <sys_arch_assert>
    if (shut_tx) {
  10da70:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10da74:	e3530000 	cmp	r3, #0
  10da78:	0a000003 	beq	10da8c <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10da7c:	e30c17fc 	movw	r1, #51196	; 0xc7fc
  10da80:	e3401010 	movt	r1, #16
  10da84:	e51b0010 	ldr	r0, [fp, #-16]
  10da88:	eb004794 	bl	11f8e0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10da8c:	e3a02001 	mov	r2, #1
  10da90:	e30c16e0 	movw	r1, #50912	; 0xc6e0
  10da94:	e3401010 	movt	r1, #16
  10da98:	e51b0010 	ldr	r0, [fp, #-16]
  10da9c:	eb0047d6 	bl	11f9fc <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10daa0:	e30c1918 	movw	r1, #51480	; 0xc918
  10daa4:	e3401010 	movt	r1, #16
  10daa8:	e51b0010 	ldr	r0, [fp, #-16]
  10daac:	eb0047a4 	bl	11f944 <tcp_err>
    tcp_arg(tpcb, conn);
  10dab0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10dab4:	e51b0010 	ldr	r0, [fp, #-16]
  10dab8:	eb004760 	bl	11f840 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10dabc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dac0:	e3530000 	cmp	r3, #0
  10dac4:	1a000006 	bne	10dae4 <lwip_netconn_do_close_internal+0x530>
  10dac8:	e30606a0 	movw	r0, #26272	; 0x66a0
  10dacc:	e3400014 	movt	r0, #20
  10dad0:	ebffd58f 	bl	103114 <rt_kprintf>
  10dad4:	e30013e9 	movw	r1, #1001	; 0x3e9
  10dad8:	e30603c8 	movw	r0, #25544	; 0x63c8
  10dadc:	e3400014 	movt	r0, #20
  10dae0:	ebfff4ab 	bl	10ad94 <sys_arch_assert>
  return err;
  10dae4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10dae8:	e1a00003 	mov	r0, r3
  10daec:	e24bd004 	sub	sp, fp, #4
  10daf0:	e8bd8800 	pop	{fp, pc}

0010daf4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10daf4:	e92d4800 	push	{fp, lr}
  10daf8:	e28db004 	add	fp, sp, #4
  10dafc:	e24dd010 	sub	sp, sp, #16
  10db00:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10db04:	e51b3010 	ldr	r3, [fp, #-16]
  10db08:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10db0c:	e51b3008 	ldr	r3, [fp, #-8]
  10db10:	e5933000 	ldr	r3, [r3]
  10db14:	e5933004 	ldr	r3, [r3, #4]
  10db18:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10db1c:	e51b300c 	ldr	r3, [fp, #-12]
  10db20:	e3530000 	cmp	r3, #0
  10db24:	0a00000c 	beq	10db5c <lwip_netconn_do_delconn+0x68>
  10db28:	e51b3008 	ldr	r3, [fp, #-8]
  10db2c:	e5933000 	ldr	r3, [r3]
  10db30:	e5933000 	ldr	r3, [r3]
  10db34:	e20330f0 	and	r3, r3, #240	; 0xf0
  10db38:	e3530010 	cmp	r3, #16
  10db3c:	0a000006 	beq	10db5c <lwip_netconn_do_delconn+0x68>
  10db40:	e30606b0 	movw	r0, #26288	; 0x66b0
  10db44:	e3400014 	movt	r0, #20
  10db48:	ebffd571 	bl	103114 <rt_kprintf>
  10db4c:	e30013fb 	movw	r1, #1019	; 0x3fb
  10db50:	e30603c8 	movw	r0, #25544	; 0x63c8
  10db54:	e3400014 	movt	r0, #20
  10db58:	ebfff48d 	bl	10ad94 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10db5c:	e51b300c 	ldr	r3, [fp, #-12]
  10db60:	e3530000 	cmp	r3, #0
  10db64:	0a000005 	beq	10db80 <lwip_netconn_do_delconn+0x8c>
  10db68:	e51b300c 	ldr	r3, [fp, #-12]
  10db6c:	e3530002 	cmp	r3, #2
  10db70:	0a000002 	beq	10db80 <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10db74:	e51b300c 	ldr	r3, [fp, #-12]
  10db78:	e3530003 	cmp	r3, #3
  10db7c:	1a000008 	bne	10dba4 <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10db80:	e51b300c 	ldr	r3, [fp, #-12]
  10db84:	e3530003 	cmp	r3, #3
  10db88:	1a000009 	bne	10dbb4 <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10db8c:	e51b3008 	ldr	r3, [fp, #-8]
  10db90:	e5933000 	ldr	r3, [r3]
  10db94:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10db98:	e2033004 	and	r3, r3, #4
  10db9c:	e3530000 	cmp	r3, #0
  10dba0:	1a000003 	bne	10dbb4 <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10dba4:	e51b3008 	ldr	r3, [fp, #-8]
  10dba8:	e3e02004 	mvn	r2, #4
  10dbac:	e5c32004 	strb	r2, [r3, #4]
  10dbb0:	ea00009e 	b	10de30 <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10dbb4:	e51b300c 	ldr	r3, [fp, #-12]
  10dbb8:	e3530003 	cmp	r3, #3
  10dbbc:	1a00000c 	bne	10dbf4 <lwip_netconn_do_delconn+0x100>
  10dbc0:	e51b3008 	ldr	r3, [fp, #-8]
  10dbc4:	e5933000 	ldr	r3, [r3]
  10dbc8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10dbcc:	e2033004 	and	r3, r3, #4
  10dbd0:	e3530000 	cmp	r3, #0
  10dbd4:	1a000006 	bne	10dbf4 <lwip_netconn_do_delconn+0x100>
  10dbd8:	e30606c4 	movw	r0, #26308	; 0x66c4
  10dbdc:	e3400014 	movt	r0, #20
  10dbe0:	ebffd54b 	bl	103114 <rt_kprintf>
  10dbe4:	e3001419 	movw	r1, #1049	; 0x419
  10dbe8:	e30603c8 	movw	r0, #25544	; 0x63c8
  10dbec:	e3400014 	movt	r0, #20
  10dbf0:	ebfff467 	bl	10ad94 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10dbf4:	e51b3008 	ldr	r3, [fp, #-8]
  10dbf8:	e3a02000 	mov	r2, #0
  10dbfc:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10dc00:	e51b3008 	ldr	r3, [fp, #-8]
  10dc04:	e5933000 	ldr	r3, [r3]
  10dc08:	e1a00003 	mov	r0, r3
  10dc0c:	ebfffdfe 	bl	10d40c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10dc10:	e51b3008 	ldr	r3, [fp, #-8]
  10dc14:	e5933000 	ldr	r3, [r3]
  10dc18:	e5933008 	ldr	r3, [r3, #8]
  10dc1c:	e3530000 	cmp	r3, #0
  10dc20:	0a000068 	beq	10ddc8 <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10dc24:	e51b3008 	ldr	r3, [fp, #-8]
  10dc28:	e5933000 	ldr	r3, [r3]
  10dc2c:	e5933000 	ldr	r3, [r3]
  10dc30:	e20330f0 	and	r3, r3, #240	; 0xf0
  10dc34:	e3530020 	cmp	r3, #32
  10dc38:	0a00000a 	beq	10dc68 <lwip_netconn_do_delconn+0x174>
  10dc3c:	e3530040 	cmp	r3, #64	; 0x40
  10dc40:	0a000002 	beq	10dc50 <lwip_netconn_do_delconn+0x15c>
  10dc44:	e3530010 	cmp	r3, #16
  10dc48:	0a000011 	beq	10dc94 <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10dc4c:	ea000059 	b	10ddb8 <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10dc50:	e51b3008 	ldr	r3, [fp, #-8]
  10dc54:	e5933000 	ldr	r3, [r3]
  10dc58:	e5933008 	ldr	r3, [r3, #8]
  10dc5c:	e1a00003 	mov	r0, r3
  10dc60:	eb0039e3 	bl	11c3f4 <raw_remove>
        break;
  10dc64:	ea000053 	b	10ddb8 <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10dc68:	e51b3008 	ldr	r3, [fp, #-8]
  10dc6c:	e5933000 	ldr	r3, [r3]
  10dc70:	e5933008 	ldr	r3, [r3, #8]
  10dc74:	e3a02000 	mov	r2, #0
  10dc78:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10dc7c:	e51b3008 	ldr	r3, [fp, #-8]
  10dc80:	e5933000 	ldr	r3, [r3]
  10dc84:	e5933008 	ldr	r3, [r3, #8]
  10dc88:	e1a00003 	mov	r0, r3
  10dc8c:	eb006a8f 	bl	1286d0 <udp_remove>
        break;
  10dc90:	ea000048 	b	10ddb8 <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dc94:	e51b3008 	ldr	r3, [fp, #-8]
  10dc98:	e5933000 	ldr	r3, [r3]
  10dc9c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dca0:	e3530000 	cmp	r3, #0
  10dca4:	1a000004 	bne	10dcbc <lwip_netconn_do_delconn+0x1c8>
  10dca8:	e51b3008 	ldr	r3, [fp, #-8]
  10dcac:	e5933000 	ldr	r3, [r3]
  10dcb0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10dcb4:	e3530000 	cmp	r3, #0
  10dcb8:	0a000006 	beq	10dcd8 <lwip_netconn_do_delconn+0x1e4>
  10dcbc:	e30606e4 	movw	r0, #26340	; 0x66e4
  10dcc0:	e3400014 	movt	r0, #20
  10dcc4:	ebffd512 	bl	103114 <rt_kprintf>
  10dcc8:	e300142f 	movw	r1, #1071	; 0x42f
  10dccc:	e30603c8 	movw	r0, #25544	; 0x63c8
  10dcd0:	e3400014 	movt	r0, #20
  10dcd4:	ebfff42e 	bl	10ad94 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10dcd8:	e51b3008 	ldr	r3, [fp, #-8]
  10dcdc:	e5933000 	ldr	r3, [r3]
  10dce0:	e3a02004 	mov	r2, #4
  10dce4:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10dce8:	e51b3008 	ldr	r3, [fp, #-8]
  10dcec:	e3a02003 	mov	r2, #3
  10dcf0:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10dcf4:	e51b3008 	ldr	r3, [fp, #-8]
  10dcf8:	e5933000 	ldr	r3, [r3]
  10dcfc:	e51b2008 	ldr	r2, [fp, #-8]
  10dd00:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10dd04:	e51b3008 	ldr	r3, [fp, #-8]
  10dd08:	e5933000 	ldr	r3, [r3]
  10dd0c:	e3a01000 	mov	r1, #0
  10dd10:	e1a00003 	mov	r0, r3
  10dd14:	ebfffe26 	bl	10d5b4 <lwip_netconn_do_close_internal>
  10dd18:	e1a03000 	mov	r3, r0
  10dd1c:	e3530000 	cmp	r3, #0
  10dd20:	0a00005b 	beq	10de94 <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10dd24:	e51b3008 	ldr	r3, [fp, #-8]
  10dd28:	e5933000 	ldr	r3, [r3]
  10dd2c:	e5933004 	ldr	r3, [r3, #4]
  10dd30:	e3530004 	cmp	r3, #4
  10dd34:	0a000006 	beq	10dd54 <lwip_netconn_do_delconn+0x260>
  10dd38:	e3060700 	movw	r0, #26368	; 0x6700
  10dd3c:	e3400014 	movt	r0, #20
  10dd40:	ebffd4f3 	bl	103114 <rt_kprintf>
  10dd44:	e3001435 	movw	r1, #1077	; 0x435
  10dd48:	e30603c8 	movw	r0, #25544	; 0x63c8
  10dd4c:	e3400014 	movt	r0, #20
  10dd50:	ebfff40f 	bl	10ad94 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10dd54:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10dd58:	e3400014 	movt	r0, #20
  10dd5c:	ebfff2ed 	bl	10a918 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10dd60:	e51b3008 	ldr	r3, [fp, #-8]
  10dd64:	e5933000 	ldr	r3, [r3]
  10dd68:	e2833010 	add	r3, r3, #16
  10dd6c:	e3a01000 	mov	r1, #0
  10dd70:	e1a00003 	mov	r0, r3
  10dd74:	ebfff26b 	bl	10a728 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10dd78:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10dd7c:	e3400014 	movt	r0, #20
  10dd80:	ebfff2d8 	bl	10a8e8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10dd84:	e51b3008 	ldr	r3, [fp, #-8]
  10dd88:	e5933000 	ldr	r3, [r3]
  10dd8c:	e5933004 	ldr	r3, [r3, #4]
  10dd90:	e3530000 	cmp	r3, #0
  10dd94:	0a00003e 	beq	10de94 <lwip_netconn_do_delconn+0x3a0>
  10dd98:	e3060700 	movw	r0, #26368	; 0x6700
  10dd9c:	e3400014 	movt	r0, #20
  10dda0:	ebffd4db 	bl	103114 <rt_kprintf>
  10dda4:	e3001439 	movw	r1, #1081	; 0x439
  10dda8:	e30603c8 	movw	r0, #25544	; 0x63c8
  10ddac:	e3400014 	movt	r0, #20
  10ddb0:	ebfff3f7 	bl	10ad94 <sys_arch_assert>
        return;
  10ddb4:	ea000036 	b	10de94 <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10ddb8:	e51b3008 	ldr	r3, [fp, #-8]
  10ddbc:	e5933000 	ldr	r3, [r3]
  10ddc0:	e3a02000 	mov	r2, #0
  10ddc4:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10ddc8:	e51b3008 	ldr	r3, [fp, #-8]
  10ddcc:	e5933000 	ldr	r3, [r3]
  10ddd0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ddd4:	e3530000 	cmp	r3, #0
  10ddd8:	0a000007 	beq	10ddfc <lwip_netconn_do_delconn+0x308>
  10dddc:	e51b3008 	ldr	r3, [fp, #-8]
  10dde0:	e5933000 	ldr	r3, [r3]
  10dde4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dde8:	e51b2008 	ldr	r2, [fp, #-8]
  10ddec:	e5920000 	ldr	r0, [r2]
  10ddf0:	e3a02000 	mov	r2, #0
  10ddf4:	e3a01000 	mov	r1, #0
  10ddf8:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10ddfc:	e51b3008 	ldr	r3, [fp, #-8]
  10de00:	e5933000 	ldr	r3, [r3]
  10de04:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de08:	e3530000 	cmp	r3, #0
  10de0c:	0a000007 	beq	10de30 <lwip_netconn_do_delconn+0x33c>
  10de10:	e51b3008 	ldr	r3, [fp, #-8]
  10de14:	e5933000 	ldr	r3, [r3]
  10de18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de1c:	e51b2008 	ldr	r2, [fp, #-8]
  10de20:	e5920000 	ldr	r0, [r2]
  10de24:	e3a02000 	mov	r2, #0
  10de28:	e3a01002 	mov	r1, #2
  10de2c:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10de30:	e51b3008 	ldr	r3, [fp, #-8]
  10de34:	e5933000 	ldr	r3, [r3]
  10de38:	e2833010 	add	r3, r3, #16
  10de3c:	e1a00003 	mov	r0, r3
  10de40:	ebfff26b 	bl	10a7f4 <sys_sem_valid>
  10de44:	e1a03000 	mov	r3, r0
  10de48:	e3530000 	cmp	r3, #0
  10de4c:	0a000011 	beq	10de98 <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10de50:	e51b3008 	ldr	r3, [fp, #-8]
  10de54:	e5933000 	ldr	r3, [r3]
  10de58:	e3530000 	cmp	r3, #0
  10de5c:	0a00000d 	beq	10de98 <lwip_netconn_do_delconn+0x3a4>
  10de60:	ebffd0f5 	bl	10223c <rt_enter_critical>
  10de64:	e51b3008 	ldr	r3, [fp, #-8]
  10de68:	e5933000 	ldr	r3, [r3]
  10de6c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10de70:	e373000c 	cmn	r3, #12
  10de74:	ba000004 	blt	10de8c <lwip_netconn_do_delconn+0x398>
  10de78:	e51b3008 	ldr	r3, [fp, #-8]
  10de7c:	e5933000 	ldr	r3, [r3]
  10de80:	e51b2008 	ldr	r2, [fp, #-8]
  10de84:	e1d220d4 	ldrsb	r2, [r2, #4]
  10de88:	e5c3200c 	strb	r2, [r3, #12]
  10de8c:	ebffd0f0 	bl	102254 <rt_exit_critical>
  10de90:	ea000000 	b	10de98 <lwip_netconn_do_delconn+0x3a4>
        return;
  10de94:	e320f000 	nop	{0}
  }
}
  10de98:	e24bd004 	sub	sp, fp, #4
  10de9c:	e8bd8800 	pop	{fp, pc}

0010dea0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10dea0:	e92d4800 	push	{fp, lr}
  10dea4:	e28db004 	add	fp, sp, #4
  10dea8:	e24dd010 	sub	sp, sp, #16
  10deac:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10deb0:	e51b3010 	ldr	r3, [fp, #-16]
  10deb4:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10deb8:	e51b3008 	ldr	r3, [fp, #-8]
  10debc:	e5933000 	ldr	r3, [r3]
  10dec0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dec4:	e373000c 	cmn	r3, #12
  10dec8:	aa000005 	bge	10dee4 <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10decc:	e51b3008 	ldr	r3, [fp, #-8]
  10ded0:	e5933000 	ldr	r3, [r3]
  10ded4:	e1d320dc 	ldrsb	r2, [r3, #12]
  10ded8:	e51b3008 	ldr	r3, [fp, #-8]
  10dedc:	e5c32004 	strb	r2, [r3, #4]
  10dee0:	ea00003c 	b	10dfd8 <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10dee4:	e51b3008 	ldr	r3, [fp, #-8]
  10dee8:	e3e02005 	mvn	r2, #5
  10deec:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10def0:	e51b3008 	ldr	r3, [fp, #-8]
  10def4:	e5933000 	ldr	r3, [r3]
  10def8:	e5933008 	ldr	r3, [r3, #8]
  10defc:	e3530000 	cmp	r3, #0
  10df00:	0a000033 	beq	10dfd4 <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10df04:	e51b3008 	ldr	r3, [fp, #-8]
  10df08:	e5933000 	ldr	r3, [r3]
  10df0c:	e5933000 	ldr	r3, [r3]
  10df10:	e20330f0 	and	r3, r3, #240	; 0xf0
  10df14:	e3530020 	cmp	r3, #32
  10df18:	0a000011 	beq	10df64 <lwip_netconn_do_bind+0xc4>
  10df1c:	e3530040 	cmp	r3, #64	; 0x40
  10df20:	0a000002 	beq	10df30 <lwip_netconn_do_bind+0x90>
  10df24:	e3530010 	cmp	r3, #16
  10df28:	0a00001b 	beq	10df9c <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10df2c:	ea000029 	b	10dfd8 <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10df30:	e51b3008 	ldr	r3, [fp, #-8]
  10df34:	e5933000 	ldr	r3, [r3]
  10df38:	e5932008 	ldr	r2, [r3, #8]
  10df3c:	e51b3008 	ldr	r3, [fp, #-8]
  10df40:	e5933008 	ldr	r3, [r3, #8]
  10df44:	e1a01003 	mov	r1, r3
  10df48:	e1a00002 	mov	r0, r2
  10df4c:	eb003845 	bl	11c068 <raw_bind>
  10df50:	e1a03000 	mov	r3, r0
  10df54:	e1a02003 	mov	r2, r3
  10df58:	e51b3008 	ldr	r3, [fp, #-8]
  10df5c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10df60:	ea00001c 	b	10dfd8 <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10df64:	e51b3008 	ldr	r3, [fp, #-8]
  10df68:	e5933000 	ldr	r3, [r3]
  10df6c:	e5930008 	ldr	r0, [r3, #8]
  10df70:	e51b3008 	ldr	r3, [fp, #-8]
  10df74:	e5931008 	ldr	r1, [r3, #8]
  10df78:	e51b3008 	ldr	r3, [fp, #-8]
  10df7c:	e1d330bc 	ldrh	r3, [r3, #12]
  10df80:	e1a02003 	mov	r2, r3
  10df84:	eb0068e7 	bl	128328 <udp_bind>
  10df88:	e1a03000 	mov	r3, r0
  10df8c:	e1a02003 	mov	r2, r3
  10df90:	e51b3008 	ldr	r3, [fp, #-8]
  10df94:	e5c32004 	strb	r2, [r3, #4]
        break;
  10df98:	ea00000e 	b	10dfd8 <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10df9c:	e51b3008 	ldr	r3, [fp, #-8]
  10dfa0:	e5933000 	ldr	r3, [r3]
  10dfa4:	e5930008 	ldr	r0, [r3, #8]
  10dfa8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfac:	e5931008 	ldr	r1, [r3, #8]
  10dfb0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfb4:	e1d330bc 	ldrh	r3, [r3, #12]
  10dfb8:	e1a02003 	mov	r2, r3
  10dfbc:	eb003dd3 	bl	11d710 <tcp_bind>
  10dfc0:	e1a03000 	mov	r3, r0
  10dfc4:	e1a02003 	mov	r2, r3
  10dfc8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfcc:	e5c32004 	strb	r2, [r3, #4]
        break;
  10dfd0:	ea000000 	b	10dfd8 <lwip_netconn_do_bind+0x138>
      }
    }
  10dfd4:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10dfd8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfdc:	e5933000 	ldr	r3, [r3]
  10dfe0:	e3530000 	cmp	r3, #0
  10dfe4:	0a00000b 	beq	10e018 <lwip_netconn_do_bind+0x178>
  10dfe8:	ebffd093 	bl	10223c <rt_enter_critical>
  10dfec:	e51b3008 	ldr	r3, [fp, #-8]
  10dff0:	e5933000 	ldr	r3, [r3]
  10dff4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dff8:	e373000c 	cmn	r3, #12
  10dffc:	ba000004 	blt	10e014 <lwip_netconn_do_bind+0x174>
  10e000:	e51b3008 	ldr	r3, [fp, #-8]
  10e004:	e5933000 	ldr	r3, [r3]
  10e008:	e51b2008 	ldr	r2, [fp, #-8]
  10e00c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e010:	e5c3200c 	strb	r2, [r3, #12]
  10e014:	ebffd08e 	bl	102254 <rt_exit_critical>
}
  10e018:	e320f000 	nop	{0}
  10e01c:	e24bd004 	sub	sp, fp, #4
  10e020:	e8bd8800 	pop	{fp, pc}

0010e024 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e024:	e92d4800 	push	{fp, lr}
  10e028:	e28db004 	add	fp, sp, #4
  10e02c:	e24dd020 	sub	sp, sp, #32
  10e030:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e034:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e038:	e1a03002 	mov	r3, r2
  10e03c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e040:	e3a03000 	mov	r3, #0
  10e044:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e04c:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e050:	e51b300c 	ldr	r3, [fp, #-12]
  10e054:	e3530000 	cmp	r3, #0
  10e058:	1a000001 	bne	10e064 <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e05c:	e3e03005 	mvn	r3, #5
  10e060:	ea000074 	b	10e238 <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e064:	e51b300c 	ldr	r3, [fp, #-12]
  10e068:	e5933004 	ldr	r3, [r3, #4]
  10e06c:	e3530003 	cmp	r3, #3
  10e070:	0a000006 	beq	10e090 <lwip_netconn_do_connected+0x6c>
  10e074:	e3060708 	movw	r0, #26376	; 0x6708
  10e078:	e3400014 	movt	r0, #20
  10e07c:	ebffd424 	bl	103114 <rt_kprintf>
  10e080:	e3001492 	movw	r1, #1170	; 0x492
  10e084:	e30603c8 	movw	r0, #25544	; 0x63c8
  10e088:	e3400014 	movt	r0, #20
  10e08c:	ebfff340 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e090:	e51b300c 	ldr	r3, [fp, #-12]
  10e094:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e098:	e3530000 	cmp	r3, #0
  10e09c:	1a00000b 	bne	10e0d0 <lwip_netconn_do_connected+0xac>
  10e0a0:	e51b300c 	ldr	r3, [fp, #-12]
  10e0a4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e0a8:	e2033004 	and	r3, r3, #4
  10e0ac:	e3530000 	cmp	r3, #0
  10e0b0:	1a000006 	bne	10e0d0 <lwip_netconn_do_connected+0xac>
  10e0b4:	e3060728 	movw	r0, #26408	; 0x6728
  10e0b8:	e3400014 	movt	r0, #20
  10e0bc:	ebffd414 	bl	103114 <rt_kprintf>
  10e0c0:	e3001494 	movw	r1, #1172	; 0x494
  10e0c4:	e30603c8 	movw	r0, #25544	; 0x63c8
  10e0c8:	e3400014 	movt	r0, #20
  10e0cc:	ebfff330 	bl	10ad94 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e0d0:	e51b300c 	ldr	r3, [fp, #-12]
  10e0d4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e0d8:	e3530000 	cmp	r3, #0
  10e0dc:	0a000008 	beq	10e104 <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e0e0:	e51b300c 	ldr	r3, [fp, #-12]
  10e0e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e0e8:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e0ec:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e0f0:	e51b300c 	ldr	r3, [fp, #-12]
  10e0f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e0f8:	e5933000 	ldr	r3, [r3]
  10e0fc:	e2833010 	add	r3, r3, #16
  10e100:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e104:	e51b300c 	ldr	r3, [fp, #-12]
  10e108:	e5933000 	ldr	r3, [r3]
  10e10c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e110:	e3530010 	cmp	r3, #16
  10e114:	1a000004 	bne	10e12c <lwip_netconn_do_connected+0x108>
  10e118:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e11c:	e3530000 	cmp	r3, #0
  10e120:	1a000001 	bne	10e12c <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e124:	e51b000c 	ldr	r0, [fp, #-12]
  10e128:	ebfffabe 	bl	10cc28 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e12c:	e51b300c 	ldr	r3, [fp, #-12]
  10e130:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e134:	e2033004 	and	r3, r3, #4
  10e138:	e3530000 	cmp	r3, #0
  10e13c:	03a03001 	moveq	r3, #1
  10e140:	13a03000 	movne	r3, #0
  10e144:	e6ef3073 	uxtb	r3, r3
  10e148:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e14c:	e51b300c 	ldr	r3, [fp, #-12]
  10e150:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e154:	e3c33004 	bic	r3, r3, #4
  10e158:	e6ef2073 	uxtb	r2, r3
  10e15c:	e51b300c 	ldr	r3, [fp, #-12]
  10e160:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e164:	e51b3010 	ldr	r3, [fp, #-16]
  10e168:	e3530000 	cmp	r3, #0
  10e16c:	0a000002 	beq	10e17c <lwip_netconn_do_connected+0x158>
  10e170:	e51b3008 	ldr	r3, [fp, #-8]
  10e174:	e3530000 	cmp	r3, #0
  10e178:	1a00000c 	bne	10e1b0 <lwip_netconn_do_connected+0x18c>
  10e17c:	e51b3010 	ldr	r3, [fp, #-16]
  10e180:	e3530000 	cmp	r3, #0
  10e184:	1a000002 	bne	10e194 <lwip_netconn_do_connected+0x170>
  10e188:	e51b3008 	ldr	r3, [fp, #-8]
  10e18c:	e3530000 	cmp	r3, #0
  10e190:	0a000006 	beq	10e1b0 <lwip_netconn_do_connected+0x18c>
  10e194:	e3060768 	movw	r0, #26472	; 0x6768
  10e198:	e3400014 	movt	r0, #20
  10e19c:	ebffd3dc 	bl	103114 <rt_kprintf>
  10e1a0:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e1a4:	e30603c8 	movw	r0, #25544	; 0x63c8
  10e1a8:	e3400014 	movt	r0, #20
  10e1ac:	ebfff2f8 	bl	10ad94 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e1b0:	e51b300c 	ldr	r3, [fp, #-12]
  10e1b4:	e3a02000 	mov	r2, #0
  10e1b8:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e1bc:	e51b300c 	ldr	r3, [fp, #-12]
  10e1c0:	e3a02000 	mov	r2, #0
  10e1c4:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e1c8:	e51b300c 	ldr	r3, [fp, #-12]
  10e1cc:	e3530000 	cmp	r3, #0
  10e1d0:	0a000008 	beq	10e1f8 <lwip_netconn_do_connected+0x1d4>
  10e1d4:	ebffd018 	bl	10223c <rt_enter_critical>
  10e1d8:	e51b300c 	ldr	r3, [fp, #-12]
  10e1dc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e1e0:	e373000c 	cmn	r3, #12
  10e1e4:	ba000002 	blt	10e1f4 <lwip_netconn_do_connected+0x1d0>
  10e1e8:	e51b300c 	ldr	r3, [fp, #-12]
  10e1ec:	e3a02000 	mov	r2, #0
  10e1f0:	e5c3200c 	strb	r2, [r3, #12]
  10e1f4:	ebffd016 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e1f8:	e51b300c 	ldr	r3, [fp, #-12]
  10e1fc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e200:	e3530000 	cmp	r3, #0
  10e204:	0a000005 	beq	10e220 <lwip_netconn_do_connected+0x1fc>
  10e208:	e51b300c 	ldr	r3, [fp, #-12]
  10e20c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e210:	e3a02000 	mov	r2, #0
  10e214:	e3a01002 	mov	r1, #2
  10e218:	e51b000c 	ldr	r0, [fp, #-12]
  10e21c:	e12fff33 	blx	r3

  if (was_blocking) {
  10e220:	e51b3010 	ldr	r3, [fp, #-16]
  10e224:	e3530000 	cmp	r3, #0
  10e228:	0a000001 	beq	10e234 <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e22c:	e51b0008 	ldr	r0, [fp, #-8]
  10e230:	ebfff131 	bl	10a6fc <sys_sem_signal>
  }
  return ERR_OK;
  10e234:	e3a03000 	mov	r3, #0
}
  10e238:	e1a00003 	mov	r0, r3
  10e23c:	e24bd004 	sub	sp, fp, #4
  10e240:	e8bd8800 	pop	{fp, pc}

0010e244 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e244:	e92d4800 	push	{fp, lr}
  10e248:	e28db004 	add	fp, sp, #4
  10e24c:	e24dd010 	sub	sp, sp, #16
  10e250:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e254:	e51b3010 	ldr	r3, [fp, #-16]
  10e258:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e25c:	e51b3008 	ldr	r3, [fp, #-8]
  10e260:	e5933000 	ldr	r3, [r3]
  10e264:	e5933008 	ldr	r3, [r3, #8]
  10e268:	e3530000 	cmp	r3, #0
  10e26c:	1a000003 	bne	10e280 <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e270:	e51b3008 	ldr	r3, [fp, #-8]
  10e274:	e3e0200e 	mvn	r2, #14
  10e278:	e5c32004 	strb	r2, [r3, #4]
  10e27c:	ea0000aa 	b	10e52c <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e280:	e51b3008 	ldr	r3, [fp, #-8]
  10e284:	e5933000 	ldr	r3, [r3]
  10e288:	e5933000 	ldr	r3, [r3]
  10e28c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e290:	e3530020 	cmp	r3, #32
  10e294:	0a000011 	beq	10e2e0 <lwip_netconn_do_connect+0x9c>
  10e298:	e3530040 	cmp	r3, #64	; 0x40
  10e29c:	0a000002 	beq	10e2ac <lwip_netconn_do_connect+0x68>
  10e2a0:	e3530010 	cmp	r3, #16
  10e2a4:	0a00001b 	beq	10e318 <lwip_netconn_do_connect+0xd4>
  10e2a8:	ea000093 	b	10e4fc <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e2ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e2b0:	e5933000 	ldr	r3, [r3]
  10e2b4:	e5932008 	ldr	r2, [r3, #8]
  10e2b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2bc:	e5933008 	ldr	r3, [r3, #8]
  10e2c0:	e1a01003 	mov	r1, r3
  10e2c4:	e1a00002 	mov	r0, r2
  10e2c8:	eb003781 	bl	11c0d4 <raw_connect>
  10e2cc:	e1a03000 	mov	r3, r0
  10e2d0:	e1a02003 	mov	r2, r3
  10e2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d8:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e2dc:	ea000092 	b	10e52c <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2e4:	e5933000 	ldr	r3, [r3]
  10e2e8:	e5930008 	ldr	r0, [r3, #8]
  10e2ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f0:	e5931008 	ldr	r1, [r3, #8]
  10e2f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f8:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2fc:	e1a02003 	mov	r2, r3
  10e300:	eb00687e 	bl	128500 <udp_connect>
  10e304:	e1a03000 	mov	r3, r0
  10e308:	e1a02003 	mov	r2, r3
  10e30c:	e51b3008 	ldr	r3, [fp, #-8]
  10e310:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e314:	ea000084 	b	10e52c <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e318:	e51b3008 	ldr	r3, [fp, #-8]
  10e31c:	e5933000 	ldr	r3, [r3]
  10e320:	e5933004 	ldr	r3, [r3, #4]
  10e324:	e3530003 	cmp	r3, #3
  10e328:	1a000003 	bne	10e33c <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e32c:	e51b3008 	ldr	r3, [fp, #-8]
  10e330:	e3e02008 	mvn	r2, #8
  10e334:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e338:	ea00007a 	b	10e528 <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e33c:	e51b3008 	ldr	r3, [fp, #-8]
  10e340:	e5933000 	ldr	r3, [r3]
  10e344:	e5933004 	ldr	r3, [r3, #4]
  10e348:	e3530000 	cmp	r3, #0
  10e34c:	0a000003 	beq	10e360 <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e350:	e51b3008 	ldr	r3, [fp, #-8]
  10e354:	e3e02009 	mvn	r2, #9
  10e358:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e35c:	ea000071 	b	10e528 <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e360:	e51b3008 	ldr	r3, [fp, #-8]
  10e364:	e5933000 	ldr	r3, [r3]
  10e368:	e1a00003 	mov	r0, r3
  10e36c:	ebfffa2d 	bl	10cc28 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e370:	e51b3008 	ldr	r3, [fp, #-8]
  10e374:	e5933000 	ldr	r3, [r3]
  10e378:	e5930008 	ldr	r0, [r3, #8]
  10e37c:	e51b3008 	ldr	r3, [fp, #-8]
  10e380:	e5931008 	ldr	r1, [r3, #8]
  10e384:	e51b3008 	ldr	r3, [fp, #-8]
  10e388:	e1d320bc 	ldrh	r2, [r3, #12]
  10e38c:	e30e3024 	movw	r3, #57380	; 0xe024
  10e390:	e3403010 	movt	r3, #16
  10e394:	eb003f0b 	bl	11dfc8 <tcp_connect>
  10e398:	e1a03000 	mov	r3, r0
  10e39c:	e1a02003 	mov	r2, r3
  10e3a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3a4:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e3a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e3ac:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e3b0:	e3530000 	cmp	r3, #0
  10e3b4:	1a00005b 	bne	10e528 <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e3b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e3bc:	e5933000 	ldr	r3, [r3]
  10e3c0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e3c4:	e2033002 	and	r3, r3, #2
  10e3c8:	e3530000 	cmp	r3, #0
  10e3cc:	13a03001 	movne	r3, #1
  10e3d0:	03a03000 	moveq	r3, #0
  10e3d4:	e6ef3073 	uxtb	r3, r3
  10e3d8:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e3dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e3e0:	e5933000 	ldr	r3, [r3]
  10e3e4:	e3a02003 	mov	r2, #3
  10e3e8:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e3ec:	e55b3009 	ldrb	r3, [fp, #-9]
  10e3f0:	e3530000 	cmp	r3, #0
  10e3f4:	0a000008 	beq	10e41c <lwip_netconn_do_connect+0x1d8>
  10e3f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e3fc:	e5933000 	ldr	r3, [r3]
  10e400:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e404:	e51b3008 	ldr	r3, [fp, #-8]
  10e408:	e5933000 	ldr	r3, [r3]
  10e40c:	e3822004 	orr	r2, r2, #4
  10e410:	e6ef2072 	uxtb	r2, r2
  10e414:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e418:	ea000007 	b	10e43c <lwip_netconn_do_connect+0x1f8>
  10e41c:	e51b3008 	ldr	r3, [fp, #-8]
  10e420:	e5933000 	ldr	r3, [r3]
  10e424:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e428:	e51b3008 	ldr	r3, [fp, #-8]
  10e42c:	e5933000 	ldr	r3, [r3]
  10e430:	e3c22004 	bic	r2, r2, #4
  10e434:	e6ef2072 	uxtb	r2, r2
  10e438:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e43c:	e55b3009 	ldrb	r3, [fp, #-9]
  10e440:	e3530000 	cmp	r3, #0
  10e444:	0a000003 	beq	10e458 <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e448:	e51b3008 	ldr	r3, [fp, #-8]
  10e44c:	e3e02004 	mvn	r2, #4
  10e450:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e454:	ea000033 	b	10e528 <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e458:	e51b3008 	ldr	r3, [fp, #-8]
  10e45c:	e5933000 	ldr	r3, [r3]
  10e460:	e51b2008 	ldr	r2, [fp, #-8]
  10e464:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e468:	e51b3008 	ldr	r3, [fp, #-8]
  10e46c:	e5933000 	ldr	r3, [r3]
  10e470:	e5933004 	ldr	r3, [r3, #4]
  10e474:	e3530003 	cmp	r3, #3
  10e478:	0a000006 	beq	10e498 <lwip_netconn_do_connect+0x254>
  10e47c:	e3060700 	movw	r0, #26368	; 0x6700
  10e480:	e3400014 	movt	r0, #20
  10e484:	ebffd322 	bl	103114 <rt_kprintf>
  10e488:	e30014df 	movw	r1, #1247	; 0x4df
  10e48c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10e490:	e3400014 	movt	r0, #20
  10e494:	ebfff23e 	bl	10ad94 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e498:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10e49c:	e3400014 	movt	r0, #20
  10e4a0:	ebfff11c 	bl	10a918 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e4a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e4a8:	e5933000 	ldr	r3, [r3]
  10e4ac:	e2833010 	add	r3, r3, #16
  10e4b0:	e3a01000 	mov	r1, #0
  10e4b4:	e1a00003 	mov	r0, r3
  10e4b8:	ebfff09a 	bl	10a728 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e4bc:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10e4c0:	e3400014 	movt	r0, #20
  10e4c4:	ebfff107 	bl	10a8e8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e4c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4cc:	e5933000 	ldr	r3, [r3]
  10e4d0:	e5933004 	ldr	r3, [r3, #4]
  10e4d4:	e3530003 	cmp	r3, #3
  10e4d8:	1a000024 	bne	10e570 <lwip_netconn_do_connect+0x32c>
  10e4dc:	e3060700 	movw	r0, #26368	; 0x6700
  10e4e0:	e3400014 	movt	r0, #20
  10e4e4:	ebffd30a 	bl	103114 <rt_kprintf>
  10e4e8:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e4ec:	e30603c8 	movw	r0, #25544	; 0x63c8
  10e4f0:	e3400014 	movt	r0, #20
  10e4f4:	ebfff226 	bl	10ad94 <sys_arch_assert>
            return;
  10e4f8:	ea00001c 	b	10e570 <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e4fc:	e3060788 	movw	r0, #26504	; 0x6788
  10e500:	e3400014 	movt	r0, #20
  10e504:	ebffd302 	bl	103114 <rt_kprintf>
  10e508:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e50c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10e510:	e3400014 	movt	r0, #20
  10e514:	ebfff21e 	bl	10ad94 <sys_arch_assert>
  10e518:	e51b3008 	ldr	r3, [fp, #-8]
  10e51c:	e3e02005 	mvn	r2, #5
  10e520:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e524:	ea000000 	b	10e52c <lwip_netconn_do_connect+0x2e8>
      break;
  10e528:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e52c:	e51b3008 	ldr	r3, [fp, #-8]
  10e530:	e5933000 	ldr	r3, [r3]
  10e534:	e3530000 	cmp	r3, #0
  10e538:	0a00000d 	beq	10e574 <lwip_netconn_do_connect+0x330>
  10e53c:	ebffcf3e 	bl	10223c <rt_enter_critical>
  10e540:	e51b3008 	ldr	r3, [fp, #-8]
  10e544:	e5933000 	ldr	r3, [r3]
  10e548:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e54c:	e373000c 	cmn	r3, #12
  10e550:	ba000004 	blt	10e568 <lwip_netconn_do_connect+0x324>
  10e554:	e51b3008 	ldr	r3, [fp, #-8]
  10e558:	e5933000 	ldr	r3, [r3]
  10e55c:	e51b2008 	ldr	r2, [fp, #-8]
  10e560:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e564:	e5c3200c 	strb	r2, [r3, #12]
  10e568:	ebffcf39 	bl	102254 <rt_exit_critical>
  10e56c:	ea000000 	b	10e574 <lwip_netconn_do_connect+0x330>
            return;
  10e570:	e320f000 	nop	{0}
}
  10e574:	e24bd004 	sub	sp, fp, #4
  10e578:	e8bd8800 	pop	{fp, pc}

0010e57c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e57c:	e92d4800 	push	{fp, lr}
  10e580:	e28db004 	add	fp, sp, #4
  10e584:	e24dd010 	sub	sp, sp, #16
  10e588:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e58c:	e51b3010 	ldr	r3, [fp, #-16]
  10e590:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e594:	e51b3008 	ldr	r3, [fp, #-8]
  10e598:	e5933000 	ldr	r3, [r3]
  10e59c:	e5933000 	ldr	r3, [r3]
  10e5a0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e5a4:	e3530020 	cmp	r3, #32
  10e5a8:	1a000008 	bne	10e5d0 <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e5ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e5b0:	e5933000 	ldr	r3, [r3]
  10e5b4:	e5933008 	ldr	r3, [r3, #8]
  10e5b8:	e1a00003 	mov	r0, r3
  10e5bc:	eb00681f 	bl	128640 <udp_disconnect>
    msg->err = ERR_OK;
  10e5c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e5c4:	e3a02000 	mov	r2, #0
  10e5c8:	e5c32004 	strb	r2, [r3, #4]
  10e5cc:	ea000002 	b	10e5dc <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e5d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e5d4:	e3e02005 	mvn	r2, #5
  10e5d8:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e5dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e5e0:	e5933000 	ldr	r3, [r3]
  10e5e4:	e3530000 	cmp	r3, #0
  10e5e8:	0a00000b 	beq	10e61c <lwip_netconn_do_disconnect+0xa0>
  10e5ec:	ebffcf12 	bl	10223c <rt_enter_critical>
  10e5f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e5f4:	e5933000 	ldr	r3, [r3]
  10e5f8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e5fc:	e373000c 	cmn	r3, #12
  10e600:	ba000004 	blt	10e618 <lwip_netconn_do_disconnect+0x9c>
  10e604:	e51b3008 	ldr	r3, [fp, #-8]
  10e608:	e5933000 	ldr	r3, [r3]
  10e60c:	e51b2008 	ldr	r2, [fp, #-8]
  10e610:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e614:	e5c3200c 	strb	r2, [r3, #12]
  10e618:	ebffcf0d 	bl	102254 <rt_exit_critical>
}
  10e61c:	e320f000 	nop	{0}
  10e620:	e24bd004 	sub	sp, fp, #4
  10e624:	e8bd8800 	pop	{fp, pc}

0010e628 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e628:	e92d4800 	push	{fp, lr}
  10e62c:	e28db004 	add	fp, sp, #4
  10e630:	e24dd018 	sub	sp, sp, #24
  10e634:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e638:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e63c:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e640:	e51b3008 	ldr	r3, [fp, #-8]
  10e644:	e5933000 	ldr	r3, [r3]
  10e648:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e64c:	e373000c 	cmn	r3, #12
  10e650:	aa000005 	bge	10e66c <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e654:	e51b3008 	ldr	r3, [fp, #-8]
  10e658:	e5933000 	ldr	r3, [r3]
  10e65c:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e660:	e51b3008 	ldr	r3, [fp, #-8]
  10e664:	e5c32004 	strb	r2, [r3, #4]
  10e668:	ea000083 	b	10e87c <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e66c:	e51b3008 	ldr	r3, [fp, #-8]
  10e670:	e3e0200a 	mvn	r2, #10
  10e674:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e678:	e51b3008 	ldr	r3, [fp, #-8]
  10e67c:	e5933000 	ldr	r3, [r3]
  10e680:	e5933008 	ldr	r3, [r3, #8]
  10e684:	e3530000 	cmp	r3, #0
  10e688:	0a00007b 	beq	10e87c <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e68c:	e51b3008 	ldr	r3, [fp, #-8]
  10e690:	e5933000 	ldr	r3, [r3]
  10e694:	e5933000 	ldr	r3, [r3]
  10e698:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e69c:	e3530010 	cmp	r3, #16
  10e6a0:	1a000072 	bne	10e870 <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10e6a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e6a8:	e5933000 	ldr	r3, [r3]
  10e6ac:	e5933004 	ldr	r3, [r3, #4]
  10e6b0:	e3530000 	cmp	r3, #0
  10e6b4:	1a000064 	bne	10e84c <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10e6b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6bc:	e5933000 	ldr	r3, [r3]
  10e6c0:	e5933008 	ldr	r3, [r3, #8]
  10e6c4:	e5933014 	ldr	r3, [r3, #20]
  10e6c8:	e3530000 	cmp	r3, #0
  10e6cc:	0a000003 	beq	10e6e0 <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10e6d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6d4:	e3e02005 	mvn	r2, #5
  10e6d8:	e5c32004 	strb	r2, [r3, #4]
  10e6dc:	ea000066 	b	10e87c <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10e6e0:	e3e03000 	mvn	r3, #0
  10e6e4:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10e6e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6ec:	e5933000 	ldr	r3, [r3]
  10e6f0:	e5933008 	ldr	r3, [r3, #8]
  10e6f4:	e24b2011 	sub	r2, fp, #17
  10e6f8:	e55b1009 	ldrb	r1, [fp, #-9]
  10e6fc:	e1a00003 	mov	r0, r3
  10e700:	eb003cb1 	bl	11d9cc <tcp_listen_with_backlog_and_err>
  10e704:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10e708:	e51b3010 	ldr	r3, [fp, #-16]
  10e70c:	e3530000 	cmp	r3, #0
  10e710:	1a000003 	bne	10e724 <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10e714:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10e718:	e51b3008 	ldr	r3, [fp, #-8]
  10e71c:	e5c32004 	strb	r2, [r3, #4]
  10e720:	ea000055 	b	10e87c <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10e724:	e51b3008 	ldr	r3, [fp, #-8]
  10e728:	e5933000 	ldr	r3, [r3]
  10e72c:	e2833014 	add	r3, r3, #20
  10e730:	e1a00003 	mov	r0, r3
  10e734:	ebfff14d 	bl	10ac70 <sys_mbox_valid>
  10e738:	e1a03000 	mov	r3, r0
  10e73c:	e3530000 	cmp	r3, #0
  10e740:	0a000009 	beq	10e76c <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10e744:	e51b3008 	ldr	r3, [fp, #-8]
  10e748:	e5933000 	ldr	r3, [r3]
  10e74c:	e2833014 	add	r3, r3, #20
  10e750:	e1a00003 	mov	r0, r3
  10e754:	ebfff0c4 	bl	10aa6c <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10e758:	e51b3008 	ldr	r3, [fp, #-8]
  10e75c:	e5933000 	ldr	r3, [r3]
  10e760:	e2833014 	add	r3, r3, #20
  10e764:	e1a00003 	mov	r0, r3
  10e768:	ebfff14a 	bl	10ac98 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10e76c:	e51b3008 	ldr	r3, [fp, #-8]
  10e770:	e3a02000 	mov	r2, #0
  10e774:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10e778:	e51b3008 	ldr	r3, [fp, #-8]
  10e77c:	e5933000 	ldr	r3, [r3]
  10e780:	e2833018 	add	r3, r3, #24
  10e784:	e1a00003 	mov	r0, r3
  10e788:	ebfff138 	bl	10ac70 <sys_mbox_valid>
  10e78c:	e1a03000 	mov	r3, r0
  10e790:	e3530000 	cmp	r3, #0
  10e794:	1a000009 	bne	10e7c0 <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10e798:	e51b3008 	ldr	r3, [fp, #-8]
  10e79c:	e5933000 	ldr	r3, [r3]
  10e7a0:	e2833018 	add	r3, r3, #24
  10e7a4:	e3a0100a 	mov	r1, #10
  10e7a8:	e1a00003 	mov	r0, r3
  10e7ac:	ebfff084 	bl	10a9c4 <sys_mbox_new>
  10e7b0:	e1a03000 	mov	r3, r0
  10e7b4:	e1a02003 	mov	r2, r3
  10e7b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7bc:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10e7c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e7c4:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e7c8:	e3530000 	cmp	r3, #0
  10e7cc:	1a000017 	bne	10e830 <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10e7d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e7d4:	e5933000 	ldr	r3, [r3]
  10e7d8:	e3a02002 	mov	r2, #2
  10e7dc:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10e7e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e7e4:	e5933000 	ldr	r3, [r3]
  10e7e8:	e51b2010 	ldr	r2, [fp, #-16]
  10e7ec:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10e7f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e7f4:	e5933000 	ldr	r3, [r3]
  10e7f8:	e5932008 	ldr	r2, [r3, #8]
  10e7fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e800:	e5933000 	ldr	r3, [r3]
  10e804:	e1a01003 	mov	r1, r3
  10e808:	e1a00002 	mov	r0, r2
  10e80c:	eb00440b 	bl	11f840 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10e810:	e51b3008 	ldr	r3, [fp, #-8]
  10e814:	e5933000 	ldr	r3, [r3]
  10e818:	e5933008 	ldr	r3, [r3, #8]
  10e81c:	e30c1ca0 	movw	r1, #52384	; 0xcca0
  10e820:	e3401010 	movt	r1, #16
  10e824:	e1a00003 	mov	r0, r3
  10e828:	eb00445e 	bl	11f9a8 <tcp_accept>
  10e82c:	ea000012 	b	10e87c <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10e830:	e51b0010 	ldr	r0, [fp, #-16]
  10e834:	eb003ab7 	bl	11d318 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10e838:	e51b3008 	ldr	r3, [fp, #-8]
  10e83c:	e5933000 	ldr	r3, [r3]
  10e840:	e3a02000 	mov	r2, #0
  10e844:	e5832008 	str	r2, [r3, #8]
  10e848:	ea00000b 	b	10e87c <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10e84c:	e51b3008 	ldr	r3, [fp, #-8]
  10e850:	e5933000 	ldr	r3, [r3]
  10e854:	e5933004 	ldr	r3, [r3, #4]
  10e858:	e3530002 	cmp	r3, #2
  10e85c:	1a000006 	bne	10e87c <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10e860:	e51b3008 	ldr	r3, [fp, #-8]
  10e864:	e3a02000 	mov	r2, #0
  10e868:	e5c32004 	strb	r2, [r3, #4]
  10e86c:	ea000002 	b	10e87c <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10e870:	e51b3008 	ldr	r3, [fp, #-8]
  10e874:	e3e0200f 	mvn	r2, #15
  10e878:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10e87c:	e51b3008 	ldr	r3, [fp, #-8]
  10e880:	e5933000 	ldr	r3, [r3]
  10e884:	e3530000 	cmp	r3, #0
  10e888:	0a00000b 	beq	10e8bc <lwip_netconn_do_listen+0x294>
  10e88c:	ebffce6a 	bl	10223c <rt_enter_critical>
  10e890:	e51b3008 	ldr	r3, [fp, #-8]
  10e894:	e5933000 	ldr	r3, [r3]
  10e898:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e89c:	e373000c 	cmn	r3, #12
  10e8a0:	ba000004 	blt	10e8b8 <lwip_netconn_do_listen+0x290>
  10e8a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e8a8:	e5933000 	ldr	r3, [r3]
  10e8ac:	e51b2008 	ldr	r2, [fp, #-8]
  10e8b0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e8b4:	e5c3200c 	strb	r2, [r3, #12]
  10e8b8:	ebffce65 	bl	102254 <rt_exit_critical>
}
  10e8bc:	e320f000 	nop	{0}
  10e8c0:	e24bd004 	sub	sp, fp, #4
  10e8c4:	e8bd8800 	pop	{fp, pc}

0010e8c8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10e8c8:	e92d4800 	push	{fp, lr}
  10e8cc:	e28db004 	add	fp, sp, #4
  10e8d0:	e24dd010 	sub	sp, sp, #16
  10e8d4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e8d8:	e51b3010 	ldr	r3, [fp, #-16]
  10e8dc:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8e4:	e5933000 	ldr	r3, [r3]
  10e8e8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e8ec:	e373000c 	cmn	r3, #12
  10e8f0:	aa000005 	bge	10e90c <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10e8f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e8f8:	e5933000 	ldr	r3, [r3]
  10e8fc:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e900:	e51b3008 	ldr	r3, [fp, #-8]
  10e904:	e5c32004 	strb	r2, [r3, #4]
  10e908:	ea00005e 	b	10ea88 <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10e90c:	e51b3008 	ldr	r3, [fp, #-8]
  10e910:	e3e0200a 	mvn	r2, #10
  10e914:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e918:	e51b3008 	ldr	r3, [fp, #-8]
  10e91c:	e5933000 	ldr	r3, [r3]
  10e920:	e5933008 	ldr	r3, [r3, #8]
  10e924:	e3530000 	cmp	r3, #0
  10e928:	0a000055 	beq	10ea84 <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e92c:	e51b3008 	ldr	r3, [fp, #-8]
  10e930:	e5933000 	ldr	r3, [r3]
  10e934:	e5933000 	ldr	r3, [r3]
  10e938:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e93c:	e3530020 	cmp	r3, #32
  10e940:	0a00002a 	beq	10e9f0 <lwip_netconn_do_send+0x128>
  10e944:	e3530040 	cmp	r3, #64	; 0x40
  10e948:	0a000000 	beq	10e950 <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10e94c:	ea00004d 	b	10ea88 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10e950:	e51b3008 	ldr	r3, [fp, #-8]
  10e954:	e5933008 	ldr	r3, [r3, #8]
  10e958:	e2833008 	add	r3, r3, #8
  10e95c:	e3530000 	cmp	r3, #0
  10e960:	0a000004 	beq	10e978 <lwip_netconn_do_send+0xb0>
  10e964:	e51b3008 	ldr	r3, [fp, #-8]
  10e968:	e5933008 	ldr	r3, [r3, #8]
  10e96c:	e5933008 	ldr	r3, [r3, #8]
  10e970:	e3530000 	cmp	r3, #0
  10e974:	1a00000d 	bne	10e9b0 <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10e978:	e51b3008 	ldr	r3, [fp, #-8]
  10e97c:	e5933000 	ldr	r3, [r3]
  10e980:	e5932008 	ldr	r2, [r3, #8]
  10e984:	e51b3008 	ldr	r3, [fp, #-8]
  10e988:	e5933008 	ldr	r3, [r3, #8]
  10e98c:	e5933000 	ldr	r3, [r3]
  10e990:	e1a01003 	mov	r1, r3
  10e994:	e1a00002 	mov	r0, r2
  10e998:	eb003686 	bl	11c3b8 <raw_send>
  10e99c:	e1a03000 	mov	r3, r0
  10e9a0:	e1a02003 	mov	r2, r3
  10e9a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e9ac:	ea000035 	b	10ea88 <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10e9b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9b4:	e5933000 	ldr	r3, [r3]
  10e9b8:	e5930008 	ldr	r0, [r3, #8]
  10e9bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c0:	e5933008 	ldr	r3, [r3, #8]
  10e9c4:	e5931000 	ldr	r1, [r3]
  10e9c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9cc:	e5933008 	ldr	r3, [r3, #8]
  10e9d0:	e2833008 	add	r3, r3, #8
  10e9d4:	e1a02003 	mov	r2, r3
  10e9d8:	eb0035e8 	bl	11c180 <raw_sendto>
  10e9dc:	e1a03000 	mov	r3, r0
  10e9e0:	e1a02003 	mov	r2, r3
  10e9e4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9e8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e9ec:	ea000025 	b	10ea88 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10e9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9f4:	e5933008 	ldr	r3, [r3, #8]
  10e9f8:	e5933008 	ldr	r3, [r3, #8]
  10e9fc:	e3530000 	cmp	r3, #0
  10ea00:	1a00000d 	bne	10ea3c <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10ea04:	e51b3008 	ldr	r3, [fp, #-8]
  10ea08:	e5933000 	ldr	r3, [r3]
  10ea0c:	e5932008 	ldr	r2, [r3, #8]
  10ea10:	e51b3008 	ldr	r3, [fp, #-8]
  10ea14:	e5933008 	ldr	r3, [r3, #8]
  10ea18:	e5933000 	ldr	r3, [r3]
  10ea1c:	e1a01003 	mov	r1, r3
  10ea20:	e1a00002 	mov	r0, r2
  10ea24:	eb0064e1 	bl	127db0 <udp_send>
  10ea28:	e1a03000 	mov	r3, r0
  10ea2c:	e1a02003 	mov	r2, r3
  10ea30:	e51b3008 	ldr	r3, [fp, #-8]
  10ea34:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ea38:	ea000012 	b	10ea88 <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10ea3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea40:	e5933000 	ldr	r3, [r3]
  10ea44:	e5930008 	ldr	r0, [r3, #8]
  10ea48:	e51b3008 	ldr	r3, [fp, #-8]
  10ea4c:	e5933008 	ldr	r3, [r3, #8]
  10ea50:	e5931000 	ldr	r1, [r3]
  10ea54:	e51b3008 	ldr	r3, [fp, #-8]
  10ea58:	e5933008 	ldr	r3, [r3, #8]
  10ea5c:	e2832008 	add	r2, r3, #8
  10ea60:	e51b3008 	ldr	r3, [fp, #-8]
  10ea64:	e5933008 	ldr	r3, [r3, #8]
  10ea68:	e1d330bc 	ldrh	r3, [r3, #12]
  10ea6c:	eb0064e4 	bl	127e04 <udp_sendto>
  10ea70:	e1a03000 	mov	r3, r0
  10ea74:	e1a02003 	mov	r2, r3
  10ea78:	e51b3008 	ldr	r3, [fp, #-8]
  10ea7c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ea80:	ea000000 	b	10ea88 <lwip_netconn_do_send+0x1c0>
      }
    }
  10ea84:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10ea88:	e51b3008 	ldr	r3, [fp, #-8]
  10ea8c:	e5933000 	ldr	r3, [r3]
  10ea90:	e3530000 	cmp	r3, #0
  10ea94:	0a00000b 	beq	10eac8 <lwip_netconn_do_send+0x200>
  10ea98:	ebffcde7 	bl	10223c <rt_enter_critical>
  10ea9c:	e51b3008 	ldr	r3, [fp, #-8]
  10eaa0:	e5933000 	ldr	r3, [r3]
  10eaa4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eaa8:	e373000c 	cmn	r3, #12
  10eaac:	ba000004 	blt	10eac4 <lwip_netconn_do_send+0x1fc>
  10eab0:	e51b3008 	ldr	r3, [fp, #-8]
  10eab4:	e5933000 	ldr	r3, [r3]
  10eab8:	e51b2008 	ldr	r2, [fp, #-8]
  10eabc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10eac0:	e5c3200c 	strb	r2, [r3, #12]
  10eac4:	ebffcde2 	bl	102254 <rt_exit_critical>
}
  10eac8:	e320f000 	nop	{0}
  10eacc:	e24bd004 	sub	sp, fp, #4
  10ead0:	e8bd8800 	pop	{fp, pc}

0010ead4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10ead4:	e92d4800 	push	{fp, lr}
  10ead8:	e28db004 	add	fp, sp, #4
  10eadc:	e24dd018 	sub	sp, sp, #24
  10eae0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10eae4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10eae8:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10eaec:	e51b300c 	ldr	r3, [fp, #-12]
  10eaf0:	e3a02000 	mov	r2, #0
  10eaf4:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10eaf8:	e51b300c 	ldr	r3, [fp, #-12]
  10eafc:	e5933000 	ldr	r3, [r3]
  10eb00:	e5933008 	ldr	r3, [r3, #8]
  10eb04:	e3530000 	cmp	r3, #0
  10eb08:	0a00001e 	beq	10eb88 <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10eb0c:	e51b300c 	ldr	r3, [fp, #-12]
  10eb10:	e5933000 	ldr	r3, [r3]
  10eb14:	e5933000 	ldr	r3, [r3]
  10eb18:	e20330f0 	and	r3, r3, #240	; 0xf0
  10eb1c:	e3530010 	cmp	r3, #16
  10eb20:	1a000018 	bne	10eb88 <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10eb24:	e51b300c 	ldr	r3, [fp, #-12]
  10eb28:	e5933008 	ldr	r3, [r3, #8]
  10eb2c:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10eb30:	e51b3008 	ldr	r3, [fp, #-8]
  10eb34:	e3530801 	cmp	r3, #65536	; 0x10000
  10eb38:	2a000002 	bcs	10eb48 <lwip_netconn_do_recv+0x74>
  10eb3c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb40:	e6ff3073 	uxth	r3, r3
  10eb44:	ea000000 	b	10eb4c <lwip_netconn_do_recv+0x78>
  10eb48:	e30f3fff 	movw	r3, #65535	; 0xffff
  10eb4c:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10eb50:	e51b300c 	ldr	r3, [fp, #-12]
  10eb54:	e5933000 	ldr	r3, [r3]
  10eb58:	e5933008 	ldr	r3, [r3, #8]
  10eb5c:	e15b20be 	ldrh	r2, [fp, #-14]
  10eb60:	e1a01002 	mov	r1, r2
  10eb64:	e1a00003 	mov	r0, r3
  10eb68:	eb003c8d 	bl	11dda4 <tcp_recved>
        remaining -= recved;
  10eb6c:	e15b30be 	ldrh	r3, [fp, #-14]
  10eb70:	e51b2008 	ldr	r2, [fp, #-8]
  10eb74:	e0423003 	sub	r3, r2, r3
  10eb78:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10eb7c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb80:	e3530000 	cmp	r3, #0
  10eb84:	1affffe9 	bne	10eb30 <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eb88:	e51b300c 	ldr	r3, [fp, #-12]
  10eb8c:	e5933000 	ldr	r3, [r3]
  10eb90:	e3530000 	cmp	r3, #0
  10eb94:	0a00000b 	beq	10ebc8 <lwip_netconn_do_recv+0xf4>
  10eb98:	ebffcda7 	bl	10223c <rt_enter_critical>
  10eb9c:	e51b300c 	ldr	r3, [fp, #-12]
  10eba0:	e5933000 	ldr	r3, [r3]
  10eba4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eba8:	e373000c 	cmn	r3, #12
  10ebac:	ba000004 	blt	10ebc4 <lwip_netconn_do_recv+0xf0>
  10ebb0:	e51b300c 	ldr	r3, [fp, #-12]
  10ebb4:	e5933000 	ldr	r3, [r3]
  10ebb8:	e51b200c 	ldr	r2, [fp, #-12]
  10ebbc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ebc0:	e5c3200c 	strb	r2, [r3, #12]
  10ebc4:	ebffcda2 	bl	102254 <rt_exit_critical>
}
  10ebc8:	e320f000 	nop	{0}
  10ebcc:	e24bd004 	sub	sp, fp, #4
  10ebd0:	e8bd8800 	pop	{fp, pc}

0010ebd4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10ebd4:	e92d4800 	push	{fp, lr}
  10ebd8:	e28db004 	add	fp, sp, #4
  10ebdc:	e24dd020 	sub	sp, sp, #32
  10ebe0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10ebe4:	e1a03001 	mov	r3, r1
  10ebe8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10ebec:	e3a03000 	mov	r3, #0
  10ebf0:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10ebf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ebf8:	e3530000 	cmp	r3, #0
  10ebfc:	1a000006 	bne	10ec1c <lwip_netconn_do_writemore+0x48>
  10ec00:	e30604c0 	movw	r0, #25792	; 0x64c0
  10ec04:	e3400014 	movt	r0, #20
  10ec08:	ebffd141 	bl	103114 <rt_kprintf>
  10ec0c:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ec10:	e30603c8 	movw	r0, #25544	; 0x63c8
  10ec14:	e3400014 	movt	r0, #20
  10ec18:	ebfff05d 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ec1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec20:	e5933004 	ldr	r3, [r3, #4]
  10ec24:	e3530001 	cmp	r3, #1
  10ec28:	0a000006 	beq	10ec48 <lwip_netconn_do_writemore+0x74>
  10ec2c:	e30607a0 	movw	r0, #26528	; 0x67a0
  10ec30:	e3400014 	movt	r0, #20
  10ec34:	ebffd136 	bl	103114 <rt_kprintf>
  10ec38:	e30015de 	movw	r1, #1502	; 0x5de
  10ec3c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10ec40:	e3400014 	movt	r0, #20
  10ec44:	ebfff052 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ec48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec4c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ec50:	e3530000 	cmp	r3, #0
  10ec54:	1a000006 	bne	10ec74 <lwip_netconn_do_writemore+0xa0>
  10ec58:	e30604d0 	movw	r0, #25808	; 0x64d0
  10ec5c:	e3400014 	movt	r0, #20
  10ec60:	ebffd12b 	bl	103114 <rt_kprintf>
  10ec64:	e30015df 	movw	r1, #1503	; 0x5df
  10ec68:	e30603c8 	movw	r0, #25544	; 0x63c8
  10ec6c:	e3400014 	movt	r0, #20
  10ec70:	ebfff047 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10ec74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec78:	e5933008 	ldr	r3, [r3, #8]
  10ec7c:	e3530000 	cmp	r3, #0
  10ec80:	1a000006 	bne	10eca0 <lwip_netconn_do_writemore+0xcc>
  10ec84:	e30607c0 	movw	r0, #26560	; 0x67c0
  10ec88:	e3400014 	movt	r0, #20
  10ec8c:	ebffd120 	bl	103114 <rt_kprintf>
  10ec90:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10ec94:	e30603c8 	movw	r0, #25544	; 0x63c8
  10ec98:	e3400014 	movt	r0, #20
  10ec9c:	ebfff03c 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10eca0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eca4:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10eca8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ecac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ecb0:	e593300c 	ldr	r3, [r3, #12]
  10ecb4:	e1520003 	cmp	r2, r3
  10ecb8:	3a000006 	bcc	10ecd8 <lwip_netconn_do_writemore+0x104>
  10ecbc:	e30607d8 	movw	r0, #26584	; 0x67d8
  10ecc0:	e3400014 	movt	r0, #20
  10ecc4:	ebffd112 	bl	103114 <rt_kprintf>
  10ecc8:	e30015e2 	movw	r1, #1506	; 0x5e2
  10eccc:	e30603c8 	movw	r0, #25544	; 0x63c8
  10ecd0:	e3400014 	movt	r0, #20
  10ecd4:	ebfff02e 	bl	10ad94 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10ecd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ecdc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ece0:	e5d33010 	ldrb	r3, [r3, #16]
  10ece4:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10ece8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ecec:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ecf0:	e2033002 	and	r3, r3, #2
  10ecf4:	e3530000 	cmp	r3, #0
  10ecf8:	1a000003 	bne	10ed0c <lwip_netconn_do_writemore+0x138>
  10ecfc:	e55b300a 	ldrb	r3, [fp, #-10]
  10ed00:	e2033004 	and	r3, r3, #4
  10ed04:	e3530000 	cmp	r3, #0
  10ed08:	0a000001 	beq	10ed14 <lwip_netconn_do_writemore+0x140>
  10ed0c:	e3a03001 	mov	r3, #1
  10ed10:	ea000000 	b	10ed18 <lwip_netconn_do_writemore+0x144>
  10ed14:	e3a03000 	mov	r3, #0
  10ed18:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10ed1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed20:	e5933020 	ldr	r3, [r3, #32]
  10ed24:	e3530000 	cmp	r3, #0
  10ed28:	0a000022 	beq	10edb8 <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10ed2c:	ebfff031 	bl	10adf8 <sys_now>
  10ed30:	e1a02000 	mov	r2, r0
  10ed34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed38:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed3c:	e5933014 	ldr	r3, [r3, #20]
  10ed40:	e0423003 	sub	r3, r2, r3
  10ed44:	e1a02003 	mov	r2, r3
  10ed48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed4c:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10ed50:	e1520003 	cmp	r2, r3
  10ed54:	ba000017 	blt	10edb8 <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10ed58:	e3a03001 	mov	r3, #1
  10ed5c:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10ed60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed64:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ed68:	e3530000 	cmp	r3, #0
  10ed6c:	1a000006 	bne	10ed8c <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10ed70:	e3e03006 	mvn	r3, #6
  10ed74:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10ed78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed7c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed80:	e3a02000 	mov	r2, #0
  10ed84:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10ed88:	ea0000df 	b	10f10c <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10ed8c:	e3a03000 	mov	r3, #0
  10ed90:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10ed94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed98:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed9c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10eda0:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10eda4:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10eda8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edac:	e3a02000 	mov	r2, #0
  10edb0:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10edb4:	ea0000d4 	b	10f10c <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10edb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edbc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10edc0:	e5932008 	ldr	r2, [r3, #8]
  10edc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edc8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10edcc:	e0823003 	add	r3, r2, r3
  10edd0:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10edd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edd8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10eddc:	e593200c 	ldr	r2, [r3, #12]
  10ede0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ede4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ede8:	e0423003 	sub	r3, r2, r3
  10edec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10edf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10edf4:	e3530801 	cmp	r3, #65536	; 0x10000
  10edf8:	3a000005 	bcc	10ee14 <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10edfc:	e3e03000 	mvn	r3, #0
  10ee00:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10ee04:	e55b300a 	ldrb	r3, [fp, #-10]
  10ee08:	e3833002 	orr	r3, r3, #2
  10ee0c:	e54b300a 	strb	r3, [fp, #-10]
  10ee10:	ea000001 	b	10ee1c <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10ee14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ee18:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10ee1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee20:	e5933008 	ldr	r3, [r3, #8]
  10ee24:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10ee28:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10ee2c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10ee30:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee34:	e1520003 	cmp	r2, r3
  10ee38:	2a00000d 	bcs	10ee74 <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10ee3c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10ee40:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10ee44:	e55b300b 	ldrb	r3, [fp, #-11]
  10ee48:	e3530000 	cmp	r3, #0
  10ee4c:	0a000005 	beq	10ee68 <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10ee50:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee54:	e3530000 	cmp	r3, #0
  10ee58:	1a000005 	bne	10ee74 <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10ee5c:	e3e03006 	mvn	r3, #6
  10ee60:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10ee64:	ea000021 	b	10eef0 <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10ee68:	e55b300a 	ldrb	r3, [fp, #-10]
  10ee6c:	e3833002 	orr	r3, r3, #2
  10ee70:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10ee74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee78:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10ee7c:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee80:	e0822003 	add	r2, r2, r3
  10ee84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee88:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ee8c:	e593300c 	ldr	r3, [r3, #12]
  10ee90:	e1520003 	cmp	r2, r3
  10ee94:	9a000006 	bls	10eeb4 <lwip_netconn_do_writemore+0x2e0>
  10ee98:	e306080c 	movw	r0, #26636	; 0x680c
  10ee9c:	e3400014 	movt	r0, #20
  10eea0:	ebffd09b 	bl	103114 <rt_kprintf>
  10eea4:	e300160d 	movw	r1, #1549	; 0x60d
  10eea8:	e30603c8 	movw	r0, #25544	; 0x63c8
  10eeac:	e3400014 	movt	r0, #20
  10eeb0:	ebffefb7 	bl	10ad94 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10eeb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eeb8:	e5930008 	ldr	r0, [r3, #8]
  10eebc:	e55b300a 	ldrb	r3, [fp, #-10]
  10eec0:	e15b20b8 	ldrh	r2, [fp, #-8]
  10eec4:	e51b1010 	ldr	r1, [fp, #-16]
  10eec8:	eb005727 	bl	124b6c <tcp_write>
  10eecc:	e1a03000 	mov	r3, r0
  10eed0:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10eed4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10eed8:	e3530000 	cmp	r3, #0
  10eedc:	0a000002 	beq	10eeec <lwip_netconn_do_writemore+0x318>
  10eee0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10eee4:	e3730001 	cmn	r3, #1
  10eee8:	1a00002e 	bne	10efa8 <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10eeec:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10eef0:	e55b300b 	ldrb	r3, [fp, #-11]
  10eef4:	e3530000 	cmp	r3, #0
  10eef8:	0a000016 	beq	10ef58 <lwip_netconn_do_writemore+0x384>
  10eefc:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef04:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ef08:	e593300c 	ldr	r3, [r3, #12]
  10ef0c:	e1520003 	cmp	r2, r3
  10ef10:	2a000010 	bcs	10ef58 <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10ef14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef1c:	e3530000 	cmp	r3, #0
  10ef20:	0a000005 	beq	10ef3c <lwip_netconn_do_writemore+0x368>
  10ef24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef2c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef30:	e3a01003 	mov	r1, #3
  10ef34:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10ef38:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10ef3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef40:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ef44:	e3833010 	orr	r3, r3, #16
  10ef48:	e6ef2073 	uxtb	r2, r3
  10ef4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef50:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10ef54:	ea000013 	b	10efa8 <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10ef58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef5c:	e5933008 	ldr	r3, [r3, #8]
  10ef60:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10ef64:	e3530a01 	cmp	r3, #4096	; 0x1000
  10ef68:	9a000004 	bls	10ef80 <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10ef6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef70:	e5933008 	ldr	r3, [r3, #8]
  10ef74:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10ef78:	e353000a 	cmp	r3, #10
  10ef7c:	9a000009 	bls	10efa8 <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10ef80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef84:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef88:	e3530000 	cmp	r3, #0
  10ef8c:	0a000005 	beq	10efa8 <lwip_netconn_do_writemore+0x3d4>
  10ef90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef94:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef98:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef9c:	e3a01003 	mov	r1, #3
  10efa0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10efa4:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10efa8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10efac:	e3530000 	cmp	r3, #0
  10efb0:	1a00002b 	bne	10f064 <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10efb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efb8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10efbc:	e15b30b8 	ldrh	r3, [fp, #-8]
  10efc0:	e0822003 	add	r2, r2, r3
  10efc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efc8:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10efcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efd0:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10efd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efd8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10efdc:	e593300c 	ldr	r3, [r3, #12]
  10efe0:	e1520003 	cmp	r2, r3
  10efe4:	0a000002 	beq	10eff4 <lwip_netconn_do_writemore+0x420>
  10efe8:	e55b300b 	ldrb	r3, [fp, #-11]
  10efec:	e3530000 	cmp	r3, #0
  10eff0:	0a000006 	beq	10f010 <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10eff4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eff8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10effc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f000:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f004:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f008:	e3a03001 	mov	r3, #1
  10f00c:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f010:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f014:	e5933008 	ldr	r3, [r3, #8]
  10f018:	e1a00003 	mov	r0, r3
  10f01c:	eb005b03 	bl	125c30 <tcp_output>
  10f020:	e1a03000 	mov	r3, r0
  10f024:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f028:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f02c:	e373000c 	cmn	r3, #12
  10f030:	ba000002 	blt	10f040 <lwip_netconn_do_writemore+0x46c>
  10f034:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f038:	e3730004 	cmn	r3, #4
  10f03c:	1a000032 	bne	10f10c <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f040:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f044:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f048:	e3a03001 	mov	r3, #1
  10f04c:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f050:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f054:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f058:	e3a02000 	mov	r2, #0
  10f05c:	e583200c 	str	r2, [r3, #12]
  10f060:	ea000029 	b	10f10c <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f064:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f068:	e3730001 	cmn	r3, #1
  10f06c:	1a000020 	bne	10f0f4 <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f070:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f074:	e5933008 	ldr	r3, [r3, #8]
  10f078:	e1a00003 	mov	r0, r3
  10f07c:	eb005aeb 	bl	125c30 <tcp_output>
  10f080:	e1a03000 	mov	r3, r0
  10f084:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f088:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f08c:	e373000c 	cmn	r3, #12
  10f090:	ba000002 	blt	10f0a0 <lwip_netconn_do_writemore+0x4cc>
  10f094:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f098:	e3730004 	cmn	r3, #4
  10f09c:	1a000008 	bne	10f0c4 <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f0a0:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f0a4:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f0a8:	e3a03001 	mov	r3, #1
  10f0ac:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f0b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0b4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0b8:	e3a02000 	mov	r2, #0
  10f0bc:	e583200c 	str	r2, [r3, #12]
  10f0c0:	ea000011 	b	10f10c <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f0c4:	e55b300b 	ldrb	r3, [fp, #-11]
  10f0c8:	e3530000 	cmp	r3, #0
  10f0cc:	0a00000e 	beq	10f10c <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f0d0:	e3e03006 	mvn	r3, #6
  10f0d4:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f0d8:	e3a03001 	mov	r3, #1
  10f0dc:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f0e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0e8:	e3a02000 	mov	r2, #0
  10f0ec:	e583200c 	str	r2, [r3, #12]
  10f0f0:	ea000005 	b	10f10c <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f0f4:	e3a03001 	mov	r3, #1
  10f0f8:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f0fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f100:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f104:	e3a02000 	mov	r2, #0
  10f108:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f10c:	e55b3009 	ldrb	r3, [fp, #-9]
  10f110:	e3530000 	cmp	r3, #0
  10f114:	0a000023 	beq	10f1a8 <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f118:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f11c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f120:	e5933000 	ldr	r3, [r3]
  10f124:	e2833010 	add	r3, r3, #16
  10f128:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f12c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f130:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f134:	e55b2005 	ldrb	r2, [fp, #-5]
  10f138:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f13c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f140:	e3a02000 	mov	r2, #0
  10f144:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f148:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f14c:	e3a02000 	mov	r2, #0
  10f150:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f154:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f158:	e3a02000 	mov	r2, #0
  10f15c:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f160:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f164:	e3530000 	cmp	r3, #0
  10f168:	0a000008 	beq	10f190 <lwip_netconn_do_writemore+0x5bc>
  10f16c:	ebffcc32 	bl	10223c <rt_enter_critical>
  10f170:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f174:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f178:	e373000c 	cmn	r3, #12
  10f17c:	ba000002 	blt	10f18c <lwip_netconn_do_writemore+0x5b8>
  10f180:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f184:	e55b2005 	ldrb	r2, [fp, #-5]
  10f188:	e5c3200c 	strb	r2, [r3, #12]
  10f18c:	ebffcc30 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f190:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f194:	e3530000 	cmp	r3, #0
  10f198:	0a000004 	beq	10f1b0 <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f19c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f1a0:	ebffed55 	bl	10a6fc <sys_sem_signal>
  10f1a4:	ea000001 	b	10f1b0 <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f1a8:	e3e03000 	mvn	r3, #0
  10f1ac:	ea000000 	b	10f1b4 <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f1b0:	e3a03000 	mov	r3, #0
}
  10f1b4:	e1a00003 	mov	r0, r3
  10f1b8:	e24bd004 	sub	sp, fp, #4
  10f1bc:	e8bd8800 	pop	{fp, pc}

0010f1c0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f1c0:	e92d4800 	push	{fp, lr}
  10f1c4:	e28db004 	add	fp, sp, #4
  10f1c8:	e24dd010 	sub	sp, sp, #16
  10f1cc:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f1d0:	e51b3010 	ldr	r3, [fp, #-16]
  10f1d4:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f1dc:	e5933000 	ldr	r3, [r3]
  10f1e0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f1e4:	e373000c 	cmn	r3, #12
  10f1e8:	aa000005 	bge	10f204 <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f1ec:	e51b3008 	ldr	r3, [fp, #-8]
  10f1f0:	e5933000 	ldr	r3, [r3]
  10f1f4:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f1f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f1fc:	e5c32004 	strb	r2, [r3, #4]
  10f200:	ea00006f 	b	10f3c4 <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f204:	e51b3008 	ldr	r3, [fp, #-8]
  10f208:	e5933000 	ldr	r3, [r3]
  10f20c:	e5933000 	ldr	r3, [r3]
  10f210:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f214:	e3530010 	cmp	r3, #16
  10f218:	1a000066 	bne	10f3b8 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f21c:	e51b3008 	ldr	r3, [fp, #-8]
  10f220:	e5933000 	ldr	r3, [r3]
  10f224:	e5933004 	ldr	r3, [r3, #4]
  10f228:	e3530000 	cmp	r3, #0
  10f22c:	0a000003 	beq	10f240 <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f230:	e51b3008 	ldr	r3, [fp, #-8]
  10f234:	e3e02004 	mvn	r2, #4
  10f238:	e5c32004 	strb	r2, [r3, #4]
  10f23c:	ea000060 	b	10f3c4 <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f240:	e51b3008 	ldr	r3, [fp, #-8]
  10f244:	e5933000 	ldr	r3, [r3]
  10f248:	e5933008 	ldr	r3, [r3, #8]
  10f24c:	e3530000 	cmp	r3, #0
  10f250:	0a000054 	beq	10f3a8 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f254:	e51b3008 	ldr	r3, [fp, #-8]
  10f258:	e5933000 	ldr	r3, [r3]
  10f25c:	e3a02001 	mov	r2, #1
  10f260:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f264:	e51b3008 	ldr	r3, [fp, #-8]
  10f268:	e5933000 	ldr	r3, [r3]
  10f26c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f270:	e3530000 	cmp	r3, #0
  10f274:	1a000004 	bne	10f28c <lwip_netconn_do_write+0xcc>
  10f278:	e51b3008 	ldr	r3, [fp, #-8]
  10f27c:	e5933000 	ldr	r3, [r3]
  10f280:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f284:	e3530000 	cmp	r3, #0
  10f288:	0a000006 	beq	10f2a8 <lwip_netconn_do_write+0xe8>
  10f28c:	e30606e4 	movw	r0, #26340	; 0x66e4
  10f290:	e3400014 	movt	r0, #20
  10f294:	ebffcf9e 	bl	103114 <rt_kprintf>
  10f298:	e300167d 	movw	r1, #1661	; 0x67d
  10f29c:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f2a0:	e3400014 	movt	r0, #20
  10f2a4:	ebffeeba 	bl	10ad94 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f2a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f2ac:	e593300c 	ldr	r3, [r3, #12]
  10f2b0:	e3530000 	cmp	r3, #0
  10f2b4:	1a000006 	bne	10f2d4 <lwip_netconn_do_write+0x114>
  10f2b8:	e3060838 	movw	r0, #26680	; 0x6838
  10f2bc:	e3400014 	movt	r0, #20
  10f2c0:	ebffcf93 	bl	103114 <rt_kprintf>
  10f2c4:	e300167e 	movw	r1, #1662	; 0x67e
  10f2c8:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f2cc:	e3400014 	movt	r0, #20
  10f2d0:	ebffeeaf 	bl	10ad94 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f2d8:	e5933000 	ldr	r3, [r3]
  10f2dc:	e51b2008 	ldr	r2, [fp, #-8]
  10f2e0:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f2e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f2e8:	e5933000 	ldr	r3, [r3]
  10f2ec:	e3a02000 	mov	r2, #0
  10f2f0:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f2f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f2f8:	e5933000 	ldr	r3, [r3]
  10f2fc:	e3a01000 	mov	r1, #0
  10f300:	e1a00003 	mov	r0, r3
  10f304:	ebfffe32 	bl	10ebd4 <lwip_netconn_do_writemore>
  10f308:	e1a03000 	mov	r3, r0
  10f30c:	e3530000 	cmp	r3, #0
  10f310:	0a00003c 	beq	10f408 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f314:	e51b3008 	ldr	r3, [fp, #-8]
  10f318:	e5933000 	ldr	r3, [r3]
  10f31c:	e5933004 	ldr	r3, [r3, #4]
  10f320:	e3530001 	cmp	r3, #1
  10f324:	0a000006 	beq	10f344 <lwip_netconn_do_write+0x184>
  10f328:	e3060700 	movw	r0, #26368	; 0x6700
  10f32c:	e3400014 	movt	r0, #20
  10f330:	ebffcf77 	bl	103114 <rt_kprintf>
  10f334:	e3001683 	movw	r1, #1667	; 0x683
  10f338:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f33c:	e3400014 	movt	r0, #20
  10f340:	ebffee93 	bl	10ad94 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f344:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f348:	e3400014 	movt	r0, #20
  10f34c:	ebffed71 	bl	10a918 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f350:	e51b3008 	ldr	r3, [fp, #-8]
  10f354:	e5933000 	ldr	r3, [r3]
  10f358:	e2833010 	add	r3, r3, #16
  10f35c:	e3a01000 	mov	r1, #0
  10f360:	e1a00003 	mov	r0, r3
  10f364:	ebffecef 	bl	10a728 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f368:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f36c:	e3400014 	movt	r0, #20
  10f370:	ebffed5c 	bl	10a8e8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f374:	e51b3008 	ldr	r3, [fp, #-8]
  10f378:	e5933000 	ldr	r3, [r3]
  10f37c:	e5933004 	ldr	r3, [r3, #4]
  10f380:	e3530001 	cmp	r3, #1
  10f384:	1a00001f 	bne	10f408 <lwip_netconn_do_write+0x248>
  10f388:	e3060700 	movw	r0, #26368	; 0x6700
  10f38c:	e3400014 	movt	r0, #20
  10f390:	ebffcf5f 	bl	103114 <rt_kprintf>
  10f394:	e3001687 	movw	r1, #1671	; 0x687
  10f398:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f39c:	e3400014 	movt	r0, #20
  10f3a0:	ebffee7b 	bl	10ad94 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f3a4:	ea000017 	b	10f408 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f3a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f3ac:	e3e0200a 	mvn	r2, #10
  10f3b0:	e5c32004 	strb	r2, [r3, #4]
  10f3b4:	ea000002 	b	10f3c4 <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f3b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f3bc:	e3e02005 	mvn	r2, #5
  10f3c0:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f3c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f3c8:	e5933000 	ldr	r3, [r3]
  10f3cc:	e3530000 	cmp	r3, #0
  10f3d0:	0a00000d 	beq	10f40c <lwip_netconn_do_write+0x24c>
  10f3d4:	ebffcb98 	bl	10223c <rt_enter_critical>
  10f3d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f3dc:	e5933000 	ldr	r3, [r3]
  10f3e0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f3e4:	e373000c 	cmn	r3, #12
  10f3e8:	ba000004 	blt	10f400 <lwip_netconn_do_write+0x240>
  10f3ec:	e51b3008 	ldr	r3, [fp, #-8]
  10f3f0:	e5933000 	ldr	r3, [r3]
  10f3f4:	e51b2008 	ldr	r2, [fp, #-8]
  10f3f8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f3fc:	e5c3200c 	strb	r2, [r3, #12]
  10f400:	ebffcb93 	bl	102254 <rt_exit_critical>
  10f404:	ea000000 	b	10f40c <lwip_netconn_do_write+0x24c>
        return;
  10f408:	e320f000 	nop	{0}
}
  10f40c:	e24bd004 	sub	sp, fp, #4
  10f410:	e8bd8800 	pop	{fp, pc}

0010f414 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f414:	e92d4800 	push	{fp, lr}
  10f418:	e28db004 	add	fp, sp, #4
  10f41c:	e24dd010 	sub	sp, sp, #16
  10f420:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f424:	e51b3010 	ldr	r3, [fp, #-16]
  10f428:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f42c:	e51b3008 	ldr	r3, [fp, #-8]
  10f430:	e5933000 	ldr	r3, [r3]
  10f434:	e5933008 	ldr	r3, [r3, #8]
  10f438:	e3530000 	cmp	r3, #0
  10f43c:	0a00007e 	beq	10f63c <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f440:	e51b3008 	ldr	r3, [fp, #-8]
  10f444:	e5d33010 	ldrb	r3, [r3, #16]
  10f448:	e3530000 	cmp	r3, #0
  10f44c:	0a000007 	beq	10f470 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f450:	e51b3008 	ldr	r3, [fp, #-8]
  10f454:	e5933000 	ldr	r3, [r3]
  10f458:	e5932008 	ldr	r2, [r3, #8]
  10f45c:	e51b3008 	ldr	r3, [fp, #-8]
  10f460:	e5933008 	ldr	r3, [r3, #8]
  10f464:	e5922000 	ldr	r2, [r2]
  10f468:	e5832000 	str	r2, [r3]
  10f46c:	ea000006 	b	10f48c <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f470:	e51b3008 	ldr	r3, [fp, #-8]
  10f474:	e5933000 	ldr	r3, [r3]
  10f478:	e5932008 	ldr	r2, [r3, #8]
  10f47c:	e51b3008 	ldr	r3, [fp, #-8]
  10f480:	e5933008 	ldr	r3, [r3, #8]
  10f484:	e5922004 	ldr	r2, [r2, #4]
  10f488:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f48c:	e51b3008 	ldr	r3, [fp, #-8]
  10f490:	e3a02000 	mov	r2, #0
  10f494:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f498:	e51b3008 	ldr	r3, [fp, #-8]
  10f49c:	e5933000 	ldr	r3, [r3]
  10f4a0:	e5933000 	ldr	r3, [r3]
  10f4a4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f4a8:	e3530020 	cmp	r3, #32
  10f4ac:	0a000015 	beq	10f508 <lwip_netconn_do_getaddr+0xf4>
  10f4b0:	e3530040 	cmp	r3, #64	; 0x40
  10f4b4:	0a000002 	beq	10f4c4 <lwip_netconn_do_getaddr+0xb0>
  10f4b8:	e3530010 	cmp	r3, #16
  10f4bc:	0a000030 	beq	10f584 <lwip_netconn_do_getaddr+0x170>
  10f4c0:	ea000054 	b	10f618 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f4c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f4c8:	e5d33010 	ldrb	r3, [r3, #16]
  10f4cc:	e3530000 	cmp	r3, #0
  10f4d0:	0a000008 	beq	10f4f8 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f4d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f4d8:	e5933000 	ldr	r3, [r3]
  10f4dc:	e5933008 	ldr	r3, [r3, #8]
  10f4e0:	e5d32010 	ldrb	r2, [r3, #16]
  10f4e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f4e8:	e593300c 	ldr	r3, [r3, #12]
  10f4ec:	e6ff2072 	uxth	r2, r2
  10f4f0:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f4f4:	ea000053 	b	10f648 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f4f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f4fc:	e3e0200a 	mvn	r2, #10
  10f500:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f504:	ea00004f 	b	10f648 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f508:	e51b3008 	ldr	r3, [fp, #-8]
  10f50c:	e5d33010 	ldrb	r3, [r3, #16]
  10f510:	e3530000 	cmp	r3, #0
  10f514:	0a000007 	beq	10f538 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f518:	e51b3008 	ldr	r3, [fp, #-8]
  10f51c:	e5933000 	ldr	r3, [r3]
  10f520:	e5932008 	ldr	r2, [r3, #8]
  10f524:	e51b3008 	ldr	r3, [fp, #-8]
  10f528:	e593300c 	ldr	r3, [r3, #12]
  10f52c:	e1d221b2 	ldrh	r2, [r2, #18]
  10f530:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f534:	ea000043 	b	10f648 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f538:	e51b3008 	ldr	r3, [fp, #-8]
  10f53c:	e5933000 	ldr	r3, [r3]
  10f540:	e5933008 	ldr	r3, [r3, #8]
  10f544:	e5d33010 	ldrb	r3, [r3, #16]
  10f548:	e2033004 	and	r3, r3, #4
  10f54c:	e3530000 	cmp	r3, #0
  10f550:	1a000003 	bne	10f564 <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f554:	e51b3008 	ldr	r3, [fp, #-8]
  10f558:	e3e0200a 	mvn	r2, #10
  10f55c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f560:	ea000038 	b	10f648 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f564:	e51b3008 	ldr	r3, [fp, #-8]
  10f568:	e5933000 	ldr	r3, [r3]
  10f56c:	e5932008 	ldr	r2, [r3, #8]
  10f570:	e51b3008 	ldr	r3, [fp, #-8]
  10f574:	e593300c 	ldr	r3, [r3, #12]
  10f578:	e1d221b4 	ldrh	r2, [r2, #20]
  10f57c:	e1c320b0 	strh	r2, [r3]
      break;
  10f580:	ea000030 	b	10f648 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f584:	e51b3008 	ldr	r3, [fp, #-8]
  10f588:	e5d33010 	ldrb	r3, [r3, #16]
  10f58c:	e3530000 	cmp	r3, #0
  10f590:	1a00000f 	bne	10f5d4 <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f594:	e51b3008 	ldr	r3, [fp, #-8]
  10f598:	e5933000 	ldr	r3, [r3]
  10f59c:	e5933008 	ldr	r3, [r3, #8]
  10f5a0:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f5a4:	e3530000 	cmp	r3, #0
  10f5a8:	0a000005 	beq	10f5c4 <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f5ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f5b0:	e5933000 	ldr	r3, [r3]
  10f5b4:	e5933008 	ldr	r3, [r3, #8]
  10f5b8:	e5933014 	ldr	r3, [r3, #20]
  10f5bc:	e3530001 	cmp	r3, #1
  10f5c0:	1a000003 	bne	10f5d4 <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f5c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5c8:	e3e0200a 	mvn	r2, #10
  10f5cc:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f5d0:	ea00001c 	b	10f648 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f5d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5d8:	e5d33010 	ldrb	r3, [r3, #16]
  10f5dc:	e3530000 	cmp	r3, #0
  10f5e0:	0a000004 	beq	10f5f8 <lwip_netconn_do_getaddr+0x1e4>
  10f5e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5e8:	e5933000 	ldr	r3, [r3]
  10f5ec:	e5933008 	ldr	r3, [r3, #8]
  10f5f0:	e1d331ba 	ldrh	r3, [r3, #26]
  10f5f4:	ea000003 	b	10f608 <lwip_netconn_do_getaddr+0x1f4>
  10f5f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f5fc:	e5933000 	ldr	r3, [r3]
  10f600:	e5933008 	ldr	r3, [r3, #8]
  10f604:	e1d331bc 	ldrh	r3, [r3, #28]
  10f608:	e51b2008 	ldr	r2, [fp, #-8]
  10f60c:	e592200c 	ldr	r2, [r2, #12]
  10f610:	e1c230b0 	strh	r3, [r2]
      break;
  10f614:	ea00000b 	b	10f648 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f618:	e306084c 	movw	r0, #26700	; 0x684c
  10f61c:	e3400014 	movt	r0, #20
  10f620:	ebffcebb 	bl	103114 <rt_kprintf>
  10f624:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f628:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f62c:	e3400014 	movt	r0, #20
  10f630:	ebffedd7 	bl	10ad94 <sys_arch_assert>
      break;
  10f634:	e320f000 	nop	{0}
  10f638:	ea000002 	b	10f648 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f63c:	e51b3008 	ldr	r3, [fp, #-8]
  10f640:	e3e0200a 	mvn	r2, #10
  10f644:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f648:	e51b3008 	ldr	r3, [fp, #-8]
  10f64c:	e5933000 	ldr	r3, [r3]
  10f650:	e3530000 	cmp	r3, #0
  10f654:	0a00000b 	beq	10f688 <lwip_netconn_do_getaddr+0x274>
  10f658:	ebffcaf7 	bl	10223c <rt_enter_critical>
  10f65c:	e51b3008 	ldr	r3, [fp, #-8]
  10f660:	e5933000 	ldr	r3, [r3]
  10f664:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f668:	e373000c 	cmn	r3, #12
  10f66c:	ba000004 	blt	10f684 <lwip_netconn_do_getaddr+0x270>
  10f670:	e51b3008 	ldr	r3, [fp, #-8]
  10f674:	e5933000 	ldr	r3, [r3]
  10f678:	e51b2008 	ldr	r2, [fp, #-8]
  10f67c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f680:	e5c3200c 	strb	r2, [r3, #12]
  10f684:	ebffcaf2 	bl	102254 <rt_exit_critical>
}
  10f688:	e320f000 	nop	{0}
  10f68c:	e24bd004 	sub	sp, fp, #4
  10f690:	e8bd8800 	pop	{fp, pc}

0010f694 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f694:	e92d4800 	push	{fp, lr}
  10f698:	e28db004 	add	fp, sp, #4
  10f69c:	e24dd010 	sub	sp, sp, #16
  10f6a0:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f6a4:	e51b3010 	ldr	r3, [fp, #-16]
  10f6a8:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10f6ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f6b0:	e5933000 	ldr	r3, [r3]
  10f6b4:	e5933004 	ldr	r3, [r3, #4]
  10f6b8:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10f6bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f6c0:	e5933000 	ldr	r3, [r3]
  10f6c4:	e5933008 	ldr	r3, [r3, #8]
  10f6c8:	e3530000 	cmp	r3, #0
  10f6cc:	0a000069 	beq	10f878 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f6d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f6d4:	e5933000 	ldr	r3, [r3]
  10f6d8:	e5933000 	ldr	r3, [r3]
  10f6dc:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10f6e0:	e3530010 	cmp	r3, #16
  10f6e4:	1a000063 	bne	10f878 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f6e8:	e51b3008 	ldr	r3, [fp, #-8]
  10f6ec:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f6f0:	e3530003 	cmp	r3, #3
  10f6f4:	0a000002 	beq	10f704 <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f6f8:	e51b300c 	ldr	r3, [fp, #-12]
  10f6fc:	e3530002 	cmp	r3, #2
  10f700:	0a00005c 	beq	10f878 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10f704:	e51b300c 	ldr	r3, [fp, #-12]
  10f708:	e3530003 	cmp	r3, #3
  10f70c:	1a000003 	bne	10f720 <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10f710:	e51b3008 	ldr	r3, [fp, #-8]
  10f714:	e3e0200a 	mvn	r2, #10
  10f718:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f71c:	ea000058 	b	10f884 <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10f720:	e51b300c 	ldr	r3, [fp, #-12]
  10f724:	e3530001 	cmp	r3, #1
  10f728:	1a000003 	bne	10f73c <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10f72c:	e51b3008 	ldr	r3, [fp, #-8]
  10f730:	e3e02004 	mvn	r2, #4
  10f734:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f738:	ea000051 	b	10f884 <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10f73c:	e51b3008 	ldr	r3, [fp, #-8]
  10f740:	e5d33008 	ldrb	r3, [r3, #8]
  10f744:	e2033001 	and	r3, r3, #1
  10f748:	e3530000 	cmp	r3, #0
  10f74c:	0a000003 	beq	10f760 <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10f750:	e51b3008 	ldr	r3, [fp, #-8]
  10f754:	e5933000 	ldr	r3, [r3]
  10f758:	e1a00003 	mov	r0, r3
  10f75c:	ebfff72a 	bl	10d40c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f760:	e51b3008 	ldr	r3, [fp, #-8]
  10f764:	e5933000 	ldr	r3, [r3]
  10f768:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f76c:	e3530000 	cmp	r3, #0
  10f770:	1a000004 	bne	10f788 <lwip_netconn_do_close+0xf4>
  10f774:	e51b3008 	ldr	r3, [fp, #-8]
  10f778:	e5933000 	ldr	r3, [r3]
  10f77c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f780:	e3530000 	cmp	r3, #0
  10f784:	0a000006 	beq	10f7a4 <lwip_netconn_do_close+0x110>
  10f788:	e30606e4 	movw	r0, #26340	; 0x66e4
  10f78c:	e3400014 	movt	r0, #20
  10f790:	ebffce5f 	bl	103114 <rt_kprintf>
  10f794:	e3001716 	movw	r1, #1814	; 0x716
  10f798:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f79c:	e3400014 	movt	r0, #20
  10f7a0:	ebffed7b 	bl	10ad94 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10f7a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7a8:	e5933000 	ldr	r3, [r3]
  10f7ac:	e3a02004 	mov	r2, #4
  10f7b0:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10f7b4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7b8:	e5933000 	ldr	r3, [r3]
  10f7bc:	e51b2008 	ldr	r2, [fp, #-8]
  10f7c0:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10f7c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7c8:	e5933000 	ldr	r3, [r3]
  10f7cc:	e3a01000 	mov	r1, #0
  10f7d0:	e1a00003 	mov	r0, r3
  10f7d4:	ebfff776 	bl	10d5b4 <lwip_netconn_do_close_internal>
  10f7d8:	e1a03000 	mov	r3, r0
  10f7dc:	e3530000 	cmp	r3, #0
  10f7e0:	0a000038 	beq	10f8c8 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10f7e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7e8:	e5933000 	ldr	r3, [r3]
  10f7ec:	e5933004 	ldr	r3, [r3, #4]
  10f7f0:	e3530004 	cmp	r3, #4
  10f7f4:	0a000006 	beq	10f814 <lwip_netconn_do_close+0x180>
  10f7f8:	e3060700 	movw	r0, #26368	; 0x6700
  10f7fc:	e3400014 	movt	r0, #20
  10f800:	ebffce43 	bl	103114 <rt_kprintf>
  10f804:	e300171b 	movw	r1, #1819	; 0x71b
  10f808:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f80c:	e3400014 	movt	r0, #20
  10f810:	ebffed5f 	bl	10ad94 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10f814:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f818:	e3400014 	movt	r0, #20
  10f81c:	ebffec3d 	bl	10a918 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f820:	e51b3008 	ldr	r3, [fp, #-8]
  10f824:	e5933000 	ldr	r3, [r3]
  10f828:	e2833010 	add	r3, r3, #16
  10f82c:	e3a01000 	mov	r1, #0
  10f830:	e1a00003 	mov	r0, r3
  10f834:	ebffebbb 	bl	10a728 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10f838:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f83c:	e3400014 	movt	r0, #20
  10f840:	ebffec28 	bl	10a8e8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10f844:	e51b3008 	ldr	r3, [fp, #-8]
  10f848:	e5933000 	ldr	r3, [r3]
  10f84c:	e5933004 	ldr	r3, [r3, #4]
  10f850:	e3530000 	cmp	r3, #0
  10f854:	0a00001b 	beq	10f8c8 <lwip_netconn_do_close+0x234>
  10f858:	e3060700 	movw	r0, #26368	; 0x6700
  10f85c:	e3400014 	movt	r0, #20
  10f860:	ebffce2b 	bl	103114 <rt_kprintf>
  10f864:	e300171f 	movw	r1, #1823	; 0x71f
  10f868:	e30603c8 	movw	r0, #25544	; 0x63c8
  10f86c:	e3400014 	movt	r0, #20
  10f870:	ebffed47 	bl	10ad94 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10f874:	ea000013 	b	10f8c8 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10f878:	e51b3008 	ldr	r3, [fp, #-8]
  10f87c:	e3e0200a 	mvn	r2, #10
  10f880:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f884:	e51b3008 	ldr	r3, [fp, #-8]
  10f888:	e5933000 	ldr	r3, [r3]
  10f88c:	e3530000 	cmp	r3, #0
  10f890:	0a00000d 	beq	10f8cc <lwip_netconn_do_close+0x238>
  10f894:	ebffca68 	bl	10223c <rt_enter_critical>
  10f898:	e51b3008 	ldr	r3, [fp, #-8]
  10f89c:	e5933000 	ldr	r3, [r3]
  10f8a0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f8a4:	e373000c 	cmn	r3, #12
  10f8a8:	ba000004 	blt	10f8c0 <lwip_netconn_do_close+0x22c>
  10f8ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f8b0:	e5933000 	ldr	r3, [r3]
  10f8b4:	e51b2008 	ldr	r2, [fp, #-8]
  10f8b8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f8bc:	e5c3200c 	strb	r2, [r3, #12]
  10f8c0:	ebffca63 	bl	102254 <rt_exit_critical>
  10f8c4:	ea000000 	b	10f8cc <lwip_netconn_do_close+0x238>
      return;
  10f8c8:	e320f000 	nop	{0}
}
  10f8cc:	e24bd004 	sub	sp, fp, #4
  10f8d0:	e8bd8800 	pop	{fp, pc}

0010f8d4 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10f8d4:	e92d4800 	push	{fp, lr}
  10f8d8:	e28db004 	add	fp, sp, #4
  10f8dc:	e24dd010 	sub	sp, sp, #16
  10f8e0:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f8e4:	e51b3010 	ldr	r3, [fp, #-16]
  10f8e8:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f8ec:	e51b3008 	ldr	r3, [fp, #-8]
  10f8f0:	e5933000 	ldr	r3, [r3]
  10f8f4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f8f8:	e373000c 	cmn	r3, #12
  10f8fc:	aa000005 	bge	10f918 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10f900:	e51b3008 	ldr	r3, [fp, #-8]
  10f904:	e5933000 	ldr	r3, [r3]
  10f908:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f90c:	e51b3008 	ldr	r3, [fp, #-8]
  10f910:	e5c32004 	strb	r2, [r3, #4]
  10f914:	ea00002d 	b	10f9d0 <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10f918:	e51b3008 	ldr	r3, [fp, #-8]
  10f91c:	e5933000 	ldr	r3, [r3]
  10f920:	e5933008 	ldr	r3, [r3, #8]
  10f924:	e3530000 	cmp	r3, #0
  10f928:	0a000025 	beq	10f9c4 <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10f92c:	e51b3008 	ldr	r3, [fp, #-8]
  10f930:	e5933000 	ldr	r3, [r3]
  10f934:	e5933000 	ldr	r3, [r3]
  10f938:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f93c:	e3530020 	cmp	r3, #32
  10f940:	1a00001b 	bne	10f9b4 <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10f944:	e51b3008 	ldr	r3, [fp, #-8]
  10f948:	e5933010 	ldr	r3, [r3, #16]
  10f94c:	e3530000 	cmp	r3, #0
  10f950:	1a00000b 	bne	10f984 <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f954:	e51b3008 	ldr	r3, [fp, #-8]
  10f958:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f95c:	e51b3008 	ldr	r3, [fp, #-8]
  10f960:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f964:	e1a01003 	mov	r1, r3
  10f968:	e1a00002 	mov	r0, r2
  10f96c:	eb00829b 	bl	1303e0 <igmp_joingroup>
  10f970:	e1a03000 	mov	r3, r0
  10f974:	e1a02003 	mov	r2, r3
  10f978:	e51b3008 	ldr	r3, [fp, #-8]
  10f97c:	e5c32004 	strb	r2, [r3, #4]
  10f980:	ea000012 	b	10f9d0 <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f984:	e51b3008 	ldr	r3, [fp, #-8]
  10f988:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f98c:	e51b3008 	ldr	r3, [fp, #-8]
  10f990:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f994:	e1a01003 	mov	r1, r3
  10f998:	e1a00002 	mov	r0, r2
  10f99c:	eb008348 	bl	1306c4 <igmp_leavegroup>
  10f9a0:	e1a03000 	mov	r3, r0
  10f9a4:	e1a02003 	mov	r2, r3
  10f9a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9ac:	e5c32004 	strb	r2, [r3, #4]
  10f9b0:	ea000006 	b	10f9d0 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10f9b4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9b8:	e3e02005 	mvn	r2, #5
  10f9bc:	e5c32004 	strb	r2, [r3, #4]
  10f9c0:	ea000002 	b	10f9d0 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10f9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9c8:	e3e0200a 	mvn	r2, #10
  10f9cc:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f9d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f9d4:	e5933000 	ldr	r3, [r3]
  10f9d8:	e3530000 	cmp	r3, #0
  10f9dc:	0a00000b 	beq	10fa10 <lwip_netconn_do_join_leave_group+0x13c>
  10f9e0:	ebffca15 	bl	10223c <rt_enter_critical>
  10f9e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9e8:	e5933000 	ldr	r3, [r3]
  10f9ec:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f9f0:	e373000c 	cmn	r3, #12
  10f9f4:	ba000004 	blt	10fa0c <lwip_netconn_do_join_leave_group+0x138>
  10f9f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9fc:	e5933000 	ldr	r3, [r3]
  10fa00:	e51b2008 	ldr	r2, [fp, #-8]
  10fa04:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fa08:	e5c3200c 	strb	r2, [r3, #12]
  10fa0c:	ebffca10 	bl	102254 <rt_exit_critical>
}
  10fa10:	e320f000 	nop	{0}
  10fa14:	e24bd004 	sub	sp, fp, #4
  10fa18:	e8bd8800 	pop	{fp, pc}

0010fa1c <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10fa1c:	e92d4800 	push	{fp, lr}
  10fa20:	e28db004 	add	fp, sp, #4
  10fa24:	e24dd018 	sub	sp, sp, #24
  10fa28:	e50b0010 	str	r0, [fp, #-16]
  10fa2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10fa30:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fa34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fa38:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10fa3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10fa40:	e3530000 	cmp	r3, #0
  10fa44:	1a000004 	bne	10fa5c <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10fa48:	e51b3008 	ldr	r3, [fp, #-8]
  10fa4c:	e593300c 	ldr	r3, [r3, #12]
  10fa50:	e3e02005 	mvn	r2, #5
  10fa54:	e5c32000 	strb	r2, [r3]
  10fa58:	ea000008 	b	10fa80 <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10fa5c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa60:	e593300c 	ldr	r3, [r3, #12]
  10fa64:	e3a02000 	mov	r2, #0
  10fa68:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fa6c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa70:	e5933004 	ldr	r3, [r3, #4]
  10fa74:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fa78:	e5922000 	ldr	r2, [r2]
  10fa7c:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fa80:	e51b3008 	ldr	r3, [fp, #-8]
  10fa84:	e5933008 	ldr	r3, [r3, #8]
  10fa88:	e1a00003 	mov	r0, r3
  10fa8c:	ebffeb1a 	bl	10a6fc <sys_sem_signal>
}
  10fa90:	e320f000 	nop	{0}
  10fa94:	e24bd004 	sub	sp, fp, #4
  10fa98:	e8bd8800 	pop	{fp, pc}

0010fa9c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fa9c:	e92d4810 	push	{r4, fp, lr}
  10faa0:	e28db008 	add	fp, sp, #8
  10faa4:	e24dd01c 	sub	sp, sp, #28
  10faa8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10faac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fab0:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fab4:	e3a03000 	mov	r3, #0
  10fab8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fabc:	e51b3010 	ldr	r3, [fp, #-16]
  10fac0:	e5930000 	ldr	r0, [r3]
  10fac4:	e51b3010 	ldr	r3, [fp, #-16]
  10fac8:	e5931004 	ldr	r1, [r3, #4]
  10facc:	e51b3010 	ldr	r3, [fp, #-16]
  10fad0:	e593400c 	ldr	r4, [r3, #12]
  10fad4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fad8:	e58d3000 	str	r3, [sp]
  10fadc:	e51b3010 	ldr	r3, [fp, #-16]
  10fae0:	e30f2a1c 	movw	r2, #64028	; 0xfa1c
  10fae4:	e3402010 	movt	r2, #16
  10fae8:	eb0020de 	bl	117e68 <dns_gethostbyname_addrtype>
  10faec:	e1a03000 	mov	r3, r0
  10faf0:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10faf4:	e51b3010 	ldr	r3, [fp, #-16]
  10faf8:	e593300c 	ldr	r3, [r3, #12]
  10fafc:	e1d330d0 	ldrsb	r3, [r3]
  10fb00:	e3730005 	cmn	r3, #5
  10fb04:	0a000003 	beq	10fb18 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fb08:	e51b3010 	ldr	r3, [fp, #-16]
  10fb0c:	e5933008 	ldr	r3, [r3, #8]
  10fb10:	e1a00003 	mov	r0, r3
  10fb14:	ebffeaf8 	bl	10a6fc <sys_sem_signal>
  }
}
  10fb18:	e320f000 	nop	{0}
  10fb1c:	e24bd008 	sub	sp, fp, #8
  10fb20:	e8bd8810 	pop	{r4, fp, pc}

0010fb24 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fb24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fb28:	e28db000 	add	fp, sp, #0
  10fb2c:	e24dd00c 	sub	sp, sp, #12
  10fb30:	e1a03000 	mov	r3, r0
  10fb34:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10fb38:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fb3c:	e3530000 	cmp	r3, #0
  10fb40:	ca000003 	bgt	10fb54 <err_to_errno+0x30>
  10fb44:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fb48:	e2633000 	rsb	r3, r3, #0
  10fb4c:	e3530010 	cmp	r3, #16
  10fb50:	da000001 	ble	10fb5c <err_to_errno+0x38>
    return EIO;
  10fb54:	e3a03005 	mov	r3, #5
  10fb58:	ea000004 	b	10fb70 <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10fb5c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fb60:	e2632000 	rsb	r2, r3, #0
  10fb64:	e3063864 	movw	r3, #26724	; 0x6864
  10fb68:	e3403014 	movt	r3, #20
  10fb6c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10fb70:	e1a00003 	mov	r0, r3
  10fb74:	e28bd000 	add	sp, fp, #0
  10fb78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fb7c:	e12fff1e 	bx	lr

0010fb80 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fb80:	e92d4800 	push	{fp, lr}
  10fb84:	e28db004 	add	fp, sp, #4
  10fb88:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10fb8c:	e3a02043 	mov	r2, #67	; 0x43
  10fb90:	e30618a8 	movw	r1, #26792	; 0x68a8
  10fb94:	e3401014 	movt	r1, #20
  10fb98:	e3a00007 	mov	r0, #7
  10fb9c:	eb002482 	bl	118dac <memp_malloc_fn>
  10fba0:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fba4:	e51b3008 	ldr	r3, [fp, #-8]
  10fba8:	e3530000 	cmp	r3, #0
  10fbac:	0a000003 	beq	10fbc0 <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10fbb0:	e3a02010 	mov	r2, #16
  10fbb4:	e3a01000 	mov	r1, #0
  10fbb8:	e51b0008 	ldr	r0, [fp, #-8]
  10fbbc:	eb00c4e8 	bl	140f64 <memset>
  }
  return buf;
  10fbc0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10fbc4:	e1a00003 	mov	r0, r3
  10fbc8:	e24bd004 	sub	sp, fp, #4
  10fbcc:	e8bd8800 	pop	{fp, pc}

0010fbd0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10fbd0:	e92d4800 	push	{fp, lr}
  10fbd4:	e28db004 	add	fp, sp, #4
  10fbd8:	e24dd008 	sub	sp, sp, #8
  10fbdc:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fbe0:	e51b3008 	ldr	r3, [fp, #-8]
  10fbe4:	e3530000 	cmp	r3, #0
  10fbe8:	0a000011 	beq	10fc34 <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10fbec:	e51b3008 	ldr	r3, [fp, #-8]
  10fbf0:	e5933000 	ldr	r3, [r3]
  10fbf4:	e3530000 	cmp	r3, #0
  10fbf8:	0a00000a 	beq	10fc28 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10fbfc:	e51b3008 	ldr	r3, [fp, #-8]
  10fc00:	e5933000 	ldr	r3, [r3]
  10fc04:	e1a00003 	mov	r0, r3
  10fc08:	eb002bdd 	bl	11ab84 <pbuf_free>
      buf->p = buf->ptr = NULL;
  10fc0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc10:	e3a02000 	mov	r2, #0
  10fc14:	e5832004 	str	r2, [r3, #4]
  10fc18:	e51b3008 	ldr	r3, [fp, #-8]
  10fc1c:	e5932004 	ldr	r2, [r3, #4]
  10fc20:	e51b3008 	ldr	r3, [fp, #-8]
  10fc24:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10fc28:	e51b1008 	ldr	r1, [fp, #-8]
  10fc2c:	e3a00007 	mov	r0, #7
  10fc30:	eb0024c5 	bl	118f4c <memp_free>
  }
}
  10fc34:	e320f000 	nop	{0}
  10fc38:	e24bd004 	sub	sp, fp, #4
  10fc3c:	e8bd8800 	pop	{fp, pc}

0010fc40 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10fc40:	e92d4800 	push	{fp, lr}
  10fc44:	e28db004 	add	fp, sp, #4
  10fc48:	e24dd008 	sub	sp, sp, #8
  10fc4c:	e50b0008 	str	r0, [fp, #-8]
  10fc50:	e1a03001 	mov	r3, r1
  10fc54:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10fc58:	e51b3008 	ldr	r3, [fp, #-8]
  10fc5c:	e3530000 	cmp	r3, #0
  10fc60:	1a000008 	bne	10fc88 <netbuf_alloc+0x48>
  10fc64:	e30608d8 	movw	r0, #26840	; 0x68d8
  10fc68:	e3400014 	movt	r0, #20
  10fc6c:	ebffcd28 	bl	103114 <rt_kprintf>
  10fc70:	e3a01068 	mov	r1, #104	; 0x68
  10fc74:	e30608a8 	movw	r0, #26792	; 0x68a8
  10fc78:	e3400014 	movt	r0, #20
  10fc7c:	ebffec44 	bl	10ad94 <sys_arch_assert>
  10fc80:	e3a03000 	mov	r3, #0
  10fc84:	ea000029 	b	10fd30 <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10fc88:	e51b3008 	ldr	r3, [fp, #-8]
  10fc8c:	e5933000 	ldr	r3, [r3]
  10fc90:	e3530000 	cmp	r3, #0
  10fc94:	0a000003 	beq	10fca8 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  10fc98:	e51b3008 	ldr	r3, [fp, #-8]
  10fc9c:	e5933000 	ldr	r3, [r3]
  10fca0:	e1a00003 	mov	r0, r3
  10fca4:	eb002bb6 	bl	11ab84 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  10fca8:	e15b30ba 	ldrh	r3, [fp, #-10]
  10fcac:	e3a02000 	mov	r2, #0
  10fcb0:	e1a01003 	mov	r1, r3
  10fcb4:	e3a00000 	mov	r0, #0
  10fcb8:	eb0028aa 	bl	119f68 <pbuf_alloc>
  10fcbc:	e1a02000 	mov	r2, r0
  10fcc0:	e51b3008 	ldr	r3, [fp, #-8]
  10fcc4:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10fcc8:	e51b3008 	ldr	r3, [fp, #-8]
  10fccc:	e5933000 	ldr	r3, [r3]
  10fcd0:	e3530000 	cmp	r3, #0
  10fcd4:	1a000001 	bne	10fce0 <netbuf_alloc+0xa0>
     return NULL;
  10fcd8:	e3a03000 	mov	r3, #0
  10fcdc:	ea000013 	b	10fd30 <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  10fce0:	e51b3008 	ldr	r3, [fp, #-8]
  10fce4:	e5933000 	ldr	r3, [r3]
  10fce8:	e1d330ba 	ldrh	r3, [r3, #10]
  10fcec:	e15b20ba 	ldrh	r2, [fp, #-10]
  10fcf0:	e1520003 	cmp	r2, r3
  10fcf4:	9a000006 	bls	10fd14 <netbuf_alloc+0xd4>
  10fcf8:	e30608f4 	movw	r0, #26868	; 0x68f4
  10fcfc:	e3400014 	movt	r0, #20
  10fd00:	ebffcd03 	bl	103114 <rt_kprintf>
  10fd04:	e3a01073 	mov	r1, #115	; 0x73
  10fd08:	e30608a8 	movw	r0, #26792	; 0x68a8
  10fd0c:	e3400014 	movt	r0, #20
  10fd10:	ebffec1f 	bl	10ad94 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  10fd14:	e51b3008 	ldr	r3, [fp, #-8]
  10fd18:	e5932000 	ldr	r2, [r3]
  10fd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd20:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  10fd24:	e51b3008 	ldr	r3, [fp, #-8]
  10fd28:	e5933000 	ldr	r3, [r3]
  10fd2c:	e5933004 	ldr	r3, [r3, #4]
}
  10fd30:	e1a00003 	mov	r0, r3
  10fd34:	e24bd004 	sub	sp, fp, #4
  10fd38:	e8bd8800 	pop	{fp, pc}

0010fd3c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  10fd3c:	e92d4800 	push	{fp, lr}
  10fd40:	e28db004 	add	fp, sp, #4
  10fd44:	e24dd008 	sub	sp, sp, #8
  10fd48:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  10fd4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd50:	e3530000 	cmp	r3, #0
  10fd54:	1a000007 	bne	10fd78 <netbuf_free+0x3c>
  10fd58:	e3060918 	movw	r0, #26904	; 0x6918
  10fd5c:	e3400014 	movt	r0, #20
  10fd60:	ebffcceb 	bl	103114 <rt_kprintf>
  10fd64:	e3a01081 	mov	r1, #129	; 0x81
  10fd68:	e30608a8 	movw	r0, #26792	; 0x68a8
  10fd6c:	e3400014 	movt	r0, #20
  10fd70:	ebffec07 	bl	10ad94 <sys_arch_assert>
  10fd74:	ea00000e 	b	10fdb4 <netbuf_free+0x78>
  if (buf->p != NULL) {
  10fd78:	e51b3008 	ldr	r3, [fp, #-8]
  10fd7c:	e5933000 	ldr	r3, [r3]
  10fd80:	e3530000 	cmp	r3, #0
  10fd84:	0a000003 	beq	10fd98 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  10fd88:	e51b3008 	ldr	r3, [fp, #-8]
  10fd8c:	e5933000 	ldr	r3, [r3]
  10fd90:	e1a00003 	mov	r0, r3
  10fd94:	eb002b7a 	bl	11ab84 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  10fd98:	e51b3008 	ldr	r3, [fp, #-8]
  10fd9c:	e3a02000 	mov	r2, #0
  10fda0:	e5832004 	str	r2, [r3, #4]
  10fda4:	e51b3008 	ldr	r3, [fp, #-8]
  10fda8:	e5932004 	ldr	r2, [r3, #4]
  10fdac:	e51b3008 	ldr	r3, [fp, #-8]
  10fdb0:	e5832000 	str	r2, [r3]
}
  10fdb4:	e24bd004 	sub	sp, fp, #4
  10fdb8:	e8bd8800 	pop	{fp, pc}

0010fdbc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  10fdbc:	e92d4800 	push	{fp, lr}
  10fdc0:	e28db004 	add	fp, sp, #4
  10fdc4:	e24dd010 	sub	sp, sp, #16
  10fdc8:	e50b0008 	str	r0, [fp, #-8]
  10fdcc:	e50b100c 	str	r1, [fp, #-12]
  10fdd0:	e1a03002 	mov	r3, r2
  10fdd4:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  10fdd8:	e51b3008 	ldr	r3, [fp, #-8]
  10fddc:	e3530000 	cmp	r3, #0
  10fde0:	1a000008 	bne	10fe08 <netbuf_ref+0x4c>
  10fde4:	e3060934 	movw	r0, #26932	; 0x6934
  10fde8:	e3400014 	movt	r0, #20
  10fdec:	ebffccc8 	bl	103114 <rt_kprintf>
  10fdf0:	e3a01095 	mov	r1, #149	; 0x95
  10fdf4:	e30608a8 	movw	r0, #26792	; 0x68a8
  10fdf8:	e3400014 	movt	r0, #20
  10fdfc:	ebffebe4 	bl	10ad94 <sys_arch_assert>
  10fe00:	e3e0300f 	mvn	r3, #15
  10fe04:	ea000028 	b	10feac <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  10fe08:	e51b3008 	ldr	r3, [fp, #-8]
  10fe0c:	e5933000 	ldr	r3, [r3]
  10fe10:	e3530000 	cmp	r3, #0
  10fe14:	0a000003 	beq	10fe28 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  10fe18:	e51b3008 	ldr	r3, [fp, #-8]
  10fe1c:	e5933000 	ldr	r3, [r3]
  10fe20:	e1a00003 	mov	r0, r3
  10fe24:	eb002b56 	bl	11ab84 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  10fe28:	e3a02002 	mov	r2, #2
  10fe2c:	e3a01000 	mov	r1, #0
  10fe30:	e3a00000 	mov	r0, #0
  10fe34:	eb00284b 	bl	119f68 <pbuf_alloc>
  10fe38:	e1a02000 	mov	r2, r0
  10fe3c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe40:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10fe44:	e51b3008 	ldr	r3, [fp, #-8]
  10fe48:	e5933000 	ldr	r3, [r3]
  10fe4c:	e3530000 	cmp	r3, #0
  10fe50:	1a000004 	bne	10fe68 <netbuf_ref+0xac>
    buf->ptr = NULL;
  10fe54:	e51b3008 	ldr	r3, [fp, #-8]
  10fe58:	e3a02000 	mov	r2, #0
  10fe5c:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  10fe60:	e3e03000 	mvn	r3, #0
  10fe64:	ea000010 	b	10feac <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  10fe68:	e51b3008 	ldr	r3, [fp, #-8]
  10fe6c:	e5933000 	ldr	r3, [r3]
  10fe70:	e51b200c 	ldr	r2, [fp, #-12]
  10fe74:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  10fe78:	e51b3008 	ldr	r3, [fp, #-8]
  10fe7c:	e5933000 	ldr	r3, [r3]
  10fe80:	e15b20be 	ldrh	r2, [fp, #-14]
  10fe84:	e1c320b8 	strh	r2, [r3, #8]
  10fe88:	e51b2008 	ldr	r2, [fp, #-8]
  10fe8c:	e5922000 	ldr	r2, [r2]
  10fe90:	e1d330b8 	ldrh	r3, [r3, #8]
  10fe94:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  10fe98:	e51b3008 	ldr	r3, [fp, #-8]
  10fe9c:	e5932000 	ldr	r2, [r3]
  10fea0:	e51b3008 	ldr	r3, [fp, #-8]
  10fea4:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  10fea8:	e3a03000 	mov	r3, #0
}
  10feac:	e1a00003 	mov	r0, r3
  10feb0:	e24bd004 	sub	sp, fp, #4
  10feb4:	e8bd8800 	pop	{fp, pc}

0010feb8 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  10feb8:	e92d4800 	push	{fp, lr}
  10febc:	e28db004 	add	fp, sp, #4
  10fec0:	e24dd008 	sub	sp, sp, #8
  10fec4:	e50b0008 	str	r0, [fp, #-8]
  10fec8:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  10fecc:	e51b3008 	ldr	r3, [fp, #-8]
  10fed0:	e3530000 	cmp	r3, #0
  10fed4:	1a000007 	bne	10fef8 <netbuf_chain+0x40>
  10fed8:	e306094c 	movw	r0, #26956	; 0x694c
  10fedc:	e3400014 	movt	r0, #20
  10fee0:	ebffcc8b 	bl	103114 <rt_kprintf>
  10fee4:	e3a010ae 	mov	r1, #174	; 0xae
  10fee8:	e30608a8 	movw	r0, #26792	; 0x68a8
  10feec:	e3400014 	movt	r0, #20
  10fef0:	ebffeba7 	bl	10ad94 <sys_arch_assert>
  10fef4:	ea000018 	b	10ff5c <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  10fef8:	e51b300c 	ldr	r3, [fp, #-12]
  10fefc:	e3530000 	cmp	r3, #0
  10ff00:	1a000007 	bne	10ff24 <netbuf_chain+0x6c>
  10ff04:	e3060968 	movw	r0, #26984	; 0x6968
  10ff08:	e3400014 	movt	r0, #20
  10ff0c:	ebffcc80 	bl	103114 <rt_kprintf>
  10ff10:	e3a010af 	mov	r1, #175	; 0xaf
  10ff14:	e30608a8 	movw	r0, #26792	; 0x68a8
  10ff18:	e3400014 	movt	r0, #20
  10ff1c:	ebffeb9c 	bl	10ad94 <sys_arch_assert>
  10ff20:	ea00000d 	b	10ff5c <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  10ff24:	e51b3008 	ldr	r3, [fp, #-8]
  10ff28:	e5932000 	ldr	r2, [r3]
  10ff2c:	e51b300c 	ldr	r3, [fp, #-12]
  10ff30:	e5933000 	ldr	r3, [r3]
  10ff34:	e1a01003 	mov	r1, r3
  10ff38:	e1a00002 	mov	r0, r2
  10ff3c:	eb002bc7 	bl	11ae60 <pbuf_cat>
  head->ptr = head->p;
  10ff40:	e51b3008 	ldr	r3, [fp, #-8]
  10ff44:	e5932000 	ldr	r2, [r3]
  10ff48:	e51b3008 	ldr	r3, [fp, #-8]
  10ff4c:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  10ff50:	e51b100c 	ldr	r1, [fp, #-12]
  10ff54:	e3a00007 	mov	r0, #7
  10ff58:	eb0023fb 	bl	118f4c <memp_free>
}
  10ff5c:	e24bd004 	sub	sp, fp, #4
  10ff60:	e8bd8800 	pop	{fp, pc}

0010ff64 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  10ff64:	e92d4800 	push	{fp, lr}
  10ff68:	e28db004 	add	fp, sp, #4
  10ff6c:	e24dd010 	sub	sp, sp, #16
  10ff70:	e50b0008 	str	r0, [fp, #-8]
  10ff74:	e50b100c 	str	r1, [fp, #-12]
  10ff78:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  10ff7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff80:	e3530000 	cmp	r3, #0
  10ff84:	1a000008 	bne	10ffac <netbuf_data+0x48>
  10ff88:	e3060984 	movw	r0, #27012	; 0x6984
  10ff8c:	e3400014 	movt	r0, #20
  10ff90:	ebffcc5f 	bl	103114 <rt_kprintf>
  10ff94:	e3a010c2 	mov	r1, #194	; 0xc2
  10ff98:	e30608a8 	movw	r0, #26792	; 0x68a8
  10ff9c:	e3400014 	movt	r0, #20
  10ffa0:	ebffeb7b 	bl	10ad94 <sys_arch_assert>
  10ffa4:	e3e0300f 	mvn	r3, #15
  10ffa8:	ea000028 	b	110050 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  10ffac:	e51b300c 	ldr	r3, [fp, #-12]
  10ffb0:	e3530000 	cmp	r3, #0
  10ffb4:	1a000008 	bne	10ffdc <netbuf_data+0x78>
  10ffb8:	e30609a0 	movw	r0, #27040	; 0x69a0
  10ffbc:	e3400014 	movt	r0, #20
  10ffc0:	ebffcc53 	bl	103114 <rt_kprintf>
  10ffc4:	e3a010c3 	mov	r1, #195	; 0xc3
  10ffc8:	e30608a8 	movw	r0, #26792	; 0x68a8
  10ffcc:	e3400014 	movt	r0, #20
  10ffd0:	ebffeb6f 	bl	10ad94 <sys_arch_assert>
  10ffd4:	e3e0300f 	mvn	r3, #15
  10ffd8:	ea00001c 	b	110050 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  10ffdc:	e51b3010 	ldr	r3, [fp, #-16]
  10ffe0:	e3530000 	cmp	r3, #0
  10ffe4:	1a000008 	bne	11000c <netbuf_data+0xa8>
  10ffe8:	e30609c0 	movw	r0, #27072	; 0x69c0
  10ffec:	e3400014 	movt	r0, #20
  10fff0:	ebffcc47 	bl	103114 <rt_kprintf>
  10fff4:	e3a010c4 	mov	r1, #196	; 0xc4
  10fff8:	e30608a8 	movw	r0, #26792	; 0x68a8
  10fffc:	e3400014 	movt	r0, #20
  110000:	ebffeb63 	bl	10ad94 <sys_arch_assert>
  110004:	e3e0300f 	mvn	r3, #15
  110008:	ea000010 	b	110050 <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  11000c:	e51b3008 	ldr	r3, [fp, #-8]
  110010:	e5933004 	ldr	r3, [r3, #4]
  110014:	e3530000 	cmp	r3, #0
  110018:	1a000001 	bne	110024 <netbuf_data+0xc0>
    return ERR_BUF;
  11001c:	e3e03001 	mvn	r3, #1
  110020:	ea00000a 	b	110050 <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  110024:	e51b3008 	ldr	r3, [fp, #-8]
  110028:	e5933004 	ldr	r3, [r3, #4]
  11002c:	e5932004 	ldr	r2, [r3, #4]
  110030:	e51b300c 	ldr	r3, [fp, #-12]
  110034:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  110038:	e51b3008 	ldr	r3, [fp, #-8]
  11003c:	e5933004 	ldr	r3, [r3, #4]
  110040:	e1d320ba 	ldrh	r2, [r3, #10]
  110044:	e51b3010 	ldr	r3, [fp, #-16]
  110048:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  11004c:	e3a03000 	mov	r3, #0
}
  110050:	e1a00003 	mov	r0, r3
  110054:	e24bd004 	sub	sp, fp, #4
  110058:	e8bd8800 	pop	{fp, pc}

0011005c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  11005c:	e92d4800 	push	{fp, lr}
  110060:	e28db004 	add	fp, sp, #4
  110064:	e24dd008 	sub	sp, sp, #8
  110068:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  11006c:	e51b3008 	ldr	r3, [fp, #-8]
  110070:	e3530000 	cmp	r3, #0
  110074:	1a000008 	bne	11009c <netbuf_next+0x40>
  110078:	e30609dc 	movw	r0, #27100	; 0x69dc
  11007c:	e3400014 	movt	r0, #20
  110080:	ebffcc23 	bl	103114 <rt_kprintf>
  110084:	e3a010dc 	mov	r1, #220	; 0xdc
  110088:	e30608a8 	movw	r0, #26792	; 0x68a8
  11008c:	e3400014 	movt	r0, #20
  110090:	ebffeb3f 	bl	10ad94 <sys_arch_assert>
  110094:	e3e03000 	mvn	r3, #0
  110098:	ea000013 	b	1100ec <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  11009c:	e51b3008 	ldr	r3, [fp, #-8]
  1100a0:	e5933004 	ldr	r3, [r3, #4]
  1100a4:	e5933000 	ldr	r3, [r3]
  1100a8:	e3530000 	cmp	r3, #0
  1100ac:	1a000001 	bne	1100b8 <netbuf_next+0x5c>
    return -1;
  1100b0:	e3e03000 	mvn	r3, #0
  1100b4:	ea00000c 	b	1100ec <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  1100b8:	e51b3008 	ldr	r3, [fp, #-8]
  1100bc:	e5933004 	ldr	r3, [r3, #4]
  1100c0:	e5932000 	ldr	r2, [r3]
  1100c4:	e51b3008 	ldr	r3, [fp, #-8]
  1100c8:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  1100cc:	e51b3008 	ldr	r3, [fp, #-8]
  1100d0:	e5933004 	ldr	r3, [r3, #4]
  1100d4:	e5933000 	ldr	r3, [r3]
  1100d8:	e3530000 	cmp	r3, #0
  1100dc:	1a000001 	bne	1100e8 <netbuf_next+0x8c>
    return 1;
  1100e0:	e3a03001 	mov	r3, #1
  1100e4:	ea000000 	b	1100ec <netbuf_next+0x90>
  }
  return 0;
  1100e8:	e3a03000 	mov	r3, #0
}
  1100ec:	e1a00003 	mov	r0, r3
  1100f0:	e24bd004 	sub	sp, fp, #4
  1100f4:	e8bd8800 	pop	{fp, pc}

001100f8 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  1100f8:	e92d4800 	push	{fp, lr}
  1100fc:	e28db004 	add	fp, sp, #4
  110100:	e24dd008 	sub	sp, sp, #8
  110104:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110108:	e51b3008 	ldr	r3, [fp, #-8]
  11010c:	e3530000 	cmp	r3, #0
  110110:	1a000007 	bne	110134 <netbuf_first+0x3c>
  110114:	e30609f8 	movw	r0, #27128	; 0x69f8
  110118:	e3400014 	movt	r0, #20
  11011c:	ebffcbfc 	bl	103114 <rt_kprintf>
  110120:	e3a010f2 	mov	r1, #242	; 0xf2
  110124:	e30608a8 	movw	r0, #26792	; 0x68a8
  110128:	e3400014 	movt	r0, #20
  11012c:	ebffeb18 	bl	10ad94 <sys_arch_assert>
  110130:	ea000003 	b	110144 <netbuf_first+0x4c>
  buf->ptr = buf->p;
  110134:	e51b3008 	ldr	r3, [fp, #-8]
  110138:	e5932000 	ldr	r2, [r3]
  11013c:	e51b3008 	ldr	r3, [fp, #-8]
  110140:	e5832004 	str	r2, [r3, #4]
}
  110144:	e24bd004 	sub	sp, fp, #4
  110148:	e8bd8800 	pop	{fp, pc}

0011014c <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  11014c:	e92d4800 	push	{fp, lr}
  110150:	e28db004 	add	fp, sp, #4
  110154:	e24dd010 	sub	sp, sp, #16
  110158:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  11015c:	e24b300c 	sub	r3, fp, #12
  110160:	e1a01003 	mov	r1, r3
  110164:	e51b0010 	ldr	r0, [fp, #-16]
  110168:	ebffef98 	bl	10bfd0 <netconn_gethostbyname>
  11016c:	e1a03000 	mov	r3, r0
  110170:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  110174:	e15b30d5 	ldrsb	r3, [fp, #-5]
  110178:	e3530000 	cmp	r3, #0
  11017c:	0a000005 	beq	110198 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  110180:	e30f3578 	movw	r3, #62840	; 0xf578
  110184:	e3403014 	movt	r3, #20
  110188:	e3a020d2 	mov	r2, #210	; 0xd2
  11018c:	e5832000 	str	r2, [r3]
    return NULL;
  110190:	e3a03000 	mov	r3, #0
  110194:	ea000032 	b	110264 <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  110198:	e30d3a50 	movw	r3, #55888	; 0xda50
  11019c:	e3403014 	movt	r3, #20
  1101a0:	e51b200c 	ldr	r2, [fp, #-12]
  1101a4:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  1101a8:	e30d3a54 	movw	r3, #55892	; 0xda54
  1101ac:	e3403014 	movt	r3, #20
  1101b0:	e30d2a50 	movw	r2, #55888	; 0xda50
  1101b4:	e3402014 	movt	r2, #20
  1101b8:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  1101bc:	e30d3a54 	movw	r3, #55892	; 0xda54
  1101c0:	e3403014 	movt	r3, #20
  1101c4:	e3a02000 	mov	r2, #0
  1101c8:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1101cc:	e3a02c01 	mov	r2, #256	; 0x100
  1101d0:	e51b1010 	ldr	r1, [fp, #-16]
  1101d4:	e30d0a5c 	movw	r0, #55900	; 0xda5c
  1101d8:	e3400014 	movt	r0, #20
  1101dc:	eb00c442 	bl	1412ec <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  1101e0:	e30d3a5c 	movw	r3, #55900	; 0xda5c
  1101e4:	e3403014 	movt	r3, #20
  1101e8:	e3a02000 	mov	r2, #0
  1101ec:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  1101f0:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1101f4:	e3403014 	movt	r3, #20
  1101f8:	e30d2a5c 	movw	r2, #55900	; 0xda5c
  1101fc:	e3402014 	movt	r2, #20
  110200:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  110204:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110208:	e3403014 	movt	r3, #20
  11020c:	e3a02000 	mov	r2, #0
  110210:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  110214:	e30d3b60 	movw	r3, #56160	; 0xdb60
  110218:	e3403014 	movt	r3, #20
  11021c:	e30d2b74 	movw	r2, #56180	; 0xdb74
  110220:	e3402014 	movt	r2, #20
  110224:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110228:	e30d3b60 	movw	r3, #56160	; 0xdb60
  11022c:	e3403014 	movt	r3, #20
  110230:	e3a02002 	mov	r2, #2
  110234:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  110238:	e30d3b60 	movw	r3, #56160	; 0xdb60
  11023c:	e3403014 	movt	r3, #20
  110240:	e3a02004 	mov	r2, #4
  110244:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  110248:	e30d3b60 	movw	r3, #56160	; 0xdb60
  11024c:	e3403014 	movt	r3, #20
  110250:	e30d2a54 	movw	r2, #55892	; 0xda54
  110254:	e3402014 	movt	r2, #20
  110258:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  11025c:	e30d3b60 	movw	r3, #56160	; 0xdb60
  110260:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  110264:	e1a00003 	mov	r0, r3
  110268:	e24bd004 	sub	sp, fp, #4
  11026c:	e8bd8800 	pop	{fp, pc}

00110270 <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  110270:	e92d4800 	push	{fp, lr}
  110274:	e28db004 	add	fp, sp, #4
  110278:	e24dd028 	sub	sp, sp, #40	; 0x28
  11027c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  110280:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  110284:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  110288:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  11028c:	e59b3008 	ldr	r3, [fp, #8]
  110290:	e3530000 	cmp	r3, #0
  110294:	1a000001 	bne	1102a0 <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  110298:	e24b3018 	sub	r3, fp, #24
  11029c:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  1102a0:	e59b3004 	ldr	r3, [fp, #4]
  1102a4:	e3530000 	cmp	r3, #0
  1102a8:	1a000004 	bne	1102c0 <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1102ac:	e59b3008 	ldr	r3, [fp, #8]
  1102b0:	e3a02016 	mov	r2, #22
  1102b4:	e5832000 	str	r2, [r3]
    return -1;
  1102b8:	e3e03000 	mvn	r3, #0
  1102bc:	ea00005a 	b	11042c <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  1102c0:	e59b3004 	ldr	r3, [fp, #4]
  1102c4:	e3a02000 	mov	r2, #0
  1102c8:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  1102cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1102d0:	e3530000 	cmp	r3, #0
  1102d4:	0a000005 	beq	1102f0 <lwip_gethostbyname_r+0x80>
  1102d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1102dc:	e3530000 	cmp	r3, #0
  1102e0:	0a000002 	beq	1102f0 <lwip_gethostbyname_r+0x80>
  1102e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1102e8:	e3530000 	cmp	r3, #0
  1102ec:	1a000004 	bne	110304 <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1102f0:	e59b3008 	ldr	r3, [fp, #8]
  1102f4:	e3a02016 	mov	r2, #22
  1102f8:	e5832000 	str	r2, [r3]
    return -1;
  1102fc:	e3e03000 	mvn	r3, #0
  110300:	ea000049 	b	11042c <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  110304:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110308:	eb00c3a6 	bl	1411a8 <strlen>
  11030c:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  110310:	e51b3008 	ldr	r3, [fp, #-8]
  110314:	e2833014 	add	r3, r3, #20
  110318:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  11031c:	e1520003 	cmp	r2, r3
  110320:	2a000004 	bcs	110338 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  110324:	e59b3008 	ldr	r3, [fp, #8]
  110328:	e3a02022 	mov	r2, #34	; 0x22
  11032c:	e5832000 	str	r2, [r3]
    return -1;
  110330:	e3e03000 	mvn	r3, #0
  110334:	ea00003c 	b	11042c <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  110338:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11033c:	e2833003 	add	r3, r3, #3
  110340:	e3c33003 	bic	r3, r3, #3
  110344:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  110348:	e51b300c 	ldr	r3, [fp, #-12]
  11034c:	e2833010 	add	r3, r3, #16
  110350:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  110354:	e51b300c 	ldr	r3, [fp, #-12]
  110358:	e2833008 	add	r3, r3, #8
  11035c:	e1a01003 	mov	r1, r3
  110360:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110364:	ebffef19 	bl	10bfd0 <netconn_gethostbyname>
  110368:	e1a03000 	mov	r3, r0
  11036c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  110370:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  110374:	e3530000 	cmp	r3, #0
  110378:	0a000004 	beq	110390 <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  11037c:	e59b3008 	ldr	r3, [fp, #8]
  110380:	e3a020d2 	mov	r2, #210	; 0xd2
  110384:	e5832000 	str	r2, [r3]
    return -1;
  110388:	e3e03000 	mvn	r3, #0
  11038c:	ea000026 	b	11042c <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  110390:	e51b2008 	ldr	r2, [fp, #-8]
  110394:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  110398:	e51b0010 	ldr	r0, [fp, #-16]
  11039c:	eb00c1b8 	bl	140a84 <memcpy>
  hostname[namelen] = 0;
  1103a0:	e51b2010 	ldr	r2, [fp, #-16]
  1103a4:	e51b3008 	ldr	r3, [fp, #-8]
  1103a8:	e0823003 	add	r3, r2, r3
  1103ac:	e3a02000 	mov	r2, #0
  1103b0:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  1103b4:	e51b300c 	ldr	r3, [fp, #-12]
  1103b8:	e2832008 	add	r2, r3, #8
  1103bc:	e51b300c 	ldr	r3, [fp, #-12]
  1103c0:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  1103c4:	e51b300c 	ldr	r3, [fp, #-12]
  1103c8:	e3a02000 	mov	r2, #0
  1103cc:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  1103d0:	e51b300c 	ldr	r3, [fp, #-12]
  1103d4:	e3a02000 	mov	r2, #0
  1103d8:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  1103dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103e0:	e51b2010 	ldr	r2, [fp, #-16]
  1103e4:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  1103e8:	e51b300c 	ldr	r3, [fp, #-12]
  1103ec:	e283200c 	add	r2, r3, #12
  1103f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103f4:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  1103f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103fc:	e3a02002 	mov	r2, #2
  110400:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  110404:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110408:	e3a02004 	mov	r2, #4
  11040c:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  110410:	e51b200c 	ldr	r2, [fp, #-12]
  110414:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110418:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  11041c:	e59b3004 	ldr	r3, [fp, #4]
  110420:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  110424:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110428:	e3a03000 	mov	r3, #0
}
  11042c:	e1a00003 	mov	r0, r3
  110430:	e24bd004 	sub	sp, fp, #4
  110434:	e8bd8800 	pop	{fp, pc}

00110438 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  110438:	e92d4800 	push	{fp, lr}
  11043c:	e28db004 	add	fp, sp, #4
  110440:	e24dd010 	sub	sp, sp, #16
  110444:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  110448:	ea000007 	b	11046c <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  11044c:	e51b3010 	ldr	r3, [fp, #-16]
  110450:	e593301c 	ldr	r3, [r3, #28]
  110454:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  110458:	e51b1010 	ldr	r1, [fp, #-16]
  11045c:	e3a0000e 	mov	r0, #14
  110460:	eb0022b9 	bl	118f4c <memp_free>
    ai = next;
  110464:	e51b3008 	ldr	r3, [fp, #-8]
  110468:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  11046c:	e51b3010 	ldr	r3, [fp, #-16]
  110470:	e3530000 	cmp	r3, #0
  110474:	1afffff4 	bne	11044c <lwip_freeaddrinfo+0x14>
  }
}
  110478:	e320f000 	nop	{0}
  11047c:	e24bd004 	sub	sp, fp, #4
  110480:	e8bd8800 	pop	{fp, pc}

00110484 <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  110484:	e92d4800 	push	{fp, lr}
  110488:	e28db004 	add	fp, sp, #4
  11048c:	e24dd038 	sub	sp, sp, #56	; 0x38
  110490:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110494:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110498:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  11049c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  1104a0:	e3a03000 	mov	r3, #0
  1104a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  1104a8:	e3a03000 	mov	r3, #0
  1104ac:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  1104b0:	e3a03000 	mov	r3, #0
  1104b4:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  1104b8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1104bc:	e3530000 	cmp	r3, #0
  1104c0:	1a000001 	bne	1104cc <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  1104c4:	e3a030ca 	mov	r3, #202	; 0xca
  1104c8:	ea0000d0 	b	110810 <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  1104cc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1104d0:	e3a02000 	mov	r2, #0
  1104d4:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  1104d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1104dc:	e3530000 	cmp	r3, #0
  1104e0:	1a000004 	bne	1104f8 <lwip_getaddrinfo+0x74>
  1104e4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1104e8:	e3530000 	cmp	r3, #0
  1104ec:	1a000001 	bne	1104f8 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  1104f0:	e3a030c8 	mov	r3, #200	; 0xc8
  1104f4:	ea0000c5 	b	110810 <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  1104f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1104fc:	e3530000 	cmp	r3, #0
  110500:	0a00000a 	beq	110530 <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  110504:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110508:	e5933004 	ldr	r3, [r3, #4]
  11050c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  110510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110514:	e3530000 	cmp	r3, #0
  110518:	0a000006 	beq	110538 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  11051c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110520:	e3530002 	cmp	r3, #2
  110524:	0a000003 	beq	110538 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110528:	e3a030cc 	mov	r3, #204	; 0xcc
  11052c:	ea0000b7 	b	110810 <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  110530:	e3a03000 	mov	r3, #0
  110534:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  110538:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11053c:	e3530000 	cmp	r3, #0
  110540:	0a00000a 	beq	110570 <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  110544:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  110548:	eb00c121 	bl	1409d4 <atoi>
  11054c:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  110550:	e51b3008 	ldr	r3, [fp, #-8]
  110554:	e3530000 	cmp	r3, #0
  110558:	da000002 	ble	110568 <lwip_getaddrinfo+0xe4>
  11055c:	e51b3008 	ldr	r3, [fp, #-8]
  110560:	e3530801 	cmp	r3, #65536	; 0x10000
  110564:	ba000001 	blt	110570 <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  110568:	e3a030c9 	mov	r3, #201	; 0xc9
  11056c:	ea0000a7 	b	110810 <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  110570:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110574:	e3530000 	cmp	r3, #0
  110578:	0a00001b 	beq	1105ec <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  11057c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110580:	e3530000 	cmp	r3, #0
  110584:	0a00000d 	beq	1105c0 <lwip_getaddrinfo+0x13c>
  110588:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11058c:	e5933000 	ldr	r3, [r3]
  110590:	e2033004 	and	r3, r3, #4
  110594:	e3530000 	cmp	r3, #0
  110598:	0a000008 	beq	1105c0 <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  11059c:	e24b3028 	sub	r3, fp, #40	; 0x28
  1105a0:	e1a01003 	mov	r1, r3
  1105a4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1105a8:	eb008783 	bl	1323bc <ip4addr_aton>
  1105ac:	e1a03000 	mov	r3, r0
  1105b0:	e3530000 	cmp	r3, #0
  1105b4:	1a00001a 	bne	110624 <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  1105b8:	e3a030c8 	mov	r3, #200	; 0xc8
  1105bc:	ea000093 	b	110810 <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  1105c0:	e24b3028 	sub	r3, fp, #40	; 0x28
  1105c4:	e1a01003 	mov	r1, r3
  1105c8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1105cc:	ebffee7f 	bl	10bfd0 <netconn_gethostbyname>
  1105d0:	e1a03000 	mov	r3, r0
  1105d4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  1105d8:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  1105dc:	e3530000 	cmp	r3, #0
  1105e0:	0a00000f 	beq	110624 <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  1105e4:	e3a030ca 	mov	r3, #202	; 0xca
  1105e8:	ea000088 	b	110810 <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  1105ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105f0:	e3530000 	cmp	r3, #0
  1105f4:	0a000007 	beq	110618 <lwip_getaddrinfo+0x194>
  1105f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105fc:	e5933000 	ldr	r3, [r3]
  110600:	e2033001 	and	r3, r3, #1
  110604:	e3530000 	cmp	r3, #0
  110608:	0a000002 	beq	110618 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  11060c:	e3a03000 	mov	r3, #0
  110610:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  110614:	ea000002 	b	110624 <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110618:	e3a0307f 	mov	r3, #127	; 0x7f
  11061c:	e3403100 	movt	r3, #256	; 0x100
  110620:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  110624:	e3a03030 	mov	r3, #48	; 0x30
  110628:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  11062c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110630:	e3530000 	cmp	r3, #0
  110634:	0a00001a 	beq	1106a4 <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  110638:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  11063c:	eb00c2d9 	bl	1411a8 <strlen>
  110640:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  110644:	e51b3010 	ldr	r3, [fp, #-16]
  110648:	e3530c01 	cmp	r3, #256	; 0x100
  11064c:	9a000001 	bls	110658 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  110650:	e3a030ca 	mov	r3, #202	; 0xca
  110654:	ea00006d 	b	110810 <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  110658:	e51b200c 	ldr	r2, [fp, #-12]
  11065c:	e51b3010 	ldr	r3, [fp, #-16]
  110660:	e0823003 	add	r3, r2, r3
  110664:	e2833001 	add	r3, r3, #1
  110668:	e51b200c 	ldr	r2, [fp, #-12]
  11066c:	e1520003 	cmp	r2, r3
  110670:	3a000006 	bcc	110690 <lwip_getaddrinfo+0x20c>
  110674:	e3060a14 	movw	r0, #27156	; 0x6a14
  110678:	e3400014 	movt	r0, #20
  11067c:	ebffcaa4 	bl	103114 <rt_kprintf>
  110680:	e3001166 	movw	r1, #358	; 0x166
  110684:	e3060a28 	movw	r0, #27176	; 0x6a28
  110688:	e3400014 	movt	r0, #20
  11068c:	ebffe9c0 	bl	10ad94 <sys_arch_assert>
    total_size += namelen + 1;
  110690:	e51b2010 	ldr	r2, [fp, #-16]
  110694:	e51b300c 	ldr	r3, [fp, #-12]
  110698:	e0823003 	add	r3, r2, r3
  11069c:	e2833001 	add	r3, r3, #1
  1106a0:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  1106a4:	e51b300c 	ldr	r3, [fp, #-12]
  1106a8:	e3002131 	movw	r2, #305	; 0x131
  1106ac:	e1530002 	cmp	r3, r2
  1106b0:	9a000006 	bls	1106d0 <lwip_getaddrinfo+0x24c>
  1106b4:	e3060a54 	movw	r0, #27220	; 0x6a54
  1106b8:	e3400014 	movt	r0, #20
  1106bc:	ebffca94 	bl	103114 <rt_kprintf>
  1106c0:	e300116b 	movw	r1, #363	; 0x16b
  1106c4:	e3060a28 	movw	r0, #27176	; 0x6a28
  1106c8:	e3400014 	movt	r0, #20
  1106cc:	ebffe9b0 	bl	10ad94 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  1106d0:	e3a02f5b 	mov	r2, #364	; 0x16c
  1106d4:	e3061a28 	movw	r1, #27176	; 0x6a28
  1106d8:	e3401014 	movt	r1, #20
  1106dc:	e3a0000e 	mov	r0, #14
  1106e0:	eb0021b1 	bl	118dac <memp_malloc_fn>
  1106e4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  1106e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1106ec:	e3530000 	cmp	r3, #0
  1106f0:	1a000001 	bne	1106fc <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  1106f4:	e3a030cb 	mov	r3, #203	; 0xcb
  1106f8:	ea000044 	b	110810 <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  1106fc:	e51b200c 	ldr	r2, [fp, #-12]
  110700:	e3a01000 	mov	r1, #0
  110704:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110708:	eb00c215 	bl	140f64 <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  11070c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110710:	e2833020 	add	r3, r3, #32
  110714:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11071c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110720:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  110724:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110728:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  11072c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110730:	e3a02002 	mov	r2, #2
  110734:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  110738:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11073c:	e3a02010 	mov	r2, #16
  110740:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  110744:	e51b3008 	ldr	r3, [fp, #-8]
  110748:	e6ff3073 	uxth	r3, r3
  11074c:	e1a00003 	mov	r0, r3
  110750:	eb0016d4 	bl	1162a8 <lwip_htons>
  110754:	e1a03000 	mov	r3, r0
  110758:	e1a02003 	mov	r2, r3
  11075c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110760:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  110764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110768:	e3a02002 	mov	r2, #2
  11076c:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110770:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110774:	e3530000 	cmp	r3, #0
  110778:	0a000007 	beq	11079c <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  11077c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110780:	e5932008 	ldr	r2, [r3, #8]
  110784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110788:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  11078c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110790:	e593200c 	ldr	r2, [r3, #12]
  110794:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110798:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  11079c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1107a0:	e3530000 	cmp	r3, #0
  1107a4:	0a00000f 	beq	1107e8 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  1107a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107ac:	e2832030 	add	r2, r3, #48	; 0x30
  1107b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107b4:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  1107b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107bc:	e5933018 	ldr	r3, [r3, #24]
  1107c0:	e51b2010 	ldr	r2, [fp, #-16]
  1107c4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  1107c8:	e1a00003 	mov	r0, r3
  1107cc:	eb00c0ac 	bl	140a84 <memcpy>
    ai->ai_canonname[namelen] = 0;
  1107d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107d4:	e5932018 	ldr	r2, [r3, #24]
  1107d8:	e51b3010 	ldr	r3, [fp, #-16]
  1107dc:	e0823003 	add	r3, r2, r3
  1107e0:	e3a02000 	mov	r2, #0
  1107e4:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  1107e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107ec:	e3a02010 	mov	r2, #16
  1107f0:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  1107f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1107fc:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  110800:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110804:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110808:	e5832000 	str	r2, [r3]

  return 0;
  11080c:	e3a03000 	mov	r3, #0
}
  110810:	e1a00003 	mov	r0, r3
  110814:	e24bd004 	sub	sp, fp, #4
  110818:	e8bd8800 	pop	{fp, pc}

0011081c <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  11081c:	e92d4810 	push	{r4, fp, lr}
  110820:	e28db008 	add	fp, sp, #8
  110824:	e24dd024 	sub	sp, sp, #36	; 0x24
  110828:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  11082c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110830:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  110834:	e51b3010 	ldr	r3, [fp, #-16]
  110838:	e5930004 	ldr	r0, [r3, #4]
  11083c:	e51b3010 	ldr	r3, [fp, #-16]
  110840:	e593c008 	ldr	ip, [r3, #8]
  110844:	e51b3010 	ldr	r3, [fp, #-16]
  110848:	e593e00c 	ldr	lr, [r3, #12]
  11084c:	e51b3010 	ldr	r3, [fp, #-16]
  110850:	e5934010 	ldr	r4, [r3, #16]
  110854:	e51b3010 	ldr	r3, [fp, #-16]
  110858:	e5933014 	ldr	r3, [r3, #20]
  11085c:	e51b2010 	ldr	r2, [fp, #-16]
  110860:	e5922018 	ldr	r2, [r2, #24]
  110864:	e51b1010 	ldr	r1, [fp, #-16]
  110868:	e591101c 	ldr	r1, [r1, #28]
  11086c:	e58d1008 	str	r1, [sp, #8]
  110870:	e58d2004 	str	r2, [sp, #4]
  110874:	e58d3000 	str	r3, [sp]
  110878:	e1a03004 	mov	r3, r4
  11087c:	e1a0200e 	mov	r2, lr
  110880:	e1a0100c 	mov	r1, ip
  110884:	eb0021ea 	bl	119034 <netif_add>
  110888:	e1a03000 	mov	r3, r0
  11088c:	e3530000 	cmp	r3, #0
  110890:	1a000001 	bne	11089c <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110894:	e3e0300b 	mvn	r3, #11
  110898:	ea000000 	b	1108a0 <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  11089c:	e3a03000 	mov	r3, #0
  }
}
  1108a0:	e1a00003 	mov	r0, r3
  1108a4:	e24bd008 	sub	sp, fp, #8
  1108a8:	e8bd8810 	pop	{r4, fp, pc}

001108ac <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  1108ac:	e92d4800 	push	{fp, lr}
  1108b0:	e28db004 	add	fp, sp, #4
  1108b4:	e24dd010 	sub	sp, sp, #16
  1108b8:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  1108bc:	e51b3010 	ldr	r3, [fp, #-16]
  1108c0:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  1108c4:	e51b3008 	ldr	r3, [fp, #-8]
  1108c8:	e5930004 	ldr	r0, [r3, #4]
  1108cc:	e51b3008 	ldr	r3, [fp, #-8]
  1108d0:	e5931008 	ldr	r1, [r3, #8]
  1108d4:	e51b3008 	ldr	r3, [fp, #-8]
  1108d8:	e593200c 	ldr	r2, [r3, #12]
  1108dc:	e51b3008 	ldr	r3, [fp, #-8]
  1108e0:	e5933010 	ldr	r3, [r3, #16]
  1108e4:	eb002238 	bl	1191cc <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  1108e8:	e3a03000 	mov	r3, #0
}
  1108ec:	e1a00003 	mov	r0, r3
  1108f0:	e24bd004 	sub	sp, fp, #4
  1108f4:	e8bd8800 	pop	{fp, pc}

001108f8 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  1108f8:	e92d4800 	push	{fp, lr}
  1108fc:	e28db004 	add	fp, sp, #4
  110900:	e24dd010 	sub	sp, sp, #16
  110904:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110908:	e51b3010 	ldr	r3, [fp, #-16]
  11090c:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110910:	e51b3008 	ldr	r3, [fp, #-8]
  110914:	e593300c 	ldr	r3, [r3, #12]
  110918:	e3530000 	cmp	r3, #0
  11091c:	0a000007 	beq	110940 <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110920:	e51b3008 	ldr	r3, [fp, #-8]
  110924:	e593300c 	ldr	r3, [r3, #12]
  110928:	e51b2008 	ldr	r2, [fp, #-8]
  11092c:	e5922004 	ldr	r2, [r2, #4]
  110930:	e1a00002 	mov	r0, r2
  110934:	e12fff33 	blx	r3
  110938:	e1a03000 	mov	r3, r0
  11093c:	ea000006 	b	11095c <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  110940:	e51b3008 	ldr	r3, [fp, #-8]
  110944:	e5933008 	ldr	r3, [r3, #8]
  110948:	e51b2008 	ldr	r2, [fp, #-8]
  11094c:	e5922004 	ldr	r2, [r2, #4]
  110950:	e1a00002 	mov	r0, r2
  110954:	e12fff33 	blx	r3
    return ERR_OK;
  110958:	e3a03000 	mov	r3, #0
  }
}
  11095c:	e1a00003 	mov	r0, r3
  110960:	e24bd004 	sub	sp, fp, #4
  110964:	e8bd8800 	pop	{fp, pc}

00110968 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  110968:	e92d4800 	push	{fp, lr}
  11096c:	e28db004 	add	fp, sp, #4
  110970:	e24dd038 	sub	sp, sp, #56	; 0x38
  110974:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110978:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  11097c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110980:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  110984:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110988:	e3530000 	cmp	r3, #0
  11098c:	1a000002 	bne	11099c <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110990:	e309363c 	movw	r3, #38460	; 0x963c
  110994:	e3403014 	movt	r3, #20
  110998:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  11099c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1109a0:	e3530000 	cmp	r3, #0
  1109a4:	1a000002 	bne	1109b4 <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  1109a8:	e309363c 	movw	r3, #38460	; 0x963c
  1109ac:	e3403014 	movt	r3, #20
  1109b0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  1109b4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1109b8:	e3530000 	cmp	r3, #0
  1109bc:	1a000002 	bne	1109cc <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  1109c0:	e309363c 	movw	r3, #38460	; 0x963c
  1109c4:	e3403014 	movt	r3, #20
  1109c8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  1109cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1109d0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  1109d4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1109d8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  1109dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1109e0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  1109e4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1109e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  1109ec:	e59b3004 	ldr	r3, [fp, #4]
  1109f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  1109f4:	e59b3008 	ldr	r3, [fp, #8]
  1109f8:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  1109fc:	e59b300c 	ldr	r3, [fp, #12]
  110a00:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  110a04:	e24b3028 	sub	r3, fp, #40	; 0x28
  110a08:	e1a01003 	mov	r1, r3
  110a0c:	e300081c 	movw	r0, #2076	; 0x81c
  110a10:	e3400011 	movt	r0, #17
  110a14:	eb001575 	bl	115ff0 <tcpip_api_call>
  110a18:	e1a03000 	mov	r3, r0
  110a1c:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110a20:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110a24:	e1a00003 	mov	r0, r3
  110a28:	e24bd004 	sub	sp, fp, #4
  110a2c:	e8bd8800 	pop	{fp, pc}

00110a30 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110a30:	e92d4800 	push	{fp, lr}
  110a34:	e28db004 	add	fp, sp, #4
  110a38:	e24dd038 	sub	sp, sp, #56	; 0x38
  110a3c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110a40:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110a44:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110a48:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110a4c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a50:	e3530000 	cmp	r3, #0
  110a54:	1a000002 	bne	110a64 <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110a58:	e309363c 	movw	r3, #38460	; 0x963c
  110a5c:	e3403014 	movt	r3, #20
  110a60:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110a64:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a68:	e3530000 	cmp	r3, #0
  110a6c:	1a000002 	bne	110a7c <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110a70:	e309363c 	movw	r3, #38460	; 0x963c
  110a74:	e3403014 	movt	r3, #20
  110a78:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110a7c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a80:	e3530000 	cmp	r3, #0
  110a84:	1a000002 	bne	110a94 <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110a88:	e309363c 	movw	r3, #38460	; 0x963c
  110a8c:	e3403014 	movt	r3, #20
  110a90:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110a94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110a98:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110a9c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110aa0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110aa4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110aa8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110aac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110ab0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110ab4:	e24b3028 	sub	r3, fp, #40	; 0x28
  110ab8:	e1a01003 	mov	r1, r3
  110abc:	e30008ac 	movw	r0, #2220	; 0x8ac
  110ac0:	e3400011 	movt	r0, #17
  110ac4:	eb001549 	bl	115ff0 <tcpip_api_call>
  110ac8:	e1a03000 	mov	r3, r0
  110acc:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110ad0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110ad4:	e1a00003 	mov	r0, r3
  110ad8:	e24bd004 	sub	sp, fp, #4
  110adc:	e8bd8800 	pop	{fp, pc}

00110ae0 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110ae0:	e92d4800 	push	{fp, lr}
  110ae4:	e28db004 	add	fp, sp, #4
  110ae8:	e24dd038 	sub	sp, sp, #56	; 0x38
  110aec:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110af0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110af4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110af8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110afc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110b00:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110b04:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110b08:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110b0c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110b10:	e24b3028 	sub	r3, fp, #40	; 0x28
  110b14:	e1a01003 	mov	r1, r3
  110b18:	e30008f8 	movw	r0, #2296	; 0x8f8
  110b1c:	e3400011 	movt	r0, #17
  110b20:	eb001532 	bl	115ff0 <tcpip_api_call>
  110b24:	e1a03000 	mov	r3, r0
  110b28:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110b2c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110b30:	e1a00003 	mov	r0, r3
  110b34:	e24bd004 	sub	sp, fp, #4
  110b38:	e8bd8800 	pop	{fp, pc}

00110b3c <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110b3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110b40:	e28db000 	add	fp, sp, #0
  110b44:	e24dd00c 	sub	sp, sp, #12
  110b48:	e50b0008 	str	r0, [fp, #-8]
  110b4c:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110b50:	e51b3008 	ldr	r3, [fp, #-8]
  110b54:	e2033008 	and	r3, r3, #8
  110b58:	e3530000 	cmp	r3, #0
  110b5c:	1a000007 	bne	110b80 <access_is_blocking+0x44>
  110b60:	e51b300c 	ldr	r3, [fp, #-12]
  110b64:	e5933000 	ldr	r3, [r3]
  110b68:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110b6c:	e2033002 	and	r3, r3, #2
  110b70:	e3530000 	cmp	r3, #0
  110b74:	1a000001 	bne	110b80 <access_is_blocking+0x44>
  110b78:	e3a03001 	mov	r3, #1
  110b7c:	ea000000 	b	110b84 <access_is_blocking+0x48>
  110b80:	e3a03000 	mov	r3, #0
}
  110b84:	e1a00003 	mov	r0, r3
  110b88:	e28bd000 	add	sp, fp, #0
  110b8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110b90:	e12fff1e 	bx	lr

00110b94 <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110b94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110b98:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110b9c:	e320f000 	nop	{0}
  110ba0:	e28bd000 	add	sp, fp, #0
  110ba4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110ba8:	e12fff1e 	bx	lr

00110bac <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110bac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110bb0:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110bb4:	e320f000 	nop	{0}
  110bb8:	e28bd000 	add	sp, fp, #0
  110bbc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110bc0:	e12fff1e 	bx	lr

00110bc4 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110bc4:	e92d4800 	push	{fp, lr}
  110bc8:	e28db004 	add	fp, sp, #4
  110bcc:	e24dd010 	sub	sp, sp, #16
  110bd0:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110bd4:	e51b3010 	ldr	r3, [fp, #-16]
  110bd8:	e3530000 	cmp	r3, #0
  110bdc:	ba000002 	blt	110bec <get_socket+0x28>
  110be0:	e51b3010 	ldr	r3, [fp, #-16]
  110be4:	e3530007 	cmp	r3, #7
  110be8:	da000005 	ble	110c04 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110bec:	eb009ff5 	bl	138bc8 <__errno_location>
  110bf0:	e1a02000 	mov	r2, r0
  110bf4:	e3a03009 	mov	r3, #9
  110bf8:	e5823000 	str	r3, [r2]
    return NULL;
  110bfc:	e3a03000 	mov	r3, #0
  110c00:	ea000011 	b	110c4c <get_socket+0x88>
  }

  sock = &sockets[s];
  110c04:	e51b3010 	ldr	r3, [fp, #-16]
  110c08:	e3a02014 	mov	r2, #20
  110c0c:	e0020392 	mul	r2, r2, r3
  110c10:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110c14:	e3403014 	movt	r3, #20
  110c18:	e0823003 	add	r3, r2, r3
  110c1c:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110c20:	e51b3008 	ldr	r3, [fp, #-8]
  110c24:	e5933000 	ldr	r3, [r3]
  110c28:	e3530000 	cmp	r3, #0
  110c2c:	1a000005 	bne	110c48 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110c30:	eb009fe4 	bl	138bc8 <__errno_location>
  110c34:	e1a02000 	mov	r2, r0
  110c38:	e3a03009 	mov	r3, #9
  110c3c:	e5823000 	str	r3, [r2]
    return NULL;
  110c40:	e3a03000 	mov	r3, #0
  110c44:	ea000000 	b	110c4c <get_socket+0x88>
  }

  return sock;
  110c48:	e51b3008 	ldr	r3, [fp, #-8]
}
  110c4c:	e1a00003 	mov	r0, r3
  110c50:	e24bd004 	sub	sp, fp, #4
  110c54:	e8bd8800 	pop	{fp, pc}

00110c58 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110c58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110c5c:	e28db000 	add	fp, sp, #0
  110c60:	e24dd00c 	sub	sp, sp, #12
  110c64:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110c68:	e51b3008 	ldr	r3, [fp, #-8]
  110c6c:	e3530000 	cmp	r3, #0
  110c70:	ba000002 	blt	110c80 <tryget_socket+0x28>
  110c74:	e51b3008 	ldr	r3, [fp, #-8]
  110c78:	e3530007 	cmp	r3, #7
  110c7c:	da000001 	ble	110c88 <tryget_socket+0x30>
    return NULL;
  110c80:	e3a03000 	mov	r3, #0
  110c84:	ea000010 	b	110ccc <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110c88:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110c8c:	e3403014 	movt	r3, #20
  110c90:	e51b2008 	ldr	r2, [fp, #-8]
  110c94:	e3a01014 	mov	r1, #20
  110c98:	e0020291 	mul	r2, r1, r2
  110c9c:	e0833002 	add	r3, r3, r2
  110ca0:	e5933000 	ldr	r3, [r3]
  110ca4:	e3530000 	cmp	r3, #0
  110ca8:	1a000001 	bne	110cb4 <tryget_socket+0x5c>
    return NULL;
  110cac:	e3a03000 	mov	r3, #0
  110cb0:	ea000005 	b	110ccc <tryget_socket+0x74>
  }
  return &sockets[s];
  110cb4:	e51b3008 	ldr	r3, [fp, #-8]
  110cb8:	e3a02014 	mov	r2, #20
  110cbc:	e0020392 	mul	r2, r2, r3
  110cc0:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110cc4:	e3403014 	movt	r3, #20
  110cc8:	e0823003 	add	r3, r2, r3
}
  110ccc:	e1a00003 	mov	r0, r3
  110cd0:	e28bd000 	add	sp, fp, #0
  110cd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110cd8:	e12fff1e 	bx	lr

00110cdc <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  110cdc:	e92d4800 	push	{fp, lr}
  110ce0:	e28db004 	add	fp, sp, #4
  110ce4:	e24dd008 	sub	sp, sp, #8
  110ce8:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  110cec:	e51b0008 	ldr	r0, [fp, #-8]
  110cf0:	ebffffd8 	bl	110c58 <tryget_socket>
  110cf4:	e1a03000 	mov	r3, r0
}
  110cf8:	e1a00003 	mov	r0, r3
  110cfc:	e24bd004 	sub	sp, fp, #4
  110d00:	e8bd8800 	pop	{fp, pc}

00110d04 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  110d04:	e92d4800 	push	{fp, lr}
  110d08:	e28db004 	add	fp, sp, #4
  110d0c:	e24dd010 	sub	sp, sp, #16
  110d10:	e50b0010 	str	r0, [fp, #-16]
  110d14:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110d18:	e3a03000 	mov	r3, #0
  110d1c:	e50b3008 	str	r3, [fp, #-8]
  110d20:	ea000063 	b	110eb4 <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  110d24:	ebffc544 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  110d28:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d2c:	e3403014 	movt	r3, #20
  110d30:	e51b2008 	ldr	r2, [fp, #-8]
  110d34:	e3a01014 	mov	r1, #20
  110d38:	e0020291 	mul	r2, r1, r2
  110d3c:	e0833002 	add	r3, r3, r2
  110d40:	e5933000 	ldr	r3, [r3]
  110d44:	e3530000 	cmp	r3, #0
  110d48:	1a000055 	bne	110ea4 <alloc_socket+0x1a0>
  110d4c:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d50:	e3403014 	movt	r3, #20
  110d54:	e51b2008 	ldr	r2, [fp, #-8]
  110d58:	e3a01014 	mov	r1, #20
  110d5c:	e0020291 	mul	r2, r1, r2
  110d60:	e0833002 	add	r3, r3, r2
  110d64:	e2833011 	add	r3, r3, #17
  110d68:	e5d33000 	ldrb	r3, [r3]
  110d6c:	e3530000 	cmp	r3, #0
  110d70:	1a00004b 	bne	110ea4 <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  110d74:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d78:	e3403014 	movt	r3, #20
  110d7c:	e51b2008 	ldr	r2, [fp, #-8]
  110d80:	e3a01014 	mov	r1, #20
  110d84:	e0020291 	mul	r2, r1, r2
  110d88:	e0833002 	add	r3, r3, r2
  110d8c:	e51b2010 	ldr	r2, [fp, #-16]
  110d90:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  110d94:	ebffc52e 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  110d98:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d9c:	e3403014 	movt	r3, #20
  110da0:	e51b2008 	ldr	r2, [fp, #-8]
  110da4:	e3a01014 	mov	r1, #20
  110da8:	e0020291 	mul	r2, r1, r2
  110dac:	e0833002 	add	r3, r3, r2
  110db0:	e2833004 	add	r3, r3, #4
  110db4:	e3a02000 	mov	r2, #0
  110db8:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  110dbc:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110dc0:	e3403014 	movt	r3, #20
  110dc4:	e51b2008 	ldr	r2, [fp, #-8]
  110dc8:	e3a01014 	mov	r1, #20
  110dcc:	e0020291 	mul	r2, r1, r2
  110dd0:	e0833002 	add	r3, r3, r2
  110dd4:	e2833008 	add	r3, r3, #8
  110dd8:	e3a02000 	mov	r2, #0
  110ddc:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  110de0:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110de4:	e3403014 	movt	r3, #20
  110de8:	e51b2008 	ldr	r2, [fp, #-8]
  110dec:	e3a01014 	mov	r1, #20
  110df0:	e0020291 	mul	r2, r1, r2
  110df4:	e0833002 	add	r3, r3, r2
  110df8:	e283300a 	add	r3, r3, #10
  110dfc:	e3a02000 	mov	r2, #0
  110e00:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  110e04:	e51b3010 	ldr	r3, [fp, #-16]
  110e08:	e5933000 	ldr	r3, [r3]
  110e0c:	e20330f0 	and	r3, r3, #240	; 0xf0
  110e10:	e3530010 	cmp	r3, #16
  110e14:	1a000002 	bne	110e24 <alloc_socket+0x120>
  110e18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110e1c:	e3530000 	cmp	r3, #0
  110e20:	0a000001 	beq	110e2c <alloc_socket+0x128>
  110e24:	e3a03001 	mov	r3, #1
  110e28:	ea000000 	b	110e30 <alloc_socket+0x12c>
  110e2c:	e3a03000 	mov	r3, #0
  110e30:	e6ff2073 	uxth	r2, r3
  110e34:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e38:	e3403014 	movt	r3, #20
  110e3c:	e51b1008 	ldr	r1, [fp, #-8]
  110e40:	e3a00014 	mov	r0, #20
  110e44:	e0010190 	mul	r1, r0, r1
  110e48:	e0833001 	add	r3, r3, r1
  110e4c:	e283300c 	add	r3, r3, #12
  110e50:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  110e54:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e58:	e3403014 	movt	r3, #20
  110e5c:	e51b2008 	ldr	r2, [fp, #-8]
  110e60:	e3a01014 	mov	r1, #20
  110e64:	e0020291 	mul	r2, r1, r2
  110e68:	e0833002 	add	r3, r3, r2
  110e6c:	e283300e 	add	r3, r3, #14
  110e70:	e3a02000 	mov	r2, #0
  110e74:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  110e78:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e7c:	e3403014 	movt	r3, #20
  110e80:	e51b2008 	ldr	r2, [fp, #-8]
  110e84:	e3a01014 	mov	r1, #20
  110e88:	e0020291 	mul	r2, r1, r2
  110e8c:	e0833002 	add	r3, r3, r2
  110e90:	e2833010 	add	r3, r3, #16
  110e94:	e3a02000 	mov	r2, #0
  110e98:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  110e9c:	e51b3008 	ldr	r3, [fp, #-8]
  110ea0:	ea000007 	b	110ec4 <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  110ea4:	ebffc4ea 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110ea8:	e51b3008 	ldr	r3, [fp, #-8]
  110eac:	e2833001 	add	r3, r3, #1
  110eb0:	e50b3008 	str	r3, [fp, #-8]
  110eb4:	e51b3008 	ldr	r3, [fp, #-8]
  110eb8:	e3530007 	cmp	r3, #7
  110ebc:	daffff98 	ble	110d24 <alloc_socket+0x20>
  }
  return -1;
  110ec0:	e3e03000 	mvn	r3, #0
}
  110ec4:	e1a00003 	mov	r0, r3
  110ec8:	e24bd004 	sub	sp, fp, #4
  110ecc:	e8bd8800 	pop	{fp, pc}

00110ed0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  110ed0:	e92d4800 	push	{fp, lr}
  110ed4:	e28db004 	add	fp, sp, #4
  110ed8:	e24dd010 	sub	sp, sp, #16
  110edc:	e50b0010 	str	r0, [fp, #-16]
  110ee0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  110ee4:	e51b3010 	ldr	r3, [fp, #-16]
  110ee8:	e5933004 	ldr	r3, [r3, #4]
  110eec:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  110ef0:	e51b3010 	ldr	r3, [fp, #-16]
  110ef4:	e3a02000 	mov	r2, #0
  110ef8:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  110efc:	e51b3010 	ldr	r3, [fp, #-16]
  110f00:	e3a02000 	mov	r2, #0
  110f04:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  110f08:	e51b3010 	ldr	r3, [fp, #-16]
  110f0c:	e3a02000 	mov	r2, #0
  110f10:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  110f14:	ebffc4c8 	bl	10223c <rt_enter_critical>
  110f18:	e51b3010 	ldr	r3, [fp, #-16]
  110f1c:	e3a02000 	mov	r2, #0
  110f20:	e5832000 	str	r2, [r3]
  110f24:	ebffc4ca 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  110f28:	e51b3008 	ldr	r3, [fp, #-8]
  110f2c:	e3530000 	cmp	r3, #0
  110f30:	0a000007 	beq	110f54 <free_socket+0x84>
    if (is_tcp) {
  110f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110f38:	e3530000 	cmp	r3, #0
  110f3c:	0a000002 	beq	110f4c <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  110f40:	e51b0008 	ldr	r0, [fp, #-8]
  110f44:	eb00270e 	bl	11ab84 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  110f48:	ea000001 	b	110f54 <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  110f4c:	e51b0008 	ldr	r0, [fp, #-8]
  110f50:	ebfffb1e 	bl	10fbd0 <netbuf_delete>
}
  110f54:	e320f000 	nop	{0}
  110f58:	e24bd004 	sub	sp, fp, #4
  110f5c:	e8bd8800 	pop	{fp, pc}

00110f60 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  110f60:	e92d4810 	push	{r4, fp, lr}
  110f64:	e28db008 	add	fp, sp, #8
  110f68:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  110f6c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  110f70:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  110f74:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  110f78:	e3a03000 	mov	r3, #0
  110f7c:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  110f80:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  110f84:	ebffff0e 	bl	110bc4 <get_socket>
  110f88:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  110f8c:	e51b3010 	ldr	r3, [fp, #-16]
  110f90:	e3530000 	cmp	r3, #0
  110f94:	1a000001 	bne	110fa0 <lwip_accept+0x40>
    return -1;
  110f98:	e3e03000 	mvn	r3, #0
  110f9c:	ea0000fa 	b	11138c <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  110fa0:	e51b3010 	ldr	r3, [fp, #-16]
  110fa4:	e5933000 	ldr	r3, [r3]
  110fa8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110fac:	e2033002 	and	r3, r3, #2
  110fb0:	e3530000 	cmp	r3, #0
  110fb4:	0a000009 	beq	110fe0 <lwip_accept+0x80>
  110fb8:	e51b3010 	ldr	r3, [fp, #-16]
  110fbc:	e1d330fa 	ldrsh	r3, [r3, #10]
  110fc0:	e3530000 	cmp	r3, #0
  110fc4:	ca000005 	bgt	110fe0 <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  110fc8:	eb009efe 	bl	138bc8 <__errno_location>
  110fcc:	e1a02000 	mov	r2, r0
  110fd0:	e3a0300b 	mov	r3, #11
  110fd4:	e5823000 	str	r3, [r2]
    return -1;
  110fd8:	e3e03000 	mvn	r3, #0
  110fdc:	ea0000ea 	b	11138c <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  110fe0:	e51b3010 	ldr	r3, [fp, #-16]
  110fe4:	e5933000 	ldr	r3, [r3]
  110fe8:	e24b2038 	sub	r2, fp, #56	; 0x38
  110fec:	e1a01002 	mov	r1, r2
  110ff0:	e1a00003 	mov	r0, r3
  110ff4:	ebffe924 	bl	10b48c <netconn_accept>
  110ff8:	e1a03000 	mov	r3, r0
  110ffc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  111000:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111004:	e3530000 	cmp	r3, #0
  111008:	0a000035 	beq	1110e4 <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11100c:	e51b3010 	ldr	r3, [fp, #-16]
  111010:	e5933000 	ldr	r3, [r3]
  111014:	e5933000 	ldr	r3, [r3]
  111018:	e20330f0 	and	r3, r3, #240	; 0xf0
  11101c:	e3530010 	cmp	r3, #16
  111020:	0a00000d 	beq	11105c <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  111024:	e3a0305f 	mov	r3, #95	; 0x5f
  111028:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11102c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111030:	e6ef2073 	uxtb	r2, r3
  111034:	e51b3010 	ldr	r3, [fp, #-16]
  111038:	e5c32010 	strb	r2, [r3, #16]
  11103c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111040:	e3530000 	cmp	r3, #0
  111044:	0a000024 	beq	1110dc <lwip_accept+0x17c>
  111048:	eb009ede 	bl	138bc8 <__errno_location>
  11104c:	e1a02000 	mov	r2, r0
  111050:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111054:	e5823000 	str	r3, [r2]
  111058:	ea00001f 	b	1110dc <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  11105c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111060:	e373000f 	cmn	r3, #15
  111064:	1a00000d 	bne	1110a0 <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  111068:	e3a03016 	mov	r3, #22
  11106c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111070:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111074:	e6ef2073 	uxtb	r2, r3
  111078:	e51b3010 	ldr	r3, [fp, #-16]
  11107c:	e5c32010 	strb	r2, [r3, #16]
  111080:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111084:	e3530000 	cmp	r3, #0
  111088:	0a000013 	beq	1110dc <lwip_accept+0x17c>
  11108c:	eb009ecd 	bl	138bc8 <__errno_location>
  111090:	e1a02000 	mov	r2, r0
  111094:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111098:	e5823000 	str	r3, [r2]
  11109c:	ea00000e 	b	1110dc <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  1110a0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1110a4:	e1a00003 	mov	r0, r3
  1110a8:	ebfffa9d 	bl	10fb24 <err_to_errno>
  1110ac:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  1110b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1110b4:	e6ef2073 	uxtb	r2, r3
  1110b8:	e51b3010 	ldr	r3, [fp, #-16]
  1110bc:	e5c32010 	strb	r2, [r3, #16]
  1110c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1110c4:	e3530000 	cmp	r3, #0
  1110c8:	0a000003 	beq	1110dc <lwip_accept+0x17c>
  1110cc:	eb009ebd 	bl	138bc8 <__errno_location>
  1110d0:	e1a02000 	mov	r2, r0
  1110d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1110d8:	e5823000 	str	r3, [r2]
    }
    return -1;
  1110dc:	e3e03000 	mvn	r3, #0
  1110e0:	ea0000a9 	b	11138c <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  1110e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1110e8:	e3530000 	cmp	r3, #0
  1110ec:	1a000006 	bne	11110c <lwip_accept+0x1ac>
  1110f0:	e3060a88 	movw	r0, #27272	; 0x6a88
  1110f4:	e3400014 	movt	r0, #20
  1110f8:	ebffc805 	bl	103114 <rt_kprintf>
  1110fc:	e300120a 	movw	r1, #522	; 0x20a
  111100:	e3060a98 	movw	r0, #27288	; 0x6a98
  111104:	e3400014 	movt	r0, #20
  111108:	ebffe721 	bl	10ad94 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  11110c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111110:	e3a01001 	mov	r1, #1
  111114:	e1a00003 	mov	r0, r3
  111118:	ebfffef9 	bl	110d04 <alloc_socket>
  11111c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  111120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111124:	e3730001 	cmn	r3, #1
  111128:	1a000011 	bne	111174 <lwip_accept+0x214>
    netconn_delete(newconn);
  11112c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111130:	e1a00003 	mov	r0, r3
  111134:	ebffe7e6 	bl	10b0d4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  111138:	e3a03017 	mov	r3, #23
  11113c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111140:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111144:	e6ef2073 	uxtb	r2, r3
  111148:	e51b3010 	ldr	r3, [fp, #-16]
  11114c:	e5c32010 	strb	r2, [r3, #16]
  111150:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111154:	e3530000 	cmp	r3, #0
  111158:	0a000003 	beq	11116c <lwip_accept+0x20c>
  11115c:	eb009e99 	bl	138bc8 <__errno_location>
  111160:	e1a02000 	mov	r2, r0
  111164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111168:	e5823000 	str	r3, [r2]
    return -1;
  11116c:	e3e03000 	mvn	r3, #0
  111170:	ea000085 	b	11138c <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  111174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111178:	e3530000 	cmp	r3, #0
  11117c:	ba000002 	blt	11118c <lwip_accept+0x22c>
  111180:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111184:	e3530007 	cmp	r3, #7
  111188:	da000006 	ble	1111a8 <lwip_accept+0x248>
  11118c:	e3060ac8 	movw	r0, #27336	; 0x6ac8
  111190:	e3400014 	movt	r0, #20
  111194:	ebffc7de 	bl	103114 <rt_kprintf>
  111198:	e3001212 	movw	r1, #530	; 0x212
  11119c:	e3060a98 	movw	r0, #27288	; 0x6a98
  1111a0:	e3400014 	movt	r0, #20
  1111a4:	ebffe6fa 	bl	10ad94 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  1111a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1111ac:	e3a02014 	mov	r2, #20
  1111b0:	e0020392 	mul	r2, r2, r3
  1111b4:	e30d3b78 	movw	r3, #56184	; 0xdb78
  1111b8:	e3403014 	movt	r3, #20
  1111bc:	e0823003 	add	r3, r2, r3
  1111c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  1111c4:	ebffc41c 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  1111c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1111cc:	e1d330fa 	ldrsh	r3, [r3, #10]
  1111d0:	e6ff2073 	uxth	r2, r3
  1111d4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1111d8:	e593301c 	ldr	r3, [r3, #28]
  1111dc:	e6ff3073 	uxth	r3, r3
  1111e0:	e0423003 	sub	r3, r2, r3
  1111e4:	e6ff3073 	uxth	r3, r3
  1111e8:	e2433001 	sub	r3, r3, #1
  1111ec:	e6ff3073 	uxth	r3, r3
  1111f0:	e6bf2073 	sxth	r2, r3
  1111f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1111f8:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  1111fc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111200:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111204:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111208:	ebffc411 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  11120c:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  111210:	e3530000 	cmp	r3, #0
  111214:	0a00004e 	beq	111354 <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111218:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  11121c:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111220:	e24b103c 	sub	r1, fp, #60	; 0x3c
  111224:	e3a03000 	mov	r3, #0
  111228:	ebffe7c9 	bl	10b154 <netconn_getaddr>
  11122c:	e1a03000 	mov	r3, r0
  111230:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  111234:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111238:	e3530000 	cmp	r3, #0
  11123c:	0a000016 	beq	11129c <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  111240:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111244:	e1a00003 	mov	r0, r3
  111248:	ebffe7a1 	bl	10b0d4 <netconn_delete>
      free_socket(nsock, 1);
  11124c:	e3a01001 	mov	r1, #1
  111250:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  111254:	ebffff1d 	bl	110ed0 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  111258:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11125c:	e1a00003 	mov	r0, r3
  111260:	ebfffa2f 	bl	10fb24 <err_to_errno>
  111264:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111268:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11126c:	e6ef2073 	uxtb	r2, r3
  111270:	e51b3010 	ldr	r3, [fp, #-16]
  111274:	e5c32010 	strb	r2, [r3, #16]
  111278:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11127c:	e3530000 	cmp	r3, #0
  111280:	0a000003 	beq	111294 <lwip_accept+0x334>
  111284:	eb009e4f 	bl	138bc8 <__errno_location>
  111288:	e1a02000 	mov	r2, r0
  11128c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111290:	e5823000 	str	r3, [r2]
      return -1;
  111294:	e3e03000 	mvn	r3, #0
  111298:	ea00003b 	b	11138c <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  11129c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1112a0:	e3530000 	cmp	r3, #0
  1112a4:	1a000006 	bne	1112c4 <lwip_accept+0x364>
  1112a8:	e3060ae0 	movw	r0, #27360	; 0x6ae0
  1112ac:	e3400014 	movt	r0, #20
  1112b0:	ebffc797 	bl	103114 <rt_kprintf>
  1112b4:	e300122e 	movw	r1, #558	; 0x22e
  1112b8:	e3060a98 	movw	r0, #27288	; 0x6a98
  1112bc:	e3400014 	movt	r0, #20
  1112c0:	ebffe6b3 	bl	10ad94 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  1112c4:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112c8:	e3a02010 	mov	r2, #16
  1112cc:	e5c32000 	strb	r2, [r3]
  1112d0:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112d4:	e3a02002 	mov	r2, #2
  1112d8:	e5c32001 	strb	r2, [r3, #1]
  1112dc:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  1112e0:	e24b4050 	sub	r4, fp, #80	; 0x50
  1112e4:	e1a00003 	mov	r0, r3
  1112e8:	eb0013ee 	bl	1162a8 <lwip_htons>
  1112ec:	e1a03000 	mov	r3, r0
  1112f0:	e1c430b2 	strh	r3, [r4, #2]
  1112f4:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112f8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1112fc:	e5832004 	str	r2, [r3, #4]
  111300:	e24b3050 	sub	r3, fp, #80	; 0x50
  111304:	e2833008 	add	r3, r3, #8
  111308:	e3a02008 	mov	r2, #8
  11130c:	e3a01000 	mov	r1, #0
  111310:	e1a00003 	mov	r0, r3
  111314:	eb00bf12 	bl	140f64 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111318:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  11131c:	e5933000 	ldr	r3, [r3]
  111320:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  111324:	e1530002 	cmp	r3, r2
  111328:	9a000003 	bls	11133c <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  11132c:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  111330:	e1a02003 	mov	r2, r3
  111334:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111338:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  11133c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111340:	e5932000 	ldr	r2, [r3]
  111344:	e24b3050 	sub	r3, fp, #80	; 0x50
  111348:	e1a01003 	mov	r1, r3
  11134c:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  111350:	eb00bdcb 	bl	140a84 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  111354:	e3a03000 	mov	r3, #0
  111358:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  11135c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111360:	e6ef2073 	uxtb	r2, r3
  111364:	e51b3010 	ldr	r3, [fp, #-16]
  111368:	e5c32010 	strb	r2, [r3, #16]
  11136c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111370:	e3530000 	cmp	r3, #0
  111374:	0a000003 	beq	111388 <lwip_accept+0x428>
  111378:	eb009e12 	bl	138bc8 <__errno_location>
  11137c:	e1a02000 	mov	r2, r0
  111380:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111384:	e5823000 	str	r3, [r2]
  return newsock;
  111388:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  11138c:	e1a00003 	mov	r0, r3
  111390:	e24bd008 	sub	sp, fp, #8
  111394:	e8bd8810 	pop	{r4, fp, pc}

00111398 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  111398:	e92d4800 	push	{fp, lr}
  11139c:	e28db004 	add	fp, sp, #4
  1113a0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1113a4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1113a8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1113ac:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  1113b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1113b4:	ebfffe02 	bl	110bc4 <get_socket>
  1113b8:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  1113bc:	e51b3008 	ldr	r3, [fp, #-8]
  1113c0:	e3530000 	cmp	r3, #0
  1113c4:	1a000007 	bne	1113e8 <lwip_bind+0x50>
    printf("****%s %d\n", __FILE__, __LINE__);
  1113c8:	e300224b 	movw	r2, #587	; 0x24b
  1113cc:	e3061a98 	movw	r1, #27288	; 0x6a98
  1113d0:	e3401014 	movt	r1, #20
  1113d4:	e3060afc 	movw	r0, #27388	; 0x6afc
  1113d8:	e3400014 	movt	r0, #20
  1113dc:	eb00b3b1 	bl	13e2a8 <printf>
    return -1;
  1113e0:	e3e03000 	mvn	r3, #0
  1113e4:	ea00005a 	b	111554 <lwip_bind+0x1bc>
    printf("****%s %d\n", __FILE__, __LINE__);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  1113e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1113ec:	e3530010 	cmp	r3, #16
  1113f0:	1a000007 	bne	111414 <lwip_bind+0x7c>
  1113f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1113f8:	e5d33001 	ldrb	r3, [r3, #1]
  1113fc:	e3530002 	cmp	r3, #2
  111400:	1a000003 	bne	111414 <lwip_bind+0x7c>
  111404:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111408:	e2033003 	and	r3, r3, #3
  11140c:	e3530000 	cmp	r3, #0
  111410:	0a000016 	beq	111470 <lwip_bind+0xd8>
  111414:	e3060b08 	movw	r0, #27400	; 0x6b08
  111418:	e3400014 	movt	r0, #20
  11141c:	ebffc73c 	bl	103114 <rt_kprintf>
  111420:	e3001259 	movw	r1, #601	; 0x259
  111424:	e3060a98 	movw	r0, #27288	; 0x6a98
  111428:	e3400014 	movt	r0, #20
  11142c:	ebffe658 	bl	10ad94 <sys_arch_assert>
  111430:	e3e0000f 	mvn	r0, #15
  111434:	ebfff9ba 	bl	10fb24 <err_to_errno>
  111438:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11143c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111440:	e6ef2073 	uxtb	r2, r3
  111444:	e51b3008 	ldr	r3, [fp, #-8]
  111448:	e5c32010 	strb	r2, [r3, #16]
  11144c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111450:	e3530000 	cmp	r3, #0
  111454:	0a000003 	beq	111468 <lwip_bind+0xd0>
  111458:	eb009dda 	bl	138bc8 <__errno_location>
  11145c:	e1a02000 	mov	r2, r0
  111460:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111464:	e5823000 	str	r3, [r2]
  111468:	e3e03000 	mvn	r3, #0
  11146c:	ea000038 	b	111554 <lwip_bind+0x1bc>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  111470:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111474:	e5933004 	ldr	r3, [r3, #4]
  111478:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11147c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111480:	e1d330b2 	ldrh	r3, [r3, #2]
  111484:	e1a00003 	mov	r0, r3
  111488:	eb001386 	bl	1162a8 <lwip_htons>
  11148c:	e1a03000 	mov	r3, r0
  111490:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  111494:	e51b3008 	ldr	r3, [fp, #-8]
  111498:	e5933000 	ldr	r3, [r3]
  11149c:	e15b20ba 	ldrh	r2, [fp, #-10]
  1114a0:	e24b101c 	sub	r1, fp, #28
  1114a4:	e1a00003 	mov	r0, r3
  1114a8:	ebffe767 	bl	10b24c <netconn_bind>
  1114ac:	e1a03000 	mov	r3, r0
  1114b0:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  1114b4:	e15b30db 	ldrsb	r3, [fp, #-11]
  1114b8:	e3530000 	cmp	r3, #0
  1114bc:	0a000016 	beq	11151c <lwip_bind+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  1114c0:	e15b30db 	ldrsb	r3, [fp, #-11]
  1114c4:	e1a00003 	mov	r0, r3
  1114c8:	ebfff995 	bl	10fb24 <err_to_errno>
  1114cc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1114d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1114d4:	e6ef2073 	uxtb	r2, r3
  1114d8:	e51b3008 	ldr	r3, [fp, #-8]
  1114dc:	e5c32010 	strb	r2, [r3, #16]
  1114e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1114e4:	e3530000 	cmp	r3, #0
  1114e8:	0a000003 	beq	1114fc <lwip_bind+0x164>
  1114ec:	eb009db5 	bl	138bc8 <__errno_location>
  1114f0:	e1a02000 	mov	r2, r0
  1114f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1114f8:	e5823000 	str	r3, [r2]
    printf("****%s %d\n", __FILE__, __LINE__);
  1114fc:	e300226e 	movw	r2, #622	; 0x26e
  111500:	e3061a98 	movw	r1, #27288	; 0x6a98
  111504:	e3401014 	movt	r1, #20
  111508:	e3060afc 	movw	r0, #27388	; 0x6afc
  11150c:	e3400014 	movt	r0, #20
  111510:	eb00b364 	bl	13e2a8 <printf>
    return -1;
  111514:	e3e03000 	mvn	r3, #0
  111518:	ea00000d 	b	111554 <lwip_bind+0x1bc>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  11151c:	e3a03000 	mov	r3, #0
  111520:	e50b3010 	str	r3, [fp, #-16]
  111524:	e51b3010 	ldr	r3, [fp, #-16]
  111528:	e6ef2073 	uxtb	r2, r3
  11152c:	e51b3008 	ldr	r3, [fp, #-8]
  111530:	e5c32010 	strb	r2, [r3, #16]
  111534:	e51b3010 	ldr	r3, [fp, #-16]
  111538:	e3530000 	cmp	r3, #0
  11153c:	0a000003 	beq	111550 <lwip_bind+0x1b8>
  111540:	eb009da0 	bl	138bc8 <__errno_location>
  111544:	e1a02000 	mov	r2, r0
  111548:	e51b3010 	ldr	r3, [fp, #-16]
  11154c:	e5823000 	str	r3, [r2]
  return 0;
  111550:	e3a03000 	mov	r3, #0
}
  111554:	e1a00003 	mov	r0, r3
  111558:	e24bd004 	sub	sp, fp, #4
  11155c:	e8bd8800 	pop	{fp, pc}

00111560 <lwip_close>:

int
lwip_close(int s)
{
  111560:	e92d4800 	push	{fp, lr}
  111564:	e28db004 	add	fp, sp, #4
  111568:	e24dd018 	sub	sp, sp, #24
  11156c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  111570:	e3a03000 	mov	r3, #0
  111574:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  111578:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11157c:	ebfffd90 	bl	110bc4 <get_socket>
  111580:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  111584:	e51b300c 	ldr	r3, [fp, #-12]
  111588:	e3530000 	cmp	r3, #0
  11158c:	1a000001 	bne	111598 <lwip_close+0x38>
    return -1;
  111590:	e3e03000 	mvn	r3, #0
  111594:	ea000038 	b	11167c <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  111598:	e51b300c 	ldr	r3, [fp, #-12]
  11159c:	e5933000 	ldr	r3, [r3]
  1115a0:	e3530000 	cmp	r3, #0
  1115a4:	0a000009 	beq	1115d0 <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  1115a8:	e51b300c 	ldr	r3, [fp, #-12]
  1115ac:	e5933000 	ldr	r3, [r3]
  1115b0:	e5933000 	ldr	r3, [r3]
  1115b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1115b8:	e3530010 	cmp	r3, #16
  1115bc:	03a03001 	moveq	r3, #1
  1115c0:	13a03000 	movne	r3, #0
  1115c4:	e6ef3073 	uxtb	r3, r3
  1115c8:	e50b3008 	str	r3, [fp, #-8]
  1115cc:	ea00000a 	b	1115fc <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  1115d0:	e51b300c 	ldr	r3, [fp, #-12]
  1115d4:	e5933004 	ldr	r3, [r3, #4]
  1115d8:	e3530000 	cmp	r3, #0
  1115dc:	0a000006 	beq	1115fc <lwip_close+0x9c>
  1115e0:	e3060b24 	movw	r0, #27428	; 0x6b24
  1115e4:	e3400014 	movt	r0, #20
  1115e8:	ebffc6c9 	bl	103114 <rt_kprintf>
  1115ec:	e3a01fa2 	mov	r1, #648	; 0x288
  1115f0:	e3060a98 	movw	r0, #27288	; 0x6a98
  1115f4:	e3400014 	movt	r0, #20
  1115f8:	ebffe5e5 	bl	10ad94 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  1115fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111600:	eb001126 	bl	115aa0 <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  111604:	e51b300c 	ldr	r3, [fp, #-12]
  111608:	e5933000 	ldr	r3, [r3]
  11160c:	e1a00003 	mov	r0, r3
  111610:	ebffe6af 	bl	10b0d4 <netconn_delete>
  111614:	e1a03000 	mov	r3, r0
  111618:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  11161c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111620:	e3530000 	cmp	r3, #0
  111624:	0a000010 	beq	11166c <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  111628:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11162c:	e1a00003 	mov	r0, r3
  111630:	ebfff93b 	bl	10fb24 <err_to_errno>
  111634:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111638:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11163c:	e6ef2073 	uxtb	r2, r3
  111640:	e51b300c 	ldr	r3, [fp, #-12]
  111644:	e5c32010 	strb	r2, [r3, #16]
  111648:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11164c:	e3530000 	cmp	r3, #0
  111650:	0a000003 	beq	111664 <lwip_close+0x104>
  111654:	eb009d5b 	bl	138bc8 <__errno_location>
  111658:	e1a02000 	mov	r2, r0
  11165c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111660:	e5823000 	str	r3, [r2]
    return -1;
  111664:	e3e03000 	mvn	r3, #0
  111668:	ea000003 	b	11167c <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  11166c:	e51b1008 	ldr	r1, [fp, #-8]
  111670:	e51b000c 	ldr	r0, [fp, #-12]
  111674:	ebfffe15 	bl	110ed0 <free_socket>
  set_errno(0);
  return 0;
  111678:	e3a03000 	mov	r3, #0
}
  11167c:	e1a00003 	mov	r0, r3
  111680:	e24bd004 	sub	sp, fp, #4
  111684:	e8bd8800 	pop	{fp, pc}

00111688 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  111688:	e92d4800 	push	{fp, lr}
  11168c:	e28db004 	add	fp, sp, #4
  111690:	e24dd030 	sub	sp, sp, #48	; 0x30
  111694:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  111698:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11169c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  1116a0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1116a4:	ebfffd46 	bl	110bc4 <get_socket>
  1116a8:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1116ac:	e51b300c 	ldr	r3, [fp, #-12]
  1116b0:	e3530000 	cmp	r3, #0
  1116b4:	1a000001 	bne	1116c0 <lwip_connect+0x38>
    return -1;
  1116b8:	e3e03000 	mvn	r3, #0
  1116bc:	ea000063 	b	111850 <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  1116c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1116c4:	e5d33001 	ldrb	r3, [r3, #1]
  1116c8:	e3530000 	cmp	r3, #0
  1116cc:	1a000006 	bne	1116ec <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  1116d0:	e51b300c 	ldr	r3, [fp, #-12]
  1116d4:	e5933000 	ldr	r3, [r3]
  1116d8:	e1a00003 	mov	r0, r3
  1116dc:	ebffe72e 	bl	10b39c <netconn_disconnect>
  1116e0:	e1a03000 	mov	r3, r0
  1116e4:	e54b3005 	strb	r3, [fp, #-5]
  1116e8:	ea000036 	b	1117c8 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  1116ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1116f0:	e3530010 	cmp	r3, #16
  1116f4:	1a00000b 	bne	111728 <lwip_connect+0xa0>
  1116f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1116fc:	e5d33001 	ldrb	r3, [r3, #1]
  111700:	e3530000 	cmp	r3, #0
  111704:	0a000003 	beq	111718 <lwip_connect+0x90>
  111708:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11170c:	e5d33001 	ldrb	r3, [r3, #1]
  111710:	e3530002 	cmp	r3, #2
  111714:	1a000003 	bne	111728 <lwip_connect+0xa0>
  111718:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11171c:	e2033003 	and	r3, r3, #3
  111720:	e3530000 	cmp	r3, #0
  111724:	0a000016 	beq	111784 <lwip_connect+0xfc>
  111728:	e3060b3c 	movw	r0, #27452	; 0x6b3c
  11172c:	e3400014 	movt	r0, #20
  111730:	ebffc677 	bl	103114 <rt_kprintf>
  111734:	e30012b7 	movw	r1, #695	; 0x2b7
  111738:	e3060a98 	movw	r0, #27288	; 0x6a98
  11173c:	e3400014 	movt	r0, #20
  111740:	ebffe593 	bl	10ad94 <sys_arch_assert>
  111744:	e3e0000f 	mvn	r0, #15
  111748:	ebfff8f5 	bl	10fb24 <err_to_errno>
  11174c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111750:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111754:	e6ef2073 	uxtb	r2, r3
  111758:	e51b300c 	ldr	r3, [fp, #-12]
  11175c:	e5c32010 	strb	r2, [r3, #16]
  111760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111764:	e3530000 	cmp	r3, #0
  111768:	0a000003 	beq	11177c <lwip_connect+0xf4>
  11176c:	eb009d15 	bl	138bc8 <__errno_location>
  111770:	e1a02000 	mov	r2, r0
  111774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111778:	e5823000 	str	r3, [r2]
  11177c:	e3e03000 	mvn	r3, #0
  111780:	ea000032 	b	111850 <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  111784:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111788:	e5933004 	ldr	r3, [r3, #4]
  11178c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111790:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111794:	e1d330b2 	ldrh	r3, [r3, #2]
  111798:	e1a00003 	mov	r0, r3
  11179c:	eb0012c1 	bl	1162a8 <lwip_htons>
  1117a0:	e1a03000 	mov	r3, r0
  1117a4:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  1117a8:	e51b300c 	ldr	r3, [fp, #-12]
  1117ac:	e5933000 	ldr	r3, [r3]
  1117b0:	e15b20be 	ldrh	r2, [fp, #-14]
  1117b4:	e24b1020 	sub	r1, fp, #32
  1117b8:	e1a00003 	mov	r0, r3
  1117bc:	ebffe6cc 	bl	10b2f4 <netconn_connect>
  1117c0:	e1a03000 	mov	r3, r0
  1117c4:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  1117c8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1117cc:	e3530000 	cmp	r3, #0
  1117d0:	0a000010 	beq	111818 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  1117d4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1117d8:	e1a00003 	mov	r0, r3
  1117dc:	ebfff8d0 	bl	10fb24 <err_to_errno>
  1117e0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1117e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1117e8:	e6ef2073 	uxtb	r2, r3
  1117ec:	e51b300c 	ldr	r3, [fp, #-12]
  1117f0:	e5c32010 	strb	r2, [r3, #16]
  1117f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1117f8:	e3530000 	cmp	r3, #0
  1117fc:	0a000003 	beq	111810 <lwip_connect+0x188>
  111800:	eb009cf0 	bl	138bc8 <__errno_location>
  111804:	e1a02000 	mov	r2, r0
  111808:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11180c:	e5823000 	str	r3, [r2]
    return -1;
  111810:	e3e03000 	mvn	r3, #0
  111814:	ea00000d 	b	111850 <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111818:	e3a03000 	mov	r3, #0
  11181c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111820:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111824:	e6ef2073 	uxtb	r2, r3
  111828:	e51b300c 	ldr	r3, [fp, #-12]
  11182c:	e5c32010 	strb	r2, [r3, #16]
  111830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111834:	e3530000 	cmp	r3, #0
  111838:	0a000003 	beq	11184c <lwip_connect+0x1c4>
  11183c:	eb009ce1 	bl	138bc8 <__errno_location>
  111840:	e1a02000 	mov	r2, r0
  111844:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111848:	e5823000 	str	r3, [r2]
  return 0;
  11184c:	e3a03000 	mov	r3, #0
}
  111850:	e1a00003 	mov	r0, r3
  111854:	e24bd004 	sub	sp, fp, #4
  111858:	e8bd8800 	pop	{fp, pc}

0011185c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  11185c:	e92d4800 	push	{fp, lr}
  111860:	e28db004 	add	fp, sp, #4
  111864:	e24dd020 	sub	sp, sp, #32
  111868:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11186c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  111870:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111874:	ebfffcd2 	bl	110bc4 <get_socket>
  111878:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  11187c:	e51b3008 	ldr	r3, [fp, #-8]
  111880:	e3530000 	cmp	r3, #0
  111884:	1a000001 	bne	111890 <lwip_listen+0x34>
    return -1;
  111888:	e3e03000 	mvn	r3, #0
  11188c:	ea000047 	b	1119b0 <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111890:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111894:	e35300fe 	cmp	r3, #254	; 0xfe
  111898:	ca000002 	bgt	1118a8 <lwip_listen+0x4c>
  11189c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1118a0:	e1c33fc3 	bic	r3, r3, r3, asr #31
  1118a4:	ea000000 	b	1118ac <lwip_listen+0x50>
  1118a8:	e3a030ff 	mov	r3, #255	; 0xff
  1118ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  1118b0:	e51b3008 	ldr	r3, [fp, #-8]
  1118b4:	e5933000 	ldr	r3, [r3]
  1118b8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1118bc:	e6ef2072 	uxtb	r2, r2
  1118c0:	e1a01002 	mov	r1, r2
  1118c4:	e1a00003 	mov	r0, r3
  1118c8:	ebffe6d0 	bl	10b410 <netconn_listen_with_backlog>
  1118cc:	e1a03000 	mov	r3, r0
  1118d0:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  1118d4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1118d8:	e3530000 	cmp	r3, #0
  1118dc:	0a000025 	beq	111978 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  1118e0:	e51b3008 	ldr	r3, [fp, #-8]
  1118e4:	e5933000 	ldr	r3, [r3]
  1118e8:	e5933000 	ldr	r3, [r3]
  1118ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  1118f0:	e3530010 	cmp	r3, #16
  1118f4:	0a00000e 	beq	111934 <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  1118f8:	e3a0305f 	mov	r3, #95	; 0x5f
  1118fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111904:	e6ef2073 	uxtb	r2, r3
  111908:	e51b3008 	ldr	r3, [fp, #-8]
  11190c:	e5c32010 	strb	r2, [r3, #16]
  111910:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111914:	e3530000 	cmp	r3, #0
  111918:	0a000003 	beq	11192c <lwip_listen+0xd0>
  11191c:	eb009ca9 	bl	138bc8 <__errno_location>
  111920:	e1a02000 	mov	r2, r0
  111924:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111928:	e5823000 	str	r3, [r2]
      return -1;
  11192c:	e3e03000 	mvn	r3, #0
  111930:	ea00001e 	b	1119b0 <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  111934:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111938:	e1a00003 	mov	r0, r3
  11193c:	ebfff878 	bl	10fb24 <err_to_errno>
  111940:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111948:	e6ef2073 	uxtb	r2, r3
  11194c:	e51b3008 	ldr	r3, [fp, #-8]
  111950:	e5c32010 	strb	r2, [r3, #16]
  111954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111958:	e3530000 	cmp	r3, #0
  11195c:	0a000003 	beq	111970 <lwip_listen+0x114>
  111960:	eb009c98 	bl	138bc8 <__errno_location>
  111964:	e1a02000 	mov	r2, r0
  111968:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11196c:	e5823000 	str	r3, [r2]
    return -1;
  111970:	e3e03000 	mvn	r3, #0
  111974:	ea00000d 	b	1119b0 <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  111978:	e3a03000 	mov	r3, #0
  11197c:	e50b3010 	str	r3, [fp, #-16]
  111980:	e51b3010 	ldr	r3, [fp, #-16]
  111984:	e6ef2073 	uxtb	r2, r3
  111988:	e51b3008 	ldr	r3, [fp, #-8]
  11198c:	e5c32010 	strb	r2, [r3, #16]
  111990:	e51b3010 	ldr	r3, [fp, #-16]
  111994:	e3530000 	cmp	r3, #0
  111998:	0a000003 	beq	1119ac <lwip_listen+0x150>
  11199c:	eb009c89 	bl	138bc8 <__errno_location>
  1119a0:	e1a02000 	mov	r2, r0
  1119a4:	e51b3010 	ldr	r3, [fp, #-16]
  1119a8:	e5823000 	str	r3, [r2]
  return 0;
  1119ac:	e3a03000 	mov	r3, #0
}
  1119b0:	e1a00003 	mov	r0, r3
  1119b4:	e24bd004 	sub	sp, fp, #4
  1119b8:	e8bd8800 	pop	{fp, pc}

001119bc <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  1119bc:	e92d4810 	push	{r4, fp, lr}
  1119c0:	e28db008 	add	fp, sp, #8
  1119c4:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  1119c8:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  1119cc:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  1119d0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  1119d4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  1119d8:	e3a03000 	mov	r3, #0
  1119dc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  1119e0:	e3a03000 	mov	r3, #0
  1119e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  1119e8:	e3a03000 	mov	r3, #0
  1119ec:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  1119f0:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1119f4:	ebfffc72 	bl	110bc4 <get_socket>
  1119f8:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  1119fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a00:	e3530000 	cmp	r3, #0
  111a04:	1a000001 	bne	111a10 <lwip_recvfrom+0x54>
    return -1;
  111a08:	e3e03000 	mvn	r3, #0
  111a0c:	ea00015b 	b	111f80 <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111a10:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a14:	e5933004 	ldr	r3, [r3, #4]
  111a18:	e3530000 	cmp	r3, #0
  111a1c:	0a000003 	beq	111a30 <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  111a20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a24:	e5933004 	ldr	r3, [r3, #4]
  111a28:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  111a2c:	ea00007d 	b	111c28 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111a30:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111a34:	e2033008 	and	r3, r3, #8
  111a38:	e3530000 	cmp	r3, #0
  111a3c:	1a000005 	bne	111a58 <lwip_recvfrom+0x9c>
  111a40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a44:	e5933000 	ldr	r3, [r3]
  111a48:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111a4c:	e2033002 	and	r3, r3, #2
  111a50:	e3530000 	cmp	r3, #0
  111a54:	0a00001b 	beq	111ac8 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111a58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a5c:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111a60:	e3530000 	cmp	r3, #0
  111a64:	ca000017 	bgt	111ac8 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111a68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111a6c:	e3530000 	cmp	r3, #0
  111a70:	da00000e 	ble	111ab0 <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111a74:	e3a03000 	mov	r3, #0
  111a78:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111a7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a80:	e6ef2073 	uxtb	r2, r3
  111a84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a88:	e5c32010 	strb	r2, [r3, #16]
  111a8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a90:	e3530000 	cmp	r3, #0
  111a94:	0a000003 	beq	111aa8 <lwip_recvfrom+0xec>
  111a98:	eb009c4a 	bl	138bc8 <__errno_location>
  111a9c:	e1a02000 	mov	r2, r0
  111aa0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111aa4:	e5823000 	str	r3, [r2]
          return off;
  111aa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111aac:	ea000133 	b	111f80 <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111ab0:	eb009c44 	bl	138bc8 <__errno_location>
  111ab4:	e1a02000 	mov	r2, r0
  111ab8:	e3a0300b 	mov	r3, #11
  111abc:	e5823000 	str	r3, [r2]
        return -1;
  111ac0:	e3e03000 	mvn	r3, #0
  111ac4:	ea00012d 	b	111f80 <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111ac8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111acc:	e5933000 	ldr	r3, [r3]
  111ad0:	e5933000 	ldr	r3, [r3]
  111ad4:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ad8:	e3530010 	cmp	r3, #16
  111adc:	1a000008 	bne	111b04 <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111ae0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ae4:	e5933000 	ldr	r3, [r3]
  111ae8:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111aec:	e1a01002 	mov	r1, r2
  111af0:	e1a00003 	mov	r0, r3
  111af4:	ebffe788 	bl	10b91c <netconn_recv_tcp_pbuf>
  111af8:	e1a03000 	mov	r3, r0
  111afc:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111b00:	ea000007 	b	111b24 <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111b04:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b08:	e5933000 	ldr	r3, [r3]
  111b0c:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111b10:	e1a01002 	mov	r1, r2
  111b14:	e1a00003 	mov	r0, r3
  111b18:	ebffe79c 	bl	10b990 <netconn_recv>
  111b1c:	e1a03000 	mov	r3, r0
  111b20:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111b24:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111b28:	e3530000 	cmp	r3, #0
  111b2c:	0a000030 	beq	111bf4 <lwip_recvfrom+0x238>
        if (off > 0) {
  111b30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b34:	e3530000 	cmp	r3, #0
  111b38:	da000017 	ble	111b9c <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111b3c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111b40:	e373000f 	cmn	r3, #15
  111b44:	1a000005 	bne	111b60 <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111b48:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b4c:	e5933000 	ldr	r3, [r3]
  111b50:	e3a02000 	mov	r2, #0
  111b54:	e3a01000 	mov	r1, #0
  111b58:	e1a00003 	mov	r0, r3
  111b5c:	eb0006bc 	bl	113654 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111b60:	e3a03000 	mov	r3, #0
  111b64:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111b68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b6c:	e6ef2073 	uxtb	r2, r3
  111b70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b74:	e5c32010 	strb	r2, [r3, #16]
  111b78:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b7c:	e3530000 	cmp	r3, #0
  111b80:	0a000003 	beq	111b94 <lwip_recvfrom+0x1d8>
  111b84:	eb009c0f 	bl	138bc8 <__errno_location>
  111b88:	e1a02000 	mov	r2, r0
  111b8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b90:	e5823000 	str	r3, [r2]
          return off;
  111b94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b98:	ea0000f8 	b	111f80 <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111b9c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ba0:	e1a00003 	mov	r0, r3
  111ba4:	ebfff7de 	bl	10fb24 <err_to_errno>
  111ba8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111bac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111bb0:	e6ef2073 	uxtb	r2, r3
  111bb4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bb8:	e5c32010 	strb	r2, [r3, #16]
  111bbc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111bc0:	e3530000 	cmp	r3, #0
  111bc4:	0a000003 	beq	111bd8 <lwip_recvfrom+0x21c>
  111bc8:	eb009bfe 	bl	138bc8 <__errno_location>
  111bcc:	e1a02000 	mov	r2, r0
  111bd0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111bd4:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111bd8:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111bdc:	e373000f 	cmn	r3, #15
  111be0:	1a000001 	bne	111bec <lwip_recvfrom+0x230>
          return 0;
  111be4:	e3a03000 	mov	r3, #0
  111be8:	ea0000e4 	b	111f80 <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111bec:	e3e03000 	mvn	r3, #0
  111bf0:	ea0000e2 	b	111f80 <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111bf4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111bf8:	e3530000 	cmp	r3, #0
  111bfc:	1a000006 	bne	111c1c <lwip_recvfrom+0x260>
  111c00:	e3060b5c 	movw	r0, #27484	; 0x6b5c
  111c04:	e3400014 	movt	r0, #20
  111c08:	ebffc541 	bl	103114 <rt_kprintf>
  111c0c:	e300133f 	movw	r1, #831	; 0x33f
  111c10:	e3060a98 	movw	r0, #27288	; 0x6a98
  111c14:	e3400014 	movt	r0, #20
  111c18:	ebffe45d 	bl	10ad94 <sys_arch_assert>
      sock->lastdata = buf;
  111c1c:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111c20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c24:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111c28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c2c:	e5933000 	ldr	r3, [r3]
  111c30:	e5933000 	ldr	r3, [r3]
  111c34:	e20330f0 	and	r3, r3, #240	; 0xf0
  111c38:	e3530010 	cmp	r3, #16
  111c3c:	1a000002 	bne	111c4c <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111c40:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111c44:	e50b3010 	str	r3, [fp, #-16]
  111c48:	ea000002 	b	111c58 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111c4c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111c50:	e5933000 	ldr	r3, [r3]
  111c54:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111c58:	e51b3010 	ldr	r3, [fp, #-16]
  111c5c:	e1d330b8 	ldrh	r3, [r3, #8]
  111c60:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111c64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c68:	e1d330b8 	ldrh	r3, [r3, #8]
  111c6c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111c70:	e0423003 	sub	r3, r2, r3
  111c74:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111c78:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111c7c:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111c80:	e1520003 	cmp	r2, r3
  111c84:	9a000002 	bls	111c94 <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111c88:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111c8c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111c90:	ea000001 	b	111c9c <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111c94:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111c98:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111c9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111ca0:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111ca4:	e0821003 	add	r1, r2, r3
  111ca8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111cac:	e1d330b8 	ldrh	r3, [r3, #8]
  111cb0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111cb4:	e51b0010 	ldr	r0, [fp, #-16]
  111cb8:	eb0025bc 	bl	11b3b0 <pbuf_copy_partial>

    off += copylen;
  111cbc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111cc0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111cc4:	e0823003 	add	r3, r2, r3
  111cc8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111ccc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111cd0:	e5933000 	ldr	r3, [r3]
  111cd4:	e5933000 	ldr	r3, [r3]
  111cd8:	e20330f0 	and	r3, r3, #240	; 0xf0
  111cdc:	e3530010 	cmp	r3, #16
  111ce0:	1a000021 	bne	111d6c <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  111ce4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111ce8:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111cec:	e1520003 	cmp	r2, r3
  111cf0:	2a000006 	bcs	111d10 <lwip_recvfrom+0x354>
  111cf4:	e3060b68 	movw	r0, #27496	; 0x6b68
  111cf8:	e3400014 	movt	r0, #20
  111cfc:	ebffc504 	bl	103114 <rt_kprintf>
  111d00:	e300135b 	movw	r1, #859	; 0x35b
  111d04:	e3060a98 	movw	r0, #27288	; 0x6a98
  111d08:	e3400014 	movt	r0, #20
  111d0c:	ebffe420 	bl	10ad94 <sys_arch_assert>
      len -= copylen;
  111d10:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111d14:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111d18:	e0423003 	sub	r3, r2, r3
  111d1c:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  111d20:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111d24:	e3530000 	cmp	r3, #0
  111d28:	0a00000c 	beq	111d60 <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  111d2c:	e51b3010 	ldr	r3, [fp, #-16]
  111d30:	e5d3300d 	ldrb	r3, [r3, #13]
  111d34:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  111d38:	e3530000 	cmp	r3, #0
  111d3c:	1a000007 	bne	111d60 <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  111d40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d44:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  111d48:	e3530000 	cmp	r3, #0
  111d4c:	da000003 	ble	111d60 <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  111d50:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111d54:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  111d58:	e3530000 	cmp	r3, #0
  111d5c:	0a000004 	beq	111d74 <lwip_recvfrom+0x3b8>
        done = 1;
  111d60:	e3a03001 	mov	r3, #1
  111d64:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  111d68:	ea000001 	b	111d74 <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  111d6c:	e3a03001 	mov	r3, #1
  111d70:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  111d74:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111d78:	e3530000 	cmp	r3, #0
  111d7c:	0a00003f 	beq	111e80 <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  111d80:	e59b3004 	ldr	r3, [fp, #4]
  111d84:	e3530000 	cmp	r3, #0
  111d88:	0a00003c 	beq	111e80 <lwip_recvfrom+0x4c4>
  111d8c:	e59b3008 	ldr	r3, [fp, #8]
  111d90:	e3530000 	cmp	r3, #0
  111d94:	0a000039 	beq	111e80 <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111d98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d9c:	e5933000 	ldr	r3, [r3]
  111da0:	e5933000 	ldr	r3, [r3]
  111da4:	e20330f0 	and	r3, r3, #240	; 0xf0
  111da8:	e3530010 	cmp	r3, #16
  111dac:	1a000008 	bne	111dd4 <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  111db0:	e24b3044 	sub	r3, fp, #68	; 0x44
  111db4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  111db8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111dbc:	e5930000 	ldr	r0, [r3]
  111dc0:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111dc4:	e3a03000 	mov	r3, #0
  111dc8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  111dcc:	ebffe4e0 	bl	10b154 <netconn_getaddr>
  111dd0:	ea000005 	b	111dec <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  111dd4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111dd8:	e1d330bc 	ldrh	r3, [r3, #12]
  111ddc:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  111de0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111de4:	e2833008 	add	r3, r3, #8
  111de8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  111dec:	e24b3054 	sub	r3, fp, #84	; 0x54
  111df0:	e3a02010 	mov	r2, #16
  111df4:	e5c32000 	strb	r2, [r3]
  111df8:	e24b3054 	sub	r3, fp, #84	; 0x54
  111dfc:	e3a02002 	mov	r2, #2
  111e00:	e5c32001 	strb	r2, [r3, #1]
  111e04:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111e08:	e24b4054 	sub	r4, fp, #84	; 0x54
  111e0c:	e1a00003 	mov	r0, r3
  111e10:	eb001124 	bl	1162a8 <lwip_htons>
  111e14:	e1a03000 	mov	r3, r0
  111e18:	e1c430b2 	strh	r3, [r4, #2]
  111e1c:	e24b3054 	sub	r3, fp, #84	; 0x54
  111e20:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  111e24:	e5922000 	ldr	r2, [r2]
  111e28:	e5832004 	str	r2, [r3, #4]
  111e2c:	e24b3054 	sub	r3, fp, #84	; 0x54
  111e30:	e2833008 	add	r3, r3, #8
  111e34:	e3a02008 	mov	r2, #8
  111e38:	e3a01000 	mov	r1, #0
  111e3c:	e1a00003 	mov	r0, r3
  111e40:	eb00bc47 	bl	140f64 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  111e44:	e59b3008 	ldr	r3, [fp, #8]
  111e48:	e5933000 	ldr	r3, [r3]
  111e4c:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  111e50:	e1530002 	cmp	r3, r2
  111e54:	9a000003 	bls	111e68 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  111e58:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  111e5c:	e1a02003 	mov	r2, r3
  111e60:	e59b3008 	ldr	r3, [fp, #8]
  111e64:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  111e68:	e59b3008 	ldr	r3, [fp, #8]
  111e6c:	e5932000 	ldr	r2, [r3]
  111e70:	e24b3054 	sub	r3, fp, #84	; 0x54
  111e74:	e1a01003 	mov	r1, r3
  111e78:	e59b0004 	ldr	r0, [fp, #4]
  111e7c:	eb00bb00 	bl	140a84 <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  111e80:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111e84:	e2033001 	and	r3, r3, #1
  111e88:	e3530000 	cmp	r3, #0
  111e8c:	1a00002a 	bne	111f3c <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  111e90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e94:	e5933000 	ldr	r3, [r3]
  111e98:	e5933000 	ldr	r3, [r3]
  111e9c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ea0:	e3530010 	cmp	r3, #16
  111ea4:	1a00000f 	bne	111ee8 <lwip_recvfrom+0x52c>
  111ea8:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111eac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111eb0:	e0423003 	sub	r3, r2, r3
  111eb4:	e3530000 	cmp	r3, #0
  111eb8:	da00000a 	ble	111ee8 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  111ebc:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111ec0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ec4:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  111ec8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ecc:	e1d320b8 	ldrh	r2, [r3, #8]
  111ed0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111ed4:	e0823003 	add	r3, r2, r3
  111ed8:	e6ff2073 	uxth	r2, r3
  111edc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ee0:	e1c320b8 	strh	r2, [r3, #8]
  111ee4:	ea000014 	b	111f3c <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  111ee8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111eec:	e3a02000 	mov	r2, #0
  111ef0:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  111ef4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ef8:	e3a02000 	mov	r2, #0
  111efc:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111f00:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f04:	e5933000 	ldr	r3, [r3]
  111f08:	e5933000 	ldr	r3, [r3]
  111f0c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111f10:	e3530010 	cmp	r3, #16
  111f14:	1a000003 	bne	111f28 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  111f18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f1c:	e1a00003 	mov	r0, r3
  111f20:	eb002317 	bl	11ab84 <pbuf_free>
  111f24:	ea000002 	b	111f34 <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  111f28:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f2c:	e1a00003 	mov	r0, r3
  111f30:	ebfff726 	bl	10fbd0 <netbuf_delete>
        }
        buf = NULL;
  111f34:	e3a03000 	mov	r3, #0
  111f38:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  111f3c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111f40:	e3530000 	cmp	r3, #0
  111f44:	0afffeb1 	beq	111a10 <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  111f48:	e3a03000 	mov	r3, #0
  111f4c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  111f50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111f54:	e6ef2073 	uxtb	r2, r3
  111f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f5c:	e5c32010 	strb	r2, [r3, #16]
  111f60:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111f64:	e3530000 	cmp	r3, #0
  111f68:	0a000003 	beq	111f7c <lwip_recvfrom+0x5c0>
  111f6c:	eb009b15 	bl	138bc8 <__errno_location>
  111f70:	e1a02000 	mov	r2, r0
  111f74:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111f78:	e5823000 	str	r3, [r2]
  return off;
  111f7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  111f80:	e1a00003 	mov	r0, r3
  111f84:	e24bd008 	sub	sp, fp, #8
  111f88:	e8bd8810 	pop	{r4, fp, pc}

00111f8c <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  111f8c:	e92d4800 	push	{fp, lr}
  111f90:	e28db004 	add	fp, sp, #4
  111f94:	e24dd018 	sub	sp, sp, #24
  111f98:	e50b0008 	str	r0, [fp, #-8]
  111f9c:	e50b100c 	str	r1, [fp, #-12]
  111fa0:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  111fa4:	e3a03000 	mov	r3, #0
  111fa8:	e58d3004 	str	r3, [sp, #4]
  111fac:	e3a03000 	mov	r3, #0
  111fb0:	e58d3000 	str	r3, [sp]
  111fb4:	e3a03000 	mov	r3, #0
  111fb8:	e51b2010 	ldr	r2, [fp, #-16]
  111fbc:	e51b100c 	ldr	r1, [fp, #-12]
  111fc0:	e51b0008 	ldr	r0, [fp, #-8]
  111fc4:	ebfffe7c 	bl	1119bc <lwip_recvfrom>
  111fc8:	e1a03000 	mov	r3, r0
}
  111fcc:	e1a00003 	mov	r0, r3
  111fd0:	e24bd004 	sub	sp, fp, #4
  111fd4:	e8bd8800 	pop	{fp, pc}

00111fd8 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  111fd8:	e92d4800 	push	{fp, lr}
  111fdc:	e28db004 	add	fp, sp, #4
  111fe0:	e24dd018 	sub	sp, sp, #24
  111fe4:	e50b0008 	str	r0, [fp, #-8]
  111fe8:	e50b100c 	str	r1, [fp, #-12]
  111fec:	e50b2010 	str	r2, [fp, #-16]
  111ff0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  111ff4:	e3a03000 	mov	r3, #0
  111ff8:	e58d3004 	str	r3, [sp, #4]
  111ffc:	e3a03000 	mov	r3, #0
  112000:	e58d3000 	str	r3, [sp]
  112004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112008:	e51b2010 	ldr	r2, [fp, #-16]
  11200c:	e51b100c 	ldr	r1, [fp, #-12]
  112010:	e51b0008 	ldr	r0, [fp, #-8]
  112014:	ebfffe68 	bl	1119bc <lwip_recvfrom>
  112018:	e1a03000 	mov	r3, r0
}
  11201c:	e1a00003 	mov	r0, r3
  112020:	e24bd004 	sub	sp, fp, #4
  112024:	e8bd8800 	pop	{fp, pc}

00112028 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  112028:	e92d4800 	push	{fp, lr}
  11202c:	e28db004 	add	fp, sp, #4
  112030:	e24dd028 	sub	sp, sp, #40	; 0x28
  112034:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112038:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11203c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  112040:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  112044:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112048:	ebfffadd 	bl	110bc4 <get_socket>
  11204c:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  112050:	e51b3008 	ldr	r3, [fp, #-8]
  112054:	e3530000 	cmp	r3, #0
  112058:	1a000001 	bne	112064 <lwip_send+0x3c>
    return -1;
  11205c:	e3e03000 	mvn	r3, #0
  112060:	ea000041 	b	11216c <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  112064:	e51b3008 	ldr	r3, [fp, #-8]
  112068:	e5933000 	ldr	r3, [r3]
  11206c:	e5933000 	ldr	r3, [r3]
  112070:	e20330f0 	and	r3, r3, #240	; 0xf0
  112074:	e3530010 	cmp	r3, #16
  112078:	0a00000a 	beq	1120a8 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  11207c:	e3a03000 	mov	r3, #0
  112080:	e58d3004 	str	r3, [sp, #4]
  112084:	e3a03000 	mov	r3, #0
  112088:	e58d3000 	str	r3, [sp]
  11208c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112090:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112094:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112098:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11209c:	eb0001b1 	bl	112768 <lwip_sendto>
  1120a0:	e1a03000 	mov	r3, r0
  1120a4:	ea000030 	b	11216c <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1120a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120ac:	e1a031c3 	asr	r3, r3, #3
  1120b0:	e6af3073 	sxtb	r3, r3
  1120b4:	e2033002 	and	r3, r3, #2
  1120b8:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1120bc:	e3833001 	orr	r3, r3, #1
  1120c0:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1120c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120c8:	e1a030c3 	asr	r3, r3, #1
  1120cc:	e6af3073 	sxtb	r3, r3
  1120d0:	e2033004 	and	r3, r3, #4
  1120d4:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1120d8:	e1823003 	orr	r3, r2, r3
  1120dc:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1120e0:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  1120e4:	e3a03000 	mov	r3, #0
  1120e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  1120ec:	e51b3008 	ldr	r3, [fp, #-8]
  1120f0:	e5930000 	ldr	r0, [r3]
  1120f4:	e55b2009 	ldrb	r2, [fp, #-9]
  1120f8:	e24b3014 	sub	r3, fp, #20
  1120fc:	e58d3000 	str	r3, [sp]
  112100:	e1a03002 	mov	r3, r2
  112104:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112108:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11210c:	ebffe6c2 	bl	10bc1c <netconn_write_partly>
  112110:	e1a03000 	mov	r3, r0
  112114:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  112118:	e15b30da 	ldrsb	r3, [fp, #-10]
  11211c:	e1a00003 	mov	r0, r3
  112120:	ebfff67f 	bl	10fb24 <err_to_errno>
  112124:	e50b0010 	str	r0, [fp, #-16]
  112128:	e51b3010 	ldr	r3, [fp, #-16]
  11212c:	e6ef2073 	uxtb	r2, r3
  112130:	e51b3008 	ldr	r3, [fp, #-8]
  112134:	e5c32010 	strb	r2, [r3, #16]
  112138:	e51b3010 	ldr	r3, [fp, #-16]
  11213c:	e3530000 	cmp	r3, #0
  112140:	0a000003 	beq	112154 <lwip_send+0x12c>
  112144:	eb009a9f 	bl	138bc8 <__errno_location>
  112148:	e1a02000 	mov	r2, r0
  11214c:	e51b3010 	ldr	r3, [fp, #-16]
  112150:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  112154:	e15b30da 	ldrsb	r3, [fp, #-10]
  112158:	e3530000 	cmp	r3, #0
  11215c:	1a000001 	bne	112168 <lwip_send+0x140>
  112160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112164:	ea000000 	b	11216c <lwip_send+0x144>
  112168:	e3e03000 	mvn	r3, #0
}
  11216c:	e1a00003 	mov	r0, r3
  112170:	e24bd004 	sub	sp, fp, #4
  112174:	e8bd8800 	pop	{fp, pc}

00112178 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  112178:	e92d4800 	push	{fp, lr}
  11217c:	e28db004 	add	fp, sp, #4
  112180:	e24dd058 	sub	sp, sp, #88	; 0x58
  112184:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  112188:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  11218c:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  112190:	e3a03000 	mov	r3, #0
  112194:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  112198:	e3a03000 	mov	r3, #0
  11219c:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  1121a0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1121a4:	ebfffa86 	bl	110bc4 <get_socket>
  1121a8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  1121ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1121b0:	e3530000 	cmp	r3, #0
  1121b4:	1a000001 	bne	1121c0 <lwip_sendmsg+0x48>
    return -1;
  1121b8:	e3e03000 	mvn	r3, #0
  1121bc:	ea000166 	b	11275c <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  1121c0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1121c4:	e3530000 	cmp	r3, #0
  1121c8:	1a000016 	bne	112228 <lwip_sendmsg+0xb0>
  1121cc:	e3060b90 	movw	r0, #27536	; 0x6b90
  1121d0:	e3400014 	movt	r0, #20
  1121d4:	ebffc3ce 	bl	103114 <rt_kprintf>
  1121d8:	e30013ee 	movw	r1, #1006	; 0x3ee
  1121dc:	e3060a98 	movw	r0, #27288	; 0x6a98
  1121e0:	e3400014 	movt	r0, #20
  1121e4:	ebffe2ea 	bl	10ad94 <sys_arch_assert>
  1121e8:	e3e0000f 	mvn	r0, #15
  1121ec:	ebfff64c 	bl	10fb24 <err_to_errno>
  1121f0:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  1121f4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1121f8:	e6ef2073 	uxtb	r2, r3
  1121fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112200:	e5c32010 	strb	r2, [r3, #16]
  112204:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112208:	e3530000 	cmp	r3, #0
  11220c:	0a000003 	beq	112220 <lwip_sendmsg+0xa8>
  112210:	eb009a6c 	bl	138bc8 <__errno_location>
  112214:	e1a02000 	mov	r2, r0
  112218:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11221c:	e5823000 	str	r3, [r2]
  112220:	e3e03000 	mvn	r3, #0
  112224:	ea00014c 	b	11275c <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  112228:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11222c:	e5933008 	ldr	r3, [r3, #8]
  112230:	e3530000 	cmp	r3, #0
  112234:	0a000003 	beq	112248 <lwip_sendmsg+0xd0>
  112238:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11223c:	e593300c 	ldr	r3, [r3, #12]
  112240:	e3530000 	cmp	r3, #0
  112244:	1a000016 	bne	1122a4 <lwip_sendmsg+0x12c>
  112248:	e3060bb0 	movw	r0, #27568	; 0x6bb0
  11224c:	e3400014 	movt	r0, #20
  112250:	ebffc3af 	bl	103114 <rt_kprintf>
  112254:	e3a01ffd 	mov	r1, #1012	; 0x3f4
  112258:	e3060a98 	movw	r0, #27288	; 0x6a98
  11225c:	e3400014 	movt	r0, #20
  112260:	ebffe2cb 	bl	10ad94 <sys_arch_assert>
  112264:	e3e0000f 	mvn	r0, #15
  112268:	ebfff62d 	bl	10fb24 <err_to_errno>
  11226c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  112270:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112274:	e6ef2073 	uxtb	r2, r3
  112278:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11227c:	e5c32010 	strb	r2, [r3, #16]
  112280:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112284:	e3530000 	cmp	r3, #0
  112288:	0a000003 	beq	11229c <lwip_sendmsg+0x124>
  11228c:	eb009a4d 	bl	138bc8 <__errno_location>
  112290:	e1a02000 	mov	r2, r0
  112294:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112298:	e5823000 	str	r3, [r2]
  11229c:	e3e03000 	mvn	r3, #0
  1122a0:	ea00012d 	b	11275c <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1122a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1122a8:	e5933000 	ldr	r3, [r3]
  1122ac:	e5933000 	ldr	r3, [r3]
  1122b0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1122b4:	e3530010 	cmp	r3, #16
  1122b8:	1a000069 	bne	112464 <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1122bc:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1122c0:	e1a031c3 	asr	r3, r3, #3
  1122c4:	e6af3073 	sxtb	r3, r3
  1122c8:	e2033002 	and	r3, r3, #2
  1122cc:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1122d0:	e3833001 	orr	r3, r3, #1
  1122d4:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1122d8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1122dc:	e1a030c3 	asr	r3, r3, #1
  1122e0:	e6af3073 	sxtb	r3, r3
  1122e4:	e2033004 	and	r3, r3, #4
  1122e8:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1122ec:	e1823003 	orr	r3, r2, r3
  1122f0:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1122f4:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  1122f8:	e3a03000 	mov	r3, #0
  1122fc:	e50b3008 	str	r3, [fp, #-8]
  112300:	ea000041 	b	11240c <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  112304:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  112308:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  11230c:	e51b3008 	ldr	r3, [fp, #-8]
  112310:	e2832001 	add	r2, r3, #1
  112314:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112318:	e593300c 	ldr	r3, [r3, #12]
  11231c:	e1520003 	cmp	r2, r3
  112320:	aa000002 	bge	112330 <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  112324:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  112328:	e3833002 	orr	r3, r3, #2
  11232c:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  112330:	e3a03000 	mov	r3, #0
  112334:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  112338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11233c:	e5930000 	ldr	r0, [r3]
  112340:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112344:	e5932008 	ldr	r2, [r3, #8]
  112348:	e51b3008 	ldr	r3, [fp, #-8]
  11234c:	e1a03183 	lsl	r3, r3, #3
  112350:	e0823003 	add	r3, r2, r3
  112354:	e5931000 	ldr	r1, [r3]
  112358:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11235c:	e5932008 	ldr	r2, [r3, #8]
  112360:	e51b3008 	ldr	r3, [fp, #-8]
  112364:	e1a03183 	lsl	r3, r3, #3
  112368:	e0823003 	add	r3, r2, r3
  11236c:	e5932004 	ldr	r2, [r3, #4]
  112370:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  112374:	e24b3040 	sub	r3, fp, #64	; 0x40
  112378:	e58d3000 	str	r3, [sp]
  11237c:	e1a0300c 	mov	r3, ip
  112380:	ebffe625 	bl	10bc1c <netconn_write_partly>
  112384:	e1a03000 	mov	r3, r0
  112388:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  11238c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112390:	e3530000 	cmp	r3, #0
  112394:	1a00000d 	bne	1123d0 <lwip_sendmsg+0x258>
        size += written;
  112398:	e51b200c 	ldr	r2, [fp, #-12]
  11239c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1123a0:	e0823003 	add	r3, r2, r3
  1123a4:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  1123a8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1123ac:	e5932008 	ldr	r2, [r3, #8]
  1123b0:	e51b3008 	ldr	r3, [fp, #-8]
  1123b4:	e1a03183 	lsl	r3, r3, #3
  1123b8:	e0823003 	add	r3, r2, r3
  1123bc:	e5932004 	ldr	r2, [r3, #4]
  1123c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1123c4:	e1520003 	cmp	r2, r3
  1123c8:	0a00000c 	beq	112400 <lwip_sendmsg+0x288>
          break;
  1123cc:	ea000013 	b	112420 <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  1123d0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1123d4:	e3730007 	cmn	r3, #7
  1123d8:	1a000005 	bne	1123f4 <lwip_sendmsg+0x27c>
  1123dc:	e51b300c 	ldr	r3, [fp, #-12]
  1123e0:	e3530000 	cmp	r3, #0
  1123e4:	da000002 	ble	1123f4 <lwip_sendmsg+0x27c>
        err = ERR_OK;
  1123e8:	e3a03000 	mov	r3, #0
  1123ec:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  1123f0:	ea00000a 	b	112420 <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  1123f4:	e3e03000 	mvn	r3, #0
  1123f8:	e50b300c 	str	r3, [fp, #-12]
        break;
  1123fc:	ea000007 	b	112420 <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112400:	e51b3008 	ldr	r3, [fp, #-8]
  112404:	e2833001 	add	r3, r3, #1
  112408:	e50b3008 	str	r3, [fp, #-8]
  11240c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112410:	e593300c 	ldr	r3, [r3, #12]
  112414:	e51b2008 	ldr	r2, [fp, #-8]
  112418:	e1520003 	cmp	r2, r3
  11241c:	baffffb8 	blt	112304 <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  112420:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112424:	e1a00003 	mov	r0, r3
  112428:	ebfff5bd 	bl	10fb24 <err_to_errno>
  11242c:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  112430:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112434:	e6ef2073 	uxtb	r2, r3
  112438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11243c:	e5c32010 	strb	r2, [r3, #16]
  112440:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112444:	e3530000 	cmp	r3, #0
  112448:	0a000003 	beq	11245c <lwip_sendmsg+0x2e4>
  11244c:	eb0099dd 	bl	138bc8 <__errno_location>
  112450:	e1a02000 	mov	r2, r0
  112454:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112458:	e5823000 	str	r3, [r2]
    return size;
  11245c:	e51b300c 	ldr	r3, [fp, #-12]
  112460:	ea0000bd 	b	11275c <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  112464:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112468:	e5933000 	ldr	r3, [r3]
  11246c:	e3530000 	cmp	r3, #0
  112470:	1a000003 	bne	112484 <lwip_sendmsg+0x30c>
  112474:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112478:	e5933004 	ldr	r3, [r3, #4]
  11247c:	e3530000 	cmp	r3, #0
  112480:	0a00001a 	beq	1124f0 <lwip_sendmsg+0x378>
  112484:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112488:	e5933004 	ldr	r3, [r3, #4]
  11248c:	e3530010 	cmp	r3, #16
  112490:	0a000016 	beq	1124f0 <lwip_sendmsg+0x378>
  112494:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  112498:	e3400014 	movt	r0, #20
  11249c:	ebffc31c 	bl	103114 <rt_kprintf>
  1124a0:	e3001422 	movw	r1, #1058	; 0x422
  1124a4:	e3060a98 	movw	r0, #27288	; 0x6a98
  1124a8:	e3400014 	movt	r0, #20
  1124ac:	ebffe238 	bl	10ad94 <sys_arch_assert>
  1124b0:	e3e0000f 	mvn	r0, #15
  1124b4:	ebfff59a 	bl	10fb24 <err_to_errno>
  1124b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1124bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1124c0:	e6ef2073 	uxtb	r2, r3
  1124c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124c8:	e5c32010 	strb	r2, [r3, #16]
  1124cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1124d0:	e3530000 	cmp	r3, #0
  1124d4:	0a000003 	beq	1124e8 <lwip_sendmsg+0x370>
  1124d8:	eb0099ba 	bl	138bc8 <__errno_location>
  1124dc:	e1a02000 	mov	r2, r0
  1124e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1124e4:	e5823000 	str	r3, [r2]
  1124e8:	e3e03000 	mvn	r3, #0
  1124ec:	ea00009a 	b	11275c <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  1124f0:	ebfff5a2 	bl	10fb80 <netbuf_new>
  1124f4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  1124f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1124fc:	e3530000 	cmp	r3, #0
  112500:	1a00000f 	bne	112544 <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  112504:	e3e00000 	mvn	r0, #0
  112508:	ebfff585 	bl	10fb24 <err_to_errno>
  11250c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  112510:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112514:	e6ef2073 	uxtb	r2, r3
  112518:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11251c:	e5c32010 	strb	r2, [r3, #16]
  112520:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112524:	e3530000 	cmp	r3, #0
  112528:	0a000003 	beq	11253c <lwip_sendmsg+0x3c4>
  11252c:	eb0099a5 	bl	138bc8 <__errno_location>
  112530:	e1a02000 	mov	r2, r0
  112534:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112538:	e5823000 	str	r3, [r2]
      return -1;
  11253c:	e3e03000 	mvn	r3, #0
  112540:	ea000085 	b	11275c <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  112544:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112548:	e5933000 	ldr	r3, [r3]
  11254c:	e3530000 	cmp	r3, #0
  112550:	0a00000e 	beq	112590 <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  112554:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112558:	e5933000 	ldr	r3, [r3]
  11255c:	e5932004 	ldr	r2, [r3, #4]
  112560:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112564:	e5832008 	str	r2, [r3, #8]
  112568:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11256c:	e5933000 	ldr	r3, [r3]
  112570:	e1d330b2 	ldrh	r3, [r3, #2]
  112574:	e1a00003 	mov	r0, r3
  112578:	eb000f4a 	bl	1162a8 <lwip_htons>
  11257c:	e1a03000 	mov	r3, r0
  112580:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  112584:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112588:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11258c:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  112590:	e3a03000 	mov	r3, #0
  112594:	e50b3008 	str	r3, [fp, #-8]
  112598:	ea000042 	b	1126a8 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  11259c:	e3a02002 	mov	r2, #2
  1125a0:	e3a01000 	mov	r1, #0
  1125a4:	e3a00000 	mov	r0, #0
  1125a8:	eb001e6e 	bl	119f68 <pbuf_alloc>
  1125ac:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  1125b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125b4:	e3530000 	cmp	r3, #0
  1125b8:	1a000002 	bne	1125c8 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  1125bc:	e3e03000 	mvn	r3, #0
  1125c0:	e54b300d 	strb	r3, [fp, #-13]
        break;
  1125c4:	ea00003c 	b	1126bc <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  1125c8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125cc:	e5932008 	ldr	r2, [r3, #8]
  1125d0:	e51b3008 	ldr	r3, [fp, #-8]
  1125d4:	e1a03183 	lsl	r3, r3, #3
  1125d8:	e0823003 	add	r3, r2, r3
  1125dc:	e5932000 	ldr	r2, [r3]
  1125e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125e4:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  1125e8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125ec:	e5932008 	ldr	r2, [r3, #8]
  1125f0:	e51b3008 	ldr	r3, [fp, #-8]
  1125f4:	e1a03183 	lsl	r3, r3, #3
  1125f8:	e0823003 	add	r3, r2, r3
  1125fc:	e5933004 	ldr	r3, [r3, #4]
  112600:	e3530801 	cmp	r3, #65536	; 0x10000
  112604:	3a000006 	bcc	112624 <lwip_sendmsg+0x4ac>
  112608:	e3060bf8 	movw	r0, #27640	; 0x6bf8
  11260c:	e3400014 	movt	r0, #20
  112610:	ebffc2bf 	bl	103114 <rt_kprintf>
  112614:	e3a01e45 	mov	r1, #1104	; 0x450
  112618:	e3060a98 	movw	r0, #27288	; 0x6a98
  11261c:	e3400014 	movt	r0, #20
  112620:	ebffe1db 	bl	10ad94 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  112624:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112628:	e5932008 	ldr	r2, [r3, #8]
  11262c:	e51b3008 	ldr	r3, [fp, #-8]
  112630:	e1a03183 	lsl	r3, r3, #3
  112634:	e0823003 	add	r3, r2, r3
  112638:	e5933004 	ldr	r3, [r3, #4]
  11263c:	e6ff2073 	uxth	r2, r3
  112640:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112644:	e1c320b8 	strh	r2, [r3, #8]
  112648:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11264c:	e1d320b8 	ldrh	r2, [r3, #8]
  112650:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112654:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  112658:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11265c:	e5933000 	ldr	r3, [r3]
  112660:	e3530000 	cmp	r3, #0
  112664:	1a000007 	bne	112688 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  112668:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11266c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  112670:	e5832004 	str	r2, [r3, #4]
  112674:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112678:	e5932004 	ldr	r2, [r3, #4]
  11267c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112680:	e5832000 	str	r2, [r3]
  112684:	ea000004 	b	11269c <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  112688:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11268c:	e5933000 	ldr	r3, [r3]
  112690:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  112694:	e1a00003 	mov	r0, r3
  112698:	eb0021f0 	bl	11ae60 <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  11269c:	e51b3008 	ldr	r3, [fp, #-8]
  1126a0:	e2833001 	add	r3, r3, #1
  1126a4:	e50b3008 	str	r3, [fp, #-8]
  1126a8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1126ac:	e593300c 	ldr	r3, [r3, #12]
  1126b0:	e51b2008 	ldr	r2, [fp, #-8]
  1126b4:	e1520003 	cmp	r2, r3
  1126b8:	baffffb7 	blt	11259c <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  1126bc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126c0:	e3530000 	cmp	r3, #0
  1126c4:	1a000003 	bne	1126d8 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  1126c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1126cc:	e5933000 	ldr	r3, [r3]
  1126d0:	e1d330b8 	ldrh	r3, [r3, #8]
  1126d4:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  1126d8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126dc:	e3530000 	cmp	r3, #0
  1126e0:	1a000006 	bne	112700 <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  1126e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1126e8:	e5933000 	ldr	r3, [r3]
  1126ec:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1126f0:	e1a00003 	mov	r0, r3
  1126f4:	ebffe528 	bl	10bb9c <netconn_send>
  1126f8:	e1a03000 	mov	r3, r0
  1126fc:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  112700:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  112704:	ebfff531 	bl	10fbd0 <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  112708:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11270c:	e1a00003 	mov	r0, r3
  112710:	ebfff503 	bl	10fb24 <err_to_errno>
  112714:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112718:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11271c:	e6ef2073 	uxtb	r2, r3
  112720:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112724:	e5c32010 	strb	r2, [r3, #16]
  112728:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11272c:	e3530000 	cmp	r3, #0
  112730:	0a000003 	beq	112744 <lwip_sendmsg+0x5cc>
  112734:	eb009923 	bl	138bc8 <__errno_location>
  112738:	e1a02000 	mov	r2, r0
  11273c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112740:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  112744:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112748:	e3530000 	cmp	r3, #0
  11274c:	1a000001 	bne	112758 <lwip_sendmsg+0x5e0>
  112750:	e51b300c 	ldr	r3, [fp, #-12]
  112754:	ea000000 	b	11275c <lwip_sendmsg+0x5e4>
  112758:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  11275c:	e1a00003 	mov	r0, r3
  112760:	e24bd004 	sub	sp, fp, #4
  112764:	e8bd8800 	pop	{fp, pc}

00112768 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  112768:	e92d4800 	push	{fp, lr}
  11276c:	e28db004 	add	fp, sp, #4
  112770:	e24dd038 	sub	sp, sp, #56	; 0x38
  112774:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  112778:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  11277c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112780:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  112784:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112788:	ebfff90d 	bl	110bc4 <get_socket>
  11278c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112790:	e51b300c 	ldr	r3, [fp, #-12]
  112794:	e3530000 	cmp	r3, #0
  112798:	1a000001 	bne	1127a4 <lwip_sendto+0x3c>
    return -1;
  11279c:	e3e03000 	mvn	r3, #0
  1127a0:	ea000081 	b	1129ac <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1127a4:	e51b300c 	ldr	r3, [fp, #-12]
  1127a8:	e5933000 	ldr	r3, [r3]
  1127ac:	e5933000 	ldr	r3, [r3]
  1127b0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1127b4:	e3530010 	cmp	r3, #16
  1127b8:	1a000006 	bne	1127d8 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  1127bc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1127c0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1127c4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1127c8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1127cc:	ebfffe15 	bl	112028 <lwip_send>
  1127d0:	e1a03000 	mov	r3, r0
  1127d4:	ea000074 	b	1129ac <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  1127d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1127dc:	e3530801 	cmp	r3, #65536	; 0x10000
  1127e0:	3a000006 	bcc	112800 <lwip_sendto+0x98>
  1127e4:	e3060c08 	movw	r0, #27656	; 0x6c08
  1127e8:	e3400014 	movt	r0, #20
  1127ec:	ebffc248 	bl	103114 <rt_kprintf>
  1127f0:	e3001491 	movw	r1, #1169	; 0x491
  1127f4:	e3060a98 	movw	r0, #27288	; 0x6a98
  1127f8:	e3400014 	movt	r0, #20
  1127fc:	ebffe164 	bl	10ad94 <sys_arch_assert>
  short_size = (u16_t)size;
  112800:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112804:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  112808:	e59b3004 	ldr	r3, [fp, #4]
  11280c:	e3530000 	cmp	r3, #0
  112810:	1a000002 	bne	112820 <lwip_sendto+0xb8>
  112814:	e59b3008 	ldr	r3, [fp, #8]
  112818:	e3530000 	cmp	r3, #0
  11281c:	0a000021 	beq	1128a8 <lwip_sendto+0x140>
  112820:	e59b3008 	ldr	r3, [fp, #8]
  112824:	e3530010 	cmp	r3, #16
  112828:	1a000007 	bne	11284c <lwip_sendto+0xe4>
  11282c:	e59b3004 	ldr	r3, [fp, #4]
  112830:	e5d33001 	ldrb	r3, [r3, #1]
  112834:	e3530002 	cmp	r3, #2
  112838:	1a000003 	bne	11284c <lwip_sendto+0xe4>
  11283c:	e59b3004 	ldr	r3, [fp, #4]
  112840:	e2033003 	and	r3, r3, #3
  112844:	e3530000 	cmp	r3, #0
  112848:	0a000016 	beq	1128a8 <lwip_sendto+0x140>
  11284c:	e3060c2c 	movw	r0, #27692	; 0x6c2c
  112850:	e3400014 	movt	r0, #20
  112854:	ebffc22e 	bl	103114 <rt_kprintf>
  112858:	e3001496 	movw	r1, #1174	; 0x496
  11285c:	e3060a98 	movw	r0, #27288	; 0x6a98
  112860:	e3400014 	movt	r0, #20
  112864:	ebffe14a 	bl	10ad94 <sys_arch_assert>
  112868:	e3e0000f 	mvn	r0, #15
  11286c:	ebfff4ac 	bl	10fb24 <err_to_errno>
  112870:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  112874:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112878:	e6ef2073 	uxtb	r2, r3
  11287c:	e51b300c 	ldr	r3, [fp, #-12]
  112880:	e5c32010 	strb	r2, [r3, #16]
  112884:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112888:	e3530000 	cmp	r3, #0
  11288c:	0a000003 	beq	1128a0 <lwip_sendto+0x138>
  112890:	eb0098cc 	bl	138bc8 <__errno_location>
  112894:	e1a02000 	mov	r2, r0
  112898:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11289c:	e5823000 	str	r3, [r2]
  1128a0:	e3e03000 	mvn	r3, #0
  1128a4:	ea000040 	b	1129ac <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  1128a8:	e3a03000 	mov	r3, #0
  1128ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1128b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1128b4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  1128b8:	e59b3004 	ldr	r3, [fp, #4]
  1128bc:	e3530000 	cmp	r3, #0
  1128c0:	0a000009 	beq	1128ec <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  1128c4:	e59b3004 	ldr	r3, [fp, #4]
  1128c8:	e5933004 	ldr	r3, [r3, #4]
  1128cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1128d0:	e59b3004 	ldr	r3, [fp, #4]
  1128d4:	e1d330b2 	ldrh	r3, [r3, #2]
  1128d8:	e1a00003 	mov	r0, r3
  1128dc:	eb000e71 	bl	1162a8 <lwip_htons>
  1128e0:	e1a03000 	mov	r3, r0
  1128e4:	e14b30b8 	strh	r3, [fp, #-8]
  1128e8:	ea000003 	b	1128fc <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  1128ec:	e3a03000 	mov	r3, #0
  1128f0:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  1128f4:	e3a03000 	mov	r3, #0
  1128f8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  1128fc:	e15b30b8 	ldrh	r3, [fp, #-8]
  112900:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112904:	e15b20be 	ldrh	r2, [fp, #-14]
  112908:	e24b3028 	sub	r3, fp, #40	; 0x28
  11290c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112910:	e1a00003 	mov	r0, r3
  112914:	ebfff528 	bl	10fdbc <netbuf_ref>
  112918:	e1a03000 	mov	r3, r0
  11291c:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  112920:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112924:	e3530000 	cmp	r3, #0
  112928:	1a000007 	bne	11294c <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  11292c:	e51b300c 	ldr	r3, [fp, #-12]
  112930:	e5933000 	ldr	r3, [r3]
  112934:	e24b2028 	sub	r2, fp, #40	; 0x28
  112938:	e1a01002 	mov	r1, r2
  11293c:	e1a00003 	mov	r0, r3
  112940:	ebffe495 	bl	10bb9c <netconn_send>
  112944:	e1a03000 	mov	r3, r0
  112948:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  11294c:	e24b3028 	sub	r3, fp, #40	; 0x28
  112950:	e1a00003 	mov	r0, r3
  112954:	ebfff4f8 	bl	10fd3c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  112958:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11295c:	e1a00003 	mov	r0, r3
  112960:	ebfff46f 	bl	10fb24 <err_to_errno>
  112964:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11296c:	e6ef2073 	uxtb	r2, r3
  112970:	e51b300c 	ldr	r3, [fp, #-12]
  112974:	e5c32010 	strb	r2, [r3, #16]
  112978:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11297c:	e3530000 	cmp	r3, #0
  112980:	0a000003 	beq	112994 <lwip_sendto+0x22c>
  112984:	eb00988f 	bl	138bc8 <__errno_location>
  112988:	e1a02000 	mov	r2, r0
  11298c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112990:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112994:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112998:	e3530000 	cmp	r3, #0
  11299c:	1a000001 	bne	1129a8 <lwip_sendto+0x240>
  1129a0:	e15b30be 	ldrh	r3, [fp, #-14]
  1129a4:	ea000000 	b	1129ac <lwip_sendto+0x244>
  1129a8:	e3e03000 	mvn	r3, #0
}
  1129ac:	e1a00003 	mov	r0, r3
  1129b0:	e24bd004 	sub	sp, fp, #4
  1129b4:	e8bd8800 	pop	{fp, pc}

001129b8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  1129b8:	e92d4800 	push	{fp, lr}
  1129bc:	e28db004 	add	fp, sp, #4
  1129c0:	e24dd018 	sub	sp, sp, #24
  1129c4:	e50b0010 	str	r0, [fp, #-16]
  1129c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1129cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  1129d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1129d4:	e3530002 	cmp	r3, #2
  1129d8:	0a00000d 	beq	112a14 <lwip_socket+0x5c>
  1129dc:	e3530003 	cmp	r3, #3
  1129e0:	0a000002 	beq	1129f0 <lwip_socket+0x38>
  1129e4:	e3530001 	cmp	r3, #1
  1129e8:	0a000016 	beq	112a48 <lwip_socket+0x90>
  1129ec:	ea00001c 	b	112a64 <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  1129f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129f4:	e6ef3073 	uxtb	r3, r3
  1129f8:	e3032654 	movw	r2, #13908	; 0x3654
  1129fc:	e3402011 	movt	r2, #17
  112a00:	e1a01003 	mov	r1, r3
  112a04:	e3a00040 	mov	r0, #64	; 0x40
  112a08:	ebffe14f 	bl	10af4c <netconn_new_with_proto_and_callback>
  112a0c:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112a10:	ea000019 	b	112a7c <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112a14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112a18:	e3530088 	cmp	r3, #136	; 0x88
  112a1c:	1a000001 	bne	112a28 <lwip_socket+0x70>
  112a20:	e3a03021 	mov	r3, #33	; 0x21
  112a24:	ea000000 	b	112a2c <lwip_socket+0x74>
  112a28:	e3a03020 	mov	r3, #32
  112a2c:	e3032654 	movw	r2, #13908	; 0x3654
  112a30:	e3402011 	movt	r2, #17
  112a34:	e3a01000 	mov	r1, #0
  112a38:	e1a00003 	mov	r0, r3
  112a3c:	ebffe142 	bl	10af4c <netconn_new_with_proto_and_callback>
  112a40:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112a44:	ea00000c 	b	112a7c <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112a48:	e3032654 	movw	r2, #13908	; 0x3654
  112a4c:	e3402011 	movt	r2, #17
  112a50:	e3a01000 	mov	r1, #0
  112a54:	e3a00010 	mov	r0, #16
  112a58:	ebffe13b 	bl	10af4c <netconn_new_with_proto_and_callback>
  112a5c:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112a60:	ea000005 	b	112a7c <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112a64:	eb009857 	bl	138bc8 <__errno_location>
  112a68:	e1a02000 	mov	r2, r0
  112a6c:	e3a03016 	mov	r3, #22
  112a70:	e5823000 	str	r3, [r2]
    return -1;
  112a74:	e3e03000 	mvn	r3, #0
  112a78:	ea00001b 	b	112aec <lwip_socket+0x134>
  }

  if (!conn) {
  112a7c:	e51b3008 	ldr	r3, [fp, #-8]
  112a80:	e3530000 	cmp	r3, #0
  112a84:	1a000005 	bne	112aa0 <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112a88:	eb00984e 	bl	138bc8 <__errno_location>
  112a8c:	e1a02000 	mov	r2, r0
  112a90:	e3a03069 	mov	r3, #105	; 0x69
  112a94:	e5823000 	str	r3, [r2]
    return -1;
  112a98:	e3e03000 	mvn	r3, #0
  112a9c:	ea000012 	b	112aec <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112aa0:	e3a01000 	mov	r1, #0
  112aa4:	e51b0008 	ldr	r0, [fp, #-8]
  112aa8:	ebfff895 	bl	110d04 <alloc_socket>
  112aac:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112ab0:	e51b300c 	ldr	r3, [fp, #-12]
  112ab4:	e3730001 	cmn	r3, #1
  112ab8:	1a000007 	bne	112adc <lwip_socket+0x124>
    netconn_delete(conn);
  112abc:	e51b0008 	ldr	r0, [fp, #-8]
  112ac0:	ebffe183 	bl	10b0d4 <netconn_delete>
    set_errno(ENFILE);
  112ac4:	eb00983f 	bl	138bc8 <__errno_location>
  112ac8:	e1a02000 	mov	r2, r0
  112acc:	e3a03017 	mov	r3, #23
  112ad0:	e5823000 	str	r3, [r2]
    return -1;
  112ad4:	e3e03000 	mvn	r3, #0
  112ad8:	ea000003 	b	112aec <lwip_socket+0x134>
  }
  conn->socket = i;
  112adc:	e51b3008 	ldr	r3, [fp, #-8]
  112ae0:	e51b200c 	ldr	r2, [fp, #-12]
  112ae4:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112ae8:	e51b300c 	ldr	r3, [fp, #-12]
}
  112aec:	e1a00003 	mov	r0, r3
  112af0:	e24bd004 	sub	sp, fp, #4
  112af4:	e8bd8800 	pop	{fp, pc}

00112af8 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112af8:	e92d4800 	push	{fp, lr}
  112afc:	e28db004 	add	fp, sp, #4
  112b00:	e24dd010 	sub	sp, sp, #16
  112b04:	e50b0008 	str	r0, [fp, #-8]
  112b08:	e50b100c 	str	r1, [fp, #-12]
  112b0c:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112b10:	e3a03000 	mov	r3, #0
  112b14:	e51b2010 	ldr	r2, [fp, #-16]
  112b18:	e51b100c 	ldr	r1, [fp, #-12]
  112b1c:	e51b0008 	ldr	r0, [fp, #-8]
  112b20:	ebfffd40 	bl	112028 <lwip_send>
  112b24:	e1a03000 	mov	r3, r0
}
  112b28:	e1a00003 	mov	r0, r3
  112b2c:	e24bd004 	sub	sp, fp, #4
  112b30:	e8bd8800 	pop	{fp, pc}

00112b34 <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112b34:	e92d4800 	push	{fp, lr}
  112b38:	e28db004 	add	fp, sp, #4
  112b3c:	e24dd030 	sub	sp, sp, #48	; 0x30
  112b40:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112b44:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112b48:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112b4c:	e3a03000 	mov	r3, #0
  112b50:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112b54:	e3a03000 	mov	r3, #0
  112b58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112b5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112b60:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112b64:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112b6c:	e3a03000 	mov	r3, #0
  112b70:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112b74:	e3a03000 	mov	r3, #0
  112b78:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112b7c:	e3a03000 	mov	r3, #0
  112b80:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112b84:	e24b3020 	sub	r3, fp, #32
  112b88:	e3a02000 	mov	r2, #0
  112b8c:	e1a01003 	mov	r1, r3
  112b90:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112b94:	ebfffd77 	bl	112178 <lwip_sendmsg>
  112b98:	e1a03000 	mov	r3, r0
}
  112b9c:	e1a00003 	mov	r0, r3
  112ba0:	e24bd004 	sub	sp, fp, #4
  112ba4:	e8bd8800 	pop	{fp, pc}

00112ba8 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112ba8:	e92d4800 	push	{fp, lr}
  112bac:	e28db004 	add	fp, sp, #4
  112bb0:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112bb4:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112bb8:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112bbc:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112bc0:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112bc4:	e3a03000 	mov	r3, #0
  112bc8:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112bcc:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112bd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112bd4:	e3a03020 	mov	r3, #32
  112bd8:	e50b3010 	str	r3, [fp, #-16]
  112bdc:	ea000007 	b	112c00 <lwip_selscan+0x58>
  112be0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112be4:	e2832004 	add	r2, r3, #4
  112be8:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112bec:	e3a02000 	mov	r2, #0
  112bf0:	e5832000 	str	r2, [r3]
  112bf4:	e51b3010 	ldr	r3, [fp, #-16]
  112bf8:	e2433001 	sub	r3, r3, #1
  112bfc:	e50b3010 	str	r3, [fp, #-16]
  112c00:	e51b3010 	ldr	r3, [fp, #-16]
  112c04:	e3530000 	cmp	r3, #0
  112c08:	1afffff4 	bne	112be0 <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112c0c:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112c10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112c14:	e3a03020 	mov	r3, #32
  112c18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112c1c:	ea000007 	b	112c40 <lwip_selscan+0x98>
  112c20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112c24:	e2832004 	add	r2, r3, #4
  112c28:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112c2c:	e3a02000 	mov	r2, #0
  112c30:	e5832000 	str	r2, [r3]
  112c34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c38:	e2433001 	sub	r3, r3, #1
  112c3c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112c40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c44:	e3530000 	cmp	r3, #0
  112c48:	1afffff4 	bne	112c20 <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112c4c:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112c50:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112c54:	e3a03020 	mov	r3, #32
  112c58:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112c5c:	ea000007 	b	112c80 <lwip_selscan+0xd8>
  112c60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112c64:	e2832004 	add	r2, r3, #4
  112c68:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112c6c:	e3a02000 	mov	r2, #0
  112c70:	e5832000 	str	r2, [r3]
  112c74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112c78:	e2433001 	sub	r3, r3, #1
  112c7c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112c80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112c84:	e3530000 	cmp	r3, #0
  112c88:	1afffff4 	bne	112c60 <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112c8c:	e3a03000 	mov	r3, #0
  112c90:	e50b3008 	str	r3, [fp, #-8]
  112c94:	ea0000aa 	b	112f44 <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112c98:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112c9c:	e3530000 	cmp	r3, #0
  112ca0:	0a000009 	beq	112ccc <lwip_selscan+0x124>
  112ca4:	e51b3008 	ldr	r3, [fp, #-8]
  112ca8:	e1a022a3 	lsr	r2, r3, #5
  112cac:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112cb0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112cb4:	e51b3008 	ldr	r3, [fp, #-8]
  112cb8:	e203301f 	and	r3, r3, #31
  112cbc:	e1a03332 	lsr	r3, r2, r3
  112cc0:	e2033001 	and	r3, r3, #1
  112cc4:	e3530000 	cmp	r3, #0
  112cc8:	1a000019 	bne	112d34 <lwip_selscan+0x18c>
  112ccc:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112cd0:	e3530000 	cmp	r3, #0
  112cd4:	0a000009 	beq	112d00 <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  112cd8:	e51b3008 	ldr	r3, [fp, #-8]
  112cdc:	e1a022a3 	lsr	r2, r3, #5
  112ce0:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112ce4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112ce8:	e51b3008 	ldr	r3, [fp, #-8]
  112cec:	e203301f 	and	r3, r3, #31
  112cf0:	e1a03332 	lsr	r3, r2, r3
  112cf4:	e2033001 	and	r3, r3, #1
  112cf8:	e3530000 	cmp	r3, #0
  112cfc:	1a00000c 	bne	112d34 <lwip_selscan+0x18c>
  112d00:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112d04:	e3530000 	cmp	r3, #0
  112d08:	0a000089 	beq	112f34 <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  112d0c:	e51b3008 	ldr	r3, [fp, #-8]
  112d10:	e1a022a3 	lsr	r2, r3, #5
  112d14:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112d18:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112d1c:	e51b3008 	ldr	r3, [fp, #-8]
  112d20:	e203301f 	and	r3, r3, #31
  112d24:	e1a03332 	lsr	r3, r2, r3
  112d28:	e2033001 	and	r3, r3, #1
  112d2c:	e3530000 	cmp	r3, #0
  112d30:	0a00007f 	beq	112f34 <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  112d34:	ebffbd40 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  112d38:	e51b0008 	ldr	r0, [fp, #-8]
  112d3c:	ebfff7c5 	bl	110c58 <tryget_socket>
  112d40:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  112d44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d48:	e3530000 	cmp	r3, #0
  112d4c:	0a000076 	beq	112f2c <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  112d50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d54:	e5933004 	ldr	r3, [r3, #4]
  112d58:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  112d5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d60:	e1d330ba 	ldrh	r3, [r3, #10]
  112d64:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  112d68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d6c:	e1d330bc 	ldrh	r3, [r3, #12]
  112d70:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  112d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d78:	e1d330be 	ldrh	r3, [r3, #14]
  112d7c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  112d80:	ebffbd33 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  112d84:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d88:	e3530000 	cmp	r3, #0
  112d8c:	0a000021 	beq	112e18 <lwip_selscan+0x270>
  112d90:	e51b3008 	ldr	r3, [fp, #-8]
  112d94:	e1a022a3 	lsr	r2, r3, #5
  112d98:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d9c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112da0:	e51b3008 	ldr	r3, [fp, #-8]
  112da4:	e203301f 	and	r3, r3, #31
  112da8:	e1a03332 	lsr	r3, r2, r3
  112dac:	e2033001 	and	r3, r3, #1
  112db0:	e3530000 	cmp	r3, #0
  112db4:	0a000017 	beq	112e18 <lwip_selscan+0x270>
  112db8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112dbc:	e3530000 	cmp	r3, #0
  112dc0:	1a000002 	bne	112dd0 <lwip_selscan+0x228>
  112dc4:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  112dc8:	e3530000 	cmp	r3, #0
  112dcc:	da000011 	ble	112e18 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  112dd0:	e51b3008 	ldr	r3, [fp, #-8]
  112dd4:	e1a022a3 	lsr	r2, r3, #5
  112dd8:	e1a03102 	lsl	r3, r2, #2
  112ddc:	e24b1004 	sub	r1, fp, #4
  112de0:	e0813003 	add	r3, r1, r3
  112de4:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  112de8:	e51b3008 	ldr	r3, [fp, #-8]
  112dec:	e203301f 	and	r3, r3, #31
  112df0:	e3a00001 	mov	r0, #1
  112df4:	e1a03310 	lsl	r3, r0, r3
  112df8:	e1811003 	orr	r1, r1, r3
  112dfc:	e1a03102 	lsl	r3, r2, #2
  112e00:	e24b2004 	sub	r2, fp, #4
  112e04:	e0823003 	add	r3, r2, r3
  112e08:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  112e0c:	e51b300c 	ldr	r3, [fp, #-12]
  112e10:	e2833001 	add	r3, r3, #1
  112e14:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  112e18:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112e1c:	e3530000 	cmp	r3, #0
  112e20:	0a00001e 	beq	112ea0 <lwip_selscan+0x2f8>
  112e24:	e51b3008 	ldr	r3, [fp, #-8]
  112e28:	e1a022a3 	lsr	r2, r3, #5
  112e2c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112e30:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112e34:	e51b3008 	ldr	r3, [fp, #-8]
  112e38:	e203301f 	and	r3, r3, #31
  112e3c:	e1a03332 	lsr	r3, r2, r3
  112e40:	e2033001 	and	r3, r3, #1
  112e44:	e3530000 	cmp	r3, #0
  112e48:	0a000014 	beq	112ea0 <lwip_selscan+0x2f8>
  112e4c:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  112e50:	e3530000 	cmp	r3, #0
  112e54:	0a000011 	beq	112ea0 <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  112e58:	e51b3008 	ldr	r3, [fp, #-8]
  112e5c:	e1a022a3 	lsr	r2, r3, #5
  112e60:	e1a03102 	lsl	r3, r2, #2
  112e64:	e24b1004 	sub	r1, fp, #4
  112e68:	e0813003 	add	r3, r1, r3
  112e6c:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  112e70:	e51b3008 	ldr	r3, [fp, #-8]
  112e74:	e203301f 	and	r3, r3, #31
  112e78:	e3a00001 	mov	r0, #1
  112e7c:	e1a03310 	lsl	r3, r0, r3
  112e80:	e1811003 	orr	r1, r1, r3
  112e84:	e1a03102 	lsl	r3, r2, #2
  112e88:	e24b2004 	sub	r2, fp, #4
  112e8c:	e0823003 	add	r3, r2, r3
  112e90:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  112e94:	e51b300c 	ldr	r3, [fp, #-12]
  112e98:	e2833001 	add	r3, r3, #1
  112e9c:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  112ea0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112ea4:	e3530000 	cmp	r3, #0
  112ea8:	0a000022 	beq	112f38 <lwip_selscan+0x390>
  112eac:	e51b3008 	ldr	r3, [fp, #-8]
  112eb0:	e1a022a3 	lsr	r2, r3, #5
  112eb4:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112eb8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112ebc:	e51b3008 	ldr	r3, [fp, #-8]
  112ec0:	e203301f 	and	r3, r3, #31
  112ec4:	e1a03332 	lsr	r3, r2, r3
  112ec8:	e2033001 	and	r3, r3, #1
  112ecc:	e3530000 	cmp	r3, #0
  112ed0:	0a000018 	beq	112f38 <lwip_selscan+0x390>
  112ed4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  112ed8:	e3530000 	cmp	r3, #0
  112edc:	0a000015 	beq	112f38 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  112ee0:	e51b3008 	ldr	r3, [fp, #-8]
  112ee4:	e1a022a3 	lsr	r2, r3, #5
  112ee8:	e1a03102 	lsl	r3, r2, #2
  112eec:	e24b1004 	sub	r1, fp, #4
  112ef0:	e0813003 	add	r3, r1, r3
  112ef4:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  112ef8:	e51b3008 	ldr	r3, [fp, #-8]
  112efc:	e203301f 	and	r3, r3, #31
  112f00:	e3a00001 	mov	r0, #1
  112f04:	e1a03310 	lsl	r3, r0, r3
  112f08:	e1811003 	orr	r1, r1, r3
  112f0c:	e1a03102 	lsl	r3, r2, #2
  112f10:	e24b2004 	sub	r2, fp, #4
  112f14:	e0823003 	add	r3, r2, r3
  112f18:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  112f1c:	e51b300c 	ldr	r3, [fp, #-12]
  112f20:	e2833001 	add	r3, r3, #1
  112f24:	e50b300c 	str	r3, [fp, #-12]
  112f28:	ea000002 	b	112f38 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  112f2c:	ebffbcc8 	bl	102254 <rt_exit_critical>
  112f30:	ea000000 	b	112f38 <lwip_selscan+0x390>
      continue;
  112f34:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112f38:	e51b3008 	ldr	r3, [fp, #-8]
  112f3c:	e2833001 	add	r3, r3, #1
  112f40:	e50b3008 	str	r3, [fp, #-8]
  112f44:	e51b2008 	ldr	r2, [fp, #-8]
  112f48:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  112f4c:	e1520003 	cmp	r2, r3
  112f50:	baffff50 	blt	112c98 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  112f54:	e59b3004 	ldr	r3, [fp, #4]
  112f58:	e1a00003 	mov	r0, r3
  112f5c:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112f60:	e3a02080 	mov	r2, #128	; 0x80
  112f64:	e1a01003 	mov	r1, r3
  112f68:	eb00b6c5 	bl	140a84 <memcpy>
  *writeset_out = lwriteset;
  112f6c:	e59b3008 	ldr	r3, [fp, #8]
  112f70:	e1a00003 	mov	r0, r3
  112f74:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112f78:	e3a02080 	mov	r2, #128	; 0x80
  112f7c:	e1a01003 	mov	r1, r3
  112f80:	eb00b6bf 	bl	140a84 <memcpy>
  *exceptset_out = lexceptset;
  112f84:	e59b300c 	ldr	r3, [fp, #12]
  112f88:	e1a00003 	mov	r0, r3
  112f8c:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112f90:	e3a02080 	mov	r2, #128	; 0x80
  112f94:	e1a01003 	mov	r1, r3
  112f98:	eb00b6b9 	bl	140a84 <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  112f9c:	e51b300c 	ldr	r3, [fp, #-12]
  112fa0:	e3530000 	cmp	r3, #0
  112fa4:	aa000006 	bge	112fc4 <lwip_selscan+0x41c>
  112fa8:	e3060c4c 	movw	r0, #27724	; 0x6c4c
  112fac:	e3400014 	movt	r0, #20
  112fb0:	ebffc057 	bl	103114 <rt_kprintf>
  112fb4:	e300156c 	movw	r1, #1388	; 0x56c
  112fb8:	e3060a98 	movw	r0, #27288	; 0x6a98
  112fbc:	e3400014 	movt	r0, #20
  112fc0:	ebffdf73 	bl	10ad94 <sys_arch_assert>
  return nready;
  112fc4:	e51b300c 	ldr	r3, [fp, #-12]
}
  112fc8:	e1a00003 	mov	r0, r3
  112fcc:	e24bd004 	sub	sp, fp, #4
  112fd0:	e8bd8800 	pop	{fp, pc}

00112fd4 <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  112fd4:	e92d4800 	push	{fp, lr}
  112fd8:	e28db004 	add	fp, sp, #4
  112fdc:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  112fe0:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  112fe4:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  112fe8:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  112fec:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  112ff0:	e3a03000 	mov	r3, #0
  112ff4:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  112ff8:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  112ffc:	e58d3008 	str	r3, [sp, #8]
  113000:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113004:	e58d3004 	str	r3, [sp, #4]
  113008:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  11300c:	e58d3000 	str	r3, [sp]
  113010:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113014:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113018:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  11301c:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113020:	ebfffee0 	bl	112ba8 <lwip_selscan>
  113024:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  113028:	e51b300c 	ldr	r3, [fp, #-12]
  11302c:	e3530000 	cmp	r3, #0
  113030:	1a000163 	bne	1135c4 <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  113034:	e59b3004 	ldr	r3, [fp, #4]
  113038:	e3530000 	cmp	r3, #0
  11303c:	0a000007 	beq	113060 <lwip_select+0x8c>
  113040:	e59b3004 	ldr	r3, [fp, #4]
  113044:	e1c320d0 	ldrd	r2, [r3]
  113048:	e1923003 	orrs	r3, r2, r3
  11304c:	1a000003 	bne	113060 <lwip_select+0x8c>
  113050:	e59b3004 	ldr	r3, [fp, #4]
  113054:	e5933008 	ldr	r3, [r3, #8]
  113058:	e3530000 	cmp	r3, #0
  11305c:	0a00015a 	beq	1135cc <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  113060:	e3a03000 	mov	r3, #0
  113064:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  113068:	e3a03000 	mov	r3, #0
  11306c:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  113070:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113074:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  113078:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11307c:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  113080:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113084:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  113088:	e3a03000 	mov	r3, #0
  11308c:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  113090:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113094:	e2833018 	add	r3, r3, #24
  113098:	e3a01000 	mov	r1, #0
  11309c:	e1a00003 	mov	r0, r3
  1130a0:	ebffdd5f 	bl	10a624 <sys_sem_new>
  1130a4:	e1a03000 	mov	r3, r0
  1130a8:	e3530000 	cmp	r3, #0
  1130ac:	0a000005 	beq	1130c8 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  1130b0:	eb0096c4 	bl	138bc8 <__errno_location>
  1130b4:	e1a02000 	mov	r2, r0
  1130b8:	e3a0300c 	mov	r3, #12
  1130bc:	e5823000 	str	r3, [r2]
      return -1;
  1130c0:	e3e03000 	mvn	r3, #0
  1130c4:	ea00015f 	b	113648 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  1130c8:	ebffbc5b 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  1130cc:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1130d0:	e3403014 	movt	r3, #20
  1130d4:	e5933000 	ldr	r3, [r3]
  1130d8:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  1130dc:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1130e0:	e3403014 	movt	r3, #20
  1130e4:	e5933000 	ldr	r3, [r3]
  1130e8:	e3530000 	cmp	r3, #0
  1130ec:	0a000004 	beq	113104 <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  1130f0:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1130f4:	e3403014 	movt	r3, #20
  1130f8:	e5933000 	ldr	r3, [r3]
  1130fc:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113100:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  113104:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113108:	e3403014 	movt	r3, #20
  11310c:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113110:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113114:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113118:	e3403014 	movt	r3, #20
  11311c:	e5933000 	ldr	r3, [r3]
  113120:	e2832001 	add	r2, r3, #1
  113124:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113128:	e3403014 	movt	r3, #20
  11312c:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  113130:	ebffbc47 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  113134:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113138:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  11313c:	e3a03000 	mov	r3, #0
  113140:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113144:	ea000049 	b	113270 <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  113148:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11314c:	e3530000 	cmp	r3, #0
  113150:	0a000009 	beq	11317c <lwip_select+0x1a8>
  113154:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113158:	e1a022a3 	lsr	r2, r3, #5
  11315c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113160:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113168:	e203301f 	and	r3, r3, #31
  11316c:	e1a03332 	lsr	r3, r2, r3
  113170:	e2033001 	and	r3, r3, #1
  113174:	e3530000 	cmp	r3, #0
  113178:	1a000019 	bne	1131e4 <lwip_select+0x210>
  11317c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113180:	e3530000 	cmp	r3, #0
  113184:	0a000009 	beq	1131b0 <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  113188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11318c:	e1a022a3 	lsr	r2, r3, #5
  113190:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113194:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11319c:	e203301f 	and	r3, r3, #31
  1131a0:	e1a03332 	lsr	r3, r2, r3
  1131a4:	e2033001 	and	r3, r3, #1
  1131a8:	e3530000 	cmp	r3, #0
  1131ac:	1a00000c 	bne	1131e4 <lwip_select+0x210>
  1131b0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1131b4:	e3530000 	cmp	r3, #0
  1131b8:	0a000029 	beq	113264 <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  1131bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1131c0:	e1a022a3 	lsr	r2, r3, #5
  1131c4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1131c8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1131cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1131d0:	e203301f 	and	r3, r3, #31
  1131d4:	e1a03332 	lsr	r3, r2, r3
  1131d8:	e2033001 	and	r3, r3, #1
  1131dc:	e3530000 	cmp	r3, #0
  1131e0:	0a00001f 	beq	113264 <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  1131e4:	ebffbc14 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  1131e8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1131ec:	ebfff699 	bl	110c58 <tryget_socket>
  1131f0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  1131f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1131f8:	e3530000 	cmp	r3, #0
  1131fc:	0a000011 	beq	113248 <lwip_select+0x274>
          sock->select_waiting++;
  113200:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113204:	e5d33011 	ldrb	r3, [r3, #17]
  113208:	e2833001 	add	r3, r3, #1
  11320c:	e6ef2073 	uxtb	r2, r3
  113210:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113214:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113218:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11321c:	e5d33011 	ldrb	r3, [r3, #17]
  113220:	e3530000 	cmp	r3, #0
  113224:	1a00000d 	bne	113260 <lwip_select+0x28c>
  113228:	e3060c58 	movw	r0, #27736	; 0x6c58
  11322c:	e3400014 	movt	r0, #20
  113230:	ebffbfb7 	bl	103114 <rt_kprintf>
  113234:	e30015c1 	movw	r1, #1473	; 0x5c1
  113238:	e3060a98 	movw	r0, #27288	; 0x6a98
  11323c:	e3400014 	movt	r0, #20
  113240:	ebffded3 	bl	10ad94 <sys_arch_assert>
  113244:	ea000005 	b	113260 <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  113248:	e3e03000 	mvn	r3, #0
  11324c:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  113250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113254:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  113258:	ebffbbfd 	bl	102254 <rt_exit_critical>
          break;
  11325c:	ea000007 	b	113280 <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  113260:	ebffbbfb 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113264:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113268:	e2833001 	add	r3, r3, #1
  11326c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113270:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113274:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113278:	e1520003 	cmp	r2, r3
  11327c:	baffffb1 	blt	113148 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  113280:	e51b300c 	ldr	r3, [fp, #-12]
  113284:	e3530000 	cmp	r3, #0
  113288:	ba00002e 	blt	113348 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  11328c:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113290:	e58d3008 	str	r3, [sp, #8]
  113294:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113298:	e58d3004 	str	r3, [sp, #4]
  11329c:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1132a0:	e58d3000 	str	r3, [sp]
  1132a4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1132a8:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1132ac:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1132b0:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1132b4:	ebfffe3b 	bl	112ba8 <lwip_selscan>
  1132b8:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  1132bc:	e51b300c 	ldr	r3, [fp, #-12]
  1132c0:	e3530000 	cmp	r3, #0
  1132c4:	1a00001f 	bne	113348 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  1132c8:	e59b3004 	ldr	r3, [fp, #4]
  1132cc:	e3530000 	cmp	r3, #0
  1132d0:	1a000002 	bne	1132e0 <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  1132d4:	e3a03000 	mov	r3, #0
  1132d8:	e50b3010 	str	r3, [fp, #-16]
  1132dc:	ea000013 	b	113330 <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  1132e0:	e59b3004 	ldr	r3, [fp, #4]
  1132e4:	e1c320d0 	ldrd	r2, [r3]
  1132e8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1132ec:	e0000293 	mul	r0, r3, r2
  1132f0:	e59b3004 	ldr	r3, [fp, #4]
  1132f4:	e5933008 	ldr	r3, [r3, #8]
  1132f8:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  1132fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  113300:	e3413062 	movt	r3, #4194	; 0x1062
  113304:	e0c32391 	smull	r2, r3, r1, r3
  113308:	e1a02343 	asr	r2, r3, #6
  11330c:	e1a03fc1 	asr	r3, r1, #31
  113310:	e0423003 	sub	r3, r2, r3
  113314:	e0803003 	add	r3, r0, r3
  113318:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  11331c:	e51b3010 	ldr	r3, [fp, #-16]
  113320:	e3530000 	cmp	r3, #0
  113324:	1a000001 	bne	113330 <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  113328:	e3a03001 	mov	r3, #1
  11332c:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  113330:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113334:	e2833018 	add	r3, r3, #24
  113338:	e51b1010 	ldr	r1, [fp, #-16]
  11333c:	e1a00003 	mov	r0, r3
  113340:	ebffdcf8 	bl	10a728 <sys_arch_sem_wait>
  113344:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113348:	e3a03000 	mov	r3, #0
  11334c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113350:	ea000049 	b	11347c <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  113354:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113358:	e3530000 	cmp	r3, #0
  11335c:	0a000009 	beq	113388 <lwip_select+0x3b4>
  113360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113364:	e1a022a3 	lsr	r2, r3, #5
  113368:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11336c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113370:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113374:	e203301f 	and	r3, r3, #31
  113378:	e1a03332 	lsr	r3, r2, r3
  11337c:	e2033001 	and	r3, r3, #1
  113380:	e3530000 	cmp	r3, #0
  113384:	1a000019 	bne	1133f0 <lwip_select+0x41c>
  113388:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11338c:	e3530000 	cmp	r3, #0
  113390:	0a000009 	beq	1133bc <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  113394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113398:	e1a022a3 	lsr	r2, r3, #5
  11339c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1133a0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1133a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1133a8:	e203301f 	and	r3, r3, #31
  1133ac:	e1a03332 	lsr	r3, r2, r3
  1133b0:	e2033001 	and	r3, r3, #1
  1133b4:	e3530000 	cmp	r3, #0
  1133b8:	1a00000c 	bne	1133f0 <lwip_select+0x41c>
  1133bc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1133c0:	e3530000 	cmp	r3, #0
  1133c4:	0a000029 	beq	113470 <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  1133c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1133cc:	e1a022a3 	lsr	r2, r3, #5
  1133d0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1133d4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1133d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1133dc:	e203301f 	and	r3, r3, #31
  1133e0:	e1a03332 	lsr	r3, r2, r3
  1133e4:	e2033001 	and	r3, r3, #1
  1133e8:	e3530000 	cmp	r3, #0
  1133ec:	0a00001f 	beq	113470 <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  1133f0:	ebffbb91 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  1133f4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1133f8:	ebfff616 	bl	110c58 <tryget_socket>
  1133fc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  113400:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113404:	e3530000 	cmp	r3, #0
  113408:	0a000015 	beq	113464 <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  11340c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113410:	e5d33011 	ldrb	r3, [r3, #17]
  113414:	e3530000 	cmp	r3, #0
  113418:	1a000006 	bne	113438 <lwip_select+0x464>
  11341c:	e3060c58 	movw	r0, #27736	; 0x6c58
  113420:	e3400014 	movt	r0, #20
  113424:	ebffbf3a 	bl	103114 <rt_kprintf>
  113428:	e30015ef 	movw	r1, #1519	; 0x5ef
  11342c:	e3060a98 	movw	r0, #27288	; 0x6a98
  113430:	e3400014 	movt	r0, #20
  113434:	ebffde56 	bl	10ad94 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  113438:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11343c:	e5d33011 	ldrb	r3, [r3, #17]
  113440:	e3530000 	cmp	r3, #0
  113444:	0a000008 	beq	11346c <lwip_select+0x498>
            sock->select_waiting--;
  113448:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11344c:	e5d33011 	ldrb	r3, [r3, #17]
  113450:	e2433001 	sub	r3, r3, #1
  113454:	e6ef2073 	uxtb	r2, r3
  113458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11345c:	e5c32011 	strb	r2, [r3, #17]
  113460:	ea000001 	b	11346c <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  113464:	e3e03000 	mvn	r3, #0
  113468:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  11346c:	ebffbb78 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113470:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113474:	e2833001 	add	r3, r3, #1
  113478:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11347c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113484:	e1520003 	cmp	r2, r3
  113488:	baffffb1 	blt	113354 <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  11348c:	ebffbb6a 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  113490:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113494:	e3530000 	cmp	r3, #0
  113498:	0a000002 	beq	1134a8 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  11349c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1134a0:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  1134a4:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  1134a8:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1134ac:	e3403014 	movt	r3, #20
  1134b0:	e5932000 	ldr	r2, [r3]
  1134b4:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1134b8:	e1520003 	cmp	r2, r3
  1134bc:	1a00000e 	bne	1134fc <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  1134c0:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1134c4:	e3530000 	cmp	r3, #0
  1134c8:	0a000006 	beq	1134e8 <lwip_select+0x514>
  1134cc:	e3060c74 	movw	r0, #27764	; 0x6c74
  1134d0:	e3400014 	movt	r0, #20
  1134d4:	ebffbf0e 	bl	103114 <rt_kprintf>
  1134d8:	e3a01c06 	mov	r1, #1536	; 0x600
  1134dc:	e3060a98 	movw	r0, #27288	; 0x6a98
  1134e0:	e3400014 	movt	r0, #20
  1134e4:	ebffde2a 	bl	10ad94 <sys_arch_assert>
      select_cb_list = select_cb.next;
  1134e8:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  1134ec:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1134f0:	e3403014 	movt	r3, #20
  1134f4:	e5832000 	str	r2, [r3]
  1134f8:	ea00000c 	b	113530 <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  1134fc:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113500:	e3530000 	cmp	r3, #0
  113504:	1a000006 	bne	113524 <lwip_select+0x550>
  113508:	e3060c8c 	movw	r0, #27788	; 0x6c8c
  11350c:	e3400014 	movt	r0, #20
  113510:	ebffbeff 	bl	103114 <rt_kprintf>
  113514:	e3001603 	movw	r1, #1539	; 0x603
  113518:	e3060a98 	movw	r0, #27288	; 0x6a98
  11351c:	e3400014 	movt	r0, #20
  113520:	ebffde1b 	bl	10ad94 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  113524:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113528:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  11352c:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113530:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113534:	e3403014 	movt	r3, #20
  113538:	e5933000 	ldr	r3, [r3]
  11353c:	e2832001 	add	r2, r3, #1
  113540:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113544:	e3403014 	movt	r3, #20
  113548:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  11354c:	ebffbb40 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  113550:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113554:	e2833018 	add	r3, r3, #24
  113558:	e1a00003 	mov	r0, r3
  11355c:	ebffdc5b 	bl	10a6d0 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  113560:	e51b300c 	ldr	r3, [fp, #-12]
  113564:	e3530000 	cmp	r3, #0
  113568:	aa000005 	bge	113584 <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  11356c:	eb009595 	bl	138bc8 <__errno_location>
  113570:	e1a02000 	mov	r2, r0
  113574:	e3a03009 	mov	r3, #9
  113578:	e5823000 	str	r3, [r2]
      return -1;
  11357c:	e3e03000 	mvn	r3, #0
  113580:	ea000030 	b	113648 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  113584:	e51b3008 	ldr	r3, [fp, #-8]
  113588:	e3730001 	cmn	r3, #1
  11358c:	0a000010 	beq	1135d4 <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113590:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113594:	e58d3008 	str	r3, [sp, #8]
  113598:	e24b3e12 	sub	r3, fp, #288	; 0x120
  11359c:	e58d3004 	str	r3, [sp, #4]
  1135a0:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1135a4:	e58d3000 	str	r3, [sp]
  1135a8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135ac:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1135b0:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1135b4:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1135b8:	ebfffd7a 	bl	112ba8 <lwip_selscan>
  1135bc:	e50b000c 	str	r0, [fp, #-12]
  1135c0:	ea000004 	b	1135d8 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  1135c4:	e320f000 	nop	{0}
  1135c8:	ea000002 	b	1135d8 <lwip_select+0x604>
      goto return_copy_fdsets;
  1135cc:	e320f000 	nop	{0}
  1135d0:	ea000000 	b	1135d8 <lwip_select+0x604>
      goto return_copy_fdsets;
  1135d4:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  1135d8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1135dc:	e3530000 	cmp	r3, #0
  1135e0:	0a000005 	beq	1135fc <lwip_select+0x628>
    *readset = lreadset;
  1135e4:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1135e8:	e1a00003 	mov	r0, r3
  1135ec:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1135f0:	e3a02080 	mov	r2, #128	; 0x80
  1135f4:	e1a01003 	mov	r1, r3
  1135f8:	eb00b521 	bl	140a84 <memcpy>
  }
  if (writeset) {
  1135fc:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113600:	e3530000 	cmp	r3, #0
  113604:	0a000005 	beq	113620 <lwip_select+0x64c>
    *writeset = lwriteset;
  113608:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11360c:	e1a00003 	mov	r0, r3
  113610:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113614:	e3a02080 	mov	r2, #128	; 0x80
  113618:	e1a01003 	mov	r1, r3
  11361c:	eb00b518 	bl	140a84 <memcpy>
  }
  if (exceptset) {
  113620:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113624:	e3530000 	cmp	r3, #0
  113628:	0a000005 	beq	113644 <lwip_select+0x670>
    *exceptset = lexceptset;
  11362c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113630:	e1a00003 	mov	r0, r3
  113634:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113638:	e3a02080 	mov	r2, #128	; 0x80
  11363c:	e1a01003 	mov	r1, r3
  113640:	eb00b50f 	bl	140a84 <memcpy>
  }
  return nready;
  113644:	e51b300c 	ldr	r3, [fp, #-12]
}
  113648:	e1a00003 	mov	r0, r3
  11364c:	e24bd004 	sub	sp, fp, #4
  113650:	e8bd8800 	pop	{fp, pc}

00113654 <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  113654:	e92d4800 	push	{fp, lr}
  113658:	e28db004 	add	fp, sp, #4
  11365c:	e24dd028 	sub	sp, sp, #40	; 0x28
  113660:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113664:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113668:	e1a03002 	mov	r3, r2
  11366c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  113670:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113674:	e3530000 	cmp	r3, #0
  113678:	0a0000e5 	beq	113a14 <event_callback+0x3c0>
    s = conn->socket;
  11367c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113680:	e593301c 	ldr	r3, [r3, #28]
  113684:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  113688:	e51b3008 	ldr	r3, [fp, #-8]
  11368c:	e3530000 	cmp	r3, #0
  113690:	aa000012 	bge	1136e0 <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  113694:	ebffbae8 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  113698:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11369c:	e593301c 	ldr	r3, [r3, #28]
  1136a0:	e3530000 	cmp	r3, #0
  1136a4:	aa000009 	bge	1136d0 <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  1136a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1136ac:	e3530000 	cmp	r3, #0
  1136b0:	1a000004 	bne	1136c8 <event_callback+0x74>
          conn->socket--;
  1136b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1136b8:	e593301c 	ldr	r3, [r3, #28]
  1136bc:	e2432001 	sub	r2, r3, #1
  1136c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1136c4:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  1136c8:	ebffbae1 	bl	102254 <rt_exit_critical>
        return;
  1136cc:	ea0000d3 	b	113a20 <event_callback+0x3cc>
      }
      s = conn->socket;
  1136d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1136d4:	e593301c 	ldr	r3, [r3, #28]
  1136d8:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  1136dc:	ebffbadc 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  1136e0:	e51b0008 	ldr	r0, [fp, #-8]
  1136e4:	ebfff536 	bl	110bc4 <get_socket>
  1136e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  1136ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136f0:	e3530000 	cmp	r3, #0
  1136f4:	0a0000c8 	beq	113a1c <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  1136f8:	ebffbacf 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  1136fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113700:	e3530004 	cmp	r3, #4
  113704:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  113708:	ea000022 	b	113798 <event_callback+0x144>
  11370c:	00113720 	.word	0x00113720
  113710:	00113744 	.word	0x00113744
  113714:	00113768 	.word	0x00113768
  113718:	00113778 	.word	0x00113778
  11371c:	00113788 	.word	0x00113788
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  113720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113724:	e1d330fa 	ldrsh	r3, [r3, #10]
  113728:	e6ff3073 	uxth	r3, r3
  11372c:	e2833001 	add	r3, r3, #1
  113730:	e6ff3073 	uxth	r3, r3
  113734:	e6bf2073 	sxth	r2, r3
  113738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11373c:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113740:	ea00001c 	b	1137b8 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  113744:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113748:	e1d330fa 	ldrsh	r3, [r3, #10]
  11374c:	e6ff3073 	uxth	r3, r3
  113750:	e2433001 	sub	r3, r3, #1
  113754:	e6ff3073 	uxth	r3, r3
  113758:	e6bf2073 	sxth	r2, r3
  11375c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113760:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113764:	ea000013 	b	1137b8 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  113768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11376c:	e3a02001 	mov	r2, #1
  113770:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113774:	ea00000f 	b	1137b8 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  113778:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11377c:	e3a02000 	mov	r2, #0
  113780:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113784:	ea00000b 	b	1137b8 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  113788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11378c:	e3a02001 	mov	r2, #1
  113790:	e1c320be 	strh	r2, [r3, #14]
      break;
  113794:	ea000007 	b	1137b8 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113798:	e3060ca4 	movw	r0, #27812	; 0x6ca4
  11379c:	e3400014 	movt	r0, #20
  1137a0:	ebffbe5b 	bl	103114 <rt_kprintf>
  1137a4:	e300167c 	movw	r1, #1660	; 0x67c
  1137a8:	e3060a98 	movw	r0, #27288	; 0x6a98
  1137ac:	e3400014 	movt	r0, #20
  1137b0:	ebffdd77 	bl	10ad94 <sys_arch_assert>
      break;
  1137b4:	e320f000 	nop	{0}
  }

  int mask = 0;
  1137b8:	e3a03000 	mov	r3, #0
  1137bc:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  1137c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137c4:	e3530000 	cmp	r3, #0
  1137c8:	0a00001b 	beq	11383c <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  1137cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137d0:	e5933004 	ldr	r3, [r3, #4]
  1137d4:	e3530000 	cmp	r3, #0
  1137d8:	1a000003 	bne	1137ec <event_callback+0x198>
  1137dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137e0:	e1d330fa 	ldrsh	r3, [r3, #10]
  1137e4:	e3530000 	cmp	r3, #0
  1137e8:	0a000002 	beq	1137f8 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  1137ec:	e51b3010 	ldr	r3, [fp, #-16]
  1137f0:	e3833001 	orr	r3, r3, #1
  1137f4:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  1137f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137fc:	e1d330bc 	ldrh	r3, [r3, #12]
  113800:	e3530000 	cmp	r3, #0
  113804:	0a000002 	beq	113814 <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  113808:	e51b3010 	ldr	r3, [fp, #-16]
  11380c:	e3833002 	orr	r3, r3, #2
  113810:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113818:	e1d330be 	ldrh	r3, [r3, #14]
  11381c:	e3530000 	cmp	r3, #0
  113820:	0a000005 	beq	11383c <event_callback+0x1e8>
      {
          mask |= POLLERR;
  113824:	e51b3010 	ldr	r3, [fp, #-16]
  113828:	e3833004 	orr	r3, r3, #4
  11382c:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  113830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113834:	e3a02000 	mov	r2, #0
  113838:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  11383c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113840:	e5d33011 	ldrb	r3, [r3, #17]
  113844:	e3530000 	cmp	r3, #0
  113848:	1a000001 	bne	113854 <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  11384c:	ebffba80 	bl	102254 <rt_exit_critical>
    return;
  113850:	ea000072 	b	113a20 <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  113854:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113858:	e30d3c18 	movw	r3, #56344	; 0xdc18
  11385c:	e3403014 	movt	r3, #20
  113860:	e5933000 	ldr	r3, [r3]
  113864:	e50b300c 	str	r3, [fp, #-12]
  113868:	ea000064 	b	113a00 <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  11386c:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113870:	e3403014 	movt	r3, #20
  113874:	e5933000 	ldr	r3, [r3]
  113878:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  11387c:	e51b300c 	ldr	r3, [fp, #-12]
  113880:	e5933014 	ldr	r3, [r3, #20]
  113884:	e3530000 	cmp	r3, #0
  113888:	1a000050 	bne	1139d0 <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  11388c:	e3a03000 	mov	r3, #0
  113890:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113894:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113898:	e1d330fa 	ldrsh	r3, [r3, #10]
  11389c:	e3530000 	cmp	r3, #0
  1138a0:	da000010 	ble	1138e8 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  1138a4:	e51b300c 	ldr	r3, [fp, #-12]
  1138a8:	e5933008 	ldr	r3, [r3, #8]
  1138ac:	e3530000 	cmp	r3, #0
  1138b0:	0a00000c 	beq	1138e8 <event_callback+0x294>
  1138b4:	e51b300c 	ldr	r3, [fp, #-12]
  1138b8:	e5933008 	ldr	r3, [r3, #8]
  1138bc:	e51b2008 	ldr	r2, [fp, #-8]
  1138c0:	e1a022a2 	lsr	r2, r2, #5
  1138c4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1138c8:	e51b3008 	ldr	r3, [fp, #-8]
  1138cc:	e203301f 	and	r3, r3, #31
  1138d0:	e1a03332 	lsr	r3, r2, r3
  1138d4:	e2033001 	and	r3, r3, #1
  1138d8:	e3530000 	cmp	r3, #0
  1138dc:	0a000001 	beq	1138e8 <event_callback+0x294>
          do_signal = 1;
  1138e0:	e3a03001 	mov	r3, #1
  1138e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  1138e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1138ec:	e1d330bc 	ldrh	r3, [r3, #12]
  1138f0:	e3530000 	cmp	r3, #0
  1138f4:	0a000013 	beq	113948 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  1138f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1138fc:	e3530000 	cmp	r3, #0
  113900:	1a000010 	bne	113948 <event_callback+0x2f4>
  113904:	e51b300c 	ldr	r3, [fp, #-12]
  113908:	e593300c 	ldr	r3, [r3, #12]
  11390c:	e3530000 	cmp	r3, #0
  113910:	0a00000c 	beq	113948 <event_callback+0x2f4>
  113914:	e51b300c 	ldr	r3, [fp, #-12]
  113918:	e593300c 	ldr	r3, [r3, #12]
  11391c:	e51b2008 	ldr	r2, [fp, #-8]
  113920:	e1a022a2 	lsr	r2, r2, #5
  113924:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113928:	e51b3008 	ldr	r3, [fp, #-8]
  11392c:	e203301f 	and	r3, r3, #31
  113930:	e1a03332 	lsr	r3, r2, r3
  113934:	e2033001 	and	r3, r3, #1
  113938:	e3530000 	cmp	r3, #0
  11393c:	0a000001 	beq	113948 <event_callback+0x2f4>
          do_signal = 1;
  113940:	e3a03001 	mov	r3, #1
  113944:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  113948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11394c:	e1d330be 	ldrh	r3, [r3, #14]
  113950:	e3530000 	cmp	r3, #0
  113954:	0a000013 	beq	1139a8 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  113958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11395c:	e3530000 	cmp	r3, #0
  113960:	1a000010 	bne	1139a8 <event_callback+0x354>
  113964:	e51b300c 	ldr	r3, [fp, #-12]
  113968:	e5933010 	ldr	r3, [r3, #16]
  11396c:	e3530000 	cmp	r3, #0
  113970:	0a00000c 	beq	1139a8 <event_callback+0x354>
  113974:	e51b300c 	ldr	r3, [fp, #-12]
  113978:	e5933010 	ldr	r3, [r3, #16]
  11397c:	e51b2008 	ldr	r2, [fp, #-8]
  113980:	e1a022a2 	lsr	r2, r2, #5
  113984:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113988:	e51b3008 	ldr	r3, [fp, #-8]
  11398c:	e203301f 	and	r3, r3, #31
  113990:	e1a03332 	lsr	r3, r2, r3
  113994:	e2033001 	and	r3, r3, #1
  113998:	e3530000 	cmp	r3, #0
  11399c:	0a000001 	beq	1139a8 <event_callback+0x354>
          do_signal = 1;
  1139a0:	e3a03001 	mov	r3, #1
  1139a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  1139a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1139ac:	e3530000 	cmp	r3, #0
  1139b0:	0a000006 	beq	1139d0 <event_callback+0x37c>
        scb->sem_signalled = 1;
  1139b4:	e51b300c 	ldr	r3, [fp, #-12]
  1139b8:	e3a02001 	mov	r2, #1
  1139bc:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  1139c0:	e51b300c 	ldr	r3, [fp, #-12]
  1139c4:	e2833018 	add	r3, r3, #24
  1139c8:	e1a00003 	mov	r0, r3
  1139cc:	ebffdb4a 	bl	10a6fc <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  1139d0:	ebffba1f 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  1139d4:	ebffba18 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  1139d8:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1139dc:	e3403014 	movt	r3, #20
  1139e0:	e5933000 	ldr	r3, [r3]
  1139e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1139e8:	e1520003 	cmp	r2, r3
  1139ec:	0a000000 	beq	1139f4 <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  1139f0:	eaffff98 	b	113858 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  1139f4:	e51b300c 	ldr	r3, [fp, #-12]
  1139f8:	e5933000 	ldr	r3, [r3]
  1139fc:	e50b300c 	str	r3, [fp, #-12]
  113a00:	e51b300c 	ldr	r3, [fp, #-12]
  113a04:	e3530000 	cmp	r3, #0
  113a08:	1affff97 	bne	11386c <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113a0c:	ebffba10 	bl	102254 <rt_exit_critical>
  113a10:	ea000002 	b	113a20 <event_callback+0x3cc>
    return;
  113a14:	e320f000 	nop	{0}
  113a18:	ea000000 	b	113a20 <event_callback+0x3cc>
      return;
  113a1c:	e320f000 	nop	{0}
}
  113a20:	e24bd004 	sub	sp, fp, #4
  113a24:	e8bd8800 	pop	{fp, pc}

00113a28 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  113a28:	e92d4800 	push	{fp, lr}
  113a2c:	e28db004 	add	fp, sp, #4
  113a30:	e24dd028 	sub	sp, sp, #40	; 0x28
  113a34:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113a38:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113a3c:	e3a03000 	mov	r3, #0
  113a40:	e54b3005 	strb	r3, [fp, #-5]
  113a44:	e3a03000 	mov	r3, #0
  113a48:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113a4c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113a50:	ebfff45b 	bl	110bc4 <get_socket>
  113a54:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113a58:	e51b300c 	ldr	r3, [fp, #-12]
  113a5c:	e3530000 	cmp	r3, #0
  113a60:	1a000001 	bne	113a6c <lwip_shutdown+0x44>
    return -1;
  113a64:	e3e03000 	mvn	r3, #0
  113a68:	ea000067 	b	113c0c <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113a6c:	e51b300c 	ldr	r3, [fp, #-12]
  113a70:	e5933000 	ldr	r3, [r3]
  113a74:	e3530000 	cmp	r3, #0
  113a78:	0a000014 	beq	113ad0 <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113a7c:	e51b300c 	ldr	r3, [fp, #-12]
  113a80:	e5933000 	ldr	r3, [r3]
  113a84:	e5933000 	ldr	r3, [r3]
  113a88:	e20330f0 	and	r3, r3, #240	; 0xf0
  113a8c:	e3530010 	cmp	r3, #16
  113a90:	0a00001d 	beq	113b0c <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113a94:	e3a0305f 	mov	r3, #95	; 0x5f
  113a98:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113a9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113aa0:	e6ef2073 	uxtb	r2, r3
  113aa4:	e51b300c 	ldr	r3, [fp, #-12]
  113aa8:	e5c32010 	strb	r2, [r3, #16]
  113aac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113ab0:	e3530000 	cmp	r3, #0
  113ab4:	0a000003 	beq	113ac8 <lwip_shutdown+0xa0>
  113ab8:	eb009442 	bl	138bc8 <__errno_location>
  113abc:	e1a02000 	mov	r2, r0
  113ac0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113ac4:	e5823000 	str	r3, [r2]
      return -1;
  113ac8:	e3e03000 	mvn	r3, #0
  113acc:	ea00004e 	b	113c0c <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113ad0:	e3a0306b 	mov	r3, #107	; 0x6b
  113ad4:	e50b3010 	str	r3, [fp, #-16]
  113ad8:	e51b3010 	ldr	r3, [fp, #-16]
  113adc:	e6ef2073 	uxtb	r2, r3
  113ae0:	e51b300c 	ldr	r3, [fp, #-12]
  113ae4:	e5c32010 	strb	r2, [r3, #16]
  113ae8:	e51b3010 	ldr	r3, [fp, #-16]
  113aec:	e3530000 	cmp	r3, #0
  113af0:	0a000003 	beq	113b04 <lwip_shutdown+0xdc>
  113af4:	eb009433 	bl	138bc8 <__errno_location>
  113af8:	e1a02000 	mov	r2, r0
  113afc:	e51b3010 	ldr	r3, [fp, #-16]
  113b00:	e5823000 	str	r3, [r2]
    return -1;
  113b04:	e3e03000 	mvn	r3, #0
  113b08:	ea00003f 	b	113c0c <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113b0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113b10:	e3530000 	cmp	r3, #0
  113b14:	1a000002 	bne	113b24 <lwip_shutdown+0xfc>
    shut_rx = 1;
  113b18:	e3a03001 	mov	r3, #1
  113b1c:	e54b3005 	strb	r3, [fp, #-5]
  113b20:	ea00001c 	b	113b98 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113b24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113b28:	e3530001 	cmp	r3, #1
  113b2c:	1a000002 	bne	113b3c <lwip_shutdown+0x114>
    shut_tx = 1;
  113b30:	e3a03001 	mov	r3, #1
  113b34:	e54b3006 	strb	r3, [fp, #-6]
  113b38:	ea000016 	b	113b98 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113b3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113b40:	e3530002 	cmp	r3, #2
  113b44:	1a000004 	bne	113b5c <lwip_shutdown+0x134>
    shut_rx = 1;
  113b48:	e3a03001 	mov	r3, #1
  113b4c:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113b50:	e3a03001 	mov	r3, #1
  113b54:	e54b3006 	strb	r3, [fp, #-6]
  113b58:	ea00000e 	b	113b98 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113b5c:	e3a03016 	mov	r3, #22
  113b60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113b68:	e6ef2073 	uxtb	r2, r3
  113b6c:	e51b300c 	ldr	r3, [fp, #-12]
  113b70:	e5c32010 	strb	r2, [r3, #16]
  113b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113b78:	e3530000 	cmp	r3, #0
  113b7c:	0a000003 	beq	113b90 <lwip_shutdown+0x168>
  113b80:	eb009410 	bl	138bc8 <__errno_location>
  113b84:	e1a02000 	mov	r2, r0
  113b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113b8c:	e5823000 	str	r3, [r2]
    return -1;
  113b90:	e3e03000 	mvn	r3, #0
  113b94:	ea00001c 	b	113c0c <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113b98:	e51b300c 	ldr	r3, [fp, #-12]
  113b9c:	e5933000 	ldr	r3, [r3]
  113ba0:	e55b2006 	ldrb	r2, [fp, #-6]
  113ba4:	e55b1005 	ldrb	r1, [fp, #-5]
  113ba8:	e1a00003 	mov	r0, r3
  113bac:	ebffe0b7 	bl	10be90 <netconn_shutdown>
  113bb0:	e1a03000 	mov	r3, r0
  113bb4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113bb8:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113bbc:	e1a00003 	mov	r0, r3
  113bc0:	ebffefd7 	bl	10fb24 <err_to_errno>
  113bc4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113bc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113bcc:	e6ef2073 	uxtb	r2, r3
  113bd0:	e51b300c 	ldr	r3, [fp, #-12]
  113bd4:	e5c32010 	strb	r2, [r3, #16]
  113bd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113bdc:	e3530000 	cmp	r3, #0
  113be0:	0a000003 	beq	113bf4 <lwip_shutdown+0x1cc>
  113be4:	eb0093f7 	bl	138bc8 <__errno_location>
  113be8:	e1a02000 	mov	r2, r0
  113bec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113bf0:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113bf4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113bf8:	e3530000 	cmp	r3, #0
  113bfc:	1a000001 	bne	113c08 <lwip_shutdown+0x1e0>
  113c00:	e3a03000 	mov	r3, #0
  113c04:	ea000000 	b	113c0c <lwip_shutdown+0x1e4>
  113c08:	e3e03000 	mvn	r3, #0
}
  113c0c:	e1a00003 	mov	r0, r3
  113c10:	e24bd004 	sub	sp, fp, #4
  113c14:	e8bd8800 	pop	{fp, pc}

00113c18 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113c18:	e92d4810 	push	{r4, fp, lr}
  113c1c:	e28db008 	add	fp, sp, #8
  113c20:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113c24:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113c28:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113c2c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113c30:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113c34:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113c38:	ebfff3e1 	bl	110bc4 <get_socket>
  113c3c:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113c40:	e51b3010 	ldr	r3, [fp, #-16]
  113c44:	e3530000 	cmp	r3, #0
  113c48:	1a000001 	bne	113c54 <lwip_getaddrname+0x3c>
    return -1;
  113c4c:	e3e03000 	mvn	r3, #0
  113c50:	ea00004d 	b	113d8c <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113c54:	e51b3010 	ldr	r3, [fp, #-16]
  113c58:	e5930000 	ldr	r0, [r3]
  113c5c:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113c60:	e24b2032 	sub	r2, fp, #50	; 0x32
  113c64:	e24b1030 	sub	r1, fp, #48	; 0x30
  113c68:	ebffdd39 	bl	10b154 <netconn_getaddr>
  113c6c:	e1a03000 	mov	r3, r0
  113c70:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113c74:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113c78:	e3530000 	cmp	r3, #0
  113c7c:	0a000010 	beq	113cc4 <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113c80:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113c84:	e1a00003 	mov	r0, r3
  113c88:	ebffefa5 	bl	10fb24 <err_to_errno>
  113c8c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113c90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c94:	e6ef2073 	uxtb	r2, r3
  113c98:	e51b3010 	ldr	r3, [fp, #-16]
  113c9c:	e5c32010 	strb	r2, [r3, #16]
  113ca0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ca4:	e3530000 	cmp	r3, #0
  113ca8:	0a000003 	beq	113cbc <lwip_getaddrname+0xa4>
  113cac:	eb0093c5 	bl	138bc8 <__errno_location>
  113cb0:	e1a02000 	mov	r2, r0
  113cb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113cb8:	e5823000 	str	r3, [r2]
    return -1;
  113cbc:	e3e03000 	mvn	r3, #0
  113cc0:	ea000031 	b	113d8c <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113cc4:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113cc8:	e3a02010 	mov	r2, #16
  113ccc:	e5c32000 	strb	r2, [r3]
  113cd0:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113cd4:	e3a02002 	mov	r2, #2
  113cd8:	e5c32001 	strb	r2, [r3, #1]
  113cdc:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113ce0:	e24b402c 	sub	r4, fp, #44	; 0x2c
  113ce4:	e1a00003 	mov	r0, r3
  113ce8:	eb00096e 	bl	1162a8 <lwip_htons>
  113cec:	e1a03000 	mov	r3, r0
  113cf0:	e1c430b2 	strh	r3, [r4, #2]
  113cf4:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113cf8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  113cfc:	e5832004 	str	r2, [r3, #4]
  113d00:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113d04:	e2833008 	add	r3, r3, #8
  113d08:	e3a02008 	mov	r2, #8
  113d0c:	e3a01000 	mov	r1, #0
  113d10:	e1a00003 	mov	r0, r3
  113d14:	eb00b492 	bl	140f64 <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  113d18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113d1c:	e5933000 	ldr	r3, [r3]
  113d20:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  113d24:	e1530002 	cmp	r3, r2
  113d28:	9a000003 	bls	113d3c <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  113d2c:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  113d30:	e1a02003 	mov	r2, r3
  113d34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113d38:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  113d3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113d40:	e5932000 	ldr	r2, [r3]
  113d44:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113d48:	e1a01003 	mov	r1, r3
  113d4c:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  113d50:	eb00b34b 	bl	140a84 <memcpy>

  sock_set_errno(sock, 0);
  113d54:	e3a03000 	mov	r3, #0
  113d58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  113d5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d60:	e6ef2073 	uxtb	r2, r3
  113d64:	e51b3010 	ldr	r3, [fp, #-16]
  113d68:	e5c32010 	strb	r2, [r3, #16]
  113d6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d70:	e3530000 	cmp	r3, #0
  113d74:	0a000003 	beq	113d88 <lwip_getaddrname+0x170>
  113d78:	eb009392 	bl	138bc8 <__errno_location>
  113d7c:	e1a02000 	mov	r2, r0
  113d80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d84:	e5823000 	str	r3, [r2]
  return 0;
  113d88:	e3a03000 	mov	r3, #0
}
  113d8c:	e1a00003 	mov	r0, r3
  113d90:	e24bd008 	sub	sp, fp, #8
  113d94:	e8bd8810 	pop	{r4, fp, pc}

00113d98 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  113d98:	e92d4800 	push	{fp, lr}
  113d9c:	e28db004 	add	fp, sp, #4
  113da0:	e24dd010 	sub	sp, sp, #16
  113da4:	e50b0008 	str	r0, [fp, #-8]
  113da8:	e50b100c 	str	r1, [fp, #-12]
  113dac:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  113db0:	e3a03000 	mov	r3, #0
  113db4:	e51b2010 	ldr	r2, [fp, #-16]
  113db8:	e51b100c 	ldr	r1, [fp, #-12]
  113dbc:	e51b0008 	ldr	r0, [fp, #-8]
  113dc0:	ebffff94 	bl	113c18 <lwip_getaddrname>
  113dc4:	e1a03000 	mov	r3, r0
}
  113dc8:	e1a00003 	mov	r0, r3
  113dcc:	e24bd004 	sub	sp, fp, #4
  113dd0:	e8bd8800 	pop	{fp, pc}

00113dd4 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  113dd4:	e92d4800 	push	{fp, lr}
  113dd8:	e28db004 	add	fp, sp, #4
  113ddc:	e24dd010 	sub	sp, sp, #16
  113de0:	e50b0008 	str	r0, [fp, #-8]
  113de4:	e50b100c 	str	r1, [fp, #-12]
  113de8:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  113dec:	e3a03001 	mov	r3, #1
  113df0:	e51b2010 	ldr	r2, [fp, #-16]
  113df4:	e51b100c 	ldr	r1, [fp, #-12]
  113df8:	e51b0008 	ldr	r0, [fp, #-8]
  113dfc:	ebffff85 	bl	113c18 <lwip_getaddrname>
  113e00:	e1a03000 	mov	r3, r0
}
  113e04:	e1a00003 	mov	r0, r3
  113e08:	e24bd004 	sub	sp, fp, #4
  113e0c:	e8bd8800 	pop	{fp, pc}

00113e10 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113e10:	e92d4800 	push	{fp, lr}
  113e14:	e28db004 	add	fp, sp, #4
  113e18:	e24dd028 	sub	sp, sp, #40	; 0x28
  113e1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  113e20:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  113e24:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  113e28:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  113e2c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113e30:	ebfff363 	bl	110bc4 <get_socket>
  113e34:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  113e38:	e51b3008 	ldr	r3, [fp, #-8]
  113e3c:	e3530000 	cmp	r3, #0
  113e40:	1a000001 	bne	113e4c <lwip_getsockopt+0x3c>
    return -1;
  113e44:	e3e03000 	mvn	r3, #0
  113e48:	ea000036 	b	113f28 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  113e4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113e50:	e3530000 	cmp	r3, #0
  113e54:	0a000002 	beq	113e64 <lwip_getsockopt+0x54>
  113e58:	e59b3004 	ldr	r3, [fp, #4]
  113e5c:	e3530000 	cmp	r3, #0
  113e60:	1a00000e 	bne	113ea0 <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  113e64:	e3a0300e 	mov	r3, #14
  113e68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113e6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e70:	e6ef2073 	uxtb	r2, r3
  113e74:	e51b3008 	ldr	r3, [fp, #-8]
  113e78:	e5c32010 	strb	r2, [r3, #16]
  113e7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e80:	e3530000 	cmp	r3, #0
  113e84:	0a000003 	beq	113e98 <lwip_getsockopt+0x88>
  113e88:	eb00934e 	bl	138bc8 <__errno_location>
  113e8c:	e1a02000 	mov	r2, r0
  113e90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e94:	e5823000 	str	r3, [r2]
    return -1;
  113e98:	e3e03000 	mvn	r3, #0
  113e9c:	ea000021 	b	113f28 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  113ea0:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  113ea4:	e3400014 	movt	r0, #20
  113ea8:	ebffda8e 	bl	10a8e8 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  113eac:	e59b3004 	ldr	r3, [fp, #4]
  113eb0:	e58d3000 	str	r3, [sp]
  113eb4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113eb8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  113ebc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  113ec0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113ec4:	eb00001a 	bl	113f34 <lwip_getsockopt_impl>
  113ec8:	e1a03000 	mov	r3, r0
  113ecc:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  113ed0:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  113ed4:	e3400014 	movt	r0, #20
  113ed8:	ebffda8e 	bl	10a918 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  113edc:	e55b3009 	ldrb	r3, [fp, #-9]
  113ee0:	e50b3010 	str	r3, [fp, #-16]
  113ee4:	e51b3010 	ldr	r3, [fp, #-16]
  113ee8:	e6ef2073 	uxtb	r2, r3
  113eec:	e51b3008 	ldr	r3, [fp, #-8]
  113ef0:	e5c32010 	strb	r2, [r3, #16]
  113ef4:	e51b3010 	ldr	r3, [fp, #-16]
  113ef8:	e3530000 	cmp	r3, #0
  113efc:	0a000003 	beq	113f10 <lwip_getsockopt+0x100>
  113f00:	eb009330 	bl	138bc8 <__errno_location>
  113f04:	e1a02000 	mov	r2, r0
  113f08:	e51b3010 	ldr	r3, [fp, #-16]
  113f0c:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  113f10:	e55b3009 	ldrb	r3, [fp, #-9]
  113f14:	e3530000 	cmp	r3, #0
  113f18:	0a000001 	beq	113f24 <lwip_getsockopt+0x114>
  113f1c:	e3e03000 	mvn	r3, #0
  113f20:	ea000000 	b	113f28 <lwip_getsockopt+0x118>
  113f24:	e3a03000 	mov	r3, #0
}
  113f28:	e1a00003 	mov	r0, r3
  113f2c:	e24bd004 	sub	sp, fp, #4
  113f30:	e8bd8800 	pop	{fp, pc}

00113f34 <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113f34:	e92d4800 	push	{fp, lr}
  113f38:	e28db004 	add	fp, sp, #4
  113f3c:	e24dd028 	sub	sp, sp, #40	; 0x28
  113f40:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113f44:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113f48:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  113f4c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  113f50:	e3a03000 	mov	r3, #0
  113f54:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  113f58:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  113f5c:	ebfff33d 	bl	110c58 <tryget_socket>
  113f60:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113f64:	e51b300c 	ldr	r3, [fp, #-12]
  113f68:	e3530000 	cmp	r3, #0
  113f6c:	1a000001 	bne	113f78 <lwip_getsockopt_impl+0x44>
    return EBADF;
  113f70:	e3a03009 	mov	r3, #9
  113f74:	ea00026a 	b	114924 <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  113f78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113f7c:	e3530006 	cmp	r3, #6
  113f80:	0a0001fb 	beq	114774 <lwip_getsockopt_impl+0x840>
  113f84:	e3530006 	cmp	r3, #6
  113f88:	ca000002 	bgt	113f98 <lwip_getsockopt_impl+0x64>
  113f8c:	e3530000 	cmp	r3, #0
  113f90:	0a000155 	beq	1144ec <lwip_getsockopt_impl+0x5b8>
  113f94:	ea00025e 	b	114914 <lwip_getsockopt_impl+0x9e0>
  113f98:	e35300ff 	cmp	r3, #255	; 0xff
  113f9c:	0a000258 	beq	114904 <lwip_getsockopt_impl+0x9d0>
  113fa0:	e3002fff 	movw	r2, #4095	; 0xfff
  113fa4:	e1530002 	cmp	r3, r2
  113fa8:	1a000259 	bne	114914 <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  113fac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113fb0:	e3012002 	movw	r2, #4098	; 0x1002
  113fb4:	e1530002 	cmp	r3, r2
  113fb8:	0a000114 	beq	114410 <lwip_getsockopt_impl+0x4dc>
  113fbc:	e3012002 	movw	r2, #4098	; 0x1002
  113fc0:	e1530002 	cmp	r3, r2
  113fc4:	ca00000b 	bgt	113ff8 <lwip_getsockopt_impl+0xc4>
  113fc8:	e3530004 	cmp	r3, #4
  113fcc:	0a000049 	beq	1140f8 <lwip_getsockopt_impl+0x1c4>
  113fd0:	e3530004 	cmp	r3, #4
  113fd4:	ca000002 	bgt	113fe4 <lwip_getsockopt_impl+0xb0>
  113fd8:	e3530002 	cmp	r3, #2
  113fdc:	0a000019 	beq	114048 <lwip_getsockopt_impl+0x114>
  113fe0:	ea00013d 	b	1144dc <lwip_getsockopt_impl+0x5a8>
  113fe4:	e3530008 	cmp	r3, #8
  113fe8:	0a000042 	beq	1140f8 <lwip_getsockopt_impl+0x1c4>
  113fec:	e3530020 	cmp	r3, #32
  113ff0:	0a000040 	beq	1140f8 <lwip_getsockopt_impl+0x1c4>
  113ff4:	ea000138 	b	1144dc <lwip_getsockopt_impl+0x5a8>
  113ff8:	e3012007 	movw	r2, #4103	; 0x1007
  113ffc:	e1530002 	cmp	r3, r2
  114000:	0a000082 	beq	114210 <lwip_getsockopt_impl+0x2dc>
  114004:	e3012007 	movw	r2, #4103	; 0x1007
  114008:	e1530002 	cmp	r3, r2
  11400c:	ca000006 	bgt	11402c <lwip_getsockopt_impl+0xf8>
  114010:	e3012005 	movw	r2, #4101	; 0x1005
  114014:	e1530002 	cmp	r3, r2
  114018:	0a0000ae 	beq	1142d8 <lwip_getsockopt_impl+0x3a4>
  11401c:	e3012006 	movw	r2, #4102	; 0x1006
  114020:	e1530002 	cmp	r3, r2
  114024:	0a0000d2 	beq	114374 <lwip_getsockopt_impl+0x440>
  114028:	ea00012b 	b	1144dc <lwip_getsockopt_impl+0x5a8>
  11402c:	e3012008 	movw	r2, #4104	; 0x1008
  114030:	e1530002 	cmp	r3, r2
  114034:	0a00004a 	beq	114164 <lwip_getsockopt_impl+0x230>
  114038:	e301200a 	movw	r2, #4106	; 0x100a
  11403c:	e1530002 	cmp	r3, r2
  114040:	0a000104 	beq	114458 <lwip_getsockopt_impl+0x524>
  114044:	ea000124 	b	1144dc <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114048:	e59b3004 	ldr	r3, [fp, #4]
  11404c:	e5933000 	ldr	r3, [r3]
  114050:	e3530003 	cmp	r3, #3
  114054:	8a000001 	bhi	114060 <lwip_getsockopt_impl+0x12c>
  114058:	e3a03016 	mov	r3, #22
  11405c:	ea000230 	b	114924 <lwip_getsockopt_impl+0x9f0>
  114060:	e51b300c 	ldr	r3, [fp, #-12]
  114064:	e5933000 	ldr	r3, [r3]
  114068:	e3530000 	cmp	r3, #0
  11406c:	0a000004 	beq	114084 <lwip_getsockopt_impl+0x150>
  114070:	e51b300c 	ldr	r3, [fp, #-12]
  114074:	e5933000 	ldr	r3, [r3]
  114078:	e5933008 	ldr	r3, [r3, #8]
  11407c:	e3530000 	cmp	r3, #0
  114080:	1a000001 	bne	11408c <lwip_getsockopt_impl+0x158>
  114084:	e3a03016 	mov	r3, #22
  114088:	ea000225 	b	114924 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  11408c:	e51b300c 	ldr	r3, [fp, #-12]
  114090:	e5933000 	ldr	r3, [r3]
  114094:	e5933000 	ldr	r3, [r3]
  114098:	e20330f0 	and	r3, r3, #240	; 0xf0
  11409c:	e3530010 	cmp	r3, #16
  1140a0:	0a000001 	beq	1140ac <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  1140a4:	e3a0305c 	mov	r3, #92	; 0x5c
  1140a8:	ea00021d 	b	114924 <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  1140ac:	e51b300c 	ldr	r3, [fp, #-12]
  1140b0:	e5933000 	ldr	r3, [r3]
  1140b4:	e5933008 	ldr	r3, [r3, #8]
  1140b8:	e3530000 	cmp	r3, #0
  1140bc:	0a000009 	beq	1140e8 <lwip_getsockopt_impl+0x1b4>
  1140c0:	e51b300c 	ldr	r3, [fp, #-12]
  1140c4:	e5933000 	ldr	r3, [r3]
  1140c8:	e5933008 	ldr	r3, [r3, #8]
  1140cc:	e5933014 	ldr	r3, [r3, #20]
  1140d0:	e3530001 	cmp	r3, #1
  1140d4:	1a000003 	bne	1140e8 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  1140d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1140dc:	e3a02001 	mov	r2, #1
  1140e0:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  1140e4:	ea0000ff 	b	1144e8 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  1140e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1140ec:	e3a02000 	mov	r2, #0
  1140f0:	e5832000 	str	r2, [r3]
      break;
  1140f4:	ea0000fb 	b	1144e8 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1140f8:	e59b3004 	ldr	r3, [fp, #4]
  1140fc:	e5933000 	ldr	r3, [r3]
  114100:	e3530003 	cmp	r3, #3
  114104:	8a000001 	bhi	114110 <lwip_getsockopt_impl+0x1dc>
  114108:	e3a03016 	mov	r3, #22
  11410c:	ea000204 	b	114924 <lwip_getsockopt_impl+0x9f0>
  114110:	e51b300c 	ldr	r3, [fp, #-12]
  114114:	e5933000 	ldr	r3, [r3]
  114118:	e3530000 	cmp	r3, #0
  11411c:	0a000004 	beq	114134 <lwip_getsockopt_impl+0x200>
  114120:	e51b300c 	ldr	r3, [fp, #-12]
  114124:	e5933000 	ldr	r3, [r3]
  114128:	e5933008 	ldr	r3, [r3, #8]
  11412c:	e3530000 	cmp	r3, #0
  114130:	1a000001 	bne	11413c <lwip_getsockopt_impl+0x208>
  114134:	e3a03016 	mov	r3, #22
  114138:	ea0001f9 	b	114924 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  11413c:	e51b300c 	ldr	r3, [fp, #-12]
  114140:	e5933000 	ldr	r3, [r3]
  114144:	e5933008 	ldr	r3, [r3, #8]
  114148:	e5d33008 	ldrb	r3, [r3, #8]
  11414c:	e1a02003 	mov	r2, r3
  114150:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114154:	e0022003 	and	r2, r2, r3
  114158:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11415c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  114160:	ea0000e0 	b	1144e8 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114164:	e59b3004 	ldr	r3, [fp, #4]
  114168:	e5933000 	ldr	r3, [r3]
  11416c:	e3530003 	cmp	r3, #3
  114170:	8a000001 	bhi	11417c <lwip_getsockopt_impl+0x248>
  114174:	e3a03016 	mov	r3, #22
  114178:	ea0001e9 	b	114924 <lwip_getsockopt_impl+0x9f0>
  11417c:	e51b300c 	ldr	r3, [fp, #-12]
  114180:	e5933000 	ldr	r3, [r3]
  114184:	e3530000 	cmp	r3, #0
  114188:	1a000001 	bne	114194 <lwip_getsockopt_impl+0x260>
  11418c:	e3a03016 	mov	r3, #22
  114190:	ea0001e3 	b	114924 <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  114194:	e51b300c 	ldr	r3, [fp, #-12]
  114198:	e5933000 	ldr	r3, [r3]
  11419c:	e5933000 	ldr	r3, [r3]
  1141a0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1141a4:	e3530020 	cmp	r3, #32
  1141a8:	0a00000c 	beq	1141e0 <lwip_getsockopt_impl+0x2ac>
  1141ac:	e3530040 	cmp	r3, #64	; 0x40
  1141b0:	0a000002 	beq	1141c0 <lwip_getsockopt_impl+0x28c>
  1141b4:	e3530010 	cmp	r3, #16
  1141b8:	0a000004 	beq	1141d0 <lwip_getsockopt_impl+0x29c>
  1141bc:	ea00000b 	b	1141f0 <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  1141c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1141c4:	e3a02003 	mov	r2, #3
  1141c8:	e5832000 	str	r2, [r3]
        break;
  1141cc:	ea00000e 	b	11420c <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  1141d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1141d4:	e3a02001 	mov	r2, #1
  1141d8:	e5832000 	str	r2, [r3]
        break;
  1141dc:	ea00000a 	b	11420c <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  1141e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1141e4:	e3a02002 	mov	r2, #2
  1141e8:	e5832000 	str	r2, [r3]
        break;
  1141ec:	ea000006 	b	11420c <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  1141f0:	e51b300c 	ldr	r3, [fp, #-12]
  1141f4:	e5933000 	ldr	r3, [r3]
  1141f8:	e5933000 	ldr	r3, [r3]
  1141fc:	e1a02003 	mov	r2, r3
  114200:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114204:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  114208:	ea0000b6 	b	1144e8 <lwip_getsockopt_impl+0x5b4>
  11420c:	ea0000b5 	b	1144e8 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  114210:	e59b3004 	ldr	r3, [fp, #4]
  114214:	e5933000 	ldr	r3, [r3]
  114218:	e3530003 	cmp	r3, #3
  11421c:	8a000001 	bhi	114228 <lwip_getsockopt_impl+0x2f4>
  114220:	e3a03016 	mov	r3, #22
  114224:	ea0001be 	b	114924 <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  114228:	e51b300c 	ldr	r3, [fp, #-12]
  11422c:	e5d33010 	ldrb	r3, [r3, #16]
  114230:	e3530000 	cmp	r3, #0
  114234:	0a000003 	beq	114248 <lwip_getsockopt_impl+0x314>
  114238:	e51b300c 	ldr	r3, [fp, #-12]
  11423c:	e5d33010 	ldrb	r3, [r3, #16]
  114240:	e3530073 	cmp	r3, #115	; 0x73
  114244:	1a000014 	bne	11429c <lwip_getsockopt_impl+0x368>
  114248:	e51b300c 	ldr	r3, [fp, #-12]
  11424c:	e5933000 	ldr	r3, [r3]
  114250:	e3530000 	cmp	r3, #0
  114254:	0a000010 	beq	11429c <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  114258:	e51b300c 	ldr	r3, [fp, #-12]
  11425c:	e5933000 	ldr	r3, [r3]
  114260:	e1d330dc 	ldrsb	r3, [r3, #12]
  114264:	e1a00003 	mov	r0, r3
  114268:	ebffee2d 	bl	10fb24 <err_to_errno>
  11426c:	e50b0010 	str	r0, [fp, #-16]
  114270:	e51b3010 	ldr	r3, [fp, #-16]
  114274:	e6ef2073 	uxtb	r2, r3
  114278:	e51b300c 	ldr	r3, [fp, #-12]
  11427c:	e5c32010 	strb	r2, [r3, #16]
  114280:	e51b3010 	ldr	r3, [fp, #-16]
  114284:	e3530000 	cmp	r3, #0
  114288:	0a000003 	beq	11429c <lwip_getsockopt_impl+0x368>
  11428c:	eb00924d 	bl	138bc8 <__errno_location>
  114290:	e1a02000 	mov	r2, r0
  114294:	e51b3010 	ldr	r3, [fp, #-16]
  114298:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  11429c:	e51b300c 	ldr	r3, [fp, #-12]
  1142a0:	e5d33010 	ldrb	r3, [r3, #16]
  1142a4:	e35300ff 	cmp	r3, #255	; 0xff
  1142a8:	0a000003 	beq	1142bc <lwip_getsockopt_impl+0x388>
  1142ac:	e51b300c 	ldr	r3, [fp, #-12]
  1142b0:	e5d33010 	ldrb	r3, [r3, #16]
  1142b4:	e1a02003 	mov	r2, r3
  1142b8:	ea000000 	b	1142c0 <lwip_getsockopt_impl+0x38c>
  1142bc:	e3e02000 	mvn	r2, #0
  1142c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1142c4:	e5832000 	str	r2, [r3]
      sock->err = 0;
  1142c8:	e51b300c 	ldr	r3, [fp, #-12]
  1142cc:	e3a02000 	mov	r2, #0
  1142d0:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  1142d4:	ea000083 	b	1144e8 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1142d8:	e59b3004 	ldr	r3, [fp, #4]
  1142dc:	e5933000 	ldr	r3, [r3]
  1142e0:	e353000f 	cmp	r3, #15
  1142e4:	8a000001 	bhi	1142f0 <lwip_getsockopt_impl+0x3bc>
  1142e8:	e3a03016 	mov	r3, #22
  1142ec:	ea00018c 	b	114924 <lwip_getsockopt_impl+0x9f0>
  1142f0:	e51b300c 	ldr	r3, [fp, #-12]
  1142f4:	e5933000 	ldr	r3, [r3]
  1142f8:	e3530000 	cmp	r3, #0
  1142fc:	1a000001 	bne	114308 <lwip_getsockopt_impl+0x3d4>
  114300:	e3a03016 	mov	r3, #22
  114304:	ea000186 	b	114924 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  114308:	e51b300c 	ldr	r3, [fp, #-12]
  11430c:	e5933000 	ldr	r3, [r3]
  114310:	e5933020 	ldr	r3, [r3, #32]
  114314:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114318:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11431c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114320:	e3413062 	movt	r3, #4194	; 0x1062
  114324:	e0832392 	umull	r2, r3, r2, r3
  114328:	e1a03323 	lsr	r3, r3, #6
  11432c:	e1a02003 	mov	r2, r3
  114330:	e3a03000 	mov	r3, #0
  114334:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114338:	e1c120f0 	strd	r2, [r1]
  11433c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  114340:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114344:	e3413062 	movt	r3, #4194	; 0x1062
  114348:	e0832391 	umull	r2, r3, r1, r3
  11434c:	e1a03323 	lsr	r3, r3, #6
  114350:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114354:	e0030392 	mul	r3, r2, r3
  114358:	e0413003 	sub	r3, r1, r3
  11435c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114360:	e0030392 	mul	r3, r2, r3
  114364:	e1a02003 	mov	r2, r3
  114368:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11436c:	e5832008 	str	r2, [r3, #8]
      break;
  114370:	ea00005c 	b	1144e8 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114374:	e59b3004 	ldr	r3, [fp, #4]
  114378:	e5933000 	ldr	r3, [r3]
  11437c:	e353000f 	cmp	r3, #15
  114380:	8a000001 	bhi	11438c <lwip_getsockopt_impl+0x458>
  114384:	e3a03016 	mov	r3, #22
  114388:	ea000165 	b	114924 <lwip_getsockopt_impl+0x9f0>
  11438c:	e51b300c 	ldr	r3, [fp, #-12]
  114390:	e5933000 	ldr	r3, [r3]
  114394:	e3530000 	cmp	r3, #0
  114398:	1a000001 	bne	1143a4 <lwip_getsockopt_impl+0x470>
  11439c:	e3a03016 	mov	r3, #22
  1143a0:	ea00015f 	b	114924 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  1143a4:	e51b300c 	ldr	r3, [fp, #-12]
  1143a8:	e5933000 	ldr	r3, [r3]
  1143ac:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1143b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1143b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1143b8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1143bc:	e3413062 	movt	r3, #4194	; 0x1062
  1143c0:	e0832392 	umull	r2, r3, r2, r3
  1143c4:	e1a03323 	lsr	r3, r3, #6
  1143c8:	e1a02003 	mov	r2, r3
  1143cc:	e3a03000 	mov	r3, #0
  1143d0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1143d4:	e1c120f0 	strd	r2, [r1]
  1143d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1143dc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1143e0:	e3413062 	movt	r3, #4194	; 0x1062
  1143e4:	e0832391 	umull	r2, r3, r1, r3
  1143e8:	e1a03323 	lsr	r3, r3, #6
  1143ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1143f0:	e0030392 	mul	r3, r2, r3
  1143f4:	e0413003 	sub	r3, r1, r3
  1143f8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1143fc:	e0030392 	mul	r3, r2, r3
  114400:	e1a02003 	mov	r2, r3
  114404:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114408:	e5832008 	str	r2, [r3, #8]
      break;
  11440c:	ea000035 	b	1144e8 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114410:	e59b3004 	ldr	r3, [fp, #4]
  114414:	e5933000 	ldr	r3, [r3]
  114418:	e3530003 	cmp	r3, #3
  11441c:	8a000001 	bhi	114428 <lwip_getsockopt_impl+0x4f4>
  114420:	e3a03016 	mov	r3, #22
  114424:	ea00013e 	b	114924 <lwip_getsockopt_impl+0x9f0>
  114428:	e51b300c 	ldr	r3, [fp, #-12]
  11442c:	e5933000 	ldr	r3, [r3]
  114430:	e3530000 	cmp	r3, #0
  114434:	1a000001 	bne	114440 <lwip_getsockopt_impl+0x50c>
  114438:	e3a03016 	mov	r3, #22
  11443c:	ea000138 	b	114924 <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  114440:	e51b300c 	ldr	r3, [fp, #-12]
  114444:	e5933000 	ldr	r3, [r3]
  114448:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11444c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114450:	e5832000 	str	r2, [r3]
      break;
  114454:	ea000023 	b	1144e8 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  114458:	e59b3004 	ldr	r3, [fp, #4]
  11445c:	e5933000 	ldr	r3, [r3]
  114460:	e3530003 	cmp	r3, #3
  114464:	8a000001 	bhi	114470 <lwip_getsockopt_impl+0x53c>
  114468:	e3a03016 	mov	r3, #22
  11446c:	ea00012c 	b	114924 <lwip_getsockopt_impl+0x9f0>
  114470:	e51b300c 	ldr	r3, [fp, #-12]
  114474:	e5933000 	ldr	r3, [r3]
  114478:	e3530000 	cmp	r3, #0
  11447c:	0a000004 	beq	114494 <lwip_getsockopt_impl+0x560>
  114480:	e51b300c 	ldr	r3, [fp, #-12]
  114484:	e5933000 	ldr	r3, [r3]
  114488:	e5933008 	ldr	r3, [r3, #8]
  11448c:	e3530000 	cmp	r3, #0
  114490:	1a000001 	bne	11449c <lwip_getsockopt_impl+0x568>
  114494:	e3a03016 	mov	r3, #22
  114498:	ea000121 	b	114924 <lwip_getsockopt_impl+0x9f0>
  11449c:	e51b300c 	ldr	r3, [fp, #-12]
  1144a0:	e5933000 	ldr	r3, [r3]
  1144a4:	e5933000 	ldr	r3, [r3]
  1144a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1144ac:	e3530020 	cmp	r3, #32
  1144b0:	0a000001 	beq	1144bc <lwip_getsockopt_impl+0x588>
  1144b4:	e3a0305c 	mov	r3, #92	; 0x5c
  1144b8:	ea000119 	b	114924 <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  1144bc:	e51b300c 	ldr	r3, [fp, #-12]
  1144c0:	e5933000 	ldr	r3, [r3]
  1144c4:	e5933008 	ldr	r3, [r3, #8]
  1144c8:	e5d33010 	ldrb	r3, [r3, #16]
  1144cc:	e2032001 	and	r2, r3, #1
  1144d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144d4:	e5832000 	str	r2, [r3]
      break;
  1144d8:	ea000002 	b	1144e8 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1144dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1144e0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1144e4:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1144e8:	ea00010c 	b	114920 <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  1144ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1144f0:	e2433001 	sub	r3, r3, #1
  1144f4:	e3530006 	cmp	r3, #6
  1144f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1144fc:	ea000098 	b	114764 <lwip_getsockopt_impl+0x830>
  114500:	00114580 	.word	0x00114580
  114504:	0011451c 	.word	0x0011451c
  114508:	00114764 	.word	0x00114764
  11450c:	00114764 	.word	0x00114764
  114510:	001145e4 	.word	0x001145e4
  114514:	00114664 	.word	0x00114664
  114518:	001146e4 	.word	0x001146e4
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  11451c:	e59b3004 	ldr	r3, [fp, #4]
  114520:	e5933000 	ldr	r3, [r3]
  114524:	e3530003 	cmp	r3, #3
  114528:	8a000001 	bhi	114534 <lwip_getsockopt_impl+0x600>
  11452c:	e3a03016 	mov	r3, #22
  114530:	ea0000fb 	b	114924 <lwip_getsockopt_impl+0x9f0>
  114534:	e51b300c 	ldr	r3, [fp, #-12]
  114538:	e5933000 	ldr	r3, [r3]
  11453c:	e3530000 	cmp	r3, #0
  114540:	0a000004 	beq	114558 <lwip_getsockopt_impl+0x624>
  114544:	e51b300c 	ldr	r3, [fp, #-12]
  114548:	e5933000 	ldr	r3, [r3]
  11454c:	e5933008 	ldr	r3, [r3, #8]
  114550:	e3530000 	cmp	r3, #0
  114554:	1a000001 	bne	114560 <lwip_getsockopt_impl+0x62c>
  114558:	e3a03016 	mov	r3, #22
  11455c:	ea0000f0 	b	114924 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  114560:	e51b300c 	ldr	r3, [fp, #-12]
  114564:	e5933000 	ldr	r3, [r3]
  114568:	e5933008 	ldr	r3, [r3, #8]
  11456c:	e5d3300a 	ldrb	r3, [r3, #10]
  114570:	e1a02003 	mov	r2, r3
  114574:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114578:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  11457c:	ea00007b 	b	114770 <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114580:	e59b3004 	ldr	r3, [fp, #4]
  114584:	e5933000 	ldr	r3, [r3]
  114588:	e3530003 	cmp	r3, #3
  11458c:	8a000001 	bhi	114598 <lwip_getsockopt_impl+0x664>
  114590:	e3a03016 	mov	r3, #22
  114594:	ea0000e2 	b	114924 <lwip_getsockopt_impl+0x9f0>
  114598:	e51b300c 	ldr	r3, [fp, #-12]
  11459c:	e5933000 	ldr	r3, [r3]
  1145a0:	e3530000 	cmp	r3, #0
  1145a4:	0a000004 	beq	1145bc <lwip_getsockopt_impl+0x688>
  1145a8:	e51b300c 	ldr	r3, [fp, #-12]
  1145ac:	e5933000 	ldr	r3, [r3]
  1145b0:	e5933008 	ldr	r3, [r3, #8]
  1145b4:	e3530000 	cmp	r3, #0
  1145b8:	1a000001 	bne	1145c4 <lwip_getsockopt_impl+0x690>
  1145bc:	e3a03016 	mov	r3, #22
  1145c0:	ea0000d7 	b	114924 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  1145c4:	e51b300c 	ldr	r3, [fp, #-12]
  1145c8:	e5933000 	ldr	r3, [r3]
  1145cc:	e5933008 	ldr	r3, [r3, #8]
  1145d0:	e5d33009 	ldrb	r3, [r3, #9]
  1145d4:	e1a02003 	mov	r2, r3
  1145d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145dc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  1145e0:	ea000062 	b	114770 <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  1145e4:	e59b3004 	ldr	r3, [fp, #4]
  1145e8:	e5933000 	ldr	r3, [r3]
  1145ec:	e3530000 	cmp	r3, #0
  1145f0:	1a000001 	bne	1145fc <lwip_getsockopt_impl+0x6c8>
  1145f4:	e3a03016 	mov	r3, #22
  1145f8:	ea0000c9 	b	114924 <lwip_getsockopt_impl+0x9f0>
  1145fc:	e51b300c 	ldr	r3, [fp, #-12]
  114600:	e5933000 	ldr	r3, [r3]
  114604:	e3530000 	cmp	r3, #0
  114608:	0a000004 	beq	114620 <lwip_getsockopt_impl+0x6ec>
  11460c:	e51b300c 	ldr	r3, [fp, #-12]
  114610:	e5933000 	ldr	r3, [r3]
  114614:	e5933008 	ldr	r3, [r3, #8]
  114618:	e3530000 	cmp	r3, #0
  11461c:	1a000001 	bne	114628 <lwip_getsockopt_impl+0x6f4>
  114620:	e3a03016 	mov	r3, #22
  114624:	ea0000be 	b	114924 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114628:	e51b300c 	ldr	r3, [fp, #-12]
  11462c:	e5933000 	ldr	r3, [r3]
  114630:	e5933000 	ldr	r3, [r3]
  114634:	e20330f0 	and	r3, r3, #240	; 0xf0
  114638:	e3530020 	cmp	r3, #32
  11463c:	0a000001 	beq	114648 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  114640:	e3a0305c 	mov	r3, #92	; 0x5c
  114644:	ea0000b6 	b	114924 <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  114648:	e51b300c 	ldr	r3, [fp, #-12]
  11464c:	e5933000 	ldr	r3, [r3]
  114650:	e5933008 	ldr	r3, [r3, #8]
  114654:	e5d3201c 	ldrb	r2, [r3, #28]
  114658:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11465c:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114660:	ea000042 	b	114770 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  114664:	e59b3004 	ldr	r3, [fp, #4]
  114668:	e5933000 	ldr	r3, [r3]
  11466c:	e3530003 	cmp	r3, #3
  114670:	8a000001 	bhi	11467c <lwip_getsockopt_impl+0x748>
  114674:	e3a03016 	mov	r3, #22
  114678:	ea0000a9 	b	114924 <lwip_getsockopt_impl+0x9f0>
  11467c:	e51b300c 	ldr	r3, [fp, #-12]
  114680:	e5933000 	ldr	r3, [r3]
  114684:	e3530000 	cmp	r3, #0
  114688:	0a000004 	beq	1146a0 <lwip_getsockopt_impl+0x76c>
  11468c:	e51b300c 	ldr	r3, [fp, #-12]
  114690:	e5933000 	ldr	r3, [r3]
  114694:	e5933008 	ldr	r3, [r3, #8]
  114698:	e3530000 	cmp	r3, #0
  11469c:	1a000001 	bne	1146a8 <lwip_getsockopt_impl+0x774>
  1146a0:	e3a03016 	mov	r3, #22
  1146a4:	ea00009e 	b	114924 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  1146a8:	e51b300c 	ldr	r3, [fp, #-12]
  1146ac:	e5933000 	ldr	r3, [r3]
  1146b0:	e5933000 	ldr	r3, [r3]
  1146b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1146b8:	e3530020 	cmp	r3, #32
  1146bc:	0a000001 	beq	1146c8 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  1146c0:	e3a0305c 	mov	r3, #92	; 0x5c
  1146c4:	ea000096 	b	114924 <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  1146c8:	e51b300c 	ldr	r3, [fp, #-12]
  1146cc:	e5933000 	ldr	r3, [r3]
  1146d0:	e5933008 	ldr	r3, [r3, #8]
  1146d4:	e5932018 	ldr	r2, [r3, #24]
  1146d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146dc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  1146e0:	ea000022 	b	114770 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  1146e4:	e59b3004 	ldr	r3, [fp, #4]
  1146e8:	e5933000 	ldr	r3, [r3]
  1146ec:	e3530000 	cmp	r3, #0
  1146f0:	1a000001 	bne	1146fc <lwip_getsockopt_impl+0x7c8>
  1146f4:	e3a03016 	mov	r3, #22
  1146f8:	ea000089 	b	114924 <lwip_getsockopt_impl+0x9f0>
  1146fc:	e51b300c 	ldr	r3, [fp, #-12]
  114700:	e5933000 	ldr	r3, [r3]
  114704:	e3530000 	cmp	r3, #0
  114708:	0a000004 	beq	114720 <lwip_getsockopt_impl+0x7ec>
  11470c:	e51b300c 	ldr	r3, [fp, #-12]
  114710:	e5933000 	ldr	r3, [r3]
  114714:	e5933008 	ldr	r3, [r3, #8]
  114718:	e3530000 	cmp	r3, #0
  11471c:	1a000001 	bne	114728 <lwip_getsockopt_impl+0x7f4>
  114720:	e3a03016 	mov	r3, #22
  114724:	ea00007e 	b	114924 <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  114728:	e51b300c 	ldr	r3, [fp, #-12]
  11472c:	e5933000 	ldr	r3, [r3]
  114730:	e5933008 	ldr	r3, [r3, #8]
  114734:	e5d33010 	ldrb	r3, [r3, #16]
  114738:	e2033008 	and	r3, r3, #8
  11473c:	e3530000 	cmp	r3, #0
  114740:	0a000003 	beq	114754 <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  114744:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114748:	e3a02001 	mov	r2, #1
  11474c:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  114750:	ea000006 	b	114770 <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  114754:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114758:	e3a02000 	mov	r2, #0
  11475c:	e5c32000 	strb	r2, [r3]
      break;
  114760:	ea000002 	b	114770 <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114764:	e3a0305c 	mov	r3, #92	; 0x5c
  114768:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11476c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114770:	ea00006a 	b	114920 <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  114774:	e59b3004 	ldr	r3, [fp, #4]
  114778:	e5933000 	ldr	r3, [r3]
  11477c:	e3530003 	cmp	r3, #3
  114780:	8a000001 	bhi	11478c <lwip_getsockopt_impl+0x858>
  114784:	e3a03016 	mov	r3, #22
  114788:	ea000065 	b	114924 <lwip_getsockopt_impl+0x9f0>
  11478c:	e51b300c 	ldr	r3, [fp, #-12]
  114790:	e5933000 	ldr	r3, [r3]
  114794:	e3530000 	cmp	r3, #0
  114798:	0a000004 	beq	1147b0 <lwip_getsockopt_impl+0x87c>
  11479c:	e51b300c 	ldr	r3, [fp, #-12]
  1147a0:	e5933000 	ldr	r3, [r3]
  1147a4:	e5933008 	ldr	r3, [r3, #8]
  1147a8:	e3530000 	cmp	r3, #0
  1147ac:	1a000001 	bne	1147b8 <lwip_getsockopt_impl+0x884>
  1147b0:	e3a03016 	mov	r3, #22
  1147b4:	ea00005a 	b	114924 <lwip_getsockopt_impl+0x9f0>
  1147b8:	e51b300c 	ldr	r3, [fp, #-12]
  1147bc:	e5933000 	ldr	r3, [r3]
  1147c0:	e5933000 	ldr	r3, [r3]
  1147c4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1147c8:	e3530010 	cmp	r3, #16
  1147cc:	0a000001 	beq	1147d8 <lwip_getsockopt_impl+0x8a4>
  1147d0:	e3a0305c 	mov	r3, #92	; 0x5c
  1147d4:	ea000052 	b	114924 <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  1147d8:	e51b300c 	ldr	r3, [fp, #-12]
  1147dc:	e5933000 	ldr	r3, [r3]
  1147e0:	e5933008 	ldr	r3, [r3, #8]
  1147e4:	e5933014 	ldr	r3, [r3, #20]
  1147e8:	e3530001 	cmp	r3, #1
  1147ec:	1a000001 	bne	1147f8 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  1147f0:	e3a03016 	mov	r3, #22
  1147f4:	ea00004a 	b	114924 <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  1147f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1147fc:	e2433001 	sub	r3, r3, #1
  114800:	e3530004 	cmp	r3, #4
  114804:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114808:	ea000039 	b	1148f4 <lwip_getsockopt_impl+0x9c0>
  11480c:	00114820 	.word	0x00114820
  114810:	00114854 	.word	0x00114854
  114814:	00114874 	.word	0x00114874
  114818:	001148a4 	.word	0x001148a4
  11481c:	001148d4 	.word	0x001148d4
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  114820:	e51b300c 	ldr	r3, [fp, #-12]
  114824:	e5933000 	ldr	r3, [r3]
  114828:	e5933008 	ldr	r3, [r3, #8]
  11482c:	e5d3301e 	ldrb	r3, [r3, #30]
  114830:	e2033040 	and	r3, r3, #64	; 0x40
  114834:	e3530000 	cmp	r3, #0
  114838:	13a03001 	movne	r3, #1
  11483c:	03a03000 	moveq	r3, #0
  114840:	e6ef3073 	uxtb	r3, r3
  114844:	e1a02003 	mov	r2, r3
  114848:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11484c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  114850:	ea00002a 	b	114900 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  114854:	e51b300c 	ldr	r3, [fp, #-12]
  114858:	e5933000 	ldr	r3, [r3]
  11485c:	e5933008 	ldr	r3, [r3, #8]
  114860:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  114864:	e1a02003 	mov	r2, r3
  114868:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11486c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  114870:	ea000022 	b	114900 <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  114874:	e51b300c 	ldr	r3, [fp, #-12]
  114878:	e5933000 	ldr	r3, [r3]
  11487c:	e5933008 	ldr	r3, [r3, #8]
  114880:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  114884:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114888:	e3413062 	movt	r3, #4194	; 0x1062
  11488c:	e0832392 	umull	r2, r3, r2, r3
  114890:	e1a03323 	lsr	r3, r3, #6
  114894:	e1a02003 	mov	r2, r3
  114898:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11489c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  1148a0:	ea000016 	b	114900 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  1148a4:	e51b300c 	ldr	r3, [fp, #-12]
  1148a8:	e5933000 	ldr	r3, [r3]
  1148ac:	e5933008 	ldr	r3, [r3, #8]
  1148b0:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  1148b4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1148b8:	e3413062 	movt	r3, #4194	; 0x1062
  1148bc:	e0832392 	umull	r2, r3, r2, r3
  1148c0:	e1a03323 	lsr	r3, r3, #6
  1148c4:	e1a02003 	mov	r2, r3
  1148c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148cc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  1148d0:	ea00000a 	b	114900 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  1148d4:	e51b300c 	ldr	r3, [fp, #-12]
  1148d8:	e5933000 	ldr	r3, [r3]
  1148dc:	e5933008 	ldr	r3, [r3, #8]
  1148e0:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  1148e4:	e1a02003 	mov	r2, r3
  1148e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148ec:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  1148f0:	ea000002 	b	114900 <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1148f4:	e3a0305c 	mov	r3, #92	; 0x5c
  1148f8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1148fc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114900:	ea000006 	b	114920 <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114904:	e3a0305c 	mov	r3, #92	; 0x5c
  114908:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11490c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114910:	ea000002 	b	114920 <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114914:	e3a0305c 	mov	r3, #92	; 0x5c
  114918:	e54b3005 	strb	r3, [fp, #-5]
    break;
  11491c:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  114920:	e55b3005 	ldrb	r3, [fp, #-5]
}
  114924:	e1a00003 	mov	r0, r3
  114928:	e24bd004 	sub	sp, fp, #4
  11492c:	e8bd8800 	pop	{fp, pc}

00114930 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114930:	e92d4800 	push	{fp, lr}
  114934:	e28db004 	add	fp, sp, #4
  114938:	e24dd028 	sub	sp, sp, #40	; 0x28
  11493c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114940:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114944:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114948:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  11494c:	e3a03000 	mov	r3, #0
  114950:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  114954:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114958:	ebfff099 	bl	110bc4 <get_socket>
  11495c:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114960:	e51b300c 	ldr	r3, [fp, #-12]
  114964:	e3530000 	cmp	r3, #0
  114968:	1a000001 	bne	114974 <lwip_setsockopt+0x44>
    return -1;
  11496c:	e3e03000 	mvn	r3, #0
  114970:	ea000033 	b	114a44 <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  114974:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114978:	e3530000 	cmp	r3, #0
  11497c:	1a00000e 	bne	1149bc <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114980:	e3a0300e 	mov	r3, #14
  114984:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11498c:	e6ef2073 	uxtb	r2, r3
  114990:	e51b300c 	ldr	r3, [fp, #-12]
  114994:	e5c32010 	strb	r2, [r3, #16]
  114998:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11499c:	e3530000 	cmp	r3, #0
  1149a0:	0a000003 	beq	1149b4 <lwip_setsockopt+0x84>
  1149a4:	eb009087 	bl	138bc8 <__errno_location>
  1149a8:	e1a02000 	mov	r2, r0
  1149ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1149b0:	e5823000 	str	r3, [r2]
    return -1;
  1149b4:	e3e03000 	mvn	r3, #0
  1149b8:	ea000021 	b	114a44 <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  1149bc:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  1149c0:	e3400014 	movt	r0, #20
  1149c4:	ebffd7c7 	bl	10a8e8 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  1149c8:	e59b3004 	ldr	r3, [fp, #4]
  1149cc:	e58d3000 	str	r3, [sp]
  1149d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1149d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1149d8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1149dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1149e0:	eb00001a 	bl	114a50 <lwip_setsockopt_impl>
  1149e4:	e1a03000 	mov	r3, r0
  1149e8:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  1149ec:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  1149f0:	e3400014 	movt	r0, #20
  1149f4:	ebffd7c7 	bl	10a918 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  1149f8:	e55b3005 	ldrb	r3, [fp, #-5]
  1149fc:	e50b3010 	str	r3, [fp, #-16]
  114a00:	e51b3010 	ldr	r3, [fp, #-16]
  114a04:	e6ef2073 	uxtb	r2, r3
  114a08:	e51b300c 	ldr	r3, [fp, #-12]
  114a0c:	e5c32010 	strb	r2, [r3, #16]
  114a10:	e51b3010 	ldr	r3, [fp, #-16]
  114a14:	e3530000 	cmp	r3, #0
  114a18:	0a000003 	beq	114a2c <lwip_setsockopt+0xfc>
  114a1c:	eb009069 	bl	138bc8 <__errno_location>
  114a20:	e1a02000 	mov	r2, r0
  114a24:	e51b3010 	ldr	r3, [fp, #-16]
  114a28:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114a2c:	e55b3005 	ldrb	r3, [fp, #-5]
  114a30:	e3530000 	cmp	r3, #0
  114a34:	0a000001 	beq	114a40 <lwip_setsockopt+0x110>
  114a38:	e3e03000 	mvn	r3, #0
  114a3c:	ea000000 	b	114a44 <lwip_setsockopt+0x114>
  114a40:	e3a03000 	mov	r3, #0
}
  114a44:	e1a00003 	mov	r0, r3
  114a48:	e24bd004 	sub	sp, fp, #4
  114a4c:	e8bd8800 	pop	{fp, pc}

00114a50 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114a50:	e92d4800 	push	{fp, lr}
  114a54:	e28db004 	add	fp, sp, #4
  114a58:	e24dd028 	sub	sp, sp, #40	; 0x28
  114a5c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114a60:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114a64:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114a68:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114a6c:	e3a03000 	mov	r3, #0
  114a70:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114a74:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114a78:	ebfff076 	bl	110c58 <tryget_socket>
  114a7c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114a80:	e51b300c 	ldr	r3, [fp, #-12]
  114a84:	e3530000 	cmp	r3, #0
  114a88:	1a000001 	bne	114a94 <lwip_setsockopt_impl+0x44>
    return EBADF;
  114a8c:	e3a03009 	mov	r3, #9
  114a90:	ea000248 	b	1153b8 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114a94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114a98:	e3530006 	cmp	r3, #6
  114a9c:	0a0001d3 	beq	1151f0 <lwip_setsockopt_impl+0x7a0>
  114aa0:	e3530006 	cmp	r3, #6
  114aa4:	ca000002 	bgt	114ab4 <lwip_setsockopt_impl+0x64>
  114aa8:	e3530000 	cmp	r3, #0
  114aac:	0a0000d2 	beq	114dfc <lwip_setsockopt_impl+0x3ac>
  114ab0:	ea00023c 	b	1153a8 <lwip_setsockopt_impl+0x958>
  114ab4:	e35300ff 	cmp	r3, #255	; 0xff
  114ab8:	0a000236 	beq	115398 <lwip_setsockopt_impl+0x948>
  114abc:	e3002fff 	movw	r2, #4095	; 0xfff
  114ac0:	e1530002 	cmp	r3, r2
  114ac4:	1a000237 	bne	1153a8 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114ac8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114acc:	e3012002 	movw	r2, #4098	; 0x1002
  114ad0:	e1530002 	cmp	r3, r2
  114ad4:	0a000081 	beq	114ce0 <lwip_setsockopt_impl+0x290>
  114ad8:	e3012002 	movw	r2, #4098	; 0x1002
  114adc:	e1530002 	cmp	r3, r2
  114ae0:	ca000006 	bgt	114b00 <lwip_setsockopt_impl+0xb0>
  114ae4:	e3530008 	cmp	r3, #8
  114ae8:	0a00000e 	beq	114b28 <lwip_setsockopt_impl+0xd8>
  114aec:	e3530020 	cmp	r3, #32
  114af0:	0a00000c 	beq	114b28 <lwip_setsockopt_impl+0xd8>
  114af4:	e3530004 	cmp	r3, #4
  114af8:	0a00000a 	beq	114b28 <lwip_setsockopt_impl+0xd8>
  114afc:	ea0000ba 	b	114dec <lwip_setsockopt_impl+0x39c>
  114b00:	e3012006 	movw	r2, #4102	; 0x1006
  114b04:	e1530002 	cmp	r3, r2
  114b08:	0a000057 	beq	114c6c <lwip_setsockopt_impl+0x21c>
  114b0c:	e301200a 	movw	r2, #4106	; 0x100a
  114b10:	e1530002 	cmp	r3, r2
  114b14:	0a000082 	beq	114d24 <lwip_setsockopt_impl+0x2d4>
  114b18:	e3012005 	movw	r2, #4101	; 0x1005
  114b1c:	e1530002 	cmp	r3, r2
  114b20:	0a000034 	beq	114bf8 <lwip_setsockopt_impl+0x1a8>
  114b24:	ea0000b0 	b	114dec <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114b28:	e59b3004 	ldr	r3, [fp, #4]
  114b2c:	e3530003 	cmp	r3, #3
  114b30:	8a000001 	bhi	114b3c <lwip_setsockopt_impl+0xec>
  114b34:	e3a03016 	mov	r3, #22
  114b38:	ea00021e 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114b3c:	e51b300c 	ldr	r3, [fp, #-12]
  114b40:	e5933000 	ldr	r3, [r3]
  114b44:	e3530000 	cmp	r3, #0
  114b48:	0a000004 	beq	114b60 <lwip_setsockopt_impl+0x110>
  114b4c:	e51b300c 	ldr	r3, [fp, #-12]
  114b50:	e5933000 	ldr	r3, [r3]
  114b54:	e5933008 	ldr	r3, [r3, #8]
  114b58:	e3530000 	cmp	r3, #0
  114b5c:	1a000001 	bne	114b68 <lwip_setsockopt_impl+0x118>
  114b60:	e3a03016 	mov	r3, #22
  114b64:	ea000213 	b	1153b8 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114b68:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b6c:	e5933000 	ldr	r3, [r3]
  114b70:	e3530000 	cmp	r3, #0
  114b74:	0a00000e 	beq	114bb4 <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114b78:	e51b300c 	ldr	r3, [fp, #-12]
  114b7c:	e5933000 	ldr	r3, [r3]
  114b80:	e5933008 	ldr	r3, [r3, #8]
  114b84:	e5d33008 	ldrb	r3, [r3, #8]
  114b88:	e6af2073 	sxtb	r2, r3
  114b8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b90:	e6af3073 	sxtb	r3, r3
  114b94:	e1823003 	orr	r3, r2, r3
  114b98:	e6af2073 	sxtb	r2, r3
  114b9c:	e51b300c 	ldr	r3, [fp, #-12]
  114ba0:	e5933000 	ldr	r3, [r3]
  114ba4:	e5933008 	ldr	r3, [r3, #8]
  114ba8:	e6ef2072 	uxtb	r2, r2
  114bac:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114bb0:	ea000090 	b	114df8 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114bb4:	e51b300c 	ldr	r3, [fp, #-12]
  114bb8:	e5933000 	ldr	r3, [r3]
  114bbc:	e5933008 	ldr	r3, [r3, #8]
  114bc0:	e5d33008 	ldrb	r3, [r3, #8]
  114bc4:	e6af2073 	sxtb	r2, r3
  114bc8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114bcc:	e6af3073 	sxtb	r3, r3
  114bd0:	e1e03003 	mvn	r3, r3
  114bd4:	e6af3073 	sxtb	r3, r3
  114bd8:	e0033002 	and	r3, r3, r2
  114bdc:	e6af2073 	sxtb	r2, r3
  114be0:	e51b300c 	ldr	r3, [fp, #-12]
  114be4:	e5933000 	ldr	r3, [r3]
  114be8:	e5933008 	ldr	r3, [r3, #8]
  114bec:	e6ef2072 	uxtb	r2, r2
  114bf0:	e5c32008 	strb	r2, [r3, #8]
      break;
  114bf4:	ea00007f 	b	114df8 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114bf8:	e59b3004 	ldr	r3, [fp, #4]
  114bfc:	e353000f 	cmp	r3, #15
  114c00:	8a000001 	bhi	114c0c <lwip_setsockopt_impl+0x1bc>
  114c04:	e3a03016 	mov	r3, #22
  114c08:	ea0001ea 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114c0c:	e51b300c 	ldr	r3, [fp, #-12]
  114c10:	e5933000 	ldr	r3, [r3]
  114c14:	e3530000 	cmp	r3, #0
  114c18:	1a000001 	bne	114c24 <lwip_setsockopt_impl+0x1d4>
  114c1c:	e3a03016 	mov	r3, #22
  114c20:	ea0001e4 	b	1153b8 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114c24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c28:	e1c320d0 	ldrd	r2, [r3]
  114c2c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114c30:	e0010293 	mul	r1, r3, r2
  114c34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c38:	e5933008 	ldr	r3, [r3, #8]
  114c3c:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114c40:	e2833003 	add	r3, r3, #3
  114c44:	e1a02003 	mov	r2, r3
  114c48:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114c4c:	e3413062 	movt	r3, #4194	; 0x1062
  114c50:	e0832392 	umull	r2, r3, r2, r3
  114c54:	e1a03323 	lsr	r3, r3, #6
  114c58:	e0812003 	add	r2, r1, r3
  114c5c:	e51b300c 	ldr	r3, [fp, #-12]
  114c60:	e5933000 	ldr	r3, [r3]
  114c64:	e5832020 	str	r2, [r3, #32]
      break;
  114c68:	ea000062 	b	114df8 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114c6c:	e59b3004 	ldr	r3, [fp, #4]
  114c70:	e353000f 	cmp	r3, #15
  114c74:	8a000001 	bhi	114c80 <lwip_setsockopt_impl+0x230>
  114c78:	e3a03016 	mov	r3, #22
  114c7c:	ea0001cd 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114c80:	e51b300c 	ldr	r3, [fp, #-12]
  114c84:	e5933000 	ldr	r3, [r3]
  114c88:	e3530000 	cmp	r3, #0
  114c8c:	1a000001 	bne	114c98 <lwip_setsockopt_impl+0x248>
  114c90:	e3a03016 	mov	r3, #22
  114c94:	ea0001c7 	b	1153b8 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114c98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c9c:	e1c320d0 	ldrd	r2, [r3]
  114ca0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114ca4:	e0010293 	mul	r1, r3, r2
  114ca8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114cac:	e5933008 	ldr	r3, [r3, #8]
  114cb0:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114cb4:	e2833003 	add	r3, r3, #3
  114cb8:	e1a02003 	mov	r2, r3
  114cbc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114cc0:	e3413062 	movt	r3, #4194	; 0x1062
  114cc4:	e0832392 	umull	r2, r3, r2, r3
  114cc8:	e1a03323 	lsr	r3, r3, #6
  114ccc:	e0812003 	add	r2, r1, r3
  114cd0:	e51b300c 	ldr	r3, [fp, #-12]
  114cd4:	e5933000 	ldr	r3, [r3]
  114cd8:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  114cdc:	ea000045 	b	114df8 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  114ce0:	e59b3004 	ldr	r3, [fp, #4]
  114ce4:	e3530003 	cmp	r3, #3
  114ce8:	8a000001 	bhi	114cf4 <lwip_setsockopt_impl+0x2a4>
  114cec:	e3a03016 	mov	r3, #22
  114cf0:	ea0001b0 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114cf4:	e51b300c 	ldr	r3, [fp, #-12]
  114cf8:	e5933000 	ldr	r3, [r3]
  114cfc:	e3530000 	cmp	r3, #0
  114d00:	1a000001 	bne	114d0c <lwip_setsockopt_impl+0x2bc>
  114d04:	e3a03016 	mov	r3, #22
  114d08:	ea0001aa 	b	1153b8 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  114d0c:	e51b300c 	ldr	r3, [fp, #-12]
  114d10:	e5933000 	ldr	r3, [r3]
  114d14:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114d18:	e5922000 	ldr	r2, [r2]
  114d1c:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  114d20:	ea000034 	b	114df8 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  114d24:	e59b3004 	ldr	r3, [fp, #4]
  114d28:	e3530003 	cmp	r3, #3
  114d2c:	8a000001 	bhi	114d38 <lwip_setsockopt_impl+0x2e8>
  114d30:	e3a03016 	mov	r3, #22
  114d34:	ea00019f 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114d38:	e51b300c 	ldr	r3, [fp, #-12]
  114d3c:	e5933000 	ldr	r3, [r3]
  114d40:	e3530000 	cmp	r3, #0
  114d44:	0a000004 	beq	114d5c <lwip_setsockopt_impl+0x30c>
  114d48:	e51b300c 	ldr	r3, [fp, #-12]
  114d4c:	e5933000 	ldr	r3, [r3]
  114d50:	e5933008 	ldr	r3, [r3, #8]
  114d54:	e3530000 	cmp	r3, #0
  114d58:	1a000001 	bne	114d64 <lwip_setsockopt_impl+0x314>
  114d5c:	e3a03016 	mov	r3, #22
  114d60:	ea000194 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114d64:	e51b300c 	ldr	r3, [fp, #-12]
  114d68:	e5933000 	ldr	r3, [r3]
  114d6c:	e5933000 	ldr	r3, [r3]
  114d70:	e20330f0 	and	r3, r3, #240	; 0xf0
  114d74:	e3530020 	cmp	r3, #32
  114d78:	0a000001 	beq	114d84 <lwip_setsockopt_impl+0x334>
  114d7c:	e3a0305c 	mov	r3, #92	; 0x5c
  114d80:	ea00018c 	b	1153b8 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  114d84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114d88:	e5933000 	ldr	r3, [r3]
  114d8c:	e3530000 	cmp	r3, #0
  114d90:	0a00000a 	beq	114dc0 <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  114d94:	e51b300c 	ldr	r3, [fp, #-12]
  114d98:	e5933000 	ldr	r3, [r3]
  114d9c:	e5933008 	ldr	r3, [r3, #8]
  114da0:	e5d32010 	ldrb	r2, [r3, #16]
  114da4:	e51b300c 	ldr	r3, [fp, #-12]
  114da8:	e5933000 	ldr	r3, [r3]
  114dac:	e5933008 	ldr	r3, [r3, #8]
  114db0:	e3822001 	orr	r2, r2, #1
  114db4:	e6ef2072 	uxtb	r2, r2
  114db8:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  114dbc:	ea00000d 	b	114df8 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  114dc0:	e51b300c 	ldr	r3, [fp, #-12]
  114dc4:	e5933000 	ldr	r3, [r3]
  114dc8:	e5933008 	ldr	r3, [r3, #8]
  114dcc:	e5d32010 	ldrb	r2, [r3, #16]
  114dd0:	e51b300c 	ldr	r3, [fp, #-12]
  114dd4:	e5933000 	ldr	r3, [r3]
  114dd8:	e5933008 	ldr	r3, [r3, #8]
  114ddc:	e3c22001 	bic	r2, r2, #1
  114de0:	e6ef2072 	uxtb	r2, r2
  114de4:	e5c32010 	strb	r2, [r3, #16]
      break;
  114de8:	ea000002 	b	114df8 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114dec:	e3a0305c 	mov	r3, #92	; 0x5c
  114df0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114df4:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114df8:	ea00016d 	b	1153b4 <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114dfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114e00:	e2433001 	sub	r3, r3, #1
  114e04:	e3530006 	cmp	r3, #6
  114e08:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114e0c:	ea0000f2 	b	1151dc <lwip_setsockopt_impl+0x78c>
  114e10:	00114e8c 	.word	0x00114e8c
  114e14:	00114e2c 	.word	0x00114e2c
  114e18:	001150b4 	.word	0x001150b4
  114e1c:	001150b4 	.word	0x001150b4
  114e20:	00114eec 	.word	0x00114eec
  114e24:	00114f68 	.word	0x00114f68
  114e28:	00114fec 	.word	0x00114fec
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e2c:	e59b3004 	ldr	r3, [fp, #4]
  114e30:	e3530003 	cmp	r3, #3
  114e34:	8a000001 	bhi	114e40 <lwip_setsockopt_impl+0x3f0>
  114e38:	e3a03016 	mov	r3, #22
  114e3c:	ea00015d 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114e40:	e51b300c 	ldr	r3, [fp, #-12]
  114e44:	e5933000 	ldr	r3, [r3]
  114e48:	e3530000 	cmp	r3, #0
  114e4c:	0a000004 	beq	114e64 <lwip_setsockopt_impl+0x414>
  114e50:	e51b300c 	ldr	r3, [fp, #-12]
  114e54:	e5933000 	ldr	r3, [r3]
  114e58:	e5933008 	ldr	r3, [r3, #8]
  114e5c:	e3530000 	cmp	r3, #0
  114e60:	1a000001 	bne	114e6c <lwip_setsockopt_impl+0x41c>
  114e64:	e3a03016 	mov	r3, #22
  114e68:	ea000152 	b	1153b8 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  114e6c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e70:	e5932000 	ldr	r2, [r3]
  114e74:	e51b300c 	ldr	r3, [fp, #-12]
  114e78:	e5933000 	ldr	r3, [r3]
  114e7c:	e5933008 	ldr	r3, [r3, #8]
  114e80:	e6ef2072 	uxtb	r2, r2
  114e84:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  114e88:	ea0000d7 	b	1151ec <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e8c:	e59b3004 	ldr	r3, [fp, #4]
  114e90:	e3530003 	cmp	r3, #3
  114e94:	8a000001 	bhi	114ea0 <lwip_setsockopt_impl+0x450>
  114e98:	e3a03016 	mov	r3, #22
  114e9c:	ea000145 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114ea0:	e51b300c 	ldr	r3, [fp, #-12]
  114ea4:	e5933000 	ldr	r3, [r3]
  114ea8:	e3530000 	cmp	r3, #0
  114eac:	0a000004 	beq	114ec4 <lwip_setsockopt_impl+0x474>
  114eb0:	e51b300c 	ldr	r3, [fp, #-12]
  114eb4:	e5933000 	ldr	r3, [r3]
  114eb8:	e5933008 	ldr	r3, [r3, #8]
  114ebc:	e3530000 	cmp	r3, #0
  114ec0:	1a000001 	bne	114ecc <lwip_setsockopt_impl+0x47c>
  114ec4:	e3a03016 	mov	r3, #22
  114ec8:	ea00013a 	b	1153b8 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  114ecc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114ed0:	e5932000 	ldr	r2, [r3]
  114ed4:	e51b300c 	ldr	r3, [fp, #-12]
  114ed8:	e5933000 	ldr	r3, [r3]
  114edc:	e5933008 	ldr	r3, [r3, #8]
  114ee0:	e6ef2072 	uxtb	r2, r2
  114ee4:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  114ee8:	ea0000bf 	b	1151ec <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  114eec:	e59b3004 	ldr	r3, [fp, #4]
  114ef0:	e3530000 	cmp	r3, #0
  114ef4:	1a000001 	bne	114f00 <lwip_setsockopt_impl+0x4b0>
  114ef8:	e3a03016 	mov	r3, #22
  114efc:	ea00012d 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114f00:	e51b300c 	ldr	r3, [fp, #-12]
  114f04:	e5933000 	ldr	r3, [r3]
  114f08:	e3530000 	cmp	r3, #0
  114f0c:	0a000004 	beq	114f24 <lwip_setsockopt_impl+0x4d4>
  114f10:	e51b300c 	ldr	r3, [fp, #-12]
  114f14:	e5933000 	ldr	r3, [r3]
  114f18:	e5933008 	ldr	r3, [r3, #8]
  114f1c:	e3530000 	cmp	r3, #0
  114f20:	1a000001 	bne	114f2c <lwip_setsockopt_impl+0x4dc>
  114f24:	e3a03016 	mov	r3, #22
  114f28:	ea000122 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114f2c:	e51b300c 	ldr	r3, [fp, #-12]
  114f30:	e5933000 	ldr	r3, [r3]
  114f34:	e5933000 	ldr	r3, [r3]
  114f38:	e20330f0 	and	r3, r3, #240	; 0xf0
  114f3c:	e3530020 	cmp	r3, #32
  114f40:	0a000001 	beq	114f4c <lwip_setsockopt_impl+0x4fc>
  114f44:	e3a0305c 	mov	r3, #92	; 0x5c
  114f48:	ea00011a 	b	1153b8 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  114f4c:	e51b300c 	ldr	r3, [fp, #-12]
  114f50:	e5933000 	ldr	r3, [r3]
  114f54:	e5933008 	ldr	r3, [r3, #8]
  114f58:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114f5c:	e5d22000 	ldrb	r2, [r2]
  114f60:	e5c3201c 	strb	r2, [r3, #28]
      break;
  114f64:	ea0000a0 	b	1151ec <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  114f68:	e59b3004 	ldr	r3, [fp, #4]
  114f6c:	e3530003 	cmp	r3, #3
  114f70:	8a000001 	bhi	114f7c <lwip_setsockopt_impl+0x52c>
  114f74:	e3a03016 	mov	r3, #22
  114f78:	ea00010e 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114f7c:	e51b300c 	ldr	r3, [fp, #-12]
  114f80:	e5933000 	ldr	r3, [r3]
  114f84:	e3530000 	cmp	r3, #0
  114f88:	0a000004 	beq	114fa0 <lwip_setsockopt_impl+0x550>
  114f8c:	e51b300c 	ldr	r3, [fp, #-12]
  114f90:	e5933000 	ldr	r3, [r3]
  114f94:	e5933008 	ldr	r3, [r3, #8]
  114f98:	e3530000 	cmp	r3, #0
  114f9c:	1a000001 	bne	114fa8 <lwip_setsockopt_impl+0x558>
  114fa0:	e3a03016 	mov	r3, #22
  114fa4:	ea000103 	b	1153b8 <lwip_setsockopt_impl+0x968>
  114fa8:	e51b300c 	ldr	r3, [fp, #-12]
  114fac:	e5933000 	ldr	r3, [r3]
  114fb0:	e5933000 	ldr	r3, [r3]
  114fb4:	e20330f0 	and	r3, r3, #240	; 0xf0
  114fb8:	e3530020 	cmp	r3, #32
  114fbc:	0a000001 	beq	114fc8 <lwip_setsockopt_impl+0x578>
  114fc0:	e3a0305c 	mov	r3, #92	; 0x5c
  114fc4:	ea0000fb 	b	1153b8 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  114fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fcc:	e5933000 	ldr	r3, [r3]
  114fd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  114fd4:	e51b300c 	ldr	r3, [fp, #-12]
  114fd8:	e5933000 	ldr	r3, [r3]
  114fdc:	e5933008 	ldr	r3, [r3, #8]
  114fe0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  114fe4:	e5832018 	str	r2, [r3, #24]
      }
      break;
  114fe8:	ea00007f 	b	1151ec <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  114fec:	e59b3004 	ldr	r3, [fp, #4]
  114ff0:	e3530000 	cmp	r3, #0
  114ff4:	1a000001 	bne	115000 <lwip_setsockopt_impl+0x5b0>
  114ff8:	e3a03016 	mov	r3, #22
  114ffc:	ea0000ed 	b	1153b8 <lwip_setsockopt_impl+0x968>
  115000:	e51b300c 	ldr	r3, [fp, #-12]
  115004:	e5933000 	ldr	r3, [r3]
  115008:	e3530000 	cmp	r3, #0
  11500c:	0a000004 	beq	115024 <lwip_setsockopt_impl+0x5d4>
  115010:	e51b300c 	ldr	r3, [fp, #-12]
  115014:	e5933000 	ldr	r3, [r3]
  115018:	e5933008 	ldr	r3, [r3, #8]
  11501c:	e3530000 	cmp	r3, #0
  115020:	1a000001 	bne	11502c <lwip_setsockopt_impl+0x5dc>
  115024:	e3a03016 	mov	r3, #22
  115028:	ea0000e2 	b	1153b8 <lwip_setsockopt_impl+0x968>
  11502c:	e51b300c 	ldr	r3, [fp, #-12]
  115030:	e5933000 	ldr	r3, [r3]
  115034:	e5933000 	ldr	r3, [r3]
  115038:	e20330f0 	and	r3, r3, #240	; 0xf0
  11503c:	e3530020 	cmp	r3, #32
  115040:	0a000001 	beq	11504c <lwip_setsockopt_impl+0x5fc>
  115044:	e3a0305c 	mov	r3, #92	; 0x5c
  115048:	ea0000da 	b	1153b8 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  11504c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115050:	e5d33000 	ldrb	r3, [r3]
  115054:	e3530000 	cmp	r3, #0
  115058:	0a00000a 	beq	115088 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  11505c:	e51b300c 	ldr	r3, [fp, #-12]
  115060:	e5933000 	ldr	r3, [r3]
  115064:	e5933008 	ldr	r3, [r3, #8]
  115068:	e5d32010 	ldrb	r2, [r3, #16]
  11506c:	e51b300c 	ldr	r3, [fp, #-12]
  115070:	e5933000 	ldr	r3, [r3]
  115074:	e5933008 	ldr	r3, [r3, #8]
  115078:	e3822008 	orr	r2, r2, #8
  11507c:	e6ef2072 	uxtb	r2, r2
  115080:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  115084:	ea000058 	b	1151ec <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  115088:	e51b300c 	ldr	r3, [fp, #-12]
  11508c:	e5933000 	ldr	r3, [r3]
  115090:	e5933008 	ldr	r3, [r3, #8]
  115094:	e5d32010 	ldrb	r2, [r3, #16]
  115098:	e51b300c 	ldr	r3, [fp, #-12]
  11509c:	e5933000 	ldr	r3, [r3]
  1150a0:	e5933008 	ldr	r3, [r3, #8]
  1150a4:	e3c22008 	bic	r2, r2, #8
  1150a8:	e6ef2072 	uxtb	r2, r2
  1150ac:	e5c32010 	strb	r2, [r3, #16]
      break;
  1150b0:	ea00004d 	b	1151ec <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  1150b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1150b8:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  1150bc:	e59b3004 	ldr	r3, [fp, #4]
  1150c0:	e3530007 	cmp	r3, #7
  1150c4:	8a000001 	bhi	1150d0 <lwip_setsockopt_impl+0x680>
  1150c8:	e3a03016 	mov	r3, #22
  1150cc:	ea0000b9 	b	1153b8 <lwip_setsockopt_impl+0x968>
  1150d0:	e51b300c 	ldr	r3, [fp, #-12]
  1150d4:	e5933000 	ldr	r3, [r3]
  1150d8:	e3530000 	cmp	r3, #0
  1150dc:	0a000004 	beq	1150f4 <lwip_setsockopt_impl+0x6a4>
  1150e0:	e51b300c 	ldr	r3, [fp, #-12]
  1150e4:	e5933000 	ldr	r3, [r3]
  1150e8:	e5933008 	ldr	r3, [r3, #8]
  1150ec:	e3530000 	cmp	r3, #0
  1150f0:	1a000001 	bne	1150fc <lwip_setsockopt_impl+0x6ac>
  1150f4:	e3a03016 	mov	r3, #22
  1150f8:	ea0000ae 	b	1153b8 <lwip_setsockopt_impl+0x968>
  1150fc:	e51b300c 	ldr	r3, [fp, #-12]
  115100:	e5933000 	ldr	r3, [r3]
  115104:	e5933000 	ldr	r3, [r3]
  115108:	e20330f0 	and	r3, r3, #240	; 0xf0
  11510c:	e3530020 	cmp	r3, #32
  115110:	0a000001 	beq	11511c <lwip_setsockopt_impl+0x6cc>
  115114:	e3a0305c 	mov	r3, #92	; 0x5c
  115118:	ea0000a6 	b	1153b8 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  11511c:	e51b3010 	ldr	r3, [fp, #-16]
  115120:	e5933004 	ldr	r3, [r3, #4]
  115124:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  115128:	e51b3010 	ldr	r3, [fp, #-16]
  11512c:	e5933000 	ldr	r3, [r3]
  115130:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  115134:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115138:	e3530003 	cmp	r3, #3
  11513c:	1a000014 	bne	115194 <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  115140:	e24b201c 	sub	r2, fp, #28
  115144:	e24b3018 	sub	r3, fp, #24
  115148:	e1a01003 	mov	r1, r3
  11514c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115150:	eb0001ba 	bl	115840 <lwip_socket_register_membership>
  115154:	e1a03000 	mov	r3, r0
  115158:	e3530000 	cmp	r3, #0
  11515c:	1a000004 	bne	115174 <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  115160:	e3a0300c 	mov	r3, #12
  115164:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  115168:	e3a03000 	mov	r3, #0
  11516c:	e54b3006 	strb	r3, [fp, #-6]
  115170:	ea000013 	b	1151c4 <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  115174:	e24b201c 	sub	r2, fp, #28
  115178:	e24b3018 	sub	r3, fp, #24
  11517c:	e1a01002 	mov	r1, r2
  115180:	e1a00003 	mov	r0, r3
  115184:	eb006c95 	bl	1303e0 <igmp_joingroup>
  115188:	e1a03000 	mov	r3, r0
  11518c:	e54b3006 	strb	r3, [fp, #-6]
  115190:	ea00000b 	b	1151c4 <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  115194:	e24b201c 	sub	r2, fp, #28
  115198:	e24b3018 	sub	r3, fp, #24
  11519c:	e1a01002 	mov	r1, r2
  1151a0:	e1a00003 	mov	r0, r3
  1151a4:	eb006d46 	bl	1306c4 <igmp_leavegroup>
  1151a8:	e1a03000 	mov	r3, r0
  1151ac:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  1151b0:	e24b201c 	sub	r2, fp, #28
  1151b4:	e24b3018 	sub	r3, fp, #24
  1151b8:	e1a01003 	mov	r1, r3
  1151bc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1151c0:	eb0001e0 	bl	115948 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  1151c4:	e15b30d6 	ldrsb	r3, [fp, #-6]
  1151c8:	e3530000 	cmp	r3, #0
  1151cc:	0a000005 	beq	1151e8 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  1151d0:	e3a03063 	mov	r3, #99	; 0x63
  1151d4:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  1151d8:	ea000002 	b	1151e8 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1151dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1151e0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1151e4:	ea000000 	b	1151ec <lwip_setsockopt_impl+0x79c>
      break;
  1151e8:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1151ec:	ea000070 	b	1153b4 <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  1151f0:	e59b3004 	ldr	r3, [fp, #4]
  1151f4:	e3530003 	cmp	r3, #3
  1151f8:	8a000001 	bhi	115204 <lwip_setsockopt_impl+0x7b4>
  1151fc:	e3a03016 	mov	r3, #22
  115200:	ea00006c 	b	1153b8 <lwip_setsockopt_impl+0x968>
  115204:	e51b300c 	ldr	r3, [fp, #-12]
  115208:	e5933000 	ldr	r3, [r3]
  11520c:	e3530000 	cmp	r3, #0
  115210:	0a000004 	beq	115228 <lwip_setsockopt_impl+0x7d8>
  115214:	e51b300c 	ldr	r3, [fp, #-12]
  115218:	e5933000 	ldr	r3, [r3]
  11521c:	e5933008 	ldr	r3, [r3, #8]
  115220:	e3530000 	cmp	r3, #0
  115224:	1a000001 	bne	115230 <lwip_setsockopt_impl+0x7e0>
  115228:	e3a03016 	mov	r3, #22
  11522c:	ea000061 	b	1153b8 <lwip_setsockopt_impl+0x968>
  115230:	e51b300c 	ldr	r3, [fp, #-12]
  115234:	e5933000 	ldr	r3, [r3]
  115238:	e5933000 	ldr	r3, [r3]
  11523c:	e20330f0 	and	r3, r3, #240	; 0xf0
  115240:	e3530010 	cmp	r3, #16
  115244:	0a000001 	beq	115250 <lwip_setsockopt_impl+0x800>
  115248:	e3a0305c 	mov	r3, #92	; 0x5c
  11524c:	ea000059 	b	1153b8 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  115250:	e51b300c 	ldr	r3, [fp, #-12]
  115254:	e5933000 	ldr	r3, [r3]
  115258:	e5933008 	ldr	r3, [r3, #8]
  11525c:	e5933014 	ldr	r3, [r3, #20]
  115260:	e3530001 	cmp	r3, #1
  115264:	1a000001 	bne	115270 <lwip_setsockopt_impl+0x820>
      return EINVAL;
  115268:	e3a03016 	mov	r3, #22
  11526c:	ea000051 	b	1153b8 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  115270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115274:	e2433001 	sub	r3, r3, #1
  115278:	e3530004 	cmp	r3, #4
  11527c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115280:	ea000040 	b	115388 <lwip_setsockopt_impl+0x938>
  115284:	00115298 	.word	0x00115298
  115288:	00115300 	.word	0x00115300
  11528c:	0011531c 	.word	0x0011531c
  115290:	00115344 	.word	0x00115344
  115294:	0011536c 	.word	0x0011536c
    case TCP_NODELAY:
      if (*(const int*)optval) {
  115298:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11529c:	e5933000 	ldr	r3, [r3]
  1152a0:	e3530000 	cmp	r3, #0
  1152a4:	0a00000a 	beq	1152d4 <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  1152a8:	e51b300c 	ldr	r3, [fp, #-12]
  1152ac:	e5933000 	ldr	r3, [r3]
  1152b0:	e5933008 	ldr	r3, [r3, #8]
  1152b4:	e5d3201e 	ldrb	r2, [r3, #30]
  1152b8:	e51b300c 	ldr	r3, [fp, #-12]
  1152bc:	e5933000 	ldr	r3, [r3]
  1152c0:	e5933008 	ldr	r3, [r3, #8]
  1152c4:	e3822040 	orr	r2, r2, #64	; 0x40
  1152c8:	e6ef2072 	uxtb	r2, r2
  1152cc:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  1152d0:	ea00002f 	b	115394 <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  1152d4:	e51b300c 	ldr	r3, [fp, #-12]
  1152d8:	e5933000 	ldr	r3, [r3]
  1152dc:	e5933008 	ldr	r3, [r3, #8]
  1152e0:	e5d3201e 	ldrb	r2, [r3, #30]
  1152e4:	e51b300c 	ldr	r3, [fp, #-12]
  1152e8:	e5933000 	ldr	r3, [r3]
  1152ec:	e5933008 	ldr	r3, [r3, #8]
  1152f0:	e3c22040 	bic	r2, r2, #64	; 0x40
  1152f4:	e6ef2072 	uxtb	r2, r2
  1152f8:	e5c3201e 	strb	r2, [r3, #30]
      break;
  1152fc:	ea000024 	b	115394 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  115300:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115304:	e5932000 	ldr	r2, [r3]
  115308:	e51b300c 	ldr	r3, [fp, #-12]
  11530c:	e5933000 	ldr	r3, [r3]
  115310:	e5933008 	ldr	r3, [r3, #8]
  115314:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115318:	ea00001d 	b	115394 <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  11531c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115320:	e5933000 	ldr	r3, [r3]
  115324:	e1a01003 	mov	r1, r3
  115328:	e51b300c 	ldr	r3, [fp, #-12]
  11532c:	e5933000 	ldr	r3, [r3]
  115330:	e5933008 	ldr	r3, [r3, #8]
  115334:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115338:	e0020192 	mul	r2, r2, r1
  11533c:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115340:	ea000013 	b	115394 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  115344:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115348:	e5933000 	ldr	r3, [r3]
  11534c:	e1a01003 	mov	r1, r3
  115350:	e51b300c 	ldr	r3, [fp, #-12]
  115354:	e5933000 	ldr	r3, [r3]
  115358:	e5933008 	ldr	r3, [r3, #8]
  11535c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115360:	e0020192 	mul	r2, r2, r1
  115364:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  115368:	ea000009 	b	115394 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  11536c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115370:	e5932000 	ldr	r2, [r3]
  115374:	e51b300c 	ldr	r3, [fp, #-12]
  115378:	e5933000 	ldr	r3, [r3]
  11537c:	e5933008 	ldr	r3, [r3, #8]
  115380:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  115384:	ea000002 	b	115394 <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115388:	e3a0305c 	mov	r3, #92	; 0x5c
  11538c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115390:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115394:	ea000006 	b	1153b4 <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  115398:	e3a0305c 	mov	r3, #92	; 0x5c
  11539c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1153a0:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1153a4:	ea000002 	b	1153b4 <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  1153a8:	e3a0305c 	mov	r3, #92	; 0x5c
  1153ac:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1153b0:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  1153b4:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1153b8:	e1a00003 	mov	r0, r3
  1153bc:	e24bd004 	sub	sp, fp, #4
  1153c0:	e8bd8800 	pop	{fp, pc}

001153c4 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  1153c4:	e92d4800 	push	{fp, lr}
  1153c8:	e28db004 	add	fp, sp, #4
  1153cc:	e24dd038 	sub	sp, sp, #56	; 0x38
  1153d0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1153d4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1153d8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  1153dc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1153e0:	ebffedf7 	bl	110bc4 <get_socket>
  1153e4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  1153e8:	e3a03000 	mov	r3, #0
  1153ec:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  1153f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1153f4:	e3530000 	cmp	r3, #0
  1153f8:	1a000001 	bne	115404 <lwip_ioctl+0x40>
    return -1;
  1153fc:	e3e03000 	mvn	r3, #0
  115400:	ea000093 	b	115654 <lwip_ioctl+0x290>
  }

  switch (cmd) {
  115404:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  115408:	e306367f 	movw	r3, #26239	; 0x667f
  11540c:	e3483004 	movt	r3, #32772	; 0x8004
  115410:	e1520003 	cmp	r2, r3
  115414:	0a00000e 	beq	115454 <lwip_ioctl+0x90>
  115418:	e306367e 	movw	r3, #26238	; 0x667e
  11541c:	e3443004 	movt	r3, #16388	; 0x4004
  115420:	e1520003 	cmp	r2, r3
  115424:	0a000057 	beq	115588 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  115428:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  11542c:	e3a03026 	mov	r3, #38	; 0x26
  115430:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  115434:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115438:	e6ef2073 	uxtb	r2, r3
  11543c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115440:	e5c32010 	strb	r2, [r3, #16]
  115444:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115448:	e3530000 	cmp	r3, #0
  11544c:	0a00007f 	beq	115650 <lwip_ioctl+0x28c>
  115450:	ea00007a 	b	115640 <lwip_ioctl+0x27c>
    if (!argp) {
  115454:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115458:	e3530000 	cmp	r3, #0
  11545c:	1a00000e 	bne	11549c <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  115460:	e3a03016 	mov	r3, #22
  115464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  115468:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11546c:	e6ef2073 	uxtb	r2, r3
  115470:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115474:	e5c32010 	strb	r2, [r3, #16]
  115478:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11547c:	e3530000 	cmp	r3, #0
  115480:	0a000003 	beq	115494 <lwip_ioctl+0xd0>
  115484:	eb008dcf 	bl	138bc8 <__errno_location>
  115488:	e1a02000 	mov	r2, r0
  11548c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115490:	e5823000 	str	r3, [r2]
      return -1;
  115494:	e3e03000 	mvn	r3, #0
  115498:	ea00006d 	b	115654 <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  11549c:	ebffb366 	bl	10223c <rt_enter_critical>
  1154a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154a4:	e5933000 	ldr	r3, [r3]
  1154a8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1154ac:	e50b300c 	str	r3, [fp, #-12]
  1154b0:	ebffb367 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  1154b4:	e51b300c 	ldr	r3, [fp, #-12]
  1154b8:	e3530000 	cmp	r3, #0
  1154bc:	aa000001 	bge	1154c8 <lwip_ioctl+0x104>
      recv_avail = 0;
  1154c0:	e3a03000 	mov	r3, #0
  1154c4:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  1154c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1154cc:	e51b200c 	ldr	r2, [fp, #-12]
  1154d0:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  1154d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154d8:	e5933004 	ldr	r3, [r3, #4]
  1154dc:	e3530000 	cmp	r3, #0
  1154e0:	0a000019 	beq	11554c <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  1154e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154e8:	e5933004 	ldr	r3, [r3, #4]
  1154ec:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  1154f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154f4:	e5933000 	ldr	r3, [r3]
  1154f8:	e5933000 	ldr	r3, [r3]
  1154fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  115500:	e3530010 	cmp	r3, #16
  115504:	0a000002 	beq	115514 <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  115508:	e51b3010 	ldr	r3, [fp, #-16]
  11550c:	e5933000 	ldr	r3, [r3]
  115510:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  115514:	e51b3010 	ldr	r3, [fp, #-16]
  115518:	e1d330b8 	ldrh	r3, [r3, #8]
  11551c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  115520:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115524:	e1d330b8 	ldrh	r3, [r3, #8]
  115528:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11552c:	e0423003 	sub	r3, r2, r3
  115530:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  115534:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115538:	e5932000 	ldr	r2, [r3]
  11553c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  115540:	e0822003 	add	r2, r2, r3
  115544:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115548:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  11554c:	e3a03000 	mov	r3, #0
  115550:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  115554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115558:	e6ef2073 	uxtb	r2, r3
  11555c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115560:	e5c32010 	strb	r2, [r3, #16]
  115564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115568:	e3530000 	cmp	r3, #0
  11556c:	0a000003 	beq	115580 <lwip_ioctl+0x1bc>
  115570:	eb008d94 	bl	138bc8 <__errno_location>
  115574:	e1a02000 	mov	r2, r0
  115578:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11557c:	e5823000 	str	r3, [r2]
    return 0;
  115580:	e3a03000 	mov	r3, #0
  115584:	ea000032 	b	115654 <lwip_ioctl+0x290>
    val = 0;
  115588:	e3a03000 	mov	r3, #0
  11558c:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  115590:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115594:	e3530000 	cmp	r3, #0
  115598:	0a000005 	beq	1155b4 <lwip_ioctl+0x1f0>
  11559c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1155a0:	e5933000 	ldr	r3, [r3]
  1155a4:	e3530000 	cmp	r3, #0
  1155a8:	0a000001 	beq	1155b4 <lwip_ioctl+0x1f0>
      val = 1;
  1155ac:	e3a03001 	mov	r3, #1
  1155b0:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  1155b4:	e55b3005 	ldrb	r3, [fp, #-5]
  1155b8:	e3530000 	cmp	r3, #0
  1155bc:	0a000008 	beq	1155e4 <lwip_ioctl+0x220>
  1155c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155c4:	e5933000 	ldr	r3, [r3]
  1155c8:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1155cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155d0:	e5933000 	ldr	r3, [r3]
  1155d4:	e3822002 	orr	r2, r2, #2
  1155d8:	e6ef2072 	uxtb	r2, r2
  1155dc:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  1155e0:	ea000007 	b	115604 <lwip_ioctl+0x240>
  1155e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155e8:	e5933000 	ldr	r3, [r3]
  1155ec:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1155f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155f4:	e5933000 	ldr	r3, [r3]
  1155f8:	e3c22002 	bic	r2, r2, #2
  1155fc:	e6ef2072 	uxtb	r2, r2
  115600:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  115604:	e3a03000 	mov	r3, #0
  115608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11560c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115610:	e6ef2073 	uxtb	r2, r3
  115614:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115618:	e5c32010 	strb	r2, [r3, #16]
  11561c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115620:	e3530000 	cmp	r3, #0
  115624:	0a000003 	beq	115638 <lwip_ioctl+0x274>
  115628:	eb008d66 	bl	138bc8 <__errno_location>
  11562c:	e1a02000 	mov	r2, r0
  115630:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115634:	e5823000 	str	r3, [r2]
    return 0;
  115638:	e3a03000 	mov	r3, #0
  11563c:	ea000004 	b	115654 <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115640:	eb008d60 	bl	138bc8 <__errno_location>
  115644:	e1a02000 	mov	r2, r0
  115648:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11564c:	e5823000 	str	r3, [r2]
  return -1;
  115650:	e3e03000 	mvn	r3, #0
}
  115654:	e1a00003 	mov	r0, r3
  115658:	e24bd004 	sub	sp, fp, #4
  11565c:	e8bd8800 	pop	{fp, pc}

00115660 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  115660:	e92d4800 	push	{fp, lr}
  115664:	e28db004 	add	fp, sp, #4
  115668:	e24dd028 	sub	sp, sp, #40	; 0x28
  11566c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  115670:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  115674:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  115678:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11567c:	ebffed50 	bl	110bc4 <get_socket>
  115680:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  115684:	e3e03000 	mvn	r3, #0
  115688:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  11568c:	e51b300c 	ldr	r3, [fp, #-12]
  115690:	e3530000 	cmp	r3, #0
  115694:	1a000001 	bne	1156a0 <lwip_fcntl+0x40>
    return -1;
  115698:	e3e03000 	mvn	r3, #0
  11569c:	ea000064 	b	115834 <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  1156a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1156a4:	e3530003 	cmp	r3, #3
  1156a8:	0a000002 	beq	1156b8 <lwip_fcntl+0x58>
  1156ac:	e3530004 	cmp	r3, #4
  1156b0:	0a000014 	beq	115708 <lwip_fcntl+0xa8>
  1156b4:	ea00004a 	b	1157e4 <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  1156b8:	e51b300c 	ldr	r3, [fp, #-12]
  1156bc:	e5933000 	ldr	r3, [r3]
  1156c0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1156c4:	e1a03503 	lsl	r3, r3, #10
  1156c8:	e2033b02 	and	r3, r3, #2048	; 0x800
  1156cc:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  1156d0:	e3a03000 	mov	r3, #0
  1156d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1156d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1156dc:	e6ef2073 	uxtb	r2, r3
  1156e0:	e51b300c 	ldr	r3, [fp, #-12]
  1156e4:	e5c32010 	strb	r2, [r3, #16]
  1156e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1156ec:	e3530000 	cmp	r3, #0
  1156f0:	0a000049 	beq	11581c <lwip_fcntl+0x1bc>
  1156f4:	eb008d33 	bl	138bc8 <__errno_location>
  1156f8:	e1a02000 	mov	r2, r0
  1156fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115700:	e5823000 	str	r3, [r2]
    break;
  115704:	ea000044 	b	11581c <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  115708:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11570c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115710:	e3530000 	cmp	r3, #0
  115714:	1a000024 	bne	1157ac <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  115718:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11571c:	e2033b02 	and	r3, r3, #2048	; 0x800
  115720:	e3530000 	cmp	r3, #0
  115724:	0a000008 	beq	11574c <lwip_fcntl+0xec>
  115728:	e51b300c 	ldr	r3, [fp, #-12]
  11572c:	e5933000 	ldr	r3, [r3]
  115730:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115734:	e51b300c 	ldr	r3, [fp, #-12]
  115738:	e5933000 	ldr	r3, [r3]
  11573c:	e3822002 	orr	r2, r2, #2
  115740:	e6ef2072 	uxtb	r2, r2
  115744:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115748:	ea000007 	b	11576c <lwip_fcntl+0x10c>
  11574c:	e51b300c 	ldr	r3, [fp, #-12]
  115750:	e5933000 	ldr	r3, [r3]
  115754:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115758:	e51b300c 	ldr	r3, [fp, #-12]
  11575c:	e5933000 	ldr	r3, [r3]
  115760:	e3c22002 	bic	r2, r2, #2
  115764:	e6ef2072 	uxtb	r2, r2
  115768:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  11576c:	e3a03000 	mov	r3, #0
  115770:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  115774:	e3a03000 	mov	r3, #0
  115778:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11577c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115780:	e6ef2073 	uxtb	r2, r3
  115784:	e51b300c 	ldr	r3, [fp, #-12]
  115788:	e5c32010 	strb	r2, [r3, #16]
  11578c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115790:	e3530000 	cmp	r3, #0
  115794:	0a000022 	beq	115824 <lwip_fcntl+0x1c4>
  115798:	eb008d0a 	bl	138bc8 <__errno_location>
  11579c:	e1a02000 	mov	r2, r0
  1157a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157a4:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  1157a8:	ea00001d 	b	115824 <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  1157ac:	e3a03026 	mov	r3, #38	; 0x26
  1157b0:	e50b3010 	str	r3, [fp, #-16]
  1157b4:	e51b3010 	ldr	r3, [fp, #-16]
  1157b8:	e6ef2073 	uxtb	r2, r3
  1157bc:	e51b300c 	ldr	r3, [fp, #-12]
  1157c0:	e5c32010 	strb	r2, [r3, #16]
  1157c4:	e51b3010 	ldr	r3, [fp, #-16]
  1157c8:	e3530000 	cmp	r3, #0
  1157cc:	0a000014 	beq	115824 <lwip_fcntl+0x1c4>
  1157d0:	eb008cfc 	bl	138bc8 <__errno_location>
  1157d4:	e1a02000 	mov	r2, r0
  1157d8:	e51b3010 	ldr	r3, [fp, #-16]
  1157dc:	e5823000 	str	r3, [r2]
    break;
  1157e0:	ea00000f 	b	115824 <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  1157e4:	e3a03026 	mov	r3, #38	; 0x26
  1157e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1157ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1157f0:	e6ef2073 	uxtb	r2, r3
  1157f4:	e51b300c 	ldr	r3, [fp, #-12]
  1157f8:	e5c32010 	strb	r2, [r3, #16]
  1157fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115800:	e3530000 	cmp	r3, #0
  115804:	0a000008 	beq	11582c <lwip_fcntl+0x1cc>
  115808:	eb008cee 	bl	138bc8 <__errno_location>
  11580c:	e1a02000 	mov	r2, r0
  115810:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115814:	e5823000 	str	r3, [r2]
    break;
  115818:	ea000003 	b	11582c <lwip_fcntl+0x1cc>
    break;
  11581c:	e320f000 	nop	{0}
  115820:	ea000002 	b	115830 <lwip_fcntl+0x1d0>
    break;
  115824:	e320f000 	nop	{0}
  115828:	ea000000 	b	115830 <lwip_fcntl+0x1d0>
    break;
  11582c:	e320f000 	nop	{0}
  }
  return ret;
  115830:	e51b3008 	ldr	r3, [fp, #-8]
}
  115834:	e1a00003 	mov	r0, r3
  115838:	e24bd004 	sub	sp, fp, #4
  11583c:	e8bd8800 	pop	{fp, pc}

00115840 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115840:	e92d4800 	push	{fp, lr}
  115844:	e28db004 	add	fp, sp, #4
  115848:	e24dd018 	sub	sp, sp, #24
  11584c:	e50b0010 	str	r0, [fp, #-16]
  115850:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115854:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115858:	e51b0010 	ldr	r0, [fp, #-16]
  11585c:	ebffecd8 	bl	110bc4 <get_socket>
  115860:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115864:	e51b300c 	ldr	r3, [fp, #-12]
  115868:	e3530000 	cmp	r3, #0
  11586c:	1a000001 	bne	115878 <lwip_socket_register_membership+0x38>
    return 0;
  115870:	e3a03000 	mov	r3, #0
  115874:	ea000030 	b	11593c <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115878:	e3a03000 	mov	r3, #0
  11587c:	e50b3008 	str	r3, [fp, #-8]
  115880:	ea000029 	b	11592c <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  115884:	e30f357c 	movw	r3, #62844	; 0xf57c
  115888:	e3403014 	movt	r3, #20
  11588c:	e51b2008 	ldr	r2, [fp, #-8]
  115890:	e3a0100c 	mov	r1, #12
  115894:	e0020291 	mul	r2, r1, r2
  115898:	e0833002 	add	r3, r3, r2
  11589c:	e5933000 	ldr	r3, [r3]
  1158a0:	e3530000 	cmp	r3, #0
  1158a4:	1a00001d 	bne	115920 <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  1158a8:	e30f357c 	movw	r3, #62844	; 0xf57c
  1158ac:	e3403014 	movt	r3, #20
  1158b0:	e51b2008 	ldr	r2, [fp, #-8]
  1158b4:	e3a0100c 	mov	r1, #12
  1158b8:	e0020291 	mul	r2, r1, r2
  1158bc:	e0833002 	add	r3, r3, r2
  1158c0:	e51b200c 	ldr	r2, [fp, #-12]
  1158c4:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  1158c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158cc:	e5932000 	ldr	r2, [r3]
  1158d0:	e30f357c 	movw	r3, #62844	; 0xf57c
  1158d4:	e3403014 	movt	r3, #20
  1158d8:	e51b1008 	ldr	r1, [fp, #-8]
  1158dc:	e3a0000c 	mov	r0, #12
  1158e0:	e0010190 	mul	r1, r0, r1
  1158e4:	e0833001 	add	r3, r3, r1
  1158e8:	e2833004 	add	r3, r3, #4
  1158ec:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  1158f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1158f4:	e5932000 	ldr	r2, [r3]
  1158f8:	e30f357c 	movw	r3, #62844	; 0xf57c
  1158fc:	e3403014 	movt	r3, #20
  115900:	e51b1008 	ldr	r1, [fp, #-8]
  115904:	e3a0000c 	mov	r0, #12
  115908:	e0010190 	mul	r1, r0, r1
  11590c:	e0833001 	add	r3, r3, r1
  115910:	e2833008 	add	r3, r3, #8
  115914:	e5832000 	str	r2, [r3]
      return 1;
  115918:	e3a03001 	mov	r3, #1
  11591c:	ea000006 	b	11593c <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115920:	e51b3008 	ldr	r3, [fp, #-8]
  115924:	e2833001 	add	r3, r3, #1
  115928:	e50b3008 	str	r3, [fp, #-8]
  11592c:	e51b3008 	ldr	r3, [fp, #-8]
  115930:	e3530007 	cmp	r3, #7
  115934:	daffffd2 	ble	115884 <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  115938:	e3a03000 	mov	r3, #0
}
  11593c:	e1a00003 	mov	r0, r3
  115940:	e24bd004 	sub	sp, fp, #4
  115944:	e8bd8800 	pop	{fp, pc}

00115948 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115948:	e92d4800 	push	{fp, lr}
  11594c:	e28db004 	add	fp, sp, #4
  115950:	e24dd018 	sub	sp, sp, #24
  115954:	e50b0010 	str	r0, [fp, #-16]
  115958:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11595c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115960:	e51b0010 	ldr	r0, [fp, #-16]
  115964:	ebffec96 	bl	110bc4 <get_socket>
  115968:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  11596c:	e51b300c 	ldr	r3, [fp, #-12]
  115970:	e3530000 	cmp	r3, #0
  115974:	0a000046 	beq	115a94 <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115978:	e3a03000 	mov	r3, #0
  11597c:	e50b3008 	str	r3, [fp, #-8]
  115980:	ea00003f 	b	115a84 <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115984:	e30f357c 	movw	r3, #62844	; 0xf57c
  115988:	e3403014 	movt	r3, #20
  11598c:	e51b2008 	ldr	r2, [fp, #-8]
  115990:	e3a0100c 	mov	r1, #12
  115994:	e0020291 	mul	r2, r1, r2
  115998:	e0833002 	add	r3, r3, r2
  11599c:	e5933000 	ldr	r3, [r3]
  1159a0:	e51b200c 	ldr	r2, [fp, #-12]
  1159a4:	e1520003 	cmp	r2, r3
  1159a8:	1a000032 	bne	115a78 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  1159ac:	e30f357c 	movw	r3, #62844	; 0xf57c
  1159b0:	e3403014 	movt	r3, #20
  1159b4:	e51b2008 	ldr	r2, [fp, #-8]
  1159b8:	e3a0100c 	mov	r1, #12
  1159bc:	e0020291 	mul	r2, r1, r2
  1159c0:	e0833002 	add	r3, r3, r2
  1159c4:	e2833004 	add	r3, r3, #4
  1159c8:	e5932000 	ldr	r2, [r3]
  1159cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1159d0:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  1159d4:	e1520003 	cmp	r2, r3
  1159d8:	1a000026 	bne	115a78 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  1159dc:	e30f357c 	movw	r3, #62844	; 0xf57c
  1159e0:	e3403014 	movt	r3, #20
  1159e4:	e51b2008 	ldr	r2, [fp, #-8]
  1159e8:	e3a0100c 	mov	r1, #12
  1159ec:	e0020291 	mul	r2, r1, r2
  1159f0:	e0833002 	add	r3, r3, r2
  1159f4:	e2833008 	add	r3, r3, #8
  1159f8:	e5932000 	ldr	r2, [r3]
  1159fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a00:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115a04:	e1520003 	cmp	r2, r3
  115a08:	1a00001a 	bne	115a78 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115a0c:	e30f357c 	movw	r3, #62844	; 0xf57c
  115a10:	e3403014 	movt	r3, #20
  115a14:	e51b2008 	ldr	r2, [fp, #-8]
  115a18:	e3a0100c 	mov	r1, #12
  115a1c:	e0020291 	mul	r2, r1, r2
  115a20:	e0833002 	add	r3, r3, r2
  115a24:	e3a02000 	mov	r2, #0
  115a28:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115a2c:	e30f357c 	movw	r3, #62844	; 0xf57c
  115a30:	e3403014 	movt	r3, #20
  115a34:	e51b2008 	ldr	r2, [fp, #-8]
  115a38:	e3a0100c 	mov	r1, #12
  115a3c:	e0020291 	mul	r2, r1, r2
  115a40:	e0833002 	add	r3, r3, r2
  115a44:	e2833004 	add	r3, r3, #4
  115a48:	e3a02000 	mov	r2, #0
  115a4c:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115a50:	e30f357c 	movw	r3, #62844	; 0xf57c
  115a54:	e3403014 	movt	r3, #20
  115a58:	e51b2008 	ldr	r2, [fp, #-8]
  115a5c:	e3a0100c 	mov	r1, #12
  115a60:	e0020291 	mul	r2, r1, r2
  115a64:	e0833002 	add	r3, r3, r2
  115a68:	e2833008 	add	r3, r3, #8
  115a6c:	e3a02000 	mov	r2, #0
  115a70:	e5832000 	str	r2, [r3]
      return;
  115a74:	ea000007 	b	115a98 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115a78:	e51b3008 	ldr	r3, [fp, #-8]
  115a7c:	e2833001 	add	r3, r3, #1
  115a80:	e50b3008 	str	r3, [fp, #-8]
  115a84:	e51b3008 	ldr	r3, [fp, #-8]
  115a88:	e3530007 	cmp	r3, #7
  115a8c:	daffffbc 	ble	115984 <lwip_socket_unregister_membership+0x3c>
  115a90:	ea000000 	b	115a98 <lwip_socket_unregister_membership+0x150>
    return;
  115a94:	e320f000 	nop	{0}
    }
  }
}
  115a98:	e24bd004 	sub	sp, fp, #4
  115a9c:	e8bd8800 	pop	{fp, pc}

00115aa0 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115aa0:	e92d4800 	push	{fp, lr}
  115aa4:	e28db004 	add	fp, sp, #4
  115aa8:	e24dd018 	sub	sp, sp, #24
  115aac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115ab0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115ab4:	ebffec42 	bl	110bc4 <get_socket>
  115ab8:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115abc:	e51b300c 	ldr	r3, [fp, #-12]
  115ac0:	e3530000 	cmp	r3, #0
  115ac4:	0a000045 	beq	115be0 <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115ac8:	e3a03000 	mov	r3, #0
  115acc:	e50b3008 	str	r3, [fp, #-8]
  115ad0:	ea00003e 	b	115bd0 <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115ad4:	e30f357c 	movw	r3, #62844	; 0xf57c
  115ad8:	e3403014 	movt	r3, #20
  115adc:	e51b2008 	ldr	r2, [fp, #-8]
  115ae0:	e3a0100c 	mov	r1, #12
  115ae4:	e0020291 	mul	r2, r1, r2
  115ae8:	e0833002 	add	r3, r3, r2
  115aec:	e5933000 	ldr	r3, [r3]
  115af0:	e51b200c 	ldr	r2, [fp, #-12]
  115af4:	e1520003 	cmp	r2, r3
  115af8:	1a000031 	bne	115bc4 <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115afc:	e30f357c 	movw	r3, #62844	; 0xf57c
  115b00:	e3403014 	movt	r3, #20
  115b04:	e51b2008 	ldr	r2, [fp, #-8]
  115b08:	e3a0100c 	mov	r1, #12
  115b0c:	e0020291 	mul	r2, r1, r2
  115b10:	e0833002 	add	r3, r3, r2
  115b14:	e2833008 	add	r3, r3, #8
  115b18:	e5933000 	ldr	r3, [r3]
  115b1c:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115b20:	e30f357c 	movw	r3, #62844	; 0xf57c
  115b24:	e3403014 	movt	r3, #20
  115b28:	e51b2008 	ldr	r2, [fp, #-8]
  115b2c:	e3a0100c 	mov	r1, #12
  115b30:	e0020291 	mul	r2, r1, r2
  115b34:	e0833002 	add	r3, r3, r2
  115b38:	e2833004 	add	r3, r3, #4
  115b3c:	e5933000 	ldr	r3, [r3]
  115b40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115b44:	e30f357c 	movw	r3, #62844	; 0xf57c
  115b48:	e3403014 	movt	r3, #20
  115b4c:	e51b2008 	ldr	r2, [fp, #-8]
  115b50:	e3a0100c 	mov	r1, #12
  115b54:	e0020291 	mul	r2, r1, r2
  115b58:	e0833002 	add	r3, r3, r2
  115b5c:	e3a02000 	mov	r2, #0
  115b60:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115b64:	e30f357c 	movw	r3, #62844	; 0xf57c
  115b68:	e3403014 	movt	r3, #20
  115b6c:	e51b2008 	ldr	r2, [fp, #-8]
  115b70:	e3a0100c 	mov	r1, #12
  115b74:	e0020291 	mul	r2, r1, r2
  115b78:	e0833002 	add	r3, r3, r2
  115b7c:	e2833004 	add	r3, r3, #4
  115b80:	e3a02000 	mov	r2, #0
  115b84:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115b88:	e30f357c 	movw	r3, #62844	; 0xf57c
  115b8c:	e3403014 	movt	r3, #20
  115b90:	e51b2008 	ldr	r2, [fp, #-8]
  115b94:	e3a0100c 	mov	r1, #12
  115b98:	e0020291 	mul	r2, r1, r2
  115b9c:	e0833002 	add	r3, r3, r2
  115ba0:	e2833008 	add	r3, r3, #8
  115ba4:	e3a02000 	mov	r2, #0
  115ba8:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115bac:	e51b300c 	ldr	r3, [fp, #-12]
  115bb0:	e5930000 	ldr	r0, [r3]
  115bb4:	e24b2014 	sub	r2, fp, #20
  115bb8:	e24b1010 	sub	r1, fp, #16
  115bbc:	e3a03001 	mov	r3, #1
  115bc0:	ebffd8d0 	bl	10bf08 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115bc4:	e51b3008 	ldr	r3, [fp, #-8]
  115bc8:	e2833001 	add	r3, r3, #1
  115bcc:	e50b3008 	str	r3, [fp, #-8]
  115bd0:	e51b3008 	ldr	r3, [fp, #-8]
  115bd4:	e3530007 	cmp	r3, #7
  115bd8:	daffffbd 	ble	115ad4 <lwip_socket_drop_registered_memberships+0x34>
  115bdc:	ea000000 	b	115be4 <lwip_socket_drop_registered_memberships+0x144>
    return;
  115be0:	e320f000 	nop	{0}
    }
  }
}
  115be4:	e24bd004 	sub	sp, fp, #4
  115be8:	e8bd8800 	pop	{fp, pc}

00115bec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115bec:	e92d4800 	push	{fp, lr}
  115bf0:	e28db004 	add	fp, sp, #4
  115bf4:	e24dd010 	sub	sp, sp, #16
  115bf8:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115bfc:	e30d3c20 	movw	r3, #56352	; 0xdc20
  115c00:	e3403014 	movt	r3, #20
  115c04:	e5933000 	ldr	r3, [r3]
  115c08:	e3530000 	cmp	r3, #0
  115c0c:	0a000007 	beq	115c30 <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115c10:	e30d3c20 	movw	r3, #56352	; 0xdc20
  115c14:	e3403014 	movt	r3, #20
  115c18:	e5932000 	ldr	r2, [r3]
  115c1c:	e30d3c24 	movw	r3, #56356	; 0xdc24
  115c20:	e3403014 	movt	r3, #20
  115c24:	e5933000 	ldr	r3, [r3]
  115c28:	e1a00003 	mov	r0, r3
  115c2c:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115c30:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115c34:	e3400014 	movt	r0, #20
  115c38:	ebffd32a 	bl	10a8e8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115c3c:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115c40:	e3400014 	movt	r0, #20
  115c44:	ebffd333 	bl	10a918 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115c48:	e24b3008 	sub	r3, fp, #8
  115c4c:	e1a01003 	mov	r1, r3
  115c50:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115c54:	e3400014 	movt	r0, #20
  115c58:	eb004663 	bl	1275ec <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115c5c:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115c60:	e3400014 	movt	r0, #20
  115c64:	ebffd31f 	bl	10a8e8 <sys_mutex_lock>
    if (msg == NULL) {
  115c68:	e51b3008 	ldr	r3, [fp, #-8]
  115c6c:	e3530000 	cmp	r3, #0
  115c70:	1a000007 	bne	115c94 <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115c74:	e3060cb4 	movw	r0, #27828	; 0x6cb4
  115c78:	e3400014 	movt	r0, #20
  115c7c:	ebffb524 	bl	103114 <rt_kprintf>
  115c80:	e3a01069 	mov	r1, #105	; 0x69
  115c84:	e3060cd4 	movw	r0, #27860	; 0x6cd4
  115c88:	e3400014 	movt	r0, #20
  115c8c:	ebffd440 	bl	10ad94 <sys_arch_assert>
      continue;
  115c90:	ea00002e 	b	115d50 <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115c94:	e51b3008 	ldr	r3, [fp, #-8]
  115c98:	e5933000 	ldr	r3, [r3]
  115c9c:	e3530003 	cmp	r3, #3
  115ca0:	0a000010 	beq	115ce8 <tcpip_thread+0xfc>
  115ca4:	e3530004 	cmp	r3, #4
  115ca8:	0a000019 	beq	115d14 <tcpip_thread+0x128>
  115cac:	e3530002 	cmp	r3, #2
  115cb0:	1a00001e 	bne	115d30 <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115cb4:	e51b3008 	ldr	r3, [fp, #-8]
  115cb8:	e593300c 	ldr	r3, [r3, #12]
  115cbc:	e51b2008 	ldr	r2, [fp, #-8]
  115cc0:	e5920004 	ldr	r0, [r2, #4]
  115cc4:	e51b2008 	ldr	r2, [fp, #-8]
  115cc8:	e5922008 	ldr	r2, [r2, #8]
  115ccc:	e1a01002 	mov	r1, r2
  115cd0:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115cd4:	e51b3008 	ldr	r3, [fp, #-8]
  115cd8:	e1a01003 	mov	r1, r3
  115cdc:	e3a0000a 	mov	r0, #10
  115ce0:	eb000c99 	bl	118f4c <memp_free>
      break;
  115ce4:	ea000019 	b	115d50 <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115ce8:	e51b3008 	ldr	r3, [fp, #-8]
  115cec:	e5933004 	ldr	r3, [r3, #4]
  115cf0:	e51b2008 	ldr	r2, [fp, #-8]
  115cf4:	e5922008 	ldr	r2, [r2, #8]
  115cf8:	e1a00002 	mov	r0, r2
  115cfc:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115d00:	e51b3008 	ldr	r3, [fp, #-8]
  115d04:	e1a01003 	mov	r1, r3
  115d08:	e3a00009 	mov	r0, #9
  115d0c:	eb000c8e 	bl	118f4c <memp_free>
      break;
  115d10:	ea00000e 	b	115d50 <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115d14:	e51b3008 	ldr	r3, [fp, #-8]
  115d18:	e5933004 	ldr	r3, [r3, #4]
  115d1c:	e51b2008 	ldr	r2, [fp, #-8]
  115d20:	e5922008 	ldr	r2, [r2, #8]
  115d24:	e1a00002 	mov	r0, r2
  115d28:	e12fff33 	blx	r3
      break;
  115d2c:	ea000007 	b	115d50 <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115d30:	e3060cb4 	movw	r0, #27828	; 0x6cb4
  115d34:	e3400014 	movt	r0, #20
  115d38:	ebffb4f5 	bl	103114 <rt_kprintf>
  115d3c:	e3a0109b 	mov	r1, #155	; 0x9b
  115d40:	e3060cd4 	movw	r0, #27860	; 0x6cd4
  115d44:	e3400014 	movt	r0, #20
  115d48:	ebffd411 	bl	10ad94 <sys_arch_assert>
      break;
  115d4c:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  115d50:	eaffffb9 	b	115c3c <tcpip_thread+0x50>

00115d54 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  115d54:	e92d4800 	push	{fp, lr}
  115d58:	e28db004 	add	fp, sp, #4
  115d5c:	e24dd018 	sub	sp, sp, #24
  115d60:	e50b0010 	str	r0, [fp, #-16]
  115d64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115d68:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115d6c:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115d70:	e3400014 	movt	r0, #20
  115d74:	ebffd3bd 	bl	10ac70 <sys_mbox_valid>
  115d78:	e1a03000 	mov	r3, r0
  115d7c:	e3530000 	cmp	r3, #0
  115d80:	1a000006 	bne	115da0 <tcpip_inpkt+0x4c>
  115d84:	e3060d00 	movw	r0, #27904	; 0x6d00
  115d88:	e3400014 	movt	r0, #20
  115d8c:	ebffb4e0 	bl	103114 <rt_kprintf>
  115d90:	e3a010b5 	mov	r1, #181	; 0xb5
  115d94:	e3060cd4 	movw	r0, #27860	; 0x6cd4
  115d98:	e3400014 	movt	r0, #20
  115d9c:	ebffd3fc 	bl	10ad94 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  115da0:	e3a020b7 	mov	r2, #183	; 0xb7
  115da4:	e3061cd4 	movw	r1, #27860	; 0x6cd4
  115da8:	e3401014 	movt	r1, #20
  115dac:	e3a0000a 	mov	r0, #10
  115db0:	eb000bfd 	bl	118dac <memp_malloc_fn>
  115db4:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115db8:	e51b3008 	ldr	r3, [fp, #-8]
  115dbc:	e3530000 	cmp	r3, #0
  115dc0:	1a000001 	bne	115dcc <tcpip_inpkt+0x78>
    return ERR_MEM;
  115dc4:	e3e03000 	mvn	r3, #0
  115dc8:	ea000018 	b	115e30 <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  115dcc:	e51b3008 	ldr	r3, [fp, #-8]
  115dd0:	e3a02002 	mov	r2, #2
  115dd4:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  115dd8:	e51b3008 	ldr	r3, [fp, #-8]
  115ddc:	e51b2010 	ldr	r2, [fp, #-16]
  115de0:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  115de4:	e51b3008 	ldr	r3, [fp, #-8]
  115de8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115dec:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  115df0:	e51b3008 	ldr	r3, [fp, #-8]
  115df4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  115df8:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115dfc:	e51b1008 	ldr	r1, [fp, #-8]
  115e00:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115e04:	e3400014 	movt	r0, #20
  115e08:	ebffd330 	bl	10aad0 <sys_mbox_trypost>
  115e0c:	e1a03000 	mov	r3, r0
  115e10:	e3530000 	cmp	r3, #0
  115e14:	0a000004 	beq	115e2c <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115e18:	e51b1008 	ldr	r1, [fp, #-8]
  115e1c:	e3a0000a 	mov	r0, #10
  115e20:	eb000c49 	bl	118f4c <memp_free>
    return ERR_MEM;
  115e24:	e3e03000 	mvn	r3, #0
  115e28:	ea000000 	b	115e30 <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  115e2c:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  115e30:	e1a00003 	mov	r0, r3
  115e34:	e24bd004 	sub	sp, fp, #4
  115e38:	e8bd8800 	pop	{fp, pc}

00115e3c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  115e3c:	e92d4800 	push	{fp, lr}
  115e40:	e28db004 	add	fp, sp, #4
  115e44:	e24dd008 	sub	sp, sp, #8
  115e48:	e50b0008 	str	r0, [fp, #-8]
  115e4c:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  115e50:	e51b300c 	ldr	r3, [fp, #-12]
  115e54:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  115e58:	e2033018 	and	r3, r3, #24
  115e5c:	e3530000 	cmp	r3, #0
  115e60:	0a000006 	beq	115e80 <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  115e64:	e30828d8 	movw	r2, #35032	; 0x88d8
  115e68:	e3402012 	movt	r2, #18
  115e6c:	e51b100c 	ldr	r1, [fp, #-12]
  115e70:	e51b0008 	ldr	r0, [fp, #-8]
  115e74:	ebffffb6 	bl	115d54 <tcpip_inpkt>
  115e78:	e1a03000 	mov	r3, r0
  115e7c:	ea000005 	b	115e98 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  115e80:	e3012108 	movw	r2, #4360	; 0x1108
  115e84:	e3402013 	movt	r2, #19
  115e88:	e51b100c 	ldr	r1, [fp, #-12]
  115e8c:	e51b0008 	ldr	r0, [fp, #-8]
  115e90:	ebffffaf 	bl	115d54 <tcpip_inpkt>
  115e94:	e1a03000 	mov	r3, r0
}
  115e98:	e1a00003 	mov	r0, r3
  115e9c:	e24bd004 	sub	sp, fp, #4
  115ea0:	e8bd8800 	pop	{fp, pc}

00115ea4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  115ea4:	e92d4800 	push	{fp, lr}
  115ea8:	e28db004 	add	fp, sp, #4
  115eac:	e24dd018 	sub	sp, sp, #24
  115eb0:	e50b0010 	str	r0, [fp, #-16]
  115eb4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115eb8:	e1a03002 	mov	r3, r2
  115ebc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115ec0:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115ec4:	e3400014 	movt	r0, #20
  115ec8:	ebffd368 	bl	10ac70 <sys_mbox_valid>
  115ecc:	e1a03000 	mov	r3, r0
  115ed0:	e3530000 	cmp	r3, #0
  115ed4:	1a000006 	bne	115ef4 <tcpip_callback_with_block+0x50>
  115ed8:	e3060d00 	movw	r0, #27904	; 0x6d00
  115edc:	e3400014 	movt	r0, #20
  115ee0:	ebffb48b 	bl	103114 <rt_kprintf>
  115ee4:	e3a010ee 	mov	r1, #238	; 0xee
  115ee8:	e3060cd4 	movw	r0, #27860	; 0x6cd4
  115eec:	e3400014 	movt	r0, #20
  115ef0:	ebffd3a7 	bl	10ad94 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  115ef4:	e3a020f0 	mov	r2, #240	; 0xf0
  115ef8:	e3061cd4 	movw	r1, #27860	; 0x6cd4
  115efc:	e3401014 	movt	r1, #20
  115f00:	e3a00009 	mov	r0, #9
  115f04:	eb000ba8 	bl	118dac <memp_malloc_fn>
  115f08:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115f0c:	e51b3008 	ldr	r3, [fp, #-8]
  115f10:	e3530000 	cmp	r3, #0
  115f14:	1a000001 	bne	115f20 <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  115f18:	e3e03000 	mvn	r3, #0
  115f1c:	ea00001d 	b	115f98 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  115f20:	e51b3008 	ldr	r3, [fp, #-8]
  115f24:	e3a02003 	mov	r2, #3
  115f28:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  115f2c:	e51b3008 	ldr	r3, [fp, #-8]
  115f30:	e51b2010 	ldr	r2, [fp, #-16]
  115f34:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  115f38:	e51b3008 	ldr	r3, [fp, #-8]
  115f3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115f40:	e5832008 	str	r2, [r3, #8]
  if (block) {
  115f44:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  115f48:	e3530000 	cmp	r3, #0
  115f4c:	0a000004 	beq	115f64 <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  115f50:	e51b1008 	ldr	r1, [fp, #-8]
  115f54:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115f58:	e3400014 	movt	r0, #20
  115f5c:	ebffd2cd 	bl	10aa98 <sys_mbox_post>
  115f60:	ea00000b 	b	115f94 <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115f64:	e51b1008 	ldr	r1, [fp, #-8]
  115f68:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115f6c:	e3400014 	movt	r0, #20
  115f70:	ebffd2d6 	bl	10aad0 <sys_mbox_trypost>
  115f74:	e1a03000 	mov	r3, r0
  115f78:	e3530000 	cmp	r3, #0
  115f7c:	0a000004 	beq	115f94 <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115f80:	e51b1008 	ldr	r1, [fp, #-8]
  115f84:	e3a00009 	mov	r0, #9
  115f88:	eb000bef 	bl	118f4c <memp_free>
      return ERR_MEM;
  115f8c:	e3e03000 	mvn	r3, #0
  115f90:	ea000000 	b	115f98 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  115f94:	e3a03000 	mov	r3, #0
}
  115f98:	e1a00003 	mov	r0, r3
  115f9c:	e24bd004 	sub	sp, fp, #4
  115fa0:	e8bd8800 	pop	{fp, pc}

00115fa4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  115fa4:	e92d4800 	push	{fp, lr}
  115fa8:	e28db004 	add	fp, sp, #4
  115fac:	e24dd010 	sub	sp, sp, #16
  115fb0:	e50b0008 	str	r0, [fp, #-8]
  115fb4:	e50b100c 	str	r1, [fp, #-12]
  115fb8:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  115fbc:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115fc0:	e3400014 	movt	r0, #20
  115fc4:	ebffd247 	bl	10a8e8 <sys_mutex_lock>
  fn(apimsg);
  115fc8:	e51b3008 	ldr	r3, [fp, #-8]
  115fcc:	e51b000c 	ldr	r0, [fp, #-12]
  115fd0:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  115fd4:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115fd8:	e3400014 	movt	r0, #20
  115fdc:	ebffd24d 	bl	10a918 <sys_mutex_unlock>
  return ERR_OK;
  115fe0:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  115fe4:	e1a00003 	mov	r0, r3
  115fe8:	e24bd004 	sub	sp, fp, #4
  115fec:	e8bd8800 	pop	{fp, pc}

00115ff0 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  115ff0:	e92d4800 	push	{fp, lr}
  115ff4:	e28db004 	add	fp, sp, #4
  115ff8:	e24dd010 	sub	sp, sp, #16
  115ffc:	e50b0010 	str	r0, [fp, #-16]
  116000:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  116004:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  116008:	e3400014 	movt	r0, #20
  11600c:	ebffd235 	bl	10a8e8 <sys_mutex_lock>
  err = fn(call);
  116010:	e51b3010 	ldr	r3, [fp, #-16]
  116014:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116018:	e12fff33 	blx	r3
  11601c:	e1a03000 	mov	r3, r0
  116020:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  116024:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  116028:	e3400014 	movt	r0, #20
  11602c:	ebffd239 	bl	10a918 <sys_mutex_unlock>
  return err;
  116030:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  116034:	e1a00003 	mov	r0, r3
  116038:	e24bd004 	sub	sp, fp, #4
  11603c:	e8bd8800 	pop	{fp, pc}

00116040 <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  116040:	e92d4800 	push	{fp, lr}
  116044:	e28db004 	add	fp, sp, #4
  116048:	e24dd010 	sub	sp, sp, #16
  11604c:	e50b0010 	str	r0, [fp, #-16]
  116050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  116054:	e30021a1 	movw	r2, #417	; 0x1a1
  116058:	e3061cd4 	movw	r1, #27860	; 0x6cd4
  11605c:	e3401014 	movt	r1, #20
  116060:	e3a00009 	mov	r0, #9
  116064:	eb000b50 	bl	118dac <memp_malloc_fn>
  116068:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  11606c:	e51b3008 	ldr	r3, [fp, #-8]
  116070:	e3530000 	cmp	r3, #0
  116074:	1a000001 	bne	116080 <tcpip_callbackmsg_new+0x40>
    return NULL;
  116078:	e3a03000 	mov	r3, #0
  11607c:	ea000009 	b	1160a8 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  116080:	e51b3008 	ldr	r3, [fp, #-8]
  116084:	e3a02004 	mov	r2, #4
  116088:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  11608c:	e51b3008 	ldr	r3, [fp, #-8]
  116090:	e51b2010 	ldr	r2, [fp, #-16]
  116094:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116098:	e51b3008 	ldr	r3, [fp, #-8]
  11609c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1160a0:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  1160a4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1160a8:	e1a00003 	mov	r0, r3
  1160ac:	e24bd004 	sub	sp, fp, #4
  1160b0:	e8bd8800 	pop	{fp, pc}

001160b4 <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  1160b4:	e92d4800 	push	{fp, lr}
  1160b8:	e28db004 	add	fp, sp, #4
  1160bc:	e24dd008 	sub	sp, sp, #8
  1160c0:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  1160c4:	e51b1008 	ldr	r1, [fp, #-8]
  1160c8:	e3a00009 	mov	r0, #9
  1160cc:	eb000b9e 	bl	118f4c <memp_free>
}
  1160d0:	e320f000 	nop	{0}
  1160d4:	e24bd004 	sub	sp, fp, #4
  1160d8:	e8bd8800 	pop	{fp, pc}

001160dc <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  1160dc:	e92d4800 	push	{fp, lr}
  1160e0:	e28db004 	add	fp, sp, #4
  1160e4:	e24dd008 	sub	sp, sp, #8
  1160e8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1160ec:	e30d0c28 	movw	r0, #56360	; 0xdc28
  1160f0:	e3400014 	movt	r0, #20
  1160f4:	ebffd2dd 	bl	10ac70 <sys_mbox_valid>
  1160f8:	e1a03000 	mov	r3, r0
  1160fc:	e3530000 	cmp	r3, #0
  116100:	1a000006 	bne	116120 <tcpip_trycallback+0x44>
  116104:	e3060d00 	movw	r0, #27904	; 0x6d00
  116108:	e3400014 	movt	r0, #20
  11610c:	ebffb400 	bl	103114 <rt_kprintf>
  116110:	e3a01d07 	mov	r1, #448	; 0x1c0
  116114:	e3060cd4 	movw	r0, #27860	; 0x6cd4
  116118:	e3400014 	movt	r0, #20
  11611c:	ebffd31c 	bl	10ad94 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  116120:	e51b1008 	ldr	r1, [fp, #-8]
  116124:	e30d0c28 	movw	r0, #56360	; 0xdc28
  116128:	e3400014 	movt	r0, #20
  11612c:	ebffd267 	bl	10aad0 <sys_mbox_trypost>
  116130:	e1a03000 	mov	r3, r0
}
  116134:	e1a00003 	mov	r0, r3
  116138:	e24bd004 	sub	sp, fp, #4
  11613c:	e8bd8800 	pop	{fp, pc}

00116140 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  116140:	e92d4800 	push	{fp, lr}
  116144:	e28db004 	add	fp, sp, #4
  116148:	e24dd010 	sub	sp, sp, #16
  11614c:	e50b0008 	str	r0, [fp, #-8]
  116150:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  116154:	eb0009b8 	bl	11883c <lwip_init>

  tcpip_init_done = initfunc;
  116158:	e30d3c20 	movw	r3, #56352	; 0xdc20
  11615c:	e3403014 	movt	r3, #20
  116160:	e51b2008 	ldr	r2, [fp, #-8]
  116164:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  116168:	e30d3c24 	movw	r3, #56356	; 0xdc24
  11616c:	e3403014 	movt	r3, #20
  116170:	e51b200c 	ldr	r2, [fp, #-12]
  116174:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  116178:	e3a01c01 	mov	r1, #256	; 0x100
  11617c:	e30d0c28 	movw	r0, #56360	; 0xdc28
  116180:	e3400014 	movt	r0, #20
  116184:	ebffd20e 	bl	10a9c4 <sys_mbox_new>
  116188:	e1a03000 	mov	r3, r0
  11618c:	e3530000 	cmp	r3, #0
  116190:	0a000006 	beq	1161b0 <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  116194:	e3060d10 	movw	r0, #27920	; 0x6d10
  116198:	e3400014 	movt	r0, #20
  11619c:	ebffb3dc 	bl	103114 <rt_kprintf>
  1161a0:	e30011d5 	movw	r1, #469	; 0x1d5
  1161a4:	e3060cd4 	movw	r0, #27860	; 0x6cd4
  1161a8:	e3400014 	movt	r0, #20
  1161ac:	ebffd2f8 	bl	10ad94 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  1161b0:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  1161b4:	e3400014 	movt	r0, #20
  1161b8:	ebffd1a2 	bl	10a848 <sys_mutex_new>
  1161bc:	e1a03000 	mov	r3, r0
  1161c0:	e3530000 	cmp	r3, #0
  1161c4:	0a000006 	beq	1161e4 <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  1161c8:	e3060d34 	movw	r0, #27956	; 0x6d34
  1161cc:	e3400014 	movt	r0, #20
  1161d0:	ebffb3cf 	bl	103114 <rt_kprintf>
  1161d4:	e30011d9 	movw	r1, #473	; 0x1d9
  1161d8:	e3060cd4 	movw	r0, #27860	; 0x6cd4
  1161dc:	e3400014 	movt	r0, #20
  1161e0:	ebffd2eb 	bl	10ad94 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  1161e4:	e3a03017 	mov	r3, #23
  1161e8:	e58d3000 	str	r3, [sp]
  1161ec:	e3a03a02 	mov	r3, #8192	; 0x2000
  1161f0:	e3a02000 	mov	r2, #0
  1161f4:	e3051bec 	movw	r1, #23532	; 0x5bec
  1161f8:	e3401011 	movt	r1, #17
  1161fc:	e3060d58 	movw	r0, #27992	; 0x6d58
  116200:	e3400014 	movt	r0, #20
  116204:	ebffd2ae 	bl	10acc4 <sys_thread_new>
}
  116208:	e320f000 	nop	{0}
  11620c:	e24bd004 	sub	sp, fp, #4
  116210:	e8bd8800 	pop	{fp, pc}

00116214 <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  116214:	e92d4800 	push	{fp, lr}
  116218:	e28db004 	add	fp, sp, #4
  11621c:	e24dd010 	sub	sp, sp, #16
  116220:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  116224:	e51b3010 	ldr	r3, [fp, #-16]
  116228:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  11622c:	e51b0008 	ldr	r0, [fp, #-8]
  116230:	eb001253 	bl	11ab84 <pbuf_free>
}
  116234:	e320f000 	nop	{0}
  116238:	e24bd004 	sub	sp, fp, #4
  11623c:	e8bd8800 	pop	{fp, pc}

00116240 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  116240:	e92d4800 	push	{fp, lr}
  116244:	e28db004 	add	fp, sp, #4
  116248:	e24dd008 	sub	sp, sp, #8
  11624c:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  116250:	e3a02000 	mov	r2, #0
  116254:	e51b1008 	ldr	r1, [fp, #-8]
  116258:	e3060214 	movw	r0, #25108	; 0x6214
  11625c:	e3400011 	movt	r0, #17
  116260:	ebffff0f 	bl	115ea4 <tcpip_callback_with_block>
  116264:	e1a03000 	mov	r3, r0
}
  116268:	e1a00003 	mov	r0, r3
  11626c:	e24bd004 	sub	sp, fp, #4
  116270:	e8bd8800 	pop	{fp, pc}

00116274 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  116274:	e92d4800 	push	{fp, lr}
  116278:	e28db004 	add	fp, sp, #4
  11627c:	e24dd008 	sub	sp, sp, #8
  116280:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  116284:	e3a02000 	mov	r2, #0
  116288:	e51b1008 	ldr	r1, [fp, #-8]
  11628c:	e30a0ec8 	movw	r0, #44744	; 0xaec8
  116290:	e3400010 	movt	r0, #16
  116294:	ebffff02 	bl	115ea4 <tcpip_callback_with_block>
  116298:	e1a03000 	mov	r3, r0
}
  11629c:	e1a00003 	mov	r0, r3
  1162a0:	e24bd004 	sub	sp, fp, #4
  1162a4:	e8bd8800 	pop	{fp, pc}

001162a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  1162a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1162ac:	e28db000 	add	fp, sp, #0
  1162b0:	e24dd00c 	sub	sp, sp, #12
  1162b4:	e1a03000 	mov	r3, r0
  1162b8:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  1162bc:	e15b30b6 	ldrh	r3, [fp, #-6]
  1162c0:	e6bf3fb3 	rev16	r3, r3
  1162c4:	e6ff3073 	uxth	r3, r3
}
  1162c8:	e1a00003 	mov	r0, r3
  1162cc:	e28bd000 	add	sp, fp, #0
  1162d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1162d4:	e12fff1e 	bx	lr

001162d8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  1162d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1162dc:	e28db000 	add	fp, sp, #0
  1162e0:	e24dd00c 	sub	sp, sp, #12
  1162e4:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  1162e8:	e51b3008 	ldr	r3, [fp, #-8]
  1162ec:	e1a02c03 	lsl	r2, r3, #24
  1162f0:	e51b3008 	ldr	r3, [fp, #-8]
  1162f4:	e1a03403 	lsl	r3, r3, #8
  1162f8:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  1162fc:	e1822003 	orr	r2, r2, r3
  116300:	e51b3008 	ldr	r3, [fp, #-8]
  116304:	e1a03423 	lsr	r3, r3, #8
  116308:	e2033cff 	and	r3, r3, #65280	; 0xff00
  11630c:	e1822003 	orr	r2, r2, r3
  116310:	e51b3008 	ldr	r3, [fp, #-8]
  116314:	e1a03c23 	lsr	r3, r3, #24
  116318:	e1823003 	orr	r3, r2, r3
}
  11631c:	e1a00003 	mov	r0, r3
  116320:	e28bd000 	add	sp, fp, #0
  116324:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116328:	e12fff1e 	bx	lr

0011632c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  11632c:	e92d4800 	push	{fp, lr}
  116330:	e28db004 	add	fp, sp, #4
  116334:	e24dd018 	sub	sp, sp, #24
  116338:	e50b0010 	str	r0, [fp, #-16]
  11633c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  116344:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116348:	eb00ab96 	bl	1411a8 <strlen>
  11634c:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  116350:	e51b300c 	ldr	r3, [fp, #-12]
  116354:	e3530000 	cmp	r3, #0
  116358:	1a000001 	bne	116364 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  11635c:	e51b3010 	ldr	r3, [fp, #-16]
  116360:	ea000021 	b	1163ec <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  116364:	e51b3010 	ldr	r3, [fp, #-16]
  116368:	e50b3008 	str	r3, [fp, #-8]
  11636c:	ea000011 	b	1163b8 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  116370:	e51b3008 	ldr	r3, [fp, #-8]
  116374:	e5d32000 	ldrb	r2, [r3]
  116378:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11637c:	e5d33000 	ldrb	r3, [r3]
  116380:	e1520003 	cmp	r2, r3
  116384:	1a000008 	bne	1163ac <lwip_strnstr+0x80>
  116388:	e51b200c 	ldr	r2, [fp, #-12]
  11638c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  116390:	e51b0008 	ldr	r0, [fp, #-8]
  116394:	eb00abaf 	bl	141258 <strncmp>
  116398:	e1a03000 	mov	r3, r0
  11639c:	e3530000 	cmp	r3, #0
  1163a0:	1a000001 	bne	1163ac <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  1163a4:	e51b3008 	ldr	r3, [fp, #-8]
  1163a8:	ea00000f 	b	1163ec <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  1163ac:	e51b3008 	ldr	r3, [fp, #-8]
  1163b0:	e2833001 	add	r3, r3, #1
  1163b4:	e50b3008 	str	r3, [fp, #-8]
  1163b8:	e51b3008 	ldr	r3, [fp, #-8]
  1163bc:	e5d33000 	ldrb	r3, [r3]
  1163c0:	e3530000 	cmp	r3, #0
  1163c4:	0a000007 	beq	1163e8 <lwip_strnstr+0xbc>
  1163c8:	e51b2008 	ldr	r2, [fp, #-8]
  1163cc:	e51b300c 	ldr	r3, [fp, #-12]
  1163d0:	e0822003 	add	r2, r2, r3
  1163d4:	e51b1010 	ldr	r1, [fp, #-16]
  1163d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1163dc:	e0813003 	add	r3, r1, r3
  1163e0:	e1520003 	cmp	r2, r3
  1163e4:	9affffe1 	bls	116370 <lwip_strnstr+0x44>
    }
  }
  return NULL;
  1163e8:	e3a03000 	mov	r3, #0
}
  1163ec:	e1a00003 	mov	r0, r3
  1163f0:	e24bd004 	sub	sp, fp, #4
  1163f4:	e8bd8800 	pop	{fp, pc}

001163f8 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  1163f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1163fc:	e28db000 	add	fp, sp, #0
  116400:	e24dd014 	sub	sp, sp, #20
  116404:	e50b0010 	str	r0, [fp, #-16]
  116408:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  11640c:	e51b3010 	ldr	r3, [fp, #-16]
  116410:	e2832001 	add	r2, r3, #1
  116414:	e50b2010 	str	r2, [fp, #-16]
  116418:	e5d33000 	ldrb	r3, [r3]
  11641c:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116424:	e2832001 	add	r2, r3, #1
  116428:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  11642c:	e5d33000 	ldrb	r3, [r3]
  116430:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116434:	e55b2005 	ldrb	r2, [fp, #-5]
  116438:	e55b3006 	ldrb	r3, [fp, #-6]
  11643c:	e1520003 	cmp	r2, r3
  116440:	0a000014 	beq	116498 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  116444:	e55b3005 	ldrb	r3, [fp, #-5]
  116448:	e3833020 	orr	r3, r3, #32
  11644c:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116450:	e55b3007 	ldrb	r3, [fp, #-7]
  116454:	e3530060 	cmp	r3, #96	; 0x60
  116458:	9a00000b 	bls	11648c <lwip_stricmp+0x94>
  11645c:	e55b3007 	ldrb	r3, [fp, #-7]
  116460:	e353007a 	cmp	r3, #122	; 0x7a
  116464:	8a000008 	bhi	11648c <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116468:	e55b3006 	ldrb	r3, [fp, #-6]
  11646c:	e3833020 	orr	r3, r3, #32
  116470:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116474:	e55b2007 	ldrb	r2, [fp, #-7]
  116478:	e55b3008 	ldrb	r3, [fp, #-8]
  11647c:	e1520003 	cmp	r2, r3
  116480:	0a000003 	beq	116494 <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116484:	e3a03001 	mov	r3, #1
  116488:	ea000006 	b	1164a8 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  11648c:	e3a03001 	mov	r3, #1
  116490:	ea000004 	b	1164a8 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116494:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  116498:	e55b3005 	ldrb	r3, [fp, #-5]
  11649c:	e3530000 	cmp	r3, #0
  1164a0:	1affffd9 	bne	11640c <lwip_stricmp+0x14>
  return 0;
  1164a4:	e3a03000 	mov	r3, #0
}
  1164a8:	e1a00003 	mov	r0, r3
  1164ac:	e28bd000 	add	sp, fp, #0
  1164b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1164b4:	e12fff1e 	bx	lr

001164b8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  1164b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1164bc:	e28db000 	add	fp, sp, #0
  1164c0:	e24dd01c 	sub	sp, sp, #28
  1164c4:	e50b0010 	str	r0, [fp, #-16]
  1164c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1164cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  1164d0:	e51b3010 	ldr	r3, [fp, #-16]
  1164d4:	e2832001 	add	r2, r3, #1
  1164d8:	e50b2010 	str	r2, [fp, #-16]
  1164dc:	e5d33000 	ldrb	r3, [r3]
  1164e0:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  1164e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1164e8:	e2832001 	add	r2, r3, #1
  1164ec:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1164f0:	e5d33000 	ldrb	r3, [r3]
  1164f4:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  1164f8:	e55b2005 	ldrb	r2, [fp, #-5]
  1164fc:	e55b3006 	ldrb	r3, [fp, #-6]
  116500:	e1520003 	cmp	r2, r3
  116504:	0a000014 	beq	11655c <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  116508:	e55b3005 	ldrb	r3, [fp, #-5]
  11650c:	e3833020 	orr	r3, r3, #32
  116510:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116514:	e55b3007 	ldrb	r3, [fp, #-7]
  116518:	e3530060 	cmp	r3, #96	; 0x60
  11651c:	9a00000b 	bls	116550 <lwip_strnicmp+0x98>
  116520:	e55b3007 	ldrb	r3, [fp, #-7]
  116524:	e353007a 	cmp	r3, #122	; 0x7a
  116528:	8a000008 	bhi	116550 <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  11652c:	e55b3006 	ldrb	r3, [fp, #-6]
  116530:	e3833020 	orr	r3, r3, #32
  116534:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116538:	e55b2007 	ldrb	r2, [fp, #-7]
  11653c:	e55b3008 	ldrb	r3, [fp, #-8]
  116540:	e1520003 	cmp	r2, r3
  116544:	0a000003 	beq	116558 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116548:	e3a03001 	mov	r3, #1
  11654c:	ea00000b 	b	116580 <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  116550:	e3a03001 	mov	r3, #1
  116554:	ea000009 	b	116580 <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116558:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  11655c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116560:	e2432001 	sub	r2, r3, #1
  116564:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  116568:	e3530000 	cmp	r3, #0
  11656c:	0a000002 	beq	11657c <lwip_strnicmp+0xc4>
  116570:	e55b3005 	ldrb	r3, [fp, #-5]
  116574:	e3530000 	cmp	r3, #0
  116578:	1affffd4 	bne	1164d0 <lwip_strnicmp+0x18>
  return 0;
  11657c:	e3a03000 	mov	r3, #0
}
  116580:	e1a00003 	mov	r0, r3
  116584:	e28bd000 	add	sp, fp, #0
  116588:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11658c:	e12fff1e 	bx	lr

00116590 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  116590:	e92d4800 	push	{fp, lr}
  116594:	e28db004 	add	fp, sp, #4
  116598:	e24dd028 	sub	sp, sp, #40	; 0x28
  11659c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1165a0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1165a4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  1165a8:	e3a0300a 	mov	r3, #10
  1165ac:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  1165b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1165b4:	e50b3008 	str	r3, [fp, #-8]
  1165b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1165bc:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  1165c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1165c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  1165c8:	e51b1010 	ldr	r1, [fp, #-16]
  1165cc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1165d0:	eb008866 	bl	138770 <__divsi3>
  1165d4:	e1a03000 	mov	r3, r0
  1165d8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  1165dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1165e0:	e51b2010 	ldr	r2, [fp, #-16]
  1165e4:	e0030392 	mul	r3, r2, r3
  1165e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1165ec:	e0423003 	sub	r3, r2, r3
  1165f0:	e2831023 	add	r1, r3, #35	; 0x23
  1165f4:	e51b2008 	ldr	r2, [fp, #-8]
  1165f8:	e2823001 	add	r3, r2, #1
  1165fc:	e50b3008 	str	r3, [fp, #-8]
  116600:	e3063d60 	movw	r3, #28000	; 0x6d60
  116604:	e3403014 	movt	r3, #20
  116608:	e7d33001 	ldrb	r3, [r3, r1]
  11660c:	e5c23000 	strb	r3, [r2]
  } while(number);
  116610:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116614:	e3530000 	cmp	r3, #0
  116618:	1affffe8 	bne	1165c0 <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  11661c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116620:	e3530000 	cmp	r3, #0
  116624:	aa000004 	bge	11663c <lwip_itoa+0xac>
     *ptr++ = '-';
  116628:	e51b3008 	ldr	r3, [fp, #-8]
  11662c:	e2832001 	add	r2, r3, #1
  116630:	e50b2008 	str	r2, [fp, #-8]
  116634:	e3a0202d 	mov	r2, #45	; 0x2d
  116638:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  11663c:	e51b3008 	ldr	r3, [fp, #-8]
  116640:	e2432001 	sub	r2, r3, #1
  116644:	e50b2008 	str	r2, [fp, #-8]
  116648:	e3a02000 	mov	r2, #0
  11664c:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116650:	ea00000d 	b	11668c <lwip_itoa+0xfc>
    tmp_char = *ptr;
  116654:	e51b3008 	ldr	r3, [fp, #-8]
  116658:	e5d33000 	ldrb	r3, [r3]
  11665c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  116660:	e51b3008 	ldr	r3, [fp, #-8]
  116664:	e2432001 	sub	r2, r3, #1
  116668:	e50b2008 	str	r2, [fp, #-8]
  11666c:	e51b200c 	ldr	r2, [fp, #-12]
  116670:	e5d22000 	ldrb	r2, [r2]
  116674:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  116678:	e51b300c 	ldr	r3, [fp, #-12]
  11667c:	e2832001 	add	r2, r3, #1
  116680:	e50b200c 	str	r2, [fp, #-12]
  116684:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  116688:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  11668c:	e51b200c 	ldr	r2, [fp, #-12]
  116690:	e51b3008 	ldr	r3, [fp, #-8]
  116694:	e1520003 	cmp	r2, r3
  116698:	3affffed 	bcc	116654 <lwip_itoa+0xc4>
  }
}
  11669c:	e320f000 	nop	{0}
  1166a0:	e24bd004 	sub	sp, fp, #4
  1166a4:	e8bd8800 	pop	{fp, pc}

001166a8 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  1166a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1166ac:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  1166b0:	e320f000 	nop	{0}
  1166b4:	e28bd000 	add	sp, fp, #0
  1166b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1166bc:	e12fff1e 	bx	lr

001166c0 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  1166c0:	e92d4800 	push	{fp, lr}
  1166c4:	e28db004 	add	fp, sp, #4
  1166c8:	e24dd008 	sub	sp, sp, #8
  1166cc:	e1a03000 	mov	r3, r0
  1166d0:	e50b100c 	str	r1, [fp, #-12]
  1166d4:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  1166d8:	e55b3005 	ldrb	r3, [fp, #-5]
  1166dc:	e3530001 	cmp	r3, #1
  1166e0:	8a00001f 	bhi	116764 <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  1166e4:	e51b300c 	ldr	r3, [fp, #-12]
  1166e8:	e3530000 	cmp	r3, #0
  1166ec:	0a000015 	beq	116748 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  1166f0:	e55b2005 	ldrb	r2, [fp, #-5]
  1166f4:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  1166f8:	e3403014 	movt	r3, #20
  1166fc:	e51b100c 	ldr	r1, [fp, #-12]
  116700:	e5911000 	ldr	r1, [r1]
  116704:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  116708:	e30c3a10 	movw	r3, #51728	; 0xca10
  11670c:	e3403015 	movt	r3, #21
  116710:	e5933000 	ldr	r3, [r3]
  116714:	e3530000 	cmp	r3, #0
  116718:	0a000011 	beq	116764 <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  11671c:	e30c3a10 	movw	r3, #51728	; 0xca10
  116720:	e3403015 	movt	r3, #21
  116724:	e5933000 	ldr	r3, [r3]
  116728:	e2833042 	add	r3, r3, #66	; 0x42
  11672c:	e1a00003 	mov	r0, r3
  116730:	ebffbb76 	bl	105510 <netdev_get_by_name>
  116734:	e55b3005 	ldrb	r3, [fp, #-5]
  116738:	e51b200c 	ldr	r2, [fp, #-12]
  11673c:	e1a01003 	mov	r1, r3
  116740:	ebffbf00 	bl	106348 <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  116744:	ea000006 	b	116764 <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  116748:	e55b1005 	ldrb	r1, [fp, #-5]
  11674c:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116750:	e3403014 	movt	r3, #20
  116754:	e309263c 	movw	r2, #38460	; 0x963c
  116758:	e3402014 	movt	r2, #20
  11675c:	e5922000 	ldr	r2, [r2]
  116760:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  116764:	e320f000 	nop	{0}
  116768:	e24bd004 	sub	sp, fp, #4
  11676c:	e8bd8800 	pop	{fp, pc}

00116770 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  116770:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116774:	e28db000 	add	fp, sp, #0
  116778:	e24dd00c 	sub	sp, sp, #12
  11677c:	e1a03000 	mov	r3, r0
  116780:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116784:	e55b3005 	ldrb	r3, [fp, #-5]
  116788:	e3530001 	cmp	r3, #1
  11678c:	8a000005 	bhi	1167a8 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116790:	e55b3005 	ldrb	r3, [fp, #-5]
  116794:	e1a02103 	lsl	r2, r3, #2
  116798:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  11679c:	e3403014 	movt	r3, #20
  1167a0:	e0823003 	add	r3, r2, r3
  1167a4:	ea000001 	b	1167b0 <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  1167a8:	e309363c 	movw	r3, #38460	; 0x963c
  1167ac:	e3403014 	movt	r3, #20
  }
}
  1167b0:	e1a00003 	mov	r0, r3
  1167b4:	e28bd000 	add	sp, fp, #0
  1167b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1167bc:	e12fff1e 	bx	lr

001167c0 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  1167c0:	e92d4800 	push	{fp, lr}
  1167c4:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  1167c8:	eb000360 	bl	117550 <dns_check_entries>
}
  1167cc:	e320f000 	nop	{0}
  1167d0:	e8bd8800 	pop	{fp, pc}

001167d4 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  1167d4:	e92d4800 	push	{fp, lr}
  1167d8:	e28db004 	add	fp, sp, #4
  1167dc:	e24dd010 	sub	sp, sp, #16
  1167e0:	e50b0010 	str	r0, [fp, #-16]
  1167e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1167e8:	e3a03000 	mov	r3, #0
  1167ec:	e54b3005 	strb	r3, [fp, #-5]
  1167f0:	ea000029 	b	11689c <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  1167f4:	e55b2005 	ldrb	r2, [fp, #-5]
  1167f8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1167fc:	e3403014 	movt	r3, #20
  116800:	e3a01e11 	mov	r1, #272	; 0x110
  116804:	e0020291 	mul	r2, r1, r2
  116808:	e0833002 	add	r3, r3, r2
  11680c:	e283300a 	add	r3, r3, #10
  116810:	e5d33000 	ldrb	r3, [r3]
  116814:	e3530003 	cmp	r3, #3
  116818:	1a00001c 	bne	116890 <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  11681c:	e55b3005 	ldrb	r3, [fp, #-5]
  116820:	e3a02e11 	mov	r2, #272	; 0x110
  116824:	e0030392 	mul	r3, r2, r3
  116828:	e2832010 	add	r2, r3, #16
  11682c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  116830:	e3403014 	movt	r3, #20
  116834:	e0823003 	add	r3, r2, r3
  116838:	e3a02c01 	mov	r2, #256	; 0x100
  11683c:	e1a01003 	mov	r1, r3
  116840:	e51b0010 	ldr	r0, [fp, #-16]
  116844:	ebffff1b 	bl	1164b8 <lwip_strnicmp>
  116848:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  11684c:	e3530000 	cmp	r3, #0
  116850:	1a00000e 	bne	116890 <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  116854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116858:	e3530000 	cmp	r3, #0
  11685c:	0a000009 	beq	116888 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  116860:	e55b2005 	ldrb	r2, [fp, #-5]
  116864:	e30d3c40 	movw	r3, #56384	; 0xdc40
  116868:	e3403014 	movt	r3, #20
  11686c:	e3a01e11 	mov	r1, #272	; 0x110
  116870:	e0020291 	mul	r2, r1, r2
  116874:	e0833002 	add	r3, r3, r2
  116878:	e2833004 	add	r3, r3, #4
  11687c:	e5932000 	ldr	r2, [r3]
  116880:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116884:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  116888:	e3a03000 	mov	r3, #0
  11688c:	ea000006 	b	1168ac <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116890:	e55b3005 	ldrb	r3, [fp, #-5]
  116894:	e2833001 	add	r3, r3, #1
  116898:	e54b3005 	strb	r3, [fp, #-5]
  11689c:	e55b3005 	ldrb	r3, [fp, #-5]
  1168a0:	e3530003 	cmp	r3, #3
  1168a4:	9affffd2 	bls	1167f4 <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  1168a8:	e3e0300f 	mvn	r3, #15
}
  1168ac:	e1a00003 	mov	r0, r3
  1168b0:	e24bd004 	sub	sp, fp, #4
  1168b4:	e8bd8800 	pop	{fp, pc}

001168b8 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  1168b8:	e92d4800 	push	{fp, lr}
  1168bc:	e28db004 	add	fp, sp, #4
  1168c0:	e24dd020 	sub	sp, sp, #32
  1168c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1168c8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1168cc:	e1a03002 	mov	r3, r2
  1168d0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  1168d4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  1168d8:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  1168dc:	e15b30ba 	ldrh	r3, [fp, #-10]
  1168e0:	e2832001 	add	r2, r3, #1
  1168e4:	e14b20ba 	strh	r2, [fp, #-10]
  1168e8:	e1a01003 	mov	r1, r3
  1168ec:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1168f0:	eb001460 	bl	11ba78 <pbuf_try_get_at>
  1168f4:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  1168f8:	e51b3008 	ldr	r3, [fp, #-8]
  1168fc:	e3530000 	cmp	r3, #0
  116900:	aa000001 	bge	11690c <dns_compare_name+0x54>
      return 0xFFFF;
  116904:	e30f3fff 	movw	r3, #65535	; 0xffff
  116908:	ea000036 	b	1169e8 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  11690c:	e51b3008 	ldr	r3, [fp, #-8]
  116910:	e20330c0 	and	r3, r3, #192	; 0xc0
  116914:	e35300c0 	cmp	r3, #192	; 0xc0
  116918:	1a00001c 	bne	116990 <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  11691c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116920:	ea000030 	b	1169e8 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  116924:	e15b30ba 	ldrh	r3, [fp, #-10]
  116928:	e1a01003 	mov	r1, r3
  11692c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116930:	eb001450 	bl	11ba78 <pbuf_try_get_at>
  116934:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  116938:	e51b3010 	ldr	r3, [fp, #-16]
  11693c:	e3530000 	cmp	r3, #0
  116940:	aa000001 	bge	11694c <dns_compare_name+0x94>
          return 0xFFFF;
  116944:	e30f3fff 	movw	r3, #65535	; 0xffff
  116948:	ea000026 	b	1169e8 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  11694c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116950:	e5d32000 	ldrb	r2, [r3]
  116954:	e51b3010 	ldr	r3, [fp, #-16]
  116958:	e6ef3073 	uxtb	r3, r3
  11695c:	e1520003 	cmp	r2, r3
  116960:	0a000001 	beq	11696c <dns_compare_name+0xb4>
          return 0xFFFF;
  116964:	e30f3fff 	movw	r3, #65535	; 0xffff
  116968:	ea00001e 	b	1169e8 <dns_compare_name+0x130>
        }
        ++response_offset;
  11696c:	e15b30ba 	ldrh	r3, [fp, #-10]
  116970:	e2833001 	add	r3, r3, #1
  116974:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  116978:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11697c:	e2833001 	add	r3, r3, #1
  116980:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  116984:	e51b3008 	ldr	r3, [fp, #-8]
  116988:	e2433001 	sub	r3, r3, #1
  11698c:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116990:	e51b3008 	ldr	r3, [fp, #-8]
  116994:	e3530000 	cmp	r3, #0
  116998:	caffffe1 	bgt	116924 <dns_compare_name+0x6c>
      }
      ++query;
  11699c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1169a0:	e2833001 	add	r3, r3, #1
  1169a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  1169a8:	e15b30ba 	ldrh	r3, [fp, #-10]
  1169ac:	e1a01003 	mov	r1, r3
  1169b0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1169b4:	eb00142f 	bl	11ba78 <pbuf_try_get_at>
  1169b8:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  1169bc:	e51b3008 	ldr	r3, [fp, #-8]
  1169c0:	e3530000 	cmp	r3, #0
  1169c4:	aa000001 	bge	1169d0 <dns_compare_name+0x118>
      return 0xFFFF;
  1169c8:	e30f3fff 	movw	r3, #65535	; 0xffff
  1169cc:	ea000005 	b	1169e8 <dns_compare_name+0x130>
    }
  } while (n != 0);
  1169d0:	e51b3008 	ldr	r3, [fp, #-8]
  1169d4:	e3530000 	cmp	r3, #0
  1169d8:	1affffbf 	bne	1168dc <dns_compare_name+0x24>

  return response_offset + 1;
  1169dc:	e15b30ba 	ldrh	r3, [fp, #-10]
  1169e0:	e2833001 	add	r3, r3, #1
  1169e4:	e6ff3073 	uxth	r3, r3
}
  1169e8:	e1a00003 	mov	r0, r3
  1169ec:	e24bd004 	sub	sp, fp, #4
  1169f0:	e8bd8800 	pop	{fp, pc}

001169f4 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  1169f4:	e92d4800 	push	{fp, lr}
  1169f8:	e28db004 	add	fp, sp, #4
  1169fc:	e24dd010 	sub	sp, sp, #16
  116a00:	e50b0010 	str	r0, [fp, #-16]
  116a04:	e1a03001 	mov	r3, r1
  116a08:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116a0c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116a10:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116a14:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a18:	e2832001 	add	r2, r3, #1
  116a1c:	e14b20b6 	strh	r2, [fp, #-6]
  116a20:	e1a01003 	mov	r1, r3
  116a24:	e51b0010 	ldr	r0, [fp, #-16]
  116a28:	eb001412 	bl	11ba78 <pbuf_try_get_at>
  116a2c:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116a30:	e51b300c 	ldr	r3, [fp, #-12]
  116a34:	e3530000 	cmp	r3, #0
  116a38:	aa000001 	bge	116a44 <dns_skip_name+0x50>
      return 0xFFFF;
  116a3c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116a40:	ea000023 	b	116ad4 <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116a44:	e51b300c 	ldr	r3, [fp, #-12]
  116a48:	e20330c0 	and	r3, r3, #192	; 0xc0
  116a4c:	e35300c0 	cmp	r3, #192	; 0xc0
  116a50:	0a00001b 	beq	116ac4 <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116a54:	e15b20b6 	ldrh	r2, [fp, #-6]
  116a58:	e51b300c 	ldr	r3, [fp, #-12]
  116a5c:	e0823003 	add	r3, r2, r3
  116a60:	e51b2010 	ldr	r2, [fp, #-16]
  116a64:	e1d220b8 	ldrh	r2, [r2, #8]
  116a68:	e1530002 	cmp	r3, r2
  116a6c:	ba000001 	blt	116a78 <dns_skip_name+0x84>
        return 0xFFFF;
  116a70:	e30f3fff 	movw	r3, #65535	; 0xffff
  116a74:	ea000016 	b	116ad4 <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116a78:	e51b300c 	ldr	r3, [fp, #-12]
  116a7c:	e6ff2073 	uxth	r2, r3
  116a80:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a84:	e0823003 	add	r3, r2, r3
  116a88:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116a8c:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a90:	e1a01003 	mov	r1, r3
  116a94:	e51b0010 	ldr	r0, [fp, #-16]
  116a98:	eb0013f6 	bl	11ba78 <pbuf_try_get_at>
  116a9c:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116aa0:	e51b300c 	ldr	r3, [fp, #-12]
  116aa4:	e3530000 	cmp	r3, #0
  116aa8:	aa000001 	bge	116ab4 <dns_skip_name+0xc0>
      return 0xFFFF;
  116aac:	e30f3fff 	movw	r3, #65535	; 0xffff
  116ab0:	ea000007 	b	116ad4 <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116ab4:	e51b300c 	ldr	r3, [fp, #-12]
  116ab8:	e3530000 	cmp	r3, #0
  116abc:	1affffd4 	bne	116a14 <dns_skip_name+0x20>
  116ac0:	ea000000 	b	116ac8 <dns_skip_name+0xd4>
      break;
  116ac4:	e320f000 	nop	{0}

  return offset + 1;
  116ac8:	e15b30b6 	ldrh	r3, [fp, #-6]
  116acc:	e2833001 	add	r3, r3, #1
  116ad0:	e6ff3073 	uxth	r3, r3
}
  116ad4:	e1a00003 	mov	r0, r3
  116ad8:	e24bd004 	sub	sp, fp, #4
  116adc:	e8bd8800 	pop	{fp, pc}

00116ae0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116ae0:	e92d4800 	push	{fp, lr}
  116ae4:	e28db004 	add	fp, sp, #4
  116ae8:	e24dd040 	sub	sp, sp, #64	; 0x40
  116aec:	e1a03000 	mov	r3, r0
  116af0:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116af4:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116af8:	e3a02e11 	mov	r2, #272	; 0x110
  116afc:	e0020392 	mul	r2, r2, r3
  116b00:	e30d3c40 	movw	r3, #56384	; 0xdc40
  116b04:	e3403014 	movt	r3, #20
  116b08:	e0823003 	add	r3, r2, r3
  116b0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116b10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b14:	e5d3300b 	ldrb	r3, [r3, #11]
  116b18:	e3530001 	cmp	r3, #1
  116b1c:	9a000006 	bls	116b3c <dns_send+0x5c>
  116b20:	e3060dac 	movw	r0, #28076	; 0x6dac
  116b24:	e3400014 	movt	r0, #20
  116b28:	ebffb179 	bl	103114 <rt_kprintf>
  116b2c:	e30012fa 	movw	r1, #762	; 0x2fa
  116b30:	e3060dc4 	movw	r0, #28100	; 0x6dc4
  116b34:	e3400014 	movt	r0, #20
  116b38:	ebffd095 	bl	10ad94 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116b3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b40:	e5d3300b 	ldrb	r3, [r3, #11]
  116b44:	e1a02003 	mov	r2, r3
  116b48:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116b4c:	e3403014 	movt	r3, #20
  116b50:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116b54:	e3530000 	cmp	r3, #0
  116b58:	1a000008 	bne	116b80 <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116b5c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116b60:	e3a01000 	mov	r1, #0
  116b64:	e1a00003 	mov	r0, r3
  116b68:	eb00010f 	bl	116fac <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b70:	e3a02000 	mov	r2, #0
  116b74:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116b78:	e3a03000 	mov	r3, #0
  116b7c:	ea000089 	b	116da8 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b84:	e2833010 	add	r3, r3, #16
  116b88:	e1a00003 	mov	r0, r3
  116b8c:	eb00a985 	bl	1411a8 <strlen>
  116b90:	e1a03000 	mov	r3, r0
  116b94:	e6ff3073 	uxth	r3, r3
  116b98:	e2833012 	add	r3, r3, #18
  116b9c:	e6ff3073 	uxth	r3, r3
  116ba0:	e3a02000 	mov	r2, #0
  116ba4:	e1a01003 	mov	r1, r3
  116ba8:	e3a00000 	mov	r0, #0
  116bac:	eb000ced 	bl	119f68 <pbuf_alloc>
  116bb0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116bb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116bb8:	e3530000 	cmp	r3, #0
  116bbc:	0a000076 	beq	116d9c <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116bc0:	e24b3034 	sub	r3, fp, #52	; 0x34
  116bc4:	e3a0200c 	mov	r2, #12
  116bc8:	e3a01000 	mov	r1, #0
  116bcc:	e1a00003 	mov	r0, r3
  116bd0:	eb00a8e3 	bl	140f64 <memset>
    hdr.id = lwip_htons(entry->txid);
  116bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116bd8:	e1d330b8 	ldrh	r3, [r3, #8]
  116bdc:	e1a00003 	mov	r0, r3
  116be0:	ebfffdb0 	bl	1162a8 <lwip_htons>
  116be4:	e1a03000 	mov	r3, r0
  116be8:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116bec:	e3a03001 	mov	r3, #1
  116bf0:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116bf4:	e3a03c01 	mov	r3, #256	; 0x100
  116bf8:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116bfc:	e24b3034 	sub	r3, fp, #52	; 0x34
  116c00:	e3a0200c 	mov	r2, #12
  116c04:	e1a01003 	mov	r1, r3
  116c08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116c0c:	eb00128f 	bl	11b650 <pbuf_take>
    hostname = entry->name;
  116c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116c14:	e2833010 	add	r3, r3, #16
  116c18:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116c1c:	e51b300c 	ldr	r3, [fp, #-12]
  116c20:	e2433001 	sub	r3, r3, #1
  116c24:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116c28:	e3a0300c 	mov	r3, #12
  116c2c:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116c30:	e51b300c 	ldr	r3, [fp, #-12]
  116c34:	e2833001 	add	r3, r3, #1
  116c38:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116c3c:	e51b300c 	ldr	r3, [fp, #-12]
  116c40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116c44:	e3a03000 	mov	r3, #0
  116c48:	e54b300d 	strb	r3, [fp, #-13]
  116c4c:	ea000005 	b	116c68 <dns_send+0x188>
        ++n;
  116c50:	e55b300d 	ldrb	r3, [fp, #-13]
  116c54:	e2833001 	add	r3, r3, #1
  116c58:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116c5c:	e51b300c 	ldr	r3, [fp, #-12]
  116c60:	e2833001 	add	r3, r3, #1
  116c64:	e50b300c 	str	r3, [fp, #-12]
  116c68:	e51b300c 	ldr	r3, [fp, #-12]
  116c6c:	e5d33000 	ldrb	r3, [r3]
  116c70:	e353002e 	cmp	r3, #46	; 0x2e
  116c74:	0a000003 	beq	116c88 <dns_send+0x1a8>
  116c78:	e51b300c 	ldr	r3, [fp, #-12]
  116c7c:	e5d33000 	ldrb	r3, [r3]
  116c80:	e3530000 	cmp	r3, #0
  116c84:	1afffff1 	bne	116c50 <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116c88:	e51b200c 	ldr	r2, [fp, #-12]
  116c8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116c90:	e0423003 	sub	r3, r2, r3
  116c94:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116c98:	e55b200d 	ldrb	r2, [fp, #-13]
  116c9c:	e15b30b8 	ldrh	r3, [fp, #-8]
  116ca0:	e1a01003 	mov	r1, r3
  116ca4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116ca8:	eb001390 	bl	11baf0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116cac:	e15b30b8 	ldrh	r3, [fp, #-8]
  116cb0:	e2833001 	add	r3, r3, #1
  116cb4:	e6ff3073 	uxth	r3, r3
  116cb8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116cbc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116cc0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116cc4:	eb0012de 	bl	11b844 <pbuf_take_at>
      query_idx += n + 1;
  116cc8:	e55b300d 	ldrb	r3, [fp, #-13]
  116ccc:	e6ff2073 	uxth	r2, r3
  116cd0:	e15b30b8 	ldrh	r3, [fp, #-8]
  116cd4:	e0823003 	add	r3, r2, r3
  116cd8:	e6ff3073 	uxth	r3, r3
  116cdc:	e2833001 	add	r3, r3, #1
  116ce0:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  116ce4:	e51b300c 	ldr	r3, [fp, #-12]
  116ce8:	e5d33000 	ldrb	r3, [r3]
  116cec:	e3530000 	cmp	r3, #0
  116cf0:	1affffce 	bne	116c30 <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  116cf4:	e15b30b8 	ldrh	r3, [fp, #-8]
  116cf8:	e3a02000 	mov	r2, #0
  116cfc:	e1a01003 	mov	r1, r3
  116d00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d04:	eb001379 	bl	11baf0 <pbuf_put_at>
    query_idx++;
  116d08:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d0c:	e2833001 	add	r3, r3, #1
  116d10:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  116d14:	e3a03c01 	mov	r3, #256	; 0x100
  116d18:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  116d1c:	e3a03c01 	mov	r3, #256	; 0x100
  116d20:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  116d24:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d28:	e24b1038 	sub	r1, fp, #56	; 0x38
  116d2c:	e3a02004 	mov	r2, #4
  116d30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d34:	eb0012c2 	bl	11b844 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  116d38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116d3c:	e5d3300f 	ldrb	r3, [r3, #15]
  116d40:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  116d44:	e3a03035 	mov	r3, #53	; 0x35
  116d48:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  116d4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116d50:	e5d3300b 	ldrb	r3, [r3, #11]
  116d54:	e1a02103 	lsl	r2, r3, #2
  116d58:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116d5c:	e3403014 	movt	r3, #20
  116d60:	e0823003 	add	r3, r2, r3
  116d64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  116d68:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  116d6c:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116d70:	e3403014 	movt	r3, #20
  116d74:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  116d78:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  116d7c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  116d80:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  116d84:	eb00441e 	bl	127e04 <udp_sendto>
  116d88:	e1a03000 	mov	r3, r0
  116d8c:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  116d90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d94:	eb000f7a 	bl	11ab84 <pbuf_free>
  116d98:	ea000001 	b	116da4 <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  116d9c:	e3e03000 	mvn	r3, #0
  116da0:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  116da4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  116da8:	e1a00003 	mov	r0, r3
  116dac:	e24bd004 	sub	sp, fp, #4
  116db0:	e8bd8800 	pop	{fp, pc}

00116db4 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  116db4:	e92d4800 	push	{fp, lr}
  116db8:	e28db004 	add	fp, sp, #4
  116dbc:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  116dc0:	e3a0002e 	mov	r0, #46	; 0x2e
  116dc4:	eb00468c 	bl	1287fc <udp_new_ip_type>
  116dc8:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  116dcc:	e51b300c 	ldr	r3, [fp, #-12]
  116dd0:	e3530000 	cmp	r3, #0
  116dd4:	1a000001 	bne	116de0 <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  116dd8:	e3a03000 	mov	r3, #0
  116ddc:	ea000020 	b	116e64 <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  116de0:	eb009c25 	bl	13de7c <rand>
  116de4:	e1a03000 	mov	r3, r0
  116de8:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  116dec:	e15b30be 	ldrh	r3, [fp, #-14]
  116df0:	e3530b01 	cmp	r3, #1024	; 0x400
  116df4:	2a000002 	bcs	116e04 <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  116df8:	e3e03007 	mvn	r3, #7
  116dfc:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  116e00:	ea000007 	b	116e24 <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  116e04:	e15b30be 	ldrh	r3, [fp, #-14]
  116e08:	e1a02003 	mov	r2, r3
  116e0c:	e309163c 	movw	r1, #38460	; 0x963c
  116e10:	e3401014 	movt	r1, #20
  116e14:	e51b000c 	ldr	r0, [fp, #-12]
  116e18:	eb004542 	bl	128328 <udp_bind>
  116e1c:	e1a03000 	mov	r3, r0
  116e20:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  116e24:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116e28:	e3730008 	cmn	r3, #8
  116e2c:	0affffeb 	beq	116de0 <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  116e30:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116e34:	e3530000 	cmp	r3, #0
  116e38:	0a000003 	beq	116e4c <dns_alloc_random_port+0x98>
    udp_remove(ret);
  116e3c:	e51b000c 	ldr	r0, [fp, #-12]
  116e40:	eb004622 	bl	1286d0 <udp_remove>
    return NULL;
  116e44:	e3a03000 	mov	r3, #0
  116e48:	ea000005 	b	116e64 <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  116e4c:	e3a02000 	mov	r2, #0
  116e50:	e307165c 	movw	r1, #30300	; 0x765c
  116e54:	e3401011 	movt	r1, #17
  116e58:	e51b000c 	ldr	r0, [fp, #-12]
  116e5c:	eb00460b 	bl	128690 <udp_recv>
  return ret;
  116e60:	e51b300c 	ldr	r3, [fp, #-12]
}
  116e64:	e1a00003 	mov	r0, r3
  116e68:	e24bd004 	sub	sp, fp, #4
  116e6c:	e8bd8800 	pop	{fp, pc}

00116e70 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  116e70:	e92d4810 	push	{r4, fp, lr}
  116e74:	e28db008 	add	fp, sp, #8
  116e78:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116e7c:	e3a03000 	mov	r3, #0
  116e80:	e54b300d 	strb	r3, [fp, #-13]
  116e84:	ea000008 	b	116eac <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  116e88:	e55b200d 	ldrb	r2, [fp, #-13]
  116e8c:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116e90:	e3403014 	movt	r3, #20
  116e94:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e98:	e3530000 	cmp	r3, #0
  116e9c:	0a000006 	beq	116ebc <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116ea0:	e55b300d 	ldrb	r3, [fp, #-13]
  116ea4:	e2833001 	add	r3, r3, #1
  116ea8:	e54b300d 	strb	r3, [fp, #-13]
  116eac:	e55b300d 	ldrb	r3, [fp, #-13]
  116eb0:	e3530003 	cmp	r3, #3
  116eb4:	9afffff3 	bls	116e88 <dns_alloc_pcb+0x18>
  116eb8:	ea000000 	b	116ec0 <dns_alloc_pcb+0x50>
      break;
  116ebc:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  116ec0:	e55b300d 	ldrb	r3, [fp, #-13]
  116ec4:	e3530003 	cmp	r3, #3
  116ec8:	8a000011 	bhi	116f14 <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  116ecc:	e55b400d 	ldrb	r4, [fp, #-13]
  116ed0:	ebffffb7 	bl	116db4 <dns_alloc_random_port>
  116ed4:	e1a02000 	mov	r2, r0
  116ed8:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116edc:	e3403014 	movt	r3, #20
  116ee0:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  116ee4:	e55b200d 	ldrb	r2, [fp, #-13]
  116ee8:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116eec:	e3403014 	movt	r3, #20
  116ef0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116ef4:	e3530000 	cmp	r3, #0
  116ef8:	0a000005 	beq	116f14 <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  116efc:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116f00:	e3403014 	movt	r3, #20
  116f04:	e55b200d 	ldrb	r2, [fp, #-13]
  116f08:	e5c32000 	strb	r2, [r3]
      return i;
  116f0c:	e55b300d 	ldrb	r3, [fp, #-13]
  116f10:	ea000022 	b	116fa0 <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116f14:	e3a03000 	mov	r3, #0
  116f18:	e54b300d 	strb	r3, [fp, #-13]
  116f1c:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116f20:	e3403014 	movt	r3, #20
  116f24:	e5d33000 	ldrb	r3, [r3]
  116f28:	e2833001 	add	r3, r3, #1
  116f2c:	e54b300e 	strb	r3, [fp, #-14]
  116f30:	ea000016 	b	116f90 <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  116f34:	e55b300e 	ldrb	r3, [fp, #-14]
  116f38:	e3530003 	cmp	r3, #3
  116f3c:	9a000001 	bls	116f48 <dns_alloc_pcb+0xd8>
      idx = 0;
  116f40:	e3a03000 	mov	r3, #0
  116f44:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  116f48:	e55b200e 	ldrb	r2, [fp, #-14]
  116f4c:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116f50:	e3403014 	movt	r3, #20
  116f54:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116f58:	e3530000 	cmp	r3, #0
  116f5c:	0a000005 	beq	116f78 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  116f60:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116f64:	e3403014 	movt	r3, #20
  116f68:	e55b200e 	ldrb	r2, [fp, #-14]
  116f6c:	e5c32000 	strb	r2, [r3]
      return idx;
  116f70:	e55b300e 	ldrb	r3, [fp, #-14]
  116f74:	ea000009 	b	116fa0 <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116f78:	e55b300d 	ldrb	r3, [fp, #-13]
  116f7c:	e2833001 	add	r3, r3, #1
  116f80:	e54b300d 	strb	r3, [fp, #-13]
  116f84:	e55b300e 	ldrb	r3, [fp, #-14]
  116f88:	e2833001 	add	r3, r3, #1
  116f8c:	e54b300e 	strb	r3, [fp, #-14]
  116f90:	e55b300d 	ldrb	r3, [fp, #-13]
  116f94:	e3530003 	cmp	r3, #3
  116f98:	9affffe5 	bls	116f34 <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  116f9c:	e3a03004 	mov	r3, #4
}
  116fa0:	e1a00003 	mov	r0, r3
  116fa4:	e24bd008 	sub	sp, fp, #8
  116fa8:	e8bd8810 	pop	{r4, fp, pc}

00116fac <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  116fac:	e92d4810 	push	{r4, fp, lr}
  116fb0:	e28db008 	add	fp, sp, #8
  116fb4:	e24dd014 	sub	sp, sp, #20
  116fb8:	e1a03000 	mov	r3, r0
  116fbc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116fc0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  116fc4:	e3a03000 	mov	r3, #0
  116fc8:	e54b300d 	strb	r3, [fp, #-13]
  116fcc:	ea000037 	b	1170b0 <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  116fd0:	e55b200d 	ldrb	r2, [fp, #-13]
  116fd4:	e30e3080 	movw	r3, #57472	; 0xe080
  116fd8:	e3403014 	movt	r3, #20
  116fdc:	e3a0100c 	mov	r1, #12
  116fe0:	e0020291 	mul	r2, r1, r2
  116fe4:	e0833002 	add	r3, r3, r2
  116fe8:	e5933000 	ldr	r3, [r3]
  116fec:	e3530000 	cmp	r3, #0
  116ff0:	0a00002b 	beq	1170a4 <dns_call_found+0xf8>
  116ff4:	e55b200d 	ldrb	r2, [fp, #-13]
  116ff8:	e30e3080 	movw	r3, #57472	; 0xe080
  116ffc:	e3403014 	movt	r3, #20
  117000:	e3a0100c 	mov	r1, #12
  117004:	e0020291 	mul	r2, r1, r2
  117008:	e0833002 	add	r3, r3, r2
  11700c:	e2833008 	add	r3, r3, #8
  117010:	e5d33000 	ldrb	r3, [r3]
  117014:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117018:	e1520003 	cmp	r2, r3
  11701c:	1a000020 	bne	1170a4 <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  117020:	e55b200d 	ldrb	r2, [fp, #-13]
  117024:	e30e3080 	movw	r3, #57472	; 0xe080
  117028:	e3403014 	movt	r3, #20
  11702c:	e3a0100c 	mov	r1, #12
  117030:	e0020291 	mul	r2, r1, r2
  117034:	e0833002 	add	r3, r3, r2
  117038:	e5934000 	ldr	r4, [r3]
  11703c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117040:	e3a02e11 	mov	r2, #272	; 0x110
  117044:	e0030392 	mul	r3, r2, r3
  117048:	e2832010 	add	r2, r3, #16
  11704c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117050:	e3403014 	movt	r3, #20
  117054:	e0820003 	add	r0, r2, r3
  117058:	e55b200d 	ldrb	r2, [fp, #-13]
  11705c:	e30e3080 	movw	r3, #57472	; 0xe080
  117060:	e3403014 	movt	r3, #20
  117064:	e3a0100c 	mov	r1, #12
  117068:	e0020291 	mul	r2, r1, r2
  11706c:	e0833002 	add	r3, r3, r2
  117070:	e2833004 	add	r3, r3, #4
  117074:	e5933000 	ldr	r3, [r3]
  117078:	e1a02003 	mov	r2, r3
  11707c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  117080:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  117084:	e55b200d 	ldrb	r2, [fp, #-13]
  117088:	e30e3080 	movw	r3, #57472	; 0xe080
  11708c:	e3403014 	movt	r3, #20
  117090:	e3a0100c 	mov	r1, #12
  117094:	e0020291 	mul	r2, r1, r2
  117098:	e0833002 	add	r3, r3, r2
  11709c:	e3a02000 	mov	r2, #0
  1170a0:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1170a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1170a8:	e2833001 	add	r3, r3, #1
  1170ac:	e54b300d 	strb	r3, [fp, #-13]
  1170b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1170b4:	e3530003 	cmp	r3, #3
  1170b8:	9affffc4 	bls	116fd0 <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1170bc:	e3a03000 	mov	r3, #0
  1170c0:	e54b300d 	strb	r3, [fp, #-13]
  1170c4:	ea00002d 	b	117180 <dns_call_found+0x1d4>
    if (i == idx) {
  1170c8:	e55b200d 	ldrb	r2, [fp, #-13]
  1170cc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1170d0:	e1520003 	cmp	r2, r3
  1170d4:	0a000025 	beq	117170 <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  1170d8:	e55b200d 	ldrb	r2, [fp, #-13]
  1170dc:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1170e0:	e3403014 	movt	r3, #20
  1170e4:	e3a01e11 	mov	r1, #272	; 0x110
  1170e8:	e0020291 	mul	r2, r1, r2
  1170ec:	e0833002 	add	r3, r3, r2
  1170f0:	e283300a 	add	r3, r3, #10
  1170f4:	e5d33000 	ldrb	r3, [r3]
  1170f8:	e3530002 	cmp	r3, #2
  1170fc:	1a00001c 	bne	117174 <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  117100:	e55b200d 	ldrb	r2, [fp, #-13]
  117104:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117108:	e3403014 	movt	r3, #20
  11710c:	e3a01e11 	mov	r1, #272	; 0x110
  117110:	e0020291 	mul	r2, r1, r2
  117114:	e0833002 	add	r3, r3, r2
  117118:	e283300f 	add	r3, r3, #15
  11711c:	e5d32000 	ldrb	r2, [r3]
  117120:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  117124:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117128:	e3403014 	movt	r3, #20
  11712c:	e3a00e11 	mov	r0, #272	; 0x110
  117130:	e0010190 	mul	r1, r0, r1
  117134:	e0833001 	add	r3, r3, r1
  117138:	e283300f 	add	r3, r3, #15
  11713c:	e5d33000 	ldrb	r3, [r3]
  117140:	e1520003 	cmp	r2, r3
  117144:	1a00000a 	bne	117174 <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117148:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11714c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117150:	e3403014 	movt	r3, #20
  117154:	e3a01e11 	mov	r1, #272	; 0x110
  117158:	e0020291 	mul	r2, r1, r2
  11715c:	e0833002 	add	r3, r3, r2
  117160:	e283300f 	add	r3, r3, #15
  117164:	e3a02004 	mov	r2, #4
  117168:	e5c32000 	strb	r2, [r3]
        break;
  11716c:	ea000006 	b	11718c <dns_call_found+0x1e0>
      continue; /* only check other requests */
  117170:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117174:	e55b300d 	ldrb	r3, [fp, #-13]
  117178:	e2833001 	add	r3, r3, #1
  11717c:	e54b300d 	strb	r3, [fp, #-13]
  117180:	e55b300d 	ldrb	r3, [fp, #-13]
  117184:	e3530003 	cmp	r3, #3
  117188:	9affffce 	bls	1170c8 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  11718c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117190:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117194:	e3403014 	movt	r3, #20
  117198:	e3a01e11 	mov	r1, #272	; 0x110
  11719c:	e0020291 	mul	r2, r1, r2
  1171a0:	e0833002 	add	r3, r3, r2
  1171a4:	e283300f 	add	r3, r3, #15
  1171a8:	e5d33000 	ldrb	r3, [r3]
  1171ac:	e3530003 	cmp	r3, #3
  1171b0:	8a000023 	bhi	117244 <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  1171b4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1171b8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1171bc:	e3403014 	movt	r3, #20
  1171c0:	e3a01e11 	mov	r1, #272	; 0x110
  1171c4:	e0020291 	mul	r2, r1, r2
  1171c8:	e0833002 	add	r3, r3, r2
  1171cc:	e283300f 	add	r3, r3, #15
  1171d0:	e5d33000 	ldrb	r3, [r3]
  1171d4:	e1a02003 	mov	r2, r3
  1171d8:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  1171dc:	e3403014 	movt	r3, #20
  1171e0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1171e4:	e1a00003 	mov	r0, r3
  1171e8:	eb004538 	bl	1286d0 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  1171ec:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1171f0:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1171f4:	e3403014 	movt	r3, #20
  1171f8:	e3a01e11 	mov	r1, #272	; 0x110
  1171fc:	e0020291 	mul	r2, r1, r2
  117200:	e0833002 	add	r3, r3, r2
  117204:	e283300f 	add	r3, r3, #15
  117208:	e5d33000 	ldrb	r3, [r3]
  11720c:	e1a01003 	mov	r1, r3
  117210:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  117214:	e3403014 	movt	r3, #20
  117218:	e3a02000 	mov	r2, #0
  11721c:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117220:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117224:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117228:	e3403014 	movt	r3, #20
  11722c:	e3a01e11 	mov	r1, #272	; 0x110
  117230:	e0020291 	mul	r2, r1, r2
  117234:	e0833002 	add	r3, r3, r2
  117238:	e283300f 	add	r3, r3, #15
  11723c:	e3a02004 	mov	r2, #4
  117240:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  117244:	e320f000 	nop	{0}
  117248:	e24bd008 	sub	sp, fp, #8
  11724c:	e8bd8810 	pop	{r4, fp, pc}

00117250 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  117250:	e92d4800 	push	{fp, lr}
  117254:	e28db004 	add	fp, sp, #4
  117258:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  11725c:	eb009b06 	bl	13de7c <rand>
  117260:	e1a03000 	mov	r3, r0
  117264:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117268:	e3a03000 	mov	r3, #0
  11726c:	e54b3005 	strb	r3, [fp, #-5]
  117270:	ea000018 	b	1172d8 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117274:	e55b2005 	ldrb	r2, [fp, #-5]
  117278:	e30d3c40 	movw	r3, #56384	; 0xdc40
  11727c:	e3403014 	movt	r3, #20
  117280:	e3a01e11 	mov	r1, #272	; 0x110
  117284:	e0020291 	mul	r2, r1, r2
  117288:	e0833002 	add	r3, r3, r2
  11728c:	e283300a 	add	r3, r3, #10
  117290:	e5d33000 	ldrb	r3, [r3]
  117294:	e3530002 	cmp	r3, #2
  117298:	1a00000b 	bne	1172cc <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  11729c:	e55b2005 	ldrb	r2, [fp, #-5]
  1172a0:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1172a4:	e3403014 	movt	r3, #20
  1172a8:	e3a01e11 	mov	r1, #272	; 0x110
  1172ac:	e0020291 	mul	r2, r1, r2
  1172b0:	e0833002 	add	r3, r3, r2
  1172b4:	e2833008 	add	r3, r3, #8
  1172b8:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1172bc:	e15b20b8 	ldrh	r2, [fp, #-8]
  1172c0:	e1520003 	cmp	r2, r3
  1172c4:	1a000000 	bne	1172cc <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  1172c8:	eaffffe3 	b	11725c <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1172cc:	e55b3005 	ldrb	r3, [fp, #-5]
  1172d0:	e2833001 	add	r3, r3, #1
  1172d4:	e54b3005 	strb	r3, [fp, #-5]
  1172d8:	e55b3005 	ldrb	r3, [fp, #-5]
  1172dc:	e3530003 	cmp	r3, #3
  1172e0:	9affffe3 	bls	117274 <dns_create_txid+0x24>
    }
  }

  return txid;
  1172e4:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  1172e8:	e1a00003 	mov	r0, r3
  1172ec:	e24bd004 	sub	sp, fp, #4
  1172f0:	e8bd8800 	pop	{fp, pc}

001172f4 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  1172f4:	e92d4800 	push	{fp, lr}
  1172f8:	e28db004 	add	fp, sp, #4
  1172fc:	e24dd010 	sub	sp, sp, #16
  117300:	e1a03000 	mov	r3, r0
  117304:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  117308:	e55b300d 	ldrb	r3, [fp, #-13]
  11730c:	e3a02e11 	mov	r2, #272	; 0x110
  117310:	e0020392 	mul	r2, r2, r3
  117314:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117318:	e3403014 	movt	r3, #20
  11731c:	e0823003 	add	r3, r2, r3
  117320:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  117324:	e55b300d 	ldrb	r3, [fp, #-13]
  117328:	e3530003 	cmp	r3, #3
  11732c:	9a000006 	bls	11734c <dns_check_entry+0x58>
  117330:	e3060df0 	movw	r0, #28144	; 0x6df0
  117334:	e3400014 	movt	r0, #20
  117338:	ebffaf75 	bl	103114 <rt_kprintf>
  11733c:	e3001405 	movw	r1, #1029	; 0x405
  117340:	e3060dc4 	movw	r0, #28100	; 0x6dc4
  117344:	e3400014 	movt	r0, #20
  117348:	ebffce91 	bl	10ad94 <sys_arch_assert>

  switch (entry->state) {
  11734c:	e51b3008 	ldr	r3, [fp, #-8]
  117350:	e5d3300a 	ldrb	r3, [r3, #10]
  117354:	e3530003 	cmp	r3, #3
  117358:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11735c:	ea00006b 	b	117510 <dns_check_entry+0x21c>
  117360:	00117530 	.word	0x00117530
  117364:	00117370 	.word	0x00117370
  117368:	001173cc 	.word	0x001173cc
  11736c:	001174cc 	.word	0x001174cc
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  117370:	ebffffb6 	bl	117250 <dns_create_txid>
  117374:	e1a03000 	mov	r3, r0
  117378:	e1a02003 	mov	r2, r3
  11737c:	e51b3008 	ldr	r3, [fp, #-8]
  117380:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  117384:	e51b3008 	ldr	r3, [fp, #-8]
  117388:	e3a02002 	mov	r2, #2
  11738c:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  117390:	e51b3008 	ldr	r3, [fp, #-8]
  117394:	e3a02000 	mov	r2, #0
  117398:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  11739c:	e51b3008 	ldr	r3, [fp, #-8]
  1173a0:	e3a02001 	mov	r2, #1
  1173a4:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  1173a8:	e51b3008 	ldr	r3, [fp, #-8]
  1173ac:	e3a02000 	mov	r2, #0
  1173b0:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  1173b4:	e55b300d 	ldrb	r3, [fp, #-13]
  1173b8:	e1a00003 	mov	r0, r3
  1173bc:	ebfffdc7 	bl	116ae0 <dns_send>
  1173c0:	e1a03000 	mov	r3, r0
  1173c4:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  1173c8:	ea00005d 	b	117544 <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  1173cc:	e51b3008 	ldr	r3, [fp, #-8]
  1173d0:	e5d3300c 	ldrb	r3, [r3, #12]
  1173d4:	e2433001 	sub	r3, r3, #1
  1173d8:	e6ef2073 	uxtb	r2, r3
  1173dc:	e51b3008 	ldr	r3, [fp, #-8]
  1173e0:	e5c3200c 	strb	r2, [r3, #12]
  1173e4:	e51b3008 	ldr	r3, [fp, #-8]
  1173e8:	e5d3300c 	ldrb	r3, [r3, #12]
  1173ec:	e3530000 	cmp	r3, #0
  1173f0:	1a000050 	bne	117538 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  1173f4:	e51b3008 	ldr	r3, [fp, #-8]
  1173f8:	e5d3300d 	ldrb	r3, [r3, #13]
  1173fc:	e2833001 	add	r3, r3, #1
  117400:	e6ef2073 	uxtb	r2, r3
  117404:	e51b3008 	ldr	r3, [fp, #-8]
  117408:	e5c3200d 	strb	r2, [r3, #13]
  11740c:	e51b3008 	ldr	r3, [fp, #-8]
  117410:	e5d3300d 	ldrb	r3, [r3, #13]
  117414:	e3530004 	cmp	r3, #4
  117418:	1a000021 	bne	1174a4 <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  11741c:	e51b3008 	ldr	r3, [fp, #-8]
  117420:	e5d3300b 	ldrb	r3, [r3, #11]
  117424:	e2833001 	add	r3, r3, #1
  117428:	e3530001 	cmp	r3, #1
  11742c:	ca000014 	bgt	117484 <dns_check_entry+0x190>
  117430:	e51b3008 	ldr	r3, [fp, #-8]
  117434:	e5d3300b 	ldrb	r3, [r3, #11]
  117438:	e2832001 	add	r2, r3, #1
  11743c:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  117440:	e3403014 	movt	r3, #20
  117444:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117448:	e3530000 	cmp	r3, #0
  11744c:	0a00000c 	beq	117484 <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  117450:	e51b3008 	ldr	r3, [fp, #-8]
  117454:	e5d3300b 	ldrb	r3, [r3, #11]
  117458:	e2833001 	add	r3, r3, #1
  11745c:	e6ef2073 	uxtb	r2, r3
  117460:	e51b3008 	ldr	r3, [fp, #-8]
  117464:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  117468:	e51b3008 	ldr	r3, [fp, #-8]
  11746c:	e3a02001 	mov	r2, #1
  117470:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  117474:	e51b3008 	ldr	r3, [fp, #-8]
  117478:	e3a02000 	mov	r2, #0
  11747c:	e5c3200d 	strb	r2, [r3, #13]
  117480:	ea00000b 	b	1174b4 <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  117484:	e55b300d 	ldrb	r3, [fp, #-13]
  117488:	e3a01000 	mov	r1, #0
  11748c:	e1a00003 	mov	r0, r3
  117490:	ebfffec5 	bl	116fac <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  117494:	e51b3008 	ldr	r3, [fp, #-8]
  117498:	e3a02000 	mov	r2, #0
  11749c:	e5c3200a 	strb	r2, [r3, #10]
            break;
  1174a0:	ea000027 	b	117544 <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  1174a4:	e51b3008 	ldr	r3, [fp, #-8]
  1174a8:	e5d3200d 	ldrb	r2, [r3, #13]
  1174ac:	e51b3008 	ldr	r3, [fp, #-8]
  1174b0:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  1174b4:	e55b300d 	ldrb	r3, [fp, #-13]
  1174b8:	e1a00003 	mov	r0, r3
  1174bc:	ebfffd87 	bl	116ae0 <dns_send>
  1174c0:	e1a03000 	mov	r3, r0
  1174c4:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  1174c8:	ea00001a 	b	117538 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  1174cc:	e51b3008 	ldr	r3, [fp, #-8]
  1174d0:	e5933000 	ldr	r3, [r3]
  1174d4:	e3530000 	cmp	r3, #0
  1174d8:	0a000008 	beq	117500 <dns_check_entry+0x20c>
  1174dc:	e51b3008 	ldr	r3, [fp, #-8]
  1174e0:	e5933000 	ldr	r3, [r3]
  1174e4:	e2432001 	sub	r2, r3, #1
  1174e8:	e51b3008 	ldr	r3, [fp, #-8]
  1174ec:	e5832000 	str	r2, [r3]
  1174f0:	e51b3008 	ldr	r3, [fp, #-8]
  1174f4:	e5933000 	ldr	r3, [r3]
  1174f8:	e3530000 	cmp	r3, #0
  1174fc:	1a00000f 	bne	117540 <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  117500:	e51b3008 	ldr	r3, [fp, #-8]
  117504:	e3a02000 	mov	r2, #0
  117508:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  11750c:	ea00000b 	b	117540 <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  117510:	e3060e0c 	movw	r0, #28172	; 0x6e0c
  117514:	e3400014 	movt	r0, #20
  117518:	ebffaefd 	bl	103114 <rt_kprintf>
  11751c:	e3001444 	movw	r1, #1092	; 0x444
  117520:	e3060dc4 	movw	r0, #28100	; 0x6dc4
  117524:	e3400014 	movt	r0, #20
  117528:	ebffce19 	bl	10ad94 <sys_arch_assert>
      break;
  11752c:	ea000004 	b	117544 <dns_check_entry+0x250>
      break;
  117530:	e320f000 	nop	{0}
  117534:	ea000002 	b	117544 <dns_check_entry+0x250>
      break;
  117538:	e320f000 	nop	{0}
  11753c:	ea000000 	b	117544 <dns_check_entry+0x250>
      break;
  117540:	e320f000 	nop	{0}
  }
}
  117544:	e320f000 	nop	{0}
  117548:	e24bd004 	sub	sp, fp, #4
  11754c:	e8bd8800 	pop	{fp, pc}

00117550 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  117550:	e92d4800 	push	{fp, lr}
  117554:	e28db004 	add	fp, sp, #4
  117558:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  11755c:	e3a03000 	mov	r3, #0
  117560:	e54b3005 	strb	r3, [fp, #-5]
  117564:	ea000005 	b	117580 <dns_check_entries+0x30>
    dns_check_entry(i);
  117568:	e55b3005 	ldrb	r3, [fp, #-5]
  11756c:	e1a00003 	mov	r0, r3
  117570:	ebffff5f 	bl	1172f4 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117574:	e55b3005 	ldrb	r3, [fp, #-5]
  117578:	e2833001 	add	r3, r3, #1
  11757c:	e54b3005 	strb	r3, [fp, #-5]
  117580:	e55b3005 	ldrb	r3, [fp, #-5]
  117584:	e3530003 	cmp	r3, #3
  117588:	9afffff6 	bls	117568 <dns_check_entries+0x18>
  }
}
  11758c:	e320f000 	nop	{0}
  117590:	e24bd004 	sub	sp, fp, #4
  117594:	e8bd8800 	pop	{fp, pc}

00117598 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  117598:	e92d4800 	push	{fp, lr}
  11759c:	e28db004 	add	fp, sp, #4
  1175a0:	e24dd010 	sub	sp, sp, #16
  1175a4:	e1a03000 	mov	r3, r0
  1175a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1175ac:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  1175b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1175b4:	e3a02e11 	mov	r2, #272	; 0x110
  1175b8:	e0020392 	mul	r2, r2, r3
  1175bc:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1175c0:	e3403014 	movt	r3, #20
  1175c4:	e0823003 	add	r3, r2, r3
  1175c8:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  1175cc:	e51b3008 	ldr	r3, [fp, #-8]
  1175d0:	e3a02003 	mov	r2, #3
  1175d4:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  1175d8:	e51b3008 	ldr	r3, [fp, #-8]
  1175dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1175e0:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  1175e4:	e51b3008 	ldr	r3, [fp, #-8]
  1175e8:	e5932000 	ldr	r2, [r3]
  1175ec:	e3a03dea 	mov	r3, #14976	; 0x3a80
  1175f0:	e3403009 	movt	r3, #9
  1175f4:	e1520003 	cmp	r2, r3
  1175f8:	9a000003 	bls	11760c <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  1175fc:	e51b2008 	ldr	r2, [fp, #-8]
  117600:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117604:	e3403009 	movt	r3, #9
  117608:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  11760c:	e51b3008 	ldr	r3, [fp, #-8]
  117610:	e2832004 	add	r2, r3, #4
  117614:	e55b300d 	ldrb	r3, [fp, #-13]
  117618:	e1a01002 	mov	r1, r2
  11761c:	e1a00003 	mov	r0, r3
  117620:	ebfffe61 	bl	116fac <dns_call_found>

  if (entry->ttl == 0) {
  117624:	e51b3008 	ldr	r3, [fp, #-8]
  117628:	e5933000 	ldr	r3, [r3]
  11762c:	e3530000 	cmp	r3, #0
  117630:	1a000006 	bne	117650 <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  117634:	e51b3008 	ldr	r3, [fp, #-8]
  117638:	e5d3300a 	ldrb	r3, [r3, #10]
  11763c:	e3530003 	cmp	r3, #3
  117640:	1a000002 	bne	117650 <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  117644:	e51b3008 	ldr	r3, [fp, #-8]
  117648:	e3a02000 	mov	r2, #0
  11764c:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  117650:	e320f000 	nop	{0}
  117654:	e24bd004 	sub	sp, fp, #4
  117658:	e8bd8800 	pop	{fp, pc}

0011765c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  11765c:	e92d4810 	push	{r4, fp, lr}
  117660:	e28db008 	add	fp, sp, #8
  117664:	e24dd044 	sub	sp, sp, #68	; 0x44
  117668:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  11766c:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  117670:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  117674:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  117678:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  11767c:	e1d330b8 	ldrh	r3, [r3, #8]
  117680:	e353000f 	cmp	r3, #15
  117684:	9a0000c8 	bls	1179ac <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  117688:	e24b1028 	sub	r1, fp, #40	; 0x28
  11768c:	e3a03000 	mov	r3, #0
  117690:	e3a0200c 	mov	r2, #12
  117694:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117698:	eb000f44 	bl	11b3b0 <pbuf_copy_partial>
  11769c:	e1a03000 	mov	r3, r0
  1176a0:	e353000c 	cmp	r3, #12
  1176a4:	1a0000c2 	bne	1179b4 <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  1176a8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1176ac:	e1a00003 	mov	r0, r3
  1176b0:	ebfffafc 	bl	1162a8 <lwip_htons>
  1176b4:	e1a03000 	mov	r3, r0
  1176b8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1176bc:	e3a03000 	mov	r3, #0
  1176c0:	e54b300d 	strb	r3, [fp, #-13]
  1176c4:	ea0000b4 	b	11799c <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  1176c8:	e55b300d 	ldrb	r3, [fp, #-13]
  1176cc:	e3a02e11 	mov	r2, #272	; 0x110
  1176d0:	e0020392 	mul	r2, r2, r3
  1176d4:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1176d8:	e3403014 	movt	r3, #20
  1176dc:	e0823003 	add	r3, r2, r3
  1176e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  1176e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1176e8:	e5d3300a 	ldrb	r3, [r3, #10]
  1176ec:	e3530002 	cmp	r3, #2
  1176f0:	1a0000a6 	bne	117990 <dns_recv+0x334>
          (entry->txid == txid)) {
  1176f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1176f8:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  1176fc:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  117700:	e1520003 	cmp	r2, r3
  117704:	1a0000a1 	bne	117990 <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  117708:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  11770c:	e1a00003 	mov	r0, r3
  117710:	ebfffae4 	bl	1162a8 <lwip_htons>
  117714:	e1a03000 	mov	r3, r0
  117718:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  11771c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117720:	e1a00003 	mov	r0, r3
  117724:	ebfffadf 	bl	1162a8 <lwip_htons>
  117728:	e1a03000 	mov	r3, r0
  11772c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  117730:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  117734:	e6af3073 	sxtb	r3, r3
  117738:	e3530000 	cmp	r3, #0
  11773c:	aa00009e 	bge	1179bc <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  117740:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  117744:	e3530001 	cmp	r3, #1
  117748:	1a00009d 	bne	1179c4 <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  11774c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  117750:	e5932000 	ldr	r2, [r3]
  117754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117758:	e5d3300b 	ldrb	r3, [r3, #11]
  11775c:	e1a01003 	mov	r1, r3
  117760:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  117764:	e3403014 	movt	r3, #20
  117768:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  11776c:	e1520003 	cmp	r2, r3
  117770:	1a000095 	bne	1179cc <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  117774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117778:	e2833010 	add	r3, r3, #16
  11777c:	e3a0200c 	mov	r2, #12
  117780:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  117784:	e1a00003 	mov	r0, r3
  117788:	ebfffc4a 	bl	1168b8 <dns_compare_name>
  11778c:	e1a03000 	mov	r3, r0
  117790:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117794:	e15b31b0 	ldrh	r3, [fp, #-16]
  117798:	e30f2fff 	movw	r2, #65535	; 0xffff
  11779c:	e1530002 	cmp	r3, r2
  1177a0:	0a00008b 	beq	1179d4 <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  1177a4:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177a8:	e24b1038 	sub	r1, fp, #56	; 0x38
  1177ac:	e3a02004 	mov	r2, #4
  1177b0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1177b4:	eb000efd 	bl	11b3b0 <pbuf_copy_partial>
  1177b8:	e1a03000 	mov	r3, r0
  1177bc:	e3530004 	cmp	r3, #4
  1177c0:	1a000085 	bne	1179dc <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  1177c4:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  1177c8:	e3530c01 	cmp	r3, #256	; 0x100
  1177cc:	1a000078 	bne	1179b4 <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  1177d0:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  1177d4:	e3530c01 	cmp	r3, #256	; 0x100
  1177d8:	1a000075 	bne	1179b4 <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  1177dc:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177e0:	e2833004 	add	r3, r3, #4
  1177e4:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  1177e8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1177ec:	e203300f 	and	r3, r3, #15
  1177f0:	e3530000 	cmp	r3, #0
  1177f4:	1a000055 	bne	117950 <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  1177f8:	ea00004c 	b	117930 <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  1177fc:	e15b31b0 	ldrh	r3, [fp, #-16]
  117800:	e1a01003 	mov	r1, r3
  117804:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117808:	ebfffc79 	bl	1169f4 <dns_skip_name>
  11780c:	e1a03000 	mov	r3, r0
  117810:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117814:	e15b31b0 	ldrh	r3, [fp, #-16]
  117818:	e30f2fff 	movw	r2, #65535	; 0xffff
  11781c:	e1530002 	cmp	r3, r2
  117820:	0a00006f 	beq	1179e4 <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  117824:	e15b31b0 	ldrh	r3, [fp, #-16]
  117828:	e24b1034 	sub	r1, fp, #52	; 0x34
  11782c:	e3a0200a 	mov	r2, #10
  117830:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117834:	eb000edd 	bl	11b3b0 <pbuf_copy_partial>
  117838:	e1a03000 	mov	r3, r0
  11783c:	e353000a 	cmp	r3, #10
  117840:	1a000069 	bne	1179ec <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  117844:	e15b31b0 	ldrh	r3, [fp, #-16]
  117848:	e283300a 	add	r3, r3, #10
  11784c:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  117850:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  117854:	e3530c01 	cmp	r3, #256	; 0x100
  117858:	1a000021 	bne	1178e4 <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  11785c:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  117860:	e3530c01 	cmp	r3, #256	; 0x100
  117864:	1a00001e 	bne	1178e4 <dns_recv+0x288>
  117868:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  11786c:	e3530b01 	cmp	r3, #1024	; 0x400
  117870:	1a00001b 	bne	1178e4 <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  117874:	e15b31b0 	ldrh	r3, [fp, #-16]
  117878:	e24b103c 	sub	r1, fp, #60	; 0x3c
  11787c:	e3a02004 	mov	r2, #4
  117880:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117884:	eb000ec9 	bl	11b3b0 <pbuf_copy_partial>
  117888:	e1a03000 	mov	r3, r0
  11788c:	e3530004 	cmp	r3, #4
  117890:	1a000057 	bne	1179f4 <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117894:	e55b100d 	ldrb	r1, [fp, #-13]
  117898:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  11789c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1178a0:	e3403014 	movt	r3, #20
  1178a4:	e3a00e11 	mov	r0, #272	; 0x110
  1178a8:	e0010190 	mul	r1, r0, r1
  1178ac:	e0833001 	add	r3, r3, r1
  1178b0:	e2833004 	add	r3, r3, #4
  1178b4:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  1178b8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1178bc:	eb000cb0 	bl	11ab84 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  1178c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1178c4:	e1a00003 	mov	r0, r3
  1178c8:	ebfffa82 	bl	1162d8 <lwip_htonl>
  1178cc:	e1a02000 	mov	r2, r0
  1178d0:	e55b300d 	ldrb	r3, [fp, #-13]
  1178d4:	e1a01002 	mov	r1, r2
  1178d8:	e1a00003 	mov	r0, r3
  1178dc:	ebffff2d 	bl	117598 <dns_correct_response>
  1178e0:	ea000049 	b	117a0c <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  1178e4:	e15b41b0 	ldrh	r4, [fp, #-16]
  1178e8:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  1178ec:	e1a00003 	mov	r0, r3
  1178f0:	ebfffa6c 	bl	1162a8 <lwip_htons>
  1178f4:	e1a03000 	mov	r3, r0
  1178f8:	e0843003 	add	r3, r4, r3
  1178fc:	e3530801 	cmp	r3, #65536	; 0x10000
  117900:	aa00003d 	bge	1179fc <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117904:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117908:	e1a00003 	mov	r0, r3
  11790c:	ebfffa65 	bl	1162a8 <lwip_htons>
  117910:	e1a03000 	mov	r3, r0
  117914:	e1a02003 	mov	r2, r3
  117918:	e15b31b0 	ldrh	r3, [fp, #-16]
  11791c:	e0823003 	add	r3, r2, r3
  117920:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  117924:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117928:	e2433001 	sub	r3, r3, #1
  11792c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117930:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117934:	e3530000 	cmp	r3, #0
  117938:	0a000004 	beq	117950 <dns_recv+0x2f4>
  11793c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117940:	e1d330b8 	ldrh	r3, [r3, #8]
  117944:	e15b21b0 	ldrh	r2, [fp, #-16]
  117948:	e1520003 	cmp	r2, r3
  11794c:	3affffaa 	bcc	1177fc <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  117950:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117954:	eb000c8a 	bl	11ab84 <pbuf_free>
        dns_call_found(i, NULL);
  117958:	e55b300d 	ldrb	r3, [fp, #-13]
  11795c:	e3a01000 	mov	r1, #0
  117960:	e1a00003 	mov	r0, r3
  117964:	ebfffd90 	bl	116fac <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  117968:	e55b200d 	ldrb	r2, [fp, #-13]
  11796c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117970:	e3403014 	movt	r3, #20
  117974:	e3a01e11 	mov	r1, #272	; 0x110
  117978:	e0020291 	mul	r2, r1, r2
  11797c:	e0833002 	add	r3, r3, r2
  117980:	e283300a 	add	r3, r3, #10
  117984:	e3a02000 	mov	r2, #0
  117988:	e5c32000 	strb	r2, [r3]
        return;
  11798c:	ea00001e 	b	117a0c <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117990:	e55b300d 	ldrb	r3, [fp, #-13]
  117994:	e2833001 	add	r3, r3, #1
  117998:	e54b300d 	strb	r3, [fp, #-13]
  11799c:	e55b300d 	ldrb	r3, [fp, #-13]
  1179a0:	e3530003 	cmp	r3, #3
  1179a4:	9affff47 	bls	1176c8 <dns_recv+0x6c>
      }
    }
  }

memerr:
  1179a8:	ea000001 	b	1179b4 <dns_recv+0x358>
    goto memerr;
  1179ac:	e320f000 	nop	{0}
  1179b0:	ea000012 	b	117a00 <dns_recv+0x3a4>
memerr:
  1179b4:	e320f000 	nop	{0}
  1179b8:	ea000010 	b	117a00 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  1179bc:	e320f000 	nop	{0}
  1179c0:	ea00000e 	b	117a00 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  1179c4:	e320f000 	nop	{0}
  1179c8:	ea00000c 	b	117a00 <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  1179cc:	e320f000 	nop	{0}
  1179d0:	ea00000a 	b	117a00 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  1179d4:	e320f000 	nop	{0}
  1179d8:	ea000008 	b	117a00 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  1179dc:	e320f000 	nop	{0}
  1179e0:	ea000006 	b	117a00 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  1179e4:	e320f000 	nop	{0}
  1179e8:	ea000004 	b	117a00 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  1179ec:	e320f000 	nop	{0}
  1179f0:	ea000002 	b	117a00 <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  1179f4:	e320f000 	nop	{0}
  1179f8:	ea000000 	b	117a00 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  1179fc:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117a00:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117a04:	eb000c5e 	bl	11ab84 <pbuf_free>
  return;
  117a08:	e320f000 	nop	{0}
}
  117a0c:	e24bd008 	sub	sp, fp, #8
  117a10:	e8bd8810 	pop	{r4, fp, pc}

00117a14 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117a14:	e92d4800 	push	{fp, lr}
  117a18:	e28db004 	add	fp, sp, #4
  117a1c:	e24dd028 	sub	sp, sp, #40	; 0x28
  117a20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117a24:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  117a28:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  117a2c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  117a30:	e3a03000 	mov	r3, #0
  117a34:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117a38:	e3a03000 	mov	r3, #0
  117a3c:	e54b3005 	strb	r3, [fp, #-5]
  117a40:	ea000048 	b	117b68 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117a44:	e55b2005 	ldrb	r2, [fp, #-5]
  117a48:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117a4c:	e3403014 	movt	r3, #20
  117a50:	e3a01e11 	mov	r1, #272	; 0x110
  117a54:	e0020291 	mul	r2, r1, r2
  117a58:	e0833002 	add	r3, r3, r2
  117a5c:	e283300a 	add	r3, r3, #10
  117a60:	e5d33000 	ldrb	r3, [r3]
  117a64:	e3530002 	cmp	r3, #2
  117a68:	1a00003b 	bne	117b5c <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117a6c:	e55b3005 	ldrb	r3, [fp, #-5]
  117a70:	e3a02e11 	mov	r2, #272	; 0x110
  117a74:	e0030392 	mul	r3, r2, r3
  117a78:	e2832010 	add	r2, r3, #16
  117a7c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117a80:	e3403014 	movt	r3, #20
  117a84:	e0823003 	add	r3, r2, r3
  117a88:	e3a02c01 	mov	r2, #256	; 0x100
  117a8c:	e1a01003 	mov	r1, r3
  117a90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117a94:	ebfffa87 	bl	1164b8 <lwip_strnicmp>
  117a98:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117a9c:	e3530000 	cmp	r3, #0
  117aa0:	1a00002d 	bne	117b5c <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117aa4:	e3a03000 	mov	r3, #0
  117aa8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117aac:	ea000027 	b	117b50 <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117ab0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117ab4:	e30e3080 	movw	r3, #57472	; 0xe080
  117ab8:	e3403014 	movt	r3, #20
  117abc:	e3a0100c 	mov	r1, #12
  117ac0:	e0020291 	mul	r2, r1, r2
  117ac4:	e0833002 	add	r3, r3, r2
  117ac8:	e5933000 	ldr	r3, [r3]
  117acc:	e3530000 	cmp	r3, #0
  117ad0:	1a00001b 	bne	117b44 <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117ad4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117ad8:	e30e3080 	movw	r3, #57472	; 0xe080
  117adc:	e3403014 	movt	r3, #20
  117ae0:	e3a0100c 	mov	r1, #12
  117ae4:	e0020291 	mul	r2, r1, r2
  117ae8:	e0833002 	add	r3, r3, r2
  117aec:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117af0:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117af4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117af8:	e30e3080 	movw	r3, #57472	; 0xe080
  117afc:	e3403014 	movt	r3, #20
  117b00:	e3a0100c 	mov	r1, #12
  117b04:	e0020291 	mul	r2, r1, r2
  117b08:	e0833002 	add	r3, r3, r2
  117b0c:	e2833004 	add	r3, r3, #4
  117b10:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117b14:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117b18:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117b1c:	e30e3080 	movw	r3, #57472	; 0xe080
  117b20:	e3403014 	movt	r3, #20
  117b24:	e3a0100c 	mov	r1, #12
  117b28:	e0020291 	mul	r2, r1, r2
  117b2c:	e0833002 	add	r3, r3, r2
  117b30:	e2833008 	add	r3, r3, #8
  117b34:	e55b2005 	ldrb	r2, [fp, #-5]
  117b38:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117b3c:	e3e03004 	mvn	r3, #4
  117b40:	ea0000b3 	b	117e14 <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117b44:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117b48:	e2833001 	add	r3, r3, #1
  117b4c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117b50:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117b54:	e3530003 	cmp	r3, #3
  117b58:	9affffd4 	bls	117ab0 <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117b5c:	e55b3005 	ldrb	r3, [fp, #-5]
  117b60:	e2833001 	add	r3, r3, #1
  117b64:	e54b3005 	strb	r3, [fp, #-5]
  117b68:	e55b3005 	ldrb	r3, [fp, #-5]
  117b6c:	e3530003 	cmp	r3, #3
  117b70:	9affffb3 	bls	117a44 <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117b74:	e3a03000 	mov	r3, #0
  117b78:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117b7c:	e3a03004 	mov	r3, #4
  117b80:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117b84:	e3a03000 	mov	r3, #0
  117b88:	e54b3005 	strb	r3, [fp, #-5]
  117b8c:	ea000020 	b	117c14 <dns_enqueue+0x200>
    entry = &dns_table[i];
  117b90:	e55b3005 	ldrb	r3, [fp, #-5]
  117b94:	e3a02e11 	mov	r2, #272	; 0x110
  117b98:	e0020392 	mul	r2, r2, r3
  117b9c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117ba0:	e3403014 	movt	r3, #20
  117ba4:	e0823003 	add	r3, r2, r3
  117ba8:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117bac:	e51b300c 	ldr	r3, [fp, #-12]
  117bb0:	e5d3300a 	ldrb	r3, [r3, #10]
  117bb4:	e3530000 	cmp	r3, #0
  117bb8:	0a000019 	beq	117c24 <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117bbc:	e51b300c 	ldr	r3, [fp, #-12]
  117bc0:	e5d3300a 	ldrb	r3, [r3, #10]
  117bc4:	e3530003 	cmp	r3, #3
  117bc8:	1a00000e 	bne	117c08 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117bcc:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117bd0:	e3403014 	movt	r3, #20
  117bd4:	e5d32000 	ldrb	r2, [r3]
  117bd8:	e51b300c 	ldr	r3, [fp, #-12]
  117bdc:	e5d3300e 	ldrb	r3, [r3, #14]
  117be0:	e0423003 	sub	r3, r2, r3
  117be4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117be8:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117bec:	e55b3006 	ldrb	r3, [fp, #-6]
  117bf0:	e1520003 	cmp	r2, r3
  117bf4:	9a000003 	bls	117c08 <dns_enqueue+0x1f4>
        lseq = age;
  117bf8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117bfc:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117c00:	e55b3005 	ldrb	r3, [fp, #-5]
  117c04:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117c08:	e55b3005 	ldrb	r3, [fp, #-5]
  117c0c:	e2833001 	add	r3, r3, #1
  117c10:	e54b3005 	strb	r3, [fp, #-5]
  117c14:	e55b3005 	ldrb	r3, [fp, #-5]
  117c18:	e3530003 	cmp	r3, #3
  117c1c:	9affffdb 	bls	117b90 <dns_enqueue+0x17c>
  117c20:	ea000000 	b	117c28 <dns_enqueue+0x214>
      break;
  117c24:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117c28:	e55b3005 	ldrb	r3, [fp, #-5]
  117c2c:	e3530004 	cmp	r3, #4
  117c30:	1a000017 	bne	117c94 <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117c34:	e55b3007 	ldrb	r3, [fp, #-7]
  117c38:	e3530003 	cmp	r3, #3
  117c3c:	8a000009 	bhi	117c68 <dns_enqueue+0x254>
  117c40:	e55b2007 	ldrb	r2, [fp, #-7]
  117c44:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117c48:	e3403014 	movt	r3, #20
  117c4c:	e3a01e11 	mov	r1, #272	; 0x110
  117c50:	e0020291 	mul	r2, r1, r2
  117c54:	e0833002 	add	r3, r3, r2
  117c58:	e283300a 	add	r3, r3, #10
  117c5c:	e5d33000 	ldrb	r3, [r3]
  117c60:	e3530003 	cmp	r3, #3
  117c64:	0a000001 	beq	117c70 <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117c68:	e3e03000 	mvn	r3, #0
  117c6c:	ea000068 	b	117e14 <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117c70:	e55b3007 	ldrb	r3, [fp, #-7]
  117c74:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117c78:	e55b3005 	ldrb	r3, [fp, #-5]
  117c7c:	e3a02e11 	mov	r2, #272	; 0x110
  117c80:	e0020392 	mul	r2, r2, r3
  117c84:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117c88:	e3403014 	movt	r3, #20
  117c8c:	e0823003 	add	r3, r2, r3
  117c90:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117c94:	e3a03000 	mov	r3, #0
  117c98:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117c9c:	e3a03000 	mov	r3, #0
  117ca0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117ca4:	ea000013 	b	117cf8 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117ca8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117cac:	e30e3080 	movw	r3, #57472	; 0xe080
  117cb0:	e3403014 	movt	r3, #20
  117cb4:	e3a0100c 	mov	r1, #12
  117cb8:	e0020291 	mul	r2, r1, r2
  117cbc:	e0833002 	add	r3, r3, r2
  117cc0:	e5933000 	ldr	r3, [r3]
  117cc4:	e3530000 	cmp	r3, #0
  117cc8:	1a000007 	bne	117cec <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  117ccc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117cd0:	e3a0200c 	mov	r2, #12
  117cd4:	e0020392 	mul	r2, r2, r3
  117cd8:	e30e3080 	movw	r3, #57472	; 0xe080
  117cdc:	e3403014 	movt	r3, #20
  117ce0:	e0823003 	add	r3, r2, r3
  117ce4:	e50b3010 	str	r3, [fp, #-16]
      break;
  117ce8:	ea000005 	b	117d04 <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117cec:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117cf0:	e2833001 	add	r3, r3, #1
  117cf4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117cf8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117cfc:	e3530003 	cmp	r3, #3
  117d00:	9affffe8 	bls	117ca8 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  117d04:	e51b3010 	ldr	r3, [fp, #-16]
  117d08:	e3530000 	cmp	r3, #0
  117d0c:	1a000001 	bne	117d18 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  117d10:	e3e03000 	mvn	r3, #0
  117d14:	ea00003e 	b	117e14 <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  117d18:	e51b3010 	ldr	r3, [fp, #-16]
  117d1c:	e55b2005 	ldrb	r2, [fp, #-5]
  117d20:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  117d24:	e51b300c 	ldr	r3, [fp, #-12]
  117d28:	e3a02001 	mov	r2, #1
  117d2c:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  117d30:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117d34:	e3403014 	movt	r3, #20
  117d38:	e5d32000 	ldrb	r2, [r3]
  117d3c:	e51b300c 	ldr	r3, [fp, #-12]
  117d40:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  117d44:	e51b3010 	ldr	r3, [fp, #-16]
  117d48:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117d4c:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  117d50:	e51b3010 	ldr	r3, [fp, #-16]
  117d54:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117d58:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  117d5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117d60:	e35300ff 	cmp	r3, #255	; 0xff
  117d64:	31a03003 	movcc	r3, r3
  117d68:	23a030ff 	movcs	r3, #255	; 0xff
  117d6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  117d70:	e51b300c 	ldr	r3, [fp, #-12]
  117d74:	e2833010 	add	r3, r3, #16
  117d78:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117d7c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  117d80:	e1a00003 	mov	r0, r3
  117d84:	eb00a33e 	bl	140a84 <memcpy>
  entry->name[namelen] = 0;
  117d88:	e51b200c 	ldr	r2, [fp, #-12]
  117d8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117d90:	e0823003 	add	r3, r2, r3
  117d94:	e2833010 	add	r3, r3, #16
  117d98:	e3a02000 	mov	r2, #0
  117d9c:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  117da0:	ebfffc32 	bl	116e70 <dns_alloc_pcb>
  117da4:	e1a03000 	mov	r3, r0
  117da8:	e1a02003 	mov	r2, r3
  117dac:	e51b300c 	ldr	r3, [fp, #-12]
  117db0:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  117db4:	e51b300c 	ldr	r3, [fp, #-12]
  117db8:	e5d3300f 	ldrb	r3, [r3, #15]
  117dbc:	e3530003 	cmp	r3, #3
  117dc0:	9a000007 	bls	117de4 <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  117dc4:	e51b300c 	ldr	r3, [fp, #-12]
  117dc8:	e3a02000 	mov	r2, #0
  117dcc:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  117dd0:	e51b3010 	ldr	r3, [fp, #-16]
  117dd4:	e3a02000 	mov	r2, #0
  117dd8:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  117ddc:	e3e03000 	mvn	r3, #0
  117de0:	ea00000b 	b	117e14 <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  117de4:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117de8:	e3403014 	movt	r3, #20
  117dec:	e5d33000 	ldrb	r3, [r3]
  117df0:	e2833001 	add	r3, r3, #1
  117df4:	e6ef2073 	uxtb	r2, r3
  117df8:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117dfc:	e3403014 	movt	r3, #20
  117e00:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  117e04:	e55b3005 	ldrb	r3, [fp, #-5]
  117e08:	e1a00003 	mov	r0, r3
  117e0c:	ebfffd38 	bl	1172f4 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  117e10:	e3e03004 	mvn	r3, #4
}
  117e14:	e1a00003 	mov	r0, r3
  117e18:	e24bd004 	sub	sp, fp, #4
  117e1c:	e8bd8800 	pop	{fp, pc}

00117e20 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  117e20:	e92d4800 	push	{fp, lr}
  117e24:	e28db004 	add	fp, sp, #4
  117e28:	e24dd018 	sub	sp, sp, #24
  117e2c:	e50b0008 	str	r0, [fp, #-8]
  117e30:	e50b100c 	str	r1, [fp, #-12]
  117e34:	e50b2010 	str	r2, [fp, #-16]
  117e38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  117e3c:	e3a03000 	mov	r3, #0
  117e40:	e58d3000 	str	r3, [sp]
  117e44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117e48:	e51b2010 	ldr	r2, [fp, #-16]
  117e4c:	e51b100c 	ldr	r1, [fp, #-12]
  117e50:	e51b0008 	ldr	r0, [fp, #-8]
  117e54:	eb000003 	bl	117e68 <dns_gethostbyname_addrtype>
  117e58:	e1a03000 	mov	r3, r0
}
  117e5c:	e1a00003 	mov	r0, r3
  117e60:	e24bd004 	sub	sp, fp, #4
  117e64:	e8bd8800 	pop	{fp, pc}

00117e68 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  117e68:	e92d4800 	push	{fp, lr}
  117e6c:	e28db004 	add	fp, sp, #4
  117e70:	e24dd018 	sub	sp, sp, #24
  117e74:	e50b0010 	str	r0, [fp, #-16]
  117e78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  117e7c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  117e80:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  117e84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117e88:	e3530000 	cmp	r3, #0
  117e8c:	0a000006 	beq	117eac <dns_gethostbyname_addrtype+0x44>
  117e90:	e51b3010 	ldr	r3, [fp, #-16]
  117e94:	e3530000 	cmp	r3, #0
  117e98:	0a000003 	beq	117eac <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  117e9c:	e51b3010 	ldr	r3, [fp, #-16]
  117ea0:	e5d33000 	ldrb	r3, [r3]
  117ea4:	e3530000 	cmp	r3, #0
  117ea8:	1a000001 	bne	117eb4 <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  117eac:	e3e0300f 	mvn	r3, #15
  117eb0:	ea000024 	b	117f48 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  117eb4:	e51b0010 	ldr	r0, [fp, #-16]
  117eb8:	eb00a4ba 	bl	1411a8 <strlen>
  117ebc:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  117ec0:	e51b3008 	ldr	r3, [fp, #-8]
  117ec4:	e35300ff 	cmp	r3, #255	; 0xff
  117ec8:	9a000001 	bls	117ed4 <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  117ecc:	e3e0300f 	mvn	r3, #15
  117ed0:	ea00001c 	b	117f48 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  117ed4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117ed8:	e51b0010 	ldr	r0, [fp, #-16]
  117edc:	eb006936 	bl	1323bc <ip4addr_aton>
  117ee0:	e1a03000 	mov	r3, r0
  117ee4:	e3530000 	cmp	r3, #0
  117ee8:	0a000001 	beq	117ef4 <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  117eec:	e3a03000 	mov	r3, #0
  117ef0:	ea000014 	b	117f48 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  117ef4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117ef8:	e51b0010 	ldr	r0, [fp, #-16]
  117efc:	ebfffa34 	bl	1167d4 <dns_lookup>
  117f00:	e1a03000 	mov	r3, r0
  117f04:	e3530000 	cmp	r3, #0
  117f08:	1a000001 	bne	117f14 <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  117f0c:	e3a03000 	mov	r3, #0
  117f10:	ea00000c 	b	117f48 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  117f14:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  117f18:	e3403014 	movt	r3, #20
  117f1c:	e5933000 	ldr	r3, [r3]
  117f20:	e3530000 	cmp	r3, #0
  117f24:	1a000001 	bne	117f30 <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  117f28:	e3e03005 	mvn	r3, #5
  117f2c:	ea000005 	b	117f48 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  117f30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  117f34:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117f38:	e51b1008 	ldr	r1, [fp, #-8]
  117f3c:	e51b0010 	ldr	r0, [fp, #-16]
  117f40:	ebfffeb3 	bl	117a14 <dns_enqueue>
  117f44:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  117f48:	e1a00003 	mov	r0, r3
  117f4c:	e24bd004 	sub	sp, fp, #4
  117f50:	e8bd8800 	pop	{fp, pc}

00117f54 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  117f54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  117f58:	e28db000 	add	fp, sp, #0
  117f5c:	e24dd024 	sub	sp, sp, #36	; 0x24
  117f60:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117f64:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  117f68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  117f6c:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  117f70:	e3a03000 	mov	r3, #0
  117f74:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  117f78:	e3a03000 	mov	r3, #0
  117f7c:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  117f80:	e51b3008 	ldr	r3, [fp, #-8]
  117f84:	e2033001 	and	r3, r3, #1
  117f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  117f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117f90:	e3530000 	cmp	r3, #0
  117f94:	0a00000c 	beq	117fcc <lwip_standard_chksum+0x78>
  117f98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f9c:	e3530000 	cmp	r3, #0
  117fa0:	da000009 	ble	117fcc <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  117fa4:	e51b2008 	ldr	r2, [fp, #-8]
  117fa8:	e2823001 	add	r3, r2, #1
  117fac:	e50b3008 	str	r3, [fp, #-8]
  117fb0:	e24b3016 	sub	r3, fp, #22
  117fb4:	e2833001 	add	r3, r3, #1
  117fb8:	e5d22000 	ldrb	r2, [r2]
  117fbc:	e5c32000 	strb	r2, [r3]
    len--;
  117fc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117fc4:	e2433001 	sub	r3, r3, #1
  117fc8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  117fcc:	e51b3008 	ldr	r3, [fp, #-8]
  117fd0:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  117fd4:	ea00000a 	b	118004 <lwip_standard_chksum+0xb0>
    sum += *ps++;
  117fd8:	e51b300c 	ldr	r3, [fp, #-12]
  117fdc:	e2832002 	add	r2, r3, #2
  117fe0:	e50b200c 	str	r2, [fp, #-12]
  117fe4:	e1d330b0 	ldrh	r3, [r3]
  117fe8:	e1a02003 	mov	r2, r3
  117fec:	e51b3010 	ldr	r3, [fp, #-16]
  117ff0:	e0833002 	add	r3, r3, r2
  117ff4:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  117ff8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117ffc:	e2433002 	sub	r3, r3, #2
  118000:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  118004:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118008:	e3530001 	cmp	r3, #1
  11800c:	cafffff1 	bgt	117fd8 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  118010:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118014:	e3530000 	cmp	r3, #0
  118018:	da000003 	ble	11802c <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  11801c:	e24b3016 	sub	r3, fp, #22
  118020:	e51b200c 	ldr	r2, [fp, #-12]
  118024:	e5d22000 	ldrb	r2, [r2]
  118028:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  11802c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118030:	e1a02003 	mov	r2, r3
  118034:	e51b3010 	ldr	r3, [fp, #-16]
  118038:	e0833002 	add	r3, r3, r2
  11803c:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  118040:	e51b3010 	ldr	r3, [fp, #-16]
  118044:	e1a02823 	lsr	r2, r3, #16
  118048:	e51b3010 	ldr	r3, [fp, #-16]
  11804c:	e6ff3073 	uxth	r3, r3
  118050:	e0823003 	add	r3, r2, r3
  118054:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  118058:	e51b3010 	ldr	r3, [fp, #-16]
  11805c:	e1a02823 	lsr	r2, r3, #16
  118060:	e51b3010 	ldr	r3, [fp, #-16]
  118064:	e6ff3073 	uxth	r3, r3
  118068:	e0823003 	add	r3, r2, r3
  11806c:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  118070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118074:	e3530000 	cmp	r3, #0
  118078:	0a000007 	beq	11809c <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  11807c:	e51b3010 	ldr	r3, [fp, #-16]
  118080:	e1a03403 	lsl	r3, r3, #8
  118084:	e6ff2073 	uxth	r2, r3
  118088:	e51b3010 	ldr	r3, [fp, #-16]
  11808c:	e1a03423 	lsr	r3, r3, #8
  118090:	e6ef3073 	uxtb	r3, r3
  118094:	e1823003 	orr	r3, r2, r3
  118098:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  11809c:	e51b3010 	ldr	r3, [fp, #-16]
  1180a0:	e6ff3073 	uxth	r3, r3
}
  1180a4:	e1a00003 	mov	r0, r3
  1180a8:	e28bd000 	add	sp, fp, #0
  1180ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1180b0:	e12fff1e 	bx	lr

001180b4 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  1180b4:	e92d4800 	push	{fp, lr}
  1180b8:	e28db004 	add	fp, sp, #4
  1180bc:	e24dd018 	sub	sp, sp, #24
  1180c0:	e50b0010 	str	r0, [fp, #-16]
  1180c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1180c8:	e1a03001 	mov	r3, r1
  1180cc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1180d0:	e1a03002 	mov	r3, r2
  1180d4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  1180d8:	e3a03000 	mov	r3, #0
  1180dc:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  1180e0:	e51b3010 	ldr	r3, [fp, #-16]
  1180e4:	e50b3008 	str	r3, [fp, #-8]
  1180e8:	ea000025 	b	118184 <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  1180ec:	e51b3008 	ldr	r3, [fp, #-8]
  1180f0:	e5932004 	ldr	r2, [r3, #4]
  1180f4:	e51b3008 	ldr	r3, [fp, #-8]
  1180f8:	e1d330ba 	ldrh	r3, [r3, #10]
  1180fc:	e1a01003 	mov	r1, r3
  118100:	e1a00002 	mov	r0, r2
  118104:	ebffff92 	bl	117f54 <lwip_standard_chksum>
  118108:	e1a03000 	mov	r3, r0
  11810c:	e1a02003 	mov	r2, r3
  118110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118114:	e0833002 	add	r3, r3, r2
  118118:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  11811c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118120:	e1a02823 	lsr	r2, r3, #16
  118124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118128:	e6ff3073 	uxth	r3, r3
  11812c:	e0823003 	add	r3, r2, r3
  118130:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  118134:	e51b3008 	ldr	r3, [fp, #-8]
  118138:	e1d330ba 	ldrh	r3, [r3, #10]
  11813c:	e2033001 	and	r3, r3, #1
  118140:	e6ff3073 	uxth	r3, r3
  118144:	e3530000 	cmp	r3, #0
  118148:	0a00000a 	beq	118178 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  11814c:	e55b3009 	ldrb	r3, [fp, #-9]
  118150:	e2633001 	rsb	r3, r3, #1
  118154:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11815c:	e1a03403 	lsl	r3, r3, #8
  118160:	e6ff2073 	uxth	r2, r3
  118164:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118168:	e1a03423 	lsr	r3, r3, #8
  11816c:	e6ef3073 	uxtb	r3, r3
  118170:	e1823003 	orr	r3, r2, r3
  118174:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  118178:	e51b3008 	ldr	r3, [fp, #-8]
  11817c:	e5933000 	ldr	r3, [r3]
  118180:	e50b3008 	str	r3, [fp, #-8]
  118184:	e51b3008 	ldr	r3, [fp, #-8]
  118188:	e3530000 	cmp	r3, #0
  11818c:	1affffd6 	bne	1180ec <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118190:	e55b3009 	ldrb	r3, [fp, #-9]
  118194:	e3530000 	cmp	r3, #0
  118198:	0a000007 	beq	1181bc <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  11819c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181a0:	e1a03403 	lsl	r3, r3, #8
  1181a4:	e6ff2073 	uxth	r2, r3
  1181a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181ac:	e1a03423 	lsr	r3, r3, #8
  1181b0:	e6ef3073 	uxtb	r3, r3
  1181b4:	e1823003 	orr	r3, r2, r3
  1181b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1181bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1181c0:	e6ff3073 	uxth	r3, r3
  1181c4:	e1a00003 	mov	r0, r3
  1181c8:	ebfff836 	bl	1162a8 <lwip_htons>
  1181cc:	e1a03000 	mov	r3, r0
  1181d0:	e1a02003 	mov	r2, r3
  1181d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181d8:	e0833002 	add	r3, r3, r2
  1181dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  1181e0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1181e4:	e1a00003 	mov	r0, r3
  1181e8:	ebfff82e 	bl	1162a8 <lwip_htons>
  1181ec:	e1a03000 	mov	r3, r0
  1181f0:	e1a02003 	mov	r2, r3
  1181f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181f8:	e0833002 	add	r3, r3, r2
  1181fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118200:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118204:	e1a02823 	lsr	r2, r3, #16
  118208:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11820c:	e6ff3073 	uxth	r3, r3
  118210:	e0823003 	add	r3, r2, r3
  118214:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  118218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11821c:	e1a02823 	lsr	r2, r3, #16
  118220:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118224:	e6ff3073 	uxth	r3, r3
  118228:	e0823003 	add	r3, r2, r3
  11822c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118230:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118234:	e6ff3073 	uxth	r3, r3
  118238:	e1e03003 	mvn	r3, r3
  11823c:	e6ff3073 	uxth	r3, r3
}
  118240:	e1a00003 	mov	r0, r3
  118244:	e24bd004 	sub	sp, fp, #4
  118248:	e8bd8800 	pop	{fp, pc}

0011824c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  11824c:	e92d4800 	push	{fp, lr}
  118250:	e28db004 	add	fp, sp, #4
  118254:	e24dd018 	sub	sp, sp, #24
  118258:	e50b0010 	str	r0, [fp, #-16]
  11825c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118260:	e1a03001 	mov	r3, r1
  118264:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118268:	e1a03002 	mov	r3, r2
  11826c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  118270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118274:	e5933000 	ldr	r3, [r3]
  118278:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  11827c:	e51b3008 	ldr	r3, [fp, #-8]
  118280:	e6ff3073 	uxth	r3, r3
  118284:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118288:	e51b3008 	ldr	r3, [fp, #-8]
  11828c:	e1a03823 	lsr	r3, r3, #16
  118290:	e51b200c 	ldr	r2, [fp, #-12]
  118294:	e0823003 	add	r3, r2, r3
  118298:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  11829c:	e59b3004 	ldr	r3, [fp, #4]
  1182a0:	e5933000 	ldr	r3, [r3]
  1182a4:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1182a8:	e51b3008 	ldr	r3, [fp, #-8]
  1182ac:	e6ff3073 	uxth	r3, r3
  1182b0:	e51b200c 	ldr	r2, [fp, #-12]
  1182b4:	e0823003 	add	r3, r2, r3
  1182b8:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1182bc:	e51b3008 	ldr	r3, [fp, #-8]
  1182c0:	e1a03823 	lsr	r3, r3, #16
  1182c4:	e51b200c 	ldr	r2, [fp, #-12]
  1182c8:	e0823003 	add	r3, r2, r3
  1182cc:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  1182d0:	e51b300c 	ldr	r3, [fp, #-12]
  1182d4:	e1a02823 	lsr	r2, r3, #16
  1182d8:	e51b300c 	ldr	r3, [fp, #-12]
  1182dc:	e6ff3073 	uxth	r3, r3
  1182e0:	e0823003 	add	r3, r2, r3
  1182e4:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  1182e8:	e51b300c 	ldr	r3, [fp, #-12]
  1182ec:	e1a02823 	lsr	r2, r3, #16
  1182f0:	e51b300c 	ldr	r3, [fp, #-12]
  1182f4:	e6ff3073 	uxth	r3, r3
  1182f8:	e0823003 	add	r3, r2, r3
  1182fc:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  118300:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118304:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118308:	e51b300c 	ldr	r3, [fp, #-12]
  11830c:	e51b0010 	ldr	r0, [fp, #-16]
  118310:	ebffff67 	bl	1180b4 <inet_cksum_pseudo_base>
  118314:	e1a03000 	mov	r3, r0
}
  118318:	e1a00003 	mov	r0, r3
  11831c:	e24bd004 	sub	sp, fp, #4
  118320:	e8bd8800 	pop	{fp, pc}

00118324 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  118324:	e92d4800 	push	{fp, lr}
  118328:	e28db004 	add	fp, sp, #4
  11832c:	e24dd018 	sub	sp, sp, #24
  118330:	e50b0008 	str	r0, [fp, #-8]
  118334:	e50b3010 	str	r3, [fp, #-16]
  118338:	e1a03001 	mov	r3, r1
  11833c:	e54b3009 	strb	r3, [fp, #-9]
  118340:	e1a03002 	mov	r3, r2
  118344:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  118348:	e15b20bc 	ldrh	r2, [fp, #-12]
  11834c:	e55b1009 	ldrb	r1, [fp, #-9]
  118350:	e59b3004 	ldr	r3, [fp, #4]
  118354:	e58d3000 	str	r3, [sp]
  118358:	e51b3010 	ldr	r3, [fp, #-16]
  11835c:	e51b0008 	ldr	r0, [fp, #-8]
  118360:	ebffffb9 	bl	11824c <inet_chksum_pseudo>
  118364:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118368:	e1a00003 	mov	r0, r3
  11836c:	e24bd004 	sub	sp, fp, #4
  118370:	e8bd8800 	pop	{fp, pc}

00118374 <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  118374:	e92d4800 	push	{fp, lr}
  118378:	e28db004 	add	fp, sp, #4
  11837c:	e24dd018 	sub	sp, sp, #24
  118380:	e50b0010 	str	r0, [fp, #-16]
  118384:	e1a00001 	mov	r0, r1
  118388:	e1a01002 	mov	r1, r2
  11838c:	e1a02003 	mov	r2, r3
  118390:	e1a03000 	mov	r3, r0
  118394:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118398:	e1a03001 	mov	r3, r1
  11839c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1183a0:	e1a03002 	mov	r3, r2
  1183a4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  1183a8:	e3a03000 	mov	r3, #0
  1183ac:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1183b0:	e51b3010 	ldr	r3, [fp, #-16]
  1183b4:	e50b3008 	str	r3, [fp, #-8]
  1183b8:	ea00003c 	b	1184b0 <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  1183bc:	e51b3008 	ldr	r3, [fp, #-8]
  1183c0:	e1d330ba 	ldrh	r3, [r3, #10]
  1183c4:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  1183c8:	e15b20bc 	ldrh	r2, [fp, #-12]
  1183cc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1183d0:	e1520003 	cmp	r2, r3
  1183d4:	9a000001 	bls	1183e0 <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  1183d8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1183dc:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  1183e0:	e51b3008 	ldr	r3, [fp, #-8]
  1183e4:	e5933004 	ldr	r3, [r3, #4]
  1183e8:	e15b20bc 	ldrh	r2, [fp, #-12]
  1183ec:	e1a01002 	mov	r1, r2
  1183f0:	e1a00003 	mov	r0, r3
  1183f4:	ebfffed6 	bl	117f54 <lwip_standard_chksum>
  1183f8:	e1a03000 	mov	r3, r0
  1183fc:	e1a02003 	mov	r2, r3
  118400:	e59b3004 	ldr	r3, [fp, #4]
  118404:	e0833002 	add	r3, r3, r2
  118408:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  11840c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  118410:	e15b30bc 	ldrh	r3, [fp, #-12]
  118414:	e0423003 	sub	r3, r2, r3
  118418:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  11841c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118420:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  118424:	e1530002 	cmp	r3, r2
  118428:	9a000006 	bls	118448 <inet_cksum_pseudo_partial_base+0xd4>
  11842c:	e3060e2c 	movw	r0, #28204	; 0x6e2c
  118430:	e3400014 	movt	r0, #20
  118434:	ebffab36 	bl	103114 <rt_kprintf>
  118438:	e3a01e1a 	mov	r1, #416	; 0x1a0
  11843c:	e3060e38 	movw	r0, #28216	; 0x6e38
  118440:	e3400014 	movt	r0, #20
  118444:	ebffca52 	bl	10ad94 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  118448:	e59b3004 	ldr	r3, [fp, #4]
  11844c:	e1a02823 	lsr	r2, r3, #16
  118450:	e59b3004 	ldr	r3, [fp, #4]
  118454:	e6ff3073 	uxth	r3, r3
  118458:	e0823003 	add	r3, r2, r3
  11845c:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  118460:	e51b3008 	ldr	r3, [fp, #-8]
  118464:	e1d330ba 	ldrh	r3, [r3, #10]
  118468:	e2033001 	and	r3, r3, #1
  11846c:	e6ff3073 	uxth	r3, r3
  118470:	e3530000 	cmp	r3, #0
  118474:	0a00000a 	beq	1184a4 <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  118478:	e55b3009 	ldrb	r3, [fp, #-9]
  11847c:	e2633001 	rsb	r3, r3, #1
  118480:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118484:	e59b3004 	ldr	r3, [fp, #4]
  118488:	e1a03403 	lsl	r3, r3, #8
  11848c:	e6ff2073 	uxth	r2, r3
  118490:	e59b3004 	ldr	r3, [fp, #4]
  118494:	e1a03423 	lsr	r3, r3, #8
  118498:	e6ef3073 	uxtb	r3, r3
  11849c:	e1823003 	orr	r3, r2, r3
  1184a0:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1184a4:	e51b3008 	ldr	r3, [fp, #-8]
  1184a8:	e5933000 	ldr	r3, [r3]
  1184ac:	e50b3008 	str	r3, [fp, #-8]
  1184b0:	e51b3008 	ldr	r3, [fp, #-8]
  1184b4:	e3530000 	cmp	r3, #0
  1184b8:	0a000002 	beq	1184c8 <inet_cksum_pseudo_partial_base+0x154>
  1184bc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1184c0:	e3530000 	cmp	r3, #0
  1184c4:	1affffbc 	bne	1183bc <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1184c8:	e55b3009 	ldrb	r3, [fp, #-9]
  1184cc:	e3530000 	cmp	r3, #0
  1184d0:	0a000007 	beq	1184f4 <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  1184d4:	e59b3004 	ldr	r3, [fp, #4]
  1184d8:	e1a03403 	lsl	r3, r3, #8
  1184dc:	e6ff2073 	uxth	r2, r3
  1184e0:	e59b3004 	ldr	r3, [fp, #4]
  1184e4:	e1a03423 	lsr	r3, r3, #8
  1184e8:	e6ef3073 	uxtb	r3, r3
  1184ec:	e1823003 	orr	r3, r2, r3
  1184f0:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1184f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1184f8:	e6ff3073 	uxth	r3, r3
  1184fc:	e1a00003 	mov	r0, r3
  118500:	ebfff768 	bl	1162a8 <lwip_htons>
  118504:	e1a03000 	mov	r3, r0
  118508:	e1a02003 	mov	r2, r3
  11850c:	e59b3004 	ldr	r3, [fp, #4]
  118510:	e0833002 	add	r3, r3, r2
  118514:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  118518:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11851c:	e1a00003 	mov	r0, r3
  118520:	ebfff760 	bl	1162a8 <lwip_htons>
  118524:	e1a03000 	mov	r3, r0
  118528:	e1a02003 	mov	r2, r3
  11852c:	e59b3004 	ldr	r3, [fp, #4]
  118530:	e0833002 	add	r3, r3, r2
  118534:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118538:	e59b3004 	ldr	r3, [fp, #4]
  11853c:	e1a02823 	lsr	r2, r3, #16
  118540:	e59b3004 	ldr	r3, [fp, #4]
  118544:	e6ff3073 	uxth	r3, r3
  118548:	e0823003 	add	r3, r2, r3
  11854c:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  118550:	e59b3004 	ldr	r3, [fp, #4]
  118554:	e1a02823 	lsr	r2, r3, #16
  118558:	e59b3004 	ldr	r3, [fp, #4]
  11855c:	e6ff3073 	uxth	r3, r3
  118560:	e0823003 	add	r3, r2, r3
  118564:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118568:	e59b3004 	ldr	r3, [fp, #4]
  11856c:	e6ff3073 	uxth	r3, r3
  118570:	e1e03003 	mvn	r3, r3
  118574:	e6ff3073 	uxth	r3, r3
}
  118578:	e1a00003 	mov	r0, r3
  11857c:	e24bd004 	sub	sp, fp, #4
  118580:	e8bd8800 	pop	{fp, pc}

00118584 <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118584:	e92d4800 	push	{fp, lr}
  118588:	e28db004 	add	fp, sp, #4
  11858c:	e24dd020 	sub	sp, sp, #32
  118590:	e50b0010 	str	r0, [fp, #-16]
  118594:	e1a00001 	mov	r0, r1
  118598:	e1a01002 	mov	r1, r2
  11859c:	e1a02003 	mov	r2, r3
  1185a0:	e1a03000 	mov	r3, r0
  1185a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1185a8:	e1a03001 	mov	r3, r1
  1185ac:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1185b0:	e1a03002 	mov	r3, r2
  1185b4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1185b8:	e59b3004 	ldr	r3, [fp, #4]
  1185bc:	e5933000 	ldr	r3, [r3]
  1185c0:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1185c4:	e51b3008 	ldr	r3, [fp, #-8]
  1185c8:	e6ff3073 	uxth	r3, r3
  1185cc:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185d0:	e51b3008 	ldr	r3, [fp, #-8]
  1185d4:	e1a03823 	lsr	r3, r3, #16
  1185d8:	e51b200c 	ldr	r2, [fp, #-12]
  1185dc:	e0823003 	add	r3, r2, r3
  1185e0:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  1185e4:	e59b3008 	ldr	r3, [fp, #8]
  1185e8:	e5933000 	ldr	r3, [r3]
  1185ec:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1185f0:	e51b3008 	ldr	r3, [fp, #-8]
  1185f4:	e6ff3073 	uxth	r3, r3
  1185f8:	e51b200c 	ldr	r2, [fp, #-12]
  1185fc:	e0823003 	add	r3, r2, r3
  118600:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118604:	e51b3008 	ldr	r3, [fp, #-8]
  118608:	e1a03823 	lsr	r3, r3, #16
  11860c:	e51b200c 	ldr	r2, [fp, #-12]
  118610:	e0823003 	add	r3, r2, r3
  118614:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118618:	e51b300c 	ldr	r3, [fp, #-12]
  11861c:	e1a02823 	lsr	r2, r3, #16
  118620:	e51b300c 	ldr	r3, [fp, #-12]
  118624:	e6ff3073 	uxth	r3, r3
  118628:	e0823003 	add	r3, r2, r3
  11862c:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118630:	e51b300c 	ldr	r3, [fp, #-12]
  118634:	e1a02823 	lsr	r2, r3, #16
  118638:	e51b300c 	ldr	r3, [fp, #-12]
  11863c:	e6ff3073 	uxth	r3, r3
  118640:	e0823003 	add	r3, r2, r3
  118644:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  118648:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  11864c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118650:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118654:	e51b300c 	ldr	r3, [fp, #-12]
  118658:	e58d3000 	str	r3, [sp]
  11865c:	e1a03000 	mov	r3, r0
  118660:	e51b0010 	ldr	r0, [fp, #-16]
  118664:	ebffff42 	bl	118374 <inet_cksum_pseudo_partial_base>
  118668:	e1a03000 	mov	r3, r0
}
  11866c:	e1a00003 	mov	r0, r3
  118670:	e24bd004 	sub	sp, fp, #4
  118674:	e8bd8800 	pop	{fp, pc}

00118678 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  118678:	e92d4800 	push	{fp, lr}
  11867c:	e28db004 	add	fp, sp, #4
  118680:	e24dd018 	sub	sp, sp, #24
  118684:	e50b0008 	str	r0, [fp, #-8]
  118688:	e1a00001 	mov	r0, r1
  11868c:	e1a01002 	mov	r1, r2
  118690:	e1a02003 	mov	r2, r3
  118694:	e1a03000 	mov	r3, r0
  118698:	e54b3009 	strb	r3, [fp, #-9]
  11869c:	e1a03001 	mov	r3, r1
  1186a0:	e14b30bc 	strh	r3, [fp, #-12]
  1186a4:	e1a03002 	mov	r3, r2
  1186a8:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  1186ac:	e15b00be 	ldrh	r0, [fp, #-14]
  1186b0:	e15b20bc 	ldrh	r2, [fp, #-12]
  1186b4:	e55b1009 	ldrb	r1, [fp, #-9]
  1186b8:	e59b3008 	ldr	r3, [fp, #8]
  1186bc:	e58d3004 	str	r3, [sp, #4]
  1186c0:	e59b3004 	ldr	r3, [fp, #4]
  1186c4:	e58d3000 	str	r3, [sp]
  1186c8:	e1a03000 	mov	r3, r0
  1186cc:	e51b0008 	ldr	r0, [fp, #-8]
  1186d0:	ebffffab 	bl	118584 <inet_chksum_pseudo_partial>
  1186d4:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  1186d8:	e1a00003 	mov	r0, r3
  1186dc:	e24bd004 	sub	sp, fp, #4
  1186e0:	e8bd8800 	pop	{fp, pc}

001186e4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  1186e4:	e92d4800 	push	{fp, lr}
  1186e8:	e28db004 	add	fp, sp, #4
  1186ec:	e24dd008 	sub	sp, sp, #8
  1186f0:	e50b0008 	str	r0, [fp, #-8]
  1186f4:	e1a03001 	mov	r3, r1
  1186f8:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  1186fc:	e15b30ba 	ldrh	r3, [fp, #-10]
  118700:	e1a01003 	mov	r1, r3
  118704:	e51b0008 	ldr	r0, [fp, #-8]
  118708:	ebfffe11 	bl	117f54 <lwip_standard_chksum>
  11870c:	e1a03000 	mov	r3, r0
  118710:	e1e03003 	mvn	r3, r3
  118714:	e6ff3073 	uxth	r3, r3
}
  118718:	e1a00003 	mov	r0, r3
  11871c:	e24bd004 	sub	sp, fp, #4
  118720:	e8bd8800 	pop	{fp, pc}

00118724 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  118724:	e92d4800 	push	{fp, lr}
  118728:	e28db004 	add	fp, sp, #4
  11872c:	e24dd018 	sub	sp, sp, #24
  118730:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  118734:	e3a03000 	mov	r3, #0
  118738:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  11873c:	e3a03000 	mov	r3, #0
  118740:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  118744:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118748:	e50b300c 	str	r3, [fp, #-12]
  11874c:	ea000025 	b	1187e8 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  118750:	e51b300c 	ldr	r3, [fp, #-12]
  118754:	e5932004 	ldr	r2, [r3, #4]
  118758:	e51b300c 	ldr	r3, [fp, #-12]
  11875c:	e1d330ba 	ldrh	r3, [r3, #10]
  118760:	e1a01003 	mov	r1, r3
  118764:	e1a00002 	mov	r0, r2
  118768:	ebfffdf9 	bl	117f54 <lwip_standard_chksum>
  11876c:	e1a03000 	mov	r3, r0
  118770:	e1a02003 	mov	r2, r3
  118774:	e51b3008 	ldr	r3, [fp, #-8]
  118778:	e0833002 	add	r3, r3, r2
  11877c:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118780:	e51b3008 	ldr	r3, [fp, #-8]
  118784:	e1a02823 	lsr	r2, r3, #16
  118788:	e51b3008 	ldr	r3, [fp, #-8]
  11878c:	e6ff3073 	uxth	r3, r3
  118790:	e0823003 	add	r3, r2, r3
  118794:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118798:	e51b300c 	ldr	r3, [fp, #-12]
  11879c:	e1d330ba 	ldrh	r3, [r3, #10]
  1187a0:	e2033001 	and	r3, r3, #1
  1187a4:	e6ff3073 	uxth	r3, r3
  1187a8:	e3530000 	cmp	r3, #0
  1187ac:	0a00000a 	beq	1187dc <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  1187b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1187b4:	e2633001 	rsb	r3, r3, #1
  1187b8:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  1187bc:	e51b3008 	ldr	r3, [fp, #-8]
  1187c0:	e1a03403 	lsl	r3, r3, #8
  1187c4:	e6ff2073 	uxth	r2, r3
  1187c8:	e51b3008 	ldr	r3, [fp, #-8]
  1187cc:	e1a03423 	lsr	r3, r3, #8
  1187d0:	e6ef3073 	uxtb	r3, r3
  1187d4:	e1823003 	orr	r3, r2, r3
  1187d8:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  1187dc:	e51b300c 	ldr	r3, [fp, #-12]
  1187e0:	e5933000 	ldr	r3, [r3]
  1187e4:	e50b300c 	str	r3, [fp, #-12]
  1187e8:	e51b300c 	ldr	r3, [fp, #-12]
  1187ec:	e3530000 	cmp	r3, #0
  1187f0:	1affffd6 	bne	118750 <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  1187f4:	e55b300d 	ldrb	r3, [fp, #-13]
  1187f8:	e3530000 	cmp	r3, #0
  1187fc:	0a000007 	beq	118820 <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118800:	e51b3008 	ldr	r3, [fp, #-8]
  118804:	e1a03403 	lsl	r3, r3, #8
  118808:	e6ff2073 	uxth	r2, r3
  11880c:	e51b3008 	ldr	r3, [fp, #-8]
  118810:	e1a03423 	lsr	r3, r3, #8
  118814:	e6ef3073 	uxtb	r3, r3
  118818:	e1823003 	orr	r3, r2, r3
  11881c:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  118820:	e51b3008 	ldr	r3, [fp, #-8]
  118824:	e6ff3073 	uxth	r3, r3
  118828:	e1e03003 	mvn	r3, r3
  11882c:	e6ff3073 	uxth	r3, r3
}
  118830:	e1a00003 	mov	r0, r3
  118834:	e24bd004 	sub	sp, fp, #4
  118838:	e8bd8800 	pop	{fp, pc}

0011883c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  11883c:	e92d4800 	push	{fp, lr}
  118840:	e28db004 	add	fp, sp, #4
  118844:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  118848:	eb000f7b 	bl	11c63c <stats_init>
#if !NO_SYS
  sys_init();
  11884c:	ebffc769 	bl	10a5f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  118850:	ebffc96e 	bl	10ae10 <mem_init>
  memp_init();
  118854:	eb0000c6 	bl	118b74 <memp_init>
  pbuf_init();
  netif_init();
  118858:	eb0001d9 	bl	118fc4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  11885c:	eb003b81 	bl	127668 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  118860:	eb001109 	bl	11cc8c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  118864:	eb005cde 	bl	12fbe4 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  118868:	ebfff78e 	bl	1166a8 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  11886c:	eb0039d8 	bl	126fd4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  118870:	e320f000 	nop	{0}
  118874:	e24bd004 	sub	sp, fp, #4
  118878:	e8bd8800 	pop	{fp, pc}

0011887c <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  11887c:	e92d4800 	push	{fp, lr}
  118880:	e28db004 	add	fp, sp, #4
  118884:	e24dd090 	sub	sp, sp, #144	; 0x90
  118888:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  11888c:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118890:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118894:	e1d330b8 	ldrh	r3, [r3, #8]
  118898:	e283301c 	add	r3, r3, #28
  11889c:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  1188a0:	e0823003 	add	r3, r2, r3
  1188a4:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  1188a8:	e3a03000 	mov	r3, #0
  1188ac:	e14b30b6 	strh	r3, [fp, #-6]
  1188b0:	ea000022 	b	118940 <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  1188b4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1188b8:	e51b200c 	ldr	r2, [fp, #-12]
  1188bc:	e0823003 	add	r3, r2, r3
  1188c0:	e5d33000 	ldrb	r3, [r3]
  1188c4:	e35300cd 	cmp	r3, #205	; 0xcd
  1188c8:	0a000019 	beq	118934 <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  1188cc:	e30730f0 	movw	r3, #28912	; 0x70f0
  1188d0:	e3403014 	movt	r3, #20
  1188d4:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  1188d8:	e1a0e003 	mov	lr, r3
  1188dc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1188e0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1188e4:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  1188e8:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  1188ec:	e24b306c 	sub	r3, fp, #108	; 0x6c
  1188f0:	e3a02060 	mov	r2, #96	; 0x60
  1188f4:	e3a01000 	mov	r1, #0
  1188f8:	e1a00003 	mov	r0, r3
  1188fc:	eb00a198 	bl	140f64 <memset>
      strcat(errstr, desc->desc);
  118900:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118904:	e5932000 	ldr	r2, [r3]
  118908:	e24b308c 	sub	r3, fp, #140	; 0x8c
  11890c:	e1a01002 	mov	r1, r2
  118910:	e1a00003 	mov	r0, r3
  118914:	eb00a1f8 	bl	1410fc <strcat>
      LWIP_ASSERT(errstr, 0);
  118918:	e24b308c 	sub	r3, fp, #140	; 0x8c
  11891c:	e1a00003 	mov	r0, r3
  118920:	ebffa9fb 	bl	103114 <rt_kprintf>
  118924:	e3a0108a 	mov	r1, #138	; 0x8a
  118928:	e30700c4 	movw	r0, #28868	; 0x70c4
  11892c:	e3400014 	movt	r0, #20
  118930:	ebffc917 	bl	10ad94 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118934:	e15b30b6 	ldrh	r3, [fp, #-6]
  118938:	e2833001 	add	r3, r3, #1
  11893c:	e14b30b6 	strh	r3, [fp, #-6]
  118940:	e15b30b6 	ldrh	r3, [fp, #-6]
  118944:	e353000f 	cmp	r3, #15
  118948:	9affffd9 	bls	1188b4 <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  11894c:	e320f000 	nop	{0}
  118950:	e24bd004 	sub	sp, fp, #4
  118954:	e8bd8800 	pop	{fp, pc}

00118958 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  118958:	e92d4800 	push	{fp, lr}
  11895c:	e28db004 	add	fp, sp, #4
  118960:	e24dd090 	sub	sp, sp, #144	; 0x90
  118964:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118968:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  11896c:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  118970:	e283300c 	add	r3, r3, #12
  118974:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118978:	e3a03000 	mov	r3, #0
  11897c:	e14b30b6 	strh	r3, [fp, #-6]
  118980:	ea000024 	b	118a18 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  118984:	e15b30b6 	ldrh	r3, [fp, #-6]
  118988:	e51b200c 	ldr	r2, [fp, #-12]
  11898c:	e0823003 	add	r3, r2, r3
  118990:	e5d33000 	ldrb	r3, [r3]
  118994:	e35300cd 	cmp	r3, #205	; 0xcd
  118998:	0a00001b 	beq	118a0c <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  11899c:	e3073170 	movw	r3, #29040	; 0x7170
  1189a0:	e3403014 	movt	r3, #20
  1189a4:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  1189a8:	e1a0e003 	mov	lr, r3
  1189ac:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1189b0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1189b4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1189b8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1189bc:	e59e3000 	ldr	r3, [lr]
  1189c0:	e5cc3000 	strb	r3, [ip]
  1189c4:	e24b306b 	sub	r3, fp, #107	; 0x6b
  1189c8:	e3a0205f 	mov	r2, #95	; 0x5f
  1189cc:	e3a01000 	mov	r1, #0
  1189d0:	e1a00003 	mov	r0, r3
  1189d4:	eb00a162 	bl	140f64 <memset>
      strcat(errstr, desc->desc);
  1189d8:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  1189dc:	e5932000 	ldr	r2, [r3]
  1189e0:	e24b308c 	sub	r3, fp, #140	; 0x8c
  1189e4:	e1a01002 	mov	r1, r2
  1189e8:	e1a00003 	mov	r0, r3
  1189ec:	eb00a1c2 	bl	1410fc <strcat>
      LWIP_ASSERT(errstr, 0);
  1189f0:	e24b308c 	sub	r3, fp, #140	; 0x8c
  1189f4:	e1a00003 	mov	r0, r3
  1189f8:	ebffa9c5 	bl	103114 <rt_kprintf>
  1189fc:	e3a010a5 	mov	r1, #165	; 0xa5
  118a00:	e30700c4 	movw	r0, #28868	; 0x70c4
  118a04:	e3400014 	movt	r0, #20
  118a08:	ebffc8e1 	bl	10ad94 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118a0c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118a10:	e2833001 	add	r3, r3, #1
  118a14:	e14b30b6 	strh	r3, [fp, #-6]
  118a18:	e15b30b6 	ldrh	r3, [fp, #-6]
  118a1c:	e353000f 	cmp	r3, #15
  118a20:	9affffd7 	bls	118984 <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  118a24:	e320f000 	nop	{0}
  118a28:	e24bd004 	sub	sp, fp, #4
  118a2c:	e8bd8800 	pop	{fp, pc}

00118a30 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  118a30:	e92d4800 	push	{fp, lr}
  118a34:	e28db004 	add	fp, sp, #4
  118a38:	e24dd010 	sub	sp, sp, #16
  118a3c:	e50b0010 	str	r0, [fp, #-16]
  118a40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118a44:	e51b3010 	ldr	r3, [fp, #-16]
  118a48:	e283300c 	add	r3, r3, #12
  118a4c:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118a50:	e3a02010 	mov	r2, #16
  118a54:	e3a010cd 	mov	r1, #205	; 0xcd
  118a58:	e51b0008 	ldr	r0, [fp, #-8]
  118a5c:	eb00a140 	bl	140f64 <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118a60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118a64:	e1d330b8 	ldrh	r3, [r3, #8]
  118a68:	e283301c 	add	r3, r3, #28
  118a6c:	e51b2010 	ldr	r2, [fp, #-16]
  118a70:	e0823003 	add	r3, r2, r3
  118a74:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118a78:	e3a02010 	mov	r2, #16
  118a7c:	e3a010cd 	mov	r1, #205	; 0xcd
  118a80:	e51b0008 	ldr	r0, [fp, #-8]
  118a84:	eb00a136 	bl	140f64 <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118a88:	e320f000 	nop	{0}
  118a8c:	e24bd004 	sub	sp, fp, #4
  118a90:	e8bd8800 	pop	{fp, pc}

00118a94 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118a94:	e92d4800 	push	{fp, lr}
  118a98:	e28db004 	add	fp, sp, #4
  118a9c:	e24dd010 	sub	sp, sp, #16
  118aa0:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118aa4:	e51b3010 	ldr	r3, [fp, #-16]
  118aa8:	e5933010 	ldr	r3, [r3, #16]
  118aac:	e3a02000 	mov	r2, #0
  118ab0:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118ab4:	e51b3010 	ldr	r3, [fp, #-16]
  118ab8:	e593300c 	ldr	r3, [r3, #12]
  118abc:	e2833003 	add	r3, r3, #3
  118ac0:	e3c33003 	bic	r3, r3, #3
  118ac4:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118ac8:	e3a03000 	mov	r3, #0
  118acc:	e50b3008 	str	r3, [fp, #-8]
  118ad0:	ea000014 	b	118b28 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118ad4:	e51b3010 	ldr	r3, [fp, #-16]
  118ad8:	e5933010 	ldr	r3, [r3, #16]
  118adc:	e5932000 	ldr	r2, [r3]
  118ae0:	e51b300c 	ldr	r3, [fp, #-12]
  118ae4:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118ae8:	e51b3010 	ldr	r3, [fp, #-16]
  118aec:	e5933010 	ldr	r3, [r3, #16]
  118af0:	e51b200c 	ldr	r2, [fp, #-12]
  118af4:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118af8:	e51b1010 	ldr	r1, [fp, #-16]
  118afc:	e51b000c 	ldr	r0, [fp, #-12]
  118b00:	ebffffca 	bl	118a30 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118b04:	e51b3010 	ldr	r3, [fp, #-16]
  118b08:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118b0c:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118b10:	e51b200c 	ldr	r2, [fp, #-12]
  118b14:	e0823003 	add	r3, r2, r3
  118b18:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118b1c:	e51b3008 	ldr	r3, [fp, #-8]
  118b20:	e2833001 	add	r3, r3, #1
  118b24:	e50b3008 	str	r3, [fp, #-8]
  118b28:	e51b3010 	ldr	r3, [fp, #-16]
  118b2c:	e1d330ba 	ldrh	r3, [r3, #10]
  118b30:	e1a02003 	mov	r2, r3
  118b34:	e51b3008 	ldr	r3, [fp, #-8]
  118b38:	e1530002 	cmp	r3, r2
  118b3c:	baffffe4 	blt	118ad4 <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118b40:	e51b3010 	ldr	r3, [fp, #-16]
  118b44:	e5933004 	ldr	r3, [r3, #4]
  118b48:	e51b2010 	ldr	r2, [fp, #-16]
  118b4c:	e1d220ba 	ldrh	r2, [r2, #10]
  118b50:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118b54:	e51b3010 	ldr	r3, [fp, #-16]
  118b58:	e5933004 	ldr	r3, [r3, #4]
  118b5c:	e51b2010 	ldr	r2, [fp, #-16]
  118b60:	e5922000 	ldr	r2, [r2]
  118b64:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118b68:	e320f000 	nop	{0}
  118b6c:	e24bd004 	sub	sp, fp, #4
  118b70:	e8bd8800 	pop	{fp, pc}

00118b74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118b74:	e92d4800 	push	{fp, lr}
  118b78:	e28db004 	add	fp, sp, #4
  118b7c:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118b80:	e3a03000 	mov	r3, #0
  118b84:	e14b30b6 	strh	r3, [fp, #-6]
  118b88:	ea000014 	b	118be0 <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118b8c:	e15b20b6 	ldrh	r2, [fp, #-6]
  118b90:	e3073080 	movw	r3, #28800	; 0x7080
  118b94:	e3403014 	movt	r3, #20
  118b98:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118b9c:	e1a00003 	mov	r0, r3
  118ba0:	ebffffbb 	bl	118a94 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118ba4:	e15b20b6 	ldrh	r2, [fp, #-6]
  118ba8:	e3073080 	movw	r3, #28800	; 0x7080
  118bac:	e3403014 	movt	r3, #20
  118bb0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118bb4:	e15b30b6 	ldrh	r3, [fp, #-6]
  118bb8:	e5921004 	ldr	r1, [r2, #4]
  118bbc:	e30c2a18 	movw	r2, #51736	; 0xca18
  118bc0:	e3402015 	movt	r2, #21
  118bc4:	e2833034 	add	r3, r3, #52	; 0x34
  118bc8:	e1a03103 	lsl	r3, r3, #2
  118bcc:	e0823003 	add	r3, r2, r3
  118bd0:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118bd4:	e15b30b6 	ldrh	r3, [fp, #-6]
  118bd8:	e2833001 	add	r3, r3, #1
  118bdc:	e14b30b6 	strh	r3, [fp, #-6]
  118be0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118be4:	e3530010 	cmp	r3, #16
  118be8:	9affffe7 	bls	118b8c <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118bec:	e320f000 	nop	{0}
  118bf0:	e24bd004 	sub	sp, fp, #4
  118bf4:	e8bd8800 	pop	{fp, pc}

00118bf8 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118bf8:	e92d4800 	push	{fp, lr}
  118bfc:	e28db004 	add	fp, sp, #4
  118c00:	e24dd018 	sub	sp, sp, #24
  118c04:	e50b0010 	str	r0, [fp, #-16]
  118c08:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118c0c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118c10:	ebffa589 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118c14:	e51b3010 	ldr	r3, [fp, #-16]
  118c18:	e5933010 	ldr	r3, [r3, #16]
  118c1c:	e5933000 	ldr	r3, [r3]
  118c20:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118c24:	e51b3008 	ldr	r3, [fp, #-8]
  118c28:	e3530000 	cmp	r3, #0
  118c2c:	0a000036 	beq	118d0c <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118c30:	e51b1010 	ldr	r1, [fp, #-16]
  118c34:	e51b0008 	ldr	r0, [fp, #-8]
  118c38:	ebffff0f 	bl	11887c <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118c3c:	e51b1010 	ldr	r1, [fp, #-16]
  118c40:	e51b0008 	ldr	r0, [fp, #-8]
  118c44:	ebffff43 	bl	118958 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118c48:	e51b3010 	ldr	r3, [fp, #-16]
  118c4c:	e5933010 	ldr	r3, [r3, #16]
  118c50:	e51b2008 	ldr	r2, [fp, #-8]
  118c54:	e5922000 	ldr	r2, [r2]
  118c58:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118c5c:	e51b3008 	ldr	r3, [fp, #-8]
  118c60:	e3a02000 	mov	r2, #0
  118c64:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118c68:	e51b3008 	ldr	r3, [fp, #-8]
  118c6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118c70:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118c74:	e51b3008 	ldr	r3, [fp, #-8]
  118c78:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118c7c:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118c80:	e51b3008 	ldr	r3, [fp, #-8]
  118c84:	e2033003 	and	r3, r3, #3
  118c88:	e3530000 	cmp	r3, #0
  118c8c:	0a000006 	beq	118cac <do_memp_malloc_pool_fn+0xb4>
  118c90:	e30701f0 	movw	r0, #29168	; 0x71f0
  118c94:	e3400014 	movt	r0, #20
  118c98:	ebffa91d 	bl	103114 <rt_kprintf>
  118c9c:	e3001149 	movw	r1, #329	; 0x149
  118ca0:	e30700c4 	movw	r0, #28868	; 0x70c4
  118ca4:	e3400014 	movt	r0, #20
  118ca8:	ebffc839 	bl	10ad94 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118cac:	e51b3010 	ldr	r3, [fp, #-16]
  118cb0:	e5933004 	ldr	r3, [r3, #4]
  118cb4:	e1d320b8 	ldrh	r2, [r3, #8]
  118cb8:	e2822001 	add	r2, r2, #1
  118cbc:	e6ff2072 	uxth	r2, r2
  118cc0:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118cc4:	e51b3010 	ldr	r3, [fp, #-16]
  118cc8:	e5933004 	ldr	r3, [r3, #4]
  118ccc:	e1d320b8 	ldrh	r2, [r3, #8]
  118cd0:	e51b3010 	ldr	r3, [fp, #-16]
  118cd4:	e5933004 	ldr	r3, [r3, #4]
  118cd8:	e1d330ba 	ldrh	r3, [r3, #10]
  118cdc:	e1520003 	cmp	r2, r3
  118ce0:	9a000005 	bls	118cfc <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  118ce4:	e51b3010 	ldr	r3, [fp, #-16]
  118ce8:	e5932004 	ldr	r2, [r3, #4]
  118cec:	e51b3010 	ldr	r3, [fp, #-16]
  118cf0:	e5933004 	ldr	r3, [r3, #4]
  118cf4:	e1d220b8 	ldrh	r2, [r2, #8]
  118cf8:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  118cfc:	ebffa554 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  118d00:	e51b3008 	ldr	r3, [fp, #-8]
  118d04:	e283301c 	add	r3, r3, #28
  118d08:	ea000007 	b	118d2c <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  118d0c:	e51b3010 	ldr	r3, [fp, #-16]
  118d10:	e5933004 	ldr	r3, [r3, #4]
  118d14:	e1d320b4 	ldrh	r2, [r3, #4]
  118d18:	e2822001 	add	r2, r2, #1
  118d1c:	e6ff2072 	uxth	r2, r2
  118d20:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  118d24:	ebffa54a 	bl	102254 <rt_exit_critical>
  return NULL;
  118d28:	e3a03000 	mov	r3, #0
}
  118d2c:	e1a00003 	mov	r0, r3
  118d30:	e24bd004 	sub	sp, fp, #4
  118d34:	e8bd8800 	pop	{fp, pc}

00118d38 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118d38:	e92d4800 	push	{fp, lr}
  118d3c:	e28db004 	add	fp, sp, #4
  118d40:	e24dd010 	sub	sp, sp, #16
  118d44:	e50b0008 	str	r0, [fp, #-8]
  118d48:	e50b100c 	str	r1, [fp, #-12]
  118d4c:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118d50:	e51b3008 	ldr	r3, [fp, #-8]
  118d54:	e3530000 	cmp	r3, #0
  118d58:	1a000006 	bne	118d78 <memp_malloc_pool_fn+0x40>
  118d5c:	e3070214 	movw	r0, #29204	; 0x7214
  118d60:	e3400014 	movt	r0, #20
  118d64:	ebffa8ea 	bl	103114 <rt_kprintf>
  118d68:	e3a01f5b 	mov	r1, #364	; 0x16c
  118d6c:	e30700c4 	movw	r0, #28868	; 0x70c4
  118d70:	e3400014 	movt	r0, #20
  118d74:	ebffc806 	bl	10ad94 <sys_arch_assert>
  if (desc == NULL) {
  118d78:	e51b3008 	ldr	r3, [fp, #-8]
  118d7c:	e3530000 	cmp	r3, #0
  118d80:	1a000001 	bne	118d8c <memp_malloc_pool_fn+0x54>
    return NULL;
  118d84:	e3a03000 	mov	r3, #0
  118d88:	ea000004 	b	118da0 <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  118d8c:	e51b2010 	ldr	r2, [fp, #-16]
  118d90:	e51b100c 	ldr	r1, [fp, #-12]
  118d94:	e51b0008 	ldr	r0, [fp, #-8]
  118d98:	ebffff96 	bl	118bf8 <do_memp_malloc_pool_fn>
  118d9c:	e1a03000 	mov	r3, r0
#endif
}
  118da0:	e1a00003 	mov	r0, r3
  118da4:	e24bd004 	sub	sp, fp, #4
  118da8:	e8bd8800 	pop	{fp, pc}

00118dac <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  118dac:	e92d4800 	push	{fp, lr}
  118db0:	e28db004 	add	fp, sp, #4
  118db4:	e24dd018 	sub	sp, sp, #24
  118db8:	e50b0010 	str	r0, [fp, #-16]
  118dbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118dc0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  118dc4:	e51b3010 	ldr	r3, [fp, #-16]
  118dc8:	e3530010 	cmp	r3, #16
  118dcc:	9a000008 	bls	118df4 <memp_malloc_fn+0x48>
  118dd0:	e3070228 	movw	r0, #29224	; 0x7228
  118dd4:	e3400014 	movt	r0, #20
  118dd8:	ebffa8cd 	bl	103114 <rt_kprintf>
  118ddc:	e3001187 	movw	r1, #391	; 0x187
  118de0:	e30700c4 	movw	r0, #28868	; 0x70c4
  118de4:	e3400014 	movt	r0, #20
  118de8:	ebffc7e9 	bl	10ad94 <sys_arch_assert>
  118dec:	e3a03000 	mov	r3, #0
  118df0:	ea000009 	b	118e1c <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  118df4:	e3073080 	movw	r3, #28800	; 0x7080
  118df8:	e3403014 	movt	r3, #20
  118dfc:	e51b2010 	ldr	r2, [fp, #-16]
  118e00:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118e04:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118e08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118e0c:	e1a00003 	mov	r0, r3
  118e10:	ebffff78 	bl	118bf8 <do_memp_malloc_pool_fn>
  118e14:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  118e18:	e51b3008 	ldr	r3, [fp, #-8]
}
  118e1c:	e1a00003 	mov	r0, r3
  118e20:	e24bd004 	sub	sp, fp, #4
  118e24:	e8bd8800 	pop	{fp, pc}

00118e28 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118e28:	e92d4800 	push	{fp, lr}
  118e2c:	e28db004 	add	fp, sp, #4
  118e30:	e24dd010 	sub	sp, sp, #16
  118e34:	e50b0010 	str	r0, [fp, #-16]
  118e38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  118e3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118e40:	e2033003 	and	r3, r3, #3
  118e44:	e3530000 	cmp	r3, #0
  118e48:	0a000006 	beq	118e68 <do_memp_free_pool+0x40>
  118e4c:	e3070248 	movw	r0, #29256	; 0x7248
  118e50:	e3400014 	movt	r0, #20
  118e54:	ebffa8ae 	bl	103114 <rt_kprintf>
  118e58:	e300119d 	movw	r1, #413	; 0x19d
  118e5c:	e30700c4 	movw	r0, #28868	; 0x70c4
  118e60:	e3400014 	movt	r0, #20
  118e64:	ebffc7ca 	bl	10ad94 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  118e68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118e6c:	e243301c 	sub	r3, r3, #28
  118e70:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  118e74:	ebffa4f0 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  118e78:	e51b1010 	ldr	r1, [fp, #-16]
  118e7c:	e51b0008 	ldr	r0, [fp, #-8]
  118e80:	ebfffe7d 	bl	11887c <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  118e84:	e51b1010 	ldr	r1, [fp, #-16]
  118e88:	e51b0008 	ldr	r0, [fp, #-8]
  118e8c:	ebfffeb1 	bl	118958 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  118e90:	e51b3010 	ldr	r3, [fp, #-16]
  118e94:	e5933004 	ldr	r3, [r3, #4]
  118e98:	e1d320b8 	ldrh	r2, [r3, #8]
  118e9c:	e2422001 	sub	r2, r2, #1
  118ea0:	e6ff2072 	uxth	r2, r2
  118ea4:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  118ea8:	e51b3010 	ldr	r3, [fp, #-16]
  118eac:	e5933010 	ldr	r3, [r3, #16]
  118eb0:	e5932000 	ldr	r2, [r3]
  118eb4:	e51b3008 	ldr	r3, [fp, #-8]
  118eb8:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  118ebc:	e51b3010 	ldr	r3, [fp, #-16]
  118ec0:	e5933010 	ldr	r3, [r3, #16]
  118ec4:	e51b2008 	ldr	r2, [fp, #-8]
  118ec8:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  118ecc:	ebffa4e0 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  118ed0:	e320f000 	nop	{0}
  118ed4:	e24bd004 	sub	sp, fp, #4
  118ed8:	e8bd8800 	pop	{fp, pc}

00118edc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118edc:	e92d4800 	push	{fp, lr}
  118ee0:	e28db004 	add	fp, sp, #4
  118ee4:	e24dd008 	sub	sp, sp, #8
  118ee8:	e50b0008 	str	r0, [fp, #-8]
  118eec:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118ef0:	e51b3008 	ldr	r3, [fp, #-8]
  118ef4:	e3530000 	cmp	r3, #0
  118ef8:	1a000006 	bne	118f18 <memp_free_pool+0x3c>
  118efc:	e3070214 	movw	r0, #29204	; 0x7214
  118f00:	e3400014 	movt	r0, #20
  118f04:	ebffa882 	bl	103114 <rt_kprintf>
  118f08:	e30011c6 	movw	r1, #454	; 0x1c6
  118f0c:	e30700c4 	movw	r0, #28868	; 0x70c4
  118f10:	e3400014 	movt	r0, #20
  118f14:	ebffc79e 	bl	10ad94 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  118f18:	e51b3008 	ldr	r3, [fp, #-8]
  118f1c:	e3530000 	cmp	r3, #0
  118f20:	0a000006 	beq	118f40 <memp_free_pool+0x64>
  118f24:	e51b300c 	ldr	r3, [fp, #-12]
  118f28:	e3530000 	cmp	r3, #0
  118f2c:	0a000003 	beq	118f40 <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  118f30:	e51b100c 	ldr	r1, [fp, #-12]
  118f34:	e51b0008 	ldr	r0, [fp, #-8]
  118f38:	ebffffba 	bl	118e28 <do_memp_free_pool>
  118f3c:	ea000000 	b	118f44 <memp_free_pool+0x68>
    return;
  118f40:	e320f000 	nop	{0}
}
  118f44:	e24bd004 	sub	sp, fp, #4
  118f48:	e8bd8800 	pop	{fp, pc}

00118f4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  118f4c:	e92d4800 	push	{fp, lr}
  118f50:	e28db004 	add	fp, sp, #4
  118f54:	e24dd008 	sub	sp, sp, #8
  118f58:	e50b0008 	str	r0, [fp, #-8]
  118f5c:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  118f60:	e51b3008 	ldr	r3, [fp, #-8]
  118f64:	e3530010 	cmp	r3, #16
  118f68:	9a000007 	bls	118f8c <memp_free+0x40>
  118f6c:	e3070268 	movw	r0, #29288	; 0x7268
  118f70:	e3400014 	movt	r0, #20
  118f74:	ebffa866 	bl	103114 <rt_kprintf>
  118f78:	e30011db 	movw	r1, #475	; 0x1db
  118f7c:	e30700c4 	movw	r0, #28868	; 0x70c4
  118f80:	e3400014 	movt	r0, #20
  118f84:	ebffc782 	bl	10ad94 <sys_arch_assert>
  118f88:	ea00000b 	b	118fbc <memp_free+0x70>

  if (mem == NULL) {
  118f8c:	e51b300c 	ldr	r3, [fp, #-12]
  118f90:	e3530000 	cmp	r3, #0
  118f94:	0a000007 	beq	118fb8 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  118f98:	e3073080 	movw	r3, #28800	; 0x7080
  118f9c:	e3403014 	movt	r3, #20
  118fa0:	e51b2008 	ldr	r2, [fp, #-8]
  118fa4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118fa8:	e51b100c 	ldr	r1, [fp, #-12]
  118fac:	e1a00003 	mov	r0, r3
  118fb0:	ebffff9c 	bl	118e28 <do_memp_free_pool>
  118fb4:	ea000000 	b	118fbc <memp_free+0x70>
    return;
  118fb8:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  118fbc:	e24bd004 	sub	sp, fp, #4
  118fc0:	e8bd8800 	pop	{fp, pc}

00118fc4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  118fc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118fc8:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  118fcc:	e320f000 	nop	{0}
  118fd0:	e28bd000 	add	sp, fp, #0
  118fd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  118fd8:	e12fff1e 	bx	lr

00118fdc <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  118fdc:	e92d4800 	push	{fp, lr}
  118fe0:	e28db004 	add	fp, sp, #4
  118fe4:	e24dd008 	sub	sp, sp, #8
  118fe8:	e50b0008 	str	r0, [fp, #-8]
  118fec:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  118ff0:	e51b300c 	ldr	r3, [fp, #-12]
  118ff4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  118ff8:	e2033018 	and	r3, r3, #24
  118ffc:	e3530000 	cmp	r3, #0
  119000:	0a000004 	beq	119018 <netif_input+0x3c>
    return ethernet_input(p, inp);
  119004:	e51b100c 	ldr	r1, [fp, #-12]
  119008:	e51b0008 	ldr	r0, [fp, #-8]
  11900c:	eb003e31 	bl	1288d8 <ethernet_input>
  119010:	e1a03000 	mov	r3, r0
  119014:	ea000003 	b	119028 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  119018:	e51b100c 	ldr	r1, [fp, #-12]
  11901c:	e51b0008 	ldr	r0, [fp, #-8]
  119020:	eb006038 	bl	131108 <ip4_input>
  119024:	e1a03000 	mov	r3, r0
}
  119028:	e1a00003 	mov	r0, r3
  11902c:	e24bd004 	sub	sp, fp, #4
  119030:	e8bd8800 	pop	{fp, pc}

00119034 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  119034:	e92d4800 	push	{fp, lr}
  119038:	e28db004 	add	fp, sp, #4
  11903c:	e24dd010 	sub	sp, sp, #16
  119040:	e50b0008 	str	r0, [fp, #-8]
  119044:	e50b100c 	str	r1, [fp, #-12]
  119048:	e50b2010 	str	r2, [fp, #-16]
  11904c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  119050:	e59b3008 	ldr	r3, [fp, #8]
  119054:	e3530000 	cmp	r3, #0
  119058:	1a000006 	bne	119078 <netif_add+0x44>
  11905c:	e3070284 	movw	r0, #29316	; 0x7284
  119060:	e3400014 	movt	r0, #20
  119064:	ebffa82a 	bl	103114 <rt_kprintf>
  119068:	e3001105 	movw	r1, #261	; 0x105
  11906c:	e307029c 	movw	r0, #29340	; 0x729c
  119070:	e3400014 	movt	r0, #20
  119074:	ebffc746 	bl	10ad94 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  119078:	e51b3008 	ldr	r3, [fp, #-8]
  11907c:	e3a02000 	mov	r2, #0
  119080:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  119084:	e51b3008 	ldr	r3, [fp, #-8]
  119088:	e3a02000 	mov	r2, #0
  11908c:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  119090:	e51b3008 	ldr	r3, [fp, #-8]
  119094:	e3a02000 	mov	r2, #0
  119098:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  11909c:	e51b3008 	ldr	r3, [fp, #-8]
  1190a0:	e3a02000 	mov	r2, #0
  1190a4:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  1190a8:	e51b3008 	ldr	r3, [fp, #-8]
  1190ac:	e2833028 	add	r3, r3, #40	; 0x28
  1190b0:	e3a02008 	mov	r2, #8
  1190b4:	e3a01000 	mov	r1, #0
  1190b8:	e1a00003 	mov	r0, r3
  1190bc:	eb009fa8 	bl	140f64 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  1190c0:	e51b3008 	ldr	r3, [fp, #-8]
  1190c4:	e3a02003 	mov	r2, #3
  1190c8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  1190cc:	e51b3008 	ldr	r3, [fp, #-8]
  1190d0:	e3a02000 	mov	r2, #0
  1190d4:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  1190d8:	e51b3008 	ldr	r3, [fp, #-8]
  1190dc:	e3a02000 	mov	r2, #0
  1190e0:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  1190e4:	e51b3008 	ldr	r3, [fp, #-8]
  1190e8:	e3a02000 	mov	r2, #0
  1190ec:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  1190f0:	e51b3008 	ldr	r3, [fp, #-8]
  1190f4:	e3a02000 	mov	r2, #0
  1190f8:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  1190fc:	e51b3008 	ldr	r3, [fp, #-8]
  119100:	e3a02000 	mov	r2, #0
  119104:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  119108:	e51b3008 	ldr	r3, [fp, #-8]
  11910c:	e59b2004 	ldr	r2, [fp, #4]
  119110:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  119114:	e30e320c 	movw	r3, #57868	; 0xe20c
  119118:	e3403014 	movt	r3, #20
  11911c:	e5d32000 	ldrb	r2, [r3]
  119120:	e2823001 	add	r3, r2, #1
  119124:	e6ef1073 	uxtb	r1, r3
  119128:	e30e320c 	movw	r3, #57868	; 0xe20c
  11912c:	e3403014 	movt	r3, #20
  119130:	e5c31000 	strb	r1, [r3]
  119134:	e51b3008 	ldr	r3, [fp, #-8]
  119138:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  11913c:	e51b3008 	ldr	r3, [fp, #-8]
  119140:	e59b200c 	ldr	r2, [fp, #12]
  119144:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  119148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11914c:	e51b2010 	ldr	r2, [fp, #-16]
  119150:	e51b100c 	ldr	r1, [fp, #-12]
  119154:	e51b0008 	ldr	r0, [fp, #-8]
  119158:	eb00001b 	bl	1191cc <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  11915c:	e59b3008 	ldr	r3, [fp, #8]
  119160:	e51b0008 	ldr	r0, [fp, #-8]
  119164:	e12fff33 	blx	r3
  119168:	e1a03000 	mov	r3, r0
  11916c:	e3530000 	cmp	r3, #0
  119170:	0a000001 	beq	11917c <netif_add+0x148>
    return NULL;
  119174:	e3a03000 	mov	r3, #0
  119178:	ea000010 	b	1191c0 <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  11917c:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119180:	e3403015 	movt	r3, #21
  119184:	e5932000 	ldr	r2, [r3]
  119188:	e51b3008 	ldr	r3, [fp, #-8]
  11918c:	e5832000 	str	r2, [r3]
  netif_list = netif;
  119190:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119194:	e3403015 	movt	r3, #21
  119198:	e51b2008 	ldr	r2, [fp, #-8]
  11919c:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1191a0:	e51b3008 	ldr	r3, [fp, #-8]
  1191a4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1191a8:	e2033020 	and	r3, r3, #32
  1191ac:	e3530000 	cmp	r3, #0
  1191b0:	0a000001 	beq	1191bc <netif_add+0x188>
    igmp_start(netif);
  1191b4:	e51b0008 	ldr	r0, [fp, #-8]
  1191b8:	eb005a99 	bl	12fc24 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  1191bc:	e51b3008 	ldr	r3, [fp, #-8]
}
  1191c0:	e1a00003 	mov	r0, r3
  1191c4:	e24bd004 	sub	sp, fp, #4
  1191c8:	e8bd8800 	pop	{fp, pc}

001191cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  1191cc:	e92d4800 	push	{fp, lr}
  1191d0:	e28db004 	add	fp, sp, #4
  1191d4:	e24dd010 	sub	sp, sp, #16
  1191d8:	e50b0008 	str	r0, [fp, #-8]
  1191dc:	e50b100c 	str	r1, [fp, #-12]
  1191e0:	e50b2010 	str	r2, [fp, #-16]
  1191e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  1191e8:	e51b300c 	ldr	r3, [fp, #-12]
  1191ec:	e3530000 	cmp	r3, #0
  1191f0:	0a000003 	beq	119204 <netif_set_addr+0x38>
  1191f4:	e51b300c 	ldr	r3, [fp, #-12]
  1191f8:	e5933000 	ldr	r3, [r3]
  1191fc:	e3530000 	cmp	r3, #0
  119200:	1a000009 	bne	11922c <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  119204:	e51b100c 	ldr	r1, [fp, #-12]
  119208:	e51b0008 	ldr	r0, [fp, #-8]
  11920c:	eb00009d 	bl	119488 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  119210:	e51b1010 	ldr	r1, [fp, #-16]
  119214:	e51b0008 	ldr	r0, [fp, #-8]
  119218:	eb0000fa 	bl	119608 <netif_set_netmask>
    netif_set_gw(netif, gw);
  11921c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119220:	e51b0008 	ldr	r0, [fp, #-8]
  119224:	eb0000de 	bl	1195a4 <netif_set_gw>
  119228:	ea000008 	b	119250 <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  11922c:	e51b1010 	ldr	r1, [fp, #-16]
  119230:	e51b0008 	ldr	r0, [fp, #-8]
  119234:	eb0000f3 	bl	119608 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119238:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11923c:	e51b0008 	ldr	r0, [fp, #-8]
  119240:	eb0000d7 	bl	1195a4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  119244:	e51b100c 	ldr	r1, [fp, #-12]
  119248:	e51b0008 	ldr	r0, [fp, #-8]
  11924c:	eb00008d 	bl	119488 <netif_set_ipaddr>
  }
}
  119250:	e320f000 	nop	{0}
  119254:	e24bd004 	sub	sp, fp, #4
  119258:	e8bd8800 	pop	{fp, pc}

0011925c <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  11925c:	e92d4800 	push	{fp, lr}
  119260:	e28db004 	add	fp, sp, #4
  119264:	e24dd010 	sub	sp, sp, #16
  119268:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  11926c:	e51b3010 	ldr	r3, [fp, #-16]
  119270:	e3530000 	cmp	r3, #0
  119274:	0a00004e 	beq	1193b4 <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119278:	e51b3010 	ldr	r3, [fp, #-16]
  11927c:	e2833004 	add	r3, r3, #4
  119280:	e5933000 	ldr	r3, [r3]
  119284:	e3530000 	cmp	r3, #0
  119288:	0a00000e 	beq	1192c8 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  11928c:	e51b3010 	ldr	r3, [fp, #-16]
  119290:	e2833004 	add	r3, r3, #4
  119294:	e3a01000 	mov	r1, #0
  119298:	e1a00003 	mov	r0, r3
  11929c:	eb001aec 	bl	11fe54 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1192a0:	e51b3010 	ldr	r3, [fp, #-16]
  1192a4:	e2833004 	add	r3, r3, #4
  1192a8:	e3a01000 	mov	r1, #0
  1192ac:	e1a00003 	mov	r0, r3
  1192b0:	eb003d5c 	bl	128828 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1192b4:	e51b3010 	ldr	r3, [fp, #-16]
  1192b8:	e2833004 	add	r3, r3, #4
  1192bc:	e3a01000 	mov	r1, #0
  1192c0:	e1a00003 	mov	r0, r3
  1192c4:	eb000cb0 	bl	11c58c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1192c8:	e51b3010 	ldr	r3, [fp, #-16]
  1192cc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1192d0:	e2033020 	and	r3, r3, #32
  1192d4:	e3530000 	cmp	r3, #0
  1192d8:	0a000001 	beq	1192e4 <netif_remove+0x88>
    igmp_stop(netif);
  1192dc:	e51b0010 	ldr	r0, [fp, #-16]
  1192e0:	eb005a75 	bl	12fcbc <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  1192e4:	e51b3010 	ldr	r3, [fp, #-16]
  1192e8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1192ec:	e2033001 	and	r3, r3, #1
  1192f0:	e6ef3073 	uxtb	r3, r3
  1192f4:	e3530000 	cmp	r3, #0
  1192f8:	0a000001 	beq	119304 <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  1192fc:	e51b0010 	ldr	r0, [fp, #-16]
  119300:	eb00013a 	bl	1197f0 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  119304:	e30c3a10 	movw	r3, #51728	; 0xca10
  119308:	e3403015 	movt	r3, #21
  11930c:	e5933000 	ldr	r3, [r3]
  119310:	e51b2010 	ldr	r2, [fp, #-16]
  119314:	e1520003 	cmp	r2, r3
  119318:	1a000001 	bne	119324 <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  11931c:	e3a00000 	mov	r0, #0
  119320:	eb0000d1 	bl	11966c <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  119324:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119328:	e3403015 	movt	r3, #21
  11932c:	e5933000 	ldr	r3, [r3]
  119330:	e51b2010 	ldr	r2, [fp, #-16]
  119334:	e1520003 	cmp	r2, r3
  119338:	1a000005 	bne	119354 <netif_remove+0xf8>
    netif_list = netif->next;
  11933c:	e51b3010 	ldr	r3, [fp, #-16]
  119340:	e5932000 	ldr	r2, [r3]
  119344:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119348:	e3403015 	movt	r3, #21
  11934c:	e5832000 	str	r2, [r3]
  119350:	ea000018 	b	1193b8 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119354:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119358:	e3403015 	movt	r3, #21
  11935c:	e5933000 	ldr	r3, [r3]
  119360:	e50b3008 	str	r3, [fp, #-8]
  119364:	ea00000c 	b	11939c <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  119368:	e51b3008 	ldr	r3, [fp, #-8]
  11936c:	e5933000 	ldr	r3, [r3]
  119370:	e51b2010 	ldr	r2, [fp, #-16]
  119374:	e1520003 	cmp	r2, r3
  119378:	1a000004 	bne	119390 <netif_remove+0x134>
        tmp_netif->next = netif->next;
  11937c:	e51b3010 	ldr	r3, [fp, #-16]
  119380:	e5932000 	ldr	r2, [r3]
  119384:	e51b3008 	ldr	r3, [fp, #-8]
  119388:	e5832000 	str	r2, [r3]
        break;
  11938c:	ea000005 	b	1193a8 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119390:	e51b3008 	ldr	r3, [fp, #-8]
  119394:	e5933000 	ldr	r3, [r3]
  119398:	e50b3008 	str	r3, [fp, #-8]
  11939c:	e51b3008 	ldr	r3, [fp, #-8]
  1193a0:	e3530000 	cmp	r3, #0
  1193a4:	1affffef 	bne	119368 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  1193a8:	e51b3008 	ldr	r3, [fp, #-8]
  1193ac:	e3530000 	cmp	r3, #0
  1193b0:	ea000000 	b	1193b8 <netif_remove+0x15c>
    return;
  1193b4:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  1193b8:	e24bd004 	sub	sp, fp, #4
  1193bc:	e8bd8800 	pop	{fp, pc}

001193c0 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  1193c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1193c4:	e28db000 	add	fp, sp, #0
  1193c8:	e24dd014 	sub	sp, sp, #20
  1193cc:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  1193d0:	e51b3010 	ldr	r3, [fp, #-16]
  1193d4:	e3530000 	cmp	r3, #0
  1193d8:	1a000001 	bne	1193e4 <netif_find+0x24>
    return NULL;
  1193dc:	e3a03000 	mov	r3, #0
  1193e0:	ea000024 	b	119478 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  1193e4:	e51b3010 	ldr	r3, [fp, #-16]
  1193e8:	e2833002 	add	r3, r3, #2
  1193ec:	e5d33000 	ldrb	r3, [r3]
  1193f0:	e2433030 	sub	r3, r3, #48	; 0x30
  1193f4:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1193f8:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1193fc:	e3403015 	movt	r3, #21
  119400:	e5933000 	ldr	r3, [r3]
  119404:	e50b3008 	str	r3, [fp, #-8]
  119408:	ea000016 	b	119468 <netif_find+0xa8>
    if (num == netif->num &&
  11940c:	e51b3008 	ldr	r3, [fp, #-8]
  119410:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  119414:	e55b2009 	ldrb	r2, [fp, #-9]
  119418:	e1520003 	cmp	r2, r3
  11941c:	1a00000e 	bne	11945c <netif_find+0x9c>
       name[0] == netif->name[0] &&
  119420:	e51b3010 	ldr	r3, [fp, #-16]
  119424:	e5d32000 	ldrb	r2, [r3]
  119428:	e51b3008 	ldr	r3, [fp, #-8]
  11942c:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  119430:	e1520003 	cmp	r2, r3
  119434:	1a000008 	bne	11945c <netif_find+0x9c>
       name[1] == netif->name[1]) {
  119438:	e51b3010 	ldr	r3, [fp, #-16]
  11943c:	e2833001 	add	r3, r3, #1
  119440:	e5d32000 	ldrb	r2, [r3]
  119444:	e51b3008 	ldr	r3, [fp, #-8]
  119448:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  11944c:	e1520003 	cmp	r2, r3
  119450:	1a000001 	bne	11945c <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  119454:	e51b3008 	ldr	r3, [fp, #-8]
  119458:	ea000006 	b	119478 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  11945c:	e51b3008 	ldr	r3, [fp, #-8]
  119460:	e5933000 	ldr	r3, [r3]
  119464:	e50b3008 	str	r3, [fp, #-8]
  119468:	e51b3008 	ldr	r3, [fp, #-8]
  11946c:	e3530000 	cmp	r3, #0
  119470:	1affffe5 	bne	11940c <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  119474:	e3a03000 	mov	r3, #0
}
  119478:	e1a00003 	mov	r0, r3
  11947c:	e28bd000 	add	sp, fp, #0
  119480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119484:	e12fff1e 	bx	lr

00119488 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  119488:	e92d4800 	push	{fp, lr}
  11948c:	e28db004 	add	fp, sp, #4
  119490:	e24dd010 	sub	sp, sp, #16
  119494:	e50b0010 	str	r0, [fp, #-16]
  119498:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  11949c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1194a0:	e3530000 	cmp	r3, #0
  1194a4:	0a000003 	beq	1194b8 <netif_set_ipaddr+0x30>
  1194a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1194ac:	e5933000 	ldr	r3, [r3]
  1194b0:	e50b3008 	str	r3, [fp, #-8]
  1194b4:	ea000003 	b	1194c8 <netif_set_ipaddr+0x40>
  1194b8:	e309363c 	movw	r3, #38460	; 0x963c
  1194bc:	e3403014 	movt	r3, #20
  1194c0:	e5933000 	ldr	r3, [r3]
  1194c4:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  1194c8:	e51b2008 	ldr	r2, [fp, #-8]
  1194cc:	e51b3010 	ldr	r3, [fp, #-16]
  1194d0:	e2833004 	add	r3, r3, #4
  1194d4:	e5933000 	ldr	r3, [r3]
  1194d8:	e1520003 	cmp	r2, r3
  1194dc:	0a00002d 	beq	119598 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1194e0:	e51b3010 	ldr	r3, [fp, #-16]
  1194e4:	e2833004 	add	r3, r3, #4
  1194e8:	e24b2008 	sub	r2, fp, #8
  1194ec:	e1a01002 	mov	r1, r2
  1194f0:	e1a00003 	mov	r0, r3
  1194f4:	eb001a56 	bl	11fe54 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1194f8:	e51b3010 	ldr	r3, [fp, #-16]
  1194fc:	e2833004 	add	r3, r3, #4
  119500:	e24b2008 	sub	r2, fp, #8
  119504:	e1a01002 	mov	r1, r2
  119508:	e1a00003 	mov	r0, r3
  11950c:	eb003cc5 	bl	128828 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119510:	e51b3010 	ldr	r3, [fp, #-16]
  119514:	e2833004 	add	r3, r3, #4
  119518:	e24b2008 	sub	r2, fp, #8
  11951c:	e1a01002 	mov	r1, r2
  119520:	e1a00003 	mov	r0, r3
  119524:	eb000c18 	bl	11c58c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  119528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11952c:	e3530000 	cmp	r3, #0
  119530:	0a000002 	beq	119540 <netif_set_ipaddr+0xb8>
  119534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119538:	e5933000 	ldr	r3, [r3]
  11953c:	ea000000 	b	119544 <netif_set_ipaddr+0xbc>
  119540:	e3a03000 	mov	r3, #0
  119544:	e51b2010 	ldr	r2, [fp, #-16]
  119548:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  11954c:	e3a01001 	mov	r1, #1
  119550:	e51b0010 	ldr	r0, [fp, #-16]
  119554:	eb000082 	bl	119764 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  119558:	e51b3010 	ldr	r3, [fp, #-16]
  11955c:	e593301c 	ldr	r3, [r3, #28]
  119560:	e3530000 	cmp	r3, #0
  119564:	0a000003 	beq	119578 <netif_set_ipaddr+0xf0>
  119568:	e51b3010 	ldr	r3, [fp, #-16]
  11956c:	e593301c 	ldr	r3, [r3, #28]
  119570:	e51b0010 	ldr	r0, [fp, #-16]
  119574:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  119578:	e51b3010 	ldr	r3, [fp, #-16]
  11957c:	e2833042 	add	r3, r3, #66	; 0x42
  119580:	e1a00003 	mov	r0, r3
  119584:	ebffafe1 	bl	105510 <netdev_get_by_name>
  119588:	e1a03000 	mov	r3, r0
  11958c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119590:	e1a00003 	mov	r0, r3
  119594:	ebffb2ad 	bl	106050 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  119598:	e320f000 	nop	{0}
  11959c:	e24bd004 	sub	sp, fp, #4
  1195a0:	e8bd8800 	pop	{fp, pc}

001195a4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  1195a4:	e92d4800 	push	{fp, lr}
  1195a8:	e28db004 	add	fp, sp, #4
  1195ac:	e24dd008 	sub	sp, sp, #8
  1195b0:	e50b0008 	str	r0, [fp, #-8]
  1195b4:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  1195b8:	e51b300c 	ldr	r3, [fp, #-12]
  1195bc:	e3530000 	cmp	r3, #0
  1195c0:	0a000002 	beq	1195d0 <netif_set_gw+0x2c>
  1195c4:	e51b300c 	ldr	r3, [fp, #-12]
  1195c8:	e5933000 	ldr	r3, [r3]
  1195cc:	ea000000 	b	1195d4 <netif_set_gw+0x30>
  1195d0:	e3a03000 	mov	r3, #0
  1195d4:	e51b2008 	ldr	r2, [fp, #-8]
  1195d8:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  1195dc:	e51b3008 	ldr	r3, [fp, #-8]
  1195e0:	e2833042 	add	r3, r3, #66	; 0x42
  1195e4:	e1a00003 	mov	r0, r3
  1195e8:	ebffafc8 	bl	105510 <netdev_get_by_name>
  1195ec:	e1a03000 	mov	r3, r0
  1195f0:	e51b100c 	ldr	r1, [fp, #-12]
  1195f4:	e1a00003 	mov	r0, r3
  1195f8:	ebffb310 	bl	106240 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  1195fc:	e320f000 	nop	{0}
  119600:	e24bd004 	sub	sp, fp, #4
  119604:	e8bd8800 	pop	{fp, pc}

00119608 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  119608:	e92d4800 	push	{fp, lr}
  11960c:	e28db004 	add	fp, sp, #4
  119610:	e24dd008 	sub	sp, sp, #8
  119614:	e50b0008 	str	r0, [fp, #-8]
  119618:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  11961c:	e51b300c 	ldr	r3, [fp, #-12]
  119620:	e3530000 	cmp	r3, #0
  119624:	0a000002 	beq	119634 <netif_set_netmask+0x2c>
  119628:	e51b300c 	ldr	r3, [fp, #-12]
  11962c:	e5933000 	ldr	r3, [r3]
  119630:	ea000000 	b	119638 <netif_set_netmask+0x30>
  119634:	e3a03000 	mov	r3, #0
  119638:	e51b2008 	ldr	r2, [fp, #-8]
  11963c:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  119640:	e51b3008 	ldr	r3, [fp, #-8]
  119644:	e2833042 	add	r3, r3, #66	; 0x42
  119648:	e1a00003 	mov	r0, r3
  11964c:	ebffafaf 	bl	105510 <netdev_get_by_name>
  119650:	e1a03000 	mov	r3, r0
  119654:	e51b100c 	ldr	r1, [fp, #-12]
  119658:	e1a00003 	mov	r0, r3
  11965c:	ebffb2b5 	bl	106138 <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  119660:	e320f000 	nop	{0}
  119664:	e24bd004 	sub	sp, fp, #4
  119668:	e8bd8800 	pop	{fp, pc}

0011966c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  11966c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119670:	e28db000 	add	fp, sp, #0
  119674:	e24dd00c 	sub	sp, sp, #12
  119678:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  11967c:	e30c3a10 	movw	r3, #51728	; 0xca10
  119680:	e3403015 	movt	r3, #21
  119684:	e51b2008 	ldr	r2, [fp, #-8]
  119688:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  11968c:	e320f000 	nop	{0}
  119690:	e28bd000 	add	sp, fp, #0
  119694:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119698:	e12fff1e 	bx	lr

0011969c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  11969c:	e92d4800 	push	{fp, lr}
  1196a0:	e28db004 	add	fp, sp, #4
  1196a4:	e24dd008 	sub	sp, sp, #8
  1196a8:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  1196ac:	e51b3008 	ldr	r3, [fp, #-8]
  1196b0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1196b4:	e2033001 	and	r3, r3, #1
  1196b8:	e3530000 	cmp	r3, #0
  1196bc:	1a000025 	bne	119758 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  1196c0:	e51b3008 	ldr	r3, [fp, #-8]
  1196c4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1196c8:	e3833001 	orr	r3, r3, #1
  1196cc:	e6ef2073 	uxtb	r2, r3
  1196d0:	e51b3008 	ldr	r3, [fp, #-8]
  1196d4:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  1196d8:	ebffc5c6 	bl	10adf8 <sys_now>
  1196dc:	e1a02000 	mov	r2, r0
  1196e0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1196e4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1196e8:	e0832392 	umull	r2, r3, r2, r3
  1196ec:	e1a021a3 	lsr	r2, r3, #3
  1196f0:	e51b3008 	ldr	r3, [fp, #-8]
  1196f4:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  1196f8:	e51b3008 	ldr	r3, [fp, #-8]
  1196fc:	e593301c 	ldr	r3, [r3, #28]
  119700:	e3530000 	cmp	r3, #0
  119704:	0a000003 	beq	119718 <netif_set_up+0x7c>
  119708:	e51b3008 	ldr	r3, [fp, #-8]
  11970c:	e593301c 	ldr	r3, [r3, #28]
  119710:	e51b0008 	ldr	r0, [fp, #-8]
  119714:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  119718:	e51b3008 	ldr	r3, [fp, #-8]
  11971c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119720:	e2033004 	and	r3, r3, #4
  119724:	e3530000 	cmp	r3, #0
  119728:	0a000002 	beq	119738 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  11972c:	e3a01003 	mov	r1, #3
  119730:	e51b0008 	ldr	r0, [fp, #-8]
  119734:	eb00000a 	bl	119764 <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  119738:	e51b3008 	ldr	r3, [fp, #-8]
  11973c:	e2833042 	add	r3, r3, #66	; 0x42
  119740:	e1a00003 	mov	r0, r3
  119744:	ebffaf71 	bl	105510 <netdev_get_by_name>
  119748:	e1a03000 	mov	r3, r0
  11974c:	e3a01001 	mov	r1, #1
  119750:	e1a00003 	mov	r0, r3
  119754:	ebffb337 	bl	106438 <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119758:	e320f000 	nop	{0}
  11975c:	e24bd004 	sub	sp, fp, #4
  119760:	e8bd8800 	pop	{fp, pc}

00119764 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  119764:	e92d4800 	push	{fp, lr}
  119768:	e28db004 	add	fp, sp, #4
  11976c:	e24dd008 	sub	sp, sp, #8
  119770:	e50b0008 	str	r0, [fp, #-8]
  119774:	e1a03001 	mov	r3, r1
  119778:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  11977c:	e55b3009 	ldrb	r3, [fp, #-9]
  119780:	e2033001 	and	r3, r3, #1
  119784:	e3530000 	cmp	r3, #0
  119788:	0a000015 	beq	1197e4 <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  11978c:	e51b3008 	ldr	r3, [fp, #-8]
  119790:	e2833004 	add	r3, r3, #4
  119794:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119798:	e3530000 	cmp	r3, #0
  11979c:	0a000010 	beq	1197e4 <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  1197a0:	e51b3008 	ldr	r3, [fp, #-8]
  1197a4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1197a8:	e2033008 	and	r3, r3, #8
  1197ac:	e3530000 	cmp	r3, #0
  1197b0:	0a000004 	beq	1197c8 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  1197b4:	e51b3008 	ldr	r3, [fp, #-8]
  1197b8:	e2833004 	add	r3, r3, #4
  1197bc:	e1a01003 	mov	r1, r3
  1197c0:	e51b0008 	ldr	r0, [fp, #-8]
  1197c4:	eb005681 	bl	12f1d0 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  1197c8:	e51b3008 	ldr	r3, [fp, #-8]
  1197cc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1197d0:	e2033020 	and	r3, r3, #32
  1197d4:	e3530000 	cmp	r3, #0
  1197d8:	0a000001 	beq	1197e4 <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  1197dc:	e51b0008 	ldr	r0, [fp, #-8]
  1197e0:	eb00595a 	bl	12fd50 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  1197e4:	e320f000 	nop	{0}
  1197e8:	e24bd004 	sub	sp, fp, #4
  1197ec:	e8bd8800 	pop	{fp, pc}

001197f0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  1197f0:	e92d4800 	push	{fp, lr}
  1197f4:	e28db004 	add	fp, sp, #4
  1197f8:	e24dd008 	sub	sp, sp, #8
  1197fc:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119800:	e51b3008 	ldr	r3, [fp, #-8]
  119804:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119808:	e2033001 	and	r3, r3, #1
  11980c:	e3530000 	cmp	r3, #0
  119810:	0a000024 	beq	1198a8 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119814:	e51b3008 	ldr	r3, [fp, #-8]
  119818:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11981c:	e3c33001 	bic	r3, r3, #1
  119820:	e6ef2073 	uxtb	r2, r3
  119824:	e51b3008 	ldr	r3, [fp, #-8]
  119828:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  11982c:	ebffc571 	bl	10adf8 <sys_now>
  119830:	e1a02000 	mov	r2, r0
  119834:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119838:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  11983c:	e0832392 	umull	r2, r3, r2, r3
  119840:	e1a021a3 	lsr	r2, r3, #3
  119844:	e51b3008 	ldr	r3, [fp, #-8]
  119848:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  11984c:	e51b3008 	ldr	r3, [fp, #-8]
  119850:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119854:	e2033008 	and	r3, r3, #8
  119858:	e3530000 	cmp	r3, #0
  11985c:	0a000001 	beq	119868 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  119860:	e51b0008 	ldr	r0, [fp, #-8]
  119864:	eb00519f 	bl	12dee8 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  119868:	e51b3008 	ldr	r3, [fp, #-8]
  11986c:	e593301c 	ldr	r3, [r3, #28]
  119870:	e3530000 	cmp	r3, #0
  119874:	0a000003 	beq	119888 <netif_set_down+0x98>
  119878:	e51b3008 	ldr	r3, [fp, #-8]
  11987c:	e593301c 	ldr	r3, [r3, #28]
  119880:	e51b0008 	ldr	r0, [fp, #-8]
  119884:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  119888:	e51b3008 	ldr	r3, [fp, #-8]
  11988c:	e2833042 	add	r3, r3, #66	; 0x42
  119890:	e1a00003 	mov	r0, r3
  119894:	ebffaf1d 	bl	105510 <netdev_get_by_name>
  119898:	e1a03000 	mov	r3, r0
  11989c:	e3a01000 	mov	r1, #0
  1198a0:	e1a00003 	mov	r0, r3
  1198a4:	ebffb2e3 	bl	106438 <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  1198a8:	e320f000 	nop	{0}
  1198ac:	e24bd004 	sub	sp, fp, #4
  1198b0:	e8bd8800 	pop	{fp, pc}

001198b4 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  1198b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1198b8:	e28db000 	add	fp, sp, #0
  1198bc:	e24dd00c 	sub	sp, sp, #12
  1198c0:	e50b0008 	str	r0, [fp, #-8]
  1198c4:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  1198c8:	e51b3008 	ldr	r3, [fp, #-8]
  1198cc:	e3530000 	cmp	r3, #0
  1198d0:	0a000002 	beq	1198e0 <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  1198d4:	e51b3008 	ldr	r3, [fp, #-8]
  1198d8:	e51b200c 	ldr	r2, [fp, #-12]
  1198dc:	e583201c 	str	r2, [r3, #28]
  }
}
  1198e0:	e320f000 	nop	{0}
  1198e4:	e28bd000 	add	sp, fp, #0
  1198e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1198ec:	e12fff1e 	bx	lr

001198f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  1198f0:	e92d4800 	push	{fp, lr}
  1198f4:	e28db004 	add	fp, sp, #4
  1198f8:	e24dd008 	sub	sp, sp, #8
  1198fc:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119900:	e51b3008 	ldr	r3, [fp, #-8]
  119904:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119908:	e2033004 	and	r3, r3, #4
  11990c:	e3530000 	cmp	r3, #0
  119910:	1a00001f 	bne	119994 <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119914:	e51b3008 	ldr	r3, [fp, #-8]
  119918:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11991c:	e3833004 	orr	r3, r3, #4
  119920:	e6ef2073 	uxtb	r2, r3
  119924:	e51b3008 	ldr	r3, [fp, #-8]
  119928:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  11992c:	e51b0008 	ldr	r0, [fp, #-8]
  119930:	eb0044e0 	bl	12acb8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  119934:	e51b3008 	ldr	r3, [fp, #-8]
  119938:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11993c:	e2033001 	and	r3, r3, #1
  119940:	e3530000 	cmp	r3, #0
  119944:	0a000002 	beq	119954 <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119948:	e3a01003 	mov	r1, #3
  11994c:	e51b0008 	ldr	r0, [fp, #-8]
  119950:	ebffff83 	bl	119764 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  119954:	e51b3008 	ldr	r3, [fp, #-8]
  119958:	e5933020 	ldr	r3, [r3, #32]
  11995c:	e3530000 	cmp	r3, #0
  119960:	0a000003 	beq	119974 <netif_set_link_up+0x84>
  119964:	e51b3008 	ldr	r3, [fp, #-8]
  119968:	e5933020 	ldr	r3, [r3, #32]
  11996c:	e51b0008 	ldr	r0, [fp, #-8]
  119970:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  119974:	e51b3008 	ldr	r3, [fp, #-8]
  119978:	e2833042 	add	r3, r3, #66	; 0x42
  11997c:	e1a00003 	mov	r0, r3
  119980:	ebffaee2 	bl	105510 <netdev_get_by_name>
  119984:	e1a03000 	mov	r3, r0
  119988:	e3a01001 	mov	r1, #1
  11998c:	e1a00003 	mov	r0, r3
  119990:	ebffb2d8 	bl	1064f8 <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119994:	e320f000 	nop	{0}
  119998:	e24bd004 	sub	sp, fp, #4
  11999c:	e8bd8800 	pop	{fp, pc}

001199a0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  1199a0:	e92d4800 	push	{fp, lr}
  1199a4:	e28db004 	add	fp, sp, #4
  1199a8:	e24dd008 	sub	sp, sp, #8
  1199ac:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  1199b0:	e51b3008 	ldr	r3, [fp, #-8]
  1199b4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199b8:	e2033004 	and	r3, r3, #4
  1199bc:	e3530000 	cmp	r3, #0
  1199c0:	0a000015 	beq	119a1c <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  1199c4:	e51b3008 	ldr	r3, [fp, #-8]
  1199c8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199cc:	e3c33004 	bic	r3, r3, #4
  1199d0:	e6ef2073 	uxtb	r2, r3
  1199d4:	e51b3008 	ldr	r3, [fp, #-8]
  1199d8:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  1199dc:	e51b3008 	ldr	r3, [fp, #-8]
  1199e0:	e5933020 	ldr	r3, [r3, #32]
  1199e4:	e3530000 	cmp	r3, #0
  1199e8:	0a000003 	beq	1199fc <netif_set_link_down+0x5c>
  1199ec:	e51b3008 	ldr	r3, [fp, #-8]
  1199f0:	e5933020 	ldr	r3, [r3, #32]
  1199f4:	e51b0008 	ldr	r0, [fp, #-8]
  1199f8:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  1199fc:	e51b3008 	ldr	r3, [fp, #-8]
  119a00:	e2833042 	add	r3, r3, #66	; 0x42
  119a04:	e1a00003 	mov	r0, r3
  119a08:	ebffaec0 	bl	105510 <netdev_get_by_name>
  119a0c:	e1a03000 	mov	r3, r0
  119a10:	e3a01000 	mov	r1, #0
  119a14:	e1a00003 	mov	r0, r3
  119a18:	ebffb2b6 	bl	1064f8 <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119a1c:	e320f000 	nop	{0}
  119a20:	e24bd004 	sub	sp, fp, #4
  119a24:	e8bd8800 	pop	{fp, pc}

00119a28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  119a28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119a2c:	e28db000 	add	fp, sp, #0
  119a30:	e24dd00c 	sub	sp, sp, #12
  119a34:	e50b0008 	str	r0, [fp, #-8]
  119a38:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119a3c:	e51b3008 	ldr	r3, [fp, #-8]
  119a40:	e3530000 	cmp	r3, #0
  119a44:	0a000002 	beq	119a54 <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119a48:	e51b3008 	ldr	r3, [fp, #-8]
  119a4c:	e51b200c 	ldr	r2, [fp, #-12]
  119a50:	e5832020 	str	r2, [r3, #32]
  }
}
  119a54:	e320f000 	nop	{0}
  119a58:	e28bd000 	add	sp, fp, #0
  119a5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119a60:	e12fff1e 	bx	lr

00119a64 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119a64:	e92d4800 	push	{fp, lr}
  119a68:	e28db004 	add	fp, sp, #4
  119a6c:	e24dd018 	sub	sp, sp, #24
  119a70:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119a74:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119a78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119a7c:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119a80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119a84:	e1d330b8 	ldrh	r3, [r3, #8]
  119a88:	e3a02000 	mov	r2, #0
  119a8c:	e1a01003 	mov	r1, r3
  119a90:	e3a00002 	mov	r0, #2
  119a94:	eb000133 	bl	119f68 <pbuf_alloc>
  119a98:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119a9c:	e51b3010 	ldr	r3, [fp, #-16]
  119aa0:	e3530000 	cmp	r3, #0
  119aa4:	1a000016 	bne	119b04 <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119aa8:	e30c3a18 	movw	r3, #51736	; 0xca18
  119aac:	e3403015 	movt	r3, #21
  119ab0:	e1d330bc 	ldrh	r3, [r3, #12]
  119ab4:	e2833001 	add	r3, r3, #1
  119ab8:	e6ff2073 	uxth	r2, r3
  119abc:	e30c3a18 	movw	r3, #51736	; 0xca18
  119ac0:	e3403015 	movt	r3, #21
  119ac4:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119ac8:	e30c3a18 	movw	r3, #51736	; 0xca18
  119acc:	e3403015 	movt	r3, #21
  119ad0:	e1d330b6 	ldrh	r3, [r3, #6]
  119ad4:	e2833001 	add	r3, r3, #1
  119ad8:	e6ff2073 	uxth	r2, r3
  119adc:	e30c3a18 	movw	r3, #51736	; 0xca18
  119ae0:	e3403015 	movt	r3, #21
  119ae4:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119ae8:	e51b300c 	ldr	r3, [fp, #-12]
  119aec:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119af0:	e2832001 	add	r2, r3, #1
  119af4:	e51b300c 	ldr	r3, [fp, #-12]
  119af8:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119afc:	e3e03000 	mvn	r3, #0
  119b00:	ea000063 	b	119c94 <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119b04:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119b08:	e51b0010 	ldr	r0, [fp, #-16]
  119b0c:	eb000571 	bl	11b0d8 <pbuf_copy>
  119b10:	e1a03000 	mov	r3, r0
  119b14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119b18:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119b1c:	e3530000 	cmp	r3, #0
  119b20:	0a000018 	beq	119b88 <netif_loop_output+0x124>
    pbuf_free(r);
  119b24:	e51b0010 	ldr	r0, [fp, #-16]
  119b28:	eb000415 	bl	11ab84 <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119b2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  119b30:	e3403015 	movt	r3, #21
  119b34:	e1d330bc 	ldrh	r3, [r3, #12]
  119b38:	e2833001 	add	r3, r3, #1
  119b3c:	e6ff2073 	uxth	r2, r3
  119b40:	e30c3a18 	movw	r3, #51736	; 0xca18
  119b44:	e3403015 	movt	r3, #21
  119b48:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119b4c:	e30c3a18 	movw	r3, #51736	; 0xca18
  119b50:	e3403015 	movt	r3, #21
  119b54:	e1d330b6 	ldrh	r3, [r3, #6]
  119b58:	e2833001 	add	r3, r3, #1
  119b5c:	e6ff2073 	uxth	r2, r3
  119b60:	e30c3a18 	movw	r3, #51736	; 0xca18
  119b64:	e3403015 	movt	r3, #21
  119b68:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119b6c:	e51b300c 	ldr	r3, [fp, #-12]
  119b70:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119b74:	e2832001 	add	r2, r3, #1
  119b78:	e51b300c 	ldr	r3, [fp, #-12]
  119b7c:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119b80:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119b84:	ea000042 	b	119c94 <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119b88:	e51b3010 	ldr	r3, [fp, #-16]
  119b8c:	e50b3008 	str	r3, [fp, #-8]
  119b90:	ea000002 	b	119ba0 <netif_loop_output+0x13c>
  119b94:	e51b3008 	ldr	r3, [fp, #-8]
  119b98:	e5933000 	ldr	r3, [r3]
  119b9c:	e50b3008 	str	r3, [fp, #-8]
  119ba0:	e51b3008 	ldr	r3, [fp, #-8]
  119ba4:	e5933000 	ldr	r3, [r3]
  119ba8:	e3530000 	cmp	r3, #0
  119bac:	1afffff8 	bne	119b94 <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119bb0:	ebffa1a1 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119bb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119bb8:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119bbc:	e3530000 	cmp	r3, #0
  119bc0:	0a000012 	beq	119c10 <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119bc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119bc8:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119bcc:	e3530000 	cmp	r3, #0
  119bd0:	1a000006 	bne	119bf0 <netif_loop_output+0x18c>
  119bd4:	e30702cc 	movw	r0, #29388	; 0x72cc
  119bd8:	e3400014 	movt	r0, #20
  119bdc:	ebffa54c 	bl	103114 <rt_kprintf>
  119be0:	e3001382 	movw	r1, #898	; 0x382
  119be4:	e307029c 	movw	r0, #29340	; 0x729c
  119be8:	e3400014 	movt	r0, #20
  119bec:	ebffc468 	bl	10ad94 <sys_arch_assert>
    netif->loop_last->next = r;
  119bf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119bf4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119bf8:	e51b2010 	ldr	r2, [fp, #-16]
  119bfc:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c04:	e51b2008 	ldr	r2, [fp, #-8]
  119c08:	e5832084 	str	r2, [r3, #132]	; 0x84
  119c0c:	ea000005 	b	119c28 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119c10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c14:	e51b2010 	ldr	r2, [fp, #-16]
  119c18:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119c1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c20:	e51b2008 	ldr	r2, [fp, #-8]
  119c24:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119c28:	ebffa189 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119c2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  119c30:	e3403015 	movt	r3, #21
  119c34:	e1d330b0 	ldrh	r3, [r3]
  119c38:	e2833001 	add	r3, r3, #1
  119c3c:	e6ff2073 	uxth	r2, r3
  119c40:	e30c3a18 	movw	r3, #51736	; 0xca18
  119c44:	e3403015 	movt	r3, #21
  119c48:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119c4c:	e51b300c 	ldr	r3, [fp, #-12]
  119c50:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119c54:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119c58:	e1d220b8 	ldrh	r2, [r2, #8]
  119c5c:	e0832002 	add	r2, r3, r2
  119c60:	e51b300c 	ldr	r3, [fp, #-12]
  119c64:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119c68:	e51b300c 	ldr	r3, [fp, #-12]
  119c6c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119c70:	e2832001 	add	r2, r3, #1
  119c74:	e51b300c 	ldr	r3, [fp, #-12]
  119c78:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119c7c:	e3a02000 	mov	r2, #0
  119c80:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119c84:	e3090ca0 	movw	r0, #40096	; 0x9ca0
  119c88:	e3400011 	movt	r0, #17
  119c8c:	ebfff084 	bl	115ea4 <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119c90:	e3a03000 	mov	r3, #0
}
  119c94:	e1a00003 	mov	r0, r3
  119c98:	e24bd004 	sub	sp, fp, #4
  119c9c:	e8bd8800 	pop	{fp, pc}

00119ca0 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119ca0:	e92d4800 	push	{fp, lr}
  119ca4:	e28db004 	add	fp, sp, #4
  119ca8:	e24dd018 	sub	sp, sp, #24
  119cac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119cb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cb4:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119cb8:	ebffa15f 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119cbc:	ea000056 	b	119e1c <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119cc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cc4:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119cc8:	e50b3008 	str	r3, [fp, #-8]
  119ccc:	e51b3008 	ldr	r3, [fp, #-8]
  119cd0:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  119cd4:	ea00000d 	b	119d10 <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  119cd8:	e51b3008 	ldr	r3, [fp, #-8]
  119cdc:	e5933000 	ldr	r3, [r3]
  119ce0:	e3530000 	cmp	r3, #0
  119ce4:	1a000006 	bne	119d04 <netif_poll+0x64>
  119ce8:	e30702f8 	movw	r0, #29432	; 0x72f8
  119cec:	e3400014 	movt	r0, #20
  119cf0:	ebffa507 	bl	103114 <rt_kprintf>
  119cf4:	e30013ca 	movw	r1, #970	; 0x3ca
  119cf8:	e307029c 	movw	r0, #29340	; 0x729c
  119cfc:	e3400014 	movt	r0, #20
  119d00:	ebffc423 	bl	10ad94 <sys_arch_assert>
      in_end = in_end->next;
  119d04:	e51b3008 	ldr	r3, [fp, #-8]
  119d08:	e5933000 	ldr	r3, [r3]
  119d0c:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  119d10:	e51b3008 	ldr	r3, [fp, #-8]
  119d14:	e1d320ba 	ldrh	r2, [r3, #10]
  119d18:	e51b3008 	ldr	r3, [fp, #-8]
  119d1c:	e1d330b8 	ldrh	r3, [r3, #8]
  119d20:	e1520003 	cmp	r2, r3
  119d24:	1affffeb 	bne	119cd8 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  119d28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d2c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119d30:	e51b2008 	ldr	r2, [fp, #-8]
  119d34:	e1520003 	cmp	r2, r3
  119d38:	1a000007 	bne	119d5c <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  119d3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d40:	e3a02000 	mov	r2, #0
  119d44:	e5832084 	str	r2, [r3, #132]	; 0x84
  119d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d4c:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  119d50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d54:	e5832080 	str	r2, [r3, #128]	; 0x80
  119d58:	ea00000e 	b	119d98 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  119d5c:	e51b3008 	ldr	r3, [fp, #-8]
  119d60:	e5932000 	ldr	r2, [r3]
  119d64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d68:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  119d6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d70:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119d74:	e3530000 	cmp	r3, #0
  119d78:	1a000006 	bne	119d98 <netif_poll+0xf8>
  119d7c:	e3070328 	movw	r0, #29480	; 0x7328
  119d80:	e3400014 	movt	r0, #20
  119d84:	ebffa4e2 	bl	103114 <rt_kprintf>
  119d88:	e30013de 	movw	r1, #990	; 0x3de
  119d8c:	e307029c 	movw	r0, #29340	; 0x729c
  119d90:	e3400014 	movt	r0, #20
  119d94:	ebffc3fe 	bl	10ad94 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  119d98:	e51b3008 	ldr	r3, [fp, #-8]
  119d9c:	e3a02000 	mov	r2, #0
  119da0:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  119da4:	ebffa12a 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  119da8:	e30c3a18 	movw	r3, #51736	; 0xca18
  119dac:	e3403015 	movt	r3, #21
  119db0:	e1d330b2 	ldrh	r3, [r3, #2]
  119db4:	e2833001 	add	r3, r3, #1
  119db8:	e6ff2073 	uxth	r2, r3
  119dbc:	e30c3a18 	movw	r3, #51736	; 0xca18
  119dc0:	e3403015 	movt	r3, #21
  119dc4:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  119dc8:	e51b300c 	ldr	r3, [fp, #-12]
  119dcc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  119dd0:	e51b2010 	ldr	r2, [fp, #-16]
  119dd4:	e1d220b8 	ldrh	r2, [r2, #8]
  119dd8:	e0832002 	add	r2, r3, r2
  119ddc:	e51b300c 	ldr	r3, [fp, #-12]
  119de0:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  119de4:	e51b300c 	ldr	r3, [fp, #-12]
  119de8:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  119dec:	e2832001 	add	r2, r3, #1
  119df0:	e51b300c 	ldr	r3, [fp, #-12]
  119df4:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  119df8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119dfc:	e51b0010 	ldr	r0, [fp, #-16]
  119e00:	eb005cc0 	bl	131108 <ip4_input>
  119e04:	e1a03000 	mov	r3, r0
  119e08:	e3530000 	cmp	r3, #0
  119e0c:	0a000001 	beq	119e18 <netif_poll+0x178>
      pbuf_free(in);
  119e10:	e51b0010 	ldr	r0, [fp, #-16]
  119e14:	eb00035a 	bl	11ab84 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  119e18:	ebffa107 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119e1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119e20:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119e24:	e3530000 	cmp	r3, #0
  119e28:	1affffa4 	bne	119cc0 <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  119e2c:	ebffa108 	bl	102254 <rt_exit_critical>
}
  119e30:	e320f000 	nop	{0}
  119e34:	e24bd004 	sub	sp, fp, #4
  119e38:	e8bd8800 	pop	{fp, pc}

00119e3c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  119e3c:	e92d4800 	push	{fp, lr}
  119e40:	e28db004 	add	fp, sp, #4
  119e44:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  119e48:	ebffa0fb 	bl	10223c <rt_enter_critical>
  119e4c:	e30c3a14 	movw	r3, #51732	; 0xca14
  119e50:	e3403015 	movt	r3, #21
  119e54:	e3a02000 	mov	r2, #0
  119e58:	e5c32000 	strb	r2, [r3]
  119e5c:	ebffa0fc 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119e60:	e30c3c08 	movw	r3, #52232	; 0xcc08
  119e64:	e3403015 	movt	r3, #21
  119e68:	e5933000 	ldr	r3, [r3]
  119e6c:	e50b3008 	str	r3, [fp, #-8]
  119e70:	ea00000e 	b	119eb0 <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  119e74:	e51b3008 	ldr	r3, [fp, #-8]
  119e78:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e7c:	e3530000 	cmp	r3, #0
  119e80:	0a000007 	beq	119ea4 <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  119e84:	e51b3008 	ldr	r3, [fp, #-8]
  119e88:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e8c:	e1a00003 	mov	r0, r3
  119e90:	eb00149d 	bl	11f10c <tcp_segs_free>
      pcb->ooseq = NULL;
  119e94:	e51b3008 	ldr	r3, [fp, #-8]
  119e98:	e3a02000 	mov	r2, #0
  119e9c:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  119ea0:	ea000005 	b	119ebc <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119ea4:	e51b3008 	ldr	r3, [fp, #-8]
  119ea8:	e593300c 	ldr	r3, [r3, #12]
  119eac:	e50b3008 	str	r3, [fp, #-8]
  119eb0:	e51b3008 	ldr	r3, [fp, #-8]
  119eb4:	e3530000 	cmp	r3, #0
  119eb8:	1affffed 	bne	119e74 <pbuf_free_ooseq+0x38>
    }
  }
}
  119ebc:	e24bd004 	sub	sp, fp, #4
  119ec0:	e8bd8800 	pop	{fp, pc}

00119ec4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  119ec4:	e92d4800 	push	{fp, lr}
  119ec8:	e28db004 	add	fp, sp, #4
  119ecc:	e24dd008 	sub	sp, sp, #8
  119ed0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  119ed4:	ebffffd8 	bl	119e3c <pbuf_free_ooseq>
}
  119ed8:	e320f000 	nop	{0}
  119edc:	e24bd004 	sub	sp, fp, #4
  119ee0:	e8bd8800 	pop	{fp, pc}

00119ee4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  119ee4:	e92d4800 	push	{fp, lr}
  119ee8:	e28db004 	add	fp, sp, #4
  119eec:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  119ef0:	ebffa0d1 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  119ef4:	e30c3a14 	movw	r3, #51732	; 0xca14
  119ef8:	e3403015 	movt	r3, #21
  119efc:	e5d33000 	ldrb	r3, [r3]
  119f00:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  119f04:	e30c3a14 	movw	r3, #51732	; 0xca14
  119f08:	e3403015 	movt	r3, #21
  119f0c:	e3a02001 	mov	r2, #1
  119f10:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  119f14:	ebffa0ce 	bl	102254 <rt_exit_critical>

  if (!queued) {
  119f18:	e55b3005 	ldrb	r3, [fp, #-5]
  119f1c:	e3530000 	cmp	r3, #0
  119f20:	1a00000d 	bne	119f5c <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  119f24:	e3a02000 	mov	r2, #0
  119f28:	e3a01000 	mov	r1, #0
  119f2c:	e3090ec4 	movw	r0, #40644	; 0x9ec4
  119f30:	e3400011 	movt	r0, #17
  119f34:	ebffefda 	bl	115ea4 <tcpip_callback_with_block>
  119f38:	e1a03000 	mov	r3, r0
  119f3c:	e3530000 	cmp	r3, #0
  119f40:	0a000005 	beq	119f5c <pbuf_pool_is_empty+0x78>
  119f44:	ebffa0bc 	bl	10223c <rt_enter_critical>
  119f48:	e30c3a14 	movw	r3, #51732	; 0xca14
  119f4c:	e3403015 	movt	r3, #21
  119f50:	e3a02000 	mov	r2, #0
  119f54:	e5c32000 	strb	r2, [r3]
  119f58:	ebffa0bd 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  119f5c:	e320f000 	nop	{0}
  119f60:	e24bd004 	sub	sp, fp, #4
  119f64:	e8bd8800 	pop	{fp, pc}

00119f68 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  119f68:	e92d4800 	push	{fp, lr}
  119f6c:	e28db004 	add	fp, sp, #4
  119f70:	e24dd028 	sub	sp, sp, #40	; 0x28
  119f74:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  119f78:	e1a03001 	mov	r3, r1
  119f7c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  119f80:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  119f84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  119f88:	e3530004 	cmp	r3, #4
  119f8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  119f90:	ea000013 	b	119fe4 <pbuf_alloc+0x7c>
  119f94:	00119fa8 	.word	0x00119fa8
  119f98:	00119fb4 	.word	0x00119fb4
  119f9c:	00119fc0 	.word	0x00119fc0
  119fa0:	00119fcc 	.word	0x00119fcc
  119fa4:	00119fd8 	.word	0x00119fd8
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  119fa8:	e3a03038 	mov	r3, #56	; 0x38
  119fac:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119fb0:	ea000014 	b	11a008 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  119fb4:	e3a03024 	mov	r3, #36	; 0x24
  119fb8:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119fbc:	ea000011 	b	11a008 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  119fc0:	e3a03010 	mov	r3, #16
  119fc4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119fc8:	ea00000e 	b	11a008 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  119fcc:	e3a03000 	mov	r3, #0
  119fd0:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119fd4:	ea00000b 	b	11a008 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  119fd8:	e3a03000 	mov	r3, #0
  119fdc:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119fe0:	ea000008 	b	11a008 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  119fe4:	e3070350 	movw	r0, #29520	; 0x7350
  119fe8:	e3400014 	movt	r0, #20
  119fec:	ebffa448 	bl	103114 <rt_kprintf>
  119ff0:	e3001117 	movw	r1, #279	; 0x117
  119ff4:	e307036c 	movw	r0, #29548	; 0x736c
  119ff8:	e3400014 	movt	r0, #20
  119ffc:	ebffc364 	bl	10ad94 <sys_arch_assert>
    return NULL;
  11a000:	e3a03000 	mov	r3, #0
  11a004:	ea000139 	b	11a4f0 <pbuf_alloc+0x588>
  }

  switch (type) {
  11a008:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a00c:	e3530003 	cmp	r3, #3
  11a010:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a014:	ea000124 	b	11a4ac <pbuf_alloc+0x544>
  11a018:	0011a334 	.word	0x0011a334
  11a01c:	0011a438 	.word	0x0011a438
  11a020:	0011a438 	.word	0x0011a438
  11a024:	0011a028 	.word	0x0011a028
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a028:	e300211e 	movw	r2, #286	; 0x11e
  11a02c:	e307136c 	movw	r1, #29548	; 0x736c
  11a030:	e3401014 	movt	r1, #20
  11a034:	e3a00010 	mov	r0, #16
  11a038:	ebfffb5b 	bl	118dac <memp_malloc_fn>
  11a03c:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a040:	e51b3008 	ldr	r3, [fp, #-8]
  11a044:	e3530000 	cmp	r3, #0
  11a048:	1a000002 	bne	11a058 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a04c:	ebffffa4 	bl	119ee4 <pbuf_pool_is_empty>
      return NULL;
  11a050:	e3a03000 	mov	r3, #0
  11a054:	ea000125 	b	11a4f0 <pbuf_alloc+0x588>
    }
    p->type = type;
  11a058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a05c:	e6ef2073 	uxtb	r2, r3
  11a060:	e51b3008 	ldr	r3, [fp, #-8]
  11a064:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a068:	e51b3008 	ldr	r3, [fp, #-8]
  11a06c:	e3a02000 	mov	r2, #0
  11a070:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a074:	e15b30be 	ldrh	r3, [fp, #-14]
  11a078:	e2833010 	add	r3, r3, #16
  11a07c:	e51b2008 	ldr	r2, [fp, #-8]
  11a080:	e0823003 	add	r3, r2, r3
  11a084:	e2833003 	add	r3, r3, #3
  11a088:	e3c33003 	bic	r3, r3, #3
  11a08c:	e1a02003 	mov	r2, r3
  11a090:	e51b3008 	ldr	r3, [fp, #-8]
  11a094:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a098:	e51b3008 	ldr	r3, [fp, #-8]
  11a09c:	e5933004 	ldr	r3, [r3, #4]
  11a0a0:	e2033003 	and	r3, r3, #3
  11a0a4:	e3530000 	cmp	r3, #0
  11a0a8:	0a000006 	beq	11a0c8 <pbuf_alloc+0x160>
  11a0ac:	e3070398 	movw	r0, #29592	; 0x7398
  11a0b0:	e3400014 	movt	r0, #20
  11a0b4:	ebffa416 	bl	103114 <rt_kprintf>
  11a0b8:	e300112a 	movw	r1, #298	; 0x12a
  11a0bc:	e307036c 	movw	r0, #29548	; 0x736c
  11a0c0:	e3400014 	movt	r0, #20
  11a0c4:	ebffc332 	bl	10ad94 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a0c8:	e51b3008 	ldr	r3, [fp, #-8]
  11a0cc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a0d0:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a0d4:	e15b30be 	ldrh	r3, [fp, #-14]
  11a0d8:	e2833003 	add	r3, r3, #3
  11a0dc:	e3c33003 	bic	r3, r3, #3
  11a0e0:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a0e4:	e283300c 	add	r3, r3, #12
  11a0e8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a0ec:	e1530002 	cmp	r3, r2
  11a0f0:	31a03003 	movcc	r3, r3
  11a0f4:	21a03002 	movcs	r3, r2
  11a0f8:	e6ff2073 	uxth	r2, r3
  11a0fc:	e51b3008 	ldr	r3, [fp, #-8]
  11a100:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a104:	e51b3008 	ldr	r3, [fp, #-8]
  11a108:	e5933004 	ldr	r3, [r3, #4]
  11a10c:	e51b2008 	ldr	r2, [fp, #-8]
  11a110:	e1d220ba 	ldrh	r2, [r2, #10]
  11a114:	e0832002 	add	r2, r3, r2
  11a118:	e51b3008 	ldr	r3, [fp, #-8]
  11a11c:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a120:	e283300c 	add	r3, r3, #12
  11a124:	e1520003 	cmp	r2, r3
  11a128:	9a000006 	bls	11a148 <pbuf_alloc+0x1e0>
  11a12c:	e30703c8 	movw	r0, #29640	; 0x73c8
  11a130:	e3400014 	movt	r0, #20
  11a134:	ebffa3f6 	bl	103114 <rt_kprintf>
  11a138:	e3001131 	movw	r1, #305	; 0x131
  11a13c:	e307036c 	movw	r0, #29548	; 0x736c
  11a140:	e3400014 	movt	r0, #20
  11a144:	ebffc312 	bl	10ad94 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a148:	e15b30be 	ldrh	r3, [fp, #-14]
  11a14c:	e2833003 	add	r3, r3, #3
  11a150:	e3c33003 	bic	r3, r3, #3
  11a154:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a158:	e1530002 	cmp	r3, r2
  11a15c:	1a000006 	bne	11a17c <pbuf_alloc+0x214>
  11a160:	e30703fc 	movw	r0, #29692	; 0x73fc
  11a164:	e3400014 	movt	r0, #20
  11a168:	ebffa3e9 	bl	103114 <rt_kprintf>
  11a16c:	e3001133 	movw	r1, #307	; 0x133
  11a170:	e307036c 	movw	r0, #29548	; 0x736c
  11a174:	e3400014 	movt	r0, #20
  11a178:	ebffc305 	bl	10ad94 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a17c:	e51b3008 	ldr	r3, [fp, #-8]
  11a180:	e3a02001 	mov	r2, #1
  11a184:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a188:	e51b3008 	ldr	r3, [fp, #-8]
  11a18c:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a190:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a194:	e51b2008 	ldr	r2, [fp, #-8]
  11a198:	e1d220ba 	ldrh	r2, [r2, #10]
  11a19c:	e0433002 	sub	r3, r3, r2
  11a1a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a1a4:	ea00005e 	b	11a324 <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a1a8:	e300213f 	movw	r2, #319	; 0x13f
  11a1ac:	e307136c 	movw	r1, #29548	; 0x736c
  11a1b0:	e3401014 	movt	r1, #20
  11a1b4:	e3a00010 	mov	r0, #16
  11a1b8:	ebfffafb 	bl	118dac <memp_malloc_fn>
  11a1bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a1c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1c4:	e3530000 	cmp	r3, #0
  11a1c8:	1a000004 	bne	11a1e0 <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a1cc:	ebffff44 	bl	119ee4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a1d0:	e51b0008 	ldr	r0, [fp, #-8]
  11a1d4:	eb00026a 	bl	11ab84 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a1d8:	e3a03000 	mov	r3, #0
  11a1dc:	ea0000c3 	b	11a4f0 <pbuf_alloc+0x588>
      }
      q->type = type;
  11a1e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a1e4:	e6ef2073 	uxtb	r2, r3
  11a1e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1ec:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a1f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1f4:	e3a02000 	mov	r2, #0
  11a1f8:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a1fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a200:	e3a02000 	mov	r2, #0
  11a204:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a208:	e51b300c 	ldr	r3, [fp, #-12]
  11a20c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a210:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a214:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a218:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a21c:	e1530002 	cmp	r3, r2
  11a220:	da000006 	ble	11a240 <pbuf_alloc+0x2d8>
  11a224:	e3070430 	movw	r0, #29744	; 0x7430
  11a228:	e3400014 	movt	r0, #20
  11a22c:	ebffa3b8 	bl	103114 <rt_kprintf>
  11a230:	e300114d 	movw	r1, #333	; 0x14d
  11a234:	e307036c 	movw	r0, #29548	; 0x736c
  11a238:	e3400014 	movt	r0, #20
  11a23c:	ebffc2d4 	bl	10ad94 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a240:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a244:	e6ff2073 	uxth	r2, r3
  11a248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a24c:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a254:	e6ff3073 	uxth	r3, r3
  11a258:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a25c:	e1530002 	cmp	r3, r2
  11a260:	31a03003 	movcc	r3, r3
  11a264:	21a03002 	movcs	r3, r2
  11a268:	e6ff2073 	uxth	r2, r3
  11a26c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a270:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a278:	e2832010 	add	r2, r3, #16
  11a27c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a280:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a288:	e5933004 	ldr	r3, [r3, #4]
  11a28c:	e2033003 	and	r3, r3, #3
  11a290:	e3530000 	cmp	r3, #0
  11a294:	0a000006 	beq	11a2b4 <pbuf_alloc+0x34c>
  11a298:	e3070444 	movw	r0, #29764	; 0x7444
  11a29c:	e3400014 	movt	r0, #20
  11a2a0:	ebffa39b 	bl	103114 <rt_kprintf>
  11a2a4:	e3001153 	movw	r1, #339	; 0x153
  11a2a8:	e307036c 	movw	r0, #29548	; 0x736c
  11a2ac:	e3400014 	movt	r0, #20
  11a2b0:	ebffc2b7 	bl	10ad94 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a2b4:	e51b3008 	ldr	r3, [fp, #-8]
  11a2b8:	e5933004 	ldr	r3, [r3, #4]
  11a2bc:	e51b2008 	ldr	r2, [fp, #-8]
  11a2c0:	e1d220ba 	ldrh	r2, [r2, #10]
  11a2c4:	e0832002 	add	r2, r3, r2
  11a2c8:	e51b3008 	ldr	r3, [fp, #-8]
  11a2cc:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a2d0:	e283300c 	add	r3, r3, #12
  11a2d4:	e1520003 	cmp	r2, r3
  11a2d8:	9a000006 	bls	11a2f8 <pbuf_alloc+0x390>
  11a2dc:	e30703c8 	movw	r0, #29640	; 0x73c8
  11a2e0:	e3400014 	movt	r0, #20
  11a2e4:	ebffa38a 	bl	103114 <rt_kprintf>
  11a2e8:	e3001156 	movw	r1, #342	; 0x156
  11a2ec:	e307036c 	movw	r0, #29548	; 0x736c
  11a2f0:	e3400014 	movt	r0, #20
  11a2f4:	ebffc2a6 	bl	10ad94 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a2f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2fc:	e3a02001 	mov	r2, #1
  11a300:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a304:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a308:	e1d330ba 	ldrh	r3, [r3, #10]
  11a30c:	e1a02003 	mov	r2, r3
  11a310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a314:	e0433002 	sub	r3, r3, r2
  11a318:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a31c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a320:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a324:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a328:	e3530000 	cmp	r3, #0
  11a32c:	caffff9d 	bgt	11a1a8 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a330:	ea000067 	b	11a4d4 <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a334:	e15b30be 	ldrh	r3, [fp, #-14]
  11a338:	e2833013 	add	r3, r3, #19
  11a33c:	e6ff3073 	uxth	r3, r3
  11a340:	e3c33003 	bic	r3, r3, #3
  11a344:	e6ff2073 	uxth	r2, r3
  11a348:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a34c:	e2833003 	add	r3, r3, #3
  11a350:	e6ff3073 	uxth	r3, r3
  11a354:	e3c33003 	bic	r3, r3, #3
  11a358:	e6ff3073 	uxth	r3, r3
  11a35c:	e0823003 	add	r3, r2, r3
  11a360:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a364:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a368:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a36c:	e2833003 	add	r3, r3, #3
  11a370:	e3c33003 	bic	r3, r3, #3
  11a374:	e1520003 	cmp	r2, r3
  11a378:	2a000001 	bcs	11a384 <pbuf_alloc+0x41c>
        return NULL;
  11a37c:	e3a03000 	mov	r3, #0
  11a380:	ea00005a 	b	11a4f0 <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a384:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a388:	e1a00003 	mov	r0, r3
  11a38c:	ebffc2c1 	bl	10ae98 <mem_malloc>
  11a390:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a394:	e51b3008 	ldr	r3, [fp, #-8]
  11a398:	e3530000 	cmp	r3, #0
  11a39c:	1a000001 	bne	11a3a8 <pbuf_alloc+0x440>
      return NULL;
  11a3a0:	e3a03000 	mov	r3, #0
  11a3a4:	ea000051 	b	11a4f0 <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a3a8:	e15b30be 	ldrh	r3, [fp, #-14]
  11a3ac:	e2833010 	add	r3, r3, #16
  11a3b0:	e51b2008 	ldr	r2, [fp, #-8]
  11a3b4:	e0823003 	add	r3, r2, r3
  11a3b8:	e2833003 	add	r3, r3, #3
  11a3bc:	e3c33003 	bic	r3, r3, #3
  11a3c0:	e1a02003 	mov	r2, r3
  11a3c4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3c8:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a3cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a3d0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a3d4:	e1c320b8 	strh	r2, [r3, #8]
  11a3d8:	e51b3008 	ldr	r3, [fp, #-8]
  11a3dc:	e1d320b8 	ldrh	r2, [r3, #8]
  11a3e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a3e4:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a3e8:	e51b3008 	ldr	r3, [fp, #-8]
  11a3ec:	e3a02000 	mov	r2, #0
  11a3f0:	e5832000 	str	r2, [r3]
    p->type = type;
  11a3f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a3f8:	e6ef2073 	uxtb	r2, r3
  11a3fc:	e51b3008 	ldr	r3, [fp, #-8]
  11a400:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a404:	e51b3008 	ldr	r3, [fp, #-8]
  11a408:	e5933004 	ldr	r3, [r3, #4]
  11a40c:	e2033003 	and	r3, r3, #3
  11a410:	e3530000 	cmp	r3, #0
  11a414:	0a00002d 	beq	11a4d0 <pbuf_alloc+0x568>
  11a418:	e3070474 	movw	r0, #29812	; 0x7474
  11a41c:	e3400014 	movt	r0, #20
  11a420:	ebffa33b 	bl	103114 <rt_kprintf>
  11a424:	e3a01f5e 	mov	r1, #376	; 0x178
  11a428:	e307036c 	movw	r0, #29548	; 0x736c
  11a42c:	e3400014 	movt	r0, #20
  11a430:	ebffc257 	bl	10ad94 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a434:	ea000025 	b	11a4d0 <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a438:	e300217f 	movw	r2, #383	; 0x17f
  11a43c:	e307136c 	movw	r1, #29548	; 0x736c
  11a440:	e3401014 	movt	r1, #20
  11a444:	e3a0000f 	mov	r0, #15
  11a448:	ebfffa57 	bl	118dac <memp_malloc_fn>
  11a44c:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a450:	e51b3008 	ldr	r3, [fp, #-8]
  11a454:	e3530000 	cmp	r3, #0
  11a458:	1a000001 	bne	11a464 <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a45c:	e3a03000 	mov	r3, #0
  11a460:	ea000022 	b	11a4f0 <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a464:	e51b3008 	ldr	r3, [fp, #-8]
  11a468:	e3a02000 	mov	r2, #0
  11a46c:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a470:	e51b3008 	ldr	r3, [fp, #-8]
  11a474:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a478:	e1c320b8 	strh	r2, [r3, #8]
  11a47c:	e51b3008 	ldr	r3, [fp, #-8]
  11a480:	e1d320b8 	ldrh	r2, [r3, #8]
  11a484:	e51b3008 	ldr	r3, [fp, #-8]
  11a488:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a48c:	e51b3008 	ldr	r3, [fp, #-8]
  11a490:	e3a02000 	mov	r2, #0
  11a494:	e5832000 	str	r2, [r3]
    p->type = type;
  11a498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a49c:	e6ef2073 	uxtb	r2, r3
  11a4a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a4a4:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a4a8:	ea000009 	b	11a4d4 <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a4ac:	e30704a0 	movw	r0, #29856	; 0x74a0
  11a4b0:	e3400014 	movt	r0, #20
  11a4b4:	ebffa316 	bl	103114 <rt_kprintf>
  11a4b8:	e300118d 	movw	r1, #397	; 0x18d
  11a4bc:	e307036c 	movw	r0, #29548	; 0x736c
  11a4c0:	e3400014 	movt	r0, #20
  11a4c4:	ebffc232 	bl	10ad94 <sys_arch_assert>
    return NULL;
  11a4c8:	e3a03000 	mov	r3, #0
  11a4cc:	ea000007 	b	11a4f0 <pbuf_alloc+0x588>
    break;
  11a4d0:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a4d4:	e51b3008 	ldr	r3, [fp, #-8]
  11a4d8:	e3a02001 	mov	r2, #1
  11a4dc:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a4e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a4e4:	e3a02000 	mov	r2, #0
  11a4e8:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a4ec:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a4f0:	e1a00003 	mov	r0, r3
  11a4f4:	e24bd004 	sub	sp, fp, #4
  11a4f8:	e8bd8800 	pop	{fp, pc}

0011a4fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a4fc:	e92d4800 	push	{fp, lr}
  11a500:	e28db004 	add	fp, sp, #4
  11a504:	e24dd018 	sub	sp, sp, #24
  11a508:	e50b0010 	str	r0, [fp, #-16]
  11a50c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a510:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a514:	e1a03001 	mov	r3, r1
  11a518:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a51c:	e51b3010 	ldr	r3, [fp, #-16]
  11a520:	e3530004 	cmp	r3, #4
  11a524:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a528:	ea000013 	b	11a57c <pbuf_alloced_custom+0x80>
  11a52c:	0011a540 	.word	0x0011a540
  11a530:	0011a54c 	.word	0x0011a54c
  11a534:	0011a558 	.word	0x0011a558
  11a538:	0011a564 	.word	0x0011a564
  11a53c:	0011a570 	.word	0x0011a570
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a540:	e3a03038 	mov	r3, #56	; 0x38
  11a544:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a548:	ea000014 	b	11a5a0 <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a54c:	e3a03024 	mov	r3, #36	; 0x24
  11a550:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a554:	ea000011 	b	11a5a0 <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a558:	e3a03010 	mov	r3, #16
  11a55c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a560:	ea00000e 	b	11a5a0 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a564:	e3a03000 	mov	r3, #0
  11a568:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a56c:	ea00000b 	b	11a5a0 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a570:	e3a03000 	mov	r3, #0
  11a574:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a578:	ea000008 	b	11a5a0 <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a57c:	e30704bc 	movw	r0, #29884	; 0x74bc
  11a580:	e3400014 	movt	r0, #20
  11a584:	ebffa2e2 	bl	103114 <rt_kprintf>
  11a588:	e30011c6 	movw	r1, #454	; 0x1c6
  11a58c:	e307036c 	movw	r0, #29548	; 0x736c
  11a590:	e3400014 	movt	r0, #20
  11a594:	ebffc1fe 	bl	10ad94 <sys_arch_assert>
    return NULL;
  11a598:	e3a03000 	mov	r3, #0
  11a59c:	ea00002c 	b	11a654 <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a5a0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a5a4:	e2833003 	add	r3, r3, #3
  11a5a8:	e3c32003 	bic	r2, r3, #3
  11a5ac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a5b0:	e0822003 	add	r2, r2, r3
  11a5b4:	e1db30b8 	ldrh	r3, [fp, #8]
  11a5b8:	e1520003 	cmp	r2, r3
  11a5bc:	9a000001 	bls	11a5c8 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a5c0:	e3a03000 	mov	r3, #0
  11a5c4:	ea000022 	b	11a654 <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a5c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5cc:	e3a02000 	mov	r2, #0
  11a5d0:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a5d4:	e59b3004 	ldr	r3, [fp, #4]
  11a5d8:	e3530000 	cmp	r3, #0
  11a5dc:	0a000007 	beq	11a600 <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a5e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a5e4:	e2833003 	add	r3, r3, #3
  11a5e8:	e3c33003 	bic	r3, r3, #3
  11a5ec:	e59b2004 	ldr	r2, [fp, #4]
  11a5f0:	e0822003 	add	r2, r2, r3
  11a5f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5f8:	e5832004 	str	r2, [r3, #4]
  11a5fc:	ea000002 	b	11a60c <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a600:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a604:	e3a02000 	mov	r2, #0
  11a608:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a60c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a610:	e3a02002 	mov	r2, #2
  11a614:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a618:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a61c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a620:	e1c320b8 	strh	r2, [r3, #8]
  11a624:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a628:	e1d320b8 	ldrh	r2, [r3, #8]
  11a62c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a630:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a634:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a638:	e6ef2073 	uxtb	r2, r3
  11a63c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a640:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a644:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a648:	e3a02001 	mov	r2, #1
  11a64c:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a650:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a654:	e1a00003 	mov	r0, r3
  11a658:	e24bd004 	sub	sp, fp, #4
  11a65c:	e8bd8800 	pop	{fp, pc}

0011a660 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a660:	e92d4800 	push	{fp, lr}
  11a664:	e28db004 	add	fp, sp, #4
  11a668:	e24dd018 	sub	sp, sp, #24
  11a66c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a670:	e1a03001 	mov	r3, r1
  11a674:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a678:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a67c:	e3530000 	cmp	r3, #0
  11a680:	1a000006 	bne	11a6a0 <pbuf_realloc+0x40>
  11a684:	e30704e0 	movw	r0, #29920	; 0x74e0
  11a688:	e3400014 	movt	r0, #20
  11a68c:	ebffa2a0 	bl	103114 <rt_kprintf>
  11a690:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a694:	e307036c 	movw	r0, #29548	; 0x736c
  11a698:	e3400014 	movt	r0, #20
  11a69c:	ebffc1bc 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a6a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6a4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a6a8:	e3530003 	cmp	r3, #3
  11a6ac:	0a000012 	beq	11a6fc <pbuf_realloc+0x9c>
  11a6b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6b4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a6b8:	e3530001 	cmp	r3, #1
  11a6bc:	0a00000e 	beq	11a6fc <pbuf_realloc+0x9c>
  11a6c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6c4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a6c8:	e3530000 	cmp	r3, #0
  11a6cc:	0a00000a 	beq	11a6fc <pbuf_realloc+0x9c>
  11a6d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6d4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a6d8:	e3530002 	cmp	r3, #2
  11a6dc:	0a000006 	beq	11a6fc <pbuf_realloc+0x9c>
  11a6e0:	e30704f8 	movw	r0, #29944	; 0x74f8
  11a6e4:	e3400014 	movt	r0, #20
  11a6e8:	ebffa289 	bl	103114 <rt_kprintf>
  11a6ec:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11a6f0:	e307036c 	movw	r0, #29548	; 0x736c
  11a6f4:	e3400014 	movt	r0, #20
  11a6f8:	ebffc1a5 	bl	10ad94 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11a6fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a700:	e1d330b8 	ldrh	r3, [r3, #8]
  11a704:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a708:	e1520003 	cmp	r2, r3
  11a70c:	2a00006b 	bcs	11a8c0 <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11a710:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a714:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a718:	e1d220b8 	ldrh	r2, [r2, #8]
  11a71c:	e0433002 	sub	r3, r3, r2
  11a720:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11a724:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a728:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11a72c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a730:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11a734:	ea000024 	b	11a7cc <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11a738:	e51b3008 	ldr	r3, [fp, #-8]
  11a73c:	e1d330ba 	ldrh	r3, [r3, #10]
  11a740:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a744:	e0423003 	sub	r3, r2, r3
  11a748:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11a74c:	e51b3010 	ldr	r3, [fp, #-16]
  11a750:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a754:	e1530002 	cmp	r3, r2
  11a758:	da000006 	ble	11a778 <pbuf_realloc+0x118>
  11a75c:	e3070514 	movw	r0, #29972	; 0x7514
  11a760:	e3400014 	movt	r0, #20
  11a764:	ebffa26a 	bl	103114 <rt_kprintf>
  11a768:	e3a01f83 	mov	r1, #524	; 0x20c
  11a76c:	e307036c 	movw	r0, #29548	; 0x736c
  11a770:	e3400014 	movt	r0, #20
  11a774:	ebffc186 	bl	10ad94 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11a778:	e51b3008 	ldr	r3, [fp, #-8]
  11a77c:	e1d320b8 	ldrh	r2, [r3, #8]
  11a780:	e51b3010 	ldr	r3, [fp, #-16]
  11a784:	e6ff3073 	uxth	r3, r3
  11a788:	e0823003 	add	r3, r2, r3
  11a78c:	e6ff2073 	uxth	r2, r3
  11a790:	e51b3008 	ldr	r3, [fp, #-8]
  11a794:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11a798:	e51b3008 	ldr	r3, [fp, #-8]
  11a79c:	e5933000 	ldr	r3, [r3]
  11a7a0:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11a7a4:	e51b3008 	ldr	r3, [fp, #-8]
  11a7a8:	e3530000 	cmp	r3, #0
  11a7ac:	1a000006 	bne	11a7cc <pbuf_realloc+0x16c>
  11a7b0:	e3070528 	movw	r0, #29992	; 0x7528
  11a7b4:	e3400014 	movt	r0, #20
  11a7b8:	ebffa255 	bl	103114 <rt_kprintf>
  11a7bc:	e3a01e21 	mov	r1, #528	; 0x210
  11a7c0:	e307036c 	movw	r0, #29548	; 0x736c
  11a7c4:	e3400014 	movt	r0, #20
  11a7c8:	ebffc171 	bl	10ad94 <sys_arch_assert>
  while (rem_len > q->len) {
  11a7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a7d0:	e1d330ba 	ldrh	r3, [r3, #10]
  11a7d4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a7d8:	e1520003 	cmp	r2, r3
  11a7dc:	8affffd5 	bhi	11a738 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11a7e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7e4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a7e8:	e3530000 	cmp	r3, #0
  11a7ec:	1a000020 	bne	11a874 <pbuf_realloc+0x214>
  11a7f0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7f4:	e1d330ba 	ldrh	r3, [r3, #10]
  11a7f8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a7fc:	e1520003 	cmp	r2, r3
  11a800:	0a00001b 	beq	11a874 <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11a804:	e51b3008 	ldr	r3, [fp, #-8]
  11a808:	e5d3300d 	ldrb	r3, [r3, #13]
  11a80c:	e2033002 	and	r3, r3, #2
  11a810:	e3530000 	cmp	r3, #0
  11a814:	1a000016 	bne	11a874 <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11a818:	e51b3008 	ldr	r3, [fp, #-8]
  11a81c:	e5933004 	ldr	r3, [r3, #4]
  11a820:	e1a02003 	mov	r2, r3
  11a824:	e51b3008 	ldr	r3, [fp, #-8]
  11a828:	e0423003 	sub	r3, r2, r3
  11a82c:	e6ff2073 	uxth	r2, r3
  11a830:	e15b30ba 	ldrh	r3, [fp, #-10]
  11a834:	e0823003 	add	r3, r2, r3
  11a838:	e6ff3073 	uxth	r3, r3
  11a83c:	e1a01003 	mov	r1, r3
  11a840:	e51b0008 	ldr	r0, [fp, #-8]
  11a844:	ebffc188 	bl	10ae6c <mem_trim>
  11a848:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11a84c:	e51b3008 	ldr	r3, [fp, #-8]
  11a850:	e3530000 	cmp	r3, #0
  11a854:	1a000006 	bne	11a874 <pbuf_realloc+0x214>
  11a858:	e3070540 	movw	r0, #30016	; 0x7540
  11a85c:	e3400014 	movt	r0, #20
  11a860:	ebffa22b 	bl	103114 <rt_kprintf>
  11a864:	e300121e 	movw	r1, #542	; 0x21e
  11a868:	e307036c 	movw	r0, #29548	; 0x736c
  11a86c:	e3400014 	movt	r0, #20
  11a870:	ebffc147 	bl	10ad94 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11a874:	e51b3008 	ldr	r3, [fp, #-8]
  11a878:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a87c:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11a880:	e51b3008 	ldr	r3, [fp, #-8]
  11a884:	e1d320ba 	ldrh	r2, [r3, #10]
  11a888:	e51b3008 	ldr	r3, [fp, #-8]
  11a88c:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11a890:	e51b3008 	ldr	r3, [fp, #-8]
  11a894:	e5933000 	ldr	r3, [r3]
  11a898:	e3530000 	cmp	r3, #0
  11a89c:	0a000003 	beq	11a8b0 <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11a8a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a8a4:	e5933000 	ldr	r3, [r3]
  11a8a8:	e1a00003 	mov	r0, r3
  11a8ac:	eb0000b4 	bl	11ab84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11a8b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a8b4:	e3a02000 	mov	r2, #0
  11a8b8:	e5832000 	str	r2, [r3]
  11a8bc:	ea000000 	b	11a8c4 <pbuf_realloc+0x264>
    return;
  11a8c0:	e320f000 	nop	{0}

}
  11a8c4:	e24bd004 	sub	sp, fp, #4
  11a8c8:	e8bd8800 	pop	{fp, pc}

0011a8cc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11a8cc:	e92d4800 	push	{fp, lr}
  11a8d0:	e28db004 	add	fp, sp, #4
  11a8d4:	e24dd010 	sub	sp, sp, #16
  11a8d8:	e50b0010 	str	r0, [fp, #-16]
  11a8dc:	e1a03001 	mov	r3, r1
  11a8e0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11a8e4:	e1a03002 	mov	r3, r2
  11a8e8:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11a8ec:	e51b3010 	ldr	r3, [fp, #-16]
  11a8f0:	e3530000 	cmp	r3, #0
  11a8f4:	1a000006 	bne	11a914 <pbuf_header_impl+0x48>
  11a8f8:	e307055c 	movw	r0, #30044	; 0x755c
  11a8fc:	e3400014 	movt	r0, #20
  11a900:	ebffa203 	bl	103114 <rt_kprintf>
  11a904:	e3a01d09 	mov	r1, #576	; 0x240
  11a908:	e307036c 	movw	r0, #29548	; 0x736c
  11a90c:	e3400014 	movt	r0, #20
  11a910:	ebffc11f 	bl	10ad94 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11a914:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a918:	e3530000 	cmp	r3, #0
  11a91c:	0a000002 	beq	11a92c <pbuf_header_impl+0x60>
  11a920:	e51b3010 	ldr	r3, [fp, #-16]
  11a924:	e3530000 	cmp	r3, #0
  11a928:	1a000001 	bne	11a934 <pbuf_header_impl+0x68>
    return 0;
  11a92c:	e3a03000 	mov	r3, #0
  11a930:	ea000072 	b	11ab00 <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11a934:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a938:	e3530000 	cmp	r3, #0
  11a93c:	aa000010 	bge	11a984 <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11a940:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a944:	e2633000 	rsb	r3, r3, #0
  11a948:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11a94c:	e51b3010 	ldr	r3, [fp, #-16]
  11a950:	e1d330ba 	ldrh	r3, [r3, #10]
  11a954:	e15b20b6 	ldrh	r2, [fp, #-6]
  11a958:	e1520003 	cmp	r2, r3
  11a95c:	9a00000a 	bls	11a98c <pbuf_header_impl+0xc0>
  11a960:	e3070568 	movw	r0, #30056	; 0x7568
  11a964:	e3400014 	movt	r0, #20
  11a968:	ebffa1e9 	bl	103114 <rt_kprintf>
  11a96c:	e3a01f92 	mov	r1, #584	; 0x248
  11a970:	e307036c 	movw	r0, #29548	; 0x736c
  11a974:	e3400014 	movt	r0, #20
  11a978:	ebffc105 	bl	10ad94 <sys_arch_assert>
  11a97c:	e3a03001 	mov	r3, #1
  11a980:	ea00005e 	b	11ab00 <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11a984:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a988:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11a98c:	e51b3010 	ldr	r3, [fp, #-16]
  11a990:	e5d3300c 	ldrb	r3, [r3, #12]
  11a994:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11a998:	e51b3010 	ldr	r3, [fp, #-16]
  11a99c:	e5933004 	ldr	r3, [r3, #4]
  11a9a0:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11a9a4:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a9a8:	e3530000 	cmp	r3, #0
  11a9ac:	0a000002 	beq	11a9bc <pbuf_header_impl+0xf0>
  11a9b0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a9b4:	e3530003 	cmp	r3, #3
  11a9b8:	1a000011 	bne	11aa04 <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11a9bc:	e51b3010 	ldr	r3, [fp, #-16]
  11a9c0:	e5932004 	ldr	r2, [r3, #4]
  11a9c4:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a9c8:	e2633000 	rsb	r3, r3, #0
  11a9cc:	e0822003 	add	r2, r2, r3
  11a9d0:	e51b3010 	ldr	r3, [fp, #-16]
  11a9d4:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11a9d8:	e51b3010 	ldr	r3, [fp, #-16]
  11a9dc:	e5932004 	ldr	r2, [r3, #4]
  11a9e0:	e51b3010 	ldr	r3, [fp, #-16]
  11a9e4:	e2833010 	add	r3, r3, #16
  11a9e8:	e1520003 	cmp	r2, r3
  11a9ec:	2a000034 	bcs	11aac4 <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11a9f0:	e51b3010 	ldr	r3, [fp, #-16]
  11a9f4:	e51b200c 	ldr	r2, [fp, #-12]
  11a9f8:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11a9fc:	e3a03001 	mov	r3, #1
  11aa00:	ea00003e 	b	11ab00 <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11aa04:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aa08:	e3530002 	cmp	r3, #2
  11aa0c:	0a000002 	beq	11aa1c <pbuf_header_impl+0x150>
  11aa10:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aa14:	e3530001 	cmp	r3, #1
  11aa18:	1a000020 	bne	11aaa0 <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11aa1c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa20:	e3530000 	cmp	r3, #0
  11aa24:	aa00000c 	bge	11aa5c <pbuf_header_impl+0x190>
  11aa28:	e51b3010 	ldr	r3, [fp, #-16]
  11aa2c:	e1d330ba 	ldrh	r3, [r3, #10]
  11aa30:	e15b20b6 	ldrh	r2, [fp, #-6]
  11aa34:	e1520003 	cmp	r2, r3
  11aa38:	8a000007 	bhi	11aa5c <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11aa3c:	e51b3010 	ldr	r3, [fp, #-16]
  11aa40:	e5932004 	ldr	r2, [r3, #4]
  11aa44:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa48:	e2633000 	rsb	r3, r3, #0
  11aa4c:	e0822003 	add	r2, r2, r3
  11aa50:	e51b3010 	ldr	r3, [fp, #-16]
  11aa54:	e5832004 	str	r2, [r3, #4]
  11aa58:	ea00000f 	b	11aa9c <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11aa5c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa60:	e3530000 	cmp	r3, #0
  11aa64:	da00000a 	ble	11aa94 <pbuf_header_impl+0x1c8>
  11aa68:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11aa6c:	e3530000 	cmp	r3, #0
  11aa70:	0a000007 	beq	11aa94 <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11aa74:	e51b3010 	ldr	r3, [fp, #-16]
  11aa78:	e5932004 	ldr	r2, [r3, #4]
  11aa7c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa80:	e2633000 	rsb	r3, r3, #0
  11aa84:	e0822003 	add	r2, r2, r3
  11aa88:	e51b3010 	ldr	r3, [fp, #-16]
  11aa8c:	e5832004 	str	r2, [r3, #4]
  11aa90:	ea000001 	b	11aa9c <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11aa94:	e3a03001 	mov	r3, #1
  11aa98:	ea000018 	b	11ab00 <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11aa9c:	ea000008 	b	11aac4 <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11aaa0:	e3070588 	movw	r0, #30088	; 0x7588
  11aaa4:	e3400014 	movt	r0, #20
  11aaa8:	ebffa199 	bl	103114 <rt_kprintf>
  11aaac:	e3a01f9e 	mov	r1, #632	; 0x278
  11aab0:	e307036c 	movw	r0, #29548	; 0x736c
  11aab4:	e3400014 	movt	r0, #20
  11aab8:	ebffc0b5 	bl	10ad94 <sys_arch_assert>
    return 1;
  11aabc:	e3a03001 	mov	r3, #1
  11aac0:	ea00000e 	b	11ab00 <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11aac4:	e51b3010 	ldr	r3, [fp, #-16]
  11aac8:	e1d320ba 	ldrh	r2, [r3, #10]
  11aacc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aad0:	e0823003 	add	r3, r2, r3
  11aad4:	e6ff2073 	uxth	r2, r3
  11aad8:	e51b3010 	ldr	r3, [fp, #-16]
  11aadc:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11aae0:	e51b3010 	ldr	r3, [fp, #-16]
  11aae4:	e1d320b8 	ldrh	r2, [r3, #8]
  11aae8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aaec:	e0823003 	add	r3, r2, r3
  11aaf0:	e6ff2073 	uxth	r2, r3
  11aaf4:	e51b3010 	ldr	r3, [fp, #-16]
  11aaf8:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11aafc:	e3a03000 	mov	r3, #0
}
  11ab00:	e1a00003 	mov	r0, r3
  11ab04:	e24bd004 	sub	sp, fp, #4
  11ab08:	e8bd8800 	pop	{fp, pc}

0011ab0c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11ab0c:	e92d4800 	push	{fp, lr}
  11ab10:	e28db004 	add	fp, sp, #4
  11ab14:	e24dd008 	sub	sp, sp, #8
  11ab18:	e50b0008 	str	r0, [fp, #-8]
  11ab1c:	e1a03001 	mov	r3, r1
  11ab20:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11ab24:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ab28:	e3a02000 	mov	r2, #0
  11ab2c:	e1a01003 	mov	r1, r3
  11ab30:	e51b0008 	ldr	r0, [fp, #-8]
  11ab34:	ebffff64 	bl	11a8cc <pbuf_header_impl>
  11ab38:	e1a03000 	mov	r3, r0
}
  11ab3c:	e1a00003 	mov	r0, r3
  11ab40:	e24bd004 	sub	sp, fp, #4
  11ab44:	e8bd8800 	pop	{fp, pc}

0011ab48 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11ab48:	e92d4800 	push	{fp, lr}
  11ab4c:	e28db004 	add	fp, sp, #4
  11ab50:	e24dd008 	sub	sp, sp, #8
  11ab54:	e50b0008 	str	r0, [fp, #-8]
  11ab58:	e1a03001 	mov	r3, r1
  11ab5c:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11ab60:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ab64:	e3a02001 	mov	r2, #1
  11ab68:	e1a01003 	mov	r1, r3
  11ab6c:	e51b0008 	ldr	r0, [fp, #-8]
  11ab70:	ebffff55 	bl	11a8cc <pbuf_header_impl>
  11ab74:	e1a03000 	mov	r3, r0
}
  11ab78:	e1a00003 	mov	r0, r3
  11ab7c:	e24bd004 	sub	sp, fp, #4
  11ab80:	e8bd8800 	pop	{fp, pc}

0011ab84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11ab84:	e92d4800 	push	{fp, lr}
  11ab88:	e28db004 	add	fp, sp, #4
  11ab8c:	e24dd018 	sub	sp, sp, #24
  11ab90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11ab94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab98:	e3530000 	cmp	r3, #0
  11ab9c:	1a00000b 	bne	11abd0 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11aba0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aba4:	e3530000 	cmp	r3, #0
  11aba8:	1a000006 	bne	11abc8 <pbuf_free+0x44>
  11abac:	e307055c 	movw	r0, #30044	; 0x755c
  11abb0:	e3400014 	movt	r0, #20
  11abb4:	ebffa156 	bl	103114 <rt_kprintf>
  11abb8:	e30012d3 	movw	r1, #723	; 0x2d3
  11abbc:	e307036c 	movw	r0, #29548	; 0x736c
  11abc0:	e3400014 	movt	r0, #20
  11abc4:	ebffc072 	bl	10ad94 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11abc8:	e3a03000 	mov	r3, #0
  11abcc:	ea00006e 	b	11ad8c <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11abd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abd4:	e5d3300c 	ldrb	r3, [r3, #12]
  11abd8:	e3530000 	cmp	r3, #0
  11abdc:	0a000012 	beq	11ac2c <pbuf_free+0xa8>
  11abe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abe4:	e5d3300c 	ldrb	r3, [r3, #12]
  11abe8:	e3530001 	cmp	r3, #1
  11abec:	0a00000e 	beq	11ac2c <pbuf_free+0xa8>
  11abf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abf4:	e5d3300c 	ldrb	r3, [r3, #12]
  11abf8:	e3530002 	cmp	r3, #2
  11abfc:	0a00000a 	beq	11ac2c <pbuf_free+0xa8>
  11ac00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac04:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac08:	e3530003 	cmp	r3, #3
  11ac0c:	0a000006 	beq	11ac2c <pbuf_free+0xa8>
  11ac10:	e3070598 	movw	r0, #30104	; 0x7598
  11ac14:	e3400014 	movt	r0, #20
  11ac18:	ebffa13d 	bl	103114 <rt_kprintf>
  11ac1c:	e30012df 	movw	r1, #735	; 0x2df
  11ac20:	e307036c 	movw	r0, #29548	; 0x736c
  11ac24:	e3400014 	movt	r0, #20
  11ac28:	ebffc059 	bl	10ad94 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11ac2c:	e3a03000 	mov	r3, #0
  11ac30:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11ac34:	ea000050 	b	11ad7c <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11ac38:	ebff9d7f 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11ac3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac40:	e1d330be 	ldrh	r3, [r3, #14]
  11ac44:	e3530000 	cmp	r3, #0
  11ac48:	1a000006 	bne	11ac68 <pbuf_free+0xe4>
  11ac4c:	e30705b0 	movw	r0, #30128	; 0x75b0
  11ac50:	e3400014 	movt	r0, #20
  11ac54:	ebffa12e 	bl	103114 <rt_kprintf>
  11ac58:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11ac5c:	e307036c 	movw	r0, #29548	; 0x736c
  11ac60:	e3400014 	movt	r0, #20
  11ac64:	ebffc04a 	bl	10ad94 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11ac68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac6c:	e1d330be 	ldrh	r3, [r3, #14]
  11ac70:	e2433001 	sub	r3, r3, #1
  11ac74:	e6ff2073 	uxth	r2, r3
  11ac78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac7c:	e1c320be 	strh	r2, [r3, #14]
  11ac80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac84:	e1d330be 	ldrh	r3, [r3, #14]
  11ac88:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11ac8c:	ebff9d70 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11ac90:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ac94:	e3530000 	cmp	r3, #0
  11ac98:	1a000035 	bne	11ad74 <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11ac9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aca0:	e5933000 	ldr	r3, [r3]
  11aca4:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11aca8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11acac:	e5d3300c 	ldrb	r3, [r3, #12]
  11acb0:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11acb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11acb8:	e5d3300d 	ldrb	r3, [r3, #13]
  11acbc:	e2033002 	and	r3, r3, #2
  11acc0:	e3530000 	cmp	r3, #0
  11acc4:	0a000011 	beq	11ad10 <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11acc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11accc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11acd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11acd4:	e5933010 	ldr	r3, [r3, #16]
  11acd8:	e3530000 	cmp	r3, #0
  11acdc:	1a000006 	bne	11acfc <pbuf_free+0x178>
  11ace0:	e30705c8 	movw	r0, #30152	; 0x75c8
  11ace4:	e3400014 	movt	r0, #20
  11ace8:	ebffa109 	bl	103114 <rt_kprintf>
  11acec:	e30012fa 	movw	r1, #762	; 0x2fa
  11acf0:	e307036c 	movw	r0, #29548	; 0x736c
  11acf4:	e3400014 	movt	r0, #20
  11acf8:	ebffc025 	bl	10ad94 <sys_arch_assert>
        pc->custom_free_function(p);
  11acfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ad00:	e5933010 	ldr	r3, [r3, #16]
  11ad04:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11ad08:	e12fff33 	blx	r3
  11ad0c:	ea000012 	b	11ad5c <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11ad10:	e15b30be 	ldrh	r3, [fp, #-14]
  11ad14:	e3530003 	cmp	r3, #3
  11ad18:	1a000003 	bne	11ad2c <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11ad1c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11ad20:	e3a00010 	mov	r0, #16
  11ad24:	ebfff888 	bl	118f4c <memp_free>
  11ad28:	ea00000b 	b	11ad5c <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11ad2c:	e15b30be 	ldrh	r3, [fp, #-14]
  11ad30:	e3530001 	cmp	r3, #1
  11ad34:	0a000002 	beq	11ad44 <pbuf_free+0x1c0>
  11ad38:	e15b30be 	ldrh	r3, [fp, #-14]
  11ad3c:	e3530002 	cmp	r3, #2
  11ad40:	1a000003 	bne	11ad54 <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11ad44:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11ad48:	e3a0000f 	mov	r0, #15
  11ad4c:	ebfff87e 	bl	118f4c <memp_free>
  11ad50:	ea000001 	b	11ad5c <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11ad54:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11ad58:	ebffc05a 	bl	10aec8 <mem_free>
        }
      }
      count++;
  11ad5c:	e55b3005 	ldrb	r3, [fp, #-5]
  11ad60:	e2833001 	add	r3, r3, #1
  11ad64:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11ad68:	e51b300c 	ldr	r3, [fp, #-12]
  11ad6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11ad70:	ea000001 	b	11ad7c <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11ad74:	e3a03000 	mov	r3, #0
  11ad78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11ad7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ad80:	e3530000 	cmp	r3, #0
  11ad84:	1affffab 	bne	11ac38 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11ad88:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11ad8c:	e1a00003 	mov	r0, r3
  11ad90:	e24bd004 	sub	sp, fp, #4
  11ad94:	e8bd8800 	pop	{fp, pc}

0011ad98 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11ad98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ad9c:	e28db000 	add	fp, sp, #0
  11ada0:	e24dd014 	sub	sp, sp, #20
  11ada4:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11ada8:	e3a03000 	mov	r3, #0
  11adac:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11adb0:	ea000005 	b	11adcc <pbuf_clen+0x34>
    ++len;
  11adb4:	e15b30b6 	ldrh	r3, [fp, #-6]
  11adb8:	e2833001 	add	r3, r3, #1
  11adbc:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11adc0:	e51b3010 	ldr	r3, [fp, #-16]
  11adc4:	e5933000 	ldr	r3, [r3]
  11adc8:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11adcc:	e51b3010 	ldr	r3, [fp, #-16]
  11add0:	e3530000 	cmp	r3, #0
  11add4:	1afffff6 	bne	11adb4 <pbuf_clen+0x1c>
  }
  return len;
  11add8:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11addc:	e1a00003 	mov	r0, r3
  11ade0:	e28bd000 	add	sp, fp, #0
  11ade4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ade8:	e12fff1e 	bx	lr

0011adec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11adec:	e92d4800 	push	{fp, lr}
  11adf0:	e28db004 	add	fp, sp, #4
  11adf4:	e24dd008 	sub	sp, sp, #8
  11adf8:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11adfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ae00:	e3530000 	cmp	r3, #0
  11ae04:	0a000012 	beq	11ae54 <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11ae08:	ebff9d0b 	bl	10223c <rt_enter_critical>
  11ae0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ae10:	e1d330be 	ldrh	r3, [r3, #14]
  11ae14:	e2833001 	add	r3, r3, #1
  11ae18:	e6ff2073 	uxth	r2, r3
  11ae1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ae20:	e1c320be 	strh	r2, [r3, #14]
  11ae24:	ebff9d0a 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11ae28:	e51b3008 	ldr	r3, [fp, #-8]
  11ae2c:	e1d330be 	ldrh	r3, [r3, #14]
  11ae30:	e3530000 	cmp	r3, #0
  11ae34:	1a000006 	bne	11ae54 <pbuf_ref+0x68>
  11ae38:	e30705ec 	movw	r0, #30188	; 0x75ec
  11ae3c:	e3400014 	movt	r0, #20
  11ae40:	ebffa0b3 	bl	103114 <rt_kprintf>
  11ae44:	e300133a 	movw	r1, #826	; 0x33a
  11ae48:	e307036c 	movw	r0, #29548	; 0x736c
  11ae4c:	e3400014 	movt	r0, #20
  11ae50:	ebffbfcf 	bl	10ad94 <sys_arch_assert>
  }
}
  11ae54:	e320f000 	nop	{0}
  11ae58:	e24bd004 	sub	sp, fp, #4
  11ae5c:	e8bd8800 	pop	{fp, pc}

0011ae60 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11ae60:	e92d4800 	push	{fp, lr}
  11ae64:	e28db004 	add	fp, sp, #4
  11ae68:	e24dd010 	sub	sp, sp, #16
  11ae6c:	e50b0010 	str	r0, [fp, #-16]
  11ae70:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11ae74:	e51b3010 	ldr	r3, [fp, #-16]
  11ae78:	e3530000 	cmp	r3, #0
  11ae7c:	0a000002 	beq	11ae8c <pbuf_cat+0x2c>
  11ae80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ae84:	e3530000 	cmp	r3, #0
  11ae88:	1a000007 	bne	11aeac <pbuf_cat+0x4c>
  11ae8c:	e3070600 	movw	r0, #30208	; 0x7600
  11ae90:	e3400014 	movt	r0, #20
  11ae94:	ebffa09e 	bl	103114 <rt_kprintf>
  11ae98:	e300134e 	movw	r1, #846	; 0x34e
  11ae9c:	e307036c 	movw	r0, #29548	; 0x736c
  11aea0:	e3400014 	movt	r0, #20
  11aea4:	ebffbfba 	bl	10ad94 <sys_arch_assert>
  11aea8:	ea000034 	b	11af80 <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11aeac:	e51b3010 	ldr	r3, [fp, #-16]
  11aeb0:	e50b3008 	str	r3, [fp, #-8]
  11aeb4:	ea00000a 	b	11aee4 <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11aeb8:	e51b3008 	ldr	r3, [fp, #-8]
  11aebc:	e1d320b8 	ldrh	r2, [r3, #8]
  11aec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11aec4:	e1d330b8 	ldrh	r3, [r3, #8]
  11aec8:	e0823003 	add	r3, r2, r3
  11aecc:	e6ff2073 	uxth	r2, r3
  11aed0:	e51b3008 	ldr	r3, [fp, #-8]
  11aed4:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11aed8:	e51b3008 	ldr	r3, [fp, #-8]
  11aedc:	e5933000 	ldr	r3, [r3]
  11aee0:	e50b3008 	str	r3, [fp, #-8]
  11aee4:	e51b3008 	ldr	r3, [fp, #-8]
  11aee8:	e5933000 	ldr	r3, [r3]
  11aeec:	e3530000 	cmp	r3, #0
  11aef0:	1afffff0 	bne	11aeb8 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11aef4:	e51b3008 	ldr	r3, [fp, #-8]
  11aef8:	e1d320b8 	ldrh	r2, [r3, #8]
  11aefc:	e51b3008 	ldr	r3, [fp, #-8]
  11af00:	e1d330ba 	ldrh	r3, [r3, #10]
  11af04:	e1520003 	cmp	r2, r3
  11af08:	0a000006 	beq	11af28 <pbuf_cat+0xc8>
  11af0c:	e3070638 	movw	r0, #30264	; 0x7638
  11af10:	e3400014 	movt	r0, #20
  11af14:	ebffa07e 	bl	103114 <rt_kprintf>
  11af18:	e3001356 	movw	r1, #854	; 0x356
  11af1c:	e307036c 	movw	r0, #29548	; 0x736c
  11af20:	e3400014 	movt	r0, #20
  11af24:	ebffbf9a 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11af28:	e51b3008 	ldr	r3, [fp, #-8]
  11af2c:	e5933000 	ldr	r3, [r3]
  11af30:	e3530000 	cmp	r3, #0
  11af34:	0a000006 	beq	11af54 <pbuf_cat+0xf4>
  11af38:	e3070668 	movw	r0, #30312	; 0x7668
  11af3c:	e3400014 	movt	r0, #20
  11af40:	ebffa073 	bl	103114 <rt_kprintf>
  11af44:	e3001357 	movw	r1, #855	; 0x357
  11af48:	e307036c 	movw	r0, #29548	; 0x736c
  11af4c:	e3400014 	movt	r0, #20
  11af50:	ebffbf8f 	bl	10ad94 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11af54:	e51b3008 	ldr	r3, [fp, #-8]
  11af58:	e1d320b8 	ldrh	r2, [r3, #8]
  11af5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11af60:	e1d330b8 	ldrh	r3, [r3, #8]
  11af64:	e0823003 	add	r3, r2, r3
  11af68:	e6ff2073 	uxth	r2, r3
  11af6c:	e51b3008 	ldr	r3, [fp, #-8]
  11af70:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11af74:	e51b3008 	ldr	r3, [fp, #-8]
  11af78:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11af7c:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11af80:	e24bd004 	sub	sp, fp, #4
  11af84:	e8bd8800 	pop	{fp, pc}

0011af88 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11af88:	e92d4800 	push	{fp, lr}
  11af8c:	e28db004 	add	fp, sp, #4
  11af90:	e24dd008 	sub	sp, sp, #8
  11af94:	e50b0008 	str	r0, [fp, #-8]
  11af98:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11af9c:	e51b100c 	ldr	r1, [fp, #-12]
  11afa0:	e51b0008 	ldr	r0, [fp, #-8]
  11afa4:	ebffffad 	bl	11ae60 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11afa8:	e51b000c 	ldr	r0, [fp, #-12]
  11afac:	ebffff8e 	bl	11adec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11afb0:	e320f000 	nop	{0}
  11afb4:	e24bd004 	sub	sp, fp, #4
  11afb8:	e8bd8800 	pop	{fp, pc}

0011afbc <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11afbc:	e92d4800 	push	{fp, lr}
  11afc0:	e28db004 	add	fp, sp, #4
  11afc4:	e24dd010 	sub	sp, sp, #16
  11afc8:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11afcc:	e3a03001 	mov	r3, #1
  11afd0:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11afd4:	e51b3010 	ldr	r3, [fp, #-16]
  11afd8:	e5933000 	ldr	r3, [r3]
  11afdc:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11afe0:	e51b300c 	ldr	r3, [fp, #-12]
  11afe4:	e3530000 	cmp	r3, #0
  11afe8:	0a000024 	beq	11b080 <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11afec:	e51b300c 	ldr	r3, [fp, #-12]
  11aff0:	e1d330b8 	ldrh	r3, [r3, #8]
  11aff4:	e1a02003 	mov	r2, r3
  11aff8:	e51b3010 	ldr	r3, [fp, #-16]
  11affc:	e1d330b8 	ldrh	r3, [r3, #8]
  11b000:	e1a01003 	mov	r1, r3
  11b004:	e51b3010 	ldr	r3, [fp, #-16]
  11b008:	e1d330ba 	ldrh	r3, [r3, #10]
  11b00c:	e0413003 	sub	r3, r1, r3
  11b010:	e1520003 	cmp	r2, r3
  11b014:	0a000006 	beq	11b034 <pbuf_dechain+0x78>
  11b018:	e3070678 	movw	r0, #30328	; 0x7678
  11b01c:	e3400014 	movt	r0, #20
  11b020:	ebffa03b 	bl	103114 <rt_kprintf>
  11b024:	e300138d 	movw	r1, #909	; 0x38d
  11b028:	e307036c 	movw	r0, #29548	; 0x736c
  11b02c:	e3400014 	movt	r0, #20
  11b030:	ebffbf57 	bl	10ad94 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11b034:	e51b3010 	ldr	r3, [fp, #-16]
  11b038:	e1d320b8 	ldrh	r2, [r3, #8]
  11b03c:	e51b3010 	ldr	r3, [fp, #-16]
  11b040:	e1d330ba 	ldrh	r3, [r3, #10]
  11b044:	e0423003 	sub	r3, r2, r3
  11b048:	e6ff2073 	uxth	r2, r3
  11b04c:	e51b300c 	ldr	r3, [fp, #-12]
  11b050:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b054:	e51b3010 	ldr	r3, [fp, #-16]
  11b058:	e3a02000 	mov	r2, #0
  11b05c:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b060:	e51b3010 	ldr	r3, [fp, #-16]
  11b064:	e1d320ba 	ldrh	r2, [r3, #10]
  11b068:	e51b3010 	ldr	r3, [fp, #-16]
  11b06c:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b070:	e51b000c 	ldr	r0, [fp, #-12]
  11b074:	ebfffec2 	bl	11ab84 <pbuf_free>
  11b078:	e1a03000 	mov	r3, r0
  11b07c:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b080:	e51b3010 	ldr	r3, [fp, #-16]
  11b084:	e1d320b8 	ldrh	r2, [r3, #8]
  11b088:	e51b3010 	ldr	r3, [fp, #-16]
  11b08c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b090:	e1520003 	cmp	r2, r3
  11b094:	0a000006 	beq	11b0b4 <pbuf_dechain+0xf8>
  11b098:	e307069c 	movw	r0, #30364	; 0x769c
  11b09c:	e3400014 	movt	r0, #20
  11b0a0:	ebffa01b 	bl	103114 <rt_kprintf>
  11b0a4:	e300139e 	movw	r1, #926	; 0x39e
  11b0a8:	e307036c 	movw	r0, #29548	; 0x736c
  11b0ac:	e3400014 	movt	r0, #20
  11b0b0:	ebffbf37 	bl	10ad94 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b0b4:	e55b3005 	ldrb	r3, [fp, #-5]
  11b0b8:	e3530000 	cmp	r3, #0
  11b0bc:	1a000001 	bne	11b0c8 <pbuf_dechain+0x10c>
  11b0c0:	e51b300c 	ldr	r3, [fp, #-12]
  11b0c4:	ea000000 	b	11b0cc <pbuf_dechain+0x110>
  11b0c8:	e3a03000 	mov	r3, #0
}
  11b0cc:	e1a00003 	mov	r0, r3
  11b0d0:	e24bd004 	sub	sp, fp, #4
  11b0d4:	e8bd8800 	pop	{fp, pc}

0011b0d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b0d8:	e92d4800 	push	{fp, lr}
  11b0dc:	e28db004 	add	fp, sp, #4
  11b0e0:	e24dd010 	sub	sp, sp, #16
  11b0e4:	e50b0010 	str	r0, [fp, #-16]
  11b0e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b0ec:	e3a03000 	mov	r3, #0
  11b0f0:	e14b30b6 	strh	r3, [fp, #-6]
  11b0f4:	e3a03000 	mov	r3, #0
  11b0f8:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b0fc:	e51b3010 	ldr	r3, [fp, #-16]
  11b100:	e3530000 	cmp	r3, #0
  11b104:	0a000008 	beq	11b12c <pbuf_copy+0x54>
  11b108:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b10c:	e3530000 	cmp	r3, #0
  11b110:	0a000005 	beq	11b12c <pbuf_copy+0x54>
  11b114:	e51b3010 	ldr	r3, [fp, #-16]
  11b118:	e1d320b8 	ldrh	r2, [r3, #8]
  11b11c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b120:	e1d330b8 	ldrh	r3, [r3, #8]
  11b124:	e1520003 	cmp	r2, r3
  11b128:	2a000008 	bcs	11b150 <pbuf_copy+0x78>
  11b12c:	e30706b4 	movw	r0, #30388	; 0x76b4
  11b130:	e3400014 	movt	r0, #20
  11b134:	ebff9ff6 	bl	103114 <rt_kprintf>
  11b138:	e30013be 	movw	r1, #958	; 0x3be
  11b13c:	e307036c 	movw	r0, #29548	; 0x736c
  11b140:	e3400014 	movt	r0, #20
  11b144:	ebffbf12 	bl	10ad94 <sys_arch_assert>
  11b148:	e3e0300f 	mvn	r3, #15
  11b14c:	ea000094 	b	11b3a4 <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b150:	e51b3010 	ldr	r3, [fp, #-16]
  11b154:	e1d330ba 	ldrh	r3, [r3, #10]
  11b158:	e1a02003 	mov	r2, r3
  11b15c:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b160:	e0422003 	sub	r2, r2, r3
  11b164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b168:	e1d330ba 	ldrh	r3, [r3, #10]
  11b16c:	e1a01003 	mov	r1, r3
  11b170:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b174:	e0413003 	sub	r3, r1, r3
  11b178:	e1520003 	cmp	r2, r3
  11b17c:	ba000005 	blt	11b198 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b184:	e1d320ba 	ldrh	r2, [r3, #10]
  11b188:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b18c:	e0423003 	sub	r3, r2, r3
  11b190:	e14b30ba 	strh	r3, [fp, #-10]
  11b194:	ea000004 	b	11b1ac <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b198:	e51b3010 	ldr	r3, [fp, #-16]
  11b19c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b1a0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b1a4:	e0423003 	sub	r3, r2, r3
  11b1a8:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b1ac:	e51b3010 	ldr	r3, [fp, #-16]
  11b1b0:	e5932004 	ldr	r2, [r3, #4]
  11b1b4:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b1b8:	e0820003 	add	r0, r2, r3
  11b1bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1c0:	e5932004 	ldr	r2, [r3, #4]
  11b1c4:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b1c8:	e0823003 	add	r3, r2, r3
  11b1cc:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b1d0:	e1a01003 	mov	r1, r3
  11b1d4:	eb00962a 	bl	140a84 <memcpy>
    offset_to += len;
  11b1d8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b1dc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b1e0:	e0823003 	add	r3, r2, r3
  11b1e4:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b1e8:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b1ec:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b1f0:	e0823003 	add	r3, r2, r3
  11b1f4:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b1f8:	e51b3010 	ldr	r3, [fp, #-16]
  11b1fc:	e1d330ba 	ldrh	r3, [r3, #10]
  11b200:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b204:	e1520003 	cmp	r2, r3
  11b208:	9a000006 	bls	11b228 <pbuf_copy+0x150>
  11b20c:	e30706e4 	movw	r0, #30436	; 0x76e4
  11b210:	e3400014 	movt	r0, #20
  11b214:	ebff9fbe 	bl	103114 <rt_kprintf>
  11b218:	e30013ce 	movw	r1, #974	; 0x3ce
  11b21c:	e307036c 	movw	r0, #29548	; 0x736c
  11b220:	e3400014 	movt	r0, #20
  11b224:	ebffbeda 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b228:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b22c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b230:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b234:	e1520003 	cmp	r2, r3
  11b238:	9a000006 	bls	11b258 <pbuf_copy+0x180>
  11b23c:	e30706fc 	movw	r0, #30460	; 0x76fc
  11b240:	e3400014 	movt	r0, #20
  11b244:	ebff9fb2 	bl	103114 <rt_kprintf>
  11b248:	e30013cf 	movw	r1, #975	; 0x3cf
  11b24c:	e307036c 	movw	r0, #29548	; 0x736c
  11b250:	e3400014 	movt	r0, #20
  11b254:	ebffbece 	bl	10ad94 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b258:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b25c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b260:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b264:	e1520003 	cmp	r2, r3
  11b268:	3a000004 	bcc	11b280 <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b26c:	e3a03000 	mov	r3, #0
  11b270:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b274:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b278:	e5933000 	ldr	r3, [r3]
  11b27c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b280:	e51b3010 	ldr	r3, [fp, #-16]
  11b284:	e1d330ba 	ldrh	r3, [r3, #10]
  11b288:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b28c:	e1520003 	cmp	r2, r3
  11b290:	1a000013 	bne	11b2e4 <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b294:	e3a03000 	mov	r3, #0
  11b298:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b29c:	e51b3010 	ldr	r3, [fp, #-16]
  11b2a0:	e5933000 	ldr	r3, [r3]
  11b2a4:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b2a8:	e51b3010 	ldr	r3, [fp, #-16]
  11b2ac:	e3530000 	cmp	r3, #0
  11b2b0:	1a00000b 	bne	11b2e4 <pbuf_copy+0x20c>
  11b2b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2b8:	e3530000 	cmp	r3, #0
  11b2bc:	0a000008 	beq	11b2e4 <pbuf_copy+0x20c>
  11b2c0:	e3070718 	movw	r0, #30488	; 0x7718
  11b2c4:	e3400014 	movt	r0, #20
  11b2c8:	ebff9f91 	bl	103114 <rt_kprintf>
  11b2cc:	e30013d9 	movw	r1, #985	; 0x3d9
  11b2d0:	e307036c 	movw	r0, #29548	; 0x736c
  11b2d4:	e3400014 	movt	r0, #20
  11b2d8:	ebffbead 	bl	10ad94 <sys_arch_assert>
  11b2dc:	e3e0300f 	mvn	r3, #15
  11b2e0:	ea00002f 	b	11b3a4 <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b2e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2e8:	e3530000 	cmp	r3, #0
  11b2ec:	0a000012 	beq	11b33c <pbuf_copy+0x264>
  11b2f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2f4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b2f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2fc:	e1d330b8 	ldrh	r3, [r3, #8]
  11b300:	e1520003 	cmp	r2, r3
  11b304:	1a00000c 	bne	11b33c <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b308:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b30c:	e5933000 	ldr	r3, [r3]
  11b310:	e3530000 	cmp	r3, #0
  11b314:	0a000008 	beq	11b33c <pbuf_copy+0x264>
  11b318:	e3070728 	movw	r0, #30504	; 0x7728
  11b31c:	e3400014 	movt	r0, #20
  11b320:	ebff9f7b 	bl	103114 <rt_kprintf>
  11b324:	e30013df 	movw	r1, #991	; 0x3df
  11b328:	e307036c 	movw	r0, #29548	; 0x736c
  11b32c:	e3400014 	movt	r0, #20
  11b330:	ebffbe97 	bl	10ad94 <sys_arch_assert>
  11b334:	e3e03005 	mvn	r3, #5
  11b338:	ea000019 	b	11b3a4 <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b33c:	e51b3010 	ldr	r3, [fp, #-16]
  11b340:	e3530000 	cmp	r3, #0
  11b344:	0a000012 	beq	11b394 <pbuf_copy+0x2bc>
  11b348:	e51b3010 	ldr	r3, [fp, #-16]
  11b34c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b350:	e51b3010 	ldr	r3, [fp, #-16]
  11b354:	e1d330b8 	ldrh	r3, [r3, #8]
  11b358:	e1520003 	cmp	r2, r3
  11b35c:	1a00000c 	bne	11b394 <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b360:	e51b3010 	ldr	r3, [fp, #-16]
  11b364:	e5933000 	ldr	r3, [r3]
  11b368:	e3530000 	cmp	r3, #0
  11b36c:	0a000008 	beq	11b394 <pbuf_copy+0x2bc>
  11b370:	e3070728 	movw	r0, #30504	; 0x7728
  11b374:	e3400014 	movt	r0, #20
  11b378:	ebff9f65 	bl	103114 <rt_kprintf>
  11b37c:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b380:	e307036c 	movw	r0, #29548	; 0x736c
  11b384:	e3400014 	movt	r0, #20
  11b388:	ebffbe81 	bl	10ad94 <sys_arch_assert>
  11b38c:	e3e03005 	mvn	r3, #5
  11b390:	ea000003 	b	11b3a4 <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b398:	e3530000 	cmp	r3, #0
  11b39c:	1affff6b 	bne	11b150 <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b3a0:	e3a03000 	mov	r3, #0
}
  11b3a4:	e1a00003 	mov	r0, r3
  11b3a8:	e24bd004 	sub	sp, fp, #4
  11b3ac:	e8bd8800 	pop	{fp, pc}

0011b3b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b3b0:	e92d4800 	push	{fp, lr}
  11b3b4:	e28db004 	add	fp, sp, #4
  11b3b8:	e24dd020 	sub	sp, sp, #32
  11b3bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b3c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b3c4:	e1a01002 	mov	r1, r2
  11b3c8:	e1a02003 	mov	r2, r3
  11b3cc:	e1a03001 	mov	r3, r1
  11b3d0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b3d4:	e1a03002 	mov	r3, r2
  11b3d8:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b3dc:	e3a03000 	mov	r3, #0
  11b3e0:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b3e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b3e8:	e3530000 	cmp	r3, #0
  11b3ec:	1a000008 	bne	11b414 <pbuf_copy_partial+0x64>
  11b3f0:	e3070754 	movw	r0, #30548	; 0x7754
  11b3f4:	e3400014 	movt	r0, #20
  11b3f8:	ebff9f45 	bl	103114 <rt_kprintf>
  11b3fc:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b400:	e307036c 	movw	r0, #29548	; 0x736c
  11b404:	e3400014 	movt	r0, #20
  11b408:	ebffbe61 	bl	10ad94 <sys_arch_assert>
  11b40c:	e3a03000 	mov	r3, #0
  11b410:	ea000053 	b	11b564 <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b414:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b418:	e3530000 	cmp	r3, #0
  11b41c:	1a000008 	bne	11b444 <pbuf_copy_partial+0x94>
  11b420:	e3070774 	movw	r0, #30580	; 0x7774
  11b424:	e3400014 	movt	r0, #20
  11b428:	ebff9f39 	bl	103114 <rt_kprintf>
  11b42c:	e3a01b01 	mov	r1, #1024	; 0x400
  11b430:	e307036c 	movw	r0, #29548	; 0x736c
  11b434:	e3400014 	movt	r0, #20
  11b438:	ebffbe55 	bl	10ad94 <sys_arch_assert>
  11b43c:	e3a03000 	mov	r3, #0
  11b440:	ea000047 	b	11b564 <pbuf_copy_partial+0x1b4>

  left = 0;
  11b444:	e3a03000 	mov	r3, #0
  11b448:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b44c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b450:	e3530000 	cmp	r3, #0
  11b454:	0a000002 	beq	11b464 <pbuf_copy_partial+0xb4>
  11b458:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b45c:	e3530000 	cmp	r3, #0
  11b460:	1a000001 	bne	11b46c <pbuf_copy_partial+0xbc>
    return 0;
  11b464:	e3a03000 	mov	r3, #0
  11b468:	ea00003d 	b	11b564 <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b46c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b470:	e50b3008 	str	r3, [fp, #-8]
  11b474:	ea000033 	b	11b548 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b478:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b47c:	e3530000 	cmp	r3, #0
  11b480:	0a00000a 	beq	11b4b0 <pbuf_copy_partial+0x100>
  11b484:	e51b3008 	ldr	r3, [fp, #-8]
  11b488:	e1d330ba 	ldrh	r3, [r3, #10]
  11b48c:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b490:	e1520003 	cmp	r2, r3
  11b494:	3a000005 	bcc	11b4b0 <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b498:	e51b3008 	ldr	r3, [fp, #-8]
  11b49c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b4a0:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b4a4:	e0423003 	sub	r3, r2, r3
  11b4a8:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b4ac:	ea000022 	b	11b53c <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b4b0:	e51b3008 	ldr	r3, [fp, #-8]
  11b4b4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b4b8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b4bc:	e0423003 	sub	r3, r2, r3
  11b4c0:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b4c4:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b4c8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b4cc:	e1520003 	cmp	r2, r3
  11b4d0:	9a000001 	bls	11b4dc <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b4d4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b4d8:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b4dc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b4e0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b4e4:	e0820003 	add	r0, r2, r3
  11b4e8:	e51b3008 	ldr	r3, [fp, #-8]
  11b4ec:	e5932004 	ldr	r2, [r3, #4]
  11b4f0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b4f4:	e0823003 	add	r3, r2, r3
  11b4f8:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b4fc:	e1a01003 	mov	r1, r3
  11b500:	eb00955f 	bl	140a84 <memcpy>
      copied_total += buf_copy_len;
  11b504:	e15b20be 	ldrh	r2, [fp, #-14]
  11b508:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b50c:	e0823003 	add	r3, r2, r3
  11b510:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b514:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b518:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b51c:	e0823003 	add	r3, r2, r3
  11b520:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b524:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b528:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b52c:	e0423003 	sub	r3, r2, r3
  11b530:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b534:	e3a03000 	mov	r3, #0
  11b538:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b53c:	e51b3008 	ldr	r3, [fp, #-8]
  11b540:	e5933000 	ldr	r3, [r3]
  11b544:	e50b3008 	str	r3, [fp, #-8]
  11b548:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b54c:	e3530000 	cmp	r3, #0
  11b550:	0a000002 	beq	11b560 <pbuf_copy_partial+0x1b0>
  11b554:	e51b3008 	ldr	r3, [fp, #-8]
  11b558:	e3530000 	cmp	r3, #0
  11b55c:	1affffc5 	bne	11b478 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b560:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b564:	e1a00003 	mov	r0, r3
  11b568:	e24bd004 	sub	sp, fp, #4
  11b56c:	e8bd8800 	pop	{fp, pc}

0011b570 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b570:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b574:	e28db000 	add	fp, sp, #0
  11b578:	e24dd01c 	sub	sp, sp, #28
  11b57c:	e50b0010 	str	r0, [fp, #-16]
  11b580:	e1a03001 	mov	r3, r1
  11b584:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b588:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b58c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b590:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b594:	e51b3010 	ldr	r3, [fp, #-16]
  11b598:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b59c:	ea000007 	b	11b5c0 <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b5a0:	e51b300c 	ldr	r3, [fp, #-12]
  11b5a4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b5a8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5ac:	e0423003 	sub	r3, r2, r3
  11b5b0:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b5b4:	e51b300c 	ldr	r3, [fp, #-12]
  11b5b8:	e5933000 	ldr	r3, [r3]
  11b5bc:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b5c0:	e51b300c 	ldr	r3, [fp, #-12]
  11b5c4:	e3530000 	cmp	r3, #0
  11b5c8:	0a000004 	beq	11b5e0 <pbuf_skip_const+0x70>
  11b5cc:	e51b300c 	ldr	r3, [fp, #-12]
  11b5d0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b5d4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5d8:	e1520003 	cmp	r2, r3
  11b5dc:	2affffef 	bcs	11b5a0 <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b5e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b5e4:	e3530000 	cmp	r3, #0
  11b5e8:	0a000002 	beq	11b5f8 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b5ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b5f0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5f4:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b5f8:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b5fc:	e1a00003 	mov	r0, r3
  11b600:	e28bd000 	add	sp, fp, #0
  11b604:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b608:	e12fff1e 	bx	lr

0011b60c <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b60c:	e92d4800 	push	{fp, lr}
  11b610:	e28db004 	add	fp, sp, #4
  11b614:	e24dd018 	sub	sp, sp, #24
  11b618:	e50b0010 	str	r0, [fp, #-16]
  11b61c:	e1a03001 	mov	r3, r1
  11b620:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b624:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b628:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b62c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b630:	e1a01003 	mov	r1, r3
  11b634:	e51b0010 	ldr	r0, [fp, #-16]
  11b638:	ebffffcc 	bl	11b570 <pbuf_skip_const>
  11b63c:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b640:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b644:	e1a00003 	mov	r0, r3
  11b648:	e24bd004 	sub	sp, fp, #4
  11b64c:	e8bd8800 	pop	{fp, pc}

0011b650 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b650:	e92d4800 	push	{fp, lr}
  11b654:	e28db004 	add	fp, sp, #4
  11b658:	e24dd020 	sub	sp, sp, #32
  11b65c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b660:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b664:	e1a03002 	mov	r3, r2
  11b668:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b66c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b670:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b674:	e3a03000 	mov	r3, #0
  11b678:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b67c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b680:	e3530000 	cmp	r3, #0
  11b684:	1a000008 	bne	11b6ac <pbuf_take+0x5c>
  11b688:	e3070798 	movw	r0, #30616	; 0x7798
  11b68c:	e3400014 	movt	r0, #20
  11b690:	ebff9e9f 	bl	103114 <rt_kprintf>
  11b694:	e3001485 	movw	r1, #1157	; 0x485
  11b698:	e307036c 	movw	r0, #29548	; 0x736c
  11b69c:	e3400014 	movt	r0, #20
  11b6a0:	ebffbdbb 	bl	10ad94 <sys_arch_assert>
  11b6a4:	e3e0300f 	mvn	r3, #15
  11b6a8:	ea000062 	b	11b838 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b6ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b6b0:	e3530000 	cmp	r3, #0
  11b6b4:	1a000008 	bne	11b6dc <pbuf_take+0x8c>
  11b6b8:	e30707b0 	movw	r0, #30640	; 0x77b0
  11b6bc:	e3400014 	movt	r0, #20
  11b6c0:	ebff9e93 	bl	103114 <rt_kprintf>
  11b6c4:	e3001486 	movw	r1, #1158	; 0x486
  11b6c8:	e307036c 	movw	r0, #29548	; 0x736c
  11b6cc:	e3400014 	movt	r0, #20
  11b6d0:	ebffbdaf 	bl	10ad94 <sys_arch_assert>
  11b6d4:	e3e0300f 	mvn	r3, #15
  11b6d8:	ea000056 	b	11b838 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11b6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6e0:	e1d330b8 	ldrh	r3, [r3, #8]
  11b6e4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b6e8:	e1520003 	cmp	r2, r3
  11b6ec:	9a000008 	bls	11b714 <pbuf_take+0xc4>
  11b6f0:	e30707cc 	movw	r0, #30668	; 0x77cc
  11b6f4:	e3400014 	movt	r0, #20
  11b6f8:	ebff9e85 	bl	103114 <rt_kprintf>
  11b6fc:	e3001487 	movw	r1, #1159	; 0x487
  11b700:	e307036c 	movw	r0, #29548	; 0x736c
  11b704:	e3400014 	movt	r0, #20
  11b708:	ebffbda1 	bl	10ad94 <sys_arch_assert>
  11b70c:	e3e03000 	mvn	r3, #0
  11b710:	ea000048 	b	11b838 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11b714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b718:	e3530000 	cmp	r3, #0
  11b71c:	0a000007 	beq	11b740 <pbuf_take+0xf0>
  11b720:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b724:	e3530000 	cmp	r3, #0
  11b728:	0a000004 	beq	11b740 <pbuf_take+0xf0>
  11b72c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b730:	e1d330b8 	ldrh	r3, [r3, #8]
  11b734:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b738:	e1520003 	cmp	r2, r3
  11b73c:	9a000001 	bls	11b748 <pbuf_take+0xf8>
    return ERR_ARG;
  11b740:	e3e0300f 	mvn	r3, #15
  11b744:	ea00003b 	b	11b838 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b748:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b74c:	e50b3008 	str	r3, [fp, #-8]
  11b750:	ea000026 	b	11b7f0 <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11b754:	e51b3008 	ldr	r3, [fp, #-8]
  11b758:	e3530000 	cmp	r3, #0
  11b75c:	1a000006 	bne	11b77c <pbuf_take+0x12c>
  11b760:	e30707ec 	movw	r0, #30700	; 0x77ec
  11b764:	e3400014 	movt	r0, #20
  11b768:	ebff9e69 	bl	103114 <rt_kprintf>
  11b76c:	e300148f 	movw	r1, #1167	; 0x48f
  11b770:	e307036c 	movw	r0, #29548	; 0x736c
  11b774:	e3400014 	movt	r0, #20
  11b778:	ebffbd85 	bl	10ad94 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11b77c:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b780:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11b784:	e51b3008 	ldr	r3, [fp, #-8]
  11b788:	e1d330ba 	ldrh	r3, [r3, #10]
  11b78c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b790:	e1520003 	cmp	r2, r3
  11b794:	9a000002 	bls	11b7a4 <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11b798:	e51b3008 	ldr	r3, [fp, #-8]
  11b79c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7a0:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11b7a4:	e51b3008 	ldr	r3, [fp, #-8]
  11b7a8:	e5930004 	ldr	r0, [r3, #4]
  11b7ac:	e15b30be 	ldrh	r3, [fp, #-14]
  11b7b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b7b4:	e0823003 	add	r3, r2, r3
  11b7b8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b7bc:	e1a01003 	mov	r1, r3
  11b7c0:	eb0094af 	bl	140a84 <memcpy>
    total_copy_len -= buf_copy_len;
  11b7c4:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b7c8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b7cc:	e0423003 	sub	r3, r2, r3
  11b7d0:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11b7d4:	e15b20be 	ldrh	r2, [fp, #-14]
  11b7d8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b7dc:	e0823003 	add	r3, r2, r3
  11b7e0:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b7e4:	e51b3008 	ldr	r3, [fp, #-8]
  11b7e8:	e5933000 	ldr	r3, [r3]
  11b7ec:	e50b3008 	str	r3, [fp, #-8]
  11b7f0:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b7f4:	e3530000 	cmp	r3, #0
  11b7f8:	1affffd5 	bne	11b754 <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11b7fc:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b800:	e3530000 	cmp	r3, #0
  11b804:	1a000003 	bne	11b818 <pbuf_take+0x1c8>
  11b808:	e15b20be 	ldrh	r2, [fp, #-14]
  11b80c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b810:	e1520003 	cmp	r2, r3
  11b814:	0a000006 	beq	11b834 <pbuf_take+0x1e4>
  11b818:	e3070804 	movw	r0, #30724	; 0x7804
  11b81c:	e3400014 	movt	r0, #20
  11b820:	ebff9e3b 	bl	103114 <rt_kprintf>
  11b824:	e300149a 	movw	r1, #1178	; 0x49a
  11b828:	e307036c 	movw	r0, #29548	; 0x736c
  11b82c:	e3400014 	movt	r0, #20
  11b830:	ebffbd57 	bl	10ad94 <sys_arch_assert>
  return ERR_OK;
  11b834:	e3a03000 	mov	r3, #0
}
  11b838:	e1a00003 	mov	r0, r3
  11b83c:	e24bd004 	sub	sp, fp, #4
  11b840:	e8bd8800 	pop	{fp, pc}

0011b844 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11b844:	e92d4800 	push	{fp, lr}
  11b848:	e28db004 	add	fp, sp, #4
  11b84c:	e24dd020 	sub	sp, sp, #32
  11b850:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b854:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b858:	e1a01002 	mov	r1, r2
  11b85c:	e1a02003 	mov	r2, r3
  11b860:	e1a03001 	mov	r3, r1
  11b864:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b868:	e1a03002 	mov	r3, r2
  11b86c:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11b870:	e24b2014 	sub	r2, fp, #20
  11b874:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b878:	e1a01003 	mov	r1, r3
  11b87c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b880:	ebffff61 	bl	11b60c <pbuf_skip>
  11b884:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11b888:	e51b3008 	ldr	r3, [fp, #-8]
  11b88c:	e3530000 	cmp	r3, #0
  11b890:	0a000033 	beq	11b964 <pbuf_take_at+0x120>
  11b894:	e51b3008 	ldr	r3, [fp, #-8]
  11b898:	e1d330b8 	ldrh	r3, [r3, #8]
  11b89c:	e1a02003 	mov	r2, r3
  11b8a0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b8a4:	e1a01003 	mov	r1, r3
  11b8a8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b8ac:	e0813003 	add	r3, r1, r3
  11b8b0:	e1520003 	cmp	r2, r3
  11b8b4:	ba00002a 	blt	11b964 <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11b8b8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b8bc:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11b8c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b8c4:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11b8c8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b8cc:	e51b3008 	ldr	r3, [fp, #-8]
  11b8d0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b8d4:	e1a01003 	mov	r1, r3
  11b8d8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b8dc:	e0413003 	sub	r3, r1, r3
  11b8e0:	e1520003 	cmp	r2, r3
  11b8e4:	b1a03002 	movlt	r3, r2
  11b8e8:	a1a03003 	movge	r3, r3
  11b8ec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11b8f0:	e51b3008 	ldr	r3, [fp, #-8]
  11b8f4:	e5933004 	ldr	r3, [r3, #4]
  11b8f8:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11b8fc:	e0833002 	add	r3, r3, r2
  11b900:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11b904:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11b908:	e1a00003 	mov	r0, r3
  11b90c:	eb00945c 	bl	140a84 <memcpy>
    remaining_len -= first_copy_len;
  11b910:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b914:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b918:	e0423003 	sub	r3, r2, r3
  11b91c:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11b920:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b924:	e51b2010 	ldr	r2, [fp, #-16]
  11b928:	e0823003 	add	r3, r2, r3
  11b92c:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11b930:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b934:	e3530000 	cmp	r3, #0
  11b938:	0a000007 	beq	11b95c <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11b93c:	e51b3008 	ldr	r3, [fp, #-8]
  11b940:	e5933000 	ldr	r3, [r3]
  11b944:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b948:	e51b1010 	ldr	r1, [fp, #-16]
  11b94c:	e1a00003 	mov	r0, r3
  11b950:	ebffff3e 	bl	11b650 <pbuf_take>
  11b954:	e1a03000 	mov	r3, r0
  11b958:	ea000002 	b	11b968 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11b95c:	e3a03000 	mov	r3, #0
  11b960:	ea000000 	b	11b968 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11b964:	e3e03000 	mvn	r3, #0
}
  11b968:	e1a00003 	mov	r0, r3
  11b96c:	e24bd004 	sub	sp, fp, #4
  11b970:	e8bd8800 	pop	{fp, pc}

0011b974 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11b974:	e92d4800 	push	{fp, lr}
  11b978:	e28db004 	add	fp, sp, #4
  11b97c:	e24dd010 	sub	sp, sp, #16
  11b980:	e50b0010 	str	r0, [fp, #-16]
  11b984:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11b988:	e51b3010 	ldr	r3, [fp, #-16]
  11b98c:	e5933000 	ldr	r3, [r3]
  11b990:	e3530000 	cmp	r3, #0
  11b994:	1a000001 	bne	11b9a0 <pbuf_coalesce+0x2c>
    return p;
  11b998:	e51b3010 	ldr	r3, [fp, #-16]
  11b99c:	ea00001d 	b	11ba18 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11b9a0:	e51b3010 	ldr	r3, [fp, #-16]
  11b9a4:	e1d330b8 	ldrh	r3, [r3, #8]
  11b9a8:	e3a02000 	mov	r2, #0
  11b9ac:	e1a01003 	mov	r1, r3
  11b9b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11b9b4:	ebfff96b 	bl	119f68 <pbuf_alloc>
  11b9b8:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11b9bc:	e51b3008 	ldr	r3, [fp, #-8]
  11b9c0:	e3530000 	cmp	r3, #0
  11b9c4:	1a000001 	bne	11b9d0 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11b9c8:	e51b3010 	ldr	r3, [fp, #-16]
  11b9cc:	ea000011 	b	11ba18 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11b9d0:	e51b1010 	ldr	r1, [fp, #-16]
  11b9d4:	e51b0008 	ldr	r0, [fp, #-8]
  11b9d8:	ebfffdbe 	bl	11b0d8 <pbuf_copy>
  11b9dc:	e1a03000 	mov	r3, r0
  11b9e0:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11b9e4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11b9e8:	e3530000 	cmp	r3, #0
  11b9ec:	0a000006 	beq	11ba0c <pbuf_coalesce+0x98>
  11b9f0:	e307081c 	movw	r0, #30748	; 0x781c
  11b9f4:	e3400014 	movt	r0, #20
  11b9f8:	ebff9dc5 	bl	103114 <rt_kprintf>
  11b9fc:	e30014dc 	movw	r1, #1244	; 0x4dc
  11ba00:	e307036c 	movw	r0, #29548	; 0x736c
  11ba04:	e3400014 	movt	r0, #20
  11ba08:	ebffbce1 	bl	10ad94 <sys_arch_assert>
  pbuf_free(p);
  11ba0c:	e51b0010 	ldr	r0, [fp, #-16]
  11ba10:	ebfffc5b 	bl	11ab84 <pbuf_free>
  return q;
  11ba14:	e51b3008 	ldr	r3, [fp, #-8]
}
  11ba18:	e1a00003 	mov	r0, r3
  11ba1c:	e24bd004 	sub	sp, fp, #4
  11ba20:	e8bd8800 	pop	{fp, pc}

0011ba24 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11ba24:	e92d4800 	push	{fp, lr}
  11ba28:	e28db004 	add	fp, sp, #4
  11ba2c:	e24dd010 	sub	sp, sp, #16
  11ba30:	e50b0010 	str	r0, [fp, #-16]
  11ba34:	e1a03001 	mov	r3, r1
  11ba38:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11ba3c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ba40:	e1a01003 	mov	r1, r3
  11ba44:	e51b0010 	ldr	r0, [fp, #-16]
  11ba48:	eb00000a 	bl	11ba78 <pbuf_try_get_at>
  11ba4c:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11ba50:	e51b3008 	ldr	r3, [fp, #-8]
  11ba54:	e3530000 	cmp	r3, #0
  11ba58:	ba000002 	blt	11ba68 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11ba5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ba60:	e6ef3073 	uxtb	r3, r3
  11ba64:	ea000000 	b	11ba6c <pbuf_get_at+0x48>
  }
  return 0;
  11ba68:	e3a03000 	mov	r3, #0
}
  11ba6c:	e1a00003 	mov	r0, r3
  11ba70:	e24bd004 	sub	sp, fp, #4
  11ba74:	e8bd8800 	pop	{fp, pc}

0011ba78 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11ba78:	e92d4800 	push	{fp, lr}
  11ba7c:	e28db004 	add	fp, sp, #4
  11ba80:	e24dd010 	sub	sp, sp, #16
  11ba84:	e50b0010 	str	r0, [fp, #-16]
  11ba88:	e1a03001 	mov	r3, r1
  11ba8c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11ba90:	e24b200a 	sub	r2, fp, #10
  11ba94:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ba98:	e1a01003 	mov	r1, r3
  11ba9c:	e51b0010 	ldr	r0, [fp, #-16]
  11baa0:	ebfffeb2 	bl	11b570 <pbuf_skip_const>
  11baa4:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11baa8:	e51b3008 	ldr	r3, [fp, #-8]
  11baac:	e3530000 	cmp	r3, #0
  11bab0:	0a00000a 	beq	11bae0 <pbuf_try_get_at+0x68>
  11bab4:	e51b3008 	ldr	r3, [fp, #-8]
  11bab8:	e1d320ba 	ldrh	r2, [r3, #10]
  11babc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bac0:	e1520003 	cmp	r2, r3
  11bac4:	9a000005 	bls	11bae0 <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11bac8:	e51b3008 	ldr	r3, [fp, #-8]
  11bacc:	e5933004 	ldr	r3, [r3, #4]
  11bad0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bad4:	e0833002 	add	r3, r3, r2
  11bad8:	e5d33000 	ldrb	r3, [r3]
  11badc:	ea000000 	b	11bae4 <pbuf_try_get_at+0x6c>
  }
  return -1;
  11bae0:	e3e03000 	mvn	r3, #0
}
  11bae4:	e1a00003 	mov	r0, r3
  11bae8:	e24bd004 	sub	sp, fp, #4
  11baec:	e8bd8800 	pop	{fp, pc}

0011baf0 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11baf0:	e92d4800 	push	{fp, lr}
  11baf4:	e28db004 	add	fp, sp, #4
  11baf8:	e24dd010 	sub	sp, sp, #16
  11bafc:	e50b0010 	str	r0, [fp, #-16]
  11bb00:	e1a03001 	mov	r3, r1
  11bb04:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11bb08:	e1a03002 	mov	r3, r2
  11bb0c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11bb10:	e24b200a 	sub	r2, fp, #10
  11bb14:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bb18:	e1a01003 	mov	r1, r3
  11bb1c:	e51b0010 	ldr	r0, [fp, #-16]
  11bb20:	ebfffeb9 	bl	11b60c <pbuf_skip>
  11bb24:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bb28:	e51b3008 	ldr	r3, [fp, #-8]
  11bb2c:	e3530000 	cmp	r3, #0
  11bb30:	0a00000a 	beq	11bb60 <pbuf_put_at+0x70>
  11bb34:	e51b3008 	ldr	r3, [fp, #-8]
  11bb38:	e1d320ba 	ldrh	r2, [r3, #10]
  11bb3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bb40:	e1520003 	cmp	r2, r3
  11bb44:	9a000005 	bls	11bb60 <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11bb48:	e51b3008 	ldr	r3, [fp, #-8]
  11bb4c:	e5933004 	ldr	r3, [r3, #4]
  11bb50:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bb54:	e0833002 	add	r3, r3, r2
  11bb58:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11bb5c:	e5c32000 	strb	r2, [r3]
  }
}
  11bb60:	e320f000 	nop	{0}
  11bb64:	e24bd004 	sub	sp, fp, #4
  11bb68:	e8bd8800 	pop	{fp, pc}

0011bb6c <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11bb6c:	e92d4800 	push	{fp, lr}
  11bb70:	e28db004 	add	fp, sp, #4
  11bb74:	e24dd020 	sub	sp, sp, #32
  11bb78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb7c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11bb80:	e1a02003 	mov	r2, r3
  11bb84:	e1a03001 	mov	r3, r1
  11bb88:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11bb8c:	e1a03002 	mov	r3, r2
  11bb90:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11bb94:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11bb98:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11bb9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bba0:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11bba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bba8:	e1d330b8 	ldrh	r3, [r3, #8]
  11bbac:	e1a01003 	mov	r1, r3
  11bbb0:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11bbb4:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bbb8:	e0823003 	add	r3, r2, r3
  11bbbc:	e1510003 	cmp	r1, r3
  11bbc0:	aa000009 	bge	11bbec <pbuf_memcmp+0x80>
    return 0xffff;
  11bbc4:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bbc8:	ea000030 	b	11bc90 <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bbcc:	e51b300c 	ldr	r3, [fp, #-12]
  11bbd0:	e1d330ba 	ldrh	r3, [r3, #10]
  11bbd4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bbd8:	e0423003 	sub	r3, r2, r3
  11bbdc:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bbe0:	e51b300c 	ldr	r3, [fp, #-12]
  11bbe4:	e5933000 	ldr	r3, [r3]
  11bbe8:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bbec:	e51b300c 	ldr	r3, [fp, #-12]
  11bbf0:	e3530000 	cmp	r3, #0
  11bbf4:	0a000004 	beq	11bc0c <pbuf_memcmp+0xa0>
  11bbf8:	e51b300c 	ldr	r3, [fp, #-12]
  11bbfc:	e1d330ba 	ldrh	r3, [r3, #10]
  11bc00:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bc04:	e1520003 	cmp	r2, r3
  11bc08:	2affffef 	bcs	11bbcc <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11bc0c:	e3a03000 	mov	r3, #0
  11bc10:	e14b30be 	strh	r3, [fp, #-14]
  11bc14:	ea000018 	b	11bc7c <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bc18:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bc1c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc20:	e0823003 	add	r3, r2, r3
  11bc24:	e6ff3073 	uxth	r3, r3
  11bc28:	e1a01003 	mov	r1, r3
  11bc2c:	e51b000c 	ldr	r0, [fp, #-12]
  11bc30:	ebffff7b 	bl	11ba24 <pbuf_get_at>
  11bc34:	e1a03000 	mov	r3, r0
  11bc38:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bc3c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc40:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bc44:	e0823003 	add	r3, r2, r3
  11bc48:	e5d33000 	ldrb	r3, [r3]
  11bc4c:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bc50:	e55b200f 	ldrb	r2, [fp, #-15]
  11bc54:	e55b3010 	ldrb	r3, [fp, #-16]
  11bc58:	e1520003 	cmp	r2, r3
  11bc5c:	0a000003 	beq	11bc70 <pbuf_memcmp+0x104>
      return i+1;
  11bc60:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc64:	e2833001 	add	r3, r3, #1
  11bc68:	e6ff3073 	uxth	r3, r3
  11bc6c:	ea000007 	b	11bc90 <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bc70:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc74:	e2833001 	add	r3, r3, #1
  11bc78:	e14b30be 	strh	r3, [fp, #-14]
  11bc7c:	e15b20be 	ldrh	r2, [fp, #-14]
  11bc80:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bc84:	e1520003 	cmp	r2, r3
  11bc88:	3affffe2 	bcc	11bc18 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bc8c:	e3a03000 	mov	r3, #0
}
  11bc90:	e1a00003 	mov	r0, r3
  11bc94:	e24bd004 	sub	sp, fp, #4
  11bc98:	e8bd8800 	pop	{fp, pc}

0011bc9c <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bc9c:	e92d4800 	push	{fp, lr}
  11bca0:	e28db004 	add	fp, sp, #4
  11bca4:	e24dd018 	sub	sp, sp, #24
  11bca8:	e50b0010 	str	r0, [fp, #-16]
  11bcac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bcb0:	e1a01002 	mov	r1, r2
  11bcb4:	e1a02003 	mov	r2, r3
  11bcb8:	e1a03001 	mov	r3, r1
  11bcbc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bcc0:	e1a03002 	mov	r3, r2
  11bcc4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11bcc8:	e51b3010 	ldr	r3, [fp, #-16]
  11bccc:	e1d320b8 	ldrh	r2, [r3, #8]
  11bcd0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bcd4:	e0423003 	sub	r3, r2, r3
  11bcd8:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11bcdc:	e51b3010 	ldr	r3, [fp, #-16]
  11bce0:	e1d330b8 	ldrh	r3, [r3, #8]
  11bce4:	e1a01003 	mov	r1, r3
  11bce8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11bcec:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bcf0:	e0823003 	add	r3, r2, r3
  11bcf4:	e1510003 	cmp	r1, r3
  11bcf8:	ba000015 	blt	11bd54 <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11bcfc:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bd00:	e14b30b6 	strh	r3, [fp, #-6]
  11bd04:	ea00000e 	b	11bd44 <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11bd08:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bd0c:	e15b10b6 	ldrh	r1, [fp, #-6]
  11bd10:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11bd14:	e51b0010 	ldr	r0, [fp, #-16]
  11bd18:	ebffff93 	bl	11bb6c <pbuf_memcmp>
  11bd1c:	e1a03000 	mov	r3, r0
  11bd20:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11bd24:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bd28:	e3530000 	cmp	r3, #0
  11bd2c:	1a000001 	bne	11bd38 <pbuf_memfind+0x9c>
        return i;
  11bd30:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bd34:	ea000007 	b	11bd58 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11bd38:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bd3c:	e2833001 	add	r3, r3, #1
  11bd40:	e14b30b6 	strh	r3, [fp, #-6]
  11bd44:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bd48:	e15b30b8 	ldrh	r3, [fp, #-8]
  11bd4c:	e1520003 	cmp	r2, r3
  11bd50:	9affffec 	bls	11bd08 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11bd54:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11bd58:	e1a00003 	mov	r0, r3
  11bd5c:	e24bd004 	sub	sp, fp, #4
  11bd60:	e8bd8800 	pop	{fp, pc}

0011bd64 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11bd64:	e92d4800 	push	{fp, lr}
  11bd68:	e28db004 	add	fp, sp, #4
  11bd6c:	e24dd010 	sub	sp, sp, #16
  11bd70:	e50b0010 	str	r0, [fp, #-16]
  11bd74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11bd78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bd7c:	e3530000 	cmp	r3, #0
  11bd80:	0a000008 	beq	11bda8 <pbuf_strstr+0x44>
  11bd84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bd88:	e5d33000 	ldrb	r3, [r3]
  11bd8c:	e3530000 	cmp	r3, #0
  11bd90:	0a000004 	beq	11bda8 <pbuf_strstr+0x44>
  11bd94:	e51b3010 	ldr	r3, [fp, #-16]
  11bd98:	e1d330b8 	ldrh	r3, [r3, #8]
  11bd9c:	e30f2fff 	movw	r2, #65535	; 0xffff
  11bda0:	e1530002 	cmp	r3, r2
  11bda4:	1a000001 	bne	11bdb0 <pbuf_strstr+0x4c>
    return 0xFFFF;
  11bda8:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bdac:	ea00000f 	b	11bdf0 <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11bdb0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11bdb4:	eb0094fb 	bl	1411a8 <strlen>
  11bdb8:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11bdbc:	e51b3008 	ldr	r3, [fp, #-8]
  11bdc0:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11bdc4:	e1530002 	cmp	r3, r2
  11bdc8:	9a000001 	bls	11bdd4 <pbuf_strstr+0x70>
    return 0xFFFF;
  11bdcc:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bdd0:	ea000006 	b	11bdf0 <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11bdd4:	e51b3008 	ldr	r3, [fp, #-8]
  11bdd8:	e6ff2073 	uxth	r2, r3
  11bddc:	e3a03000 	mov	r3, #0
  11bde0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11bde4:	e51b0010 	ldr	r0, [fp, #-16]
  11bde8:	ebffffab 	bl	11bc9c <pbuf_memfind>
  11bdec:	e1a03000 	mov	r3, r0
}
  11bdf0:	e1a00003 	mov	r0, r3
  11bdf4:	e24bd004 	sub	sp, fp, #4
  11bdf8:	e8bd8800 	pop	{fp, pc}

0011bdfc <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11bdfc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11be00:	e28db000 	add	fp, sp, #0
  11be04:	e24dd00c 	sub	sp, sp, #12
  11be08:	e50b0008 	str	r0, [fp, #-8]
  11be0c:	e1a03001 	mov	r3, r1
  11be10:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11be14:	e55b3009 	ldrb	r3, [fp, #-9]
  11be18:	e3530000 	cmp	r3, #0
  11be1c:	0a00000d 	beq	11be58 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11be20:	e51b3008 	ldr	r3, [fp, #-8]
  11be24:	e5d33008 	ldrb	r3, [r3, #8]
  11be28:	e2033020 	and	r3, r3, #32
  11be2c:	e3530000 	cmp	r3, #0
  11be30:	0a000018 	beq	11be98 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11be34:	e51b3008 	ldr	r3, [fp, #-8]
  11be38:	e3530000 	cmp	r3, #0
  11be3c:	0a000003 	beq	11be50 <raw_input_match+0x54>
  11be40:	e51b3008 	ldr	r3, [fp, #-8]
  11be44:	e5933000 	ldr	r3, [r3]
  11be48:	e3530000 	cmp	r3, #0
  11be4c:	1a000011 	bne	11be98 <raw_input_match+0x9c>
          return 1;
  11be50:	e3a03001 	mov	r3, #1
  11be54:	ea000010 	b	11be9c <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11be58:	e51b3008 	ldr	r3, [fp, #-8]
  11be5c:	e3530000 	cmp	r3, #0
  11be60:	0a00000a 	beq	11be90 <raw_input_match+0x94>
  11be64:	e51b3008 	ldr	r3, [fp, #-8]
  11be68:	e5933000 	ldr	r3, [r3]
  11be6c:	e3530000 	cmp	r3, #0
  11be70:	0a000006 	beq	11be90 <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11be74:	e51b3008 	ldr	r3, [fp, #-8]
  11be78:	e5932000 	ldr	r2, [r3]
  11be7c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11be80:	e3403014 	movt	r3, #20
  11be84:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11be88:	e1520003 	cmp	r2, r3
  11be8c:	1a000001 	bne	11be98 <raw_input_match+0x9c>
      return 1;
  11be90:	e3a03001 	mov	r3, #1
  11be94:	ea000000 	b	11be9c <raw_input_match+0xa0>
    }
  }

  return 0;
  11be98:	e3a03000 	mov	r3, #0
}
  11be9c:	e1a00003 	mov	r0, r3
  11bea0:	e28bd000 	add	sp, fp, #0
  11bea4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11bea8:	e12fff1e 	bx	lr

0011beac <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11beac:	e92d4810 	push	{r4, fp, lr}
  11beb0:	e28db008 	add	fp, sp, #8
  11beb4:	e24dd01c 	sub	sp, sp, #28
  11beb8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11bebc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11bec0:	e3a03000 	mov	r3, #0
  11bec4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11bec8:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11becc:	e3403014 	movt	r3, #20
  11bed0:	e5932014 	ldr	r2, [r3, #20]
  11bed4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11bed8:	e3403014 	movt	r3, #20
  11bedc:	e5933000 	ldr	r3, [r3]
  11bee0:	e1a01003 	mov	r1, r3
  11bee4:	e1a00002 	mov	r0, r2
  11bee8:	eb0058bd 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  11beec:	e1a03000 	mov	r3, r0
  11bef0:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11bef4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bef8:	e5933004 	ldr	r3, [r3, #4]
  11befc:	e5d33009 	ldrb	r3, [r3, #9]
  11bf00:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11bf04:	e3a03000 	mov	r3, #0
  11bf08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11bf0c:	e30e3210 	movw	r3, #57872	; 0xe210
  11bf10:	e3403014 	movt	r3, #20
  11bf14:	e5933000 	ldr	r3, [r3]
  11bf18:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11bf1c:	ea000046 	b	11c03c <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11bf20:	e51b3010 	ldr	r3, [fp, #-16]
  11bf24:	e5d33010 	ldrb	r3, [r3, #16]
  11bf28:	e1a02003 	mov	r2, r3
  11bf2c:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11bf30:	e1520003 	cmp	r2, r3
  11bf34:	1a00003b 	bne	11c028 <raw_input+0x17c>
  11bf38:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11bf3c:	e1a01003 	mov	r1, r3
  11bf40:	e51b0010 	ldr	r0, [fp, #-16]
  11bf44:	ebffffac 	bl	11bdfc <raw_input_match>
  11bf48:	e1a03000 	mov	r3, r0
  11bf4c:	e3530000 	cmp	r3, #0
  11bf50:	0a000034 	beq	11c028 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11bf54:	e51b3010 	ldr	r3, [fp, #-16]
  11bf58:	e5933014 	ldr	r3, [r3, #20]
  11bf5c:	e3530000 	cmp	r3, #0
  11bf60:	0a000030 	beq	11c028 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11bf64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bf68:	e5933004 	ldr	r3, [r3, #4]
  11bf6c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11bf70:	e51b3010 	ldr	r3, [fp, #-16]
  11bf74:	e5934014 	ldr	r4, [r3, #20]
  11bf78:	e51b3010 	ldr	r3, [fp, #-16]
  11bf7c:	e5930018 	ldr	r0, [r3, #24]
  11bf80:	e59f30dc 	ldr	r3, [pc, #220]	; 11c064 <raw_input+0x1b8>
  11bf84:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bf88:	e51b1010 	ldr	r1, [fp, #-16]
  11bf8c:	e12fff34 	blx	r4
  11bf90:	e1a03000 	mov	r3, r0
  11bf94:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11bf98:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11bf9c:	e3530000 	cmp	r3, #0
  11bfa0:	0a000014 	beq	11bff8 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11bfa4:	e3a03000 	mov	r3, #0
  11bfa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11bfac:	e3a03001 	mov	r3, #1
  11bfb0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11bfb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bfb8:	e3530000 	cmp	r3, #0
  11bfbc:	0a000019 	beq	11c028 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11bfc0:	e51b3010 	ldr	r3, [fp, #-16]
  11bfc4:	e593200c 	ldr	r2, [r3, #12]
  11bfc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bfcc:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11bfd0:	e30e3210 	movw	r3, #57872	; 0xe210
  11bfd4:	e3403014 	movt	r3, #20
  11bfd8:	e5932000 	ldr	r2, [r3]
  11bfdc:	e51b3010 	ldr	r3, [fp, #-16]
  11bfe0:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11bfe4:	e30e3210 	movw	r3, #57872	; 0xe210
  11bfe8:	e3403014 	movt	r3, #20
  11bfec:	e51b2010 	ldr	r2, [fp, #-16]
  11bff0:	e5832000 	str	r2, [r3]
  11bff4:	ea00000b 	b	11c028 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11bff8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bffc:	e5933004 	ldr	r3, [r3, #4]
  11c000:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11c004:	e1520003 	cmp	r2, r3
  11c008:	0a000006 	beq	11c028 <raw_input+0x17c>
  11c00c:	e3070830 	movw	r0, #30768	; 0x7830
  11c010:	e3400014 	movt	r0, #20
  11c014:	ebff9c3e 	bl	103114 <rt_kprintf>
  11c018:	e3a010b6 	mov	r1, #182	; 0xb6
  11c01c:	e307087c 	movw	r0, #30844	; 0x787c
  11c020:	e3400014 	movt	r0, #20
  11c024:	ebffbb5a 	bl	10ad94 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11c028:	e51b3010 	ldr	r3, [fp, #-16]
  11c02c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11c030:	e51b3010 	ldr	r3, [fp, #-16]
  11c034:	e593300c 	ldr	r3, [r3, #12]
  11c038:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c03c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c040:	e3530000 	cmp	r3, #0
  11c044:	1a000002 	bne	11c054 <raw_input+0x1a8>
  11c048:	e51b3010 	ldr	r3, [fp, #-16]
  11c04c:	e3530000 	cmp	r3, #0
  11c050:	1affffb2 	bne	11bf20 <raw_input+0x74>
  }
  return eaten;
  11c054:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c058:	e1a00003 	mov	r0, r3
  11c05c:	e24bd008 	sub	sp, fp, #8
  11c060:	e8bd8810 	pop	{r4, fp, pc}
  11c064:	0014f5f0 	.word	0x0014f5f0

0011c068 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c068:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c06c:	e28db000 	add	fp, sp, #0
  11c070:	e24dd00c 	sub	sp, sp, #12
  11c074:	e50b0008 	str	r0, [fp, #-8]
  11c078:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c07c:	e51b3008 	ldr	r3, [fp, #-8]
  11c080:	e3530000 	cmp	r3, #0
  11c084:	0a000002 	beq	11c094 <raw_bind+0x2c>
  11c088:	e51b300c 	ldr	r3, [fp, #-12]
  11c08c:	e3530000 	cmp	r3, #0
  11c090:	1a000001 	bne	11c09c <raw_bind+0x34>
    return ERR_VAL;
  11c094:	e3e03005 	mvn	r3, #5
  11c098:	ea000009 	b	11c0c4 <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c09c:	e51b300c 	ldr	r3, [fp, #-12]
  11c0a0:	e3530000 	cmp	r3, #0
  11c0a4:	0a000002 	beq	11c0b4 <raw_bind+0x4c>
  11c0a8:	e51b300c 	ldr	r3, [fp, #-12]
  11c0ac:	e5933000 	ldr	r3, [r3]
  11c0b0:	ea000000 	b	11c0b8 <raw_bind+0x50>
  11c0b4:	e3a03000 	mov	r3, #0
  11c0b8:	e51b2008 	ldr	r2, [fp, #-8]
  11c0bc:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c0c0:	e3a03000 	mov	r3, #0
}
  11c0c4:	e1a00003 	mov	r0, r3
  11c0c8:	e28bd000 	add	sp, fp, #0
  11c0cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c0d0:	e12fff1e 	bx	lr

0011c0d4 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c0d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c0d8:	e28db000 	add	fp, sp, #0
  11c0dc:	e24dd00c 	sub	sp, sp, #12
  11c0e0:	e50b0008 	str	r0, [fp, #-8]
  11c0e4:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c0e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c0ec:	e3530000 	cmp	r3, #0
  11c0f0:	0a000002 	beq	11c100 <raw_connect+0x2c>
  11c0f4:	e51b300c 	ldr	r3, [fp, #-12]
  11c0f8:	e3530000 	cmp	r3, #0
  11c0fc:	1a000001 	bne	11c108 <raw_connect+0x34>
    return ERR_VAL;
  11c100:	e3e03005 	mvn	r3, #5
  11c104:	ea000009 	b	11c130 <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c108:	e51b300c 	ldr	r3, [fp, #-12]
  11c10c:	e3530000 	cmp	r3, #0
  11c110:	0a000002 	beq	11c120 <raw_connect+0x4c>
  11c114:	e51b300c 	ldr	r3, [fp, #-12]
  11c118:	e5933000 	ldr	r3, [r3]
  11c11c:	ea000000 	b	11c124 <raw_connect+0x50>
  11c120:	e3a03000 	mov	r3, #0
  11c124:	e51b2008 	ldr	r2, [fp, #-8]
  11c128:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c12c:	e3a03000 	mov	r3, #0
}
  11c130:	e1a00003 	mov	r0, r3
  11c134:	e28bd000 	add	sp, fp, #0
  11c138:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c13c:	e12fff1e 	bx	lr

0011c140 <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c140:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c144:	e28db000 	add	fp, sp, #0
  11c148:	e24dd014 	sub	sp, sp, #20
  11c14c:	e50b0008 	str	r0, [fp, #-8]
  11c150:	e50b100c 	str	r1, [fp, #-12]
  11c154:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c158:	e51b3008 	ldr	r3, [fp, #-8]
  11c15c:	e51b200c 	ldr	r2, [fp, #-12]
  11c160:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c164:	e51b3008 	ldr	r3, [fp, #-8]
  11c168:	e51b2010 	ldr	r2, [fp, #-16]
  11c16c:	e5832018 	str	r2, [r3, #24]
}
  11c170:	e320f000 	nop	{0}
  11c174:	e28bd000 	add	sp, fp, #0
  11c178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c17c:	e12fff1e 	bx	lr

0011c180 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c180:	e92d4800 	push	{fp, lr}
  11c184:	e28db004 	add	fp, sp, #4
  11c188:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c18c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c190:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c194:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c198:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c19c:	e3530000 	cmp	r3, #0
  11c1a0:	0a000002 	beq	11c1b0 <raw_sendto+0x30>
  11c1a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c1a8:	e3530000 	cmp	r3, #0
  11c1ac:	1a000001 	bne	11c1b8 <raw_sendto+0x38>
    return ERR_VAL;
  11c1b0:	e3e03005 	mvn	r3, #5
  11c1b4:	ea00007c 	b	11c3ac <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c1b8:	e3a03014 	mov	r3, #20
  11c1bc:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c1c0:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c1c4:	e1a01003 	mov	r1, r3
  11c1c8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c1cc:	ebfffa4e 	bl	11ab0c <pbuf_header>
  11c1d0:	e1a03000 	mov	r3, r0
  11c1d4:	e3530000 	cmp	r3, #0
  11c1d8:	0a000011 	beq	11c224 <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c1dc:	e3a02000 	mov	r2, #0
  11c1e0:	e3a01000 	mov	r1, #0
  11c1e4:	e3a00001 	mov	r0, #1
  11c1e8:	ebfff75e 	bl	119f68 <pbuf_alloc>
  11c1ec:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c1f0:	e51b300c 	ldr	r3, [fp, #-12]
  11c1f4:	e3530000 	cmp	r3, #0
  11c1f8:	1a000001 	bne	11c204 <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c1fc:	e3e03000 	mvn	r3, #0
  11c200:	ea000069 	b	11c3ac <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c204:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c208:	e1d330b8 	ldrh	r3, [r3, #8]
  11c20c:	e3530000 	cmp	r3, #0
  11c210:	0a000018 	beq	11c278 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c214:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c218:	e51b000c 	ldr	r0, [fp, #-12]
  11c21c:	ebfffb59 	bl	11af88 <pbuf_chain>
  11c220:	ea000014 	b	11c278 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c224:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c228:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c22c:	e15b30be 	ldrh	r3, [fp, #-14]
  11c230:	e2633000 	rsb	r3, r3, #0
  11c234:	e6ff3073 	uxth	r3, r3
  11c238:	e6bf3073 	sxth	r3, r3
  11c23c:	e1a01003 	mov	r1, r3
  11c240:	e51b000c 	ldr	r0, [fp, #-12]
  11c244:	ebfffa30 	bl	11ab0c <pbuf_header>
  11c248:	e1a03000 	mov	r3, r0
  11c24c:	e3530000 	cmp	r3, #0
  11c250:	0a000008 	beq	11c278 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c254:	e30708a8 	movw	r0, #30888	; 0x78a8
  11c258:	e3400014 	movt	r0, #20
  11c25c:	ebff9bac 	bl	103114 <rt_kprintf>
  11c260:	e300113e 	movw	r1, #318	; 0x13e
  11c264:	e307087c 	movw	r0, #30844	; 0x787c
  11c268:	e3400014 	movt	r0, #20
  11c26c:	ebffbac8 	bl	10ad94 <sys_arch_assert>
      return ERR_MEM;
  11c270:	e3e03000 	mvn	r3, #0
  11c274:	ea00004c 	b	11c3ac <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c278:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c27c:	eb0052f9 	bl	130e68 <ip4_route>
  11c280:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c284:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c288:	e3530000 	cmp	r3, #0
  11c28c:	1a000007 	bne	11c2b0 <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c290:	e51b200c 	ldr	r2, [fp, #-12]
  11c294:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c298:	e1520003 	cmp	r2, r3
  11c29c:	0a000001 	beq	11c2a8 <raw_sendto+0x128>
      pbuf_free(q);
  11c2a0:	e51b000c 	ldr	r0, [fp, #-12]
  11c2a4:	ebfffa36 	bl	11ab84 <pbuf_free>
    }
    return ERR_RTE;
  11c2a8:	e3e03003 	mvn	r3, #3
  11c2ac:	ea00003e 	b	11c3ac <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c2b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2b4:	e5d33008 	ldrb	r3, [r3, #8]
  11c2b8:	e2033020 	and	r3, r3, #32
  11c2bc:	e3530000 	cmp	r3, #0
  11c2c0:	1a00000f 	bne	11c304 <raw_sendto+0x184>
  11c2c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c2c8:	e5933000 	ldr	r3, [r3]
  11c2cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c2d0:	e1a00003 	mov	r0, r3
  11c2d4:	eb0057c2 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  11c2d8:	e1a03000 	mov	r3, r0
  11c2dc:	e3530000 	cmp	r3, #0
  11c2e0:	0a000007 	beq	11c304 <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c2e4:	e51b200c 	ldr	r2, [fp, #-12]
  11c2e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c2ec:	e1520003 	cmp	r2, r3
  11c2f0:	0a000001 	beq	11c2fc <raw_sendto+0x17c>
        pbuf_free(q);
  11c2f4:	e51b000c 	ldr	r0, [fp, #-12]
  11c2f8:	ebfffa21 	bl	11ab84 <pbuf_free>
      }
      return ERR_VAL;
  11c2fc:	e3e03005 	mvn	r3, #5
  11c300:	ea000029 	b	11c3ac <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c304:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c308:	e3530000 	cmp	r3, #0
  11c30c:	0a000003 	beq	11c320 <raw_sendto+0x1a0>
  11c310:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c314:	e5933000 	ldr	r3, [r3]
  11c318:	e3530000 	cmp	r3, #0
  11c31c:	1a000008 	bne	11c344 <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c320:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c324:	e3530000 	cmp	r3, #0
  11c328:	0a000002 	beq	11c338 <raw_sendto+0x1b8>
  11c32c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c330:	e2833004 	add	r3, r3, #4
  11c334:	ea000000 	b	11c33c <raw_sendto+0x1bc>
  11c338:	e3a03000 	mov	r3, #0
  11c33c:	e50b3008 	str	r3, [fp, #-8]
  11c340:	ea000001 	b	11c34c <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c344:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c348:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c34c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c350:	e5d3000a 	ldrb	r0, [r3, #10]
  11c354:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c358:	e5d33009 	ldrb	r3, [r3, #9]
  11c35c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c360:	e5d22010 	ldrb	r2, [r2, #16]
  11c364:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c368:	e58d1008 	str	r1, [sp, #8]
  11c36c:	e58d2004 	str	r2, [sp, #4]
  11c370:	e58d3000 	str	r3, [sp]
  11c374:	e1a03000 	mov	r3, r0
  11c378:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c37c:	e51b1008 	ldr	r1, [fp, #-8]
  11c380:	e51b000c 	ldr	r0, [fp, #-12]
  11c384:	eb005590 	bl	1319cc <ip4_output_if>
  11c388:	e1a03000 	mov	r3, r0
  11c38c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c390:	e51b200c 	ldr	r2, [fp, #-12]
  11c394:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c398:	e1520003 	cmp	r2, r3
  11c39c:	0a000001 	beq	11c3a8 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c3a0:	e51b000c 	ldr	r0, [fp, #-12]
  11c3a4:	ebfff9f6 	bl	11ab84 <pbuf_free>
  }
  return err;
  11c3a8:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c3ac:	e1a00003 	mov	r0, r3
  11c3b0:	e24bd004 	sub	sp, fp, #4
  11c3b4:	e8bd8800 	pop	{fp, pc}

0011c3b8 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c3b8:	e92d4800 	push	{fp, lr}
  11c3bc:	e28db004 	add	fp, sp, #4
  11c3c0:	e24dd008 	sub	sp, sp, #8
  11c3c4:	e50b0008 	str	r0, [fp, #-8]
  11c3c8:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c3cc:	e51b3008 	ldr	r3, [fp, #-8]
  11c3d0:	e2833004 	add	r3, r3, #4
  11c3d4:	e1a02003 	mov	r2, r3
  11c3d8:	e51b100c 	ldr	r1, [fp, #-12]
  11c3dc:	e51b0008 	ldr	r0, [fp, #-8]
  11c3e0:	ebffff66 	bl	11c180 <raw_sendto>
  11c3e4:	e1a03000 	mov	r3, r0
}
  11c3e8:	e1a00003 	mov	r0, r3
  11c3ec:	e24bd004 	sub	sp, fp, #4
  11c3f0:	e8bd8800 	pop	{fp, pc}

0011c3f4 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c3f4:	e92d4800 	push	{fp, lr}
  11c3f8:	e28db004 	add	fp, sp, #4
  11c3fc:	e24dd010 	sub	sp, sp, #16
  11c400:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c404:	e30e3210 	movw	r3, #57872	; 0xe210
  11c408:	e3403014 	movt	r3, #20
  11c40c:	e5933000 	ldr	r3, [r3]
  11c410:	e51b2010 	ldr	r2, [fp, #-16]
  11c414:	e1520003 	cmp	r2, r3
  11c418:	1a000007 	bne	11c43c <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c41c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c420:	e3403014 	movt	r3, #20
  11c424:	e5933000 	ldr	r3, [r3]
  11c428:	e593200c 	ldr	r2, [r3, #12]
  11c42c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c430:	e3403014 	movt	r3, #20
  11c434:	e5832000 	str	r2, [r3]
  11c438:	ea000018 	b	11c4a0 <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c43c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c440:	e3403014 	movt	r3, #20
  11c444:	e5933000 	ldr	r3, [r3]
  11c448:	e50b3008 	str	r3, [fp, #-8]
  11c44c:	ea000010 	b	11c494 <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c450:	e51b3008 	ldr	r3, [fp, #-8]
  11c454:	e593300c 	ldr	r3, [r3, #12]
  11c458:	e3530000 	cmp	r3, #0
  11c45c:	0a000009 	beq	11c488 <raw_remove+0x94>
  11c460:	e51b3008 	ldr	r3, [fp, #-8]
  11c464:	e593300c 	ldr	r3, [r3, #12]
  11c468:	e51b2010 	ldr	r2, [fp, #-16]
  11c46c:	e1520003 	cmp	r2, r3
  11c470:	1a000004 	bne	11c488 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c474:	e51b3010 	ldr	r3, [fp, #-16]
  11c478:	e593200c 	ldr	r2, [r3, #12]
  11c47c:	e51b3008 	ldr	r3, [fp, #-8]
  11c480:	e583200c 	str	r2, [r3, #12]
        break;
  11c484:	ea000005 	b	11c4a0 <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c488:	e51b3008 	ldr	r3, [fp, #-8]
  11c48c:	e593300c 	ldr	r3, [r3, #12]
  11c490:	e50b3008 	str	r3, [fp, #-8]
  11c494:	e51b3008 	ldr	r3, [fp, #-8]
  11c498:	e3530000 	cmp	r3, #0
  11c49c:	1affffeb 	bne	11c450 <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c4a0:	e51b1010 	ldr	r1, [fp, #-16]
  11c4a4:	e3a00000 	mov	r0, #0
  11c4a8:	ebfff2a7 	bl	118f4c <memp_free>
}
  11c4ac:	e320f000 	nop	{0}
  11c4b0:	e24bd004 	sub	sp, fp, #4
  11c4b4:	e8bd8800 	pop	{fp, pc}

0011c4b8 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c4b8:	e92d4800 	push	{fp, lr}
  11c4bc:	e28db004 	add	fp, sp, #4
  11c4c0:	e24dd010 	sub	sp, sp, #16
  11c4c4:	e1a03000 	mov	r3, r0
  11c4c8:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c4cc:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c4d0:	e307187c 	movw	r1, #30844	; 0x787c
  11c4d4:	e3401014 	movt	r1, #20
  11c4d8:	e3a00000 	mov	r0, #0
  11c4dc:	ebfff232 	bl	118dac <memp_malloc_fn>
  11c4e0:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c4e4:	e51b3008 	ldr	r3, [fp, #-8]
  11c4e8:	e3530000 	cmp	r3, #0
  11c4ec:	0a000012 	beq	11c53c <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c4f0:	e3a0201c 	mov	r2, #28
  11c4f4:	e3a01000 	mov	r1, #0
  11c4f8:	e51b0008 	ldr	r0, [fp, #-8]
  11c4fc:	eb009298 	bl	140f64 <memset>
    pcb->protocol = proto;
  11c500:	e51b3008 	ldr	r3, [fp, #-8]
  11c504:	e55b200d 	ldrb	r2, [fp, #-13]
  11c508:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c50c:	e51b3008 	ldr	r3, [fp, #-8]
  11c510:	e3e02000 	mvn	r2, #0
  11c514:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c518:	e30e3210 	movw	r3, #57872	; 0xe210
  11c51c:	e3403014 	movt	r3, #20
  11c520:	e5932000 	ldr	r2, [r3]
  11c524:	e51b3008 	ldr	r3, [fp, #-8]
  11c528:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c52c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c530:	e3403014 	movt	r3, #20
  11c534:	e51b2008 	ldr	r2, [fp, #-8]
  11c538:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c53c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c540:	e1a00003 	mov	r0, r3
  11c544:	e24bd004 	sub	sp, fp, #4
  11c548:	e8bd8800 	pop	{fp, pc}

0011c54c <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c54c:	e92d4800 	push	{fp, lr}
  11c550:	e28db004 	add	fp, sp, #4
  11c554:	e24dd010 	sub	sp, sp, #16
  11c558:	e1a03000 	mov	r3, r0
  11c55c:	e1a02001 	mov	r2, r1
  11c560:	e54b300d 	strb	r3, [fp, #-13]
  11c564:	e1a03002 	mov	r3, r2
  11c568:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c56c:	e55b300e 	ldrb	r3, [fp, #-14]
  11c570:	e1a00003 	mov	r0, r3
  11c574:	ebffffcf 	bl	11c4b8 <raw_new>
  11c578:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c57c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c580:	e1a00003 	mov	r0, r3
  11c584:	e24bd004 	sub	sp, fp, #4
  11c588:	e8bd8800 	pop	{fp, pc}

0011c58c <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c58c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c590:	e28db000 	add	fp, sp, #0
  11c594:	e24dd014 	sub	sp, sp, #20
  11c598:	e50b0010 	str	r0, [fp, #-16]
  11c59c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c5a0:	e51b3010 	ldr	r3, [fp, #-16]
  11c5a4:	e3530000 	cmp	r3, #0
  11c5a8:	0a00001f 	beq	11c62c <raw_netif_ip_addr_changed+0xa0>
  11c5ac:	e51b3010 	ldr	r3, [fp, #-16]
  11c5b0:	e5933000 	ldr	r3, [r3]
  11c5b4:	e3530000 	cmp	r3, #0
  11c5b8:	0a00001b 	beq	11c62c <raw_netif_ip_addr_changed+0xa0>
  11c5bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c5c0:	e3530000 	cmp	r3, #0
  11c5c4:	0a000018 	beq	11c62c <raw_netif_ip_addr_changed+0xa0>
  11c5c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c5cc:	e5933000 	ldr	r3, [r3]
  11c5d0:	e3530000 	cmp	r3, #0
  11c5d4:	0a000014 	beq	11c62c <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c5d8:	e30e3210 	movw	r3, #57872	; 0xe210
  11c5dc:	e3403014 	movt	r3, #20
  11c5e0:	e5933000 	ldr	r3, [r3]
  11c5e4:	e50b3008 	str	r3, [fp, #-8]
  11c5e8:	ea00000c 	b	11c620 <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c5ec:	e51b3008 	ldr	r3, [fp, #-8]
  11c5f0:	e5932000 	ldr	r2, [r3]
  11c5f4:	e51b3010 	ldr	r3, [fp, #-16]
  11c5f8:	e5933000 	ldr	r3, [r3]
  11c5fc:	e1520003 	cmp	r2, r3
  11c600:	1a000003 	bne	11c614 <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c604:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c608:	e5932000 	ldr	r2, [r3]
  11c60c:	e51b3008 	ldr	r3, [fp, #-8]
  11c610:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c614:	e51b3008 	ldr	r3, [fp, #-8]
  11c618:	e593300c 	ldr	r3, [r3, #12]
  11c61c:	e50b3008 	str	r3, [fp, #-8]
  11c620:	e51b3008 	ldr	r3, [fp, #-8]
  11c624:	e3530000 	cmp	r3, #0
  11c628:	1affffef 	bne	11c5ec <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c62c:	e320f000 	nop	{0}
  11c630:	e28bd000 	add	sp, fp, #0
  11c634:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c638:	e12fff1e 	bx	lr

0011c63c <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c63c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c640:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c644:	e320f000 	nop	{0}
  11c648:	e28bd000 	add	sp, fp, #0
  11c64c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c650:	e12fff1e 	bx	lr

0011c654 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c654:	e92d4800 	push	{fp, lr}
  11c658:	e28db004 	add	fp, sp, #4
  11c65c:	e24dd008 	sub	sp, sp, #8
  11c660:	e50b0008 	str	r0, [fp, #-8]
  11c664:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c668:	e51b100c 	ldr	r1, [fp, #-12]
  11c66c:	e30708d0 	movw	r0, #30928	; 0x78d0
  11c670:	e3400014 	movt	r0, #20
  11c674:	ebff9aa6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c678:	e51b3008 	ldr	r3, [fp, #-8]
  11c67c:	e1d330b0 	ldrh	r3, [r3]
  11c680:	e1a01003 	mov	r1, r3
  11c684:	e30708d8 	movw	r0, #30936	; 0x78d8
  11c688:	e3400014 	movt	r0, #20
  11c68c:	ebff9aa0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c690:	e51b3008 	ldr	r3, [fp, #-8]
  11c694:	e1d330b2 	ldrh	r3, [r3, #2]
  11c698:	e1a01003 	mov	r1, r3
  11c69c:	e30708e4 	movw	r0, #30948	; 0x78e4
  11c6a0:	e3400014 	movt	r0, #20
  11c6a4:	ebff9a9a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c6a8:	e51b3008 	ldr	r3, [fp, #-8]
  11c6ac:	e1d330b4 	ldrh	r3, [r3, #4]
  11c6b0:	e1a01003 	mov	r1, r3
  11c6b4:	e30708f0 	movw	r0, #30960	; 0x78f0
  11c6b8:	e3400014 	movt	r0, #20
  11c6bc:	ebff9a94 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c6c0:	e51b3008 	ldr	r3, [fp, #-8]
  11c6c4:	e1d330b6 	ldrh	r3, [r3, #6]
  11c6c8:	e1a01003 	mov	r1, r3
  11c6cc:	e30708fc 	movw	r0, #30972	; 0x78fc
  11c6d0:	e3400014 	movt	r0, #20
  11c6d4:	ebff9a8e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11c6d8:	e51b3008 	ldr	r3, [fp, #-8]
  11c6dc:	e1d330b8 	ldrh	r3, [r3, #8]
  11c6e0:	e1a01003 	mov	r1, r3
  11c6e4:	e3070908 	movw	r0, #30984	; 0x7908
  11c6e8:	e3400014 	movt	r0, #20
  11c6ec:	ebff9a88 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11c6f0:	e51b3008 	ldr	r3, [fp, #-8]
  11c6f4:	e1d330ba 	ldrh	r3, [r3, #10]
  11c6f8:	e1a01003 	mov	r1, r3
  11c6fc:	e3070918 	movw	r0, #31000	; 0x7918
  11c700:	e3400014 	movt	r0, #20
  11c704:	ebff9a82 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11c708:	e51b3008 	ldr	r3, [fp, #-8]
  11c70c:	e1d330bc 	ldrh	r3, [r3, #12]
  11c710:	e1a01003 	mov	r1, r3
  11c714:	e3070928 	movw	r0, #31016	; 0x7928
  11c718:	e3400014 	movt	r0, #20
  11c71c:	ebff9a7c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11c720:	e51b3008 	ldr	r3, [fp, #-8]
  11c724:	e1d330be 	ldrh	r3, [r3, #14]
  11c728:	e1a01003 	mov	r1, r3
  11c72c:	e3070938 	movw	r0, #31032	; 0x7938
  11c730:	e3400014 	movt	r0, #20
  11c734:	ebff9a76 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11c738:	e51b3008 	ldr	r3, [fp, #-8]
  11c73c:	e1d331b0 	ldrh	r3, [r3, #16]
  11c740:	e1a01003 	mov	r1, r3
  11c744:	e3070948 	movw	r0, #31048	; 0x7948
  11c748:	e3400014 	movt	r0, #20
  11c74c:	ebff9a70 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11c750:	e51b3008 	ldr	r3, [fp, #-8]
  11c754:	e1d331b2 	ldrh	r3, [r3, #18]
  11c758:	e1a01003 	mov	r1, r3
  11c75c:	e3070958 	movw	r0, #31064	; 0x7958
  11c760:	e3400014 	movt	r0, #20
  11c764:	ebff9a6a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11c768:	e51b3008 	ldr	r3, [fp, #-8]
  11c76c:	e1d331b4 	ldrh	r3, [r3, #20]
  11c770:	e1a01003 	mov	r1, r3
  11c774:	e3070968 	movw	r0, #31080	; 0x7968
  11c778:	e3400014 	movt	r0, #20
  11c77c:	ebff9a64 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11c780:	e51b3008 	ldr	r3, [fp, #-8]
  11c784:	e1d331b6 	ldrh	r3, [r3, #22]
  11c788:	e1a01003 	mov	r1, r3
  11c78c:	e3070974 	movw	r0, #31092	; 0x7974
  11c790:	e3400014 	movt	r0, #20
  11c794:	ebff9a5e 	bl	103114 <rt_kprintf>
}
  11c798:	e320f000 	nop	{0}
  11c79c:	e24bd004 	sub	sp, fp, #4
  11c7a0:	e8bd8800 	pop	{fp, pc}

0011c7a4 <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11c7a4:	e92d4800 	push	{fp, lr}
  11c7a8:	e28db004 	add	fp, sp, #4
  11c7ac:	e24dd008 	sub	sp, sp, #8
  11c7b0:	e50b0008 	str	r0, [fp, #-8]
  11c7b4:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c7b8:	e51b100c 	ldr	r1, [fp, #-12]
  11c7bc:	e30708d0 	movw	r0, #30928	; 0x78d0
  11c7c0:	e3400014 	movt	r0, #20
  11c7c4:	ebff9a52 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11c7c8:	e51b3008 	ldr	r3, [fp, #-8]
  11c7cc:	e1d330b0 	ldrh	r3, [r3]
  11c7d0:	e1a01003 	mov	r1, r3
  11c7d4:	e30708d8 	movw	r0, #30936	; 0x78d8
  11c7d8:	e3400014 	movt	r0, #20
  11c7dc:	ebff9a4c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11c7e0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7e4:	e1d330b2 	ldrh	r3, [r3, #2]
  11c7e8:	e1a01003 	mov	r1, r3
  11c7ec:	e30708e4 	movw	r0, #30948	; 0x78e4
  11c7f0:	e3400014 	movt	r0, #20
  11c7f4:	ebff9a46 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11c7f8:	e51b3008 	ldr	r3, [fp, #-8]
  11c7fc:	e1d330b4 	ldrh	r3, [r3, #4]
  11c800:	e1a01003 	mov	r1, r3
  11c804:	e30708fc 	movw	r0, #30972	; 0x78fc
  11c808:	e3400014 	movt	r0, #20
  11c80c:	ebff9a40 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11c810:	e51b3008 	ldr	r3, [fp, #-8]
  11c814:	e1d330b6 	ldrh	r3, [r3, #6]
  11c818:	e1a01003 	mov	r1, r3
  11c81c:	e3070908 	movw	r0, #30984	; 0x7908
  11c820:	e3400014 	movt	r0, #20
  11c824:	ebff9a3a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11c828:	e51b3008 	ldr	r3, [fp, #-8]
  11c82c:	e1d330b8 	ldrh	r3, [r3, #8]
  11c830:	e1a01003 	mov	r1, r3
  11c834:	e3070918 	movw	r0, #31000	; 0x7918
  11c838:	e3400014 	movt	r0, #20
  11c83c:	ebff9a34 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11c840:	e51b3008 	ldr	r3, [fp, #-8]
  11c844:	e1d330ba 	ldrh	r3, [r3, #10]
  11c848:	e1a01003 	mov	r1, r3
  11c84c:	e3070928 	movw	r0, #31016	; 0x7928
  11c850:	e3400014 	movt	r0, #20
  11c854:	ebff9a2e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11c858:	e51b3008 	ldr	r3, [fp, #-8]
  11c85c:	e1d330bc 	ldrh	r3, [r3, #12]
  11c860:	e1a01003 	mov	r1, r3
  11c864:	e3070948 	movw	r0, #31048	; 0x7948
  11c868:	e3400014 	movt	r0, #20
  11c86c:	ebff9a28 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11c870:	e51b3008 	ldr	r3, [fp, #-8]
  11c874:	e1d330be 	ldrh	r3, [r3, #14]
  11c878:	e1a01003 	mov	r1, r3
  11c87c:	e3070984 	movw	r0, #31108	; 0x7984
  11c880:	e3400014 	movt	r0, #20
  11c884:	ebff9a22 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11c888:	e51b3008 	ldr	r3, [fp, #-8]
  11c88c:	e1d331b0 	ldrh	r3, [r3, #16]
  11c890:	e1a01003 	mov	r1, r3
  11c894:	e3070994 	movw	r0, #31124	; 0x7994
  11c898:	e3400014 	movt	r0, #20
  11c89c:	ebff9a1c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11c8a0:	e51b3008 	ldr	r3, [fp, #-8]
  11c8a4:	e1d331b2 	ldrh	r3, [r3, #18]
  11c8a8:	e1a01003 	mov	r1, r3
  11c8ac:	e30709a4 	movw	r0, #31140	; 0x79a4
  11c8b0:	e3400014 	movt	r0, #20
  11c8b4:	ebff9a16 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11c8b8:	e51b3008 	ldr	r3, [fp, #-8]
  11c8bc:	e1d331b4 	ldrh	r3, [r3, #20]
  11c8c0:	e1a01003 	mov	r1, r3
  11c8c4:	e30709b8 	movw	r0, #31160	; 0x79b8
  11c8c8:	e3400014 	movt	r0, #20
  11c8cc:	ebff9a10 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11c8d0:	e51b3008 	ldr	r3, [fp, #-8]
  11c8d4:	e1d331b6 	ldrh	r3, [r3, #22]
  11c8d8:	e1a01003 	mov	r1, r3
  11c8dc:	e30709cc 	movw	r0, #31180	; 0x79cc
  11c8e0:	e3400014 	movt	r0, #20
  11c8e4:	ebff9a0a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11c8e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c8ec:	e1d331b8 	ldrh	r3, [r3, #24]
  11c8f0:	e1a01003 	mov	r1, r3
  11c8f4:	e30709dc 	movw	r0, #31196	; 0x79dc
  11c8f8:	e3400014 	movt	r0, #20
  11c8fc:	ebff9a04 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11c900:	e51b3008 	ldr	r3, [fp, #-8]
  11c904:	e1d331ba 	ldrh	r3, [r3, #26]
  11c908:	e1a01003 	mov	r1, r3
  11c90c:	e30709ec 	movw	r0, #31212	; 0x79ec
  11c910:	e3400014 	movt	r0, #20
  11c914:	ebff99fe 	bl	103114 <rt_kprintf>
}
  11c918:	e320f000 	nop	{0}
  11c91c:	e24bd004 	sub	sp, fp, #4
  11c920:	e8bd8800 	pop	{fp, pc}

0011c924 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11c924:	e92d4800 	push	{fp, lr}
  11c928:	e28db004 	add	fp, sp, #4
  11c92c:	e24dd008 	sub	sp, sp, #8
  11c930:	e50b0008 	str	r0, [fp, #-8]
  11c934:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11c938:	e51b100c 	ldr	r1, [fp, #-12]
  11c93c:	e30709fc 	movw	r0, #31228	; 0x79fc
  11c940:	e3400014 	movt	r0, #20
  11c944:	ebff99f2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11c948:	e51b3008 	ldr	r3, [fp, #-8]
  11c94c:	e1d330b6 	ldrh	r3, [r3, #6]
  11c950:	e1a01003 	mov	r1, r3
  11c954:	e3070a08 	movw	r0, #31240	; 0x7a08
  11c958:	e3400014 	movt	r0, #20
  11c95c:	ebff99ec 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11c960:	e51b3008 	ldr	r3, [fp, #-8]
  11c964:	e1d330b8 	ldrh	r3, [r3, #8]
  11c968:	e1a01003 	mov	r1, r3
  11c96c:	e3070a18 	movw	r0, #31256	; 0x7a18
  11c970:	e3400014 	movt	r0, #20
  11c974:	ebff99e6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11c978:	e51b3008 	ldr	r3, [fp, #-8]
  11c97c:	e1d330ba 	ldrh	r3, [r3, #10]
  11c980:	e1a01003 	mov	r1, r3
  11c984:	e3070a24 	movw	r0, #31268	; 0x7a24
  11c988:	e3400014 	movt	r0, #20
  11c98c:	ebff99e0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11c990:	e51b3008 	ldr	r3, [fp, #-8]
  11c994:	e1d330b4 	ldrh	r3, [r3, #4]
  11c998:	e1a01003 	mov	r1, r3
  11c99c:	e3070a30 	movw	r0, #31280	; 0x7a30
  11c9a0:	e3400014 	movt	r0, #20
  11c9a4:	ebff99da 	bl	103114 <rt_kprintf>
}
  11c9a8:	e320f000 	nop	{0}
  11c9ac:	e24bd004 	sub	sp, fp, #4
  11c9b0:	e8bd8800 	pop	{fp, pc}

0011c9b4 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11c9b4:	e92d4800 	push	{fp, lr}
  11c9b8:	e28db004 	add	fp, sp, #4
  11c9bc:	e24dd008 	sub	sp, sp, #8
  11c9c0:	e50b0008 	str	r0, [fp, #-8]
  11c9c4:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11c9c8:	e51b300c 	ldr	r3, [fp, #-12]
  11c9cc:	e3530010 	cmp	r3, #16
  11c9d0:	ca000004 	bgt	11c9e8 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11c9d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c9d8:	e5933000 	ldr	r3, [r3]
  11c9dc:	e1a01003 	mov	r1, r3
  11c9e0:	e51b0008 	ldr	r0, [fp, #-8]
  11c9e4:	ebffffce 	bl	11c924 <stats_display_mem>
  }
}
  11c9e8:	e320f000 	nop	{0}
  11c9ec:	e24bd004 	sub	sp, fp, #4
  11c9f0:	e8bd8800 	pop	{fp, pc}

0011c9f4 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11c9f4:	e92d4800 	push	{fp, lr}
  11c9f8:	e28db004 	add	fp, sp, #4
  11c9fc:	e24dd008 	sub	sp, sp, #8
  11ca00:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11ca04:	e3070a3c 	movw	r0, #31292	; 0x7a3c
  11ca08:	e3400014 	movt	r0, #20
  11ca0c:	ebff99c0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11ca10:	e51b3008 	ldr	r3, [fp, #-8]
  11ca14:	e1d330b0 	ldrh	r3, [r3]
  11ca18:	e1a01003 	mov	r1, r3
  11ca1c:	e3070a44 	movw	r0, #31300	; 0x7a44
  11ca20:	e3400014 	movt	r0, #20
  11ca24:	ebff99ba 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11ca28:	e51b3008 	ldr	r3, [fp, #-8]
  11ca2c:	e1d330b2 	ldrh	r3, [r3, #2]
  11ca30:	e1a01003 	mov	r1, r3
  11ca34:	e3070a58 	movw	r0, #31320	; 0x7a58
  11ca38:	e3400014 	movt	r0, #20
  11ca3c:	ebff99b4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11ca40:	e51b3008 	ldr	r3, [fp, #-8]
  11ca44:	e1d330b4 	ldrh	r3, [r3, #4]
  11ca48:	e1a01003 	mov	r1, r3
  11ca4c:	e3070a6c 	movw	r0, #31340	; 0x7a6c
  11ca50:	e3400014 	movt	r0, #20
  11ca54:	ebff99ae 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11ca58:	e51b3008 	ldr	r3, [fp, #-8]
  11ca5c:	e1d330b6 	ldrh	r3, [r3, #6]
  11ca60:	e1a01003 	mov	r1, r3
  11ca64:	e3070a80 	movw	r0, #31360	; 0x7a80
  11ca68:	e3400014 	movt	r0, #20
  11ca6c:	ebff99a8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11ca70:	e51b3008 	ldr	r3, [fp, #-8]
  11ca74:	e1d330b8 	ldrh	r3, [r3, #8]
  11ca78:	e1a01003 	mov	r1, r3
  11ca7c:	e3070a94 	movw	r0, #31380	; 0x7a94
  11ca80:	e3400014 	movt	r0, #20
  11ca84:	ebff99a2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11ca88:	e51b3008 	ldr	r3, [fp, #-8]
  11ca8c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ca90:	e1a01003 	mov	r1, r3
  11ca94:	e3070aa8 	movw	r0, #31400	; 0x7aa8
  11ca98:	e3400014 	movt	r0, #20
  11ca9c:	ebff999c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11caa0:	e51b3008 	ldr	r3, [fp, #-8]
  11caa4:	e1d330bc 	ldrh	r3, [r3, #12]
  11caa8:	e1a01003 	mov	r1, r3
  11caac:	e3070abc 	movw	r0, #31420	; 0x7abc
  11cab0:	e3400014 	movt	r0, #20
  11cab4:	ebff9996 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11cab8:	e51b3008 	ldr	r3, [fp, #-8]
  11cabc:	e1d330be 	ldrh	r3, [r3, #14]
  11cac0:	e1a01003 	mov	r1, r3
  11cac4:	e3070ad0 	movw	r0, #31440	; 0x7ad0
  11cac8:	e3400014 	movt	r0, #20
  11cacc:	ebff9990 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11cad0:	e51b3008 	ldr	r3, [fp, #-8]
  11cad4:	e1d331b0 	ldrh	r3, [r3, #16]
  11cad8:	e1a01003 	mov	r1, r3
  11cadc:	e3070ae4 	movw	r0, #31460	; 0x7ae4
  11cae0:	e3400014 	movt	r0, #20
  11cae4:	ebff998a 	bl	103114 <rt_kprintf>
}
  11cae8:	e320f000 	nop	{0}
  11caec:	e24bd004 	sub	sp, fp, #4
  11caf0:	e8bd8800 	pop	{fp, pc}

0011caf4 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11caf4:	e92d4800 	push	{fp, lr}
  11caf8:	e28db004 	add	fp, sp, #4
  11cafc:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11cb00:	e3071af8 	movw	r1, #31480	; 0x7af8
  11cb04:	e3401014 	movt	r1, #20
  11cb08:	e30c0a18 	movw	r0, #51736	; 0xca18
  11cb0c:	e3400015 	movt	r0, #21
  11cb10:	ebfffecf 	bl	11c654 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11cb14:	e3071b00 	movw	r1, #31488	; 0x7b00
  11cb18:	e3401014 	movt	r1, #20
  11cb1c:	e59f00dc 	ldr	r0, [pc, #220]	; 11cc00 <stats_display+0x10c>
  11cb20:	ebfffecb 	bl	11c654 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11cb24:	e3071b08 	movw	r1, #31496	; 0x7b08
  11cb28:	e3401014 	movt	r1, #20
  11cb2c:	e59f00d0 	ldr	r0, [pc, #208]	; 11cc04 <stats_display+0x110>
  11cb30:	ebfffec7 	bl	11c654 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11cb34:	e3071b10 	movw	r1, #31504	; 0x7b10
  11cb38:	e3401014 	movt	r1, #20
  11cb3c:	e59f00c4 	ldr	r0, [pc, #196]	; 11cc08 <stats_display+0x114>
  11cb40:	ebfffec3 	bl	11c654 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11cb44:	e3071b14 	movw	r1, #31508	; 0x7b14
  11cb48:	e3401014 	movt	r1, #20
  11cb4c:	e59f00b8 	ldr	r0, [pc, #184]	; 11cc0c <stats_display+0x118>
  11cb50:	ebffff13 	bl	11c7a4 <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11cb54:	e3071b1c 	movw	r1, #31516	; 0x7b1c
  11cb58:	e3401014 	movt	r1, #20
  11cb5c:	e59f00ac 	ldr	r0, [pc, #172]	; 11cc10 <stats_display+0x11c>
  11cb60:	ebfffebb 	bl	11c654 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11cb64:	e3071b24 	movw	r1, #31524	; 0x7b24
  11cb68:	e3401014 	movt	r1, #20
  11cb6c:	e59f00a0 	ldr	r0, [pc, #160]	; 11cc14 <stats_display+0x120>
  11cb70:	ebfffeb7 	bl	11c654 <stats_display_proto>
  TCP_STATS_DISPLAY();
  11cb74:	e3071b28 	movw	r1, #31528	; 0x7b28
  11cb78:	e3401014 	movt	r1, #20
  11cb7c:	e59f0094 	ldr	r0, [pc, #148]	; 11cc18 <stats_display+0x124>
  11cb80:	ebfffeb3 	bl	11c654 <stats_display_proto>
  MEM_STATS_DISPLAY();
  11cb84:	e3071b2c 	movw	r1, #31532	; 0x7b2c
  11cb88:	e3401014 	movt	r1, #20
  11cb8c:	e59f0088 	ldr	r0, [pc, #136]	; 11cc1c <stats_display+0x128>
  11cb90:	ebffff63 	bl	11c924 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11cb94:	e3a03000 	mov	r3, #0
  11cb98:	e14b30b6 	strh	r3, [fp, #-6]
  11cb9c:	ea00000f 	b	11cbe0 <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11cba0:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cba4:	e30c2a18 	movw	r2, #51736	; 0xca18
  11cba8:	e3402015 	movt	r2, #21
  11cbac:	e2833034 	add	r3, r3, #52	; 0x34
  11cbb0:	e1a03103 	lsl	r3, r3, #2
  11cbb4:	e0823003 	add	r3, r2, r3
  11cbb8:	e5933004 	ldr	r3, [r3, #4]
  11cbbc:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11cbc0:	e1a01002 	mov	r1, r2
  11cbc4:	e1a00003 	mov	r0, r3
  11cbc8:	ebffff79 	bl	11c9b4 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cbcc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cbd0:	e6ff3073 	uxth	r3, r3
  11cbd4:	e2833001 	add	r3, r3, #1
  11cbd8:	e6ff3073 	uxth	r3, r3
  11cbdc:	e14b30b6 	strh	r3, [fp, #-6]
  11cbe0:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cbe4:	e3530010 	cmp	r3, #16
  11cbe8:	daffffec 	ble	11cba0 <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cbec:	e59f002c 	ldr	r0, [pc, #44]	; 11cc20 <stats_display+0x12c>
  11cbf0:	ebffff7f 	bl	11c9f4 <stats_display_sys>
}
  11cbf4:	e320f000 	nop	{0}
  11cbf8:	e24bd004 	sub	sp, fp, #4
  11cbfc:	e8bd8800 	pop	{fp, pc}
  11cc00:	0015ca30 	.word	0x0015ca30
  11cc04:	0015ca48 	.word	0x0015ca48
  11cc08:	0015ca60 	.word	0x0015ca60
  11cc0c:	0015ca90 	.word	0x0015ca90
  11cc10:	0015ca78 	.word	0x0015ca78
  11cc14:	0015caac 	.word	0x0015caac
  11cc18:	0015cac4 	.word	0x0015cac4
  11cc1c:	0015cadc 	.word	0x0015cadc
  11cc20:	0015cb30 	.word	0x0015cb30

0011cc24 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cc24:	e92d4800 	push	{fp, lr}
  11cc28:	e28db004 	add	fp, sp, #4
  11cc2c:	e24dd010 	sub	sp, sp, #16
  11cc30:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cc34:	e51b3010 	ldr	r3, [fp, #-16]
  11cc38:	e3530000 	cmp	r3, #0
  11cc3c:	0a00000f 	beq	11cc80 <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11cc40:	e24b300c 	sub	r3, fp, #12
  11cc44:	e3a01000 	mov	r1, #0
  11cc48:	e1a00003 	mov	r0, r3
  11cc4c:	ebffb674 	bl	10a624 <sys_sem_new>
  11cc50:	e1a03000 	mov	r3, r0
  11cc54:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11cc58:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cc5c:	e3530000 	cmp	r3, #0
  11cc60:	1a000006 	bne	11cc80 <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11cc64:	e24b300c 	sub	r3, fp, #12
  11cc68:	e51b1010 	ldr	r1, [fp, #-16]
  11cc6c:	e1a00003 	mov	r0, r3
  11cc70:	ebffb6ac 	bl	10a728 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cc74:	e24b300c 	sub	r3, fp, #12
  11cc78:	e1a00003 	mov	r0, r3
  11cc7c:	ebffb693 	bl	10a6d0 <sys_sem_free>
    }
  }
}
  11cc80:	e320f000 	nop	{0}
  11cc84:	e24bd004 	sub	sp, fp, #4
  11cc88:	e8bd8800 	pop	{fp, pc}

0011cc8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11cc8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cc90:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cc94:	e320f000 	nop	{0}
  11cc98:	e28bd000 	add	sp, fp, #0
  11cc9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cca0:	e12fff1e 	bx	lr

0011cca4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cca4:	e92d4800 	push	{fp, lr}
  11cca8:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11ccac:	eb00084a 	bl	11eddc <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11ccb0:	e30e3214 	movw	r3, #57876	; 0xe214
  11ccb4:	e3403014 	movt	r3, #20
  11ccb8:	e5d33000 	ldrb	r3, [r3]
  11ccbc:	e2833001 	add	r3, r3, #1
  11ccc0:	e6ef2073 	uxtb	r2, r3
  11ccc4:	e30e3214 	movw	r3, #57876	; 0xe214
  11ccc8:	e3403014 	movt	r3, #20
  11cccc:	e5c32000 	strb	r2, [r3]
  11ccd0:	e30e3214 	movw	r3, #57876	; 0xe214
  11ccd4:	e3403014 	movt	r3, #20
  11ccd8:	e5d33000 	ldrb	r3, [r3]
  11ccdc:	e2033001 	and	r3, r3, #1
  11cce0:	e3530000 	cmp	r3, #0
  11cce4:	0a000000 	beq	11ccec <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11cce8:	eb0005cb 	bl	11e41c <tcp_slowtmr>
  }
}
  11ccec:	e320f000 	nop	{0}
  11ccf0:	e8bd8800 	pop	{fp, pc}

0011ccf4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11ccf4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ccf8:	e28db000 	add	fp, sp, #0
  11ccfc:	e24dd014 	sub	sp, sp, #20
  11cd00:	e50b0010 	str	r0, [fp, #-16]
  11cd04:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11cd08:	e51b3010 	ldr	r3, [fp, #-16]
  11cd0c:	e50b3008 	str	r3, [fp, #-8]
  11cd10:	ea00000a 	b	11cd40 <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11cd14:	e51b3008 	ldr	r3, [fp, #-8]
  11cd18:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11cd1c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11cd20:	e1520003 	cmp	r2, r3
  11cd24:	1a000002 	bne	11cd34 <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11cd28:	e51b3008 	ldr	r3, [fp, #-8]
  11cd2c:	e3a02000 	mov	r2, #0
  11cd30:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11cd34:	e51b3008 	ldr	r3, [fp, #-8]
  11cd38:	e593300c 	ldr	r3, [r3, #12]
  11cd3c:	e50b3008 	str	r3, [fp, #-8]
  11cd40:	e51b3008 	ldr	r3, [fp, #-8]
  11cd44:	e3530000 	cmp	r3, #0
  11cd48:	1afffff1 	bne	11cd14 <tcp_remove_listener+0x20>
      }
   }
}
  11cd4c:	e320f000 	nop	{0}
  11cd50:	e28bd000 	add	sp, fp, #0
  11cd54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cd58:	e12fff1e 	bx	lr

0011cd5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11cd5c:	e92d4800 	push	{fp, lr}
  11cd60:	e28db004 	add	fp, sp, #4
  11cd64:	e24dd010 	sub	sp, sp, #16
  11cd68:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11cd6c:	e51b3010 	ldr	r3, [fp, #-16]
  11cd70:	e3530000 	cmp	r3, #0
  11cd74:	1a000006 	bne	11cd94 <tcp_listen_closed+0x38>
  11cd78:	e3070c00 	movw	r0, #31744	; 0x7c00
  11cd7c:	e3400014 	movt	r0, #20
  11cd80:	ebff98e3 	bl	103114 <rt_kprintf>
  11cd84:	e3a010c0 	mov	r1, #192	; 0xc0
  11cd88:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11cd8c:	e3400014 	movt	r0, #20
  11cd90:	ebffb7ff 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11cd94:	e51b3010 	ldr	r3, [fp, #-16]
  11cd98:	e5933014 	ldr	r3, [r3, #20]
  11cd9c:	e3530001 	cmp	r3, #1
  11cda0:	0a000006 	beq	11cdc0 <tcp_listen_closed+0x64>
  11cda4:	e3070c38 	movw	r0, #31800	; 0x7c38
  11cda8:	e3400014 	movt	r0, #20
  11cdac:	ebff98d8 	bl	103114 <rt_kprintf>
  11cdb0:	e3a010c1 	mov	r1, #193	; 0xc1
  11cdb4:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11cdb8:	e3400014 	movt	r0, #20
  11cdbc:	ebffb7f4 	bl	10ad94 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11cdc0:	e3a03001 	mov	r3, #1
  11cdc4:	e50b3008 	str	r3, [fp, #-8]
  11cdc8:	ea00000a 	b	11cdf8 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11cdcc:	e3073bf0 	movw	r3, #31728	; 0x7bf0
  11cdd0:	e3403014 	movt	r3, #20
  11cdd4:	e51b2008 	ldr	r2, [fp, #-8]
  11cdd8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11cddc:	e5933000 	ldr	r3, [r3]
  11cde0:	e51b1010 	ldr	r1, [fp, #-16]
  11cde4:	e1a00003 	mov	r0, r3
  11cde8:	ebffffc1 	bl	11ccf4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11cdec:	e51b3008 	ldr	r3, [fp, #-8]
  11cdf0:	e2833001 	add	r3, r3, #1
  11cdf4:	e50b3008 	str	r3, [fp, #-8]
  11cdf8:	e51b3008 	ldr	r3, [fp, #-8]
  11cdfc:	e3530003 	cmp	r3, #3
  11ce00:	9afffff1 	bls	11cdcc <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11ce04:	e320f000 	nop	{0}
  11ce08:	e24bd004 	sub	sp, fp, #4
  11ce0c:	e8bd8800 	pop	{fp, pc}

0011ce10 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11ce10:	e92d4800 	push	{fp, lr}
  11ce14:	e28db004 	add	fp, sp, #4
  11ce18:	e24dd018 	sub	sp, sp, #24
  11ce1c:	e50b0010 	str	r0, [fp, #-16]
  11ce20:	e1a03001 	mov	r3, r1
  11ce24:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11ce28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11ce2c:	e3530000 	cmp	r3, #0
  11ce30:	0a000076 	beq	11d010 <tcp_close_shutdown+0x200>
  11ce34:	e51b3010 	ldr	r3, [fp, #-16]
  11ce38:	e5933014 	ldr	r3, [r3, #20]
  11ce3c:	e3530004 	cmp	r3, #4
  11ce40:	0a000003 	beq	11ce54 <tcp_close_shutdown+0x44>
  11ce44:	e51b3010 	ldr	r3, [fp, #-16]
  11ce48:	e5933014 	ldr	r3, [r3, #20]
  11ce4c:	e3530007 	cmp	r3, #7
  11ce50:	1a00006e 	bne	11d010 <tcp_close_shutdown+0x200>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11ce54:	e51b3010 	ldr	r3, [fp, #-16]
  11ce58:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ce5c:	e3530000 	cmp	r3, #0
  11ce60:	1a000003 	bne	11ce74 <tcp_close_shutdown+0x64>
  11ce64:	e51b3010 	ldr	r3, [fp, #-16]
  11ce68:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11ce6c:	e3530a02 	cmp	r3, #8192	; 0x2000
  11ce70:	0a000066 	beq	11d010 <tcp_close_shutdown+0x200>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11ce74:	e51b3010 	ldr	r3, [fp, #-16]
  11ce78:	e5d3301e 	ldrb	r3, [r3, #30]
  11ce7c:	e2033010 	and	r3, r3, #16
  11ce80:	e3530000 	cmp	r3, #0
  11ce84:	1a000006 	bne	11cea4 <tcp_close_shutdown+0x94>
  11ce88:	e3070c50 	movw	r0, #31824	; 0x7c50
  11ce8c:	e3400014 	movt	r0, #20
  11ce90:	ebff989f 	bl	103114 <rt_kprintf>
  11ce94:	e300110f 	movw	r1, #271	; 0x10f
  11ce98:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11ce9c:	e3400014 	movt	r0, #20
  11cea0:	ebffb7bb 	bl	10ad94 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11cea4:	e51b3010 	ldr	r3, [fp, #-16]
  11cea8:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ceac:	e51b3010 	ldr	r3, [fp, #-16]
  11ceb0:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11ceb4:	e51bc010 	ldr	ip, [fp, #-16]
  11ceb8:	e51b3010 	ldr	r3, [fp, #-16]
  11cebc:	e283e004 	add	lr, r3, #4
  11cec0:	e51b3010 	ldr	r3, [fp, #-16]
  11cec4:	e1d331ba 	ldrh	r3, [r3, #26]
  11cec8:	e51b2010 	ldr	r2, [fp, #-16]
  11cecc:	e1d221bc 	ldrh	r2, [r2, #28]
  11ced0:	e58d2004 	str	r2, [sp, #4]
  11ced4:	e58d3000 	str	r3, [sp]
  11ced8:	e1a0300e 	mov	r3, lr
  11cedc:	e1a0200c 	mov	r2, ip
  11cee0:	eb0025b8 	bl	1265c8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11cee4:	e51b0010 	ldr	r0, [fp, #-16]
  11cee8:	eb000ade 	bl	11fa68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11ceec:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11cef0:	e3403015 	movt	r3, #21
  11cef4:	e5933000 	ldr	r3, [r3]
  11cef8:	e51b2010 	ldr	r2, [fp, #-16]
  11cefc:	e1520003 	cmp	r2, r3
  11cf00:	1a000007 	bne	11cf24 <tcp_close_shutdown+0x114>
  11cf04:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11cf08:	e3403015 	movt	r3, #21
  11cf0c:	e5933000 	ldr	r3, [r3]
  11cf10:	e593200c 	ldr	r2, [r3, #12]
  11cf14:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11cf18:	e3403015 	movt	r3, #21
  11cf1c:	e5832000 	str	r2, [r3]
  11cf20:	ea000014 	b	11cf78 <tcp_close_shutdown+0x168>
  11cf24:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11cf28:	e3403015 	movt	r3, #21
  11cf2c:	e5933000 	ldr	r3, [r3]
  11cf30:	e50b3008 	str	r3, [fp, #-8]
  11cf34:	ea00000c 	b	11cf6c <tcp_close_shutdown+0x15c>
  11cf38:	e51b3008 	ldr	r3, [fp, #-8]
  11cf3c:	e593300c 	ldr	r3, [r3, #12]
  11cf40:	e51b2010 	ldr	r2, [fp, #-16]
  11cf44:	e1520003 	cmp	r2, r3
  11cf48:	1a000004 	bne	11cf60 <tcp_close_shutdown+0x150>
  11cf4c:	e51b3010 	ldr	r3, [fp, #-16]
  11cf50:	e593200c 	ldr	r2, [r3, #12]
  11cf54:	e51b3008 	ldr	r3, [fp, #-8]
  11cf58:	e583200c 	str	r2, [r3, #12]
  11cf5c:	ea000005 	b	11cf78 <tcp_close_shutdown+0x168>
  11cf60:	e51b3008 	ldr	r3, [fp, #-8]
  11cf64:	e593300c 	ldr	r3, [r3, #12]
  11cf68:	e50b3008 	str	r3, [fp, #-8]
  11cf6c:	e51b3008 	ldr	r3, [fp, #-8]
  11cf70:	e3530000 	cmp	r3, #0
  11cf74:	1affffef 	bne	11cf38 <tcp_close_shutdown+0x128>
  11cf78:	e51b3010 	ldr	r3, [fp, #-16]
  11cf7c:	e3a02000 	mov	r2, #0
  11cf80:	e583200c 	str	r2, [r3, #12]
  11cf84:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11cf88:	e3403015 	movt	r3, #21
  11cf8c:	e3a02001 	mov	r2, #1
  11cf90:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11cf94:	e51b3010 	ldr	r3, [fp, #-16]
  11cf98:	e5933014 	ldr	r3, [r3, #20]
  11cf9c:	e3530004 	cmp	r3, #4
  11cfa0:	1a00000d 	bne	11cfdc <tcp_close_shutdown+0x1cc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11cfa4:	e51b3010 	ldr	r3, [fp, #-16]
  11cfa8:	e3a0200a 	mov	r2, #10
  11cfac:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11cfb0:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cfb4:	e3403015 	movt	r3, #21
  11cfb8:	e5932000 	ldr	r2, [r3]
  11cfbc:	e51b3010 	ldr	r3, [fp, #-16]
  11cfc0:	e583200c 	str	r2, [r3, #12]
  11cfc4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cfc8:	e3403015 	movt	r3, #21
  11cfcc:	e51b2010 	ldr	r2, [fp, #-16]
  11cfd0:	e5832000 	str	r2, [r3]
  11cfd4:	eb0027cf 	bl	126f18 <tcp_timer_needed>
  11cfd8:	ea00000a 	b	11d008 <tcp_close_shutdown+0x1f8>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11cfdc:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11cfe0:	e3403015 	movt	r3, #21
  11cfe4:	e5933000 	ldr	r3, [r3]
  11cfe8:	e51b2010 	ldr	r2, [fp, #-16]
  11cfec:	e1520003 	cmp	r2, r3
  11cff0:	1a000001 	bne	11cffc <tcp_close_shutdown+0x1ec>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11cff4:	eb001ce6 	bl	124394 <tcp_trigger_input_pcb_close>
  11cff8:	ea000002 	b	11d008 <tcp_close_shutdown+0x1f8>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11cffc:	e51b1010 	ldr	r1, [fp, #-16]
  11d000:	e3a00002 	mov	r0, #2
  11d004:	ebffefd0 	bl	118f4c <memp_free>
        }
      }
      return ERR_OK;
  11d008:	e3a03000 	mov	r3, #0
  11d00c:	ea000058 	b	11d174 <tcp_close_shutdown+0x364>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11d010:	e51b3010 	ldr	r3, [fp, #-16]
  11d014:	e5933014 	ldr	r3, [r3, #20]
  11d018:	e3530001 	cmp	r3, #1
  11d01c:	0a000032 	beq	11d0ec <tcp_close_shutdown+0x2dc>
  11d020:	e3530001 	cmp	r3, #1
  11d024:	3a000002 	bcc	11d034 <tcp_close_shutdown+0x224>
  11d028:	e3530002 	cmp	r3, #2
  11d02c:	0a000038 	beq	11d114 <tcp_close_shutdown+0x304>
  11d030:	ea00004a 	b	11d160 <tcp_close_shutdown+0x350>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d034:	e51b3010 	ldr	r3, [fp, #-16]
  11d038:	e1d331ba 	ldrh	r3, [r3, #26]
  11d03c:	e3530000 	cmp	r3, #0
  11d040:	0a000025 	beq	11d0dc <tcp_close_shutdown+0x2cc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d044:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d048:	e3403015 	movt	r3, #21
  11d04c:	e5933000 	ldr	r3, [r3]
  11d050:	e51b2010 	ldr	r2, [fp, #-16]
  11d054:	e1520003 	cmp	r2, r3
  11d058:	1a000007 	bne	11d07c <tcp_close_shutdown+0x26c>
  11d05c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d060:	e3403015 	movt	r3, #21
  11d064:	e5933000 	ldr	r3, [r3]
  11d068:	e593200c 	ldr	r2, [r3, #12]
  11d06c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d070:	e3403015 	movt	r3, #21
  11d074:	e5832000 	str	r2, [r3]
  11d078:	ea000014 	b	11d0d0 <tcp_close_shutdown+0x2c0>
  11d07c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d080:	e3403015 	movt	r3, #21
  11d084:	e5933000 	ldr	r3, [r3]
  11d088:	e50b300c 	str	r3, [fp, #-12]
  11d08c:	ea00000c 	b	11d0c4 <tcp_close_shutdown+0x2b4>
  11d090:	e51b300c 	ldr	r3, [fp, #-12]
  11d094:	e593300c 	ldr	r3, [r3, #12]
  11d098:	e51b2010 	ldr	r2, [fp, #-16]
  11d09c:	e1520003 	cmp	r2, r3
  11d0a0:	1a000004 	bne	11d0b8 <tcp_close_shutdown+0x2a8>
  11d0a4:	e51b3010 	ldr	r3, [fp, #-16]
  11d0a8:	e593200c 	ldr	r2, [r3, #12]
  11d0ac:	e51b300c 	ldr	r3, [fp, #-12]
  11d0b0:	e583200c 	str	r2, [r3, #12]
  11d0b4:	ea000005 	b	11d0d0 <tcp_close_shutdown+0x2c0>
  11d0b8:	e51b300c 	ldr	r3, [fp, #-12]
  11d0bc:	e593300c 	ldr	r3, [r3, #12]
  11d0c0:	e50b300c 	str	r3, [fp, #-12]
  11d0c4:	e51b300c 	ldr	r3, [fp, #-12]
  11d0c8:	e3530000 	cmp	r3, #0
  11d0cc:	1affffef 	bne	11d090 <tcp_close_shutdown+0x280>
  11d0d0:	e51b3010 	ldr	r3, [fp, #-16]
  11d0d4:	e3a02000 	mov	r2, #0
  11d0d8:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d0dc:	e51b1010 	ldr	r1, [fp, #-16]
  11d0e0:	e3a00002 	mov	r0, #2
  11d0e4:	ebffef98 	bl	118f4c <memp_free>
    break;
  11d0e8:	ea000020 	b	11d170 <tcp_close_shutdown+0x360>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d0ec:	e51b0010 	ldr	r0, [fp, #-16]
  11d0f0:	ebffff19 	bl	11cd5c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d0f4:	e51b1010 	ldr	r1, [fp, #-16]
  11d0f8:	e30c0c10 	movw	r0, #52240	; 0xcc10
  11d0fc:	e3400015 	movt	r0, #21
  11d100:	eb000a92 	bl	11fb50 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d104:	e51b1010 	ldr	r1, [fp, #-16]
  11d108:	e3a00003 	mov	r0, #3
  11d10c:	ebffef8e 	bl	118f4c <memp_free>
    break;
  11d110:	ea000016 	b	11d170 <tcp_close_shutdown+0x360>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d114:	e51b1010 	ldr	r1, [fp, #-16]
  11d118:	e30c0c08 	movw	r0, #52232	; 0xcc08
  11d11c:	e3400015 	movt	r0, #21
  11d120:	eb000a8a 	bl	11fb50 <tcp_pcb_remove>
  11d124:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11d128:	e3403015 	movt	r3, #21
  11d12c:	e3a02001 	mov	r2, #1
  11d130:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d134:	e51b1010 	ldr	r1, [fp, #-16]
  11d138:	e3a00002 	mov	r0, #2
  11d13c:	ebffef82 	bl	118f4c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d140:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d144:	e3403015 	movt	r3, #21
  11d148:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d14c:	e2832001 	add	r2, r3, #1
  11d150:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d154:	e3403015 	movt	r3, #21
  11d158:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d15c:	ea000003 	b	11d170 <tcp_close_shutdown+0x360>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d160:	e51b0010 	ldr	r0, [fp, #-16]
  11d164:	eb000005 	bl	11d180 <tcp_close_shutdown_fin>
  11d168:	e1a03000 	mov	r3, r0
  11d16c:	ea000000 	b	11d174 <tcp_close_shutdown+0x364>
  }
  return ERR_OK;
  11d170:	e3a03000 	mov	r3, #0
}
  11d174:	e1a00003 	mov	r0, r3
  11d178:	e24bd004 	sub	sp, fp, #4
  11d17c:	e8bd8800 	pop	{fp, pc}

0011d180 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d180:	e92d4800 	push	{fp, lr}
  11d184:	e28db004 	add	fp, sp, #4
  11d188:	e24dd010 	sub	sp, sp, #16
  11d18c:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d190:	e51b3010 	ldr	r3, [fp, #-16]
  11d194:	e3530000 	cmp	r3, #0
  11d198:	1a000006 	bne	11d1b8 <tcp_close_shutdown_fin+0x38>
  11d19c:	e3070c00 	movw	r0, #31744	; 0x7c00
  11d1a0:	e3400014 	movt	r0, #20
  11d1a4:	ebff97da 	bl	103114 <rt_kprintf>
  11d1a8:	e300114d 	movw	r1, #333	; 0x14d
  11d1ac:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11d1b0:	e3400014 	movt	r0, #20
  11d1b4:	ebffb6f6 	bl	10ad94 <sys_arch_assert>

  switch (pcb->state) {
  11d1b8:	e51b3010 	ldr	r3, [fp, #-16]
  11d1bc:	e5933014 	ldr	r3, [r3, #20]
  11d1c0:	e3530004 	cmp	r3, #4
  11d1c4:	0a000015 	beq	11d220 <tcp_close_shutdown_fin+0xa0>
  11d1c8:	e3530007 	cmp	r3, #7
  11d1cc:	0a000025 	beq	11d268 <tcp_close_shutdown_fin+0xe8>
  11d1d0:	e3530003 	cmp	r3, #3
  11d1d4:	1a000035 	bne	11d2b0 <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d1d8:	e51b0010 	ldr	r0, [fp, #-16]
  11d1dc:	eb001ce8 	bl	124584 <tcp_send_fin>
  11d1e0:	e1a03000 	mov	r3, r0
  11d1e4:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d1e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d1ec:	e3530000 	cmp	r3, #0
  11d1f0:	1a000030 	bne	11d2b8 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d1f4:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d1f8:	e3403015 	movt	r3, #21
  11d1fc:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d200:	e2832001 	add	r2, r3, #1
  11d204:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d208:	e3403015 	movt	r3, #21
  11d20c:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d210:	e51b3010 	ldr	r3, [fp, #-16]
  11d214:	e3a02005 	mov	r2, #5
  11d218:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d21c:	ea000025 	b	11d2b8 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d220:	e51b0010 	ldr	r0, [fp, #-16]
  11d224:	eb001cd6 	bl	124584 <tcp_send_fin>
  11d228:	e1a03000 	mov	r3, r0
  11d22c:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d230:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d234:	e3530000 	cmp	r3, #0
  11d238:	1a000020 	bne	11d2c0 <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d23c:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d240:	e3403015 	movt	r3, #21
  11d244:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d248:	e2832001 	add	r2, r3, #1
  11d24c:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d250:	e3403015 	movt	r3, #21
  11d254:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d258:	e51b3010 	ldr	r3, [fp, #-16]
  11d25c:	e3a02005 	mov	r2, #5
  11d260:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d264:	ea000015 	b	11d2c0 <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d268:	e51b0010 	ldr	r0, [fp, #-16]
  11d26c:	eb001cc4 	bl	124584 <tcp_send_fin>
  11d270:	e1a03000 	mov	r3, r0
  11d274:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d278:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d27c:	e3530000 	cmp	r3, #0
  11d280:	1a000010 	bne	11d2c8 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d284:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d288:	e3403015 	movt	r3, #21
  11d28c:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d290:	e2832001 	add	r2, r3, #1
  11d294:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d298:	e3403015 	movt	r3, #21
  11d29c:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d2a0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2a4:	e3a02009 	mov	r2, #9
  11d2a8:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d2ac:	ea000005 	b	11d2c8 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d2b0:	e3a03000 	mov	r3, #0
  11d2b4:	ea000014 	b	11d30c <tcp_close_shutdown_fin+0x18c>
    break;
  11d2b8:	e320f000 	nop	{0}
  11d2bc:	ea000002 	b	11d2cc <tcp_close_shutdown_fin+0x14c>
    break;
  11d2c0:	e320f000 	nop	{0}
  11d2c4:	ea000000 	b	11d2cc <tcp_close_shutdown_fin+0x14c>
    break;
  11d2c8:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d2cc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d2d0:	e3530000 	cmp	r3, #0
  11d2d4:	1a000002 	bne	11d2e4 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d2d8:	e51b0010 	ldr	r0, [fp, #-16]
  11d2dc:	eb002253 	bl	125c30 <tcp_output>
  11d2e0:	ea000008 	b	11d308 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d2e4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d2e8:	e3730001 	cmn	r3, #1
  11d2ec:	1a000005 	bne	11d308 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d2f0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2f4:	e5d3301e 	ldrb	r3, [r3, #30]
  11d2f8:	e3833008 	orr	r3, r3, #8
  11d2fc:	e6ef2073 	uxtb	r2, r3
  11d300:	e51b3010 	ldr	r3, [fp, #-16]
  11d304:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d308:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d30c:	e1a00003 	mov	r0, r3
  11d310:	e24bd004 	sub	sp, fp, #4
  11d314:	e8bd8800 	pop	{fp, pc}

0011d318 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d318:	e92d4800 	push	{fp, lr}
  11d31c:	e28db004 	add	fp, sp, #4
  11d320:	e24dd008 	sub	sp, sp, #8
  11d324:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d328:	e51b3008 	ldr	r3, [fp, #-8]
  11d32c:	e5933014 	ldr	r3, [r3, #20]
  11d330:	e3530001 	cmp	r3, #1
  11d334:	0a000005 	beq	11d350 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d338:	e51b3008 	ldr	r3, [fp, #-8]
  11d33c:	e5d3301e 	ldrb	r3, [r3, #30]
  11d340:	e3833010 	orr	r3, r3, #16
  11d344:	e6ef2073 	uxtb	r2, r3
  11d348:	e51b3008 	ldr	r3, [fp, #-8]
  11d34c:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d350:	e3a01001 	mov	r1, #1
  11d354:	e51b0008 	ldr	r0, [fp, #-8]
  11d358:	ebfffeac 	bl	11ce10 <tcp_close_shutdown>
  11d35c:	e1a03000 	mov	r3, r0
}
  11d360:	e1a00003 	mov	r0, r3
  11d364:	e24bd004 	sub	sp, fp, #4
  11d368:	e8bd8800 	pop	{fp, pc}

0011d36c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d36c:	e92d4800 	push	{fp, lr}
  11d370:	e28db004 	add	fp, sp, #4
  11d374:	e24dd010 	sub	sp, sp, #16
  11d378:	e50b0008 	str	r0, [fp, #-8]
  11d37c:	e50b100c 	str	r1, [fp, #-12]
  11d380:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d384:	e51b3008 	ldr	r3, [fp, #-8]
  11d388:	e5933014 	ldr	r3, [r3, #20]
  11d38c:	e3530001 	cmp	r3, #1
  11d390:	1a000001 	bne	11d39c <tcp_shutdown+0x30>
    return ERR_CONN;
  11d394:	e3e0300a 	mvn	r3, #10
  11d398:	ea000030 	b	11d460 <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d39c:	e51b300c 	ldr	r3, [fp, #-12]
  11d3a0:	e3530000 	cmp	r3, #0
  11d3a4:	0a000018 	beq	11d40c <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d3a8:	e51b3008 	ldr	r3, [fp, #-8]
  11d3ac:	e5d3301e 	ldrb	r3, [r3, #30]
  11d3b0:	e3833010 	orr	r3, r3, #16
  11d3b4:	e6ef2073 	uxtb	r2, r3
  11d3b8:	e51b3008 	ldr	r3, [fp, #-8]
  11d3bc:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d3c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d3c4:	e3530000 	cmp	r3, #0
  11d3c8:	0a000004 	beq	11d3e0 <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d3cc:	e3a01001 	mov	r1, #1
  11d3d0:	e51b0008 	ldr	r0, [fp, #-8]
  11d3d4:	ebfffe8d 	bl	11ce10 <tcp_close_shutdown>
  11d3d8:	e1a03000 	mov	r3, r0
  11d3dc:	ea00001f 	b	11d460 <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d3e0:	e51b3008 	ldr	r3, [fp, #-8]
  11d3e4:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d3e8:	e3530000 	cmp	r3, #0
  11d3ec:	0a000006 	beq	11d40c <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d3f0:	e51b3008 	ldr	r3, [fp, #-8]
  11d3f4:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d3f8:	e1a00003 	mov	r0, r3
  11d3fc:	ebfff5e0 	bl	11ab84 <pbuf_free>
      pcb->refused_data = NULL;
  11d400:	e51b3008 	ldr	r3, [fp, #-8]
  11d404:	e3a02000 	mov	r2, #0
  11d408:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d40c:	e51b3010 	ldr	r3, [fp, #-16]
  11d410:	e3530000 	cmp	r3, #0
  11d414:	0a000010 	beq	11d45c <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d418:	e51b3008 	ldr	r3, [fp, #-8]
  11d41c:	e5933014 	ldr	r3, [r3, #20]
  11d420:	e3530003 	cmp	r3, #3
  11d424:	3a00000a 	bcc	11d454 <tcp_shutdown+0xe8>
  11d428:	e3530004 	cmp	r3, #4
  11d42c:	9a000001 	bls	11d438 <tcp_shutdown+0xcc>
  11d430:	e3530007 	cmp	r3, #7
  11d434:	1a000006 	bne	11d454 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d438:	e51b300c 	ldr	r3, [fp, #-12]
  11d43c:	e6ef3073 	uxtb	r3, r3
  11d440:	e1a01003 	mov	r1, r3
  11d444:	e51b0008 	ldr	r0, [fp, #-8]
  11d448:	ebfffe70 	bl	11ce10 <tcp_close_shutdown>
  11d44c:	e1a03000 	mov	r3, r0
  11d450:	ea000002 	b	11d460 <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d454:	e3e0300a 	mvn	r3, #10
  11d458:	ea000000 	b	11d460 <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d45c:	e3a03000 	mov	r3, #0
}
  11d460:	e1a00003 	mov	r0, r3
  11d464:	e24bd004 	sub	sp, fp, #4
  11d468:	e8bd8800 	pop	{fp, pc}

0011d46c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d46c:	e92d4800 	push	{fp, lr}
  11d470:	e28db004 	add	fp, sp, #4
  11d474:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d478:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d47c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d480:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d484:	e5933014 	ldr	r3, [r3, #20]
  11d488:	e3530001 	cmp	r3, #1
  11d48c:	1a000006 	bne	11d4ac <tcp_abandon+0x40>
  11d490:	e3070c6c 	movw	r0, #31852	; 0x7c6c
  11d494:	e3400014 	movt	r0, #20
  11d498:	ebff971d 	bl	103114 <rt_kprintf>
  11d49c:	e30011db 	movw	r1, #475	; 0x1db
  11d4a0:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11d4a4:	e3400014 	movt	r0, #20
  11d4a8:	ebffb639 	bl	10ad94 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d4ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4b0:	e5933014 	ldr	r3, [r3, #20]
  11d4b4:	e353000a 	cmp	r3, #10
  11d4b8:	1a000007 	bne	11d4dc <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d4bc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d4c0:	e30c0c18 	movw	r0, #52248	; 0xcc18
  11d4c4:	e3400015 	movt	r0, #21
  11d4c8:	eb0009a0 	bl	11fb50 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d4cc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d4d0:	e3a00002 	mov	r0, #2
  11d4d4:	ebffee9c 	bl	118f4c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d4d8:	ea00007f 	b	11d6dc <tcp_abandon+0x270>
    int send_rst = 0;
  11d4dc:	e3a03000 	mov	r3, #0
  11d4e0:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d4e4:	e3a03000 	mov	r3, #0
  11d4e8:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d4ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4f0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d4f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d4f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d500:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d504:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d508:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d50c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d510:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d514:	e5933010 	ldr	r3, [r3, #16]
  11d518:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d51c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d520:	e5933014 	ldr	r3, [r3, #20]
  11d524:	e3530000 	cmp	r3, #0
  11d528:	1a00002a 	bne	11d5d8 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d52c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d530:	e1d331ba 	ldrh	r3, [r3, #26]
  11d534:	e3530000 	cmp	r3, #0
  11d538:	0a000033 	beq	11d60c <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d53c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d540:	e3403015 	movt	r3, #21
  11d544:	e5933000 	ldr	r3, [r3]
  11d548:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d54c:	e1520003 	cmp	r2, r3
  11d550:	1a000007 	bne	11d574 <tcp_abandon+0x108>
  11d554:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d558:	e3403015 	movt	r3, #21
  11d55c:	e5933000 	ldr	r3, [r3]
  11d560:	e593200c 	ldr	r2, [r3, #12]
  11d564:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d568:	e3403015 	movt	r3, #21
  11d56c:	e5832000 	str	r2, [r3]
  11d570:	ea000014 	b	11d5c8 <tcp_abandon+0x15c>
  11d574:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d578:	e3403015 	movt	r3, #21
  11d57c:	e5933000 	ldr	r3, [r3]
  11d580:	e50b3010 	str	r3, [fp, #-16]
  11d584:	ea00000c 	b	11d5bc <tcp_abandon+0x150>
  11d588:	e51b3010 	ldr	r3, [fp, #-16]
  11d58c:	e593300c 	ldr	r3, [r3, #12]
  11d590:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d594:	e1520003 	cmp	r2, r3
  11d598:	1a000004 	bne	11d5b0 <tcp_abandon+0x144>
  11d59c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5a0:	e593200c 	ldr	r2, [r3, #12]
  11d5a4:	e51b3010 	ldr	r3, [fp, #-16]
  11d5a8:	e583200c 	str	r2, [r3, #12]
  11d5ac:	ea000005 	b	11d5c8 <tcp_abandon+0x15c>
  11d5b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d5b4:	e593300c 	ldr	r3, [r3, #12]
  11d5b8:	e50b3010 	str	r3, [fp, #-16]
  11d5bc:	e51b3010 	ldr	r3, [fp, #-16]
  11d5c0:	e3530000 	cmp	r3, #0
  11d5c4:	1affffef 	bne	11d588 <tcp_abandon+0x11c>
  11d5c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5cc:	e3a02000 	mov	r2, #0
  11d5d0:	e583200c 	str	r2, [r3, #12]
  11d5d4:	ea00000c 	b	11d60c <tcp_abandon+0x1a0>
      send_rst = reset;
  11d5d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d5dc:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d5e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5e4:	e1d331ba 	ldrh	r3, [r3, #26]
  11d5e8:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d5ec:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d5f0:	e30c0c08 	movw	r0, #52232	; 0xcc08
  11d5f4:	e3400015 	movt	r0, #21
  11d5f8:	eb000954 	bl	11fb50 <tcp_pcb_remove>
  11d5fc:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11d600:	e3403015 	movt	r3, #21
  11d604:	e3a02001 	mov	r2, #1
  11d608:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d60c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d610:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d614:	e3530000 	cmp	r3, #0
  11d618:	0a000003 	beq	11d62c <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d61c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d620:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d624:	e1a00003 	mov	r0, r3
  11d628:	eb0006b7 	bl	11f10c <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d62c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d630:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d634:	e3530000 	cmp	r3, #0
  11d638:	0a000003 	beq	11d64c <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d63c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d640:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d644:	e1a00003 	mov	r0, r3
  11d648:	eb0006af 	bl	11f10c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d64c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d650:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d654:	e3530000 	cmp	r3, #0
  11d658:	0a000003 	beq	11d66c <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d65c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d660:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d664:	e1a00003 	mov	r0, r3
  11d668:	eb0006a7 	bl	11f10c <tcp_segs_free>
    if (send_rst) {
  11d66c:	e51b3008 	ldr	r3, [fp, #-8]
  11d670:	e3530000 	cmp	r3, #0
  11d674:	0a00000b 	beq	11d6a8 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d678:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d67c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d680:	e2831004 	add	r1, r3, #4
  11d684:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d688:	e1d331bc 	ldrh	r3, [r3, #28]
  11d68c:	e58d3004 	str	r3, [sp, #4]
  11d690:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d694:	e58d3000 	str	r3, [sp]
  11d698:	e1a03001 	mov	r3, r1
  11d69c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d6a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d6a4:	eb0023c7 	bl	1265c8 <tcp_rst>
    last_state = pcb->state;
  11d6a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d6ac:	e5933014 	ldr	r3, [r3, #20]
  11d6b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d6b4:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d6b8:	e3a00002 	mov	r0, #2
  11d6bc:	ebffee22 	bl	118f4c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d6c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d6c4:	e3530000 	cmp	r3, #0
  11d6c8:	0a000003 	beq	11d6dc <tcp_abandon+0x270>
  11d6cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d6d0:	e3e0100c 	mvn	r1, #12
  11d6d4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11d6d8:	e12fff33 	blx	r3
}
  11d6dc:	e320f000 	nop	{0}
  11d6e0:	e24bd004 	sub	sp, fp, #4
  11d6e4:	e8bd8800 	pop	{fp, pc}

0011d6e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11d6e8:	e92d4800 	push	{fp, lr}
  11d6ec:	e28db004 	add	fp, sp, #4
  11d6f0:	e24dd008 	sub	sp, sp, #8
  11d6f4:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11d6f8:	e3a01001 	mov	r1, #1
  11d6fc:	e51b0008 	ldr	r0, [fp, #-8]
  11d700:	ebffff59 	bl	11d46c <tcp_abandon>
}
  11d704:	e320f000 	nop	{0}
  11d708:	e24bd004 	sub	sp, fp, #4
  11d70c:	e8bd8800 	pop	{fp, pc}

0011d710 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11d710:	e92d4800 	push	{fp, lr}
  11d714:	e28db004 	add	fp, sp, #4
  11d718:	e24dd020 	sub	sp, sp, #32
  11d71c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11d720:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11d724:	e1a03002 	mov	r3, r2
  11d728:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11d72c:	e3a03004 	mov	r3, #4
  11d730:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11d734:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d738:	e3530000 	cmp	r3, #0
  11d73c:	1a000002 	bne	11d74c <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11d740:	e309363c 	movw	r3, #38460	; 0x963c
  11d744:	e3403014 	movt	r3, #20
  11d748:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11d74c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d750:	e3530000 	cmp	r3, #0
  11d754:	0a000002 	beq	11d764 <tcp_bind+0x54>
  11d758:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d75c:	e3530000 	cmp	r3, #0
  11d760:	1a000001 	bne	11d76c <tcp_bind+0x5c>
    return ERR_VAL;
  11d764:	e3e03005 	mvn	r3, #5
  11d768:	ea000078 	b	11d950 <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11d76c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d770:	e5933014 	ldr	r3, [r3, #20]
  11d774:	e3530000 	cmp	r3, #0
  11d778:	0a000008 	beq	11d7a0 <tcp_bind+0x90>
  11d77c:	e3070ca0 	movw	r0, #31904	; 0x7ca0
  11d780:	e3400014 	movt	r0, #20
  11d784:	ebff9662 	bl	103114 <rt_kprintf>
  11d788:	e300123f 	movw	r1, #575	; 0x23f
  11d78c:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11d790:	e3400014 	movt	r0, #20
  11d794:	ebffb57e 	bl	10ad94 <sys_arch_assert>
  11d798:	e3e03005 	mvn	r3, #5
  11d79c:	ea00006b 	b	11d950 <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11d7a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d7a4:	e5d33008 	ldrb	r3, [r3, #8]
  11d7a8:	e2033004 	and	r3, r3, #4
  11d7ac:	e3530000 	cmp	r3, #0
  11d7b0:	0a000001 	beq	11d7bc <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11d7b4:	e3a03003 	mov	r3, #3
  11d7b8:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11d7bc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d7c0:	e3530000 	cmp	r3, #0
  11d7c4:	1a000007 	bne	11d7e8 <tcp_bind+0xd8>
    port = tcp_new_port();
  11d7c8:	eb0001be 	bl	11dec8 <tcp_new_port>
  11d7cc:	e1a03000 	mov	r3, r0
  11d7d0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11d7d4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d7d8:	e3530000 	cmp	r3, #0
  11d7dc:	1a00003d 	bne	11d8d8 <tcp_bind+0x1c8>
      return ERR_BUF;
  11d7e0:	e3e03001 	mvn	r3, #1
  11d7e4:	ea000059 	b	11d950 <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11d7e8:	e3a03000 	mov	r3, #0
  11d7ec:	e50b3008 	str	r3, [fp, #-8]
  11d7f0:	ea000034 	b	11d8c8 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d7f4:	e3073bf0 	movw	r3, #31728	; 0x7bf0
  11d7f8:	e3403014 	movt	r3, #20
  11d7fc:	e51b2008 	ldr	r2, [fp, #-8]
  11d800:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d804:	e5933000 	ldr	r3, [r3]
  11d808:	e50b3010 	str	r3, [fp, #-16]
  11d80c:	ea000027 	b	11d8b0 <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11d810:	e51b3010 	ldr	r3, [fp, #-16]
  11d814:	e1d331ba 	ldrh	r3, [r3, #26]
  11d818:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d81c:	e1520003 	cmp	r2, r3
  11d820:	1a00001f 	bne	11d8a4 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d824:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d828:	e5d33008 	ldrb	r3, [r3, #8]
  11d82c:	e2033004 	and	r3, r3, #4
  11d830:	e3530000 	cmp	r3, #0
  11d834:	0a000004 	beq	11d84c <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11d838:	e51b3010 	ldr	r3, [fp, #-16]
  11d83c:	e5d33008 	ldrb	r3, [r3, #8]
  11d840:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d844:	e3530000 	cmp	r3, #0
  11d848:	1a000015 	bne	11d8a4 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11d84c:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d850:	e3530000 	cmp	r3, #0
  11d854:	0a000010 	beq	11d89c <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11d858:	e51b3010 	ldr	r3, [fp, #-16]
  11d85c:	e5933000 	ldr	r3, [r3]
  11d860:	e3530000 	cmp	r3, #0
  11d864:	0a00000c 	beq	11d89c <tcp_bind+0x18c>
  11d868:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d86c:	e3530000 	cmp	r3, #0
  11d870:	0a000009 	beq	11d89c <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11d874:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d878:	e5933000 	ldr	r3, [r3]
  11d87c:	e3530000 	cmp	r3, #0
  11d880:	0a000005 	beq	11d89c <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11d884:	e51b3010 	ldr	r3, [fp, #-16]
  11d888:	e5932000 	ldr	r2, [r3]
  11d88c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d890:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d894:	e1520003 	cmp	r2, r3
  11d898:	1a000001 	bne	11d8a4 <tcp_bind+0x194>
              return ERR_USE;
  11d89c:	e3e03007 	mvn	r3, #7
  11d8a0:	ea00002a 	b	11d950 <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d8a4:	e51b3010 	ldr	r3, [fp, #-16]
  11d8a8:	e593300c 	ldr	r3, [r3, #12]
  11d8ac:	e50b3010 	str	r3, [fp, #-16]
  11d8b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d8b4:	e3530000 	cmp	r3, #0
  11d8b8:	1affffd4 	bne	11d810 <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11d8bc:	e51b3008 	ldr	r3, [fp, #-8]
  11d8c0:	e2833001 	add	r3, r3, #1
  11d8c4:	e50b3008 	str	r3, [fp, #-8]
  11d8c8:	e51b2008 	ldr	r2, [fp, #-8]
  11d8cc:	e51b300c 	ldr	r3, [fp, #-12]
  11d8d0:	e1520003 	cmp	r2, r3
  11d8d4:	baffffc6 	blt	11d7f4 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11d8d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8dc:	e3530000 	cmp	r3, #0
  11d8e0:	0a00000c 	beq	11d918 <tcp_bind+0x208>
  11d8e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8e8:	e5933000 	ldr	r3, [r3]
  11d8ec:	e3530000 	cmp	r3, #0
  11d8f0:	0a000008 	beq	11d918 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11d8f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8f8:	e3530000 	cmp	r3, #0
  11d8fc:	0a000002 	beq	11d90c <tcp_bind+0x1fc>
  11d900:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d904:	e5933000 	ldr	r3, [r3]
  11d908:	ea000000 	b	11d910 <tcp_bind+0x200>
  11d90c:	e3a03000 	mov	r3, #0
  11d910:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d914:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11d918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d91c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d920:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11d924:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d928:	e3403015 	movt	r3, #21
  11d92c:	e5932000 	ldr	r2, [r3]
  11d930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d934:	e583200c 	str	r2, [r3, #12]
  11d938:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d93c:	e3403015 	movt	r3, #21
  11d940:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d944:	e5832000 	str	r2, [r3]
  11d948:	eb002572 	bl	126f18 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11d94c:	e3a03000 	mov	r3, #0
}
  11d950:	e1a00003 	mov	r0, r3
  11d954:	e24bd004 	sub	sp, fp, #4
  11d958:	e8bd8800 	pop	{fp, pc}

0011d95c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11d95c:	e92d4800 	push	{fp, lr}
  11d960:	e28db004 	add	fp, sp, #4
  11d964:	e24dd010 	sub	sp, sp, #16
  11d968:	e50b0008 	str	r0, [fp, #-8]
  11d96c:	e50b100c 	str	r1, [fp, #-12]
  11d970:	e1a03002 	mov	r3, r2
  11d974:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11d978:	e51b000c 	ldr	r0, [fp, #-12]
  11d97c:	ebffff59 	bl	11d6e8 <tcp_abort>

  return ERR_ABRT;
  11d980:	e3e0300c 	mvn	r3, #12
}
  11d984:	e1a00003 	mov	r0, r3
  11d988:	e24bd004 	sub	sp, fp, #4
  11d98c:	e8bd8800 	pop	{fp, pc}

0011d990 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11d990:	e92d4800 	push	{fp, lr}
  11d994:	e28db004 	add	fp, sp, #4
  11d998:	e24dd008 	sub	sp, sp, #8
  11d99c:	e50b0008 	str	r0, [fp, #-8]
  11d9a0:	e1a03001 	mov	r3, r1
  11d9a4:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11d9a8:	e55b3009 	ldrb	r3, [fp, #-9]
  11d9ac:	e3a02000 	mov	r2, #0
  11d9b0:	e1a01003 	mov	r1, r3
  11d9b4:	e51b0008 	ldr	r0, [fp, #-8]
  11d9b8:	eb000003 	bl	11d9cc <tcp_listen_with_backlog_and_err>
  11d9bc:	e1a03000 	mov	r3, r0
}
  11d9c0:	e1a00003 	mov	r0, r3
  11d9c4:	e24bd004 	sub	sp, fp, #4
  11d9c8:	e8bd8800 	pop	{fp, pc}

0011d9cc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11d9cc:	e92d4800 	push	{fp, lr}
  11d9d0:	e28db004 	add	fp, sp, #4
  11d9d4:	e24dd020 	sub	sp, sp, #32
  11d9d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11d9dc:	e1a03001 	mov	r3, r1
  11d9e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11d9e4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11d9e8:	e3a03000 	mov	r3, #0
  11d9ec:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11d9f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d9f4:	e5933014 	ldr	r3, [r3, #20]
  11d9f8:	e3530000 	cmp	r3, #0
  11d9fc:	0a000009 	beq	11da28 <tcp_listen_with_backlog_and_err+0x5c>
  11da00:	e3070cc8 	movw	r0, #31944	; 0x7cc8
  11da04:	e3400014 	movt	r0, #20
  11da08:	ebff95c1 	bl	103114 <rt_kprintf>
  11da0c:	e30012af 	movw	r1, #687	; 0x2af
  11da10:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11da14:	e3400014 	movt	r0, #20
  11da18:	ebffb4dd 	bl	10ad94 <sys_arch_assert>
  11da1c:	e3e0300e 	mvn	r3, #14
  11da20:	e54b3009 	strb	r3, [fp, #-9]
  11da24:	ea000091 	b	11dc70 <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11da28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da2c:	e5933014 	ldr	r3, [r3, #20]
  11da30:	e3530001 	cmp	r3, #1
  11da34:	1a000004 	bne	11da4c <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11da38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da3c:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11da40:	e3e03008 	mvn	r3, #8
  11da44:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11da48:	ea000088 	b	11dc70 <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11da4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da50:	e5d33008 	ldrb	r3, [r3, #8]
  11da54:	e2033004 	and	r3, r3, #4
  11da58:	e3530000 	cmp	r3, #0
  11da5c:	0a00001b 	beq	11dad0 <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11da60:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11da64:	e3403015 	movt	r3, #21
  11da68:	e5933000 	ldr	r3, [r3]
  11da6c:	e50b3008 	str	r3, [fp, #-8]
  11da70:	ea000013 	b	11dac4 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11da74:	e51b3008 	ldr	r3, [fp, #-8]
  11da78:	e1d321ba 	ldrh	r2, [r3, #26]
  11da7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da80:	e1d331ba 	ldrh	r3, [r3, #26]
  11da84:	e1520003 	cmp	r2, r3
  11da88:	1a00000a 	bne	11dab8 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11da8c:	e51b3008 	ldr	r3, [fp, #-8]
  11da90:	e5932000 	ldr	r2, [r3]
  11da94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da98:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11da9c:	e1520003 	cmp	r2, r3
  11daa0:	1a000004 	bne	11dab8 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11daa4:	e3a03000 	mov	r3, #0
  11daa8:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11daac:	e3e03007 	mvn	r3, #7
  11dab0:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11dab4:	ea00006d 	b	11dc70 <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dab8:	e51b3008 	ldr	r3, [fp, #-8]
  11dabc:	e593300c 	ldr	r3, [r3, #12]
  11dac0:	e50b3008 	str	r3, [fp, #-8]
  11dac4:	e51b3008 	ldr	r3, [fp, #-8]
  11dac8:	e3530000 	cmp	r3, #0
  11dacc:	1affffe8 	bne	11da74 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11dad0:	e30022c7 	movw	r2, #711	; 0x2c7
  11dad4:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11dad8:	e3401014 	movt	r1, #20
  11dadc:	e3a00003 	mov	r0, #3
  11dae0:	ebffecb1 	bl	118dac <memp_malloc_fn>
  11dae4:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11dae8:	e51b3008 	ldr	r3, [fp, #-8]
  11daec:	e3530000 	cmp	r3, #0
  11daf0:	1a000002 	bne	11db00 <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11daf4:	e3e03000 	mvn	r3, #0
  11daf8:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11dafc:	ea00005b 	b	11dc70 <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11db00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db04:	e5932010 	ldr	r2, [r3, #16]
  11db08:	e51b3008 	ldr	r3, [fp, #-8]
  11db0c:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11db10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db14:	e1d321ba 	ldrh	r2, [r3, #26]
  11db18:	e51b3008 	ldr	r3, [fp, #-8]
  11db1c:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11db20:	e51b3008 	ldr	r3, [fp, #-8]
  11db24:	e3a02001 	mov	r2, #1
  11db28:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11db2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db30:	e5d32018 	ldrb	r2, [r3, #24]
  11db34:	e51b3008 	ldr	r3, [fp, #-8]
  11db38:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11db3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db40:	e5d32008 	ldrb	r2, [r3, #8]
  11db44:	e51b3008 	ldr	r3, [fp, #-8]
  11db48:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11db4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db50:	e5d3200a 	ldrb	r2, [r3, #10]
  11db54:	e51b3008 	ldr	r3, [fp, #-8]
  11db58:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11db5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db60:	e5d32009 	ldrb	r2, [r3, #9]
  11db64:	e51b3008 	ldr	r3, [fp, #-8]
  11db68:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11db6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db70:	e5932000 	ldr	r2, [r3]
  11db74:	e51b3008 	ldr	r3, [fp, #-8]
  11db78:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11db7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db80:	e1d331ba 	ldrh	r3, [r3, #26]
  11db84:	e3530000 	cmp	r3, #0
  11db88:	0a000025 	beq	11dc24 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11db8c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11db90:	e3403015 	movt	r3, #21
  11db94:	e5933000 	ldr	r3, [r3]
  11db98:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11db9c:	e1520003 	cmp	r2, r3
  11dba0:	1a000007 	bne	11dbc4 <tcp_listen_with_backlog_and_err+0x1f8>
  11dba4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11dba8:	e3403015 	movt	r3, #21
  11dbac:	e5933000 	ldr	r3, [r3]
  11dbb0:	e593200c 	ldr	r2, [r3, #12]
  11dbb4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11dbb8:	e3403015 	movt	r3, #21
  11dbbc:	e5832000 	str	r2, [r3]
  11dbc0:	ea000014 	b	11dc18 <tcp_listen_with_backlog_and_err+0x24c>
  11dbc4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11dbc8:	e3403015 	movt	r3, #21
  11dbcc:	e5933000 	ldr	r3, [r3]
  11dbd0:	e50b3010 	str	r3, [fp, #-16]
  11dbd4:	ea00000c 	b	11dc0c <tcp_listen_with_backlog_and_err+0x240>
  11dbd8:	e51b3010 	ldr	r3, [fp, #-16]
  11dbdc:	e593300c 	ldr	r3, [r3, #12]
  11dbe0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dbe4:	e1520003 	cmp	r2, r3
  11dbe8:	1a000004 	bne	11dc00 <tcp_listen_with_backlog_and_err+0x234>
  11dbec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbf0:	e593200c 	ldr	r2, [r3, #12]
  11dbf4:	e51b3010 	ldr	r3, [fp, #-16]
  11dbf8:	e583200c 	str	r2, [r3, #12]
  11dbfc:	ea000005 	b	11dc18 <tcp_listen_with_backlog_and_err+0x24c>
  11dc00:	e51b3010 	ldr	r3, [fp, #-16]
  11dc04:	e593300c 	ldr	r3, [r3, #12]
  11dc08:	e50b3010 	str	r3, [fp, #-16]
  11dc0c:	e51b3010 	ldr	r3, [fp, #-16]
  11dc10:	e3530000 	cmp	r3, #0
  11dc14:	1affffef 	bne	11dbd8 <tcp_listen_with_backlog_and_err+0x20c>
  11dc18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc1c:	e3a02000 	mov	r2, #0
  11dc20:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11dc24:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11dc28:	e3a00002 	mov	r0, #2
  11dc2c:	ebffecc6 	bl	118f4c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11dc30:	e51b2008 	ldr	r2, [fp, #-8]
  11dc34:	e30d395c 	movw	r3, #55644	; 0xd95c
  11dc38:	e3403011 	movt	r3, #17
  11dc3c:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11dc40:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11dc44:	e3403015 	movt	r3, #21
  11dc48:	e5932000 	ldr	r2, [r3]
  11dc4c:	e51b3008 	ldr	r3, [fp, #-8]
  11dc50:	e583200c 	str	r2, [r3, #12]
  11dc54:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11dc58:	e3403015 	movt	r3, #21
  11dc5c:	e51b2008 	ldr	r2, [fp, #-8]
  11dc60:	e5832000 	str	r2, [r3]
  11dc64:	eb0024ab 	bl	126f18 <tcp_timer_needed>
  res = ERR_OK;
  11dc68:	e3a03000 	mov	r3, #0
  11dc6c:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11dc70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dc74:	e3530000 	cmp	r3, #0
  11dc78:	0a000002 	beq	11dc88 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11dc7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dc80:	e55b2009 	ldrb	r2, [fp, #-9]
  11dc84:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11dc88:	e51b3008 	ldr	r3, [fp, #-8]
}
  11dc8c:	e1a00003 	mov	r0, r3
  11dc90:	e24bd004 	sub	sp, fp, #4
  11dc94:	e8bd8800 	pop	{fp, pc}

0011dc98 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11dc98:	e92d4800 	push	{fp, lr}
  11dc9c:	e28db004 	add	fp, sp, #4
  11dca0:	e24dd010 	sub	sp, sp, #16
  11dca4:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11dca8:	e51b3010 	ldr	r3, [fp, #-16]
  11dcac:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dcb0:	e51b2010 	ldr	r2, [fp, #-16]
  11dcb4:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dcb8:	e0833002 	add	r3, r3, r2
  11dcbc:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dcc0:	e51b3010 	ldr	r3, [fp, #-16]
  11dcc4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dcc8:	e51b3010 	ldr	r3, [fp, #-16]
  11dccc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11dcd0:	e3530a01 	cmp	r3, #4096	; 0x1000
  11dcd4:	31a03003 	movcc	r3, r3
  11dcd8:	23a03a01 	movcs	r3, #4096	; 0x1000
  11dcdc:	e6ff3073 	uxth	r3, r3
  11dce0:	e0823003 	add	r3, r2, r3
  11dce4:	e51b2008 	ldr	r2, [fp, #-8]
  11dce8:	e0423003 	sub	r3, r2, r3
  11dcec:	e3530000 	cmp	r3, #0
  11dcf0:	ba000008 	blt	11dd18 <tcp_update_rcv_ann_wnd+0x80>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11dcf4:	e51b3010 	ldr	r3, [fp, #-16]
  11dcf8:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11dcfc:	e51b3010 	ldr	r3, [fp, #-16]
  11dd00:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11dd04:	e51b3010 	ldr	r3, [fp, #-16]
  11dd08:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dd0c:	e51b2008 	ldr	r2, [fp, #-8]
  11dd10:	e0423003 	sub	r3, r2, r3
  11dd14:	ea00001f 	b	11dd98 <tcp_update_rcv_ann_wnd+0x100>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11dd18:	e51b3010 	ldr	r3, [fp, #-16]
  11dd1c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11dd20:	e51b3010 	ldr	r3, [fp, #-16]
  11dd24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dd28:	e0423003 	sub	r3, r2, r3
  11dd2c:	e3530000 	cmp	r3, #0
  11dd30:	da000003 	ble	11dd44 <tcp_update_rcv_ann_wnd+0xac>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11dd34:	e51b3010 	ldr	r3, [fp, #-16]
  11dd38:	e3a02000 	mov	r2, #0
  11dd3c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11dd40:	ea000013 	b	11dd94 <tcp_update_rcv_ann_wnd+0xfc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11dd44:	e51b3010 	ldr	r3, [fp, #-16]
  11dd48:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dd4c:	e51b3010 	ldr	r3, [fp, #-16]
  11dd50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dd54:	e0423003 	sub	r3, r2, r3
  11dd58:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11dd5c:	e51b300c 	ldr	r3, [fp, #-12]
  11dd60:	e3530801 	cmp	r3, #65536	; 0x10000
  11dd64:	3a000006 	bcc	11dd84 <tcp_update_rcv_ann_wnd+0xec>
  11dd68:	e3070cec 	movw	r0, #31980	; 0x7cec
  11dd6c:	e3400014 	movt	r0, #20
  11dd70:	ebff94e7 	bl	103114 <rt_kprintf>
  11dd74:	e3001303 	movw	r1, #771	; 0x303
  11dd78:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11dd7c:	e3400014 	movt	r0, #20
  11dd80:	ebffb403 	bl	10ad94 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11dd84:	e51b300c 	ldr	r3, [fp, #-12]
  11dd88:	e6ff2073 	uxth	r2, r3
  11dd8c:	e51b3010 	ldr	r3, [fp, #-16]
  11dd90:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11dd94:	e3a03000 	mov	r3, #0
  }
}
  11dd98:	e1a00003 	mov	r0, r3
  11dd9c:	e24bd004 	sub	sp, fp, #4
  11dda0:	e8bd8800 	pop	{fp, pc}

0011dda4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11dda4:	e92d4800 	push	{fp, lr}
  11dda8:	e28db004 	add	fp, sp, #4
  11ddac:	e24dd010 	sub	sp, sp, #16
  11ddb0:	e50b0010 	str	r0, [fp, #-16]
  11ddb4:	e1a03001 	mov	r3, r1
  11ddb8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11ddbc:	e51b3010 	ldr	r3, [fp, #-16]
  11ddc0:	e5933014 	ldr	r3, [r3, #20]
  11ddc4:	e3530001 	cmp	r3, #1
  11ddc8:	1a000006 	bne	11dde8 <tcp_recved+0x44>
  11ddcc:	e3070d08 	movw	r0, #32008	; 0x7d08
  11ddd0:	e3400014 	movt	r0, #20
  11ddd4:	ebff94ce 	bl	103114 <rt_kprintf>
  11ddd8:	e300131b 	movw	r1, #795	; 0x31b
  11dddc:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11dde0:	e3400014 	movt	r0, #20
  11dde4:	ebffb3ea 	bl	10ad94 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11dde8:	e51b3010 	ldr	r3, [fp, #-16]
  11ddec:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11ddf0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ddf4:	e0823003 	add	r3, r2, r3
  11ddf8:	e6ff2073 	uxth	r2, r3
  11ddfc:	e51b3010 	ldr	r3, [fp, #-16]
  11de00:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
  11de04:	e51b3010 	ldr	r3, [fp, #-16]
  11de08:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11de0c:	e3530a02 	cmp	r3, #8192	; 0x2000
  11de10:	9a000003 	bls	11de24 <tcp_recved+0x80>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11de14:	e51b3010 	ldr	r3, [fp, #-16]
  11de18:	e3a02a02 	mov	r2, #8192	; 0x2000
  11de1c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11de20:	ea000016 	b	11de80 <tcp_recved+0xdc>
  } else if (pcb->rcv_wnd == 0) {
  11de24:	e51b3010 	ldr	r3, [fp, #-16]
  11de28:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11de2c:	e3530000 	cmp	r3, #0
  11de30:	1a000012 	bne	11de80 <tcp_recved+0xdc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11de34:	e51b3010 	ldr	r3, [fp, #-16]
  11de38:	e5933014 	ldr	r3, [r3, #20]
  11de3c:	e3530007 	cmp	r3, #7
  11de40:	0a000003 	beq	11de54 <tcp_recved+0xb0>
  11de44:	e51b3010 	ldr	r3, [fp, #-16]
  11de48:	e5933014 	ldr	r3, [r3, #20]
  11de4c:	e3530009 	cmp	r3, #9
  11de50:	1a000003 	bne	11de64 <tcp_recved+0xc0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11de54:	e51b3010 	ldr	r3, [fp, #-16]
  11de58:	e3a02a02 	mov	r2, #8192	; 0x2000
  11de5c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11de60:	ea000006 	b	11de80 <tcp_recved+0xdc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11de64:	e3070d30 	movw	r0, #32048	; 0x7d30
  11de68:	e3400014 	movt	r0, #20
  11de6c:	ebff94a8 	bl	103114 <rt_kprintf>
  11de70:	e3a01fca 	mov	r1, #808	; 0x328
  11de74:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11de78:	e3400014 	movt	r0, #20
  11de7c:	ebffb3c4 	bl	10ad94 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11de80:	e51b0010 	ldr	r0, [fp, #-16]
  11de84:	ebffff83 	bl	11dc98 <tcp_update_rcv_ann_wnd>
  11de88:	e1a03000 	mov	r3, r0
  11de8c:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11de90:	e51b3008 	ldr	r3, [fp, #-8]
  11de94:	e3530b02 	cmp	r3, #2048	; 0x800
  11de98:	ba000007 	blt	11debc <tcp_recved+0x118>
    tcp_ack_now(pcb);
  11de9c:	e51b3010 	ldr	r3, [fp, #-16]
  11dea0:	e5d3301e 	ldrb	r3, [r3, #30]
  11dea4:	e3833002 	orr	r3, r3, #2
  11dea8:	e6ef2073 	uxtb	r2, r3
  11deac:	e51b3010 	ldr	r3, [fp, #-16]
  11deb0:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11deb4:	e51b0010 	ldr	r0, [fp, #-16]
  11deb8:	eb001f5c 	bl	125c30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11debc:	e320f000 	nop	{0}
  11dec0:	e24bd004 	sub	sp, fp, #4
  11dec4:	e8bd8800 	pop	{fp, pc}

0011dec8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11dec8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11decc:	e28db000 	add	fp, sp, #0
  11ded0:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11ded4:	e3a03000 	mov	r3, #0
  11ded8:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11dedc:	e30d3030 	movw	r3, #53296	; 0xd030
  11dee0:	e3403014 	movt	r3, #20
  11dee4:	e1d320b0 	ldrh	r2, [r3]
  11dee8:	e2823001 	add	r3, r2, #1
  11deec:	e6ff1073 	uxth	r1, r3
  11def0:	e30d3030 	movw	r3, #53296	; 0xd030
  11def4:	e3403014 	movt	r3, #20
  11def8:	e1c310b0 	strh	r1, [r3]
  11defc:	e30f3fff 	movw	r3, #65535	; 0xffff
  11df00:	e1520003 	cmp	r2, r3
  11df04:	1a000003 	bne	11df18 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11df08:	e30d3030 	movw	r3, #53296	; 0xd030
  11df0c:	e3403014 	movt	r3, #20
  11df10:	e3a02903 	mov	r2, #49152	; 0xc000
  11df14:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11df18:	e3a03000 	mov	r3, #0
  11df1c:	e54b3005 	strb	r3, [fp, #-5]
  11df20:	ea00001e 	b	11dfa0 <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11df24:	e55b2005 	ldrb	r2, [fp, #-5]
  11df28:	e3073bf0 	movw	r3, #31728	; 0x7bf0
  11df2c:	e3403014 	movt	r3, #20
  11df30:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11df34:	e5933000 	ldr	r3, [r3]
  11df38:	e50b300c 	str	r3, [fp, #-12]
  11df3c:	ea000011 	b	11df88 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11df40:	e51b300c 	ldr	r3, [fp, #-12]
  11df44:	e1d321ba 	ldrh	r2, [r3, #26]
  11df48:	e30d3030 	movw	r3, #53296	; 0xd030
  11df4c:	e3403014 	movt	r3, #20
  11df50:	e1d330b0 	ldrh	r3, [r3]
  11df54:	e1520003 	cmp	r2, r3
  11df58:	1a000007 	bne	11df7c <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11df5c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11df60:	e2833001 	add	r3, r3, #1
  11df64:	e14b30b8 	strh	r3, [fp, #-8]
  11df68:	e15b30b8 	ldrh	r3, [fp, #-8]
  11df6c:	e3530901 	cmp	r3, #16384	; 0x4000
  11df70:	3affffd9 	bcc	11dedc <tcp_new_port+0x14>
          return 0;
  11df74:	e3a03000 	mov	r3, #0
  11df78:	ea00000e 	b	11dfb8 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11df7c:	e51b300c 	ldr	r3, [fp, #-12]
  11df80:	e593300c 	ldr	r3, [r3, #12]
  11df84:	e50b300c 	str	r3, [fp, #-12]
  11df88:	e51b300c 	ldr	r3, [fp, #-12]
  11df8c:	e3530000 	cmp	r3, #0
  11df90:	1affffea 	bne	11df40 <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11df94:	e55b3005 	ldrb	r3, [fp, #-5]
  11df98:	e2833001 	add	r3, r3, #1
  11df9c:	e54b3005 	strb	r3, [fp, #-5]
  11dfa0:	e55b3005 	ldrb	r3, [fp, #-5]
  11dfa4:	e3530003 	cmp	r3, #3
  11dfa8:	9affffdd 	bls	11df24 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11dfac:	e30d3030 	movw	r3, #53296	; 0xd030
  11dfb0:	e3403014 	movt	r3, #20
  11dfb4:	e1d330b0 	ldrh	r3, [r3]
}
  11dfb8:	e1a00003 	mov	r0, r3
  11dfbc:	e28bd000 	add	sp, fp, #0
  11dfc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11dfc4:	e12fff1e 	bx	lr

0011dfc8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11dfc8:	e92d4800 	push	{fp, lr}
  11dfcc:	e28db004 	add	fp, sp, #4
  11dfd0:	e24dd030 	sub	sp, sp, #48	; 0x30
  11dfd4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11dfd8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11dfdc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11dfe0:	e1a03002 	mov	r3, r2
  11dfe4:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11dfe8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dfec:	e3530000 	cmp	r3, #0
  11dff0:	0a000002 	beq	11e000 <tcp_connect+0x38>
  11dff4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11dff8:	e3530000 	cmp	r3, #0
  11dffc:	1a000001 	bne	11e008 <tcp_connect+0x40>
    return ERR_VAL;
  11e000:	e3e03005 	mvn	r3, #5
  11e004:	ea000101 	b	11e410 <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11e008:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e00c:	e5933014 	ldr	r3, [r3, #20]
  11e010:	e3530000 	cmp	r3, #0
  11e014:	0a000008 	beq	11e03c <tcp_connect+0x74>
  11e018:	e3070d54 	movw	r0, #32084	; 0x7d54
  11e01c:	e3400014 	movt	r0, #20
  11e020:	ebff943b 	bl	103114 <rt_kprintf>
  11e024:	e3001373 	movw	r1, #883	; 0x373
  11e028:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11e02c:	e3400014 	movt	r0, #20
  11e030:	ebffb357 	bl	10ad94 <sys_arch_assert>
  11e034:	e3e03009 	mvn	r3, #9
  11e038:	ea0000f4 	b	11e410 <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11e03c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e040:	e3530000 	cmp	r3, #0
  11e044:	0a000002 	beq	11e054 <tcp_connect+0x8c>
  11e048:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e04c:	e5933000 	ldr	r3, [r3]
  11e050:	ea000000 	b	11e058 <tcp_connect+0x90>
  11e054:	e3a03000 	mov	r3, #0
  11e058:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e05c:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e060:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e064:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e068:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e06c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e070:	e3530000 	cmp	r3, #0
  11e074:	0a000003 	beq	11e088 <tcp_connect+0xc0>
  11e078:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e07c:	e5933000 	ldr	r3, [r3]
  11e080:	e3530000 	cmp	r3, #0
  11e084:	1a000018 	bne	11e0ec <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e088:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e08c:	e2833004 	add	r3, r3, #4
  11e090:	e1a00003 	mov	r0, r3
  11e094:	eb004b73 	bl	130e68 <ip4_route>
  11e098:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e09c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e0a0:	e3530000 	cmp	r3, #0
  11e0a4:	0a000002 	beq	11e0b4 <tcp_connect+0xec>
  11e0a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e0ac:	e2833004 	add	r3, r3, #4
  11e0b0:	ea000000 	b	11e0b8 <tcp_connect+0xf0>
  11e0b4:	e3a03000 	mov	r3, #0
  11e0b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e0bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e0c0:	e3530000 	cmp	r3, #0
  11e0c4:	0a000002 	beq	11e0d4 <tcp_connect+0x10c>
  11e0c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e0cc:	e3530000 	cmp	r3, #0
  11e0d0:	1a000001 	bne	11e0dc <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e0d4:	e3e03003 	mvn	r3, #3
  11e0d8:	ea0000cc 	b	11e410 <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e0dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e0e0:	e5932000 	ldr	r2, [r3]
  11e0e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0e8:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e0ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0f0:	e1d331ba 	ldrh	r3, [r3, #26]
  11e0f4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e0f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0fc:	e1d331ba 	ldrh	r3, [r3, #26]
  11e100:	e3530000 	cmp	r3, #0
  11e104:	1a00000a 	bne	11e134 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e108:	ebffff6e 	bl	11dec8 <tcp_new_port>
  11e10c:	e1a03000 	mov	r3, r0
  11e110:	e1a02003 	mov	r2, r3
  11e114:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e118:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e11c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e120:	e1d331ba 	ldrh	r3, [r3, #26]
  11e124:	e3530000 	cmp	r3, #0
  11e128:	1a000035 	bne	11e204 <tcp_connect+0x23c>
      return ERR_BUF;
  11e12c:	e3e03001 	mvn	r3, #1
  11e130:	ea0000b6 	b	11e410 <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e134:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e138:	e5d33008 	ldrb	r3, [r3, #8]
  11e13c:	e2033004 	and	r3, r3, #4
  11e140:	e3530000 	cmp	r3, #0
  11e144:	0a00002e 	beq	11e204 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e148:	e3a03002 	mov	r3, #2
  11e14c:	e50b300c 	str	r3, [fp, #-12]
  11e150:	ea000028 	b	11e1f8 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e154:	e3073bf0 	movw	r3, #31728	; 0x7bf0
  11e158:	e3403014 	movt	r3, #20
  11e15c:	e51b200c 	ldr	r2, [fp, #-12]
  11e160:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e164:	e5933000 	ldr	r3, [r3]
  11e168:	e50b3008 	str	r3, [fp, #-8]
  11e16c:	ea00001b 	b	11e1e0 <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e170:	e51b3008 	ldr	r3, [fp, #-8]
  11e174:	e1d321ba 	ldrh	r2, [r3, #26]
  11e178:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e17c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e180:	e1520003 	cmp	r2, r3
  11e184:	1a000012 	bne	11e1d4 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e188:	e51b3008 	ldr	r3, [fp, #-8]
  11e18c:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e190:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e194:	e1520003 	cmp	r2, r3
  11e198:	1a00000d 	bne	11e1d4 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e19c:	e51b3008 	ldr	r3, [fp, #-8]
  11e1a0:	e5932000 	ldr	r2, [r3]
  11e1a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1a8:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e1ac:	e1520003 	cmp	r2, r3
  11e1b0:	1a000007 	bne	11e1d4 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e1b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e1b8:	e5932004 	ldr	r2, [r3, #4]
  11e1bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e1c0:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e1c4:	e1520003 	cmp	r2, r3
  11e1c8:	1a000001 	bne	11e1d4 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e1cc:	e3e03007 	mvn	r3, #7
  11e1d0:	ea00008e 	b	11e410 <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e1d4:	e51b3008 	ldr	r3, [fp, #-8]
  11e1d8:	e593300c 	ldr	r3, [r3, #12]
  11e1dc:	e50b3008 	str	r3, [fp, #-8]
  11e1e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e1e4:	e3530000 	cmp	r3, #0
  11e1e8:	1affffe0 	bne	11e170 <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e1ec:	e51b300c 	ldr	r3, [fp, #-12]
  11e1f0:	e2833001 	add	r3, r3, #1
  11e1f4:	e50b300c 	str	r3, [fp, #-12]
  11e1f8:	e51b300c 	ldr	r3, [fp, #-12]
  11e1fc:	e3530003 	cmp	r3, #3
  11e200:	daffffd3 	ble	11e154 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e204:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e208:	eb0006bc 	bl	11fd00 <tcp_next_iss>
  11e20c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e210:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e214:	e3a02000 	mov	r2, #0
  11e218:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e21c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e220:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e224:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e228:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e22c:	e2432001 	sub	r2, r3, #1
  11e230:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e234:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e238:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e23c:	e2432001 	sub	r2, r3, #1
  11e240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e244:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e248:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e24c:	e2432001 	sub	r2, r3, #1
  11e250:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e254:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e258:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e25c:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e260:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e264:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e268:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e26c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e270:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e274:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e278:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e27c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e280:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e284:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e288:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e28c:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e290:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e294:	e3a02f86 	mov	r2, #536	; 0x218
  11e298:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e29c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2a0:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e2a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2a8:	e2833004 	add	r3, r3, #4
  11e2ac:	e1a01003 	mov	r1, r3
  11e2b0:	e1a00002 	mov	r0, r2
  11e2b4:	eb0006a6 	bl	11fd54 <tcp_eff_send_mss_impl>
  11e2b8:	e1a03000 	mov	r3, r0
  11e2bc:	e1a02003 	mov	r2, r3
  11e2c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2c4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e2c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2cc:	e3a02001 	mov	r2, #1
  11e2d0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e2d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2d8:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e2dc:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e2e0:	e3a01002 	mov	r1, #2
  11e2e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e2e8:	eb001d01 	bl	1256f4 <tcp_enqueue_flags>
  11e2ec:	e1a03000 	mov	r3, r0
  11e2f0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e2f4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e2f8:	e3530000 	cmp	r3, #0
  11e2fc:	1a000042 	bne	11e40c <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e300:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e304:	e3a02002 	mov	r2, #2
  11e308:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e30c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e310:	e3530000 	cmp	r3, #0
  11e314:	0a000025 	beq	11e3b0 <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e318:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e31c:	e3403015 	movt	r3, #21
  11e320:	e5933000 	ldr	r3, [r3]
  11e324:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e328:	e1520003 	cmp	r2, r3
  11e32c:	1a000007 	bne	11e350 <tcp_connect+0x388>
  11e330:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e334:	e3403015 	movt	r3, #21
  11e338:	e5933000 	ldr	r3, [r3]
  11e33c:	e593200c 	ldr	r2, [r3, #12]
  11e340:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e344:	e3403015 	movt	r3, #21
  11e348:	e5832000 	str	r2, [r3]
  11e34c:	ea000014 	b	11e3a4 <tcp_connect+0x3dc>
  11e350:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e354:	e3403015 	movt	r3, #21
  11e358:	e5933000 	ldr	r3, [r3]
  11e35c:	e50b3010 	str	r3, [fp, #-16]
  11e360:	ea00000c 	b	11e398 <tcp_connect+0x3d0>
  11e364:	e51b3010 	ldr	r3, [fp, #-16]
  11e368:	e593300c 	ldr	r3, [r3, #12]
  11e36c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e370:	e1520003 	cmp	r2, r3
  11e374:	1a000004 	bne	11e38c <tcp_connect+0x3c4>
  11e378:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e37c:	e593200c 	ldr	r2, [r3, #12]
  11e380:	e51b3010 	ldr	r3, [fp, #-16]
  11e384:	e583200c 	str	r2, [r3, #12]
  11e388:	ea000005 	b	11e3a4 <tcp_connect+0x3dc>
  11e38c:	e51b3010 	ldr	r3, [fp, #-16]
  11e390:	e593300c 	ldr	r3, [r3, #12]
  11e394:	e50b3010 	str	r3, [fp, #-16]
  11e398:	e51b3010 	ldr	r3, [fp, #-16]
  11e39c:	e3530000 	cmp	r3, #0
  11e3a0:	1affffef 	bne	11e364 <tcp_connect+0x39c>
  11e3a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3a8:	e3a02000 	mov	r2, #0
  11e3ac:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e3b0:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11e3b4:	e3403015 	movt	r3, #21
  11e3b8:	e5932000 	ldr	r2, [r3]
  11e3bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3c0:	e583200c 	str	r2, [r3, #12]
  11e3c4:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11e3c8:	e3403015 	movt	r3, #21
  11e3cc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e3d0:	e5832000 	str	r2, [r3]
  11e3d4:	eb0022cf 	bl	126f18 <tcp_timer_needed>
  11e3d8:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11e3dc:	e3403015 	movt	r3, #21
  11e3e0:	e3a02001 	mov	r2, #1
  11e3e4:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e3e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  11e3ec:	e3403015 	movt	r3, #21
  11e3f0:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e3f4:	e2832001 	add	r2, r3, #1
  11e3f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  11e3fc:	e3403015 	movt	r3, #21
  11e400:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e404:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e408:	eb001e08 	bl	125c30 <tcp_output>
  }
  return ret;
  11e40c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e410:	e1a00003 	mov	r0, r3
  11e414:	e24bd004 	sub	sp, fp, #4
  11e418:	e8bd8800 	pop	{fp, pc}

0011e41c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e41c:	e92d4800 	push	{fp, lr}
  11e420:	e28db004 	add	fp, sp, #4
  11e424:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e428:	e3a03000 	mov	r3, #0
  11e42c:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e430:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e434:	e3403015 	movt	r3, #21
  11e438:	e5933000 	ldr	r3, [r3]
  11e43c:	e2832001 	add	r2, r3, #1
  11e440:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e444:	e3403015 	movt	r3, #21
  11e448:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e44c:	e30e3215 	movw	r3, #57877	; 0xe215
  11e450:	e3403014 	movt	r3, #20
  11e454:	e5d33000 	ldrb	r3, [r3]
  11e458:	e2833001 	add	r3, r3, #1
  11e45c:	e6ef2073 	uxtb	r2, r3
  11e460:	e30e3215 	movw	r3, #57877	; 0xe215
  11e464:	e3403014 	movt	r3, #20
  11e468:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e46c:	e3a03000 	mov	r3, #0
  11e470:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e474:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11e478:	e3403015 	movt	r3, #21
  11e47c:	e5933000 	ldr	r3, [r3]
  11e480:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e484:	ea0001f2 	b	11ec54 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e488:	e51b3008 	ldr	r3, [fp, #-8]
  11e48c:	e5933014 	ldr	r3, [r3, #20]
  11e490:	e3530000 	cmp	r3, #0
  11e494:	1a000006 	bne	11e4b4 <tcp_slowtmr+0x98>
  11e498:	e3070d84 	movw	r0, #32132	; 0x7d84
  11e49c:	e3400014 	movt	r0, #20
  11e4a0:	ebff931b 	bl	103114 <rt_kprintf>
  11e4a4:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e4a8:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11e4ac:	e3400014 	movt	r0, #20
  11e4b0:	ebffb237 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e4b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e4b8:	e5933014 	ldr	r3, [r3, #20]
  11e4bc:	e3530001 	cmp	r3, #1
  11e4c0:	1a000006 	bne	11e4e0 <tcp_slowtmr+0xc4>
  11e4c4:	e3070db0 	movw	r0, #32176	; 0x7db0
  11e4c8:	e3400014 	movt	r0, #20
  11e4cc:	ebff9310 	bl	103114 <rt_kprintf>
  11e4d0:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e4d4:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11e4d8:	e3400014 	movt	r0, #20
  11e4dc:	ebffb22c 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e4e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4e4:	e5933014 	ldr	r3, [r3, #20]
  11e4e8:	e353000a 	cmp	r3, #10
  11e4ec:	1a000006 	bne	11e50c <tcp_slowtmr+0xf0>
  11e4f0:	e3070ddc 	movw	r0, #32220	; 0x7ddc
  11e4f4:	e3400014 	movt	r0, #20
  11e4f8:	ebff9305 	bl	103114 <rt_kprintf>
  11e4fc:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e500:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11e504:	e3400014 	movt	r0, #20
  11e508:	ebffb221 	bl	10ad94 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e50c:	e51b3008 	ldr	r3, [fp, #-8]
  11e510:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e514:	e30e3215 	movw	r3, #57877	; 0xe215
  11e518:	e3403014 	movt	r3, #20
  11e51c:	e5d33000 	ldrb	r3, [r3]
  11e520:	e1520003 	cmp	r2, r3
  11e524:	1a000003 	bne	11e538 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e528:	e51b3008 	ldr	r3, [fp, #-8]
  11e52c:	e593300c 	ldr	r3, [r3, #12]
  11e530:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e534:	ea0001c6 	b	11ec54 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e538:	e30e3215 	movw	r3, #57877	; 0xe215
  11e53c:	e3403014 	movt	r3, #20
  11e540:	e5d32000 	ldrb	r2, [r3]
  11e544:	e51b3008 	ldr	r3, [fp, #-8]
  11e548:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e54c:	e3a03000 	mov	r3, #0
  11e550:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e554:	e3a03000 	mov	r3, #0
  11e558:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e55c:	e51b3008 	ldr	r3, [fp, #-8]
  11e560:	e5933014 	ldr	r3, [r3, #20]
  11e564:	e3530002 	cmp	r3, #2
  11e568:	1a000007 	bne	11e58c <tcp_slowtmr+0x170>
  11e56c:	e51b3008 	ldr	r3, [fp, #-8]
  11e570:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e574:	e3530003 	cmp	r3, #3
  11e578:	9a000003 	bls	11e58c <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e57c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e580:	e2833001 	add	r3, r3, #1
  11e584:	e54b300d 	strb	r3, [fp, #-13]
  11e588:	ea000089 	b	11e7b4 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e58c:	e51b3008 	ldr	r3, [fp, #-8]
  11e590:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e594:	e353000b 	cmp	r3, #11
  11e598:	9a000003 	bls	11e5ac <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e59c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e5a0:	e2833001 	add	r3, r3, #1
  11e5a4:	e54b300d 	strb	r3, [fp, #-13]
  11e5a8:	ea000081 	b	11e7b4 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e5ac:	e51b3008 	ldr	r3, [fp, #-8]
  11e5b0:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e5b4:	e3530000 	cmp	r3, #0
  11e5b8:	0a000029 	beq	11e664 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e5bc:	e51b3008 	ldr	r3, [fp, #-8]
  11e5c0:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e5c4:	e2432001 	sub	r2, r3, #1
  11e5c8:	e3073be8 	movw	r3, #31720	; 0x7be8
  11e5cc:	e3403014 	movt	r3, #20
  11e5d0:	e7d33002 	ldrb	r3, [r3, r2]
  11e5d4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e5d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e5dc:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e5e0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e5e4:	e1520003 	cmp	r2, r3
  11e5e8:	9a000005 	bls	11e604 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e5ec:	e51b3008 	ldr	r3, [fp, #-8]
  11e5f0:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e5f4:	e2833001 	add	r3, r3, #1
  11e5f8:	e6ef2073 	uxtb	r2, r3
  11e5fc:	e51b3008 	ldr	r3, [fp, #-8]
  11e600:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e604:	e51b3008 	ldr	r3, [fp, #-8]
  11e608:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e60c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e610:	e1520003 	cmp	r2, r3
  11e614:	8a000066 	bhi	11e7b4 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e618:	e51b0008 	ldr	r0, [fp, #-8]
  11e61c:	eb00217f 	bl	126c20 <tcp_zero_window_probe>
  11e620:	e1a03000 	mov	r3, r0
  11e624:	e3530000 	cmp	r3, #0
  11e628:	1a000061 	bne	11e7b4 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e62c:	e51b3008 	ldr	r3, [fp, #-8]
  11e630:	e3a02000 	mov	r2, #0
  11e634:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e638:	e51b3008 	ldr	r3, [fp, #-8]
  11e63c:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e640:	e3530006 	cmp	r3, #6
  11e644:	8a00005a 	bhi	11e7b4 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e648:	e51b3008 	ldr	r3, [fp, #-8]
  11e64c:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e650:	e2833001 	add	r3, r3, #1
  11e654:	e6ef2073 	uxtb	r2, r3
  11e658:	e51b3008 	ldr	r3, [fp, #-8]
  11e65c:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e660:	ea000053 	b	11e7b4 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e664:	e51b3008 	ldr	r3, [fp, #-8]
  11e668:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e66c:	e3530000 	cmp	r3, #0
  11e670:	ba000007 	blt	11e694 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e674:	e51b3008 	ldr	r3, [fp, #-8]
  11e678:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e67c:	e6ff3073 	uxth	r3, r3
  11e680:	e2833001 	add	r3, r3, #1
  11e684:	e6ff3073 	uxth	r3, r3
  11e688:	e6bf2073 	sxth	r2, r3
  11e68c:	e51b3008 	ldr	r3, [fp, #-8]
  11e690:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e694:	e51b3008 	ldr	r3, [fp, #-8]
  11e698:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e69c:	e3530000 	cmp	r3, #0
  11e6a0:	0a000043 	beq	11e7b4 <tcp_slowtmr+0x398>
  11e6a4:	e51b3008 	ldr	r3, [fp, #-8]
  11e6a8:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e6ac:	e51b3008 	ldr	r3, [fp, #-8]
  11e6b0:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e6b4:	e1520003 	cmp	r2, r3
  11e6b8:	ba00003d 	blt	11e7b4 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e6bc:	e51b3008 	ldr	r3, [fp, #-8]
  11e6c0:	e5933014 	ldr	r3, [r3, #20]
  11e6c4:	e3530002 	cmp	r3, #2
  11e6c8:	0a000015 	beq	11e724 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e6cc:	e51b3008 	ldr	r3, [fp, #-8]
  11e6d0:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e6d4:	e353000c 	cmp	r3, #12
  11e6d8:	31a03003 	movcc	r3, r3
  11e6dc:	23a0300c 	movcs	r3, #12
  11e6e0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11e6e4:	e51b3008 	ldr	r3, [fp, #-8]
  11e6e8:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11e6ec:	e1a031c3 	asr	r3, r3, #3
  11e6f0:	e6bf3073 	sxth	r3, r3
  11e6f4:	e1a02003 	mov	r2, r3
  11e6f8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6fc:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11e700:	e0822003 	add	r2, r2, r3
  11e704:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11e708:	e3073bd8 	movw	r3, #31704	; 0x7bd8
  11e70c:	e3403014 	movt	r3, #20
  11e710:	e7d33001 	ldrb	r3, [r3, r1]
  11e714:	e1a03312 	lsl	r3, r2, r3
  11e718:	e6bf2073 	sxth	r2, r3
  11e71c:	e51b3008 	ldr	r3, [fp, #-8]
  11e720:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11e724:	e51b3008 	ldr	r3, [fp, #-8]
  11e728:	e3a02000 	mov	r2, #0
  11e72c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11e730:	e51b3008 	ldr	r3, [fp, #-8]
  11e734:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11e738:	e51b3008 	ldr	r3, [fp, #-8]
  11e73c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11e740:	e1520003 	cmp	r2, r3
  11e744:	31a03002 	movcc	r3, r2
  11e748:	21a03003 	movcs	r3, r3
  11e74c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11e750:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11e754:	e1a030a3 	lsr	r3, r3, #1
  11e758:	e6ff2073 	uxth	r2, r3
  11e75c:	e51b3008 	ldr	r3, [fp, #-8]
  11e760:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11e764:	e51b3008 	ldr	r3, [fp, #-8]
  11e768:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11e76c:	e51b3008 	ldr	r3, [fp, #-8]
  11e770:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e774:	e1a03083 	lsl	r3, r3, #1
  11e778:	e6ff3073 	uxth	r3, r3
  11e77c:	e1520003 	cmp	r2, r3
  11e780:	2a000005 	bcs	11e79c <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11e784:	e51b3008 	ldr	r3, [fp, #-8]
  11e788:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e78c:	e1a03083 	lsl	r3, r3, #1
  11e790:	e6ff2073 	uxth	r2, r3
  11e794:	e51b3008 	ldr	r3, [fp, #-8]
  11e798:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11e79c:	e51b3008 	ldr	r3, [fp, #-8]
  11e7a0:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e7a4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7a8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11e7ac:	e51b0008 	ldr	r0, [fp, #-8]
  11e7b0:	eb002001 	bl	1267bc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11e7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7b8:	e5933014 	ldr	r3, [r3, #20]
  11e7bc:	e3530006 	cmp	r3, #6
  11e7c0:	1a00000f 	bne	11e804 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11e7c4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7c8:	e5d3301e 	ldrb	r3, [r3, #30]
  11e7cc:	e2033010 	and	r3, r3, #16
  11e7d0:	e3530000 	cmp	r3, #0
  11e7d4:	0a00000a 	beq	11e804 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e7d8:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e7dc:	e3403015 	movt	r3, #21
  11e7e0:	e5932000 	ldr	r2, [r3]
  11e7e4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7e8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e7ec:	e0423003 	sub	r3, r2, r3
  11e7f0:	e3530028 	cmp	r3, #40	; 0x28
  11e7f4:	9a000002 	bls	11e804 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11e7f8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e7fc:	e2833001 	add	r3, r3, #1
  11e800:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e804:	e51b3008 	ldr	r3, [fp, #-8]
  11e808:	e5d33008 	ldrb	r3, [r3, #8]
  11e80c:	e2033008 	and	r3, r3, #8
  11e810:	e3530000 	cmp	r3, #0
  11e814:	0a000044 	beq	11e92c <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11e818:	e51b3008 	ldr	r3, [fp, #-8]
  11e81c:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e820:	e3530004 	cmp	r3, #4
  11e824:	0a000003 	beq	11e838 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11e828:	e51b3008 	ldr	r3, [fp, #-8]
  11e82c:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11e830:	e3530007 	cmp	r3, #7
  11e834:	1a00003c 	bne	11e92c <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e838:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e83c:	e3403015 	movt	r3, #21
  11e840:	e5932000 	ldr	r2, [r3]
  11e844:	e51b3008 	ldr	r3, [fp, #-8]
  11e848:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e84c:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11e850:	e51b3008 	ldr	r3, [fp, #-8]
  11e854:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e858:	e51b3008 	ldr	r3, [fp, #-8]
  11e85c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11e860:	e51b0008 	ldr	r0, [fp, #-8]
  11e864:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11e868:	e0030390 	mul	r3, r0, r3
  11e86c:	e0822003 	add	r2, r2, r3
  11e870:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e874:	e3413062 	movt	r3, #4194	; 0x1062
  11e878:	e0832392 	umull	r2, r3, r2, r3
  11e87c:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e880:	e1510003 	cmp	r1, r3
  11e884:	9a000006 	bls	11e8a4 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11e888:	e55b300d 	ldrb	r3, [fp, #-13]
  11e88c:	e2833001 	add	r3, r3, #1
  11e890:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11e894:	e55b300e 	ldrb	r3, [fp, #-14]
  11e898:	e2833001 	add	r3, r3, #1
  11e89c:	e54b300e 	strb	r3, [fp, #-14]
  11e8a0:	ea000021 	b	11e92c <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e8a4:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e8a8:	e3403015 	movt	r3, #21
  11e8ac:	e5932000 	ldr	r2, [r3]
  11e8b0:	e51b3008 	ldr	r3, [fp, #-8]
  11e8b4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e8b8:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11e8bc:	e51b3008 	ldr	r3, [fp, #-8]
  11e8c0:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e8c4:	e51b3008 	ldr	r3, [fp, #-8]
  11e8c8:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e8cc:	e1a00003 	mov	r0, r3
  11e8d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e8d4:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11e8d8:	e0030093 	mul	r3, r3, r0
  11e8dc:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11e8e0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e8e4:	e3413062 	movt	r3, #4194	; 0x1062
  11e8e8:	e0832392 	umull	r2, r3, r2, r3
  11e8ec:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e8f0:	e1510003 	cmp	r1, r3
  11e8f4:	9a00000c 	bls	11e92c <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11e8f8:	e51b0008 	ldr	r0, [fp, #-8]
  11e8fc:	eb002079 	bl	126ae8 <tcp_keepalive>
  11e900:	e1a03000 	mov	r3, r0
  11e904:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11e908:	e15b30df 	ldrsb	r3, [fp, #-15]
  11e90c:	e3530000 	cmp	r3, #0
  11e910:	1a000005 	bne	11e92c <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11e914:	e51b3008 	ldr	r3, [fp, #-8]
  11e918:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e91c:	e2833001 	add	r3, r3, #1
  11e920:	e6ef2073 	uxtb	r2, r3
  11e924:	e51b3008 	ldr	r3, [fp, #-8]
  11e928:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11e92c:	e51b3008 	ldr	r3, [fp, #-8]
  11e930:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e934:	e3530000 	cmp	r3, #0
  11e938:	0a000013 	beq	11e98c <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11e93c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e940:	e3403015 	movt	r3, #21
  11e944:	e5932000 	ldr	r2, [r3]
  11e948:	e51b3008 	ldr	r3, [fp, #-8]
  11e94c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e950:	e0422003 	sub	r2, r2, r3
  11e954:	e51b3008 	ldr	r3, [fp, #-8]
  11e958:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e95c:	e1a01003 	mov	r1, r3
  11e960:	e3a03006 	mov	r3, #6
  11e964:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11e968:	e1520003 	cmp	r2, r3
  11e96c:	3a000006 	bcc	11e98c <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11e970:	e51b3008 	ldr	r3, [fp, #-8]
  11e974:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e978:	e1a00003 	mov	r0, r3
  11e97c:	eb0001e2 	bl	11f10c <tcp_segs_free>
      pcb->ooseq = NULL;
  11e980:	e51b3008 	ldr	r3, [fp, #-8]
  11e984:	e3a02000 	mov	r2, #0
  11e988:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11e98c:	e51b3008 	ldr	r3, [fp, #-8]
  11e990:	e5933014 	ldr	r3, [r3, #20]
  11e994:	e3530003 	cmp	r3, #3
  11e998:	1a00000a 	bne	11e9c8 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e99c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e9a0:	e3403015 	movt	r3, #21
  11e9a4:	e5932000 	ldr	r2, [r3]
  11e9a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9ac:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e9b0:	e0423003 	sub	r3, r2, r3
  11e9b4:	e3530028 	cmp	r3, #40	; 0x28
  11e9b8:	9a000002 	bls	11e9c8 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11e9bc:	e55b300d 	ldrb	r3, [fp, #-13]
  11e9c0:	e2833001 	add	r3, r3, #1
  11e9c4:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11e9c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9cc:	e5933014 	ldr	r3, [r3, #20]
  11e9d0:	e3530009 	cmp	r3, #9
  11e9d4:	1a00000a 	bne	11ea04 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11e9d8:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e9dc:	e3403015 	movt	r3, #21
  11e9e0:	e5932000 	ldr	r2, [r3]
  11e9e4:	e51b3008 	ldr	r3, [fp, #-8]
  11e9e8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e9ec:	e0423003 	sub	r3, r2, r3
  11e9f0:	e35300f0 	cmp	r3, #240	; 0xf0
  11e9f4:	9a000002 	bls	11ea04 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11e9f8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e9fc:	e2833001 	add	r3, r3, #1
  11ea00:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ea04:	e55b300d 	ldrb	r3, [fp, #-13]
  11ea08:	e3530000 	cmp	r3, #0
  11ea0c:	0a00005d 	beq	11eb88 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11ea10:	e51b3008 	ldr	r3, [fp, #-8]
  11ea14:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11ea18:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11ea1c:	e51b0008 	ldr	r0, [fp, #-8]
  11ea20:	eb000410 	bl	11fa68 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11ea24:	e51b300c 	ldr	r3, [fp, #-12]
  11ea28:	e3530000 	cmp	r3, #0
  11ea2c:	0a000011 	beq	11ea78 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11ea30:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ea34:	e3403015 	movt	r3, #21
  11ea38:	e5933000 	ldr	r3, [r3]
  11ea3c:	e51b2008 	ldr	r2, [fp, #-8]
  11ea40:	e1520003 	cmp	r2, r3
  11ea44:	1a000006 	bne	11ea64 <tcp_slowtmr+0x648>
  11ea48:	e3070e0c 	movw	r0, #32268	; 0x7e0c
  11ea4c:	e3400014 	movt	r0, #20
  11ea50:	ebff91af 	bl	103114 <rt_kprintf>
  11ea54:	e3001484 	movw	r1, #1156	; 0x484
  11ea58:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11ea5c:	e3400014 	movt	r0, #20
  11ea60:	ebffb0cb 	bl	10ad94 <sys_arch_assert>
        prev->next = pcb->next;
  11ea64:	e51b3008 	ldr	r3, [fp, #-8]
  11ea68:	e593200c 	ldr	r2, [r3, #12]
  11ea6c:	e51b300c 	ldr	r3, [fp, #-12]
  11ea70:	e583200c 	str	r2, [r3, #12]
  11ea74:	ea000011 	b	11eac0 <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11ea78:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ea7c:	e3403015 	movt	r3, #21
  11ea80:	e5933000 	ldr	r3, [r3]
  11ea84:	e51b2008 	ldr	r2, [fp, #-8]
  11ea88:	e1520003 	cmp	r2, r3
  11ea8c:	0a000006 	beq	11eaac <tcp_slowtmr+0x690>
  11ea90:	e3070e38 	movw	r0, #32312	; 0x7e38
  11ea94:	e3400014 	movt	r0, #20
  11ea98:	ebff919d 	bl	103114 <rt_kprintf>
  11ea9c:	e3001488 	movw	r1, #1160	; 0x488
  11eaa0:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11eaa4:	e3400014 	movt	r0, #20
  11eaa8:	ebffb0b9 	bl	10ad94 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11eaac:	e51b3008 	ldr	r3, [fp, #-8]
  11eab0:	e593200c 	ldr	r2, [r3, #12]
  11eab4:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11eab8:	e3403015 	movt	r3, #21
  11eabc:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11eac0:	e55b300e 	ldrb	r3, [fp, #-14]
  11eac4:	e3530000 	cmp	r3, #0
  11eac8:	0a00000f 	beq	11eb0c <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11eacc:	e51b3008 	ldr	r3, [fp, #-8]
  11ead0:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ead4:	e51b3008 	ldr	r3, [fp, #-8]
  11ead8:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11eadc:	e51bc008 	ldr	ip, [fp, #-8]
  11eae0:	e51b3008 	ldr	r3, [fp, #-8]
  11eae4:	e283e004 	add	lr, r3, #4
  11eae8:	e51b3008 	ldr	r3, [fp, #-8]
  11eaec:	e1d331ba 	ldrh	r3, [r3, #26]
  11eaf0:	e51b2008 	ldr	r2, [fp, #-8]
  11eaf4:	e1d221bc 	ldrh	r2, [r2, #28]
  11eaf8:	e58d2004 	str	r2, [sp, #4]
  11eafc:	e58d3000 	str	r3, [sp]
  11eb00:	e1a0300e 	mov	r3, lr
  11eb04:	e1a0200c 	mov	r2, ip
  11eb08:	eb001eae 	bl	1265c8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11eb0c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb10:	e5933010 	ldr	r3, [r3, #16]
  11eb14:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11eb18:	e51b3008 	ldr	r3, [fp, #-8]
  11eb1c:	e5933014 	ldr	r3, [r3, #20]
  11eb20:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11eb24:	e51b3008 	ldr	r3, [fp, #-8]
  11eb28:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11eb2c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb30:	e593300c 	ldr	r3, [r3, #12]
  11eb34:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11eb38:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11eb3c:	e3a00002 	mov	r0, #2
  11eb40:	ebffe901 	bl	118f4c <memp_free>

      tcp_active_pcbs_changed = 0;
  11eb44:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11eb48:	e3403015 	movt	r3, #21
  11eb4c:	e3a02000 	mov	r2, #0
  11eb50:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11eb54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11eb58:	e3530000 	cmp	r3, #0
  11eb5c:	0a000003 	beq	11eb70 <tcp_slowtmr+0x754>
  11eb60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11eb64:	e3e0100c 	mvn	r1, #12
  11eb68:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11eb6c:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11eb70:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11eb74:	e3403015 	movt	r3, #21
  11eb78:	e5d33000 	ldrb	r3, [r3]
  11eb7c:	e3530000 	cmp	r3, #0
  11eb80:	0a000033 	beq	11ec54 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11eb84:	eafffe38 	b	11e46c <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11eb88:	e51b3008 	ldr	r3, [fp, #-8]
  11eb8c:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11eb90:	e51b3008 	ldr	r3, [fp, #-8]
  11eb94:	e593300c 	ldr	r3, [r3, #12]
  11eb98:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11eb9c:	e51b300c 	ldr	r3, [fp, #-12]
  11eba0:	e5d3301f 	ldrb	r3, [r3, #31]
  11eba4:	e2833001 	add	r3, r3, #1
  11eba8:	e6ef2073 	uxtb	r2, r3
  11ebac:	e51b300c 	ldr	r3, [fp, #-12]
  11ebb0:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11ebb4:	e51b300c 	ldr	r3, [fp, #-12]
  11ebb8:	e5d3201f 	ldrb	r2, [r3, #31]
  11ebbc:	e51b300c 	ldr	r3, [fp, #-12]
  11ebc0:	e5d33020 	ldrb	r3, [r3, #32]
  11ebc4:	e1520003 	cmp	r2, r3
  11ebc8:	3a000021 	bcc	11ec54 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11ebcc:	e51b300c 	ldr	r3, [fp, #-12]
  11ebd0:	e3a02000 	mov	r2, #0
  11ebd4:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11ebd8:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11ebdc:	e3403015 	movt	r3, #21
  11ebe0:	e3a02000 	mov	r2, #0
  11ebe4:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11ebe8:	e51b300c 	ldr	r3, [fp, #-12]
  11ebec:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ebf0:	e3530000 	cmp	r3, #0
  11ebf4:	0a000009 	beq	11ec20 <tcp_slowtmr+0x804>
  11ebf8:	e51b300c 	ldr	r3, [fp, #-12]
  11ebfc:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ec00:	e51b200c 	ldr	r2, [fp, #-12]
  11ec04:	e5922010 	ldr	r2, [r2, #16]
  11ec08:	e51b100c 	ldr	r1, [fp, #-12]
  11ec0c:	e1a00002 	mov	r0, r2
  11ec10:	e12fff33 	blx	r3
  11ec14:	e1a03000 	mov	r3, r0
  11ec18:	e54b300f 	strb	r3, [fp, #-15]
  11ec1c:	ea000001 	b	11ec28 <tcp_slowtmr+0x80c>
  11ec20:	e3a03000 	mov	r3, #0
  11ec24:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ec28:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11ec2c:	e3403015 	movt	r3, #21
  11ec30:	e5d33000 	ldrb	r3, [r3]
  11ec34:	e3530000 	cmp	r3, #0
  11ec38:	0a000000 	beq	11ec40 <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ec3c:	eafffe0a 	b	11e46c <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ec40:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ec44:	e3530000 	cmp	r3, #0
  11ec48:	1a000001 	bne	11ec54 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ec4c:	e51b000c 	ldr	r0, [fp, #-12]
  11ec50:	eb001bf6 	bl	125c30 <tcp_output>
  while (pcb != NULL) {
  11ec54:	e51b3008 	ldr	r3, [fp, #-8]
  11ec58:	e3530000 	cmp	r3, #0
  11ec5c:	1afffe09 	bne	11e488 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ec60:	e3a03000 	mov	r3, #0
  11ec64:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ec68:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ec6c:	e3403015 	movt	r3, #21
  11ec70:	e5933000 	ldr	r3, [r3]
  11ec74:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ec78:	ea000051 	b	11edc4 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11ec7c:	e51b3008 	ldr	r3, [fp, #-8]
  11ec80:	e5933014 	ldr	r3, [r3, #20]
  11ec84:	e353000a 	cmp	r3, #10
  11ec88:	0a000006 	beq	11eca8 <tcp_slowtmr+0x88c>
  11ec8c:	e3070e64 	movw	r0, #32356	; 0x7e64
  11ec90:	e3400014 	movt	r0, #20
  11ec94:	ebff911e 	bl	103114 <rt_kprintf>
  11ec98:	e30014b8 	movw	r1, #1208	; 0x4b8
  11ec9c:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11eca0:	e3400014 	movt	r0, #20
  11eca4:	ebffb03a 	bl	10ad94 <sys_arch_assert>
    pcb_remove = 0;
  11eca8:	e3a03000 	mov	r3, #0
  11ecac:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ecb0:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11ecb4:	e3403015 	movt	r3, #21
  11ecb8:	e5932000 	ldr	r2, [r3]
  11ecbc:	e51b3008 	ldr	r3, [fp, #-8]
  11ecc0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ecc4:	e0423003 	sub	r3, r2, r3
  11ecc8:	e35300f0 	cmp	r3, #240	; 0xf0
  11eccc:	9a000002 	bls	11ecdc <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11ecd0:	e55b300d 	ldrb	r3, [fp, #-13]
  11ecd4:	e2833001 	add	r3, r3, #1
  11ecd8:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ecdc:	e55b300d 	ldrb	r3, [fp, #-13]
  11ece0:	e3530000 	cmp	r3, #0
  11ece4:	0a000031 	beq	11edb0 <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11ece8:	e51b0008 	ldr	r0, [fp, #-8]
  11ecec:	eb00035d 	bl	11fa68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11ecf0:	e51b300c 	ldr	r3, [fp, #-12]
  11ecf4:	e3530000 	cmp	r3, #0
  11ecf8:	0a000011 	beq	11ed44 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11ecfc:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ed00:	e3403015 	movt	r3, #21
  11ed04:	e5933000 	ldr	r3, [r3]
  11ed08:	e51b2008 	ldr	r2, [fp, #-8]
  11ed0c:	e1520003 	cmp	r2, r3
  11ed10:	1a000006 	bne	11ed30 <tcp_slowtmr+0x914>
  11ed14:	e3070e94 	movw	r0, #32404	; 0x7e94
  11ed18:	e3400014 	movt	r0, #20
  11ed1c:	ebff90fc 	bl	103114 <rt_kprintf>
  11ed20:	e30014c6 	movw	r1, #1222	; 0x4c6
  11ed24:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11ed28:	e3400014 	movt	r0, #20
  11ed2c:	ebffb018 	bl	10ad94 <sys_arch_assert>
        prev->next = pcb->next;
  11ed30:	e51b3008 	ldr	r3, [fp, #-8]
  11ed34:	e593200c 	ldr	r2, [r3, #12]
  11ed38:	e51b300c 	ldr	r3, [fp, #-12]
  11ed3c:	e583200c 	str	r2, [r3, #12]
  11ed40:	ea000011 	b	11ed8c <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11ed44:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ed48:	e3403015 	movt	r3, #21
  11ed4c:	e5933000 	ldr	r3, [r3]
  11ed50:	e51b2008 	ldr	r2, [fp, #-8]
  11ed54:	e1520003 	cmp	r2, r3
  11ed58:	0a000006 	beq	11ed78 <tcp_slowtmr+0x95c>
  11ed5c:	e3070ebc 	movw	r0, #32444	; 0x7ebc
  11ed60:	e3400014 	movt	r0, #20
  11ed64:	ebff90ea 	bl	103114 <rt_kprintf>
  11ed68:	e30014ca 	movw	r1, #1226	; 0x4ca
  11ed6c:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11ed70:	e3400014 	movt	r0, #20
  11ed74:	ebffb006 	bl	10ad94 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11ed78:	e51b3008 	ldr	r3, [fp, #-8]
  11ed7c:	e593200c 	ldr	r2, [r3, #12]
  11ed80:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ed84:	e3403015 	movt	r3, #21
  11ed88:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11ed8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11ed94:	e51b3008 	ldr	r3, [fp, #-8]
  11ed98:	e593300c 	ldr	r3, [r3, #12]
  11ed9c:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11eda0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11eda4:	e3a00002 	mov	r0, #2
  11eda8:	ebffe867 	bl	118f4c <memp_free>
  11edac:	ea000004 	b	11edc4 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11edb0:	e51b3008 	ldr	r3, [fp, #-8]
  11edb4:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11edb8:	e51b3008 	ldr	r3, [fp, #-8]
  11edbc:	e593300c 	ldr	r3, [r3, #12]
  11edc0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11edc4:	e51b3008 	ldr	r3, [fp, #-8]
  11edc8:	e3530000 	cmp	r3, #0
  11edcc:	1affffaa 	bne	11ec7c <tcp_slowtmr+0x860>
    }
  }
}
  11edd0:	e320f000 	nop	{0}
  11edd4:	e24bd004 	sub	sp, fp, #4
  11edd8:	e8bd8800 	pop	{fp, pc}

0011eddc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11eddc:	e92d4800 	push	{fp, lr}
  11ede0:	e28db004 	add	fp, sp, #4
  11ede4:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11ede8:	e30e3215 	movw	r3, #57877	; 0xe215
  11edec:	e3403014 	movt	r3, #20
  11edf0:	e5d33000 	ldrb	r3, [r3]
  11edf4:	e2833001 	add	r3, r3, #1
  11edf8:	e6ef2073 	uxtb	r2, r3
  11edfc:	e30e3215 	movw	r3, #57877	; 0xe215
  11ee00:	e3403014 	movt	r3, #20
  11ee04:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11ee08:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ee0c:	e3403015 	movt	r3, #21
  11ee10:	e5933000 	ldr	r3, [r3]
  11ee14:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11ee18:	ea000044 	b	11ef30 <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11ee1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee20:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11ee24:	e30e3215 	movw	r3, #57877	; 0xe215
  11ee28:	e3403014 	movt	r3, #20
  11ee2c:	e5d33000 	ldrb	r3, [r3]
  11ee30:	e1520003 	cmp	r2, r3
  11ee34:	0a00003a 	beq	11ef24 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11ee38:	e30e3215 	movw	r3, #57877	; 0xe215
  11ee3c:	e3403014 	movt	r3, #20
  11ee40:	e5d32000 	ldrb	r2, [r3]
  11ee44:	e51b3008 	ldr	r3, [fp, #-8]
  11ee48:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11ee4c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee50:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee54:	e2033001 	and	r3, r3, #1
  11ee58:	e3530000 	cmp	r3, #0
  11ee5c:	0a00000d 	beq	11ee98 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11ee60:	e51b3008 	ldr	r3, [fp, #-8]
  11ee64:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee68:	e3833002 	orr	r3, r3, #2
  11ee6c:	e6ef2073 	uxtb	r2, r3
  11ee70:	e51b3008 	ldr	r3, [fp, #-8]
  11ee74:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11ee78:	e51b0008 	ldr	r0, [fp, #-8]
  11ee7c:	eb001b6b 	bl	125c30 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11ee80:	e51b3008 	ldr	r3, [fp, #-8]
  11ee84:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee88:	e3c33003 	bic	r3, r3, #3
  11ee8c:	e6ef2073 	uxtb	r2, r3
  11ee90:	e51b3008 	ldr	r3, [fp, #-8]
  11ee94:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11ee98:	e51b3008 	ldr	r3, [fp, #-8]
  11ee9c:	e5d3301e 	ldrb	r3, [r3, #30]
  11eea0:	e2033008 	and	r3, r3, #8
  11eea4:	e3530000 	cmp	r3, #0
  11eea8:	0a000007 	beq	11eecc <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11eeac:	e51b3008 	ldr	r3, [fp, #-8]
  11eeb0:	e5d3301e 	ldrb	r3, [r3, #30]
  11eeb4:	e3c33008 	bic	r3, r3, #8
  11eeb8:	e6ef2073 	uxtb	r2, r3
  11eebc:	e51b3008 	ldr	r3, [fp, #-8]
  11eec0:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11eec4:	e51b0008 	ldr	r0, [fp, #-8]
  11eec8:	ebfff8ac 	bl	11d180 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11eecc:	e51b3008 	ldr	r3, [fp, #-8]
  11eed0:	e593300c 	ldr	r3, [r3, #12]
  11eed4:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11eed8:	e51b3008 	ldr	r3, [fp, #-8]
  11eedc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11eee0:	e3530000 	cmp	r3, #0
  11eee4:	0a00000b 	beq	11ef18 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11eee8:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11eeec:	e3403015 	movt	r3, #21
  11eef0:	e3a02000 	mov	r2, #0
  11eef4:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11eef8:	e51b0008 	ldr	r0, [fp, #-8]
  11eefc:	eb000029 	bl	11efa8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11ef00:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11ef04:	e3403015 	movt	r3, #21
  11ef08:	e5d33000 	ldrb	r3, [r3]
  11ef0c:	e3530000 	cmp	r3, #0
  11ef10:	0a000000 	beq	11ef18 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11ef14:	eaffffbb 	b	11ee08 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11ef18:	e51b300c 	ldr	r3, [fp, #-12]
  11ef1c:	e50b3008 	str	r3, [fp, #-8]
  11ef20:	ea000002 	b	11ef30 <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11ef24:	e51b3008 	ldr	r3, [fp, #-8]
  11ef28:	e593300c 	ldr	r3, [r3, #12]
  11ef2c:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ef30:	e51b3008 	ldr	r3, [fp, #-8]
  11ef34:	e3530000 	cmp	r3, #0
  11ef38:	1affffb7 	bne	11ee1c <tcp_fasttmr+0x40>
    }
  }
}
  11ef3c:	e320f000 	nop	{0}
  11ef40:	e24bd004 	sub	sp, fp, #4
  11ef44:	e8bd8800 	pop	{fp, pc}

0011ef48 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11ef48:	e92d4800 	push	{fp, lr}
  11ef4c:	e28db004 	add	fp, sp, #4
  11ef50:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11ef54:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ef58:	e3403015 	movt	r3, #21
  11ef5c:	e5933000 	ldr	r3, [r3]
  11ef60:	e50b3008 	str	r3, [fp, #-8]
  11ef64:	ea000009 	b	11ef90 <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11ef68:	e51b3008 	ldr	r3, [fp, #-8]
  11ef6c:	e5d3301e 	ldrb	r3, [r3, #30]
  11ef70:	e6af3073 	sxtb	r3, r3
  11ef74:	e3530000 	cmp	r3, #0
  11ef78:	aa000001 	bge	11ef84 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11ef7c:	e51b0008 	ldr	r0, [fp, #-8]
  11ef80:	eb001b2a 	bl	125c30 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11ef84:	e51b3008 	ldr	r3, [fp, #-8]
  11ef88:	e593300c 	ldr	r3, [r3, #12]
  11ef8c:	e50b3008 	str	r3, [fp, #-8]
  11ef90:	e51b3008 	ldr	r3, [fp, #-8]
  11ef94:	e3530000 	cmp	r3, #0
  11ef98:	1afffff2 	bne	11ef68 <tcp_txnow+0x20>
    }
  }
}
  11ef9c:	e320f000 	nop	{0}
  11efa0:	e24bd004 	sub	sp, fp, #4
  11efa4:	e8bd8800 	pop	{fp, pc}

0011efa8 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11efa8:	e92d4810 	push	{r4, fp, lr}
  11efac:	e28db008 	add	fp, sp, #8
  11efb0:	e24dd014 	sub	sp, sp, #20
  11efb4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11efb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efbc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11efc0:	e5d3300d 	ldrb	r3, [r3, #13]
  11efc4:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11efc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efcc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11efd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11efd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efd8:	e3a02000 	mov	r2, #0
  11efdc:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11efe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efe4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11efe8:	e3530000 	cmp	r3, #0
  11efec:	0a00000a 	beq	11f01c <tcp_process_refused_data+0x74>
  11eff0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11eff4:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11eff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11effc:	e5930010 	ldr	r0, [r3, #16]
  11f000:	e3a03000 	mov	r3, #0
  11f004:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f008:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f00c:	e12fff34 	blx	r4
  11f010:	e1a03000 	mov	r3, r0
  11f014:	e54b300d 	strb	r3, [fp, #-13]
  11f018:	ea000006 	b	11f038 <tcp_process_refused_data+0x90>
  11f01c:	e3a03000 	mov	r3, #0
  11f020:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f024:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f028:	e3a00000 	mov	r0, #0
  11f02c:	eb000085 	bl	11f248 <tcp_recv_null>
  11f030:	e1a03000 	mov	r3, r0
  11f034:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11f038:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f03c:	e3530000 	cmp	r3, #0
  11f040:	1a000023 	bne	11f0d4 <tcp_process_refused_data+0x12c>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f044:	e55b300e 	ldrb	r3, [fp, #-14]
  11f048:	e2033020 	and	r3, r3, #32
  11f04c:	e3530000 	cmp	r3, #0
  11f050:	0a000029 	beq	11f0fc <tcp_process_refused_data+0x154>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f054:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f058:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f05c:	e3530a02 	cmp	r3, #8192	; 0x2000
  11f060:	0a000005 	beq	11f07c <tcp_process_refused_data+0xd4>
          pcb->rcv_wnd++;
  11f064:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f068:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f06c:	e2833001 	add	r3, r3, #1
  11f070:	e6ff2073 	uxth	r2, r3
  11f074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f078:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f07c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f080:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f084:	e3530000 	cmp	r3, #0
  11f088:	0a00000a 	beq	11f0b8 <tcp_process_refused_data+0x110>
  11f08c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f090:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f094:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f098:	e5930010 	ldr	r0, [r3, #16]
  11f09c:	e3a03000 	mov	r3, #0
  11f0a0:	e3a02000 	mov	r2, #0
  11f0a4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f0a8:	e12fff34 	blx	r4
  11f0ac:	e1a03000 	mov	r3, r0
  11f0b0:	e54b300d 	strb	r3, [fp, #-13]
  11f0b4:	ea000001 	b	11f0c0 <tcp_process_refused_data+0x118>
  11f0b8:	e3a03000 	mov	r3, #0
  11f0bc:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f0c0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f0c4:	e373000d 	cmn	r3, #13
  11f0c8:	1a00000b 	bne	11f0fc <tcp_process_refused_data+0x154>
          return ERR_ABRT;
  11f0cc:	e3e0300c 	mvn	r3, #12
  11f0d0:	ea00000a 	b	11f100 <tcp_process_refused_data+0x158>
        }
      }
    } else if (err == ERR_ABRT) {
  11f0d4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f0d8:	e373000d 	cmn	r3, #13
  11f0dc:	1a000001 	bne	11f0e8 <tcp_process_refused_data+0x140>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f0e0:	e3e0300c 	mvn	r3, #12
  11f0e4:	ea000005 	b	11f100 <tcp_process_refused_data+0x158>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f0e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f0ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f0f0:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f0f4:	e3e03004 	mvn	r3, #4
  11f0f8:	ea000000 	b	11f100 <tcp_process_refused_data+0x158>
    }
  }
  return ERR_OK;
  11f0fc:	e3a03000 	mov	r3, #0
}
  11f100:	e1a00003 	mov	r0, r3
  11f104:	e24bd008 	sub	sp, fp, #8
  11f108:	e8bd8810 	pop	{r4, fp, pc}

0011f10c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f10c:	e92d4800 	push	{fp, lr}
  11f110:	e28db004 	add	fp, sp, #4
  11f114:	e24dd010 	sub	sp, sp, #16
  11f118:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f11c:	ea000006 	b	11f13c <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f120:	e51b3010 	ldr	r3, [fp, #-16]
  11f124:	e5933000 	ldr	r3, [r3]
  11f128:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f12c:	e51b0010 	ldr	r0, [fp, #-16]
  11f130:	eb000007 	bl	11f154 <tcp_seg_free>
    seg = next;
  11f134:	e51b3008 	ldr	r3, [fp, #-8]
  11f138:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f13c:	e51b3010 	ldr	r3, [fp, #-16]
  11f140:	e3530000 	cmp	r3, #0
  11f144:	1afffff5 	bne	11f120 <tcp_segs_free+0x14>
  }
}
  11f148:	e320f000 	nop	{0}
  11f14c:	e24bd004 	sub	sp, fp, #4
  11f150:	e8bd8800 	pop	{fp, pc}

0011f154 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f154:	e92d4800 	push	{fp, lr}
  11f158:	e28db004 	add	fp, sp, #4
  11f15c:	e24dd008 	sub	sp, sp, #8
  11f160:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f164:	e51b3008 	ldr	r3, [fp, #-8]
  11f168:	e3530000 	cmp	r3, #0
  11f16c:	0a00000a 	beq	11f19c <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f170:	e51b3008 	ldr	r3, [fp, #-8]
  11f174:	e5933004 	ldr	r3, [r3, #4]
  11f178:	e3530000 	cmp	r3, #0
  11f17c:	0a000003 	beq	11f190 <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f180:	e51b3008 	ldr	r3, [fp, #-8]
  11f184:	e5933004 	ldr	r3, [r3, #4]
  11f188:	e1a00003 	mov	r0, r3
  11f18c:	ebffee7c 	bl	11ab84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f190:	e51b1008 	ldr	r1, [fp, #-8]
  11f194:	e3a00004 	mov	r0, #4
  11f198:	ebffe76b 	bl	118f4c <memp_free>
  }
}
  11f19c:	e320f000 	nop	{0}
  11f1a0:	e24bd004 	sub	sp, fp, #4
  11f1a4:	e8bd8800 	pop	{fp, pc}

0011f1a8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f1a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f1ac:	e28db000 	add	fp, sp, #0
  11f1b0:	e24dd00c 	sub	sp, sp, #12
  11f1b4:	e50b0008 	str	r0, [fp, #-8]
  11f1b8:	e1a03001 	mov	r3, r1
  11f1bc:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f1c0:	e51b3008 	ldr	r3, [fp, #-8]
  11f1c4:	e55b2009 	ldrb	r2, [fp, #-9]
  11f1c8:	e5c32018 	strb	r2, [r3, #24]
}
  11f1cc:	e320f000 	nop	{0}
  11f1d0:	e28bd000 	add	sp, fp, #0
  11f1d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f1d8:	e12fff1e 	bx	lr

0011f1dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f1dc:	e92d4800 	push	{fp, lr}
  11f1e0:	e28db004 	add	fp, sp, #4
  11f1e4:	e24dd010 	sub	sp, sp, #16
  11f1e8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f1ec:	e300258f 	movw	r2, #1423	; 0x58f
  11f1f0:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11f1f4:	e3401014 	movt	r1, #20
  11f1f8:	e3a00004 	mov	r0, #4
  11f1fc:	ebffe6ea 	bl	118dac <memp_malloc_fn>
  11f200:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f204:	e51b3008 	ldr	r3, [fp, #-8]
  11f208:	e3530000 	cmp	r3, #0
  11f20c:	1a000001 	bne	11f218 <tcp_seg_copy+0x3c>
    return NULL;
  11f210:	e3a03000 	mov	r3, #0
  11f214:	ea000008 	b	11f23c <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f218:	e3a02010 	mov	r2, #16
  11f21c:	e51b1010 	ldr	r1, [fp, #-16]
  11f220:	e51b0008 	ldr	r0, [fp, #-8]
  11f224:	eb008616 	bl	140a84 <memcpy>
  pbuf_ref(cseg->p);
  11f228:	e51b3008 	ldr	r3, [fp, #-8]
  11f22c:	e5933004 	ldr	r3, [r3, #4]
  11f230:	e1a00003 	mov	r0, r3
  11f234:	ebffeeec 	bl	11adec <pbuf_ref>
  return cseg;
  11f238:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f23c:	e1a00003 	mov	r0, r3
  11f240:	e24bd004 	sub	sp, fp, #4
  11f244:	e8bd8800 	pop	{fp, pc}

0011f248 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f248:	e92d4800 	push	{fp, lr}
  11f24c:	e28db004 	add	fp, sp, #4
  11f250:	e24dd010 	sub	sp, sp, #16
  11f254:	e50b0008 	str	r0, [fp, #-8]
  11f258:	e50b100c 	str	r1, [fp, #-12]
  11f25c:	e50b2010 	str	r2, [fp, #-16]
  11f260:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f264:	e51b3010 	ldr	r3, [fp, #-16]
  11f268:	e3530000 	cmp	r3, #0
  11f26c:	0a000007 	beq	11f290 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f270:	e51b3010 	ldr	r3, [fp, #-16]
  11f274:	e1d330b8 	ldrh	r3, [r3, #8]
  11f278:	e1a01003 	mov	r1, r3
  11f27c:	e51b000c 	ldr	r0, [fp, #-12]
  11f280:	ebfffac7 	bl	11dda4 <tcp_recved>
    pbuf_free(p);
  11f284:	e51b0010 	ldr	r0, [fp, #-16]
  11f288:	ebffee3d 	bl	11ab84 <pbuf_free>
  11f28c:	ea000006 	b	11f2ac <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f290:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f294:	e3530000 	cmp	r3, #0
  11f298:	1a000003 	bne	11f2ac <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f29c:	e51b000c 	ldr	r0, [fp, #-12]
  11f2a0:	ebfff81c 	bl	11d318 <tcp_close>
  11f2a4:	e1a03000 	mov	r3, r0
  11f2a8:	ea000000 	b	11f2b0 <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f2ac:	e3a03000 	mov	r3, #0
}
  11f2b0:	e1a00003 	mov	r0, r3
  11f2b4:	e24bd004 	sub	sp, fp, #4
  11f2b8:	e8bd8800 	pop	{fp, pc}

0011f2bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f2bc:	e92d4800 	push	{fp, lr}
  11f2c0:	e28db004 	add	fp, sp, #4
  11f2c4:	e24dd018 	sub	sp, sp, #24
  11f2c8:	e1a03000 	mov	r3, r0
  11f2cc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f2d0:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f2d4:	e3530000 	cmp	r3, #0
  11f2d8:	ba000001 	blt	11f2e4 <tcp_kill_prio+0x28>
  11f2dc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f2e0:	ea000000 	b	11f2e8 <tcp_kill_prio+0x2c>
  11f2e4:	e3a0307f 	mov	r3, #127	; 0x7f
  11f2e8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f2ec:	e3a03000 	mov	r3, #0
  11f2f0:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f2f4:	e3a03000 	mov	r3, #0
  11f2f8:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f2fc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11f300:	e3403015 	movt	r3, #21
  11f304:	e5933000 	ldr	r3, [r3]
  11f308:	e50b3008 	str	r3, [fp, #-8]
  11f30c:	ea00001c 	b	11f384 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f310:	e51b3008 	ldr	r3, [fp, #-8]
  11f314:	e5d33018 	ldrb	r3, [r3, #24]
  11f318:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f31c:	e1520003 	cmp	r2, r3
  11f320:	3a000014 	bcc	11f378 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f324:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f328:	e3403015 	movt	r3, #21
  11f32c:	e5932000 	ldr	r2, [r3]
  11f330:	e51b3008 	ldr	r3, [fp, #-8]
  11f334:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f338:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f33c:	e51b2010 	ldr	r2, [fp, #-16]
  11f340:	e1520003 	cmp	r2, r3
  11f344:	8a00000b 	bhi	11f378 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f348:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f34c:	e3403015 	movt	r3, #21
  11f350:	e5932000 	ldr	r2, [r3]
  11f354:	e51b3008 	ldr	r3, [fp, #-8]
  11f358:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f35c:	e0423003 	sub	r3, r2, r3
  11f360:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f364:	e51b3008 	ldr	r3, [fp, #-8]
  11f368:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f36c:	e51b3008 	ldr	r3, [fp, #-8]
  11f370:	e5d33018 	ldrb	r3, [r3, #24]
  11f374:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f378:	e51b3008 	ldr	r3, [fp, #-8]
  11f37c:	e593300c 	ldr	r3, [r3, #12]
  11f380:	e50b3008 	str	r3, [fp, #-8]
  11f384:	e51b3008 	ldr	r3, [fp, #-8]
  11f388:	e3530000 	cmp	r3, #0
  11f38c:	1affffdf 	bne	11f310 <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f390:	e51b300c 	ldr	r3, [fp, #-12]
  11f394:	e3530000 	cmp	r3, #0
  11f398:	0a000001 	beq	11f3a4 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f39c:	e51b000c 	ldr	r0, [fp, #-12]
  11f3a0:	ebfff8d0 	bl	11d6e8 <tcp_abort>
  }
}
  11f3a4:	e320f000 	nop	{0}
  11f3a8:	e24bd004 	sub	sp, fp, #4
  11f3ac:	e8bd8800 	pop	{fp, pc}

0011f3b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f3b0:	e92d4800 	push	{fp, lr}
  11f3b4:	e28db004 	add	fp, sp, #4
  11f3b8:	e24dd018 	sub	sp, sp, #24
  11f3bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f3c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3c4:	e3530008 	cmp	r3, #8
  11f3c8:	0a000009 	beq	11f3f4 <tcp_kill_state+0x44>
  11f3cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3d0:	e3530009 	cmp	r3, #9
  11f3d4:	0a000006 	beq	11f3f4 <tcp_kill_state+0x44>
  11f3d8:	e3070ee4 	movw	r0, #32484	; 0x7ee4
  11f3dc:	e3400014 	movt	r0, #20
  11f3e0:	ebff8f4b 	bl	103114 <rt_kprintf>
  11f3e4:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f3e8:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11f3ec:	e3400014 	movt	r0, #20
  11f3f0:	ebffae67 	bl	10ad94 <sys_arch_assert>

  inactivity = 0;
  11f3f4:	e3a03000 	mov	r3, #0
  11f3f8:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f3fc:	e3a03000 	mov	r3, #0
  11f400:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f404:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11f408:	e3403015 	movt	r3, #21
  11f40c:	e5933000 	ldr	r3, [r3]
  11f410:	e50b3008 	str	r3, [fp, #-8]
  11f414:	ea000019 	b	11f480 <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f418:	e51b3008 	ldr	r3, [fp, #-8]
  11f41c:	e5933014 	ldr	r3, [r3, #20]
  11f420:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f424:	e1520003 	cmp	r2, r3
  11f428:	1a000011 	bne	11f474 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f42c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f430:	e3403015 	movt	r3, #21
  11f434:	e5932000 	ldr	r2, [r3]
  11f438:	e51b3008 	ldr	r3, [fp, #-8]
  11f43c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f440:	e0423003 	sub	r3, r2, r3
  11f444:	e51b2010 	ldr	r2, [fp, #-16]
  11f448:	e1520003 	cmp	r2, r3
  11f44c:	8a000008 	bhi	11f474 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f450:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f454:	e3403015 	movt	r3, #21
  11f458:	e5932000 	ldr	r2, [r3]
  11f45c:	e51b3008 	ldr	r3, [fp, #-8]
  11f460:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f464:	e0423003 	sub	r3, r2, r3
  11f468:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f46c:	e51b3008 	ldr	r3, [fp, #-8]
  11f470:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f474:	e51b3008 	ldr	r3, [fp, #-8]
  11f478:	e593300c 	ldr	r3, [r3, #12]
  11f47c:	e50b3008 	str	r3, [fp, #-8]
  11f480:	e51b3008 	ldr	r3, [fp, #-8]
  11f484:	e3530000 	cmp	r3, #0
  11f488:	1affffe2 	bne	11f418 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f48c:	e51b300c 	ldr	r3, [fp, #-12]
  11f490:	e3530000 	cmp	r3, #0
  11f494:	0a000002 	beq	11f4a4 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f498:	e3a01000 	mov	r1, #0
  11f49c:	e51b000c 	ldr	r0, [fp, #-12]
  11f4a0:	ebfff7f1 	bl	11d46c <tcp_abandon>
  }
}
  11f4a4:	e320f000 	nop	{0}
  11f4a8:	e24bd004 	sub	sp, fp, #4
  11f4ac:	e8bd8800 	pop	{fp, pc}

0011f4b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f4b0:	e92d4800 	push	{fp, lr}
  11f4b4:	e28db004 	add	fp, sp, #4
  11f4b8:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f4bc:	e3a03000 	mov	r3, #0
  11f4c0:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f4c4:	e3a03000 	mov	r3, #0
  11f4c8:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f4cc:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11f4d0:	e3403015 	movt	r3, #21
  11f4d4:	e5933000 	ldr	r3, [r3]
  11f4d8:	e50b3008 	str	r3, [fp, #-8]
  11f4dc:	ea000014 	b	11f534 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f4e0:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f4e4:	e3403015 	movt	r3, #21
  11f4e8:	e5932000 	ldr	r2, [r3]
  11f4ec:	e51b3008 	ldr	r3, [fp, #-8]
  11f4f0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f4f4:	e0423003 	sub	r3, r2, r3
  11f4f8:	e51b2010 	ldr	r2, [fp, #-16]
  11f4fc:	e1520003 	cmp	r2, r3
  11f500:	8a000008 	bhi	11f528 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f504:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f508:	e3403015 	movt	r3, #21
  11f50c:	e5932000 	ldr	r2, [r3]
  11f510:	e51b3008 	ldr	r3, [fp, #-8]
  11f514:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f518:	e0423003 	sub	r3, r2, r3
  11f51c:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f520:	e51b3008 	ldr	r3, [fp, #-8]
  11f524:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f528:	e51b3008 	ldr	r3, [fp, #-8]
  11f52c:	e593300c 	ldr	r3, [r3, #12]
  11f530:	e50b3008 	str	r3, [fp, #-8]
  11f534:	e51b3008 	ldr	r3, [fp, #-8]
  11f538:	e3530000 	cmp	r3, #0
  11f53c:	1affffe7 	bne	11f4e0 <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f540:	e51b300c 	ldr	r3, [fp, #-12]
  11f544:	e3530000 	cmp	r3, #0
  11f548:	0a000001 	beq	11f554 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f54c:	e51b000c 	ldr	r0, [fp, #-12]
  11f550:	ebfff864 	bl	11d6e8 <tcp_abort>
  }
}
  11f554:	e320f000 	nop	{0}
  11f558:	e24bd004 	sub	sp, fp, #4
  11f55c:	e8bd8800 	pop	{fp, pc}

0011f560 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f560:	e92d4800 	push	{fp, lr}
  11f564:	e28db004 	add	fp, sp, #4
  11f568:	e24dd010 	sub	sp, sp, #16
  11f56c:	e1a03000 	mov	r3, r0
  11f570:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f574:	e3002612 	movw	r2, #1554	; 0x612
  11f578:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11f57c:	e3401014 	movt	r1, #20
  11f580:	e3a00002 	mov	r0, #2
  11f584:	ebffe608 	bl	118dac <memp_malloc_fn>
  11f588:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f58c:	e51b3008 	ldr	r3, [fp, #-8]
  11f590:	e3530000 	cmp	r3, #0
  11f594:	1a000050 	bne	11f6dc <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f598:	ebffffc4 	bl	11f4b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f59c:	e3002618 	movw	r2, #1560	; 0x618
  11f5a0:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11f5a4:	e3401014 	movt	r1, #20
  11f5a8:	e3a00002 	mov	r0, #2
  11f5ac:	ebffe5fe 	bl	118dac <memp_malloc_fn>
  11f5b0:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f5b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f5b8:	e3530000 	cmp	r3, #0
  11f5bc:	1a00003c 	bne	11f6b4 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f5c0:	e3a00009 	mov	r0, #9
  11f5c4:	ebffff79 	bl	11f3b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f5c8:	e300261e 	movw	r2, #1566	; 0x61e
  11f5cc:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11f5d0:	e3401014 	movt	r1, #20
  11f5d4:	e3a00002 	mov	r0, #2
  11f5d8:	ebffe5f3 	bl	118dac <memp_malloc_fn>
  11f5dc:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f5e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f5e4:	e3530000 	cmp	r3, #0
  11f5e8:	1a000027 	bne	11f68c <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f5ec:	e3a00008 	mov	r0, #8
  11f5f0:	ebffff6e 	bl	11f3b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f5f4:	e3002624 	movw	r2, #1572	; 0x624
  11f5f8:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11f5fc:	e3401014 	movt	r1, #20
  11f600:	e3a00002 	mov	r0, #2
  11f604:	ebffe5e8 	bl	118dac <memp_malloc_fn>
  11f608:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f60c:	e51b3008 	ldr	r3, [fp, #-8]
  11f610:	e3530000 	cmp	r3, #0
  11f614:	1a000012 	bne	11f664 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f618:	e55b300d 	ldrb	r3, [fp, #-13]
  11f61c:	e1a00003 	mov	r0, r3
  11f620:	ebffff25 	bl	11f2bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f624:	e300262a 	movw	r2, #1578	; 0x62a
  11f628:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11f62c:	e3401014 	movt	r1, #20
  11f630:	e3a00002 	mov	r0, #2
  11f634:	ebffe5dc 	bl	118dac <memp_malloc_fn>
  11f638:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f63c:	e51b3008 	ldr	r3, [fp, #-8]
  11f640:	e3530000 	cmp	r3, #0
  11f644:	0a000006 	beq	11f664 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f648:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f64c:	e3403015 	movt	r3, #21
  11f650:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f654:	e1d320b4 	ldrh	r2, [r3, #4]
  11f658:	e2422001 	sub	r2, r2, #1
  11f65c:	e6ff2072 	uxth	r2, r2
  11f660:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f664:	e51b3008 	ldr	r3, [fp, #-8]
  11f668:	e3530000 	cmp	r3, #0
  11f66c:	0a000006 	beq	11f68c <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f670:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f674:	e3403015 	movt	r3, #21
  11f678:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f67c:	e1d320b4 	ldrh	r2, [r3, #4]
  11f680:	e2422001 	sub	r2, r2, #1
  11f684:	e6ff2072 	uxth	r2, r2
  11f688:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f68c:	e51b3008 	ldr	r3, [fp, #-8]
  11f690:	e3530000 	cmp	r3, #0
  11f694:	0a000006 	beq	11f6b4 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f698:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f69c:	e3403015 	movt	r3, #21
  11f6a0:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f6a4:	e1d320b4 	ldrh	r2, [r3, #4]
  11f6a8:	e2422001 	sub	r2, r2, #1
  11f6ac:	e6ff2072 	uxth	r2, r2
  11f6b0:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f6b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f6b8:	e3530000 	cmp	r3, #0
  11f6bc:	0a000006 	beq	11f6dc <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f6c0:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f6c4:	e3403015 	movt	r3, #21
  11f6c8:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f6cc:	e1d320b4 	ldrh	r2, [r3, #4]
  11f6d0:	e2422001 	sub	r2, r2, #1
  11f6d4:	e6ff2072 	uxth	r2, r2
  11f6d8:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11f6dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f6e0:	e3530000 	cmp	r3, #0
  11f6e4:	0a00003e 	beq	11f7e4 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11f6e8:	e3a020a4 	mov	r2, #164	; 0xa4
  11f6ec:	e3a01000 	mov	r1, #0
  11f6f0:	e51b0008 	ldr	r0, [fp, #-8]
  11f6f4:	eb00861a 	bl	140f64 <memset>
    pcb->prio = prio;
  11f6f8:	e51b3008 	ldr	r3, [fp, #-8]
  11f6fc:	e55b200d 	ldrb	r2, [fp, #-13]
  11f700:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11f704:	e51b3008 	ldr	r3, [fp, #-8]
  11f708:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f70c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11f710:	e51b3008 	ldr	r3, [fp, #-8]
  11f714:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f718:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11f71c:	e51b3008 	ldr	r3, [fp, #-8]
  11f720:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11f724:	e51b3008 	ldr	r3, [fp, #-8]
  11f728:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11f72c:	e51b3008 	ldr	r3, [fp, #-8]
  11f730:	e3e02000 	mvn	r2, #0
  11f734:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11f738:	e51b3008 	ldr	r3, [fp, #-8]
  11f73c:	e3a02f86 	mov	r2, #536	; 0x218
  11f740:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11f744:	e51b3008 	ldr	r3, [fp, #-8]
  11f748:	e3a02006 	mov	r2, #6
  11f74c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11f750:	e51b3008 	ldr	r3, [fp, #-8]
  11f754:	e3a02006 	mov	r2, #6
  11f758:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11f75c:	e51b3008 	ldr	r3, [fp, #-8]
  11f760:	e3e02000 	mvn	r2, #0
  11f764:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11f768:	e51b3008 	ldr	r3, [fp, #-8]
  11f76c:	e3a02001 	mov	r2, #1
  11f770:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11f774:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f778:	e3403015 	movt	r3, #21
  11f77c:	e5932000 	ldr	r2, [r3]
  11f780:	e51b3008 	ldr	r3, [fp, #-8]
  11f784:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11f788:	e30e3215 	movw	r3, #57877	; 0xe215
  11f78c:	e3403014 	movt	r3, #20
  11f790:	e5d32000 	ldrb	r2, [r3]
  11f794:	e51b3008 	ldr	r3, [fp, #-8]
  11f798:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11f79c:	e51b3008 	ldr	r3, [fp, #-8]
  11f7a0:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f7a4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11f7a8:	e51b2008 	ldr	r2, [fp, #-8]
  11f7ac:	e30f3248 	movw	r3, #62024	; 0xf248
  11f7b0:	e3403011 	movt	r3, #17
  11f7b4:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11f7b8:	e51b2008 	ldr	r2, [fp, #-8]
  11f7bc:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11f7c0:	e340306d 	movt	r3, #109	; 0x6d
  11f7c4:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11f7c8:	e51b2008 	ldr	r2, [fp, #-8]
  11f7cc:	e30234f8 	movw	r3, #9464	; 0x24f8
  11f7d0:	e3403001 	movt	r3, #1
  11f7d4:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11f7d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f7dc:	e3a02009 	mov	r2, #9
  11f7e0:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11f7e4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f7e8:	e1a00003 	mov	r0, r3
  11f7ec:	e24bd004 	sub	sp, fp, #4
  11f7f0:	e8bd8800 	pop	{fp, pc}

0011f7f4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11f7f4:	e92d4800 	push	{fp, lr}
  11f7f8:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11f7fc:	e3a00040 	mov	r0, #64	; 0x40
  11f800:	ebffff56 	bl	11f560 <tcp_alloc>
  11f804:	e1a03000 	mov	r3, r0
}
  11f808:	e1a00003 	mov	r0, r3
  11f80c:	e8bd8800 	pop	{fp, pc}

0011f810 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11f810:	e92d4800 	push	{fp, lr}
  11f814:	e28db004 	add	fp, sp, #4
  11f818:	e24dd010 	sub	sp, sp, #16
  11f81c:	e1a03000 	mov	r3, r0
  11f820:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11f824:	e3a00040 	mov	r0, #64	; 0x40
  11f828:	ebffff4c 	bl	11f560 <tcp_alloc>
  11f82c:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11f830:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f834:	e1a00003 	mov	r0, r3
  11f838:	e24bd004 	sub	sp, fp, #4
  11f83c:	e8bd8800 	pop	{fp, pc}

0011f840 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11f840:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f844:	e28db000 	add	fp, sp, #0
  11f848:	e24dd00c 	sub	sp, sp, #12
  11f84c:	e50b0008 	str	r0, [fp, #-8]
  11f850:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11f854:	e51b3008 	ldr	r3, [fp, #-8]
  11f858:	e3530000 	cmp	r3, #0
  11f85c:	0a000002 	beq	11f86c <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11f860:	e51b3008 	ldr	r3, [fp, #-8]
  11f864:	e51b200c 	ldr	r2, [fp, #-12]
  11f868:	e5832010 	str	r2, [r3, #16]
  }
}
  11f86c:	e320f000 	nop	{0}
  11f870:	e28bd000 	add	sp, fp, #0
  11f874:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f878:	e12fff1e 	bx	lr

0011f87c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11f87c:	e92d4800 	push	{fp, lr}
  11f880:	e28db004 	add	fp, sp, #4
  11f884:	e24dd008 	sub	sp, sp, #8
  11f888:	e50b0008 	str	r0, [fp, #-8]
  11f88c:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f890:	e51b3008 	ldr	r3, [fp, #-8]
  11f894:	e3530000 	cmp	r3, #0
  11f898:	0a00000d 	beq	11f8d4 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11f89c:	e51b3008 	ldr	r3, [fp, #-8]
  11f8a0:	e5933014 	ldr	r3, [r3, #20]
  11f8a4:	e3530001 	cmp	r3, #1
  11f8a8:	1a000006 	bne	11f8c8 <tcp_recv+0x4c>
  11f8ac:	e3070ef4 	movw	r0, #32500	; 0x7ef4
  11f8b0:	e3400014 	movt	r0, #20
  11f8b4:	ebff8e16 	bl	103114 <rt_kprintf>
  11f8b8:	e30016b6 	movw	r1, #1718	; 0x6b6
  11f8bc:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11f8c0:	e3400014 	movt	r0, #20
  11f8c4:	ebffad32 	bl	10ad94 <sys_arch_assert>
    pcb->recv = recv;
  11f8c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f8cc:	e51b200c 	ldr	r2, [fp, #-12]
  11f8d0:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11f8d4:	e320f000 	nop	{0}
  11f8d8:	e24bd004 	sub	sp, fp, #4
  11f8dc:	e8bd8800 	pop	{fp, pc}

0011f8e0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11f8e0:	e92d4800 	push	{fp, lr}
  11f8e4:	e28db004 	add	fp, sp, #4
  11f8e8:	e24dd008 	sub	sp, sp, #8
  11f8ec:	e50b0008 	str	r0, [fp, #-8]
  11f8f0:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f8f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f8f8:	e3530000 	cmp	r3, #0
  11f8fc:	0a00000d 	beq	11f938 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11f900:	e51b3008 	ldr	r3, [fp, #-8]
  11f904:	e5933014 	ldr	r3, [r3, #20]
  11f908:	e3530001 	cmp	r3, #1
  11f90c:	1a000006 	bne	11f92c <tcp_sent+0x4c>
  11f910:	e3070f1c 	movw	r0, #32540	; 0x7f1c
  11f914:	e3400014 	movt	r0, #20
  11f918:	ebff8dfd 	bl	103114 <rt_kprintf>
  11f91c:	e30016c7 	movw	r1, #1735	; 0x6c7
  11f920:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11f924:	e3400014 	movt	r0, #20
  11f928:	ebffad19 	bl	10ad94 <sys_arch_assert>
    pcb->sent = sent;
  11f92c:	e51b3008 	ldr	r3, [fp, #-8]
  11f930:	e51b200c 	ldr	r2, [fp, #-12]
  11f934:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11f938:	e320f000 	nop	{0}
  11f93c:	e24bd004 	sub	sp, fp, #4
  11f940:	e8bd8800 	pop	{fp, pc}

0011f944 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11f944:	e92d4800 	push	{fp, lr}
  11f948:	e28db004 	add	fp, sp, #4
  11f94c:	e24dd008 	sub	sp, sp, #8
  11f950:	e50b0008 	str	r0, [fp, #-8]
  11f954:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f958:	e51b3008 	ldr	r3, [fp, #-8]
  11f95c:	e3530000 	cmp	r3, #0
  11f960:	0a00000d 	beq	11f99c <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11f964:	e51b3008 	ldr	r3, [fp, #-8]
  11f968:	e5933014 	ldr	r3, [r3, #20]
  11f96c:	e3530001 	cmp	r3, #1
  11f970:	1a000006 	bne	11f990 <tcp_err+0x4c>
  11f974:	e3070f44 	movw	r0, #32580	; 0x7f44
  11f978:	e3400014 	movt	r0, #20
  11f97c:	ebff8de4 	bl	103114 <rt_kprintf>
  11f980:	e30016db 	movw	r1, #1755	; 0x6db
  11f984:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11f988:	e3400014 	movt	r0, #20
  11f98c:	ebffad00 	bl	10ad94 <sys_arch_assert>
    pcb->errf = err;
  11f990:	e51b3008 	ldr	r3, [fp, #-8]
  11f994:	e51b200c 	ldr	r2, [fp, #-12]
  11f998:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11f99c:	e320f000 	nop	{0}
  11f9a0:	e24bd004 	sub	sp, fp, #4
  11f9a4:	e8bd8800 	pop	{fp, pc}

0011f9a8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11f9a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f9ac:	e28db000 	add	fp, sp, #0
  11f9b0:	e24dd014 	sub	sp, sp, #20
  11f9b4:	e50b0010 	str	r0, [fp, #-16]
  11f9b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11f9bc:	e51b3010 	ldr	r3, [fp, #-16]
  11f9c0:	e3530000 	cmp	r3, #0
  11f9c4:	0a000008 	beq	11f9ec <tcp_accept+0x44>
  11f9c8:	e51b3010 	ldr	r3, [fp, #-16]
  11f9cc:	e5933014 	ldr	r3, [r3, #20]
  11f9d0:	e3530001 	cmp	r3, #1
  11f9d4:	1a000004 	bne	11f9ec <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11f9d8:	e51b3010 	ldr	r3, [fp, #-16]
  11f9dc:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11f9e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f9e4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f9e8:	e583201c 	str	r2, [r3, #28]
  }
}
  11f9ec:	e320f000 	nop	{0}
  11f9f0:	e28bd000 	add	sp, fp, #0
  11f9f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f9f8:	e12fff1e 	bx	lr

0011f9fc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11f9fc:	e92d4800 	push	{fp, lr}
  11fa00:	e28db004 	add	fp, sp, #4
  11fa04:	e24dd010 	sub	sp, sp, #16
  11fa08:	e50b0008 	str	r0, [fp, #-8]
  11fa0c:	e50b100c 	str	r1, [fp, #-12]
  11fa10:	e1a03002 	mov	r3, r2
  11fa14:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11fa18:	e51b3008 	ldr	r3, [fp, #-8]
  11fa1c:	e5933014 	ldr	r3, [r3, #20]
  11fa20:	e3530001 	cmp	r3, #1
  11fa24:	1a000006 	bne	11fa44 <tcp_poll+0x48>
  11fa28:	e3070f6c 	movw	r0, #32620	; 0x7f6c
  11fa2c:	e3400014 	movt	r0, #20
  11fa30:	ebff8db7 	bl	103114 <rt_kprintf>
  11fa34:	e30016fe 	movw	r1, #1790	; 0x6fe
  11fa38:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11fa3c:	e3400014 	movt	r0, #20
  11fa40:	ebffacd3 	bl	10ad94 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11fa44:	e51b3008 	ldr	r3, [fp, #-8]
  11fa48:	e51b200c 	ldr	r2, [fp, #-12]
  11fa4c:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11fa50:	e51b3008 	ldr	r3, [fp, #-8]
  11fa54:	e55b200d 	ldrb	r2, [fp, #-13]
  11fa58:	e5c32020 	strb	r2, [r3, #32]
}
  11fa5c:	e320f000 	nop	{0}
  11fa60:	e24bd004 	sub	sp, fp, #4
  11fa64:	e8bd8800 	pop	{fp, pc}

0011fa68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11fa68:	e92d4800 	push	{fp, lr}
  11fa6c:	e28db004 	add	fp, sp, #4
  11fa70:	e24dd008 	sub	sp, sp, #8
  11fa74:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11fa78:	e51b3008 	ldr	r3, [fp, #-8]
  11fa7c:	e5933014 	ldr	r3, [r3, #20]
  11fa80:	e3530000 	cmp	r3, #0
  11fa84:	0a00002e 	beq	11fb44 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11fa88:	e51b3008 	ldr	r3, [fp, #-8]
  11fa8c:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fa90:	e353000a 	cmp	r3, #10
  11fa94:	0a00002a 	beq	11fb44 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fa98:	e51b3008 	ldr	r3, [fp, #-8]
  11fa9c:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11faa0:	e3530001 	cmp	r3, #1
  11faa4:	0a000026 	beq	11fb44 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11faa8:	e51b3008 	ldr	r3, [fp, #-8]
  11faac:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fab0:	e3530000 	cmp	r3, #0
  11fab4:	0a000006 	beq	11fad4 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fab8:	e51b3008 	ldr	r3, [fp, #-8]
  11fabc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fac0:	e1a00003 	mov	r0, r3
  11fac4:	ebffec2e 	bl	11ab84 <pbuf_free>
      pcb->refused_data = NULL;
  11fac8:	e51b3008 	ldr	r3, [fp, #-8]
  11facc:	e3a02000 	mov	r2, #0
  11fad0:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fad4:	e51b3008 	ldr	r3, [fp, #-8]
  11fad8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fadc:	e1a00003 	mov	r0, r3
  11fae0:	ebfffd89 	bl	11f10c <tcp_segs_free>
    pcb->ooseq = NULL;
  11fae4:	e51b3008 	ldr	r3, [fp, #-8]
  11fae8:	e3a02000 	mov	r2, #0
  11faec:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11faf0:	e51b3008 	ldr	r3, [fp, #-8]
  11faf4:	e3e02000 	mvn	r2, #0
  11faf8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fafc:	e51b3008 	ldr	r3, [fp, #-8]
  11fb00:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fb04:	e1a00003 	mov	r0, r3
  11fb08:	ebfffd7f 	bl	11f10c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11fb0c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb10:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fb14:	e1a00003 	mov	r0, r3
  11fb18:	ebfffd7b 	bl	11f10c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11fb1c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb20:	e3a02000 	mov	r2, #0
  11fb24:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11fb28:	e51b3008 	ldr	r3, [fp, #-8]
  11fb2c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11fb30:	e51b3008 	ldr	r3, [fp, #-8]
  11fb34:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11fb38:	e51b3008 	ldr	r3, [fp, #-8]
  11fb3c:	e3a02000 	mov	r2, #0
  11fb40:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fb44:	e320f000 	nop	{0}
  11fb48:	e24bd004 	sub	sp, fp, #4
  11fb4c:	e8bd8800 	pop	{fp, pc}

0011fb50 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fb50:	e92d4800 	push	{fp, lr}
  11fb54:	e28db004 	add	fp, sp, #4
  11fb58:	e24dd010 	sub	sp, sp, #16
  11fb5c:	e50b0010 	str	r0, [fp, #-16]
  11fb60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fb64:	e51b3010 	ldr	r3, [fp, #-16]
  11fb68:	e5933000 	ldr	r3, [r3]
  11fb6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fb70:	e1520003 	cmp	r2, r3
  11fb74:	1a000005 	bne	11fb90 <tcp_pcb_remove+0x40>
  11fb78:	e51b3010 	ldr	r3, [fp, #-16]
  11fb7c:	e5933000 	ldr	r3, [r3]
  11fb80:	e593200c 	ldr	r2, [r3, #12]
  11fb84:	e51b3010 	ldr	r3, [fp, #-16]
  11fb88:	e5832000 	str	r2, [r3]
  11fb8c:	ea000013 	b	11fbe0 <tcp_pcb_remove+0x90>
  11fb90:	e51b3010 	ldr	r3, [fp, #-16]
  11fb94:	e5933000 	ldr	r3, [r3]
  11fb98:	e50b3008 	str	r3, [fp, #-8]
  11fb9c:	ea00000c 	b	11fbd4 <tcp_pcb_remove+0x84>
  11fba0:	e51b3008 	ldr	r3, [fp, #-8]
  11fba4:	e593300c 	ldr	r3, [r3, #12]
  11fba8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fbac:	e1520003 	cmp	r2, r3
  11fbb0:	1a000004 	bne	11fbc8 <tcp_pcb_remove+0x78>
  11fbb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbb8:	e593200c 	ldr	r2, [r3, #12]
  11fbbc:	e51b3008 	ldr	r3, [fp, #-8]
  11fbc0:	e583200c 	str	r2, [r3, #12]
  11fbc4:	ea000005 	b	11fbe0 <tcp_pcb_remove+0x90>
  11fbc8:	e51b3008 	ldr	r3, [fp, #-8]
  11fbcc:	e593300c 	ldr	r3, [r3, #12]
  11fbd0:	e50b3008 	str	r3, [fp, #-8]
  11fbd4:	e51b3008 	ldr	r3, [fp, #-8]
  11fbd8:	e3530000 	cmp	r3, #0
  11fbdc:	1affffef 	bne	11fba0 <tcp_pcb_remove+0x50>
  11fbe0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbe4:	e3a02000 	mov	r2, #0
  11fbe8:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11fbec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fbf0:	ebffff9c 	bl	11fa68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11fbf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbf8:	e5933014 	ldr	r3, [r3, #20]
  11fbfc:	e353000a 	cmp	r3, #10
  11fc00:	0a000010 	beq	11fc48 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11fc04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc08:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11fc0c:	e3530001 	cmp	r3, #1
  11fc10:	0a00000c 	beq	11fc48 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11fc14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc18:	e5d3301e 	ldrb	r3, [r3, #30]
  11fc1c:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11fc20:	e3530000 	cmp	r3, #0
  11fc24:	0a000007 	beq	11fc48 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11fc28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc2c:	e5d3301e 	ldrb	r3, [r3, #30]
  11fc30:	e3833002 	orr	r3, r3, #2
  11fc34:	e6ef2073 	uxtb	r2, r3
  11fc38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc3c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11fc40:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fc44:	eb0017f9 	bl	125c30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11fc48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc4c:	e5933014 	ldr	r3, [r3, #20]
  11fc50:	e3530001 	cmp	r3, #1
  11fc54:	0a000020 	beq	11fcdc <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11fc58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc5c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fc60:	e3530000 	cmp	r3, #0
  11fc64:	0a000006 	beq	11fc84 <tcp_pcb_remove+0x134>
  11fc68:	e3070f8c 	movw	r0, #32652	; 0x7f8c
  11fc6c:	e3400014 	movt	r0, #20
  11fc70:	ebff8d27 	bl	103114 <rt_kprintf>
  11fc74:	e300174e 	movw	r1, #1870	; 0x74e
  11fc78:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11fc7c:	e3400014 	movt	r0, #20
  11fc80:	ebffac43 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11fc84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc88:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fc8c:	e3530000 	cmp	r3, #0
  11fc90:	0a000006 	beq	11fcb0 <tcp_pcb_remove+0x160>
  11fc94:	e3070fa4 	movw	r0, #32676	; 0x7fa4
  11fc98:	e3400014 	movt	r0, #20
  11fc9c:	ebff8d1c 	bl	103114 <rt_kprintf>
  11fca0:	e300174f 	movw	r1, #1871	; 0x74f
  11fca4:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11fca8:	e3400014 	movt	r0, #20
  11fcac:	ebffac38 	bl	10ad94 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11fcb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fcb4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fcb8:	e3530000 	cmp	r3, #0
  11fcbc:	0a000006 	beq	11fcdc <tcp_pcb_remove+0x18c>
  11fcc0:	e3070fc0 	movw	r0, #32704	; 0x7fc0
  11fcc4:	e3400014 	movt	r0, #20
  11fcc8:	ebff8d11 	bl	103114 <rt_kprintf>
  11fccc:	e3001751 	movw	r1, #1873	; 0x751
  11fcd0:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11fcd4:	e3400014 	movt	r0, #20
  11fcd8:	ebffac2d 	bl	10ad94 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  11fcdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fce0:	e3a02000 	mov	r2, #0
  11fce4:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  11fce8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fcec:	e3a02000 	mov	r2, #0
  11fcf0:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  11fcf4:	e320f000 	nop	{0}
  11fcf8:	e24bd004 	sub	sp, fp, #4
  11fcfc:	e8bd8800 	pop	{fp, pc}

0011fd00 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  11fd00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fd04:	e28db000 	add	fp, sp, #0
  11fd08:	e24dd00c 	sub	sp, sp, #12
  11fd0c:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  11fd10:	e30d3034 	movw	r3, #53300	; 0xd034
  11fd14:	e3403014 	movt	r3, #20
  11fd18:	e5932000 	ldr	r2, [r3]
  11fd1c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11fd20:	e3403015 	movt	r3, #21
  11fd24:	e5933000 	ldr	r3, [r3]
  11fd28:	e0822003 	add	r2, r2, r3
  11fd2c:	e30d3034 	movw	r3, #53300	; 0xd034
  11fd30:	e3403014 	movt	r3, #20
  11fd34:	e5832000 	str	r2, [r3]
  return iss;
  11fd38:	e30d3034 	movw	r3, #53300	; 0xd034
  11fd3c:	e3403014 	movt	r3, #20
  11fd40:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  11fd44:	e1a00003 	mov	r0, r3
  11fd48:	e28bd000 	add	sp, fp, #0
  11fd4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fd50:	e12fff1e 	bx	lr

0011fd54 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  11fd54:	e92d4800 	push	{fp, lr}
  11fd58:	e28db004 	add	fp, sp, #4
  11fd5c:	e24dd010 	sub	sp, sp, #16
  11fd60:	e1a03000 	mov	r3, r0
  11fd64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11fd68:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  11fd6c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fd70:	eb00443c 	bl	130e68 <ip4_route>
  11fd74:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  11fd78:	e51b3008 	ldr	r3, [fp, #-8]
  11fd7c:	e3530000 	cmp	r3, #0
  11fd80:	1a000001 	bne	11fd8c <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  11fd84:	e15b30be 	ldrh	r3, [fp, #-14]
  11fd88:	ea00000f 	b	11fdcc <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  11fd8c:	e51b3008 	ldr	r3, [fp, #-8]
  11fd90:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  11fd94:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  11fd98:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11fd9c:	e3530000 	cmp	r3, #0
  11fda0:	0a000008 	beq	11fdc8 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  11fda4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11fda8:	e2433028 	sub	r3, r3, #40	; 0x28
  11fdac:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  11fdb0:	e15b20bc 	ldrh	r2, [fp, #-12]
  11fdb4:	e15b30be 	ldrh	r3, [fp, #-14]
  11fdb8:	e1520003 	cmp	r2, r3
  11fdbc:	31a03002 	movcc	r3, r2
  11fdc0:	21a03003 	movcs	r3, r3
  11fdc4:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  11fdc8:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11fdcc:	e1a00003 	mov	r0, r3
  11fdd0:	e24bd004 	sub	sp, fp, #4
  11fdd4:	e8bd8800 	pop	{fp, pc}

0011fdd8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  11fdd8:	e92d4800 	push	{fp, lr}
  11fddc:	e28db004 	add	fp, sp, #4
  11fde0:	e24dd010 	sub	sp, sp, #16
  11fde4:	e50b0010 	str	r0, [fp, #-16]
  11fde8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  11fdec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fdf0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11fdf4:	ea000010 	b	11fe3c <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  11fdf8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdfc:	e5932000 	ldr	r2, [r3]
  11fe00:	e51b3010 	ldr	r3, [fp, #-16]
  11fe04:	e5933000 	ldr	r3, [r3]
  11fe08:	e1520003 	cmp	r2, r3
  11fe0c:	1a000007 	bne	11fe30 <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  11fe10:	e51b3008 	ldr	r3, [fp, #-8]
  11fe14:	e593300c 	ldr	r3, [r3, #12]
  11fe18:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  11fe1c:	e51b0008 	ldr	r0, [fp, #-8]
  11fe20:	ebfff630 	bl	11d6e8 <tcp_abort>
      pcb = next;
  11fe24:	e51b300c 	ldr	r3, [fp, #-12]
  11fe28:	e50b3008 	str	r3, [fp, #-8]
  11fe2c:	ea000002 	b	11fe3c <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  11fe30:	e51b3008 	ldr	r3, [fp, #-8]
  11fe34:	e593300c 	ldr	r3, [r3, #12]
  11fe38:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11fe3c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe40:	e3530000 	cmp	r3, #0
  11fe44:	1affffeb 	bne	11fdf8 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  11fe48:	e320f000 	nop	{0}
  11fe4c:	e24bd004 	sub	sp, fp, #4
  11fe50:	e8bd8800 	pop	{fp, pc}

0011fe54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11fe54:	e92d4800 	push	{fp, lr}
  11fe58:	e28db004 	add	fp, sp, #4
  11fe5c:	e24dd010 	sub	sp, sp, #16
  11fe60:	e50b0010 	str	r0, [fp, #-16]
  11fe64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  11fe68:	e51b3010 	ldr	r3, [fp, #-16]
  11fe6c:	e3530000 	cmp	r3, #0
  11fe70:	0a00002d 	beq	11ff2c <tcp_netif_ip_addr_changed+0xd8>
  11fe74:	e51b3010 	ldr	r3, [fp, #-16]
  11fe78:	e5933000 	ldr	r3, [r3]
  11fe7c:	e3530000 	cmp	r3, #0
  11fe80:	0a000029 	beq	11ff2c <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  11fe84:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11fe88:	e3403015 	movt	r3, #21
  11fe8c:	e5933000 	ldr	r3, [r3]
  11fe90:	e1a01003 	mov	r1, r3
  11fe94:	e51b0010 	ldr	r0, [fp, #-16]
  11fe98:	ebffffce 	bl	11fdd8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  11fe9c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11fea0:	e3403015 	movt	r3, #21
  11fea4:	e5933000 	ldr	r3, [r3]
  11fea8:	e1a01003 	mov	r1, r3
  11feac:	e51b0010 	ldr	r0, [fp, #-16]
  11feb0:	ebffffc8 	bl	11fdd8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  11feb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11feb8:	e3530000 	cmp	r3, #0
  11febc:	0a00001a 	beq	11ff2c <tcp_netif_ip_addr_changed+0xd8>
  11fec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fec4:	e5933000 	ldr	r3, [r3]
  11fec8:	e3530000 	cmp	r3, #0
  11fecc:	0a000016 	beq	11ff2c <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11fed0:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11fed4:	e3403015 	movt	r3, #21
  11fed8:	e5933000 	ldr	r3, [r3]
  11fedc:	e50b3008 	str	r3, [fp, #-8]
  11fee0:	ea00000e 	b	11ff20 <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  11fee4:	e51b3008 	ldr	r3, [fp, #-8]
  11fee8:	e593300c 	ldr	r3, [r3, #12]
  11feec:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  11fef0:	e51b3008 	ldr	r3, [fp, #-8]
  11fef4:	e5932000 	ldr	r2, [r3]
  11fef8:	e51b3010 	ldr	r3, [fp, #-16]
  11fefc:	e5933000 	ldr	r3, [r3]
  11ff00:	e1520003 	cmp	r2, r3
  11ff04:	1a000003 	bne	11ff18 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  11ff08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff0c:	e5932000 	ldr	r2, [r3]
  11ff10:	e51b3008 	ldr	r3, [fp, #-8]
  11ff14:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11ff18:	e51b300c 	ldr	r3, [fp, #-12]
  11ff1c:	e50b3008 	str	r3, [fp, #-8]
  11ff20:	e51b3008 	ldr	r3, [fp, #-8]
  11ff24:	e3530000 	cmp	r3, #0
  11ff28:	1affffed 	bne	11fee4 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  11ff2c:	e320f000 	nop	{0}
  11ff30:	e24bd004 	sub	sp, fp, #4
  11ff34:	e8bd8800 	pop	{fp, pc}

0011ff38 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  11ff38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ff3c:	e28db000 	add	fp, sp, #0
  11ff40:	e24dd00c 	sub	sp, sp, #12
  11ff44:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  11ff48:	e3073bac 	movw	r3, #31660	; 0x7bac
  11ff4c:	e3403014 	movt	r3, #20
  11ff50:	e51b2008 	ldr	r2, [fp, #-8]
  11ff54:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  11ff58:	e1a00003 	mov	r0, r3
  11ff5c:	e28bd000 	add	sp, fp, #0
  11ff60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ff64:	e12fff1e 	bx	lr

0011ff68 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  11ff68:	e92d4810 	push	{r4, fp, lr}
  11ff6c:	e28db008 	add	fp, sp, #8
  11ff70:	e24dd034 	sub	sp, sp, #52	; 0x34
  11ff74:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11ff78:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  11ff7c:	e3a03000 	mov	r3, #0
  11ff80:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  11ff84:	e3a03000 	mov	r3, #0
  11ff88:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  11ff8c:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ff90:	e3403015 	movt	r3, #21
  11ff94:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  11ff98:	e2833001 	add	r3, r3, #1
  11ff9c:	e6ff2073 	uxth	r2, r3
  11ffa0:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ffa4:	e3403015 	movt	r3, #21
  11ffa8:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  11ffac:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ffb0:	e3403015 	movt	r3, #21
  11ffb4:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  11ffb8:	e2832001 	add	r2, r3, #1
  11ffbc:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ffc0:	e3403015 	movt	r3, #21
  11ffc4:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  11ffc8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11ffcc:	e5932004 	ldr	r2, [r3, #4]
  11ffd0:	e30e3228 	movw	r3, #57896	; 0xe228
  11ffd4:	e3403014 	movt	r3, #20
  11ffd8:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  11ffdc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11ffe0:	e1d330ba 	ldrh	r3, [r3, #10]
  11ffe4:	e3530013 	cmp	r3, #19
  11ffe8:	8a000008 	bhi	120010 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  11ffec:	e30c3a18 	movw	r3, #51736	; 0xca18
  11fff0:	e3403015 	movt	r3, #21
  11fff4:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  11fff8:	e2833001 	add	r3, r3, #1
  11fffc:	e6ff2073 	uxth	r2, r3
  120000:	e30c3a18 	movw	r3, #51736	; 0xca18
  120004:	e3403015 	movt	r3, #21
  120008:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12000c:	ea0003d1 	b	120f58 <tcp_input+0xff0>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120010:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  120014:	e3403014 	movt	r3, #20
  120018:	e5932014 	ldr	r2, [r3, #20]
  12001c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  120020:	e3403014 	movt	r3, #20
  120024:	e5933000 	ldr	r3, [r3]
  120028:	e1a01003 	mov	r1, r3
  12002c:	e1a00002 	mov	r0, r2
  120030:	eb00486b 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  120034:	e1a03000 	mov	r3, r0
  120038:	e3530000 	cmp	r3, #0
  12003c:	1a000005 	bne	120058 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  120040:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  120044:	e3403014 	movt	r3, #20
  120048:	e5933014 	ldr	r3, [r3, #20]
  12004c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120050:	e35300e0 	cmp	r3, #224	; 0xe0
  120054:	1a000008 	bne	12007c <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  120058:	e30c3a18 	movw	r3, #51736	; 0xca18
  12005c:	e3403015 	movt	r3, #21
  120060:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120064:	e2833001 	add	r3, r3, #1
  120068:	e6ff2073 	uxth	r2, r3
  12006c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120070:	e3403015 	movt	r3, #21
  120074:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  120078:	ea0003b6 	b	120f58 <tcp_input+0xff0>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  12007c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120080:	e1d320b8 	ldrh	r2, [r3, #8]
  120084:	e59f3f20 	ldr	r3, [pc, #3872]	; 120fac <tcp_input+0x1044>
  120088:	e58d3000 	str	r3, [sp]
  12008c:	e59f3f1c 	ldr	r3, [pc, #3868]	; 120fb0 <tcp_input+0x1048>
  120090:	e3a01006 	mov	r1, #6
  120094:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120098:	ebffe0a1 	bl	118324 <ip_chksum_pseudo>
  12009c:	e1a03000 	mov	r3, r0
  1200a0:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  1200a4:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1200a8:	e3530000 	cmp	r3, #0
  1200ac:	0a000008 	beq	1200d4 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  1200b0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1200b4:	e3403015 	movt	r3, #21
  1200b8:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  1200bc:	e2833001 	add	r3, r3, #1
  1200c0:	e6ff2073 	uxth	r2, r3
  1200c4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1200c8:	e3403015 	movt	r3, #21
  1200cc:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  1200d0:	ea0003a0 	b	120f58 <tcp_input+0xff0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  1200d4:	e30e3228 	movw	r3, #57896	; 0xe228
  1200d8:	e3403014 	movt	r3, #20
  1200dc:	e5933000 	ldr	r3, [r3]
  1200e0:	e1d330bc 	ldrh	r3, [r3, #12]
  1200e4:	e6ff3073 	uxth	r3, r3
  1200e8:	e1a00003 	mov	r0, r3
  1200ec:	ebffd86d 	bl	1162a8 <lwip_htons>
  1200f0:	e1a03000 	mov	r3, r0
  1200f4:	e1a03623 	lsr	r3, r3, #12
  1200f8:	e6ff3073 	uxth	r3, r3
  1200fc:	e6ef3073 	uxtb	r3, r3
  120100:	e1a03103 	lsl	r3, r3, #2
  120104:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  120108:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  12010c:	e3530013 	cmp	r3, #19
  120110:	9a000005 	bls	12012c <tcp_input+0x1c4>
  120114:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120118:	e6ff2073 	uxth	r2, r3
  12011c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120120:	e1d330b8 	ldrh	r3, [r3, #8]
  120124:	e1520003 	cmp	r2, r3
  120128:	9a000008 	bls	120150 <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  12012c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120130:	e3403015 	movt	r3, #21
  120134:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120138:	e2833001 	add	r3, r3, #1
  12013c:	e6ff2073 	uxth	r2, r3
  120140:	e30c3a18 	movw	r3, #51736	; 0xca18
  120144:	e3403015 	movt	r3, #21
  120148:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12014c:	ea000381 	b	120f58 <tcp_input+0xff0>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  120150:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120154:	e6ff3073 	uxth	r3, r3
  120158:	e2433014 	sub	r3, r3, #20
  12015c:	e6ff2073 	uxth	r2, r3
  120160:	e30e322c 	movw	r3, #57900	; 0xe22c
  120164:	e3403014 	movt	r3, #20
  120168:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  12016c:	e30e3230 	movw	r3, #57904	; 0xe230
  120170:	e3403014 	movt	r3, #20
  120174:	e3a02000 	mov	r2, #0
  120178:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  12017c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120180:	e1d320ba 	ldrh	r2, [r3, #10]
  120184:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120188:	e6ff3073 	uxth	r3, r3
  12018c:	e1520003 	cmp	r2, r3
  120190:	3a00000e 	bcc	1201d0 <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  120194:	e30e322c 	movw	r3, #57900	; 0xe22c
  120198:	e3403014 	movt	r3, #20
  12019c:	e1d320b0 	ldrh	r2, [r3]
  1201a0:	e30e322e 	movw	r3, #57902	; 0xe22e
  1201a4:	e3403014 	movt	r3, #20
  1201a8:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  1201ac:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1201b0:	e6ff3073 	uxth	r3, r3
  1201b4:	e2633000 	rsb	r3, r3, #0
  1201b8:	e6ff3073 	uxth	r3, r3
  1201bc:	e6bf3073 	sxth	r3, r3
  1201c0:	e1a01003 	mov	r1, r3
  1201c4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1201c8:	ebffea4f 	bl	11ab0c <pbuf_header>
  1201cc:	ea000061 	b	120358 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  1201d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1201d4:	e5933000 	ldr	r3, [r3]
  1201d8:	e3530000 	cmp	r3, #0
  1201dc:	1a000006 	bne	1201fc <tcp_input+0x294>
  1201e0:	e3070fd8 	movw	r0, #32728	; 0x7fd8
  1201e4:	e3400014 	movt	r0, #20
  1201e8:	ebff8bc9 	bl	103114 <rt_kprintf>
  1201ec:	e3a010b0 	mov	r1, #176	; 0xb0
  1201f0:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  1201f4:	e3400014 	movt	r0, #20
  1201f8:	ebffaae5 	bl	10ad94 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  1201fc:	e3e01013 	mvn	r1, #19
  120200:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120204:	ebffea40 	bl	11ab0c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  120208:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12020c:	e1d320ba 	ldrh	r2, [r3, #10]
  120210:	e30e322e 	movw	r3, #57902	; 0xe22e
  120214:	e3403014 	movt	r3, #20
  120218:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  12021c:	e30e322c 	movw	r3, #57900	; 0xe22c
  120220:	e3403014 	movt	r3, #20
  120224:	e1d320b0 	ldrh	r2, [r3]
  120228:	e30e322e 	movw	r3, #57902	; 0xe22e
  12022c:	e3403014 	movt	r3, #20
  120230:	e1d330b0 	ldrh	r3, [r3]
  120234:	e0423003 	sub	r3, r2, r3
  120238:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  12023c:	e30e322e 	movw	r3, #57902	; 0xe22e
  120240:	e3403014 	movt	r3, #20
  120244:	e1d330b0 	ldrh	r3, [r3]
  120248:	e2633000 	rsb	r3, r3, #0
  12024c:	e6ff3073 	uxth	r3, r3
  120250:	e6bf3073 	sxth	r3, r3
  120254:	e1a01003 	mov	r1, r3
  120258:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12025c:	ebffea2a 	bl	11ab0c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  120260:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120264:	e5933000 	ldr	r3, [r3]
  120268:	e1d330ba 	ldrh	r3, [r3, #10]
  12026c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  120270:	e1520003 	cmp	r2, r3
  120274:	9a000008 	bls	12029c <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  120278:	e30c3a18 	movw	r3, #51736	; 0xca18
  12027c:	e3403015 	movt	r3, #21
  120280:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120284:	e2833001 	add	r3, r3, #1
  120288:	e6ff2073 	uxth	r2, r3
  12028c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120290:	e3403015 	movt	r3, #21
  120294:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  120298:	ea00032e 	b	120f58 <tcp_input+0xff0>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  12029c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202a0:	e5933000 	ldr	r3, [r3]
  1202a4:	e5932004 	ldr	r2, [r3, #4]
  1202a8:	e30e3230 	movw	r3, #57904	; 0xe230
  1202ac:	e3403014 	movt	r3, #20
  1202b0:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  1202b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202b8:	e5932000 	ldr	r2, [r3]
  1202bc:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1202c0:	e2633000 	rsb	r3, r3, #0
  1202c4:	e6ff3073 	uxth	r3, r3
  1202c8:	e6bf3073 	sxth	r3, r3
  1202cc:	e1a01003 	mov	r1, r3
  1202d0:	e1a00002 	mov	r0, r2
  1202d4:	ebffea0c 	bl	11ab0c <pbuf_header>
    p->tot_len -= opt2len;
  1202d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202dc:	e1d320b8 	ldrh	r2, [r3, #8]
  1202e0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1202e4:	e0423003 	sub	r3, r2, r3
  1202e8:	e6ff2073 	uxth	r2, r3
  1202ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202f0:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  1202f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202f8:	e1d330ba 	ldrh	r3, [r3, #10]
  1202fc:	e3530000 	cmp	r3, #0
  120300:	0a000006 	beq	120320 <tcp_input+0x3b8>
  120304:	e3080018 	movw	r0, #32792	; 0x8018
  120308:	e3400014 	movt	r0, #20
  12030c:	ebff8b80 	bl	103114 <rt_kprintf>
  120310:	e3a010cd 	mov	r1, #205	; 0xcd
  120314:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  120318:	e3400014 	movt	r0, #20
  12031c:	ebffaa9c 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  120320:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120324:	e1d320b8 	ldrh	r2, [r3, #8]
  120328:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12032c:	e5933000 	ldr	r3, [r3]
  120330:	e1d330b8 	ldrh	r3, [r3, #8]
  120334:	e1520003 	cmp	r2, r3
  120338:	0a000006 	beq	120358 <tcp_input+0x3f0>
  12033c:	e3080024 	movw	r0, #32804	; 0x8024
  120340:	e3400014 	movt	r0, #20
  120344:	ebff8b72 	bl	103114 <rt_kprintf>
  120348:	e3a010ce 	mov	r1, #206	; 0xce
  12034c:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  120350:	e3400014 	movt	r0, #20
  120354:	ebffaa8e 	bl	10ad94 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  120358:	e30e3228 	movw	r3, #57896	; 0xe228
  12035c:	e3403014 	movt	r3, #20
  120360:	e5933000 	ldr	r3, [r3]
  120364:	e1d330b0 	ldrh	r3, [r3]
  120368:	e6ff2073 	uxth	r2, r3
  12036c:	e30e3228 	movw	r3, #57896	; 0xe228
  120370:	e3403014 	movt	r3, #20
  120374:	e5934000 	ldr	r4, [r3]
  120378:	e1a00002 	mov	r0, r2
  12037c:	ebffd7c9 	bl	1162a8 <lwip_htons>
  120380:	e1a03000 	mov	r3, r0
  120384:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  120388:	e30e3228 	movw	r3, #57896	; 0xe228
  12038c:	e3403014 	movt	r3, #20
  120390:	e5933000 	ldr	r3, [r3]
  120394:	e1d330b2 	ldrh	r3, [r3, #2]
  120398:	e6ff2073 	uxth	r2, r3
  12039c:	e30e3228 	movw	r3, #57896	; 0xe228
  1203a0:	e3403014 	movt	r3, #20
  1203a4:	e5934000 	ldr	r4, [r3]
  1203a8:	e1a00002 	mov	r0, r2
  1203ac:	ebffd7bd 	bl	1162a8 <lwip_htons>
  1203b0:	e1a03000 	mov	r3, r0
  1203b4:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  1203b8:	e30e3228 	movw	r3, #57896	; 0xe228
  1203bc:	e3403014 	movt	r3, #20
  1203c0:	e5933000 	ldr	r3, [r3]
  1203c4:	e5932004 	ldr	r2, [r3, #4]
  1203c8:	e30e3228 	movw	r3, #57896	; 0xe228
  1203cc:	e3403014 	movt	r3, #20
  1203d0:	e5934000 	ldr	r4, [r3]
  1203d4:	e1a00002 	mov	r0, r2
  1203d8:	ebffd7be 	bl	1162d8 <lwip_htonl>
  1203dc:	e1a03000 	mov	r3, r0
  1203e0:	e5843004 	str	r3, [r4, #4]
  1203e4:	e5942004 	ldr	r2, [r4, #4]
  1203e8:	e30e3238 	movw	r3, #57912	; 0xe238
  1203ec:	e3403014 	movt	r3, #20
  1203f0:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  1203f4:	e30e3228 	movw	r3, #57896	; 0xe228
  1203f8:	e3403014 	movt	r3, #20
  1203fc:	e5933000 	ldr	r3, [r3]
  120400:	e5932008 	ldr	r2, [r3, #8]
  120404:	e30e3228 	movw	r3, #57896	; 0xe228
  120408:	e3403014 	movt	r3, #20
  12040c:	e5934000 	ldr	r4, [r3]
  120410:	e1a00002 	mov	r0, r2
  120414:	ebffd7af 	bl	1162d8 <lwip_htonl>
  120418:	e1a03000 	mov	r3, r0
  12041c:	e5843008 	str	r3, [r4, #8]
  120420:	e5942008 	ldr	r2, [r4, #8]
  120424:	e30e323c 	movw	r3, #57916	; 0xe23c
  120428:	e3403014 	movt	r3, #20
  12042c:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  120430:	e30e3228 	movw	r3, #57896	; 0xe228
  120434:	e3403014 	movt	r3, #20
  120438:	e5933000 	ldr	r3, [r3]
  12043c:	e1d330be 	ldrh	r3, [r3, #14]
  120440:	e6ff2073 	uxth	r2, r3
  120444:	e30e3228 	movw	r3, #57896	; 0xe228
  120448:	e3403014 	movt	r3, #20
  12044c:	e5934000 	ldr	r4, [r3]
  120450:	e1a00002 	mov	r0, r2
  120454:	ebffd793 	bl	1162a8 <lwip_htons>
  120458:	e1a03000 	mov	r3, r0
  12045c:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  120460:	e30e3228 	movw	r3, #57896	; 0xe228
  120464:	e3403014 	movt	r3, #20
  120468:	e5933000 	ldr	r3, [r3]
  12046c:	e1d330bc 	ldrh	r3, [r3, #12]
  120470:	e6ff3073 	uxth	r3, r3
  120474:	e1a00003 	mov	r0, r3
  120478:	ebffd78a 	bl	1162a8 <lwip_htons>
  12047c:	e1a03000 	mov	r3, r0
  120480:	e6ef3073 	uxtb	r3, r3
  120484:	e203303f 	and	r3, r3, #63	; 0x3f
  120488:	e6ef2073 	uxtb	r2, r3
  12048c:	e30e3244 	movw	r3, #57924	; 0xe244
  120490:	e3403014 	movt	r3, #20
  120494:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  120498:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12049c:	e1d320b8 	ldrh	r2, [r3, #8]
  1204a0:	e30e3244 	movw	r3, #57924	; 0xe244
  1204a4:	e3403014 	movt	r3, #20
  1204a8:	e5d33000 	ldrb	r3, [r3]
  1204ac:	e2033003 	and	r3, r3, #3
  1204b0:	e3530000 	cmp	r3, #0
  1204b4:	13a03001 	movne	r3, #1
  1204b8:	03a03000 	moveq	r3, #0
  1204bc:	e6ef3073 	uxtb	r3, r3
  1204c0:	e6ff3073 	uxth	r3, r3
  1204c4:	e0823003 	add	r3, r2, r3
  1204c8:	e6ff2073 	uxth	r2, r3
  1204cc:	e30e3242 	movw	r3, #57922	; 0xe242
  1204d0:	e3403014 	movt	r3, #20
  1204d4:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  1204d8:	e3a03000 	mov	r3, #0
  1204dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1204e0:	e30c3c08 	movw	r3, #52232	; 0xcc08
  1204e4:	e3403015 	movt	r3, #21
  1204e8:	e5933000 	ldr	r3, [r3]
  1204ec:	e50b3010 	str	r3, [fp, #-16]
  1204f0:	ea000077 	b	1206d4 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  1204f4:	e51b3010 	ldr	r3, [fp, #-16]
  1204f8:	e5933014 	ldr	r3, [r3, #20]
  1204fc:	e3530000 	cmp	r3, #0
  120500:	1a000006 	bne	120520 <tcp_input+0x5b8>
  120504:	e3080044 	movw	r0, #32836	; 0x8044
  120508:	e3400014 	movt	r0, #20
  12050c:	ebff8b00 	bl	103114 <rt_kprintf>
  120510:	e3a010e0 	mov	r1, #224	; 0xe0
  120514:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  120518:	e3400014 	movt	r0, #20
  12051c:	ebffaa1c 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  120520:	e51b3010 	ldr	r3, [fp, #-16]
  120524:	e5933014 	ldr	r3, [r3, #20]
  120528:	e353000a 	cmp	r3, #10
  12052c:	1a000006 	bne	12054c <tcp_input+0x5e4>
  120530:	e308006c 	movw	r0, #32876	; 0x806c
  120534:	e3400014 	movt	r0, #20
  120538:	ebff8af5 	bl	103114 <rt_kprintf>
  12053c:	e3a010e1 	mov	r1, #225	; 0xe1
  120540:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  120544:	e3400014 	movt	r0, #20
  120548:	ebffaa11 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  12054c:	e51b3010 	ldr	r3, [fp, #-16]
  120550:	e5933014 	ldr	r3, [r3, #20]
  120554:	e3530001 	cmp	r3, #1
  120558:	1a000006 	bne	120578 <tcp_input+0x610>
  12055c:	e3080098 	movw	r0, #32920	; 0x8098
  120560:	e3400014 	movt	r0, #20
  120564:	ebff8aea 	bl	103114 <rt_kprintf>
  120568:	e3a010e2 	mov	r1, #226	; 0xe2
  12056c:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  120570:	e3400014 	movt	r0, #20
  120574:	ebffaa06 	bl	10ad94 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  120578:	e51b3010 	ldr	r3, [fp, #-16]
  12057c:	e1d321bc 	ldrh	r2, [r3, #28]
  120580:	e30e3228 	movw	r3, #57896	; 0xe228
  120584:	e3403014 	movt	r3, #20
  120588:	e5933000 	ldr	r3, [r3]
  12058c:	e1d330b0 	ldrh	r3, [r3]
  120590:	e6ff3073 	uxth	r3, r3
  120594:	e1520003 	cmp	r2, r3
  120598:	1a000048 	bne	1206c0 <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  12059c:	e51b3010 	ldr	r3, [fp, #-16]
  1205a0:	e1d321ba 	ldrh	r2, [r3, #26]
  1205a4:	e30e3228 	movw	r3, #57896	; 0xe228
  1205a8:	e3403014 	movt	r3, #20
  1205ac:	e5933000 	ldr	r3, [r3]
  1205b0:	e1d330b2 	ldrh	r3, [r3, #2]
  1205b4:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  1205b8:	e1520003 	cmp	r2, r3
  1205bc:	1a00003f 	bne	1206c0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1205c0:	e51b3010 	ldr	r3, [fp, #-16]
  1205c4:	e5932004 	ldr	r2, [r3, #4]
  1205c8:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1205cc:	e3403014 	movt	r3, #20
  1205d0:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  1205d4:	e1520003 	cmp	r2, r3
  1205d8:	1a000038 	bne	1206c0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  1205dc:	e51b3010 	ldr	r3, [fp, #-16]
  1205e0:	e5932000 	ldr	r2, [r3]
  1205e4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1205e8:	e3403014 	movt	r3, #20
  1205ec:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1205f0:	e1520003 	cmp	r2, r3
  1205f4:	1a000031 	bne	1206c0 <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  1205f8:	e51b3010 	ldr	r3, [fp, #-16]
  1205fc:	e593300c 	ldr	r3, [r3, #12]
  120600:	e51b2010 	ldr	r2, [fp, #-16]
  120604:	e1520003 	cmp	r2, r3
  120608:	1a000006 	bne	120628 <tcp_input+0x6c0>
  12060c:	e30800c0 	movw	r0, #32960	; 0x80c0
  120610:	e3400014 	movt	r0, #20
  120614:	ebff8abe 	bl	103114 <rt_kprintf>
  120618:	e3a010ea 	mov	r1, #234	; 0xea
  12061c:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  120620:	e3400014 	movt	r0, #20
  120624:	ebffa9da 	bl	10ad94 <sys_arch_assert>
      if (prev != NULL) {
  120628:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12062c:	e3530000 	cmp	r3, #0
  120630:	0a00000d 	beq	12066c <tcp_input+0x704>
        prev->next = pcb->next;
  120634:	e51b3010 	ldr	r3, [fp, #-16]
  120638:	e593200c 	ldr	r2, [r3, #12]
  12063c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120640:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  120644:	e30c3c08 	movw	r3, #52232	; 0xcc08
  120648:	e3403015 	movt	r3, #21
  12064c:	e5932000 	ldr	r2, [r3]
  120650:	e51b3010 	ldr	r3, [fp, #-16]
  120654:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  120658:	e30c3c08 	movw	r3, #52232	; 0xcc08
  12065c:	e3403015 	movt	r3, #21
  120660:	e51b2010 	ldr	r2, [fp, #-16]
  120664:	e5832000 	str	r2, [r3]
  120668:	ea000007 	b	12068c <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  12066c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120670:	e3403015 	movt	r3, #21
  120674:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120678:	e2833001 	add	r3, r3, #1
  12067c:	e6ff2073 	uxth	r2, r3
  120680:	e30c3a18 	movw	r3, #51736	; 0xca18
  120684:	e3403015 	movt	r3, #21
  120688:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  12068c:	e51b3010 	ldr	r3, [fp, #-16]
  120690:	e593300c 	ldr	r3, [r3, #12]
  120694:	e51b2010 	ldr	r2, [fp, #-16]
  120698:	e1520003 	cmp	r2, r3
  12069c:	1a000010 	bne	1206e4 <tcp_input+0x77c>
  1206a0:	e30800ec 	movw	r0, #33004	; 0x80ec
  1206a4:	e3400014 	movt	r0, #20
  1206a8:	ebff8a99 	bl	103114 <rt_kprintf>
  1206ac:	e3a010f2 	mov	r1, #242	; 0xf2
  1206b0:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  1206b4:	e3400014 	movt	r0, #20
  1206b8:	ebffa9b5 	bl	10ad94 <sys_arch_assert>
      break;
  1206bc:	ea000008 	b	1206e4 <tcp_input+0x77c>
    }
    prev = pcb;
  1206c0:	e51b3010 	ldr	r3, [fp, #-16]
  1206c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1206c8:	e51b3010 	ldr	r3, [fp, #-16]
  1206cc:	e593300c 	ldr	r3, [r3, #12]
  1206d0:	e50b3010 	str	r3, [fp, #-16]
  1206d4:	e51b3010 	ldr	r3, [fp, #-16]
  1206d8:	e3530000 	cmp	r3, #0
  1206dc:	1affff84 	bne	1204f4 <tcp_input+0x58c>
  1206e0:	ea000000 	b	1206e8 <tcp_input+0x780>
      break;
  1206e4:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  1206e8:	e51b3010 	ldr	r3, [fp, #-16]
  1206ec:	e3530000 	cmp	r3, #0
  1206f0:	1a00008e 	bne	120930 <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  1206f4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  1206f8:	e3403015 	movt	r3, #21
  1206fc:	e5933000 	ldr	r3, [r3]
  120700:	e50b3010 	str	r3, [fp, #-16]
  120704:	ea000032 	b	1207d4 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  120708:	e51b3010 	ldr	r3, [fp, #-16]
  12070c:	e5933014 	ldr	r3, [r3, #20]
  120710:	e353000a 	cmp	r3, #10
  120714:	0a000006 	beq	120734 <tcp_input+0x7cc>
  120718:	e3080118 	movw	r0, #33048	; 0x8118
  12071c:	e3400014 	movt	r0, #20
  120720:	ebff8a7b 	bl	103114 <rt_kprintf>
  120724:	e3a010fc 	mov	r1, #252	; 0xfc
  120728:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  12072c:	e3400014 	movt	r0, #20
  120730:	ebffa997 	bl	10ad94 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  120734:	e51b3010 	ldr	r3, [fp, #-16]
  120738:	e1d321bc 	ldrh	r2, [r3, #28]
  12073c:	e30e3228 	movw	r3, #57896	; 0xe228
  120740:	e3403014 	movt	r3, #20
  120744:	e5933000 	ldr	r3, [r3]
  120748:	e1d330b0 	ldrh	r3, [r3]
  12074c:	e6ff3073 	uxth	r3, r3
  120750:	e1520003 	cmp	r2, r3
  120754:	1a00001b 	bne	1207c8 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  120758:	e51b3010 	ldr	r3, [fp, #-16]
  12075c:	e1d321ba 	ldrh	r2, [r3, #26]
  120760:	e30e3228 	movw	r3, #57896	; 0xe228
  120764:	e3403014 	movt	r3, #20
  120768:	e5933000 	ldr	r3, [r3]
  12076c:	e1d330b2 	ldrh	r3, [r3, #2]
  120770:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  120774:	e1520003 	cmp	r2, r3
  120778:	1a000012 	bne	1207c8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  12077c:	e51b3010 	ldr	r3, [fp, #-16]
  120780:	e5932004 	ldr	r2, [r3, #4]
  120784:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  120788:	e3403014 	movt	r3, #20
  12078c:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120790:	e1520003 	cmp	r2, r3
  120794:	1a00000b 	bne	1207c8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120798:	e51b3010 	ldr	r3, [fp, #-16]
  12079c:	e5932000 	ldr	r2, [r3]
  1207a0:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1207a4:	e3403014 	movt	r3, #20
  1207a8:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1207ac:	e1520003 	cmp	r2, r3
  1207b0:	1a000004 	bne	1207c8 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  1207b4:	e51b0010 	ldr	r0, [fp, #-16]
  1207b8:	eb0002d7 	bl	12131c <tcp_timewait_input>
        pbuf_free(p);
  1207bc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1207c0:	ebffe8ef 	bl	11ab84 <pbuf_free>
        return;
  1207c4:	ea0001f6 	b	120fa4 <tcp_input+0x103c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  1207c8:	e51b3010 	ldr	r3, [fp, #-16]
  1207cc:	e593300c 	ldr	r3, [r3, #12]
  1207d0:	e50b3010 	str	r3, [fp, #-16]
  1207d4:	e51b3010 	ldr	r3, [fp, #-16]
  1207d8:	e3530000 	cmp	r3, #0
  1207dc:	1affffc9 	bne	120708 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  1207e0:	e3a03000 	mov	r3, #0
  1207e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  1207e8:	e30c3c10 	movw	r3, #52240	; 0xcc10
  1207ec:	e3403015 	movt	r3, #21
  1207f0:	e5933000 	ldr	r3, [r3]
  1207f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1207f8:	ea00001f 	b	12087c <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  1207fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120800:	e1d321ba 	ldrh	r2, [r3, #26]
  120804:	e30e3228 	movw	r3, #57896	; 0xe228
  120808:	e3403014 	movt	r3, #20
  12080c:	e5933000 	ldr	r3, [r3]
  120810:	e1d330b2 	ldrh	r3, [r3, #2]
  120814:	e6ff3073 	uxth	r3, r3
  120818:	e1520003 	cmp	r2, r3
  12081c:	1a000011 	bne	120868 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  120820:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120824:	e5932000 	ldr	r2, [r3]
  120828:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12082c:	e3403014 	movt	r3, #20
  120830:	e5933014 	ldr	r3, [r3, #20]
  120834:	e1520003 	cmp	r2, r3
  120838:	0a000013 	beq	12088c <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  12083c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120840:	e3530000 	cmp	r3, #0
  120844:	0a000003 	beq	120858 <tcp_input+0x8f0>
  120848:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12084c:	e5933000 	ldr	r3, [r3]
  120850:	e3530000 	cmp	r3, #0
  120854:	1a000003 	bne	120868 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  120858:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12085c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  120860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120864:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  120868:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12086c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120870:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120874:	e593300c 	ldr	r3, [r3, #12]
  120878:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12087c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120880:	e3530000 	cmp	r3, #0
  120884:	1affffdc 	bne	1207fc <tcp_input+0x894>
  120888:	ea000000 	b	120890 <tcp_input+0x928>
            break;
  12088c:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120894:	e3530000 	cmp	r3, #0
  120898:	1a000003 	bne	1208ac <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  12089c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1208a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  1208a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1208a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  1208ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208b0:	e3530000 	cmp	r3, #0
  1208b4:	0a00001d 	beq	120930 <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  1208b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1208bc:	e3530000 	cmp	r3, #0
  1208c0:	0a00000d 	beq	1208fc <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  1208c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208c8:	e593200c 	ldr	r2, [r3, #12]
  1208cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1208d0:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  1208d4:	e30c3c10 	movw	r3, #52240	; 0xcc10
  1208d8:	e3403015 	movt	r3, #21
  1208dc:	e5932000 	ldr	r2, [r3]
  1208e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208e4:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  1208e8:	e30c3c10 	movw	r3, #52240	; 0xcc10
  1208ec:	e3403015 	movt	r3, #21
  1208f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1208f4:	e5832000 	str	r2, [r3]
  1208f8:	ea000007 	b	12091c <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  1208fc:	e30c3a18 	movw	r3, #51736	; 0xca18
  120900:	e3403015 	movt	r3, #21
  120904:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120908:	e2833001 	add	r3, r3, #1
  12090c:	e6ff2073 	uxth	r2, r3
  120910:	e30c3a18 	movw	r3, #51736	; 0xca18
  120914:	e3403015 	movt	r3, #21
  120918:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  12091c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  120920:	eb0001a3 	bl	120fb4 <tcp_listen_input>
      pbuf_free(p);
  120924:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120928:	ebffe895 	bl	11ab84 <pbuf_free>
      return;
  12092c:	ea00019c 	b	120fa4 <tcp_input+0x103c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  120930:	e51b3010 	ldr	r3, [fp, #-16]
  120934:	e3530000 	cmp	r3, #0
  120938:	0a00014e 	beq	120e78 <tcp_input+0xf10>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  12093c:	e30e3218 	movw	r3, #57880	; 0xe218
  120940:	e3403014 	movt	r3, #20
  120944:	e3a02000 	mov	r2, #0
  120948:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  12094c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120950:	e1d320b8 	ldrh	r2, [r3, #8]
  120954:	e30e3218 	movw	r3, #57880	; 0xe218
  120958:	e3403014 	movt	r3, #20
  12095c:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  120960:	e30e3218 	movw	r3, #57880	; 0xe218
  120964:	e3403014 	movt	r3, #20
  120968:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12096c:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  120970:	e30e3228 	movw	r3, #57896	; 0xe228
  120974:	e3403014 	movt	r3, #20
  120978:	e5932000 	ldr	r2, [r3]
  12097c:	e30e3218 	movw	r3, #57880	; 0xe218
  120980:	e3403014 	movt	r3, #20
  120984:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  120988:	e30e3248 	movw	r3, #57928	; 0xe248
  12098c:	e3403014 	movt	r3, #20
  120990:	e3a02000 	mov	r2, #0
  120994:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120998:	e30e3245 	movw	r3, #57925	; 0xe245
  12099c:	e3403014 	movt	r3, #20
  1209a0:	e3a02000 	mov	r2, #0
  1209a4:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  1209a8:	e30e3240 	movw	r3, #57920	; 0xe240
  1209ac:	e3403014 	movt	r3, #20
  1209b0:	e3a02000 	mov	r2, #0
  1209b4:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  1209b8:	e30e3244 	movw	r3, #57924	; 0xe244
  1209bc:	e3403014 	movt	r3, #20
  1209c0:	e5d33000 	ldrb	r3, [r3]
  1209c4:	e2033008 	and	r3, r3, #8
  1209c8:	e3530000 	cmp	r3, #0
  1209cc:	0a000005 	beq	1209e8 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  1209d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1209d4:	e5d3300d 	ldrb	r3, [r3, #13]
  1209d8:	e3833001 	orr	r3, r3, #1
  1209dc:	e6ef2073 	uxtb	r2, r3
  1209e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1209e4:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  1209e8:	e51b3010 	ldr	r3, [fp, #-16]
  1209ec:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  1209f0:	e3530000 	cmp	r3, #0
  1209f4:	0a000023 	beq	120a88 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  1209f8:	e51b0010 	ldr	r0, [fp, #-16]
  1209fc:	ebfff969 	bl	11efa8 <tcp_process_refused_data>
  120a00:	e1a03000 	mov	r3, r0
  120a04:	e373000d 	cmn	r3, #13
  120a08:	0a000008 	beq	120a30 <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120a0c:	e51b3010 	ldr	r3, [fp, #-16]
  120a10:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120a14:	e3530000 	cmp	r3, #0
  120a18:	0a00001a 	beq	120a88 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120a1c:	e30e3242 	movw	r3, #57922	; 0xe242
  120a20:	e3403014 	movt	r3, #20
  120a24:	e1d330b0 	ldrh	r3, [r3]
  120a28:	e3530000 	cmp	r3, #0
  120a2c:	0a000015 	beq	120a88 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  120a30:	e51b3010 	ldr	r3, [fp, #-16]
  120a34:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  120a38:	e3530000 	cmp	r3, #0
  120a3c:	1a000001 	bne	120a48 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120a40:	e51b0010 	ldr	r0, [fp, #-16]
  120a44:	eb001418 	bl	125aac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120a48:	e30c3a18 	movw	r3, #51736	; 0xca18
  120a4c:	e3403015 	movt	r3, #21
  120a50:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120a54:	e2833001 	add	r3, r3, #1
  120a58:	e6ff2073 	uxth	r2, r3
  120a5c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120a60:	e3403015 	movt	r3, #21
  120a64:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120a68:	e30c3a18 	movw	r3, #51736	; 0xca18
  120a6c:	e3403015 	movt	r3, #21
  120a70:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120a74:	e2832001 	add	r2, r3, #1
  120a78:	e30c3a18 	movw	r3, #51736	; 0xca18
  120a7c:	e3403015 	movt	r3, #21
  120a80:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120a84:	ea0000e4 	b	120e1c <tcp_input+0xeb4>
      }
    }
    tcp_input_pcb = pcb;
  120a88:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  120a8c:	e3403015 	movt	r3, #21
  120a90:	e51b2010 	ldr	r2, [fp, #-16]
  120a94:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120a98:	e51b0010 	ldr	r0, [fp, #-16]
  120a9c:	eb00027d 	bl	121498 <tcp_process>
  120aa0:	e1a03000 	mov	r3, r0
  120aa4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120aa8:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120aac:	e373000d 	cmn	r3, #13
  120ab0:	0a0000d2 	beq	120e00 <tcp_input+0xe98>
      if (recv_flags & TF_RESET) {
  120ab4:	e30e3245 	movw	r3, #57925	; 0xe245
  120ab8:	e3403014 	movt	r3, #20
  120abc:	e5d33000 	ldrb	r3, [r3]
  120ac0:	e2033008 	and	r3, r3, #8
  120ac4:	e3530000 	cmp	r3, #0
  120ac8:	0a000012 	beq	120b18 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120acc:	e51b3010 	ldr	r3, [fp, #-16]
  120ad0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120ad4:	e3530000 	cmp	r3, #0
  120ad8:	0a000006 	beq	120af8 <tcp_input+0xb90>
  120adc:	e51b3010 	ldr	r3, [fp, #-16]
  120ae0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120ae4:	e51b2010 	ldr	r2, [fp, #-16]
  120ae8:	e5922010 	ldr	r2, [r2, #16]
  120aec:	e3e0100d 	mvn	r1, #13
  120af0:	e1a00002 	mov	r0, r2
  120af4:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120af8:	e51b1010 	ldr	r1, [fp, #-16]
  120afc:	e30c0c08 	movw	r0, #52232	; 0xcc08
  120b00:	e3400015 	movt	r0, #21
  120b04:	ebfffc11 	bl	11fb50 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120b08:	e51b1010 	ldr	r1, [fp, #-16]
  120b0c:	e3a00002 	mov	r0, #2
  120b10:	ebffe10d 	bl	118f4c <memp_free>
  120b14:	ea0000c0 	b	120e1c <tcp_input+0xeb4>
      } else {
        err = ERR_OK;
  120b18:	e3a03000 	mov	r3, #0
  120b1c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120b20:	e30e3240 	movw	r3, #57920	; 0xe240
  120b24:	e3403014 	movt	r3, #20
  120b28:	e1d330b0 	ldrh	r3, [r3]
  120b2c:	e3530000 	cmp	r3, #0
  120b30:	0a00001a 	beq	120ba0 <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120b34:	e30e3240 	movw	r3, #57920	; 0xe240
  120b38:	e3403014 	movt	r3, #20
  120b3c:	e1d330b0 	ldrh	r3, [r3]
  120b40:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120b44:	e51b3010 	ldr	r3, [fp, #-16]
  120b48:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120b4c:	e3530000 	cmp	r3, #0
  120b50:	0a000009 	beq	120b7c <tcp_input+0xc14>
  120b54:	e51b3010 	ldr	r3, [fp, #-16]
  120b58:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120b5c:	e51b2010 	ldr	r2, [fp, #-16]
  120b60:	e5920010 	ldr	r0, [r2, #16]
  120b64:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120b68:	e51b1010 	ldr	r1, [fp, #-16]
  120b6c:	e12fff33 	blx	r3
  120b70:	e1a03000 	mov	r3, r0
  120b74:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120b78:	ea000001 	b	120b84 <tcp_input+0xc1c>
  120b7c:	e3a03000 	mov	r3, #0
  120b80:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120b84:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120b88:	e373000d 	cmn	r3, #13
  120b8c:	0a00009d 	beq	120e08 <tcp_input+0xea0>
              goto aborted;
            }
          }
          recv_acked = 0;
  120b90:	e30e3240 	movw	r3, #57920	; 0xe240
  120b94:	e3403014 	movt	r3, #20
  120b98:	e3a02000 	mov	r2, #0
  120b9c:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120ba0:	e30e3245 	movw	r3, #57925	; 0xe245
  120ba4:	e3403014 	movt	r3, #20
  120ba8:	e5d33000 	ldrb	r3, [r3]
  120bac:	e2033010 	and	r3, r3, #16
  120bb0:	e3530000 	cmp	r3, #0
  120bb4:	0a000017 	beq	120c18 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120bb8:	e51b3010 	ldr	r3, [fp, #-16]
  120bbc:	e5d3301e 	ldrb	r3, [r3, #30]
  120bc0:	e2033010 	and	r3, r3, #16
  120bc4:	e3530000 	cmp	r3, #0
  120bc8:	1a00000a 	bne	120bf8 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120bcc:	e51b3010 	ldr	r3, [fp, #-16]
  120bd0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120bd4:	e3530000 	cmp	r3, #0
  120bd8:	0a000006 	beq	120bf8 <tcp_input+0xc90>
  120bdc:	e51b3010 	ldr	r3, [fp, #-16]
  120be0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120be4:	e51b2010 	ldr	r2, [fp, #-16]
  120be8:	e5922010 	ldr	r2, [r2, #16]
  120bec:	e3e0100e 	mvn	r1, #14
  120bf0:	e1a00002 	mov	r0, r2
  120bf4:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120bf8:	e51b1010 	ldr	r1, [fp, #-16]
  120bfc:	e30c0c08 	movw	r0, #52232	; 0xcc08
  120c00:	e3400015 	movt	r0, #21
  120c04:	ebfffbd1 	bl	11fb50 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120c08:	e51b1010 	ldr	r1, [fp, #-16]
  120c0c:	e3a00002 	mov	r0, #2
  120c10:	ebffe0cd 	bl	118f4c <memp_free>
          goto aborted;
  120c14:	ea000080 	b	120e1c <tcp_input+0xeb4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120c18:	e30e3248 	movw	r3, #57928	; 0xe248
  120c1c:	e3403014 	movt	r3, #20
  120c20:	e5933000 	ldr	r3, [r3]
  120c24:	e3530000 	cmp	r3, #0
  120c28:	0a00003c 	beq	120d20 <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120c2c:	e51b3010 	ldr	r3, [fp, #-16]
  120c30:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120c34:	e3530000 	cmp	r3, #0
  120c38:	0a000006 	beq	120c58 <tcp_input+0xcf0>
  120c3c:	e3080148 	movw	r0, #33096	; 0x8148
  120c40:	e3400014 	movt	r0, #20
  120c44:	ebff8932 	bl	103114 <rt_kprintf>
  120c48:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120c4c:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  120c50:	e3400014 	movt	r0, #20
  120c54:	ebffa84e 	bl	10ad94 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120c58:	e51b3010 	ldr	r3, [fp, #-16]
  120c5c:	e5d3301e 	ldrb	r3, [r3, #30]
  120c60:	e2033010 	and	r3, r3, #16
  120c64:	e3530000 	cmp	r3, #0
  120c68:	0a000007 	beq	120c8c <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120c6c:	e30e3248 	movw	r3, #57928	; 0xe248
  120c70:	e3403014 	movt	r3, #20
  120c74:	e5933000 	ldr	r3, [r3]
  120c78:	e1a00003 	mov	r0, r3
  120c7c:	ebffe7c0 	bl	11ab84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120c80:	e51b0010 	ldr	r0, [fp, #-16]
  120c84:	ebfff297 	bl	11d6e8 <tcp_abort>
            goto aborted;
  120c88:	ea000063 	b	120e1c <tcp_input+0xeb4>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120c8c:	e51b3010 	ldr	r3, [fp, #-16]
  120c90:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120c94:	e3530000 	cmp	r3, #0
  120c98:	0a00000c 	beq	120cd0 <tcp_input+0xd68>
  120c9c:	e51b3010 	ldr	r3, [fp, #-16]
  120ca0:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120ca4:	e51b3010 	ldr	r3, [fp, #-16]
  120ca8:	e5930010 	ldr	r0, [r3, #16]
  120cac:	e30e3248 	movw	r3, #57928	; 0xe248
  120cb0:	e3403014 	movt	r3, #20
  120cb4:	e5932000 	ldr	r2, [r3]
  120cb8:	e3a03000 	mov	r3, #0
  120cbc:	e51b1010 	ldr	r1, [fp, #-16]
  120cc0:	e12fff34 	blx	r4
  120cc4:	e1a03000 	mov	r3, r0
  120cc8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120ccc:	ea000008 	b	120cf4 <tcp_input+0xd8c>
  120cd0:	e30e3248 	movw	r3, #57928	; 0xe248
  120cd4:	e3403014 	movt	r3, #20
  120cd8:	e5932000 	ldr	r2, [r3]
  120cdc:	e3a03000 	mov	r3, #0
  120ce0:	e51b1010 	ldr	r1, [fp, #-16]
  120ce4:	e3a00000 	mov	r0, #0
  120ce8:	ebfff956 	bl	11f248 <tcp_recv_null>
  120cec:	e1a03000 	mov	r3, r0
  120cf0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  120cf4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120cf8:	e373000d 	cmn	r3, #13
  120cfc:	0a000043 	beq	120e10 <tcp_input+0xea8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  120d00:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120d04:	e3530000 	cmp	r3, #0
  120d08:	0a000004 	beq	120d20 <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  120d0c:	e30e3248 	movw	r3, #57928	; 0xe248
  120d10:	e3403014 	movt	r3, #20
  120d14:	e5932000 	ldr	r2, [r3]
  120d18:	e51b3010 	ldr	r3, [fp, #-16]
  120d1c:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  120d20:	e30e3245 	movw	r3, #57925	; 0xe245
  120d24:	e3403014 	movt	r3, #20
  120d28:	e5d33000 	ldrb	r3, [r3]
  120d2c:	e2033020 	and	r3, r3, #32
  120d30:	e3530000 	cmp	r3, #0
  120d34:	0a00002a 	beq	120de4 <tcp_input+0xe7c>
          if (pcb->refused_data != NULL) {
  120d38:	e51b3010 	ldr	r3, [fp, #-16]
  120d3c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d40:	e3530000 	cmp	r3, #0
  120d44:	0a000008 	beq	120d6c <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  120d48:	e51b3010 	ldr	r3, [fp, #-16]
  120d4c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d50:	e5d3200d 	ldrb	r2, [r3, #13]
  120d54:	e51b3010 	ldr	r3, [fp, #-16]
  120d58:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d5c:	e3822020 	orr	r2, r2, #32
  120d60:	e6ef2072 	uxtb	r2, r2
  120d64:	e5c3200d 	strb	r2, [r3, #13]
  120d68:	ea00001d 	b	120de4 <tcp_input+0xe7c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  120d6c:	e51b3010 	ldr	r3, [fp, #-16]
  120d70:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120d74:	e3530a02 	cmp	r3, #8192	; 0x2000
  120d78:	0a000005 	beq	120d94 <tcp_input+0xe2c>
              pcb->rcv_wnd++;
  120d7c:	e51b3010 	ldr	r3, [fp, #-16]
  120d80:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120d84:	e2833001 	add	r3, r3, #1
  120d88:	e6ff2073 	uxth	r2, r3
  120d8c:	e51b3010 	ldr	r3, [fp, #-16]
  120d90:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  120d94:	e51b3010 	ldr	r3, [fp, #-16]
  120d98:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120d9c:	e3530000 	cmp	r3, #0
  120da0:	0a00000a 	beq	120dd0 <tcp_input+0xe68>
  120da4:	e51b3010 	ldr	r3, [fp, #-16]
  120da8:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120dac:	e51b3010 	ldr	r3, [fp, #-16]
  120db0:	e5930010 	ldr	r0, [r3, #16]
  120db4:	e3a03000 	mov	r3, #0
  120db8:	e3a02000 	mov	r2, #0
  120dbc:	e51b1010 	ldr	r1, [fp, #-16]
  120dc0:	e12fff34 	blx	r4
  120dc4:	e1a03000 	mov	r3, r0
  120dc8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120dcc:	ea000001 	b	120dd8 <tcp_input+0xe70>
  120dd0:	e3a03000 	mov	r3, #0
  120dd4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120dd8:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120ddc:	e373000d 	cmn	r3, #13
  120de0:	0a00000c 	beq	120e18 <tcp_input+0xeb0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  120de4:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  120de8:	e3403015 	movt	r3, #21
  120dec:	e3a02000 	mov	r2, #0
  120df0:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  120df4:	e51b0010 	ldr	r0, [fp, #-16]
  120df8:	eb00138c 	bl	125c30 <tcp_output>
  120dfc:	ea000006 	b	120e1c <tcp_input+0xeb4>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  120e00:	e320f000 	nop	{0}
  120e04:	ea000004 	b	120e1c <tcp_input+0xeb4>
              goto aborted;
  120e08:	e320f000 	nop	{0}
  120e0c:	ea000002 	b	120e1c <tcp_input+0xeb4>
            goto aborted;
  120e10:	e320f000 	nop	{0}
  120e14:	ea000000 	b	120e1c <tcp_input+0xeb4>
              goto aborted;
  120e18:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  120e1c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  120e20:	e3403015 	movt	r3, #21
  120e24:	e3a02000 	mov	r2, #0
  120e28:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  120e2c:	e30e3248 	movw	r3, #57928	; 0xe248
  120e30:	e3403014 	movt	r3, #20
  120e34:	e3a02000 	mov	r2, #0
  120e38:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  120e3c:	e30e3218 	movw	r3, #57880	; 0xe218
  120e40:	e3403014 	movt	r3, #20
  120e44:	e5933004 	ldr	r3, [r3, #4]
  120e48:	e3530000 	cmp	r3, #0
  120e4c:	0a000053 	beq	120fa0 <tcp_input+0x1038>
    {
      pbuf_free(inseg.p);
  120e50:	e30e3218 	movw	r3, #57880	; 0xe218
  120e54:	e3403014 	movt	r3, #20
  120e58:	e5933004 	ldr	r3, [r3, #4]
  120e5c:	e1a00003 	mov	r0, r3
  120e60:	ebffe747 	bl	11ab84 <pbuf_free>
      inseg.p = NULL;
  120e64:	e30e3218 	movw	r3, #57880	; 0xe218
  120e68:	e3403014 	movt	r3, #20
  120e6c:	e3a02000 	mov	r2, #0
  120e70:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  120e74:	ea000049 	b	120fa0 <tcp_input+0x1038>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  120e78:	e30e3228 	movw	r3, #57896	; 0xe228
  120e7c:	e3403014 	movt	r3, #20
  120e80:	e5933000 	ldr	r3, [r3]
  120e84:	e1d330bc 	ldrh	r3, [r3, #12]
  120e88:	e6ff3073 	uxth	r3, r3
  120e8c:	e1a00003 	mov	r0, r3
  120e90:	ebffd504 	bl	1162a8 <lwip_htons>
  120e94:	e1a03000 	mov	r3, r0
  120e98:	e2033004 	and	r3, r3, #4
  120e9c:	e3530000 	cmp	r3, #0
  120ea0:	1a000029 	bne	120f4c <tcp_input+0xfe4>
      TCP_STATS_INC(tcp.proterr);
  120ea4:	e30c3a18 	movw	r3, #51736	; 0xca18
  120ea8:	e3403015 	movt	r3, #21
  120eac:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120eb0:	e2833001 	add	r3, r3, #1
  120eb4:	e6ff2073 	uxth	r2, r3
  120eb8:	e30c3a18 	movw	r3, #51736	; 0xca18
  120ebc:	e3403015 	movt	r3, #21
  120ec0:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  120ec4:	e30c3a18 	movw	r3, #51736	; 0xca18
  120ec8:	e3403015 	movt	r3, #21
  120ecc:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120ed0:	e2833001 	add	r3, r3, #1
  120ed4:	e6ff2073 	uxth	r2, r3
  120ed8:	e30c3a18 	movw	r3, #51736	; 0xca18
  120edc:	e3403015 	movt	r3, #21
  120ee0:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120ee4:	e30e323c 	movw	r3, #57916	; 0xe23c
  120ee8:	e3403014 	movt	r3, #20
  120eec:	e5930000 	ldr	r0, [r3]
  120ef0:	e30e3242 	movw	r3, #57922	; 0xe242
  120ef4:	e3403014 	movt	r3, #20
  120ef8:	e1d330b0 	ldrh	r3, [r3]
  120efc:	e1a02003 	mov	r2, r3
  120f00:	e30e3238 	movw	r3, #57912	; 0xe238
  120f04:	e3403014 	movt	r3, #20
  120f08:	e5933000 	ldr	r3, [r3]
  120f0c:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120f10:	e30e3228 	movw	r3, #57896	; 0xe228
  120f14:	e3403014 	movt	r3, #20
  120f18:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120f1c:	e1d330b2 	ldrh	r3, [r3, #2]
  120f20:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120f24:	e30e3228 	movw	r3, #57896	; 0xe228
  120f28:	e3403014 	movt	r3, #20
  120f2c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120f30:	e1d330b0 	ldrh	r3, [r3]
  120f34:	e6ff3073 	uxth	r3, r3
  120f38:	e58d3004 	str	r3, [sp, #4]
  120f3c:	e58d2000 	str	r2, [sp]
  120f40:	e59f3068 	ldr	r3, [pc, #104]	; 120fb0 <tcp_input+0x1048>
  120f44:	e59f2060 	ldr	r2, [pc, #96]	; 120fac <tcp_input+0x1044>
  120f48:	eb00159e 	bl	1265c8 <tcp_rst>
    pbuf_free(p);
  120f4c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120f50:	ebffe70b 	bl	11ab84 <pbuf_free>
  return;
  120f54:	ea000011 	b	120fa0 <tcp_input+0x1038>
dropped:
  TCP_STATS_INC(tcp.drop);
  120f58:	e30c3a18 	movw	r3, #51736	; 0xca18
  120f5c:	e3403015 	movt	r3, #21
  120f60:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120f64:	e2833001 	add	r3, r3, #1
  120f68:	e6ff2073 	uxth	r2, r3
  120f6c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120f70:	e3403015 	movt	r3, #21
  120f74:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  120f78:	e30c3a18 	movw	r3, #51736	; 0xca18
  120f7c:	e3403015 	movt	r3, #21
  120f80:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120f84:	e2832001 	add	r2, r3, #1
  120f88:	e30c3a18 	movw	r3, #51736	; 0xca18
  120f8c:	e3403015 	movt	r3, #21
  120f90:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  120f94:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120f98:	ebffe6f9 	bl	11ab84 <pbuf_free>
  120f9c:	ea000000 	b	120fa4 <tcp_input+0x103c>
  return;
  120fa0:	e320f000 	nop	{0}
}
  120fa4:	e24bd008 	sub	sp, fp, #8
  120fa8:	e8bd8810 	pop	{r4, fp, pc}
  120fac:	0014f5f4 	.word	0x0014f5f4
  120fb0:	0014f5f0 	.word	0x0014f5f0

00120fb4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  120fb4:	e92d4800 	push	{fp, lr}
  120fb8:	e28db004 	add	fp, sp, #4
  120fbc:	e24dd020 	sub	sp, sp, #32
  120fc0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  120fc4:	e30e3244 	movw	r3, #57924	; 0xe244
  120fc8:	e3403014 	movt	r3, #20
  120fcc:	e5d33000 	ldrb	r3, [r3]
  120fd0:	e2033004 	and	r3, r3, #4
  120fd4:	e3530000 	cmp	r3, #0
  120fd8:	1a0000c8 	bne	121300 <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  120fdc:	e30e3244 	movw	r3, #57924	; 0xe244
  120fe0:	e3403014 	movt	r3, #20
  120fe4:	e5d33000 	ldrb	r3, [r3]
  120fe8:	e2033010 	and	r3, r3, #16
  120fec:	e3530000 	cmp	r3, #0
  120ff0:	0a00001a 	beq	121060 <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120ff4:	e30e323c 	movw	r3, #57916	; 0xe23c
  120ff8:	e3403014 	movt	r3, #20
  120ffc:	e5930000 	ldr	r0, [r3]
  121000:	e30e3242 	movw	r3, #57922	; 0xe242
  121004:	e3403014 	movt	r3, #20
  121008:	e1d330b0 	ldrh	r3, [r3]
  12100c:	e1a02003 	mov	r2, r3
  121010:	e30e3238 	movw	r3, #57912	; 0xe238
  121014:	e3403014 	movt	r3, #20
  121018:	e5933000 	ldr	r3, [r3]
  12101c:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121020:	e30e3228 	movw	r3, #57896	; 0xe228
  121024:	e3403014 	movt	r3, #20
  121028:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12102c:	e1d330b2 	ldrh	r3, [r3, #2]
  121030:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121034:	e30e3228 	movw	r3, #57896	; 0xe228
  121038:	e3403014 	movt	r3, #20
  12103c:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121040:	e1d330b0 	ldrh	r3, [r3]
  121044:	e6ff3073 	uxth	r3, r3
  121048:	e58d3004 	str	r3, [sp, #4]
  12104c:	e58d2000 	str	r2, [sp]
  121050:	e59f32bc 	ldr	r3, [pc, #700]	; 121314 <tcp_listen_input+0x360>
  121054:	e59f22bc 	ldr	r2, [pc, #700]	; 121318 <tcp_listen_input+0x364>
  121058:	eb00155a 	bl	1265c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  12105c:	ea0000a9 	b	121308 <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  121060:	e30e3244 	movw	r3, #57924	; 0xe244
  121064:	e3403014 	movt	r3, #20
  121068:	e5d33000 	ldrb	r3, [r3]
  12106c:	e2033002 	and	r3, r3, #2
  121070:	e3530000 	cmp	r3, #0
  121074:	0a0000a3 	beq	121308 <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  121078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12107c:	e5d33018 	ldrb	r3, [r3, #24]
  121080:	e1a00003 	mov	r0, r3
  121084:	ebfff935 	bl	11f560 <tcp_alloc>
  121088:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  12108c:	e51b3008 	ldr	r3, [fp, #-8]
  121090:	e3530000 	cmp	r3, #0
  121094:	1a000018 	bne	1210fc <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  121098:	e30c3a18 	movw	r3, #51736	; 0xca18
  12109c:	e3403015 	movt	r3, #21
  1210a0:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1210a4:	e2833001 	add	r3, r3, #1
  1210a8:	e6ff2073 	uxth	r2, r3
  1210ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1210b0:	e3403015 	movt	r3, #21
  1210b4:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1210b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1210bc:	e593301c 	ldr	r3, [r3, #28]
  1210c0:	e3530000 	cmp	r3, #0
  1210c4:	0a000009 	beq	1210f0 <tcp_listen_input+0x13c>
  1210c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1210cc:	e593301c 	ldr	r3, [r3, #28]
  1210d0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1210d4:	e5920010 	ldr	r0, [r2, #16]
  1210d8:	e3e02000 	mvn	r2, #0
  1210dc:	e3a01000 	mov	r1, #0
  1210e0:	e12fff33 	blx	r3
  1210e4:	e1a03000 	mov	r3, r0
  1210e8:	e54b300e 	strb	r3, [fp, #-14]
      return;
  1210ec:	ea000086 	b	12130c <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1210f0:	e3e0300f 	mvn	r3, #15
  1210f4:	e54b300e 	strb	r3, [fp, #-14]
      return;
  1210f8:	ea000083 	b	12130c <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  1210fc:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  121100:	e3403014 	movt	r3, #20
  121104:	e5932014 	ldr	r2, [r3, #20]
  121108:	e51b3008 	ldr	r3, [fp, #-8]
  12110c:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  121110:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  121114:	e3403014 	movt	r3, #20
  121118:	e5932010 	ldr	r2, [r3, #16]
  12111c:	e51b3008 	ldr	r3, [fp, #-8]
  121120:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  121124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121128:	e1d321ba 	ldrh	r2, [r3, #26]
  12112c:	e51b3008 	ldr	r3, [fp, #-8]
  121130:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  121134:	e30e3228 	movw	r3, #57896	; 0xe228
  121138:	e3403014 	movt	r3, #20
  12113c:	e5933000 	ldr	r3, [r3]
  121140:	e1d330b0 	ldrh	r3, [r3]
  121144:	e6ff2073 	uxth	r2, r3
  121148:	e51b3008 	ldr	r3, [fp, #-8]
  12114c:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  121150:	e51b3008 	ldr	r3, [fp, #-8]
  121154:	e3a02003 	mov	r2, #3
  121158:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  12115c:	e30e3238 	movw	r3, #57912	; 0xe238
  121160:	e3403014 	movt	r3, #20
  121164:	e5933000 	ldr	r3, [r3]
  121168:	e2832001 	add	r2, r3, #1
  12116c:	e51b3008 	ldr	r3, [fp, #-8]
  121170:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  121174:	e51b3008 	ldr	r3, [fp, #-8]
  121178:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12117c:	e51b3008 	ldr	r3, [fp, #-8]
  121180:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  121184:	e51b0008 	ldr	r0, [fp, #-8]
  121188:	ebfffadc 	bl	11fd00 <tcp_next_iss>
  12118c:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  121190:	e51b3008 	ldr	r3, [fp, #-8]
  121194:	e51b200c 	ldr	r2, [fp, #-12]
  121198:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  12119c:	e51b3008 	ldr	r3, [fp, #-8]
  1211a0:	e51b200c 	ldr	r2, [fp, #-12]
  1211a4:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  1211a8:	e51b3008 	ldr	r3, [fp, #-8]
  1211ac:	e51b200c 	ldr	r2, [fp, #-12]
  1211b0:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  1211b4:	e51b3008 	ldr	r3, [fp, #-8]
  1211b8:	e51b200c 	ldr	r2, [fp, #-12]
  1211bc:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  1211c0:	e30e3238 	movw	r3, #57912	; 0xe238
  1211c4:	e3403014 	movt	r3, #20
  1211c8:	e5933000 	ldr	r3, [r3]
  1211cc:	e2432001 	sub	r2, r3, #1
  1211d0:	e51b3008 	ldr	r3, [fp, #-8]
  1211d4:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  1211d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1211dc:	e5932010 	ldr	r2, [r3, #16]
  1211e0:	e51b3008 	ldr	r3, [fp, #-8]
  1211e4:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  1211e8:	e51b3008 	ldr	r3, [fp, #-8]
  1211ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1211f0:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  1211f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1211f8:	e5d33008 	ldrb	r3, [r3, #8]
  1211fc:	e203300c 	and	r3, r3, #12
  121200:	e6ef2073 	uxtb	r2, r3
  121204:	e51b3008 	ldr	r3, [fp, #-8]
  121208:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  12120c:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121210:	e3403015 	movt	r3, #21
  121214:	e5932000 	ldr	r2, [r3]
  121218:	e51b3008 	ldr	r3, [fp, #-8]
  12121c:	e583200c 	str	r2, [r3, #12]
  121220:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121224:	e3403015 	movt	r3, #21
  121228:	e51b2008 	ldr	r2, [fp, #-8]
  12122c:	e5832000 	str	r2, [r3]
  121230:	eb001738 	bl	126f18 <tcp_timer_needed>
  121234:	e30c3c04 	movw	r3, #52228	; 0xcc04
  121238:	e3403015 	movt	r3, #21
  12123c:	e3a02001 	mov	r2, #1
  121240:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  121244:	e51b0008 	ldr	r0, [fp, #-8]
  121248:	eb000bf1 	bl	124214 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  12124c:	e30e3228 	movw	r3, #57896	; 0xe228
  121250:	e3403014 	movt	r3, #20
  121254:	e5933000 	ldr	r3, [r3]
  121258:	e1d330be 	ldrh	r3, [r3, #14]
  12125c:	e6ff2073 	uxth	r2, r3
  121260:	e51b3008 	ldr	r3, [fp, #-8]
  121264:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  121268:	e51b3008 	ldr	r3, [fp, #-8]
  12126c:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121270:	e51b3008 	ldr	r3, [fp, #-8]
  121274:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  121278:	e51b3008 	ldr	r3, [fp, #-8]
  12127c:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121280:	e51b3008 	ldr	r3, [fp, #-8]
  121284:	e2833004 	add	r3, r3, #4
  121288:	e1a01003 	mov	r1, r3
  12128c:	e1a00002 	mov	r0, r2
  121290:	ebfffaaf 	bl	11fd54 <tcp_eff_send_mss_impl>
  121294:	e1a03000 	mov	r3, r0
  121298:	e1a02003 	mov	r2, r3
  12129c:	e51b3008 	ldr	r3, [fp, #-8]
  1212a0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  1212a4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1212a8:	e3403015 	movt	r3, #21
  1212ac:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  1212b0:	e2832001 	add	r2, r3, #1
  1212b4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1212b8:	e3403015 	movt	r3, #21
  1212bc:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  1212c0:	e3a01012 	mov	r1, #18
  1212c4:	e51b0008 	ldr	r0, [fp, #-8]
  1212c8:	eb001109 	bl	1256f4 <tcp_enqueue_flags>
  1212cc:	e1a03000 	mov	r3, r0
  1212d0:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  1212d4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1212d8:	e3530000 	cmp	r3, #0
  1212dc:	0a000003 	beq	1212f0 <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  1212e0:	e3a01000 	mov	r1, #0
  1212e4:	e51b0008 	ldr	r0, [fp, #-8]
  1212e8:	ebfff05f 	bl	11d46c <tcp_abandon>
      return;
  1212ec:	ea000006 	b	12130c <tcp_listen_input+0x358>
    tcp_output(npcb);
  1212f0:	e51b0008 	ldr	r0, [fp, #-8]
  1212f4:	eb00124d 	bl	125c30 <tcp_output>
  return;
  1212f8:	e320f000 	nop	{0}
  1212fc:	ea000001 	b	121308 <tcp_listen_input+0x354>
    return;
  121300:	e320f000 	nop	{0}
  121304:	ea000000 	b	12130c <tcp_listen_input+0x358>
  return;
  121308:	e320f000 	nop	{0}
}
  12130c:	e24bd004 	sub	sp, fp, #4
  121310:	e8bd8800 	pop	{fp, pc}
  121314:	0014f5f0 	.word	0x0014f5f0
  121318:	0014f5f4 	.word	0x0014f5f4

0012131c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  12131c:	e92d4800 	push	{fp, lr}
  121320:	e28db004 	add	fp, sp, #4
  121324:	e24dd010 	sub	sp, sp, #16
  121328:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  12132c:	e30e3244 	movw	r3, #57924	; 0xe244
  121330:	e3403014 	movt	r3, #20
  121334:	e5d33000 	ldrb	r3, [r3]
  121338:	e2033004 	and	r3, r3, #4
  12133c:	e3530000 	cmp	r3, #0
  121340:	1a00004d 	bne	12147c <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  121344:	e30e3244 	movw	r3, #57924	; 0xe244
  121348:	e3403014 	movt	r3, #20
  12134c:	e5d33000 	ldrb	r3, [r3]
  121350:	e2033002 	and	r3, r3, #2
  121354:	e3530000 	cmp	r3, #0
  121358:	0a00002d 	beq	121414 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  12135c:	e30e3238 	movw	r3, #57912	; 0xe238
  121360:	e3403014 	movt	r3, #20
  121364:	e5932000 	ldr	r2, [r3]
  121368:	e51b3008 	ldr	r3, [fp, #-8]
  12136c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121370:	e0423003 	sub	r3, r2, r3
  121374:	e3530000 	cmp	r3, #0
  121378:	ba000030 	blt	121440 <tcp_timewait_input+0x124>
  12137c:	e30e3238 	movw	r3, #57912	; 0xe238
  121380:	e3403014 	movt	r3, #20
  121384:	e5932000 	ldr	r2, [r3]
  121388:	e51b3008 	ldr	r3, [fp, #-8]
  12138c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121390:	e51b1008 	ldr	r1, [fp, #-8]
  121394:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  121398:	e0833001 	add	r3, r3, r1
  12139c:	e0423003 	sub	r3, r2, r3
  1213a0:	e3530000 	cmp	r3, #0
  1213a4:	ca000025 	bgt	121440 <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1213a8:	e30e323c 	movw	r3, #57916	; 0xe23c
  1213ac:	e3403014 	movt	r3, #20
  1213b0:	e5930000 	ldr	r0, [r3]
  1213b4:	e30e3242 	movw	r3, #57922	; 0xe242
  1213b8:	e3403014 	movt	r3, #20
  1213bc:	e1d330b0 	ldrh	r3, [r3]
  1213c0:	e1a02003 	mov	r2, r3
  1213c4:	e30e3238 	movw	r3, #57912	; 0xe238
  1213c8:	e3403014 	movt	r3, #20
  1213cc:	e5933000 	ldr	r3, [r3]
  1213d0:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1213d4:	e30e3228 	movw	r3, #57896	; 0xe228
  1213d8:	e3403014 	movt	r3, #20
  1213dc:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1213e0:	e1d330b2 	ldrh	r3, [r3, #2]
  1213e4:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1213e8:	e30e3228 	movw	r3, #57896	; 0xe228
  1213ec:	e3403014 	movt	r3, #20
  1213f0:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1213f4:	e1d330b0 	ldrh	r3, [r3]
  1213f8:	e6ff3073 	uxth	r3, r3
  1213fc:	e58d3004 	str	r3, [sp, #4]
  121400:	e58d2000 	str	r2, [sp]
  121404:	e59f3084 	ldr	r3, [pc, #132]	; 121490 <tcp_timewait_input+0x174>
  121408:	e59f2084 	ldr	r2, [pc, #132]	; 121494 <tcp_timewait_input+0x178>
  12140c:	eb00146d 	bl	1265c8 <tcp_rst>
      return;
  121410:	ea00001c 	b	121488 <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121414:	e30e3244 	movw	r3, #57924	; 0xe244
  121418:	e3403014 	movt	r3, #20
  12141c:	e5d33000 	ldrb	r3, [r3]
  121420:	e2033001 	and	r3, r3, #1
  121424:	e3530000 	cmp	r3, #0
  121428:	0a000004 	beq	121440 <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  12142c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  121430:	e3403015 	movt	r3, #21
  121434:	e5932000 	ldr	r2, [r3]
  121438:	e51b3008 	ldr	r3, [fp, #-8]
  12143c:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  121440:	e30e3242 	movw	r3, #57922	; 0xe242
  121444:	e3403014 	movt	r3, #20
  121448:	e1d330b0 	ldrh	r3, [r3]
  12144c:	e3530000 	cmp	r3, #0
  121450:	0a00000b 	beq	121484 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  121454:	e51b3008 	ldr	r3, [fp, #-8]
  121458:	e5d3301e 	ldrb	r3, [r3, #30]
  12145c:	e3833002 	orr	r3, r3, #2
  121460:	e6ef2073 	uxtb	r2, r3
  121464:	e51b3008 	ldr	r3, [fp, #-8]
  121468:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  12146c:	e51b0008 	ldr	r0, [fp, #-8]
  121470:	eb0011ee 	bl	125c30 <tcp_output>
  }
  return;
  121474:	e320f000 	nop	{0}
  121478:	ea000001 	b	121484 <tcp_timewait_input+0x168>
    return;
  12147c:	e320f000 	nop	{0}
  121480:	ea000000 	b	121488 <tcp_timewait_input+0x16c>
  return;
  121484:	e320f000 	nop	{0}
}
  121488:	e24bd004 	sub	sp, fp, #4
  12148c:	e8bd8800 	pop	{fp, pc}
  121490:	0014f5f0 	.word	0x0014f5f0
  121494:	0014f5f4 	.word	0x0014f5f4

00121498 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  121498:	e92d4800 	push	{fp, lr}
  12149c:	e28db004 	add	fp, sp, #4
  1214a0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1214a4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  1214a8:	e3a03000 	mov	r3, #0
  1214ac:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  1214b0:	e3a03000 	mov	r3, #0
  1214b4:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  1214b8:	e30e3244 	movw	r3, #57924	; 0xe244
  1214bc:	e3403014 	movt	r3, #20
  1214c0:	e5d33000 	ldrb	r3, [r3]
  1214c4:	e2033004 	and	r3, r3, #4
  1214c8:	e3530000 	cmp	r3, #0
  1214cc:	0a000050 	beq	121614 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  1214d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1214d4:	e5933014 	ldr	r3, [r3, #20]
  1214d8:	e3530002 	cmp	r3, #2
  1214dc:	1a000009 	bne	121508 <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  1214e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1214e4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1214e8:	e30e323c 	movw	r3, #57916	; 0xe23c
  1214ec:	e3403014 	movt	r3, #20
  1214f0:	e5933000 	ldr	r3, [r3]
  1214f4:	e1520003 	cmp	r2, r3
  1214f8:	1a000025 	bne	121594 <tcp_process+0xfc>
        acceptable = 1;
  1214fc:	e3a03001 	mov	r3, #1
  121500:	e54b3009 	strb	r3, [fp, #-9]
  121504:	ea000022 	b	121594 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  121508:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12150c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121510:	e30e3238 	movw	r3, #57912	; 0xe238
  121514:	e3403014 	movt	r3, #20
  121518:	e5933000 	ldr	r3, [r3]
  12151c:	e1520003 	cmp	r2, r3
  121520:	1a000002 	bne	121530 <tcp_process+0x98>
        acceptable = 1;
  121524:	e3a03001 	mov	r3, #1
  121528:	e54b3009 	strb	r3, [fp, #-9]
  12152c:	ea000018 	b	121594 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  121530:	e30e3238 	movw	r3, #57912	; 0xe238
  121534:	e3403014 	movt	r3, #20
  121538:	e5932000 	ldr	r2, [r3]
  12153c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121540:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121544:	e0423003 	sub	r3, r2, r3
  121548:	e3530000 	cmp	r3, #0
  12154c:	ba000010 	blt	121594 <tcp_process+0xfc>
  121550:	e30e3238 	movw	r3, #57912	; 0xe238
  121554:	e3403014 	movt	r3, #20
  121558:	e5932000 	ldr	r2, [r3]
  12155c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121560:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121564:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121568:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12156c:	e0833001 	add	r3, r3, r1
  121570:	e0423003 	sub	r3, r2, r3
  121574:	e3530000 	cmp	r3, #0
  121578:	ca000005 	bgt	121594 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  12157c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121580:	e5d3301e 	ldrb	r3, [r3, #30]
  121584:	e3833002 	orr	r3, r3, #2
  121588:	e6ef2073 	uxtb	r2, r3
  12158c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121590:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  121594:	e55b3009 	ldrb	r3, [fp, #-9]
  121598:	e3530000 	cmp	r3, #0
  12159c:	0a00001a 	beq	12160c <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  1215a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215a4:	e5933014 	ldr	r3, [r3, #20]
  1215a8:	e3530000 	cmp	r3, #0
  1215ac:	1a000006 	bne	1215cc <tcp_process+0x134>
  1215b0:	e3080164 	movw	r0, #33124	; 0x8164
  1215b4:	e3400014 	movt	r0, #20
  1215b8:	ebff86d5 	bl	103114 <rt_kprintf>
  1215bc:	e3a01fb5 	mov	r1, #724	; 0x2d4
  1215c0:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  1215c4:	e3400014 	movt	r0, #20
  1215c8:	ebffa5f1 	bl	10ad94 <sys_arch_assert>
      recv_flags |= TF_RESET;
  1215cc:	e30e3245 	movw	r3, #57925	; 0xe245
  1215d0:	e3403014 	movt	r3, #20
  1215d4:	e5d33000 	ldrb	r3, [r3]
  1215d8:	e3833008 	orr	r3, r3, #8
  1215dc:	e6ef2073 	uxtb	r2, r3
  1215e0:	e30e3245 	movw	r3, #57925	; 0xe245
  1215e4:	e3403014 	movt	r3, #20
  1215e8:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  1215ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215f0:	e5d3301e 	ldrb	r3, [r3, #30]
  1215f4:	e3c33001 	bic	r3, r3, #1
  1215f8:	e6ef2073 	uxtb	r2, r3
  1215fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121600:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  121604:	e3e0300d 	mvn	r3, #13
  121608:	ea0002fd 	b	122204 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  12160c:	e3a03000 	mov	r3, #0
  121610:	ea0002fb 	b	122204 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121614:	e30e3244 	movw	r3, #57924	; 0xe244
  121618:	e3403014 	movt	r3, #20
  12161c:	e5d33000 	ldrb	r3, [r3]
  121620:	e2033002 	and	r3, r3, #2
  121624:	e3530000 	cmp	r3, #0
  121628:	0a00000f 	beq	12166c <tcp_process+0x1d4>
  12162c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121630:	e5933014 	ldr	r3, [r3, #20]
  121634:	e3530002 	cmp	r3, #2
  121638:	0a00000b 	beq	12166c <tcp_process+0x1d4>
  12163c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121640:	e5933014 	ldr	r3, [r3, #20]
  121644:	e3530003 	cmp	r3, #3
  121648:	0a000007 	beq	12166c <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  12164c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121650:	e5d3301e 	ldrb	r3, [r3, #30]
  121654:	e3833002 	orr	r3, r3, #2
  121658:	e6ef2073 	uxtb	r2, r3
  12165c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121660:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  121664:	e3a03000 	mov	r3, #0
  121668:	ea0002e5 	b	122204 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  12166c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121670:	e5d3301e 	ldrb	r3, [r3, #30]
  121674:	e2033010 	and	r3, r3, #16
  121678:	e3530000 	cmp	r3, #0
  12167c:	1a000004 	bne	121694 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  121680:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  121684:	e3403015 	movt	r3, #21
  121688:	e5932000 	ldr	r2, [r3]
  12168c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121690:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  121694:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121698:	e3a02000 	mov	r2, #0
  12169c:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  1216a0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1216a4:	eb000ada 	bl	124214 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  1216a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216ac:	e5933014 	ldr	r3, [r3, #20]
  1216b0:	e2433002 	sub	r3, r3, #2
  1216b4:	e3530007 	cmp	r3, #7
  1216b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1216bc:	ea0002c0 	b	1221c4 <tcp_process+0xd2c>
  1216c0:	001216e0 	.word	0x001216e0
  1216c4:	00121a34 	.word	0x00121a34
  1216c8:	00121cd8 	.word	0x00121cd8
  1216cc:	00121d20 	.word	0x00121d20
  1216d0:	00121f00 	.word	0x00121f00
  1216d4:	00121cd8 	.word	0x00121cd8
  1216d8:	00122020 	.word	0x00122020
  1216dc:	00122154 	.word	0x00122154
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  1216e0:	e30e3244 	movw	r3, #57924	; 0xe244
  1216e4:	e3403014 	movt	r3, #20
  1216e8:	e5d33000 	ldrb	r3, [r3]
  1216ec:	e2033010 	and	r3, r3, #16
  1216f0:	e3530000 	cmp	r3, #0
  1216f4:	0a0000a4 	beq	12198c <tcp_process+0x4f4>
  1216f8:	e30e3244 	movw	r3, #57924	; 0xe244
  1216fc:	e3403014 	movt	r3, #20
  121700:	e5d33000 	ldrb	r3, [r3]
  121704:	e2033002 	and	r3, r3, #2
  121708:	e3530000 	cmp	r3, #0
  12170c:	0a00009e 	beq	12198c <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121714:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121718:	e2832001 	add	r2, r3, #1
  12171c:	e30e323c 	movw	r3, #57916	; 0xe23c
  121720:	e3403014 	movt	r3, #20
  121724:	e5933000 	ldr	r3, [r3]
  121728:	e1520003 	cmp	r2, r3
  12172c:	1a000096 	bne	12198c <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  121730:	e30e3238 	movw	r3, #57912	; 0xe238
  121734:	e3403014 	movt	r3, #20
  121738:	e5933000 	ldr	r3, [r3]
  12173c:	e2832001 	add	r2, r3, #1
  121740:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121744:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  121748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12174c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121754:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  121758:	e30e323c 	movw	r3, #57916	; 0xe23c
  12175c:	e3403014 	movt	r3, #20
  121760:	e5932000 	ldr	r2, [r3]
  121764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121768:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  12176c:	e30e3228 	movw	r3, #57896	; 0xe228
  121770:	e3403014 	movt	r3, #20
  121774:	e5933000 	ldr	r3, [r3]
  121778:	e1d330be 	ldrh	r3, [r3, #14]
  12177c:	e6ff2073 	uxth	r2, r3
  121780:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121784:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  121788:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12178c:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121790:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121794:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  121798:	e30e3238 	movw	r3, #57912	; 0xe238
  12179c:	e3403014 	movt	r3, #20
  1217a0:	e5933000 	ldr	r3, [r3]
  1217a4:	e2432001 	sub	r2, r3, #1
  1217a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217ac:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  1217b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217b4:	e3a02004 	mov	r2, #4
  1217b8:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  1217bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217c0:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  1217c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217c8:	e2833004 	add	r3, r3, #4
  1217cc:	e1a01003 	mov	r1, r3
  1217d0:	e1a00002 	mov	r0, r2
  1217d4:	ebfff95e 	bl	11fd54 <tcp_eff_send_mss_impl>
  1217d8:	e1a03000 	mov	r3, r0
  1217dc:	e1a02003 	mov	r2, r3
  1217e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217e4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  1217e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217ec:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1217f0:	e1a03083 	lsl	r3, r3, #1
  1217f4:	e301211c 	movw	r2, #4380	; 0x111c
  1217f8:	e1530002 	cmp	r3, r2
  1217fc:	21a02003 	movcs	r2, r3
  121800:	31a02002 	movcc	r2, r2
  121804:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121808:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  12180c:	e1a03103 	lsl	r3, r3, #2
  121810:	e1520003 	cmp	r2, r3
  121814:	31a03002 	movcc	r3, r2
  121818:	21a03003 	movcs	r3, r3
  12181c:	e6ff2073 	uxth	r2, r3
  121820:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121824:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  121828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12182c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121830:	e3530000 	cmp	r3, #0
  121834:	1a000006 	bne	121854 <tcp_process+0x3bc>
  121838:	e3080184 	movw	r0, #33156	; 0x8184
  12183c:	e3400014 	movt	r0, #20
  121840:	ebff8633 	bl	103114 <rt_kprintf>
  121844:	e3001307 	movw	r1, #775	; 0x307
  121848:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  12184c:	e3400014 	movt	r0, #20
  121850:	ebffa54f 	bl	10ad94 <sys_arch_assert>
      --pcb->snd_queuelen;
  121854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121858:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12185c:	e2433001 	sub	r3, r3, #1
  121860:	e6ff2073 	uxth	r2, r3
  121864:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121868:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  12186c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121870:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121874:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  121878:	e51b3008 	ldr	r3, [fp, #-8]
  12187c:	e3530000 	cmp	r3, #0
  121880:	1a000011 	bne	1218cc <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121884:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121888:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12188c:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121890:	e51b3008 	ldr	r3, [fp, #-8]
  121894:	e3530000 	cmp	r3, #0
  121898:	1a000006 	bne	1218b8 <tcp_process+0x420>
  12189c:	e308019c 	movw	r0, #33180	; 0x819c
  1218a0:	e3400014 	movt	r0, #20
  1218a4:	ebff861a 	bl	103114 <rt_kprintf>
  1218a8:	e300130f 	movw	r1, #783	; 0x30f
  1218ac:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  1218b0:	e3400014 	movt	r0, #20
  1218b4:	ebffa536 	bl	10ad94 <sys_arch_assert>
        pcb->unsent = rseg->next;
  1218b8:	e51b3008 	ldr	r3, [fp, #-8]
  1218bc:	e5932000 	ldr	r2, [r3]
  1218c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218c4:	e583206c 	str	r2, [r3, #108]	; 0x6c
  1218c8:	ea000003 	b	1218dc <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  1218cc:	e51b3008 	ldr	r3, [fp, #-8]
  1218d0:	e5932000 	ldr	r2, [r3]
  1218d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218d8:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  1218dc:	e51b0008 	ldr	r0, [fp, #-8]
  1218e0:	ebfff61b 	bl	11f154 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  1218e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218e8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1218ec:	e3530000 	cmp	r3, #0
  1218f0:	1a000003 	bne	121904 <tcp_process+0x46c>
        pcb->rtime = -1;
  1218f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218f8:	e3e02000 	mvn	r2, #0
  1218fc:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121900:	ea000005 	b	12191c <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121904:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121908:	e3a02000 	mov	r2, #0
  12190c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121910:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121914:	e3a02000 	mov	r2, #0
  121918:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  12191c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121920:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121924:	e3530000 	cmp	r3, #0
  121928:	0a000009 	beq	121954 <tcp_process+0x4bc>
  12192c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121930:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121934:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121938:	e5920010 	ldr	r0, [r2, #16]
  12193c:	e3a02000 	mov	r2, #0
  121940:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121944:	e12fff33 	blx	r3
  121948:	e1a03000 	mov	r3, r0
  12194c:	e54b300a 	strb	r3, [fp, #-10]
  121950:	ea000001 	b	12195c <tcp_process+0x4c4>
  121954:	e3a03000 	mov	r3, #0
  121958:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  12195c:	e15b30da 	ldrsb	r3, [fp, #-10]
  121960:	e373000d 	cmn	r3, #13
  121964:	1a000001 	bne	121970 <tcp_process+0x4d8>
        return ERR_ABRT;
  121968:	e3e0300c 	mvn	r3, #12
  12196c:	ea000224 	b	122204 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  121970:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121974:	e5d3301e 	ldrb	r3, [r3, #30]
  121978:	e3833002 	orr	r3, r3, #2
  12197c:	e6ef2073 	uxtb	r2, r3
  121980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121984:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  121988:	ea00020f 	b	1221cc <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  12198c:	e30e3244 	movw	r3, #57924	; 0xe244
  121990:	e3403014 	movt	r3, #20
  121994:	e5d33000 	ldrb	r3, [r3]
  121998:	e2033010 	and	r3, r3, #16
  12199c:	e3530000 	cmp	r3, #0
  1219a0:	0a000209 	beq	1221cc <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1219a4:	e30e323c 	movw	r3, #57916	; 0xe23c
  1219a8:	e3403014 	movt	r3, #20
  1219ac:	e5930000 	ldr	r0, [r3]
  1219b0:	e30e3242 	movw	r3, #57922	; 0xe242
  1219b4:	e3403014 	movt	r3, #20
  1219b8:	e1d330b0 	ldrh	r3, [r3]
  1219bc:	e1a02003 	mov	r2, r3
  1219c0:	e30e3238 	movw	r3, #57912	; 0xe238
  1219c4:	e3403014 	movt	r3, #20
  1219c8:	e5933000 	ldr	r3, [r3]
  1219cc:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1219d0:	e30e3228 	movw	r3, #57896	; 0xe228
  1219d4:	e3403014 	movt	r3, #20
  1219d8:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1219dc:	e1d330b2 	ldrh	r3, [r3, #2]
  1219e0:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1219e4:	e30e3228 	movw	r3, #57896	; 0xe228
  1219e8:	e3403014 	movt	r3, #20
  1219ec:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1219f0:	e1d330b0 	ldrh	r3, [r3]
  1219f4:	e6ff3073 	uxth	r3, r3
  1219f8:	e58d3004 	str	r3, [sp, #4]
  1219fc:	e58d2000 	str	r2, [sp]
  121a00:	e59f3808 	ldr	r3, [pc, #2056]	; 122210 <tcp_process+0xd78>
  121a04:	e59f2808 	ldr	r2, [pc, #2056]	; 122214 <tcp_process+0xd7c>
  121a08:	eb0012ee 	bl	1265c8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121a0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a10:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121a14:	e3530003 	cmp	r3, #3
  121a18:	8a0001eb 	bhi	1221cc <tcp_process+0xd34>
        pcb->rtime = 0;
  121a1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a20:	e3a02000 	mov	r2, #0
  121a24:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  121a28:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121a2c:	eb001362 	bl	1267bc <tcp_rexmit_rto>
    break;
  121a30:	ea0001e5 	b	1221cc <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  121a34:	e30e3244 	movw	r3, #57924	; 0xe244
  121a38:	e3403014 	movt	r3, #20
  121a3c:	e5d33000 	ldrb	r3, [r3]
  121a40:	e2033010 	and	r3, r3, #16
  121a44:	e3530000 	cmp	r3, #0
  121a48:	0a000090 	beq	121c90 <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121a4c:	e30e323c 	movw	r3, #57916	; 0xe23c
  121a50:	e3403014 	movt	r3, #20
  121a54:	e5932000 	ldr	r2, [r3]
  121a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a5c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121a60:	e0423003 	sub	r3, r2, r3
  121a64:	e2433001 	sub	r3, r3, #1
  121a68:	e3530000 	cmp	r3, #0
  121a6c:	ba00006c 	blt	121c24 <tcp_process+0x78c>
  121a70:	e30e323c 	movw	r3, #57916	; 0xe23c
  121a74:	e3403014 	movt	r3, #20
  121a78:	e5932000 	ldr	r2, [r3]
  121a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a80:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121a84:	e0423003 	sub	r3, r2, r3
  121a88:	e3530000 	cmp	r3, #0
  121a8c:	ca000064 	bgt	121c24 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a94:	e3a02004 	mov	r2, #4
  121a98:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121a9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121aa0:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121aa4:	e3530000 	cmp	r3, #0
  121aa8:	0a00000b 	beq	121adc <tcp_process+0x644>
  121aac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab0:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121ab4:	e593301c 	ldr	r3, [r3, #28]
  121ab8:	e3530000 	cmp	r3, #0
  121abc:	1a000006 	bne	121adc <tcp_process+0x644>
  121ac0:	e30801b0 	movw	r0, #33200	; 0x81b0
  121ac4:	e3400014 	movt	r0, #20
  121ac8:	ebff8591 	bl	103114 <rt_kprintf>
  121acc:	e300133e 	movw	r1, #830	; 0x33e
  121ad0:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  121ad4:	e3400014 	movt	r0, #20
  121ad8:	ebffa4ad 	bl	10ad94 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121adc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ae0:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121ae4:	e3530000 	cmp	r3, #0
  121ae8:	1a000002 	bne	121af8 <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121aec:	e3e03005 	mvn	r3, #5
  121af0:	e54b300a 	strb	r3, [fp, #-10]
  121af4:	ea000011 	b	121b40 <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121af8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121afc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121b00:	e593301c 	ldr	r3, [r3, #28]
  121b04:	e3530000 	cmp	r3, #0
  121b08:	0a00000a 	beq	121b38 <tcp_process+0x6a0>
  121b0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b10:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121b14:	e593301c 	ldr	r3, [r3, #28]
  121b18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121b1c:	e5920010 	ldr	r0, [r2, #16]
  121b20:	e3a02000 	mov	r2, #0
  121b24:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121b28:	e12fff33 	blx	r3
  121b2c:	e1a03000 	mov	r3, r0
  121b30:	e54b300a 	strb	r3, [fp, #-10]
  121b34:	ea000001 	b	121b40 <tcp_process+0x6a8>
  121b38:	e3e0300f 	mvn	r3, #15
  121b3c:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121b40:	e15b30da 	ldrsb	r3, [fp, #-10]
  121b44:	e3530000 	cmp	r3, #0
  121b48:	0a000006 	beq	121b68 <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121b4c:	e15b30da 	ldrsb	r3, [fp, #-10]
  121b50:	e373000d 	cmn	r3, #13
  121b54:	0a000001 	beq	121b60 <tcp_process+0x6c8>
            tcp_abort(pcb);
  121b58:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121b5c:	ebffeee1 	bl	11d6e8 <tcp_abort>
          }
          return ERR_ABRT;
  121b60:	e3e0300c 	mvn	r3, #12
  121b64:	ea0001a6 	b	122204 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121b68:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121b6c:	eb000217 	bl	1223d0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121b70:	e30e3240 	movw	r3, #57920	; 0xe240
  121b74:	e3403014 	movt	r3, #20
  121b78:	e1d330b0 	ldrh	r3, [r3]
  121b7c:	e3530000 	cmp	r3, #0
  121b80:	0a000007 	beq	121ba4 <tcp_process+0x70c>
          recv_acked--;
  121b84:	e30e3240 	movw	r3, #57920	; 0xe240
  121b88:	e3403014 	movt	r3, #20
  121b8c:	e1d330b0 	ldrh	r3, [r3]
  121b90:	e2433001 	sub	r3, r3, #1
  121b94:	e6ff2073 	uxth	r2, r3
  121b98:	e30e3240 	movw	r3, #57920	; 0xe240
  121b9c:	e3403014 	movt	r3, #20
  121ba0:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121ba4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ba8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121bac:	e1a03083 	lsl	r3, r3, #1
  121bb0:	e301211c 	movw	r2, #4380	; 0x111c
  121bb4:	e1530002 	cmp	r3, r2
  121bb8:	21a02003 	movcs	r2, r3
  121bbc:	31a02002 	movcc	r2, r2
  121bc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bc4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121bc8:	e1a03103 	lsl	r3, r3, #2
  121bcc:	e1520003 	cmp	r2, r3
  121bd0:	31a03002 	movcc	r3, r2
  121bd4:	21a03003 	movcs	r3, r3
  121bd8:	e6ff2073 	uxth	r2, r3
  121bdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121be0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121be4:	e30e3245 	movw	r3, #57925	; 0xe245
  121be8:	e3403014 	movt	r3, #20
  121bec:	e5d33000 	ldrb	r3, [r3]
  121bf0:	e2033020 	and	r3, r3, #32
  121bf4:	e3530000 	cmp	r3, #0
  121bf8:	0a000035 	beq	121cd4 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121bfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c00:	e5d3301e 	ldrb	r3, [r3, #30]
  121c04:	e3833002 	orr	r3, r3, #2
  121c08:	e6ef2073 	uxtb	r2, r3
  121c0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c10:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121c14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c18:	e3a02007 	mov	r2, #7
  121c1c:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121c20:	ea00002b 	b	121cd4 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121c24:	e30e323c 	movw	r3, #57916	; 0xe23c
  121c28:	e3403014 	movt	r3, #20
  121c2c:	e5930000 	ldr	r0, [r3]
  121c30:	e30e3242 	movw	r3, #57922	; 0xe242
  121c34:	e3403014 	movt	r3, #20
  121c38:	e1d330b0 	ldrh	r3, [r3]
  121c3c:	e1a02003 	mov	r2, r3
  121c40:	e30e3238 	movw	r3, #57912	; 0xe238
  121c44:	e3403014 	movt	r3, #20
  121c48:	e5933000 	ldr	r3, [r3]
  121c4c:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121c50:	e30e3228 	movw	r3, #57896	; 0xe228
  121c54:	e3403014 	movt	r3, #20
  121c58:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121c5c:	e1d330b2 	ldrh	r3, [r3, #2]
  121c60:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121c64:	e30e3228 	movw	r3, #57896	; 0xe228
  121c68:	e3403014 	movt	r3, #20
  121c6c:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121c70:	e1d330b0 	ldrh	r3, [r3]
  121c74:	e6ff3073 	uxth	r3, r3
  121c78:	e58d3004 	str	r3, [sp, #4]
  121c7c:	e58d2000 	str	r2, [sp]
  121c80:	e59f3588 	ldr	r3, [pc, #1416]	; 122210 <tcp_process+0xd78>
  121c84:	e59f2588 	ldr	r2, [pc, #1416]	; 122214 <tcp_process+0xd7c>
  121c88:	eb00124e 	bl	1265c8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121c8c:	ea000150 	b	1221d4 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121c90:	e30e3244 	movw	r3, #57924	; 0xe244
  121c94:	e3403014 	movt	r3, #20
  121c98:	e5d33000 	ldrb	r3, [r3]
  121c9c:	e2033002 	and	r3, r3, #2
  121ca0:	e3530000 	cmp	r3, #0
  121ca4:	0a00014a 	beq	1221d4 <tcp_process+0xd3c>
  121ca8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cac:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121cb0:	e2432001 	sub	r2, r3, #1
  121cb4:	e30e3238 	movw	r3, #57912	; 0xe238
  121cb8:	e3403014 	movt	r3, #20
  121cbc:	e5933000 	ldr	r3, [r3]
  121cc0:	e1520003 	cmp	r2, r3
  121cc4:	1a000142 	bne	1221d4 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121cc8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ccc:	eb0012eb 	bl	126880 <tcp_rexmit>
    break;
  121cd0:	ea00013f 	b	1221d4 <tcp_process+0xd3c>
  121cd4:	ea00013e 	b	1221d4 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  121cd8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121cdc:	eb0001bb 	bl	1223d0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  121ce0:	e30e3245 	movw	r3, #57925	; 0xe245
  121ce4:	e3403014 	movt	r3, #20
  121ce8:	e5d33000 	ldrb	r3, [r3]
  121cec:	e2033020 	and	r3, r3, #32
  121cf0:	e3530000 	cmp	r3, #0
  121cf4:	0a000138 	beq	1221dc <tcp_process+0xd44>
      tcp_ack_now(pcb);
  121cf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cfc:	e5d3301e 	ldrb	r3, [r3, #30]
  121d00:	e3833002 	orr	r3, r3, #2
  121d04:	e6ef2073 	uxtb	r2, r3
  121d08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d0c:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  121d10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d14:	e3a02007 	mov	r2, #7
  121d18:	e5832014 	str	r2, [r3, #20]
    }
    break;
  121d1c:	ea00012e 	b	1221dc <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  121d20:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d24:	eb0001a9 	bl	1223d0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121d28:	e30e3245 	movw	r3, #57925	; 0xe245
  121d2c:	e3403014 	movt	r3, #20
  121d30:	e5d33000 	ldrb	r3, [r3]
  121d34:	e2033020 	and	r3, r3, #32
  121d38:	e3530000 	cmp	r3, #0
  121d3c:	0a00005a 	beq	121eac <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121d40:	e30e3244 	movw	r3, #57924	; 0xe244
  121d44:	e3403014 	movt	r3, #20
  121d48:	e5d33000 	ldrb	r3, [r3]
  121d4c:	e2033010 	and	r3, r3, #16
  121d50:	e3530000 	cmp	r3, #0
  121d54:	0a00004a 	beq	121e84 <tcp_process+0x9ec>
  121d58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d5c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121d60:	e30e323c 	movw	r3, #57916	; 0xe23c
  121d64:	e3403014 	movt	r3, #20
  121d68:	e5933000 	ldr	r3, [r3]
  121d6c:	e1520003 	cmp	r2, r3
  121d70:	1a000043 	bne	121e84 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  121d74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121d7c:	e3530000 	cmp	r3, #0
  121d80:	1a00003f 	bne	121e84 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  121d84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d88:	e5d3301e 	ldrb	r3, [r3, #30]
  121d8c:	e3833002 	orr	r3, r3, #2
  121d90:	e6ef2073 	uxtb	r2, r3
  121d94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d98:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  121d9c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121da0:	ebfff730 	bl	11fa68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  121da4:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121da8:	e3403015 	movt	r3, #21
  121dac:	e5933000 	ldr	r3, [r3]
  121db0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121db4:	e1520003 	cmp	r2, r3
  121db8:	1a000007 	bne	121ddc <tcp_process+0x944>
  121dbc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121dc0:	e3403015 	movt	r3, #21
  121dc4:	e5933000 	ldr	r3, [r3]
  121dc8:	e593200c 	ldr	r2, [r3, #12]
  121dcc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121dd0:	e3403015 	movt	r3, #21
  121dd4:	e5832000 	str	r2, [r3]
  121dd8:	ea000014 	b	121e30 <tcp_process+0x998>
  121ddc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121de0:	e3403015 	movt	r3, #21
  121de4:	e5933000 	ldr	r3, [r3]
  121de8:	e50b3010 	str	r3, [fp, #-16]
  121dec:	ea00000c 	b	121e24 <tcp_process+0x98c>
  121df0:	e51b3010 	ldr	r3, [fp, #-16]
  121df4:	e593300c 	ldr	r3, [r3, #12]
  121df8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121dfc:	e1520003 	cmp	r2, r3
  121e00:	1a000004 	bne	121e18 <tcp_process+0x980>
  121e04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e08:	e593200c 	ldr	r2, [r3, #12]
  121e0c:	e51b3010 	ldr	r3, [fp, #-16]
  121e10:	e583200c 	str	r2, [r3, #12]
  121e14:	ea000005 	b	121e30 <tcp_process+0x998>
  121e18:	e51b3010 	ldr	r3, [fp, #-16]
  121e1c:	e593300c 	ldr	r3, [r3, #12]
  121e20:	e50b3010 	str	r3, [fp, #-16]
  121e24:	e51b3010 	ldr	r3, [fp, #-16]
  121e28:	e3530000 	cmp	r3, #0
  121e2c:	1affffef 	bne	121df0 <tcp_process+0x958>
  121e30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e34:	e3a02000 	mov	r2, #0
  121e38:	e583200c 	str	r2, [r3, #12]
  121e3c:	e30c3c04 	movw	r3, #52228	; 0xcc04
  121e40:	e3403015 	movt	r3, #21
  121e44:	e3a02001 	mov	r2, #1
  121e48:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  121e4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e50:	e3a0200a 	mov	r2, #10
  121e54:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  121e58:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121e5c:	e3403015 	movt	r3, #21
  121e60:	e5932000 	ldr	r2, [r3]
  121e64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e68:	e583200c 	str	r2, [r3, #12]
  121e6c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121e70:	e3403015 	movt	r3, #21
  121e74:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e78:	e5832000 	str	r2, [r3]
  121e7c:	eb001425 	bl	126f18 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  121e80:	ea0000d7 	b	1221e4 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  121e84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e88:	e5d3301e 	ldrb	r3, [r3, #30]
  121e8c:	e3833002 	orr	r3, r3, #2
  121e90:	e6ef2073 	uxtb	r2, r3
  121e94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e98:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  121e9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ea0:	e3a02008 	mov	r2, #8
  121ea4:	e5832014 	str	r2, [r3, #20]
    break;
  121ea8:	ea0000cd 	b	1221e4 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121eac:	e30e3244 	movw	r3, #57924	; 0xe244
  121eb0:	e3403014 	movt	r3, #20
  121eb4:	e5d33000 	ldrb	r3, [r3]
  121eb8:	e2033010 	and	r3, r3, #16
  121ebc:	e3530000 	cmp	r3, #0
  121ec0:	0a0000c7 	beq	1221e4 <tcp_process+0xd4c>
  121ec4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ec8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121ecc:	e30e323c 	movw	r3, #57916	; 0xe23c
  121ed0:	e3403014 	movt	r3, #20
  121ed4:	e5933000 	ldr	r3, [r3]
  121ed8:	e1520003 	cmp	r2, r3
  121edc:	1a0000c0 	bne	1221e4 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  121ee0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ee4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121ee8:	e3530000 	cmp	r3, #0
  121eec:	1a0000bc 	bne	1221e4 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  121ef0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ef4:	e3a02006 	mov	r2, #6
  121ef8:	e5832014 	str	r2, [r3, #20]
    break;
  121efc:	ea0000b8 	b	1221e4 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  121f00:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121f04:	eb000131 	bl	1223d0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121f08:	e30e3245 	movw	r3, #57925	; 0xe245
  121f0c:	e3403014 	movt	r3, #20
  121f10:	e5d33000 	ldrb	r3, [r3]
  121f14:	e2033020 	and	r3, r3, #32
  121f18:	e3530000 	cmp	r3, #0
  121f1c:	0a0000b2 	beq	1221ec <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  121f20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f24:	e5d3301e 	ldrb	r3, [r3, #30]
  121f28:	e3833002 	orr	r3, r3, #2
  121f2c:	e6ef2073 	uxtb	r2, r3
  121f30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f34:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  121f38:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121f3c:	ebfff6c9 	bl	11fa68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  121f40:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121f44:	e3403015 	movt	r3, #21
  121f48:	e5933000 	ldr	r3, [r3]
  121f4c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121f50:	e1520003 	cmp	r2, r3
  121f54:	1a000007 	bne	121f78 <tcp_process+0xae0>
  121f58:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121f5c:	e3403015 	movt	r3, #21
  121f60:	e5933000 	ldr	r3, [r3]
  121f64:	e593200c 	ldr	r2, [r3, #12]
  121f68:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121f6c:	e3403015 	movt	r3, #21
  121f70:	e5832000 	str	r2, [r3]
  121f74:	ea000014 	b	121fcc <tcp_process+0xb34>
  121f78:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121f7c:	e3403015 	movt	r3, #21
  121f80:	e5933000 	ldr	r3, [r3]
  121f84:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  121f88:	ea00000c 	b	121fc0 <tcp_process+0xb28>
  121f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f90:	e593300c 	ldr	r3, [r3, #12]
  121f94:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121f98:	e1520003 	cmp	r2, r3
  121f9c:	1a000004 	bne	121fb4 <tcp_process+0xb1c>
  121fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fa4:	e593200c 	ldr	r2, [r3, #12]
  121fa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121fac:	e583200c 	str	r2, [r3, #12]
  121fb0:	ea000005 	b	121fcc <tcp_process+0xb34>
  121fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121fb8:	e593300c 	ldr	r3, [r3, #12]
  121fbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  121fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121fc4:	e3530000 	cmp	r3, #0
  121fc8:	1affffef 	bne	121f8c <tcp_process+0xaf4>
  121fcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fd0:	e3a02000 	mov	r2, #0
  121fd4:	e583200c 	str	r2, [r3, #12]
  121fd8:	e30c3c04 	movw	r3, #52228	; 0xcc04
  121fdc:	e3403015 	movt	r3, #21
  121fe0:	e3a02001 	mov	r2, #1
  121fe4:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  121fe8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fec:	e3a0200a 	mov	r2, #10
  121ff0:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  121ff4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121ff8:	e3403015 	movt	r3, #21
  121ffc:	e5932000 	ldr	r2, [r3]
  122000:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122004:	e583200c 	str	r2, [r3, #12]
  122008:	e30c3c18 	movw	r3, #52248	; 0xcc18
  12200c:	e3403015 	movt	r3, #21
  122010:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122014:	e5832000 	str	r2, [r3]
  122018:	eb0013be 	bl	126f18 <tcp_timer_needed>
    }
    break;
  12201c:	ea000072 	b	1221ec <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  122020:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122024:	eb0000e9 	bl	1223d0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122028:	e30e3244 	movw	r3, #57924	; 0xe244
  12202c:	e3403014 	movt	r3, #20
  122030:	e5d33000 	ldrb	r3, [r3]
  122034:	e2033010 	and	r3, r3, #16
  122038:	e3530000 	cmp	r3, #0
  12203c:	0a00006c 	beq	1221f4 <tcp_process+0xd5c>
  122040:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122044:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122048:	e30e323c 	movw	r3, #57916	; 0xe23c
  12204c:	e3403014 	movt	r3, #20
  122050:	e5933000 	ldr	r3, [r3]
  122054:	e1520003 	cmp	r2, r3
  122058:	1a000065 	bne	1221f4 <tcp_process+0xd5c>
  12205c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122060:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122064:	e3530000 	cmp	r3, #0
  122068:	1a000061 	bne	1221f4 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  12206c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122070:	ebfff67c 	bl	11fa68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122074:	e30c3c08 	movw	r3, #52232	; 0xcc08
  122078:	e3403015 	movt	r3, #21
  12207c:	e5933000 	ldr	r3, [r3]
  122080:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122084:	e1520003 	cmp	r2, r3
  122088:	1a000007 	bne	1220ac <tcp_process+0xc14>
  12208c:	e30c3c08 	movw	r3, #52232	; 0xcc08
  122090:	e3403015 	movt	r3, #21
  122094:	e5933000 	ldr	r3, [r3]
  122098:	e593200c 	ldr	r2, [r3, #12]
  12209c:	e30c3c08 	movw	r3, #52232	; 0xcc08
  1220a0:	e3403015 	movt	r3, #21
  1220a4:	e5832000 	str	r2, [r3]
  1220a8:	ea000014 	b	122100 <tcp_process+0xc68>
  1220ac:	e30c3c08 	movw	r3, #52232	; 0xcc08
  1220b0:	e3403015 	movt	r3, #21
  1220b4:	e5933000 	ldr	r3, [r3]
  1220b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1220bc:	ea00000c 	b	1220f4 <tcp_process+0xc5c>
  1220c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1220c4:	e593300c 	ldr	r3, [r3, #12]
  1220c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220cc:	e1520003 	cmp	r2, r3
  1220d0:	1a000004 	bne	1220e8 <tcp_process+0xc50>
  1220d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220d8:	e593200c 	ldr	r2, [r3, #12]
  1220dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1220e0:	e583200c 	str	r2, [r3, #12]
  1220e4:	ea000005 	b	122100 <tcp_process+0xc68>
  1220e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1220ec:	e593300c 	ldr	r3, [r3, #12]
  1220f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1220f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1220f8:	e3530000 	cmp	r3, #0
  1220fc:	1affffef 	bne	1220c0 <tcp_process+0xc28>
  122100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122104:	e3a02000 	mov	r2, #0
  122108:	e583200c 	str	r2, [r3, #12]
  12210c:	e30c3c04 	movw	r3, #52228	; 0xcc04
  122110:	e3403015 	movt	r3, #21
  122114:	e3a02001 	mov	r2, #1
  122118:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  12211c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122120:	e3a0200a 	mov	r2, #10
  122124:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122128:	e30c3c18 	movw	r3, #52248	; 0xcc18
  12212c:	e3403015 	movt	r3, #21
  122130:	e5932000 	ldr	r2, [r3]
  122134:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122138:	e583200c 	str	r2, [r3, #12]
  12213c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  122140:	e3403015 	movt	r3, #21
  122144:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122148:	e5832000 	str	r2, [r3]
  12214c:	eb001371 	bl	126f18 <tcp_timer_needed>
    }
    break;
  122150:	ea000027 	b	1221f4 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  122154:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122158:	eb00009c 	bl	1223d0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  12215c:	e30e3244 	movw	r3, #57924	; 0xe244
  122160:	e3403014 	movt	r3, #20
  122164:	e5d33000 	ldrb	r3, [r3]
  122168:	e2033010 	and	r3, r3, #16
  12216c:	e3530000 	cmp	r3, #0
  122170:	0a000021 	beq	1221fc <tcp_process+0xd64>
  122174:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122178:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12217c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122180:	e3403014 	movt	r3, #20
  122184:	e5933000 	ldr	r3, [r3]
  122188:	e1520003 	cmp	r2, r3
  12218c:	1a00001a 	bne	1221fc <tcp_process+0xd64>
  122190:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122194:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122198:	e3530000 	cmp	r3, #0
  12219c:	1a000016 	bne	1221fc <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  1221a0:	e30e3245 	movw	r3, #57925	; 0xe245
  1221a4:	e3403014 	movt	r3, #20
  1221a8:	e5d33000 	ldrb	r3, [r3]
  1221ac:	e3833010 	orr	r3, r3, #16
  1221b0:	e6ef2073 	uxtb	r2, r3
  1221b4:	e30e3245 	movw	r3, #57925	; 0xe245
  1221b8:	e3403014 	movt	r3, #20
  1221bc:	e5c32000 	strb	r2, [r3]
    }
    break;
  1221c0:	ea00000d 	b	1221fc <tcp_process+0xd64>
  default:
    break;
  1221c4:	e320f000 	nop	{0}
  1221c8:	ea00000c 	b	122200 <tcp_process+0xd68>
    break;
  1221cc:	e320f000 	nop	{0}
  1221d0:	ea00000a 	b	122200 <tcp_process+0xd68>
    break;
  1221d4:	e320f000 	nop	{0}
  1221d8:	ea000008 	b	122200 <tcp_process+0xd68>
    break;
  1221dc:	e320f000 	nop	{0}
  1221e0:	ea000006 	b	122200 <tcp_process+0xd68>
    break;
  1221e4:	e320f000 	nop	{0}
  1221e8:	ea000004 	b	122200 <tcp_process+0xd68>
    break;
  1221ec:	e320f000 	nop	{0}
  1221f0:	ea000002 	b	122200 <tcp_process+0xd68>
    break;
  1221f4:	e320f000 	nop	{0}
  1221f8:	ea000000 	b	122200 <tcp_process+0xd68>
    break;
  1221fc:	e320f000 	nop	{0}
  }
  return ERR_OK;
  122200:	e3a03000 	mov	r3, #0
}
  122204:	e1a00003 	mov	r0, r3
  122208:	e24bd004 	sub	sp, fp, #4
  12220c:	e8bd8800 	pop	{fp, pc}
  122210:	0014f5f0 	.word	0x0014f5f0
  122214:	0014f5f4 	.word	0x0014f5f4

00122218 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  122218:	e92d4810 	push	{r4, fp, lr}
  12221c:	e28db008 	add	fp, sp, #8
  122220:	e24dd014 	sub	sp, sp, #20
  122224:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  122228:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  12222c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122230:	e593300c 	ldr	r3, [r3, #12]
  122234:	e1d330bc 	ldrh	r3, [r3, #12]
  122238:	e6ff3073 	uxth	r3, r3
  12223c:	e1a00003 	mov	r0, r3
  122240:	ebffd018 	bl	1162a8 <lwip_htons>
  122244:	e1a03000 	mov	r3, r0
  122248:	e2033001 	and	r3, r3, #1
  12224c:	e3530000 	cmp	r3, #0
  122250:	0a000022 	beq	1222e0 <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  122254:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  122258:	ebfff3ab 	bl	11f10c <tcp_segs_free>
    next = NULL;
  12225c:	e3a03000 	mov	r3, #0
  122260:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  122264:	ea000053 	b	1223b8 <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  122268:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12226c:	e593300c 	ldr	r3, [r3, #12]
  122270:	e1d330bc 	ldrh	r3, [r3, #12]
  122274:	e6ff3073 	uxth	r3, r3
  122278:	e1a00003 	mov	r0, r3
  12227c:	ebffd009 	bl	1162a8 <lwip_htons>
  122280:	e1a03000 	mov	r3, r0
  122284:	e2033001 	and	r3, r3, #1
  122288:	e3530000 	cmp	r3, #0
  12228c:	0a00000c 	beq	1222c4 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  122290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122294:	e593300c 	ldr	r3, [r3, #12]
  122298:	e1d330bc 	ldrh	r3, [r3, #12]
  12229c:	e6ff4073 	uxth	r4, r3
  1222a0:	e3a00001 	mov	r0, #1
  1222a4:	ebffcfff 	bl	1162a8 <lwip_htons>
  1222a8:	e1a03000 	mov	r3, r0
  1222ac:	e1a02003 	mov	r2, r3
  1222b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1222b4:	e593300c 	ldr	r3, [r3, #12]
  1222b8:	e1842002 	orr	r2, r4, r2
  1222bc:	e6ff2072 	uxth	r2, r2
  1222c0:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  1222c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222c8:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  1222cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222d0:	e5933000 	ldr	r3, [r3]
  1222d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  1222d8:	e51b0010 	ldr	r0, [fp, #-16]
  1222dc:	ebfff39c 	bl	11f154 <tcp_seg_free>
    while (next &&
  1222e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222e4:	e3530000 	cmp	r3, #0
  1222e8:	0a00000f 	beq	12232c <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  1222ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1222f0:	e1d330b8 	ldrh	r3, [r3, #8]
  1222f4:	e1a02003 	mov	r2, r3
  1222f8:	e30e3238 	movw	r3, #57912	; 0xe238
  1222fc:	e3403014 	movt	r3, #20
  122300:	e5933000 	ldr	r3, [r3]
  122304:	e0822003 	add	r2, r2, r3
  122308:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12230c:	e593300c 	ldr	r3, [r3, #12]
  122310:	e5933004 	ldr	r3, [r3, #4]
  122314:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  122318:	e1d110b8 	ldrh	r1, [r1, #8]
  12231c:	e0833001 	add	r3, r3, r1
  122320:	e0423003 	sub	r3, r2, r3
    while (next &&
  122324:	e3530000 	cmp	r3, #0
  122328:	aaffffce 	bge	122268 <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  12232c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122330:	e3530000 	cmp	r3, #0
  122334:	0a00001f 	beq	1223b8 <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  122338:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12233c:	e1d330b8 	ldrh	r3, [r3, #8]
  122340:	e1a02003 	mov	r2, r3
  122344:	e30e3238 	movw	r3, #57912	; 0xe238
  122348:	e3403014 	movt	r3, #20
  12234c:	e5933000 	ldr	r3, [r3]
  122350:	e0822003 	add	r2, r2, r3
  122354:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122358:	e593300c 	ldr	r3, [r3, #12]
  12235c:	e5933004 	ldr	r3, [r3, #4]
  122360:	e0423003 	sub	r3, r2, r3
    if (next &&
  122364:	e3530000 	cmp	r3, #0
  122368:	da000012 	ble	1223b8 <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  12236c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122370:	e593300c 	ldr	r3, [r3, #12]
  122374:	e5933004 	ldr	r3, [r3, #4]
  122378:	e6ff2073 	uxth	r2, r3
  12237c:	e30e3238 	movw	r3, #57912	; 0xe238
  122380:	e3403014 	movt	r3, #20
  122384:	e5933000 	ldr	r3, [r3]
  122388:	e6ff3073 	uxth	r3, r3
  12238c:	e0423003 	sub	r3, r2, r3
  122390:	e6ff2073 	uxth	r2, r3
  122394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122398:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  12239c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223a0:	e5932004 	ldr	r2, [r3, #4]
  1223a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1223ac:	e1a01003 	mov	r1, r3
  1223b0:	e1a00002 	mov	r0, r2
  1223b4:	ebffe0a9 	bl	11a660 <pbuf_realloc>
    }
  }
  cseg->next = next;
  1223b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223bc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1223c0:	e5832000 	str	r2, [r3]
}
  1223c4:	e320f000 	nop	{0}
  1223c8:	e24bd008 	sub	sp, fp, #8
  1223cc:	e8bd8810 	pop	{r4, fp, pc}

001223d0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  1223d0:	e92d4870 	push	{r4, r5, r6, fp, lr}
  1223d4:	e28db010 	add	fp, sp, #16
  1223d8:	e24dd034 	sub	sp, sp, #52	; 0x34
  1223dc:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  1223e0:	e3a03000 	mov	r3, #0
  1223e4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  1223e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1223ec:	e5933014 	ldr	r3, [r3, #20]
  1223f0:	e3530003 	cmp	r3, #3
  1223f4:	8a000006 	bhi	122414 <tcp_receive+0x44>
  1223f8:	e30801d0 	movw	r0, #33232	; 0x81d0
  1223fc:	e3400014 	movt	r0, #20
  122400:	ebff8343 	bl	103114 <rt_kprintf>
  122404:	e30013f5 	movw	r1, #1013	; 0x3f5
  122408:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  12240c:	e3400014 	movt	r0, #20
  122410:	ebffa25f 	bl	10ad94 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122414:	e30e3244 	movw	r3, #57924	; 0xe244
  122418:	e3403014 	movt	r3, #20
  12241c:	e5d33000 	ldrb	r3, [r3]
  122420:	e2033010 	and	r3, r3, #16
  122424:	e3530000 	cmp	r3, #0
  122428:	0a000268 	beq	122dd0 <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  12242c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122430:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122434:	e1a02003 	mov	r2, r3
  122438:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12243c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122440:	e0823003 	add	r3, r2, r3
  122444:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122448:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12244c:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122450:	e30e3238 	movw	r3, #57912	; 0xe238
  122454:	e3403014 	movt	r3, #20
  122458:	e5933000 	ldr	r3, [r3]
  12245c:	e0423003 	sub	r3, r2, r3
  122460:	e3530000 	cmp	r3, #0
  122464:	ba00001e 	blt	1224e4 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122468:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12246c:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122470:	e30e3238 	movw	r3, #57912	; 0xe238
  122474:	e3403014 	movt	r3, #20
  122478:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  12247c:	e1520003 	cmp	r2, r3
  122480:	1a000007 	bne	1224a4 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122484:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122488:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  12248c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122490:	e3403014 	movt	r3, #20
  122494:	e5933000 	ldr	r3, [r3]
  122498:	e0423003 	sub	r3, r2, r3
  12249c:	e3530000 	cmp	r3, #0
  1224a0:	ba00000f 	blt	1224e4 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1224a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224a8:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1224ac:	e30e323c 	movw	r3, #57916	; 0xe23c
  1224b0:	e3403014 	movt	r3, #20
  1224b4:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1224b8:	e1520003 	cmp	r2, r3
  1224bc:	1a000039 	bne	1225a8 <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1224c0:	e30e3228 	movw	r3, #57896	; 0xe228
  1224c4:	e3403014 	movt	r3, #20
  1224c8:	e5933000 	ldr	r3, [r3]
  1224cc:	e1d330be 	ldrh	r3, [r3, #14]
  1224d0:	e6ff2073 	uxth	r2, r3
  1224d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224d8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1224dc:	e1520003 	cmp	r2, r3
  1224e0:	9a000030 	bls	1225a8 <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  1224e4:	e30e3228 	movw	r3, #57896	; 0xe228
  1224e8:	e3403014 	movt	r3, #20
  1224ec:	e5933000 	ldr	r3, [r3]
  1224f0:	e1d330be 	ldrh	r3, [r3, #14]
  1224f4:	e6ff2073 	uxth	r2, r3
  1224f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224fc:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  122500:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122504:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  122508:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12250c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122510:	e1520003 	cmp	r2, r3
  122514:	2a000003 	bcs	122528 <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  122518:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12251c:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  122520:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122524:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  122528:	e30e3238 	movw	r3, #57912	; 0xe238
  12252c:	e3403014 	movt	r3, #20
  122530:	e5932000 	ldr	r2, [r3]
  122534:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122538:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  12253c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122540:	e3403014 	movt	r3, #20
  122544:	e5932000 	ldr	r2, [r3]
  122548:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12254c:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  122550:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122554:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122558:	e3530000 	cmp	r3, #0
  12255c:	1a00000a 	bne	12258c <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  122560:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122564:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122568:	e3530000 	cmp	r3, #0
  12256c:	1a00000d 	bne	1225a8 <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  122570:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122574:	e3a02000 	mov	r2, #0
  122578:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  12257c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122580:	e3a02001 	mov	r2, #1
  122584:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  122588:	ea000006 	b	1225a8 <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  12258c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122590:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122594:	e3530000 	cmp	r3, #0
  122598:	0a000002 	beq	1225a8 <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  12259c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225a0:	e3a02000 	mov	r2, #0
  1225a4:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  1225a8:	e30e323c 	movw	r3, #57916	; 0xe23c
  1225ac:	e3403014 	movt	r3, #20
  1225b0:	e5932000 	ldr	r2, [r3]
  1225b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225b8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1225bc:	e0423003 	sub	r3, r2, r3
  1225c0:	e3530000 	cmp	r3, #0
  1225c4:	ca000047 	bgt	1226e8 <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  1225c8:	e30e3242 	movw	r3, #57922	; 0xe242
  1225cc:	e3403014 	movt	r3, #20
  1225d0:	e1d330b0 	ldrh	r3, [r3]
  1225d4:	e3530000 	cmp	r3, #0
  1225d8:	1a00003b 	bne	1226cc <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  1225dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225e0:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  1225e4:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  1225e8:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  1225ec:	e0833002 	add	r3, r3, r2
  1225f0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1225f4:	e1520003 	cmp	r2, r3
  1225f8:	1a000033 	bne	1226cc <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  1225fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122600:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  122604:	e3530000 	cmp	r3, #0
  122608:	ba00002f 	blt	1226cc <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  12260c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122610:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122614:	e30e323c 	movw	r3, #57916	; 0xe23c
  122618:	e3403014 	movt	r3, #20
  12261c:	e5933000 	ldr	r3, [r3]
  122620:	e1520003 	cmp	r2, r3
  122624:	1a000028 	bne	1226cc <tcp_receive+0x2fc>
              found_dupack = 1;
  122628:	e3a03001 	mov	r3, #1
  12262c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  122630:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122634:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122638:	e35300ff 	cmp	r3, #255	; 0xff
  12263c:	0a000005 	beq	122658 <tcp_receive+0x288>
                ++pcb->dupacks;
  122640:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122644:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122648:	e2833001 	add	r3, r3, #1
  12264c:	e6ef2073 	uxtb	r2, r3
  122650:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122654:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  122658:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12265c:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122660:	e3530003 	cmp	r3, #3
  122664:	9a000012 	bls	1226b4 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122668:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12266c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122670:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122674:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122678:	e0823003 	add	r3, r2, r3
  12267c:	e6ff2073 	uxth	r2, r3
  122680:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122684:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122688:	e1520003 	cmp	r2, r3
  12268c:	9a00000e 	bls	1226cc <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  122690:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122694:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122698:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12269c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1226a0:	e0823003 	add	r3, r2, r3
  1226a4:	e6ff2073 	uxth	r2, r3
  1226a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226ac:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1226b0:	ea000005 	b	1226cc <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  1226b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226b8:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1226bc:	e3530003 	cmp	r3, #3
  1226c0:	1a000001 	bne	1226cc <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  1226c4:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1226c8:	eb0010bc 	bl	1269c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  1226cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1226d0:	e3530000 	cmp	r3, #0
  1226d4:	1a000136 	bne	122bb4 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  1226d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226dc:	e3a02000 	mov	r2, #0
  1226e0:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  1226e4:	ea000132 	b	122bb4 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  1226e8:	e30e323c 	movw	r3, #57916	; 0xe23c
  1226ec:	e3403014 	movt	r3, #20
  1226f0:	e5932000 	ldr	r2, [r3]
  1226f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226f8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1226fc:	e0423003 	sub	r3, r2, r3
  122700:	e2433001 	sub	r3, r3, #1
  122704:	e3530000 	cmp	r3, #0
  122708:	ba0000dc 	blt	122a80 <tcp_receive+0x6b0>
  12270c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122710:	e3403014 	movt	r3, #20
  122714:	e5932000 	ldr	r2, [r3]
  122718:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12271c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122720:	e0423003 	sub	r3, r2, r3
  122724:	e3530000 	cmp	r3, #0
  122728:	ca0000d4 	bgt	122a80 <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  12272c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122730:	e5d3301e 	ldrb	r3, [r3, #30]
  122734:	e2033004 	and	r3, r3, #4
  122738:	e3530000 	cmp	r3, #0
  12273c:	0a000009 	beq	122768 <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  122740:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122744:	e5d3301e 	ldrb	r3, [r3, #30]
  122748:	e3c33004 	bic	r3, r3, #4
  12274c:	e6ef2073 	uxtb	r2, r3
  122750:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122754:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  122758:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12275c:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  122760:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122764:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  122768:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12276c:	e3a02000 	mov	r2, #0
  122770:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122774:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122778:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  12277c:	e1a031c3 	asr	r3, r3, #3
  122780:	e6bf3073 	sxth	r3, r3
  122784:	e6ff2073 	uxth	r2, r3
  122788:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12278c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122790:	e6ff3073 	uxth	r3, r3
  122794:	e0823003 	add	r3, r2, r3
  122798:	e6ff3073 	uxth	r3, r3
  12279c:	e6bf2073 	sxth	r2, r3
  1227a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a4:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  1227a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227ac:	e3a02000 	mov	r2, #0
  1227b0:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  1227b4:	e30e323c 	movw	r3, #57916	; 0xe23c
  1227b8:	e3403014 	movt	r3, #20
  1227bc:	e5932000 	ldr	r2, [r3]
  1227c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227c4:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  1227c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227cc:	e5933014 	ldr	r3, [r3, #20]
  1227d0:	e3530003 	cmp	r3, #3
  1227d4:	9a000075 	bls	1229b0 <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  1227d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227dc:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1227e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227e4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1227e8:	e1520003 	cmp	r2, r3
  1227ec:	2a000012 	bcs	12283c <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  1227f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227f4:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1227f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227fc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122800:	e0823003 	add	r3, r2, r3
  122804:	e6ff2073 	uxth	r2, r3
  122808:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12280c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122810:	e1520003 	cmp	r2, r3
  122814:	9a000065 	bls	1229b0 <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  122818:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12281c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122820:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122824:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122828:	e0823003 	add	r3, r2, r3
  12282c:	e6ff2073 	uxth	r2, r3
  122830:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122834:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122838:	ea00005c 	b	1229b0 <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  12283c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122840:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  122844:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122848:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  12284c:	e1a02003 	mov	r2, r3
  122850:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122854:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122858:	e0020293 	mul	r2, r3, r2
  12285c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122860:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122864:	e1a01003 	mov	r1, r3
  122868:	e1a00002 	mov	r0, r2
  12286c:	eb0057bf 	bl	138770 <__divsi3>
  122870:	e1a03000 	mov	r3, r0
  122874:	e6ff3073 	uxth	r3, r3
  122878:	e0843003 	add	r3, r4, r3
  12287c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122880:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122884:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122888:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  12288c:	e1520003 	cmp	r2, r3
  122890:	9a000046 	bls	1229b0 <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122894:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122898:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  12289c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  1228a0:	ea000042 	b	1229b0 <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  1228a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228a8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1228ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  1228b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228b4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1228b8:	e5932000 	ldr	r2, [r3]
  1228bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228c0:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  1228c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228c8:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  1228cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228d0:	e5933004 	ldr	r3, [r3, #4]
  1228d4:	e1a00003 	mov	r0, r3
  1228d8:	ebffe12e 	bl	11ad98 <pbuf_clen>
  1228dc:	e1a03000 	mov	r3, r0
  1228e0:	e1540003 	cmp	r4, r3
  1228e4:	2a000006 	bcs	122904 <tcp_receive+0x534>
  1228e8:	e30801ec 	movw	r0, #33260	; 0x81ec
  1228ec:	e3400014 	movt	r0, #20
  1228f0:	ebff8207 	bl	103114 <rt_kprintf>
  1228f4:	e300148b 	movw	r1, #1163	; 0x48b
  1228f8:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  1228fc:	e3400014 	movt	r0, #20
  122900:	ebffa123 	bl	10ad94 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122904:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122908:	e5933004 	ldr	r3, [r3, #4]
  12290c:	e1a00003 	mov	r0, r3
  122910:	ebffe120 	bl	11ad98 <pbuf_clen>
  122914:	e1a03000 	mov	r3, r0
  122918:	e1a02003 	mov	r2, r3
  12291c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122920:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122924:	e0433002 	sub	r3, r3, r2
  122928:	e6ff2073 	uxth	r2, r3
  12292c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122930:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  122934:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122938:	e1d320b8 	ldrh	r2, [r3, #8]
  12293c:	e30e3240 	movw	r3, #57920	; 0xe240
  122940:	e3403014 	movt	r3, #20
  122944:	e1d330b0 	ldrh	r3, [r3]
  122948:	e0823003 	add	r3, r2, r3
  12294c:	e6ff2073 	uxth	r2, r3
  122950:	e30e3240 	movw	r3, #57920	; 0xe240
  122954:	e3403014 	movt	r3, #20
  122958:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  12295c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122960:	ebfff1fb 	bl	11f154 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  122964:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122968:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12296c:	e3530000 	cmp	r3, #0
  122970:	0a00000e 	beq	1229b0 <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  122974:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122978:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12297c:	e3530000 	cmp	r3, #0
  122980:	1a00000a 	bne	1229b0 <tcp_receive+0x5e0>
  122984:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122988:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12298c:	e3530000 	cmp	r3, #0
  122990:	1a000006 	bne	1229b0 <tcp_receive+0x5e0>
  122994:	e3080214 	movw	r0, #33300	; 0x8214
  122998:	e3400014 	movt	r0, #20
  12299c:	ebff81dc 	bl	103114 <rt_kprintf>
  1229a0:	e3001494 	movw	r1, #1172	; 0x494
  1229a4:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  1229a8:	e3400014 	movt	r0, #20
  1229ac:	ebffa0f8 	bl	10ad94 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  1229b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229b4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229b8:	e3530000 	cmp	r3, #0
  1229bc:	0a000020 	beq	122a44 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  1229c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229c4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229c8:	e593300c 	ldr	r3, [r3, #12]
  1229cc:	e5933004 	ldr	r3, [r3, #4]
  1229d0:	e1a00003 	mov	r0, r3
  1229d4:	ebffce3f 	bl	1162d8 <lwip_htonl>
  1229d8:	e1a04000 	mov	r4, r0
  1229dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229e0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229e4:	e1d330b8 	ldrh	r3, [r3, #8]
  1229e8:	e1a05003 	mov	r5, r3
  1229ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229f0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229f4:	e593300c 	ldr	r3, [r3, #12]
  1229f8:	e1d330bc 	ldrh	r3, [r3, #12]
  1229fc:	e6ff3073 	uxth	r3, r3
  122a00:	e1a00003 	mov	r0, r3
  122a04:	ebffce27 	bl	1162a8 <lwip_htons>
  122a08:	e1a03000 	mov	r3, r0
  122a0c:	e2033003 	and	r3, r3, #3
  122a10:	e3530000 	cmp	r3, #0
  122a14:	0a000001 	beq	122a20 <tcp_receive+0x650>
  122a18:	e3a03001 	mov	r3, #1
  122a1c:	ea000000 	b	122a24 <tcp_receive+0x654>
  122a20:	e3a03000 	mov	r3, #0
  122a24:	e0833005 	add	r3, r3, r5
  122a28:	e0842003 	add	r2, r4, r3
  122a2c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122a30:	e3403014 	movt	r3, #20
  122a34:	e5933000 	ldr	r3, [r3]
  122a38:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122a3c:	e3530000 	cmp	r3, #0
  122a40:	daffff97 	ble	1228a4 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122a44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a48:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122a4c:	e3530000 	cmp	r3, #0
  122a50:	1a000003 	bne	122a64 <tcp_receive+0x694>
        pcb->rtime = -1;
  122a54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a58:	e3e02000 	mvn	r2, #0
  122a5c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122a60:	ea000002 	b	122a70 <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122a64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a68:	e3a02000 	mov	r2, #0
  122a6c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122a70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a74:	e3a02000 	mov	r2, #0
  122a78:	e5c3201f 	strb	r2, [r3, #31]
  122a7c:	ea000001 	b	122a88 <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122a80:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122a84:	eb000c08 	bl	125aac <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122a88:	ea000049 	b	122bb4 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122a8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a90:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122a94:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122a98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a9c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122aa0:	e5932000 	ldr	r2, [r3]
  122aa4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aa8:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122aac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ab0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ab4:	e3530000 	cmp	r3, #0
  122ab8:	1a000002 	bne	122ac8 <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122abc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ac0:	e3a02000 	mov	r2, #0
  122ac4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122ac8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122acc:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122ad0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122ad4:	e5933004 	ldr	r3, [r3, #4]
  122ad8:	e1a00003 	mov	r0, r3
  122adc:	ebffe0ad 	bl	11ad98 <pbuf_clen>
  122ae0:	e1a03000 	mov	r3, r0
  122ae4:	e1540003 	cmp	r4, r3
  122ae8:	2a000006 	bcs	122b08 <tcp_receive+0x738>
  122aec:	e30801ec 	movw	r0, #33260	; 0x81ec
  122af0:	e3400014 	movt	r0, #20
  122af4:	ebff8186 	bl	103114 <rt_kprintf>
  122af8:	e30014c2 	movw	r1, #1218	; 0x4c2
  122afc:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  122b00:	e3400014 	movt	r0, #20
  122b04:	ebffa0a2 	bl	10ad94 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122b08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122b0c:	e5933004 	ldr	r3, [r3, #4]
  122b10:	e1a00003 	mov	r0, r3
  122b14:	ebffe09f 	bl	11ad98 <pbuf_clen>
  122b18:	e1a03000 	mov	r3, r0
  122b1c:	e1a02003 	mov	r2, r3
  122b20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b24:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122b28:	e0433002 	sub	r3, r3, r2
  122b2c:	e6ff2073 	uxth	r2, r3
  122b30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b34:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122b38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122b3c:	e1d320b8 	ldrh	r2, [r3, #8]
  122b40:	e30e3240 	movw	r3, #57920	; 0xe240
  122b44:	e3403014 	movt	r3, #20
  122b48:	e1d330b0 	ldrh	r3, [r3]
  122b4c:	e0823003 	add	r3, r2, r3
  122b50:	e6ff2073 	uxth	r2, r3
  122b54:	e30e3240 	movw	r3, #57920	; 0xe240
  122b58:	e3403014 	movt	r3, #20
  122b5c:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122b60:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122b64:	ebfff17a 	bl	11f154 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122b68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b6c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122b70:	e3530000 	cmp	r3, #0
  122b74:	0a00000e 	beq	122bb4 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122b78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b7c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122b80:	e3530000 	cmp	r3, #0
  122b84:	1a00000a 	bne	122bb4 <tcp_receive+0x7e4>
  122b88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b8c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b90:	e3530000 	cmp	r3, #0
  122b94:	1a000006 	bne	122bb4 <tcp_receive+0x7e4>
  122b98:	e3080214 	movw	r0, #33300	; 0x8214
  122b9c:	e3400014 	movt	r0, #20
  122ba0:	ebff815b 	bl	103114 <rt_kprintf>
  122ba4:	e30014ca 	movw	r1, #1226	; 0x4ca
  122ba8:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  122bac:	e3400014 	movt	r0, #20
  122bb0:	ebffa077 	bl	10ad94 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122bb4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122bbc:	e3530000 	cmp	r3, #0
  122bc0:	0a000028 	beq	122c68 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122bc4:	e30e323c 	movw	r3, #57916	; 0xe23c
  122bc8:	e3403014 	movt	r3, #20
  122bcc:	e5934000 	ldr	r4, [r3]
  122bd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bd4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122bd8:	e593300c 	ldr	r3, [r3, #12]
  122bdc:	e5933004 	ldr	r3, [r3, #4]
  122be0:	e1a00003 	mov	r0, r3
  122be4:	ebffcdbb 	bl	1162d8 <lwip_htonl>
  122be8:	e1a05000 	mov	r5, r0
  122bec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bf0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122bf4:	e1d330b8 	ldrh	r3, [r3, #8]
  122bf8:	e1a06003 	mov	r6, r3
  122bfc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c00:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122c04:	e593300c 	ldr	r3, [r3, #12]
  122c08:	e1d330bc 	ldrh	r3, [r3, #12]
  122c0c:	e6ff3073 	uxth	r3, r3
  122c10:	e1a00003 	mov	r0, r3
  122c14:	ebffcda3 	bl	1162a8 <lwip_htons>
  122c18:	e1a03000 	mov	r3, r0
  122c1c:	e2033003 	and	r3, r3, #3
  122c20:	e3530000 	cmp	r3, #0
  122c24:	0a000001 	beq	122c30 <tcp_receive+0x860>
  122c28:	e3a03001 	mov	r3, #1
  122c2c:	ea000000 	b	122c34 <tcp_receive+0x864>
  122c30:	e3a03000 	mov	r3, #0
  122c34:	e0833006 	add	r3, r3, r6
  122c38:	e0853003 	add	r3, r5, r3
  122c3c:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122c40:	e3530000 	cmp	r3, #0
  122c44:	ba000007 	blt	122c68 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122c48:	e30e323c 	movw	r3, #57916	; 0xe23c
  122c4c:	e3403014 	movt	r3, #20
  122c50:	e5932000 	ldr	r2, [r3]
  122c54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c58:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122c5c:	e0423003 	sub	r3, r2, r3
  122c60:	e3530000 	cmp	r3, #0
  122c64:	daffff88 	ble	122a8c <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122c68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c6c:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122c70:	e30e3240 	movw	r3, #57920	; 0xe240
  122c74:	e3403014 	movt	r3, #20
  122c78:	e1d330b0 	ldrh	r3, [r3]
  122c7c:	e0823003 	add	r3, r2, r3
  122c80:	e6ff2073 	uxth	r2, r3
  122c84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c88:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122c8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c90:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122c94:	e3530000 	cmp	r3, #0
  122c98:	0a00004c 	beq	122dd0 <tcp_receive+0xa00>
  122c9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ca0:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122ca4:	e30e323c 	movw	r3, #57916	; 0xe23c
  122ca8:	e3403014 	movt	r3, #20
  122cac:	e5933000 	ldr	r3, [r3]
  122cb0:	e0423003 	sub	r3, r2, r3
  122cb4:	e3530000 	cmp	r3, #0
  122cb8:	aa000044 	bge	122dd0 <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122cbc:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  122cc0:	e3403015 	movt	r3, #21
  122cc4:	e5933000 	ldr	r3, [r3]
  122cc8:	e6ff2073 	uxth	r2, r3
  122ccc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cd0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122cd4:	e6ff3073 	uxth	r3, r3
  122cd8:	e0423003 	sub	r3, r2, r3
  122cdc:	e6ff3073 	uxth	r3, r3
  122ce0:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  122ce4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122ce8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cec:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122cf0:	e1a031c3 	asr	r3, r3, #3
  122cf4:	e6bf3073 	sxth	r3, r3
  122cf8:	e6ff3073 	uxth	r3, r3
  122cfc:	e0423003 	sub	r3, r2, r3
  122d00:	e6ff3073 	uxth	r3, r3
  122d04:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  122d08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d0c:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122d10:	e6ff2073 	uxth	r2, r3
  122d14:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122d18:	e0823003 	add	r3, r2, r3
  122d1c:	e6ff3073 	uxth	r3, r3
  122d20:	e6bf2073 	sxth	r2, r3
  122d24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d28:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  122d2c:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  122d30:	e3530000 	cmp	r3, #0
  122d34:	aa000003 	bge	122d48 <tcp_receive+0x978>
        m = -m;
  122d38:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122d3c:	e2633000 	rsb	r3, r3, #0
  122d40:	e6ff3073 	uxth	r3, r3
  122d44:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  122d48:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122d4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d50:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122d54:	e1a03143 	asr	r3, r3, #2
  122d58:	e6bf3073 	sxth	r3, r3
  122d5c:	e6ff3073 	uxth	r3, r3
  122d60:	e0423003 	sub	r3, r2, r3
  122d64:	e6ff3073 	uxth	r3, r3
  122d68:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  122d6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d70:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122d74:	e6ff2073 	uxth	r2, r3
  122d78:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122d7c:	e0823003 	add	r3, r2, r3
  122d80:	e6ff3073 	uxth	r3, r3
  122d84:	e6bf2073 	sxth	r2, r3
  122d88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d8c:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122d90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d94:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122d98:	e1a031c3 	asr	r3, r3, #3
  122d9c:	e6bf3073 	sxth	r3, r3
  122da0:	e6ff2073 	uxth	r2, r3
  122da4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122da8:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122dac:	e6ff3073 	uxth	r3, r3
  122db0:	e0823003 	add	r3, r2, r3
  122db4:	e6ff3073 	uxth	r3, r3
  122db8:	e6bf2073 	sxth	r2, r3
  122dbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dc0:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  122dc4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dc8:	e3a02000 	mov	r2, #0
  122dcc:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  122dd0:	e30e3242 	movw	r3, #57922	; 0xe242
  122dd4:	e3403014 	movt	r3, #20
  122dd8:	e1d330b0 	ldrh	r3, [r3]
  122ddc:	e3530000 	cmp	r3, #0
  122de0:	0a0004b3 	beq	1240b4 <tcp_receive+0x1ce4>
  122de4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122de8:	e5933014 	ldr	r3, [r3, #20]
  122dec:	e3530006 	cmp	r3, #6
  122df0:	8a0004af 	bhi	1240b4 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  122df4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122df8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122dfc:	e30e3238 	movw	r3, #57912	; 0xe238
  122e00:	e3403014 	movt	r3, #20
  122e04:	e5933000 	ldr	r3, [r3]
  122e08:	e0423003 	sub	r3, r2, r3
  122e0c:	e2433001 	sub	r3, r3, #1
  122e10:	e3530000 	cmp	r3, #0
  122e14:	ba0000aa 	blt	1230c4 <tcp_receive+0xcf4>
  122e18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e1c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122e20:	e30e3242 	movw	r3, #57922	; 0xe242
  122e24:	e3403014 	movt	r3, #20
  122e28:	e1d330b0 	ldrh	r3, [r3]
  122e2c:	e1a01003 	mov	r1, r3
  122e30:	e30e3238 	movw	r3, #57912	; 0xe238
  122e34:	e3403014 	movt	r3, #20
  122e38:	e5933000 	ldr	r3, [r3]
  122e3c:	e0813003 	add	r3, r1, r3
  122e40:	e0423003 	sub	r3, r2, r3
  122e44:	e2833001 	add	r3, r3, #1
  122e48:	e3530000 	cmp	r3, #0
  122e4c:	ca00009c 	bgt	1230c4 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  122e50:	e30e3218 	movw	r3, #57880	; 0xe218
  122e54:	e3403014 	movt	r3, #20
  122e58:	e5933004 	ldr	r3, [r3, #4]
  122e5c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  122e60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e64:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122e68:	e30e3238 	movw	r3, #57912	; 0xe238
  122e6c:	e3403014 	movt	r3, #20
  122e70:	e5933000 	ldr	r3, [r3]
  122e74:	e0423003 	sub	r3, r2, r3
  122e78:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  122e7c:	e30e3218 	movw	r3, #57880	; 0xe218
  122e80:	e3403014 	movt	r3, #20
  122e84:	e5933004 	ldr	r3, [r3, #4]
  122e88:	e3530000 	cmp	r3, #0
  122e8c:	1a000006 	bne	122eac <tcp_receive+0xadc>
  122e90:	e3080234 	movw	r0, #33332	; 0x8234
  122e94:	e3400014 	movt	r0, #20
  122e98:	ebff809d 	bl	103114 <rt_kprintf>
  122e9c:	e3001529 	movw	r1, #1321	; 0x529
  122ea0:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  122ea4:	e3400014 	movt	r0, #20
  122ea8:	ebff9fb9 	bl	10ad94 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  122eac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122eb0:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  122eb4:	e1530002 	cmp	r3, r2
  122eb8:	da000006 	ble	122ed8 <tcp_receive+0xb08>
  122ebc:	e3080244 	movw	r0, #33348	; 0x8244
  122ec0:	e3400014 	movt	r0, #20
  122ec4:	ebff8092 	bl	103114 <rt_kprintf>
  122ec8:	e300152a 	movw	r1, #1322	; 0x52a
  122ecc:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  122ed0:	e3400014 	movt	r0, #20
  122ed4:	ebff9fae 	bl	10ad94 <sys_arch_assert>
      if (inseg.p->len < off) {
  122ed8:	e30e3218 	movw	r3, #57880	; 0xe218
  122edc:	e3403014 	movt	r3, #20
  122ee0:	e5933004 	ldr	r3, [r3, #4]
  122ee4:	e1d330ba 	ldrh	r3, [r3, #10]
  122ee8:	e1a02003 	mov	r2, r3
  122eec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122ef0:	e1530002 	cmp	r3, r2
  122ef4:	da00003f 	ble	122ff8 <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  122ef8:	e30e3218 	movw	r3, #57880	; 0xe218
  122efc:	e3403014 	movt	r3, #20
  122f00:	e5933004 	ldr	r3, [r3, #4]
  122f04:	e1d330b8 	ldrh	r3, [r3, #8]
  122f08:	e1a02003 	mov	r2, r3
  122f0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f10:	e1530002 	cmp	r3, r2
  122f14:	da000006 	ble	122f34 <tcp_receive+0xb64>
  122f18:	e3080254 	movw	r0, #33364	; 0x8254
  122f1c:	e3400014 	movt	r0, #20
  122f20:	ebff807b 	bl	103114 <rt_kprintf>
  122f24:	e300152c 	movw	r1, #1324	; 0x52c
  122f28:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  122f2c:	e3400014 	movt	r0, #20
  122f30:	ebff9f97 	bl	10ad94 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  122f34:	e30e3218 	movw	r3, #57880	; 0xe218
  122f38:	e3403014 	movt	r3, #20
  122f3c:	e5933004 	ldr	r3, [r3, #4]
  122f40:	e1d320b8 	ldrh	r2, [r3, #8]
  122f44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f48:	e6ff3073 	uxth	r3, r3
  122f4c:	e0423003 	sub	r3, r2, r3
  122f50:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  122f54:	ea00000e 	b	122f94 <tcp_receive+0xbc4>
          off -= p->len;
  122f58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f5c:	e1d330ba 	ldrh	r3, [r3, #10]
  122f60:	e1a02003 	mov	r2, r3
  122f64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f68:	e0433002 	sub	r3, r3, r2
  122f6c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  122f70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f74:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  122f78:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  122f7c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f80:	e3a02000 	mov	r2, #0
  122f84:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  122f88:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f8c:	e5933000 	ldr	r3, [r3]
  122f90:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  122f94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f98:	e1d330ba 	ldrh	r3, [r3, #10]
  122f9c:	e1a02003 	mov	r2, r3
  122fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122fa4:	e1530002 	cmp	r3, r2
  122fa8:	caffffea 	bgt	122f58 <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  122fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122fb0:	e6ff3073 	uxth	r3, r3
  122fb4:	e2633000 	rsb	r3, r3, #0
  122fb8:	e6ff3073 	uxth	r3, r3
  122fbc:	e6bf3073 	sxth	r3, r3
  122fc0:	e1a01003 	mov	r1, r3
  122fc4:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  122fc8:	ebffdecf 	bl	11ab0c <pbuf_header>
  122fcc:	e1a03000 	mov	r3, r0
  122fd0:	e3530000 	cmp	r3, #0
  122fd4:	0a00001c 	beq	12304c <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  122fd8:	e3080264 	movw	r0, #33380	; 0x8264
  122fdc:	e3400014 	movt	r0, #20
  122fe0:	ebff804b 	bl	103114 <rt_kprintf>
  122fe4:	e3001539 	movw	r1, #1337	; 0x539
  122fe8:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  122fec:	e3400014 	movt	r0, #20
  122ff0:	ebff9f67 	bl	10ad94 <sys_arch_assert>
  122ff4:	ea000014 	b	12304c <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  122ff8:	e30e3218 	movw	r3, #57880	; 0xe218
  122ffc:	e3403014 	movt	r3, #20
  123000:	e5933004 	ldr	r3, [r3, #4]
  123004:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  123008:	e6ff2072 	uxth	r2, r2
  12300c:	e2622000 	rsb	r2, r2, #0
  123010:	e6ff2072 	uxth	r2, r2
  123014:	e6bf2072 	sxth	r2, r2
  123018:	e1a01002 	mov	r1, r2
  12301c:	e1a00003 	mov	r0, r3
  123020:	ebffdeb9 	bl	11ab0c <pbuf_header>
  123024:	e1a03000 	mov	r3, r0
  123028:	e3530000 	cmp	r3, #0
  12302c:	0a000006 	beq	12304c <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  123030:	e3080264 	movw	r0, #33380	; 0x8264
  123034:	e3400014 	movt	r0, #20
  123038:	ebff8035 	bl	103114 <rt_kprintf>
  12303c:	e300153e 	movw	r1, #1342	; 0x53e
  123040:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  123044:	e3400014 	movt	r0, #20
  123048:	ebff9f51 	bl	10ad94 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  12304c:	e30e3218 	movw	r3, #57880	; 0xe218
  123050:	e3403014 	movt	r3, #20
  123054:	e1d320b8 	ldrh	r2, [r3, #8]
  123058:	e30e3238 	movw	r3, #57912	; 0xe238
  12305c:	e3403014 	movt	r3, #20
  123060:	e5933000 	ldr	r3, [r3]
  123064:	e6ff1073 	uxth	r1, r3
  123068:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12306c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123070:	e6ff3073 	uxth	r3, r3
  123074:	e0413003 	sub	r3, r1, r3
  123078:	e6ff3073 	uxth	r3, r3
  12307c:	e0823003 	add	r3, r2, r3
  123080:	e6ff2073 	uxth	r2, r3
  123084:	e30e3218 	movw	r3, #57880	; 0xe218
  123088:	e3403014 	movt	r3, #20
  12308c:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  123090:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123094:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123098:	e30e3238 	movw	r3, #57912	; 0xe238
  12309c:	e3403014 	movt	r3, #20
  1230a0:	e5832000 	str	r2, [r3]
  1230a4:	e30e3218 	movw	r3, #57880	; 0xe218
  1230a8:	e3403014 	movt	r3, #20
  1230ac:	e593200c 	ldr	r2, [r3, #12]
  1230b0:	e30e3238 	movw	r3, #57912	; 0xe238
  1230b4:	e3403014 	movt	r3, #20
  1230b8:	e5933000 	ldr	r3, [r3]
  1230bc:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  1230c0:	ea00000d 	b	1230fc <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  1230c4:	e30e3238 	movw	r3, #57912	; 0xe238
  1230c8:	e3403014 	movt	r3, #20
  1230cc:	e5932000 	ldr	r2, [r3]
  1230d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230d4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1230d8:	e0423003 	sub	r3, r2, r3
  1230dc:	e3530000 	cmp	r3, #0
  1230e0:	aa000005 	bge	1230fc <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  1230e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230e8:	e5d3301e 	ldrb	r3, [r3, #30]
  1230ec:	e3833002 	orr	r3, r3, #2
  1230f0:	e6ef2073 	uxtb	r2, r3
  1230f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230f8:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1230fc:	e30e3238 	movw	r3, #57912	; 0xe238
  123100:	e3403014 	movt	r3, #20
  123104:	e5932000 	ldr	r2, [r3]
  123108:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12310c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123110:	e0423003 	sub	r3, r2, r3
  123114:	e3530000 	cmp	r3, #0
  123118:	ba0003e1 	blt	1240a4 <tcp_receive+0x1cd4>
  12311c:	e30e3238 	movw	r3, #57912	; 0xe238
  123120:	e3403014 	movt	r3, #20
  123124:	e5932000 	ldr	r2, [r3]
  123128:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12312c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123130:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123134:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123138:	e0833001 	add	r3, r3, r1
  12313c:	e0423003 	sub	r3, r2, r3
  123140:	e2833001 	add	r3, r3, #1
  123144:	e3530000 	cmp	r3, #0
  123148:	ca0003d5 	bgt	1240a4 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  12314c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123150:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123154:	e30e3238 	movw	r3, #57912	; 0xe238
  123158:	e3403014 	movt	r3, #20
  12315c:	e5933000 	ldr	r3, [r3]
  123160:	e1520003 	cmp	r2, r3
  123164:	1a00026b 	bne	123b18 <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  123168:	e30e3218 	movw	r3, #57880	; 0xe218
  12316c:	e3403014 	movt	r3, #20
  123170:	e1d340b8 	ldrh	r4, [r3, #8]
  123174:	e30e3218 	movw	r3, #57880	; 0xe218
  123178:	e3403014 	movt	r3, #20
  12317c:	e593300c 	ldr	r3, [r3, #12]
  123180:	e1d330bc 	ldrh	r3, [r3, #12]
  123184:	e6ff3073 	uxth	r3, r3
  123188:	e1a00003 	mov	r0, r3
  12318c:	ebffcc45 	bl	1162a8 <lwip_htons>
  123190:	e1a03000 	mov	r3, r0
  123194:	e2033003 	and	r3, r3, #3
  123198:	e3530000 	cmp	r3, #0
  12319c:	0a000001 	beq	1231a8 <tcp_receive+0xdd8>
  1231a0:	e3a03001 	mov	r3, #1
  1231a4:	ea000000 	b	1231ac <tcp_receive+0xddc>
  1231a8:	e3a03000 	mov	r3, #0
  1231ac:	e0833004 	add	r3, r3, r4
  1231b0:	e6ff2073 	uxth	r2, r3
  1231b4:	e30e3242 	movw	r3, #57922	; 0xe242
  1231b8:	e3403014 	movt	r3, #20
  1231bc:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  1231c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1231c4:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1231c8:	e30e3242 	movw	r3, #57922	; 0xe242
  1231cc:	e3403014 	movt	r3, #20
  1231d0:	e1d330b0 	ldrh	r3, [r3]
  1231d4:	e1520003 	cmp	r2, r3
  1231d8:	2a000072 	bcs	1233a8 <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1231dc:	e30e3218 	movw	r3, #57880	; 0xe218
  1231e0:	e3403014 	movt	r3, #20
  1231e4:	e593300c 	ldr	r3, [r3, #12]
  1231e8:	e1d330bc 	ldrh	r3, [r3, #12]
  1231ec:	e6ff3073 	uxth	r3, r3
  1231f0:	e1a00003 	mov	r0, r3
  1231f4:	ebffcc2b 	bl	1162a8 <lwip_htons>
  1231f8:	e1a03000 	mov	r3, r0
  1231fc:	e2033001 	and	r3, r3, #1
  123200:	e3530000 	cmp	r3, #0
  123204:	0a00001a 	beq	123274 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  123208:	e30e3218 	movw	r3, #57880	; 0xe218
  12320c:	e3403014 	movt	r3, #20
  123210:	e593300c 	ldr	r3, [r3, #12]
  123214:	e1d330bc 	ldrh	r3, [r3, #12]
  123218:	e6ff3073 	uxth	r3, r3
  12321c:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123220:	e6ff4073 	uxth	r4, r3
  123224:	e30e3218 	movw	r3, #57880	; 0xe218
  123228:	e3403014 	movt	r3, #20
  12322c:	e593300c 	ldr	r3, [r3, #12]
  123230:	e1d330bc 	ldrh	r3, [r3, #12]
  123234:	e6ff3073 	uxth	r3, r3
  123238:	e1a00003 	mov	r0, r3
  12323c:	ebffcc19 	bl	1162a8 <lwip_htons>
  123240:	e1a03000 	mov	r3, r0
  123244:	e203303e 	and	r3, r3, #62	; 0x3e
  123248:	e6ff3073 	uxth	r3, r3
  12324c:	e1a00003 	mov	r0, r3
  123250:	ebffcc14 	bl	1162a8 <lwip_htons>
  123254:	e1a03000 	mov	r3, r0
  123258:	e1a02003 	mov	r2, r3
  12325c:	e30e3218 	movw	r3, #57880	; 0xe218
  123260:	e3403014 	movt	r3, #20
  123264:	e593300c 	ldr	r3, [r3, #12]
  123268:	e1842002 	orr	r2, r4, r2
  12326c:	e6ff2072 	uxth	r2, r2
  123270:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  123274:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123278:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  12327c:	e30e3218 	movw	r3, #57880	; 0xe218
  123280:	e3403014 	movt	r3, #20
  123284:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  123288:	e30e3218 	movw	r3, #57880	; 0xe218
  12328c:	e3403014 	movt	r3, #20
  123290:	e593300c 	ldr	r3, [r3, #12]
  123294:	e1d330bc 	ldrh	r3, [r3, #12]
  123298:	e6ff3073 	uxth	r3, r3
  12329c:	e1a00003 	mov	r0, r3
  1232a0:	ebffcc00 	bl	1162a8 <lwip_htons>
  1232a4:	e1a03000 	mov	r3, r0
  1232a8:	e2033002 	and	r3, r3, #2
  1232ac:	e3530000 	cmp	r3, #0
  1232b0:	0a000007 	beq	1232d4 <tcp_receive+0xf04>
            inseg.len -= 1;
  1232b4:	e30e3218 	movw	r3, #57880	; 0xe218
  1232b8:	e3403014 	movt	r3, #20
  1232bc:	e1d330b8 	ldrh	r3, [r3, #8]
  1232c0:	e2433001 	sub	r3, r3, #1
  1232c4:	e6ff2073 	uxth	r2, r3
  1232c8:	e30e3218 	movw	r3, #57880	; 0xe218
  1232cc:	e3403014 	movt	r3, #20
  1232d0:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  1232d4:	e30e3218 	movw	r3, #57880	; 0xe218
  1232d8:	e3403014 	movt	r3, #20
  1232dc:	e5932004 	ldr	r2, [r3, #4]
  1232e0:	e30e3218 	movw	r3, #57880	; 0xe218
  1232e4:	e3403014 	movt	r3, #20
  1232e8:	e1d330b8 	ldrh	r3, [r3, #8]
  1232ec:	e1a01003 	mov	r1, r3
  1232f0:	e1a00002 	mov	r0, r2
  1232f4:	ebffdcd9 	bl	11a660 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  1232f8:	e30e3218 	movw	r3, #57880	; 0xe218
  1232fc:	e3403014 	movt	r3, #20
  123300:	e1d340b8 	ldrh	r4, [r3, #8]
  123304:	e30e3218 	movw	r3, #57880	; 0xe218
  123308:	e3403014 	movt	r3, #20
  12330c:	e593300c 	ldr	r3, [r3, #12]
  123310:	e1d330bc 	ldrh	r3, [r3, #12]
  123314:	e6ff3073 	uxth	r3, r3
  123318:	e1a00003 	mov	r0, r3
  12331c:	ebffcbe1 	bl	1162a8 <lwip_htons>
  123320:	e1a03000 	mov	r3, r0
  123324:	e2033003 	and	r3, r3, #3
  123328:	e3530000 	cmp	r3, #0
  12332c:	0a000001 	beq	123338 <tcp_receive+0xf68>
  123330:	e3a03001 	mov	r3, #1
  123334:	ea000000 	b	12333c <tcp_receive+0xf6c>
  123338:	e3a03000 	mov	r3, #0
  12333c:	e0833004 	add	r3, r3, r4
  123340:	e6ff2073 	uxth	r2, r3
  123344:	e30e3242 	movw	r3, #57922	; 0xe242
  123348:	e3403014 	movt	r3, #20
  12334c:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123350:	e30e3242 	movw	r3, #57922	; 0xe242
  123354:	e3403014 	movt	r3, #20
  123358:	e1d330b0 	ldrh	r3, [r3]
  12335c:	e1a02003 	mov	r2, r3
  123360:	e30e3238 	movw	r3, #57912	; 0xe238
  123364:	e3403014 	movt	r3, #20
  123368:	e5933000 	ldr	r3, [r3]
  12336c:	e0822003 	add	r2, r2, r3
  123370:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123374:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123378:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  12337c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123380:	e0833001 	add	r3, r3, r1
  123384:	e1520003 	cmp	r2, r3
  123388:	0a000006 	beq	1233a8 <tcp_receive+0xfd8>
  12338c:	e3080278 	movw	r0, #33400	; 0x8278
  123390:	e3400014 	movt	r0, #20
  123394:	ebff7f5e 	bl	103114 <rt_kprintf>
  123398:	e300156c 	movw	r1, #1388	; 0x56c
  12339c:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  1233a0:	e3400014 	movt	r0, #20
  1233a4:	ebff9e7a 	bl	10ad94 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  1233a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233ac:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233b0:	e3530000 	cmp	r3, #0
  1233b4:	0a0000da 	beq	123724 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1233b8:	e30e3218 	movw	r3, #57880	; 0xe218
  1233bc:	e3403014 	movt	r3, #20
  1233c0:	e593300c 	ldr	r3, [r3, #12]
  1233c4:	e1d330bc 	ldrh	r3, [r3, #12]
  1233c8:	e6ff3073 	uxth	r3, r3
  1233cc:	e1a00003 	mov	r0, r3
  1233d0:	ebffcbb4 	bl	1162a8 <lwip_htons>
  1233d4:	e1a03000 	mov	r3, r0
  1233d8:	e2033001 	and	r3, r3, #1
  1233dc:	e3530000 	cmp	r3, #0
  1233e0:	0a00000f 	beq	123424 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  1233e4:	ea000009 	b	123410 <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  1233e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233ec:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  1233f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233f8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233fc:	e5932000 	ldr	r2, [r3]
  123400:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123404:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  123408:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  12340c:	ebffef50 	bl	11f154 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  123410:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123414:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123418:	e3530000 	cmp	r3, #0
  12341c:	1afffff1 	bne	1233e8 <tcp_receive+0x1018>
  123420:	ea0000bf 	b	123724 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  123424:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123428:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12342c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  123430:	ea000040 	b	123538 <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123438:	e593300c 	ldr	r3, [r3, #12]
  12343c:	e1d330bc 	ldrh	r3, [r3, #12]
  123440:	e6ff3073 	uxth	r3, r3
  123444:	e1a00003 	mov	r0, r3
  123448:	ebffcb96 	bl	1162a8 <lwip_htons>
  12344c:	e1a03000 	mov	r3, r0
  123450:	e2033001 	and	r3, r3, #1
  123454:	e3530000 	cmp	r3, #0
  123458:	0a00002f 	beq	12351c <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  12345c:	e30e3218 	movw	r3, #57880	; 0xe218
  123460:	e3403014 	movt	r3, #20
  123464:	e593300c 	ldr	r3, [r3, #12]
  123468:	e1d330bc 	ldrh	r3, [r3, #12]
  12346c:	e6ff3073 	uxth	r3, r3
  123470:	e1a00003 	mov	r0, r3
  123474:	ebffcb8b 	bl	1162a8 <lwip_htons>
  123478:	e1a03000 	mov	r3, r0
  12347c:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123480:	e3530000 	cmp	r3, #0
  123484:	1a000024 	bne	12351c <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  123488:	e30e3218 	movw	r3, #57880	; 0xe218
  12348c:	e3403014 	movt	r3, #20
  123490:	e593300c 	ldr	r3, [r3, #12]
  123494:	e1d330bc 	ldrh	r3, [r3, #12]
  123498:	e6ff4073 	uxth	r4, r3
  12349c:	e3a00001 	mov	r0, #1
  1234a0:	ebffcb80 	bl	1162a8 <lwip_htons>
  1234a4:	e1a03000 	mov	r3, r0
  1234a8:	e1a02003 	mov	r2, r3
  1234ac:	e30e3218 	movw	r3, #57880	; 0xe218
  1234b0:	e3403014 	movt	r3, #20
  1234b4:	e593300c 	ldr	r3, [r3, #12]
  1234b8:	e1842002 	orr	r2, r4, r2
  1234bc:	e6ff2072 	uxth	r2, r2
  1234c0:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  1234c4:	e30e3218 	movw	r3, #57880	; 0xe218
  1234c8:	e3403014 	movt	r3, #20
  1234cc:	e1d340b8 	ldrh	r4, [r3, #8]
  1234d0:	e30e3218 	movw	r3, #57880	; 0xe218
  1234d4:	e3403014 	movt	r3, #20
  1234d8:	e593300c 	ldr	r3, [r3, #12]
  1234dc:	e1d330bc 	ldrh	r3, [r3, #12]
  1234e0:	e6ff3073 	uxth	r3, r3
  1234e4:	e1a00003 	mov	r0, r3
  1234e8:	ebffcb6e 	bl	1162a8 <lwip_htons>
  1234ec:	e1a03000 	mov	r3, r0
  1234f0:	e2033003 	and	r3, r3, #3
  1234f4:	e3530000 	cmp	r3, #0
  1234f8:	0a000001 	beq	123504 <tcp_receive+0x1134>
  1234fc:	e3a03001 	mov	r3, #1
  123500:	ea000000 	b	123508 <tcp_receive+0x1138>
  123504:	e3a03000 	mov	r3, #0
  123508:	e0833004 	add	r3, r3, r4
  12350c:	e6ff2073 	uxth	r2, r3
  123510:	e30e3242 	movw	r3, #57922	; 0xe242
  123514:	e3403014 	movt	r3, #20
  123518:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  12351c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123520:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  123524:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123528:	e5933000 	ldr	r3, [r3]
  12352c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  123530:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  123534:	ebffef06 	bl	11f154 <tcp_seg_free>
            while (next &&
  123538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12353c:	e3530000 	cmp	r3, #0
  123540:	0a000010 	beq	123588 <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  123544:	e30e3242 	movw	r3, #57922	; 0xe242
  123548:	e3403014 	movt	r3, #20
  12354c:	e1d330b0 	ldrh	r3, [r3]
  123550:	e1a02003 	mov	r2, r3
  123554:	e30e3238 	movw	r3, #57912	; 0xe238
  123558:	e3403014 	movt	r3, #20
  12355c:	e5933000 	ldr	r3, [r3]
  123560:	e0822003 	add	r2, r2, r3
  123564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123568:	e593300c 	ldr	r3, [r3, #12]
  12356c:	e5933004 	ldr	r3, [r3, #4]
  123570:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123574:	e1d110b8 	ldrh	r1, [r1, #8]
  123578:	e0833001 	add	r3, r3, r1
  12357c:	e0423003 	sub	r3, r2, r3
            while (next &&
  123580:	e3530000 	cmp	r3, #0
  123584:	aaffffaa 	bge	123434 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  123588:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12358c:	e3530000 	cmp	r3, #0
  123590:	0a000060 	beq	123718 <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  123594:	e30e3242 	movw	r3, #57922	; 0xe242
  123598:	e3403014 	movt	r3, #20
  12359c:	e1d330b0 	ldrh	r3, [r3]
  1235a0:	e1a02003 	mov	r2, r3
  1235a4:	e30e3238 	movw	r3, #57912	; 0xe238
  1235a8:	e3403014 	movt	r3, #20
  1235ac:	e5933000 	ldr	r3, [r3]
  1235b0:	e0822003 	add	r2, r2, r3
  1235b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1235b8:	e593300c 	ldr	r3, [r3, #12]
  1235bc:	e5933004 	ldr	r3, [r3, #4]
  1235c0:	e0423003 	sub	r3, r2, r3
            if (next &&
  1235c4:	e3530000 	cmp	r3, #0
  1235c8:	da000052 	ble	123718 <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  1235cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1235d0:	e593300c 	ldr	r3, [r3, #12]
  1235d4:	e5933004 	ldr	r3, [r3, #4]
  1235d8:	e6ff2073 	uxth	r2, r3
  1235dc:	e30e3238 	movw	r3, #57912	; 0xe238
  1235e0:	e3403014 	movt	r3, #20
  1235e4:	e5933000 	ldr	r3, [r3]
  1235e8:	e6ff3073 	uxth	r3, r3
  1235ec:	e0423003 	sub	r3, r2, r3
  1235f0:	e6ff2073 	uxth	r2, r3
  1235f4:	e30e3218 	movw	r3, #57880	; 0xe218
  1235f8:	e3403014 	movt	r3, #20
  1235fc:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  123600:	e30e3218 	movw	r3, #57880	; 0xe218
  123604:	e3403014 	movt	r3, #20
  123608:	e593300c 	ldr	r3, [r3, #12]
  12360c:	e1d330bc 	ldrh	r3, [r3, #12]
  123610:	e6ff3073 	uxth	r3, r3
  123614:	e1a00003 	mov	r0, r3
  123618:	ebffcb22 	bl	1162a8 <lwip_htons>
  12361c:	e1a03000 	mov	r3, r0
  123620:	e2033002 	and	r3, r3, #2
  123624:	e3530000 	cmp	r3, #0
  123628:	0a000007 	beq	12364c <tcp_receive+0x127c>
                inseg.len -= 1;
  12362c:	e30e3218 	movw	r3, #57880	; 0xe218
  123630:	e3403014 	movt	r3, #20
  123634:	e1d330b8 	ldrh	r3, [r3, #8]
  123638:	e2433001 	sub	r3, r3, #1
  12363c:	e6ff2073 	uxth	r2, r3
  123640:	e30e3218 	movw	r3, #57880	; 0xe218
  123644:	e3403014 	movt	r3, #20
  123648:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  12364c:	e30e3218 	movw	r3, #57880	; 0xe218
  123650:	e3403014 	movt	r3, #20
  123654:	e5932004 	ldr	r2, [r3, #4]
  123658:	e30e3218 	movw	r3, #57880	; 0xe218
  12365c:	e3403014 	movt	r3, #20
  123660:	e1d330b8 	ldrh	r3, [r3, #8]
  123664:	e1a01003 	mov	r1, r3
  123668:	e1a00002 	mov	r0, r2
  12366c:	ebffdbfb 	bl	11a660 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  123670:	e30e3218 	movw	r3, #57880	; 0xe218
  123674:	e3403014 	movt	r3, #20
  123678:	e1d340b8 	ldrh	r4, [r3, #8]
  12367c:	e30e3218 	movw	r3, #57880	; 0xe218
  123680:	e3403014 	movt	r3, #20
  123684:	e593300c 	ldr	r3, [r3, #12]
  123688:	e1d330bc 	ldrh	r3, [r3, #12]
  12368c:	e6ff3073 	uxth	r3, r3
  123690:	e1a00003 	mov	r0, r3
  123694:	ebffcb03 	bl	1162a8 <lwip_htons>
  123698:	e1a03000 	mov	r3, r0
  12369c:	e2033003 	and	r3, r3, #3
  1236a0:	e3530000 	cmp	r3, #0
  1236a4:	0a000001 	beq	1236b0 <tcp_receive+0x12e0>
  1236a8:	e3a03001 	mov	r3, #1
  1236ac:	ea000000 	b	1236b4 <tcp_receive+0x12e4>
  1236b0:	e3a03000 	mov	r3, #0
  1236b4:	e0833004 	add	r3, r3, r4
  1236b8:	e6ff2073 	uxth	r2, r3
  1236bc:	e30e3242 	movw	r3, #57922	; 0xe242
  1236c0:	e3403014 	movt	r3, #20
  1236c4:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  1236c8:	e30e3242 	movw	r3, #57922	; 0xe242
  1236cc:	e3403014 	movt	r3, #20
  1236d0:	e1d330b0 	ldrh	r3, [r3]
  1236d4:	e1a02003 	mov	r2, r3
  1236d8:	e30e3238 	movw	r3, #57912	; 0xe238
  1236dc:	e3403014 	movt	r3, #20
  1236e0:	e5933000 	ldr	r3, [r3]
  1236e4:	e0822003 	add	r2, r2, r3
  1236e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1236ec:	e593300c 	ldr	r3, [r3, #12]
  1236f0:	e5933004 	ldr	r3, [r3, #4]
  1236f4:	e1520003 	cmp	r2, r3
  1236f8:	0a000006 	beq	123718 <tcp_receive+0x1348>
  1236fc:	e30802b0 	movw	r0, #33456	; 0x82b0
  123700:	e3400014 	movt	r0, #20
  123704:	ebff7e82 	bl	103114 <rt_kprintf>
  123708:	e300159c 	movw	r1, #1436	; 0x59c
  12370c:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  123710:	e3400014 	movt	r0, #20
  123714:	ebff9d9e 	bl	10ad94 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  123718:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12371c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123720:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  123724:	e30e3242 	movw	r3, #57922	; 0xe242
  123728:	e3403014 	movt	r3, #20
  12372c:	e1d330b0 	ldrh	r3, [r3]
  123730:	e1a02003 	mov	r2, r3
  123734:	e30e3238 	movw	r3, #57912	; 0xe238
  123738:	e3403014 	movt	r3, #20
  12373c:	e5933000 	ldr	r3, [r3]
  123740:	e0822003 	add	r2, r2, r3
  123744:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123748:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  12374c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123750:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123754:	e30e3242 	movw	r3, #57922	; 0xe242
  123758:	e3403014 	movt	r3, #20
  12375c:	e1d330b0 	ldrh	r3, [r3]
  123760:	e1520003 	cmp	r2, r3
  123764:	2a000006 	bcs	123784 <tcp_receive+0x13b4>
  123768:	e30802ec 	movw	r0, #33516	; 0x82ec
  12376c:	e3400014 	movt	r0, #20
  123770:	ebff7e67 	bl	103114 <rt_kprintf>
  123774:	e30015a6 	movw	r1, #1446	; 0x5a6
  123778:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  12377c:	e3400014 	movt	r0, #20
  123780:	ebff9d83 	bl	10ad94 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123784:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123788:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  12378c:	e30e3242 	movw	r3, #57922	; 0xe242
  123790:	e3403014 	movt	r3, #20
  123794:	e1d330b0 	ldrh	r3, [r3]
  123798:	e0423003 	sub	r3, r2, r3
  12379c:	e6ff2073 	uxth	r2, r3
  1237a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1237a4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  1237a8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1237ac:	ebffe939 	bl	11dc98 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  1237b0:	e30e3218 	movw	r3, #57880	; 0xe218
  1237b4:	e3403014 	movt	r3, #20
  1237b8:	e5933004 	ldr	r3, [r3, #4]
  1237bc:	e1d330b8 	ldrh	r3, [r3, #8]
  1237c0:	e3530000 	cmp	r3, #0
  1237c4:	0a000009 	beq	1237f0 <tcp_receive+0x1420>
          recv_data = inseg.p;
  1237c8:	e30e3218 	movw	r3, #57880	; 0xe218
  1237cc:	e3403014 	movt	r3, #20
  1237d0:	e5932004 	ldr	r2, [r3, #4]
  1237d4:	e30e3248 	movw	r3, #57928	; 0xe248
  1237d8:	e3403014 	movt	r3, #20
  1237dc:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  1237e0:	e30e3218 	movw	r3, #57880	; 0xe218
  1237e4:	e3403014 	movt	r3, #20
  1237e8:	e3a02000 	mov	r2, #0
  1237ec:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1237f0:	e30e3218 	movw	r3, #57880	; 0xe218
  1237f4:	e3403014 	movt	r3, #20
  1237f8:	e593300c 	ldr	r3, [r3, #12]
  1237fc:	e1d330bc 	ldrh	r3, [r3, #12]
  123800:	e6ff3073 	uxth	r3, r3
  123804:	e1a00003 	mov	r0, r3
  123808:	ebffcaa6 	bl	1162a8 <lwip_htons>
  12380c:	e1a03000 	mov	r3, r0
  123810:	e2033001 	and	r3, r3, #1
  123814:	e3530000 	cmp	r3, #0
  123818:	0a000099 	beq	123a84 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  12381c:	e30e3245 	movw	r3, #57925	; 0xe245
  123820:	e3403014 	movt	r3, #20
  123824:	e5d33000 	ldrb	r3, [r3]
  123828:	e3833020 	orr	r3, r3, #32
  12382c:	e6ef2073 	uxtb	r2, r3
  123830:	e30e3245 	movw	r3, #57925	; 0xe245
  123834:	e3403014 	movt	r3, #20
  123838:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  12383c:	ea000090 	b	123a84 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  123840:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123844:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123848:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  12384c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123850:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123854:	e593300c 	ldr	r3, [r3, #12]
  123858:	e5932004 	ldr	r2, [r3, #4]
  12385c:	e30e3238 	movw	r3, #57912	; 0xe238
  123860:	e3403014 	movt	r3, #20
  123864:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  123868:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12386c:	e1d330b8 	ldrh	r3, [r3, #8]
  123870:	e1a04003 	mov	r4, r3
  123874:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123878:	e593300c 	ldr	r3, [r3, #12]
  12387c:	e1d330bc 	ldrh	r3, [r3, #12]
  123880:	e6ff3073 	uxth	r3, r3
  123884:	e1a00003 	mov	r0, r3
  123888:	ebffca86 	bl	1162a8 <lwip_htons>
  12388c:	e1a03000 	mov	r3, r0
  123890:	e2033003 	and	r3, r3, #3
  123894:	e3530000 	cmp	r3, #0
  123898:	0a000001 	beq	1238a4 <tcp_receive+0x14d4>
  12389c:	e3a03001 	mov	r3, #1
  1238a0:	ea000000 	b	1238a8 <tcp_receive+0x14d8>
  1238a4:	e3a03000 	mov	r3, #0
  1238a8:	e0832004 	add	r2, r3, r4
  1238ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1238b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1238b4:	e0822003 	add	r2, r2, r3
  1238b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1238bc:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  1238c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1238c4:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  1238c8:	e1a04003 	mov	r4, r3
  1238cc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238d0:	e1d330b8 	ldrh	r3, [r3, #8]
  1238d4:	e1a05003 	mov	r5, r3
  1238d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238dc:	e593300c 	ldr	r3, [r3, #12]
  1238e0:	e1d330bc 	ldrh	r3, [r3, #12]
  1238e4:	e6ff3073 	uxth	r3, r3
  1238e8:	e1a00003 	mov	r0, r3
  1238ec:	ebffca6d 	bl	1162a8 <lwip_htons>
  1238f0:	e1a03000 	mov	r3, r0
  1238f4:	e2033003 	and	r3, r3, #3
  1238f8:	e3530000 	cmp	r3, #0
  1238fc:	0a000001 	beq	123908 <tcp_receive+0x1538>
  123900:	e3a03001 	mov	r3, #1
  123904:	ea000000 	b	12390c <tcp_receive+0x153c>
  123908:	e3a03000 	mov	r3, #0
  12390c:	e0833005 	add	r3, r3, r5
  123910:	e1540003 	cmp	r4, r3
  123914:	2a000006 	bcs	123934 <tcp_receive+0x1564>
  123918:	e308030c 	movw	r0, #33548	; 0x830c
  12391c:	e3400014 	movt	r0, #20
  123920:	ebff7dfb 	bl	103114 <rt_kprintf>
  123924:	e30015cb 	movw	r1, #1483	; 0x5cb
  123928:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  12392c:	e3400014 	movt	r0, #20
  123930:	ebff9d17 	bl	10ad94 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  123934:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123938:	e1d330b8 	ldrh	r3, [r3, #8]
  12393c:	e1a04003 	mov	r4, r3
  123940:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123944:	e593300c 	ldr	r3, [r3, #12]
  123948:	e1d330bc 	ldrh	r3, [r3, #12]
  12394c:	e6ff3073 	uxth	r3, r3
  123950:	e1a00003 	mov	r0, r3
  123954:	ebffca53 	bl	1162a8 <lwip_htons>
  123958:	e1a03000 	mov	r3, r0
  12395c:	e2033003 	and	r3, r3, #3
  123960:	e3530000 	cmp	r3, #0
  123964:	0a000001 	beq	123970 <tcp_receive+0x15a0>
  123968:	e3a03001 	mov	r3, #1
  12396c:	ea000000 	b	123974 <tcp_receive+0x15a4>
  123970:	e3a03000 	mov	r3, #0
  123974:	e0831004 	add	r1, r3, r4
  123978:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12397c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123980:	e6ff3071 	uxth	r3, r1
  123984:	e0423003 	sub	r3, r2, r3
  123988:	e6ff2073 	uxth	r2, r3
  12398c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123990:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123994:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123998:	ebffe8be 	bl	11dc98 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  12399c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239a0:	e5933004 	ldr	r3, [r3, #4]
  1239a4:	e1d330b8 	ldrh	r3, [r3, #8]
  1239a8:	e3530000 	cmp	r3, #0
  1239ac:	0a000015 	beq	123a08 <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  1239b0:	e30e3248 	movw	r3, #57928	; 0xe248
  1239b4:	e3403014 	movt	r3, #20
  1239b8:	e5933000 	ldr	r3, [r3]
  1239bc:	e3530000 	cmp	r3, #0
  1239c0:	0a000008 	beq	1239e8 <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  1239c4:	e30e3248 	movw	r3, #57928	; 0xe248
  1239c8:	e3403014 	movt	r3, #20
  1239cc:	e5932000 	ldr	r2, [r3]
  1239d0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239d4:	e5933004 	ldr	r3, [r3, #4]
  1239d8:	e1a01003 	mov	r1, r3
  1239dc:	e1a00002 	mov	r0, r2
  1239e0:	ebffdd1e 	bl	11ae60 <pbuf_cat>
  1239e4:	ea000004 	b	1239fc <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  1239e8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239ec:	e5932004 	ldr	r2, [r3, #4]
  1239f0:	e30e3248 	movw	r3, #57928	; 0xe248
  1239f4:	e3403014 	movt	r3, #20
  1239f8:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  1239fc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a00:	e3a02000 	mov	r2, #0
  123a04:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  123a08:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a0c:	e593300c 	ldr	r3, [r3, #12]
  123a10:	e1d330bc 	ldrh	r3, [r3, #12]
  123a14:	e6ff3073 	uxth	r3, r3
  123a18:	e1a00003 	mov	r0, r3
  123a1c:	ebffca21 	bl	1162a8 <lwip_htons>
  123a20:	e1a03000 	mov	r3, r0
  123a24:	e2033001 	and	r3, r3, #1
  123a28:	e3530000 	cmp	r3, #0
  123a2c:	0a00000e 	beq	123a6c <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  123a30:	e30e3245 	movw	r3, #57925	; 0xe245
  123a34:	e3403014 	movt	r3, #20
  123a38:	e5d33000 	ldrb	r3, [r3]
  123a3c:	e3833020 	orr	r3, r3, #32
  123a40:	e6ef2073 	uxtb	r2, r3
  123a44:	e30e3245 	movw	r3, #57925	; 0xe245
  123a48:	e3403014 	movt	r3, #20
  123a4c:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123a50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a54:	e5933014 	ldr	r3, [r3, #20]
  123a58:	e3530004 	cmp	r3, #4
  123a5c:	1a000002 	bne	123a6c <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123a60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a64:	e3a02007 	mov	r2, #7
  123a68:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123a6c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a70:	e5932000 	ldr	r2, [r3]
  123a74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a78:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123a7c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123a80:	ebffedb3 	bl	11f154 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123a84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a88:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123a8c:	e3530000 	cmp	r3, #0
  123a90:	0a000007 	beq	123ab4 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123a94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a98:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123a9c:	e593300c 	ldr	r3, [r3, #12]
  123aa0:	e5932004 	ldr	r2, [r3, #4]
  123aa4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123aa8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123aac:	e1520003 	cmp	r2, r3
  123ab0:	0affff62 	beq	123840 <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123ab4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ab8:	e5d3301e 	ldrb	r3, [r3, #30]
  123abc:	e2033001 	and	r3, r3, #1
  123ac0:	e3530000 	cmp	r3, #0
  123ac4:	0a00000c 	beq	123afc <tcp_receive+0x172c>
  123ac8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123acc:	e5d3301e 	ldrb	r3, [r3, #30]
  123ad0:	e3c33001 	bic	r3, r3, #1
  123ad4:	e6ef2073 	uxtb	r2, r3
  123ad8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123adc:	e5c3201e 	strb	r2, [r3, #30]
  123ae0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ae4:	e5d3301e 	ldrb	r3, [r3, #30]
  123ae8:	e3833002 	orr	r3, r3, #2
  123aec:	e6ef2073 	uxtb	r2, r3
  123af0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123af4:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123af8:	ea00016c 	b	1240b0 <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123afc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b00:	e5d3301e 	ldrb	r3, [r3, #30]
  123b04:	e3833001 	orr	r3, r3, #1
  123b08:	e6ef2073 	uxtb	r2, r3
  123b0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b10:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123b14:	ea000165 	b	1240b0 <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123b18:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123b1c:	eb0007e2 	bl	125aac <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123b20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b24:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b28:	e3530000 	cmp	r3, #0
  123b2c:	1a000006 	bne	123b4c <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123b30:	e30e0218 	movw	r0, #57880	; 0xe218
  123b34:	e3400014 	movt	r0, #20
  123b38:	ebffeda7 	bl	11f1dc <tcp_seg_copy>
  123b3c:	e1a02000 	mov	r2, r0
  123b40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b44:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123b48:	ea000158 	b	1240b0 <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123b4c:	e3a03000 	mov	r3, #0
  123b50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123b54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b58:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b5c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123b60:	ea00013f 	b	124064 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123b64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123b68:	e593300c 	ldr	r3, [r3, #12]
  123b6c:	e5932004 	ldr	r2, [r3, #4]
  123b70:	e30e3238 	movw	r3, #57912	; 0xe238
  123b74:	e3403014 	movt	r3, #20
  123b78:	e5933000 	ldr	r3, [r3]
  123b7c:	e1520003 	cmp	r2, r3
  123b80:	1a00001b 	bne	123bf4 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123b84:	e30e3218 	movw	r3, #57880	; 0xe218
  123b88:	e3403014 	movt	r3, #20
  123b8c:	e1d320b8 	ldrh	r2, [r3, #8]
  123b90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123b94:	e1d330b8 	ldrh	r3, [r3, #8]
  123b98:	e1520003 	cmp	r2, r3
  123b9c:	9a000134 	bls	124074 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123ba0:	e30e0218 	movw	r0, #57880	; 0xe218
  123ba4:	e3400014 	movt	r0, #20
  123ba8:	ebffed8b 	bl	11f1dc <tcp_seg_copy>
  123bac:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123bb0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bb4:	e3530000 	cmp	r3, #0
  123bb8:	0a00012f 	beq	12407c <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123bbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123bc0:	e3530000 	cmp	r3, #0
  123bc4:	0a000003 	beq	123bd8 <tcp_receive+0x1808>
                    prev->next = cseg;
  123bc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123bcc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123bd0:	e5832000 	str	r2, [r3]
  123bd4:	ea000002 	b	123be4 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123bd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bdc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123be0:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123be4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123be8:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123bec:	ebfff989 	bl	122218 <tcp_oos_insert_segment>
                }
                break;
  123bf0:	ea000121 	b	12407c <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123bf8:	e3530000 	cmp	r3, #0
  123bfc:	1a000016 	bne	123c5c <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123c00:	e30e3238 	movw	r3, #57912	; 0xe238
  123c04:	e3403014 	movt	r3, #20
  123c08:	e5932000 	ldr	r2, [r3]
  123c0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123c10:	e593300c 	ldr	r3, [r3, #12]
  123c14:	e5933004 	ldr	r3, [r3, #4]
  123c18:	e0423003 	sub	r3, r2, r3
  123c1c:	e3530000 	cmp	r3, #0
  123c20:	aa00004e 	bge	123d60 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123c24:	e30e0218 	movw	r0, #57880	; 0xe218
  123c28:	e3400014 	movt	r0, #20
  123c2c:	ebffed6a 	bl	11f1dc <tcp_seg_copy>
  123c30:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123c34:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c38:	e3530000 	cmp	r3, #0
  123c3c:	0a000110 	beq	124084 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123c40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c44:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123c48:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123c4c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123c50:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123c54:	ebfff96f 	bl	122218 <tcp_oos_insert_segment>
                  }
                  break;
  123c58:	ea000109 	b	124084 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123c5c:	e30e3238 	movw	r3, #57912	; 0xe238
  123c60:	e3403014 	movt	r3, #20
  123c64:	e5932000 	ldr	r2, [r3]
  123c68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c6c:	e593300c 	ldr	r3, [r3, #12]
  123c70:	e5933004 	ldr	r3, [r3, #4]
  123c74:	e0423003 	sub	r3, r2, r3
  123c78:	e2433001 	sub	r3, r3, #1
  123c7c:	e3530000 	cmp	r3, #0
  123c80:	ba000036 	blt	123d60 <tcp_receive+0x1990>
  123c84:	e30e3238 	movw	r3, #57912	; 0xe238
  123c88:	e3403014 	movt	r3, #20
  123c8c:	e5932000 	ldr	r2, [r3]
  123c90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123c94:	e593300c 	ldr	r3, [r3, #12]
  123c98:	e5933004 	ldr	r3, [r3, #4]
  123c9c:	e0423003 	sub	r3, r2, r3
  123ca0:	e2833001 	add	r3, r3, #1
  123ca4:	e3530000 	cmp	r3, #0
  123ca8:	ca00002c 	bgt	123d60 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123cac:	e30e0218 	movw	r0, #57880	; 0xe218
  123cb0:	e3400014 	movt	r0, #20
  123cb4:	ebffed48 	bl	11f1dc <tcp_seg_copy>
  123cb8:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123cbc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cc0:	e3530000 	cmp	r3, #0
  123cc4:	0a0000f0 	beq	12408c <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123cc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ccc:	e593300c 	ldr	r3, [r3, #12]
  123cd0:	e5933004 	ldr	r3, [r3, #4]
  123cd4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  123cd8:	e1d220b8 	ldrh	r2, [r2, #8]
  123cdc:	e0832002 	add	r2, r3, r2
  123ce0:	e30e3238 	movw	r3, #57912	; 0xe238
  123ce4:	e3403014 	movt	r3, #20
  123ce8:	e5933000 	ldr	r3, [r3]
  123cec:	e0423003 	sub	r3, r2, r3
  123cf0:	e3530000 	cmp	r3, #0
  123cf4:	da000012 	ble	123d44 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  123cf8:	e30e3238 	movw	r3, #57912	; 0xe238
  123cfc:	e3403014 	movt	r3, #20
  123d00:	e5933000 	ldr	r3, [r3]
  123d04:	e6ff2073 	uxth	r2, r3
  123d08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d0c:	e593300c 	ldr	r3, [r3, #12]
  123d10:	e5933004 	ldr	r3, [r3, #4]
  123d14:	e6ff3073 	uxth	r3, r3
  123d18:	e0423003 	sub	r3, r2, r3
  123d1c:	e6ff2073 	uxth	r2, r3
  123d20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d24:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  123d28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d2c:	e5932004 	ldr	r2, [r3, #4]
  123d30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d34:	e1d330b8 	ldrh	r3, [r3, #8]
  123d38:	e1a01003 	mov	r1, r3
  123d3c:	e1a00002 	mov	r0, r2
  123d40:	ebffda46 	bl	11a660 <pbuf_realloc>
                    }
                    prev->next = cseg;
  123d44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d48:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123d4c:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  123d50:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123d54:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123d58:	ebfff92e 	bl	122218 <tcp_oos_insert_segment>
                  }
                  break;
  123d5c:	ea0000ca 	b	12408c <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  123d60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d64:	e5933000 	ldr	r3, [r3]
  123d68:	e3530000 	cmp	r3, #0
  123d6c:	1a0000b7 	bne	124050 <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  123d70:	e30e3238 	movw	r3, #57912	; 0xe238
  123d74:	e3403014 	movt	r3, #20
  123d78:	e5932000 	ldr	r2, [r3]
  123d7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d80:	e593300c 	ldr	r3, [r3, #12]
  123d84:	e5933004 	ldr	r3, [r3, #4]
  123d88:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  123d8c:	e3530000 	cmp	r3, #0
  123d90:	da0000ae 	ble	124050 <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  123d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d98:	e593300c 	ldr	r3, [r3, #12]
  123d9c:	e1d330bc 	ldrh	r3, [r3, #12]
  123da0:	e6ff3073 	uxth	r3, r3
  123da4:	e1a00003 	mov	r0, r3
  123da8:	ebffc93e 	bl	1162a8 <lwip_htons>
  123dac:	e1a03000 	mov	r3, r0
  123db0:	e2033001 	and	r3, r3, #1
  123db4:	e3530000 	cmp	r3, #0
  123db8:	1a0000b5 	bne	124094 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  123dbc:	e30e0218 	movw	r0, #57880	; 0xe218
  123dc0:	e3400014 	movt	r0, #20
  123dc4:	ebffed04 	bl	11f1dc <tcp_seg_copy>
  123dc8:	e1a02000 	mov	r2, r0
  123dcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dd0:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  123dd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dd8:	e5933000 	ldr	r3, [r3]
  123ddc:	e3530000 	cmp	r3, #0
  123de0:	0a0000ad 	beq	12409c <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  123de4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123de8:	e593300c 	ldr	r3, [r3, #12]
  123dec:	e5933004 	ldr	r3, [r3, #4]
  123df0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123df4:	e1d220b8 	ldrh	r2, [r2, #8]
  123df8:	e0832002 	add	r2, r3, r2
  123dfc:	e30e3238 	movw	r3, #57912	; 0xe238
  123e00:	e3403014 	movt	r3, #20
  123e04:	e5933000 	ldr	r3, [r3]
  123e08:	e0423003 	sub	r3, r2, r3
  123e0c:	e3530000 	cmp	r3, #0
  123e10:	da000012 	ble	123e60 <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  123e14:	e30e3238 	movw	r3, #57912	; 0xe238
  123e18:	e3403014 	movt	r3, #20
  123e1c:	e5933000 	ldr	r3, [r3]
  123e20:	e6ff2073 	uxth	r2, r3
  123e24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e28:	e593300c 	ldr	r3, [r3, #12]
  123e2c:	e5933004 	ldr	r3, [r3, #4]
  123e30:	e6ff3073 	uxth	r3, r3
  123e34:	e0423003 	sub	r3, r2, r3
  123e38:	e6ff2073 	uxth	r2, r3
  123e3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e40:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  123e44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e48:	e5932004 	ldr	r2, [r3, #4]
  123e4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e50:	e1d330b8 	ldrh	r3, [r3, #8]
  123e54:	e1a01003 	mov	r1, r3
  123e58:	e1a00002 	mov	r0, r2
  123e5c:	ebffd9ff 	bl	11a660 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  123e60:	e30e3242 	movw	r3, #57922	; 0xe242
  123e64:	e3403014 	movt	r3, #20
  123e68:	e1d330b0 	ldrh	r3, [r3]
  123e6c:	e1a02003 	mov	r2, r3
  123e70:	e30e3238 	movw	r3, #57912	; 0xe238
  123e74:	e3403014 	movt	r3, #20
  123e78:	e5933000 	ldr	r3, [r3]
  123e7c:	e0822003 	add	r2, r2, r3
  123e80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e84:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123e88:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123e8c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123e90:	e0833001 	add	r3, r3, r1
  123e94:	e0423003 	sub	r3, r2, r3
  123e98:	e3530000 	cmp	r3, #0
  123e9c:	da00007e 	ble	12409c <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  123ea0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ea4:	e5933000 	ldr	r3, [r3]
  123ea8:	e593300c 	ldr	r3, [r3, #12]
  123eac:	e1d330bc 	ldrh	r3, [r3, #12]
  123eb0:	e6ff3073 	uxth	r3, r3
  123eb4:	e1a00003 	mov	r0, r3
  123eb8:	ebffc8fa 	bl	1162a8 <lwip_htons>
  123ebc:	e1a03000 	mov	r3, r0
  123ec0:	e2033001 	and	r3, r3, #1
  123ec4:	e3530000 	cmp	r3, #0
  123ec8:	0a00001a 	beq	123f38 <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  123ecc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ed0:	e5933000 	ldr	r3, [r3]
  123ed4:	e593300c 	ldr	r3, [r3, #12]
  123ed8:	e1d330bc 	ldrh	r3, [r3, #12]
  123edc:	e6ff3073 	uxth	r3, r3
  123ee0:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123ee4:	e6ff4073 	uxth	r4, r3
  123ee8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123eec:	e5933000 	ldr	r3, [r3]
  123ef0:	e593300c 	ldr	r3, [r3, #12]
  123ef4:	e1d330bc 	ldrh	r3, [r3, #12]
  123ef8:	e6ff3073 	uxth	r3, r3
  123efc:	e1a00003 	mov	r0, r3
  123f00:	ebffc8e8 	bl	1162a8 <lwip_htons>
  123f04:	e1a03000 	mov	r3, r0
  123f08:	e203303e 	and	r3, r3, #62	; 0x3e
  123f0c:	e6ff3073 	uxth	r3, r3
  123f10:	e1a00003 	mov	r0, r3
  123f14:	ebffc8e3 	bl	1162a8 <lwip_htons>
  123f18:	e1a03000 	mov	r3, r0
  123f1c:	e1a02003 	mov	r2, r3
  123f20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f24:	e5933000 	ldr	r3, [r3]
  123f28:	e593300c 	ldr	r3, [r3, #12]
  123f2c:	e1842002 	orr	r2, r4, r2
  123f30:	e6ff2072 	uxth	r2, r2
  123f34:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  123f38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f3c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123f40:	e6ff2073 	uxth	r2, r3
  123f44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f48:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123f4c:	e0823003 	add	r3, r2, r3
  123f50:	e6ff1073 	uxth	r1, r3
  123f54:	e30e3238 	movw	r3, #57912	; 0xe238
  123f58:	e3403014 	movt	r3, #20
  123f5c:	e5933000 	ldr	r3, [r3]
  123f60:	e6ff2073 	uxth	r2, r3
  123f64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f68:	e5933000 	ldr	r3, [r3]
  123f6c:	e0412002 	sub	r2, r1, r2
  123f70:	e6ff2072 	uxth	r2, r2
  123f74:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  123f78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f7c:	e5933000 	ldr	r3, [r3]
  123f80:	e5932004 	ldr	r2, [r3, #4]
  123f84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f88:	e5933000 	ldr	r3, [r3]
  123f8c:	e1d330b8 	ldrh	r3, [r3, #8]
  123f90:	e1a01003 	mov	r1, r3
  123f94:	e1a00002 	mov	r0, r2
  123f98:	ebffd9b0 	bl	11a660 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  123f9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fa0:	e5933000 	ldr	r3, [r3]
  123fa4:	e1d340b8 	ldrh	r4, [r3, #8]
  123fa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fac:	e5933000 	ldr	r3, [r3]
  123fb0:	e593300c 	ldr	r3, [r3, #12]
  123fb4:	e1d330bc 	ldrh	r3, [r3, #12]
  123fb8:	e6ff3073 	uxth	r3, r3
  123fbc:	e1a00003 	mov	r0, r3
  123fc0:	ebffc8b8 	bl	1162a8 <lwip_htons>
  123fc4:	e1a03000 	mov	r3, r0
  123fc8:	e2033003 	and	r3, r3, #3
  123fcc:	e3530000 	cmp	r3, #0
  123fd0:	0a000001 	beq	123fdc <tcp_receive+0x1c0c>
  123fd4:	e3a03001 	mov	r3, #1
  123fd8:	ea000000 	b	123fe0 <tcp_receive+0x1c10>
  123fdc:	e3a03000 	mov	r3, #0
  123fe0:	e0833004 	add	r3, r3, r4
  123fe4:	e6ff2073 	uxth	r2, r3
  123fe8:	e30e3242 	movw	r3, #57922	; 0xe242
  123fec:	e3403014 	movt	r3, #20
  123ff0:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123ff4:	e30e3242 	movw	r3, #57922	; 0xe242
  123ff8:	e3403014 	movt	r3, #20
  123ffc:	e1d330b0 	ldrh	r3, [r3]
  124000:	e1a02003 	mov	r2, r3
  124004:	e30e3238 	movw	r3, #57912	; 0xe238
  124008:	e3403014 	movt	r3, #20
  12400c:	e5933000 	ldr	r3, [r3]
  124010:	e0822003 	add	r2, r2, r3
  124014:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124018:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12401c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124020:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124024:	e0833001 	add	r3, r3, r1
  124028:	e1520003 	cmp	r2, r3
  12402c:	0a00001a 	beq	12409c <tcp_receive+0x1ccc>
  124030:	e3080278 	movw	r0, #33400	; 0x8278
  124034:	e3400014 	movt	r0, #20
  124038:	ebff7c35 	bl	103114 <rt_kprintf>
  12403c:	e3001668 	movw	r1, #1640	; 0x668
  124040:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  124044:	e3400014 	movt	r0, #20
  124048:	ebff9b51 	bl	10ad94 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  12404c:	ea000012 	b	12409c <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  124050:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124054:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  124058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12405c:	e5933000 	ldr	r3, [r3]
  124060:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124064:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124068:	e3530000 	cmp	r3, #0
  12406c:	1afffebc 	bne	123b64 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  124070:	ea00000e 	b	1240b0 <tcp_receive+0x1ce0>
                break;
  124074:	e320f000 	nop	{0}
  124078:	ea00000c 	b	1240b0 <tcp_receive+0x1ce0>
                break;
  12407c:	e320f000 	nop	{0}
  124080:	ea00000a 	b	1240b0 <tcp_receive+0x1ce0>
                  break;
  124084:	e320f000 	nop	{0}
  124088:	ea000008 	b	1240b0 <tcp_receive+0x1ce0>
                  break;
  12408c:	e320f000 	nop	{0}
  124090:	ea000006 	b	1240b0 <tcp_receive+0x1ce0>
                  break;
  124094:	e320f000 	nop	{0}
  124098:	ea000004 	b	1240b0 <tcp_receive+0x1ce0>
                break;
  12409c:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  1240a0:	ea000002 	b	1240b0 <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  1240a4:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1240a8:	eb00067f 	bl	125aac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1240ac:	ea00001b 	b	124120 <tcp_receive+0x1d50>
  1240b0:	ea00001a 	b	124120 <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  1240b4:	e30e3238 	movw	r3, #57912	; 0xe238
  1240b8:	e3403014 	movt	r3, #20
  1240bc:	e5932000 	ldr	r2, [r3]
  1240c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1240c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1240c8:	e0423003 	sub	r3, r2, r3
  1240cc:	e3530000 	cmp	r3, #0
  1240d0:	ba00000b 	blt	124104 <tcp_receive+0x1d34>
  1240d4:	e30e3238 	movw	r3, #57912	; 0xe238
  1240d8:	e3403014 	movt	r3, #20
  1240dc:	e5932000 	ldr	r2, [r3]
  1240e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1240e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1240e8:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1240ec:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1240f0:	e0833001 	add	r3, r3, r1
  1240f4:	e0423003 	sub	r3, r2, r3
  1240f8:	e2833001 	add	r3, r3, #1
  1240fc:	e3530000 	cmp	r3, #0
  124100:	da000006 	ble	124120 <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  124104:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124108:	e5d3301e 	ldrb	r3, [r3, #30]
  12410c:	e3833002 	orr	r3, r3, #2
  124110:	e6ef2073 	uxtb	r2, r3
  124114:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124118:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  12411c:	eaffffff 	b	124120 <tcp_receive+0x1d50>
  124120:	e320f000 	nop	{0}
  124124:	e24bd010 	sub	sp, fp, #16
  124128:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

0012412c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  12412c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  124130:	e28db000 	add	fp, sp, #0
  124134:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  124138:	e30e3230 	movw	r3, #57904	; 0xe230
  12413c:	e3403014 	movt	r3, #20
  124140:	e5933000 	ldr	r3, [r3]
  124144:	e3530000 	cmp	r3, #0
  124148:	0a000007 	beq	12416c <tcp_getoptbyte+0x40>
  12414c:	e30e3234 	movw	r3, #57908	; 0xe234
  124150:	e3403014 	movt	r3, #20
  124154:	e1d320b0 	ldrh	r2, [r3]
  124158:	e30e322e 	movw	r3, #57902	; 0xe22e
  12415c:	e3403014 	movt	r3, #20
  124160:	e1d330b0 	ldrh	r3, [r3]
  124164:	e1520003 	cmp	r2, r3
  124168:	2a000010 	bcs	1241b0 <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  12416c:	e30e3228 	movw	r3, #57896	; 0xe228
  124170:	e3403014 	movt	r3, #20
  124174:	e5933000 	ldr	r3, [r3]
  124178:	e2833014 	add	r3, r3, #20
  12417c:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  124180:	e30e3234 	movw	r3, #57908	; 0xe234
  124184:	e3403014 	movt	r3, #20
  124188:	e1d320b0 	ldrh	r2, [r3]
  12418c:	e2823001 	add	r3, r2, #1
  124190:	e6ff1073 	uxth	r1, r3
  124194:	e30e3234 	movw	r3, #57908	; 0xe234
  124198:	e3403014 	movt	r3, #20
  12419c:	e1c310b0 	strh	r1, [r3]
  1241a0:	e51b300c 	ldr	r3, [fp, #-12]
  1241a4:	e0833002 	add	r3, r3, r2
  1241a8:	e5d33000 	ldrb	r3, [r3]
  1241ac:	ea000014 	b	124204 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  1241b0:	e30e3234 	movw	r3, #57908	; 0xe234
  1241b4:	e3403014 	movt	r3, #20
  1241b8:	e1d320b0 	ldrh	r2, [r3]
  1241bc:	e2823001 	add	r3, r2, #1
  1241c0:	e6ff1073 	uxth	r1, r3
  1241c4:	e30e3234 	movw	r3, #57908	; 0xe234
  1241c8:	e3403014 	movt	r3, #20
  1241cc:	e1c310b0 	strh	r1, [r3]
  1241d0:	e6ef2072 	uxtb	r2, r2
  1241d4:	e30e322e 	movw	r3, #57902	; 0xe22e
  1241d8:	e3403014 	movt	r3, #20
  1241dc:	e1d330b0 	ldrh	r3, [r3]
  1241e0:	e6ef3073 	uxtb	r3, r3
  1241e4:	e0423003 	sub	r3, r2, r3
  1241e8:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  1241ec:	e30e3230 	movw	r3, #57904	; 0xe230
  1241f0:	e3403014 	movt	r3, #20
  1241f4:	e5932000 	ldr	r2, [r3]
  1241f8:	e55b3005 	ldrb	r3, [fp, #-5]
  1241fc:	e0823003 	add	r3, r2, r3
  124200:	e5d33000 	ldrb	r3, [r3]
  }
}
  124204:	e1a00003 	mov	r0, r3
  124208:	e28bd000 	add	sp, fp, #0
  12420c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  124210:	e12fff1e 	bx	lr

00124214 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124214:	e92d4800 	push	{fp, lr}
  124218:	e28db004 	add	fp, sp, #4
  12421c:	e24dd010 	sub	sp, sp, #16
  124220:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  124224:	e30e322c 	movw	r3, #57900	; 0xe22c
  124228:	e3403014 	movt	r3, #20
  12422c:	e1d330b0 	ldrh	r3, [r3]
  124230:	e3530000 	cmp	r3, #0
  124234:	0a000054 	beq	12438c <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124238:	e30e3234 	movw	r3, #57908	; 0xe234
  12423c:	e3403014 	movt	r3, #20
  124240:	e3a02000 	mov	r2, #0
  124244:	e1c320b0 	strh	r2, [r3]
  124248:	ea000041 	b	124354 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  12424c:	ebffffb6 	bl	12412c <tcp_getoptbyte>
  124250:	e1a03000 	mov	r3, r0
  124254:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  124258:	e55b3005 	ldrb	r3, [fp, #-5]
  12425c:	e3530001 	cmp	r3, #1
  124260:	0a00003b 	beq	124354 <tcp_parseopt+0x140>
  124264:	e3530002 	cmp	r3, #2
  124268:	0a000002 	beq	124278 <tcp_parseopt+0x64>
  12426c:	e3530000 	cmp	r3, #0
  124270:	0a000040 	beq	124378 <tcp_parseopt+0x164>
  124274:	ea000024 	b	12430c <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  124278:	ebffffab 	bl	12412c <tcp_getoptbyte>
  12427c:	e1a03000 	mov	r3, r0
  124280:	e3530004 	cmp	r3, #4
  124284:	1a00003d 	bne	124380 <tcp_parseopt+0x16c>
  124288:	e30e3234 	movw	r3, #57908	; 0xe234
  12428c:	e3403014 	movt	r3, #20
  124290:	e1d330b0 	ldrh	r3, [r3]
  124294:	e2832002 	add	r2, r3, #2
  124298:	e30e322c 	movw	r3, #57900	; 0xe22c
  12429c:	e3403014 	movt	r3, #20
  1242a0:	e1d330b0 	ldrh	r3, [r3]
  1242a4:	e1520003 	cmp	r2, r3
  1242a8:	ca000034 	bgt	124380 <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  1242ac:	ebffff9e 	bl	12412c <tcp_getoptbyte>
  1242b0:	e1a03000 	mov	r3, r0
  1242b4:	e6ff3073 	uxth	r3, r3
  1242b8:	e1a03403 	lsl	r3, r3, #8
  1242bc:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  1242c0:	ebffff99 	bl	12412c <tcp_getoptbyte>
  1242c4:	e1a03000 	mov	r3, r0
  1242c8:	e6ff2073 	uxth	r2, r3
  1242cc:	e15b30b8 	ldrh	r3, [fp, #-8]
  1242d0:	e1823003 	orr	r3, r2, r3
  1242d4:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  1242d8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1242dc:	e30025b4 	movw	r2, #1460	; 0x5b4
  1242e0:	e1530002 	cmp	r3, r2
  1242e4:	8a000004 	bhi	1242fc <tcp_parseopt+0xe8>
  1242e8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1242ec:	e3530000 	cmp	r3, #0
  1242f0:	0a000001 	beq	1242fc <tcp_parseopt+0xe8>
  1242f4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1242f8:	ea000000 	b	124300 <tcp_parseopt+0xec>
  1242fc:	e30035b4 	movw	r3, #1460	; 0x5b4
  124300:	e51b2010 	ldr	r2, [fp, #-16]
  124304:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  124308:	ea000011 	b	124354 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  12430c:	ebffff86 	bl	12412c <tcp_getoptbyte>
  124310:	e1a03000 	mov	r3, r0
  124314:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  124318:	e55b3009 	ldrb	r3, [fp, #-9]
  12431c:	e3530001 	cmp	r3, #1
  124320:	9a000018 	bls	124388 <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  124324:	e55b3009 	ldrb	r3, [fp, #-9]
  124328:	e6ff2073 	uxth	r2, r3
  12432c:	e30e3234 	movw	r3, #57908	; 0xe234
  124330:	e3403014 	movt	r3, #20
  124334:	e1d330b0 	ldrh	r3, [r3]
  124338:	e0823003 	add	r3, r2, r3
  12433c:	e6ff3073 	uxth	r3, r3
  124340:	e2433002 	sub	r3, r3, #2
  124344:	e6ff2073 	uxth	r2, r3
  124348:	e30e3234 	movw	r3, #57908	; 0xe234
  12434c:	e3403014 	movt	r3, #20
  124350:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124354:	e30e3234 	movw	r3, #57908	; 0xe234
  124358:	e3403014 	movt	r3, #20
  12435c:	e1d320b0 	ldrh	r2, [r3]
  124360:	e30e322c 	movw	r3, #57900	; 0xe22c
  124364:	e3403014 	movt	r3, #20
  124368:	e1d330b0 	ldrh	r3, [r3]
  12436c:	e1520003 	cmp	r2, r3
  124370:	3affffb5 	bcc	12424c <tcp_parseopt+0x38>
  124374:	ea000004 	b	12438c <tcp_parseopt+0x178>
        return;
  124378:	e320f000 	nop	{0}
  12437c:	ea000002 	b	12438c <tcp_parseopt+0x178>
          return;
  124380:	e320f000 	nop	{0}
  124384:	ea000000 	b	12438c <tcp_parseopt+0x178>
          return;
  124388:	e320f000 	nop	{0}
      }
    }
  }
}
  12438c:	e24bd004 	sub	sp, fp, #4
  124390:	e8bd8800 	pop	{fp, pc}

00124394 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  124394:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  124398:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  12439c:	e30e3245 	movw	r3, #57925	; 0xe245
  1243a0:	e3403014 	movt	r3, #20
  1243a4:	e5d33000 	ldrb	r3, [r3]
  1243a8:	e3833010 	orr	r3, r3, #16
  1243ac:	e6ef2073 	uxtb	r2, r3
  1243b0:	e30e3245 	movw	r3, #57925	; 0xe245
  1243b4:	e3403014 	movt	r3, #20
  1243b8:	e5c32000 	strb	r2, [r3]
}
  1243bc:	e320f000 	nop	{0}
  1243c0:	e28bd000 	add	sp, fp, #0
  1243c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1243c8:	e12fff1e 	bx	lr

001243cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  1243cc:	e92d4800 	push	{fp, lr}
  1243d0:	e28db004 	add	fp, sp, #4
  1243d4:	e24dd018 	sub	sp, sp, #24
  1243d8:	e50b0010 	str	r0, [fp, #-16]
  1243dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1243e0:	e1a03001 	mov	r3, r1
  1243e4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  1243e8:	e1a03002 	mov	r3, r2
  1243ec:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  1243f0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  1243f4:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1243f8:	e0823003 	add	r3, r2, r3
  1243fc:	e6ff3073 	uxth	r3, r3
  124400:	e2833014 	add	r3, r3, #20
  124404:	e6ff3073 	uxth	r3, r3
  124408:	e3a02000 	mov	r2, #0
  12440c:	e1a01003 	mov	r1, r3
  124410:	e3a00001 	mov	r0, #1
  124414:	ebffd6d3 	bl	119f68 <pbuf_alloc>
  124418:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  12441c:	e51b3008 	ldr	r3, [fp, #-8]
  124420:	e3530000 	cmp	r3, #0
  124424:	0a000052 	beq	124574 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  124428:	e51b3008 	ldr	r3, [fp, #-8]
  12442c:	e1d330ba 	ldrh	r3, [r3, #10]
  124430:	e1a02003 	mov	r2, r3
  124434:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124438:	e2833014 	add	r3, r3, #20
  12443c:	e1520003 	cmp	r2, r3
  124440:	aa000006 	bge	124460 <tcp_output_alloc_header+0x94>
  124444:	e3080334 	movw	r0, #33588	; 0x8334
  124448:	e3400014 	movt	r0, #20
  12444c:	ebff7b30 	bl	103114 <rt_kprintf>
  124450:	e3a01073 	mov	r1, #115	; 0x73
  124454:	e3080364 	movw	r0, #33636	; 0x8364
  124458:	e3400014 	movt	r0, #20
  12445c:	ebff9a4c 	bl	10ad94 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  124460:	e51b3008 	ldr	r3, [fp, #-8]
  124464:	e5933004 	ldr	r3, [r3, #4]
  124468:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  12446c:	e51b3010 	ldr	r3, [fp, #-16]
  124470:	e1d331ba 	ldrh	r3, [r3, #26]
  124474:	e1a00003 	mov	r0, r3
  124478:	ebffc78a 	bl	1162a8 <lwip_htons>
  12447c:	e1a03000 	mov	r3, r0
  124480:	e1a02003 	mov	r2, r3
  124484:	e51b300c 	ldr	r3, [fp, #-12]
  124488:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  12448c:	e51b3010 	ldr	r3, [fp, #-16]
  124490:	e1d331bc 	ldrh	r3, [r3, #28]
  124494:	e1a00003 	mov	r0, r3
  124498:	ebffc782 	bl	1162a8 <lwip_htons>
  12449c:	e1a03000 	mov	r3, r0
  1244a0:	e1a02003 	mov	r2, r3
  1244a4:	e51b300c 	ldr	r3, [fp, #-12]
  1244a8:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  1244ac:	e51b300c 	ldr	r3, [fp, #-12]
  1244b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1244b4:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1244b8:	e51b3010 	ldr	r3, [fp, #-16]
  1244bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1244c0:	e1a00003 	mov	r0, r3
  1244c4:	ebffc783 	bl	1162d8 <lwip_htonl>
  1244c8:	e1a02000 	mov	r2, r0
  1244cc:	e51b300c 	ldr	r3, [fp, #-12]
  1244d0:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  1244d4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1244d8:	e1a03123 	lsr	r3, r3, #2
  1244dc:	e6ff3073 	uxth	r3, r3
  1244e0:	e2833005 	add	r3, r3, #5
  1244e4:	e6ff3073 	uxth	r3, r3
  1244e8:	e1a03603 	lsl	r3, r3, #12
  1244ec:	e6ff3073 	uxth	r3, r3
  1244f0:	e3833010 	orr	r3, r3, #16
  1244f4:	e6ff3073 	uxth	r3, r3
  1244f8:	e1a00003 	mov	r0, r3
  1244fc:	ebffc769 	bl	1162a8 <lwip_htons>
  124500:	e1a03000 	mov	r3, r0
  124504:	e1a02003 	mov	r2, r3
  124508:	e51b300c 	ldr	r3, [fp, #-12]
  12450c:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  124510:	e51b3010 	ldr	r3, [fp, #-16]
  124514:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  124518:	e1a00003 	mov	r0, r3
  12451c:	ebffc761 	bl	1162a8 <lwip_htons>
  124520:	e1a03000 	mov	r3, r0
  124524:	e1a02003 	mov	r2, r3
  124528:	e51b300c 	ldr	r3, [fp, #-12]
  12452c:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  124530:	e51b300c 	ldr	r3, [fp, #-12]
  124534:	e3a02000 	mov	r2, #0
  124538:	e5c32010 	strb	r2, [r3, #16]
  12453c:	e3a02000 	mov	r2, #0
  124540:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  124544:	e51b300c 	ldr	r3, [fp, #-12]
  124548:	e3a02000 	mov	r2, #0
  12454c:	e5c32012 	strb	r2, [r3, #18]
  124550:	e3a02000 	mov	r2, #0
  124554:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  124558:	e51b3010 	ldr	r3, [fp, #-16]
  12455c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124560:	e51b2010 	ldr	r2, [fp, #-16]
  124564:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  124568:	e0832002 	add	r2, r3, r2
  12456c:	e51b3010 	ldr	r3, [fp, #-16]
  124570:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  124574:	e51b3008 	ldr	r3, [fp, #-8]
}
  124578:	e1a00003 	mov	r0, r3
  12457c:	e24bd004 	sub	sp, fp, #4
  124580:	e8bd8800 	pop	{fp, pc}

00124584 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  124584:	e92d4810 	push	{r4, fp, lr}
  124588:	e28db008 	add	fp, sp, #8
  12458c:	e24dd014 	sub	sp, sp, #20
  124590:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  124594:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124598:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12459c:	e3530000 	cmp	r3, #0
  1245a0:	0a000029 	beq	12464c <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1245a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1245a8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1245ac:	e50b3010 	str	r3, [fp, #-16]
  1245b0:	ea000002 	b	1245c0 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  1245b4:	e51b3010 	ldr	r3, [fp, #-16]
  1245b8:	e5933000 	ldr	r3, [r3]
  1245bc:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1245c0:	e51b3010 	ldr	r3, [fp, #-16]
  1245c4:	e5933000 	ldr	r3, [r3]
  1245c8:	e3530000 	cmp	r3, #0
  1245cc:	1afffff8 	bne	1245b4 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  1245d0:	e51b3010 	ldr	r3, [fp, #-16]
  1245d4:	e593300c 	ldr	r3, [r3, #12]
  1245d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1245dc:	e6ff3073 	uxth	r3, r3
  1245e0:	e1a00003 	mov	r0, r3
  1245e4:	ebffc72f 	bl	1162a8 <lwip_htons>
  1245e8:	e1a03000 	mov	r3, r0
  1245ec:	e2033007 	and	r3, r3, #7
  1245f0:	e3530000 	cmp	r3, #0
  1245f4:	1a000014 	bne	12464c <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  1245f8:	e51b3010 	ldr	r3, [fp, #-16]
  1245fc:	e593300c 	ldr	r3, [r3, #12]
  124600:	e1d330bc 	ldrh	r3, [r3, #12]
  124604:	e6ff4073 	uxth	r4, r3
  124608:	e3a00001 	mov	r0, #1
  12460c:	ebffc725 	bl	1162a8 <lwip_htons>
  124610:	e1a03000 	mov	r3, r0
  124614:	e1a02003 	mov	r2, r3
  124618:	e51b3010 	ldr	r3, [fp, #-16]
  12461c:	e593300c 	ldr	r3, [r3, #12]
  124620:	e1842002 	orr	r2, r4, r2
  124624:	e6ff2072 	uxth	r2, r2
  124628:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  12462c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124630:	e5d3301e 	ldrb	r3, [r3, #30]
  124634:	e3833020 	orr	r3, r3, #32
  124638:	e6ef2073 	uxtb	r2, r3
  12463c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124640:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  124644:	e3a03000 	mov	r3, #0
  124648:	ea000003 	b	12465c <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  12464c:	e3a01001 	mov	r1, #1
  124650:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  124654:	eb000426 	bl	1256f4 <tcp_enqueue_flags>
  124658:	e1a03000 	mov	r3, r0
}
  12465c:	e1a00003 	mov	r0, r3
  124660:	e24bd008 	sub	sp, fp, #8
  124664:	e8bd8810 	pop	{r4, fp, pc}

00124668 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  124668:	e92d4810 	push	{r4, fp, lr}
  12466c:	e28db008 	add	fp, sp, #8
  124670:	e24dd01c 	sub	sp, sp, #28
  124674:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  124678:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12467c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  124680:	e1a03002 	mov	r3, r2
  124684:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  124688:	e5db3004 	ldrb	r3, [fp, #4]
  12468c:	e1a03103 	lsl	r3, r3, #2
  124690:	e6ef3073 	uxtb	r3, r3
  124694:	e2033004 	and	r3, r3, #4
  124698:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  12469c:	e3a020b2 	mov	r2, #178	; 0xb2
  1246a0:	e3081364 	movw	r1, #33636	; 0x8364
  1246a4:	e3401014 	movt	r1, #20
  1246a8:	e3a00004 	mov	r0, #4
  1246ac:	ebffd1be 	bl	118dac <memp_malloc_fn>
  1246b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1246b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1246b8:	e3530000 	cmp	r3, #0
  1246bc:	1a000003 	bne	1246d0 <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  1246c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1246c4:	ebffd92e 	bl	11ab84 <pbuf_free>
    return NULL;
  1246c8:	e3a03000 	mov	r3, #0
  1246cc:	ea000063 	b	124860 <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  1246d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1246d4:	e5db2004 	ldrb	r2, [fp, #4]
  1246d8:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  1246dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1246e0:	e3a02000 	mov	r2, #0
  1246e4:	e5832000 	str	r2, [r3]
  seg->p = p;
  1246e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1246ec:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1246f0:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  1246f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1246f8:	e1d320b8 	ldrh	r2, [r3, #8]
  1246fc:	e55b300d 	ldrb	r3, [fp, #-13]
  124700:	e6ff3073 	uxth	r3, r3
  124704:	e1520003 	cmp	r2, r3
  124708:	2a000006 	bcs	124728 <tcp_create_segment+0xc0>
  12470c:	e3080394 	movw	r0, #33684	; 0x8394
  124710:	e3400014 	movt	r0, #20
  124714:	ebff7a7e 	bl	103114 <rt_kprintf>
  124718:	e3a010ba 	mov	r1, #186	; 0xba
  12471c:	e3080364 	movw	r0, #33636	; 0x8364
  124720:	e3400014 	movt	r0, #20
  124724:	ebff999a 	bl	10ad94 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  124728:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12472c:	e1d320b8 	ldrh	r2, [r3, #8]
  124730:	e55b300d 	ldrb	r3, [fp, #-13]
  124734:	e6ff3073 	uxth	r3, r3
  124738:	e0423003 	sub	r3, r2, r3
  12473c:	e6ff2073 	uxth	r2, r3
  124740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124744:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  124748:	e3a01014 	mov	r1, #20
  12474c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124750:	ebffd8ed 	bl	11ab0c <pbuf_header>
  124754:	e1a03000 	mov	r3, r0
  124758:	e3530000 	cmp	r3, #0
  12475c:	0a00000b 	beq	124790 <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  124760:	e30c3a18 	movw	r3, #51736	; 0xca18
  124764:	e3403015 	movt	r3, #21
  124768:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  12476c:	e2833001 	add	r3, r3, #1
  124770:	e6ff2073 	uxth	r2, r3
  124774:	e30c3a18 	movw	r3, #51736	; 0xca18
  124778:	e3403015 	movt	r3, #21
  12477c:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124780:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124784:	ebffea72 	bl	11f154 <tcp_seg_free>
    return NULL;
  124788:	e3a03000 	mov	r3, #0
  12478c:	ea000033 	b	124860 <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124794:	e5933004 	ldr	r3, [r3, #4]
  124798:	e5932004 	ldr	r2, [r3, #4]
  12479c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247a0:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  1247a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1247a8:	e1d321ba 	ldrh	r2, [r3, #26]
  1247ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247b0:	e593400c 	ldr	r4, [r3, #12]
  1247b4:	e1a00002 	mov	r0, r2
  1247b8:	ebffc6ba 	bl	1162a8 <lwip_htons>
  1247bc:	e1a03000 	mov	r3, r0
  1247c0:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  1247c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1247c8:	e1d321bc 	ldrh	r2, [r3, #28]
  1247cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247d0:	e593400c 	ldr	r4, [r3, #12]
  1247d4:	e1a00002 	mov	r0, r2
  1247d8:	ebffc6b2 	bl	1162a8 <lwip_htons>
  1247dc:	e1a03000 	mov	r3, r0
  1247e0:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  1247e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247e8:	e593400c 	ldr	r4, [r3, #12]
  1247ec:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1247f0:	ebffc6b8 	bl	1162d8 <lwip_htonl>
  1247f4:	e1a03000 	mov	r3, r0
  1247f8:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  1247fc:	e55b300d 	ldrb	r3, [fp, #-13]
  124800:	e1a03123 	lsr	r3, r3, #2
  124804:	e6ef3073 	uxtb	r3, r3
  124808:	e6ff3073 	uxth	r3, r3
  12480c:	e2833005 	add	r3, r3, #5
  124810:	e6ff3073 	uxth	r3, r3
  124814:	e1a03603 	lsl	r3, r3, #12
  124818:	e6ff2073 	uxth	r2, r3
  12481c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  124820:	e6ff3073 	uxth	r3, r3
  124824:	e1823003 	orr	r3, r2, r3
  124828:	e6ff2073 	uxth	r2, r3
  12482c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124830:	e593400c 	ldr	r4, [r3, #12]
  124834:	e1a00002 	mov	r0, r2
  124838:	ebffc69a 	bl	1162a8 <lwip_htons>
  12483c:	e1a03000 	mov	r3, r0
  124840:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  124844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124848:	e593300c 	ldr	r3, [r3, #12]
  12484c:	e3a02000 	mov	r2, #0
  124850:	e5c32012 	strb	r2, [r3, #18]
  124854:	e3a02000 	mov	r2, #0
  124858:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  12485c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  124860:	e1a00003 	mov	r0, r3
  124864:	e24bd008 	sub	sp, fp, #8
  124868:	e8bd8810 	pop	{r4, fp, pc}

0012486c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  12486c:	e92d4800 	push	{fp, lr}
  124870:	e28db004 	add	fp, sp, #4
  124874:	e24dd018 	sub	sp, sp, #24
  124878:	e50b0010 	str	r0, [fp, #-16]
  12487c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124880:	e1a03001 	mov	r3, r1
  124884:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124888:	e1a03002 	mov	r3, r2
  12488c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124890:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124894:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  124898:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  12489c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1248a0:	e1520003 	cmp	r2, r3
  1248a4:	2a00001c 	bcs	12491c <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  1248a8:	e5db3008 	ldrb	r3, [fp, #8]
  1248ac:	e2033002 	and	r3, r3, #2
  1248b0:	e3530000 	cmp	r3, #0
  1248b4:	1a00000f 	bne	1248f8 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  1248b8:	e59b3004 	ldr	r3, [fp, #4]
  1248bc:	e5d3301e 	ldrb	r3, [r3, #30]
  1248c0:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  1248c4:	e3530000 	cmp	r3, #0
  1248c8:	1a000013 	bne	12491c <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  1248cc:	e5db300c 	ldrb	r3, [fp, #12]
  1248d0:	e3530000 	cmp	r3, #0
  1248d4:	0a000007 	beq	1248f8 <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  1248d8:	e59b3004 	ldr	r3, [fp, #4]
  1248dc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  1248e0:	e3530000 	cmp	r3, #0
  1248e4:	1a000003 	bne	1248f8 <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  1248e8:	e59b3004 	ldr	r3, [fp, #4]
  1248ec:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  1248f0:	e3530000 	cmp	r3, #0
  1248f4:	0a000008 	beq	12491c <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  1248f8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1248fc:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124900:	e2833007 	add	r3, r3, #7
  124904:	e3c32003 	bic	r2, r3, #3
  124908:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  12490c:	e1520003 	cmp	r2, r3
  124910:	31a03002 	movcc	r3, r2
  124914:	21a03003 	movcs	r3, r3
  124918:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  12491c:	e15b30b6 	ldrh	r3, [fp, #-6]
  124920:	e3a02000 	mov	r2, #0
  124924:	e1a01003 	mov	r1, r3
  124928:	e51b0010 	ldr	r0, [fp, #-16]
  12492c:	ebffd58d 	bl	119f68 <pbuf_alloc>
  124930:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  124934:	e51b300c 	ldr	r3, [fp, #-12]
  124938:	e3530000 	cmp	r3, #0
  12493c:	1a000001 	bne	124948 <tcp_pbuf_prealloc+0xdc>
    return NULL;
  124940:	e3a03000 	mov	r3, #0
  124944:	ea000019 	b	1249b0 <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  124948:	e51b300c 	ldr	r3, [fp, #-12]
  12494c:	e5933000 	ldr	r3, [r3]
  124950:	e3530000 	cmp	r3, #0
  124954:	0a000006 	beq	124974 <tcp_pbuf_prealloc+0x108>
  124958:	e30803ac 	movw	r0, #33708	; 0x83ac
  12495c:	e3400014 	movt	r0, #20
  124960:	ebff79eb 	bl	103114 <rt_kprintf>
  124964:	e3a01e11 	mov	r1, #272	; 0x110
  124968:	e3080364 	movw	r0, #33636	; 0x8364
  12496c:	e3400014 	movt	r0, #20
  124970:	ebff9907 	bl	10ad94 <sys_arch_assert>
  *oversize = p->len - length;
  124974:	e51b300c 	ldr	r3, [fp, #-12]
  124978:	e1d320ba 	ldrh	r2, [r3, #10]
  12497c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124980:	e0423003 	sub	r3, r2, r3
  124984:	e6ff2073 	uxth	r2, r3
  124988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12498c:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124990:	e51b300c 	ldr	r3, [fp, #-12]
  124994:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124998:	e1c320b8 	strh	r2, [r3, #8]
  12499c:	e51b300c 	ldr	r3, [fp, #-12]
  1249a0:	e1d320b8 	ldrh	r2, [r3, #8]
  1249a4:	e51b300c 	ldr	r3, [fp, #-12]
  1249a8:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  1249ac:	e51b300c 	ldr	r3, [fp, #-12]
}
  1249b0:	e1a00003 	mov	r0, r3
  1249b4:	e24bd004 	sub	sp, fp, #4
  1249b8:	e8bd8800 	pop	{fp, pc}

001249bc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  1249bc:	e92d4800 	push	{fp, lr}
  1249c0:	e28db004 	add	fp, sp, #4
  1249c4:	e24dd008 	sub	sp, sp, #8
  1249c8:	e50b0008 	str	r0, [fp, #-8]
  1249cc:	e1a03001 	mov	r3, r1
  1249d0:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  1249d4:	e51b3008 	ldr	r3, [fp, #-8]
  1249d8:	e5933014 	ldr	r3, [r3, #20]
  1249dc:	e3530004 	cmp	r3, #4
  1249e0:	0a00000d 	beq	124a1c <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  1249e4:	e51b3008 	ldr	r3, [fp, #-8]
  1249e8:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  1249ec:	e3530007 	cmp	r3, #7
  1249f0:	0a000009 	beq	124a1c <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  1249f4:	e51b3008 	ldr	r3, [fp, #-8]
  1249f8:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  1249fc:	e3530002 	cmp	r3, #2
  124a00:	0a000005 	beq	124a1c <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124a04:	e51b3008 	ldr	r3, [fp, #-8]
  124a08:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124a0c:	e3530003 	cmp	r3, #3
  124a10:	0a000001 	beq	124a1c <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124a14:	e3e0300a 	mvn	r3, #10
  124a18:	ea000050 	b	124b60 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  124a1c:	e15b30ba 	ldrh	r3, [fp, #-10]
  124a20:	e3530000 	cmp	r3, #0
  124a24:	1a000001 	bne	124a30 <tcp_write_checks+0x74>
    return ERR_OK;
  124a28:	e3a03000 	mov	r3, #0
  124a2c:	ea00004b 	b	124b60 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  124a30:	e51b3008 	ldr	r3, [fp, #-8]
  124a34:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  124a38:	e15b20ba 	ldrh	r2, [fp, #-10]
  124a3c:	e1520003 	cmp	r2, r3
  124a40:	9a000008 	bls	124a68 <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124a44:	e51b3008 	ldr	r3, [fp, #-8]
  124a48:	e5d3301e 	ldrb	r3, [r3, #30]
  124a4c:	e1e03c83 	mvn	r3, r3, lsl #25
  124a50:	e1e03ca3 	mvn	r3, r3, lsr #25
  124a54:	e6ef2073 	uxtb	r2, r3
  124a58:	e51b3008 	ldr	r3, [fp, #-8]
  124a5c:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124a60:	e3e03000 	mvn	r3, #0
  124a64:	ea00003d 	b	124b60 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124a68:	e51b3008 	ldr	r3, [fp, #-8]
  124a6c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124a70:	e3530015 	cmp	r3, #21
  124a74:	8a000004 	bhi	124a8c <tcp_write_checks+0xd0>
  124a78:	e51b3008 	ldr	r3, [fp, #-8]
  124a7c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124a80:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124a84:	e1530002 	cmp	r3, r2
  124a88:	9a000010 	bls	124ad0 <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124a8c:	e30c3a18 	movw	r3, #51736	; 0xca18
  124a90:	e3403015 	movt	r3, #21
  124a94:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124a98:	e2833001 	add	r3, r3, #1
  124a9c:	e6ff2073 	uxth	r2, r3
  124aa0:	e30c3a18 	movw	r3, #51736	; 0xca18
  124aa4:	e3403015 	movt	r3, #21
  124aa8:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124aac:	e51b3008 	ldr	r3, [fp, #-8]
  124ab0:	e5d3301e 	ldrb	r3, [r3, #30]
  124ab4:	e1e03c83 	mvn	r3, r3, lsl #25
  124ab8:	e1e03ca3 	mvn	r3, r3, lsr #25
  124abc:	e6ef2073 	uxtb	r2, r3
  124ac0:	e51b3008 	ldr	r3, [fp, #-8]
  124ac4:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124ac8:	e3e03000 	mvn	r3, #0
  124acc:	ea000023 	b	124b60 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124ad0:	e51b3008 	ldr	r3, [fp, #-8]
  124ad4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124ad8:	e3530000 	cmp	r3, #0
  124adc:	0a00000f 	beq	124b20 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124ae0:	e51b3008 	ldr	r3, [fp, #-8]
  124ae4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124ae8:	e3530000 	cmp	r3, #0
  124aec:	1a00001a 	bne	124b5c <tcp_write_checks+0x1a0>
  124af0:	e51b3008 	ldr	r3, [fp, #-8]
  124af4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124af8:	e3530000 	cmp	r3, #0
  124afc:	1a000016 	bne	124b5c <tcp_write_checks+0x1a0>
  124b00:	e30803c0 	movw	r0, #33728	; 0x83c0
  124b04:	e3400014 	movt	r0, #20
  124b08:	ebff7981 	bl	103114 <rt_kprintf>
  124b0c:	e3001156 	movw	r1, #342	; 0x156
  124b10:	e3080364 	movw	r0, #33636	; 0x8364
  124b14:	e3400014 	movt	r0, #20
  124b18:	ebff989d 	bl	10ad94 <sys_arch_assert>
  124b1c:	ea00000e 	b	124b5c <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124b20:	e51b3008 	ldr	r3, [fp, #-8]
  124b24:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124b28:	e3530000 	cmp	r3, #0
  124b2c:	1a000003 	bne	124b40 <tcp_write_checks+0x184>
  124b30:	e51b3008 	ldr	r3, [fp, #-8]
  124b34:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124b38:	e3530000 	cmp	r3, #0
  124b3c:	0a000006 	beq	124b5c <tcp_write_checks+0x1a0>
  124b40:	e30803fc 	movw	r0, #33788	; 0x83fc
  124b44:	e3400014 	movt	r0, #20
  124b48:	ebff7971 	bl	103114 <rt_kprintf>
  124b4c:	e3001159 	movw	r1, #345	; 0x159
  124b50:	e3080364 	movw	r0, #33636	; 0x8364
  124b54:	e3400014 	movt	r0, #20
  124b58:	ebff988d 	bl	10ad94 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124b5c:	e3a03000 	mov	r3, #0
}
  124b60:	e1a00003 	mov	r0, r3
  124b64:	e24bd004 	sub	sp, fp, #4
  124b68:	e8bd8800 	pop	{fp, pc}

00124b6c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124b6c:	e92d4810 	push	{r4, fp, lr}
  124b70:	e28db008 	add	fp, sp, #8
  124b74:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124b78:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124b7c:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124b80:	e1a01002 	mov	r1, r2
  124b84:	e1a02003 	mov	r2, r3
  124b88:	e1a03001 	mov	r3, r1
  124b8c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124b90:	e1a03002 	mov	r3, r2
  124b94:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124b98:	e3a03000 	mov	r3, #0
  124b9c:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124ba0:	e3a03000 	mov	r3, #0
  124ba4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124ba8:	e3a03000 	mov	r3, #0
  124bac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124bb0:	e3a03000 	mov	r3, #0
  124bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124bb8:	e3a03000 	mov	r3, #0
  124bbc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124bc0:	e3a03000 	mov	r3, #0
  124bc4:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124bc8:	e3a03000 	mov	r3, #0
  124bcc:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124bd0:	e3a03000 	mov	r3, #0
  124bd4:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124bd8:	e3a03000 	mov	r3, #0
  124bdc:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124be0:	e3a03000 	mov	r3, #0
  124be4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124be8:	e3a03000 	mov	r3, #0
  124bec:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124bf0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124bf4:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124bf8:	e1a030a3 	lsr	r3, r3, #1
  124bfc:	e6ff2073 	uxth	r2, r3
  124c00:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c04:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124c08:	e1520003 	cmp	r2, r3
  124c0c:	31a03002 	movcc	r3, r2
  124c10:	21a03003 	movcs	r3, r3
  124c14:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124c18:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124c1c:	e3530000 	cmp	r3, #0
  124c20:	1a000002 	bne	124c30 <tcp_write+0xc4>
  124c24:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c28:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124c2c:	ea000000 	b	124c34 <tcp_write+0xc8>
  124c30:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124c34:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124c38:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124c3c:	e3530000 	cmp	r3, #0
  124c40:	1a000008 	bne	124c68 <tcp_write+0xfc>
  124c44:	e3080430 	movw	r0, #33840	; 0x8430
  124c48:	e3400014 	movt	r0, #20
  124c4c:	ebff7930 	bl	103114 <rt_kprintf>
  124c50:	e3001192 	movw	r1, #402	; 0x192
  124c54:	e3080364 	movw	r0, #33636	; 0x8364
  124c58:	e3400014 	movt	r0, #20
  124c5c:	ebff984c 	bl	10ad94 <sys_arch_assert>
  124c60:	e3e0300f 	mvn	r3, #15
  124c64:	ea00029f 	b	1256e8 <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124c68:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124c6c:	e1a01003 	mov	r1, r3
  124c70:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124c74:	ebffff50 	bl	1249bc <tcp_write_checks>
  124c78:	e1a03000 	mov	r3, r0
  124c7c:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124c80:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124c84:	e3530000 	cmp	r3, #0
  124c88:	0a000001 	beq	124c94 <tcp_write+0x128>
    return err;
  124c8c:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124c90:	ea000294 	b	1256e8 <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124c94:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c98:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124c9c:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124ca0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124ca4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124ca8:	e3530000 	cmp	r3, #0
  124cac:	0a0000d8 	beq	125014 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124cb0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124cb4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124cbc:	ea000002 	b	124ccc <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cc4:	e5933000 	ldr	r3, [r3]
  124cc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cd0:	e5933000 	ldr	r3, [r3]
  124cd4:	e3530000 	cmp	r3, #0
  124cd8:	1afffff8 	bne	124cc0 <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  124cdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ce0:	e5d3300a 	ldrb	r3, [r3, #10]
  124ce4:	e1a03103 	lsl	r3, r3, #2
  124ce8:	e6ff3073 	uxth	r3, r3
  124cec:	e2033004 	and	r3, r3, #4
  124cf0:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  124cf4:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cfc:	e1d330b8 	ldrh	r3, [r3, #8]
  124d00:	e1a01003 	mov	r1, r3
  124d04:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124d08:	e0813003 	add	r3, r1, r3
  124d0c:	e1520003 	cmp	r2, r3
  124d10:	aa000006 	bge	124d30 <tcp_write+0x1c4>
  124d14:	e3080464 	movw	r0, #33892	; 0x8464
  124d18:	e3400014 	movt	r0, #20
  124d1c:	ebff78fc 	bl	103114 <rt_kprintf>
  124d20:	e30011c7 	movw	r1, #455	; 0x1c7
  124d24:	e3080364 	movw	r0, #33636	; 0x8364
  124d28:	e3400014 	movt	r0, #20
  124d2c:	ebff9818 	bl	10ad94 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  124d30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d34:	e1d320b8 	ldrh	r2, [r3, #8]
  124d38:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124d3c:	e0823003 	add	r3, r2, r3
  124d40:	e6ff3073 	uxth	r3, r3
  124d44:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124d48:	e0423003 	sub	r3, r2, r3
  124d4c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  124d50:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124d54:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  124d58:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  124d5c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d60:	e3530000 	cmp	r3, #0
  124d64:	0a000025 	beq	124e00 <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  124d68:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d6c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124d70:	e1520003 	cmp	r2, r3
  124d74:	2a000006 	bcs	124d94 <tcp_write+0x228>
  124d78:	e308047c 	movw	r0, #33916	; 0x847c
  124d7c:	e3400014 	movt	r0, #20
  124d80:	ebff78e3 	bl	103114 <rt_kprintf>
  124d84:	e30011d9 	movw	r1, #473	; 0x1d9
  124d88:	e3080364 	movw	r0, #33636	; 0x8364
  124d8c:	e3400014 	movt	r0, #20
  124d90:	ebff97ff 	bl	10ad94 <sys_arch_assert>
      seg = last_unsent;
  124d94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  124d9c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124da0:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124da4:	e1520003 	cmp	r2, r3
  124da8:	9a000001 	bls	124db4 <tcp_write+0x248>
  124dac:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124db0:	ea000000 	b	124db8 <tcp_write+0x24c>
  124db4:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124db8:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124dbc:	e1530002 	cmp	r3, r2
  124dc0:	b1a03003 	movlt	r3, r3
  124dc4:	a1a03002 	movge	r3, r2
  124dc8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  124dcc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124dd0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124dd4:	e0823003 	add	r3, r2, r3
  124dd8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  124ddc:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  124de0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124de4:	e0423003 	sub	r3, r2, r3
  124de8:	e6ff3073 	uxth	r3, r3
  124dec:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  124df0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124df4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124df8:	e0423003 	sub	r3, r2, r3
  124dfc:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  124e00:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124e04:	e3530000 	cmp	r3, #0
  124e08:	0a00000a 	beq	124e38 <tcp_write+0x2cc>
  124e0c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124e10:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124e14:	e1520003 	cmp	r2, r3
  124e18:	0a000006 	beq	124e38 <tcp_write+0x2cc>
  124e1c:	e308049c 	movw	r0, #33948	; 0x849c
  124e20:	e3400014 	movt	r0, #20
  124e24:	ebff78ba 	bl	103114 <rt_kprintf>
  124e28:	e30011e1 	movw	r1, #481	; 0x1e1
  124e2c:	e3080364 	movw	r0, #33636	; 0x8364
  124e30:	e3400014 	movt	r0, #20
  124e34:	ebff97d6 	bl	10ad94 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  124e38:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124e3c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124e40:	e1520003 	cmp	r2, r3
  124e44:	2a000121 	bcs	1252d0 <tcp_write+0x764>
  124e48:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124e4c:	e3530000 	cmp	r3, #0
  124e50:	0a00011e 	beq	1252d0 <tcp_write+0x764>
  124e54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124e58:	e1d330b8 	ldrh	r3, [r3, #8]
  124e5c:	e3530000 	cmp	r3, #0
  124e60:	0a00011a 	beq	1252d0 <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  124e64:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124e68:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124e6c:	e0422003 	sub	r2, r2, r3
  124e70:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124e74:	e1520003 	cmp	r2, r3
  124e78:	b1a03002 	movlt	r3, r2
  124e7c:	a1a03003 	movge	r3, r3
  124e80:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  124e84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124e88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  124e8c:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124e90:	e2033001 	and	r3, r3, #1
  124e94:	e3530000 	cmp	r3, #0
  124e98:	0a00001f 	beq	124f1c <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  124e9c:	e24b0052 	sub	r0, fp, #82	; 0x52
  124ea0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124ea4:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  124ea8:	e3a03001 	mov	r3, #1
  124eac:	e58d3008 	str	r3, [sp, #8]
  124eb0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124eb4:	e58d3004 	str	r3, [sp, #4]
  124eb8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124ebc:	e58d3000 	str	r3, [sp]
  124ec0:	e1a03000 	mov	r3, r0
  124ec4:	e3a00004 	mov	r0, #4
  124ec8:	ebfffe67 	bl	12486c <tcp_pbuf_prealloc>
  124ecc:	e50b0010 	str	r0, [fp, #-16]
  124ed0:	e51b3010 	ldr	r3, [fp, #-16]
  124ed4:	e3530000 	cmp	r3, #0
  124ed8:	0a0001cc 	beq	125610 <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  124edc:	e51b3010 	ldr	r3, [fp, #-16]
  124ee0:	e5930004 	ldr	r0, [r3, #4]
  124ee4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124ee8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124eec:	e0823003 	add	r3, r2, r3
  124ef0:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  124ef4:	e1a01003 	mov	r1, r3
  124ef8:	eb006ee1 	bl	140a84 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  124efc:	e51b0010 	ldr	r0, [fp, #-16]
  124f00:	ebffd7a4 	bl	11ad98 <pbuf_clen>
  124f04:	e1a03000 	mov	r3, r0
  124f08:	e1a02003 	mov	r2, r3
  124f0c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  124f10:	e0823003 	add	r3, r2, r3
  124f14:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  124f18:	ea000038 	b	125000 <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  124f1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124f20:	e5933004 	ldr	r3, [r3, #4]
  124f24:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124f28:	ea000002 	b	124f38 <tcp_write+0x3cc>
  124f2c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124f30:	e5933000 	ldr	r3, [r3]
  124f34:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124f38:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124f3c:	e5933000 	ldr	r3, [r3]
  124f40:	e3530000 	cmp	r3, #0
  124f44:	1afffff8 	bne	124f2c <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  124f48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124f4c:	e5d3300c 	ldrb	r3, [r3, #12]
  124f50:	e3530001 	cmp	r3, #1
  124f54:	1a000014 	bne	124fac <tcp_write+0x440>
  124f58:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124f5c:	e5933004 	ldr	r3, [r3, #4]
  124f60:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  124f64:	e1d220ba 	ldrh	r2, [r2, #10]
  124f68:	e0833002 	add	r3, r3, r2
  124f6c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124f70:	e1520003 	cmp	r2, r3
  124f74:	1a00000c 	bne	124fac <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  124f78:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124f7c:	e3530000 	cmp	r3, #0
  124f80:	0a000006 	beq	124fa0 <tcp_write+0x434>
  124f84:	e30804bc 	movw	r0, #33980	; 0x84bc
  124f88:	e3400014 	movt	r0, #20
  124f8c:	ebff7860 	bl	103114 <rt_kprintf>
  124f90:	e3a01f83 	mov	r1, #524	; 0x20c
  124f94:	e3080364 	movw	r0, #33636	; 0x8364
  124f98:	e3400014 	movt	r0, #20
  124f9c:	ebff977c 	bl	10ad94 <sys_arch_assert>
          extendlen = seglen;
  124fa0:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124fa4:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  124fa8:	ea000014 	b	125000 <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  124fac:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124fb0:	e3a02001 	mov	r2, #1
  124fb4:	e1a01003 	mov	r1, r3
  124fb8:	e3a00004 	mov	r0, #4
  124fbc:	ebffd3e9 	bl	119f68 <pbuf_alloc>
  124fc0:	e50b0010 	str	r0, [fp, #-16]
  124fc4:	e51b3010 	ldr	r3, [fp, #-16]
  124fc8:	e3530000 	cmp	r3, #0
  124fcc:	0a000191 	beq	125618 <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  124fd0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124fd4:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124fd8:	e0822003 	add	r2, r2, r3
  124fdc:	e51b3010 	ldr	r3, [fp, #-16]
  124fe0:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  124fe4:	e51b0010 	ldr	r0, [fp, #-16]
  124fe8:	ebffd76a 	bl	11ad98 <pbuf_clen>
  124fec:	e1a03000 	mov	r3, r0
  124ff0:	e1a02003 	mov	r2, r3
  124ff4:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  124ff8:	e0823003 	add	r3, r2, r3
  124ffc:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  125000:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125004:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  125008:	e0823003 	add	r3, r2, r3
  12500c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  125010:	ea0000ae 	b	1252d0 <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  125014:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125018:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12501c:	e3530000 	cmp	r3, #0
  125020:	0a0000aa 	beq	1252d0 <tcp_write+0x764>
  125024:	e30804e8 	movw	r0, #34024	; 0x84e8
  125028:	e3400014 	movt	r0, #20
  12502c:	ebff7838 	bl	103114 <rt_kprintf>
  125030:	e3001225 	movw	r1, #549	; 0x225
  125034:	e3080364 	movw	r0, #33636	; 0x8364
  125038:	e3400014 	movt	r0, #20
  12503c:	ebff9754 	bl	10ad94 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  125040:	ea0000a2 	b	1252d0 <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  125044:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125048:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12504c:	e0423003 	sub	r3, r2, r3
  125050:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  125054:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125058:	e6ff3073 	uxth	r3, r3
  12505c:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125060:	e0423003 	sub	r3, r2, r3
  125064:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  125068:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  12506c:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  125070:	e1520003 	cmp	r2, r3
  125074:	31a03002 	movcc	r3, r2
  125078:	21a03003 	movcs	r3, r3
  12507c:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  125080:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125084:	e2033001 	and	r3, r3, #1
  125088:	e3530000 	cmp	r3, #0
  12508c:	0a00002e 	beq	12514c <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  125090:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125094:	e6ff2073 	uxth	r2, r3
  125098:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  12509c:	e0823003 	add	r3, r2, r3
  1250a0:	e6ff1073 	uxth	r1, r3
  1250a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1250a8:	e3530000 	cmp	r3, #0
  1250ac:	03a03001 	moveq	r3, #1
  1250b0:	13a03000 	movne	r3, #0
  1250b4:	e6ef3073 	uxtb	r3, r3
  1250b8:	e24b0052 	sub	r0, fp, #82	; 0x52
  1250bc:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  1250c0:	e58d3008 	str	r3, [sp, #8]
  1250c4:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1250c8:	e58d3004 	str	r3, [sp, #4]
  1250cc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1250d0:	e58d3000 	str	r3, [sp]
  1250d4:	e1a03000 	mov	r3, r0
  1250d8:	e3a00000 	mov	r0, #0
  1250dc:	ebfffde2 	bl	12486c <tcp_pbuf_prealloc>
  1250e0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1250e4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1250e8:	e3530000 	cmp	r3, #0
  1250ec:	0a00014b 	beq	125620 <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  1250f0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1250f4:	e1d330ba 	ldrh	r3, [r3, #10]
  1250f8:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  1250fc:	e1520003 	cmp	r2, r3
  125100:	9a000006 	bls	125120 <tcp_write+0x5b4>
  125104:	e3080518 	movw	r0, #34072	; 0x8518
  125108:	e3400014 	movt	r0, #20
  12510c:	ebff7800 	bl	103114 <rt_kprintf>
  125110:	e3001241 	movw	r1, #577	; 0x241
  125114:	e3080364 	movw	r0, #33636	; 0x8364
  125118:	e3400014 	movt	r0, #20
  12511c:	ebff971c 	bl	10ad94 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  125120:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125124:	e5932004 	ldr	r2, [r3, #4]
  125128:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  12512c:	e0820003 	add	r0, r2, r3
  125130:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125134:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125138:	e0823003 	add	r3, r2, r3
  12513c:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125140:	e1a01003 	mov	r1, r3
  125144:	eb006e4e 	bl	140a84 <memcpy>
  125148:	ea000027 	b	1251ec <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  12514c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125150:	e3530000 	cmp	r3, #0
  125154:	0a000006 	beq	125174 <tcp_write+0x608>
  125158:	e3080558 	movw	r0, #34136	; 0x8558
  12515c:	e3400014 	movt	r0, #20
  125160:	ebff77eb 	bl	103114 <rt_kprintf>
  125164:	e300124b 	movw	r1, #587	; 0x24b
  125168:	e3080364 	movw	r0, #33636	; 0x8364
  12516c:	e3400014 	movt	r0, #20
  125170:	ebff9707 	bl	10ad94 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  125174:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  125178:	e3a02001 	mov	r2, #1
  12517c:	e1a01003 	mov	r1, r3
  125180:	e3a00000 	mov	r0, #0
  125184:	ebffd377 	bl	119f68 <pbuf_alloc>
  125188:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  12518c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  125190:	e3530000 	cmp	r3, #0
  125194:	0a000123 	beq	125628 <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  125198:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12519c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1251a0:	e0822003 	add	r2, r2, r3
  1251a4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1251a8:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  1251ac:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1251b0:	e6ff3073 	uxth	r3, r3
  1251b4:	e3a02000 	mov	r2, #0
  1251b8:	e1a01003 	mov	r1, r3
  1251bc:	e3a00000 	mov	r0, #0
  1251c0:	ebffd368 	bl	119f68 <pbuf_alloc>
  1251c4:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1251c8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1251cc:	e3530000 	cmp	r3, #0
  1251d0:	1a000002 	bne	1251e0 <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  1251d4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  1251d8:	ebffd669 	bl	11ab84 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  1251dc:	ea000114 	b	125634 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  1251e0:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  1251e4:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1251e8:	ebffd71c 	bl	11ae60 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  1251ec:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1251f0:	ebffd6e8 	bl	11ad98 <pbuf_clen>
  1251f4:	e1a03000 	mov	r3, r0
  1251f8:	e1a02003 	mov	r2, r3
  1251fc:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125200:	e0823003 	add	r3, r2, r3
  125204:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  125208:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12520c:	e3530016 	cmp	r3, #22
  125210:	8a000003 	bhi	125224 <tcp_write+0x6b8>
  125214:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125218:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  12521c:	e1530002 	cmp	r3, r2
  125220:	9a000002 	bls	125230 <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  125224:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125228:	ebffd655 	bl	11ab84 <pbuf_free>
      goto memerr;
  12522c:	ea000100 	b	125634 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  125230:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125234:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125238:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12523c:	e0822003 	add	r2, r2, r3
  125240:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  125244:	e58d3000 	str	r3, [sp]
  125248:	e1a03002 	mov	r3, r2
  12524c:	e3a02000 	mov	r2, #0
  125250:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  125254:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  125258:	ebfffd02 	bl	124668 <tcp_create_segment>
  12525c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125260:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125264:	e3530000 	cmp	r3, #0
  125268:	0a0000f0 	beq	125630 <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  12526c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125270:	e3530000 	cmp	r3, #0
  125274:	1a000002 	bne	125284 <tcp_write+0x718>
      queue = seg;
  125278:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12527c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  125280:	ea00000c 	b	1252b8 <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  125284:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125288:	e3530000 	cmp	r3, #0
  12528c:	1a000006 	bne	1252ac <tcp_write+0x740>
  125290:	e3080568 	movw	r0, #34152	; 0x8568
  125294:	e3400014 	movt	r0, #20
  125298:	ebff779d 	bl	103114 <rt_kprintf>
  12529c:	e3001285 	movw	r1, #645	; 0x285
  1252a0:	e3080364 	movw	r0, #33636	; 0x8364
  1252a4:	e3400014 	movt	r0, #20
  1252a8:	ebff96b9 	bl	10ad94 <sys_arch_assert>
      prev_seg->next = seg;
  1252ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1252b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1252b4:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  1252b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1252bc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  1252c0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1252c4:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1252c8:	e0823003 	add	r3, r2, r3
  1252cc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  1252d0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1252d4:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1252d8:	e1520003 	cmp	r2, r3
  1252dc:	3affff58 	bcc	125044 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  1252e0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1252e4:	e3530000 	cmp	r3, #0
  1252e8:	0a00002b 	beq	12539c <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  1252ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1252f0:	e5933004 	ldr	r3, [r3, #4]
  1252f4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  1252f8:	ea00001d 	b	125374 <tcp_write+0x808>
      p->tot_len += oversize_used;
  1252fc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125300:	e1d320b8 	ldrh	r2, [r3, #8]
  125304:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125308:	e0823003 	add	r3, r2, r3
  12530c:	e6ff2073 	uxth	r2, r3
  125310:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125314:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  125318:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12531c:	e5933000 	ldr	r3, [r3]
  125320:	e3530000 	cmp	r3, #0
  125324:	1a00000f 	bne	125368 <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  125328:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12532c:	e5933004 	ldr	r3, [r3, #4]
  125330:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  125334:	e1d220ba 	ldrh	r2, [r2, #10]
  125338:	e0833002 	add	r3, r3, r2
  12533c:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  125340:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  125344:	e1a00003 	mov	r0, r3
  125348:	eb006dcd 	bl	140a84 <memcpy>
        p->len += oversize_used;
  12534c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125350:	e1d320ba 	ldrh	r2, [r3, #10]
  125354:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125358:	e0823003 	add	r3, r2, r3
  12535c:	e6ff2073 	uxth	r2, r3
  125360:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125364:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  125368:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12536c:	e5933000 	ldr	r3, [r3]
  125370:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125374:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125378:	e3530000 	cmp	r3, #0
  12537c:	1affffde 	bne	1252fc <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  125380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125384:	e1d320b8 	ldrh	r2, [r3, #8]
  125388:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12538c:	e0823003 	add	r3, r2, r3
  125390:	e6ff2073 	uxth	r2, r3
  125394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125398:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  12539c:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1253a0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1253a4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  1253a8:	e51b3010 	ldr	r3, [fp, #-16]
  1253ac:	e3530000 	cmp	r3, #0
  1253b0:	0a000017 	beq	125414 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  1253b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253b8:	e3530000 	cmp	r3, #0
  1253bc:	1a000006 	bne	1253dc <tcp_write+0x870>
  1253c0:	e308057c 	movw	r0, #34172	; 0x857c
  1253c4:	e3400014 	movt	r0, #20
  1253c8:	ebff7751 	bl	103114 <rt_kprintf>
  1253cc:	e30012bb 	movw	r1, #699	; 0x2bb
  1253d0:	e3080364 	movw	r0, #33636	; 0x8364
  1253d4:	e3400014 	movt	r0, #20
  1253d8:	ebff966d 	bl	10ad94 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  1253dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253e0:	e5933004 	ldr	r3, [r3, #4]
  1253e4:	e51b1010 	ldr	r1, [fp, #-16]
  1253e8:	e1a00003 	mov	r0, r3
  1253ec:	ebffd69b 	bl	11ae60 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  1253f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253f4:	e1d320b8 	ldrh	r2, [r3, #8]
  1253f8:	e51b3010 	ldr	r3, [fp, #-16]
  1253fc:	e1d330b8 	ldrh	r3, [r3, #8]
  125400:	e0823003 	add	r3, r2, r3
  125404:	e6ff2073 	uxth	r2, r3
  125408:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12540c:	e1c320b8 	strh	r2, [r3, #8]
  125410:	ea000037 	b	1254f4 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125414:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125418:	e3530000 	cmp	r3, #0
  12541c:	0a000034 	beq	1254f4 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  125420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125424:	e3530000 	cmp	r3, #0
  125428:	0a000003 	beq	12543c <tcp_write+0x8d0>
  12542c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125430:	e5933004 	ldr	r3, [r3, #4]
  125434:	e3530000 	cmp	r3, #0
  125438:	1a000006 	bne	125458 <tcp_write+0x8ec>
  12543c:	e30805b4 	movw	r0, #34228	; 0x85b4
  125440:	e3400014 	movt	r0, #20
  125444:	ebff7732 	bl	103114 <rt_kprintf>
  125448:	e30012c1 	movw	r1, #705	; 0x2c1
  12544c:	e3080364 	movw	r0, #33636	; 0x8364
  125450:	e3400014 	movt	r0, #20
  125454:	ebff964e 	bl	10ad94 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125458:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12545c:	e5933004 	ldr	r3, [r3, #4]
  125460:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125464:	ea000009 	b	125490 <tcp_write+0x924>
      p->tot_len += extendlen;
  125468:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12546c:	e1d320b8 	ldrh	r2, [r3, #8]
  125470:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125474:	e0823003 	add	r3, r2, r3
  125478:	e6ff2073 	uxth	r2, r3
  12547c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125480:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125484:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125488:	e5933000 	ldr	r3, [r3]
  12548c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125490:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125494:	e5933000 	ldr	r3, [r3]
  125498:	e3530000 	cmp	r3, #0
  12549c:	1afffff1 	bne	125468 <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  1254a0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1254a4:	e1d320b8 	ldrh	r2, [r3, #8]
  1254a8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1254ac:	e0823003 	add	r3, r2, r3
  1254b0:	e6ff2073 	uxth	r2, r3
  1254b4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1254b8:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  1254bc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1254c0:	e1d320ba 	ldrh	r2, [r3, #10]
  1254c4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1254c8:	e0823003 	add	r3, r2, r3
  1254cc:	e6ff2073 	uxth	r2, r3
  1254d0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1254d4:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  1254d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254dc:	e1d320b8 	ldrh	r2, [r3, #8]
  1254e0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1254e4:	e0823003 	add	r3, r2, r3
  1254e8:	e6ff2073 	uxth	r2, r3
  1254ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254f0:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  1254f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254f8:	e3530000 	cmp	r3, #0
  1254fc:	1a000003 	bne	125510 <tcp_write+0x9a4>
    pcb->unsent = queue;
  125500:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125504:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125508:	e583206c 	str	r2, [r3, #108]	; 0x6c
  12550c:	ea000002 	b	12551c <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  125510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125514:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125518:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  12551c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125520:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125524:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125528:	e0822003 	add	r2, r2, r3
  12552c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125530:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  125534:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125538:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  12553c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125540:	e0423003 	sub	r3, r2, r3
  125544:	e6ff2073 	uxth	r2, r3
  125548:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12554c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  125550:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125554:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  125558:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  12555c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125560:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125564:	e3530000 	cmp	r3, #0
  125568:	0a00000e 	beq	1255a8 <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  12556c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125570:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125574:	e3530000 	cmp	r3, #0
  125578:	1a00000a 	bne	1255a8 <tcp_write+0xa3c>
  12557c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125580:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125584:	e3530000 	cmp	r3, #0
  125588:	1a000006 	bne	1255a8 <tcp_write+0xa3c>
  12558c:	e30805ec 	movw	r0, #34284	; 0x85ec
  125590:	e3400014 	movt	r0, #20
  125594:	ebff76de 	bl	103114 <rt_kprintf>
  125598:	e30012ed 	movw	r1, #749	; 0x2ed
  12559c:	e3080364 	movw	r0, #33636	; 0x8364
  1255a0:	e3400014 	movt	r0, #20
  1255a4:	ebff95fa 	bl	10ad94 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  1255a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255ac:	e3530000 	cmp	r3, #0
  1255b0:	0a000014 	beq	125608 <tcp_write+0xa9c>
  1255b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255b8:	e593300c 	ldr	r3, [r3, #12]
  1255bc:	e3530000 	cmp	r3, #0
  1255c0:	0a000010 	beq	125608 <tcp_write+0xa9c>
  1255c4:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1255c8:	e2033002 	and	r3, r3, #2
  1255cc:	e3530000 	cmp	r3, #0
  1255d0:	1a00000c 	bne	125608 <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  1255d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255d8:	e593300c 	ldr	r3, [r3, #12]
  1255dc:	e1d330bc 	ldrh	r3, [r3, #12]
  1255e0:	e6ff4073 	uxth	r4, r3
  1255e4:	e3a00008 	mov	r0, #8
  1255e8:	ebffc32e 	bl	1162a8 <lwip_htons>
  1255ec:	e1a03000 	mov	r3, r0
  1255f0:	e1a02003 	mov	r2, r3
  1255f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255f8:	e593300c 	ldr	r3, [r3, #12]
  1255fc:	e1842002 	orr	r2, r4, r2
  125600:	e6ff2072 	uxth	r2, r2
  125604:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  125608:	e3a03000 	mov	r3, #0
  12560c:	ea000035 	b	1256e8 <tcp_write+0xb7c>
          goto memerr;
  125610:	e320f000 	nop	{0}
  125614:	ea000006 	b	125634 <tcp_write+0xac8>
            goto memerr;
  125618:	e320f000 	nop	{0}
  12561c:	ea000004 	b	125634 <tcp_write+0xac8>
        goto memerr;
  125620:	e320f000 	nop	{0}
  125624:	ea000002 	b	125634 <tcp_write+0xac8>
        goto memerr;
  125628:	e320f000 	nop	{0}
  12562c:	ea000000 	b	125634 <tcp_write+0xac8>
      goto memerr;
  125630:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  125634:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125638:	e5d3301e 	ldrb	r3, [r3, #30]
  12563c:	e1e03c83 	mvn	r3, r3, lsl #25
  125640:	e1e03ca3 	mvn	r3, r3, lsr #25
  125644:	e6ef2073 	uxtb	r2, r3
  125648:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12564c:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  125650:	e30c3a18 	movw	r3, #51736	; 0xca18
  125654:	e3403015 	movt	r3, #21
  125658:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  12565c:	e2833001 	add	r3, r3, #1
  125660:	e6ff2073 	uxth	r2, r3
  125664:	e30c3a18 	movw	r3, #51736	; 0xca18
  125668:	e3403015 	movt	r3, #21
  12566c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  125670:	e51b3010 	ldr	r3, [fp, #-16]
  125674:	e3530000 	cmp	r3, #0
  125678:	0a000001 	beq	125684 <tcp_write+0xb18>
    pbuf_free(concat_p);
  12567c:	e51b0010 	ldr	r0, [fp, #-16]
  125680:	ebffd53f 	bl	11ab84 <pbuf_free>
  }
  if (queue != NULL) {
  125684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125688:	e3530000 	cmp	r3, #0
  12568c:	0a000001 	beq	125698 <tcp_write+0xb2c>
    tcp_segs_free(queue);
  125690:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125694:	ebffe69c 	bl	11f10c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  125698:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12569c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1256a0:	e3530000 	cmp	r3, #0
  1256a4:	0a00000e 	beq	1256e4 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  1256a8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1256ac:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1256b0:	e3530000 	cmp	r3, #0
  1256b4:	1a00000a 	bne	1256e4 <tcp_write+0xb78>
  1256b8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1256bc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1256c0:	e3530000 	cmp	r3, #0
  1256c4:	1a000006 	bne	1256e4 <tcp_write+0xb78>
  1256c8:	e30805ec 	movw	r0, #34284	; 0x85ec
  1256cc:	e3400014 	movt	r0, #20
  1256d0:	ebff768f 	bl	103114 <rt_kprintf>
  1256d4:	e3001302 	movw	r1, #770	; 0x302
  1256d8:	e3080364 	movw	r0, #33636	; 0x8364
  1256dc:	e3400014 	movt	r0, #20
  1256e0:	ebff95ab 	bl	10ad94 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  1256e4:	e3e03000 	mvn	r3, #0
}
  1256e8:	e1a00003 	mov	r0, r3
  1256ec:	e24bd008 	sub	sp, fp, #8
  1256f0:	e8bd8810 	pop	{r4, fp, pc}

001256f4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  1256f4:	e92d4800 	push	{fp, lr}
  1256f8:	e28db004 	add	fp, sp, #4
  1256fc:	e24dd028 	sub	sp, sp, #40	; 0x28
  125700:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  125704:	e1a03001 	mov	r3, r1
  125708:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  12570c:	e3a03000 	mov	r3, #0
  125710:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125714:	e3a03000 	mov	r3, #0
  125718:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  12571c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125720:	e2033003 	and	r3, r3, #3
  125724:	e3530000 	cmp	r3, #0
  125728:	1a000006 	bne	125748 <tcp_enqueue_flags+0x54>
  12572c:	e308060c 	movw	r0, #34316	; 0x860c
  125730:	e3400014 	movt	r0, #20
  125734:	ebff7676 	bl	103114 <rt_kprintf>
  125738:	e300131b 	movw	r1, #795	; 0x31b
  12573c:	e3080364 	movw	r0, #33636	; 0x8364
  125740:	e3400014 	movt	r0, #20
  125744:	ebff9592 	bl	10ad94 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12574c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125750:	e3530015 	cmp	r3, #21
  125754:	8a000004 	bhi	12576c <tcp_enqueue_flags+0x78>
  125758:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12575c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125760:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125764:	e1530002 	cmp	r3, r2
  125768:	9a000014 	bls	1257c0 <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  12576c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125770:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125774:	e3530000 	cmp	r3, #0
  125778:	1a000010 	bne	1257c0 <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  12577c:	e30c3a18 	movw	r3, #51736	; 0xca18
  125780:	e3403015 	movt	r3, #21
  125784:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125788:	e2833001 	add	r3, r3, #1
  12578c:	e6ff2073 	uxth	r2, r3
  125790:	e30c3a18 	movw	r3, #51736	; 0xca18
  125794:	e3403015 	movt	r3, #21
  125798:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  12579c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1257a0:	e5d3301e 	ldrb	r3, [r3, #30]
  1257a4:	e1e03c83 	mvn	r3, r3, lsl #25
  1257a8:	e1e03ca3 	mvn	r3, r3, lsr #25
  1257ac:	e6ef2073 	uxtb	r2, r3
  1257b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1257b4:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  1257b8:	e3e03000 	mvn	r3, #0
  1257bc:	ea0000b7 	b	125aa0 <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  1257c0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1257c4:	e2033002 	and	r3, r3, #2
  1257c8:	e3530000 	cmp	r3, #0
  1257cc:	0a000001 	beq	1257d8 <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  1257d0:	e3a03001 	mov	r3, #1
  1257d4:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  1257d8:	e55b3005 	ldrb	r3, [fp, #-5]
  1257dc:	e1a03103 	lsl	r3, r3, #2
  1257e0:	e6ef3073 	uxtb	r3, r3
  1257e4:	e2033004 	and	r3, r3, #4
  1257e8:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  1257ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1257f0:	e6ff3073 	uxth	r3, r3
  1257f4:	e3a02000 	mov	r2, #0
  1257f8:	e1a01003 	mov	r1, r3
  1257fc:	e3a00000 	mov	r0, #0
  125800:	ebffd1d8 	bl	119f68 <pbuf_alloc>
  125804:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  125808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12580c:	e3530000 	cmp	r3, #0
  125810:	1a000010 	bne	125858 <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125814:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125818:	e5d3301e 	ldrb	r3, [r3, #30]
  12581c:	e1e03c83 	mvn	r3, r3, lsl #25
  125820:	e1e03ca3 	mvn	r3, r3, lsr #25
  125824:	e6ef2073 	uxtb	r2, r3
  125828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12582c:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125830:	e30c3a18 	movw	r3, #51736	; 0xca18
  125834:	e3403015 	movt	r3, #21
  125838:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  12583c:	e2833001 	add	r3, r3, #1
  125840:	e6ff2073 	uxth	r2, r3
  125844:	e30c3a18 	movw	r3, #51736	; 0xca18
  125848:	e3403015 	movt	r3, #21
  12584c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125850:	e3e03000 	mvn	r3, #0
  125854:	ea000091 	b	125aa0 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  125858:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12585c:	e1d320ba 	ldrh	r2, [r3, #10]
  125860:	e55b300d 	ldrb	r3, [fp, #-13]
  125864:	e6ff3073 	uxth	r3, r3
  125868:	e1520003 	cmp	r2, r3
  12586c:	2a000006 	bcs	12588c <tcp_enqueue_flags+0x198>
  125870:	e3080664 	movw	r0, #34404	; 0x8664
  125874:	e3400014 	movt	r0, #20
  125878:	ebff7625 	bl	103114 <rt_kprintf>
  12587c:	e3001341 	movw	r1, #833	; 0x341
  125880:	e3080364 	movw	r0, #33636	; 0x8364
  125884:	e3400014 	movt	r0, #20
  125888:	ebff9541 	bl	10ad94 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  12588c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125890:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125894:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  125898:	e55b3005 	ldrb	r3, [fp, #-5]
  12589c:	e58d3000 	str	r3, [sp]
  1258a0:	e1a03001 	mov	r3, r1
  1258a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1258a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1258ac:	ebfffb6d 	bl	124668 <tcp_create_segment>
  1258b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1258b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258b8:	e3530000 	cmp	r3, #0
  1258bc:	1a000010 	bne	125904 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  1258c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1258c4:	e5d3301e 	ldrb	r3, [r3, #30]
  1258c8:	e1e03c83 	mvn	r3, r3, lsl #25
  1258cc:	e1e03ca3 	mvn	r3, r3, lsr #25
  1258d0:	e6ef2073 	uxtb	r2, r3
  1258d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1258d8:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  1258dc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1258e0:	e3403015 	movt	r3, #21
  1258e4:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1258e8:	e2833001 	add	r3, r3, #1
  1258ec:	e6ff2073 	uxth	r2, r3
  1258f0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1258f4:	e3403015 	movt	r3, #21
  1258f8:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  1258fc:	e3e03000 	mvn	r3, #0
  125900:	ea000066 	b	125aa0 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125904:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125908:	e593300c 	ldr	r3, [r3, #12]
  12590c:	e2033003 	and	r3, r3, #3
  125910:	e3530000 	cmp	r3, #0
  125914:	0a000006 	beq	125934 <tcp_enqueue_flags+0x240>
  125918:	e30806a0 	movw	r0, #34464	; 0x86a0
  12591c:	e3400014 	movt	r0, #20
  125920:	ebff75fb 	bl	103114 <rt_kprintf>
  125924:	e3001349 	movw	r1, #841	; 0x349
  125928:	e3080364 	movw	r0, #33636	; 0x8364
  12592c:	e3400014 	movt	r0, #20
  125930:	ebff9517 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  125934:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125938:	e1d330b8 	ldrh	r3, [r3, #8]
  12593c:	e3530000 	cmp	r3, #0
  125940:	0a000006 	beq	125960 <tcp_enqueue_flags+0x26c>
  125944:	e30806b8 	movw	r0, #34488	; 0x86b8
  125948:	e3400014 	movt	r0, #20
  12594c:	ebff75f0 	bl	103114 <rt_kprintf>
  125950:	e300134a 	movw	r1, #842	; 0x34a
  125954:	e3080364 	movw	r0, #33636	; 0x8364
  125958:	e3400014 	movt	r0, #20
  12595c:	ebff950c 	bl	10ad94 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  125960:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125964:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125968:	e3530000 	cmp	r3, #0
  12596c:	1a000003 	bne	125980 <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  125970:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125974:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125978:	e583206c 	str	r2, [r3, #108]	; 0x6c
  12597c:	ea00000d 	b	1259b8 <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125984:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125988:	e50b300c 	str	r3, [fp, #-12]
  12598c:	ea000002 	b	12599c <tcp_enqueue_flags+0x2a8>
  125990:	e51b300c 	ldr	r3, [fp, #-12]
  125994:	e5933000 	ldr	r3, [r3]
  125998:	e50b300c 	str	r3, [fp, #-12]
  12599c:	e51b300c 	ldr	r3, [fp, #-12]
  1259a0:	e5933000 	ldr	r3, [r3]
  1259a4:	e3530000 	cmp	r3, #0
  1259a8:	1afffff8 	bne	125990 <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  1259ac:	e51b300c 	ldr	r3, [fp, #-12]
  1259b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1259b4:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  1259b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259bc:	e3a02000 	mov	r2, #0
  1259c0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  1259c4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1259c8:	e2033002 	and	r3, r3, #2
  1259cc:	e3530000 	cmp	r3, #0
  1259d0:	1a000003 	bne	1259e4 <tcp_enqueue_flags+0x2f0>
  1259d4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1259d8:	e2033001 	and	r3, r3, #1
  1259dc:	e3530000 	cmp	r3, #0
  1259e0:	0a000004 	beq	1259f8 <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  1259e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259e8:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  1259ec:	e2832001 	add	r2, r3, #1
  1259f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259f4:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  1259f8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1259fc:	e2033001 	and	r3, r3, #1
  125a00:	e3530000 	cmp	r3, #0
  125a04:	0a000005 	beq	125a20 <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  125a08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a0c:	e5d3301e 	ldrb	r3, [r3, #30]
  125a10:	e3833020 	orr	r3, r3, #32
  125a14:	e6ef2073 	uxtb	r2, r3
  125a18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a1c:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  125a20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125a24:	e5933004 	ldr	r3, [r3, #4]
  125a28:	e1a00003 	mov	r0, r3
  125a2c:	ebffd4d9 	bl	11ad98 <pbuf_clen>
  125a30:	e1a03000 	mov	r3, r0
  125a34:	e1a02003 	mov	r2, r3
  125a38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a3c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a40:	e0823003 	add	r3, r2, r3
  125a44:	e6ff2073 	uxth	r2, r3
  125a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a4c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125a50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a54:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a58:	e3530000 	cmp	r3, #0
  125a5c:	0a00000e 	beq	125a9c <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125a60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a64:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125a68:	e3530000 	cmp	r3, #0
  125a6c:	1a00000a 	bne	125a9c <tcp_enqueue_flags+0x3a8>
  125a70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a74:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125a78:	e3530000 	cmp	r3, #0
  125a7c:	1a000006 	bne	125a9c <tcp_enqueue_flags+0x3a8>
  125a80:	e30806e4 	movw	r0, #34532	; 0x86e4
  125a84:	e3400014 	movt	r0, #20
  125a88:	ebff75a1 	bl	103114 <rt_kprintf>
  125a8c:	e300136d 	movw	r1, #877	; 0x36d
  125a90:	e3080364 	movw	r0, #33636	; 0x8364
  125a94:	e3400014 	movt	r0, #20
  125a98:	ebff94bd 	bl	10ad94 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125a9c:	e3a03000 	mov	r3, #0
}
  125aa0:	e1a00003 	mov	r0, r3
  125aa4:	e24bd004 	sub	sp, fp, #4
  125aa8:	e8bd8800 	pop	{fp, pc}

00125aac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125aac:	e92d4810 	push	{r4, fp, lr}
  125ab0:	e28db008 	add	fp, sp, #8
  125ab4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125ab8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125abc:	e3a03000 	mov	r3, #0
  125ac0:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125ac4:	e55b300e 	ldrb	r3, [fp, #-14]
  125ac8:	e6ff4073 	uxth	r4, r3
  125acc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ad0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125ad4:	e1a00003 	mov	r0, r3
  125ad8:	ebffc1fe 	bl	1162d8 <lwip_htonl>
  125adc:	e1a03000 	mov	r3, r0
  125ae0:	e3a02000 	mov	r2, #0
  125ae4:	e1a01004 	mov	r1, r4
  125ae8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125aec:	ebfffa36 	bl	1243cc <tcp_output_alloc_header>
  125af0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125af4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125af8:	e3530000 	cmp	r3, #0
  125afc:	1a000007 	bne	125b20 <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125b00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b04:	e5d3301e 	ldrb	r3, [r3, #30]
  125b08:	e3833003 	orr	r3, r3, #3
  125b0c:	e6ef2073 	uxtb	r2, r3
  125b10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b14:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125b18:	e3e03001 	mvn	r3, #1
  125b1c:	ea000040 	b	125c24 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125b20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b24:	e5933004 	ldr	r3, [r3, #4]
  125b28:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125b2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b30:	e2833004 	add	r3, r3, #4
  125b34:	e1a00003 	mov	r0, r3
  125b38:	eb002cca 	bl	130e68 <ip4_route>
  125b3c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125b40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125b44:	e3530000 	cmp	r3, #0
  125b48:	1a000002 	bne	125b58 <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125b4c:	e3e03003 	mvn	r3, #3
  125b50:	e54b300d 	strb	r3, [fp, #-13]
  125b54:	ea00001f 	b	125bd8 <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125b58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b5c:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125b60:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125b64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b68:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125b6c:	e58d3000 	str	r3, [sp]
  125b70:	e1a03001 	mov	r3, r1
  125b74:	e3a01006 	mov	r1, #6
  125b78:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125b7c:	ebffc9e8 	bl	118324 <ip_chksum_pseudo>
  125b80:	e1a03000 	mov	r3, r0
  125b84:	e1a02003 	mov	r2, r3
  125b88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125b8c:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125b90:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125b94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b98:	e2830004 	add	r0, r3, #4
  125b9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ba0:	e5d3c00a 	ldrb	ip, [r3, #10]
  125ba4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ba8:	e5d33009 	ldrb	r3, [r3, #9]
  125bac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125bb0:	e58d2008 	str	r2, [sp, #8]
  125bb4:	e3a02006 	mov	r2, #6
  125bb8:	e58d2004 	str	r2, [sp, #4]
  125bbc:	e58d3000 	str	r3, [sp]
  125bc0:	e1a0300c 	mov	r3, ip
  125bc4:	e1a02000 	mov	r2, r0
  125bc8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125bcc:	eb002f7e 	bl	1319cc <ip4_output_if>
  125bd0:	e1a03000 	mov	r3, r0
  125bd4:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125bd8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125bdc:	ebffd3e8 	bl	11ab84 <pbuf_free>

  if (err != ERR_OK) {
  125be0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125be4:	e3530000 	cmp	r3, #0
  125be8:	0a000006 	beq	125c08 <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125bec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bf0:	e5d3301e 	ldrb	r3, [r3, #30]
  125bf4:	e3833003 	orr	r3, r3, #3
  125bf8:	e6ef2073 	uxtb	r2, r3
  125bfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c00:	e5c3201e 	strb	r2, [r3, #30]
  125c04:	ea000005 	b	125c20 <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125c08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c0c:	e5d3301e 	ldrb	r3, [r3, #30]
  125c10:	e3c33003 	bic	r3, r3, #3
  125c14:	e6ef2073 	uxtb	r2, r3
  125c18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c1c:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125c20:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125c24:	e1a00003 	mov	r0, r3
  125c28:	e24bd008 	sub	sp, fp, #8
  125c2c:	e8bd8810 	pop	{r4, fp, pc}

00125c30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125c30:	e92d4830 	push	{r4, r5, fp, lr}
  125c34:	e28db00c 	add	fp, sp, #12
  125c38:	e24dd028 	sub	sp, sp, #40	; 0x28
  125c3c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125c40:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c44:	e5933014 	ldr	r3, [r3, #20]
  125c48:	e3530001 	cmp	r3, #1
  125c4c:	1a000006 	bne	125c6c <tcp_output+0x3c>
  125c50:	e308070c 	movw	r0, #34572	; 0x870c
  125c54:	e3400014 	movt	r0, #20
  125c58:	ebff752d 	bl	103114 <rt_kprintf>
  125c5c:	e30013ed 	movw	r1, #1005	; 0x3ed
  125c60:	e3080364 	movw	r0, #33636	; 0x8364
  125c64:	e3400014 	movt	r0, #20
  125c68:	ebff9449 	bl	10ad94 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125c6c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  125c70:	e3403015 	movt	r3, #21
  125c74:	e5933000 	ldr	r3, [r3]
  125c78:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125c7c:	e1520003 	cmp	r2, r3
  125c80:	1a000001 	bne	125c8c <tcp_output+0x5c>
    return ERR_OK;
  125c84:	e3a03000 	mov	r3, #0
  125c88:	ea000196 	b	1262e8 <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125c8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c90:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125c94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c98:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125c9c:	e1520003 	cmp	r2, r3
  125ca0:	2a000002 	bcs	125cb0 <tcp_output+0x80>
  125ca4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ca8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125cac:	ea000001 	b	125cb8 <tcp_output+0x88>
  125cb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125cb4:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125cb8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125cbc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125cc0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125cc4:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125cc8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ccc:	e5d3301e 	ldrb	r3, [r3, #30]
  125cd0:	e2033002 	and	r3, r3, #2
  125cd4:	e3530000 	cmp	r3, #0
  125cd8:	0a000015 	beq	125d34 <tcp_output+0x104>
  125cdc:	e51b3010 	ldr	r3, [fp, #-16]
  125ce0:	e3530000 	cmp	r3, #0
  125ce4:	0a00000e 	beq	125d24 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  125ce8:	e51b3010 	ldr	r3, [fp, #-16]
  125cec:	e593300c 	ldr	r3, [r3, #12]
  125cf0:	e5933004 	ldr	r3, [r3, #4]
  125cf4:	e1a00003 	mov	r0, r3
  125cf8:	ebffc176 	bl	1162d8 <lwip_htonl>
  125cfc:	e1a02000 	mov	r2, r0
  125d00:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d04:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125d08:	e0423003 	sub	r3, r2, r3
  125d0c:	e51b2010 	ldr	r2, [fp, #-16]
  125d10:	e1d220b8 	ldrh	r2, [r2, #8]
  125d14:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  125d18:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125d1c:	e1520003 	cmp	r2, r3
  125d20:	2a000003 	bcs	125d34 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  125d24:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  125d28:	ebffff5f 	bl	125aac <tcp_send_empty_ack>
  125d2c:	e1a03000 	mov	r3, r0
  125d30:	ea00016c 	b	1262e8 <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  125d34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d38:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125d3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  125d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d44:	e3530000 	cmp	r3, #0
  125d48:	0a000007 	beq	125d6c <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  125d4c:	ea000002 	b	125d5c <tcp_output+0x12c>
  125d50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d54:	e5933000 	ldr	r3, [r3]
  125d58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  125d5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d60:	e5933000 	ldr	r3, [r3]
  125d64:	e3530000 	cmp	r3, #0
  125d68:	1afffff8 	bne	125d50 <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125d6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d70:	e2833004 	add	r3, r3, #4
  125d74:	e1a00003 	mov	r0, r3
  125d78:	eb002c3a 	bl	130e68 <ip4_route>
  125d7c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  125d80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d84:	e3530000 	cmp	r3, #0
  125d88:	1a000001 	bne	125d94 <tcp_output+0x164>
    return ERR_RTE;
  125d8c:	e3e03003 	mvn	r3, #3
  125d90:	ea000154 	b	1262e8 <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  125d94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d98:	e3530000 	cmp	r3, #0
  125d9c:	0a000003 	beq	125db0 <tcp_output+0x180>
  125da0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125da4:	e5933000 	ldr	r3, [r3]
  125da8:	e3530000 	cmp	r3, #0
  125dac:	1a000010 	bne	125df4 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  125db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125db4:	e3530000 	cmp	r3, #0
  125db8:	0a000002 	beq	125dc8 <tcp_output+0x198>
  125dbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125dc0:	e2833004 	add	r3, r3, #4
  125dc4:	ea000000 	b	125dcc <tcp_output+0x19c>
  125dc8:	e3a03000 	mov	r3, #0
  125dcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  125dd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125dd4:	e3530000 	cmp	r3, #0
  125dd8:	1a000001 	bne	125de4 <tcp_output+0x1b4>
      return ERR_RTE;
  125ddc:	e3e03003 	mvn	r3, #3
  125de0:	ea000140 	b	1262e8 <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  125de4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125de8:	e5932000 	ldr	r2, [r3]
  125dec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125df0:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  125df4:	e51b3010 	ldr	r3, [fp, #-16]
  125df8:	e3530000 	cmp	r3, #0
  125dfc:	0a000113 	beq	126250 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125e00:	e51b3010 	ldr	r3, [fp, #-16]
  125e04:	e593300c 	ldr	r3, [r3, #12]
  125e08:	e5933004 	ldr	r3, [r3, #4]
  125e0c:	e1a00003 	mov	r0, r3
  125e10:	ebffc130 	bl	1162d8 <lwip_htonl>
  125e14:	e1a02000 	mov	r2, r0
  125e18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e1c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125e20:	e0423003 	sub	r3, r2, r3
  125e24:	e51b2010 	ldr	r2, [fp, #-16]
  125e28:	e1d220b8 	ldrh	r2, [r2, #8]
  125e2c:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  125e30:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125e34:	e1520003 	cmp	r2, r3
  125e38:	2a000104 	bcs	126250 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125e3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e40:	e3530000 	cmp	r3, #0
  125e44:	0a000101 	beq	126250 <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  125e48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e4c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125e50:	e1a02003 	mov	r2, r3
  125e54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e58:	e1530002 	cmp	r3, r2
  125e5c:	1a0000fb 	bne	126250 <tcp_output+0x620>
  125e60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e64:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125e68:	e3530000 	cmp	r3, #0
  125e6c:	1a0000f7 	bne	126250 <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  125e70:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e74:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  125e78:	e3530000 	cmp	r3, #0
  125e7c:	1a000106 	bne	12629c <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  125e80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e84:	e3a02000 	mov	r2, #0
  125e88:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  125e8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e90:	e3a02001 	mov	r2, #1
  125e94:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  125e98:	ea0000ff 	b	12629c <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  125e9c:	e51b3010 	ldr	r3, [fp, #-16]
  125ea0:	e593300c 	ldr	r3, [r3, #12]
  125ea4:	e1d330bc 	ldrh	r3, [r3, #12]
  125ea8:	e6ff3073 	uxth	r3, r3
  125eac:	e1a00003 	mov	r0, r3
  125eb0:	ebffc0fc 	bl	1162a8 <lwip_htons>
  125eb4:	e1a03000 	mov	r3, r0
  125eb8:	e2033004 	and	r3, r3, #4
  125ebc:	e3530000 	cmp	r3, #0
  125ec0:	0a000006 	beq	125ee0 <tcp_output+0x2b0>
  125ec4:	e3080734 	movw	r0, #34612	; 0x8734
  125ec8:	e3400014 	movt	r0, #20
  125ecc:	ebff7490 	bl	103114 <rt_kprintf>
  125ed0:	e3001446 	movw	r1, #1094	; 0x446
  125ed4:	e3080364 	movw	r0, #33636	; 0x8364
  125ed8:	e3400014 	movt	r0, #20
  125edc:	ebff93ac 	bl	10ad94 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125ee0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ee4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125ee8:	e3530000 	cmp	r3, #0
  125eec:	0a00001c 	beq	125f64 <tcp_output+0x334>
  125ef0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ef4:	e5d3301e 	ldrb	r3, [r3, #30]
  125ef8:	e2033044 	and	r3, r3, #68	; 0x44
  125efc:	e3530000 	cmp	r3, #0
  125f00:	1a000017 	bne	125f64 <tcp_output+0x334>
  125f04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f08:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125f0c:	e3530000 	cmp	r3, #0
  125f10:	0a00000b 	beq	125f44 <tcp_output+0x314>
  125f14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f18:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125f1c:	e5933000 	ldr	r3, [r3]
  125f20:	e3530000 	cmp	r3, #0
  125f24:	1a00000e 	bne	125f64 <tcp_output+0x334>
  125f28:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f2c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125f30:	e1d320b8 	ldrh	r2, [r3, #8]
  125f34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f38:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  125f3c:	e1520003 	cmp	r2, r3
  125f40:	2a000007 	bcs	125f64 <tcp_output+0x334>
  125f44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f48:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  125f4c:	e3530000 	cmp	r3, #0
  125f50:	0a000003 	beq	125f64 <tcp_output+0x334>
  125f54:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f58:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125f5c:	e3530015 	cmp	r3, #21
  125f60:	9a000001 	bls	125f6c <tcp_output+0x33c>
  125f64:	e3a03001 	mov	r3, #1
  125f68:	ea000000 	b	125f70 <tcp_output+0x340>
  125f6c:	e3a03000 	mov	r3, #0
  125f70:	e3530000 	cmp	r3, #0
  125f74:	1a000004 	bne	125f8c <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  125f78:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f7c:	e5d3301e 	ldrb	r3, [r3, #30]
  125f80:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125f84:	e3530000 	cmp	r3, #0
  125f88:	0a0000c5 	beq	1262a4 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  125f8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f90:	e5933014 	ldr	r3, [r3, #20]
  125f94:	e3530002 	cmp	r3, #2
  125f98:	0a00000c 	beq	125fd0 <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  125f9c:	e51b3010 	ldr	r3, [fp, #-16]
  125fa0:	e593300c 	ldr	r3, [r3, #12]
  125fa4:	e1d330bc 	ldrh	r3, [r3, #12]
  125fa8:	e6ff4073 	uxth	r4, r3
  125fac:	e3a00010 	mov	r0, #16
  125fb0:	ebffc0bc 	bl	1162a8 <lwip_htons>
  125fb4:	e1a03000 	mov	r3, r0
  125fb8:	e1a02003 	mov	r2, r3
  125fbc:	e51b3010 	ldr	r3, [fp, #-16]
  125fc0:	e593300c 	ldr	r3, [r3, #12]
  125fc4:	e1842002 	orr	r2, r4, r2
  125fc8:	e6ff2072 	uxth	r2, r2
  125fcc:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  125fd0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125fd4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  125fd8:	e51b0010 	ldr	r0, [fp, #-16]
  125fdc:	eb0000c4 	bl	1262f4 <tcp_output_segment>
  125fe0:	e1a03000 	mov	r3, r0
  125fe4:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  125fe8:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  125fec:	e3530000 	cmp	r3, #0
  125ff0:	0a000008 	beq	126018 <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  125ff4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ff8:	e5d3301e 	ldrb	r3, [r3, #30]
  125ffc:	e1e03c83 	mvn	r3, r3, lsl #25
  126000:	e1e03ca3 	mvn	r3, r3, lsr #25
  126004:	e6ef2073 	uxtb	r2, r3
  126008:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12600c:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  126010:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126014:	ea0000b3 	b	1262e8 <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  126018:	e51b3010 	ldr	r3, [fp, #-16]
  12601c:	e5932000 	ldr	r2, [r3]
  126020:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126024:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  126028:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12602c:	e5933014 	ldr	r3, [r3, #20]
  126030:	e3530002 	cmp	r3, #2
  126034:	0a000005 	beq	126050 <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  126038:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12603c:	e5d3301e 	ldrb	r3, [r3, #30]
  126040:	e3c33003 	bic	r3, r3, #3
  126044:	e6ef2073 	uxtb	r2, r3
  126048:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12604c:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  126050:	e51b3010 	ldr	r3, [fp, #-16]
  126054:	e593300c 	ldr	r3, [r3, #12]
  126058:	e5933004 	ldr	r3, [r3, #4]
  12605c:	e1a00003 	mov	r0, r3
  126060:	ebffc09c 	bl	1162d8 <lwip_htonl>
  126064:	e1a04000 	mov	r4, r0
  126068:	e51b3010 	ldr	r3, [fp, #-16]
  12606c:	e1d330b8 	ldrh	r3, [r3, #8]
  126070:	e1a05003 	mov	r5, r3
  126074:	e51b3010 	ldr	r3, [fp, #-16]
  126078:	e593300c 	ldr	r3, [r3, #12]
  12607c:	e1d330bc 	ldrh	r3, [r3, #12]
  126080:	e6ff3073 	uxth	r3, r3
  126084:	e1a00003 	mov	r0, r3
  126088:	ebffc086 	bl	1162a8 <lwip_htons>
  12608c:	e1a03000 	mov	r3, r0
  126090:	e2033003 	and	r3, r3, #3
  126094:	e3530000 	cmp	r3, #0
  126098:	0a000001 	beq	1260a4 <tcp_output+0x474>
  12609c:	e3a03001 	mov	r3, #1
  1260a0:	ea000000 	b	1260a8 <tcp_output+0x478>
  1260a4:	e3a03000 	mov	r3, #0
  1260a8:	e0833005 	add	r3, r3, r5
  1260ac:	e0843003 	add	r3, r4, r3
  1260b0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1260b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260b8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1260bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1260c0:	e0423003 	sub	r3, r2, r3
  1260c4:	e3530000 	cmp	r3, #0
  1260c8:	aa000002 	bge	1260d8 <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  1260cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260d0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1260d4:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  1260d8:	e51b3010 	ldr	r3, [fp, #-16]
  1260dc:	e1d330b8 	ldrh	r3, [r3, #8]
  1260e0:	e1a04003 	mov	r4, r3
  1260e4:	e51b3010 	ldr	r3, [fp, #-16]
  1260e8:	e593300c 	ldr	r3, [r3, #12]
  1260ec:	e1d330bc 	ldrh	r3, [r3, #12]
  1260f0:	e6ff3073 	uxth	r3, r3
  1260f4:	e1a00003 	mov	r0, r3
  1260f8:	ebffc06a 	bl	1162a8 <lwip_htons>
  1260fc:	e1a03000 	mov	r3, r0
  126100:	e2033003 	and	r3, r3, #3
  126104:	e3530000 	cmp	r3, #0
  126108:	0a000001 	beq	126114 <tcp_output+0x4e4>
  12610c:	e3a03001 	mov	r3, #1
  126110:	ea000000 	b	126118 <tcp_output+0x4e8>
  126114:	e3a03000 	mov	r3, #0
  126118:	e0833004 	add	r3, r3, r4
  12611c:	e3530000 	cmp	r3, #0
  126120:	0a000045 	beq	12623c <tcp_output+0x60c>
      seg->next = NULL;
  126124:	e51b3010 	ldr	r3, [fp, #-16]
  126128:	e3a02000 	mov	r2, #0
  12612c:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  126130:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126134:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126138:	e3530000 	cmp	r3, #0
  12613c:	1a000005 	bne	126158 <tcp_output+0x528>
        pcb->unacked = seg;
  126140:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126144:	e51b2010 	ldr	r2, [fp, #-16]
  126148:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  12614c:	e51b3010 	ldr	r3, [fp, #-16]
  126150:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126154:	ea00003a 	b	126244 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  126158:	e51b3010 	ldr	r3, [fp, #-16]
  12615c:	e593300c 	ldr	r3, [r3, #12]
  126160:	e5933004 	ldr	r3, [r3, #4]
  126164:	e1a00003 	mov	r0, r3
  126168:	ebffc05a 	bl	1162d8 <lwip_htonl>
  12616c:	e1a04000 	mov	r4, r0
  126170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126174:	e593300c 	ldr	r3, [r3, #12]
  126178:	e5933004 	ldr	r3, [r3, #4]
  12617c:	e1a00003 	mov	r0, r3
  126180:	ebffc054 	bl	1162d8 <lwip_htonl>
  126184:	e1a03000 	mov	r3, r0
  126188:	e0443003 	sub	r3, r4, r3
  12618c:	e3530000 	cmp	r3, #0
  126190:	aa000022 	bge	126220 <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  126194:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126198:	e2833070 	add	r3, r3, #112	; 0x70
  12619c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1261a0:	ea000002 	b	1261b0 <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  1261a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1261a8:	e5933000 	ldr	r3, [r3]
  1261ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1261b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1261b4:	e5933000 	ldr	r3, [r3]
  1261b8:	e3530000 	cmp	r3, #0
  1261bc:	0a00000f 	beq	126200 <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1261c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1261c4:	e5933000 	ldr	r3, [r3]
  1261c8:	e593300c 	ldr	r3, [r3, #12]
  1261cc:	e5933004 	ldr	r3, [r3, #4]
  1261d0:	e1a00003 	mov	r0, r3
  1261d4:	ebffc03f 	bl	1162d8 <lwip_htonl>
  1261d8:	e1a04000 	mov	r4, r0
  1261dc:	e51b3010 	ldr	r3, [fp, #-16]
  1261e0:	e593300c 	ldr	r3, [r3, #12]
  1261e4:	e5933004 	ldr	r3, [r3, #4]
  1261e8:	e1a00003 	mov	r0, r3
  1261ec:	ebffc039 	bl	1162d8 <lwip_htonl>
  1261f0:	e1a03000 	mov	r3, r0
  1261f4:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  1261f8:	e3530000 	cmp	r3, #0
  1261fc:	baffffe8 	blt	1261a4 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  126200:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126204:	e5932000 	ldr	r2, [r3]
  126208:	e51b3010 	ldr	r3, [fp, #-16]
  12620c:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  126210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126214:	e51b2010 	ldr	r2, [fp, #-16]
  126218:	e5832000 	str	r2, [r3]
  12621c:	ea000008 	b	126244 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  126220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126224:	e51b2010 	ldr	r2, [fp, #-16]
  126228:	e5832000 	str	r2, [r3]
          useg = useg->next;
  12622c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126230:	e5933000 	ldr	r3, [r3]
  126234:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126238:	ea000001 	b	126244 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  12623c:	e51b0010 	ldr	r0, [fp, #-16]
  126240:	ebffe3c3 	bl	11f154 <tcp_seg_free>
    }
    seg = pcb->unsent;
  126244:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126248:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12624c:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  126250:	e51b3010 	ldr	r3, [fp, #-16]
  126254:	e3530000 	cmp	r3, #0
  126258:	0a000013 	beq	1262ac <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  12625c:	e51b3010 	ldr	r3, [fp, #-16]
  126260:	e593300c 	ldr	r3, [r3, #12]
  126264:	e5933004 	ldr	r3, [r3, #4]
  126268:	e1a00003 	mov	r0, r3
  12626c:	ebffc019 	bl	1162d8 <lwip_htonl>
  126270:	e1a02000 	mov	r2, r0
  126274:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126278:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12627c:	e0423003 	sub	r3, r2, r3
  126280:	e51b2010 	ldr	r2, [fp, #-16]
  126284:	e1d220b8 	ldrh	r2, [r2, #8]
  126288:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  12628c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126290:	e1520003 	cmp	r2, r3
  126294:	2affff00 	bcs	125e9c <tcp_output+0x26c>
  }
output_done:
  126298:	ea000003 	b	1262ac <tcp_output+0x67c>
    goto output_done;
  12629c:	e320f000 	nop	{0}
  1262a0:	ea000002 	b	1262b0 <tcp_output+0x680>
      break;
  1262a4:	e320f000 	nop	{0}
  1262a8:	ea000000 	b	1262b0 <tcp_output+0x680>
output_done:
  1262ac:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  1262b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262b4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1262b8:	e3530000 	cmp	r3, #0
  1262bc:	1a000002 	bne	1262cc <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1262c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262c4:	e3a02000 	mov	r2, #0
  1262c8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  1262cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262d0:	e5d3301e 	ldrb	r3, [r3, #30]
  1262d4:	e203307f 	and	r3, r3, #127	; 0x7f
  1262d8:	e6ef2073 	uxtb	r2, r3
  1262dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262e0:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  1262e4:	e3a03000 	mov	r3, #0
}
  1262e8:	e1a00003 	mov	r0, r3
  1262ec:	e24bd00c 	sub	sp, fp, #12
  1262f0:	e8bd8830 	pop	{r4, r5, fp, pc}

001262f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  1262f4:	e92d4810 	push	{r4, fp, lr}
  1262f8:	e28db008 	add	fp, sp, #8
  1262fc:	e24dd034 	sub	sp, sp, #52	; 0x34
  126300:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  126304:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  126308:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  12630c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126310:	e5933004 	ldr	r3, [r3, #4]
  126314:	e1d330be 	ldrh	r3, [r3, #14]
  126318:	e3530001 	cmp	r3, #1
  12631c:	0a000001 	beq	126328 <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  126320:	e3a03000 	mov	r3, #0
  126324:	ea0000a4 	b	1265bc <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  126328:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12632c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  126330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126334:	e593400c 	ldr	r4, [r3, #12]
  126338:	e1a00002 	mov	r0, r2
  12633c:	ebffbfe5 	bl	1162d8 <lwip_htonl>
  126340:	e1a03000 	mov	r3, r0
  126344:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  126348:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12634c:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  126350:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126354:	e593400c 	ldr	r4, [r3, #12]
  126358:	e1a00002 	mov	r0, r2
  12635c:	ebffbfd1 	bl	1162a8 <lwip_htons>
  126360:	e1a03000 	mov	r3, r0
  126364:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  126368:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12636c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  126370:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126374:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  126378:	e0832002 	add	r2, r3, r2
  12637c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126380:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  126384:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126388:	e593300c 	ldr	r3, [r3, #12]
  12638c:	e2833014 	add	r3, r3, #20
  126390:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  126394:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126398:	e5d3300a 	ldrb	r3, [r3, #10]
  12639c:	e2033001 	and	r3, r3, #1
  1263a0:	e3530000 	cmp	r3, #0
  1263a4:	0a000010 	beq	1263ec <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  1263a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263ac:	e2833004 	add	r3, r3, #4
  1263b0:	e1a01003 	mov	r1, r3
  1263b4:	e30005b4 	movw	r0, #1460	; 0x5b4
  1263b8:	ebffe665 	bl	11fd54 <tcp_eff_send_mss_impl>
  1263bc:	e1a03000 	mov	r3, r0
  1263c0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  1263c4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1263c8:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  1263cc:	e1a00003 	mov	r0, r3
  1263d0:	ebffbfc0 	bl	1162d8 <lwip_htonl>
  1263d4:	e1a02000 	mov	r2, r0
  1263d8:	e51b3010 	ldr	r3, [fp, #-16]
  1263dc:	e5832000 	str	r2, [r3]
    opts += 1;
  1263e0:	e51b3010 	ldr	r3, [fp, #-16]
  1263e4:	e2833004 	add	r3, r3, #4
  1263e8:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  1263ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263f0:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  1263f4:	e3530000 	cmp	r3, #0
  1263f8:	aa000002 	bge	126408 <tcp_output_segment+0x114>
    pcb->rtime = 0;
  1263fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126400:	e3a02000 	mov	r2, #0
  126404:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  126408:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12640c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  126410:	e3530000 	cmp	r3, #0
  126414:	1a00000c 	bne	12644c <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  126418:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  12641c:	e3403015 	movt	r3, #21
  126420:	e5932000 	ldr	r2, [r3]
  126424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126428:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  12642c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126430:	e593300c 	ldr	r3, [r3, #12]
  126434:	e5933004 	ldr	r3, [r3, #4]
  126438:	e1a00003 	mov	r0, r3
  12643c:	ebffbfa5 	bl	1162d8 <lwip_htonl>
  126440:	e1a02000 	mov	r2, r0
  126444:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126448:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  12644c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126450:	e593300c 	ldr	r3, [r3, #12]
  126454:	e1a02003 	mov	r2, r3
  126458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12645c:	e5933004 	ldr	r3, [r3, #4]
  126460:	e5933004 	ldr	r3, [r3, #4]
  126464:	e0423003 	sub	r3, r2, r3
  126468:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  12646c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  126470:	e3530000 	cmp	r3, #0
  126474:	1a000006 	bne	126494 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  126478:	e30c3a18 	movw	r3, #51736	; 0xca18
  12647c:	e3403015 	movt	r3, #21
  126480:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  126484:	e2832001 	add	r2, r3, #1
  126488:	e30c3a18 	movw	r3, #51736	; 0xca18
  12648c:	e3403015 	movt	r3, #21
  126490:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  126494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126498:	e5933004 	ldr	r3, [r3, #4]
  12649c:	e1d310ba 	ldrh	r1, [r3, #10]
  1264a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264a4:	e5933004 	ldr	r3, [r3, #4]
  1264a8:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1264ac:	e0412002 	sub	r2, r1, r2
  1264b0:	e6ff2072 	uxth	r2, r2
  1264b4:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  1264b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264bc:	e5933004 	ldr	r3, [r3, #4]
  1264c0:	e1d310b8 	ldrh	r1, [r3, #8]
  1264c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264c8:	e5933004 	ldr	r3, [r3, #4]
  1264cc:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1264d0:	e0412002 	sub	r2, r1, r2
  1264d4:	e6ff2072 	uxth	r2, r2
  1264d8:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  1264dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264e0:	e5933004 	ldr	r3, [r3, #4]
  1264e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1264e8:	e592200c 	ldr	r2, [r2, #12]
  1264ec:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  1264f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264f4:	e593300c 	ldr	r3, [r3, #12]
  1264f8:	e3a02000 	mov	r2, #0
  1264fc:	e5c32010 	strb	r2, [r3, #16]
  126500:	e3a02000 	mov	r2, #0
  126504:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126508:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12650c:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126510:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126514:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126518:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  12651c:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  126520:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126524:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126528:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12652c:	e592400c 	ldr	r4, [r2, #12]
  126530:	e58d3000 	str	r3, [sp]
  126534:	e1a0300c 	mov	r3, ip
  126538:	e1a02001 	mov	r2, r1
  12653c:	e3a01006 	mov	r1, #6
  126540:	ebffc777 	bl	118324 <ip_chksum_pseudo>
  126544:	e1a03000 	mov	r3, r0
  126548:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  12654c:	e30c3a18 	movw	r3, #51736	; 0xca18
  126550:	e3403015 	movt	r3, #21
  126554:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126558:	e2833001 	add	r3, r3, #1
  12655c:	e6ff2073 	uxth	r2, r3
  126560:	e30c3a18 	movw	r3, #51736	; 0xca18
  126564:	e3403015 	movt	r3, #21
  126568:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  12656c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126570:	e5930004 	ldr	r0, [r3, #4]
  126574:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126578:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12657c:	e283c004 	add	ip, r3, #4
  126580:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126584:	e5d3e00a 	ldrb	lr, [r3, #10]
  126588:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12658c:	e5d33009 	ldrb	r3, [r3, #9]
  126590:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126594:	e58d2008 	str	r2, [sp, #8]
  126598:	e3a02006 	mov	r2, #6
  12659c:	e58d2004 	str	r2, [sp, #4]
  1265a0:	e58d3000 	str	r3, [sp]
  1265a4:	e1a0300e 	mov	r3, lr
  1265a8:	e1a0200c 	mov	r2, ip
  1265ac:	eb002d06 	bl	1319cc <ip4_output_if>
  1265b0:	e1a03000 	mov	r3, r0
  1265b4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  1265b8:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  1265bc:	e1a00003 	mov	r0, r3
  1265c0:	e24bd008 	sub	sp, fp, #8
  1265c4:	e8bd8810 	pop	{r4, fp, pc}

001265c8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  1265c8:	e92d4800 	push	{fp, lr}
  1265cc:	e28db004 	add	fp, sp, #4
  1265d0:	e24dd030 	sub	sp, sp, #48	; 0x30
  1265d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1265d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1265dc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1265e0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  1265e4:	e3a02000 	mov	r2, #0
  1265e8:	e3a01014 	mov	r1, #20
  1265ec:	e3a00001 	mov	r0, #1
  1265f0:	ebffce5c 	bl	119f68 <pbuf_alloc>
  1265f4:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  1265f8:	e51b3008 	ldr	r3, [fp, #-8]
  1265fc:	e3530000 	cmp	r3, #0
  126600:	0a00006a 	beq	1267b0 <tcp_rst+0x1e8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  126604:	e51b3008 	ldr	r3, [fp, #-8]
  126608:	e1d330ba 	ldrh	r3, [r3, #10]
  12660c:	e3530013 	cmp	r3, #19
  126610:	8a000006 	bhi	126630 <tcp_rst+0x68>
  126614:	e3080334 	movw	r0, #33588	; 0x8334
  126618:	e3400014 	movt	r0, #20
  12661c:	ebff72bc 	bl	103114 <rt_kprintf>
  126620:	e300154d 	movw	r1, #1357	; 0x54d
  126624:	e3080364 	movw	r0, #33636	; 0x8364
  126628:	e3400014 	movt	r0, #20
  12662c:	ebff91d8 	bl	10ad94 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  126630:	e51b3008 	ldr	r3, [fp, #-8]
  126634:	e5933004 	ldr	r3, [r3, #4]
  126638:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  12663c:	e1db30b4 	ldrh	r3, [fp, #4]
  126640:	e1a00003 	mov	r0, r3
  126644:	ebffbf17 	bl	1162a8 <lwip_htons>
  126648:	e1a03000 	mov	r3, r0
  12664c:	e1a02003 	mov	r2, r3
  126650:	e51b300c 	ldr	r3, [fp, #-12]
  126654:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  126658:	e1db30b8 	ldrh	r3, [fp, #8]
  12665c:	e1a00003 	mov	r0, r3
  126660:	ebffbf10 	bl	1162a8 <lwip_htons>
  126664:	e1a03000 	mov	r3, r0
  126668:	e1a02003 	mov	r2, r3
  12666c:	e51b300c 	ldr	r3, [fp, #-12]
  126670:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  126674:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126678:	ebffbf16 	bl	1162d8 <lwip_htonl>
  12667c:	e1a02000 	mov	r2, r0
  126680:	e51b300c 	ldr	r3, [fp, #-12]
  126684:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  126688:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12668c:	ebffbf11 	bl	1162d8 <lwip_htonl>
  126690:	e1a02000 	mov	r2, r0
  126694:	e51b300c 	ldr	r3, [fp, #-12]
  126698:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  12669c:	e3050014 	movw	r0, #20500	; 0x5014
  1266a0:	ebffbf00 	bl	1162a8 <lwip_htons>
  1266a4:	e1a03000 	mov	r3, r0
  1266a8:	e1a02003 	mov	r2, r3
  1266ac:	e51b300c 	ldr	r3, [fp, #-12]
  1266b0:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  1266b4:	e51b300c 	ldr	r3, [fp, #-12]
  1266b8:	e3a02000 	mov	r2, #0
  1266bc:	e3822020 	orr	r2, r2, #32
  1266c0:	e5c3200e 	strb	r2, [r3, #14]
  1266c4:	e3a02000 	mov	r2, #0
  1266c8:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  1266cc:	e51b300c 	ldr	r3, [fp, #-12]
  1266d0:	e3a02000 	mov	r2, #0
  1266d4:	e5c32010 	strb	r2, [r3, #16]
  1266d8:	e3a02000 	mov	r2, #0
  1266dc:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  1266e0:	e51b300c 	ldr	r3, [fp, #-12]
  1266e4:	e3a02000 	mov	r2, #0
  1266e8:	e5c32012 	strb	r2, [r3, #18]
  1266ec:	e3a02000 	mov	r2, #0
  1266f0:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  1266f4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1266f8:	e3403015 	movt	r3, #21
  1266fc:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126700:	e2833001 	add	r3, r3, #1
  126704:	e6ff2073 	uxth	r2, r3
  126708:	e30c3a18 	movw	r3, #51736	; 0xca18
  12670c:	e3403015 	movt	r3, #21
  126710:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126714:	e30c3a18 	movw	r3, #51736	; 0xca18
  126718:	e3403015 	movt	r3, #21
  12671c:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  126720:	e2832001 	add	r2, r3, #1
  126724:	e30c3a18 	movw	r3, #51736	; 0xca18
  126728:	e3403015 	movt	r3, #21
  12672c:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  126730:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  126734:	eb0029cb 	bl	130e68 <ip4_route>
  126738:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  12673c:	e51b3010 	ldr	r3, [fp, #-16]
  126740:	e3530000 	cmp	r3, #0
  126744:	0a000016 	beq	1267a4 <tcp_rst+0x1dc>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126748:	e51b3008 	ldr	r3, [fp, #-8]
  12674c:	e1d320b8 	ldrh	r2, [r3, #8]
  126750:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126754:	e58d3000 	str	r3, [sp]
  126758:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12675c:	e3a01006 	mov	r1, #6
  126760:	e51b0008 	ldr	r0, [fp, #-8]
  126764:	ebffc6ee 	bl	118324 <ip_chksum_pseudo>
  126768:	e1a03000 	mov	r3, r0
  12676c:	e1a02003 	mov	r2, r3
  126770:	e51b300c 	ldr	r3, [fp, #-12]
  126774:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  126778:	e51b3010 	ldr	r3, [fp, #-16]
  12677c:	e58d3008 	str	r3, [sp, #8]
  126780:	e3a03006 	mov	r3, #6
  126784:	e58d3004 	str	r3, [sp, #4]
  126788:	e3a03000 	mov	r3, #0
  12678c:	e58d3000 	str	r3, [sp]
  126790:	e3a030ff 	mov	r3, #255	; 0xff
  126794:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126798:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12679c:	e51b0008 	ldr	r0, [fp, #-8]
  1267a0:	eb002c89 	bl	1319cc <ip4_output_if>
  }
  pbuf_free(p);
  1267a4:	e51b0008 	ldr	r0, [fp, #-8]
  1267a8:	ebffd0f5 	bl	11ab84 <pbuf_free>
  1267ac:	ea000000 	b	1267b4 <tcp_rst+0x1ec>
    return;
  1267b0:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  1267b4:	e24bd004 	sub	sp, fp, #4
  1267b8:	e8bd8800 	pop	{fp, pc}

001267bc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  1267bc:	e92d4800 	push	{fp, lr}
  1267c0:	e28db004 	add	fp, sp, #4
  1267c4:	e24dd010 	sub	sp, sp, #16
  1267c8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  1267cc:	e51b3010 	ldr	r3, [fp, #-16]
  1267d0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1267d4:	e3530000 	cmp	r3, #0
  1267d8:	0a000025 	beq	126874 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  1267dc:	e51b3010 	ldr	r3, [fp, #-16]
  1267e0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1267e4:	e50b3008 	str	r3, [fp, #-8]
  1267e8:	ea000002 	b	1267f8 <tcp_rexmit_rto+0x3c>
  1267ec:	e51b3008 	ldr	r3, [fp, #-8]
  1267f0:	e5933000 	ldr	r3, [r3]
  1267f4:	e50b3008 	str	r3, [fp, #-8]
  1267f8:	e51b3008 	ldr	r3, [fp, #-8]
  1267fc:	e5933000 	ldr	r3, [r3]
  126800:	e3530000 	cmp	r3, #0
  126804:	1afffff8 	bne	1267ec <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  126808:	e51b3010 	ldr	r3, [fp, #-16]
  12680c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126810:	e51b3008 	ldr	r3, [fp, #-8]
  126814:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  126818:	e51b3010 	ldr	r3, [fp, #-16]
  12681c:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  126820:	e51b3010 	ldr	r3, [fp, #-16]
  126824:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  126828:	e51b3010 	ldr	r3, [fp, #-16]
  12682c:	e3a02000 	mov	r2, #0
  126830:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  126834:	e51b3010 	ldr	r3, [fp, #-16]
  126838:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  12683c:	e35300ff 	cmp	r3, #255	; 0xff
  126840:	0a000005 	beq	12685c <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  126844:	e51b3010 	ldr	r3, [fp, #-16]
  126848:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  12684c:	e2833001 	add	r3, r3, #1
  126850:	e6ef2073 	uxtb	r2, r3
  126854:	e51b3010 	ldr	r3, [fp, #-16]
  126858:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  12685c:	e51b3010 	ldr	r3, [fp, #-16]
  126860:	e3a02000 	mov	r2, #0
  126864:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  126868:	e51b0010 	ldr	r0, [fp, #-16]
  12686c:	ebfffcef 	bl	125c30 <tcp_output>
  126870:	ea000000 	b	126878 <tcp_rexmit_rto+0xbc>
    return;
  126874:	e320f000 	nop	{0}
}
  126878:	e24bd004 	sub	sp, fp, #4
  12687c:	e8bd8800 	pop	{fp, pc}

00126880 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126880:	e92d4810 	push	{r4, fp, lr}
  126884:	e28db008 	add	fp, sp, #8
  126888:	e24dd014 	sub	sp, sp, #20
  12688c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126894:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126898:	e3530000 	cmp	r3, #0
  12689c:	0a000044 	beq	1269b4 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  1268a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1268a4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1268a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  1268ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1268b0:	e5932000 	ldr	r2, [r3]
  1268b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1268b8:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  1268bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1268c0:	e283306c 	add	r3, r3, #108	; 0x6c
  1268c4:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  1268c8:	ea000002 	b	1268d8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  1268cc:	e51b3010 	ldr	r3, [fp, #-16]
  1268d0:	e5933000 	ldr	r3, [r3]
  1268d4:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  1268d8:	e51b3010 	ldr	r3, [fp, #-16]
  1268dc:	e5933000 	ldr	r3, [r3]
  1268e0:	e3530000 	cmp	r3, #0
  1268e4:	0a00000f 	beq	126928 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1268e8:	e51b3010 	ldr	r3, [fp, #-16]
  1268ec:	e5933000 	ldr	r3, [r3]
  1268f0:	e593300c 	ldr	r3, [r3, #12]
  1268f4:	e5933004 	ldr	r3, [r3, #4]
  1268f8:	e1a00003 	mov	r0, r3
  1268fc:	ebffbe75 	bl	1162d8 <lwip_htonl>
  126900:	e1a04000 	mov	r4, r0
  126904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126908:	e593300c 	ldr	r3, [r3, #12]
  12690c:	e5933004 	ldr	r3, [r3, #4]
  126910:	e1a00003 	mov	r0, r3
  126914:	ebffbe6f 	bl	1162d8 <lwip_htonl>
  126918:	e1a03000 	mov	r3, r0
  12691c:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  126920:	e3530000 	cmp	r3, #0
  126924:	baffffe8 	blt	1268cc <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  126928:	e51b3010 	ldr	r3, [fp, #-16]
  12692c:	e5932000 	ldr	r2, [r3]
  126930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126934:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  126938:	e51b3010 	ldr	r3, [fp, #-16]
  12693c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  126940:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  126944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126948:	e5933000 	ldr	r3, [r3]
  12694c:	e3530000 	cmp	r3, #0
  126950:	1a000002 	bne	126960 <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126958:	e3a02000 	mov	r2, #0
  12695c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  126960:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126964:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126968:	e35300ff 	cmp	r3, #255	; 0xff
  12696c:	0a000005 	beq	126988 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  126970:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126974:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126978:	e2833001 	add	r3, r3, #1
  12697c:	e6ef2073 	uxtb	r2, r3
  126980:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126984:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  126988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12698c:	e3a02000 	mov	r2, #0
  126990:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126994:	e30c3a18 	movw	r3, #51736	; 0xca18
  126998:	e3403015 	movt	r3, #21
  12699c:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  1269a0:	e2832001 	add	r2, r3, #1
  1269a4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1269a8:	e3403015 	movt	r3, #21
  1269ac:	e5832180 	str	r2, [r3, #384]	; 0x180
  1269b0:	ea000000 	b	1269b8 <tcp_rexmit+0x138>
    return;
  1269b4:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  1269b8:	e24bd008 	sub	sp, fp, #8
  1269bc:	e8bd8810 	pop	{r4, fp, pc}

001269c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  1269c0:	e92d4800 	push	{fp, lr}
  1269c4:	e28db004 	add	fp, sp, #4
  1269c8:	e24dd008 	sub	sp, sp, #8
  1269cc:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  1269d0:	e51b3008 	ldr	r3, [fp, #-8]
  1269d4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1269d8:	e3530000 	cmp	r3, #0
  1269dc:	0a00003e 	beq	126adc <tcp_rexmit_fast+0x11c>
  1269e0:	e51b3008 	ldr	r3, [fp, #-8]
  1269e4:	e5d3301e 	ldrb	r3, [r3, #30]
  1269e8:	e2033004 	and	r3, r3, #4
  1269ec:	e3530000 	cmp	r3, #0
  1269f0:	1a000039 	bne	126adc <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  1269f4:	e51b0008 	ldr	r0, [fp, #-8]
  1269f8:	ebffffa0 	bl	126880 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  1269fc:	e51b3008 	ldr	r3, [fp, #-8]
  126a00:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126a04:	e51b3008 	ldr	r3, [fp, #-8]
  126a08:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126a0c:	e1520003 	cmp	r2, r3
  126a10:	2a000006 	bcs	126a30 <tcp_rexmit_fast+0x70>
  126a14:	e51b3008 	ldr	r3, [fp, #-8]
  126a18:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  126a1c:	e1a02fa3 	lsr	r2, r3, #31
  126a20:	e0823003 	add	r3, r2, r3
  126a24:	e1a030c3 	asr	r3, r3, #1
  126a28:	e6ff3073 	uxth	r3, r3
  126a2c:	ea000005 	b	126a48 <tcp_rexmit_fast+0x88>
  126a30:	e51b3008 	ldr	r3, [fp, #-8]
  126a34:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126a38:	e1a02fa3 	lsr	r2, r3, #31
  126a3c:	e0823003 	add	r3, r2, r3
  126a40:	e1a030c3 	asr	r3, r3, #1
  126a44:	e6ff3073 	uxth	r3, r3
  126a48:	e51b2008 	ldr	r2, [fp, #-8]
  126a4c:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126a50:	e51b3008 	ldr	r3, [fp, #-8]
  126a54:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126a58:	e1a02003 	mov	r2, r3
  126a5c:	e51b3008 	ldr	r3, [fp, #-8]
  126a60:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126a64:	e1a03083 	lsl	r3, r3, #1
  126a68:	e1520003 	cmp	r2, r3
  126a6c:	2a000005 	bcs	126a88 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126a70:	e51b3008 	ldr	r3, [fp, #-8]
  126a74:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126a78:	e1a03083 	lsl	r3, r3, #1
  126a7c:	e6ff2073 	uxth	r2, r3
  126a80:	e51b3008 	ldr	r3, [fp, #-8]
  126a84:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126a88:	e51b3008 	ldr	r3, [fp, #-8]
  126a8c:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126a90:	e51b3008 	ldr	r3, [fp, #-8]
  126a94:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126a98:	e1a01003 	mov	r1, r3
  126a9c:	e1a01081 	lsl	r1, r1, #1
  126aa0:	e0813003 	add	r3, r1, r3
  126aa4:	e6ff3073 	uxth	r3, r3
  126aa8:	e0823003 	add	r3, r2, r3
  126aac:	e6ff2073 	uxth	r2, r3
  126ab0:	e51b3008 	ldr	r3, [fp, #-8]
  126ab4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126ab8:	e51b3008 	ldr	r3, [fp, #-8]
  126abc:	e5d3301e 	ldrb	r3, [r3, #30]
  126ac0:	e3833004 	orr	r3, r3, #4
  126ac4:	e6ef2073 	uxtb	r2, r3
  126ac8:	e51b3008 	ldr	r3, [fp, #-8]
  126acc:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126ad0:	e51b3008 	ldr	r3, [fp, #-8]
  126ad4:	e3a02000 	mov	r2, #0
  126ad8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126adc:	e320f000 	nop	{0}
  126ae0:	e24bd004 	sub	sp, fp, #4
  126ae4:	e8bd8800 	pop	{fp, pc}

00126ae8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126ae8:	e92d4800 	push	{fp, lr}
  126aec:	e28db004 	add	fp, sp, #4
  126af0:	e24dd028 	sub	sp, sp, #40	; 0x28
  126af4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126afc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126b00:	e2433001 	sub	r3, r3, #1
  126b04:	e1a00003 	mov	r0, r3
  126b08:	ebffbdf2 	bl	1162d8 <lwip_htonl>
  126b0c:	e1a03000 	mov	r3, r0
  126b10:	e3a02000 	mov	r2, #0
  126b14:	e3a01000 	mov	r1, #0
  126b18:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126b1c:	ebfff62a 	bl	1243cc <tcp_output_alloc_header>
  126b20:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126b24:	e51b300c 	ldr	r3, [fp, #-12]
  126b28:	e3530000 	cmp	r3, #0
  126b2c:	1a000001 	bne	126b38 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126b30:	e3e03000 	mvn	r3, #0
  126b34:	ea000036 	b	126c14 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126b38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b3c:	e2833004 	add	r3, r3, #4
  126b40:	e1a00003 	mov	r0, r3
  126b44:	eb0028c7 	bl	130e68 <ip4_route>
  126b48:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126b4c:	e51b3010 	ldr	r3, [fp, #-16]
  126b50:	e3530000 	cmp	r3, #0
  126b54:	1a000002 	bne	126b64 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126b58:	e3e03003 	mvn	r3, #3
  126b5c:	e54b3005 	strb	r3, [fp, #-5]
  126b60:	ea000028 	b	126c08 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126b64:	e51b300c 	ldr	r3, [fp, #-12]
  126b68:	e5933004 	ldr	r3, [r3, #4]
  126b6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126b70:	e51b300c 	ldr	r3, [fp, #-12]
  126b74:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126b78:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b80:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126b84:	e58d3000 	str	r3, [sp]
  126b88:	e1a03001 	mov	r3, r1
  126b8c:	e3a01006 	mov	r1, #6
  126b90:	e51b000c 	ldr	r0, [fp, #-12]
  126b94:	ebffc5e2 	bl	118324 <ip_chksum_pseudo>
  126b98:	e1a03000 	mov	r3, r0
  126b9c:	e1a02003 	mov	r2, r3
  126ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ba4:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126ba8:	e30c3a18 	movw	r3, #51736	; 0xca18
  126bac:	e3403015 	movt	r3, #21
  126bb0:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126bb4:	e2833001 	add	r3, r3, #1
  126bb8:	e6ff2073 	uxth	r2, r3
  126bbc:	e30c3a18 	movw	r3, #51736	; 0xca18
  126bc0:	e3403015 	movt	r3, #21
  126bc4:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126bc8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126bcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bd0:	e2832004 	add	r2, r3, #4
  126bd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bd8:	e5d3000a 	ldrb	r0, [r3, #10]
  126bdc:	e51b3010 	ldr	r3, [fp, #-16]
  126be0:	e58d3008 	str	r3, [sp, #8]
  126be4:	e3a03006 	mov	r3, #6
  126be8:	e58d3004 	str	r3, [sp, #4]
  126bec:	e3a03000 	mov	r3, #0
  126bf0:	e58d3000 	str	r3, [sp]
  126bf4:	e1a03000 	mov	r3, r0
  126bf8:	e51b000c 	ldr	r0, [fp, #-12]
  126bfc:	eb002b72 	bl	1319cc <ip4_output_if>
  126c00:	e1a03000 	mov	r3, r0
  126c04:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126c08:	e51b000c 	ldr	r0, [fp, #-12]
  126c0c:	ebffcfdc 	bl	11ab84 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126c10:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126c14:	e1a00003 	mov	r0, r3
  126c18:	e24bd004 	sub	sp, fp, #4
  126c1c:	e8bd8800 	pop	{fp, pc}

00126c20 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126c20:	e92d4810 	push	{r4, fp, lr}
  126c24:	e28db008 	add	fp, sp, #8
  126c28:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126c2c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126c30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126c34:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126c38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c40:	e3530000 	cmp	r3, #0
  126c44:	1a000002 	bne	126c54 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126c48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126c4c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126c50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126c54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c58:	e3530000 	cmp	r3, #0
  126c5c:	1a000001 	bne	126c68 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126c60:	e3a03000 	mov	r3, #0
  126c64:	ea00008c 	b	126e9c <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126c68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c6c:	e593300c 	ldr	r3, [r3, #12]
  126c70:	e1d330bc 	ldrh	r3, [r3, #12]
  126c74:	e6ff3073 	uxth	r3, r3
  126c78:	e1a00003 	mov	r0, r3
  126c7c:	ebffbd89 	bl	1162a8 <lwip_htons>
  126c80:	e1a03000 	mov	r3, r0
  126c84:	e2033001 	and	r3, r3, #1
  126c88:	e3530000 	cmp	r3, #0
  126c8c:	0a000005 	beq	126ca8 <tcp_zero_window_probe+0x88>
  126c90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c94:	e1d330b8 	ldrh	r3, [r3, #8]
  126c98:	e3530000 	cmp	r3, #0
  126c9c:	1a000001 	bne	126ca8 <tcp_zero_window_probe+0x88>
  126ca0:	e3a03001 	mov	r3, #1
  126ca4:	ea000000 	b	126cac <tcp_zero_window_probe+0x8c>
  126ca8:	e3a03000 	mov	r3, #0
  126cac:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126cb0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126cb4:	e3530000 	cmp	r3, #0
  126cb8:	03a03001 	moveq	r3, #1
  126cbc:	13a03000 	movne	r3, #0
  126cc0:	e6ef3073 	uxtb	r3, r3
  126cc4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126cc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ccc:	e593300c 	ldr	r3, [r3, #12]
  126cd0:	e5933004 	ldr	r3, [r3, #4]
  126cd4:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  126cd8:	e3a01000 	mov	r1, #0
  126cdc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126ce0:	ebfff5b9 	bl	1243cc <tcp_output_alloc_header>
  126ce4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  126ce8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126cec:	e3530000 	cmp	r3, #0
  126cf0:	1a000001 	bne	126cfc <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  126cf4:	e3e03000 	mvn	r3, #0
  126cf8:	ea000067 	b	126e9c <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  126cfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126d00:	e5933004 	ldr	r3, [r3, #4]
  126d04:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  126d08:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126d0c:	e3530000 	cmp	r3, #0
  126d10:	0a00000c 	beq	126d48 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  126d14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126d18:	e1d330bc 	ldrh	r3, [r3, #12]
  126d1c:	e6ff3073 	uxth	r3, r3
  126d20:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  126d24:	e6ff4073 	uxth	r4, r3
  126d28:	e3a00011 	mov	r0, #17
  126d2c:	ebffbd5d 	bl	1162a8 <lwip_htons>
  126d30:	e1a03000 	mov	r3, r0
  126d34:	e1843003 	orr	r3, r4, r3
  126d38:	e6ff2073 	uxth	r2, r3
  126d3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126d40:	e1c320bc 	strh	r2, [r3, #12]
  126d44:	ea00000f 	b	126d88 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  126d48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126d4c:	e5933004 	ldr	r3, [r3, #4]
  126d50:	e2833014 	add	r3, r3, #20
  126d54:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  126d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d5c:	e5930004 	ldr	r0, [r3, #4]
  126d60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d64:	e5933004 	ldr	r3, [r3, #4]
  126d68:	e1d320b8 	ldrh	r2, [r3, #8]
  126d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d70:	e1d330b8 	ldrh	r3, [r3, #8]
  126d74:	e0423003 	sub	r3, r2, r3
  126d78:	e6ff3073 	uxth	r3, r3
  126d7c:	e3a02001 	mov	r2, #1
  126d80:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126d84:	ebffd189 	bl	11b3b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  126d88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d8c:	e593300c 	ldr	r3, [r3, #12]
  126d90:	e5933004 	ldr	r3, [r3, #4]
  126d94:	e1a00003 	mov	r0, r3
  126d98:	ebffbd4e 	bl	1162d8 <lwip_htonl>
  126d9c:	e1a03000 	mov	r3, r0
  126da0:	e2833001 	add	r3, r3, #1
  126da4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  126da8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126dac:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  126db0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  126db4:	e0423003 	sub	r3, r2, r3
  126db8:	e3530000 	cmp	r3, #0
  126dbc:	aa000002 	bge	126dcc <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  126dc0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126dc4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126dc8:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126dcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126dd0:	e2833004 	add	r3, r3, #4
  126dd4:	e1a00003 	mov	r0, r3
  126dd8:	eb002822 	bl	130e68 <ip4_route>
  126ddc:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  126de0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126de4:	e3530000 	cmp	r3, #0
  126de8:	1a000002 	bne	126df8 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  126dec:	e3e03003 	mvn	r3, #3
  126df0:	e54b300d 	strb	r3, [fp, #-13]
  126df4:	ea000025 	b	126e90 <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126df8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126dfc:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126e00:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126e04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e08:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126e0c:	e58d3000 	str	r3, [sp]
  126e10:	e1a03001 	mov	r3, r1
  126e14:	e3a01006 	mov	r1, #6
  126e18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e1c:	ebffc540 	bl	118324 <ip_chksum_pseudo>
  126e20:	e1a03000 	mov	r3, r0
  126e24:	e1a02003 	mov	r2, r3
  126e28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126e2c:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  126e30:	e30c3a18 	movw	r3, #51736	; 0xca18
  126e34:	e3403015 	movt	r3, #21
  126e38:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126e3c:	e2833001 	add	r3, r3, #1
  126e40:	e6ff2073 	uxth	r2, r3
  126e44:	e30c3a18 	movw	r3, #51736	; 0xca18
  126e48:	e3403015 	movt	r3, #21
  126e4c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126e50:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126e54:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e58:	e2832004 	add	r2, r3, #4
  126e5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e60:	e5d3000a 	ldrb	r0, [r3, #10]
  126e64:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126e68:	e58d3008 	str	r3, [sp, #8]
  126e6c:	e3a03006 	mov	r3, #6
  126e70:	e58d3004 	str	r3, [sp, #4]
  126e74:	e3a03000 	mov	r3, #0
  126e78:	e58d3000 	str	r3, [sp]
  126e7c:	e1a03000 	mov	r3, r0
  126e80:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e84:	eb002ad0 	bl	1319cc <ip4_output_if>
  126e88:	e1a03000 	mov	r3, r0
  126e8c:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  126e90:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e94:	ebffcf3a 	bl	11ab84 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126e98:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  126e9c:	e1a00003 	mov	r0, r3
  126ea0:	e24bd008 	sub	sp, fp, #8
  126ea4:	e8bd8810 	pop	{r4, fp, pc}

00126ea8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  126ea8:	e92d4800 	push	{fp, lr}
  126eac:	e28db004 	add	fp, sp, #4
  126eb0:	e24dd008 	sub	sp, sp, #8
  126eb4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  126eb8:	ebffd779 	bl	11cca4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  126ebc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  126ec0:	e3403015 	movt	r3, #21
  126ec4:	e5933000 	ldr	r3, [r3]
  126ec8:	e3530000 	cmp	r3, #0
  126ecc:	1a000004 	bne	126ee4 <tcpip_tcp_timer+0x3c>
  126ed0:	e30c3c18 	movw	r3, #52248	; 0xcc18
  126ed4:	e3403015 	movt	r3, #21
  126ed8:	e5933000 	ldr	r3, [r3]
  126edc:	e3530000 	cmp	r3, #0
  126ee0:	0a000005 	beq	126efc <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126ee4:	e3a02000 	mov	r2, #0
  126ee8:	e3061ea8 	movw	r1, #28328	; 0x6ea8
  126eec:	e3401012 	movt	r1, #18
  126ef0:	e3a000fa 	mov	r0, #250	; 0xfa
  126ef4:	eb000057 	bl	127058 <sys_timeout>
  126ef8:	ea000003 	b	126f0c <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  126efc:	e30e3254 	movw	r3, #57940	; 0xe254
  126f00:	e3403014 	movt	r3, #20
  126f04:	e3a02000 	mov	r2, #0
  126f08:	e5832000 	str	r2, [r3]
  }
}
  126f0c:	e320f000 	nop	{0}
  126f10:	e24bd004 	sub	sp, fp, #4
  126f14:	e8bd8800 	pop	{fp, pc}

00126f18 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  126f18:	e92d4800 	push	{fp, lr}
  126f1c:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  126f20:	e30e3254 	movw	r3, #57940	; 0xe254
  126f24:	e3403014 	movt	r3, #20
  126f28:	e5933000 	ldr	r3, [r3]
  126f2c:	e3530000 	cmp	r3, #0
  126f30:	1a000012 	bne	126f80 <tcp_timer_needed+0x68>
  126f34:	e30c3c08 	movw	r3, #52232	; 0xcc08
  126f38:	e3403015 	movt	r3, #21
  126f3c:	e5933000 	ldr	r3, [r3]
  126f40:	e3530000 	cmp	r3, #0
  126f44:	1a000004 	bne	126f5c <tcp_timer_needed+0x44>
  126f48:	e30c3c18 	movw	r3, #52248	; 0xcc18
  126f4c:	e3403015 	movt	r3, #21
  126f50:	e5933000 	ldr	r3, [r3]
  126f54:	e3530000 	cmp	r3, #0
  126f58:	0a000008 	beq	126f80 <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  126f5c:	e30e3254 	movw	r3, #57940	; 0xe254
  126f60:	e3403014 	movt	r3, #20
  126f64:	e3a02001 	mov	r2, #1
  126f68:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126f6c:	e3a02000 	mov	r2, #0
  126f70:	e3061ea8 	movw	r1, #28328	; 0x6ea8
  126f74:	e3401012 	movt	r1, #18
  126f78:	e3a000fa 	mov	r0, #250	; 0xfa
  126f7c:	eb000035 	bl	127058 <sys_timeout>
  }
}
  126f80:	e320f000 	nop	{0}
  126f84:	e8bd8800 	pop	{fp, pc}

00126f88 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  126f88:	e92d4800 	push	{fp, lr}
  126f8c:	e28db004 	add	fp, sp, #4
  126f90:	e24dd010 	sub	sp, sp, #16
  126f94:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  126f98:	e51b3010 	ldr	r3, [fp, #-16]
  126f9c:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  126fa0:	e51b3008 	ldr	r3, [fp, #-8]
  126fa4:	e5933004 	ldr	r3, [r3, #4]
  126fa8:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  126fac:	e51b3008 	ldr	r3, [fp, #-8]
  126fb0:	e5933000 	ldr	r3, [r3]
  126fb4:	e51b2010 	ldr	r2, [fp, #-16]
  126fb8:	e3061f88 	movw	r1, #28552	; 0x6f88
  126fbc:	e3401012 	movt	r1, #18
  126fc0:	e1a00003 	mov	r0, r3
  126fc4:	eb000023 	bl	127058 <sys_timeout>
}
  126fc8:	e320f000 	nop	{0}
  126fcc:	e24bd004 	sub	sp, fp, #4
  126fd0:	e8bd8800 	pop	{fp, pc}

00126fd4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  126fd4:	e92d4800 	push	{fp, lr}
  126fd8:	e28db004 	add	fp, sp, #4
  126fdc:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  126fe0:	e3a03001 	mov	r3, #1
  126fe4:	e50b3008 	str	r3, [fp, #-8]
  126fe8:	ea00000f 	b	12702c <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  126fec:	e308374c 	movw	r3, #34636	; 0x874c
  126ff0:	e3403014 	movt	r3, #20
  126ff4:	e51b2008 	ldr	r2, [fp, #-8]
  126ff8:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  126ffc:	e51b3008 	ldr	r3, [fp, #-8]
  127000:	e1a02183 	lsl	r2, r3, #3
  127004:	e308374c 	movw	r3, #34636	; 0x874c
  127008:	e3403014 	movt	r3, #20
  12700c:	e0823003 	add	r3, r2, r3
  127010:	e1a02003 	mov	r2, r3
  127014:	e3061f88 	movw	r1, #28552	; 0x6f88
  127018:	e3401012 	movt	r1, #18
  12701c:	eb00000d 	bl	127058 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  127020:	e51b3008 	ldr	r3, [fp, #-8]
  127024:	e2833001 	add	r3, r3, #1
  127028:	e50b3008 	str	r3, [fp, #-8]
  12702c:	e51b3008 	ldr	r3, [fp, #-8]
  127030:	e3530006 	cmp	r3, #6
  127034:	9affffec 	bls	126fec <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  127038:	ebff8f6e 	bl	10adf8 <sys_now>
  12703c:	e1a02000 	mov	r2, r0
  127040:	e30e3250 	movw	r3, #57936	; 0xe250
  127044:	e3403014 	movt	r3, #20
  127048:	e5832000 	str	r2, [r3]
}
  12704c:	e320f000 	nop	{0}
  127050:	e24bd004 	sub	sp, fp, #4
  127054:	e8bd8800 	pop	{fp, pc}

00127058 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  127058:	e92d4800 	push	{fp, lr}
  12705c:	e28db004 	add	fp, sp, #4
  127060:	e24dd020 	sub	sp, sp, #32
  127064:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127068:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12706c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  127070:	e3a020d2 	mov	r2, #210	; 0xd2
  127074:	e3081784 	movw	r1, #34692	; 0x8784
  127078:	e3401014 	movt	r1, #20
  12707c:	e3a0000d 	mov	r0, #13
  127080:	ebffc749 	bl	118dac <memp_malloc_fn>
  127084:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  127088:	e51b3010 	ldr	r3, [fp, #-16]
  12708c:	e3530000 	cmp	r3, #0
  127090:	1a00000a 	bne	1270c0 <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  127094:	e51b3010 	ldr	r3, [fp, #-16]
  127098:	e3530000 	cmp	r3, #0
  12709c:	1a00008f 	bne	1272e0 <sys_timeout+0x288>
  1270a0:	e30807b4 	movw	r0, #34740	; 0x87b4
  1270a4:	e3400014 	movt	r0, #20
  1270a8:	ebff7019 	bl	103114 <rt_kprintf>
  1270ac:	e3a010d4 	mov	r1, #212	; 0xd4
  1270b0:	e3080784 	movw	r0, #34692	; 0x8784
  1270b4:	e3400014 	movt	r0, #20
  1270b8:	ebff8f35 	bl	10ad94 <sys_arch_assert>
    return;
  1270bc:	ea000087 	b	1272e0 <sys_timeout+0x288>
  }

  now = sys_now();
  1270c0:	ebff8f4c 	bl	10adf8 <sys_now>
  1270c4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  1270c8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1270cc:	e3403014 	movt	r3, #20
  1270d0:	e5933000 	ldr	r3, [r3]
  1270d4:	e3530000 	cmp	r3, #0
  1270d8:	1a000006 	bne	1270f8 <sys_timeout+0xa0>
    diff = 0;
  1270dc:	e3a03000 	mov	r3, #0
  1270e0:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  1270e4:	e30e3250 	movw	r3, #57936	; 0xe250
  1270e8:	e3403014 	movt	r3, #20
  1270ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1270f0:	e5832000 	str	r2, [r3]
  1270f4:	ea000005 	b	127110 <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  1270f8:	e30e3250 	movw	r3, #57936	; 0xe250
  1270fc:	e3403014 	movt	r3, #20
  127100:	e5933000 	ldr	r3, [r3]
  127104:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127108:	e0423003 	sub	r3, r2, r3
  12710c:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  127110:	e51b3010 	ldr	r3, [fp, #-16]
  127114:	e3a02000 	mov	r2, #0
  127118:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  12711c:	e51b3010 	ldr	r3, [fp, #-16]
  127120:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  127124:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  127128:	e51b3010 	ldr	r3, [fp, #-16]
  12712c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  127130:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  127134:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127138:	e51b300c 	ldr	r3, [fp, #-12]
  12713c:	e0822003 	add	r2, r2, r3
  127140:	e51b3010 	ldr	r3, [fp, #-16]
  127144:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  127148:	e30e324c 	movw	r3, #57932	; 0xe24c
  12714c:	e3403014 	movt	r3, #20
  127150:	e5933000 	ldr	r3, [r3]
  127154:	e3530000 	cmp	r3, #0
  127158:	1a000004 	bne	127170 <sys_timeout+0x118>
    next_timeout = timeout;
  12715c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127160:	e3403014 	movt	r3, #20
  127164:	e51b2010 	ldr	r2, [fp, #-16]
  127168:	e5832000 	str	r2, [r3]
    return;
  12716c:	ea00005c 	b	1272e4 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  127170:	e30e324c 	movw	r3, #57932	; 0xe24c
  127174:	e3403014 	movt	r3, #20
  127178:	e5933000 	ldr	r3, [r3]
  12717c:	e5933004 	ldr	r3, [r3, #4]
  127180:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127184:	e1520003 	cmp	r2, r3
  127188:	2a000013 	bcs	1271dc <sys_timeout+0x184>
    next_timeout->time -= msecs;
  12718c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127190:	e3403014 	movt	r3, #20
  127194:	e5933000 	ldr	r3, [r3]
  127198:	e5931004 	ldr	r1, [r3, #4]
  12719c:	e30e324c 	movw	r3, #57932	; 0xe24c
  1271a0:	e3403014 	movt	r3, #20
  1271a4:	e5933000 	ldr	r3, [r3]
  1271a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1271ac:	e0412002 	sub	r2, r1, r2
  1271b0:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  1271b4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1271b8:	e3403014 	movt	r3, #20
  1271bc:	e5932000 	ldr	r2, [r3]
  1271c0:	e51b3010 	ldr	r3, [fp, #-16]
  1271c4:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  1271c8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1271cc:	e3403014 	movt	r3, #20
  1271d0:	e51b2010 	ldr	r2, [fp, #-16]
  1271d4:	e5832000 	str	r2, [r3]
  1271d8:	ea000041 	b	1272e4 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  1271dc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1271e0:	e3403014 	movt	r3, #20
  1271e4:	e5933000 	ldr	r3, [r3]
  1271e8:	e50b3008 	str	r3, [fp, #-8]
  1271ec:	ea000037 	b	1272d0 <sys_timeout+0x278>
      timeout->time -= t->time;
  1271f0:	e51b3010 	ldr	r3, [fp, #-16]
  1271f4:	e5932004 	ldr	r2, [r3, #4]
  1271f8:	e51b3008 	ldr	r3, [fp, #-8]
  1271fc:	e5933004 	ldr	r3, [r3, #4]
  127200:	e0422003 	sub	r2, r2, r3
  127204:	e51b3010 	ldr	r3, [fp, #-16]
  127208:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  12720c:	e51b3008 	ldr	r3, [fp, #-8]
  127210:	e5933000 	ldr	r3, [r3]
  127214:	e3530000 	cmp	r3, #0
  127218:	0a000006 	beq	127238 <sys_timeout+0x1e0>
  12721c:	e51b3008 	ldr	r3, [fp, #-8]
  127220:	e5933000 	ldr	r3, [r3]
  127224:	e5932004 	ldr	r2, [r3, #4]
  127228:	e51b3010 	ldr	r3, [fp, #-16]
  12722c:	e5933004 	ldr	r3, [r3, #4]
  127230:	e1520003 	cmp	r2, r3
  127234:	9a000022 	bls	1272c4 <sys_timeout+0x26c>
        if (t->next != NULL) {
  127238:	e51b3008 	ldr	r3, [fp, #-8]
  12723c:	e5933000 	ldr	r3, [r3]
  127240:	e3530000 	cmp	r3, #0
  127244:	0a000009 	beq	127270 <sys_timeout+0x218>
          t->next->time -= timeout->time;
  127248:	e51b3008 	ldr	r3, [fp, #-8]
  12724c:	e5933000 	ldr	r3, [r3]
  127250:	e5931004 	ldr	r1, [r3, #4]
  127254:	e51b3010 	ldr	r3, [fp, #-16]
  127258:	e5932004 	ldr	r2, [r3, #4]
  12725c:	e51b3008 	ldr	r3, [fp, #-8]
  127260:	e5933000 	ldr	r3, [r3]
  127264:	e0412002 	sub	r2, r1, r2
  127268:	e5832004 	str	r2, [r3, #4]
  12726c:	ea00000c 	b	1272a4 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  127270:	e51b3010 	ldr	r3, [fp, #-16]
  127274:	e5933004 	ldr	r3, [r3, #4]
  127278:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12727c:	e1520003 	cmp	r2, r3
  127280:	2a000007 	bcs	1272a4 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  127284:	e30e324c 	movw	r3, #57932	; 0xe24c
  127288:	e3403014 	movt	r3, #20
  12728c:	e5933000 	ldr	r3, [r3]
  127290:	e5932004 	ldr	r2, [r3, #4]
  127294:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127298:	e0822003 	add	r2, r2, r3
  12729c:	e51b3010 	ldr	r3, [fp, #-16]
  1272a0:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  1272a4:	e51b3008 	ldr	r3, [fp, #-8]
  1272a8:	e5932000 	ldr	r2, [r3]
  1272ac:	e51b3010 	ldr	r3, [fp, #-16]
  1272b0:	e5832000 	str	r2, [r3]
        t->next = timeout;
  1272b4:	e51b3008 	ldr	r3, [fp, #-8]
  1272b8:	e51b2010 	ldr	r2, [fp, #-16]
  1272bc:	e5832000 	str	r2, [r3]
        break;
  1272c0:	ea000007 	b	1272e4 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  1272c4:	e51b3008 	ldr	r3, [fp, #-8]
  1272c8:	e5933000 	ldr	r3, [r3]
  1272cc:	e50b3008 	str	r3, [fp, #-8]
  1272d0:	e51b3008 	ldr	r3, [fp, #-8]
  1272d4:	e3530000 	cmp	r3, #0
  1272d8:	1affffc4 	bne	1271f0 <sys_timeout+0x198>
  1272dc:	ea000000 	b	1272e4 <sys_timeout+0x28c>
    return;
  1272e0:	e320f000 	nop	{0}
      }
    }
  }
}
  1272e4:	e24bd004 	sub	sp, fp, #4
  1272e8:	e8bd8800 	pop	{fp, pc}

001272ec <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  1272ec:	e92d4800 	push	{fp, lr}
  1272f0:	e28db004 	add	fp, sp, #4
  1272f4:	e24dd010 	sub	sp, sp, #16
  1272f8:	e50b0010 	str	r0, [fp, #-16]
  1272fc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  127300:	e30e324c 	movw	r3, #57932	; 0xe24c
  127304:	e3403014 	movt	r3, #20
  127308:	e5933000 	ldr	r3, [r3]
  12730c:	e3530000 	cmp	r3, #0
  127310:	0a000038 	beq	1273f8 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127314:	e30e324c 	movw	r3, #57932	; 0xe24c
  127318:	e3403014 	movt	r3, #20
  12731c:	e5933000 	ldr	r3, [r3]
  127320:	e50b300c 	str	r3, [fp, #-12]
  127324:	e3a03000 	mov	r3, #0
  127328:	e50b3008 	str	r3, [fp, #-8]
  12732c:	ea00002c 	b	1273e4 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  127330:	e51b300c 	ldr	r3, [fp, #-12]
  127334:	e5933008 	ldr	r3, [r3, #8]
  127338:	e51b2010 	ldr	r2, [fp, #-16]
  12733c:	e1520003 	cmp	r2, r3
  127340:	1a000022 	bne	1273d0 <sys_untimeout+0xe4>
  127344:	e51b300c 	ldr	r3, [fp, #-12]
  127348:	e593300c 	ldr	r3, [r3, #12]
  12734c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127350:	e1520003 	cmp	r2, r3
  127354:	1a00001d 	bne	1273d0 <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  127358:	e51b3008 	ldr	r3, [fp, #-8]
  12735c:	e3530000 	cmp	r3, #0
  127360:	1a000005 	bne	12737c <sys_untimeout+0x90>
        next_timeout = t->next;
  127364:	e51b300c 	ldr	r3, [fp, #-12]
  127368:	e5932000 	ldr	r2, [r3]
  12736c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127370:	e3403014 	movt	r3, #20
  127374:	e5832000 	str	r2, [r3]
  127378:	ea000003 	b	12738c <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  12737c:	e51b300c 	ldr	r3, [fp, #-12]
  127380:	e5932000 	ldr	r2, [r3]
  127384:	e51b3008 	ldr	r3, [fp, #-8]
  127388:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  12738c:	e51b300c 	ldr	r3, [fp, #-12]
  127390:	e5933000 	ldr	r3, [r3]
  127394:	e3530000 	cmp	r3, #0
  127398:	0a000008 	beq	1273c0 <sys_untimeout+0xd4>
        t->next->time += t->time;
  12739c:	e51b300c 	ldr	r3, [fp, #-12]
  1273a0:	e5933000 	ldr	r3, [r3]
  1273a4:	e5931004 	ldr	r1, [r3, #4]
  1273a8:	e51b300c 	ldr	r3, [fp, #-12]
  1273ac:	e5932004 	ldr	r2, [r3, #4]
  1273b0:	e51b300c 	ldr	r3, [fp, #-12]
  1273b4:	e5933000 	ldr	r3, [r3]
  1273b8:	e0812002 	add	r2, r1, r2
  1273bc:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  1273c0:	e51b100c 	ldr	r1, [fp, #-12]
  1273c4:	e3a0000d 	mov	r0, #13
  1273c8:	ebffc6df 	bl	118f4c <memp_free>
      return;
  1273cc:	ea00000a 	b	1273fc <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  1273d0:	e51b300c 	ldr	r3, [fp, #-12]
  1273d4:	e50b3008 	str	r3, [fp, #-8]
  1273d8:	e51b300c 	ldr	r3, [fp, #-12]
  1273dc:	e5933000 	ldr	r3, [r3]
  1273e0:	e50b300c 	str	r3, [fp, #-12]
  1273e4:	e51b300c 	ldr	r3, [fp, #-12]
  1273e8:	e3530000 	cmp	r3, #0
  1273ec:	1affffcf 	bne	127330 <sys_untimeout+0x44>
    }
  }
  return;
  1273f0:	e320f000 	nop	{0}
  1273f4:	ea000000 	b	1273fc <sys_untimeout+0x110>
    return;
  1273f8:	e320f000 	nop	{0}
}
  1273fc:	e24bd004 	sub	sp, fp, #4
  127400:	e8bd8800 	pop	{fp, pc}

00127404 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  127404:	e92d4800 	push	{fp, lr}
  127408:	e28db004 	add	fp, sp, #4
  12740c:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  127410:	e30e324c 	movw	r3, #57932	; 0xe24c
  127414:	e3403014 	movt	r3, #20
  127418:	e5933000 	ldr	r3, [r3]
  12741c:	e3530000 	cmp	r3, #0
  127420:	0a000042 	beq	127530 <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  127424:	ebff8e73 	bl	10adf8 <sys_now>
  127428:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  12742c:	e30e3250 	movw	r3, #57936	; 0xe250
  127430:	e3403014 	movt	r3, #20
  127434:	e5933000 	ldr	r3, [r3]
  127438:	e51b2010 	ldr	r2, [fp, #-16]
  12743c:	e0423003 	sub	r3, r2, r3
  127440:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  127444:	e3a03000 	mov	r3, #0
  127448:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  12744c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127450:	e3403014 	movt	r3, #20
  127454:	e5933000 	ldr	r3, [r3]
  127458:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  12745c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127460:	e3530000 	cmp	r3, #0
  127464:	0a00002e 	beq	127524 <sys_check_timeouts+0x120>
  127468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12746c:	e5933004 	ldr	r3, [r3, #4]
  127470:	e51b2008 	ldr	r2, [fp, #-8]
  127474:	e1520003 	cmp	r2, r3
  127478:	3a000029 	bcc	127524 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  12747c:	e3a03001 	mov	r3, #1
  127480:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  127484:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127488:	e5932004 	ldr	r2, [r3, #4]
  12748c:	e30e3250 	movw	r3, #57936	; 0xe250
  127490:	e3403014 	movt	r3, #20
  127494:	e5933000 	ldr	r3, [r3]
  127498:	e0822003 	add	r2, r2, r3
  12749c:	e30e3250 	movw	r3, #57936	; 0xe250
  1274a0:	e3403014 	movt	r3, #20
  1274a4:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  1274a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274ac:	e5933004 	ldr	r3, [r3, #4]
  1274b0:	e51b2008 	ldr	r2, [fp, #-8]
  1274b4:	e0423003 	sub	r3, r2, r3
  1274b8:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  1274bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274c0:	e5932000 	ldr	r2, [r3]
  1274c4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1274c8:	e3403014 	movt	r3, #20
  1274cc:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  1274d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274d4:	e5933008 	ldr	r3, [r3, #8]
  1274d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  1274dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274e0:	e593300c 	ldr	r3, [r3, #12]
  1274e4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  1274e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1274ec:	e3a0000d 	mov	r0, #13
  1274f0:	ebffc695 	bl	118f4c <memp_free>
        if (handler != NULL) {
  1274f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1274f8:	e3530000 	cmp	r3, #0
  1274fc:	0a000008 	beq	127524 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  127500:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  127504:	e3400014 	movt	r0, #20
  127508:	ebff8cf6 	bl	10a8e8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  12750c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127510:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127514:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  127518:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  12751c:	e3400014 	movt	r0, #20
  127520:	ebff8cfc 	bl	10a918 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  127524:	e55b3009 	ldrb	r3, [fp, #-9]
  127528:	e3530000 	cmp	r3, #0
  12752c:	1affffc4 	bne	127444 <sys_check_timeouts+0x40>
  }
}
  127530:	e320f000 	nop	{0}
  127534:	e24bd004 	sub	sp, fp, #4
  127538:	e8bd8800 	pop	{fp, pc}

0012753c <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  12753c:	e92d4800 	push	{fp, lr}
  127540:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  127544:	ebff8e2b 	bl	10adf8 <sys_now>
  127548:	e1a02000 	mov	r2, r0
  12754c:	e30e3250 	movw	r3, #57936	; 0xe250
  127550:	e3403014 	movt	r3, #20
  127554:	e5832000 	str	r2, [r3]
}
  127558:	e320f000 	nop	{0}
  12755c:	e8bd8800 	pop	{fp, pc}

00127560 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  127560:	e92d4800 	push	{fp, lr}
  127564:	e28db004 	add	fp, sp, #4
  127568:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  12756c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127570:	e3403014 	movt	r3, #20
  127574:	e5933000 	ldr	r3, [r3]
  127578:	e3530000 	cmp	r3, #0
  12757c:	1a000001 	bne	127588 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  127580:	e3e03000 	mvn	r3, #0
  127584:	ea000015 	b	1275e0 <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  127588:	ebff8e1a 	bl	10adf8 <sys_now>
  12758c:	e1a02000 	mov	r2, r0
  127590:	e30e3250 	movw	r3, #57936	; 0xe250
  127594:	e3403014 	movt	r3, #20
  127598:	e5933000 	ldr	r3, [r3]
  12759c:	e0423003 	sub	r3, r2, r3
  1275a0:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  1275a4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1275a8:	e3403014 	movt	r3, #20
  1275ac:	e5933000 	ldr	r3, [r3]
  1275b0:	e5933004 	ldr	r3, [r3, #4]
  1275b4:	e51b2008 	ldr	r2, [fp, #-8]
  1275b8:	e1520003 	cmp	r2, r3
  1275bc:	9a000001 	bls	1275c8 <sys_timeouts_sleeptime+0x68>
    return 0;
  1275c0:	e3a03000 	mov	r3, #0
  1275c4:	ea000005 	b	1275e0 <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  1275c8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1275cc:	e3403014 	movt	r3, #20
  1275d0:	e5933000 	ldr	r3, [r3]
  1275d4:	e5932004 	ldr	r2, [r3, #4]
  1275d8:	e51b3008 	ldr	r3, [fp, #-8]
  1275dc:	e0423003 	sub	r3, r2, r3
  }
}
  1275e0:	e1a00003 	mov	r0, r3
  1275e4:	e24bd004 	sub	sp, fp, #4
  1275e8:	e8bd8800 	pop	{fp, pc}

001275ec <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  1275ec:	e92d4800 	push	{fp, lr}
  1275f0:	e28db004 	add	fp, sp, #4
  1275f4:	e24dd010 	sub	sp, sp, #16
  1275f8:	e50b0010 	str	r0, [fp, #-16]
  1275fc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  127600:	e30e324c 	movw	r3, #57932	; 0xe24c
  127604:	e3403014 	movt	r3, #20
  127608:	e5933000 	ldr	r3, [r3]
  12760c:	e3530000 	cmp	r3, #0
  127610:	1a000004 	bne	127628 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127614:	e3a02000 	mov	r2, #0
  127618:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12761c:	e51b0010 	ldr	r0, [fp, #-16]
  127620:	ebff8d3e 	bl	10ab20 <sys_arch_mbox_fetch>
    return;
  127624:	ea00000d 	b	127660 <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  127628:	ebffffcc 	bl	127560 <sys_timeouts_sleeptime>
  12762c:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  127630:	e51b3008 	ldr	r3, [fp, #-8]
  127634:	e3530000 	cmp	r3, #0
  127638:	0a000006 	beq	127658 <sys_timeouts_mbox_fetch+0x6c>
  12763c:	e51b2008 	ldr	r2, [fp, #-8]
  127640:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127644:	e51b0010 	ldr	r0, [fp, #-16]
  127648:	ebff8d34 	bl	10ab20 <sys_arch_mbox_fetch>
  12764c:	e1a03000 	mov	r3, r0
  127650:	e3730001 	cmn	r3, #1
  127654:	1a000001 	bne	127660 <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  127658:	ebffff69 	bl	127404 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  12765c:	eaffffe7 	b	127600 <sys_timeouts_mbox_fetch+0x14>
  }
}
  127660:	e24bd004 	sub	sp, fp, #4
  127664:	e8bd8800 	pop	{fp, pc}

00127668 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  127668:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12766c:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  127670:	e320f000 	nop	{0}
  127674:	e28bd000 	add	sp, fp, #0
  127678:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12767c:	e12fff1e 	bx	lr

00127680 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  127680:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127684:	e28db000 	add	fp, sp, #0
  127688:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  12768c:	e3a03000 	mov	r3, #0
  127690:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  127694:	e30d3038 	movw	r3, #53304	; 0xd038
  127698:	e3403014 	movt	r3, #20
  12769c:	e1d320b0 	ldrh	r2, [r3]
  1276a0:	e2823001 	add	r3, r2, #1
  1276a4:	e6ff1073 	uxth	r1, r3
  1276a8:	e30d3038 	movw	r3, #53304	; 0xd038
  1276ac:	e3403014 	movt	r3, #20
  1276b0:	e1c310b0 	strh	r1, [r3]
  1276b4:	e30f3fff 	movw	r3, #65535	; 0xffff
  1276b8:	e1520003 	cmp	r2, r3
  1276bc:	1a000003 	bne	1276d0 <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  1276c0:	e30d3038 	movw	r3, #53304	; 0xd038
  1276c4:	e3403014 	movt	r3, #20
  1276c8:	e3a02903 	mov	r2, #49152	; 0xc000
  1276cc:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  1276d0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1276d4:	e3403015 	movt	r3, #21
  1276d8:	e5933000 	ldr	r3, [r3]
  1276dc:	e50b300c 	str	r3, [fp, #-12]
  1276e0:	ea000011 	b	12772c <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  1276e4:	e51b300c 	ldr	r3, [fp, #-12]
  1276e8:	e1d321b2 	ldrh	r2, [r3, #18]
  1276ec:	e30d3038 	movw	r3, #53304	; 0xd038
  1276f0:	e3403014 	movt	r3, #20
  1276f4:	e1d330b0 	ldrh	r3, [r3]
  1276f8:	e1520003 	cmp	r2, r3
  1276fc:	1a000007 	bne	127720 <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  127700:	e15b30b6 	ldrh	r3, [fp, #-6]
  127704:	e2833001 	add	r3, r3, #1
  127708:	e14b30b6 	strh	r3, [fp, #-6]
  12770c:	e15b30b6 	ldrh	r3, [fp, #-6]
  127710:	e3530901 	cmp	r3, #16384	; 0x4000
  127714:	3affffde 	bcc	127694 <udp_new_port+0x14>
        return 0;
  127718:	e3a03000 	mov	r3, #0
  12771c:	ea000008 	b	127744 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127720:	e51b300c 	ldr	r3, [fp, #-12]
  127724:	e593300c 	ldr	r3, [r3, #12]
  127728:	e50b300c 	str	r3, [fp, #-12]
  12772c:	e51b300c 	ldr	r3, [fp, #-12]
  127730:	e3530000 	cmp	r3, #0
  127734:	1affffea 	bne	1276e4 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  127738:	e30d3038 	movw	r3, #53304	; 0xd038
  12773c:	e3403014 	movt	r3, #20
  127740:	e1d330b0 	ldrh	r3, [r3]
}
  127744:	e1a00003 	mov	r0, r3
  127748:	e28bd000 	add	sp, fp, #0
  12774c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127750:	e12fff1e 	bx	lr

00127754 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  127754:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127758:	e28db000 	add	fp, sp, #0
  12775c:	e24dd014 	sub	sp, sp, #20
  127760:	e50b0008 	str	r0, [fp, #-8]
  127764:	e50b100c 	str	r1, [fp, #-12]
  127768:	e1a03002 	mov	r3, r2
  12776c:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  127770:	e55b300d 	ldrb	r3, [fp, #-13]
  127774:	e3530000 	cmp	r3, #0
  127778:	0a00001e 	beq	1277f8 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  12777c:	e51b3008 	ldr	r3, [fp, #-8]
  127780:	e5d33008 	ldrb	r3, [r3, #8]
  127784:	e2033020 	and	r3, r3, #32
  127788:	e3530000 	cmp	r3, #0
  12778c:	0a000029 	beq	127838 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127790:	e51b3008 	ldr	r3, [fp, #-8]
  127794:	e3530000 	cmp	r3, #0
  127798:	0a000014 	beq	1277f0 <udp_input_local_match+0x9c>
  12779c:	e51b3008 	ldr	r3, [fp, #-8]
  1277a0:	e5933000 	ldr	r3, [r3]
  1277a4:	e3530000 	cmp	r3, #0
  1277a8:	0a000010 	beq	1277f0 <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  1277ac:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1277b0:	e3403014 	movt	r3, #20
  1277b4:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  1277b8:	e3730001 	cmn	r3, #1
  1277bc:	0a00000b 	beq	1277f0 <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  1277c0:	e51b3008 	ldr	r3, [fp, #-8]
  1277c4:	e5932000 	ldr	r2, [r3]
  1277c8:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1277cc:	e3403014 	movt	r3, #20
  1277d0:	e5933014 	ldr	r3, [r3, #20]
  1277d4:	e0222003 	eor	r2, r2, r3
  1277d8:	e51b300c 	ldr	r3, [fp, #-12]
  1277dc:	e2833008 	add	r3, r3, #8
  1277e0:	e5933000 	ldr	r3, [r3]
  1277e4:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  1277e8:	e3530000 	cmp	r3, #0
  1277ec:	1a000011 	bne	127838 <udp_input_local_match+0xe4>
          return 1;
  1277f0:	e3a03001 	mov	r3, #1
  1277f4:	ea000010 	b	12783c <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  1277f8:	e51b3008 	ldr	r3, [fp, #-8]
  1277fc:	e3530000 	cmp	r3, #0
  127800:	0a00000a 	beq	127830 <udp_input_local_match+0xdc>
  127804:	e51b3008 	ldr	r3, [fp, #-8]
  127808:	e5933000 	ldr	r3, [r3]
  12780c:	e3530000 	cmp	r3, #0
  127810:	0a000006 	beq	127830 <udp_input_local_match+0xdc>
  127814:	e51b3008 	ldr	r3, [fp, #-8]
  127818:	e5932000 	ldr	r2, [r3]
  12781c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127820:	e3403014 	movt	r3, #20
  127824:	e5933014 	ldr	r3, [r3, #20]
  127828:	e1520003 	cmp	r2, r3
  12782c:	1a000001 	bne	127838 <udp_input_local_match+0xe4>
      return 1;
  127830:	e3a03001 	mov	r3, #1
  127834:	ea000000 	b	12783c <udp_input_local_match+0xe8>
    }
  }

  return 0;
  127838:	e3a03000 	mov	r3, #0
}
  12783c:	e1a00003 	mov	r0, r3
  127840:	e28bd000 	add	sp, fp, #0
  127844:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127848:	e12fff1e 	bx	lr

0012784c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  12784c:	e92d4810 	push	{r4, fp, lr}
  127850:	e28db008 	add	fp, sp, #8
  127854:	e24dd034 	sub	sp, sp, #52	; 0x34
  127858:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12785c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  127860:	e3a03000 	mov	r3, #0
  127864:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  127868:	e30c3a18 	movw	r3, #51736	; 0xca18
  12786c:	e3403015 	movt	r3, #21
  127870:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  127874:	e2833001 	add	r3, r3, #1
  127878:	e6ff2073 	uxth	r2, r3
  12787c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127880:	e3403015 	movt	r3, #21
  127884:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  127888:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12788c:	e1d330ba 	ldrh	r3, [r3, #10]
  127890:	e3530007 	cmp	r3, #7
  127894:	8a000019 	bhi	127900 <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127898:	e30c3a18 	movw	r3, #51736	; 0xca18
  12789c:	e3403015 	movt	r3, #21
  1278a0:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  1278a4:	e2833001 	add	r3, r3, #1
  1278a8:	e6ff2073 	uxth	r2, r3
  1278ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1278b0:	e3403015 	movt	r3, #21
  1278b4:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  1278b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1278bc:	e3403015 	movt	r3, #21
  1278c0:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  1278c4:	e2833001 	add	r3, r3, #1
  1278c8:	e6ff2073 	uxth	r2, r3
  1278cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1278d0:	e3403015 	movt	r3, #21
  1278d4:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  1278d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1278dc:	e3403015 	movt	r3, #21
  1278e0:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  1278e4:	e2832001 	add	r2, r3, #1
  1278e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1278ec:	e3403015 	movt	r3, #21
  1278f0:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  1278f4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1278f8:	ebffcca1 	bl	11ab84 <pbuf_free>
    goto end;
  1278fc:	ea00010c 	b	127d34 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127900:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127904:	e5933004 	ldr	r3, [r3, #4]
  127908:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  12790c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127910:	e3403014 	movt	r3, #20
  127914:	e5932014 	ldr	r2, [r3, #20]
  127918:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12791c:	e3403014 	movt	r3, #20
  127920:	e5933000 	ldr	r3, [r3]
  127924:	e1a01003 	mov	r1, r3
  127928:	e1a00002 	mov	r0, r2
  12792c:	eb002a2c 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  127930:	e1a03000 	mov	r3, r0
  127934:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  127938:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12793c:	e1d330b0 	ldrh	r3, [r3]
  127940:	e6ff3073 	uxth	r3, r3
  127944:	e1a00003 	mov	r0, r3
  127948:	ebffba56 	bl	1162a8 <lwip_htons>
  12794c:	e1a03000 	mov	r3, r0
  127950:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  127954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127958:	e1d330b2 	ldrh	r3, [r3, #2]
  12795c:	e6ff3073 	uxth	r3, r3
  127960:	e1a00003 	mov	r0, r3
  127964:	ebffba4f 	bl	1162a8 <lwip_htons>
  127968:	e1a03000 	mov	r3, r0
  12796c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  127970:	e3a03000 	mov	r3, #0
  127974:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  127978:	e3a03000 	mov	r3, #0
  12797c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127980:	e3a03000 	mov	r3, #0
  127984:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127988:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12798c:	e3403015 	movt	r3, #21
  127990:	e5933000 	ldr	r3, [r3]
  127994:	e50b3010 	str	r3, [fp, #-16]
  127998:	ea00004c 	b	127ad0 <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  12799c:	e51b3010 	ldr	r3, [fp, #-16]
  1279a0:	e1d331b2 	ldrh	r3, [r3, #18]
  1279a4:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  1279a8:	e1520003 	cmp	r2, r3
  1279ac:	1a000042 	bne	127abc <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  1279b0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1279b4:	e1a02003 	mov	r2, r3
  1279b8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1279bc:	e51b0010 	ldr	r0, [fp, #-16]
  1279c0:	ebffff63 	bl	127754 <udp_input_local_match>
  1279c4:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  1279c8:	e3530000 	cmp	r3, #0
  1279cc:	0a00003a 	beq	127abc <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  1279d0:	e51b3010 	ldr	r3, [fp, #-16]
  1279d4:	e5d33010 	ldrb	r3, [r3, #16]
  1279d8:	e2033004 	and	r3, r3, #4
  1279dc:	e3530000 	cmp	r3, #0
  1279e0:	1a00000b 	bne	127a14 <udp_input+0x1c8>
  1279e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1279e8:	e3530000 	cmp	r3, #0
  1279ec:	0a000006 	beq	127a0c <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  1279f0:	e51b3010 	ldr	r3, [fp, #-16]
  1279f4:	e3530000 	cmp	r3, #0
  1279f8:	0a000005 	beq	127a14 <udp_input+0x1c8>
  1279fc:	e51b3010 	ldr	r3, [fp, #-16]
  127a00:	e5933000 	ldr	r3, [r3]
  127a04:	e3530000 	cmp	r3, #0
  127a08:	0a000001 	beq	127a14 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127a0c:	e51b3010 	ldr	r3, [fp, #-16]
  127a10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127a14:	e51b3010 	ldr	r3, [fp, #-16]
  127a18:	e1d331b4 	ldrh	r3, [r3, #20]
  127a1c:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  127a20:	e1520003 	cmp	r2, r3
  127a24:	1a000024 	bne	127abc <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  127a28:	e51b3010 	ldr	r3, [fp, #-16]
  127a2c:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  127a30:	e3530000 	cmp	r3, #0
  127a34:	0a000006 	beq	127a54 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  127a38:	e51b3010 	ldr	r3, [fp, #-16]
  127a3c:	e5932004 	ldr	r2, [r3, #4]
  127a40:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127a44:	e3403014 	movt	r3, #20
  127a48:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127a4c:	e1520003 	cmp	r2, r3
  127a50:	1a000019 	bne	127abc <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127a54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127a58:	e3530000 	cmp	r3, #0
  127a5c:	0a00000d 	beq	127a98 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127a60:	e51b3010 	ldr	r3, [fp, #-16]
  127a64:	e593200c 	ldr	r2, [r3, #12]
  127a68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127a6c:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127a70:	e30c3c20 	movw	r3, #52256	; 0xcc20
  127a74:	e3403015 	movt	r3, #21
  127a78:	e5932000 	ldr	r2, [r3]
  127a7c:	e51b3010 	ldr	r3, [fp, #-16]
  127a80:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127a84:	e30c3c20 	movw	r3, #52256	; 0xcc20
  127a88:	e3403015 	movt	r3, #21
  127a8c:	e51b2010 	ldr	r2, [fp, #-16]
  127a90:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127a94:	ea000010 	b	127adc <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127a98:	e30c3a18 	movw	r3, #51736	; 0xca18
  127a9c:	e3403015 	movt	r3, #21
  127aa0:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127aa4:	e2833001 	add	r3, r3, #1
  127aa8:	e6ff2073 	uxth	r2, r3
  127aac:	e30c3a18 	movw	r3, #51736	; 0xca18
  127ab0:	e3403015 	movt	r3, #21
  127ab4:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127ab8:	ea000007 	b	127adc <udp_input+0x290>
      }
    }

    prev = pcb;
  127abc:	e51b3010 	ldr	r3, [fp, #-16]
  127ac0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127ac4:	e51b3010 	ldr	r3, [fp, #-16]
  127ac8:	e593300c 	ldr	r3, [r3, #12]
  127acc:	e50b3010 	str	r3, [fp, #-16]
  127ad0:	e51b3010 	ldr	r3, [fp, #-16]
  127ad4:	e3530000 	cmp	r3, #0
  127ad8:	1affffaf 	bne	12799c <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127adc:	e51b3010 	ldr	r3, [fp, #-16]
  127ae0:	e3530000 	cmp	r3, #0
  127ae4:	1a000001 	bne	127af0 <udp_input+0x2a4>
    pcb = uncon_pcb;
  127ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127aec:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127af0:	e51b3010 	ldr	r3, [fp, #-16]
  127af4:	e3530000 	cmp	r3, #0
  127af8:	0a000002 	beq	127b08 <udp_input+0x2bc>
    for_us = 1;
  127afc:	e3a03001 	mov	r3, #1
  127b00:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127b04:	ea00000a 	b	127b34 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127b08:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127b0c:	e2833004 	add	r3, r3, #4
  127b10:	e5932000 	ldr	r2, [r3]
  127b14:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127b18:	e3403014 	movt	r3, #20
  127b1c:	e5933014 	ldr	r3, [r3, #20]
  127b20:	e1520003 	cmp	r2, r3
  127b24:	03a03001 	moveq	r3, #1
  127b28:	13a03000 	movne	r3, #0
  127b2c:	e6ef3073 	uxtb	r3, r3
  127b30:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127b34:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127b38:	e3530000 	cmp	r3, #0
  127b3c:	0a000079 	beq	127d28 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127b40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127b44:	e1d330b6 	ldrh	r3, [r3, #6]
  127b48:	e6ff3073 	uxth	r3, r3
  127b4c:	e3530000 	cmp	r3, #0
  127b50:	0a00000a 	beq	127b80 <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127b54:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127b58:	e1d320b8 	ldrh	r2, [r3, #8]
  127b5c:	e59f3244 	ldr	r3, [pc, #580]	; 127da8 <udp_input+0x55c>
  127b60:	e58d3000 	str	r3, [sp]
  127b64:	e59f3240 	ldr	r3, [pc, #576]	; 127dac <udp_input+0x560>
  127b68:	e3a01011 	mov	r1, #17
  127b6c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127b70:	ebffc1eb 	bl	118324 <ip_chksum_pseudo>
  127b74:	e1a03000 	mov	r3, r0
  127b78:	e3530000 	cmp	r3, #0
  127b7c:	1a00006d 	bne	127d38 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127b80:	e3e01007 	mvn	r1, #7
  127b84:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127b88:	ebffcbdf 	bl	11ab0c <pbuf_header>
  127b8c:	e1a03000 	mov	r3, r0
  127b90:	e3530000 	cmp	r3, #0
  127b94:	0a000018 	beq	127bfc <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127b98:	e30807f4 	movw	r0, #34804	; 0x87f4
  127b9c:	e3400014 	movt	r0, #20
  127ba0:	ebff6d5b 	bl	103114 <rt_kprintf>
  127ba4:	e3001155 	movw	r1, #341	; 0x155
  127ba8:	e3080808 	movw	r0, #34824	; 0x8808
  127bac:	e3400014 	movt	r0, #20
  127bb0:	ebff8c77 	bl	10ad94 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127bb4:	e30c3a18 	movw	r3, #51736	; 0xca18
  127bb8:	e3403015 	movt	r3, #21
  127bbc:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127bc0:	e2833001 	add	r3, r3, #1
  127bc4:	e6ff2073 	uxth	r2, r3
  127bc8:	e30c3a18 	movw	r3, #51736	; 0xca18
  127bcc:	e3403015 	movt	r3, #21
  127bd0:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127bd4:	e30c3a18 	movw	r3, #51736	; 0xca18
  127bd8:	e3403015 	movt	r3, #21
  127bdc:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127be0:	e2832001 	add	r2, r3, #1
  127be4:	e30c3a18 	movw	r3, #51736	; 0xca18
  127be8:	e3403015 	movt	r3, #21
  127bec:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127bf0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127bf4:	ebffcbe2 	bl	11ab84 <pbuf_free>
      goto end;
  127bf8:	ea00004d 	b	127d34 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127bfc:	e51b3010 	ldr	r3, [fp, #-16]
  127c00:	e3530000 	cmp	r3, #0
  127c04:	0a000018 	beq	127c6c <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127c08:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c0c:	e3403015 	movt	r3, #21
  127c10:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127c14:	e2832001 	add	r2, r3, #1
  127c18:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c1c:	e3403015 	movt	r3, #21
  127c20:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127c24:	e51b3010 	ldr	r3, [fp, #-16]
  127c28:	e5933020 	ldr	r3, [r3, #32]
  127c2c:	e3530000 	cmp	r3, #0
  127c30:	0a00000a 	beq	127c60 <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127c34:	e51b3010 	ldr	r3, [fp, #-16]
  127c38:	e5934020 	ldr	r4, [r3, #32]
  127c3c:	e51b3010 	ldr	r3, [fp, #-16]
  127c40:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127c44:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127c48:	e58d3000 	str	r3, [sp]
  127c4c:	e59f3158 	ldr	r3, [pc, #344]	; 127dac <udp_input+0x560>
  127c50:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127c54:	e51b1010 	ldr	r1, [fp, #-16]
  127c58:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127c5c:	ea00004f 	b	127da0 <udp_input+0x554>
        pbuf_free(p);
  127c60:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c64:	ebffcbc6 	bl	11ab84 <pbuf_free>
        goto end;
  127c68:	ea000031 	b	127d34 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127c6c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127c70:	e3530000 	cmp	r3, #0
  127c74:	1a000011 	bne	127cc0 <udp_input+0x474>
  127c78:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127c7c:	e3403014 	movt	r3, #20
  127c80:	e5933014 	ldr	r3, [r3, #20]
  127c84:	e20330f0 	and	r3, r3, #240	; 0xf0
  127c88:	e35300e0 	cmp	r3, #224	; 0xe0
  127c8c:	0a00000b 	beq	127cc0 <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127c90:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127c94:	e3403014 	movt	r3, #20
  127c98:	e1d330bc 	ldrh	r3, [r3, #12]
  127c9c:	e2833008 	add	r3, r3, #8
  127ca0:	e6ff3073 	uxth	r3, r3
  127ca4:	e6bf3073 	sxth	r3, r3
  127ca8:	e1a01003 	mov	r1, r3
  127cac:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127cb0:	ebffcba4 	bl	11ab48 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127cb4:	e3a01003 	mov	r1, #3
  127cb8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127cbc:	eb001f27 	bl	12f960 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127cc0:	e30c3a18 	movw	r3, #51736	; 0xca18
  127cc4:	e3403015 	movt	r3, #21
  127cc8:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127ccc:	e2833001 	add	r3, r3, #1
  127cd0:	e6ff2073 	uxth	r2, r3
  127cd4:	e30c3a18 	movw	r3, #51736	; 0xca18
  127cd8:	e3403015 	movt	r3, #21
  127cdc:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  127ce0:	e30c3a18 	movw	r3, #51736	; 0xca18
  127ce4:	e3403015 	movt	r3, #21
  127ce8:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127cec:	e2833001 	add	r3, r3, #1
  127cf0:	e6ff2073 	uxth	r2, r3
  127cf4:	e30c3a18 	movw	r3, #51736	; 0xca18
  127cf8:	e3403015 	movt	r3, #21
  127cfc:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  127d00:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d04:	e3403015 	movt	r3, #21
  127d08:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  127d0c:	e2832001 	add	r2, r3, #1
  127d10:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d14:	e3403015 	movt	r3, #21
  127d18:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  127d1c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d20:	ebffcb97 	bl	11ab84 <pbuf_free>
  return;
  127d24:	ea00001d 	b	127da0 <udp_input+0x554>
    pbuf_free(p);
  127d28:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d2c:	ebffcb94 	bl	11ab84 <pbuf_free>
  return;
  127d30:	ea00001a 	b	127da0 <udp_input+0x554>
  127d34:	ea000019 	b	127da0 <udp_input+0x554>
            goto chkerr;
  127d38:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  127d3c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d40:	e3403015 	movt	r3, #21
  127d44:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  127d48:	e2833001 	add	r3, r3, #1
  127d4c:	e6ff2073 	uxth	r2, r3
  127d50:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d54:	e3403015 	movt	r3, #21
  127d58:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  127d5c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d60:	e3403015 	movt	r3, #21
  127d64:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127d68:	e2833001 	add	r3, r3, #1
  127d6c:	e6ff2073 	uxth	r2, r3
  127d70:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d74:	e3403015 	movt	r3, #21
  127d78:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  127d7c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d80:	e3403015 	movt	r3, #21
  127d84:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127d88:	e2832001 	add	r2, r3, #1
  127d8c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d90:	e3403015 	movt	r3, #21
  127d94:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  127d98:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d9c:	ebffcb78 	bl	11ab84 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  127da0:	e24bd008 	sub	sp, fp, #8
  127da4:	e8bd8810 	pop	{r4, fp, pc}
  127da8:	0014f5f4 	.word	0x0014f5f4
  127dac:	0014f5f0 	.word	0x0014f5f0

00127db0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  127db0:	e92d4800 	push	{fp, lr}
  127db4:	e28db004 	add	fp, sp, #4
  127db8:	e24dd008 	sub	sp, sp, #8
  127dbc:	e50b0008 	str	r0, [fp, #-8]
  127dc0:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  127dc4:	e51b3008 	ldr	r3, [fp, #-8]
  127dc8:	e3530000 	cmp	r3, #0
  127dcc:	1a000001 	bne	127dd8 <udp_send+0x28>
    return ERR_VAL;
  127dd0:	e3e03005 	mvn	r3, #5
  127dd4:	ea000007 	b	127df8 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  127dd8:	e51b3008 	ldr	r3, [fp, #-8]
  127ddc:	e2832004 	add	r2, r3, #4
  127de0:	e51b3008 	ldr	r3, [fp, #-8]
  127de4:	e1d331b4 	ldrh	r3, [r3, #20]
  127de8:	e51b100c 	ldr	r1, [fp, #-12]
  127dec:	e51b0008 	ldr	r0, [fp, #-8]
  127df0:	eb000003 	bl	127e04 <udp_sendto>
  127df4:	e1a03000 	mov	r3, r0
}
  127df8:	e1a00003 	mov	r0, r3
  127dfc:	e24bd004 	sub	sp, fp, #4
  127e00:	e8bd8800 	pop	{fp, pc}

00127e04 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  127e04:	e92d4800 	push	{fp, lr}
  127e08:	e28db004 	add	fp, sp, #4
  127e0c:	e24dd020 	sub	sp, sp, #32
  127e10:	e50b0010 	str	r0, [fp, #-16]
  127e14:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127e18:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127e1c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  127e20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127e24:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127e28:	e51b3010 	ldr	r3, [fp, #-16]
  127e2c:	e3530000 	cmp	r3, #0
  127e30:	0a000002 	beq	127e40 <udp_sendto+0x3c>
  127e34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127e38:	e3530000 	cmp	r3, #0
  127e3c:	1a000001 	bne	127e48 <udp_sendto+0x44>
    return ERR_VAL;
  127e40:	e3e03005 	mvn	r3, #5
  127e44:	ea00002b 	b	127ef8 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  127e48:	e51b3008 	ldr	r3, [fp, #-8]
  127e4c:	e5933000 	ldr	r3, [r3]
  127e50:	e20330f0 	and	r3, r3, #240	; 0xf0
  127e54:	e35300e0 	cmp	r3, #224	; 0xe0
  127e58:	1a00000d 	bne	127e94 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127e5c:	e51b3010 	ldr	r3, [fp, #-16]
  127e60:	e5933018 	ldr	r3, [r3, #24]
  127e64:	e3530000 	cmp	r3, #0
  127e68:	0a000009 	beq	127e94 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  127e6c:	e51b3010 	ldr	r3, [fp, #-16]
  127e70:	e5932018 	ldr	r2, [r3, #24]
  127e74:	e3093640 	movw	r3, #38464	; 0x9640
  127e78:	e3403014 	movt	r3, #20
  127e7c:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127e80:	e1520003 	cmp	r2, r3
  127e84:	0a000002 	beq	127e94 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  127e88:	e51b3010 	ldr	r3, [fp, #-16]
  127e8c:	e2833018 	add	r3, r3, #24
  127e90:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  127e94:	e51b0008 	ldr	r0, [fp, #-8]
  127e98:	eb0023f2 	bl	130e68 <ip4_route>
  127e9c:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  127ea0:	e51b300c 	ldr	r3, [fp, #-12]
  127ea4:	e3530000 	cmp	r3, #0
  127ea8:	1a000009 	bne	127ed4 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  127eac:	e30c3a18 	movw	r3, #51736	; 0xca18
  127eb0:	e3403015 	movt	r3, #21
  127eb4:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  127eb8:	e2833001 	add	r3, r3, #1
  127ebc:	e6ff2073 	uxth	r2, r3
  127ec0:	e30c3a18 	movw	r3, #51736	; 0xca18
  127ec4:	e3403015 	movt	r3, #21
  127ec8:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  127ecc:	e3e03003 	mvn	r3, #3
  127ed0:	ea000008 	b	127ef8 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  127ed4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  127ed8:	e51b300c 	ldr	r3, [fp, #-12]
  127edc:	e58d3000 	str	r3, [sp]
  127ee0:	e1a03002 	mov	r3, r2
  127ee4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127ee8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127eec:	e51b0010 	ldr	r0, [fp, #-16]
  127ef0:	eb000003 	bl	127f04 <udp_sendto_if>
  127ef4:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  127ef8:	e1a00003 	mov	r0, r3
  127efc:	e24bd004 	sub	sp, fp, #4
  127f00:	e8bd8800 	pop	{fp, pc}

00127f04 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  127f04:	e92d4800 	push	{fp, lr}
  127f08:	e28db004 	add	fp, sp, #4
  127f0c:	e24dd020 	sub	sp, sp, #32
  127f10:	e50b0010 	str	r0, [fp, #-16]
  127f14:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127f18:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127f1c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127f20:	e51b3010 	ldr	r3, [fp, #-16]
  127f24:	e3530000 	cmp	r3, #0
  127f28:	0a000002 	beq	127f38 <udp_sendto_if+0x34>
  127f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127f30:	e3530000 	cmp	r3, #0
  127f34:	1a000001 	bne	127f40 <udp_sendto_if+0x3c>
    return ERR_VAL;
  127f38:	e3e03005 	mvn	r3, #5
  127f3c:	ea000025 	b	127fd8 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127f40:	e51b3010 	ldr	r3, [fp, #-16]
  127f44:	e3530000 	cmp	r3, #0
  127f48:	0a000008 	beq	127f70 <udp_sendto_if+0x6c>
  127f4c:	e51b3010 	ldr	r3, [fp, #-16]
  127f50:	e5933000 	ldr	r3, [r3]
  127f54:	e3530000 	cmp	r3, #0
  127f58:	0a000004 	beq	127f70 <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  127f5c:	e51b3010 	ldr	r3, [fp, #-16]
  127f60:	e5933000 	ldr	r3, [r3]
  127f64:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127f68:	e35300e0 	cmp	r3, #224	; 0xe0
  127f6c:	1a000003 	bne	127f80 <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  127f70:	e59b3004 	ldr	r3, [fp, #4]
  127f74:	e2833004 	add	r3, r3, #4
  127f78:	e50b3008 	str	r3, [fp, #-8]
  127f7c:	ea00000a 	b	127fac <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  127f80:	e51b3010 	ldr	r3, [fp, #-16]
  127f84:	e5932000 	ldr	r2, [r3]
  127f88:	e59b3004 	ldr	r3, [fp, #4]
  127f8c:	e2833004 	add	r3, r3, #4
  127f90:	e5933000 	ldr	r3, [r3]
  127f94:	e1520003 	cmp	r2, r3
  127f98:	0a000001 	beq	127fa4 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  127f9c:	e3e03003 	mvn	r3, #3
  127fa0:	ea00000c 	b	127fd8 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  127fa4:	e51b3010 	ldr	r3, [fp, #-16]
  127fa8:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  127fac:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  127fb0:	e51b3008 	ldr	r3, [fp, #-8]
  127fb4:	e58d3004 	str	r3, [sp, #4]
  127fb8:	e59b3004 	ldr	r3, [fp, #4]
  127fbc:	e58d3000 	str	r3, [sp]
  127fc0:	e1a03002 	mov	r3, r2
  127fc4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127fc8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127fcc:	e51b0010 	ldr	r0, [fp, #-16]
  127fd0:	eb000003 	bl	127fe4 <udp_sendto_if_src>
  127fd4:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  127fd8:	e1a00003 	mov	r0, r3
  127fdc:	e24bd004 	sub	sp, fp, #4
  127fe0:	e8bd8800 	pop	{fp, pc}

00127fe4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  127fe4:	e92d4800 	push	{fp, lr}
  127fe8:	e28db004 	add	fp, sp, #4
  127fec:	e24dd030 	sub	sp, sp, #48	; 0x30
  127ff0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127ff4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  127ff8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  127ffc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  128000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128004:	e3530000 	cmp	r3, #0
  128008:	0a000002 	beq	128018 <udp_sendto_if_src+0x34>
  12800c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128010:	e3530000 	cmp	r3, #0
  128014:	1a000001 	bne	128020 <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  128018:	e3e03005 	mvn	r3, #5
  12801c:	ea0000be 	b	12831c <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  128020:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128024:	e5d33008 	ldrb	r3, [r3, #8]
  128028:	e2033020 	and	r3, r3, #32
  12802c:	e3530000 	cmp	r3, #0
  128030:	1a000009 	bne	12805c <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  128034:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128038:	e5933000 	ldr	r3, [r3]
  12803c:	e59b1004 	ldr	r1, [fp, #4]
  128040:	e1a00003 	mov	r0, r3
  128044:	eb002866 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  128048:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  12804c:	e3530000 	cmp	r3, #0
  128050:	0a000001 	beq	12805c <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  128054:	e3e03005 	mvn	r3, #5
  128058:	ea0000af 	b	12831c <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  12805c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128060:	e1d331b2 	ldrh	r3, [r3, #18]
  128064:	e3530000 	cmp	r3, #0
  128068:	1a00000c 	bne	1280a0 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12806c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128074:	e1d331b2 	ldrh	r3, [r3, #18]
  128078:	e1a02003 	mov	r2, r3
  12807c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128080:	eb0000a8 	bl	128328 <udp_bind>
  128084:	e1a03000 	mov	r3, r0
  128088:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  12808c:	e15b30db 	ldrsb	r3, [fp, #-11]
  128090:	e3530000 	cmp	r3, #0
  128094:	0a000001 	beq	1280a0 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  128098:	e15b30db 	ldrsb	r3, [fp, #-11]
  12809c:	ea00009e 	b	12831c <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  1280a0:	e3a01008 	mov	r1, #8
  1280a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1280a8:	ebffca97 	bl	11ab0c <pbuf_header>
  1280ac:	e1a03000 	mov	r3, r0
  1280b0:	e3530000 	cmp	r3, #0
  1280b4:	0a000011 	beq	128100 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  1280b8:	e3a02000 	mov	r2, #0
  1280bc:	e3a01008 	mov	r1, #8
  1280c0:	e3a00001 	mov	r0, #1
  1280c4:	ebffc7a7 	bl	119f68 <pbuf_alloc>
  1280c8:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  1280cc:	e51b3008 	ldr	r3, [fp, #-8]
  1280d0:	e3530000 	cmp	r3, #0
  1280d4:	1a000001 	bne	1280e0 <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  1280d8:	e3e03000 	mvn	r3, #0
  1280dc:	ea00008e 	b	12831c <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  1280e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1280e4:	e1d330b8 	ldrh	r3, [r3, #8]
  1280e8:	e3530000 	cmp	r3, #0
  1280ec:	0a000005 	beq	128108 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  1280f0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1280f4:	e51b0008 	ldr	r0, [fp, #-8]
  1280f8:	ebffcba2 	bl	11af88 <pbuf_chain>
  1280fc:	ea000001 	b	128108 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  128100:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128104:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  128108:	e51b3008 	ldr	r3, [fp, #-8]
  12810c:	e1d330ba 	ldrh	r3, [r3, #10]
  128110:	e3530007 	cmp	r3, #7
  128114:	8a000006 	bhi	128134 <udp_sendto_if_src+0x150>
  128118:	e3080834 	movw	r0, #34868	; 0x8834
  12811c:	e3400014 	movt	r0, #20
  128120:	ebff6bfb 	bl	103114 <rt_kprintf>
  128124:	e3a01fb7 	mov	r1, #732	; 0x2dc
  128128:	e3080808 	movw	r0, #34824	; 0x8808
  12812c:	e3400014 	movt	r0, #20
  128130:	ebff8b17 	bl	10ad94 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  128134:	e51b3008 	ldr	r3, [fp, #-8]
  128138:	e5933004 	ldr	r3, [r3, #4]
  12813c:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  128140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128144:	e1d331b2 	ldrh	r3, [r3, #18]
  128148:	e1a00003 	mov	r0, r3
  12814c:	ebffb855 	bl	1162a8 <lwip_htons>
  128150:	e1a03000 	mov	r3, r0
  128154:	e1a02003 	mov	r2, r3
  128158:	e51b3010 	ldr	r3, [fp, #-16]
  12815c:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  128160:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  128164:	e1a00003 	mov	r0, r3
  128168:	ebffb84e 	bl	1162a8 <lwip_htons>
  12816c:	e1a03000 	mov	r3, r0
  128170:	e1a02003 	mov	r2, r3
  128174:	e51b3010 	ldr	r3, [fp, #-16]
  128178:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  12817c:	e51b3010 	ldr	r3, [fp, #-16]
  128180:	e3a02000 	mov	r2, #0
  128184:	e5c32006 	strb	r2, [r3, #6]
  128188:	e3a02000 	mov	r2, #0
  12818c:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  128190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128194:	e5d33010 	ldrb	r3, [r3, #16]
  128198:	e2033008 	and	r3, r3, #8
  12819c:	e3530000 	cmp	r3, #0
  1281a0:	0a00000a 	beq	1281d0 <udp_sendto_if_src+0x1ec>
  1281a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1281a8:	e5933000 	ldr	r3, [r3]
  1281ac:	e20330f0 	and	r3, r3, #240	; 0xf0
  1281b0:	e35300e0 	cmp	r3, #224	; 0xe0
  1281b4:	1a000005 	bne	1281d0 <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  1281b8:	e51b3008 	ldr	r3, [fp, #-8]
  1281bc:	e5d3300d 	ldrb	r3, [r3, #13]
  1281c0:	e3833004 	orr	r3, r3, #4
  1281c4:	e6ef2073 	uxtb	r2, r3
  1281c8:	e51b3008 	ldr	r3, [fp, #-8]
  1281cc:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  1281d0:	e51b3008 	ldr	r3, [fp, #-8]
  1281d4:	e1d330b8 	ldrh	r3, [r3, #8]
  1281d8:	e1a00003 	mov	r0, r3
  1281dc:	ebffb831 	bl	1162a8 <lwip_htons>
  1281e0:	e1a03000 	mov	r3, r0
  1281e4:	e1a02003 	mov	r2, r3
  1281e8:	e51b3010 	ldr	r3, [fp, #-16]
  1281ec:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  1281f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1281f4:	e5d33010 	ldrb	r3, [r3, #16]
  1281f8:	e2033001 	and	r3, r3, #1
  1281fc:	e3530000 	cmp	r3, #0
  128200:	1a000011 	bne	12824c <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  128204:	e51b3008 	ldr	r3, [fp, #-8]
  128208:	e1d320b8 	ldrh	r2, [r3, #8]
  12820c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128210:	e58d3000 	str	r3, [sp]
  128214:	e59b3008 	ldr	r3, [fp, #8]
  128218:	e3a01011 	mov	r1, #17
  12821c:	e51b0008 	ldr	r0, [fp, #-8]
  128220:	ebffc03f 	bl	118324 <ip_chksum_pseudo>
  128224:	e1a03000 	mov	r3, r0
  128228:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  12822c:	e15b30ba 	ldrh	r3, [fp, #-10]
  128230:	e3530000 	cmp	r3, #0
  128234:	1a000001 	bne	128240 <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  128238:	e3e03000 	mvn	r3, #0
  12823c:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  128240:	e51b3010 	ldr	r3, [fp, #-16]
  128244:	e15b20ba 	ldrh	r2, [fp, #-10]
  128248:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  12824c:	e3a03011 	mov	r3, #17
  128250:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  128254:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128258:	e5933000 	ldr	r3, [r3]
  12825c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128260:	e35300e0 	cmp	r3, #224	; 0xe0
  128264:	1a000002 	bne	128274 <udp_sendto_if_src+0x290>
  128268:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12826c:	e5d3301c 	ldrb	r3, [r3, #28]
  128270:	ea000001 	b	12827c <udp_sendto_if_src+0x298>
  128274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128278:	e5d3300a 	ldrb	r3, [r3, #10]
  12827c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  128280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128284:	e5d33009 	ldrb	r3, [r3, #9]
  128288:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  12828c:	e59b2004 	ldr	r2, [fp, #4]
  128290:	e58d2008 	str	r2, [sp, #8]
  128294:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  128298:	e58d2004 	str	r2, [sp, #4]
  12829c:	e58d3000 	str	r3, [sp]
  1282a0:	e1a03001 	mov	r3, r1
  1282a4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1282a8:	e59b1008 	ldr	r1, [fp, #8]
  1282ac:	e51b0008 	ldr	r0, [fp, #-8]
  1282b0:	eb00260a 	bl	131ae0 <ip4_output_if_src>
  1282b4:	e1a03000 	mov	r3, r0
  1282b8:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  1282bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1282c0:	e3403015 	movt	r3, #21
  1282c4:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  1282c8:	e2832001 	add	r2, r3, #1
  1282cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1282d0:	e3403015 	movt	r3, #21
  1282d4:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  1282d8:	e51b2008 	ldr	r2, [fp, #-8]
  1282dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1282e0:	e1520003 	cmp	r2, r3
  1282e4:	0a000003 	beq	1282f8 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  1282e8:	e51b0008 	ldr	r0, [fp, #-8]
  1282ec:	ebffca24 	bl	11ab84 <pbuf_free>
    q = NULL;
  1282f0:	e3a03000 	mov	r3, #0
  1282f4:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  1282f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1282fc:	e3403015 	movt	r3, #21
  128300:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  128304:	e2833001 	add	r3, r3, #1
  128308:	e6ff2073 	uxth	r2, r3
  12830c:	e30c3a18 	movw	r3, #51736	; 0xca18
  128310:	e3403015 	movt	r3, #21
  128314:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  128318:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  12831c:	e1a00003 	mov	r0, r3
  128320:	e24bd004 	sub	sp, fp, #4
  128324:	e8bd8800 	pop	{fp, pc}

00128328 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128328:	e92d4800 	push	{fp, lr}
  12832c:	e28db004 	add	fp, sp, #4
  128330:	e24dd018 	sub	sp, sp, #24
  128334:	e50b0010 	str	r0, [fp, #-16]
  128338:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12833c:	e1a03002 	mov	r3, r2
  128340:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  128344:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128348:	e3530000 	cmp	r3, #0
  12834c:	1a000002 	bne	12835c <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  128350:	e309363c 	movw	r3, #38460	; 0x963c
  128354:	e3403014 	movt	r3, #20
  128358:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  12835c:	e51b3010 	ldr	r3, [fp, #-16]
  128360:	e3530000 	cmp	r3, #0
  128364:	0a000002 	beq	128374 <udp_bind+0x4c>
  128368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12836c:	e3530000 	cmp	r3, #0
  128370:	1a000001 	bne	12837c <udp_bind+0x54>
    return ERR_VAL;
  128374:	e3e03005 	mvn	r3, #5
  128378:	ea00005d 	b	1284f4 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  12837c:	e3a03000 	mov	r3, #0
  128380:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128384:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128388:	e3403015 	movt	r3, #21
  12838c:	e5933000 	ldr	r3, [r3]
  128390:	e50b3008 	str	r3, [fp, #-8]
  128394:	ea000009 	b	1283c0 <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  128398:	e51b2010 	ldr	r2, [fp, #-16]
  12839c:	e51b3008 	ldr	r3, [fp, #-8]
  1283a0:	e1520003 	cmp	r2, r3
  1283a4:	1a000002 	bne	1283b4 <udp_bind+0x8c>
      rebind = 1;
  1283a8:	e3a03001 	mov	r3, #1
  1283ac:	e54b3009 	strb	r3, [fp, #-9]
      break;
  1283b0:	ea000005 	b	1283cc <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1283b4:	e51b3008 	ldr	r3, [fp, #-8]
  1283b8:	e593300c 	ldr	r3, [r3, #12]
  1283bc:	e50b3008 	str	r3, [fp, #-8]
  1283c0:	e51b3008 	ldr	r3, [fp, #-8]
  1283c4:	e3530000 	cmp	r3, #0
  1283c8:	1afffff2 	bne	128398 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  1283cc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1283d0:	e3530000 	cmp	r3, #0
  1283d4:	1a000007 	bne	1283f8 <udp_bind+0xd0>
    port = udp_new_port();
  1283d8:	ebfffca8 	bl	127680 <udp_new_port>
  1283dc:	e1a03000 	mov	r3, r0
  1283e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  1283e4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1283e8:	e3530000 	cmp	r3, #0
  1283ec:	1a000027 	bne	128490 <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  1283f0:	e3e03007 	mvn	r3, #7
  1283f4:	ea00003e 	b	1284f4 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1283f8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1283fc:	e3403015 	movt	r3, #21
  128400:	e5933000 	ldr	r3, [r3]
  128404:	e50b3008 	str	r3, [fp, #-8]
  128408:	ea00001d 	b	128484 <udp_bind+0x15c>
      if (pcb != ipcb) {
  12840c:	e51b2010 	ldr	r2, [fp, #-16]
  128410:	e51b3008 	ldr	r3, [fp, #-8]
  128414:	e1520003 	cmp	r2, r3
  128418:	0a000016 	beq	128478 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12841c:	e51b3010 	ldr	r3, [fp, #-16]
  128420:	e5d33008 	ldrb	r3, [r3, #8]
  128424:	e2033004 	and	r3, r3, #4
  128428:	e3530000 	cmp	r3, #0
  12842c:	0a000004 	beq	128444 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  128430:	e51b3008 	ldr	r3, [fp, #-8]
  128434:	e5d33008 	ldrb	r3, [r3, #8]
  128438:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12843c:	e3530000 	cmp	r3, #0
  128440:	1a00000c 	bne	128478 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  128444:	e51b3008 	ldr	r3, [fp, #-8]
  128448:	e1d331b2 	ldrh	r3, [r3, #18]
  12844c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128450:	e1520003 	cmp	r2, r3
  128454:	1a000007 	bne	128478 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  128458:	e51b3008 	ldr	r3, [fp, #-8]
  12845c:	e5932000 	ldr	r2, [r3]
  128460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128464:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  128468:	e1520003 	cmp	r2, r3
  12846c:	1a000001 	bne	128478 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  128470:	e3e03007 	mvn	r3, #7
  128474:	ea00001e 	b	1284f4 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128478:	e51b3008 	ldr	r3, [fp, #-8]
  12847c:	e593300c 	ldr	r3, [r3, #12]
  128480:	e50b3008 	str	r3, [fp, #-8]
  128484:	e51b3008 	ldr	r3, [fp, #-8]
  128488:	e3530000 	cmp	r3, #0
  12848c:	1affffde 	bne	12840c <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  128490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128494:	e3530000 	cmp	r3, #0
  128498:	0a000002 	beq	1284a8 <udp_bind+0x180>
  12849c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1284a0:	e5933000 	ldr	r3, [r3]
  1284a4:	ea000000 	b	1284ac <udp_bind+0x184>
  1284a8:	e3a03000 	mov	r3, #0
  1284ac:	e51b2010 	ldr	r2, [fp, #-16]
  1284b0:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  1284b4:	e51b3010 	ldr	r3, [fp, #-16]
  1284b8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1284bc:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  1284c0:	e55b3009 	ldrb	r3, [fp, #-9]
  1284c4:	e3530000 	cmp	r3, #0
  1284c8:	1a000008 	bne	1284f0 <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  1284cc:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1284d0:	e3403015 	movt	r3, #21
  1284d4:	e5932000 	ldr	r2, [r3]
  1284d8:	e51b3010 	ldr	r3, [fp, #-16]
  1284dc:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  1284e0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1284e4:	e3403015 	movt	r3, #21
  1284e8:	e51b2010 	ldr	r2, [fp, #-16]
  1284ec:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  1284f0:	e3a03000 	mov	r3, #0
}
  1284f4:	e1a00003 	mov	r0, r3
  1284f8:	e24bd004 	sub	sp, fp, #4
  1284fc:	e8bd8800 	pop	{fp, pc}

00128500 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128500:	e92d4800 	push	{fp, lr}
  128504:	e28db004 	add	fp, sp, #4
  128508:	e24dd018 	sub	sp, sp, #24
  12850c:	e50b0010 	str	r0, [fp, #-16]
  128510:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128514:	e1a03002 	mov	r3, r2
  128518:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  12851c:	e51b3010 	ldr	r3, [fp, #-16]
  128520:	e3530000 	cmp	r3, #0
  128524:	0a000002 	beq	128534 <udp_connect+0x34>
  128528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12852c:	e3530000 	cmp	r3, #0
  128530:	1a000001 	bne	12853c <udp_connect+0x3c>
    return ERR_VAL;
  128534:	e3e03005 	mvn	r3, #5
  128538:	ea00003d 	b	128634 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  12853c:	e51b3010 	ldr	r3, [fp, #-16]
  128540:	e1d331b2 	ldrh	r3, [r3, #18]
  128544:	e3530000 	cmp	r3, #0
  128548:	1a00000c 	bne	128580 <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12854c:	e51b1010 	ldr	r1, [fp, #-16]
  128550:	e51b3010 	ldr	r3, [fp, #-16]
  128554:	e1d331b2 	ldrh	r3, [r3, #18]
  128558:	e1a02003 	mov	r2, r3
  12855c:	e51b0010 	ldr	r0, [fp, #-16]
  128560:	ebffff70 	bl	128328 <udp_bind>
  128564:	e1a03000 	mov	r3, r0
  128568:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  12856c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  128570:	e3530000 	cmp	r3, #0
  128574:	0a000001 	beq	128580 <udp_connect+0x80>
      return err;
  128578:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12857c:	ea00002c 	b	128634 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  128580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128584:	e3530000 	cmp	r3, #0
  128588:	0a000002 	beq	128598 <udp_connect+0x98>
  12858c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128590:	e5933000 	ldr	r3, [r3]
  128594:	ea000000 	b	12859c <udp_connect+0x9c>
  128598:	e3a03000 	mov	r3, #0
  12859c:	e51b2010 	ldr	r2, [fp, #-16]
  1285a0:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  1285a4:	e51b3010 	ldr	r3, [fp, #-16]
  1285a8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1285ac:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  1285b0:	e51b3010 	ldr	r3, [fp, #-16]
  1285b4:	e5d33010 	ldrb	r3, [r3, #16]
  1285b8:	e3833004 	orr	r3, r3, #4
  1285bc:	e6ef2073 	uxtb	r2, r3
  1285c0:	e51b3010 	ldr	r3, [fp, #-16]
  1285c4:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1285c8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1285cc:	e3403015 	movt	r3, #21
  1285d0:	e5933000 	ldr	r3, [r3]
  1285d4:	e50b3008 	str	r3, [fp, #-8]
  1285d8:	ea000008 	b	128600 <udp_connect+0x100>
    if (pcb == ipcb) {
  1285dc:	e51b2010 	ldr	r2, [fp, #-16]
  1285e0:	e51b3008 	ldr	r3, [fp, #-8]
  1285e4:	e1520003 	cmp	r2, r3
  1285e8:	1a000001 	bne	1285f4 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  1285ec:	e3a03000 	mov	r3, #0
  1285f0:	ea00000f 	b	128634 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1285f4:	e51b3008 	ldr	r3, [fp, #-8]
  1285f8:	e593300c 	ldr	r3, [r3, #12]
  1285fc:	e50b3008 	str	r3, [fp, #-8]
  128600:	e51b3008 	ldr	r3, [fp, #-8]
  128604:	e3530000 	cmp	r3, #0
  128608:	1afffff3 	bne	1285dc <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  12860c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128610:	e3403015 	movt	r3, #21
  128614:	e5932000 	ldr	r2, [r3]
  128618:	e51b3010 	ldr	r3, [fp, #-16]
  12861c:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  128620:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128624:	e3403015 	movt	r3, #21
  128628:	e51b2010 	ldr	r2, [fp, #-16]
  12862c:	e5832000 	str	r2, [r3]
  return ERR_OK;
  128630:	e3a03000 	mov	r3, #0
}
  128634:	e1a00003 	mov	r0, r3
  128638:	e24bd004 	sub	sp, fp, #4
  12863c:	e8bd8800 	pop	{fp, pc}

00128640 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  128640:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128644:	e28db000 	add	fp, sp, #0
  128648:	e24dd00c 	sub	sp, sp, #12
  12864c:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  128650:	e51b3008 	ldr	r3, [fp, #-8]
  128654:	e3a02000 	mov	r2, #0
  128658:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  12865c:	e51b3008 	ldr	r3, [fp, #-8]
  128660:	e3a02000 	mov	r2, #0
  128664:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  128668:	e51b3008 	ldr	r3, [fp, #-8]
  12866c:	e5d33010 	ldrb	r3, [r3, #16]
  128670:	e3c33004 	bic	r3, r3, #4
  128674:	e6ef2073 	uxtb	r2, r3
  128678:	e51b3008 	ldr	r3, [fp, #-8]
  12867c:	e5c32010 	strb	r2, [r3, #16]
}
  128680:	e320f000 	nop	{0}
  128684:	e28bd000 	add	sp, fp, #0
  128688:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12868c:	e12fff1e 	bx	lr

00128690 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  128690:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128694:	e28db000 	add	fp, sp, #0
  128698:	e24dd014 	sub	sp, sp, #20
  12869c:	e50b0008 	str	r0, [fp, #-8]
  1286a0:	e50b100c 	str	r1, [fp, #-12]
  1286a4:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  1286a8:	e51b3008 	ldr	r3, [fp, #-8]
  1286ac:	e51b200c 	ldr	r2, [fp, #-12]
  1286b0:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  1286b4:	e51b3008 	ldr	r3, [fp, #-8]
  1286b8:	e51b2010 	ldr	r2, [fp, #-16]
  1286bc:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1286c0:	e320f000 	nop	{0}
  1286c4:	e28bd000 	add	sp, fp, #0
  1286c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1286cc:	e12fff1e 	bx	lr

001286d0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  1286d0:	e92d4800 	push	{fp, lr}
  1286d4:	e28db004 	add	fp, sp, #4
  1286d8:	e24dd010 	sub	sp, sp, #16
  1286dc:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  1286e0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1286e4:	e3403015 	movt	r3, #21
  1286e8:	e5933000 	ldr	r3, [r3]
  1286ec:	e51b2010 	ldr	r2, [fp, #-16]
  1286f0:	e1520003 	cmp	r2, r3
  1286f4:	1a000007 	bne	128718 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  1286f8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1286fc:	e3403015 	movt	r3, #21
  128700:	e5933000 	ldr	r3, [r3]
  128704:	e593200c 	ldr	r2, [r3, #12]
  128708:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12870c:	e3403015 	movt	r3, #21
  128710:	e5832000 	str	r2, [r3]
  128714:	ea000018 	b	12877c <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128718:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12871c:	e3403015 	movt	r3, #21
  128720:	e5933000 	ldr	r3, [r3]
  128724:	e50b3008 	str	r3, [fp, #-8]
  128728:	ea000010 	b	128770 <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  12872c:	e51b3008 	ldr	r3, [fp, #-8]
  128730:	e593300c 	ldr	r3, [r3, #12]
  128734:	e3530000 	cmp	r3, #0
  128738:	0a000009 	beq	128764 <udp_remove+0x94>
  12873c:	e51b3008 	ldr	r3, [fp, #-8]
  128740:	e593300c 	ldr	r3, [r3, #12]
  128744:	e51b2010 	ldr	r2, [fp, #-16]
  128748:	e1520003 	cmp	r2, r3
  12874c:	1a000004 	bne	128764 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  128750:	e51b3010 	ldr	r3, [fp, #-16]
  128754:	e593200c 	ldr	r2, [r3, #12]
  128758:	e51b3008 	ldr	r3, [fp, #-8]
  12875c:	e583200c 	str	r2, [r3, #12]
        break;
  128760:	ea000005 	b	12877c <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128764:	e51b3008 	ldr	r3, [fp, #-8]
  128768:	e593300c 	ldr	r3, [r3, #12]
  12876c:	e50b3008 	str	r3, [fp, #-8]
  128770:	e51b3008 	ldr	r3, [fp, #-8]
  128774:	e3530000 	cmp	r3, #0
  128778:	1affffeb 	bne	12872c <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  12877c:	e51b1010 	ldr	r1, [fp, #-16]
  128780:	e3a00001 	mov	r0, #1
  128784:	ebffc1f0 	bl	118f4c <memp_free>
}
  128788:	e320f000 	nop	{0}
  12878c:	e24bd004 	sub	sp, fp, #4
  128790:	e8bd8800 	pop	{fp, pc}

00128794 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128794:	e92d4800 	push	{fp, lr}
  128798:	e28db004 	add	fp, sp, #4
  12879c:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  1287a0:	e3002452 	movw	r2, #1106	; 0x452
  1287a4:	e3081808 	movw	r1, #34824	; 0x8808
  1287a8:	e3401014 	movt	r1, #20
  1287ac:	e3a00001 	mov	r0, #1
  1287b0:	ebffc17d 	bl	118dac <memp_malloc_fn>
  1287b4:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  1287b8:	e51b3008 	ldr	r3, [fp, #-8]
  1287bc:	e3530000 	cmp	r3, #0
  1287c0:	0a000009 	beq	1287ec <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  1287c4:	e3a02028 	mov	r2, #40	; 0x28
  1287c8:	e3a01000 	mov	r1, #0
  1287cc:	e51b0008 	ldr	r0, [fp, #-8]
  1287d0:	eb0061e3 	bl	140f64 <memset>
    pcb->ttl = UDP_TTL;
  1287d4:	e51b3008 	ldr	r3, [fp, #-8]
  1287d8:	e3e02000 	mvn	r2, #0
  1287dc:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  1287e0:	e51b3008 	ldr	r3, [fp, #-8]
  1287e4:	e3e02000 	mvn	r2, #0
  1287e8:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  1287ec:	e51b3008 	ldr	r3, [fp, #-8]
}
  1287f0:	e1a00003 	mov	r0, r3
  1287f4:	e24bd004 	sub	sp, fp, #4
  1287f8:	e8bd8800 	pop	{fp, pc}

001287fc <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  1287fc:	e92d4800 	push	{fp, lr}
  128800:	e28db004 	add	fp, sp, #4
  128804:	e24dd010 	sub	sp, sp, #16
  128808:	e1a03000 	mov	r3, r0
  12880c:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128810:	ebffffdf 	bl	128794 <udp_new>
  128814:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  128818:	e51b3008 	ldr	r3, [fp, #-8]
}
  12881c:	e1a00003 	mov	r0, r3
  128820:	e24bd004 	sub	sp, fp, #4
  128824:	e8bd8800 	pop	{fp, pc}

00128828 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  128828:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12882c:	e28db000 	add	fp, sp, #0
  128830:	e24dd014 	sub	sp, sp, #20
  128834:	e50b0010 	str	r0, [fp, #-16]
  128838:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  12883c:	e51b3010 	ldr	r3, [fp, #-16]
  128840:	e3530000 	cmp	r3, #0
  128844:	0a00001f 	beq	1288c8 <udp_netif_ip_addr_changed+0xa0>
  128848:	e51b3010 	ldr	r3, [fp, #-16]
  12884c:	e5933000 	ldr	r3, [r3]
  128850:	e3530000 	cmp	r3, #0
  128854:	0a00001b 	beq	1288c8 <udp_netif_ip_addr_changed+0xa0>
  128858:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12885c:	e3530000 	cmp	r3, #0
  128860:	0a000018 	beq	1288c8 <udp_netif_ip_addr_changed+0xa0>
  128864:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128868:	e5933000 	ldr	r3, [r3]
  12886c:	e3530000 	cmp	r3, #0
  128870:	0a000014 	beq	1288c8 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128874:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128878:	e3403015 	movt	r3, #21
  12887c:	e5933000 	ldr	r3, [r3]
  128880:	e50b3008 	str	r3, [fp, #-8]
  128884:	ea00000c 	b	1288bc <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  128888:	e51b3008 	ldr	r3, [fp, #-8]
  12888c:	e5932000 	ldr	r2, [r3]
  128890:	e51b3010 	ldr	r3, [fp, #-16]
  128894:	e5933000 	ldr	r3, [r3]
  128898:	e1520003 	cmp	r2, r3
  12889c:	1a000003 	bne	1288b0 <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  1288a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288a4:	e5932000 	ldr	r2, [r3]
  1288a8:	e51b3008 	ldr	r3, [fp, #-8]
  1288ac:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  1288b0:	e51b3008 	ldr	r3, [fp, #-8]
  1288b4:	e593300c 	ldr	r3, [r3, #12]
  1288b8:	e50b3008 	str	r3, [fp, #-8]
  1288bc:	e51b3008 	ldr	r3, [fp, #-8]
  1288c0:	e3530000 	cmp	r3, #0
  1288c4:	1affffef 	bne	128888 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  1288c8:	e320f000 	nop	{0}
  1288cc:	e28bd000 	add	sp, fp, #0
  1288d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1288d4:	e12fff1e 	bx	lr

001288d8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  1288d8:	e92d4800 	push	{fp, lr}
  1288dc:	e28db004 	add	fp, sp, #4
  1288e0:	e24dd018 	sub	sp, sp, #24
  1288e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1288e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  1288ec:	e3a0300e 	mov	r3, #14
  1288f0:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  1288f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1288f8:	e1d330ba 	ldrh	r3, [r3, #10]
  1288fc:	e353000e 	cmp	r3, #14
  128900:	8a000015 	bhi	12895c <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128904:	e30c3a18 	movw	r3, #51736	; 0xca18
  128908:	e3403015 	movt	r3, #21
  12890c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128910:	e2833001 	add	r3, r3, #1
  128914:	e6ff2073 	uxth	r2, r3
  128918:	e30c3a18 	movw	r3, #51736	; 0xca18
  12891c:	e3403015 	movt	r3, #21
  128920:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  128924:	e30c3a18 	movw	r3, #51736	; 0xca18
  128928:	e3403015 	movt	r3, #21
  12892c:	e1d331be 	ldrh	r3, [r3, #30]
  128930:	e2833001 	add	r3, r3, #1
  128934:	e6ff2073 	uxth	r2, r3
  128938:	e30c3a18 	movw	r3, #51736	; 0xca18
  12893c:	e3403015 	movt	r3, #21
  128940:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  128944:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128948:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  12894c:	e2832001 	add	r2, r3, #1
  128950:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128954:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  128958:	ea000096 	b	128bb8 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  12895c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128960:	e5933004 	ldr	r3, [r3, #4]
  128964:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  128968:	e51b300c 	ldr	r3, [fp, #-12]
  12896c:	e5d3200c 	ldrb	r2, [r3, #12]
  128970:	e5d3300d 	ldrb	r3, [r3, #13]
  128974:	e1a03403 	lsl	r3, r3, #8
  128978:	e1833002 	orr	r3, r3, r2
  12897c:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128980:	e51b300c 	ldr	r3, [fp, #-12]
  128984:	e5d33000 	ldrb	r3, [r3]
  128988:	e2033001 	and	r3, r3, #1
  12898c:	e3530000 	cmp	r3, #0
  128990:	0a000021 	beq	128a1c <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128994:	e51b300c 	ldr	r3, [fp, #-12]
  128998:	e5d33000 	ldrb	r3, [r3]
  12899c:	e3530001 	cmp	r3, #1
  1289a0:	1a00000e 	bne	1289e0 <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  1289a4:	e51b300c 	ldr	r3, [fp, #-12]
  1289a8:	e5d33001 	ldrb	r3, [r3, #1]
  1289ac:	e3530000 	cmp	r3, #0
  1289b0:	1a000019 	bne	128a1c <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  1289b4:	e51b300c 	ldr	r3, [fp, #-12]
  1289b8:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  1289bc:	e353005e 	cmp	r3, #94	; 0x5e
  1289c0:	1a000015 	bne	128a1c <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  1289c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1289c8:	e5d3300d 	ldrb	r3, [r3, #13]
  1289cc:	e3833010 	orr	r3, r3, #16
  1289d0:	e6ef2073 	uxtb	r2, r3
  1289d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1289d8:	e5c3200d 	strb	r2, [r3, #13]
  1289dc:	ea00000e 	b	128a1c <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  1289e0:	e51b300c 	ldr	r3, [fp, #-12]
  1289e4:	e3a02006 	mov	r2, #6
  1289e8:	e3081864 	movw	r1, #34916	; 0x8864
  1289ec:	e3401014 	movt	r1, #20
  1289f0:	e1a00003 	mov	r0, r3
  1289f4:	eb0060e1 	bl	140d80 <memcmp>
  1289f8:	e1a03000 	mov	r3, r0
  1289fc:	e3530000 	cmp	r3, #0
  128a00:	1a000005 	bne	128a1c <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128a04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a08:	e5d3300d 	ldrb	r3, [r3, #13]
  128a0c:	e3833008 	orr	r3, r3, #8
  128a10:	e6ef2073 	uxtb	r2, r3
  128a14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a18:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  128a1c:	e15b30be 	ldrh	r3, [fp, #-14]
  128a20:	e3530008 	cmp	r3, #8
  128a24:	0a000003 	beq	128a38 <ethernet_input+0x160>
  128a28:	e3002608 	movw	r2, #1544	; 0x608
  128a2c:	e1530002 	cmp	r3, r2
  128a30:	0a000019 	beq	128a9c <ethernet_input+0x1c4>
  128a34:	ea000042 	b	128b44 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128a3c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128a40:	e2033008 	and	r3, r3, #8
  128a44:	e3530000 	cmp	r3, #0
  128a48:	0a000055 	beq	128ba4 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a50:	e1d330ba 	ldrh	r3, [r3, #10]
  128a54:	e1a02003 	mov	r2, r3
  128a58:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128a5c:	e1520003 	cmp	r2, r3
  128a60:	ba000051 	blt	128bac <ethernet_input+0x2d4>
  128a64:	e15b30b6 	ldrh	r3, [fp, #-6]
  128a68:	e2633000 	rsb	r3, r3, #0
  128a6c:	e6ff3073 	uxth	r3, r3
  128a70:	e6bf3073 	sxth	r3, r3
  128a74:	e1a01003 	mov	r1, r3
  128a78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128a7c:	ebffc822 	bl	11ab0c <pbuf_header>
  128a80:	e1a03000 	mov	r3, r0
  128a84:	e3530000 	cmp	r3, #0
  128a88:	1a000047 	bne	128bac <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128a8c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128a90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128a94:	eb00219b 	bl	131108 <ip4_input>
      }
      break;
  128a98:	ea00003f 	b	128b9c <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128a9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128aa0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128aa4:	e2033008 	and	r3, r3, #8
  128aa8:	e3530000 	cmp	r3, #0
  128aac:	0a000040 	beq	128bb4 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128ab4:	e1d330ba 	ldrh	r3, [r3, #10]
  128ab8:	e1a02003 	mov	r2, r3
  128abc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128ac0:	e1520003 	cmp	r2, r3
  128ac4:	ba000009 	blt	128af0 <ethernet_input+0x218>
  128ac8:	e15b30b6 	ldrh	r3, [fp, #-6]
  128acc:	e2633000 	rsb	r3, r3, #0
  128ad0:	e6ff3073 	uxth	r3, r3
  128ad4:	e6bf3073 	sxth	r3, r3
  128ad8:	e1a01003 	mov	r1, r3
  128adc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128ae0:	ebffc809 	bl	11ab0c <pbuf_header>
  128ae4:	e1a03000 	mov	r3, r0
  128ae8:	e3530000 	cmp	r3, #0
  128aec:	0a000010 	beq	128b34 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128af0:	e30c3a18 	movw	r3, #51736	; 0xca18
  128af4:	e3403015 	movt	r3, #21
  128af8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128afc:	e2833001 	add	r3, r3, #1
  128b00:	e6ff2073 	uxth	r2, r3
  128b04:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b08:	e3403015 	movt	r3, #21
  128b0c:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128b10:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b14:	e3403015 	movt	r3, #21
  128b18:	e1d331be 	ldrh	r3, [r3, #30]
  128b1c:	e2833001 	add	r3, r3, #1
  128b20:	e6ff2073 	uxth	r2, r3
  128b24:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b28:	e3403015 	movt	r3, #21
  128b2c:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128b30:	ea000020 	b	128bb8 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128b34:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128b38:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128b3c:	eb0015a9 	bl	12e1e8 <etharp_input>
      }
      break;
  128b40:	ea000015 	b	128b9c <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128b44:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b48:	e3403015 	movt	r3, #21
  128b4c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128b50:	e2833001 	add	r3, r3, #1
  128b54:	e6ff2073 	uxth	r2, r3
  128b58:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b5c:	e3403015 	movt	r3, #21
  128b60:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128b64:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b68:	e3403015 	movt	r3, #21
  128b6c:	e1d331be 	ldrh	r3, [r3, #30]
  128b70:	e2833001 	add	r3, r3, #1
  128b74:	e6ff2073 	uxth	r2, r3
  128b78:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b7c:	e3403015 	movt	r3, #21
  128b80:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128b84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128b88:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128b8c:	e2832001 	add	r2, r3, #1
  128b90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128b94:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128b98:	ea000006 	b	128bb8 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128b9c:	e3a03000 	mov	r3, #0
  128ba0:	ea000007 	b	128bc4 <ethernet_input+0x2ec>
        goto free_and_return;
  128ba4:	e320f000 	nop	{0}
  128ba8:	ea000002 	b	128bb8 <ethernet_input+0x2e0>

free_and_return:
  128bac:	e320f000 	nop	{0}
  128bb0:	ea000000 	b	128bb8 <ethernet_input+0x2e0>
        goto free_and_return;
  128bb4:	e320f000 	nop	{0}
  pbuf_free(p);
  128bb8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128bbc:	ebffc7f0 	bl	11ab84 <pbuf_free>
  return ERR_OK;
  128bc0:	e3a03000 	mov	r3, #0
}
  128bc4:	e1a00003 	mov	r0, r3
  128bc8:	e24bd004 	sub	sp, fp, #4
  128bcc:	e8bd8800 	pop	{fp, pc}

00128bd0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128bd0:	e92d4800 	push	{fp, lr}
  128bd4:	e28db004 	add	fp, sp, #4
  128bd8:	e24dd018 	sub	sp, sp, #24
  128bdc:	e50b0010 	str	r0, [fp, #-16]
  128be0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128be4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128be8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128bec:	e1db30b4 	ldrh	r3, [fp, #4]
  128bf0:	e1a00003 	mov	r0, r3
  128bf4:	ebffb5ab 	bl	1162a8 <lwip_htons>
  128bf8:	e1a03000 	mov	r3, r0
  128bfc:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128c00:	e3a0100e 	mov	r1, #14
  128c04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128c08:	ebffc7bf 	bl	11ab0c <pbuf_header>
  128c0c:	e1a03000 	mov	r3, r0
  128c10:	e3530000 	cmp	r3, #0
  128c14:	1a000022 	bne	128ca4 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128c18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128c1c:	e5933004 	ldr	r3, [r3, #4]
  128c20:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128c24:	e51b300c 	ldr	r3, [fp, #-12]
  128c28:	e15b20b6 	ldrh	r2, [fp, #-6]
  128c2c:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128c30:	e51b300c 	ldr	r3, [fp, #-12]
  128c34:	e3a02006 	mov	r2, #6
  128c38:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128c3c:	e1a00003 	mov	r0, r3
  128c40:	eb005f8f 	bl	140a84 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128c44:	e51b300c 	ldr	r3, [fp, #-12]
  128c48:	e2833006 	add	r3, r3, #6
  128c4c:	e3a02006 	mov	r2, #6
  128c50:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128c54:	e1a00003 	mov	r0, r3
  128c58:	eb005f89 	bl	140a84 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128c5c:	e51b3010 	ldr	r3, [fp, #-16]
  128c60:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128c64:	e3530006 	cmp	r3, #6
  128c68:	0a000006 	beq	128c88 <ethernet_output+0xb8>
  128c6c:	e3080874 	movw	r0, #34932	; 0x8874
  128c70:	e3400014 	movt	r0, #20
  128c74:	ebff6926 	bl	103114 <rt_kprintf>
  128c78:	e300112e 	movw	r1, #302	; 0x12e
  128c7c:	e30808a8 	movw	r0, #34984	; 0x88a8
  128c80:	e3400014 	movt	r0, #20
  128c84:	ebff8842 	bl	10ad94 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128c88:	e51b3010 	ldr	r3, [fp, #-16]
  128c8c:	e5933018 	ldr	r3, [r3, #24]
  128c90:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128c94:	e51b0010 	ldr	r0, [fp, #-16]
  128c98:	e12fff33 	blx	r3
  128c9c:	e1a03000 	mov	r3, r0
  128ca0:	ea000009 	b	128ccc <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128ca4:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128ca8:	e30c3a18 	movw	r3, #51736	; 0xca18
  128cac:	e3403015 	movt	r3, #21
  128cb0:	e1d330ba 	ldrh	r3, [r3, #10]
  128cb4:	e2833001 	add	r3, r3, #1
  128cb8:	e6ff2073 	uxth	r2, r3
  128cbc:	e30c3a18 	movw	r3, #51736	; 0xca18
  128cc0:	e3403015 	movt	r3, #21
  128cc4:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128cc8:	e3e03001 	mvn	r3, #1
}
  128ccc:	e1a00003 	mov	r0, r3
  128cd0:	e24bd004 	sub	sp, fp, #4
  128cd4:	e8bd8800 	pop	{fp, pc}

00128cd8 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  128cd8:	e92d4800 	push	{fp, lr}
  128cdc:	e28db004 	add	fp, sp, #4
  128ce0:	e24dd008 	sub	sp, sp, #8
  128ce4:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  128ce8:	e51b3008 	ldr	r3, [fp, #-8]
  128cec:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128cf0:	e1a00003 	mov	r0, r3
  128cf4:	ebffc268 	bl	11969c <netif_set_up>
    return ERR_OK;
  128cf8:	e3a03000 	mov	r3, #0
}
  128cfc:	e1a00003 	mov	r0, r3
  128d00:	e24bd004 	sub	sp, fp, #4
  128d04:	e8bd8800 	pop	{fp, pc}

00128d08 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  128d08:	e92d4800 	push	{fp, lr}
  128d0c:	e28db004 	add	fp, sp, #4
  128d10:	e24dd008 	sub	sp, sp, #8
  128d14:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  128d18:	e51b3008 	ldr	r3, [fp, #-8]
  128d1c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d20:	e1a00003 	mov	r0, r3
  128d24:	ebffc2b1 	bl	1197f0 <netif_set_down>
    return ERR_OK;
  128d28:	e3a03000 	mov	r3, #0
}
  128d2c:	e1a00003 	mov	r0, r3
  128d30:	e24bd004 	sub	sp, fp, #4
  128d34:	e8bd8800 	pop	{fp, pc}

00128d38 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  128d38:	e92d4800 	push	{fp, lr}
  128d3c:	e28db004 	add	fp, sp, #4
  128d40:	e24dd010 	sub	sp, sp, #16
  128d44:	e50b0008 	str	r0, [fp, #-8]
  128d48:	e50b100c 	str	r1, [fp, #-12]
  128d4c:	e50b2010 	str	r2, [fp, #-16]
  128d50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  128d54:	e51b300c 	ldr	r3, [fp, #-12]
  128d58:	e3530000 	cmp	r3, #0
  128d5c:	0a00000c 	beq	128d94 <lwip_netdev_set_addr_info+0x5c>
  128d60:	e51b3010 	ldr	r3, [fp, #-16]
  128d64:	e3530000 	cmp	r3, #0
  128d68:	0a000009 	beq	128d94 <lwip_netdev_set_addr_info+0x5c>
  128d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d70:	e3530000 	cmp	r3, #0
  128d74:	0a000006 	beq	128d94 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  128d78:	e51b3008 	ldr	r3, [fp, #-8]
  128d7c:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  128d80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d84:	e51b2010 	ldr	r2, [fp, #-16]
  128d88:	e51b100c 	ldr	r1, [fp, #-12]
  128d8c:	ebffc10e 	bl	1191cc <netif_set_addr>
  128d90:	ea000017 	b	128df4 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  128d94:	e51b300c 	ldr	r3, [fp, #-12]
  128d98:	e3530000 	cmp	r3, #0
  128d9c:	0a000004 	beq	128db4 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  128da0:	e51b3008 	ldr	r3, [fp, #-8]
  128da4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128da8:	e51b100c 	ldr	r1, [fp, #-12]
  128dac:	e1a00003 	mov	r0, r3
  128db0:	ebffc1b4 	bl	119488 <netif_set_ipaddr>
        }

        if (netmask)
  128db4:	e51b3010 	ldr	r3, [fp, #-16]
  128db8:	e3530000 	cmp	r3, #0
  128dbc:	0a000004 	beq	128dd4 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  128dc0:	e51b3008 	ldr	r3, [fp, #-8]
  128dc4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128dc8:	e51b1010 	ldr	r1, [fp, #-16]
  128dcc:	e1a00003 	mov	r0, r3
  128dd0:	ebffc20c 	bl	119608 <netif_set_netmask>
        }

        if (gw)
  128dd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128dd8:	e3530000 	cmp	r3, #0
  128ddc:	0a000004 	beq	128df4 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  128de0:	e51b3008 	ldr	r3, [fp, #-8]
  128de4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128de8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128dec:	e1a00003 	mov	r0, r3
  128df0:	ebffc1eb 	bl	1195a4 <netif_set_gw>
        }
    }

    return ERR_OK;
  128df4:	e3a03000 	mov	r3, #0
}
  128df8:	e1a00003 	mov	r0, r3
  128dfc:	e24bd004 	sub	sp, fp, #4
  128e00:	e8bd8800 	pop	{fp, pc}

00128e04 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  128e04:	e92d4800 	push	{fp, lr}
  128e08:	e28db004 	add	fp, sp, #4
  128e0c:	e24dd010 	sub	sp, sp, #16
  128e10:	e50b0008 	str	r0, [fp, #-8]
  128e14:	e1a03001 	mov	r3, r1
  128e18:	e50b2010 	str	r2, [fp, #-16]
  128e1c:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  128e20:	e55b3009 	ldrb	r3, [fp, #-9]
  128e24:	e51b1010 	ldr	r1, [fp, #-16]
  128e28:	e1a00003 	mov	r0, r3
  128e2c:	ebffb623 	bl	1166c0 <dns_setserver>
    return ERR_OK;
  128e30:	e3a03000 	mov	r3, #0
}
  128e34:	e1a00003 	mov	r0, r3
  128e38:	e24bd004 	sub	sp, fp, #4
  128e3c:	e8bd8800 	pop	{fp, pc}

00128e40 <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  128e40:	e92d4800 	push	{fp, lr}
  128e44:	e28db004 	add	fp, sp, #4
  128e48:	e24dd008 	sub	sp, sp, #8
  128e4c:	e50b0008 	str	r0, [fp, #-8]
  128e50:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  128e54:	e51b300c 	ldr	r3, [fp, #-12]
  128e58:	e3530001 	cmp	r3, #1
  128e5c:	1a000004 	bne	128e74 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  128e60:	e51b3008 	ldr	r3, [fp, #-8]
  128e64:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e68:	e1a00003 	mov	r0, r3
  128e6c:	eb0006d5 	bl	12a9c8 <dhcp_start>
  128e70:	ea000003 	b	128e84 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  128e74:	e51b3008 	ldr	r3, [fp, #-8]
  128e78:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e7c:	e1a00003 	mov	r0, r3
  128e80:	eb000b48 	bl	12bba8 <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  128e84:	e51b100c 	ldr	r1, [fp, #-12]
  128e88:	e51b0008 	ldr	r0, [fp, #-8]
  128e8c:	ebff75e4 	bl	106624 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  128e90:	e3a03000 	mov	r3, #0
}
  128e94:	e1a00003 	mov	r0, r3
  128e98:	e24bd004 	sub	sp, fp, #4
  128e9c:	e8bd8800 	pop	{fp, pc}

00128ea0 <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  128ea0:	e92d4800 	push	{fp, lr}
  128ea4:	e28db004 	add	fp, sp, #4
  128ea8:	e24dd070 	sub	sp, sp, #112	; 0x70
  128eac:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  128eb0:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  128eb4:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  128eb8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  128ebc:	e3a03000 	mov	r3, #0
  128ec0:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  128ec4:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  128ec8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128ecc:	e3413062 	movt	r3, #4194	; 0x1062
  128ed0:	e0832392 	umull	r2, r3, r2, r3
  128ed4:	e1a03323 	lsr	r3, r3, #6
  128ed8:	e1a02003 	mov	r2, r3
  128edc:	e3a03000 	mov	r3, #0
  128ee0:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  128ee4:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  128ee8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128eec:	e3413062 	movt	r3, #4194	; 0x1062
  128ef0:	e0832391 	umull	r2, r3, r1, r3
  128ef4:	e1a03323 	lsr	r3, r3, #6
  128ef8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  128efc:	e0030392 	mul	r3, r2, r3
  128f00:	e0413003 	sub	r3, r1, r3
  128f04:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  128f08:	e3a03000 	mov	r3, #0
  128f0c:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  128f10:	e3a03000 	mov	r3, #0
  128f14:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  128f18:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  128f1c:	e3530000 	cmp	r3, #0
  128f20:	1a000005 	bne	128f3c <lwip_netdev_ping+0x9c>
  128f24:	e3a020ca 	mov	r2, #202	; 0xca
  128f28:	e30819ec 	movw	r1, #35308	; 0x89ec
  128f2c:	e3401014 	movt	r1, #20
  128f30:	e30808dc 	movw	r0, #35036	; 0x88dc
  128f34:	e3400014 	movt	r0, #20
  128f38:	ebff6996 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  128f3c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  128f40:	e3530000 	cmp	r3, #0
  128f44:	1a000005 	bne	128f60 <lwip_netdev_ping+0xc0>
  128f48:	e3a020cb 	mov	r2, #203	; 0xcb
  128f4c:	e30819ec 	movw	r1, #35308	; 0x89ec
  128f50:	e3401014 	movt	r1, #20
  128f54:	e30808e4 	movw	r0, #35044	; 0x88e4
  128f58:	e3400014 	movt	r0, #20
  128f5c:	ebff698d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  128f60:	e59b3004 	ldr	r3, [fp, #4]
  128f64:	e3530000 	cmp	r3, #0
  128f68:	1a000005 	bne	128f84 <lwip_netdev_ping+0xe4>
  128f6c:	e3a020cc 	mov	r2, #204	; 0xcc
  128f70:	e30819ec 	movw	r1, #35308	; 0x89ec
  128f74:	e3401014 	movt	r1, #20
  128f78:	e30808ec 	movw	r0, #35052	; 0x88ec
  128f7c:	e3400014 	movt	r0, #20
  128f80:	ebff6984 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  128f84:	e24b3050 	sub	r3, fp, #80	; 0x50
  128f88:	e3a02020 	mov	r2, #32
  128f8c:	e3a01000 	mov	r1, #0
  128f90:	e1a00003 	mov	r0, r3
  128f94:	ebff68cb 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  128f98:	e24b3054 	sub	r3, fp, #84	; 0x54
  128f9c:	e24b2050 	sub	r2, fp, #80	; 0x50
  128fa0:	e3a01000 	mov	r1, #0
  128fa4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  128fa8:	ebff9d35 	bl	110484 <lwip_getaddrinfo>
  128fac:	e1a03000 	mov	r3, r0
  128fb0:	e3530000 	cmp	r3, #0
  128fb4:	0a000001 	beq	128fc0 <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  128fb8:	e3e03000 	mvn	r3, #0
  128fbc:	ea000064 	b	129154 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  128fc0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  128fc4:	e2831014 	add	r1, r3, #20
  128fc8:	e24b3058 	sub	r3, fp, #88	; 0x58
  128fcc:	e3a02004 	mov	r2, #4
  128fd0:	e1a00003 	mov	r0, r3
  128fd4:	ebff68c9 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  128fd8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  128fdc:	e2831004 	add	r1, r3, #4
  128fe0:	e24b305c 	sub	r3, fp, #92	; 0x5c
  128fe4:	e3a02004 	mov	r2, #4
  128fe8:	e1a00003 	mov	r0, r3
  128fec:	ebff68c3 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  128ff0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  128ff4:	e1a00003 	mov	r0, r3
  128ff8:	ebff9d0e 	bl	110438 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  128ffc:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129000:	e1a00003 	mov	r0, r3
  129004:	eb0025f0 	bl	1327cc <ip4addr_ntoa>
  129008:	e1a02000 	mov	r2, r0
  12900c:	e24b3030 	sub	r3, fp, #48	; 0x30
  129010:	e1a01003 	mov	r1, r3
  129014:	e1a00002 	mov	r0, r2
  129018:	eb0024e7 	bl	1323bc <ip4addr_aton>
  12901c:	e1a03000 	mov	r3, r0
  129020:	e3530000 	cmp	r3, #0
  129024:	1a000001 	bne	129030 <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  129028:	e3e03000 	mvn	r3, #0
  12902c:	ea000048 	b	129154 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  129030:	e59b3004 	ldr	r3, [fp, #4]
  129034:	e24b1030 	sub	r1, fp, #48	; 0x30
  129038:	e3a02004 	mov	r2, #4
  12903c:	e1a00003 	mov	r0, r3
  129040:	ebff68ae 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  129044:	e3a02001 	mov	r2, #1
  129048:	e3a01003 	mov	r1, #3
  12904c:	e3a00002 	mov	r0, #2
  129050:	ebffa658 	bl	1129b8 <lwip_socket>
  129054:	e50b000c 	str	r0, [fp, #-12]
  129058:	e51b300c 	ldr	r3, [fp, #-12]
  12905c:	e3530000 	cmp	r3, #0
  129060:	aa000001 	bge	12906c <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  129064:	e3e03000 	mvn	r3, #0
  129068:	ea000039 	b	129154 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  12906c:	e24b202c 	sub	r2, fp, #44	; 0x2c
  129070:	e3a03010 	mov	r3, #16
  129074:	e58d3000 	str	r3, [sp]
  129078:	e1a03002 	mov	r3, r2
  12907c:	e3012006 	movw	r2, #4102	; 0x1006
  129080:	e3001fff 	movw	r1, #4095	; 0xfff
  129084:	e51b000c 	ldr	r0, [fp, #-12]
  129088:	ebffae28 	bl	114930 <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  12908c:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  129090:	e24b3030 	sub	r3, fp, #48	; 0x30
  129094:	e1a01003 	mov	r1, r3
  129098:	e51b000c 	ldr	r0, [fp, #-12]
  12909c:	eb002c05 	bl	1340b8 <lwip_ping_send>
  1290a0:	e1a03000 	mov	r3, r0
  1290a4:	e3530000 	cmp	r3, #0
  1290a8:	1a000023 	bne	12913c <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  1290ac:	ebff636b 	bl	101e60 <rt_tick_get>
  1290b0:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  1290b4:	e24b301c 	sub	r3, fp, #28
  1290b8:	e1a01003 	mov	r1, r3
  1290bc:	e51b000c 	ldr	r0, [fp, #-12]
  1290c0:	eb002c3a 	bl	1341b0 <lwip_ping_recv>
  1290c4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1290c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290cc:	e3530000 	cmp	r3, #0
  1290d0:	ba000016 	blt	129130 <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  1290d4:	ebff6361 	bl	101e60 <rt_tick_get>
  1290d8:	e1a02000 	mov	r2, r0
  1290dc:	e51b3010 	ldr	r3, [fp, #-16]
  1290e0:	e0423003 	sub	r3, r2, r3
  1290e4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1290e8:	e0020392 	mul	r2, r2, r3
  1290ec:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1290f0:	e3413062 	movt	r3, #4194	; 0x1062
  1290f4:	e0832392 	umull	r2, r3, r2, r3
  1290f8:	e1a03323 	lsr	r3, r3, #6
  1290fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  129100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129104:	e6ff2073 	uxth	r2, r3
  129108:	e59b3004 	ldr	r3, [fp, #4]
  12910c:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  129110:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129114:	e6ff2073 	uxth	r2, r3
  129118:	e59b3004 	ldr	r3, [fp, #4]
  12911c:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  129120:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129124:	e59b3004 	ldr	r3, [fp, #4]
  129128:	e5832008 	str	r2, [r3, #8]
  12912c:	ea000005 	b	129148 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  129130:	e3e03001 	mvn	r3, #1
  129134:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  129138:	ea000002 	b	129148 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  12913c:	e3e03001 	mvn	r3, #1
  129140:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  129144:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  129148:	e51b000c 	ldr	r0, [fp, #-12]
  12914c:	ebffa103 	bl	111560 <lwip_close>

    return result;
  129150:	e51b3008 	ldr	r3, [fp, #-8]
}
  129154:	e1a00003 	mov	r0, r3
  129158:	e24bd004 	sub	sp, fp, #4
  12915c:	e8bd8800 	pop	{fp, pc}

00129160 <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  129160:	e92d4800 	push	{fp, lr}
  129164:	e28db004 	add	fp, sp, #4
  129168:	e24dd008 	sub	sp, sp, #8
  12916c:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  129170:	e51b3008 	ldr	r3, [fp, #-8]
  129174:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129178:	e1a00003 	mov	r0, r3
  12917c:	ebffc13a 	bl	11966c <netif_set_default>
    return ERR_OK;
  129180:	e3a03000 	mov	r3, #0
}
  129184:	e1a00003 	mov	r0, r3
  129188:	e24bd004 	sub	sp, fp, #4
  12918c:	e8bd8800 	pop	{fp, pc}

00129190 <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  129190:	e92d4800 	push	{fp, lr}
  129194:	e28db004 	add	fp, sp, #4
  129198:	e24dd018 	sub	sp, sp, #24
  12919c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  1291a0:	e3a03000 	mov	r3, #0
  1291a4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1291a8:	e3a03000 	mov	r3, #0
  1291ac:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  1291b0:	e24b3010 	sub	r3, fp, #16
  1291b4:	e3a02000 	mov	r2, #0
  1291b8:	e1c320b0 	strh	r2, [r3]
  1291bc:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  1291c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1291c4:	e3530000 	cmp	r3, #0
  1291c8:	1a000005 	bne	1291e4 <netdev_add+0x54>
  1291cc:	e3002141 	movw	r2, #321	; 0x141
  1291d0:	e3081a00 	movw	r1, #35328	; 0x8a00
  1291d4:	e3401014 	movt	r1, #20
  1291d8:	e3080918 	movw	r0, #35096	; 0x8918
  1291dc:	e3400014 	movt	r0, #20
  1291e0:	ebff68ec 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  1291e4:	e3a01044 	mov	r1, #68	; 0x44
  1291e8:	e3a00001 	mov	r0, #1
  1291ec:	ebff6786 	bl	10300c <rt_calloc>
  1291f0:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  1291f4:	e51b300c 	ldr	r3, [fp, #-12]
  1291f8:	e3530000 	cmp	r3, #0
  1291fc:	1a000001 	bne	129208 <netdev_add+0x78>
    {
        return -ERR_IF;
  129200:	e3a0300c 	mov	r3, #12
  129204:	ea000036 	b	1292e4 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  129208:	e51b000c 	ldr	r0, [fp, #-12]
  12920c:	ebff6dd0 	bl	104954 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129214:	e2831042 	add	r1, r3, #66	; 0x42
  129218:	e24b3010 	sub	r3, fp, #16
  12921c:	e3a02002 	mov	r2, #2
  129220:	e1a00003 	mov	r0, r3
  129224:	ebff680d 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  129228:	e24b3010 	sub	r3, fp, #16
  12922c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129230:	e1a01003 	mov	r1, r3
  129234:	e51b000c 	ldr	r0, [fp, #-12]
  129238:	ebff6f90 	bl	105080 <netdev_register>
  12923c:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  129240:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129244:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129248:	e6ff2073 	uxth	r2, r3
  12924c:	e51b300c 	ldr	r3, [fp, #-12]
  129250:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  129254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129258:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12925c:	e51b300c 	ldr	r3, [fp, #-12]
  129260:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  129264:	e51b200c 	ldr	r2, [fp, #-12]
  129268:	e30838f8 	movw	r3, #35064	; 0x88f8
  12926c:	e3403014 	movt	r3, #20
  129270:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  129274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129278:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  12927c:	e51b300c 	ldr	r3, [fp, #-12]
  129280:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  129284:	e51b300c 	ldr	r3, [fp, #-12]
  129288:	e2830021 	add	r0, r3, #33	; 0x21
  12928c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129290:	e283103b 	add	r1, r3, #59	; 0x3b
  129294:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129298:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12929c:	e1a02003 	mov	r2, r3
  1292a0:	ebff6816 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  1292a4:	e51b300c 	ldr	r3, [fp, #-12]
  1292a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1292ac:	e5922004 	ldr	r2, [r2, #4]
  1292b0:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  1292b4:	e51b300c 	ldr	r3, [fp, #-12]
  1292b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1292bc:	e592200c 	ldr	r2, [r2, #12]
  1292c0:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  1292c4:	e51b300c 	ldr	r3, [fp, #-12]
  1292c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1292cc:	e5922008 	ldr	r2, [r2, #8]
  1292d0:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  1292d4:	e3a01001 	mov	r1, #1
  1292d8:	e51b000c 	ldr	r0, [fp, #-12]
  1292dc:	ebff74d0 	bl	106624 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  1292e0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1292e4:	e1a00003 	mov	r0, r3
  1292e8:	e24bd004 	sub	sp, fp, #4
  1292ec:	e8bd8800 	pop	{fp, pc}

001292f0 <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  1292f0:	e92d4800 	push	{fp, lr}
  1292f4:	e28db004 	add	fp, sp, #4
  1292f8:	e24dd010 	sub	sp, sp, #16
  1292fc:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  129300:	e51b3010 	ldr	r3, [fp, #-16]
  129304:	e3530000 	cmp	r3, #0
  129308:	1a000005 	bne	129324 <netdev_del+0x34>
  12930c:	e300216b 	movw	r2, #363	; 0x16b
  129310:	e3081a0c 	movw	r1, #35340	; 0x8a0c
  129314:	e3401014 	movt	r1, #20
  129318:	e3080918 	movw	r0, #35096	; 0x8918
  12931c:	e3400014 	movt	r0, #20
  129320:	ebff689c 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129324:	e51b3010 	ldr	r3, [fp, #-16]
  129328:	e2831042 	add	r1, r3, #66	; 0x42
  12932c:	e24b300c 	sub	r3, fp, #12
  129330:	e3a02002 	mov	r2, #2
  129334:	e1a00003 	mov	r0, r3
  129338:	ebff67c8 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  12933c:	e24b300c 	sub	r3, fp, #12
  129340:	e1a00003 	mov	r0, r3
  129344:	ebff7071 	bl	105510 <netdev_get_by_name>
  129348:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  12934c:	e51b0008 	ldr	r0, [fp, #-8]
  129350:	ebff6fb5 	bl	10522c <netdev_unregister>
    rt_free(netdev);
  129354:	e51b0008 	ldr	r0, [fp, #-8]
  129358:	ebff6717 	bl	102fbc <rt_free>
}
  12935c:	e320f000 	nop	{0}
  129360:	e24bd004 	sub	sp, fp, #4
  129364:	e8bd8800 	pop	{fp, pc}

00129368 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  129368:	e92d4800 	push	{fp, lr}
  12936c:	e28db004 	add	fp, sp, #4
  129370:	e24dd010 	sub	sp, sp, #16
  129374:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  129378:	e3a03000 	mov	r3, #0
  12937c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  129380:	e51b3010 	ldr	r3, [fp, #-16]
  129384:	e3530000 	cmp	r3, #0
  129388:	1a000005 	bne	1293a4 <netdev_flags_sync+0x3c>
  12938c:	e3a02f5e 	mov	r2, #376	; 0x178
  129390:	e3081a18 	movw	r1, #35352	; 0x8a18
  129394:	e3401014 	movt	r1, #20
  129398:	e3080918 	movw	r0, #35096	; 0x8918
  12939c:	e3400014 	movt	r0, #20
  1293a0:	ebff687c 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  1293a4:	e51b3010 	ldr	r3, [fp, #-16]
  1293a8:	e2833042 	add	r3, r3, #66	; 0x42
  1293ac:	e1a00003 	mov	r0, r3
  1293b0:	ebff7056 	bl	105510 <netdev_get_by_name>
  1293b4:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  1293b8:	e51b3008 	ldr	r3, [fp, #-8]
  1293bc:	e3530000 	cmp	r3, #0
  1293c0:	1a000001 	bne	1293cc <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  1293c4:	e3a0300c 	mov	r3, #12
  1293c8:	ea00000d 	b	129404 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  1293cc:	e51b3010 	ldr	r3, [fp, #-16]
  1293d0:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  1293d4:	e51b3008 	ldr	r3, [fp, #-8]
  1293d8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  1293dc:	e51b3008 	ldr	r3, [fp, #-8]
  1293e0:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  1293e4:	e51b3010 	ldr	r3, [fp, #-16]
  1293e8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1293ec:	e6ff3073 	uxth	r3, r3
  1293f0:	e1823003 	orr	r3, r2, r3
  1293f4:	e6ff2073 	uxth	r2, r3
  1293f8:	e51b3008 	ldr	r3, [fp, #-8]
  1293fc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  129400:	e3a03000 	mov	r3, #0
}
  129404:	e1a00003 	mov	r0, r3
  129408:	e24bd004 	sub	sp, fp, #4
  12940c:	e8bd8800 	pop	{fp, pc}

00129410 <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  129410:	e92d4800 	push	{fp, lr}
  129414:	e28db004 	add	fp, sp, #4
  129418:	e24dd010 	sub	sp, sp, #16
  12941c:	e50b0010 	str	r0, [fp, #-16]
  129420:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  129424:	e51b3010 	ldr	r3, [fp, #-16]
  129428:	e3530000 	cmp	r3, #0
  12942c:	1a000005 	bne	129448 <ethernetif_linkoutput+0x38>
  129430:	e30021a5 	movw	r2, #421	; 0x1a5
  129434:	e3081a2c 	movw	r1, #35372	; 0x8a2c
  129438:	e3401014 	movt	r1, #20
  12943c:	e3080924 	movw	r0, #35108	; 0x8924
  129440:	e3400014 	movt	r0, #20
  129444:	ebff6853 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  129448:	e51b3010 	ldr	r3, [fp, #-16]
  12944c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129450:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  129454:	e51b3008 	ldr	r3, [fp, #-8]
  129458:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12945c:	e51b2008 	ldr	r2, [fp, #-8]
  129460:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129464:	e1a00002 	mov	r0, r2
  129468:	e12fff33 	blx	r3
  12946c:	e1a03000 	mov	r3, r0
  129470:	e3530000 	cmp	r3, #0
  129474:	0a000001 	beq	129480 <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  129478:	e3e0300b 	mvn	r3, #11
  12947c:	ea000000 	b	129484 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  129480:	e3a03000 	mov	r3, #0
}
  129484:	e1a00003 	mov	r0, r3
  129488:	e24bd004 	sub	sp, fp, #4
  12948c:	e8bd8800 	pop	{fp, pc}

00129490 <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  129490:	e92d4800 	push	{fp, lr}
  129494:	e28db004 	add	fp, sp, #4
  129498:	e24dd010 	sub	sp, sp, #16
  12949c:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  1294a0:	e51b3010 	ldr	r3, [fp, #-16]
  1294a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1294a8:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  1294ac:	e51b3008 	ldr	r3, [fp, #-8]
  1294b0:	e3530000 	cmp	r3, #0
  1294b4:	0a000032 	beq	129584 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  1294b8:	e51b0010 	ldr	r0, [fp, #-16]
  1294bc:	ebffff33 	bl	129190 <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  1294c0:	e51b3008 	ldr	r3, [fp, #-8]
  1294c4:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  1294c8:	e51b000c 	ldr	r0, [fp, #-12]
  1294cc:	ebff6df0 	bl	104c94 <ueth_device_init>
  1294d0:	e1a03000 	mov	r3, r0
  1294d4:	e3530000 	cmp	r3, #0
  1294d8:	0a000001 	beq	1294e4 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  1294dc:	e3e0300b 	mvn	r3, #11
  1294e0:	ea000028 	b	129588 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  1294e4:	e51b3008 	ldr	r3, [fp, #-8]
  1294e8:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  1294ec:	e6ef2073 	uxtb	r2, r3
  1294f0:	e51b3010 	ldr	r3, [fp, #-16]
  1294f4:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  1294f8:	e51b3010 	ldr	r3, [fp, #-16]
  1294fc:	e30025dc 	movw	r2, #1500	; 0x5dc
  129500:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  129504:	e51b2010 	ldr	r2, [fp, #-16]
  129508:	e30e364c 	movw	r3, #58956	; 0xe64c
  12950c:	e3403012 	movt	r3, #18
  129510:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129514:	e30c3a10 	movw	r3, #51728	; 0xca10
  129518:	e3403015 	movt	r3, #21
  12951c:	e5933000 	ldr	r3, [r3]
  129520:	e3530000 	cmp	r3, #0
  129524:	1a000003 	bne	129538 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  129528:	e51b3008 	ldr	r3, [fp, #-8]
  12952c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129530:	e1a00003 	mov	r0, r3
  129534:	ebffc04c 	bl	11966c <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  129538:	e51b3008 	ldr	r3, [fp, #-8]
  12953c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129540:	e1a00003 	mov	r0, r3
  129544:	ebffc054 	bl	11969c <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  129548:	e51b3008 	ldr	r3, [fp, #-8]
  12954c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129550:	e1a00003 	mov	r0, r3
  129554:	eb00051b 	bl	12a9c8 <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  129558:	e51b3008 	ldr	r3, [fp, #-8]
  12955c:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129560:	e2033c01 	and	r3, r3, #256	; 0x100
  129564:	e3530000 	cmp	r3, #0
  129568:	0a000003 	beq	12957c <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  12956c:	e51b3008 	ldr	r3, [fp, #-8]
  129570:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129574:	e1a00003 	mov	r0, r3
  129578:	ebffc0dc 	bl	1198f0 <netif_set_link_up>
        }
        return ERR_OK;
  12957c:	e3a03000 	mov	r3, #0
  129580:	ea000000 	b	129588 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  129584:	e3e0300b 	mvn	r3, #11
}
  129588:	e1a00003 	mov	r0, r3
  12958c:	e24bd004 	sub	sp, fp, #4
  129590:	e8bd8800 	pop	{fp, pc}

00129594 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  129594:	e92d4800 	push	{fp, lr}
  129598:	e28db004 	add	fp, sp, #4
  12959c:	e24dd038 	sub	sp, sp, #56	; 0x38
  1295a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1295a4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1295a8:	e1a03002 	mov	r3, r2
  1295ac:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  1295b0:	e3a03000 	mov	r3, #0
  1295b4:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  1295b8:	e3a01098 	mov	r1, #152	; 0x98
  1295bc:	e3a00001 	mov	r0, #1
  1295c0:	ebff6691 	bl	10300c <rt_calloc>
  1295c4:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  1295c8:	e51b300c 	ldr	r3, [fp, #-12]
  1295cc:	e3530000 	cmp	r3, #0
  1295d0:	1a000004 	bne	1295e8 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  1295d4:	e3080938 	movw	r0, #35128	; 0x8938
  1295d8:	e3400014 	movt	r0, #20
  1295dc:	ebff66cc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1295e0:	e3e03000 	mvn	r3, #0
  1295e4:	ea00005b 	b	129758 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  1295e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295ec:	e51b200c 	ldr	r2, [fp, #-12]
  1295f0:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  1295f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295f8:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  1295fc:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  129600:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129604:	e3a02000 	mov	r2, #0
  129608:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  12960c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129610:	e3a02002 	mov	r2, #2
  129614:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  129618:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12961c:	e3a02003 	mov	r2, #3
  129620:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129624:	e1a00003 	mov	r0, r3
  129628:	ebff6d0c 	bl	104a60 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  12962c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129630:	e2830048 	add	r0, r3, #72	; 0x48
  129634:	e3a03000 	mov	r3, #0
  129638:	e3a02000 	mov	r2, #0
  12963c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129640:	ebff5e91 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  129644:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129648:	e5d32000 	ldrb	r2, [r3]
  12964c:	e51b300c 	ldr	r3, [fp, #-12]
  129650:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  129654:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129658:	e5d32001 	ldrb	r2, [r3, #1]
  12965c:	e51b300c 	ldr	r3, [fp, #-12]
  129660:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  129664:	e51b300c 	ldr	r3, [fp, #-12]
  129668:	e3a02006 	mov	r2, #6
  12966c:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  129670:	e51b300c 	ldr	r3, [fp, #-12]
  129674:	e30025dc 	movw	r2, #1500	; 0x5dc
  129678:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  12967c:	e51b200c 	ldr	r2, [fp, #-12]
  129680:	e3093410 	movw	r3, #37904	; 0x9410
  129684:	e3403012 	movt	r3, #18
  129688:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  12968c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129690:	e51b300c 	ldr	r3, [fp, #-12]
  129694:	e283303b 	add	r3, r3, #59	; 0x3b
  129698:	e1a02003 	mov	r2, r3
  12969c:	e3a01001 	mov	r1, #1
  1296a0:	ebff6dfb 	bl	104e94 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  1296a4:	e51b300c 	ldr	r3, [fp, #-12]
  1296a8:	e2833088 	add	r3, r3, #136	; 0x88
  1296ac:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  1296b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1296b4:	e5d33000 	ldrb	r3, [r3]
  1296b8:	e1a02003 	mov	r2, r3
  1296bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1296c0:	e2833001 	add	r3, r3, #1
  1296c4:	e5d33000 	ldrb	r3, [r3]
  1296c8:	e3081950 	movw	r1, #35152	; 0x8950
  1296cc:	e3401014 	movt	r1, #20
  1296d0:	e51b0008 	ldr	r0, [fp, #-8]
  1296d4:	ebff666c 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  1296d8:	e51b300c 	ldr	r3, [fp, #-12]
  1296dc:	e51b2008 	ldr	r2, [fp, #-8]
  1296e0:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  1296e4:	e3080964 	movw	r0, #35172	; 0x8964
  1296e8:	e3400014 	movt	r0, #20
  1296ec:	ebff6261 	bl	102078 <rt_thread_find>
  1296f0:	e1a03000 	mov	r3, r0
  1296f4:	e3530000 	cmp	r3, #0
  1296f8:	0a000013 	beq	12974c <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  1296fc:	e3a03000 	mov	r3, #0
  129700:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  129704:	e3a03000 	mov	r3, #0
  129708:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  12970c:	e3a03000 	mov	r3, #0
  129710:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129714:	e24b0018 	sub	r0, fp, #24
  129718:	e24b2014 	sub	r2, fp, #20
  12971c:	e24b1010 	sub	r1, fp, #16
  129720:	e3053e3c 	movw	r3, #24124	; 0x5e3c
  129724:	e3403011 	movt	r3, #17
  129728:	e58d3008 	str	r3, [sp, #8]
  12972c:	e3093490 	movw	r3, #38032	; 0x9490
  129730:	e3403012 	movt	r3, #18
  129734:	e58d3004 	str	r3, [sp, #4]
  129738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12973c:	e58d3000 	str	r3, [sp]
  129740:	e1a03000 	mov	r3, r0
  129744:	e51b000c 	ldr	r0, [fp, #-12]
  129748:	ebff9c86 	bl	110968 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  12974c:	e51b000c 	ldr	r0, [fp, #-12]
  129750:	ebffff04 	bl	129368 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  129754:	e3a03000 	mov	r3, #0
}
  129758:	e1a00003 	mov	r0, r3
  12975c:	e24bd004 	sub	sp, fp, #4
  129760:	e8bd8800 	pop	{fp, pc}

00129764 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  129764:	e92d4800 	push	{fp, lr}
  129768:	e28db004 	add	fp, sp, #4
  12976c:	e24dd010 	sub	sp, sp, #16
  129770:	e50b0010 	str	r0, [fp, #-16]
  129774:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  129778:	e3a0300a 	mov	r3, #10
  12977c:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129780:	e15b30b6 	ldrh	r3, [fp, #-6]
  129784:	e3833020 	orr	r3, r3, #32
  129788:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  12978c:	e15b30b6 	ldrh	r3, [fp, #-6]
  129790:	e1a02003 	mov	r2, r3
  129794:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129798:	e51b0010 	ldr	r0, [fp, #-16]
  12979c:	ebffff7c 	bl	129594 <eth_device_init_with_flag>
  1297a0:	e1a03000 	mov	r3, r0
}
  1297a4:	e1a00003 	mov	r0, r3
  1297a8:	e24bd004 	sub	sp, fp, #4
  1297ac:	e8bd8800 	pop	{fp, pc}

001297b0 <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  1297b0:	e92d4800 	push	{fp, lr}
  1297b4:	e28db004 	add	fp, sp, #4
  1297b8:	e24dd010 	sub	sp, sp, #16
  1297bc:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  1297c0:	e51b3010 	ldr	r3, [fp, #-16]
  1297c4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1297c8:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  1297cc:	e51b0008 	ldr	r0, [fp, #-8]
  1297d0:	eb0008f4 	bl	12bba8 <dhcp_stop>
    dhcp_cleanup(netif);
  1297d4:	e51b0008 	ldr	r0, [fp, #-8]
  1297d8:	eb00045e 	bl	12a958 <dhcp_cleanup>
#endif
    netif_set_down(netif);
  1297dc:	e51b0008 	ldr	r0, [fp, #-8]
  1297e0:	ebffc002 	bl	1197f0 <netif_set_down>
    netif_remove(netif);
  1297e4:	e51b0008 	ldr	r0, [fp, #-8]
  1297e8:	ebffbe9b 	bl	11925c <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  1297ec:	e51b0008 	ldr	r0, [fp, #-8]
  1297f0:	ebfffebe 	bl	1292f0 <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  1297f4:	e51b3010 	ldr	r3, [fp, #-16]
  1297f8:	e1a00003 	mov	r0, r3
  1297fc:	ebff6d61 	bl	104d88 <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129800:	e51b3010 	ldr	r3, [fp, #-16]
  129804:	e1a00003 	mov	r0, r3
  129808:	ebff6ce6 	bl	104ba8 <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  12980c:	e51b3010 	ldr	r3, [fp, #-16]
  129810:	e2833048 	add	r3, r3, #72	; 0x48
  129814:	e1a00003 	mov	r0, r3
  129818:	ebff5e61 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  12981c:	e51b0008 	ldr	r0, [fp, #-8]
  129820:	ebff65e5 	bl	102fbc <rt_free>
}
  129824:	e320f000 	nop	{0}
  129828:	e24bd004 	sub	sp, fp, #4
  12982c:	e8bd8800 	pop	{fp, pc}

00129830 <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  129830:	e92d4800 	push	{fp, lr}
  129834:	e28db004 	add	fp, sp, #4
  129838:	e24dd008 	sub	sp, sp, #8
  12983c:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  129840:	e51b3008 	ldr	r3, [fp, #-8]
  129844:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129848:	e3530000 	cmp	r3, #0
  12984c:	0a000006 	beq	12986c <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  129850:	e51b3008 	ldr	r3, [fp, #-8]
  129854:	e1a01003 	mov	r1, r3
  129858:	e30e068c 	movw	r0, #59020	; 0xe68c
  12985c:	e3400014 	movt	r0, #20
  129860:	ebff5f67 	bl	101604 <rt_mb_send>
  129864:	e1a03000 	mov	r3, r0
  129868:	ea000000 	b	129870 <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  12986c:	e3a03000 	mov	r3, #0
}
  129870:	e1a00003 	mov	r0, r3
  129874:	e24bd004 	sub	sp, fp, #4
  129878:	e8bd8800 	pop	{fp, pc}

0012987c <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  12987c:	e92d4800 	push	{fp, lr}
  129880:	e28db004 	add	fp, sp, #4
  129884:	e24dd010 	sub	sp, sp, #16
  129888:	e50b0010 	str	r0, [fp, #-16]
  12988c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129890:	e51b3010 	ldr	r3, [fp, #-16]
  129894:	e3530000 	cmp	r3, #0
  129898:	1a000005 	bne	1298b4 <eth_device_linkchange+0x38>
  12989c:	e3a02fc3 	mov	r2, #780	; 0x30c
  1298a0:	e3081a44 	movw	r1, #35396	; 0x8a44
  1298a4:	e3401014 	movt	r1, #20
  1298a8:	e308096c 	movw	r0, #35180	; 0x896c
  1298ac:	e3400014 	movt	r0, #20
  1298b0:	ebff6738 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  1298b4:	e51b3010 	ldr	r3, [fp, #-16]
  1298b8:	e3a02001 	mov	r2, #1
  1298bc:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  1298c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1298c4:	e3530001 	cmp	r3, #1
  1298c8:	1a000003 	bne	1298dc <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  1298cc:	e51b3010 	ldr	r3, [fp, #-16]
  1298d0:	e3a02001 	mov	r2, #1
  1298d4:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  1298d8:	ea000002 	b	1298e8 <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  1298dc:	e51b3010 	ldr	r3, [fp, #-16]
  1298e0:	e3a02000 	mov	r2, #0
  1298e4:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  1298e8:	e51b3010 	ldr	r3, [fp, #-16]
  1298ec:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  1298f0:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  1298f4:	e51b3010 	ldr	r3, [fp, #-16]
  1298f8:	e3a02000 	mov	r2, #0
  1298fc:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129900:	e51b3008 	ldr	r3, [fp, #-8]
  129904:	e3530000 	cmp	r3, #0
  129908:	0a000007 	beq	12992c <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  12990c:	e51b3010 	ldr	r3, [fp, #-16]
  129910:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129914:	e3a02000 	mov	r2, #0
  129918:	e30918f0 	movw	r1, #39152	; 0x98f0
  12991c:	e3401011 	movt	r1, #17
  129920:	e1a00003 	mov	r0, r3
  129924:	ebff9c6d 	bl	110ae0 <netifapi_netif_common>
  129928:	ea000006 	b	129948 <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  12992c:	e51b3010 	ldr	r3, [fp, #-16]
  129930:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129934:	e3a02000 	mov	r2, #0
  129938:	e30919a0 	movw	r1, #39328	; 0x99a0
  12993c:	e3401011 	movt	r1, #17
  129940:	e1a00003 	mov	r0, r3
  129944:	ebff9c65 	bl	110ae0 <netifapi_netif_common>

    return RT_EOK;
  129948:	e3a03000 	mov	r3, #0
}
  12994c:	e1a00003 	mov	r0, r3
  129950:	e24bd004 	sub	sp, fp, #4
  129954:	e8bd8800 	pop	{fp, pc}

00129958 <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  129958:	e92d4800 	push	{fp, lr}
  12995c:	e28db004 	add	fp, sp, #4
  129960:	e24dd010 	sub	sp, sp, #16
  129964:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  129968:	ea000001 	b	129974 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  12996c:	e3a0000a 	mov	r0, #10
  129970:	ebff6141 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  129974:	e30e3be8 	movw	r3, #60392	; 0xebe8
  129978:	e3403014 	movt	r3, #20
  12997c:	e5933000 	ldr	r3, [r3]
  129980:	e3530000 	cmp	r3, #0
  129984:	0afffff8 	beq	12996c <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129988:	eb002e63 	bl	13531c <ueth_rx_interrupt_detect>
  12998c:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129990:	e51b3008 	ldr	r3, [fp, #-8]
  129994:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129998:	e3530000 	cmp	r3, #0
  12999c:	0a00001a 	beq	129a0c <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  1299a0:	e51b3008 	ldr	r3, [fp, #-8]
  1299a4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1299a8:	e51b2008 	ldr	r2, [fp, #-8]
  1299ac:	e1a00002 	mov	r0, r2
  1299b0:	e12fff33 	blx	r3
  1299b4:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  1299b8:	e51b300c 	ldr	r3, [fp, #-12]
  1299bc:	e3530000 	cmp	r3, #0
  1299c0:	0a00000f 	beq	129a04 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  1299c4:	e51b3008 	ldr	r3, [fp, #-8]
  1299c8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1299cc:	e5933010 	ldr	r3, [r3, #16]
  1299d0:	e51b2008 	ldr	r2, [fp, #-8]
  1299d4:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  1299d8:	e1a01002 	mov	r1, r2
  1299dc:	e51b000c 	ldr	r0, [fp, #-12]
  1299e0:	e12fff33 	blx	r3
  1299e4:	e1a03000 	mov	r3, r0
  1299e8:	e3530000 	cmp	r3, #0
  1299ec:	0affffeb 	beq	1299a0 <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  1299f0:	e51b000c 	ldr	r0, [fp, #-12]
  1299f4:	ebffc462 	bl	11ab84 <pbuf_free>
                    p = NULL;
  1299f8:	e3a03000 	mov	r3, #0
  1299fc:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129a00:	eaffffe6 	b	1299a0 <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129a04:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129a08:	eaffffde 	b	129988 <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129a0c:	e320f000 	nop	{0}
        }
    }
}
  129a10:	e320f000 	nop	{0}
  129a14:	e24bd004 	sub	sp, fp, #4
  129a18:	e8bd8800 	pop	{fp, pc}

00129a1c <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129a1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129a20:	e28db000 	add	fp, sp, #0
    return 0;
  129a24:	e3a03000 	mov	r3, #0
}
  129a28:	e1a00003 	mov	r0, r3
  129a2c:	e28bd000 	add	sp, fp, #0
  129a30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  129a34:	e12fff1e 	bx	lr

00129a38 <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  129a38:	e92d4800 	push	{fp, lr}
  129a3c:	e28db004 	add	fp, sp, #4
  129a40:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  129a44:	e3a03000 	mov	r3, #0
  129a48:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  129a4c:	e3a03000 	mov	r3, #0
  129a50:	e58d3000 	str	r3, [sp]
  129a54:	e3a03c01 	mov	r3, #256	; 0x100
  129a58:	e30e26c0 	movw	r2, #59072	; 0xe6c0
  129a5c:	e3402014 	movt	r2, #20
  129a60:	e308197c 	movw	r1, #35196	; 0x897c
  129a64:	e3401014 	movt	r1, #20
  129a68:	e30e068c 	movw	r0, #59020	; 0xe68c
  129a6c:	e3400014 	movt	r0, #20
  129a70:	ebff5e56 	bl	1013d0 <rt_mb_init>
  129a74:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129a78:	e51b3008 	ldr	r3, [fp, #-8]
  129a7c:	e3530000 	cmp	r3, #0
  129a80:	0a000005 	beq	129a9c <eth_system_device_init_private+0x64>
  129a84:	e300238e 	movw	r2, #910	; 0x38e
  129a88:	e3081a5c 	movw	r1, #35420	; 0x8a5c
  129a8c:	e3401014 	movt	r1, #20
  129a90:	e3080984 	movw	r0, #35204	; 0x8984
  129a94:	e3400014 	movt	r0, #20
  129a98:	ebff66be 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
  129a9c:	e3a03010 	mov	r3, #16
  129aa0:	e58d3004 	str	r3, [sp, #4]
  129aa4:	e3a0300c 	mov	r3, #12
  129aa8:	e58d3000 	str	r3, [sp]
  129aac:	e3a03a02 	mov	r3, #8192	; 0x2000
  129ab0:	e3a02000 	mov	r2, #0
  129ab4:	e3091958 	movw	r1, #39256	; 0x9958
  129ab8:	e3401012 	movt	r1, #18
  129abc:	e3080998 	movw	r0, #35224	; 0x8998
  129ac0:	e3400014 	movt	r0, #20
  129ac4:	ebff618a 	bl	1020f4 <rt_thread_create>
  129ac8:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129acc:	e51b000c 	ldr	r0, [fp, #-12]
  129ad0:	ebff61bc 	bl	1021c8 <rt_thread_startup>
  129ad4:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129ad8:	e51b3008 	ldr	r3, [fp, #-8]
  129adc:	e3530000 	cmp	r3, #0
  129ae0:	0a000005 	beq	129afc <eth_system_device_init_private+0xc4>
  129ae4:	e3002393 	movw	r2, #915	; 0x393
  129ae8:	e3081a5c 	movw	r1, #35420	; 0x8a5c
  129aec:	e3401014 	movt	r1, #20
  129af0:	e3080984 	movw	r0, #35204	; 0x8984
  129af4:	e3400014 	movt	r0, #20
  129af8:	ebff66a6 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  129afc:	e3a03000 	mov	r3, #0
  129b00:	e58d3000 	str	r3, [sp]
  129b04:	e3a03c01 	mov	r3, #256	; 0x100
  129b08:	e30e228c 	movw	r2, #57996	; 0xe28c
  129b0c:	e3402014 	movt	r2, #20
  129b10:	e308199c 	movw	r1, #35228	; 0x899c
  129b14:	e3401014 	movt	r1, #20
  129b18:	e30e0258 	movw	r0, #57944	; 0xe258
  129b1c:	e3400014 	movt	r0, #20
  129b20:	ebff5e2a 	bl	1013d0 <rt_mb_init>
  129b24:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129b28:	e51b3008 	ldr	r3, [fp, #-8]
  129b2c:	e3530000 	cmp	r3, #0
  129b30:	0a000005 	beq	129b4c <eth_system_device_init_private+0x114>
  129b34:	e30023a3 	movw	r2, #931	; 0x3a3
  129b38:	e3081a5c 	movw	r1, #35420	; 0x8a5c
  129b3c:	e3401014 	movt	r1, #20
  129b40:	e3080984 	movw	r0, #35204	; 0x8984
  129b44:	e3400014 	movt	r0, #20
  129b48:	ebff6692 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  129b4c:	e51b3008 	ldr	r3, [fp, #-8]
}
  129b50:	e1a00003 	mov	r0, r3
  129b54:	e24bd004 	sub	sp, fp, #4
  129b58:	e8bd8800 	pop	{fp, pc}

00129b5c <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129b5c:	e92d4800 	push	{fp, lr}
  129b60:	e28db004 	add	fp, sp, #4
  129b64:	e24dd020 	sub	sp, sp, #32
  129b68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129b6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129b70:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129b74:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129b78:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  129b7c:	e3403015 	movt	r3, #21
  129b80:	e5933000 	ldr	r3, [r3]
  129b84:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129b88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129b8c:	eb005d85 	bl	1411a8 <strlen>
  129b90:	e1a03000 	mov	r3, r0
  129b94:	e3530002 	cmp	r3, #2
  129b98:	9a000017 	bls	129bfc <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129b9c:	e30809a4 	movw	r0, #35236	; 0x89a4
  129ba0:	e3400014 	movt	r0, #20
  129ba4:	ebff655a 	bl	103114 <rt_kprintf>
        return;
  129ba8:	ea000041 	b	129cb4 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129bac:	e51b3008 	ldr	r3, [fp, #-8]
  129bb0:	e2833042 	add	r3, r3, #66	; 0x42
  129bb4:	e3a02002 	mov	r2, #2
  129bb8:	e1a01003 	mov	r1, r3
  129bbc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129bc0:	eb005da4 	bl	141258 <strncmp>
  129bc4:	e1a03000 	mov	r3, r0
  129bc8:	e3530000 	cmp	r3, #0
  129bcc:	0a00000e 	beq	129c0c <set_if+0xb0>
            break;

        netif = netif->next;
  129bd0:	e51b3008 	ldr	r3, [fp, #-8]
  129bd4:	e5933000 	ldr	r3, [r3]
  129bd8:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129bdc:	e51b3008 	ldr	r3, [fp, #-8]
  129be0:	e3530000 	cmp	r3, #0
  129be4:	1a000004 	bne	129bfc <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129be8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129bec:	e30809c8 	movw	r0, #35272	; 0x89c8
  129bf0:	e3400014 	movt	r0, #20
  129bf4:	ebff6546 	bl	103114 <rt_kprintf>
            return;
  129bf8:	ea00002d 	b	129cb4 <set_if+0x158>
    while(netif != RT_NULL)
  129bfc:	e51b3008 	ldr	r3, [fp, #-8]
  129c00:	e3530000 	cmp	r3, #0
  129c04:	1affffe8 	bne	129bac <set_if+0x50>
  129c08:	ea000000 	b	129c10 <set_if+0xb4>
            break;
  129c0c:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129c10:	e24b3010 	sub	r3, fp, #16
  129c14:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129c1c:	e3530000 	cmp	r3, #0
  129c20:	0a000009 	beq	129c4c <set_if+0xf0>
  129c24:	e24b3010 	sub	r3, fp, #16
  129c28:	e1a01003 	mov	r1, r3
  129c2c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129c30:	eb0021e1 	bl	1323bc <ip4addr_aton>
  129c34:	e1a03000 	mov	r3, r0
  129c38:	e3530000 	cmp	r3, #0
  129c3c:	0a000002 	beq	129c4c <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129c40:	e51b100c 	ldr	r1, [fp, #-12]
  129c44:	e51b0008 	ldr	r0, [fp, #-8]
  129c48:	ebffbe0e 	bl	119488 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129c4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129c50:	e3530000 	cmp	r3, #0
  129c54:	0a000009 	beq	129c80 <set_if+0x124>
  129c58:	e24b3010 	sub	r3, fp, #16
  129c5c:	e1a01003 	mov	r1, r3
  129c60:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129c64:	eb0021d4 	bl	1323bc <ip4addr_aton>
  129c68:	e1a03000 	mov	r3, r0
  129c6c:	e3530000 	cmp	r3, #0
  129c70:	0a000002 	beq	129c80 <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129c74:	e51b100c 	ldr	r1, [fp, #-12]
  129c78:	e51b0008 	ldr	r0, [fp, #-8]
  129c7c:	ebffbe48 	bl	1195a4 <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129c80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129c84:	e3530000 	cmp	r3, #0
  129c88:	0a000009 	beq	129cb4 <set_if+0x158>
  129c8c:	e24b3010 	sub	r3, fp, #16
  129c90:	e1a01003 	mov	r1, r3
  129c94:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129c98:	eb0021c7 	bl	1323bc <ip4addr_aton>
  129c9c:	e1a03000 	mov	r3, r0
  129ca0:	e3530000 	cmp	r3, #0
  129ca4:	0a000002 	beq	129cb4 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129ca8:	e51b100c 	ldr	r1, [fp, #-12]
  129cac:	e51b0008 	ldr	r0, [fp, #-8]
  129cb0:	ebffbe54 	bl	119608 <netif_set_netmask>
    }
}
  129cb4:	e24bd004 	sub	sp, fp, #4
  129cb8:	e8bd8800 	pop	{fp, pc}

00129cbc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129cbc:	e92d4800 	push	{fp, lr}
  129cc0:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129cc4:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129cc8:	e3403014 	movt	r3, #20
  129ccc:	e5d33000 	ldrb	r3, [r3]
  129cd0:	e3530000 	cmp	r3, #0
  129cd4:	1a000039 	bne	129dc0 <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  129cd8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129cdc:	e3403014 	movt	r3, #20
  129ce0:	e5933000 	ldr	r3, [r3]
  129ce4:	e3530000 	cmp	r3, #0
  129ce8:	0a000006 	beq	129d08 <dhcp_inc_pcb_refcount+0x4c>
  129cec:	e3080a7c 	movw	r0, #35452	; 0x8a7c
  129cf0:	e3400014 	movt	r0, #20
  129cf4:	ebff6506 	bl	103114 <rt_kprintf>
  129cf8:	e3a010db 	mov	r1, #219	; 0xdb
  129cfc:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  129d00:	e3400014 	movt	r0, #20
  129d04:	ebff8422 	bl	10ad94 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  129d08:	ebfffaa1 	bl	128794 <udp_new>
  129d0c:	e1a02000 	mov	r2, r0
  129d10:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d14:	e3403014 	movt	r3, #20
  129d18:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  129d1c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d20:	e3403014 	movt	r3, #20
  129d24:	e5933000 	ldr	r3, [r3]
  129d28:	e3530000 	cmp	r3, #0
  129d2c:	1a000001 	bne	129d38 <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  129d30:	e3e03000 	mvn	r3, #0
  129d34:	ea00002a 	b	129de4 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  129d38:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d3c:	e3403014 	movt	r3, #20
  129d40:	e5933000 	ldr	r3, [r3]
  129d44:	e5d32008 	ldrb	r2, [r3, #8]
  129d48:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d4c:	e3403014 	movt	r3, #20
  129d50:	e5933000 	ldr	r3, [r3]
  129d54:	e3822020 	orr	r2, r2, #32
  129d58:	e6ef2072 	uxtb	r2, r2
  129d5c:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  129d60:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d64:	e3403014 	movt	r3, #20
  129d68:	e5933000 	ldr	r3, [r3]
  129d6c:	e3a02044 	mov	r2, #68	; 0x44
  129d70:	e309163c 	movw	r1, #38460	; 0x963c
  129d74:	e3401014 	movt	r1, #20
  129d78:	e1a00003 	mov	r0, r3
  129d7c:	ebfff969 	bl	128328 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  129d80:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d84:	e3403014 	movt	r3, #20
  129d88:	e5933000 	ldr	r3, [r3]
  129d8c:	e3a02043 	mov	r2, #67	; 0x43
  129d90:	e309163c 	movw	r1, #38460	; 0x963c
  129d94:	e3401014 	movt	r1, #20
  129d98:	e1a00003 	mov	r0, r3
  129d9c:	ebfff9d7 	bl	128500 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  129da0:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129da4:	e3403014 	movt	r3, #20
  129da8:	e5933000 	ldr	r3, [r3]
  129dac:	e3a02000 	mov	r2, #0
  129db0:	e30c1a24 	movw	r1, #51748	; 0xca24
  129db4:	e3401012 	movt	r1, #18
  129db8:	e1a00003 	mov	r0, r3
  129dbc:	ebfffa33 	bl	128690 <udp_recv>
  }

  dhcp_pcb_refcount++;
  129dc0:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129dc4:	e3403014 	movt	r3, #20
  129dc8:	e5d33000 	ldrb	r3, [r3]
  129dcc:	e2833001 	add	r3, r3, #1
  129dd0:	e6ef2073 	uxtb	r2, r3
  129dd4:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129dd8:	e3403014 	movt	r3, #20
  129ddc:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  129de0:	e3a03000 	mov	r3, #0
}
  129de4:	e1a00003 	mov	r0, r3
  129de8:	e8bd8800 	pop	{fp, pc}

00129dec <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  129dec:	e92d4800 	push	{fp, lr}
  129df0:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  129df4:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129df8:	e3403014 	movt	r3, #20
  129dfc:	e5d33000 	ldrb	r3, [r3]
  129e00:	e3530000 	cmp	r3, #0
  129e04:	1a000006 	bne	129e24 <dhcp_dec_pcb_refcount+0x38>
  129e08:	e3080ad8 	movw	r0, #35544	; 0x8ad8
  129e0c:	e3400014 	movt	r0, #20
  129e10:	ebff64bf 	bl	103114 <rt_kprintf>
  129e14:	e3a010f5 	mov	r1, #245	; 0xf5
  129e18:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  129e1c:	e3400014 	movt	r0, #20
  129e20:	ebff83db 	bl	10ad94 <sys_arch_assert>
  dhcp_pcb_refcount--;
  129e24:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129e28:	e3403014 	movt	r3, #20
  129e2c:	e5d33000 	ldrb	r3, [r3]
  129e30:	e2433001 	sub	r3, r3, #1
  129e34:	e6ef2073 	uxtb	r2, r3
  129e38:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129e3c:	e3403014 	movt	r3, #20
  129e40:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  129e44:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129e48:	e3403014 	movt	r3, #20
  129e4c:	e5d33000 	ldrb	r3, [r3]
  129e50:	e3530000 	cmp	r3, #0
  129e54:	1a000008 	bne	129e7c <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  129e58:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129e5c:	e3403014 	movt	r3, #20
  129e60:	e5933000 	ldr	r3, [r3]
  129e64:	e1a00003 	mov	r0, r3
  129e68:	ebfffa18 	bl	1286d0 <udp_remove>
    dhcp_pcb = NULL;
  129e6c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129e70:	e3403014 	movt	r3, #20
  129e74:	e3a02000 	mov	r2, #0
  129e78:	e5832000 	str	r2, [r3]
  }
}
  129e7c:	e320f000 	nop	{0}
  129e80:	e8bd8800 	pop	{fp, pc}

00129e84 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  129e84:	e92d4800 	push	{fp, lr}
  129e88:	e28db004 	add	fp, sp, #4
  129e8c:	e24dd010 	sub	sp, sp, #16
  129e90:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129e94:	e51b3010 	ldr	r3, [fp, #-16]
  129e98:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129e9c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  129ea0:	e3a0100c 	mov	r1, #12
  129ea4:	e51b0008 	ldr	r0, [fp, #-8]
  129ea8:	eb00076b 	bl	12bc5c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  129eac:	e309363c 	movw	r3, #38460	; 0x963c
  129eb0:	e3403014 	movt	r3, #20
  129eb4:	e309263c 	movw	r2, #38460	; 0x963c
  129eb8:	e3402014 	movt	r2, #20
  129ebc:	e309163c 	movw	r1, #38460	; 0x963c
  129ec0:	e3401014 	movt	r1, #20
  129ec4:	e51b0010 	ldr	r0, [fp, #-16]
  129ec8:	ebffbcbf 	bl	1191cc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  129ecc:	e51b0010 	ldr	r0, [fp, #-16]
  129ed0:	eb000420 	bl	12af58 <dhcp_discover>
}
  129ed4:	e320f000 	nop	{0}
  129ed8:	e24bd004 	sub	sp, fp, #4
  129edc:	e8bd8800 	pop	{fp, pc}

00129ee0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  129ee0:	e92d4800 	push	{fp, lr}
  129ee4:	e28db004 	add	fp, sp, #4
  129ee8:	e24dd010 	sub	sp, sp, #16
  129eec:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129ef0:	e51b3010 	ldr	r3, [fp, #-16]
  129ef4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129ef8:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  129efc:	e3a01008 	mov	r1, #8
  129f00:	e51b0008 	ldr	r0, [fp, #-8]
  129f04:	eb000754 	bl	12bc5c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  129f08:	e51b3008 	ldr	r3, [fp, #-8]
  129f0c:	e2833028 	add	r3, r3, #40	; 0x28
  129f10:	e3a02000 	mov	r2, #0
  129f14:	e1a01003 	mov	r1, r3
  129f18:	e51b0010 	ldr	r0, [fp, #-16]
  129f1c:	eb0012a0 	bl	12e9a4 <etharp_query>
  129f20:	e1a03000 	mov	r3, r0
  129f24:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  129f28:	e51b3008 	ldr	r3, [fp, #-8]
  129f2c:	e5d3300a 	ldrb	r3, [r3, #10]
  129f30:	e35300ff 	cmp	r3, #255	; 0xff
  129f34:	0a000005 	beq	129f50 <dhcp_check+0x70>
    dhcp->tries++;
  129f38:	e51b3008 	ldr	r3, [fp, #-8]
  129f3c:	e5d3300a 	ldrb	r3, [r3, #10]
  129f40:	e2833001 	add	r3, r3, #1
  129f44:	e6ef2073 	uxtb	r2, r3
  129f48:	e51b3008 	ldr	r3, [fp, #-8]
  129f4c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  129f50:	e3a03f7d 	mov	r3, #500	; 0x1f4
  129f54:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  129f58:	e15b30bc 	ldrh	r3, [fp, #-12]
  129f5c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  129f60:	e2833003 	add	r3, r3, #3
  129f64:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  129f68:	e3412062 	movt	r2, #4194	; 0x1062
  129f6c:	e0c10293 	smull	r0, r1, r3, r2
  129f70:	e1a022c1 	asr	r2, r1, #5
  129f74:	e1a03fc3 	asr	r3, r3, #31
  129f78:	e0423003 	sub	r3, r2, r3
  129f7c:	e6ff2073 	uxth	r2, r3
  129f80:	e51b3008 	ldr	r3, [fp, #-8]
  129f84:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  129f88:	e320f000 	nop	{0}
  129f8c:	e24bd004 	sub	sp, fp, #4
  129f90:	e8bd8800 	pop	{fp, pc}

00129f94 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  129f94:	e92d4800 	push	{fp, lr}
  129f98:	e28db004 	add	fp, sp, #4
  129f9c:	e24dd010 	sub	sp, sp, #16
  129fa0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129fa4:	e51b3010 	ldr	r3, [fp, #-16]
  129fa8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129fac:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  129fb0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  129fb4:	e3403015 	movt	r3, #21
  129fb8:	e5d33002 	ldrb	r3, [r3, #2]
  129fbc:	e3530000 	cmp	r3, #0
  129fc0:	0a00000e 	beq	12a000 <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  129fc4:	e30c3c30 	movw	r3, #52272	; 0xcc30
  129fc8:	e3403015 	movt	r3, #21
  129fcc:	e5933008 	ldr	r3, [r3, #8]
  129fd0:	e1a00003 	mov	r0, r3
  129fd4:	ebffb0bf 	bl	1162d8 <lwip_htonl>
  129fd8:	e1a02000 	mov	r2, r0
  129fdc:	e51b3008 	ldr	r3, [fp, #-8]
  129fe0:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  129fe4:	e51b3008 	ldr	r3, [fp, #-8]
  129fe8:	e5933004 	ldr	r3, [r3, #4]
  129fec:	e5932010 	ldr	r2, [r3, #16]
  129ff0:	e51b3008 	ldr	r3, [fp, #-8]
  129ff4:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  129ff8:	e51b0010 	ldr	r0, [fp, #-16]
  129ffc:	eb000002 	bl	12a00c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  12a000:	e320f000 	nop	{0}
  12a004:	e24bd004 	sub	sp, fp, #4
  12a008:	e8bd8800 	pop	{fp, pc}

0012a00c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  12a00c:	e92d4800 	push	{fp, lr}
  12a010:	e28db004 	add	fp, sp, #4
  12a014:	e24dd020 	sub	sp, sp, #32
  12a018:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a01c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a020:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a024:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  12a028:	e3a01001 	mov	r1, #1
  12a02c:	e51b000c 	ldr	r0, [fp, #-12]
  12a030:	eb000709 	bl	12bc5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12a034:	e3a02003 	mov	r2, #3
  12a038:	e51b100c 	ldr	r1, [fp, #-12]
  12a03c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a040:	eb000b35 	bl	12cd1c <dhcp_create_msg>
  12a044:	e1a03000 	mov	r3, r0
  12a048:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12a04c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12a050:	e3530000 	cmp	r3, #0
  12a054:	1a000052 	bne	12a1a4 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12a058:	e3a02002 	mov	r2, #2
  12a05c:	e3a01039 	mov	r1, #57	; 0x39
  12a060:	e51b000c 	ldr	r0, [fp, #-12]
  12a064:	eb000714 	bl	12bcbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12a068:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a06c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a070:	e1a01003 	mov	r1, r3
  12a074:	e51b000c 	ldr	r0, [fp, #-12]
  12a078:	eb00075e 	bl	12bdf8 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a07c:	e3a02004 	mov	r2, #4
  12a080:	e3a01032 	mov	r1, #50	; 0x32
  12a084:	e51b000c 	ldr	r0, [fp, #-12]
  12a088:	eb00070b 	bl	12bcbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a08c:	e51b300c 	ldr	r3, [fp, #-12]
  12a090:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a094:	e1a00003 	mov	r0, r3
  12a098:	ebffb08e 	bl	1162d8 <lwip_htonl>
  12a09c:	e1a03000 	mov	r3, r0
  12a0a0:	e1a01003 	mov	r1, r3
  12a0a4:	e51b000c 	ldr	r0, [fp, #-12]
  12a0a8:	eb000783 	bl	12bebc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a0ac:	e3a02004 	mov	r2, #4
  12a0b0:	e3a01036 	mov	r1, #54	; 0x36
  12a0b4:	e51b000c 	ldr	r0, [fp, #-12]
  12a0b8:	eb0006ff 	bl	12bcbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a0bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a0c0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a0c4:	e1a00003 	mov	r0, r3
  12a0c8:	ebffb082 	bl	1162d8 <lwip_htonl>
  12a0cc:	e1a03000 	mov	r3, r0
  12a0d0:	e1a01003 	mov	r1, r3
  12a0d4:	e51b000c 	ldr	r0, [fp, #-12]
  12a0d8:	eb000777 	bl	12bebc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a0dc:	e3a02004 	mov	r2, #4
  12a0e0:	e3a01037 	mov	r1, #55	; 0x37
  12a0e4:	e51b000c 	ldr	r0, [fp, #-12]
  12a0e8:	eb0006f3 	bl	12bcbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a0ec:	e3a03000 	mov	r3, #0
  12a0f0:	e54b3005 	strb	r3, [fp, #-5]
  12a0f4:	ea000009 	b	12a120 <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a0f8:	e55b2005 	ldrb	r2, [fp, #-5]
  12a0fc:	e30d303c 	movw	r3, #53308	; 0xd03c
  12a100:	e3403014 	movt	r3, #20
  12a104:	e7d33002 	ldrb	r3, [r3, r2]
  12a108:	e1a01003 	mov	r1, r3
  12a10c:	e51b000c 	ldr	r0, [fp, #-12]
  12a110:	eb000719 	bl	12bd7c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a114:	e55b3005 	ldrb	r3, [fp, #-5]
  12a118:	e2833001 	add	r3, r3, #1
  12a11c:	e54b3005 	strb	r3, [fp, #-5]
  12a120:	e55b3005 	ldrb	r3, [fp, #-5]
  12a124:	e3530003 	cmp	r3, #3
  12a128:	9afffff2 	bls	12a0f8 <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a12c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a130:	e51b000c 	ldr	r0, [fp, #-12]
  12a134:	eb0007ab 	bl	12bfe8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a138:	e51b000c 	ldr	r0, [fp, #-12]
  12a13c:	eb000c63 	bl	12d2d0 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a140:	e51b300c 	ldr	r3, [fp, #-12]
  12a144:	e593200c 	ldr	r2, [r3, #12]
  12a148:	e51b300c 	ldr	r3, [fp, #-12]
  12a14c:	e1d331b4 	ldrh	r3, [r3, #20]
  12a150:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a154:	e6ff3073 	uxth	r3, r3
  12a158:	e1a01003 	mov	r1, r3
  12a15c:	e1a00002 	mov	r0, r2
  12a160:	ebffc13e 	bl	11a660 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a164:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12a168:	e3403014 	movt	r3, #20
  12a16c:	e5930000 	ldr	r0, [r3]
  12a170:	e51b300c 	ldr	r3, [fp, #-12]
  12a174:	e593100c 	ldr	r1, [r3, #12]
  12a178:	e309363c 	movw	r3, #38460	; 0x963c
  12a17c:	e3403014 	movt	r3, #20
  12a180:	e58d3004 	str	r3, [sp, #4]
  12a184:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a188:	e58d3000 	str	r3, [sp]
  12a18c:	e3a03043 	mov	r3, #67	; 0x43
  12a190:	e3092640 	movw	r2, #38464	; 0x9640
  12a194:	e3402014 	movt	r2, #20
  12a198:	ebfff791 	bl	127fe4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a19c:	e51b000c 	ldr	r0, [fp, #-12]
  12a1a0:	eb000c15 	bl	12d1fc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a1a4:	e51b300c 	ldr	r3, [fp, #-12]
  12a1a8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a1ac:	e35300ff 	cmp	r3, #255	; 0xff
  12a1b0:	0a000005 	beq	12a1cc <dhcp_select+0x1c0>
    dhcp->tries++;
  12a1b4:	e51b300c 	ldr	r3, [fp, #-12]
  12a1b8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a1bc:	e2833001 	add	r3, r3, #1
  12a1c0:	e6ef2073 	uxtb	r2, r3
  12a1c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a1c8:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a1cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a1d0:	e5d3300a 	ldrb	r3, [r3, #10]
  12a1d4:	e3530005 	cmp	r3, #5
  12a1d8:	8a000006 	bhi	12a1f8 <dhcp_select+0x1ec>
  12a1dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a1e0:	e5d3300a 	ldrb	r3, [r3, #10]
  12a1e4:	e1a02003 	mov	r2, r3
  12a1e8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a1ec:	e1a03213 	lsl	r3, r3, r2
  12a1f0:	e6ff3073 	uxth	r3, r3
  12a1f4:	ea000000 	b	12a1fc <dhcp_select+0x1f0>
  12a1f8:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a1fc:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a200:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a204:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a208:	e2833003 	add	r3, r3, #3
  12a20c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a210:	e3412062 	movt	r2, #4194	; 0x1062
  12a214:	e0c10293 	smull	r0, r1, r3, r2
  12a218:	e1a022c1 	asr	r2, r1, #5
  12a21c:	e1a03fc3 	asr	r3, r3, #31
  12a220:	e0423003 	sub	r3, r2, r3
  12a224:	e6ff2073 	uxth	r2, r3
  12a228:	e51b300c 	ldr	r3, [fp, #-12]
  12a22c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a230:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a234:	e1a00003 	mov	r0, r3
  12a238:	e24bd004 	sub	sp, fp, #4
  12a23c:	e8bd8800 	pop	{fp, pc}

0012a240 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a240:	e92d4800 	push	{fp, lr}
  12a244:	e28db004 	add	fp, sp, #4
  12a248:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a24c:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  12a250:	e3403015 	movt	r3, #21
  12a254:	e5933000 	ldr	r3, [r3]
  12a258:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a25c:	ea00003e 	b	12a35c <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a260:	e51b3008 	ldr	r3, [fp, #-8]
  12a264:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a268:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a26c:	e51b300c 	ldr	r3, [fp, #-12]
  12a270:	e3530000 	cmp	r3, #0
  12a274:	0a000035 	beq	12a350 <dhcp_coarse_tmr+0x110>
  12a278:	e51b300c 	ldr	r3, [fp, #-12]
  12a27c:	e5d33009 	ldrb	r3, [r3, #9]
  12a280:	e3530000 	cmp	r3, #0
  12a284:	0a000031 	beq	12a350 <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a288:	e51b300c 	ldr	r3, [fp, #-12]
  12a28c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a290:	e3530000 	cmp	r3, #0
  12a294:	0a000010 	beq	12a2dc <dhcp_coarse_tmr+0x9c>
  12a298:	e51b300c 	ldr	r3, [fp, #-12]
  12a29c:	e1d332b0 	ldrh	r3, [r3, #32]
  12a2a0:	e2833001 	add	r3, r3, #1
  12a2a4:	e6ff2073 	uxth	r2, r3
  12a2a8:	e51b300c 	ldr	r3, [fp, #-12]
  12a2ac:	e1c322b0 	strh	r2, [r3, #32]
  12a2b0:	e51b300c 	ldr	r3, [fp, #-12]
  12a2b4:	e1d322b0 	ldrh	r2, [r3, #32]
  12a2b8:	e51b300c 	ldr	r3, [fp, #-12]
  12a2bc:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a2c0:	e1520003 	cmp	r2, r3
  12a2c4:	1a000004 	bne	12a2dc <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a2c8:	e51b0008 	ldr	r0, [fp, #-8]
  12a2cc:	eb0005bd 	bl	12b9c8 <dhcp_release>
        dhcp_discover(netif);
  12a2d0:	e51b0008 	ldr	r0, [fp, #-8]
  12a2d4:	eb00031f 	bl	12af58 <dhcp_discover>
  12a2d8:	ea00001c 	b	12a350 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a2dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a2e0:	e1d331be 	ldrh	r3, [r3, #30]
  12a2e4:	e3530000 	cmp	r3, #0
  12a2e8:	0a00000a 	beq	12a318 <dhcp_coarse_tmr+0xd8>
  12a2ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a2f0:	e1d331be 	ldrh	r3, [r3, #30]
  12a2f4:	e2432001 	sub	r2, r3, #1
  12a2f8:	e6ff1072 	uxth	r1, r2
  12a2fc:	e51b200c 	ldr	r2, [fp, #-12]
  12a300:	e1c211be 	strh	r1, [r2, #30]
  12a304:	e3530001 	cmp	r3, #1
  12a308:	1a000002 	bne	12a318 <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a30c:	e51b0008 	ldr	r0, [fp, #-8]
  12a310:	eb0000b1 	bl	12a5dc <dhcp_t2_timeout>
  12a314:	ea00000d 	b	12a350 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a318:	e51b300c 	ldr	r3, [fp, #-12]
  12a31c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a320:	e3530000 	cmp	r3, #0
  12a324:	0a000009 	beq	12a350 <dhcp_coarse_tmr+0x110>
  12a328:	e51b300c 	ldr	r3, [fp, #-12]
  12a32c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a330:	e2432001 	sub	r2, r3, #1
  12a334:	e6ff1072 	uxth	r1, r2
  12a338:	e51b200c 	ldr	r2, [fp, #-12]
  12a33c:	e1c211bc 	strh	r1, [r2, #28]
  12a340:	e3530001 	cmp	r3, #1
  12a344:	1a000001 	bne	12a350 <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a348:	e51b0008 	ldr	r0, [fp, #-8]
  12a34c:	eb000076 	bl	12a52c <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a350:	e51b3008 	ldr	r3, [fp, #-8]
  12a354:	e5933000 	ldr	r3, [r3]
  12a358:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a35c:	e51b3008 	ldr	r3, [fp, #-8]
  12a360:	e3530000 	cmp	r3, #0
  12a364:	1affffbd 	bne	12a260 <dhcp_coarse_tmr+0x20>
  }
}
  12a368:	e320f000 	nop	{0}
  12a36c:	e24bd004 	sub	sp, fp, #4
  12a370:	e8bd8800 	pop	{fp, pc}

0012a374 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a374:	e92d4800 	push	{fp, lr}
  12a378:	e28db004 	add	fp, sp, #4
  12a37c:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a380:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  12a384:	e3403015 	movt	r3, #21
  12a388:	e5933000 	ldr	r3, [r3]
  12a38c:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a390:	ea00001f 	b	12a414 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a394:	e51b3008 	ldr	r3, [fp, #-8]
  12a398:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a39c:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a3a0:	e51b300c 	ldr	r3, [fp, #-12]
  12a3a4:	e3530000 	cmp	r3, #0
  12a3a8:	0a000016 	beq	12a408 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a3ac:	e51b300c 	ldr	r3, [fp, #-12]
  12a3b0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a3b4:	e3530001 	cmp	r3, #1
  12a3b8:	9a000006 	bls	12a3d8 <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a3bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a3c0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a3c4:	e2433001 	sub	r3, r3, #1
  12a3c8:	e6ff2073 	uxth	r2, r3
  12a3cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a3d0:	e1c321b6 	strh	r2, [r3, #22]
  12a3d4:	ea00000b 	b	12a408 <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a3d8:	e51b300c 	ldr	r3, [fp, #-12]
  12a3dc:	e1d331b6 	ldrh	r3, [r3, #22]
  12a3e0:	e3530001 	cmp	r3, #1
  12a3e4:	1a000007 	bne	12a408 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a3e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a3ec:	e1d331b6 	ldrh	r3, [r3, #22]
  12a3f0:	e2433001 	sub	r3, r3, #1
  12a3f4:	e6ff2073 	uxth	r2, r3
  12a3f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a3fc:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a400:	e51b0008 	ldr	r0, [fp, #-8]
  12a404:	eb000008 	bl	12a42c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a408:	e51b3008 	ldr	r3, [fp, #-8]
  12a40c:	e5933000 	ldr	r3, [r3]
  12a410:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a414:	e51b3008 	ldr	r3, [fp, #-8]
  12a418:	e3530000 	cmp	r3, #0
  12a41c:	1affffdc 	bne	12a394 <dhcp_fine_tmr+0x20>
  }
}
  12a420:	e320f000 	nop	{0}
  12a424:	e24bd004 	sub	sp, fp, #4
  12a428:	e8bd8800 	pop	{fp, pc}

0012a42c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a42c:	e92d4800 	push	{fp, lr}
  12a430:	e28db004 	add	fp, sp, #4
  12a434:	e24dd010 	sub	sp, sp, #16
  12a438:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a43c:	e51b3010 	ldr	r3, [fp, #-16]
  12a440:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a444:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a448:	e51b3008 	ldr	r3, [fp, #-8]
  12a44c:	e5d33009 	ldrb	r3, [r3, #9]
  12a450:	e353000c 	cmp	r3, #12
  12a454:	0a000003 	beq	12a468 <dhcp_timeout+0x3c>
  12a458:	e51b3008 	ldr	r3, [fp, #-8]
  12a45c:	e5d33009 	ldrb	r3, [r3, #9]
  12a460:	e3530006 	cmp	r3, #6
  12a464:	1a000002 	bne	12a474 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a468:	e51b0010 	ldr	r0, [fp, #-16]
  12a46c:	eb0002b9 	bl	12af58 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a470:	ea00002a 	b	12a520 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a474:	e51b3008 	ldr	r3, [fp, #-8]
  12a478:	e5d33009 	ldrb	r3, [r3, #9]
  12a47c:	e3530001 	cmp	r3, #1
  12a480:	1a00000b 	bne	12a4b4 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a484:	e51b3008 	ldr	r3, [fp, #-8]
  12a488:	e5d3300a 	ldrb	r3, [r3, #10]
  12a48c:	e3530005 	cmp	r3, #5
  12a490:	8a000002 	bhi	12a4a0 <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a494:	e51b0010 	ldr	r0, [fp, #-16]
  12a498:	ebfffedb 	bl	12a00c <dhcp_select>
}
  12a49c:	ea00001f 	b	12a520 <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a4a0:	e51b0010 	ldr	r0, [fp, #-16]
  12a4a4:	eb000547 	bl	12b9c8 <dhcp_release>
      dhcp_discover(netif);
  12a4a8:	e51b0010 	ldr	r0, [fp, #-16]
  12a4ac:	eb0002a9 	bl	12af58 <dhcp_discover>
}
  12a4b0:	ea00001a 	b	12a520 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a4b4:	e51b3008 	ldr	r3, [fp, #-8]
  12a4b8:	e5d33009 	ldrb	r3, [r3, #9]
  12a4bc:	e3530008 	cmp	r3, #8
  12a4c0:	1a000009 	bne	12a4ec <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a4c4:	e51b3008 	ldr	r3, [fp, #-8]
  12a4c8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4cc:	e3530001 	cmp	r3, #1
  12a4d0:	8a000002 	bhi	12a4e0 <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a4d4:	e51b0010 	ldr	r0, [fp, #-16]
  12a4d8:	ebfffe80 	bl	129ee0 <dhcp_check>
}
  12a4dc:	ea00000f 	b	12a520 <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a4e0:	e51b0010 	ldr	r0, [fp, #-16]
  12a4e4:	eb000312 	bl	12b134 <dhcp_bind>
}
  12a4e8:	ea00000c 	b	12a520 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a4ec:	e51b3008 	ldr	r3, [fp, #-8]
  12a4f0:	e5d33009 	ldrb	r3, [r3, #9]
  12a4f4:	e3530003 	cmp	r3, #3
  12a4f8:	1a000008 	bne	12a520 <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a4fc:	e51b3008 	ldr	r3, [fp, #-8]
  12a500:	e5d3300a 	ldrb	r3, [r3, #10]
  12a504:	e3530001 	cmp	r3, #1
  12a508:	8a000002 	bhi	12a518 <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a50c:	e51b0010 	ldr	r0, [fp, #-16]
  12a510:	eb0004af 	bl	12b7d4 <dhcp_reboot>
}
  12a514:	ea000001 	b	12a520 <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a518:	e51b0010 	ldr	r0, [fp, #-16]
  12a51c:	eb00028d 	bl	12af58 <dhcp_discover>
}
  12a520:	e320f000 	nop	{0}
  12a524:	e24bd004 	sub	sp, fp, #4
  12a528:	e8bd8800 	pop	{fp, pc}

0012a52c <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a52c:	e92d4800 	push	{fp, lr}
  12a530:	e28db004 	add	fp, sp, #4
  12a534:	e24dd010 	sub	sp, sp, #16
  12a538:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a53c:	e51b3010 	ldr	r3, [fp, #-16]
  12a540:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a544:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a548:	e51b3008 	ldr	r3, [fp, #-8]
  12a54c:	e5d33009 	ldrb	r3, [r3, #9]
  12a550:	e3530001 	cmp	r3, #1
  12a554:	0a000007 	beq	12a578 <dhcp_t1_timeout+0x4c>
  12a558:	e51b3008 	ldr	r3, [fp, #-8]
  12a55c:	e5d33009 	ldrb	r3, [r3, #9]
  12a560:	e353000a 	cmp	r3, #10
  12a564:	0a000003 	beq	12a578 <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a568:	e51b3008 	ldr	r3, [fp, #-8]
  12a56c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a570:	e3530005 	cmp	r3, #5
  12a574:	1a000015 	bne	12a5d0 <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a578:	e51b0010 	ldr	r0, [fp, #-16]
  12a57c:	eb0003a8 	bl	12b424 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a580:	e51b3008 	ldr	r3, [fp, #-8]
  12a584:	e1d331ba 	ldrh	r3, [r3, #26]
  12a588:	e1a02003 	mov	r2, r3
  12a58c:	e51b3008 	ldr	r3, [fp, #-8]
  12a590:	e1d332b0 	ldrh	r3, [r3, #32]
  12a594:	e0423003 	sub	r3, r2, r3
  12a598:	e3530001 	cmp	r3, #1
  12a59c:	da00000b 	ble	12a5d0 <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a5a0:	e51b3008 	ldr	r3, [fp, #-8]
  12a5a4:	e1d331ba 	ldrh	r3, [r3, #26]
  12a5a8:	e1a02003 	mov	r2, r3
  12a5ac:	e51b3008 	ldr	r3, [fp, #-8]
  12a5b0:	e1d332b0 	ldrh	r3, [r3, #32]
  12a5b4:	e0423003 	sub	r3, r2, r3
  12a5b8:	e1a02fa3 	lsr	r2, r3, #31
  12a5bc:	e0823003 	add	r3, r2, r3
  12a5c0:	e1a030c3 	asr	r3, r3, #1
  12a5c4:	e6ff2073 	uxth	r2, r3
  12a5c8:	e51b3008 	ldr	r3, [fp, #-8]
  12a5cc:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a5d0:	e320f000 	nop	{0}
  12a5d4:	e24bd004 	sub	sp, fp, #4
  12a5d8:	e8bd8800 	pop	{fp, pc}

0012a5dc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a5dc:	e92d4800 	push	{fp, lr}
  12a5e0:	e28db004 	add	fp, sp, #4
  12a5e4:	e24dd010 	sub	sp, sp, #16
  12a5e8:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a5ec:	e51b3010 	ldr	r3, [fp, #-16]
  12a5f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a5f4:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a5f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a5fc:	e5d33009 	ldrb	r3, [r3, #9]
  12a600:	e3530001 	cmp	r3, #1
  12a604:	0a00000b 	beq	12a638 <dhcp_t2_timeout+0x5c>
  12a608:	e51b3008 	ldr	r3, [fp, #-8]
  12a60c:	e5d33009 	ldrb	r3, [r3, #9]
  12a610:	e353000a 	cmp	r3, #10
  12a614:	0a000007 	beq	12a638 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a618:	e51b3008 	ldr	r3, [fp, #-8]
  12a61c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a620:	e3530005 	cmp	r3, #5
  12a624:	0a000003 	beq	12a638 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a628:	e51b3008 	ldr	r3, [fp, #-8]
  12a62c:	e5d33009 	ldrb	r3, [r3, #9]
  12a630:	e3530004 	cmp	r3, #4
  12a634:	1a000015 	bne	12a690 <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a638:	e51b0010 	ldr	r0, [fp, #-16]
  12a63c:	eb0003ee 	bl	12b5fc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a640:	e51b3008 	ldr	r3, [fp, #-8]
  12a644:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a648:	e1a02003 	mov	r2, r3
  12a64c:	e51b3008 	ldr	r3, [fp, #-8]
  12a650:	e1d332b0 	ldrh	r3, [r3, #32]
  12a654:	e0423003 	sub	r3, r2, r3
  12a658:	e3530001 	cmp	r3, #1
  12a65c:	da00000b 	ble	12a690 <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a660:	e51b3008 	ldr	r3, [fp, #-8]
  12a664:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a668:	e1a02003 	mov	r2, r3
  12a66c:	e51b3008 	ldr	r3, [fp, #-8]
  12a670:	e1d332b0 	ldrh	r3, [r3, #32]
  12a674:	e0423003 	sub	r3, r2, r3
  12a678:	e1a02fa3 	lsr	r2, r3, #31
  12a67c:	e0823003 	add	r3, r2, r3
  12a680:	e1a030c3 	asr	r3, r3, #1
  12a684:	e6ff2073 	uxth	r2, r3
  12a688:	e51b3008 	ldr	r3, [fp, #-8]
  12a68c:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a690:	e320f000 	nop	{0}
  12a694:	e24bd004 	sub	sp, fp, #4
  12a698:	e8bd8800 	pop	{fp, pc}

0012a69c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a69c:	e92d4800 	push	{fp, lr}
  12a6a0:	e28db004 	add	fp, sp, #4
  12a6a4:	e24dd018 	sub	sp, sp, #24
  12a6a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a6ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a6b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a6b4:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a6b8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6bc:	e3a02000 	mov	r2, #0
  12a6c0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a6c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a6c8:	e3a02000 	mov	r2, #0
  12a6cc:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12a6d0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a6d4:	e3403015 	movt	r3, #21
  12a6d8:	e5d33003 	ldrb	r3, [r3, #3]
  12a6dc:	e3530000 	cmp	r3, #0
  12a6e0:	0a000004 	beq	12a6f8 <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12a6e4:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a6e8:	e3403015 	movt	r3, #21
  12a6ec:	e593200c 	ldr	r2, [r3, #12]
  12a6f0:	e51b300c 	ldr	r3, [fp, #-12]
  12a6f4:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12a6f8:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a6fc:	e3403015 	movt	r3, #21
  12a700:	e5d33004 	ldrb	r3, [r3, #4]
  12a704:	e3530000 	cmp	r3, #0
  12a708:	0a000005 	beq	12a724 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12a70c:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a710:	e3403015 	movt	r3, #21
  12a714:	e5932010 	ldr	r2, [r3, #16]
  12a718:	e51b300c 	ldr	r3, [fp, #-12]
  12a71c:	e5832038 	str	r2, [r3, #56]	; 0x38
  12a720:	ea000004 	b	12a738 <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12a724:	e51b300c 	ldr	r3, [fp, #-12]
  12a728:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12a72c:	e1a020a3 	lsr	r2, r3, #1
  12a730:	e51b300c 	ldr	r3, [fp, #-12]
  12a734:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12a738:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a73c:	e3403015 	movt	r3, #21
  12a740:	e5d33005 	ldrb	r3, [r3, #5]
  12a744:	e3530000 	cmp	r3, #0
  12a748:	0a000005 	beq	12a764 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12a74c:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a750:	e3403015 	movt	r3, #21
  12a754:	e5932014 	ldr	r2, [r3, #20]
  12a758:	e51b300c 	ldr	r3, [fp, #-12]
  12a75c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12a760:	ea000007 	b	12a784 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12a764:	e51b300c 	ldr	r3, [fp, #-12]
  12a768:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12a76c:	e1a03002 	mov	r3, r2
  12a770:	e1a03183 	lsl	r3, r3, #3
  12a774:	e0433002 	sub	r3, r3, r2
  12a778:	e1a021a3 	lsr	r2, r3, #3
  12a77c:	e51b300c 	ldr	r3, [fp, #-12]
  12a780:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a784:	e51b300c 	ldr	r3, [fp, #-12]
  12a788:	e5933004 	ldr	r3, [r3, #4]
  12a78c:	e5932010 	ldr	r2, [r3, #16]
  12a790:	e51b300c 	ldr	r3, [fp, #-12]
  12a794:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12a798:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a79c:	e3403015 	movt	r3, #21
  12a7a0:	e5d33006 	ldrb	r3, [r3, #6]
  12a7a4:	e3530000 	cmp	r3, #0
  12a7a8:	0a00000b 	beq	12a7dc <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12a7ac:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a7b0:	e3403015 	movt	r3, #21
  12a7b4:	e5933018 	ldr	r3, [r3, #24]
  12a7b8:	e1a00003 	mov	r0, r3
  12a7bc:	ebffaec5 	bl	1162d8 <lwip_htonl>
  12a7c0:	e1a02000 	mov	r2, r0
  12a7c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a7c8:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12a7cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a7d0:	e3a02001 	mov	r2, #1
  12a7d4:	e5c3200b 	strb	r2, [r3, #11]
  12a7d8:	ea000002 	b	12a7e8 <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12a7dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a7e0:	e3a02000 	mov	r2, #0
  12a7e4:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12a7e8:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a7ec:	e3403015 	movt	r3, #21
  12a7f0:	e5d33007 	ldrb	r3, [r3, #7]
  12a7f4:	e3530000 	cmp	r3, #0
  12a7f8:	0a000007 	beq	12a81c <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12a7fc:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a800:	e3403015 	movt	r3, #21
  12a804:	e593301c 	ldr	r3, [r3, #28]
  12a808:	e1a00003 	mov	r0, r3
  12a80c:	ebffaeb1 	bl	1162d8 <lwip_htonl>
  12a810:	e1a02000 	mov	r2, r0
  12a814:	e51b300c 	ldr	r3, [fp, #-12]
  12a818:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a81c:	e3a03000 	mov	r3, #0
  12a820:	e54b3005 	strb	r3, [fp, #-5]
  12a824:	ea000010 	b	12a86c <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12a828:	e55b3005 	ldrb	r3, [fp, #-5]
  12a82c:	e2832008 	add	r2, r3, #8
  12a830:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a834:	e3403015 	movt	r3, #21
  12a838:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12a83c:	e1a00003 	mov	r0, r3
  12a840:	ebffaea4 	bl	1162d8 <lwip_htonl>
  12a844:	e1a03000 	mov	r3, r0
  12a848:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12a84c:	e24b2010 	sub	r2, fp, #16
  12a850:	e55b3005 	ldrb	r3, [fp, #-5]
  12a854:	e1a01002 	mov	r1, r2
  12a858:	e1a00003 	mov	r0, r3
  12a85c:	ebffaf97 	bl	1166c0 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a860:	e55b3005 	ldrb	r3, [fp, #-5]
  12a864:	e2833001 	add	r3, r3, #1
  12a868:	e54b3005 	strb	r3, [fp, #-5]
  12a86c:	e55b3005 	ldrb	r3, [fp, #-5]
  12a870:	e3530001 	cmp	r3, #1
  12a874:	8a000006 	bhi	12a894 <dhcp_handle_ack+0x1f8>
  12a878:	e55b3005 	ldrb	r3, [fp, #-5]
  12a87c:	e2832008 	add	r2, r3, #8
  12a880:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a884:	e3403015 	movt	r3, #21
  12a888:	e7d33002 	ldrb	r3, [r3, r2]
  12a88c:	e3530000 	cmp	r3, #0
  12a890:	1affffe4 	bne	12a828 <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12a894:	e320f000 	nop	{0}
  12a898:	e24bd004 	sub	sp, fp, #4
  12a89c:	e8bd8800 	pop	{fp, pc}

0012a8a0 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12a8a0:	e92d4800 	push	{fp, lr}
  12a8a4:	e28db004 	add	fp, sp, #4
  12a8a8:	e24dd008 	sub	sp, sp, #8
  12a8ac:	e50b0008 	str	r0, [fp, #-8]
  12a8b0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a8b4:	e51b3008 	ldr	r3, [fp, #-8]
  12a8b8:	e3530000 	cmp	r3, #0
  12a8bc:	1a000006 	bne	12a8dc <dhcp_set_struct+0x3c>
  12a8c0:	e3080afc 	movw	r0, #35580	; 0x8afc
  12a8c4:	e3400014 	movt	r0, #20
  12a8c8:	ebff6211 	bl	103114 <rt_kprintf>
  12a8cc:	e3a01faa 	mov	r1, #680	; 0x2a8
  12a8d0:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12a8d4:	e3400014 	movt	r0, #20
  12a8d8:	ebff812d 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12a8dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a8e0:	e3530000 	cmp	r3, #0
  12a8e4:	1a000006 	bne	12a904 <dhcp_set_struct+0x64>
  12a8e8:	e3080b0c 	movw	r0, #35596	; 0x8b0c
  12a8ec:	e3400014 	movt	r0, #20
  12a8f0:	ebff6207 	bl	103114 <rt_kprintf>
  12a8f4:	e30012a9 	movw	r1, #681	; 0x2a9
  12a8f8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12a8fc:	e3400014 	movt	r0, #20
  12a900:	ebff8123 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12a904:	e51b3008 	ldr	r3, [fp, #-8]
  12a908:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a90c:	e3530000 	cmp	r3, #0
  12a910:	0a000006 	beq	12a930 <dhcp_set_struct+0x90>
  12a914:	e3080b1c 	movw	r0, #35612	; 0x8b1c
  12a918:	e3400014 	movt	r0, #20
  12a91c:	ebff61fc 	bl	103114 <rt_kprintf>
  12a920:	e30012aa 	movw	r1, #682	; 0x2aa
  12a924:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12a928:	e3400014 	movt	r0, #20
  12a92c:	ebff8118 	bl	10ad94 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12a930:	e3a02040 	mov	r2, #64	; 0x40
  12a934:	e3a01000 	mov	r1, #0
  12a938:	e51b000c 	ldr	r0, [fp, #-12]
  12a93c:	eb005988 	bl	140f64 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12a940:	e51b3008 	ldr	r3, [fp, #-8]
  12a944:	e51b200c 	ldr	r2, [fp, #-12]
  12a948:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12a94c:	e320f000 	nop	{0}
  12a950:	e24bd004 	sub	sp, fp, #4
  12a954:	e8bd8800 	pop	{fp, pc}

0012a958 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12a958:	e92d4800 	push	{fp, lr}
  12a95c:	e28db004 	add	fp, sp, #4
  12a960:	e24dd008 	sub	sp, sp, #8
  12a964:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a968:	e51b3008 	ldr	r3, [fp, #-8]
  12a96c:	e3530000 	cmp	r3, #0
  12a970:	1a000006 	bne	12a990 <dhcp_cleanup+0x38>
  12a974:	e3080afc 	movw	r0, #35580	; 0x8afc
  12a978:	e3400014 	movt	r0, #20
  12a97c:	ebff61e4 	bl	103114 <rt_kprintf>
  12a980:	e30012bd 	movw	r1, #701	; 0x2bd
  12a984:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12a988:	e3400014 	movt	r0, #20
  12a98c:	ebff8100 	bl	10ad94 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12a990:	e51b3008 	ldr	r3, [fp, #-8]
  12a994:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a998:	e3530000 	cmp	r3, #0
  12a99c:	0a000006 	beq	12a9bc <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12a9a0:	e51b3008 	ldr	r3, [fp, #-8]
  12a9a4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a9a8:	e1a00003 	mov	r0, r3
  12a9ac:	ebff8145 	bl	10aec8 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12a9b0:	e51b3008 	ldr	r3, [fp, #-8]
  12a9b4:	e3a02000 	mov	r2, #0
  12a9b8:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12a9bc:	e320f000 	nop	{0}
  12a9c0:	e24bd004 	sub	sp, fp, #4
  12a9c4:	e8bd8800 	pop	{fp, pc}

0012a9c8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12a9c8:	e92d4800 	push	{fp, lr}
  12a9cc:	e28db004 	add	fp, sp, #4
  12a9d0:	e24dd010 	sub	sp, sp, #16
  12a9d4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12a9d8:	e51b3010 	ldr	r3, [fp, #-16]
  12a9dc:	e3530000 	cmp	r3, #0
  12a9e0:	1a000008 	bne	12aa08 <dhcp_start+0x40>
  12a9e4:	e3080afc 	movw	r0, #35580	; 0x8afc
  12a9e8:	e3400014 	movt	r0, #20
  12a9ec:	ebff61c8 	bl	103114 <rt_kprintf>
  12a9f0:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12a9f4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12a9f8:	e3400014 	movt	r0, #20
  12a9fc:	ebff80e4 	bl	10ad94 <sys_arch_assert>
  12aa00:	e3e0300f 	mvn	r3, #15
  12aa04:	ea000059 	b	12ab70 <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12aa08:	e51b3010 	ldr	r3, [fp, #-16]
  12aa0c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12aa10:	e2033001 	and	r3, r3, #1
  12aa14:	e3530000 	cmp	r3, #0
  12aa18:	1a000008 	bne	12aa40 <dhcp_start+0x78>
  12aa1c:	e3080b40 	movw	r0, #35648	; 0x8b40
  12aa20:	e3400014 	movt	r0, #20
  12aa24:	ebff61ba 	bl	103114 <rt_kprintf>
  12aa28:	e30012d9 	movw	r1, #729	; 0x2d9
  12aa2c:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12aa30:	e3400014 	movt	r0, #20
  12aa34:	ebff80d6 	bl	10ad94 <sys_arch_assert>
  12aa38:	e3e0300f 	mvn	r3, #15
  12aa3c:	ea00004b 	b	12ab70 <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12aa40:	e51b3010 	ldr	r3, [fp, #-16]
  12aa44:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aa48:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12aa4c:	e51b3010 	ldr	r3, [fp, #-16]
  12aa50:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12aa54:	e3530d09 	cmp	r3, #576	; 0x240
  12aa58:	2a000001 	bcs	12aa64 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12aa5c:	e3e03000 	mvn	r3, #0
  12aa60:	ea000042 	b	12ab70 <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12aa64:	e51b3008 	ldr	r3, [fp, #-8]
  12aa68:	e3530000 	cmp	r3, #0
  12aa6c:	1a00000b 	bne	12aaa0 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12aa70:	e3a00040 	mov	r0, #64	; 0x40
  12aa74:	ebff8107 	bl	10ae98 <mem_malloc>
  12aa78:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12aa7c:	e51b3008 	ldr	r3, [fp, #-8]
  12aa80:	e3530000 	cmp	r3, #0
  12aa84:	1a000001 	bne	12aa90 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12aa88:	e3e03000 	mvn	r3, #0
  12aa8c:	ea000037 	b	12ab70 <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12aa90:	e51b3010 	ldr	r3, [fp, #-16]
  12aa94:	e51b2008 	ldr	r2, [fp, #-8]
  12aa98:	e5832028 	str	r2, [r3, #40]	; 0x28
  12aa9c:	ea00001a 	b	12ab0c <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12aaa0:	e51b3008 	ldr	r3, [fp, #-8]
  12aaa4:	e593300c 	ldr	r3, [r3, #12]
  12aaa8:	e3530000 	cmp	r3, #0
  12aaac:	0a000006 	beq	12aacc <dhcp_start+0x104>
  12aab0:	e3080b64 	movw	r0, #35684	; 0x8b64
  12aab4:	e3400014 	movt	r0, #20
  12aab8:	ebff6195 	bl	103114 <rt_kprintf>
  12aabc:	e30012f2 	movw	r1, #754	; 0x2f2
  12aac0:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12aac4:	e3400014 	movt	r0, #20
  12aac8:	ebff80b1 	bl	10ad94 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12aacc:	e51b3008 	ldr	r3, [fp, #-8]
  12aad0:	e5933004 	ldr	r3, [r3, #4]
  12aad4:	e3530000 	cmp	r3, #0
  12aad8:	0a000006 	beq	12aaf8 <dhcp_start+0x130>
  12aadc:	e3080b7c 	movw	r0, #35708	; 0x8b7c
  12aae0:	e3400014 	movt	r0, #20
  12aae4:	ebff618a 	bl	103114 <rt_kprintf>
  12aae8:	e30012f3 	movw	r1, #755	; 0x2f3
  12aaec:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12aaf0:	e3400014 	movt	r0, #20
  12aaf4:	ebff80a6 	bl	10ad94 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12aaf8:	e51b3008 	ldr	r3, [fp, #-8]
  12aafc:	e5d33008 	ldrb	r3, [r3, #8]
  12ab00:	e3530000 	cmp	r3, #0
  12ab04:	0a000000 	beq	12ab0c <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12ab08:	ebfffcb7 	bl	129dec <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ab0c:	e3a02040 	mov	r2, #64	; 0x40
  12ab10:	e3a01000 	mov	r1, #0
  12ab14:	e51b0008 	ldr	r0, [fp, #-8]
  12ab18:	eb005911 	bl	140f64 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ab1c:	ebfffc66 	bl	129cbc <dhcp_inc_pcb_refcount>
  12ab20:	e1a03000 	mov	r3, r0
  12ab24:	e3530000 	cmp	r3, #0
  12ab28:	0a000001 	beq	12ab34 <dhcp_start+0x16c>
    return ERR_MEM;
  12ab2c:	e3e03000 	mvn	r3, #0
  12ab30:	ea00000e 	b	12ab70 <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12ab34:	e51b3008 	ldr	r3, [fp, #-8]
  12ab38:	e3a02001 	mov	r2, #1
  12ab3c:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12ab40:	e51b0010 	ldr	r0, [fp, #-16]
  12ab44:	eb000103 	bl	12af58 <dhcp_discover>
  12ab48:	e1a03000 	mov	r3, r0
  12ab4c:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12ab50:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12ab54:	e3530000 	cmp	r3, #0
  12ab58:	0a000003 	beq	12ab6c <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12ab5c:	e51b0010 	ldr	r0, [fp, #-16]
  12ab60:	eb000410 	bl	12bba8 <dhcp_stop>
    return ERR_MEM;
  12ab64:	e3e03000 	mvn	r3, #0
  12ab68:	ea000000 	b	12ab70 <dhcp_start+0x1a8>
  }
  return result;
  12ab6c:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12ab70:	e1a00003 	mov	r0, r3
  12ab74:	e24bd004 	sub	sp, fp, #4
  12ab78:	e8bd8800 	pop	{fp, pc}

0012ab7c <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12ab7c:	e92d4800 	push	{fp, lr}
  12ab80:	e28db004 	add	fp, sp, #4
  12ab84:	e24dd058 	sub	sp, sp, #88	; 0x58
  12ab88:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12ab8c:	e3a03000 	mov	r3, #0
  12ab90:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12ab94:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ab98:	e3530000 	cmp	r3, #0
  12ab9c:	1a000007 	bne	12abc0 <dhcp_inform+0x44>
  12aba0:	e3080afc 	movw	r0, #35580	; 0x8afc
  12aba4:	e3400014 	movt	r0, #20
  12aba8:	ebff6159 	bl	103114 <rt_kprintf>
  12abac:	e3001329 	movw	r1, #809	; 0x329
  12abb0:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12abb4:	e3400014 	movt	r0, #20
  12abb8:	ebff8075 	bl	10ad94 <sys_arch_assert>
  12abbc:	ea00003b 	b	12acb0 <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12abc0:	ebfffc3d 	bl	129cbc <dhcp_inc_pcb_refcount>
  12abc4:	e1a03000 	mov	r3, r0
  12abc8:	e3530000 	cmp	r3, #0
  12abcc:	1a000036 	bne	12acac <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12abd0:	e24b3048 	sub	r3, fp, #72	; 0x48
  12abd4:	e3a02040 	mov	r2, #64	; 0x40
  12abd8:	e3a01000 	mov	r1, #0
  12abdc:	e1a00003 	mov	r0, r3
  12abe0:	eb0058df 	bl	140f64 <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12abe4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12abe8:	e3a01007 	mov	r1, #7
  12abec:	e1a00003 	mov	r0, r3
  12abf0:	eb000419 	bl	12bc5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12abf4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12abf8:	e3a02008 	mov	r2, #8
  12abfc:	e1a01003 	mov	r1, r3
  12ac00:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12ac04:	eb000844 	bl	12cd1c <dhcp_create_msg>
  12ac08:	e1a03000 	mov	r3, r0
  12ac0c:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12ac10:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ac14:	e3530000 	cmp	r3, #0
  12ac18:	1a000021 	bne	12aca4 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12ac1c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac20:	e3a02002 	mov	r2, #2
  12ac24:	e3a01039 	mov	r1, #57	; 0x39
  12ac28:	e1a00003 	mov	r0, r3
  12ac2c:	eb000422 	bl	12bcbc <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12ac30:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ac34:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12ac38:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac3c:	e1a01002 	mov	r1, r2
  12ac40:	e1a00003 	mov	r0, r3
  12ac44:	eb00046b 	bl	12bdf8 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12ac48:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac4c:	e1a00003 	mov	r0, r3
  12ac50:	eb00099e 	bl	12d2d0 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12ac54:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12ac58:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12ac5c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ac60:	e6ff3073 	uxth	r3, r3
  12ac64:	e1a01003 	mov	r1, r3
  12ac68:	e1a00002 	mov	r0, r2
  12ac6c:	ebffbe7b 	bl	11a660 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12ac70:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12ac74:	e3403014 	movt	r3, #20
  12ac78:	e5930000 	ldr	r0, [r3]
  12ac7c:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12ac80:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ac84:	e58d3000 	str	r3, [sp]
  12ac88:	e3a03043 	mov	r3, #67	; 0x43
  12ac8c:	e3092640 	movw	r2, #38464	; 0x9640
  12ac90:	e3402014 	movt	r2, #20
  12ac94:	ebfff49a 	bl	127f04 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12ac98:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac9c:	e1a00003 	mov	r0, r3
  12aca0:	eb000955 	bl	12d1fc <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12aca4:	ebfffc50 	bl	129dec <dhcp_dec_pcb_refcount>
  12aca8:	ea000000 	b	12acb0 <dhcp_inform+0x134>
    return;
  12acac:	e320f000 	nop	{0}
}
  12acb0:	e24bd004 	sub	sp, fp, #4
  12acb4:	e8bd8800 	pop	{fp, pc}

0012acb8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12acb8:	e92d4800 	push	{fp, lr}
  12acbc:	e28db004 	add	fp, sp, #4
  12acc0:	e24dd010 	sub	sp, sp, #16
  12acc4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12acc8:	e51b3010 	ldr	r3, [fp, #-16]
  12accc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acd0:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12acd4:	e51b3008 	ldr	r3, [fp, #-8]
  12acd8:	e3530000 	cmp	r3, #0
  12acdc:	0a00001c 	beq	12ad54 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12ace0:	e51b3008 	ldr	r3, [fp, #-8]
  12ace4:	e5d33009 	ldrb	r3, [r3, #9]
  12ace8:	e353000a 	cmp	r3, #10
  12acec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12acf0:	ea000010 	b	12ad38 <dhcp_network_changed+0x80>
  12acf4:	0012ad5c 	.word	0x0012ad5c
  12acf8:	0012ad38 	.word	0x0012ad38
  12acfc:	0012ad38 	.word	0x0012ad38
  12ad00:	0012ad20 	.word	0x0012ad20
  12ad04:	0012ad20 	.word	0x0012ad20
  12ad08:	0012ad20 	.word	0x0012ad20
  12ad0c:	0012ad38 	.word	0x0012ad38
  12ad10:	0012ad38 	.word	0x0012ad38
  12ad14:	0012ad38 	.word	0x0012ad38
  12ad18:	0012ad38 	.word	0x0012ad38
  12ad1c:	0012ad20 	.word	0x0012ad20
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12ad20:	e51b3008 	ldr	r3, [fp, #-8]
  12ad24:	e3a02000 	mov	r2, #0
  12ad28:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12ad2c:	e51b0010 	ldr	r0, [fp, #-16]
  12ad30:	eb0002a7 	bl	12b7d4 <dhcp_reboot>
    break;
  12ad34:	ea000009 	b	12ad60 <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12ad38:	e51b3008 	ldr	r3, [fp, #-8]
  12ad3c:	e3a02000 	mov	r2, #0
  12ad40:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12ad44:	e51b0010 	ldr	r0, [fp, #-16]
  12ad48:	eb000082 	bl	12af58 <dhcp_discover>
    break;
  12ad4c:	e320f000 	nop	{0}
  12ad50:	ea000002 	b	12ad60 <dhcp_network_changed+0xa8>
    return;
  12ad54:	e320f000 	nop	{0}
  12ad58:	ea000000 	b	12ad60 <dhcp_network_changed+0xa8>
    break;
  12ad5c:	e320f000 	nop	{0}
  }
}
  12ad60:	e24bd004 	sub	sp, fp, #4
  12ad64:	e8bd8800 	pop	{fp, pc}

0012ad68 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12ad68:	e92d4800 	push	{fp, lr}
  12ad6c:	e28db004 	add	fp, sp, #4
  12ad70:	e24dd010 	sub	sp, sp, #16
  12ad74:	e50b0010 	str	r0, [fp, #-16]
  12ad78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12ad7c:	e51b3010 	ldr	r3, [fp, #-16]
  12ad80:	e3530000 	cmp	r3, #0
  12ad84:	1a000007 	bne	12ada8 <dhcp_arp_reply+0x40>
  12ad88:	e3080afc 	movw	r0, #35580	; 0x8afc
  12ad8c:	e3400014 	movt	r0, #20
  12ad90:	ebff60df 	bl	103114 <rt_kprintf>
  12ad94:	e300137d 	movw	r1, #893	; 0x37d
  12ad98:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12ad9c:	e3400014 	movt	r0, #20
  12ada0:	ebff7ffb 	bl	10ad94 <sys_arch_assert>
  12ada4:	ea000011 	b	12adf0 <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12ada8:	e51b3010 	ldr	r3, [fp, #-16]
  12adac:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12adb0:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12adb4:	e51b3008 	ldr	r3, [fp, #-8]
  12adb8:	e3530000 	cmp	r3, #0
  12adbc:	0a00000b 	beq	12adf0 <dhcp_arp_reply+0x88>
  12adc0:	e51b3008 	ldr	r3, [fp, #-8]
  12adc4:	e5d33009 	ldrb	r3, [r3, #9]
  12adc8:	e3530008 	cmp	r3, #8
  12adcc:	1a000007 	bne	12adf0 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12add0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12add4:	e5932000 	ldr	r2, [r3]
  12add8:	e51b3008 	ldr	r3, [fp, #-8]
  12addc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ade0:	e1520003 	cmp	r2, r3
  12ade4:	1a000001 	bne	12adf0 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12ade8:	e51b0010 	ldr	r0, [fp, #-16]
  12adec:	eb000001 	bl	12adf8 <dhcp_decline>
    }
  }
}
  12adf0:	e24bd004 	sub	sp, fp, #4
  12adf4:	e8bd8800 	pop	{fp, pc}

0012adf8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12adf8:	e92d4800 	push	{fp, lr}
  12adfc:	e28db004 	add	fp, sp, #4
  12ae00:	e24dd018 	sub	sp, sp, #24
  12ae04:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ae08:	e51b3010 	ldr	r3, [fp, #-16]
  12ae0c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ae10:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12ae14:	e3a03000 	mov	r3, #0
  12ae18:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12ae1c:	e3a0100c 	mov	r1, #12
  12ae20:	e51b0008 	ldr	r0, [fp, #-8]
  12ae24:	eb00038c 	bl	12bc5c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12ae28:	e3a02004 	mov	r2, #4
  12ae2c:	e51b1008 	ldr	r1, [fp, #-8]
  12ae30:	e51b0010 	ldr	r0, [fp, #-16]
  12ae34:	eb0007b8 	bl	12cd1c <dhcp_create_msg>
  12ae38:	e1a03000 	mov	r3, r0
  12ae3c:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12ae40:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12ae44:	e3530000 	cmp	r3, #0
  12ae48:	1a000026 	bne	12aee8 <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12ae4c:	e3a02004 	mov	r2, #4
  12ae50:	e3a01032 	mov	r1, #50	; 0x32
  12ae54:	e51b0008 	ldr	r0, [fp, #-8]
  12ae58:	eb000397 	bl	12bcbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12ae5c:	e51b3008 	ldr	r3, [fp, #-8]
  12ae60:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ae64:	e1a00003 	mov	r0, r3
  12ae68:	ebffad1a 	bl	1162d8 <lwip_htonl>
  12ae6c:	e1a03000 	mov	r3, r0
  12ae70:	e1a01003 	mov	r1, r3
  12ae74:	e51b0008 	ldr	r0, [fp, #-8]
  12ae78:	eb00040f 	bl	12bebc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12ae7c:	e51b0008 	ldr	r0, [fp, #-8]
  12ae80:	eb000912 	bl	12d2d0 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12ae84:	e51b3008 	ldr	r3, [fp, #-8]
  12ae88:	e593200c 	ldr	r2, [r3, #12]
  12ae8c:	e51b3008 	ldr	r3, [fp, #-8]
  12ae90:	e1d331b4 	ldrh	r3, [r3, #20]
  12ae94:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ae98:	e6ff3073 	uxth	r3, r3
  12ae9c:	e1a01003 	mov	r1, r3
  12aea0:	e1a00002 	mov	r0, r2
  12aea4:	ebffbded 	bl	11a660 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12aea8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12aeac:	e3403014 	movt	r3, #20
  12aeb0:	e5930000 	ldr	r0, [r3]
  12aeb4:	e51b3008 	ldr	r3, [fp, #-8]
  12aeb8:	e593100c 	ldr	r1, [r3, #12]
  12aebc:	e309363c 	movw	r3, #38460	; 0x963c
  12aec0:	e3403014 	movt	r3, #20
  12aec4:	e58d3004 	str	r3, [sp, #4]
  12aec8:	e51b3010 	ldr	r3, [fp, #-16]
  12aecc:	e58d3000 	str	r3, [sp]
  12aed0:	e3a03043 	mov	r3, #67	; 0x43
  12aed4:	e3092640 	movw	r2, #38464	; 0x9640
  12aed8:	e3402014 	movt	r2, #20
  12aedc:	ebfff440 	bl	127fe4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12aee0:	e51b0008 	ldr	r0, [fp, #-8]
  12aee4:	eb0008c4 	bl	12d1fc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12aee8:	e51b3008 	ldr	r3, [fp, #-8]
  12aeec:	e5d3300a 	ldrb	r3, [r3, #10]
  12aef0:	e35300ff 	cmp	r3, #255	; 0xff
  12aef4:	0a000005 	beq	12af10 <dhcp_decline+0x118>
    dhcp->tries++;
  12aef8:	e51b3008 	ldr	r3, [fp, #-8]
  12aefc:	e5d3300a 	ldrb	r3, [r3, #10]
  12af00:	e2833001 	add	r3, r3, #1
  12af04:	e6ef2073 	uxtb	r2, r3
  12af08:	e51b3008 	ldr	r3, [fp, #-8]
  12af0c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12af10:	e3023710 	movw	r3, #10000	; 0x2710
  12af14:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12af18:	e15b30bc 	ldrh	r3, [fp, #-12]
  12af1c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12af20:	e2833003 	add	r3, r3, #3
  12af24:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12af28:	e3412062 	movt	r2, #4194	; 0x1062
  12af2c:	e0c10293 	smull	r0, r1, r3, r2
  12af30:	e1a022c1 	asr	r2, r1, #5
  12af34:	e1a03fc3 	asr	r3, r3, #31
  12af38:	e0423003 	sub	r3, r2, r3
  12af3c:	e6ff2073 	uxth	r2, r3
  12af40:	e51b3008 	ldr	r3, [fp, #-8]
  12af44:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12af48:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12af4c:	e1a00003 	mov	r0, r3
  12af50:	e24bd004 	sub	sp, fp, #4
  12af54:	e8bd8800 	pop	{fp, pc}

0012af58 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12af58:	e92d4800 	push	{fp, lr}
  12af5c:	e28db004 	add	fp, sp, #4
  12af60:	e24dd020 	sub	sp, sp, #32
  12af64:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12af68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12af6c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12af70:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12af74:	e3a03000 	mov	r3, #0
  12af78:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12af7c:	e51b300c 	ldr	r3, [fp, #-12]
  12af80:	e3a02000 	mov	r2, #0
  12af84:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12af88:	e3a01006 	mov	r1, #6
  12af8c:	e51b000c 	ldr	r0, [fp, #-12]
  12af90:	eb000331 	bl	12bc5c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12af94:	e3a02001 	mov	r2, #1
  12af98:	e51b100c 	ldr	r1, [fp, #-12]
  12af9c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12afa0:	eb00075d 	bl	12cd1c <dhcp_create_msg>
  12afa4:	e1a03000 	mov	r3, r0
  12afa8:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12afac:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12afb0:	e3530000 	cmp	r3, #0
  12afb4:	1a000037 	bne	12b098 <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12afb8:	e3a02002 	mov	r2, #2
  12afbc:	e3a01039 	mov	r1, #57	; 0x39
  12afc0:	e51b000c 	ldr	r0, [fp, #-12]
  12afc4:	eb00033c 	bl	12bcbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12afc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12afcc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12afd0:	e1a01003 	mov	r1, r3
  12afd4:	e51b000c 	ldr	r0, [fp, #-12]
  12afd8:	eb000386 	bl	12bdf8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12afdc:	e3a02004 	mov	r2, #4
  12afe0:	e3a01037 	mov	r1, #55	; 0x37
  12afe4:	e51b000c 	ldr	r0, [fp, #-12]
  12afe8:	eb000333 	bl	12bcbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12afec:	e3a03000 	mov	r3, #0
  12aff0:	e54b3005 	strb	r3, [fp, #-5]
  12aff4:	ea000009 	b	12b020 <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12aff8:	e55b2005 	ldrb	r2, [fp, #-5]
  12affc:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b000:	e3403014 	movt	r3, #20
  12b004:	e7d33002 	ldrb	r3, [r3, r2]
  12b008:	e1a01003 	mov	r1, r3
  12b00c:	e51b000c 	ldr	r0, [fp, #-12]
  12b010:	eb000359 	bl	12bd7c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b014:	e55b3005 	ldrb	r3, [fp, #-5]
  12b018:	e2833001 	add	r3, r3, #1
  12b01c:	e54b3005 	strb	r3, [fp, #-5]
  12b020:	e55b3005 	ldrb	r3, [fp, #-5]
  12b024:	e3530003 	cmp	r3, #3
  12b028:	9afffff2 	bls	12aff8 <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12b02c:	e51b000c 	ldr	r0, [fp, #-12]
  12b030:	eb0008a6 	bl	12d2d0 <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b034:	e51b300c 	ldr	r3, [fp, #-12]
  12b038:	e593200c 	ldr	r2, [r3, #12]
  12b03c:	e51b300c 	ldr	r3, [fp, #-12]
  12b040:	e1d331b4 	ldrh	r3, [r3, #20]
  12b044:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b048:	e6ff3073 	uxth	r3, r3
  12b04c:	e1a01003 	mov	r1, r3
  12b050:	e1a00002 	mov	r0, r2
  12b054:	ebffbd81 	bl	11a660 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b058:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b05c:	e3403014 	movt	r3, #20
  12b060:	e5930000 	ldr	r0, [r3]
  12b064:	e51b300c 	ldr	r3, [fp, #-12]
  12b068:	e593100c 	ldr	r1, [r3, #12]
  12b06c:	e309363c 	movw	r3, #38460	; 0x963c
  12b070:	e3403014 	movt	r3, #20
  12b074:	e58d3004 	str	r3, [sp, #4]
  12b078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b07c:	e58d3000 	str	r3, [sp]
  12b080:	e3a03043 	mov	r3, #67	; 0x43
  12b084:	e3092640 	movw	r2, #38464	; 0x9640
  12b088:	e3402014 	movt	r2, #20
  12b08c:	ebfff3d4 	bl	127fe4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b090:	e51b000c 	ldr	r0, [fp, #-12]
  12b094:	eb000858 	bl	12d1fc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b098:	e51b300c 	ldr	r3, [fp, #-12]
  12b09c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b0a0:	e35300ff 	cmp	r3, #255	; 0xff
  12b0a4:	0a000005 	beq	12b0c0 <dhcp_discover+0x168>
    dhcp->tries++;
  12b0a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b0ac:	e5d3300a 	ldrb	r3, [r3, #10]
  12b0b0:	e2833001 	add	r3, r3, #1
  12b0b4:	e6ef2073 	uxtb	r2, r3
  12b0b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b0bc:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b0c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b0c4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b0c8:	e3530005 	cmp	r3, #5
  12b0cc:	8a000006 	bhi	12b0ec <dhcp_discover+0x194>
  12b0d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b0d4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b0d8:	e1a02003 	mov	r2, r3
  12b0dc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b0e0:	e1a03213 	lsl	r3, r3, r2
  12b0e4:	e6ff3073 	uxth	r3, r3
  12b0e8:	ea000000 	b	12b0f0 <dhcp_discover+0x198>
  12b0ec:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b0f0:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b0f4:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b0f8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b0fc:	e2833003 	add	r3, r3, #3
  12b100:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b104:	e3412062 	movt	r2, #4194	; 0x1062
  12b108:	e0c10293 	smull	r0, r1, r3, r2
  12b10c:	e1a022c1 	asr	r2, r1, #5
  12b110:	e1a03fc3 	asr	r3, r3, #31
  12b114:	e0423003 	sub	r3, r2, r3
  12b118:	e6ff2073 	uxth	r2, r3
  12b11c:	e51b300c 	ldr	r3, [fp, #-12]
  12b120:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b124:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b128:	e1a00003 	mov	r0, r3
  12b12c:	e24bd004 	sub	sp, fp, #4
  12b130:	e8bd8800 	pop	{fp, pc}

0012b134 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b134:	e92d4800 	push	{fp, lr}
  12b138:	e28db004 	add	fp, sp, #4
  12b13c:	e24dd020 	sub	sp, sp, #32
  12b140:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b144:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b148:	e3530000 	cmp	r3, #0
  12b14c:	1a000007 	bne	12b170 <dhcp_bind+0x3c>
  12b150:	e3080b90 	movw	r0, #35728	; 0x8b90
  12b154:	e3400014 	movt	r0, #20
  12b158:	ebff5fed 	bl	103114 <rt_kprintf>
  12b15c:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b160:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12b164:	e3400014 	movt	r0, #20
  12b168:	ebff7f09 	bl	10ad94 <sys_arch_assert>
  12b16c:	ea0000aa 	b	12b41c <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b170:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b174:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b178:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b17c:	e51b300c 	ldr	r3, [fp, #-12]
  12b180:	e3530000 	cmp	r3, #0
  12b184:	1a000007 	bne	12b1a8 <dhcp_bind+0x74>
  12b188:	e3080bac 	movw	r0, #35756	; 0x8bac
  12b18c:	e3400014 	movt	r0, #20
  12b190:	ebff5fdf 	bl	103114 <rt_kprintf>
  12b194:	e3001401 	movw	r1, #1025	; 0x401
  12b198:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12b19c:	e3400014 	movt	r0, #20
  12b1a0:	ebff7efb 	bl	10ad94 <sys_arch_assert>
  12b1a4:	ea00009c 	b	12b41c <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b1a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b1ac:	e3a02000 	mov	r2, #0
  12b1b0:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b1b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b1b8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b1bc:	e3730001 	cmn	r3, #1
  12b1c0:	0a000017 	beq	12b224 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b1c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b1c8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b1cc:	e283201e 	add	r2, r3, #30
  12b1d0:	e3083889 	movw	r3, #34953	; 0x8889
  12b1d4:	e3483888 	movt	r3, #34952	; 0x8888
  12b1d8:	e0832392 	umull	r2, r3, r2, r3
  12b1dc:	e1a032a3 	lsr	r3, r3, #5
  12b1e0:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b1e4:	e51b3008 	ldr	r3, [fp, #-8]
  12b1e8:	e3530801 	cmp	r3, #65536	; 0x10000
  12b1ec:	3a000001 	bcc	12b1f8 <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b1f0:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b1f4:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b1f8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1fc:	e6ff2073 	uxth	r2, r3
  12b200:	e51b300c 	ldr	r3, [fp, #-12]
  12b204:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b208:	e51b300c 	ldr	r3, [fp, #-12]
  12b20c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b210:	e3530000 	cmp	r3, #0
  12b214:	1a000002 	bne	12b224 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b218:	e51b300c 	ldr	r3, [fp, #-12]
  12b21c:	e3a02001 	mov	r2, #1
  12b220:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b224:	e51b300c 	ldr	r3, [fp, #-12]
  12b228:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b22c:	e3730001 	cmn	r3, #1
  12b230:	0a00001b 	beq	12b2a4 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b234:	e51b300c 	ldr	r3, [fp, #-12]
  12b238:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b23c:	e283201e 	add	r2, r3, #30
  12b240:	e3083889 	movw	r3, #34953	; 0x8889
  12b244:	e3483888 	movt	r3, #34952	; 0x8888
  12b248:	e0832392 	umull	r2, r3, r2, r3
  12b24c:	e1a032a3 	lsr	r3, r3, #5
  12b250:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b254:	e51b3008 	ldr	r3, [fp, #-8]
  12b258:	e3530801 	cmp	r3, #65536	; 0x10000
  12b25c:	3a000001 	bcc	12b268 <dhcp_bind+0x134>
      timeout = 0xffff;
  12b260:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b264:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b268:	e51b3008 	ldr	r3, [fp, #-8]
  12b26c:	e6ff2073 	uxth	r2, r3
  12b270:	e51b300c 	ldr	r3, [fp, #-12]
  12b274:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b278:	e51b300c 	ldr	r3, [fp, #-12]
  12b27c:	e1d331b8 	ldrh	r3, [r3, #24]
  12b280:	e3530000 	cmp	r3, #0
  12b284:	1a000002 	bne	12b294 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b288:	e51b300c 	ldr	r3, [fp, #-12]
  12b28c:	e3a02001 	mov	r2, #1
  12b290:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b294:	e51b300c 	ldr	r3, [fp, #-12]
  12b298:	e1d321b8 	ldrh	r2, [r3, #24]
  12b29c:	e51b300c 	ldr	r3, [fp, #-12]
  12b2a0:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b2a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b2a8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b2ac:	e3730001 	cmn	r3, #1
  12b2b0:	0a00001b 	beq	12b324 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b2b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b2b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b2bc:	e283201e 	add	r2, r3, #30
  12b2c0:	e3083889 	movw	r3, #34953	; 0x8889
  12b2c4:	e3483888 	movt	r3, #34952	; 0x8888
  12b2c8:	e0832392 	umull	r2, r3, r2, r3
  12b2cc:	e1a032a3 	lsr	r3, r3, #5
  12b2d0:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b2d4:	e51b3008 	ldr	r3, [fp, #-8]
  12b2d8:	e3530801 	cmp	r3, #65536	; 0x10000
  12b2dc:	3a000001 	bcc	12b2e8 <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b2e0:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b2e4:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b2e8:	e51b3008 	ldr	r3, [fp, #-8]
  12b2ec:	e6ff2073 	uxth	r2, r3
  12b2f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b2f4:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b2f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b2fc:	e1d331ba 	ldrh	r3, [r3, #26]
  12b300:	e3530000 	cmp	r3, #0
  12b304:	1a000002 	bne	12b314 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b308:	e51b300c 	ldr	r3, [fp, #-12]
  12b30c:	e3a02001 	mov	r2, #1
  12b310:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b314:	e51b300c 	ldr	r3, [fp, #-12]
  12b318:	e1d321ba 	ldrh	r2, [r3, #26]
  12b31c:	e51b300c 	ldr	r3, [fp, #-12]
  12b320:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b324:	e51b300c 	ldr	r3, [fp, #-12]
  12b328:	e1d321b8 	ldrh	r2, [r3, #24]
  12b32c:	e51b300c 	ldr	r3, [fp, #-12]
  12b330:	e1d331ba 	ldrh	r3, [r3, #26]
  12b334:	e1520003 	cmp	r2, r3
  12b338:	3a000006 	bcc	12b358 <dhcp_bind+0x224>
  12b33c:	e51b300c 	ldr	r3, [fp, #-12]
  12b340:	e1d331ba 	ldrh	r3, [r3, #26]
  12b344:	e3530000 	cmp	r3, #0
  12b348:	0a000002 	beq	12b358 <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b34c:	e51b300c 	ldr	r3, [fp, #-12]
  12b350:	e3a02000 	mov	r2, #0
  12b354:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b358:	e51b300c 	ldr	r3, [fp, #-12]
  12b35c:	e5d3300b 	ldrb	r3, [r3, #11]
  12b360:	e3530000 	cmp	r3, #0
  12b364:	0a000003 	beq	12b378 <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b368:	e51b300c 	ldr	r3, [fp, #-12]
  12b36c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b370:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b374:	ea000011 	b	12b3c0 <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b378:	e51b300c 	ldr	r3, [fp, #-12]
  12b37c:	e2833028 	add	r3, r3, #40	; 0x28
  12b380:	e5d33000 	ldrb	r3, [r3]
  12b384:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b388:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b38c:	e3530000 	cmp	r3, #0
  12b390:	ba000002 	blt	12b3a0 <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b394:	e3a030ff 	mov	r3, #255	; 0xff
  12b398:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b39c:	ea000007 	b	12b3c0 <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b3a0:	e55b300d 	ldrb	r3, [fp, #-13]
  12b3a4:	e35300bf 	cmp	r3, #191	; 0xbf
  12b3a8:	9a000002 	bls	12b3b8 <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b3ac:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b3b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b3b4:	ea000001 	b	12b3c0 <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b3b8:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b3bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b3c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b3c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b3c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b3cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b3d0:	e3530000 	cmp	r3, #0
  12b3d4:	1a000007 	bne	12b3f8 <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b3d8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b3e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b3e4:	e0033002 	and	r3, r3, r2
  12b3e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b3ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b3f0:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b3f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b3f8:	e3a0100a 	mov	r1, #10
  12b3fc:	e51b000c 	ldr	r0, [fp, #-12]
  12b400:	eb000215 	bl	12bc5c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b404:	e51b300c 	ldr	r3, [fp, #-12]
  12b408:	e2831028 	add	r1, r3, #40	; 0x28
  12b40c:	e24b3018 	sub	r3, fp, #24
  12b410:	e24b2014 	sub	r2, fp, #20
  12b414:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b418:	ebffb76b 	bl	1191cc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b41c:	e24bd004 	sub	sp, fp, #4
  12b420:	e8bd8800 	pop	{fp, pc}

0012b424 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b424:	e92d4800 	push	{fp, lr}
  12b428:	e28db004 	add	fp, sp, #4
  12b42c:	e24dd020 	sub	sp, sp, #32
  12b430:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b438:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b43c:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b440:	e3a01005 	mov	r1, #5
  12b444:	e51b000c 	ldr	r0, [fp, #-12]
  12b448:	eb000203 	bl	12bc5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b44c:	e3a02003 	mov	r2, #3
  12b450:	e51b100c 	ldr	r1, [fp, #-12]
  12b454:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b458:	eb00062f 	bl	12cd1c <dhcp_create_msg>
  12b45c:	e1a03000 	mov	r3, r0
  12b460:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b464:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b468:	e3530000 	cmp	r3, #0
  12b46c:	1a000037 	bne	12b550 <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b470:	e3a02002 	mov	r2, #2
  12b474:	e3a01039 	mov	r1, #57	; 0x39
  12b478:	e51b000c 	ldr	r0, [fp, #-12]
  12b47c:	eb00020e 	bl	12bcbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b484:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b488:	e1a01003 	mov	r1, r3
  12b48c:	e51b000c 	ldr	r0, [fp, #-12]
  12b490:	eb000258 	bl	12bdf8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b494:	e3a02004 	mov	r2, #4
  12b498:	e3a01037 	mov	r1, #55	; 0x37
  12b49c:	e51b000c 	ldr	r0, [fp, #-12]
  12b4a0:	eb000205 	bl	12bcbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b4a4:	e3a03000 	mov	r3, #0
  12b4a8:	e54b3005 	strb	r3, [fp, #-5]
  12b4ac:	ea000009 	b	12b4d8 <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b4b0:	e55b2005 	ldrb	r2, [fp, #-5]
  12b4b4:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b4b8:	e3403014 	movt	r3, #20
  12b4bc:	e7d33002 	ldrb	r3, [r3, r2]
  12b4c0:	e1a01003 	mov	r1, r3
  12b4c4:	e51b000c 	ldr	r0, [fp, #-12]
  12b4c8:	eb00022b 	bl	12bd7c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b4cc:	e55b3005 	ldrb	r3, [fp, #-5]
  12b4d0:	e2833001 	add	r3, r3, #1
  12b4d4:	e54b3005 	strb	r3, [fp, #-5]
  12b4d8:	e55b3005 	ldrb	r3, [fp, #-5]
  12b4dc:	e3530003 	cmp	r3, #3
  12b4e0:	9afffff2 	bls	12b4b0 <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b4e4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b4e8:	e51b000c 	ldr	r0, [fp, #-12]
  12b4ec:	eb0002bd 	bl	12bfe8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b4f0:	e51b000c 	ldr	r0, [fp, #-12]
  12b4f4:	eb000775 	bl	12d2d0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b4f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b4fc:	e593200c 	ldr	r2, [r3, #12]
  12b500:	e51b300c 	ldr	r3, [fp, #-12]
  12b504:	e1d331b4 	ldrh	r3, [r3, #20]
  12b508:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b50c:	e6ff3073 	uxth	r3, r3
  12b510:	e1a01003 	mov	r1, r3
  12b514:	e1a00002 	mov	r0, r2
  12b518:	ebffbc50 	bl	11a660 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b51c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b520:	e3403014 	movt	r3, #20
  12b524:	e5930000 	ldr	r0, [r3]
  12b528:	e51b300c 	ldr	r3, [fp, #-12]
  12b52c:	e593100c 	ldr	r1, [r3, #12]
  12b530:	e51b300c 	ldr	r3, [fp, #-12]
  12b534:	e2832024 	add	r2, r3, #36	; 0x24
  12b538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b53c:	e58d3000 	str	r3, [sp]
  12b540:	e3a03043 	mov	r3, #67	; 0x43
  12b544:	ebfff26e 	bl	127f04 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b548:	e51b000c 	ldr	r0, [fp, #-12]
  12b54c:	eb00072a 	bl	12d1fc <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b550:	e51b300c 	ldr	r3, [fp, #-12]
  12b554:	e5d3300a 	ldrb	r3, [r3, #10]
  12b558:	e35300ff 	cmp	r3, #255	; 0xff
  12b55c:	0a000005 	beq	12b578 <dhcp_renew+0x154>
    dhcp->tries++;
  12b560:	e51b300c 	ldr	r3, [fp, #-12]
  12b564:	e5d3300a 	ldrb	r3, [r3, #10]
  12b568:	e2833001 	add	r3, r3, #1
  12b56c:	e6ef2073 	uxtb	r2, r3
  12b570:	e51b300c 	ldr	r3, [fp, #-12]
  12b574:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b578:	e51b300c 	ldr	r3, [fp, #-12]
  12b57c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b580:	e3530009 	cmp	r3, #9
  12b584:	8a00000a 	bhi	12b5b4 <dhcp_renew+0x190>
  12b588:	e51b300c 	ldr	r3, [fp, #-12]
  12b58c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b590:	e6ff3073 	uxth	r3, r3
  12b594:	e1a02003 	mov	r2, r3
  12b598:	e1a02282 	lsl	r2, r2, #5
  12b59c:	e0422003 	sub	r2, r2, r3
  12b5a0:	e1a02102 	lsl	r2, r2, #2
  12b5a4:	e0823003 	add	r3, r2, r3
  12b5a8:	e1a03203 	lsl	r3, r3, #4
  12b5ac:	e6ff3073 	uxth	r3, r3
  12b5b0:	ea000000 	b	12b5b8 <dhcp_renew+0x194>
  12b5b4:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b5b8:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b5bc:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b5c0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b5c4:	e2833003 	add	r3, r3, #3
  12b5c8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b5cc:	e3412062 	movt	r2, #4194	; 0x1062
  12b5d0:	e0c10293 	smull	r0, r1, r3, r2
  12b5d4:	e1a022c1 	asr	r2, r1, #5
  12b5d8:	e1a03fc3 	asr	r3, r3, #31
  12b5dc:	e0423003 	sub	r3, r2, r3
  12b5e0:	e6ff2073 	uxth	r2, r3
  12b5e4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5e8:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b5ec:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b5f0:	e1a00003 	mov	r0, r3
  12b5f4:	e24bd004 	sub	sp, fp, #4
  12b5f8:	e8bd8800 	pop	{fp, pc}

0012b5fc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b5fc:	e92d4800 	push	{fp, lr}
  12b600:	e28db004 	add	fp, sp, #4
  12b604:	e24dd020 	sub	sp, sp, #32
  12b608:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b60c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b610:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b614:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b618:	e3a01004 	mov	r1, #4
  12b61c:	e51b000c 	ldr	r0, [fp, #-12]
  12b620:	eb00018d 	bl	12bc5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b624:	e3a02003 	mov	r2, #3
  12b628:	e51b100c 	ldr	r1, [fp, #-12]
  12b62c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b630:	eb0005b9 	bl	12cd1c <dhcp_create_msg>
  12b634:	e1a03000 	mov	r3, r0
  12b638:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b63c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b640:	e3530000 	cmp	r3, #0
  12b644:	1a000037 	bne	12b728 <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b648:	e3a02002 	mov	r2, #2
  12b64c:	e3a01039 	mov	r1, #57	; 0x39
  12b650:	e51b000c 	ldr	r0, [fp, #-12]
  12b654:	eb000198 	bl	12bcbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b658:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b65c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b660:	e1a01003 	mov	r1, r3
  12b664:	e51b000c 	ldr	r0, [fp, #-12]
  12b668:	eb0001e2 	bl	12bdf8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b66c:	e3a02004 	mov	r2, #4
  12b670:	e3a01037 	mov	r1, #55	; 0x37
  12b674:	e51b000c 	ldr	r0, [fp, #-12]
  12b678:	eb00018f 	bl	12bcbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b67c:	e3a03000 	mov	r3, #0
  12b680:	e54b3005 	strb	r3, [fp, #-5]
  12b684:	ea000009 	b	12b6b0 <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b688:	e55b2005 	ldrb	r2, [fp, #-5]
  12b68c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b690:	e3403014 	movt	r3, #20
  12b694:	e7d33002 	ldrb	r3, [r3, r2]
  12b698:	e1a01003 	mov	r1, r3
  12b69c:	e51b000c 	ldr	r0, [fp, #-12]
  12b6a0:	eb0001b5 	bl	12bd7c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b6a4:	e55b3005 	ldrb	r3, [fp, #-5]
  12b6a8:	e2833001 	add	r3, r3, #1
  12b6ac:	e54b3005 	strb	r3, [fp, #-5]
  12b6b0:	e55b3005 	ldrb	r3, [fp, #-5]
  12b6b4:	e3530003 	cmp	r3, #3
  12b6b8:	9afffff2 	bls	12b688 <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b6bc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b6c0:	e51b000c 	ldr	r0, [fp, #-12]
  12b6c4:	eb000247 	bl	12bfe8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b6c8:	e51b000c 	ldr	r0, [fp, #-12]
  12b6cc:	eb0006ff 	bl	12d2d0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b6d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b6d4:	e593200c 	ldr	r2, [r3, #12]
  12b6d8:	e51b300c 	ldr	r3, [fp, #-12]
  12b6dc:	e1d331b4 	ldrh	r3, [r3, #20]
  12b6e0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b6e4:	e6ff3073 	uxth	r3, r3
  12b6e8:	e1a01003 	mov	r1, r3
  12b6ec:	e1a00002 	mov	r0, r2
  12b6f0:	ebffbbda 	bl	11a660 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b6f4:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b6f8:	e3403014 	movt	r3, #20
  12b6fc:	e5930000 	ldr	r0, [r3]
  12b700:	e51b300c 	ldr	r3, [fp, #-12]
  12b704:	e593100c 	ldr	r1, [r3, #12]
  12b708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b70c:	e58d3000 	str	r3, [sp]
  12b710:	e3a03043 	mov	r3, #67	; 0x43
  12b714:	e3092640 	movw	r2, #38464	; 0x9640
  12b718:	e3402014 	movt	r2, #20
  12b71c:	ebfff1f8 	bl	127f04 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b720:	e51b000c 	ldr	r0, [fp, #-12]
  12b724:	eb0006b4 	bl	12d1fc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b728:	e51b300c 	ldr	r3, [fp, #-12]
  12b72c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b730:	e35300ff 	cmp	r3, #255	; 0xff
  12b734:	0a000005 	beq	12b750 <dhcp_rebind+0x154>
    dhcp->tries++;
  12b738:	e51b300c 	ldr	r3, [fp, #-12]
  12b73c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b740:	e2833001 	add	r3, r3, #1
  12b744:	e6ef2073 	uxtb	r2, r3
  12b748:	e51b300c 	ldr	r3, [fp, #-12]
  12b74c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b750:	e51b300c 	ldr	r3, [fp, #-12]
  12b754:	e5d3300a 	ldrb	r3, [r3, #10]
  12b758:	e3530009 	cmp	r3, #9
  12b75c:	8a00000a 	bhi	12b78c <dhcp_rebind+0x190>
  12b760:	e51b300c 	ldr	r3, [fp, #-12]
  12b764:	e5d3300a 	ldrb	r3, [r3, #10]
  12b768:	e6ff3073 	uxth	r3, r3
  12b76c:	e1a02003 	mov	r2, r3
  12b770:	e1a02282 	lsl	r2, r2, #5
  12b774:	e0422003 	sub	r2, r2, r3
  12b778:	e1a02102 	lsl	r2, r2, #2
  12b77c:	e0823003 	add	r3, r2, r3
  12b780:	e1a03183 	lsl	r3, r3, #3
  12b784:	e6ff3073 	uxth	r3, r3
  12b788:	ea000000 	b	12b790 <dhcp_rebind+0x194>
  12b78c:	e3023710 	movw	r3, #10000	; 0x2710
  12b790:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b794:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b798:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b79c:	e2833003 	add	r3, r3, #3
  12b7a0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b7a4:	e3412062 	movt	r2, #4194	; 0x1062
  12b7a8:	e0c10293 	smull	r0, r1, r3, r2
  12b7ac:	e1a022c1 	asr	r2, r1, #5
  12b7b0:	e1a03fc3 	asr	r3, r3, #31
  12b7b4:	e0423003 	sub	r3, r2, r3
  12b7b8:	e6ff2073 	uxth	r2, r3
  12b7bc:	e51b300c 	ldr	r3, [fp, #-12]
  12b7c0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b7c4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b7c8:	e1a00003 	mov	r0, r3
  12b7cc:	e24bd004 	sub	sp, fp, #4
  12b7d0:	e8bd8800 	pop	{fp, pc}

0012b7d4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12b7d4:	e92d4800 	push	{fp, lr}
  12b7d8:	e28db004 	add	fp, sp, #4
  12b7dc:	e24dd020 	sub	sp, sp, #32
  12b7e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b7e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b7e8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b7ec:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12b7f0:	e3a01003 	mov	r1, #3
  12b7f4:	e51b000c 	ldr	r0, [fp, #-12]
  12b7f8:	eb000117 	bl	12bc5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b7fc:	e3a02003 	mov	r2, #3
  12b800:	e51b100c 	ldr	r1, [fp, #-12]
  12b804:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b808:	eb000543 	bl	12cd1c <dhcp_create_msg>
  12b80c:	e1a03000 	mov	r3, r0
  12b810:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b814:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b818:	e3530000 	cmp	r3, #0
  12b81c:	1a00003e 	bne	12b91c <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b820:	e3a02002 	mov	r2, #2
  12b824:	e3a01039 	mov	r1, #57	; 0x39
  12b828:	e51b000c 	ldr	r0, [fp, #-12]
  12b82c:	eb000122 	bl	12bcbc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12b830:	e3a01d09 	mov	r1, #576	; 0x240
  12b834:	e51b000c 	ldr	r0, [fp, #-12]
  12b838:	eb00016e 	bl	12bdf8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b83c:	e3a02004 	mov	r2, #4
  12b840:	e3a01032 	mov	r1, #50	; 0x32
  12b844:	e51b000c 	ldr	r0, [fp, #-12]
  12b848:	eb00011b 	bl	12bcbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b84c:	e51b300c 	ldr	r3, [fp, #-12]
  12b850:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b854:	e1a00003 	mov	r0, r3
  12b858:	ebffaa9e 	bl	1162d8 <lwip_htonl>
  12b85c:	e1a03000 	mov	r3, r0
  12b860:	e1a01003 	mov	r1, r3
  12b864:	e51b000c 	ldr	r0, [fp, #-12]
  12b868:	eb000193 	bl	12bebc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b86c:	e3a02004 	mov	r2, #4
  12b870:	e3a01037 	mov	r1, #55	; 0x37
  12b874:	e51b000c 	ldr	r0, [fp, #-12]
  12b878:	eb00010f 	bl	12bcbc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b87c:	e3a03000 	mov	r3, #0
  12b880:	e54b3005 	strb	r3, [fp, #-5]
  12b884:	ea000009 	b	12b8b0 <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b888:	e55b2005 	ldrb	r2, [fp, #-5]
  12b88c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b890:	e3403014 	movt	r3, #20
  12b894:	e7d33002 	ldrb	r3, [r3, r2]
  12b898:	e1a01003 	mov	r1, r3
  12b89c:	e51b000c 	ldr	r0, [fp, #-12]
  12b8a0:	eb000135 	bl	12bd7c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b8a4:	e55b3005 	ldrb	r3, [fp, #-5]
  12b8a8:	e2833001 	add	r3, r3, #1
  12b8ac:	e54b3005 	strb	r3, [fp, #-5]
  12b8b0:	e55b3005 	ldrb	r3, [fp, #-5]
  12b8b4:	e3530003 	cmp	r3, #3
  12b8b8:	9afffff2 	bls	12b888 <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12b8bc:	e51b000c 	ldr	r0, [fp, #-12]
  12b8c0:	eb000682 	bl	12d2d0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b8c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b8c8:	e593200c 	ldr	r2, [r3, #12]
  12b8cc:	e51b300c 	ldr	r3, [fp, #-12]
  12b8d0:	e1d331b4 	ldrh	r3, [r3, #20]
  12b8d4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b8d8:	e6ff3073 	uxth	r3, r3
  12b8dc:	e1a01003 	mov	r1, r3
  12b8e0:	e1a00002 	mov	r0, r2
  12b8e4:	ebffbb5d 	bl	11a660 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b8e8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b8ec:	e3403014 	movt	r3, #20
  12b8f0:	e5930000 	ldr	r0, [r3]
  12b8f4:	e51b300c 	ldr	r3, [fp, #-12]
  12b8f8:	e593100c 	ldr	r1, [r3, #12]
  12b8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b900:	e58d3000 	str	r3, [sp]
  12b904:	e3a03043 	mov	r3, #67	; 0x43
  12b908:	e3092640 	movw	r2, #38464	; 0x9640
  12b90c:	e3402014 	movt	r2, #20
  12b910:	ebfff17b 	bl	127f04 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b914:	e51b000c 	ldr	r0, [fp, #-12]
  12b918:	eb000637 	bl	12d1fc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b91c:	e51b300c 	ldr	r3, [fp, #-12]
  12b920:	e5d3300a 	ldrb	r3, [r3, #10]
  12b924:	e35300ff 	cmp	r3, #255	; 0xff
  12b928:	0a000005 	beq	12b944 <dhcp_reboot+0x170>
    dhcp->tries++;
  12b92c:	e51b300c 	ldr	r3, [fp, #-12]
  12b930:	e5d3300a 	ldrb	r3, [r3, #10]
  12b934:	e2833001 	add	r3, r3, #1
  12b938:	e6ef2073 	uxtb	r2, r3
  12b93c:	e51b300c 	ldr	r3, [fp, #-12]
  12b940:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b944:	e51b300c 	ldr	r3, [fp, #-12]
  12b948:	e5d3300a 	ldrb	r3, [r3, #10]
  12b94c:	e3530009 	cmp	r3, #9
  12b950:	8a00000a 	bhi	12b980 <dhcp_reboot+0x1ac>
  12b954:	e51b300c 	ldr	r3, [fp, #-12]
  12b958:	e5d3300a 	ldrb	r3, [r3, #10]
  12b95c:	e6ff3073 	uxth	r3, r3
  12b960:	e1a02003 	mov	r2, r3
  12b964:	e1a02282 	lsl	r2, r2, #5
  12b968:	e0422003 	sub	r2, r2, r3
  12b96c:	e1a02102 	lsl	r2, r2, #2
  12b970:	e0823003 	add	r3, r2, r3
  12b974:	e1a03183 	lsl	r3, r3, #3
  12b978:	e6ff3073 	uxth	r3, r3
  12b97c:	ea000000 	b	12b984 <dhcp_reboot+0x1b0>
  12b980:	e3023710 	movw	r3, #10000	; 0x2710
  12b984:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b988:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b98c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b990:	e2833003 	add	r3, r3, #3
  12b994:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b998:	e3412062 	movt	r2, #4194	; 0x1062
  12b99c:	e0c10293 	smull	r0, r1, r3, r2
  12b9a0:	e1a022c1 	asr	r2, r1, #5
  12b9a4:	e1a03fc3 	asr	r3, r3, #31
  12b9a8:	e0423003 	sub	r3, r2, r3
  12b9ac:	e6ff2073 	uxth	r2, r3
  12b9b0:	e51b300c 	ldr	r3, [fp, #-12]
  12b9b4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b9b8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b9bc:	e1a00003 	mov	r0, r3
  12b9c0:	e24bd004 	sub	sp, fp, #4
  12b9c4:	e8bd8800 	pop	{fp, pc}

0012b9c8 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12b9c8:	e92d4800 	push	{fp, lr}
  12b9cc:	e28db004 	add	fp, sp, #4
  12b9d0:	e24dd020 	sub	sp, sp, #32
  12b9d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b9d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b9dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b9e0:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12b9e4:	e51b3008 	ldr	r3, [fp, #-8]
  12b9e8:	e3530000 	cmp	r3, #0
  12b9ec:	1a000001 	bne	12b9f8 <dhcp_release+0x30>
    return ERR_ARG;
  12b9f0:	e3e0300f 	mvn	r3, #15
  12b9f4:	ea000068 	b	12bb9c <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12b9f8:	e51b3008 	ldr	r3, [fp, #-8]
  12b9fc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12ba00:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12ba04:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ba08:	eb00067b 	bl	12d3fc <dhcp_supplied_address>
  12ba0c:	e1a03000 	mov	r3, r0
  12ba10:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12ba14:	e3a01000 	mov	r1, #0
  12ba18:	e51b0008 	ldr	r0, [fp, #-8]
  12ba1c:	eb00008e 	bl	12bc5c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12ba20:	e51b3008 	ldr	r3, [fp, #-8]
  12ba24:	e3a02000 	mov	r2, #0
  12ba28:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12ba2c:	e51b3008 	ldr	r3, [fp, #-8]
  12ba30:	e3a02000 	mov	r2, #0
  12ba34:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12ba38:	e51b3008 	ldr	r3, [fp, #-8]
  12ba3c:	e3a02000 	mov	r2, #0
  12ba40:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12ba44:	e51b3008 	ldr	r3, [fp, #-8]
  12ba48:	e3a02000 	mov	r2, #0
  12ba4c:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12ba50:	e51b3008 	ldr	r3, [fp, #-8]
  12ba54:	e3a02000 	mov	r2, #0
  12ba58:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12ba5c:	e51b3008 	ldr	r3, [fp, #-8]
  12ba60:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12ba64:	e51b3008 	ldr	r3, [fp, #-8]
  12ba68:	e5832038 	str	r2, [r3, #56]	; 0x38
  12ba6c:	e51b3008 	ldr	r3, [fp, #-8]
  12ba70:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12ba74:	e51b3008 	ldr	r3, [fp, #-8]
  12ba78:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12ba7c:	e51b3008 	ldr	r3, [fp, #-8]
  12ba80:	e3a02000 	mov	r2, #0
  12ba84:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12ba88:	e51b3008 	ldr	r3, [fp, #-8]
  12ba8c:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12ba90:	e51b3008 	ldr	r3, [fp, #-8]
  12ba94:	e1c322b0 	strh	r2, [r3, #32]
  12ba98:	e51b3008 	ldr	r3, [fp, #-8]
  12ba9c:	e1d322b0 	ldrh	r2, [r3, #32]
  12baa0:	e51b3008 	ldr	r3, [fp, #-8]
  12baa4:	e1c321be 	strh	r2, [r3, #30]
  12baa8:	e51b3008 	ldr	r3, [fp, #-8]
  12baac:	e1d321be 	ldrh	r2, [r3, #30]
  12bab0:	e51b3008 	ldr	r3, [fp, #-8]
  12bab4:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12bab8:	e55b3009 	ldrb	r3, [fp, #-9]
  12babc:	e3530000 	cmp	r3, #0
  12bac0:	1a000001 	bne	12bacc <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12bac4:	e3a03000 	mov	r3, #0
  12bac8:	ea000033 	b	12bb9c <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12bacc:	e3a02007 	mov	r2, #7
  12bad0:	e51b1008 	ldr	r1, [fp, #-8]
  12bad4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bad8:	eb00048f 	bl	12cd1c <dhcp_create_msg>
  12badc:	e1a03000 	mov	r3, r0
  12bae0:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12bae4:	e15b30da 	ldrsb	r3, [fp, #-10]
  12bae8:	e3530000 	cmp	r3, #0
  12baec:	1a000021 	bne	12bb78 <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12baf0:	e3a02004 	mov	r2, #4
  12baf4:	e3a01036 	mov	r1, #54	; 0x36
  12baf8:	e51b0008 	ldr	r0, [fp, #-8]
  12bafc:	eb00006e 	bl	12bcbc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12bb00:	e51b3010 	ldr	r3, [fp, #-16]
  12bb04:	e1a00003 	mov	r0, r3
  12bb08:	ebffa9f2 	bl	1162d8 <lwip_htonl>
  12bb0c:	e1a03000 	mov	r3, r0
  12bb10:	e1a01003 	mov	r1, r3
  12bb14:	e51b0008 	ldr	r0, [fp, #-8]
  12bb18:	eb0000e7 	bl	12bebc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12bb1c:	e51b0008 	ldr	r0, [fp, #-8]
  12bb20:	eb0005ea 	bl	12d2d0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bb24:	e51b3008 	ldr	r3, [fp, #-8]
  12bb28:	e593200c 	ldr	r2, [r3, #12]
  12bb2c:	e51b3008 	ldr	r3, [fp, #-8]
  12bb30:	e1d331b4 	ldrh	r3, [r3, #20]
  12bb34:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bb38:	e6ff3073 	uxth	r3, r3
  12bb3c:	e1a01003 	mov	r1, r3
  12bb40:	e1a00002 	mov	r0, r2
  12bb44:	ebffbac5 	bl	11a660 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12bb48:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12bb4c:	e3403014 	movt	r3, #20
  12bb50:	e5930000 	ldr	r0, [r3]
  12bb54:	e51b3008 	ldr	r3, [fp, #-8]
  12bb58:	e593100c 	ldr	r1, [r3, #12]
  12bb5c:	e24b2010 	sub	r2, fp, #16
  12bb60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bb64:	e58d3000 	str	r3, [sp]
  12bb68:	e3a03043 	mov	r3, #67	; 0x43
  12bb6c:	ebfff0e4 	bl	127f04 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bb70:	e51b0008 	ldr	r0, [fp, #-8]
  12bb74:	eb0005a0 	bl	12d1fc <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12bb78:	e309363c 	movw	r3, #38460	; 0x963c
  12bb7c:	e3403014 	movt	r3, #20
  12bb80:	e309263c 	movw	r2, #38460	; 0x963c
  12bb84:	e3402014 	movt	r2, #20
  12bb88:	e309163c 	movw	r1, #38460	; 0x963c
  12bb8c:	e3401014 	movt	r1, #20
  12bb90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bb94:	ebffb58c 	bl	1191cc <netif_set_addr>

  return result;
  12bb98:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12bb9c:	e1a00003 	mov	r0, r3
  12bba0:	e24bd004 	sub	sp, fp, #4
  12bba4:	e8bd8800 	pop	{fp, pc}

0012bba8 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12bba8:	e92d4800 	push	{fp, lr}
  12bbac:	e28db004 	add	fp, sp, #4
  12bbb0:	e24dd010 	sub	sp, sp, #16
  12bbb4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12bbb8:	e51b3010 	ldr	r3, [fp, #-16]
  12bbbc:	e3530000 	cmp	r3, #0
  12bbc0:	1a000007 	bne	12bbe4 <dhcp_stop+0x3c>
  12bbc4:	e3080bc4 	movw	r0, #35780	; 0x8bc4
  12bbc8:	e3400014 	movt	r0, #20
  12bbcc:	ebff5d50 	bl	103114 <rt_kprintf>
  12bbd0:	e3001543 	movw	r1, #1347	; 0x543
  12bbd4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12bbd8:	e3400014 	movt	r0, #20
  12bbdc:	ebff7c6c 	bl	10ad94 <sys_arch_assert>
  12bbe0:	ea00001b 	b	12bc54 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bbe4:	e51b3010 	ldr	r3, [fp, #-16]
  12bbe8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bbec:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bbf0:	e51b3008 	ldr	r3, [fp, #-8]
  12bbf4:	e3530000 	cmp	r3, #0
  12bbf8:	0a000015 	beq	12bc54 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12bbfc:	e51b3008 	ldr	r3, [fp, #-8]
  12bc00:	e5933004 	ldr	r3, [r3, #4]
  12bc04:	e3530000 	cmp	r3, #0
  12bc08:	0a000006 	beq	12bc28 <dhcp_stop+0x80>
  12bc0c:	e3080b7c 	movw	r0, #35708	; 0x8b7c
  12bc10:	e3400014 	movt	r0, #20
  12bc14:	ebff5d3e 	bl	103114 <rt_kprintf>
  12bc18:	e3a01e55 	mov	r1, #1360	; 0x550
  12bc1c:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12bc20:	e3400014 	movt	r0, #20
  12bc24:	ebff7c5a 	bl	10ad94 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bc28:	e3a01000 	mov	r1, #0
  12bc2c:	e51b0008 	ldr	r0, [fp, #-8]
  12bc30:	eb000009 	bl	12bc5c <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bc34:	e51b3008 	ldr	r3, [fp, #-8]
  12bc38:	e5d33008 	ldrb	r3, [r3, #8]
  12bc3c:	e3530000 	cmp	r3, #0
  12bc40:	0a000003 	beq	12bc54 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bc44:	ebfff868 	bl	129dec <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bc48:	e51b3008 	ldr	r3, [fp, #-8]
  12bc4c:	e3a02000 	mov	r2, #0
  12bc50:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bc54:	e24bd004 	sub	sp, fp, #4
  12bc58:	e8bd8800 	pop	{fp, pc}

0012bc5c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bc5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bc60:	e28db000 	add	fp, sp, #0
  12bc64:	e24dd00c 	sub	sp, sp, #12
  12bc68:	e50b0008 	str	r0, [fp, #-8]
  12bc6c:	e1a03001 	mov	r3, r1
  12bc70:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bc74:	e51b3008 	ldr	r3, [fp, #-8]
  12bc78:	e5d33009 	ldrb	r3, [r3, #9]
  12bc7c:	e55b2009 	ldrb	r2, [fp, #-9]
  12bc80:	e1520003 	cmp	r2, r3
  12bc84:	0a000008 	beq	12bcac <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bc88:	e51b3008 	ldr	r3, [fp, #-8]
  12bc8c:	e55b2009 	ldrb	r2, [fp, #-9]
  12bc90:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bc94:	e51b3008 	ldr	r3, [fp, #-8]
  12bc98:	e3a02000 	mov	r2, #0
  12bc9c:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bca0:	e51b3008 	ldr	r3, [fp, #-8]
  12bca4:	e3a02000 	mov	r2, #0
  12bca8:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bcac:	e320f000 	nop	{0}
  12bcb0:	e28bd000 	add	sp, fp, #0
  12bcb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bcb8:	e12fff1e 	bx	lr

0012bcbc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bcbc:	e92d4800 	push	{fp, lr}
  12bcc0:	e28db004 	add	fp, sp, #4
  12bcc4:	e24dd008 	sub	sp, sp, #8
  12bcc8:	e50b0008 	str	r0, [fp, #-8]
  12bccc:	e1a03001 	mov	r3, r1
  12bcd0:	e54b3009 	strb	r3, [fp, #-9]
  12bcd4:	e1a03002 	mov	r3, r2
  12bcd8:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12bcdc:	e51b3008 	ldr	r3, [fp, #-8]
  12bce0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bce4:	e1a02003 	mov	r2, r3
  12bce8:	e55b300a 	ldrb	r3, [fp, #-10]
  12bcec:	e0823003 	add	r3, r2, r3
  12bcf0:	e2833002 	add	r3, r3, #2
  12bcf4:	e3530044 	cmp	r3, #68	; 0x44
  12bcf8:	9a000006 	bls	12bd18 <dhcp_option+0x5c>
  12bcfc:	e3080be0 	movw	r0, #35808	; 0x8be0
  12bd00:	e3400014 	movt	r0, #20
  12bd04:	ebff5d02 	bl	103114 <rt_kprintf>
  12bd08:	e3001571 	movw	r1, #1393	; 0x571
  12bd0c:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12bd10:	e3400014 	movt	r0, #20
  12bd14:	ebff7c1e 	bl	10ad94 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12bd18:	e51b3008 	ldr	r3, [fp, #-8]
  12bd1c:	e5932010 	ldr	r2, [r3, #16]
  12bd20:	e51b3008 	ldr	r3, [fp, #-8]
  12bd24:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd28:	e2831001 	add	r1, r3, #1
  12bd2c:	e6ff0071 	uxth	r0, r1
  12bd30:	e51b1008 	ldr	r1, [fp, #-8]
  12bd34:	e1c101b4 	strh	r0, [r1, #20]
  12bd38:	e0823003 	add	r3, r2, r3
  12bd3c:	e55b2009 	ldrb	r2, [fp, #-9]
  12bd40:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12bd44:	e51b3008 	ldr	r3, [fp, #-8]
  12bd48:	e5932010 	ldr	r2, [r3, #16]
  12bd4c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd50:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd54:	e2831001 	add	r1, r3, #1
  12bd58:	e6ff0071 	uxth	r0, r1
  12bd5c:	e51b1008 	ldr	r1, [fp, #-8]
  12bd60:	e1c101b4 	strh	r0, [r1, #20]
  12bd64:	e0823003 	add	r3, r2, r3
  12bd68:	e55b200a 	ldrb	r2, [fp, #-10]
  12bd6c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bd70:	e320f000 	nop	{0}
  12bd74:	e24bd004 	sub	sp, fp, #4
  12bd78:	e8bd8800 	pop	{fp, pc}

0012bd7c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12bd7c:	e92d4800 	push	{fp, lr}
  12bd80:	e28db004 	add	fp, sp, #4
  12bd84:	e24dd008 	sub	sp, sp, #8
  12bd88:	e50b0008 	str	r0, [fp, #-8]
  12bd8c:	e1a03001 	mov	r3, r1
  12bd90:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12bd94:	e51b3008 	ldr	r3, [fp, #-8]
  12bd98:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd9c:	e3530043 	cmp	r3, #67	; 0x43
  12bda0:	9a000006 	bls	12bdc0 <dhcp_option_byte+0x44>
  12bda4:	e3080c28 	movw	r0, #35880	; 0x8c28
  12bda8:	e3400014 	movt	r0, #20
  12bdac:	ebff5cd8 	bl	103114 <rt_kprintf>
  12bdb0:	e300157c 	movw	r1, #1404	; 0x57c
  12bdb4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12bdb8:	e3400014 	movt	r0, #20
  12bdbc:	ebff7bf4 	bl	10ad94 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12bdc0:	e51b3008 	ldr	r3, [fp, #-8]
  12bdc4:	e5932010 	ldr	r2, [r3, #16]
  12bdc8:	e51b3008 	ldr	r3, [fp, #-8]
  12bdcc:	e1d331b4 	ldrh	r3, [r3, #20]
  12bdd0:	e2831001 	add	r1, r3, #1
  12bdd4:	e6ff0071 	uxth	r0, r1
  12bdd8:	e51b1008 	ldr	r1, [fp, #-8]
  12bddc:	e1c101b4 	strh	r0, [r1, #20]
  12bde0:	e0823003 	add	r3, r2, r3
  12bde4:	e55b2009 	ldrb	r2, [fp, #-9]
  12bde8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bdec:	e320f000 	nop	{0}
  12bdf0:	e24bd004 	sub	sp, fp, #4
  12bdf4:	e8bd8800 	pop	{fp, pc}

0012bdf8 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12bdf8:	e92d4800 	push	{fp, lr}
  12bdfc:	e28db004 	add	fp, sp, #4
  12be00:	e24dd008 	sub	sp, sp, #8
  12be04:	e50b0008 	str	r0, [fp, #-8]
  12be08:	e1a03001 	mov	r3, r1
  12be0c:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12be10:	e51b3008 	ldr	r3, [fp, #-8]
  12be14:	e1d331b4 	ldrh	r3, [r3, #20]
  12be18:	e2833002 	add	r3, r3, #2
  12be1c:	e3530044 	cmp	r3, #68	; 0x44
  12be20:	9a000006 	bls	12be40 <dhcp_option_short+0x48>
  12be24:	e3080c64 	movw	r0, #35940	; 0x8c64
  12be28:	e3400014 	movt	r0, #20
  12be2c:	ebff5cb8 	bl	103114 <rt_kprintf>
  12be30:	e3001583 	movw	r1, #1411	; 0x583
  12be34:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12be38:	e3400014 	movt	r0, #20
  12be3c:	ebff7bd4 	bl	10ad94 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12be40:	e15b30ba 	ldrh	r3, [fp, #-10]
  12be44:	e1a03423 	lsr	r3, r3, #8
  12be48:	e6ffc073 	uxth	ip, r3
  12be4c:	e51b3008 	ldr	r3, [fp, #-8]
  12be50:	e5932010 	ldr	r2, [r3, #16]
  12be54:	e51b3008 	ldr	r3, [fp, #-8]
  12be58:	e1d331b4 	ldrh	r3, [r3, #20]
  12be5c:	e2831001 	add	r1, r3, #1
  12be60:	e6ff0071 	uxth	r0, r1
  12be64:	e51b1008 	ldr	r1, [fp, #-8]
  12be68:	e1c101b4 	strh	r0, [r1, #20]
  12be6c:	e6ef107c 	uxtb	r1, ip
  12be70:	e0823003 	add	r3, r2, r3
  12be74:	e1a02001 	mov	r2, r1
  12be78:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12be7c:	e51b3008 	ldr	r3, [fp, #-8]
  12be80:	e5932010 	ldr	r2, [r3, #16]
  12be84:	e51b3008 	ldr	r3, [fp, #-8]
  12be88:	e1d331b4 	ldrh	r3, [r3, #20]
  12be8c:	e2831001 	add	r1, r3, #1
  12be90:	e6ff0071 	uxth	r0, r1
  12be94:	e51b1008 	ldr	r1, [fp, #-8]
  12be98:	e1c101b4 	strh	r0, [r1, #20]
  12be9c:	e15b10ba 	ldrh	r1, [fp, #-10]
  12bea0:	e6ef1071 	uxtb	r1, r1
  12bea4:	e0823003 	add	r3, r2, r3
  12bea8:	e1a02001 	mov	r2, r1
  12beac:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12beb0:	e320f000 	nop	{0}
  12beb4:	e24bd004 	sub	sp, fp, #4
  12beb8:	e8bd8800 	pop	{fp, pc}

0012bebc <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12bebc:	e92d4800 	push	{fp, lr}
  12bec0:	e28db004 	add	fp, sp, #4
  12bec4:	e24dd008 	sub	sp, sp, #8
  12bec8:	e50b0008 	str	r0, [fp, #-8]
  12becc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12bed0:	e51b3008 	ldr	r3, [fp, #-8]
  12bed4:	e1d331b4 	ldrh	r3, [r3, #20]
  12bed8:	e2833004 	add	r3, r3, #4
  12bedc:	e3530044 	cmp	r3, #68	; 0x44
  12bee0:	9a000006 	bls	12bf00 <dhcp_option_long+0x44>
  12bee4:	e3080ca8 	movw	r0, #36008	; 0x8ca8
  12bee8:	e3400014 	movt	r0, #20
  12beec:	ebff5c88 	bl	103114 <rt_kprintf>
  12bef0:	e300158b 	movw	r1, #1419	; 0x58b
  12bef4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12bef8:	e3400014 	movt	r0, #20
  12befc:	ebff7ba4 	bl	10ad94 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12bf00:	e51b300c 	ldr	r3, [fp, #-12]
  12bf04:	e1a0cc23 	lsr	ip, r3, #24
  12bf08:	e51b3008 	ldr	r3, [fp, #-8]
  12bf0c:	e5932010 	ldr	r2, [r3, #16]
  12bf10:	e51b3008 	ldr	r3, [fp, #-8]
  12bf14:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf18:	e2831001 	add	r1, r3, #1
  12bf1c:	e6ff0071 	uxth	r0, r1
  12bf20:	e51b1008 	ldr	r1, [fp, #-8]
  12bf24:	e1c101b4 	strh	r0, [r1, #20]
  12bf28:	e6ef107c 	uxtb	r1, ip
  12bf2c:	e0823003 	add	r3, r2, r3
  12bf30:	e1a02001 	mov	r2, r1
  12bf34:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12bf38:	e51b300c 	ldr	r3, [fp, #-12]
  12bf3c:	e1a0c823 	lsr	ip, r3, #16
  12bf40:	e51b3008 	ldr	r3, [fp, #-8]
  12bf44:	e5932010 	ldr	r2, [r3, #16]
  12bf48:	e51b3008 	ldr	r3, [fp, #-8]
  12bf4c:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf50:	e2831001 	add	r1, r3, #1
  12bf54:	e6ff0071 	uxth	r0, r1
  12bf58:	e51b1008 	ldr	r1, [fp, #-8]
  12bf5c:	e1c101b4 	strh	r0, [r1, #20]
  12bf60:	e6ef107c 	uxtb	r1, ip
  12bf64:	e0823003 	add	r3, r2, r3
  12bf68:	e1a02001 	mov	r2, r1
  12bf6c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12bf70:	e51b300c 	ldr	r3, [fp, #-12]
  12bf74:	e1a0c423 	lsr	ip, r3, #8
  12bf78:	e51b3008 	ldr	r3, [fp, #-8]
  12bf7c:	e5932010 	ldr	r2, [r3, #16]
  12bf80:	e51b3008 	ldr	r3, [fp, #-8]
  12bf84:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf88:	e2831001 	add	r1, r3, #1
  12bf8c:	e6ff0071 	uxth	r0, r1
  12bf90:	e51b1008 	ldr	r1, [fp, #-8]
  12bf94:	e1c101b4 	strh	r0, [r1, #20]
  12bf98:	e6ef107c 	uxtb	r1, ip
  12bf9c:	e0823003 	add	r3, r2, r3
  12bfa0:	e1a02001 	mov	r2, r1
  12bfa4:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12bfa8:	e51b3008 	ldr	r3, [fp, #-8]
  12bfac:	e5932010 	ldr	r2, [r3, #16]
  12bfb0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfb4:	e1d331b4 	ldrh	r3, [r3, #20]
  12bfb8:	e2831001 	add	r1, r3, #1
  12bfbc:	e6ff0071 	uxth	r0, r1
  12bfc0:	e51b1008 	ldr	r1, [fp, #-8]
  12bfc4:	e1c101b4 	strh	r0, [r1, #20]
  12bfc8:	e51b100c 	ldr	r1, [fp, #-12]
  12bfcc:	e6ef1071 	uxtb	r1, r1
  12bfd0:	e0823003 	add	r3, r2, r3
  12bfd4:	e1a02001 	mov	r2, r1
  12bfd8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bfdc:	e320f000 	nop	{0}
  12bfe0:	e24bd004 	sub	sp, fp, #4
  12bfe4:	e8bd8800 	pop	{fp, pc}

0012bfe8 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12bfe8:	e92d4800 	push	{fp, lr}
  12bfec:	e28db004 	add	fp, sp, #4
  12bff0:	e24dd018 	sub	sp, sp, #24
  12bff4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12bff8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12bffc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c000:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c004:	e3530000 	cmp	r3, #0
  12c008:	0a00003c 	beq	12c100 <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12c00c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c010:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c014:	e1a00003 	mov	r0, r3
  12c018:	eb005462 	bl	1411a8 <strlen>
  12c01c:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12c020:	e51b3010 	ldr	r3, [fp, #-16]
  12c024:	e3530000 	cmp	r3, #0
  12c028:	0a000034 	beq	12c100 <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12c02c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c030:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c034:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12c038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c03c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c040:	e2633041 	rsb	r3, r3, #65	; 0x41
  12c044:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12c048:	e51b2010 	ldr	r2, [fp, #-16]
  12c04c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c050:	e1520003 	cmp	r2, r3
  12c054:	9a000006 	bls	12c074 <dhcp_option_hostname+0x8c>
  12c058:	e3080ce8 	movw	r0, #36072	; 0x8ce8
  12c05c:	e3400014 	movt	r0, #20
  12c060:	ebff5c2b 	bl	103114 <rt_kprintf>
  12c064:	e300159e 	movw	r1, #1438	; 0x59e
  12c068:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c06c:	e3400014 	movt	r0, #20
  12c070:	ebff7b47 	bl	10ad94 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12c074:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c078:	e51b3010 	ldr	r3, [fp, #-16]
  12c07c:	e1520003 	cmp	r2, r3
  12c080:	31a03002 	movcc	r3, r2
  12c084:	21a03003 	movcs	r3, r3
  12c088:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c08c:	e51b3008 	ldr	r3, [fp, #-8]
  12c090:	e35300ff 	cmp	r3, #255	; 0xff
  12c094:	9a000006 	bls	12c0b4 <dhcp_option_hostname+0xcc>
  12c098:	e3080ce8 	movw	r0, #36072	; 0x8ce8
  12c09c:	e3400014 	movt	r0, #20
  12c0a0:	ebff5c1b 	bl	103114 <rt_kprintf>
  12c0a4:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c0a8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c0ac:	e3400014 	movt	r0, #20
  12c0b0:	ebff7b37 	bl	10ad94 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c0b4:	e51b3008 	ldr	r3, [fp, #-8]
  12c0b8:	e6ef3073 	uxtb	r3, r3
  12c0bc:	e1a02003 	mov	r2, r3
  12c0c0:	e3a0100c 	mov	r1, #12
  12c0c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c0c8:	ebfffefb 	bl	12bcbc <dhcp_option>
      while (len--) {
  12c0cc:	ea000006 	b	12c0ec <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c0d0:	e51b300c 	ldr	r3, [fp, #-12]
  12c0d4:	e2832001 	add	r2, r3, #1
  12c0d8:	e50b200c 	str	r2, [fp, #-12]
  12c0dc:	e5d33000 	ldrb	r3, [r3]
  12c0e0:	e1a01003 	mov	r1, r3
  12c0e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c0e8:	ebffff23 	bl	12bd7c <dhcp_option_byte>
      while (len--) {
  12c0ec:	e51b3008 	ldr	r3, [fp, #-8]
  12c0f0:	e2432001 	sub	r2, r3, #1
  12c0f4:	e50b2008 	str	r2, [fp, #-8]
  12c0f8:	e3530000 	cmp	r3, #0
  12c0fc:	1afffff3 	bne	12c0d0 <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c100:	e320f000 	nop	{0}
  12c104:	e24bd004 	sub	sp, fp, #4
  12c108:	e8bd8800 	pop	{fp, pc}

0012c10c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c10c:	e92d4800 	push	{fp, lr}
  12c110:	e28db004 	add	fp, sp, #4
  12c114:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c118:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c11c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c120:	e3a03000 	mov	r3, #0
  12c124:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c128:	e3a03000 	mov	r3, #0
  12c12c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c130:	e3a0200a 	mov	r2, #10
  12c134:	e3a01000 	mov	r1, #0
  12c138:	e30c0c24 	movw	r0, #52260	; 0xcc24
  12c13c:	e3400015 	movt	r0, #21
  12c140:	eb005387 	bl	140f64 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c144:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c148:	e1d330ba 	ldrh	r3, [r3, #10]
  12c14c:	e353002b 	cmp	r3, #43	; 0x2b
  12c150:	8a000001 	bhi	12c15c <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c154:	e3e03001 	mvn	r3, #1
  12c158:	ea00022e 	b	12ca18 <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c15c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c160:	e5932004 	ldr	r2, [r3, #4]
  12c164:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c168:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c16c:	e3a030f0 	mov	r3, #240	; 0xf0
  12c170:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c174:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c178:	e1d330b8 	ldrh	r3, [r3, #8]
  12c17c:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c180:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c184:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c188:	ea00000c 	b	12c1c0 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c18c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c190:	e1d330ba 	ldrh	r3, [r3, #10]
  12c194:	e15b20be 	ldrh	r2, [fp, #-14]
  12c198:	e0423003 	sub	r3, r2, r3
  12c19c:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c1a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c1a4:	e1d330ba 	ldrh	r3, [r3, #10]
  12c1a8:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c1ac:	e0423003 	sub	r3, r2, r3
  12c1b0:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c1b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c1b8:	e5933000 	ldr	r3, [r3]
  12c1bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c1c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c1c4:	e3530000 	cmp	r3, #0
  12c1c8:	0a000004 	beq	12c1e0 <dhcp_parse_reply+0xd4>
  12c1cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c1d0:	e1d330ba 	ldrh	r3, [r3, #10]
  12c1d4:	e15b20be 	ldrh	r2, [fp, #-14]
  12c1d8:	e1520003 	cmp	r2, r3
  12c1dc:	2affffea 	bcs	12c18c <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c1e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c1e4:	e3530000 	cmp	r3, #0
  12c1e8:	1a000001 	bne	12c1f4 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c1ec:	e3e03001 	mvn	r3, #1
  12c1f0:	ea000208 	b	12ca18 <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c1f4:	e15b30be 	ldrh	r3, [fp, #-14]
  12c1f8:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c1fc:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c200:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c204:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c208:	e5933004 	ldr	r3, [r3, #4]
  12c20c:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c210:	ea0001be 	b	12c910 <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c214:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c218:	e51b2008 	ldr	r2, [fp, #-8]
  12c21c:	e0823003 	add	r3, r2, r3
  12c220:	e5d33000 	ldrb	r3, [r3]
  12c224:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c228:	e3a03000 	mov	r3, #0
  12c22c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c230:	e3e03000 	mvn	r3, #0
  12c234:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c238:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c23c:	e2833002 	add	r3, r3, #2
  12c240:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c244:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c248:	e2833001 	add	r3, r3, #1
  12c24c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c250:	e1d220ba 	ldrh	r2, [r2, #10]
  12c254:	e1530002 	cmp	r3, r2
  12c258:	aa000006 	bge	12c278 <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c25c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c260:	e2833001 	add	r3, r3, #1
  12c264:	e51b2008 	ldr	r2, [fp, #-8]
  12c268:	e0823003 	add	r3, r2, r3
  12c26c:	e5d33000 	ldrb	r3, [r3]
  12c270:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c274:	ea00000a 	b	12c2a4 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c278:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c27c:	e5933000 	ldr	r3, [r3]
  12c280:	e3530000 	cmp	r3, #0
  12c284:	0a000004 	beq	12c29c <dhcp_parse_reply+0x190>
  12c288:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c28c:	e5933000 	ldr	r3, [r3]
  12c290:	e5933004 	ldr	r3, [r3, #4]
  12c294:	e5d33000 	ldrb	r3, [r3]
  12c298:	ea000000 	b	12c2a0 <dhcp_parse_reply+0x194>
  12c29c:	e3a03000 	mov	r3, #0
  12c2a0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c2a4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c2a8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c2ac:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c2b0:	e353003b 	cmp	r3, #59	; 0x3b
  12c2b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c2b8:	ea0000ed 	b	12c674 <dhcp_parse_reply+0x568>
  12c2bc:	0012c3ac 	.word	0x0012c3ac
  12c2c0:	0012c3cc 	.word	0x0012c3cc
  12c2c4:	0012c674 	.word	0x0012c674
  12c2c8:	0012c408 	.word	0x0012c408
  12c2cc:	0012c674 	.word	0x0012c674
  12c2d0:	0012c674 	.word	0x0012c674
  12c2d4:	0012c450 	.word	0x0012c450
  12c2d8:	0012c674 	.word	0x0012c674
  12c2dc:	0012c674 	.word	0x0012c674
  12c2e0:	0012c674 	.word	0x0012c674
  12c2e4:	0012c674 	.word	0x0012c674
  12c2e8:	0012c674 	.word	0x0012c674
  12c2ec:	0012c674 	.word	0x0012c674
  12c2f0:	0012c674 	.word	0x0012c674
  12c2f4:	0012c674 	.word	0x0012c674
  12c2f8:	0012c674 	.word	0x0012c674
  12c2fc:	0012c674 	.word	0x0012c674
  12c300:	0012c674 	.word	0x0012c674
  12c304:	0012c674 	.word	0x0012c674
  12c308:	0012c674 	.word	0x0012c674
  12c30c:	0012c674 	.word	0x0012c674
  12c310:	0012c674 	.word	0x0012c674
  12c314:	0012c674 	.word	0x0012c674
  12c318:	0012c674 	.word	0x0012c674
  12c31c:	0012c674 	.word	0x0012c674
  12c320:	0012c674 	.word	0x0012c674
  12c324:	0012c674 	.word	0x0012c674
  12c328:	0012c674 	.word	0x0012c674
  12c32c:	0012c674 	.word	0x0012c674
  12c330:	0012c674 	.word	0x0012c674
  12c334:	0012c674 	.word	0x0012c674
  12c338:	0012c674 	.word	0x0012c674
  12c33c:	0012c674 	.word	0x0012c674
  12c340:	0012c674 	.word	0x0012c674
  12c344:	0012c674 	.word	0x0012c674
  12c348:	0012c674 	.word	0x0012c674
  12c34c:	0012c674 	.word	0x0012c674
  12c350:	0012c674 	.word	0x0012c674
  12c354:	0012c674 	.word	0x0012c674
  12c358:	0012c674 	.word	0x0012c674
  12c35c:	0012c674 	.word	0x0012c674
  12c360:	0012c674 	.word	0x0012c674
  12c364:	0012c674 	.word	0x0012c674
  12c368:	0012c674 	.word	0x0012c674
  12c36c:	0012c674 	.word	0x0012c674
  12c370:	0012c674 	.word	0x0012c674
  12c374:	0012c674 	.word	0x0012c674
  12c378:	0012c674 	.word	0x0012c674
  12c37c:	0012c674 	.word	0x0012c674
  12c380:	0012c674 	.word	0x0012c674
  12c384:	0012c674 	.word	0x0012c674
  12c388:	0012c4dc 	.word	0x0012c4dc
  12c38c:	0012c518 	.word	0x0012c518
  12c390:	0012c584 	.word	0x0012c584
  12c394:	0012c5c0 	.word	0x0012c5c0
  12c398:	0012c674 	.word	0x0012c674
  12c39c:	0012c674 	.word	0x0012c674
  12c3a0:	0012c674 	.word	0x0012c674
  12c3a4:	0012c5fc 	.word	0x0012c5fc
  12c3a8:	0012c638 	.word	0x0012c638
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c3ac:	e3a03000 	mov	r3, #0
  12c3b0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c3b4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c3b8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c3bc:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c3c0:	e2433001 	sub	r3, r3, #1
  12c3c4:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c3c8:	ea0000ac 	b	12c680 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c3cc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c3d0:	e3530004 	cmp	r3, #4
  12c3d4:	0a000008 	beq	12c3fc <dhcp_parse_reply+0x2f0>
  12c3d8:	e3080d04 	movw	r0, #36100	; 0x8d04
  12c3dc:	e3400014 	movt	r0, #20
  12c3e0:	ebff5b4b 	bl	103114 <rt_kprintf>
  12c3e4:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c3e8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c3ec:	e3400014 	movt	r0, #20
  12c3f0:	ebff7a67 	bl	10ad94 <sys_arch_assert>
  12c3f4:	e3e03005 	mvn	r3, #5
  12c3f8:	ea000186 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c3fc:	e3a03006 	mov	r3, #6
  12c400:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c404:	ea00009d 	b	12c680 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c408:	e3a03004 	mov	r3, #4
  12c40c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c410:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c414:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c418:	e1520003 	cmp	r2, r3
  12c41c:	2a000008 	bcs	12c444 <dhcp_parse_reply+0x338>
  12c420:	e3080d10 	movw	r0, #36112	; 0x8d10
  12c424:	e3400014 	movt	r0, #20
  12c428:	ebff5b39 	bl	103114 <rt_kprintf>
  12c42c:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c430:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c434:	e3400014 	movt	r0, #20
  12c438:	ebff7a55 	bl	10ad94 <sys_arch_assert>
  12c43c:	e3e03005 	mvn	r3, #5
  12c440:	ea000174 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c444:	e3a03007 	mov	r3, #7
  12c448:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c44c:	ea00008b 	b	12c680 <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c450:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c454:	e2033003 	and	r3, r3, #3
  12c458:	e6ef3073 	uxtb	r3, r3
  12c45c:	e3530000 	cmp	r3, #0
  12c460:	0a000008 	beq	12c488 <dhcp_parse_reply+0x37c>
  12c464:	e3080d24 	movw	r0, #36132	; 0x8d24
  12c468:	e3400014 	movt	r0, #20
  12c46c:	ebff5b28 	bl	103114 <rt_kprintf>
  12c470:	e3001602 	movw	r1, #1538	; 0x602
  12c474:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c478:	e3400014 	movt	r0, #20
  12c47c:	ebff7a44 	bl	10ad94 <sys_arch_assert>
  12c480:	e3e03005 	mvn	r3, #5
  12c484:	ea000163 	b	12ca18 <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c488:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c48c:	e3530008 	cmp	r3, #8
  12c490:	31a03003 	movcc	r3, r3
  12c494:	23a03008 	movcs	r3, #8
  12c498:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c49c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c4a0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c4a4:	e1520003 	cmp	r2, r3
  12c4a8:	2a000008 	bcs	12c4d0 <dhcp_parse_reply+0x3c4>
  12c4ac:	e3080d10 	movw	r0, #36112	; 0x8d10
  12c4b0:	e3400014 	movt	r0, #20
  12c4b4:	ebff5b16 	bl	103114 <rt_kprintf>
  12c4b8:	e3001605 	movw	r1, #1541	; 0x605
  12c4bc:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c4c0:	e3400014 	movt	r0, #20
  12c4c4:	ebff7a32 	bl	10ad94 <sys_arch_assert>
  12c4c8:	e3e03005 	mvn	r3, #5
  12c4cc:	ea000151 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c4d0:	e3a03008 	mov	r3, #8
  12c4d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c4d8:	ea000068 	b	12c680 <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c4dc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c4e0:	e3530004 	cmp	r3, #4
  12c4e4:	0a000008 	beq	12c50c <dhcp_parse_reply+0x400>
  12c4e8:	e3080d04 	movw	r0, #36100	; 0x8d04
  12c4ec:	e3400014 	movt	r0, #20
  12c4f0:	ebff5b07 	bl	103114 <rt_kprintf>
  12c4f4:	e300160a 	movw	r1, #1546	; 0x60a
  12c4f8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c4fc:	e3400014 	movt	r0, #20
  12c500:	ebff7a23 	bl	10ad94 <sys_arch_assert>
  12c504:	e3e03005 	mvn	r3, #5
  12c508:	ea000142 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c50c:	e3a03003 	mov	r3, #3
  12c510:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c514:	ea000059 	b	12c680 <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c518:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c51c:	e3530001 	cmp	r3, #1
  12c520:	0a000008 	beq	12c548 <dhcp_parse_reply+0x43c>
  12c524:	e3080d34 	movw	r0, #36148	; 0x8d34
  12c528:	e3400014 	movt	r0, #20
  12c52c:	ebff5af8 	bl	103114 <rt_kprintf>
  12c530:	e3001618 	movw	r1, #1560	; 0x618
  12c534:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c538:	e3400014 	movt	r0, #20
  12c53c:	ebff7a14 	bl	10ad94 <sys_arch_assert>
  12c540:	e3e03005 	mvn	r3, #5
  12c544:	ea000133 	b	12ca18 <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c548:	e15b30be 	ldrh	r3, [fp, #-14]
  12c54c:	e35300f0 	cmp	r3, #240	; 0xf0
  12c550:	0a000008 	beq	12c578 <dhcp_parse_reply+0x46c>
  12c554:	e3080d40 	movw	r0, #36160	; 0x8d40
  12c558:	e3400014 	movt	r0, #20
  12c55c:	ebff5aec 	bl	103114 <rt_kprintf>
  12c560:	e300161a 	movw	r1, #1562	; 0x61a
  12c564:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c568:	e3400014 	movt	r0, #20
  12c56c:	ebff7a08 	bl	10ad94 <sys_arch_assert>
  12c570:	e3e03005 	mvn	r3, #5
  12c574:	ea000127 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c578:	e3a03000 	mov	r3, #0
  12c57c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c580:	ea00003e 	b	12c680 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c584:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c588:	e3530001 	cmp	r3, #1
  12c58c:	0a000008 	beq	12c5b4 <dhcp_parse_reply+0x4a8>
  12c590:	e3080d34 	movw	r0, #36148	; 0x8d34
  12c594:	e3400014 	movt	r0, #20
  12c598:	ebff5add 	bl	103114 <rt_kprintf>
  12c59c:	e300161e 	movw	r1, #1566	; 0x61e
  12c5a0:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c5a4:	e3400014 	movt	r0, #20
  12c5a8:	ebff79f9 	bl	10ad94 <sys_arch_assert>
  12c5ac:	e3e03005 	mvn	r3, #5
  12c5b0:	ea000118 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c5b4:	e3a03001 	mov	r3, #1
  12c5b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c5bc:	ea00002f 	b	12c680 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c5c0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c5c4:	e3530004 	cmp	r3, #4
  12c5c8:	0a000008 	beq	12c5f0 <dhcp_parse_reply+0x4e4>
  12c5cc:	e3080d04 	movw	r0, #36100	; 0x8d04
  12c5d0:	e3400014 	movt	r0, #20
  12c5d4:	ebff5ace 	bl	103114 <rt_kprintf>
  12c5d8:	e3001622 	movw	r1, #1570	; 0x622
  12c5dc:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c5e0:	e3400014 	movt	r0, #20
  12c5e4:	ebff79ea 	bl	10ad94 <sys_arch_assert>
  12c5e8:	e3e03005 	mvn	r3, #5
  12c5ec:	ea000109 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c5f0:	e3a03002 	mov	r3, #2
  12c5f4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c5f8:	ea000020 	b	12c680 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c5fc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c600:	e3530004 	cmp	r3, #4
  12c604:	0a000008 	beq	12c62c <dhcp_parse_reply+0x520>
  12c608:	e3080d04 	movw	r0, #36100	; 0x8d04
  12c60c:	e3400014 	movt	r0, #20
  12c610:	ebff5abf 	bl	103114 <rt_kprintf>
  12c614:	e3001626 	movw	r1, #1574	; 0x626
  12c618:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c61c:	e3400014 	movt	r0, #20
  12c620:	ebff79db 	bl	10ad94 <sys_arch_assert>
  12c624:	e3e03005 	mvn	r3, #5
  12c628:	ea0000fa 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c62c:	e3a03004 	mov	r3, #4
  12c630:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c634:	ea000011 	b	12c680 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c638:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c63c:	e3530004 	cmp	r3, #4
  12c640:	0a000008 	beq	12c668 <dhcp_parse_reply+0x55c>
  12c644:	e3080d04 	movw	r0, #36100	; 0x8d04
  12c648:	e3400014 	movt	r0, #20
  12c64c:	ebff5ab0 	bl	103114 <rt_kprintf>
  12c650:	e300162a 	movw	r1, #1578	; 0x62a
  12c654:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c658:	e3400014 	movt	r0, #20
  12c65c:	ebff79cc 	bl	10ad94 <sys_arch_assert>
  12c660:	e3e03005 	mvn	r3, #5
  12c664:	ea0000eb 	b	12ca18 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c668:	e3a03005 	mov	r3, #5
  12c66c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c670:	ea000002 	b	12c680 <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c674:	e3a03000 	mov	r3, #0
  12c678:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c67c:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c680:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c684:	e6ff2073 	uxth	r2, r3
  12c688:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c68c:	e0823003 	add	r3, r2, r3
  12c690:	e6ff3073 	uxth	r3, r3
  12c694:	e2833002 	add	r3, r3, #2
  12c698:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c69c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c6a0:	e3530000 	cmp	r3, #0
  12c6a4:	0a000073 	beq	12c878 <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c6a8:	e3a03000 	mov	r3, #0
  12c6ac:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c6b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c6b4:	e3530000 	cmp	r3, #0
  12c6b8:	ba000002 	blt	12c6c8 <dhcp_parse_reply+0x5bc>
  12c6bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c6c0:	e3530009 	cmp	r3, #9
  12c6c4:	da000006 	ble	12c6e4 <dhcp_parse_reply+0x5d8>
  12c6c8:	e3080d58 	movw	r0, #36184	; 0x8d58
  12c6cc:	e3400014 	movt	r0, #20
  12c6d0:	ebff5a8f 	bl	103114 <rt_kprintf>
  12c6d4:	e3001637 	movw	r1, #1591	; 0x637
  12c6d8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c6dc:	e3400014 	movt	r0, #20
  12c6e0:	ebff79ab 	bl	10ad94 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12c6e4:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c6e8:	e3403015 	movt	r3, #21
  12c6ec:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c6f0:	e0833002 	add	r3, r3, r2
  12c6f4:	e5d33000 	ldrb	r3, [r3]
  12c6f8:	e3530000 	cmp	r3, #0
  12c6fc:	1a00005d 	bne	12c878 <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12c700:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c704:	e3530004 	cmp	r3, #4
  12c708:	31a03003 	movcc	r3, r3
  12c70c:	23a03004 	movcs	r3, #4
  12c710:	e6ef3073 	uxtb	r3, r3
  12c714:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12c718:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c71c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12c720:	e24b1034 	sub	r1, fp, #52	; 0x34
  12c724:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12c728:	ebffbb20 	bl	11b3b0 <pbuf_copy_partial>
  12c72c:	e1a03000 	mov	r3, r0
  12c730:	e1a02003 	mov	r2, r3
  12c734:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12c738:	e1530002 	cmp	r3, r2
  12c73c:	0a000001 	beq	12c748 <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12c740:	e3e03001 	mvn	r3, #1
  12c744:	ea0000b3 	b	12ca18 <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12c748:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c74c:	e3530004 	cmp	r3, #4
  12c750:	9a000025 	bls	12c7ec <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12c754:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c758:	e2033003 	and	r3, r3, #3
  12c75c:	e6ef3073 	uxtb	r3, r3
  12c760:	e3530000 	cmp	r3, #0
  12c764:	0a000008 	beq	12c78c <dhcp_parse_reply+0x680>
  12c768:	e3080d6c 	movw	r0, #36204	; 0x8d6c
  12c76c:	e3400014 	movt	r0, #20
  12c770:	ebff5a67 	bl	103114 <rt_kprintf>
  12c774:	e300163f 	movw	r1, #1599	; 0x63f
  12c778:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c77c:	e3400014 	movt	r0, #20
  12c780:	ebff7983 	bl	10ad94 <sys_arch_assert>
  12c784:	e3e03005 	mvn	r3, #5
  12c788:	ea0000a2 	b	12ca18 <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12c78c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c790:	e3403015 	movt	r3, #21
  12c794:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c798:	e0833002 	add	r3, r3, r2
  12c79c:	e3a02001 	mov	r2, #1
  12c7a0:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12c7a4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c7a8:	e1a00003 	mov	r0, r3
  12c7ac:	ebffa6c9 	bl	1162d8 <lwip_htonl>
  12c7b0:	e1a01000 	mov	r1, r0
  12c7b4:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12c7b8:	e3403015 	movt	r3, #21
  12c7bc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c7c0:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12c7c4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c7c8:	e2433004 	sub	r3, r3, #4
  12c7cc:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12c7d0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c7d4:	e2833004 	add	r3, r3, #4
  12c7d8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12c7dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c7e0:	e2833001 	add	r3, r3, #1
  12c7e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12c7e8:	eaffffb0 	b	12c6b0 <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12c7ec:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c7f0:	e3530004 	cmp	r3, #4
  12c7f4:	1a000005 	bne	12c810 <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12c7f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c7fc:	e1a00003 	mov	r0, r3
  12c800:	ebffa6b4 	bl	1162d8 <lwip_htonl>
  12c804:	e1a03000 	mov	r3, r0
  12c808:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12c80c:	ea00000e 	b	12c84c <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12c810:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c814:	e3530001 	cmp	r3, #1
  12c818:	0a000008 	beq	12c840 <dhcp_parse_reply+0x734>
  12c81c:	e3080d84 	movw	r0, #36228	; 0x8d84
  12c820:	e3400014 	movt	r0, #20
  12c824:	ebff5a3a 	bl	103114 <rt_kprintf>
  12c828:	e3001649 	movw	r1, #1609	; 0x649
  12c82c:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c830:	e3400014 	movt	r0, #20
  12c834:	ebff7956 	bl	10ad94 <sys_arch_assert>
  12c838:	e3e03005 	mvn	r3, #5
  12c83c:	ea000075 	b	12ca18 <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12c840:	e24b3034 	sub	r3, fp, #52	; 0x34
  12c844:	e5d33000 	ldrb	r3, [r3]
  12c848:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12c84c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c850:	e3403015 	movt	r3, #21
  12c854:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c858:	e0833002 	add	r3, r3, r2
  12c85c:	e3a02001 	mov	r2, #1
  12c860:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12c864:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12c868:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12c86c:	e3403015 	movt	r3, #21
  12c870:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c874:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12c878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c87c:	e1d330ba 	ldrh	r3, [r3, #10]
  12c880:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c884:	e1520003 	cmp	r2, r3
  12c888:	3a000020 	bcc	12c910 <dhcp_parse_reply+0x804>
      offset -= q->len;
  12c88c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c890:	e1d330ba 	ldrh	r3, [r3, #10]
  12c894:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c898:	e0423003 	sub	r3, r2, r3
  12c89c:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12c8a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c8a4:	e1d330ba 	ldrh	r3, [r3, #10]
  12c8a8:	e15b20bc 	ldrh	r2, [fp, #-12]
  12c8ac:	e0423003 	sub	r3, r2, r3
  12c8b0:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12c8b4:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c8b8:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c8bc:	e1520003 	cmp	r2, r3
  12c8c0:	2a00001f 	bcs	12c944 <dhcp_parse_reply+0x838>
  12c8c4:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c8c8:	e3530000 	cmp	r3, #0
  12c8cc:	0a00001c 	beq	12c944 <dhcp_parse_reply+0x838>
        q = q->next;
  12c8d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c8d4:	e5933000 	ldr	r3, [r3]
  12c8d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12c8dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c8e0:	e3530000 	cmp	r3, #0
  12c8e4:	1a000006 	bne	12c904 <dhcp_parse_reply+0x7f8>
  12c8e8:	e3080d98 	movw	r0, #36248	; 0x8d98
  12c8ec:	e3400014 	movt	r0, #20
  12c8f0:	ebff5a07 	bl	103114 <rt_kprintf>
  12c8f4:	e3001655 	movw	r1, #1621	; 0x655
  12c8f8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12c8fc:	e3400014 	movt	r0, #20
  12c900:	ebff7923 	bl	10ad94 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12c904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c908:	e5933004 	ldr	r3, [r3, #4]
  12c90c:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c910:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c914:	e3530000 	cmp	r3, #0
  12c918:	0a000009 	beq	12c944 <dhcp_parse_reply+0x838>
  12c91c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c920:	e51b2008 	ldr	r2, [fp, #-8]
  12c924:	e0823003 	add	r3, r2, r3
  12c928:	e5d33000 	ldrb	r3, [r3]
  12c92c:	e35300ff 	cmp	r3, #255	; 0xff
  12c930:	0a000003 	beq	12c944 <dhcp_parse_reply+0x838>
  12c934:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c938:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c93c:	e1520003 	cmp	r2, r3
  12c940:	3afffe33 	bcc	12c214 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12c944:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c948:	e3403015 	movt	r3, #21
  12c94c:	e5d33000 	ldrb	r3, [r3]
  12c950:	e3530000 	cmp	r3, #0
  12c954:	0a00001a 	beq	12c9c4 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c958:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12c95c:	e3403015 	movt	r3, #21
  12c960:	e5933000 	ldr	r3, [r3]
  12c964:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c968:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c96c:	e3403015 	movt	r3, #21
  12c970:	e3a02000 	mov	r2, #0
  12c974:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12c978:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c97c:	e3530001 	cmp	r3, #1
  12c980:	1a000002 	bne	12c990 <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12c984:	e3a03001 	mov	r3, #1
  12c988:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12c98c:	ea00000c 	b	12c9c4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12c990:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c994:	e3530002 	cmp	r3, #2
  12c998:	1a000002 	bne	12c9a8 <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12c99c:	e3a03001 	mov	r3, #1
  12c9a0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12c9a4:	ea000006 	b	12c9c4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12c9a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c9ac:	e3530003 	cmp	r3, #3
  12c9b0:	1a000003 	bne	12c9c4 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12c9b4:	e3a03001 	mov	r3, #1
  12c9b8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12c9bc:	e3a03001 	mov	r3, #1
  12c9c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12c9c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c9c8:	e3530000 	cmp	r3, #0
  12c9cc:	0a000006 	beq	12c9ec <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12c9d0:	e3a03000 	mov	r3, #0
  12c9d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12c9d8:	e3a0306c 	mov	r3, #108	; 0x6c
  12c9dc:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12c9e0:	e3a030ec 	mov	r3, #236	; 0xec
  12c9e4:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12c9e8:	eafffde4 	b	12c180 <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12c9ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c9f0:	e3530000 	cmp	r3, #0
  12c9f4:	0a000006 	beq	12ca14 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12c9f8:	e3a03000 	mov	r3, #0
  12c9fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12ca00:	e3a0302c 	mov	r3, #44	; 0x2c
  12ca04:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12ca08:	e3a0306c 	mov	r3, #108	; 0x6c
  12ca0c:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12ca10:	eafffdda 	b	12c180 <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12ca14:	e3a03000 	mov	r3, #0
}
  12ca18:	e1a00003 	mov	r0, r3
  12ca1c:	e24bd004 	sub	sp, fp, #4
  12ca20:	e8bd8800 	pop	{fp, pc}

0012ca24 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12ca24:	e92d4800 	push	{fp, lr}
  12ca28:	e28db004 	add	fp, sp, #4
  12ca2c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12ca30:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12ca34:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12ca38:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12ca3c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12ca40:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12ca44:	e3403014 	movt	r3, #20
  12ca48:	e5933004 	ldr	r3, [r3, #4]
  12ca4c:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ca50:	e51b300c 	ldr	r3, [fp, #-12]
  12ca54:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ca58:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12ca5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ca60:	e5933004 	ldr	r3, [r3, #4]
  12ca64:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12ca68:	e51b3010 	ldr	r3, [fp, #-16]
  12ca6c:	e3530000 	cmp	r3, #0
  12ca70:	0a000091 	beq	12ccbc <dhcp_recv+0x298>
  12ca74:	e51b3010 	ldr	r3, [fp, #-16]
  12ca78:	e5d33008 	ldrb	r3, [r3, #8]
  12ca7c:	e3530000 	cmp	r3, #0
  12ca80:	0a00008d 	beq	12ccbc <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12ca84:	e51b3010 	ldr	r3, [fp, #-16]
  12ca88:	e5933004 	ldr	r3, [r3, #4]
  12ca8c:	e3530000 	cmp	r3, #0
  12ca90:	0a000006 	beq	12cab0 <dhcp_recv+0x8c>
  12ca94:	e3080b7c 	movw	r0, #35708	; 0x8b7c
  12ca98:	e3400014 	movt	r0, #20
  12ca9c:	ebff599c 	bl	103114 <rt_kprintf>
  12caa0:	e30016a9 	movw	r1, #1705	; 0x6a9
  12caa4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12caa8:	e3400014 	movt	r0, #20
  12caac:	ebff78b8 	bl	10ad94 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12cab0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cab4:	e1d330ba 	ldrh	r3, [r3, #10]
  12cab8:	e353002b 	cmp	r3, #43	; 0x2b
  12cabc:	9a000080 	bls	12ccc4 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12cac0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cac4:	e5d33000 	ldrb	r3, [r3]
  12cac8:	e3530002 	cmp	r3, #2
  12cacc:	1a00007e 	bne	12cccc <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cad0:	e3a03000 	mov	r3, #0
  12cad4:	e54b3005 	strb	r3, [fp, #-5]
  12cad8:	ea00000c 	b	12cb10 <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12cadc:	e55b3005 	ldrb	r3, [fp, #-5]
  12cae0:	e51b200c 	ldr	r2, [fp, #-12]
  12cae4:	e0823003 	add	r3, r2, r3
  12cae8:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12caec:	e55b3005 	ldrb	r3, [fp, #-5]
  12caf0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12caf4:	e0813003 	add	r3, r1, r3
  12caf8:	e5d3301c 	ldrb	r3, [r3, #28]
  12cafc:	e1520003 	cmp	r2, r3
  12cb00:	1a000073 	bne	12ccd4 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cb04:	e55b3005 	ldrb	r3, [fp, #-5]
  12cb08:	e2833001 	add	r3, r3, #1
  12cb0c:	e54b3005 	strb	r3, [fp, #-5]
  12cb10:	e51b300c 	ldr	r3, [fp, #-12]
  12cb14:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12cb18:	e55b2005 	ldrb	r2, [fp, #-5]
  12cb1c:	e1520003 	cmp	r2, r3
  12cb20:	2a000005 	bcs	12cb3c <dhcp_recv+0x118>
  12cb24:	e55b3005 	ldrb	r3, [fp, #-5]
  12cb28:	e3530005 	cmp	r3, #5
  12cb2c:	8a000002 	bhi	12cb3c <dhcp_recv+0x118>
  12cb30:	e55b3005 	ldrb	r3, [fp, #-5]
  12cb34:	e353000f 	cmp	r3, #15
  12cb38:	9affffe7 	bls	12cadc <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12cb3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cb40:	e5933004 	ldr	r3, [r3, #4]
  12cb44:	e1a00003 	mov	r0, r3
  12cb48:	ebffa5e2 	bl	1162d8 <lwip_htonl>
  12cb4c:	e1a02000 	mov	r2, r0
  12cb50:	e51b3010 	ldr	r3, [fp, #-16]
  12cb54:	e5933000 	ldr	r3, [r3]
  12cb58:	e1520003 	cmp	r2, r3
  12cb5c:	1a00005e 	bne	12ccdc <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12cb60:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12cb64:	e51b0010 	ldr	r0, [fp, #-16]
  12cb68:	ebfffd67 	bl	12c10c <dhcp_parse_reply>
  12cb6c:	e1a03000 	mov	r3, r0
  12cb70:	e3530000 	cmp	r3, #0
  12cb74:	1a00005a 	bne	12cce4 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12cb78:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12cb7c:	e3403015 	movt	r3, #21
  12cb80:	e5d33001 	ldrb	r3, [r3, #1]
  12cb84:	e3530000 	cmp	r3, #0
  12cb88:	0a000057 	beq	12ccec <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12cb8c:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12cb90:	e3403015 	movt	r3, #21
  12cb94:	e5933004 	ldr	r3, [r3, #4]
  12cb98:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12cb9c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cba0:	e3530005 	cmp	r3, #5
  12cba4:	1a000021 	bne	12cc30 <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12cba8:	e51b3010 	ldr	r3, [fp, #-16]
  12cbac:	e5d33009 	ldrb	r3, [r3, #9]
  12cbb0:	e3530001 	cmp	r3, #1
  12cbb4:	1a00000c 	bne	12cbec <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12cbb8:	e51b000c 	ldr	r0, [fp, #-12]
  12cbbc:	ebfff6b6 	bl	12a69c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12cbc0:	e51b300c 	ldr	r3, [fp, #-12]
  12cbc4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12cbc8:	e2033008 	and	r3, r3, #8
  12cbcc:	e3530000 	cmp	r3, #0
  12cbd0:	0a000002 	beq	12cbe0 <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12cbd4:	e51b000c 	ldr	r0, [fp, #-12]
  12cbd8:	ebfff4c0 	bl	129ee0 <dhcp_check>
  12cbdc:	ea000043 	b	12ccf0 <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12cbe0:	e51b000c 	ldr	r0, [fp, #-12]
  12cbe4:	ebfff952 	bl	12b134 <dhcp_bind>
  12cbe8:	ea000040 	b	12ccf0 <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cbec:	e51b3010 	ldr	r3, [fp, #-16]
  12cbf0:	e5d33009 	ldrb	r3, [r3, #9]
  12cbf4:	e3530003 	cmp	r3, #3
  12cbf8:	0a000007 	beq	12cc1c <dhcp_recv+0x1f8>
  12cbfc:	e51b3010 	ldr	r3, [fp, #-16]
  12cc00:	e5d33009 	ldrb	r3, [r3, #9]
  12cc04:	e3530004 	cmp	r3, #4
  12cc08:	0a000003 	beq	12cc1c <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cc0c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc10:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cc14:	e3530005 	cmp	r3, #5
  12cc18:	1a000034 	bne	12ccf0 <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12cc1c:	e51b000c 	ldr	r0, [fp, #-12]
  12cc20:	ebfff69d 	bl	12a69c <dhcp_handle_ack>
      dhcp_bind(netif);
  12cc24:	e51b000c 	ldr	r0, [fp, #-12]
  12cc28:	ebfff941 	bl	12b134 <dhcp_bind>
  12cc2c:	ea00002f 	b	12ccf0 <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cc30:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cc34:	e3530006 	cmp	r3, #6
  12cc38:	1a000012 	bne	12cc88 <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cc3c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc40:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12cc44:	e3530003 	cmp	r3, #3
  12cc48:	0a00000b 	beq	12cc7c <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cc4c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc50:	e5d33009 	ldrb	r3, [r3, #9]
  12cc54:	e3530001 	cmp	r3, #1
  12cc58:	0a000007 	beq	12cc7c <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cc5c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc60:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cc64:	e3530004 	cmp	r3, #4
  12cc68:	0a000003 	beq	12cc7c <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cc6c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc70:	e5d33009 	ldrb	r3, [r3, #9]
  12cc74:	e3530005 	cmp	r3, #5
  12cc78:	1a000002 	bne	12cc88 <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12cc7c:	e51b000c 	ldr	r0, [fp, #-12]
  12cc80:	ebfff47f 	bl	129e84 <dhcp_handle_nak>
  12cc84:	ea000019 	b	12ccf0 <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12cc88:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cc8c:	e3530002 	cmp	r3, #2
  12cc90:	1a000009 	bne	12ccbc <dhcp_recv+0x298>
  12cc94:	e51b3010 	ldr	r3, [fp, #-16]
  12cc98:	e5d33009 	ldrb	r3, [r3, #9]
  12cc9c:	e3530006 	cmp	r3, #6
  12cca0:	1a000005 	bne	12ccbc <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cca4:	e51b3010 	ldr	r3, [fp, #-16]
  12cca8:	e3a02000 	mov	r2, #0
  12ccac:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12ccb0:	e51b000c 	ldr	r0, [fp, #-12]
  12ccb4:	ebfff4b6 	bl	129f94 <dhcp_handle_offer>
  12ccb8:	ea00000c 	b	12ccf0 <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12ccbc:	e320f000 	nop	{0}
  12ccc0:	ea00000a 	b	12ccf0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12ccc4:	e320f000 	nop	{0}
  12ccc8:	ea000008 	b	12ccf0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cccc:	e320f000 	nop	{0}
  12ccd0:	ea000006 	b	12ccf0 <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12ccd4:	e320f000 	nop	{0}
  12ccd8:	ea000004 	b	12ccf0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12ccdc:	e320f000 	nop	{0}
  12cce0:	ea000002 	b	12ccf0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cce4:	e320f000 	nop	{0}
  12cce8:	ea000000 	b	12ccf0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12ccec:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12ccf0:	e51b3010 	ldr	r3, [fp, #-16]
  12ccf4:	e3530000 	cmp	r3, #0
  12ccf8:	0a000002 	beq	12cd08 <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12ccfc:	e51b3010 	ldr	r3, [fp, #-16]
  12cd00:	e3a02000 	mov	r2, #0
  12cd04:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12cd08:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12cd0c:	ebffb79c 	bl	11ab84 <pbuf_free>
}
  12cd10:	e320f000 	nop	{0}
  12cd14:	e24bd004 	sub	sp, fp, #4
  12cd18:	e8bd8800 	pop	{fp, pc}

0012cd1c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12cd1c:	e92d4810 	push	{r4, fp, lr}
  12cd20:	e28db008 	add	fp, sp, #8
  12cd24:	e24dd01c 	sub	sp, sp, #28
  12cd28:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12cd2c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12cd30:	e1a03002 	mov	r3, r2
  12cd34:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12cd38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cd3c:	e3530000 	cmp	r3, #0
  12cd40:	1a000008 	bne	12cd68 <dhcp_create_msg+0x4c>
  12cd44:	e3080dac 	movw	r0, #36268	; 0x8dac
  12cd48:	e3400014 	movt	r0, #20
  12cd4c:	ebff58f0 	bl	103114 <rt_kprintf>
  12cd50:	e300171e 	movw	r1, #1822	; 0x71e
  12cd54:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12cd58:	e3400014 	movt	r0, #20
  12cd5c:	ebff780c 	bl	10ad94 <sys_arch_assert>
  12cd60:	e3e0300f 	mvn	r3, #15
  12cd64:	ea000121 	b	12d1f0 <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12cd68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd6c:	e3530000 	cmp	r3, #0
  12cd70:	1a000008 	bne	12cd98 <dhcp_create_msg+0x7c>
  12cd74:	e3080dcc 	movw	r0, #36300	; 0x8dcc
  12cd78:	e3400014 	movt	r0, #20
  12cd7c:	ebff58e4 	bl	103114 <rt_kprintf>
  12cd80:	e300171f 	movw	r1, #1823	; 0x71f
  12cd84:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12cd88:	e3400014 	movt	r0, #20
  12cd8c:	ebff7800 	bl	10ad94 <sys_arch_assert>
  12cd90:	e3e03005 	mvn	r3, #5
  12cd94:	ea000115 	b	12d1f0 <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12cd98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd9c:	e593300c 	ldr	r3, [r3, #12]
  12cda0:	e3530000 	cmp	r3, #0
  12cda4:	0a000006 	beq	12cdc4 <dhcp_create_msg+0xa8>
  12cda8:	e3080dec 	movw	r0, #36332	; 0x8dec
  12cdac:	e3400014 	movt	r0, #20
  12cdb0:	ebff58d7 	bl	103114 <rt_kprintf>
  12cdb4:	e3a01e72 	mov	r1, #1824	; 0x720
  12cdb8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12cdbc:	e3400014 	movt	r0, #20
  12cdc0:	ebff77f3 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12cdc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cdc8:	e5933010 	ldr	r3, [r3, #16]
  12cdcc:	e3530000 	cmp	r3, #0
  12cdd0:	0a000006 	beq	12cdf0 <dhcp_create_msg+0xd4>
  12cdd4:	e3080e14 	movw	r0, #36372	; 0x8e14
  12cdd8:	e3400014 	movt	r0, #20
  12cddc:	ebff58cc 	bl	103114 <rt_kprintf>
  12cde0:	e3001721 	movw	r1, #1825	; 0x721
  12cde4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12cde8:	e3400014 	movt	r0, #20
  12cdec:	ebff77e8 	bl	10ad94 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12cdf0:	e3a02000 	mov	r2, #0
  12cdf4:	e3a01f4d 	mov	r1, #308	; 0x134
  12cdf8:	e3a00000 	mov	r0, #0
  12cdfc:	ebffb459 	bl	119f68 <pbuf_alloc>
  12ce00:	e1a02000 	mov	r2, r0
  12ce04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce08:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12ce0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce10:	e593300c 	ldr	r3, [r3, #12]
  12ce14:	e3530000 	cmp	r3, #0
  12ce18:	1a000001 	bne	12ce24 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12ce1c:	e3e03000 	mvn	r3, #0
  12ce20:	ea0000f2 	b	12d1f0 <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12ce24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce28:	e593300c 	ldr	r3, [r3, #12]
  12ce2c:	e1d330ba 	ldrh	r3, [r3, #10]
  12ce30:	e3530f4d 	cmp	r3, #308	; 0x134
  12ce34:	2a000006 	bcs	12ce54 <dhcp_create_msg+0x138>
  12ce38:	e3080e3c 	movw	r0, #36412	; 0x8e3c
  12ce3c:	e3400014 	movt	r0, #20
  12ce40:	ebff58b3 	bl	103114 <rt_kprintf>
  12ce44:	e3001729 	movw	r1, #1833	; 0x729
  12ce48:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12ce4c:	e3400014 	movt	r0, #20
  12ce50:	ebff77cf 	bl	10ad94 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12ce54:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12ce58:	e3530003 	cmp	r3, #3
  12ce5c:	0a00000e 	beq	12ce9c <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12ce60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce64:	e5d3300a 	ldrb	r3, [r3, #10]
  12ce68:	e3530000 	cmp	r3, #0
  12ce6c:	1a000005 	bne	12ce88 <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12ce70:	eb004401 	bl	13de7c <rand>
  12ce74:	e1a03000 	mov	r3, r0
  12ce78:	e1a02003 	mov	r2, r3
  12ce7c:	e30e3ac8 	movw	r3, #60104	; 0xeac8
  12ce80:	e3403014 	movt	r3, #20
  12ce84:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12ce88:	e30e3ac8 	movw	r3, #60104	; 0xeac8
  12ce8c:	e3403014 	movt	r3, #20
  12ce90:	e5932000 	ldr	r2, [r3]
  12ce94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce98:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12ce9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cea0:	e593300c 	ldr	r3, [r3, #12]
  12cea4:	e5932004 	ldr	r2, [r3, #4]
  12cea8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ceac:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12ceb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ceb4:	e5933010 	ldr	r3, [r3, #16]
  12ceb8:	e3a02001 	mov	r2, #1
  12cebc:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12cec0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cec4:	e5933010 	ldr	r3, [r3, #16]
  12cec8:	e3a02001 	mov	r2, #1
  12cecc:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12ced0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ced4:	e5933010 	ldr	r3, [r3, #16]
  12ced8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12cedc:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12cee0:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12cee4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cee8:	e5933010 	ldr	r3, [r3, #16]
  12ceec:	e3a02000 	mov	r2, #0
  12cef0:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12cef4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cef8:	e5932000 	ldr	r2, [r3]
  12cefc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf00:	e5934010 	ldr	r4, [r3, #16]
  12cf04:	e1a00002 	mov	r0, r2
  12cf08:	ebffa4f2 	bl	1162d8 <lwip_htonl>
  12cf0c:	e1a03000 	mov	r3, r0
  12cf10:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12cf14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf18:	e5933010 	ldr	r3, [r3, #16]
  12cf1c:	e3a02000 	mov	r2, #0
  12cf20:	e5c32008 	strb	r2, [r3, #8]
  12cf24:	e3a02000 	mov	r2, #0
  12cf28:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12cf2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf30:	e5933010 	ldr	r3, [r3, #16]
  12cf34:	e3a02000 	mov	r2, #0
  12cf38:	e5c3200a 	strb	r2, [r3, #10]
  12cf3c:	e3a02000 	mov	r2, #0
  12cf40:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12cf44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf48:	e5933010 	ldr	r3, [r3, #16]
  12cf4c:	e3a02000 	mov	r2, #0
  12cf50:	e5c3200c 	strb	r2, [r3, #12]
  12cf54:	e3a02000 	mov	r2, #0
  12cf58:	e5c3200d 	strb	r2, [r3, #13]
  12cf5c:	e3a02000 	mov	r2, #0
  12cf60:	e5c3200e 	strb	r2, [r3, #14]
  12cf64:	e3a02000 	mov	r2, #0
  12cf68:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12cf6c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cf70:	e3530008 	cmp	r3, #8
  12cf74:	0a000010 	beq	12cfbc <dhcp_create_msg+0x2a0>
  12cf78:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cf7c:	e3530004 	cmp	r3, #4
  12cf80:	0a00000d 	beq	12cfbc <dhcp_create_msg+0x2a0>
  12cf84:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cf88:	e3530007 	cmp	r3, #7
  12cf8c:	0a00000a 	beq	12cfbc <dhcp_create_msg+0x2a0>
  12cf90:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cf94:	e3530003 	cmp	r3, #3
  12cf98:	1a00000d 	bne	12cfd4 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12cf9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfa0:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12cfa4:	e3530005 	cmp	r3, #5
  12cfa8:	0a000003 	beq	12cfbc <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12cfac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfb0:	e5d33009 	ldrb	r3, [r3, #9]
  12cfb4:	e3530004 	cmp	r3, #4
  12cfb8:	1a000005 	bne	12cfd4 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12cfbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cfc0:	e2832004 	add	r2, r3, #4
  12cfc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfc8:	e5933010 	ldr	r3, [r3, #16]
  12cfcc:	e5922000 	ldr	r2, [r2]
  12cfd0:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12cfd4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfd8:	e5933010 	ldr	r3, [r3, #16]
  12cfdc:	e3a02000 	mov	r2, #0
  12cfe0:	e5c32010 	strb	r2, [r3, #16]
  12cfe4:	e3a02000 	mov	r2, #0
  12cfe8:	e5c32011 	strb	r2, [r3, #17]
  12cfec:	e3a02000 	mov	r2, #0
  12cff0:	e5c32012 	strb	r2, [r3, #18]
  12cff4:	e3a02000 	mov	r2, #0
  12cff8:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12cffc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d000:	e5933010 	ldr	r3, [r3, #16]
  12d004:	e3a02000 	mov	r2, #0
  12d008:	e5c32014 	strb	r2, [r3, #20]
  12d00c:	e3a02000 	mov	r2, #0
  12d010:	e5c32015 	strb	r2, [r3, #21]
  12d014:	e3a02000 	mov	r2, #0
  12d018:	e5c32016 	strb	r2, [r3, #22]
  12d01c:	e3a02000 	mov	r2, #0
  12d020:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12d024:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d028:	e5933010 	ldr	r3, [r3, #16]
  12d02c:	e3a02000 	mov	r2, #0
  12d030:	e5c32018 	strb	r2, [r3, #24]
  12d034:	e3a02000 	mov	r2, #0
  12d038:	e5c32019 	strb	r2, [r3, #25]
  12d03c:	e3a02000 	mov	r2, #0
  12d040:	e5c3201a 	strb	r2, [r3, #26]
  12d044:	e3a02000 	mov	r2, #0
  12d048:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d04c:	e3a03000 	mov	r3, #0
  12d050:	e14b30be 	strh	r3, [fp, #-14]
  12d054:	ea000017 	b	12d0b8 <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12d058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d05c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d060:	e6ff3073 	uxth	r3, r3
  12d064:	e15b20be 	ldrh	r2, [fp, #-14]
  12d068:	e1520003 	cmp	r2, r3
  12d06c:	2a000007 	bcs	12d090 <dhcp_create_msg+0x374>
  12d070:	e15b30be 	ldrh	r3, [fp, #-14]
  12d074:	e3530005 	cmp	r3, #5
  12d078:	8a000004 	bhi	12d090 <dhcp_create_msg+0x374>
  12d07c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d080:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d084:	e0823003 	add	r3, r2, r3
  12d088:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d08c:	ea000000 	b	12d094 <dhcp_create_msg+0x378>
  12d090:	e3a01000 	mov	r1, #0
  12d094:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d098:	e5932010 	ldr	r2, [r3, #16]
  12d09c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0a0:	e0823003 	add	r3, r2, r3
  12d0a4:	e1a02001 	mov	r2, r1
  12d0a8:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d0ac:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0b0:	e2833001 	add	r3, r3, #1
  12d0b4:	e14b30be 	strh	r3, [fp, #-14]
  12d0b8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0bc:	e353000f 	cmp	r3, #15
  12d0c0:	9affffe4 	bls	12d058 <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d0c4:	e3a03000 	mov	r3, #0
  12d0c8:	e14b30be 	strh	r3, [fp, #-14]
  12d0cc:	ea000008 	b	12d0f4 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d0d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0d4:	e5932010 	ldr	r2, [r3, #16]
  12d0d8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0dc:	e0823003 	add	r3, r2, r3
  12d0e0:	e3a02000 	mov	r2, #0
  12d0e4:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d0e8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0ec:	e2833001 	add	r3, r3, #1
  12d0f0:	e14b30be 	strh	r3, [fp, #-14]
  12d0f4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0f8:	e353003f 	cmp	r3, #63	; 0x3f
  12d0fc:	9afffff3 	bls	12d0d0 <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d100:	e3a03000 	mov	r3, #0
  12d104:	e14b30be 	strh	r3, [fp, #-14]
  12d108:	ea000008 	b	12d130 <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d10c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d110:	e5932010 	ldr	r2, [r3, #16]
  12d114:	e15b30be 	ldrh	r3, [fp, #-14]
  12d118:	e0823003 	add	r3, r2, r3
  12d11c:	e3a02000 	mov	r2, #0
  12d120:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d124:	e15b30be 	ldrh	r3, [fp, #-14]
  12d128:	e2833001 	add	r3, r3, #1
  12d12c:	e14b30be 	strh	r3, [fp, #-14]
  12d130:	e15b30be 	ldrh	r3, [fp, #-14]
  12d134:	e353007f 	cmp	r3, #127	; 0x7f
  12d138:	9afffff3 	bls	12d10c <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d13c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d140:	e5932010 	ldr	r2, [r3, #16]
  12d144:	e3a03000 	mov	r3, #0
  12d148:	e3833063 	orr	r3, r3, #99	; 0x63
  12d14c:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d150:	e3a03000 	mov	r3, #0
  12d154:	e1e03003 	mvn	r3, r3
  12d158:	e203307d 	and	r3, r3, #125	; 0x7d
  12d15c:	e1e03003 	mvn	r3, r3
  12d160:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d164:	e3a03000 	mov	r3, #0
  12d168:	e3833053 	orr	r3, r3, #83	; 0x53
  12d16c:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d170:	e3a03000 	mov	r3, #0
  12d174:	e3833063 	orr	r3, r3, #99	; 0x63
  12d178:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d17c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d180:	e3a02000 	mov	r2, #0
  12d184:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d188:	e3a03000 	mov	r3, #0
  12d18c:	e14b30be 	strh	r3, [fp, #-14]
  12d190:	ea00000a 	b	12d1c0 <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d194:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d198:	e5932010 	ldr	r2, [r3, #16]
  12d19c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d1a0:	e15b10be 	ldrh	r1, [fp, #-14]
  12d1a4:	e6ef1071 	uxtb	r1, r1
  12d1a8:	e0823003 	add	r3, r2, r3
  12d1ac:	e1a02001 	mov	r2, r1
  12d1b0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d1b4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d1b8:	e2833001 	add	r3, r3, #1
  12d1bc:	e14b30be 	strh	r3, [fp, #-14]
  12d1c0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d1c4:	e3530043 	cmp	r3, #67	; 0x43
  12d1c8:	9afffff1 	bls	12d194 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d1cc:	e3a02001 	mov	r2, #1
  12d1d0:	e3a01035 	mov	r1, #53	; 0x35
  12d1d4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d1d8:	ebfffab7 	bl	12bcbc <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d1dc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d1e0:	e1a01003 	mov	r1, r3
  12d1e4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d1e8:	ebfffae3 	bl	12bd7c <dhcp_option_byte>
  return ERR_OK;
  12d1ec:	e3a03000 	mov	r3, #0
}
  12d1f0:	e1a00003 	mov	r0, r3
  12d1f4:	e24bd008 	sub	sp, fp, #8
  12d1f8:	e8bd8810 	pop	{r4, fp, pc}

0012d1fc <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d1fc:	e92d4800 	push	{fp, lr}
  12d200:	e28db004 	add	fp, sp, #4
  12d204:	e24dd008 	sub	sp, sp, #8
  12d208:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d20c:	e51b3008 	ldr	r3, [fp, #-8]
  12d210:	e3530000 	cmp	r3, #0
  12d214:	1a000007 	bne	12d238 <dhcp_delete_msg+0x3c>
  12d218:	e3080e7c 	movw	r0, #36476	; 0x8e7c
  12d21c:	e3400014 	movt	r0, #20
  12d220:	ebff57bb 	bl	103114 <rt_kprintf>
  12d224:	e300176e 	movw	r1, #1902	; 0x76e
  12d228:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12d22c:	e3400014 	movt	r0, #20
  12d230:	ebff76d7 	bl	10ad94 <sys_arch_assert>
  12d234:	ea000023 	b	12d2c8 <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d238:	e51b3008 	ldr	r3, [fp, #-8]
  12d23c:	e593300c 	ldr	r3, [r3, #12]
  12d240:	e3530000 	cmp	r3, #0
  12d244:	1a000006 	bne	12d264 <dhcp_delete_msg+0x68>
  12d248:	e3080e9c 	movw	r0, #36508	; 0x8e9c
  12d24c:	e3400014 	movt	r0, #20
  12d250:	ebff57af 	bl	103114 <rt_kprintf>
  12d254:	e300176f 	movw	r1, #1903	; 0x76f
  12d258:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12d25c:	e3400014 	movt	r0, #20
  12d260:	ebff76cb 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d264:	e51b3008 	ldr	r3, [fp, #-8]
  12d268:	e5933010 	ldr	r3, [r3, #16]
  12d26c:	e3530000 	cmp	r3, #0
  12d270:	1a000006 	bne	12d290 <dhcp_delete_msg+0x94>
  12d274:	e3080ec4 	movw	r0, #36548	; 0x8ec4
  12d278:	e3400014 	movt	r0, #20
  12d27c:	ebff57a4 	bl	103114 <rt_kprintf>
  12d280:	e3a01e77 	mov	r1, #1904	; 0x770
  12d284:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12d288:	e3400014 	movt	r0, #20
  12d28c:	ebff76c0 	bl	10ad94 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d290:	e51b3008 	ldr	r3, [fp, #-8]
  12d294:	e593300c 	ldr	r3, [r3, #12]
  12d298:	e3530000 	cmp	r3, #0
  12d29c:	0a000003 	beq	12d2b0 <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d2a0:	e51b3008 	ldr	r3, [fp, #-8]
  12d2a4:	e593300c 	ldr	r3, [r3, #12]
  12d2a8:	e1a00003 	mov	r0, r3
  12d2ac:	ebffb634 	bl	11ab84 <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d2b0:	e51b3008 	ldr	r3, [fp, #-8]
  12d2b4:	e3a02000 	mov	r2, #0
  12d2b8:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d2bc:	e51b3008 	ldr	r3, [fp, #-8]
  12d2c0:	e3a02000 	mov	r2, #0
  12d2c4:	e5832010 	str	r2, [r3, #16]
}
  12d2c8:	e24bd004 	sub	sp, fp, #4
  12d2cc:	e8bd8800 	pop	{fp, pc}

0012d2d0 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d2d0:	e92d4800 	push	{fp, lr}
  12d2d4:	e28db004 	add	fp, sp, #4
  12d2d8:	e24dd008 	sub	sp, sp, #8
  12d2dc:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d2e0:	e51b3008 	ldr	r3, [fp, #-8]
  12d2e4:	e3530000 	cmp	r3, #0
  12d2e8:	1a000007 	bne	12d30c <dhcp_option_trailer+0x3c>
  12d2ec:	e3080eec 	movw	r0, #36588	; 0x8eec
  12d2f0:	e3400014 	movt	r0, #20
  12d2f4:	ebff5786 	bl	103114 <rt_kprintf>
  12d2f8:	e3001783 	movw	r1, #1923	; 0x783
  12d2fc:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12d300:	e3400014 	movt	r0, #20
  12d304:	ebff76a2 	bl	10ad94 <sys_arch_assert>
  12d308:	ea000039 	b	12d3f4 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d30c:	e51b3008 	ldr	r3, [fp, #-8]
  12d310:	e5933010 	ldr	r3, [r3, #16]
  12d314:	e3530000 	cmp	r3, #0
  12d318:	1a000006 	bne	12d338 <dhcp_option_trailer+0x68>
  12d31c:	e3080f10 	movw	r0, #36624	; 0x8f10
  12d320:	e3400014 	movt	r0, #20
  12d324:	ebff577a 	bl	103114 <rt_kprintf>
  12d328:	e3001784 	movw	r1, #1924	; 0x784
  12d32c:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12d330:	e3400014 	movt	r0, #20
  12d334:	ebff7696 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d338:	e51b3008 	ldr	r3, [fp, #-8]
  12d33c:	e1d331b4 	ldrh	r3, [r3, #20]
  12d340:	e3530043 	cmp	r3, #67	; 0x43
  12d344:	9a000006 	bls	12d364 <dhcp_option_trailer+0x94>
  12d348:	e3080f3c 	movw	r0, #36668	; 0x8f3c
  12d34c:	e3400014 	movt	r0, #20
  12d350:	ebff576f 	bl	103114 <rt_kprintf>
  12d354:	e3001785 	movw	r1, #1925	; 0x785
  12d358:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12d35c:	e3400014 	movt	r0, #20
  12d360:	ebff768b 	bl	10ad94 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d364:	e51b3008 	ldr	r3, [fp, #-8]
  12d368:	e5932010 	ldr	r2, [r3, #16]
  12d36c:	e51b3008 	ldr	r3, [fp, #-8]
  12d370:	e1d331b4 	ldrh	r3, [r3, #20]
  12d374:	e2831001 	add	r1, r3, #1
  12d378:	e6ff0071 	uxth	r0, r1
  12d37c:	e51b1008 	ldr	r1, [fp, #-8]
  12d380:	e1c101b4 	strh	r0, [r1, #20]
  12d384:	e0823003 	add	r3, r2, r3
  12d388:	e3e02000 	mvn	r2, #0
  12d38c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d390:	ea00000a 	b	12d3c0 <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d394:	e51b3008 	ldr	r3, [fp, #-8]
  12d398:	e5932010 	ldr	r2, [r3, #16]
  12d39c:	e51b3008 	ldr	r3, [fp, #-8]
  12d3a0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d3a4:	e2831001 	add	r1, r3, #1
  12d3a8:	e6ff0071 	uxth	r0, r1
  12d3ac:	e51b1008 	ldr	r1, [fp, #-8]
  12d3b0:	e1c101b4 	strh	r0, [r1, #20]
  12d3b4:	e0823003 	add	r3, r2, r3
  12d3b8:	e3a02000 	mov	r2, #0
  12d3bc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d3c0:	e51b3008 	ldr	r3, [fp, #-8]
  12d3c4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d3c8:	e3530043 	cmp	r3, #67	; 0x43
  12d3cc:	9a000004 	bls	12d3e4 <dhcp_option_trailer+0x114>
  12d3d0:	e51b3008 	ldr	r3, [fp, #-8]
  12d3d4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d3d8:	e2033003 	and	r3, r3, #3
  12d3dc:	e3530000 	cmp	r3, #0
  12d3e0:	0a000003 	beq	12d3f4 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d3e4:	e51b3008 	ldr	r3, [fp, #-8]
  12d3e8:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d3ec:	e3530043 	cmp	r3, #67	; 0x43
  12d3f0:	9affffe7 	bls	12d394 <dhcp_option_trailer+0xc4>
  }
}
  12d3f4:	e24bd004 	sub	sp, fp, #4
  12d3f8:	e8bd8800 	pop	{fp, pc}

0012d3fc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d3fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d400:	e28db000 	add	fp, sp, #0
  12d404:	e24dd014 	sub	sp, sp, #20
  12d408:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d40c:	e51b3010 	ldr	r3, [fp, #-16]
  12d410:	e3530000 	cmp	r3, #0
  12d414:	0a000013 	beq	12d468 <dhcp_supplied_address+0x6c>
  12d418:	e51b3010 	ldr	r3, [fp, #-16]
  12d41c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d420:	e3530000 	cmp	r3, #0
  12d424:	0a00000f 	beq	12d468 <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d428:	e51b3010 	ldr	r3, [fp, #-16]
  12d42c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d430:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d434:	e51b3008 	ldr	r3, [fp, #-8]
  12d438:	e5d33009 	ldrb	r3, [r3, #9]
  12d43c:	e353000a 	cmp	r3, #10
  12d440:	0a000003 	beq	12d454 <dhcp_supplied_address+0x58>
  12d444:	e51b3008 	ldr	r3, [fp, #-8]
  12d448:	e5d33009 	ldrb	r3, [r3, #9]
  12d44c:	e3530005 	cmp	r3, #5
  12d450:	1a000001 	bne	12d45c <dhcp_supplied_address+0x60>
  12d454:	e3a03001 	mov	r3, #1
  12d458:	ea000000 	b	12d460 <dhcp_supplied_address+0x64>
  12d45c:	e3a03000 	mov	r3, #0
  12d460:	e6ef3073 	uxtb	r3, r3
  12d464:	ea000000 	b	12d46c <dhcp_supplied_address+0x70>
  }
  return 0;
  12d468:	e3a03000 	mov	r3, #0
}
  12d46c:	e1a00003 	mov	r0, r3
  12d470:	e28bd000 	add	sp, fp, #0
  12d474:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d478:	e12fff1e 	bx	lr

0012d47c <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d47c:	e92d4800 	push	{fp, lr}
  12d480:	e28db004 	add	fp, sp, #4
  12d484:	e24dd010 	sub	sp, sp, #16
  12d488:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d48c:	e51b3010 	ldr	r3, [fp, #-16]
  12d490:	e3530000 	cmp	r3, #0
  12d494:	1a000006 	bne	12d4b4 <free_etharp_q+0x38>
  12d498:	e3080f7c 	movw	r0, #36732	; 0x8f7c
  12d49c:	e3400014 	movt	r0, #20
  12d4a0:	ebff571b 	bl	103114 <rt_kprintf>
  12d4a4:	e3a01097 	mov	r1, #151	; 0x97
  12d4a8:	e3080f88 	movw	r0, #36744	; 0x8f88
  12d4ac:	e3400014 	movt	r0, #20
  12d4b0:	ebff7637 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d4b4:	e51b3010 	ldr	r3, [fp, #-16]
  12d4b8:	e5933004 	ldr	r3, [r3, #4]
  12d4bc:	e3530000 	cmp	r3, #0
  12d4c0:	1a00001e 	bne	12d540 <free_etharp_q+0xc4>
  12d4c4:	e3080fbc 	movw	r0, #36796	; 0x8fbc
  12d4c8:	e3400014 	movt	r0, #20
  12d4cc:	ebff5710 	bl	103114 <rt_kprintf>
  12d4d0:	e3a01098 	mov	r1, #152	; 0x98
  12d4d4:	e3080f88 	movw	r0, #36744	; 0x8f88
  12d4d8:	e3400014 	movt	r0, #20
  12d4dc:	ebff762c 	bl	10ad94 <sys_arch_assert>
  while (q) {
  12d4e0:	ea000016 	b	12d540 <free_etharp_q+0xc4>
    r = q;
  12d4e4:	e51b3010 	ldr	r3, [fp, #-16]
  12d4e8:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d4ec:	e51b3010 	ldr	r3, [fp, #-16]
  12d4f0:	e5933000 	ldr	r3, [r3]
  12d4f4:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d4f8:	e51b3008 	ldr	r3, [fp, #-8]
  12d4fc:	e5933004 	ldr	r3, [r3, #4]
  12d500:	e3530000 	cmp	r3, #0
  12d504:	1a000006 	bne	12d524 <free_etharp_q+0xa8>
  12d508:	e3080fcc 	movw	r0, #36812	; 0x8fcc
  12d50c:	e3400014 	movt	r0, #20
  12d510:	ebff56ff 	bl	103114 <rt_kprintf>
  12d514:	e3a0109c 	mov	r1, #156	; 0x9c
  12d518:	e3080f88 	movw	r0, #36744	; 0x8f88
  12d51c:	e3400014 	movt	r0, #20
  12d520:	ebff761b 	bl	10ad94 <sys_arch_assert>
    pbuf_free(r->p);
  12d524:	e51b3008 	ldr	r3, [fp, #-8]
  12d528:	e5933004 	ldr	r3, [r3, #4]
  12d52c:	e1a00003 	mov	r0, r3
  12d530:	ebffb593 	bl	11ab84 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d534:	e51b1008 	ldr	r1, [fp, #-8]
  12d538:	e3a0000b 	mov	r0, #11
  12d53c:	ebffae82 	bl	118f4c <memp_free>
  while (q) {
  12d540:	e51b3010 	ldr	r3, [fp, #-16]
  12d544:	e3530000 	cmp	r3, #0
  12d548:	1affffe5 	bne	12d4e4 <free_etharp_q+0x68>
  }
}
  12d54c:	e320f000 	nop	{0}
  12d550:	e24bd004 	sub	sp, fp, #4
  12d554:	e8bd8800 	pop	{fp, pc}

0012d558 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d558:	e92d4800 	push	{fp, lr}
  12d55c:	e28db004 	add	fp, sp, #4
  12d560:	e24dd008 	sub	sp, sp, #8
  12d564:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d568:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d56c:	e3403014 	movt	r3, #20
  12d570:	e51b2008 	ldr	r2, [fp, #-8]
  12d574:	e3a01018 	mov	r1, #24
  12d578:	e0020291 	mul	r2, r1, r2
  12d57c:	e0833002 	add	r3, r3, r2
  12d580:	e5933000 	ldr	r3, [r3]
  12d584:	e3530000 	cmp	r3, #0
  12d588:	0a000010 	beq	12d5d0 <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d58c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d590:	e3403014 	movt	r3, #20
  12d594:	e51b2008 	ldr	r2, [fp, #-8]
  12d598:	e3a01018 	mov	r1, #24
  12d59c:	e0020291 	mul	r2, r1, r2
  12d5a0:	e0833002 	add	r3, r3, r2
  12d5a4:	e5933000 	ldr	r3, [r3]
  12d5a8:	e1a00003 	mov	r0, r3
  12d5ac:	ebffffb2 	bl	12d47c <free_etharp_q>
    arp_table[i].q = NULL;
  12d5b0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d5b4:	e3403014 	movt	r3, #20
  12d5b8:	e51b2008 	ldr	r2, [fp, #-8]
  12d5bc:	e3a01018 	mov	r1, #24
  12d5c0:	e0020291 	mul	r2, r1, r2
  12d5c4:	e0833002 	add	r3, r3, r2
  12d5c8:	e3a02000 	mov	r2, #0
  12d5cc:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d5d0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d5d4:	e3403014 	movt	r3, #20
  12d5d8:	e51b2008 	ldr	r2, [fp, #-8]
  12d5dc:	e3a01018 	mov	r1, #24
  12d5e0:	e0020291 	mul	r2, r1, r2
  12d5e4:	e0833002 	add	r3, r3, r2
  12d5e8:	e2833014 	add	r3, r3, #20
  12d5ec:	e3a02000 	mov	r2, #0
  12d5f0:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d5f4:	e320f000 	nop	{0}
  12d5f8:	e24bd004 	sub	sp, fp, #4
  12d5fc:	e8bd8800 	pop	{fp, pc}

0012d600 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d600:	e92d4800 	push	{fp, lr}
  12d604:	e28db004 	add	fp, sp, #4
  12d608:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d60c:	e3a03000 	mov	r3, #0
  12d610:	e54b3005 	strb	r3, [fp, #-5]
  12d614:	ea000084 	b	12d82c <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d618:	e55b2005 	ldrb	r2, [fp, #-5]
  12d61c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d620:	e3403014 	movt	r3, #20
  12d624:	e3a01018 	mov	r1, #24
  12d628:	e0020291 	mul	r2, r1, r2
  12d62c:	e0833002 	add	r3, r3, r2
  12d630:	e2833014 	add	r3, r3, #20
  12d634:	e5d33000 	ldrb	r3, [r3]
  12d638:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d63c:	e55b3006 	ldrb	r3, [fp, #-6]
  12d640:	e3530000 	cmp	r3, #0
  12d644:	0a000075 	beq	12d820 <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d648:	e55b2005 	ldrb	r2, [fp, #-5]
  12d64c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d650:	e3403014 	movt	r3, #20
  12d654:	e3a01018 	mov	r1, #24
  12d658:	e0010291 	mul	r1, r1, r2
  12d65c:	e0833001 	add	r3, r3, r1
  12d660:	e2833012 	add	r3, r3, #18
  12d664:	e1d330b0 	ldrh	r3, [r3]
  12d668:	e2833001 	add	r3, r3, #1
  12d66c:	e6ff1073 	uxth	r1, r3
  12d670:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d674:	e3403014 	movt	r3, #20
  12d678:	e3a00018 	mov	r0, #24
  12d67c:	e0020290 	mul	r2, r0, r2
  12d680:	e0833002 	add	r3, r3, r2
  12d684:	e2833012 	add	r3, r3, #18
  12d688:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d68c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d690:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d694:	e3403014 	movt	r3, #20
  12d698:	e3a01018 	mov	r1, #24
  12d69c:	e0020291 	mul	r2, r1, r2
  12d6a0:	e0833002 	add	r3, r3, r2
  12d6a4:	e2833012 	add	r3, r3, #18
  12d6a8:	e1d330b0 	ldrh	r3, [r3]
  12d6ac:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d6b0:	2a000013 	bcs	12d704 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d6b4:	e55b2005 	ldrb	r2, [fp, #-5]
  12d6b8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d6bc:	e3403014 	movt	r3, #20
  12d6c0:	e3a01018 	mov	r1, #24
  12d6c4:	e0020291 	mul	r2, r1, r2
  12d6c8:	e0833002 	add	r3, r3, r2
  12d6cc:	e2833014 	add	r3, r3, #20
  12d6d0:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d6d4:	e3530001 	cmp	r3, #1
  12d6d8:	1a00000d 	bne	12d714 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12d6dc:	e55b2005 	ldrb	r2, [fp, #-5]
  12d6e0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d6e4:	e3403014 	movt	r3, #20
  12d6e8:	e3a01018 	mov	r1, #24
  12d6ec:	e0020291 	mul	r2, r1, r2
  12d6f0:	e0833002 	add	r3, r3, r2
  12d6f4:	e2833012 	add	r3, r3, #18
  12d6f8:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d6fc:	e3530004 	cmp	r3, #4
  12d700:	9a000003 	bls	12d714 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12d704:	e55b3005 	ldrb	r3, [fp, #-5]
  12d708:	e1a00003 	mov	r0, r3
  12d70c:	ebffff91 	bl	12d558 <etharp_free_entry>
  12d710:	ea000042 	b	12d820 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12d714:	e55b2005 	ldrb	r2, [fp, #-5]
  12d718:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d71c:	e3403014 	movt	r3, #20
  12d720:	e3a01018 	mov	r1, #24
  12d724:	e0020291 	mul	r2, r1, r2
  12d728:	e0833002 	add	r3, r3, r2
  12d72c:	e2833014 	add	r3, r3, #20
  12d730:	e5d33000 	ldrb	r3, [r3]
  12d734:	e3530003 	cmp	r3, #3
  12d738:	1a000009 	bne	12d764 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12d73c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d740:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d744:	e3403014 	movt	r3, #20
  12d748:	e3a01018 	mov	r1, #24
  12d74c:	e0020291 	mul	r2, r1, r2
  12d750:	e0833002 	add	r3, r3, r2
  12d754:	e2833014 	add	r3, r3, #20
  12d758:	e3a02004 	mov	r2, #4
  12d75c:	e5c32000 	strb	r2, [r3]
  12d760:	ea00002e 	b	12d820 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12d764:	e55b2005 	ldrb	r2, [fp, #-5]
  12d768:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d76c:	e3403014 	movt	r3, #20
  12d770:	e3a01018 	mov	r1, #24
  12d774:	e0020291 	mul	r2, r1, r2
  12d778:	e0833002 	add	r3, r3, r2
  12d77c:	e2833014 	add	r3, r3, #20
  12d780:	e5d33000 	ldrb	r3, [r3]
  12d784:	e3530004 	cmp	r3, #4
  12d788:	1a000009 	bne	12d7b4 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12d78c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d790:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d794:	e3403014 	movt	r3, #20
  12d798:	e3a01018 	mov	r1, #24
  12d79c:	e0020291 	mul	r2, r1, r2
  12d7a0:	e0833002 	add	r3, r3, r2
  12d7a4:	e2833014 	add	r3, r3, #20
  12d7a8:	e3a02002 	mov	r2, #2
  12d7ac:	e5c32000 	strb	r2, [r3]
  12d7b0:	ea00001a 	b	12d820 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12d7b4:	e55b2005 	ldrb	r2, [fp, #-5]
  12d7b8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d7bc:	e3403014 	movt	r3, #20
  12d7c0:	e3a01018 	mov	r1, #24
  12d7c4:	e0020291 	mul	r2, r1, r2
  12d7c8:	e0833002 	add	r3, r3, r2
  12d7cc:	e2833014 	add	r3, r3, #20
  12d7d0:	e5d33000 	ldrb	r3, [r3]
  12d7d4:	e3530001 	cmp	r3, #1
  12d7d8:	1a000010 	bne	12d820 <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12d7dc:	e55b2005 	ldrb	r2, [fp, #-5]
  12d7e0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d7e4:	e3403014 	movt	r3, #20
  12d7e8:	e3a01018 	mov	r1, #24
  12d7ec:	e0020291 	mul	r2, r1, r2
  12d7f0:	e0833002 	add	r3, r3, r2
  12d7f4:	e2833008 	add	r3, r3, #8
  12d7f8:	e5930000 	ldr	r0, [r3]
  12d7fc:	e55b3005 	ldrb	r3, [fp, #-5]
  12d800:	e3a02018 	mov	r2, #24
  12d804:	e0020392 	mul	r2, r2, r3
  12d808:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d80c:	e3403014 	movt	r3, #20
  12d810:	e0823003 	add	r3, r2, r3
  12d814:	e2833004 	add	r3, r3, #4
  12d818:	e1a01003 	mov	r1, r3
  12d81c:	eb00066b 	bl	12f1d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d820:	e55b3005 	ldrb	r3, [fp, #-5]
  12d824:	e2833001 	add	r3, r3, #1
  12d828:	e54b3005 	strb	r3, [fp, #-5]
  12d82c:	e55b3005 	ldrb	r3, [fp, #-5]
  12d830:	e3530009 	cmp	r3, #9
  12d834:	9affff77 	bls	12d618 <etharp_tmr+0x18>
      }
    }
  }
}
  12d838:	e320f000 	nop	{0}
  12d83c:	e24bd004 	sub	sp, fp, #4
  12d840:	e8bd8800 	pop	{fp, pc}

0012d844 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12d844:	e92d4800 	push	{fp, lr}
  12d848:	e28db004 	add	fp, sp, #4
  12d84c:	e24dd020 	sub	sp, sp, #32
  12d850:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d854:	e1a03001 	mov	r3, r1
  12d858:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12d85c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12d860:	e3a0300a 	mov	r3, #10
  12d864:	e54b3005 	strb	r3, [fp, #-5]
  12d868:	e3a0300a 	mov	r3, #10
  12d86c:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12d870:	e3a0300a 	mov	r3, #10
  12d874:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12d878:	e3a03000 	mov	r3, #0
  12d87c:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12d880:	e3a0300a 	mov	r3, #10
  12d884:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12d888:	e3a03000 	mov	r3, #0
  12d88c:	e14b30bc 	strh	r3, [fp, #-12]
  12d890:	e3a03000 	mov	r3, #0
  12d894:	e14b30be 	strh	r3, [fp, #-14]
  12d898:	e3a03000 	mov	r3, #0
  12d89c:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d8a0:	e3a03000 	mov	r3, #0
  12d8a4:	e54b3008 	strb	r3, [fp, #-8]
  12d8a8:	ea000088 	b	12dad0 <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12d8ac:	e55b2008 	ldrb	r2, [fp, #-8]
  12d8b0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d8b4:	e3403014 	movt	r3, #20
  12d8b8:	e3a01018 	mov	r1, #24
  12d8bc:	e0020291 	mul	r2, r1, r2
  12d8c0:	e0833002 	add	r3, r3, r2
  12d8c4:	e2833014 	add	r3, r3, #20
  12d8c8:	e5d33000 	ldrb	r3, [r3]
  12d8cc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12d8d0:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12d8d4:	e353000a 	cmp	r3, #10
  12d8d8:	1a000005 	bne	12d8f4 <etharp_find_entry+0xb0>
  12d8dc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d8e0:	e3530000 	cmp	r3, #0
  12d8e4:	1a000002 	bne	12d8f4 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12d8e8:	e55b3008 	ldrb	r3, [fp, #-8]
  12d8ec:	e54b3007 	strb	r3, [fp, #-7]
  12d8f0:	ea000073 	b	12dac4 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12d8f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d8f8:	e3530000 	cmp	r3, #0
  12d8fc:	0a000070 	beq	12dac4 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12d900:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d904:	e3530001 	cmp	r3, #1
  12d908:	0a000009 	beq	12d934 <etharp_find_entry+0xf0>
  12d90c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d910:	e3530001 	cmp	r3, #1
  12d914:	8a000006 	bhi	12d934 <etharp_find_entry+0xf0>
  12d918:	e3080fdc 	movw	r0, #36828	; 0x8fdc
  12d91c:	e3400014 	movt	r0, #20
  12d920:	ebff55fb 	bl	103114 <rt_kprintf>
  12d924:	e3001126 	movw	r1, #294	; 0x126
  12d928:	e3080f88 	movw	r0, #36744	; 0x8f88
  12d92c:	e3400014 	movt	r0, #20
  12d930:	ebff7517 	bl	10ad94 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12d934:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d938:	e3530000 	cmp	r3, #0
  12d93c:	0a00000d 	beq	12d978 <etharp_find_entry+0x134>
  12d940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d944:	e5932000 	ldr	r2, [r3]
  12d948:	e55b1008 	ldrb	r1, [fp, #-8]
  12d94c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d950:	e3403014 	movt	r3, #20
  12d954:	e3a00018 	mov	r0, #24
  12d958:	e0010190 	mul	r1, r0, r1
  12d95c:	e0833001 	add	r3, r3, r1
  12d960:	e2833004 	add	r3, r3, #4
  12d964:	e5933000 	ldr	r3, [r3]
  12d968:	e1520003 	cmp	r2, r3
  12d96c:	1a000001 	bne	12d978 <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12d970:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12d974:	ea0000ce 	b	12dcb4 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12d978:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d97c:	e3530001 	cmp	r3, #1
  12d980:	1a000036 	bne	12da60 <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12d984:	e55b2008 	ldrb	r2, [fp, #-8]
  12d988:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d98c:	e3403014 	movt	r3, #20
  12d990:	e3a01018 	mov	r1, #24
  12d994:	e0020291 	mul	r2, r1, r2
  12d998:	e0833002 	add	r3, r3, r2
  12d99c:	e5933000 	ldr	r3, [r3]
  12d9a0:	e3530000 	cmp	r3, #0
  12d9a4:	0a000016 	beq	12da04 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12d9a8:	e55b2008 	ldrb	r2, [fp, #-8]
  12d9ac:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d9b0:	e3403014 	movt	r3, #20
  12d9b4:	e3a01018 	mov	r1, #24
  12d9b8:	e0020291 	mul	r2, r1, r2
  12d9bc:	e0833002 	add	r3, r3, r2
  12d9c0:	e2833012 	add	r3, r3, #18
  12d9c4:	e1d330b0 	ldrh	r3, [r3]
  12d9c8:	e15b20bc 	ldrh	r2, [fp, #-12]
  12d9cc:	e1520003 	cmp	r2, r3
  12d9d0:	8a00003b 	bhi	12dac4 <etharp_find_entry+0x280>
            old_queue = i;
  12d9d4:	e55b3008 	ldrb	r3, [fp, #-8]
  12d9d8:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12d9dc:	e55b2008 	ldrb	r2, [fp, #-8]
  12d9e0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d9e4:	e3403014 	movt	r3, #20
  12d9e8:	e3a01018 	mov	r1, #24
  12d9ec:	e0020291 	mul	r2, r1, r2
  12d9f0:	e0833002 	add	r3, r3, r2
  12d9f4:	e2833012 	add	r3, r3, #18
  12d9f8:	e1d330b0 	ldrh	r3, [r3]
  12d9fc:	e14b30bc 	strh	r3, [fp, #-12]
  12da00:	ea00002f 	b	12dac4 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12da04:	e55b2008 	ldrb	r2, [fp, #-8]
  12da08:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12da0c:	e3403014 	movt	r3, #20
  12da10:	e3a01018 	mov	r1, #24
  12da14:	e0020291 	mul	r2, r1, r2
  12da18:	e0833002 	add	r3, r3, r2
  12da1c:	e2833012 	add	r3, r3, #18
  12da20:	e1d330b0 	ldrh	r3, [r3]
  12da24:	e15b20be 	ldrh	r2, [fp, #-14]
  12da28:	e1520003 	cmp	r2, r3
  12da2c:	8a000024 	bhi	12dac4 <etharp_find_entry+0x280>
            old_pending = i;
  12da30:	e55b3008 	ldrb	r3, [fp, #-8]
  12da34:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12da38:	e55b2008 	ldrb	r2, [fp, #-8]
  12da3c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12da40:	e3403014 	movt	r3, #20
  12da44:	e3a01018 	mov	r1, #24
  12da48:	e0020291 	mul	r2, r1, r2
  12da4c:	e0833002 	add	r3, r3, r2
  12da50:	e2833012 	add	r3, r3, #18
  12da54:	e1d330b0 	ldrh	r3, [r3]
  12da58:	e14b30be 	strh	r3, [fp, #-14]
  12da5c:	ea000018 	b	12dac4 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12da60:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12da64:	e3530001 	cmp	r3, #1
  12da68:	9a000015 	bls	12dac4 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12da6c:	e55b2008 	ldrb	r2, [fp, #-8]
  12da70:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12da74:	e3403014 	movt	r3, #20
  12da78:	e3a01018 	mov	r1, #24
  12da7c:	e0020291 	mul	r2, r1, r2
  12da80:	e0833002 	add	r3, r3, r2
  12da84:	e2833012 	add	r3, r3, #18
  12da88:	e1d330b0 	ldrh	r3, [r3]
  12da8c:	e15b21b0 	ldrh	r2, [fp, #-16]
  12da90:	e1520003 	cmp	r2, r3
  12da94:	8a00000a 	bhi	12dac4 <etharp_find_entry+0x280>
            old_stable = i;
  12da98:	e55b3008 	ldrb	r3, [fp, #-8]
  12da9c:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12daa0:	e55b2008 	ldrb	r2, [fp, #-8]
  12daa4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12daa8:	e3403014 	movt	r3, #20
  12daac:	e3a01018 	mov	r1, #24
  12dab0:	e0020291 	mul	r2, r1, r2
  12dab4:	e0833002 	add	r3, r3, r2
  12dab8:	e2833012 	add	r3, r3, #18
  12dabc:	e1d330b0 	ldrh	r3, [r3]
  12dac0:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dac4:	e55b3008 	ldrb	r3, [fp, #-8]
  12dac8:	e2833001 	add	r3, r3, #1
  12dacc:	e54b3008 	strb	r3, [fp, #-8]
  12dad0:	e55b3008 	ldrb	r3, [fp, #-8]
  12dad4:	e3530009 	cmp	r3, #9
  12dad8:	9affff73 	bls	12d8ac <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12dadc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12dae0:	e2033002 	and	r3, r3, #2
  12dae4:	e3530000 	cmp	r3, #0
  12dae8:	1a000006 	bne	12db08 <etharp_find_entry+0x2c4>
  12daec:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12daf0:	e353000a 	cmp	r3, #10
  12daf4:	1a000005 	bne	12db10 <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12daf8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12dafc:	e2033001 	and	r3, r3, #1
  12db00:	e3530000 	cmp	r3, #0
  12db04:	1a000001 	bne	12db10 <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12db08:	e3e03000 	mvn	r3, #0
  12db0c:	ea000068 	b	12dcb4 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12db10:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12db14:	e3530009 	cmp	r3, #9
  12db18:	ca000002 	bgt	12db28 <etharp_find_entry+0x2e4>
    i = empty;
  12db1c:	e55b3007 	ldrb	r3, [fp, #-7]
  12db20:	e54b3008 	strb	r3, [fp, #-8]
  12db24:	ea000030 	b	12dbec <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12db28:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12db2c:	e3530009 	cmp	r3, #9
  12db30:	ca000012 	bgt	12db80 <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12db34:	e55b3006 	ldrb	r3, [fp, #-6]
  12db38:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12db3c:	e55b2008 	ldrb	r2, [fp, #-8]
  12db40:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12db44:	e3403014 	movt	r3, #20
  12db48:	e3a01018 	mov	r1, #24
  12db4c:	e0020291 	mul	r2, r1, r2
  12db50:	e0833002 	add	r3, r3, r2
  12db54:	e5933000 	ldr	r3, [r3]
  12db58:	e3530000 	cmp	r3, #0
  12db5c:	0a000015 	beq	12dbb8 <etharp_find_entry+0x374>
  12db60:	e309001c 	movw	r0, #36892	; 0x901c
  12db64:	e3400014 	movt	r0, #20
  12db68:	ebff5569 	bl	103114 <rt_kprintf>
  12db6c:	e300116f 	movw	r1, #367	; 0x16f
  12db70:	e3080f88 	movw	r0, #36744	; 0x8f88
  12db74:	e3400014 	movt	r0, #20
  12db78:	ebff7485 	bl	10ad94 <sys_arch_assert>
  12db7c:	ea00000d 	b	12dbb8 <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12db80:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12db84:	e3530009 	cmp	r3, #9
  12db88:	ca000002 	bgt	12db98 <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12db8c:	e55b3005 	ldrb	r3, [fp, #-5]
  12db90:	e54b3008 	strb	r3, [fp, #-8]
  12db94:	ea000007 	b	12dbb8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12db98:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12db9c:	e3530009 	cmp	r3, #9
  12dba0:	ca000002 	bgt	12dbb0 <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12dba4:	e55b3009 	ldrb	r3, [fp, #-9]
  12dba8:	e54b3008 	strb	r3, [fp, #-8]
  12dbac:	ea000001 	b	12dbb8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12dbb0:	e3e03000 	mvn	r3, #0
  12dbb4:	ea00003e 	b	12dcb4 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dbb8:	e55b3008 	ldrb	r3, [fp, #-8]
  12dbbc:	e3530009 	cmp	r3, #9
  12dbc0:	9a000006 	bls	12dbe0 <etharp_find_entry+0x39c>
  12dbc4:	e3090034 	movw	r0, #36916	; 0x9034
  12dbc8:	e3400014 	movt	r0, #20
  12dbcc:	ebff5550 	bl	103114 <rt_kprintf>
  12dbd0:	e3001181 	movw	r1, #385	; 0x181
  12dbd4:	e3080f88 	movw	r0, #36744	; 0x8f88
  12dbd8:	e3400014 	movt	r0, #20
  12dbdc:	ebff746c 	bl	10ad94 <sys_arch_assert>
    etharp_free_entry(i);
  12dbe0:	e55b3008 	ldrb	r3, [fp, #-8]
  12dbe4:	e1a00003 	mov	r0, r3
  12dbe8:	ebfffe5a 	bl	12d558 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dbec:	e55b3008 	ldrb	r3, [fp, #-8]
  12dbf0:	e3530009 	cmp	r3, #9
  12dbf4:	9a000006 	bls	12dc14 <etharp_find_entry+0x3d0>
  12dbf8:	e3090034 	movw	r0, #36916	; 0x9034
  12dbfc:	e3400014 	movt	r0, #20
  12dc00:	ebff5543 	bl	103114 <rt_kprintf>
  12dc04:	e3001185 	movw	r1, #389	; 0x185
  12dc08:	e3080f88 	movw	r0, #36744	; 0x8f88
  12dc0c:	e3400014 	movt	r0, #20
  12dc10:	ebff745f 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12dc14:	e55b2008 	ldrb	r2, [fp, #-8]
  12dc18:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dc1c:	e3403014 	movt	r3, #20
  12dc20:	e3a01018 	mov	r1, #24
  12dc24:	e0020291 	mul	r2, r1, r2
  12dc28:	e0833002 	add	r3, r3, r2
  12dc2c:	e2833014 	add	r3, r3, #20
  12dc30:	e5d33000 	ldrb	r3, [r3]
  12dc34:	e3530000 	cmp	r3, #0
  12dc38:	0a000006 	beq	12dc58 <etharp_find_entry+0x414>
  12dc3c:	e3090048 	movw	r0, #36936	; 0x9048
  12dc40:	e3400014 	movt	r0, #20
  12dc44:	ebff5532 	bl	103114 <rt_kprintf>
  12dc48:	e3001187 	movw	r1, #391	; 0x187
  12dc4c:	e3080f88 	movw	r0, #36744	; 0x8f88
  12dc50:	e3400014 	movt	r0, #20
  12dc54:	ebff744e 	bl	10ad94 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12dc58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc5c:	e3530000 	cmp	r3, #0
  12dc60:	0a000009 	beq	12dc8c <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12dc64:	e55b1008 	ldrb	r1, [fp, #-8]
  12dc68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc6c:	e5932000 	ldr	r2, [r3]
  12dc70:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dc74:	e3403014 	movt	r3, #20
  12dc78:	e3a00018 	mov	r0, #24
  12dc7c:	e0010190 	mul	r1, r0, r1
  12dc80:	e0833001 	add	r3, r3, r1
  12dc84:	e2833004 	add	r3, r3, #4
  12dc88:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12dc8c:	e55b2008 	ldrb	r2, [fp, #-8]
  12dc90:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dc94:	e3403014 	movt	r3, #20
  12dc98:	e3a01018 	mov	r1, #24
  12dc9c:	e0020291 	mul	r2, r1, r2
  12dca0:	e0833002 	add	r3, r3, r2
  12dca4:	e2833012 	add	r3, r3, #18
  12dca8:	e3a02000 	mov	r2, #0
  12dcac:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12dcb0:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12dcb4:	e1a00003 	mov	r0, r3
  12dcb8:	e24bd004 	sub	sp, fp, #4
  12dcbc:	e8bd8800 	pop	{fp, pc}

0012dcc0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12dcc0:	e92d4800 	push	{fp, lr}
  12dcc4:	e28db004 	add	fp, sp, #4
  12dcc8:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dccc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dcd0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12dcd4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12dcd8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12dcdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dce0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12dce4:	e3530006 	cmp	r3, #6
  12dce8:	0a000006 	beq	12dd08 <etharp_update_arp_entry+0x48>
  12dcec:	e3090074 	movw	r0, #36980	; 0x9074
  12dcf0:	e3400014 	movt	r0, #20
  12dcf4:	ebff5506 	bl	103114 <rt_kprintf>
  12dcf8:	e30011ab 	movw	r1, #427	; 0x1ab
  12dcfc:	e3080f88 	movw	r0, #36744	; 0x8f88
  12dd00:	e3400014 	movt	r0, #20
  12dd04:	ebff7422 	bl	10ad94 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12dd08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dd0c:	e3530000 	cmp	r3, #0
  12dd10:	0a000010 	beq	12dd58 <etharp_update_arp_entry+0x98>
  12dd14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dd18:	e5933000 	ldr	r3, [r3]
  12dd1c:	e3530000 	cmp	r3, #0
  12dd20:	0a00000c 	beq	12dd58 <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12dd24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dd28:	e5933000 	ldr	r3, [r3]
  12dd2c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12dd30:	e1a00003 	mov	r0, r3
  12dd34:	eb00112a 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  12dd38:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12dd3c:	e3530000 	cmp	r3, #0
  12dd40:	1a000004 	bne	12dd58 <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12dd44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dd48:	e5933000 	ldr	r3, [r3]
  12dd4c:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12dd50:	e35300e0 	cmp	r3, #224	; 0xe0
  12dd54:	1a000001 	bne	12dd60 <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12dd58:	e3e0300f 	mvn	r3, #15
  12dd5c:	ea00005e 	b	12dedc <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12dd60:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12dd64:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12dd68:	e1a01003 	mov	r1, r3
  12dd6c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12dd70:	ebfffeb3 	bl	12d844 <etharp_find_entry>
  12dd74:	e1a03000 	mov	r3, r0
  12dd78:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12dd7c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dd80:	e3530000 	cmp	r3, #0
  12dd84:	aa000001 	bge	12dd90 <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12dd88:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dd8c:	ea000052 	b	12dedc <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12dd90:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dd94:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dd98:	e3403014 	movt	r3, #20
  12dd9c:	e3a01018 	mov	r1, #24
  12dda0:	e0020291 	mul	r2, r1, r2
  12dda4:	e0833002 	add	r3, r3, r2
  12dda8:	e2833014 	add	r3, r3, #20
  12ddac:	e3a02002 	mov	r2, #2
  12ddb0:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12ddb4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12ddb8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ddbc:	e3403014 	movt	r3, #20
  12ddc0:	e3a01018 	mov	r1, #24
  12ddc4:	e0020291 	mul	r2, r1, r2
  12ddc8:	e0833002 	add	r3, r3, r2
  12ddcc:	e2833008 	add	r3, r3, #8
  12ddd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12ddd4:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12ddd8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dddc:	e3a02018 	mov	r2, #24
  12dde0:	e0030392 	mul	r3, r2, r3
  12dde4:	e2832008 	add	r2, r3, #8
  12dde8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ddec:	e3403014 	movt	r3, #20
  12ddf0:	e0823003 	add	r3, r2, r3
  12ddf4:	e2833004 	add	r3, r3, #4
  12ddf8:	e3a02006 	mov	r2, #6
  12ddfc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12de00:	e1a00003 	mov	r0, r3
  12de04:	eb004b1e 	bl	140a84 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12de08:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12de0c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de10:	e3403014 	movt	r3, #20
  12de14:	e3a01018 	mov	r1, #24
  12de18:	e0020291 	mul	r2, r1, r2
  12de1c:	e0833002 	add	r3, r3, r2
  12de20:	e2833012 	add	r3, r3, #18
  12de24:	e3a02000 	mov	r2, #0
  12de28:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12de2c:	ea000020 	b	12deb4 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12de30:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12de34:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de38:	e3403014 	movt	r3, #20
  12de3c:	e3a01018 	mov	r1, #24
  12de40:	e0020291 	mul	r2, r1, r2
  12de44:	e0833002 	add	r3, r3, r2
  12de48:	e5933000 	ldr	r3, [r3]
  12de4c:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12de50:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12de54:	e51b300c 	ldr	r3, [fp, #-12]
  12de58:	e5932000 	ldr	r2, [r3]
  12de5c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de60:	e3403014 	movt	r3, #20
  12de64:	e3a00018 	mov	r0, #24
  12de68:	e0010190 	mul	r1, r0, r1
  12de6c:	e0833001 	add	r3, r3, r1
  12de70:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12de74:	e51b300c 	ldr	r3, [fp, #-12]
  12de78:	e5933004 	ldr	r3, [r3, #4]
  12de7c:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12de80:	e51b100c 	ldr	r1, [fp, #-12]
  12de84:	e3a0000b 	mov	r0, #11
  12de88:	ebffac2f 	bl	118f4c <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12de8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12de90:	e283203b 	add	r2, r3, #59	; 0x3b
  12de94:	e3a03b02 	mov	r3, #2048	; 0x800
  12de98:	e58d3000 	str	r3, [sp]
  12de9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12dea0:	e51b1010 	ldr	r1, [fp, #-16]
  12dea4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12dea8:	ebffeb48 	bl	128bd0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12deac:	e51b0010 	ldr	r0, [fp, #-16]
  12deb0:	ebffb333 	bl	11ab84 <pbuf_free>
  while (arp_table[i].q != NULL) {
  12deb4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12deb8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12debc:	e3403014 	movt	r3, #20
  12dec0:	e3a01018 	mov	r1, #24
  12dec4:	e0020291 	mul	r2, r1, r2
  12dec8:	e0833002 	add	r3, r3, r2
  12decc:	e5933000 	ldr	r3, [r3]
  12ded0:	e3530000 	cmp	r3, #0
  12ded4:	1affffd5 	bne	12de30 <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12ded8:	e3a03000 	mov	r3, #0
}
  12dedc:	e1a00003 	mov	r0, r3
  12dee0:	e24bd004 	sub	sp, fp, #4
  12dee4:	e8bd8800 	pop	{fp, pc}

0012dee8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12dee8:	e92d4800 	push	{fp, lr}
  12deec:	e28db004 	add	fp, sp, #4
  12def0:	e24dd010 	sub	sp, sp, #16
  12def4:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12def8:	e3a03000 	mov	r3, #0
  12defc:	e54b3005 	strb	r3, [fp, #-5]
  12df00:	ea00001c 	b	12df78 <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12df04:	e55b2005 	ldrb	r2, [fp, #-5]
  12df08:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12df0c:	e3403014 	movt	r3, #20
  12df10:	e3a01018 	mov	r1, #24
  12df14:	e0020291 	mul	r2, r1, r2
  12df18:	e0833002 	add	r3, r3, r2
  12df1c:	e2833014 	add	r3, r3, #20
  12df20:	e5d33000 	ldrb	r3, [r3]
  12df24:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12df28:	e55b3006 	ldrb	r3, [fp, #-6]
  12df2c:	e3530000 	cmp	r3, #0
  12df30:	0a00000d 	beq	12df6c <etharp_cleanup_netif+0x84>
  12df34:	e55b2005 	ldrb	r2, [fp, #-5]
  12df38:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12df3c:	e3403014 	movt	r3, #20
  12df40:	e3a01018 	mov	r1, #24
  12df44:	e0020291 	mul	r2, r1, r2
  12df48:	e0833002 	add	r3, r3, r2
  12df4c:	e2833008 	add	r3, r3, #8
  12df50:	e5933000 	ldr	r3, [r3]
  12df54:	e51b2010 	ldr	r2, [fp, #-16]
  12df58:	e1520003 	cmp	r2, r3
  12df5c:	1a000002 	bne	12df6c <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12df60:	e55b3005 	ldrb	r3, [fp, #-5]
  12df64:	e1a00003 	mov	r0, r3
  12df68:	ebfffd7a 	bl	12d558 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12df6c:	e55b3005 	ldrb	r3, [fp, #-5]
  12df70:	e2833001 	add	r3, r3, #1
  12df74:	e54b3005 	strb	r3, [fp, #-5]
  12df78:	e55b3005 	ldrb	r3, [fp, #-5]
  12df7c:	e3530009 	cmp	r3, #9
  12df80:	9affffdf 	bls	12df04 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12df84:	e320f000 	nop	{0}
  12df88:	e24bd004 	sub	sp, fp, #4
  12df8c:	e8bd8800 	pop	{fp, pc}

0012df90 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12df90:	e92d4800 	push	{fp, lr}
  12df94:	e28db004 	add	fp, sp, #4
  12df98:	e24dd018 	sub	sp, sp, #24
  12df9c:	e50b0010 	str	r0, [fp, #-16]
  12dfa0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12dfa4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12dfa8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12dfac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dfb0:	e3530000 	cmp	r3, #0
  12dfb4:	0a000002 	beq	12dfc4 <etharp_find_addr+0x34>
  12dfb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dfbc:	e3530000 	cmp	r3, #0
  12dfc0:	1a000006 	bne	12dfe0 <etharp_find_addr+0x50>
  12dfc4:	e3090098 	movw	r0, #37016	; 0x9098
  12dfc8:	e3400014 	movt	r0, #20
  12dfcc:	ebff5450 	bl	103114 <rt_kprintf>
  12dfd0:	e300124d 	movw	r1, #589	; 0x24d
  12dfd4:	e3080f88 	movw	r0, #36744	; 0x8f88
  12dfd8:	e3400014 	movt	r0, #20
  12dfdc:	ebff736c 	bl	10ad94 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12dfe0:	e51b2010 	ldr	r2, [fp, #-16]
  12dfe4:	e3a01002 	mov	r1, #2
  12dfe8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12dfec:	ebfffe14 	bl	12d844 <etharp_find_entry>
  12dff0:	e1a03000 	mov	r3, r0
  12dff4:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12dff8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dffc:	e3530000 	cmp	r3, #0
  12e000:	ba00001e 	blt	12e080 <etharp_find_addr+0xf0>
  12e004:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e008:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e00c:	e3403014 	movt	r3, #20
  12e010:	e3a01018 	mov	r1, #24
  12e014:	e0020291 	mul	r2, r1, r2
  12e018:	e0833002 	add	r3, r3, r2
  12e01c:	e2833014 	add	r3, r3, #20
  12e020:	e5d33000 	ldrb	r3, [r3]
  12e024:	e3530001 	cmp	r3, #1
  12e028:	9a000014 	bls	12e080 <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12e02c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e030:	e3a02018 	mov	r2, #24
  12e034:	e0030392 	mul	r3, r2, r3
  12e038:	e2832008 	add	r2, r3, #8
  12e03c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e040:	e3403014 	movt	r3, #20
  12e044:	e0823003 	add	r3, r2, r3
  12e048:	e2832004 	add	r2, r3, #4
  12e04c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e050:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12e054:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e058:	e3a02018 	mov	r2, #24
  12e05c:	e0020392 	mul	r2, r2, r3
  12e060:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e064:	e3403014 	movt	r3, #20
  12e068:	e0823003 	add	r3, r2, r3
  12e06c:	e2832004 	add	r2, r3, #4
  12e070:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e074:	e5832000 	str	r2, [r3]
      return i;
  12e078:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e07c:	ea000000 	b	12e084 <etharp_find_addr+0xf4>
  }
  return -1;
  12e080:	e3e03000 	mvn	r3, #0
}
  12e084:	e1a00003 	mov	r0, r3
  12e088:	e24bd004 	sub	sp, fp, #4
  12e08c:	e8bd8800 	pop	{fp, pc}

0012e090 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e090:	e92d4800 	push	{fp, lr}
  12e094:	e28db004 	add	fp, sp, #4
  12e098:	e24dd010 	sub	sp, sp, #16
  12e09c:	e50b100c 	str	r1, [fp, #-12]
  12e0a0:	e50b2010 	str	r2, [fp, #-16]
  12e0a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e0a8:	e1a03000 	mov	r3, r0
  12e0ac:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e0b0:	e51b300c 	ldr	r3, [fp, #-12]
  12e0b4:	e3530000 	cmp	r3, #0
  12e0b8:	1a000006 	bne	12e0d8 <etharp_get_entry+0x48>
  12e0bc:	e30900bc 	movw	r0, #37052	; 0x90bc
  12e0c0:	e3400014 	movt	r0, #20
  12e0c4:	ebff5412 	bl	103114 <rt_kprintf>
  12e0c8:	e3001266 	movw	r1, #614	; 0x266
  12e0cc:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e0d0:	e3400014 	movt	r0, #20
  12e0d4:	ebff732e 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e0d8:	e51b3010 	ldr	r3, [fp, #-16]
  12e0dc:	e3530000 	cmp	r3, #0
  12e0e0:	1a000006 	bne	12e100 <etharp_get_entry+0x70>
  12e0e4:	e30900cc 	movw	r0, #37068	; 0x90cc
  12e0e8:	e3400014 	movt	r0, #20
  12e0ec:	ebff5408 	bl	103114 <rt_kprintf>
  12e0f0:	e3001267 	movw	r1, #615	; 0x267
  12e0f4:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e0f8:	e3400014 	movt	r0, #20
  12e0fc:	ebff7324 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e104:	e3530000 	cmp	r3, #0
  12e108:	1a000006 	bne	12e128 <etharp_get_entry+0x98>
  12e10c:	e30900dc 	movw	r0, #37084	; 0x90dc
  12e110:	e3400014 	movt	r0, #20
  12e114:	ebff53fe 	bl	103114 <rt_kprintf>
  12e118:	e3a01f9a 	mov	r1, #616	; 0x268
  12e11c:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e120:	e3400014 	movt	r0, #20
  12e124:	ebff731a 	bl	10ad94 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e128:	e55b3005 	ldrb	r3, [fp, #-5]
  12e12c:	e3530009 	cmp	r3, #9
  12e130:	8a000028 	bhi	12e1d8 <etharp_get_entry+0x148>
  12e134:	e55b2005 	ldrb	r2, [fp, #-5]
  12e138:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e13c:	e3403014 	movt	r3, #20
  12e140:	e3a01018 	mov	r1, #24
  12e144:	e0020291 	mul	r2, r1, r2
  12e148:	e0833002 	add	r3, r3, r2
  12e14c:	e2833014 	add	r3, r3, #20
  12e150:	e5d33000 	ldrb	r3, [r3]
  12e154:	e3530001 	cmp	r3, #1
  12e158:	9a00001e 	bls	12e1d8 <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e15c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e160:	e3a02018 	mov	r2, #24
  12e164:	e0020392 	mul	r2, r2, r3
  12e168:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e16c:	e3403014 	movt	r3, #20
  12e170:	e0823003 	add	r3, r2, r3
  12e174:	e2832004 	add	r2, r3, #4
  12e178:	e51b300c 	ldr	r3, [fp, #-12]
  12e17c:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e180:	e55b2005 	ldrb	r2, [fp, #-5]
  12e184:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e188:	e3403014 	movt	r3, #20
  12e18c:	e3a01018 	mov	r1, #24
  12e190:	e0020291 	mul	r2, r1, r2
  12e194:	e0833002 	add	r3, r3, r2
  12e198:	e2833008 	add	r3, r3, #8
  12e19c:	e5932000 	ldr	r2, [r3]
  12e1a0:	e51b3010 	ldr	r3, [fp, #-16]
  12e1a4:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e1a8:	e55b3005 	ldrb	r3, [fp, #-5]
  12e1ac:	e3a02018 	mov	r2, #24
  12e1b0:	e0030392 	mul	r3, r2, r3
  12e1b4:	e2832008 	add	r2, r3, #8
  12e1b8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e1bc:	e3403014 	movt	r3, #20
  12e1c0:	e0823003 	add	r3, r2, r3
  12e1c4:	e2832004 	add	r2, r3, #4
  12e1c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e1cc:	e5832000 	str	r2, [r3]
    return 1;
  12e1d0:	e3a03001 	mov	r3, #1
  12e1d4:	ea000000 	b	12e1dc <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e1d8:	e3a03000 	mov	r3, #0
  }
}
  12e1dc:	e1a00003 	mov	r0, r3
  12e1e0:	e24bd004 	sub	sp, fp, #4
  12e1e4:	e8bd8800 	pop	{fp, pc}

0012e1e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e1e8:	e92d4800 	push	{fp, lr}
  12e1ec:	e28db004 	add	fp, sp, #4
  12e1f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e1f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e1f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e1fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e200:	e3530000 	cmp	r3, #0
  12e204:	1a000007 	bne	12e228 <etharp_input+0x40>
  12e208:	e30900cc 	movw	r0, #37068	; 0x90cc
  12e20c:	e3400014 	movt	r0, #20
  12e210:	ebff53bf 	bl	103114 <rt_kprintf>
  12e214:	e3a01fa2 	mov	r1, #648	; 0x288
  12e218:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e21c:	e3400014 	movt	r0, #20
  12e220:	ebff72db 	bl	10ad94 <sys_arch_assert>
  12e224:	ea000085 	b	12e440 <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e228:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e22c:	e5933004 	ldr	r3, [r3, #4]
  12e230:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e234:	e51b300c 	ldr	r3, [fp, #-12]
  12e238:	e1d330b0 	ldrh	r3, [r3]
  12e23c:	e6ff3073 	uxth	r3, r3
  12e240:	e3530c01 	cmp	r3, #256	; 0x100
  12e244:	1a00000c 	bne	12e27c <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e248:	e51b300c 	ldr	r3, [fp, #-12]
  12e24c:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e250:	e3530006 	cmp	r3, #6
  12e254:	1a000008 	bne	12e27c <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e258:	e51b300c 	ldr	r3, [fp, #-12]
  12e25c:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e260:	e3530004 	cmp	r3, #4
  12e264:	1a000004 	bne	12e27c <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e268:	e51b300c 	ldr	r3, [fp, #-12]
  12e26c:	e1d330b2 	ldrh	r3, [r3, #2]
  12e270:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e274:	e3530008 	cmp	r3, #8
  12e278:	0a000012 	beq	12e2c8 <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e27c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e280:	e3403015 	movt	r3, #21
  12e284:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e288:	e2833001 	add	r3, r3, #1
  12e28c:	e6ff2073 	uxth	r2, r3
  12e290:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e294:	e3403015 	movt	r3, #21
  12e298:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e29c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e2a0:	e3403015 	movt	r3, #21
  12e2a4:	e1d331be 	ldrh	r3, [r3, #30]
  12e2a8:	e2833001 	add	r3, r3, #1
  12e2ac:	e6ff2073 	uxth	r2, r3
  12e2b0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e2b4:	e3403015 	movt	r3, #21
  12e2b8:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e2bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e2c0:	ebffb22f 	bl	11ab84 <pbuf_free>
    return;
  12e2c4:	ea00005d 	b	12e440 <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e2c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e2cc:	e3403015 	movt	r3, #21
  12e2d0:	e1d331ba 	ldrh	r3, [r3, #26]
  12e2d4:	e2833001 	add	r3, r3, #1
  12e2d8:	e6ff2073 	uxth	r2, r3
  12e2dc:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e2e0:	e3403015 	movt	r3, #21
  12e2e4:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e2e8:	e51b300c 	ldr	r3, [fp, #-12]
  12e2ec:	e283300e 	add	r3, r3, #14
  12e2f0:	e5933000 	ldr	r3, [r3]
  12e2f4:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e2f8:	e51b300c 	ldr	r3, [fp, #-12]
  12e2fc:	e2833018 	add	r3, r3, #24
  12e300:	e5933000 	ldr	r3, [r3]
  12e304:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e308:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e30c:	e2833004 	add	r3, r3, #4
  12e310:	e5933000 	ldr	r3, [r3]
  12e314:	e3530000 	cmp	r3, #0
  12e318:	1a000002 	bne	12e328 <etharp_input+0x140>
    for_us = 0;
  12e31c:	e3a03000 	mov	r3, #0
  12e320:	e54b3005 	strb	r3, [fp, #-5]
  12e324:	ea000008 	b	12e34c <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e328:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e32c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e330:	e2833004 	add	r3, r3, #4
  12e334:	e5933000 	ldr	r3, [r3]
  12e338:	e1520003 	cmp	r2, r3
  12e33c:	03a03001 	moveq	r3, #1
  12e340:	13a03000 	movne	r3, #0
  12e344:	e6ef3073 	uxtb	r3, r3
  12e348:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e34c:	e51b300c 	ldr	r3, [fp, #-12]
  12e350:	e2832008 	add	r2, r3, #8
  12e354:	e55b3005 	ldrb	r3, [fp, #-5]
  12e358:	e3530000 	cmp	r3, #0
  12e35c:	0a000001 	beq	12e368 <etharp_input+0x180>
  12e360:	e3a03001 	mov	r3, #1
  12e364:	ea000000 	b	12e36c <etharp_input+0x184>
  12e368:	e3a03002 	mov	r3, #2
  12e36c:	e24b1010 	sub	r1, fp, #16
  12e370:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e374:	ebfffe51 	bl	12dcc0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e378:	e51b300c 	ldr	r3, [fp, #-12]
  12e37c:	e1d330b6 	ldrh	r3, [r3, #6]
  12e380:	e6ff3073 	uxth	r3, r3
  12e384:	e3530c01 	cmp	r3, #256	; 0x100
  12e388:	0a000002 	beq	12e398 <etharp_input+0x1b0>
  12e38c:	e3530c02 	cmp	r3, #512	; 0x200
  12e390:	0a000019 	beq	12e3fc <etharp_input+0x214>
  12e394:	ea00001d 	b	12e410 <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e398:	e55b3005 	ldrb	r3, [fp, #-5]
  12e39c:	e3530000 	cmp	r3, #0
  12e3a0:	0a000023 	beq	12e434 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e3a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e3a8:	e283003b 	add	r0, r3, #59	; 0x3b
  12e3ac:	e51b300c 	ldr	r3, [fp, #-12]
  12e3b0:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e3b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e3b8:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e3bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e3c0:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e3c4:	e51b200c 	ldr	r2, [fp, #-12]
  12e3c8:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e3cc:	e3a01002 	mov	r1, #2
  12e3d0:	e58d100c 	str	r1, [sp, #12]
  12e3d4:	e24b1010 	sub	r1, fp, #16
  12e3d8:	e58d1008 	str	r1, [sp, #8]
  12e3dc:	e58d2004 	str	r2, [sp, #4]
  12e3e0:	e58d3000 	str	r3, [sp]
  12e3e4:	e1a0300e 	mov	r3, lr
  12e3e8:	e1a0200c 	mov	r2, ip
  12e3ec:	e1a01000 	mov	r1, r0
  12e3f0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e3f4:	eb0002d5 	bl	12ef50 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e3f8:	ea00000d 	b	12e434 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e3fc:	e24b3010 	sub	r3, fp, #16
  12e400:	e1a01003 	mov	r1, r3
  12e404:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e408:	ebfff256 	bl	12ad68 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e40c:	ea000009 	b	12e438 <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e410:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e414:	e3403015 	movt	r3, #21
  12e418:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e41c:	e2833001 	add	r3, r3, #1
  12e420:	e6ff2073 	uxth	r2, r3
  12e424:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e428:	e3403015 	movt	r3, #21
  12e42c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e430:	ea000000 	b	12e438 <etharp_input+0x250>
    break;
  12e434:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e438:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e43c:	ebffb1d0 	bl	11ab84 <pbuf_free>
}
  12e440:	e24bd004 	sub	sp, fp, #4
  12e444:	e8bd8800 	pop	{fp, pc}

0012e448 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e448:	e92d4800 	push	{fp, lr}
  12e44c:	e28db004 	add	fp, sp, #4
  12e450:	e24dd018 	sub	sp, sp, #24
  12e454:	e50b0008 	str	r0, [fp, #-8]
  12e458:	e50b100c 	str	r1, [fp, #-12]
  12e45c:	e1a03002 	mov	r3, r2
  12e460:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e464:	e55b200d 	ldrb	r2, [fp, #-13]
  12e468:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e46c:	e3403014 	movt	r3, #20
  12e470:	e3a01018 	mov	r1, #24
  12e474:	e0020291 	mul	r2, r1, r2
  12e478:	e0833002 	add	r3, r3, r2
  12e47c:	e2833014 	add	r3, r3, #20
  12e480:	e5d33000 	ldrb	r3, [r3]
  12e484:	e3530001 	cmp	r3, #1
  12e488:	8a000006 	bhi	12e4a8 <etharp_output_to_arp_index+0x60>
  12e48c:	e30900ec 	movw	r0, #37100	; 0x90ec
  12e490:	e3400014 	movt	r0, #20
  12e494:	ebff531e 	bl	103114 <rt_kprintf>
  12e498:	e30012ed 	movw	r1, #749	; 0x2ed
  12e49c:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e4a0:	e3400014 	movt	r0, #20
  12e4a4:	ebff723a 	bl	10ad94 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e4a8:	e55b200d 	ldrb	r2, [fp, #-13]
  12e4ac:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e4b0:	e3403014 	movt	r3, #20
  12e4b4:	e3a01018 	mov	r1, #24
  12e4b8:	e0020291 	mul	r2, r1, r2
  12e4bc:	e0833002 	add	r3, r3, r2
  12e4c0:	e2833014 	add	r3, r3, #20
  12e4c4:	e5d33000 	ldrb	r3, [r3]
  12e4c8:	e3530002 	cmp	r3, #2
  12e4cc:	1a000049 	bne	12e5f8 <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e4d0:	e55b200d 	ldrb	r2, [fp, #-13]
  12e4d4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e4d8:	e3403014 	movt	r3, #20
  12e4dc:	e3a01018 	mov	r1, #24
  12e4e0:	e0020291 	mul	r2, r1, r2
  12e4e4:	e0833002 	add	r3, r3, r2
  12e4e8:	e2833012 	add	r3, r3, #18
  12e4ec:	e1d330b0 	ldrh	r3, [r3]
  12e4f0:	e3530f47 	cmp	r3, #284	; 0x11c
  12e4f4:	9a000016 	bls	12e554 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e4f8:	e55b300d 	ldrb	r3, [fp, #-13]
  12e4fc:	e3a02018 	mov	r2, #24
  12e500:	e0020392 	mul	r2, r2, r3
  12e504:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e508:	e3403014 	movt	r3, #20
  12e50c:	e0823003 	add	r3, r2, r3
  12e510:	e2833004 	add	r3, r3, #4
  12e514:	e1a01003 	mov	r1, r3
  12e518:	e51b0008 	ldr	r0, [fp, #-8]
  12e51c:	eb00032b 	bl	12f1d0 <etharp_request>
  12e520:	e1a03000 	mov	r3, r0
  12e524:	e3530000 	cmp	r3, #0
  12e528:	1a000032 	bne	12e5f8 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e52c:	e55b200d 	ldrb	r2, [fp, #-13]
  12e530:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e534:	e3403014 	movt	r3, #20
  12e538:	e3a01018 	mov	r1, #24
  12e53c:	e0020291 	mul	r2, r1, r2
  12e540:	e0833002 	add	r3, r3, r2
  12e544:	e2833014 	add	r3, r3, #20
  12e548:	e3a02003 	mov	r2, #3
  12e54c:	e5c32000 	strb	r2, [r3]
  12e550:	ea000028 	b	12e5f8 <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e554:	e55b200d 	ldrb	r2, [fp, #-13]
  12e558:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e55c:	e3403014 	movt	r3, #20
  12e560:	e3a01018 	mov	r1, #24
  12e564:	e0020291 	mul	r2, r1, r2
  12e568:	e0833002 	add	r3, r3, r2
  12e56c:	e2833012 	add	r3, r3, #18
  12e570:	e1d330b0 	ldrh	r3, [r3]
  12e574:	e300210d 	movw	r2, #269	; 0x10d
  12e578:	e1530002 	cmp	r3, r2
  12e57c:	9a00001d 	bls	12e5f8 <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e580:	e55b300d 	ldrb	r3, [fp, #-13]
  12e584:	e3a02018 	mov	r2, #24
  12e588:	e0020392 	mul	r2, r2, r3
  12e58c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e590:	e3403014 	movt	r3, #20
  12e594:	e0823003 	add	r3, r2, r3
  12e598:	e2831004 	add	r1, r3, #4
  12e59c:	e55b300d 	ldrb	r3, [fp, #-13]
  12e5a0:	e3a02018 	mov	r2, #24
  12e5a4:	e0030392 	mul	r3, r2, r3
  12e5a8:	e2832008 	add	r2, r3, #8
  12e5ac:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e5b0:	e3403014 	movt	r3, #20
  12e5b4:	e0823003 	add	r3, r2, r3
  12e5b8:	e2833004 	add	r3, r3, #4
  12e5bc:	e1a02003 	mov	r2, r3
  12e5c0:	e51b0008 	ldr	r0, [fp, #-8]
  12e5c4:	eb0002e5 	bl	12f160 <etharp_request_dst>
  12e5c8:	e1a03000 	mov	r3, r0
  12e5cc:	e3530000 	cmp	r3, #0
  12e5d0:	1a000008 	bne	12e5f8 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e5d4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e5d8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e5dc:	e3403014 	movt	r3, #20
  12e5e0:	e3a01018 	mov	r1, #24
  12e5e4:	e0020291 	mul	r2, r1, r2
  12e5e8:	e0833002 	add	r3, r3, r2
  12e5ec:	e2833014 	add	r3, r3, #20
  12e5f0:	e3a02003 	mov	r2, #3
  12e5f4:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e5f8:	e51b3008 	ldr	r3, [fp, #-8]
  12e5fc:	e283103b 	add	r1, r3, #59	; 0x3b
  12e600:	e55b300d 	ldrb	r3, [fp, #-13]
  12e604:	e3a02018 	mov	r2, #24
  12e608:	e0030392 	mul	r3, r2, r3
  12e60c:	e2832008 	add	r2, r3, #8
  12e610:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e614:	e3403014 	movt	r3, #20
  12e618:	e0823003 	add	r3, r2, r3
  12e61c:	e2832004 	add	r2, r3, #4
  12e620:	e3a03b02 	mov	r3, #2048	; 0x800
  12e624:	e58d3000 	str	r3, [sp]
  12e628:	e1a03002 	mov	r3, r2
  12e62c:	e1a02001 	mov	r2, r1
  12e630:	e51b100c 	ldr	r1, [fp, #-12]
  12e634:	e51b0008 	ldr	r0, [fp, #-8]
  12e638:	ebffe964 	bl	128bd0 <ethernet_output>
  12e63c:	e1a03000 	mov	r3, r0
}
  12e640:	e1a00003 	mov	r0, r3
  12e644:	e24bd004 	sub	sp, fp, #4
  12e648:	e8bd8800 	pop	{fp, pc}

0012e64c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e64c:	e92d4800 	push	{fp, lr}
  12e650:	e28db004 	add	fp, sp, #4
  12e654:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e658:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e65c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e660:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e664:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e668:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e66c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e670:	e3530000 	cmp	r3, #0
  12e674:	1a000006 	bne	12e694 <etharp_output+0x48>
  12e678:	e30900cc 	movw	r0, #37068	; 0x90cc
  12e67c:	e3400014 	movt	r0, #20
  12e680:	ebff52a3 	bl	103114 <rt_kprintf>
  12e684:	e300131b 	movw	r1, #795	; 0x31b
  12e688:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e68c:	e3400014 	movt	r0, #20
  12e690:	ebff71bf 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e694:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e698:	e3530000 	cmp	r3, #0
  12e69c:	1a000006 	bne	12e6bc <etharp_output+0x70>
  12e6a0:	e3080f7c 	movw	r0, #36732	; 0x8f7c
  12e6a4:	e3400014 	movt	r0, #20
  12e6a8:	ebff5299 	bl	103114 <rt_kprintf>
  12e6ac:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e6b0:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e6b4:	e3400014 	movt	r0, #20
  12e6b8:	ebff71b5 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e6bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e6c0:	e3530000 	cmp	r3, #0
  12e6c4:	1a000006 	bne	12e6e4 <etharp_output+0x98>
  12e6c8:	e30900bc 	movw	r0, #37052	; 0x90bc
  12e6cc:	e3400014 	movt	r0, #20
  12e6d0:	ebff528f 	bl	103114 <rt_kprintf>
  12e6d4:	e300131d 	movw	r1, #797	; 0x31d
  12e6d8:	e3080f88 	movw	r0, #36744	; 0x8f88
  12e6dc:	e3400014 	movt	r0, #20
  12e6e0:	ebff71ab 	bl	10ad94 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12e6e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e6e8:	e5933000 	ldr	r3, [r3]
  12e6ec:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e6f0:	e1a00003 	mov	r0, r3
  12e6f4:	eb000eba 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  12e6f8:	e1a03000 	mov	r3, r0
  12e6fc:	e3530000 	cmp	r3, #0
  12e700:	0a000003 	beq	12e714 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12e704:	e3083864 	movw	r3, #34916	; 0x8864
  12e708:	e3403014 	movt	r3, #20
  12e70c:	e50b3008 	str	r3, [fp, #-8]
  12e710:	ea000097 	b	12e974 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12e714:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e718:	e5933000 	ldr	r3, [r3]
  12e71c:	e20330f0 	and	r3, r3, #240	; 0xf0
  12e720:	e35300e0 	cmp	r3, #224	; 0xe0
  12e724:	1a000016 	bne	12e784 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12e728:	e3a03001 	mov	r3, #1
  12e72c:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12e730:	e3a03000 	mov	r3, #0
  12e734:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12e738:	e3a0305e 	mov	r3, #94	; 0x5e
  12e73c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12e740:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e744:	e2833001 	add	r3, r3, #1
  12e748:	e5d33000 	ldrb	r3, [r3]
  12e74c:	e203307f 	and	r3, r3, #127	; 0x7f
  12e750:	e6ef3073 	uxtb	r3, r3
  12e754:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12e758:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e75c:	e2833002 	add	r3, r3, #2
  12e760:	e5d33000 	ldrb	r3, [r3]
  12e764:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12e768:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e76c:	e2833003 	add	r3, r3, #3
  12e770:	e5d33000 	ldrb	r3, [r3]
  12e774:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12e778:	e24b3014 	sub	r3, fp, #20
  12e77c:	e50b3008 	str	r3, [fp, #-8]
  12e780:	ea00007b 	b	12e974 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e788:	e5932000 	ldr	r2, [r3]
  12e78c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e790:	e2833004 	add	r3, r3, #4
  12e794:	e5933000 	ldr	r3, [r3]
  12e798:	e0222003 	eor	r2, r2, r3
  12e79c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e7a0:	e2833008 	add	r3, r3, #8
  12e7a4:	e5933000 	ldr	r3, [r3]
  12e7a8:	e0033002 	and	r3, r3, r2
  12e7ac:	e3530000 	cmp	r3, #0
  12e7b0:	0a000010 	beq	12e7f8 <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12e7b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e7b8:	e5933000 	ldr	r3, [r3]
  12e7bc:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e7c0:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12e7c4:	e1530002 	cmp	r3, r2
  12e7c8:	0a00000a 	beq	12e7f8 <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12e7cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e7d0:	e283300c 	add	r3, r3, #12
  12e7d4:	e5933000 	ldr	r3, [r3]
  12e7d8:	e3530000 	cmp	r3, #0
  12e7dc:	0a000003 	beq	12e7f0 <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12e7e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e7e4:	e283300c 	add	r3, r3, #12
  12e7e8:	e50b300c 	str	r3, [fp, #-12]
  12e7ec:	ea000001 	b	12e7f8 <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12e7f0:	e3e03003 	mvn	r3, #3
  12e7f4:	ea000067 	b	12e998 <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e7f8:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e7fc:	e3403014 	movt	r3, #20
  12e800:	e5d33000 	ldrb	r3, [r3]
  12e804:	e1a01003 	mov	r1, r3
  12e808:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e80c:	e3403014 	movt	r3, #20
  12e810:	e3a02018 	mov	r2, #24
  12e814:	e0020192 	mul	r2, r2, r1
  12e818:	e0833002 	add	r3, r3, r2
  12e81c:	e2833014 	add	r3, r3, #20
  12e820:	e5d33000 	ldrb	r3, [r3]
  12e824:	e3530001 	cmp	r3, #1
  12e828:	9a00001f 	bls	12e8ac <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12e82c:	e51b300c 	ldr	r3, [fp, #-12]
  12e830:	e5932000 	ldr	r2, [r3]
  12e834:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e838:	e3403014 	movt	r3, #20
  12e83c:	e5d33000 	ldrb	r3, [r3]
  12e840:	e1a00003 	mov	r0, r3
  12e844:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e848:	e3403014 	movt	r3, #20
  12e84c:	e3a01018 	mov	r1, #24
  12e850:	e0010091 	mul	r1, r1, r0
  12e854:	e0833001 	add	r3, r3, r1
  12e858:	e2833004 	add	r3, r3, #4
  12e85c:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e860:	e1520003 	cmp	r2, r3
  12e864:	1a000010 	bne	12e8ac <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12e868:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e86c:	e3403015 	movt	r3, #21
  12e870:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12e874:	e2833001 	add	r3, r3, #1
  12e878:	e6ff2073 	uxth	r2, r3
  12e87c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e880:	e3403015 	movt	r3, #21
  12e884:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12e888:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e88c:	e3403014 	movt	r3, #20
  12e890:	e5d33000 	ldrb	r3, [r3]
  12e894:	e1a02003 	mov	r2, r3
  12e898:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e89c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e8a0:	ebfffee8 	bl	12e448 <etharp_output_to_arp_index>
  12e8a4:	e1a03000 	mov	r3, r0
  12e8a8:	ea00003a 	b	12e998 <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e8ac:	e3a03000 	mov	r3, #0
  12e8b0:	e54b300d 	strb	r3, [fp, #-13]
  12e8b4:	ea000025 	b	12e950 <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e8b8:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12e8bc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e8c0:	e3403014 	movt	r3, #20
  12e8c4:	e3a01018 	mov	r1, #24
  12e8c8:	e0020291 	mul	r2, r1, r2
  12e8cc:	e0833002 	add	r3, r3, r2
  12e8d0:	e2833014 	add	r3, r3, #20
  12e8d4:	e5d33000 	ldrb	r3, [r3]
  12e8d8:	e3530001 	cmp	r3, #1
  12e8dc:	9a000016 	bls	12e93c <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12e8e0:	e51b300c 	ldr	r3, [fp, #-12]
  12e8e4:	e5932000 	ldr	r2, [r3]
  12e8e8:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12e8ec:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e8f0:	e3403014 	movt	r3, #20
  12e8f4:	e3a00018 	mov	r0, #24
  12e8f8:	e0010190 	mul	r1, r0, r1
  12e8fc:	e0833001 	add	r3, r3, r1
  12e900:	e2833004 	add	r3, r3, #4
  12e904:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e908:	e1520003 	cmp	r2, r3
  12e90c:	1a00000a 	bne	12e93c <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12e910:	e55b200d 	ldrb	r2, [fp, #-13]
  12e914:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e918:	e3403014 	movt	r3, #20
  12e91c:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12e920:	e55b300d 	ldrb	r3, [fp, #-13]
  12e924:	e1a02003 	mov	r2, r3
  12e928:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e92c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e930:	ebfffec4 	bl	12e448 <etharp_output_to_arp_index>
  12e934:	e1a03000 	mov	r3, r0
  12e938:	ea000016 	b	12e998 <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e93c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e940:	e6ef3073 	uxtb	r3, r3
  12e944:	e2833001 	add	r3, r3, #1
  12e948:	e6ef3073 	uxtb	r3, r3
  12e94c:	e54b300d 	strb	r3, [fp, #-13]
  12e950:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e954:	e3530009 	cmp	r3, #9
  12e958:	daffffd6 	ble	12e8b8 <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12e95c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12e960:	e51b100c 	ldr	r1, [fp, #-12]
  12e964:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e968:	eb00000d 	bl	12e9a4 <etharp_query>
  12e96c:	e1a03000 	mov	r3, r0
  12e970:	ea000008 	b	12e998 <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12e974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e978:	e283203b 	add	r2, r3, #59	; 0x3b
  12e97c:	e3a03b02 	mov	r3, #2048	; 0x800
  12e980:	e58d3000 	str	r3, [sp]
  12e984:	e51b3008 	ldr	r3, [fp, #-8]
  12e988:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e98c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e990:	ebffe88e 	bl	128bd0 <ethernet_output>
  12e994:	e1a03000 	mov	r3, r0
}
  12e998:	e1a00003 	mov	r0, r3
  12e99c:	e24bd004 	sub	sp, fp, #4
  12e9a0:	e8bd8800 	pop	{fp, pc}

0012e9a4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12e9a4:	e92d4800 	push	{fp, lr}
  12e9a8:	e28db004 	add	fp, sp, #4
  12e9ac:	e24dd040 	sub	sp, sp, #64	; 0x40
  12e9b0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12e9b4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12e9b8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12e9bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12e9c0:	e283303b 	add	r3, r3, #59	; 0x3b
  12e9c4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12e9c8:	e3e03000 	mvn	r3, #0
  12e9cc:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12e9d0:	e3a03000 	mov	r3, #0
  12e9d4:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12e9d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e9dc:	e5933000 	ldr	r3, [r3]
  12e9e0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12e9e4:	e1a00003 	mov	r0, r3
  12e9e8:	eb000dfd 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  12e9ec:	e1a03000 	mov	r3, r0
  12e9f0:	e3530000 	cmp	r3, #0
  12e9f4:	1a00000b 	bne	12ea28 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12e9f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e9fc:	e5933000 	ldr	r3, [r3]
  12ea00:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ea04:	e35300e0 	cmp	r3, #224	; 0xe0
  12ea08:	0a000006 	beq	12ea28 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ea0c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ea10:	e3530000 	cmp	r3, #0
  12ea14:	0a000003 	beq	12ea28 <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12ea18:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ea1c:	e5933000 	ldr	r3, [r3]
  12ea20:	e3530000 	cmp	r3, #0
  12ea24:	1a000001 	bne	12ea30 <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ea28:	e3e0300f 	mvn	r3, #15
  12ea2c:	ea000144 	b	12ef44 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12ea30:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ea34:	e3a01001 	mov	r1, #1
  12ea38:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12ea3c:	ebfffb80 	bl	12d844 <etharp_find_entry>
  12ea40:	e1a03000 	mov	r3, r0
  12ea44:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12ea48:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ea4c:	e3530000 	cmp	r3, #0
  12ea50:	aa00000c 	bge	12ea88 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12ea54:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ea58:	e3530000 	cmp	r3, #0
  12ea5c:	0a000007 	beq	12ea80 <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12ea60:	e30c3a18 	movw	r3, #51736	; 0xca18
  12ea64:	e3403015 	movt	r3, #21
  12ea68:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ea6c:	e2833001 	add	r3, r3, #1
  12ea70:	e6ff2073 	uxth	r2, r3
  12ea74:	e30c3a18 	movw	r3, #51736	; 0xca18
  12ea78:	e3403015 	movt	r3, #21
  12ea7c:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12ea80:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ea84:	ea00012e 	b	12ef44 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12ea88:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ea8c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ea90:	e3403014 	movt	r3, #20
  12ea94:	e3a01018 	mov	r1, #24
  12ea98:	e0020291 	mul	r2, r1, r2
  12ea9c:	e0833002 	add	r3, r3, r2
  12eaa0:	e2833014 	add	r3, r3, #20
  12eaa4:	e5d33000 	ldrb	r3, [r3]
  12eaa8:	e3530000 	cmp	r3, #0
  12eaac:	1a000013 	bne	12eb00 <etharp_query+0x15c>
    is_new_entry = 1;
  12eab0:	e3a03001 	mov	r3, #1
  12eab4:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12eab8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eabc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eac0:	e3403014 	movt	r3, #20
  12eac4:	e3a01018 	mov	r1, #24
  12eac8:	e0020291 	mul	r2, r1, r2
  12eacc:	e0833002 	add	r3, r3, r2
  12ead0:	e2833014 	add	r3, r3, #20
  12ead4:	e3a02001 	mov	r2, #1
  12ead8:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12eadc:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eae0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eae4:	e3403014 	movt	r3, #20
  12eae8:	e3a01018 	mov	r1, #24
  12eaec:	e0020291 	mul	r2, r1, r2
  12eaf0:	e0833002 	add	r3, r3, r2
  12eaf4:	e2833008 	add	r3, r3, #8
  12eaf8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12eafc:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12eb00:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb04:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eb08:	e3403014 	movt	r3, #20
  12eb0c:	e3a01018 	mov	r1, #24
  12eb10:	e0020291 	mul	r2, r1, r2
  12eb14:	e0833002 	add	r3, r3, r2
  12eb18:	e2833014 	add	r3, r3, #20
  12eb1c:	e5d33000 	ldrb	r3, [r3]
  12eb20:	e3530001 	cmp	r3, #1
  12eb24:	0a000010 	beq	12eb6c <etharp_query+0x1c8>
  12eb28:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb2c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eb30:	e3403014 	movt	r3, #20
  12eb34:	e3a01018 	mov	r1, #24
  12eb38:	e0020291 	mul	r2, r1, r2
  12eb3c:	e0833002 	add	r3, r3, r2
  12eb40:	e2833014 	add	r3, r3, #20
  12eb44:	e5d33000 	ldrb	r3, [r3]
  12eb48:	e3530001 	cmp	r3, #1
  12eb4c:	8a000006 	bhi	12eb6c <etharp_query+0x1c8>
  12eb50:	e309011c 	movw	r0, #37148	; 0x911c
  12eb54:	e3400014 	movt	r0, #20
  12eb58:	ebff516d 	bl	103114 <rt_kprintf>
  12eb5c:	e30013c9 	movw	r1, #969	; 0x3c9
  12eb60:	e3080f88 	movw	r0, #36744	; 0x8f88
  12eb64:	e3400014 	movt	r0, #20
  12eb68:	ebff7089 	bl	10ad94 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12eb6c:	e51b300c 	ldr	r3, [fp, #-12]
  12eb70:	e3530000 	cmp	r3, #0
  12eb74:	1a000002 	bne	12eb84 <etharp_query+0x1e0>
  12eb78:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eb7c:	e3530000 	cmp	r3, #0
  12eb80:	1a000009 	bne	12ebac <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12eb84:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12eb88:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12eb8c:	eb00018f 	bl	12f1d0 <etharp_request>
  12eb90:	e1a03000 	mov	r3, r0
  12eb94:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12eb98:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eb9c:	e3530000 	cmp	r3, #0
  12eba0:	1a000001 	bne	12ebac <etharp_query+0x208>
      return result;
  12eba4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12eba8:	ea0000e5 	b	12ef44 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12ebac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ebb0:	e3530000 	cmp	r3, #0
  12ebb4:	1a000006 	bne	12ebd4 <etharp_query+0x230>
  12ebb8:	e3080f7c 	movw	r0, #36732	; 0x8f7c
  12ebbc:	e3400014 	movt	r0, #20
  12ebc0:	ebff5153 	bl	103114 <rt_kprintf>
  12ebc4:	e30013db 	movw	r1, #987	; 0x3db
  12ebc8:	e3080f88 	movw	r0, #36744	; 0x8f88
  12ebcc:	e3400014 	movt	r0, #20
  12ebd0:	ebff706f 	bl	10ad94 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12ebd4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ebd8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ebdc:	e3403014 	movt	r3, #20
  12ebe0:	e3a01018 	mov	r1, #24
  12ebe4:	e0020291 	mul	r2, r1, r2
  12ebe8:	e0833002 	add	r3, r3, r2
  12ebec:	e2833014 	add	r3, r3, #20
  12ebf0:	e5d33000 	ldrb	r3, [r3]
  12ebf4:	e3530001 	cmp	r3, #1
  12ebf8:	9a000015 	bls	12ec54 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12ebfc:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12ec00:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12ec04:	e3403014 	movt	r3, #20
  12ec08:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12ec0c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ec10:	e3a02018 	mov	r2, #24
  12ec14:	e0030392 	mul	r3, r2, r3
  12ec18:	e2832008 	add	r2, r3, #8
  12ec1c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ec20:	e3403014 	movt	r3, #20
  12ec24:	e0823003 	add	r3, r2, r3
  12ec28:	e2832004 	add	r2, r3, #4
  12ec2c:	e3a03b02 	mov	r3, #2048	; 0x800
  12ec30:	e58d3000 	str	r3, [sp]
  12ec34:	e1a03002 	mov	r3, r2
  12ec38:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12ec3c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ec40:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ec44:	ebffe7e1 	bl	128bd0 <ethernet_output>
  12ec48:	e1a03000 	mov	r3, r0
  12ec4c:	e54b3005 	strb	r3, [fp, #-5]
  12ec50:	ea0000ba 	b	12ef40 <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12ec54:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ec58:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ec5c:	e3403014 	movt	r3, #20
  12ec60:	e3a01018 	mov	r1, #24
  12ec64:	e0020291 	mul	r2, r1, r2
  12ec68:	e0833002 	add	r3, r3, r2
  12ec6c:	e2833014 	add	r3, r3, #20
  12ec70:	e5d33000 	ldrb	r3, [r3]
  12ec74:	e3530001 	cmp	r3, #1
  12ec78:	1a0000b0 	bne	12ef40 <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12ec7c:	e3a03000 	mov	r3, #0
  12ec80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12ec84:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ec88:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ec8c:	ea00001a 	b	12ecfc <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12ec90:	e51b3010 	ldr	r3, [fp, #-16]
  12ec94:	e1d320ba 	ldrh	r2, [r3, #10]
  12ec98:	e51b3010 	ldr	r3, [fp, #-16]
  12ec9c:	e1d330b8 	ldrh	r3, [r3, #8]
  12eca0:	e1520003 	cmp	r2, r3
  12eca4:	1a00000a 	bne	12ecd4 <etharp_query+0x330>
  12eca8:	e51b3010 	ldr	r3, [fp, #-16]
  12ecac:	e5933000 	ldr	r3, [r3]
  12ecb0:	e3530000 	cmp	r3, #0
  12ecb4:	0a000006 	beq	12ecd4 <etharp_query+0x330>
  12ecb8:	e3090144 	movw	r0, #37188	; 0x9144
  12ecbc:	e3400014 	movt	r0, #20
  12ecc0:	ebff5113 	bl	103114 <rt_kprintf>
  12ecc4:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12ecc8:	e3080f88 	movw	r0, #36744	; 0x8f88
  12eccc:	e3400014 	movt	r0, #20
  12ecd0:	ebff702f 	bl	10ad94 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12ecd4:	e51b3010 	ldr	r3, [fp, #-16]
  12ecd8:	e5d3300c 	ldrb	r3, [r3, #12]
  12ecdc:	e3530001 	cmp	r3, #1
  12ece0:	0a000002 	beq	12ecf0 <etharp_query+0x34c>
        copy_needed = 1;
  12ece4:	e3a03001 	mov	r3, #1
  12ece8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12ecec:	ea000005 	b	12ed08 <etharp_query+0x364>
      }
      p = p->next;
  12ecf0:	e51b3010 	ldr	r3, [fp, #-16]
  12ecf4:	e5933000 	ldr	r3, [r3]
  12ecf8:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ecfc:	e51b3010 	ldr	r3, [fp, #-16]
  12ed00:	e3530000 	cmp	r3, #0
  12ed04:	1affffe1 	bne	12ec90 <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12ed08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ed0c:	e3530000 	cmp	r3, #0
  12ed10:	0a000014 	beq	12ed68 <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12ed14:	e51b3010 	ldr	r3, [fp, #-16]
  12ed18:	e1d330b8 	ldrh	r3, [r3, #8]
  12ed1c:	e3a02000 	mov	r2, #0
  12ed20:	e1a01003 	mov	r1, r3
  12ed24:	e3a00002 	mov	r0, #2
  12ed28:	ebffac8e 	bl	119f68 <pbuf_alloc>
  12ed2c:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12ed30:	e51b3010 	ldr	r3, [fp, #-16]
  12ed34:	e3530000 	cmp	r3, #0
  12ed38:	0a00000e 	beq	12ed78 <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12ed3c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ed40:	e51b0010 	ldr	r0, [fp, #-16]
  12ed44:	ebffb0e3 	bl	11b0d8 <pbuf_copy>
  12ed48:	e1a03000 	mov	r3, r0
  12ed4c:	e3530000 	cmp	r3, #0
  12ed50:	0a000008 	beq	12ed78 <etharp_query+0x3d4>
          pbuf_free(p);
  12ed54:	e51b0010 	ldr	r0, [fp, #-16]
  12ed58:	ebffaf89 	bl	11ab84 <pbuf_free>
          p = NULL;
  12ed5c:	e3a03000 	mov	r3, #0
  12ed60:	e50b3010 	str	r3, [fp, #-16]
  12ed64:	ea000003 	b	12ed78 <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12ed68:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ed6c:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12ed70:	e51b0010 	ldr	r0, [fp, #-16]
  12ed74:	ebffb01c 	bl	11adec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12ed78:	e51b3010 	ldr	r3, [fp, #-16]
  12ed7c:	e3530000 	cmp	r3, #0
  12ed80:	0a000064 	beq	12ef18 <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12ed84:	e3002407 	movw	r2, #1031	; 0x407
  12ed88:	e3081f88 	movw	r1, #36744	; 0x8f88
  12ed8c:	e3401014 	movt	r1, #20
  12ed90:	e3a0000b 	mov	r0, #11
  12ed94:	ebffa804 	bl	118dac <memp_malloc_fn>
  12ed98:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12ed9c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12eda0:	e3530000 	cmp	r3, #0
  12eda4:	0a000056 	beq	12ef04 <etharp_query+0x560>
        unsigned int qlen = 0;
  12eda8:	e3a03000 	mov	r3, #0
  12edac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12edb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12edb4:	e3a02000 	mov	r2, #0
  12edb8:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12edbc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12edc0:	e51b2010 	ldr	r2, [fp, #-16]
  12edc4:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12edc8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edcc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12edd0:	e3403014 	movt	r3, #20
  12edd4:	e3a01018 	mov	r1, #24
  12edd8:	e0020291 	mul	r2, r1, r2
  12eddc:	e0833002 	add	r3, r3, r2
  12ede0:	e5933000 	ldr	r3, [r3]
  12ede4:	e3530000 	cmp	r3, #0
  12ede8:	0a000019 	beq	12ee54 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12edec:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edf0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12edf4:	e3403014 	movt	r3, #20
  12edf8:	e3a01018 	mov	r1, #24
  12edfc:	e0020291 	mul	r2, r1, r2
  12ee00:	e0833002 	add	r3, r3, r2
  12ee04:	e5933000 	ldr	r3, [r3]
  12ee08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12ee0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ee10:	e2833001 	add	r3, r3, #1
  12ee14:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12ee18:	ea000005 	b	12ee34 <etharp_query+0x490>
            r = r->next;
  12ee1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ee20:	e5933000 	ldr	r3, [r3]
  12ee24:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12ee28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ee2c:	e2833001 	add	r3, r3, #1
  12ee30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12ee34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ee38:	e5933000 	ldr	r3, [r3]
  12ee3c:	e3530000 	cmp	r3, #0
  12ee40:	1afffff5 	bne	12ee1c <etharp_query+0x478>
          }
          r->next = new_entry;
  12ee44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ee48:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12ee4c:	e5832000 	str	r2, [r3]
  12ee50:	ea000007 	b	12ee74 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12ee54:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee58:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ee5c:	e3403014 	movt	r3, #20
  12ee60:	e3a01018 	mov	r1, #24
  12ee64:	e0020291 	mul	r2, r1, r2
  12ee68:	e0833002 	add	r3, r3, r2
  12ee6c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12ee70:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12ee74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ee78:	e3530002 	cmp	r3, #2
  12ee7c:	9a00001d 	bls	12eef8 <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12ee80:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee84:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ee88:	e3403014 	movt	r3, #20
  12ee8c:	e3a01018 	mov	r1, #24
  12ee90:	e0020291 	mul	r2, r1, r2
  12ee94:	e0833002 	add	r3, r3, r2
  12ee98:	e5933000 	ldr	r3, [r3]
  12ee9c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12eea0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eea4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eea8:	e3403014 	movt	r3, #20
  12eeac:	e3a01018 	mov	r1, #24
  12eeb0:	e0020291 	mul	r2, r1, r2
  12eeb4:	e0833002 	add	r3, r3, r2
  12eeb8:	e5933000 	ldr	r3, [r3]
  12eebc:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12eec0:	e5932000 	ldr	r2, [r3]
  12eec4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eec8:	e3403014 	movt	r3, #20
  12eecc:	e3a00018 	mov	r0, #24
  12eed0:	e0010190 	mul	r1, r0, r1
  12eed4:	e0833001 	add	r3, r3, r1
  12eed8:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12eedc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12eee0:	e5933004 	ldr	r3, [r3, #4]
  12eee4:	e1a00003 	mov	r0, r3
  12eee8:	ebffaf25 	bl	11ab84 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12eeec:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12eef0:	e3a0000b 	mov	r0, #11
  12eef4:	ebffa814 	bl	118f4c <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12eef8:	e3a03000 	mov	r3, #0
  12eefc:	e54b3005 	strb	r3, [fp, #-5]
  12ef00:	ea00000e 	b	12ef40 <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12ef04:	e51b0010 	ldr	r0, [fp, #-16]
  12ef08:	ebffaf1d 	bl	11ab84 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12ef0c:	e3e03000 	mvn	r3, #0
  12ef10:	e54b3005 	strb	r3, [fp, #-5]
  12ef14:	ea000009 	b	12ef40 <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12ef18:	e30c3a18 	movw	r3, #51736	; 0xca18
  12ef1c:	e3403015 	movt	r3, #21
  12ef20:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ef24:	e2833001 	add	r3, r3, #1
  12ef28:	e6ff2073 	uxth	r2, r3
  12ef2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12ef30:	e3403015 	movt	r3, #21
  12ef34:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12ef38:	e3e03000 	mvn	r3, #0
  12ef3c:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12ef40:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12ef44:	e1a00003 	mov	r0, r3
  12ef48:	e24bd004 	sub	sp, fp, #4
  12ef4c:	e8bd8800 	pop	{fp, pc}

0012ef50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12ef50:	e92d4800 	push	{fp, lr}
  12ef54:	e28db004 	add	fp, sp, #4
  12ef58:	e24dd028 	sub	sp, sp, #40	; 0x28
  12ef5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12ef60:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12ef64:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12ef68:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12ef6c:	e3a03000 	mov	r3, #0
  12ef70:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12ef74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ef78:	e3530000 	cmp	r3, #0
  12ef7c:	1a000006 	bne	12ef9c <etharp_raw+0x4c>
  12ef80:	e30900cc 	movw	r0, #37068	; 0x90cc
  12ef84:	e3400014 	movt	r0, #20
  12ef88:	ebff5061 	bl	103114 <rt_kprintf>
  12ef8c:	e3001458 	movw	r1, #1112	; 0x458
  12ef90:	e3080f88 	movw	r0, #36744	; 0x8f88
  12ef94:	e3400014 	movt	r0, #20
  12ef98:	ebff6f7d 	bl	10ad94 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12ef9c:	e3a02000 	mov	r2, #0
  12efa0:	e3a0101c 	mov	r1, #28
  12efa4:	e3a00002 	mov	r0, #2
  12efa8:	ebffabee 	bl	119f68 <pbuf_alloc>
  12efac:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12efb0:	e51b300c 	ldr	r3, [fp, #-12]
  12efb4:	e3530000 	cmp	r3, #0
  12efb8:	1a000009 	bne	12efe4 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12efbc:	e30c3a18 	movw	r3, #51736	; 0xca18
  12efc0:	e3403015 	movt	r3, #21
  12efc4:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12efc8:	e2833001 	add	r3, r3, #1
  12efcc:	e6ff2073 	uxth	r2, r3
  12efd0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12efd4:	e3403015 	movt	r3, #21
  12efd8:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12efdc:	e3e03000 	mvn	r3, #0
  12efe0:	ea00005b 	b	12f154 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12efe4:	e51b300c 	ldr	r3, [fp, #-12]
  12efe8:	e1d330ba 	ldrh	r3, [r3, #10]
  12efec:	e353001b 	cmp	r3, #27
  12eff0:	8a000006 	bhi	12f010 <etharp_raw+0xc0>
  12eff4:	e3090160 	movw	r0, #37216	; 0x9160
  12eff8:	e3400014 	movt	r0, #20
  12effc:	ebff5044 	bl	103114 <rt_kprintf>
  12f000:	e3001464 	movw	r1, #1124	; 0x464
  12f004:	e3080f88 	movw	r0, #36744	; 0x8f88
  12f008:	e3400014 	movt	r0, #20
  12f00c:	ebff6f60 	bl	10ad94 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12f010:	e51b300c 	ldr	r3, [fp, #-12]
  12f014:	e5933004 	ldr	r3, [r3, #4]
  12f018:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12f01c:	e1db31b0 	ldrh	r3, [fp, #16]
  12f020:	e1a00003 	mov	r0, r3
  12f024:	ebff9c9f 	bl	1162a8 <lwip_htons>
  12f028:	e1a03000 	mov	r3, r0
  12f02c:	e1a02003 	mov	r2, r3
  12f030:	e51b3010 	ldr	r3, [fp, #-16]
  12f034:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12f038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f03c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12f040:	e3530006 	cmp	r3, #6
  12f044:	0a000006 	beq	12f064 <etharp_raw+0x114>
  12f048:	e3090194 	movw	r0, #37268	; 0x9194
  12f04c:	e3400014 	movt	r0, #20
  12f050:	ebff502f 	bl	103114 <rt_kprintf>
  12f054:	e300146b 	movw	r1, #1131	; 0x46b
  12f058:	e3080f88 	movw	r0, #36744	; 0x8f88
  12f05c:	e3400014 	movt	r0, #20
  12f060:	ebff6f4b 	bl	10ad94 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12f064:	e51b3010 	ldr	r3, [fp, #-16]
  12f068:	e2833008 	add	r3, r3, #8
  12f06c:	e3a02006 	mov	r2, #6
  12f070:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12f074:	e1a00003 	mov	r0, r3
  12f078:	eb004681 	bl	140a84 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f07c:	e51b3010 	ldr	r3, [fp, #-16]
  12f080:	e2833012 	add	r3, r3, #18
  12f084:	e3a02006 	mov	r2, #6
  12f088:	e59b1008 	ldr	r1, [fp, #8]
  12f08c:	e1a00003 	mov	r0, r3
  12f090:	eb00467b 	bl	140a84 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f094:	e51b3010 	ldr	r3, [fp, #-16]
  12f098:	e283300e 	add	r3, r3, #14
  12f09c:	e59b2004 	ldr	r2, [fp, #4]
  12f0a0:	e5922000 	ldr	r2, [r2]
  12f0a4:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f0a8:	e51b3010 	ldr	r3, [fp, #-16]
  12f0ac:	e2833018 	add	r3, r3, #24
  12f0b0:	e59b200c 	ldr	r2, [fp, #12]
  12f0b4:	e5922000 	ldr	r2, [r2]
  12f0b8:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f0bc:	e51b3010 	ldr	r3, [fp, #-16]
  12f0c0:	e3a02000 	mov	r2, #0
  12f0c4:	e5c32000 	strb	r2, [r3]
  12f0c8:	e3a02000 	mov	r2, #0
  12f0cc:	e3822001 	orr	r2, r2, #1
  12f0d0:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f0d4:	e51b3010 	ldr	r3, [fp, #-16]
  12f0d8:	e3a02000 	mov	r2, #0
  12f0dc:	e3822008 	orr	r2, r2, #8
  12f0e0:	e5c32002 	strb	r2, [r3, #2]
  12f0e4:	e3a02000 	mov	r2, #0
  12f0e8:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f0ec:	e51b3010 	ldr	r3, [fp, #-16]
  12f0f0:	e3a02006 	mov	r2, #6
  12f0f4:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f0f8:	e51b3010 	ldr	r3, [fp, #-16]
  12f0fc:	e3a02004 	mov	r2, #4
  12f100:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f104:	e3003806 	movw	r3, #2054	; 0x806
  12f108:	e58d3000 	str	r3, [sp]
  12f10c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f110:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f114:	e51b100c 	ldr	r1, [fp, #-12]
  12f118:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f11c:	ebffe6ab 	bl	128bd0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f120:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f124:	e3403015 	movt	r3, #21
  12f128:	e1d331b8 	ldrh	r3, [r3, #24]
  12f12c:	e2833001 	add	r3, r3, #1
  12f130:	e6ff2073 	uxth	r2, r3
  12f134:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f138:	e3403015 	movt	r3, #21
  12f13c:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f140:	e51b000c 	ldr	r0, [fp, #-12]
  12f144:	ebffae8e 	bl	11ab84 <pbuf_free>
  p = NULL;
  12f148:	e3a03000 	mov	r3, #0
  12f14c:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f150:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f154:	e1a00003 	mov	r0, r3
  12f158:	e24bd004 	sub	sp, fp, #4
  12f15c:	e8bd8800 	pop	{fp, pc}

0012f160 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f160:	e92d4800 	push	{fp, lr}
  12f164:	e28db004 	add	fp, sp, #4
  12f168:	e24dd020 	sub	sp, sp, #32
  12f16c:	e50b0008 	str	r0, [fp, #-8]
  12f170:	e50b100c 	str	r1, [fp, #-12]
  12f174:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f178:	e51b3008 	ldr	r3, [fp, #-8]
  12f17c:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f180:	e51b3008 	ldr	r3, [fp, #-8]
  12f184:	e283003b 	add	r0, r3, #59	; 0x3b
  12f188:	e51b3008 	ldr	r3, [fp, #-8]
  12f18c:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f190:	e3a03001 	mov	r3, #1
  12f194:	e58d300c 	str	r3, [sp, #12]
  12f198:	e51b300c 	ldr	r3, [fp, #-12]
  12f19c:	e58d3008 	str	r3, [sp, #8]
  12f1a0:	e308386c 	movw	r3, #34924	; 0x886c
  12f1a4:	e3403014 	movt	r3, #20
  12f1a8:	e58d3004 	str	r3, [sp, #4]
  12f1ac:	e58d2000 	str	r2, [sp]
  12f1b0:	e1a03000 	mov	r3, r0
  12f1b4:	e51b2010 	ldr	r2, [fp, #-16]
  12f1b8:	e51b0008 	ldr	r0, [fp, #-8]
  12f1bc:	ebffff63 	bl	12ef50 <etharp_raw>
  12f1c0:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f1c4:	e1a00003 	mov	r0, r3
  12f1c8:	e24bd004 	sub	sp, fp, #4
  12f1cc:	e8bd8800 	pop	{fp, pc}

0012f1d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f1d0:	e92d4800 	push	{fp, lr}
  12f1d4:	e28db004 	add	fp, sp, #4
  12f1d8:	e24dd008 	sub	sp, sp, #8
  12f1dc:	e50b0008 	str	r0, [fp, #-8]
  12f1e0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f1e4:	e3082864 	movw	r2, #34916	; 0x8864
  12f1e8:	e3402014 	movt	r2, #20
  12f1ec:	e51b100c 	ldr	r1, [fp, #-12]
  12f1f0:	e51b0008 	ldr	r0, [fp, #-8]
  12f1f4:	ebffffd9 	bl	12f160 <etharp_request_dst>
  12f1f8:	e1a03000 	mov	r3, r0
}
  12f1fc:	e1a00003 	mov	r0, r3
  12f200:	e24bd004 	sub	sp, fp, #4
  12f204:	e8bd8800 	pop	{fp, pc}

0012f208 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f208:	e92d4800 	push	{fp, lr}
  12f20c:	e28db004 	add	fp, sp, #4
  12f210:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f214:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f218:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f21c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f220:	e3403015 	movt	r3, #21
  12f224:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f228:	e2833001 	add	r3, r3, #1
  12f22c:	e6ff2073 	uxth	r2, r3
  12f230:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f234:	e3403015 	movt	r3, #21
  12f238:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f23c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f240:	e3403015 	movt	r3, #21
  12f244:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f248:	e2832001 	add	r2, r3, #1
  12f24c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f250:	e3403015 	movt	r3, #21
  12f254:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f258:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f25c:	e3403014 	movt	r3, #20
  12f260:	e5933008 	ldr	r3, [r3, #8]
  12f264:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f268:	e51b3008 	ldr	r3, [fp, #-8]
  12f26c:	e5d33000 	ldrb	r3, [r3]
  12f270:	e6ff3073 	uxth	r3, r3
  12f274:	e203300f 	and	r3, r3, #15
  12f278:	e6ff3073 	uxth	r3, r3
  12f27c:	e1a03103 	lsl	r3, r3, #2
  12f280:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f284:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f288:	e3530013 	cmp	r3, #19
  12f28c:	9a000182 	bls	12f89c <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f290:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f294:	e1d330ba 	ldrh	r3, [r3, #10]
  12f298:	e3530003 	cmp	r3, #3
  12f29c:	9a000180 	bls	12f8a4 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f2a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f2a4:	e5933004 	ldr	r3, [r3, #4]
  12f2a8:	e5d33000 	ldrb	r3, [r3]
  12f2ac:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f2b0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f2b4:	e3530000 	cmp	r3, #0
  12f2b8:	0a000002 	beq	12f2c8 <icmp_input+0xc0>
  12f2bc:	e3530008 	cmp	r3, #8
  12f2c0:	0a000008 	beq	12f2e8 <icmp_input+0xe0>
  12f2c4:	ea0000fd 	b	12f6c0 <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f2c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f2cc:	e3403015 	movt	r3, #21
  12f2d0:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f2d4:	e2832001 	add	r2, r3, #1
  12f2d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f2dc:	e3403015 	movt	r3, #21
  12f2e0:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f2e4:	ea000169 	b	12f890 <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f2e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f2ec:	e3403015 	movt	r3, #21
  12f2f0:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f2f4:	e2832001 	add	r2, r3, #1
  12f2f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f2fc:	e3403015 	movt	r3, #21
  12f300:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f304:	e59f3650 	ldr	r3, [pc, #1616]	; 12f95c <icmp_input+0x754>
  12f308:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f30c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f310:	e3403014 	movt	r3, #20
  12f314:	e5933014 	ldr	r3, [r3, #20]
  12f318:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f31c:	e35300e0 	cmp	r3, #224	; 0xe0
  12f320:	0a000174 	beq	12f8f8 <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f324:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f328:	e3403014 	movt	r3, #20
  12f32c:	e5932014 	ldr	r2, [r3, #20]
  12f330:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f334:	e3403014 	movt	r3, #20
  12f338:	e5933000 	ldr	r3, [r3]
  12f33c:	e1a01003 	mov	r1, r3
  12f340:	e1a00002 	mov	r0, r2
  12f344:	eb000ba6 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  12f348:	e1a03000 	mov	r3, r0
  12f34c:	e3530000 	cmp	r3, #0
  12f350:	1a00016a 	bne	12f900 <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f354:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f358:	e1d330b8 	ldrh	r3, [r3, #8]
  12f35c:	e3530007 	cmp	r3, #7
  12f360:	9a000151 	bls	12f8ac <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f364:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f368:	ebffa4ed 	bl	118724 <inet_chksum_pbuf>
  12f36c:	e1a03000 	mov	r3, r0
  12f370:	e3530000 	cmp	r3, #0
  12f374:	0a000011 	beq	12f3c0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f378:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f37c:	ebffae00 	bl	11ab84 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f380:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f384:	e3403015 	movt	r3, #21
  12f388:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f38c:	e2833001 	add	r3, r3, #1
  12f390:	e6ff2073 	uxth	r2, r3
  12f394:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f398:	e3403015 	movt	r3, #21
  12f39c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f3a0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f3a4:	e3403015 	movt	r3, #21
  12f3a8:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f3ac:	e2832001 	add	r2, r3, #1
  12f3b0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f3b4:	e3403015 	movt	r3, #21
  12f3b8:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f3bc:	ea000164 	b	12f954 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f3c0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f3c4:	e2833010 	add	r3, r3, #16
  12f3c8:	e6ff3073 	uxth	r3, r3
  12f3cc:	e6bf3073 	sxth	r3, r3
  12f3d0:	e1a01003 	mov	r1, r3
  12f3d4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f3d8:	ebffadcb 	bl	11ab0c <pbuf_header>
  12f3dc:	e1a03000 	mov	r3, r0
  12f3e0:	e3530000 	cmp	r3, #0
  12f3e4:	0a00003e 	beq	12f4e4 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f3e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f3ec:	e1d320b8 	ldrh	r2, [r3, #8]
  12f3f0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f3f4:	e0823003 	add	r3, r2, r3
  12f3f8:	e6ff3073 	uxth	r3, r3
  12f3fc:	e3a02000 	mov	r2, #0
  12f400:	e1a01003 	mov	r1, r3
  12f404:	e3a00002 	mov	r0, #2
  12f408:	ebffaad6 	bl	119f68 <pbuf_alloc>
  12f40c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f410:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f414:	e3530000 	cmp	r3, #0
  12f418:	0a00013a 	beq	12f908 <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f41c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f420:	e1d330ba 	ldrh	r3, [r3, #10]
  12f424:	e1a02003 	mov	r2, r3
  12f428:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f42c:	e2833008 	add	r3, r3, #8
  12f430:	e1520003 	cmp	r2, r3
  12f434:	2a000002 	bcs	12f444 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f438:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f43c:	ebffadd0 	bl	11ab84 <pbuf_free>
        goto icmperr;
  12f440:	ea000131 	b	12f90c <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f444:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f448:	e5933004 	ldr	r3, [r3, #4]
  12f44c:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f450:	e51b1008 	ldr	r1, [fp, #-8]
  12f454:	e1a00003 	mov	r0, r3
  12f458:	eb004589 	bl	140a84 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f45c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f460:	e2633000 	rsb	r3, r3, #0
  12f464:	e6ff3073 	uxth	r3, r3
  12f468:	e6bf3073 	sxth	r3, r3
  12f46c:	e1a01003 	mov	r1, r3
  12f470:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f474:	ebffada4 	bl	11ab0c <pbuf_header>
  12f478:	e1a03000 	mov	r3, r0
  12f47c:	e3530000 	cmp	r3, #0
  12f480:	0a000009 	beq	12f4ac <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f484:	e30901d8 	movw	r0, #37336	; 0x91d8
  12f488:	e3400014 	movt	r0, #20
  12f48c:	ebff4f20 	bl	103114 <rt_kprintf>
  12f490:	e3a010af 	mov	r1, #175	; 0xaf
  12f494:	e3090210 	movw	r0, #37392	; 0x9210
  12f498:	e3400014 	movt	r0, #20
  12f49c:	ebff6e3c 	bl	10ad94 <sys_arch_assert>
        pbuf_free(r);
  12f4a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f4a4:	ebffadb6 	bl	11ab84 <pbuf_free>
        goto icmperr;
  12f4a8:	ea000117 	b	12f90c <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f4ac:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f4b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f4b4:	ebffaf07 	bl	11b0d8 <pbuf_copy>
  12f4b8:	e1a03000 	mov	r3, r0
  12f4bc:	e3530000 	cmp	r3, #0
  12f4c0:	0a000002 	beq	12f4d0 <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f4c4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f4c8:	ebffadad 	bl	11ab84 <pbuf_free>
        goto icmperr;
  12f4cc:	ea00010e 	b	12f90c <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f4d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f4d4:	ebffadaa 	bl	11ab84 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f4d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f4dc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f4e0:	ea000014 	b	12f538 <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f4e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f4e8:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f4ec:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f4f0:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f4f4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f4f8:	e6ff3073 	uxth	r3, r3
  12f4fc:	e6bf3073 	sxth	r3, r3
  12f500:	e1a01003 	mov	r1, r3
  12f504:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f508:	ebffad7f 	bl	11ab0c <pbuf_header>
  12f50c:	e1a03000 	mov	r3, r0
  12f510:	e3530000 	cmp	r3, #0
  12f514:	0a000007 	beq	12f538 <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f518:	e3090244 	movw	r0, #37444	; 0x9244
  12f51c:	e3400014 	movt	r0, #20
  12f520:	ebff4efb 	bl	103114 <rt_kprintf>
  12f524:	e3a010c0 	mov	r1, #192	; 0xc0
  12f528:	e3090210 	movw	r0, #37392	; 0x9210
  12f52c:	e3400014 	movt	r0, #20
  12f530:	ebff6e17 	bl	10ad94 <sys_arch_assert>
        goto icmperr;
  12f534:	ea0000f4 	b	12f90c <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f538:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f53c:	e5933004 	ldr	r3, [r3, #4]
  12f540:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f544:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f548:	e1a01003 	mov	r1, r3
  12f54c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f550:	ebffad6d 	bl	11ab0c <pbuf_header>
  12f554:	e1a03000 	mov	r3, r0
  12f558:	e3530000 	cmp	r3, #0
  12f55c:	1a0000ca 	bne	12f88c <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f560:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f564:	e5933004 	ldr	r3, [r3, #4]
  12f568:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f56c:	e51b3010 	ldr	r3, [fp, #-16]
  12f570:	e5932000 	ldr	r2, [r3]
  12f574:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f578:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f57c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f580:	e3403014 	movt	r3, #20
  12f584:	e5932010 	ldr	r2, [r3, #16]
  12f588:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f58c:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f594:	e3a02000 	mov	r2, #0
  12f598:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f59c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f5a0:	e1d330b2 	ldrh	r3, [r3, #2]
  12f5a4:	e6ff3073 	uxth	r3, r3
  12f5a8:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f5ac:	e1530002 	cmp	r3, r2
  12f5b0:	9a000007 	bls	12f5d4 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f5b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f5b8:	e1d330b2 	ldrh	r3, [r3, #2]
  12f5bc:	e6ff3073 	uxth	r3, r3
  12f5c0:	e2833009 	add	r3, r3, #9
  12f5c4:	e6ff2073 	uxth	r2, r3
  12f5c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f5cc:	e1c320b2 	strh	r2, [r3, #2]
  12f5d0:	ea000006 	b	12f5f0 <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f5d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f5d8:	e1d330b2 	ldrh	r3, [r3, #2]
  12f5dc:	e6ff3073 	uxth	r3, r3
  12f5e0:	e2833008 	add	r3, r3, #8
  12f5e4:	e6ff2073 	uxth	r2, r3
  12f5e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f5ec:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f5f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f5f4:	e3e02000 	mvn	r2, #0
  12f5f8:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f5fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f600:	e3a02000 	mov	r2, #0
  12f604:	e5c3200a 	strb	r2, [r3, #10]
  12f608:	e3a02000 	mov	r2, #0
  12f60c:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f610:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f614:	e1a01003 	mov	r1, r3
  12f618:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f61c:	ebffa430 	bl	1186e4 <inet_chksum>
  12f620:	e1a03000 	mov	r3, r0
  12f624:	e1a02003 	mov	r2, r3
  12f628:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f62c:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f630:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f634:	e3403015 	movt	r3, #21
  12f638:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f63c:	e2833001 	add	r3, r3, #1
  12f640:	e6ff2073 	uxth	r2, r3
  12f644:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f648:	e3403015 	movt	r3, #21
  12f64c:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f650:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f654:	e3403015 	movt	r3, #21
  12f658:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f65c:	e2832001 	add	r2, r3, #1
  12f660:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f664:	e3403015 	movt	r3, #21
  12f668:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f66c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f670:	e3403015 	movt	r3, #21
  12f674:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f678:	e2832001 	add	r2, r3, #1
  12f67c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f680:	e3403015 	movt	r3, #21
  12f684:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f688:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f68c:	e58d3008 	str	r3, [sp, #8]
  12f690:	e3a03001 	mov	r3, #1
  12f694:	e58d3004 	str	r3, [sp, #4]
  12f698:	e3a03000 	mov	r3, #0
  12f69c:	e58d3000 	str	r3, [sp]
  12f6a0:	e3a030ff 	mov	r3, #255	; 0xff
  12f6a4:	e3a02000 	mov	r2, #0
  12f6a8:	e51b1010 	ldr	r1, [fp, #-16]
  12f6ac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f6b0:	eb0008c5 	bl	1319cc <ip4_output_if>
  12f6b4:	e1a03000 	mov	r3, r0
  12f6b8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f6bc:	ea000072 	b	12f88c <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f6c0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6c4:	e3530003 	cmp	r3, #3
  12f6c8:	1a000007 	bne	12f6ec <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f6cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f6d0:	e3403015 	movt	r3, #21
  12f6d4:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12f6d8:	e2832001 	add	r2, r3, #1
  12f6dc:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f6e0:	e3403015 	movt	r3, #21
  12f6e4:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12f6e8:	ea000056 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12f6ec:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6f0:	e353000b 	cmp	r3, #11
  12f6f4:	1a000007 	bne	12f718 <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12f6f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f6fc:	e3403015 	movt	r3, #21
  12f700:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12f704:	e2832001 	add	r2, r3, #1
  12f708:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f70c:	e3403015 	movt	r3, #21
  12f710:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12f714:	ea00004b 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12f718:	e55b300b 	ldrb	r3, [fp, #-11]
  12f71c:	e353000c 	cmp	r3, #12
  12f720:	1a000007 	bne	12f744 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12f724:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f728:	e3403015 	movt	r3, #21
  12f72c:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12f730:	e2832001 	add	r2, r3, #1
  12f734:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f738:	e3403015 	movt	r3, #21
  12f73c:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12f740:	ea000040 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12f744:	e55b300b 	ldrb	r3, [fp, #-11]
  12f748:	e3530004 	cmp	r3, #4
  12f74c:	1a000007 	bne	12f770 <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12f750:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f754:	e3403015 	movt	r3, #21
  12f758:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12f75c:	e2832001 	add	r2, r3, #1
  12f760:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f764:	e3403015 	movt	r3, #21
  12f768:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12f76c:	ea000035 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12f770:	e55b300b 	ldrb	r3, [fp, #-11]
  12f774:	e3530005 	cmp	r3, #5
  12f778:	1a000007 	bne	12f79c <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12f77c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f780:	e3403015 	movt	r3, #21
  12f784:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12f788:	e2832001 	add	r2, r3, #1
  12f78c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f790:	e3403015 	movt	r3, #21
  12f794:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12f798:	ea00002a 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12f79c:	e55b300b 	ldrb	r3, [fp, #-11]
  12f7a0:	e353000d 	cmp	r3, #13
  12f7a4:	1a000007 	bne	12f7c8 <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12f7a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7ac:	e3403015 	movt	r3, #21
  12f7b0:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12f7b4:	e2832001 	add	r2, r3, #1
  12f7b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7bc:	e3403015 	movt	r3, #21
  12f7c0:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12f7c4:	ea00001f 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12f7c8:	e55b300b 	ldrb	r3, [fp, #-11]
  12f7cc:	e353000e 	cmp	r3, #14
  12f7d0:	1a000007 	bne	12f7f4 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12f7d4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7d8:	e3403015 	movt	r3, #21
  12f7dc:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12f7e0:	e2832001 	add	r2, r3, #1
  12f7e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7e8:	e3403015 	movt	r3, #21
  12f7ec:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12f7f0:	ea000014 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12f7f4:	e55b300b 	ldrb	r3, [fp, #-11]
  12f7f8:	e3530011 	cmp	r3, #17
  12f7fc:	1a000007 	bne	12f820 <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12f800:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f804:	e3403015 	movt	r3, #21
  12f808:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12f80c:	e2832001 	add	r2, r3, #1
  12f810:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f814:	e3403015 	movt	r3, #21
  12f818:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12f81c:	ea000009 	b	12f848 <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12f820:	e55b300b 	ldrb	r3, [fp, #-11]
  12f824:	e3530012 	cmp	r3, #18
  12f828:	1a000006 	bne	12f848 <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12f82c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f830:	e3403015 	movt	r3, #21
  12f834:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12f838:	e2832001 	add	r2, r3, #1
  12f83c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f840:	e3403015 	movt	r3, #21
  12f844:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12f848:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f84c:	e3403015 	movt	r3, #21
  12f850:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12f854:	e2833001 	add	r3, r3, #1
  12f858:	e6ff2073 	uxth	r2, r3
  12f85c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f860:	e3403015 	movt	r3, #21
  12f864:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12f868:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f86c:	e3403015 	movt	r3, #21
  12f870:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12f874:	e2833001 	add	r3, r3, #1
  12f878:	e6ff2073 	uxth	r2, r3
  12f87c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f880:	e3403015 	movt	r3, #21
  12f884:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12f888:	ea000000 	b	12f890 <icmp_input+0x688>
    break;
  12f88c:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12f890:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f894:	ebffacba 	bl	11ab84 <pbuf_free>
  return;
  12f898:	ea00002d 	b	12f954 <icmp_input+0x74c>
    goto lenerr;
  12f89c:	e320f000 	nop	{0}
  12f8a0:	ea000002 	b	12f8b0 <icmp_input+0x6a8>
    goto lenerr;
  12f8a4:	e320f000 	nop	{0}
  12f8a8:	ea000000 	b	12f8b0 <icmp_input+0x6a8>
      goto lenerr;
  12f8ac:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12f8b0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f8b4:	ebffacb2 	bl	11ab84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12f8b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8bc:	e3403015 	movt	r3, #21
  12f8c0:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12f8c4:	e2833001 	add	r3, r3, #1
  12f8c8:	e6ff2073 	uxth	r2, r3
  12f8cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8d0:	e3403015 	movt	r3, #21
  12f8d4:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f8d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8dc:	e3403015 	movt	r3, #21
  12f8e0:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f8e4:	e2832001 	add	r2, r3, #1
  12f8e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8ec:	e3403015 	movt	r3, #21
  12f8f0:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f8f4:	ea000016 	b	12f954 <icmp_input+0x74c>
      goto icmperr;
  12f8f8:	e320f000 	nop	{0}
  12f8fc:	ea000002 	b	12f90c <icmp_input+0x704>
      goto icmperr;
  12f900:	e320f000 	nop	{0}
  12f904:	ea000000 	b	12f90c <icmp_input+0x704>
        goto icmperr;
  12f908:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12f90c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f910:	ebffac9b 	bl	11ab84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12f914:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f918:	e3403015 	movt	r3, #21
  12f91c:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12f920:	e2833001 	add	r3, r3, #1
  12f924:	e6ff2073 	uxth	r2, r3
  12f928:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f92c:	e3403015 	movt	r3, #21
  12f930:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f934:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f938:	e3403015 	movt	r3, #21
  12f93c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f940:	e2832001 	add	r2, r3, #1
  12f944:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f948:	e3403015 	movt	r3, #21
  12f94c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f950:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12f954:	e24bd004 	sub	sp, fp, #4
  12f958:	e8bd8800 	pop	{fp, pc}
  12f95c:	0014f5f4 	.word	0x0014f5f4

0012f960 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12f960:	e92d4800 	push	{fp, lr}
  12f964:	e28db004 	add	fp, sp, #4
  12f968:	e24dd008 	sub	sp, sp, #8
  12f96c:	e50b0008 	str	r0, [fp, #-8]
  12f970:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12f974:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f978:	e3403015 	movt	r3, #21
  12f97c:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12f980:	e2832001 	add	r2, r3, #1
  12f984:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f988:	e3403015 	movt	r3, #21
  12f98c:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12f990:	e51b300c 	ldr	r3, [fp, #-12]
  12f994:	e6ef3073 	uxtb	r3, r3
  12f998:	e1a02003 	mov	r2, r3
  12f99c:	e3a01003 	mov	r1, #3
  12f9a0:	e51b0008 	ldr	r0, [fp, #-8]
  12f9a4:	eb000017 	bl	12fa08 <icmp_send_response>
}
  12f9a8:	e320f000 	nop	{0}
  12f9ac:	e24bd004 	sub	sp, fp, #4
  12f9b0:	e8bd8800 	pop	{fp, pc}

0012f9b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12f9b4:	e92d4800 	push	{fp, lr}
  12f9b8:	e28db004 	add	fp, sp, #4
  12f9bc:	e24dd008 	sub	sp, sp, #8
  12f9c0:	e50b0008 	str	r0, [fp, #-8]
  12f9c4:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12f9c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f9cc:	e3403015 	movt	r3, #21
  12f9d0:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12f9d4:	e2832001 	add	r2, r3, #1
  12f9d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f9dc:	e3403015 	movt	r3, #21
  12f9e0:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12f9e4:	e51b300c 	ldr	r3, [fp, #-12]
  12f9e8:	e6ef3073 	uxtb	r3, r3
  12f9ec:	e1a02003 	mov	r2, r3
  12f9f0:	e3a0100b 	mov	r1, #11
  12f9f4:	e51b0008 	ldr	r0, [fp, #-8]
  12f9f8:	eb000002 	bl	12fa08 <icmp_send_response>
}
  12f9fc:	e320f000 	nop	{0}
  12fa00:	e24bd004 	sub	sp, fp, #4
  12fa04:	e8bd8800 	pop	{fp, pc}

0012fa08 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12fa08:	e92d4800 	push	{fp, lr}
  12fa0c:	e28db004 	add	fp, sp, #4
  12fa10:	e24dd030 	sub	sp, sp, #48	; 0x30
  12fa14:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12fa18:	e1a03001 	mov	r3, r1
  12fa1c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12fa20:	e1a03002 	mov	r3, r2
  12fa24:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12fa28:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fa2c:	e3403015 	movt	r3, #21
  12fa30:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12fa34:	e2832001 	add	r2, r3, #1
  12fa38:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fa3c:	e3403015 	movt	r3, #21
  12fa40:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12fa44:	e3a02000 	mov	r2, #0
  12fa48:	e3a01024 	mov	r1, #36	; 0x24
  12fa4c:	e3a00001 	mov	r0, #1
  12fa50:	ebffa944 	bl	119f68 <pbuf_alloc>
  12fa54:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12fa58:	e51b3008 	ldr	r3, [fp, #-8]
  12fa5c:	e3530000 	cmp	r3, #0
  12fa60:	1a000007 	bne	12fa84 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12fa64:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fa68:	e3403015 	movt	r3, #21
  12fa6c:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12fa70:	e2832001 	add	r2, r3, #1
  12fa74:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fa78:	e3403015 	movt	r3, #21
  12fa7c:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12fa80:	ea000055 	b	12fbdc <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12fa84:	e51b3008 	ldr	r3, [fp, #-8]
  12fa88:	e1d330ba 	ldrh	r3, [r3, #10]
  12fa8c:	e3530023 	cmp	r3, #35	; 0x23
  12fa90:	8a000006 	bhi	12fab0 <icmp_send_response+0xa8>
  12fa94:	e3090278 	movw	r0, #37496	; 0x9278
  12fa98:	e3400014 	movt	r0, #20
  12fa9c:	ebff4d9c 	bl	103114 <rt_kprintf>
  12faa0:	e3001162 	movw	r1, #354	; 0x162
  12faa4:	e3090210 	movw	r0, #37392	; 0x9210
  12faa8:	e3400014 	movt	r0, #20
  12faac:	ebff6cb8 	bl	10ad94 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12fab0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fab4:	e5933004 	ldr	r3, [r3, #4]
  12fab8:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12fabc:	e51b3008 	ldr	r3, [fp, #-8]
  12fac0:	e5933004 	ldr	r3, [r3, #4]
  12fac4:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12fac8:	e51b3010 	ldr	r3, [fp, #-16]
  12facc:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12fad0:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12fad4:	e51b3010 	ldr	r3, [fp, #-16]
  12fad8:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12fadc:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fae0:	e51b3010 	ldr	r3, [fp, #-16]
  12fae4:	e3a02000 	mov	r2, #0
  12fae8:	e5c32004 	strb	r2, [r3, #4]
  12faec:	e3a02000 	mov	r2, #0
  12faf0:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12faf4:	e51b3010 	ldr	r3, [fp, #-16]
  12faf8:	e3a02000 	mov	r2, #0
  12fafc:	e5c32006 	strb	r2, [r3, #6]
  12fb00:	e3a02000 	mov	r2, #0
  12fb04:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12fb08:	e51b3008 	ldr	r3, [fp, #-8]
  12fb0c:	e5933004 	ldr	r3, [r3, #4]
  12fb10:	e2830008 	add	r0, r3, #8
  12fb14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fb18:	e5933004 	ldr	r3, [r3, #4]
  12fb1c:	e3a0201c 	mov	r2, #28
  12fb20:	e1a01003 	mov	r1, r3
  12fb24:	eb0043d6 	bl	140a84 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12fb28:	e51b300c 	ldr	r3, [fp, #-12]
  12fb2c:	e593300c 	ldr	r3, [r3, #12]
  12fb30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fb34:	e24b3018 	sub	r3, fp, #24
  12fb38:	e1a00003 	mov	r0, r3
  12fb3c:	eb0004c9 	bl	130e68 <ip4_route>
  12fb40:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fb44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fb48:	e3530000 	cmp	r3, #0
  12fb4c:	0a000020 	beq	12fbd4 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fb50:	e51b3010 	ldr	r3, [fp, #-16]
  12fb54:	e3a02000 	mov	r2, #0
  12fb58:	e5c32002 	strb	r2, [r3, #2]
  12fb5c:	e3a02000 	mov	r2, #0
  12fb60:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fb64:	e51b3008 	ldr	r3, [fp, #-8]
  12fb68:	e1d330ba 	ldrh	r3, [r3, #10]
  12fb6c:	e1a01003 	mov	r1, r3
  12fb70:	e51b0010 	ldr	r0, [fp, #-16]
  12fb74:	ebffa2da 	bl	1186e4 <inet_chksum>
  12fb78:	e1a03000 	mov	r3, r0
  12fb7c:	e1a02003 	mov	r2, r3
  12fb80:	e51b3010 	ldr	r3, [fp, #-16]
  12fb84:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12fb88:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fb8c:	e3403015 	movt	r3, #21
  12fb90:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fb94:	e2833001 	add	r3, r3, #1
  12fb98:	e6ff2073 	uxth	r2, r3
  12fb9c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fba0:	e3403015 	movt	r3, #21
  12fba4:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fba8:	e24b2018 	sub	r2, fp, #24
  12fbac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fbb0:	e58d3008 	str	r3, [sp, #8]
  12fbb4:	e3a03001 	mov	r3, #1
  12fbb8:	e58d3004 	str	r3, [sp, #4]
  12fbbc:	e3a03000 	mov	r3, #0
  12fbc0:	e58d3000 	str	r3, [sp]
  12fbc4:	e3a030ff 	mov	r3, #255	; 0xff
  12fbc8:	e3a01000 	mov	r1, #0
  12fbcc:	e51b0008 	ldr	r0, [fp, #-8]
  12fbd0:	eb00077d 	bl	1319cc <ip4_output_if>
  }
  pbuf_free(q);
  12fbd4:	e51b0008 	ldr	r0, [fp, #-8]
  12fbd8:	ebffabe9 	bl	11ab84 <pbuf_free>
}
  12fbdc:	e24bd004 	sub	sp, fp, #4
  12fbe0:	e8bd8800 	pop	{fp, pc}

0012fbe4 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12fbe4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fbe8:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12fbec:	e30e2bc0 	movw	r2, #60352	; 0xebc0
  12fbf0:	e3402014 	movt	r2, #20
  12fbf4:	e3a030e0 	mov	r3, #224	; 0xe0
  12fbf8:	e3403100 	movt	r3, #256	; 0x100
  12fbfc:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12fc00:	e30e2bc4 	movw	r2, #60356	; 0xebc4
  12fc04:	e3402014 	movt	r2, #20
  12fc08:	e3a030e0 	mov	r3, #224	; 0xe0
  12fc0c:	e3403200 	movt	r3, #512	; 0x200
  12fc10:	e5823000 	str	r3, [r2]
}
  12fc14:	e320f000 	nop	{0}
  12fc18:	e28bd000 	add	sp, fp, #0
  12fc1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12fc20:	e12fff1e 	bx	lr

0012fc24 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12fc24:	e92d4800 	push	{fp, lr}
  12fc28:	e28db004 	add	fp, sp, #4
  12fc2c:	e24dd010 	sub	sp, sp, #16
  12fc30:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12fc34:	e30e1bc0 	movw	r1, #60352	; 0xebc0
  12fc38:	e3401014 	movt	r1, #20
  12fc3c:	e51b0010 	ldr	r0, [fp, #-16]
  12fc40:	eb000078 	bl	12fe28 <igmp_lookup_group>
  12fc44:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12fc48:	e51b3008 	ldr	r3, [fp, #-8]
  12fc4c:	e3530000 	cmp	r3, #0
  12fc50:	0a000015 	beq	12fcac <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12fc54:	e51b3008 	ldr	r3, [fp, #-8]
  12fc58:	e3a02002 	mov	r2, #2
  12fc5c:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12fc60:	e51b3008 	ldr	r3, [fp, #-8]
  12fc64:	e5d3300c 	ldrb	r3, [r3, #12]
  12fc68:	e2833001 	add	r3, r3, #1
  12fc6c:	e6ef2073 	uxtb	r2, r3
  12fc70:	e51b3008 	ldr	r3, [fp, #-8]
  12fc74:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fc78:	e51b3010 	ldr	r3, [fp, #-16]
  12fc7c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fc80:	e3530000 	cmp	r3, #0
  12fc84:	0a000006 	beq	12fca4 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12fc88:	e51b3010 	ldr	r3, [fp, #-16]
  12fc8c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fc90:	e3a02001 	mov	r2, #1
  12fc94:	e30e1bc0 	movw	r1, #60352	; 0xebc0
  12fc98:	e3401014 	movt	r1, #20
  12fc9c:	e51b0010 	ldr	r0, [fp, #-16]
  12fca0:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12fca4:	e3a03000 	mov	r3, #0
  12fca8:	ea000000 	b	12fcb0 <igmp_start+0x8c>
  }

  return ERR_MEM;
  12fcac:	e3e03000 	mvn	r3, #0
}
  12fcb0:	e1a00003 	mov	r0, r3
  12fcb4:	e24bd004 	sub	sp, fp, #4
  12fcb8:	e8bd8800 	pop	{fp, pc}

0012fcbc <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12fcbc:	e92d4800 	push	{fp, lr}
  12fcc0:	e28db004 	add	fp, sp, #4
  12fcc4:	e24dd010 	sub	sp, sp, #16
  12fcc8:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fccc:	e51b3010 	ldr	r3, [fp, #-16]
  12fcd0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fcd4:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  12fcd8:	e51b3010 	ldr	r3, [fp, #-16]
  12fcdc:	e3a02000 	mov	r2, #0
  12fce0:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  12fce4:	ea000012 	b	12fd34 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  12fce8:	e51b3008 	ldr	r3, [fp, #-8]
  12fcec:	e5933000 	ldr	r3, [r3]
  12fcf0:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fcf4:	e51b3010 	ldr	r3, [fp, #-16]
  12fcf8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fcfc:	e3530000 	cmp	r3, #0
  12fd00:	0a000006 	beq	12fd20 <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  12fd04:	e51b3010 	ldr	r3, [fp, #-16]
  12fd08:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fd0c:	e51b2008 	ldr	r2, [fp, #-8]
  12fd10:	e2821004 	add	r1, r2, #4
  12fd14:	e3a02000 	mov	r2, #0
  12fd18:	e51b0010 	ldr	r0, [fp, #-16]
  12fd1c:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  12fd20:	e51b1008 	ldr	r1, [fp, #-8]
  12fd24:	e3a0000c 	mov	r0, #12
  12fd28:	ebffa487 	bl	118f4c <memp_free>

    /* move to "next" */
    group = next;
  12fd2c:	e51b300c 	ldr	r3, [fp, #-12]
  12fd30:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fd34:	e51b3008 	ldr	r3, [fp, #-8]
  12fd38:	e3530000 	cmp	r3, #0
  12fd3c:	1affffe9 	bne	12fce8 <igmp_stop+0x2c>
  }
  return ERR_OK;
  12fd40:	e3a03000 	mov	r3, #0
}
  12fd44:	e1a00003 	mov	r0, r3
  12fd48:	e24bd004 	sub	sp, fp, #4
  12fd4c:	e8bd8800 	pop	{fp, pc}

0012fd50 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  12fd50:	e92d4800 	push	{fp, lr}
  12fd54:	e28db004 	add	fp, sp, #4
  12fd58:	e24dd010 	sub	sp, sp, #16
  12fd5c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fd60:	e51b3010 	ldr	r3, [fp, #-16]
  12fd64:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fd68:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  12fd6c:	e51b3008 	ldr	r3, [fp, #-8]
  12fd70:	e3530000 	cmp	r3, #0
  12fd74:	0a000009 	beq	12fda0 <igmp_report_groups+0x50>
    group = group->next;
  12fd78:	e51b3008 	ldr	r3, [fp, #-8]
  12fd7c:	e5933000 	ldr	r3, [r3]
  12fd80:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  12fd84:	ea000005 	b	12fda0 <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  12fd88:	e3a01005 	mov	r1, #5
  12fd8c:	e51b0008 	ldr	r0, [fp, #-8]
  12fd90:	eb000372 	bl	130b60 <igmp_delaying_member>
    group = group->next;
  12fd94:	e51b3008 	ldr	r3, [fp, #-8]
  12fd98:	e5933000 	ldr	r3, [r3]
  12fd9c:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fda0:	e51b3008 	ldr	r3, [fp, #-8]
  12fda4:	e3530000 	cmp	r3, #0
  12fda8:	1afffff6 	bne	12fd88 <igmp_report_groups+0x38>
  }
}
  12fdac:	e320f000 	nop	{0}
  12fdb0:	e24bd004 	sub	sp, fp, #4
  12fdb4:	e8bd8800 	pop	{fp, pc}

0012fdb8 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fdb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fdbc:	e28db000 	add	fp, sp, #0
  12fdc0:	e24dd014 	sub	sp, sp, #20
  12fdc4:	e50b0010 	str	r0, [fp, #-16]
  12fdc8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  12fdcc:	e51b3010 	ldr	r3, [fp, #-16]
  12fdd0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fdd4:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  12fdd8:	ea00000a 	b	12fe08 <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  12fddc:	e51b3008 	ldr	r3, [fp, #-8]
  12fde0:	e5932004 	ldr	r2, [r3, #4]
  12fde4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fde8:	e5933000 	ldr	r3, [r3]
  12fdec:	e1520003 	cmp	r2, r3
  12fdf0:	1a000001 	bne	12fdfc <igmp_lookfor_group+0x44>
      return group;
  12fdf4:	e51b3008 	ldr	r3, [fp, #-8]
  12fdf8:	ea000006 	b	12fe18 <igmp_lookfor_group+0x60>
    }
    group = group->next;
  12fdfc:	e51b3008 	ldr	r3, [fp, #-8]
  12fe00:	e5933000 	ldr	r3, [r3]
  12fe04:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fe08:	e51b3008 	ldr	r3, [fp, #-8]
  12fe0c:	e3530000 	cmp	r3, #0
  12fe10:	1afffff1 	bne	12fddc <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  12fe14:	e3a03000 	mov	r3, #0
}
  12fe18:	e1a00003 	mov	r0, r3
  12fe1c:	e28bd000 	add	sp, fp, #0
  12fe20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12fe24:	e12fff1e 	bx	lr

0012fe28 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fe28:	e92d4800 	push	{fp, lr}
  12fe2c:	e28db004 	add	fp, sp, #4
  12fe30:	e24dd010 	sub	sp, sp, #16
  12fe34:	e50b0010 	str	r0, [fp, #-16]
  12fe38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  12fe3c:	e51b3010 	ldr	r3, [fp, #-16]
  12fe40:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fe44:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  12fe48:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12fe4c:	e51b0010 	ldr	r0, [fp, #-16]
  12fe50:	ebffffd8 	bl	12fdb8 <igmp_lookfor_group>
  12fe54:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fe58:	e51b300c 	ldr	r3, [fp, #-12]
  12fe5c:	e3530000 	cmp	r3, #0
  12fe60:	0a000001 	beq	12fe6c <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  12fe64:	e51b300c 	ldr	r3, [fp, #-12]
  12fe68:	ea00004b 	b	12ff9c <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  12fe6c:	e3002101 	movw	r2, #257	; 0x101
  12fe70:	e30912a4 	movw	r1, #37540	; 0x92a4
  12fe74:	e3401014 	movt	r1, #20
  12fe78:	e3a0000c 	mov	r0, #12
  12fe7c:	ebffa3ca 	bl	118dac <memp_malloc_fn>
  12fe80:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fe84:	e51b300c 	ldr	r3, [fp, #-12]
  12fe88:	e3530000 	cmp	r3, #0
  12fe8c:	0a000041 	beq	12ff98 <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  12fe90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe94:	e3530000 	cmp	r3, #0
  12fe98:	0a000002 	beq	12fea8 <igmp_lookup_group+0x80>
  12fe9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fea0:	e5933000 	ldr	r3, [r3]
  12fea4:	ea000000 	b	12feac <igmp_lookup_group+0x84>
  12fea8:	e3a03000 	mov	r3, #0
  12feac:	e51b200c 	ldr	r2, [fp, #-12]
  12feb0:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  12feb4:	e51b300c 	ldr	r3, [fp, #-12]
  12feb8:	e3a02000 	mov	r2, #0
  12febc:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  12fec0:	e51b300c 	ldr	r3, [fp, #-12]
  12fec4:	e3a02000 	mov	r2, #0
  12fec8:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  12fecc:	e51b300c 	ldr	r3, [fp, #-12]
  12fed0:	e3a02000 	mov	r2, #0
  12fed4:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  12fed8:	e51b300c 	ldr	r3, [fp, #-12]
  12fedc:	e3a02000 	mov	r2, #0
  12fee0:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  12fee4:	e51b3008 	ldr	r3, [fp, #-8]
  12fee8:	e3530000 	cmp	r3, #0
  12feec:	1a000014 	bne	12ff44 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  12fef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fef4:	e5932000 	ldr	r2, [r3]
  12fef8:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  12fefc:	e3403014 	movt	r3, #20
  12ff00:	e5933000 	ldr	r3, [r3]
  12ff04:	e1520003 	cmp	r2, r3
  12ff08:	0a000006 	beq	12ff28 <igmp_lookup_group+0x100>
  12ff0c:	e30902d8 	movw	r0, #37592	; 0x92d8
  12ff10:	e3400014 	movt	r0, #20
  12ff14:	ebff4c7e 	bl	103114 <rt_kprintf>
  12ff18:	e300110d 	movw	r1, #269	; 0x10d
  12ff1c:	e30902a4 	movw	r0, #37540	; 0x92a4
  12ff20:	e3400014 	movt	r0, #20
  12ff24:	ebff6b9a 	bl	10ad94 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  12ff28:	e51b300c 	ldr	r3, [fp, #-12]
  12ff2c:	e3a02000 	mov	r2, #0
  12ff30:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  12ff34:	e51b3010 	ldr	r3, [fp, #-16]
  12ff38:	e51b200c 	ldr	r2, [fp, #-12]
  12ff3c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  12ff40:	ea000014 	b	12ff98 <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  12ff44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ff48:	e5932000 	ldr	r2, [r3]
  12ff4c:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  12ff50:	e3403014 	movt	r3, #20
  12ff54:	e5933000 	ldr	r3, [r3]
  12ff58:	e1520003 	cmp	r2, r3
  12ff5c:	1a000006 	bne	12ff7c <igmp_lookup_group+0x154>
  12ff60:	e309030c 	movw	r0, #37644	; 0x930c
  12ff64:	e3400014 	movt	r0, #20
  12ff68:	ebff4c69 	bl	103114 <rt_kprintf>
  12ff6c:	e3001113 	movw	r1, #275	; 0x113
  12ff70:	e30902a4 	movw	r0, #37540	; 0x92a4
  12ff74:	e3400014 	movt	r0, #20
  12ff78:	ebff6b85 	bl	10ad94 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  12ff7c:	e51b3008 	ldr	r3, [fp, #-8]
  12ff80:	e5932000 	ldr	r2, [r3]
  12ff84:	e51b300c 	ldr	r3, [fp, #-12]
  12ff88:	e5832000 	str	r2, [r3]
      list_head->next = group;
  12ff8c:	e51b3008 	ldr	r3, [fp, #-8]
  12ff90:	e51b200c 	ldr	r2, [fp, #-12]
  12ff94:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  12ff98:	e51b300c 	ldr	r3, [fp, #-12]
}
  12ff9c:	e1a00003 	mov	r0, r3
  12ffa0:	e24bd004 	sub	sp, fp, #4
  12ffa4:	e8bd8800 	pop	{fp, pc}

0012ffa8 <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  12ffa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12ffac:	e28db000 	add	fp, sp, #0
  12ffb0:	e24dd014 	sub	sp, sp, #20
  12ffb4:	e50b0010 	str	r0, [fp, #-16]
  12ffb8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  12ffbc:	e3a03000 	mov	r3, #0
  12ffc0:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  12ffc4:	e51b3010 	ldr	r3, [fp, #-16]
  12ffc8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12ffcc:	e50b300c 	str	r3, [fp, #-12]
  12ffd0:	ea00000c 	b	130008 <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  12ffd4:	e51b300c 	ldr	r3, [fp, #-12]
  12ffd8:	e5933000 	ldr	r3, [r3]
  12ffdc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12ffe0:	e1520003 	cmp	r2, r3
  12ffe4:	1a000004 	bne	12fffc <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  12ffe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ffec:	e5932000 	ldr	r2, [r3]
  12fff0:	e51b300c 	ldr	r3, [fp, #-12]
  12fff4:	e5832000 	str	r2, [r3]
      break;
  12fff8:	ea000005 	b	130014 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  12fffc:	e51b300c 	ldr	r3, [fp, #-12]
  130000:	e5933000 	ldr	r3, [r3]
  130004:	e50b300c 	str	r3, [fp, #-12]
  130008:	e51b300c 	ldr	r3, [fp, #-12]
  13000c:	e3530000 	cmp	r3, #0
  130010:	1affffef 	bne	12ffd4 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  130014:	e51b300c 	ldr	r3, [fp, #-12]
  130018:	e3530000 	cmp	r3, #0
  13001c:	1a000001 	bne	130028 <igmp_remove_group+0x80>
    err = ERR_ARG;
  130020:	e3e0300f 	mvn	r3, #15
  130024:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  130028:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  13002c:	e1a00003 	mov	r0, r3
  130030:	e28bd000 	add	sp, fp, #0
  130034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130038:	e12fff1e 	bx	lr

0013003c <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  13003c:	e92d4800 	push	{fp, lr}
  130040:	e28db004 	add	fp, sp, #4
  130044:	e24dd020 	sub	sp, sp, #32
  130048:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13004c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130050:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  130054:	e30c3a18 	movw	r3, #51736	; 0xca18
  130058:	e3403015 	movt	r3, #21
  13005c:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  130060:	e2833001 	add	r3, r3, #1
  130064:	e6ff2073 	uxth	r2, r3
  130068:	e30c3a18 	movw	r3, #51736	; 0xca18
  13006c:	e3403015 	movt	r3, #21
  130070:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  130074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130078:	e1d330ba 	ldrh	r3, [r3, #10]
  13007c:	e3530007 	cmp	r3, #7
  130080:	8a00000a 	bhi	1300b0 <igmp_input+0x74>
    pbuf_free(p);
  130084:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130088:	ebffaabd 	bl	11ab84 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  13008c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130090:	e3403015 	movt	r3, #21
  130094:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  130098:	e2833001 	add	r3, r3, #1
  13009c:	e6ff2073 	uxth	r2, r3
  1300a0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1300a4:	e3403015 	movt	r3, #21
  1300a8:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  1300ac:	ea0000c9 	b	1303d8 <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  1300b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1300b4:	e5933004 	ldr	r3, [r3, #4]
  1300b8:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  1300bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1300c0:	e1d330ba 	ldrh	r3, [r3, #10]
  1300c4:	e1a01003 	mov	r1, r3
  1300c8:	e51b0010 	ldr	r0, [fp, #-16]
  1300cc:	ebffa184 	bl	1186e4 <inet_chksum>
  1300d0:	e1a03000 	mov	r3, r0
  1300d4:	e3530000 	cmp	r3, #0
  1300d8:	0a00000a 	beq	130108 <igmp_input+0xcc>
    pbuf_free(p);
  1300dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1300e0:	ebffaaa7 	bl	11ab84 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  1300e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1300e8:	e3403015 	movt	r3, #21
  1300ec:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  1300f0:	e2833001 	add	r3, r3, #1
  1300f4:	e6ff2073 	uxth	r2, r3
  1300f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1300fc:	e3403015 	movt	r3, #21
  130100:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  130104:	ea0000b3 	b	1303d8 <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  130108:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  13010c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130110:	ebffff28 	bl	12fdb8 <igmp_lookfor_group>
  130114:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  130118:	e51b3008 	ldr	r3, [fp, #-8]
  13011c:	e3530000 	cmp	r3, #0
  130120:	1a00000a 	bne	130150 <igmp_input+0x114>
    pbuf_free(p);
  130124:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130128:	ebffaa95 	bl	11ab84 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  13012c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130130:	e3403015 	movt	r3, #21
  130134:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130138:	e2833001 	add	r3, r3, #1
  13013c:	e6ff2073 	uxth	r2, r3
  130140:	e30c3a18 	movw	r3, #51736	; 0xca18
  130144:	e3403015 	movt	r3, #21
  130148:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  13014c:	ea0000a1 	b	1303d8 <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  130150:	e51b3010 	ldr	r3, [fp, #-16]
  130154:	e5d33000 	ldrb	r3, [r3]
  130158:	e3530011 	cmp	r3, #17
  13015c:	0a000002 	beq	13016c <igmp_input+0x130>
  130160:	e3530016 	cmp	r3, #22
  130164:	0a000078 	beq	13034c <igmp_input+0x310>
  130168:	ea00008d 	b	1303a4 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13016c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130170:	e5932000 	ldr	r2, [r3]
  130174:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130178:	e3403014 	movt	r3, #20
  13017c:	e5933000 	ldr	r3, [r3]
  130180:	e1520003 	cmp	r2, r3
  130184:	1a000035 	bne	130260 <igmp_input+0x224>
  130188:	e51b3010 	ldr	r3, [fp, #-16]
  13018c:	e2833004 	add	r3, r3, #4
  130190:	e3530000 	cmp	r3, #0
  130194:	0a000003 	beq	1301a8 <igmp_input+0x16c>
  130198:	e51b3010 	ldr	r3, [fp, #-16]
  13019c:	e5933004 	ldr	r3, [r3, #4]
  1301a0:	e3530000 	cmp	r3, #0
  1301a4:	1a00002d 	bne	130260 <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  1301a8:	e51b3010 	ldr	r3, [fp, #-16]
  1301ac:	e5d33001 	ldrb	r3, [r3, #1]
  1301b0:	e3530000 	cmp	r3, #0
  1301b4:	1a00000b 	bne	1301e8 <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  1301b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1301bc:	e3403015 	movt	r3, #21
  1301c0:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  1301c4:	e2833001 	add	r3, r3, #1
  1301c8:	e6ff2073 	uxth	r2, r3
  1301cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1301d0:	e3403015 	movt	r3, #21
  1301d4:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  1301d8:	e51b3010 	ldr	r3, [fp, #-16]
  1301dc:	e3a0200a 	mov	r2, #10
  1301e0:	e5c32001 	strb	r2, [r3, #1]
  1301e4:	ea000007 	b	130208 <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  1301e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1301ec:	e3403015 	movt	r3, #21
  1301f0:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  1301f4:	e2833001 	add	r3, r3, #1
  1301f8:	e6ff2073 	uxth	r2, r3
  1301fc:	e30c3a18 	movw	r3, #51736	; 0xca18
  130200:	e3403015 	movt	r3, #21
  130204:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  130208:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13020c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130210:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130214:	e51b300c 	ldr	r3, [fp, #-12]
  130218:	e3530000 	cmp	r3, #0
  13021c:	0a00000b 	beq	130250 <igmp_input+0x214>
        groupref = groupref->next;
  130220:	e51b300c 	ldr	r3, [fp, #-12]
  130224:	e5933000 	ldr	r3, [r3]
  130228:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  13022c:	ea000007 	b	130250 <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  130230:	e51b3010 	ldr	r3, [fp, #-16]
  130234:	e5d33001 	ldrb	r3, [r3, #1]
  130238:	e1a01003 	mov	r1, r3
  13023c:	e51b000c 	ldr	r0, [fp, #-12]
  130240:	eb000246 	bl	130b60 <igmp_delaying_member>
        groupref = groupref->next;
  130244:	e51b300c 	ldr	r3, [fp, #-12]
  130248:	e5933000 	ldr	r3, [r3]
  13024c:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  130250:	e51b300c 	ldr	r3, [fp, #-12]
  130254:	e3530000 	cmp	r3, #0
  130258:	1afffff4 	bne	130230 <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13025c:	ea000039 	b	130348 <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  130260:	e51b3010 	ldr	r3, [fp, #-16]
  130264:	e2833004 	add	r3, r3, #4
  130268:	e3530000 	cmp	r3, #0
  13026c:	0a00002c 	beq	130324 <igmp_input+0x2e8>
  130270:	e51b3010 	ldr	r3, [fp, #-16]
  130274:	e5933004 	ldr	r3, [r3, #4]
  130278:	e3530000 	cmp	r3, #0
  13027c:	0a000028 	beq	130324 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  130280:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130284:	e5932000 	ldr	r2, [r3]
  130288:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  13028c:	e3403014 	movt	r3, #20
  130290:	e5933000 	ldr	r3, [r3]
  130294:	e1520003 	cmp	r2, r3
  130298:	1a000007 	bne	1302bc <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  13029c:	e51b3010 	ldr	r3, [fp, #-16]
  1302a0:	e5933004 	ldr	r3, [r3, #4]
  1302a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  1302a8:	e24b3014 	sub	r3, fp, #20
  1302ac:	e1a01003 	mov	r1, r3
  1302b0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1302b4:	ebfffebf 	bl	12fdb8 <igmp_lookfor_group>
  1302b8:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  1302bc:	e51b3008 	ldr	r3, [fp, #-8]
  1302c0:	e3530000 	cmp	r3, #0
  1302c4:	0a00000d 	beq	130300 <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  1302c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1302cc:	e3403015 	movt	r3, #21
  1302d0:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  1302d4:	e2833001 	add	r3, r3, #1
  1302d8:	e6ff2073 	uxth	r2, r3
  1302dc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1302e0:	e3403015 	movt	r3, #21
  1302e4:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  1302e8:	e51b3010 	ldr	r3, [fp, #-16]
  1302ec:	e5d33001 	ldrb	r3, [r3, #1]
  1302f0:	e1a01003 	mov	r1, r3
  1302f4:	e51b0008 	ldr	r0, [fp, #-8]
  1302f8:	eb000218 	bl	130b60 <igmp_delaying_member>
        if (group != NULL) {
  1302fc:	ea000011 	b	130348 <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  130300:	e30c3a18 	movw	r3, #51736	; 0xca18
  130304:	e3403015 	movt	r3, #21
  130308:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  13030c:	e2833001 	add	r3, r3, #1
  130310:	e6ff2073 	uxth	r2, r3
  130314:	e30c3a18 	movw	r3, #51736	; 0xca18
  130318:	e3403015 	movt	r3, #21
  13031c:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  130320:	ea000008 	b	130348 <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  130324:	e30c3a18 	movw	r3, #51736	; 0xca18
  130328:	e3403015 	movt	r3, #21
  13032c:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130330:	e2833001 	add	r3, r3, #1
  130334:	e6ff2073 	uxth	r2, r3
  130338:	e30c3a18 	movw	r3, #51736	; 0xca18
  13033c:	e3403015 	movt	r3, #21
  130340:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  130344:	ea000020 	b	1303cc <igmp_input+0x390>
  130348:	ea00001f 	b	1303cc <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  13034c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130350:	e3403015 	movt	r3, #21
  130354:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  130358:	e2833001 	add	r3, r3, #1
  13035c:	e6ff2073 	uxth	r2, r3
  130360:	e30c3a18 	movw	r3, #51736	; 0xca18
  130364:	e3403015 	movt	r3, #21
  130368:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  13036c:	e51b3008 	ldr	r3, [fp, #-8]
  130370:	e5d33009 	ldrb	r3, [r3, #9]
  130374:	e3530001 	cmp	r3, #1
  130378:	1a000012 	bne	1303c8 <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  13037c:	e51b3008 	ldr	r3, [fp, #-8]
  130380:	e3a02000 	mov	r2, #0
  130384:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130388:	e51b3008 	ldr	r3, [fp, #-8]
  13038c:	e3a02002 	mov	r2, #2
  130390:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  130394:	e51b3008 	ldr	r3, [fp, #-8]
  130398:	e3a02000 	mov	r2, #0
  13039c:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  1303a0:	ea000008 	b	1303c8 <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  1303a4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1303a8:	e3403015 	movt	r3, #21
  1303ac:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1303b0:	e2833001 	add	r3, r3, #1
  1303b4:	e6ff2073 	uxth	r2, r3
  1303b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1303bc:	e3403015 	movt	r3, #21
  1303c0:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  1303c4:	ea000000 	b	1303cc <igmp_input+0x390>
    break;
  1303c8:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  1303cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1303d0:	ebffa9eb 	bl	11ab84 <pbuf_free>
  return;
  1303d4:	e320f000 	nop	{0}
}
  1303d8:	e24bd004 	sub	sp, fp, #4
  1303dc:	e8bd8800 	pop	{fp, pc}

001303e0 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1303e0:	e92d4800 	push	{fp, lr}
  1303e4:	e28db004 	add	fp, sp, #4
  1303e8:	e24dd010 	sub	sp, sp, #16
  1303ec:	e50b0010 	str	r0, [fp, #-16]
  1303f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  1303f4:	e3e03005 	mvn	r3, #5
  1303f8:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1303fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130400:	e5933000 	ldr	r3, [r3]
  130404:	e20330f0 	and	r3, r3, #240	; 0xf0
  130408:	e35300e0 	cmp	r3, #224	; 0xe0
  13040c:	0a000008 	beq	130434 <igmp_joingroup+0x54>
  130410:	e3090350 	movw	r0, #37712	; 0x9350
  130414:	e3400014 	movt	r0, #20
  130418:	ebff4b3d 	bl	103114 <rt_kprintf>
  13041c:	e30011c7 	movw	r1, #455	; 0x1c7
  130420:	e30902a4 	movw	r0, #37540	; 0x92a4
  130424:	e3400014 	movt	r0, #20
  130428:	ebff6a59 	bl	10ad94 <sys_arch_assert>
  13042c:	e3e03005 	mvn	r3, #5
  130430:	ea000038 	b	130518 <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130438:	e5932000 	ldr	r2, [r3]
  13043c:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130440:	e3403014 	movt	r3, #20
  130444:	e5933000 	ldr	r3, [r3]
  130448:	e1520003 	cmp	r2, r3
  13044c:	1a000008 	bne	130474 <igmp_joingroup+0x94>
  130450:	e3090388 	movw	r0, #37768	; 0x9388
  130454:	e3400014 	movt	r0, #20
  130458:	ebff4b2d 	bl	103114 <rt_kprintf>
  13045c:	e3a01f72 	mov	r1, #456	; 0x1c8
  130460:	e30902a4 	movw	r0, #37540	; 0x92a4
  130464:	e3400014 	movt	r0, #20
  130468:	ebff6a49 	bl	10ad94 <sys_arch_assert>
  13046c:	e3e03005 	mvn	r3, #5
  130470:	ea000028 	b	130518 <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130474:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  130478:	e3403015 	movt	r3, #21
  13047c:	e5933000 	ldr	r3, [r3]
  130480:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130484:	ea00001f 	b	130508 <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130488:	e51b300c 	ldr	r3, [fp, #-12]
  13048c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130490:	e2033020 	and	r3, r3, #32
  130494:	e3530000 	cmp	r3, #0
  130498:	0a000017 	beq	1304fc <igmp_joingroup+0x11c>
  13049c:	e51b3010 	ldr	r3, [fp, #-16]
  1304a0:	e3530000 	cmp	r3, #0
  1304a4:	0a00000a 	beq	1304d4 <igmp_joingroup+0xf4>
  1304a8:	e51b3010 	ldr	r3, [fp, #-16]
  1304ac:	e5933000 	ldr	r3, [r3]
  1304b0:	e3530000 	cmp	r3, #0
  1304b4:	0a000006 	beq	1304d4 <igmp_joingroup+0xf4>
  1304b8:	e51b300c 	ldr	r3, [fp, #-12]
  1304bc:	e2833004 	add	r3, r3, #4
  1304c0:	e5932000 	ldr	r2, [r3]
  1304c4:	e51b3010 	ldr	r3, [fp, #-16]
  1304c8:	e5933000 	ldr	r3, [r3]
  1304cc:	e1520003 	cmp	r2, r3
  1304d0:	1a000009 	bne	1304fc <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  1304d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1304d8:	e51b000c 	ldr	r0, [fp, #-12]
  1304dc:	eb000010 	bl	130524 <igmp_joingroup_netif>
  1304e0:	e1a03000 	mov	r3, r0
  1304e4:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  1304e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1304ec:	e3530000 	cmp	r3, #0
  1304f0:	0a000001 	beq	1304fc <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  1304f4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1304f8:	ea000006 	b	130518 <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  1304fc:	e51b300c 	ldr	r3, [fp, #-12]
  130500:	e5933000 	ldr	r3, [r3]
  130504:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130508:	e51b300c 	ldr	r3, [fp, #-12]
  13050c:	e3530000 	cmp	r3, #0
  130510:	1affffdc 	bne	130488 <igmp_joingroup+0xa8>
  }

  return err;
  130514:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130518:	e1a00003 	mov	r0, r3
  13051c:	e24bd004 	sub	sp, fp, #4
  130520:	e8bd8800 	pop	{fp, pc}

00130524 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130524:	e92d4800 	push	{fp, lr}
  130528:	e28db004 	add	fp, sp, #4
  13052c:	e24dd010 	sub	sp, sp, #16
  130530:	e50b0010 	str	r0, [fp, #-16]
  130534:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130538:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13053c:	e5933000 	ldr	r3, [r3]
  130540:	e20330f0 	and	r3, r3, #240	; 0xf0
  130544:	e35300e0 	cmp	r3, #224	; 0xe0
  130548:	0a000008 	beq	130570 <igmp_joingroup_netif+0x4c>
  13054c:	e30903bc 	movw	r0, #37820	; 0x93bc
  130550:	e3400014 	movt	r0, #20
  130554:	ebff4aee 	bl	103114 <rt_kprintf>
  130558:	e30011eb 	movw	r1, #491	; 0x1eb
  13055c:	e30902a4 	movw	r0, #37540	; 0x92a4
  130560:	e3400014 	movt	r0, #20
  130564:	ebff6a0a 	bl	10ad94 <sys_arch_assert>
  130568:	e3e03005 	mvn	r3, #5
  13056c:	ea000051 	b	1306b8 <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130570:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130574:	e5932000 	ldr	r2, [r3]
  130578:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  13057c:	e3403014 	movt	r3, #20
  130580:	e5933000 	ldr	r3, [r3]
  130584:	e1520003 	cmp	r2, r3
  130588:	1a000008 	bne	1305b0 <igmp_joingroup_netif+0x8c>
  13058c:	e30903f8 	movw	r0, #37880	; 0x93f8
  130590:	e3400014 	movt	r0, #20
  130594:	ebff4ade 	bl	103114 <rt_kprintf>
  130598:	e3a01f7b 	mov	r1, #492	; 0x1ec
  13059c:	e30902a4 	movw	r0, #37540	; 0x92a4
  1305a0:	e3400014 	movt	r0, #20
  1305a4:	ebff69fa 	bl	10ad94 <sys_arch_assert>
  1305a8:	e3e03005 	mvn	r3, #5
  1305ac:	ea000041 	b	1306b8 <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  1305b0:	e51b3010 	ldr	r3, [fp, #-16]
  1305b4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1305b8:	e2033020 	and	r3, r3, #32
  1305bc:	e3530000 	cmp	r3, #0
  1305c0:	1a000008 	bne	1305e8 <igmp_joingroup_netif+0xc4>
  1305c4:	e3090434 	movw	r0, #37940	; 0x9434
  1305c8:	e3400014 	movt	r0, #20
  1305cc:	ebff4ad0 	bl	103114 <rt_kprintf>
  1305d0:	e30011ef 	movw	r1, #495	; 0x1ef
  1305d4:	e30902a4 	movw	r0, #37540	; 0x92a4
  1305d8:	e3400014 	movt	r0, #20
  1305dc:	ebff69ec 	bl	10ad94 <sys_arch_assert>
  1305e0:	e3e03005 	mvn	r3, #5
  1305e4:	ea000033 	b	1306b8 <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  1305e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1305ec:	e51b0010 	ldr	r0, [fp, #-16]
  1305f0:	ebfffe0c 	bl	12fe28 <igmp_lookup_group>
  1305f4:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  1305f8:	e51b3008 	ldr	r3, [fp, #-8]
  1305fc:	e3530000 	cmp	r3, #0
  130600:	0a00002b 	beq	1306b4 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  130604:	e51b3008 	ldr	r3, [fp, #-8]
  130608:	e5d33009 	ldrb	r3, [r3, #9]
  13060c:	e3530000 	cmp	r3, #0
  130610:	1a00001f 	bne	130694 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130614:	e51b3008 	ldr	r3, [fp, #-8]
  130618:	e5d3300c 	ldrb	r3, [r3, #12]
  13061c:	e3530000 	cmp	r3, #0
  130620:	1a000009 	bne	13064c <igmp_joingroup_netif+0x128>
  130624:	e51b3010 	ldr	r3, [fp, #-16]
  130628:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13062c:	e3530000 	cmp	r3, #0
  130630:	0a000005 	beq	13064c <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  130634:	e51b3010 	ldr	r3, [fp, #-16]
  130638:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13063c:	e3a02001 	mov	r2, #1
  130640:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130644:	e51b0010 	ldr	r0, [fp, #-16]
  130648:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  13064c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130650:	e3403015 	movt	r3, #21
  130654:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  130658:	e2833001 	add	r3, r3, #1
  13065c:	e6ff2073 	uxth	r2, r3
  130660:	e30c3a18 	movw	r3, #51736	; 0xca18
  130664:	e3403015 	movt	r3, #21
  130668:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  13066c:	e3a02016 	mov	r2, #22
  130670:	e51b1008 	ldr	r1, [fp, #-8]
  130674:	e51b0010 	ldr	r0, [fp, #-16]
  130678:	eb000180 	bl	130c80 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  13067c:	e3a01005 	mov	r1, #5
  130680:	e51b0008 	ldr	r0, [fp, #-8]
  130684:	eb000116 	bl	130ae4 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130688:	e51b3008 	ldr	r3, [fp, #-8]
  13068c:	e3a02001 	mov	r2, #1
  130690:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  130694:	e51b3008 	ldr	r3, [fp, #-8]
  130698:	e5d3300c 	ldrb	r3, [r3, #12]
  13069c:	e2833001 	add	r3, r3, #1
  1306a0:	e6ef2073 	uxtb	r2, r3
  1306a4:	e51b3008 	ldr	r3, [fp, #-8]
  1306a8:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  1306ac:	e3a03000 	mov	r3, #0
  1306b0:	ea000000 	b	1306b8 <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  1306b4:	e3e03000 	mvn	r3, #0
  }
}
  1306b8:	e1a00003 	mov	r0, r3
  1306bc:	e24bd004 	sub	sp, fp, #4
  1306c0:	e8bd8800 	pop	{fp, pc}

001306c4 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1306c4:	e92d4800 	push	{fp, lr}
  1306c8:	e28db004 	add	fp, sp, #4
  1306cc:	e24dd018 	sub	sp, sp, #24
  1306d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1306d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  1306d8:	e3e03005 	mvn	r3, #5
  1306dc:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1306e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1306e4:	e5933000 	ldr	r3, [r3]
  1306e8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1306ec:	e35300e0 	cmp	r3, #224	; 0xe0
  1306f0:	0a000008 	beq	130718 <igmp_leavegroup+0x54>
  1306f4:	e309046c 	movw	r0, #37996	; 0x946c
  1306f8:	e3400014 	movt	r0, #20
  1306fc:	ebff4a84 	bl	103114 <rt_kprintf>
  130700:	e3001227 	movw	r1, #551	; 0x227
  130704:	e30902a4 	movw	r0, #37540	; 0x92a4
  130708:	e3400014 	movt	r0, #20
  13070c:	ebff69a0 	bl	10ad94 <sys_arch_assert>
  130710:	e3e03005 	mvn	r3, #5
  130714:	ea000038 	b	1307fc <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130718:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13071c:	e5932000 	ldr	r2, [r3]
  130720:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130724:	e3403014 	movt	r3, #20
  130728:	e5933000 	ldr	r3, [r3]
  13072c:	e1520003 	cmp	r2, r3
  130730:	1a000008 	bne	130758 <igmp_leavegroup+0x94>
  130734:	e30904a4 	movw	r0, #38052	; 0x94a4
  130738:	e3400014 	movt	r0, #20
  13073c:	ebff4a74 	bl	103114 <rt_kprintf>
  130740:	e3a01f8a 	mov	r1, #552	; 0x228
  130744:	e30902a4 	movw	r0, #37540	; 0x92a4
  130748:	e3400014 	movt	r0, #20
  13074c:	ebff6990 	bl	10ad94 <sys_arch_assert>
  130750:	e3e03005 	mvn	r3, #5
  130754:	ea000028 	b	1307fc <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130758:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  13075c:	e3403015 	movt	r3, #21
  130760:	e5933000 	ldr	r3, [r3]
  130764:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130768:	ea00001f 	b	1307ec <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  13076c:	e51b300c 	ldr	r3, [fp, #-12]
  130770:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130774:	e2033020 	and	r3, r3, #32
  130778:	e3530000 	cmp	r3, #0
  13077c:	0a000017 	beq	1307e0 <igmp_leavegroup+0x11c>
  130780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130784:	e3530000 	cmp	r3, #0
  130788:	0a00000a 	beq	1307b8 <igmp_leavegroup+0xf4>
  13078c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130790:	e5933000 	ldr	r3, [r3]
  130794:	e3530000 	cmp	r3, #0
  130798:	0a000006 	beq	1307b8 <igmp_leavegroup+0xf4>
  13079c:	e51b300c 	ldr	r3, [fp, #-12]
  1307a0:	e2833004 	add	r3, r3, #4
  1307a4:	e5932000 	ldr	r2, [r3]
  1307a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1307ac:	e5933000 	ldr	r3, [r3]
  1307b0:	e1520003 	cmp	r2, r3
  1307b4:	1a000009 	bne	1307e0 <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  1307b8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1307bc:	e51b000c 	ldr	r0, [fp, #-12]
  1307c0:	eb000010 	bl	130808 <igmp_leavegroup_netif>
  1307c4:	e1a03000 	mov	r3, r0
  1307c8:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  1307cc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1307d0:	e3530000 	cmp	r3, #0
  1307d4:	0a000001 	beq	1307e0 <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  1307d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1307dc:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  1307e0:	e51b300c 	ldr	r3, [fp, #-12]
  1307e4:	e5933000 	ldr	r3, [r3]
  1307e8:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1307ec:	e51b300c 	ldr	r3, [fp, #-12]
  1307f0:	e3530000 	cmp	r3, #0
  1307f4:	1affffdc 	bne	13076c <igmp_leavegroup+0xa8>
  }

  return err;
  1307f8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1307fc:	e1a00003 	mov	r0, r3
  130800:	e24bd004 	sub	sp, fp, #4
  130804:	e8bd8800 	pop	{fp, pc}

00130808 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130808:	e92d4800 	push	{fp, lr}
  13080c:	e28db004 	add	fp, sp, #4
  130810:	e24dd010 	sub	sp, sp, #16
  130814:	e50b0010 	str	r0, [fp, #-16]
  130818:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  13081c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130820:	e5933000 	ldr	r3, [r3]
  130824:	e20330f0 	and	r3, r3, #240	; 0xf0
  130828:	e35300e0 	cmp	r3, #224	; 0xe0
  13082c:	0a000008 	beq	130854 <igmp_leavegroup_netif+0x4c>
  130830:	e30904dc 	movw	r0, #38108	; 0x94dc
  130834:	e3400014 	movt	r0, #20
  130838:	ebff4a35 	bl	103114 <rt_kprintf>
  13083c:	e300124a 	movw	r1, #586	; 0x24a
  130840:	e30902a4 	movw	r0, #37540	; 0x92a4
  130844:	e3400014 	movt	r0, #20
  130848:	ebff6951 	bl	10ad94 <sys_arch_assert>
  13084c:	e3e03005 	mvn	r3, #5
  130850:	ea000052 	b	1309a0 <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130858:	e5932000 	ldr	r2, [r3]
  13085c:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130860:	e3403014 	movt	r3, #20
  130864:	e5933000 	ldr	r3, [r3]
  130868:	e1520003 	cmp	r2, r3
  13086c:	1a000008 	bne	130894 <igmp_leavegroup_netif+0x8c>
  130870:	e309051c 	movw	r0, #38172	; 0x951c
  130874:	e3400014 	movt	r0, #20
  130878:	ebff4a25 	bl	103114 <rt_kprintf>
  13087c:	e300124b 	movw	r1, #587	; 0x24b
  130880:	e30902a4 	movw	r0, #37540	; 0x92a4
  130884:	e3400014 	movt	r0, #20
  130888:	ebff6941 	bl	10ad94 <sys_arch_assert>
  13088c:	e3e03005 	mvn	r3, #5
  130890:	ea000042 	b	1309a0 <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130894:	e51b3010 	ldr	r3, [fp, #-16]
  130898:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13089c:	e2033020 	and	r3, r3, #32
  1308a0:	e3530000 	cmp	r3, #0
  1308a4:	1a000008 	bne	1308cc <igmp_leavegroup_netif+0xc4>
  1308a8:	e3090558 	movw	r0, #38232	; 0x9558
  1308ac:	e3400014 	movt	r0, #20
  1308b0:	ebff4a17 	bl	103114 <rt_kprintf>
  1308b4:	e300124e 	movw	r1, #590	; 0x24e
  1308b8:	e30902a4 	movw	r0, #37540	; 0x92a4
  1308bc:	e3400014 	movt	r0, #20
  1308c0:	ebff6933 	bl	10ad94 <sys_arch_assert>
  1308c4:	e3e03005 	mvn	r3, #5
  1308c8:	ea000034 	b	1309a0 <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  1308cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1308d0:	e51b0010 	ldr	r0, [fp, #-16]
  1308d4:	ebfffd37 	bl	12fdb8 <igmp_lookfor_group>
  1308d8:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  1308dc:	e51b3008 	ldr	r3, [fp, #-8]
  1308e0:	e3530000 	cmp	r3, #0
  1308e4:	0a00002c 	beq	13099c <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  1308e8:	e51b3008 	ldr	r3, [fp, #-8]
  1308ec:	e5d3300c 	ldrb	r3, [r3, #12]
  1308f0:	e3530001 	cmp	r3, #1
  1308f4:	8a000020 	bhi	13097c <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  1308f8:	e51b1008 	ldr	r1, [fp, #-8]
  1308fc:	e51b0010 	ldr	r0, [fp, #-16]
  130900:	ebfffda8 	bl	12ffa8 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130904:	e51b3008 	ldr	r3, [fp, #-8]
  130908:	e5d33008 	ldrb	r3, [r3, #8]
  13090c:	e3530000 	cmp	r3, #0
  130910:	0a00000b 	beq	130944 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130914:	e30c3a18 	movw	r3, #51736	; 0xca18
  130918:	e3403015 	movt	r3, #21
  13091c:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  130920:	e2833001 	add	r3, r3, #1
  130924:	e6ff2073 	uxth	r2, r3
  130928:	e30c3a18 	movw	r3, #51736	; 0xca18
  13092c:	e3403015 	movt	r3, #21
  130930:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  130934:	e3a02017 	mov	r2, #23
  130938:	e51b1008 	ldr	r1, [fp, #-8]
  13093c:	e51b0010 	ldr	r0, [fp, #-16]
  130940:	eb0000ce 	bl	130c80 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  130944:	e51b3010 	ldr	r3, [fp, #-16]
  130948:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13094c:	e3530000 	cmp	r3, #0
  130950:	0a000005 	beq	13096c <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  130954:	e51b3010 	ldr	r3, [fp, #-16]
  130958:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13095c:	e3a02000 	mov	r2, #0
  130960:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130964:	e51b0010 	ldr	r0, [fp, #-16]
  130968:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  13096c:	e51b1008 	ldr	r1, [fp, #-8]
  130970:	e3a0000c 	mov	r0, #12
  130974:	ebffa174 	bl	118f4c <memp_free>
  130978:	ea000005 	b	130994 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  13097c:	e51b3008 	ldr	r3, [fp, #-8]
  130980:	e5d3300c 	ldrb	r3, [r3, #12]
  130984:	e2433001 	sub	r3, r3, #1
  130988:	e6ef2073 	uxtb	r2, r3
  13098c:	e51b3008 	ldr	r3, [fp, #-8]
  130990:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130994:	e3a03000 	mov	r3, #0
  130998:	ea000000 	b	1309a0 <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  13099c:	e3e03005 	mvn	r3, #5
  }
}
  1309a0:	e1a00003 	mov	r0, r3
  1309a4:	e24bd004 	sub	sp, fp, #4
  1309a8:	e8bd8800 	pop	{fp, pc}

001309ac <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  1309ac:	e92d4800 	push	{fp, lr}
  1309b0:	e28db004 	add	fp, sp, #4
  1309b4:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  1309b8:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1309bc:	e3403015 	movt	r3, #21
  1309c0:	e5933000 	ldr	r3, [r3]
  1309c4:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  1309c8:	ea00001d 	b	130a44 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  1309cc:	e51b3008 	ldr	r3, [fp, #-8]
  1309d0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1309d4:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  1309d8:	ea000013 	b	130a2c <igmp_tmr+0x80>
      if (group->timer > 0) {
  1309dc:	e51b300c 	ldr	r3, [fp, #-12]
  1309e0:	e1d330ba 	ldrh	r3, [r3, #10]
  1309e4:	e3530000 	cmp	r3, #0
  1309e8:	0a00000c 	beq	130a20 <igmp_tmr+0x74>
        group->timer--;
  1309ec:	e51b300c 	ldr	r3, [fp, #-12]
  1309f0:	e1d330ba 	ldrh	r3, [r3, #10]
  1309f4:	e2433001 	sub	r3, r3, #1
  1309f8:	e6ff2073 	uxth	r2, r3
  1309fc:	e51b300c 	ldr	r3, [fp, #-12]
  130a00:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130a04:	e51b300c 	ldr	r3, [fp, #-12]
  130a08:	e1d330ba 	ldrh	r3, [r3, #10]
  130a0c:	e3530000 	cmp	r3, #0
  130a10:	1a000002 	bne	130a20 <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130a14:	e51b100c 	ldr	r1, [fp, #-12]
  130a18:	e51b0008 	ldr	r0, [fp, #-8]
  130a1c:	eb00000e 	bl	130a5c <igmp_timeout>
        }
      }
      group = group->next;
  130a20:	e51b300c 	ldr	r3, [fp, #-12]
  130a24:	e5933000 	ldr	r3, [r3]
  130a28:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130a2c:	e51b300c 	ldr	r3, [fp, #-12]
  130a30:	e3530000 	cmp	r3, #0
  130a34:	1affffe8 	bne	1309dc <igmp_tmr+0x30>
    }
    netif = netif->next;
  130a38:	e51b3008 	ldr	r3, [fp, #-8]
  130a3c:	e5933000 	ldr	r3, [r3]
  130a40:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130a44:	e51b3008 	ldr	r3, [fp, #-8]
  130a48:	e3530000 	cmp	r3, #0
  130a4c:	1affffde 	bne	1309cc <igmp_tmr+0x20>
  }
}
  130a50:	e320f000 	nop	{0}
  130a54:	e24bd004 	sub	sp, fp, #4
  130a58:	e8bd8800 	pop	{fp, pc}

00130a5c <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130a5c:	e92d4800 	push	{fp, lr}
  130a60:	e28db004 	add	fp, sp, #4
  130a64:	e24dd008 	sub	sp, sp, #8
  130a68:	e50b0008 	str	r0, [fp, #-8]
  130a6c:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130a70:	e51b300c 	ldr	r3, [fp, #-12]
  130a74:	e5d33009 	ldrb	r3, [r3, #9]
  130a78:	e3530001 	cmp	r3, #1
  130a7c:	1a000015 	bne	130ad8 <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130a80:	e51b300c 	ldr	r3, [fp, #-12]
  130a84:	e5932004 	ldr	r2, [r3, #4]
  130a88:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130a8c:	e3403014 	movt	r3, #20
  130a90:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130a94:	e1520003 	cmp	r2, r3
  130a98:	0a00000e 	beq	130ad8 <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130a9c:	e51b300c 	ldr	r3, [fp, #-12]
  130aa0:	e3a02002 	mov	r2, #2
  130aa4:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130aa8:	e30c3a18 	movw	r3, #51736	; 0xca18
  130aac:	e3403015 	movt	r3, #21
  130ab0:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130ab4:	e2833001 	add	r3, r3, #1
  130ab8:	e6ff2073 	uxth	r2, r3
  130abc:	e30c3a18 	movw	r3, #51736	; 0xca18
  130ac0:	e3403015 	movt	r3, #21
  130ac4:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130ac8:	e3a02016 	mov	r2, #22
  130acc:	e51b100c 	ldr	r1, [fp, #-12]
  130ad0:	e51b0008 	ldr	r0, [fp, #-8]
  130ad4:	eb000069 	bl	130c80 <igmp_send>
  }
}
  130ad8:	e320f000 	nop	{0}
  130adc:	e24bd004 	sub	sp, fp, #4
  130ae0:	e8bd8800 	pop	{fp, pc}

00130ae4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130ae4:	e92d4800 	push	{fp, lr}
  130ae8:	e28db004 	add	fp, sp, #4
  130aec:	e24dd008 	sub	sp, sp, #8
  130af0:	e50b0008 	str	r0, [fp, #-8]
  130af4:	e1a03001 	mov	r3, r1
  130af8:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  130afc:	e55b3009 	ldrb	r3, [fp, #-9]
  130b00:	e3530002 	cmp	r3, #2
  130b04:	9a000008 	bls	130b2c <igmp_start_timer+0x48>
  130b08:	eb0034db 	bl	13de7c <rand>
  130b0c:	e1a02000 	mov	r2, r0
  130b10:	e55b3009 	ldrb	r3, [fp, #-9]
  130b14:	e1a01003 	mov	r1, r3
  130b18:	e1a00002 	mov	r0, r2
  130b1c:	eb001f9b 	bl	138990 <__aeabi_idivmod>
  130b20:	e1a03001 	mov	r3, r1
  130b24:	e6ff3073 	uxth	r3, r3
  130b28:	ea000000 	b	130b30 <igmp_start_timer+0x4c>
  130b2c:	e3a03001 	mov	r3, #1
  130b30:	e51b2008 	ldr	r2, [fp, #-8]
  130b34:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130b38:	e51b3008 	ldr	r3, [fp, #-8]
  130b3c:	e1d330ba 	ldrh	r3, [r3, #10]
  130b40:	e3530000 	cmp	r3, #0
  130b44:	1a000002 	bne	130b54 <igmp_start_timer+0x70>
    group->timer = 1;
  130b48:	e51b3008 	ldr	r3, [fp, #-8]
  130b4c:	e3a02001 	mov	r2, #1
  130b50:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130b54:	e320f000 	nop	{0}
  130b58:	e24bd004 	sub	sp, fp, #4
  130b5c:	e8bd8800 	pop	{fp, pc}

00130b60 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130b60:	e92d4800 	push	{fp, lr}
  130b64:	e28db004 	add	fp, sp, #4
  130b68:	e24dd008 	sub	sp, sp, #8
  130b6c:	e50b0008 	str	r0, [fp, #-8]
  130b70:	e1a03001 	mov	r3, r1
  130b74:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130b78:	e51b3008 	ldr	r3, [fp, #-8]
  130b7c:	e5d33009 	ldrb	r3, [r3, #9]
  130b80:	e3530002 	cmp	r3, #2
  130b84:	0a00000d 	beq	130bc0 <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130b88:	e51b3008 	ldr	r3, [fp, #-8]
  130b8c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130b90:	e3530001 	cmp	r3, #1
  130b94:	1a000010 	bne	130bdc <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130b98:	e51b3008 	ldr	r3, [fp, #-8]
  130b9c:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130ba0:	e3530000 	cmp	r3, #0
  130ba4:	0a000005 	beq	130bc0 <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130ba8:	e55b3009 	ldrb	r3, [fp, #-9]
  130bac:	e6ff2073 	uxth	r2, r3
  130bb0:	e51b3008 	ldr	r3, [fp, #-8]
  130bb4:	e1d330ba 	ldrh	r3, [r3, #10]
  130bb8:	e1520003 	cmp	r2, r3
  130bbc:	2a000006 	bcs	130bdc <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130bc0:	e55b3009 	ldrb	r3, [fp, #-9]
  130bc4:	e1a01003 	mov	r1, r3
  130bc8:	e51b0008 	ldr	r0, [fp, #-8]
  130bcc:	ebffffc4 	bl	130ae4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130bd0:	e51b3008 	ldr	r3, [fp, #-8]
  130bd4:	e3a02001 	mov	r2, #1
  130bd8:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130bdc:	e320f000 	nop	{0}
  130be0:	e24bd004 	sub	sp, fp, #4
  130be4:	e8bd8800 	pop	{fp, pc}

00130be8 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130be8:	e92d4800 	push	{fp, lr}
  130bec:	e28db004 	add	fp, sp, #4
  130bf0:	e24dd030 	sub	sp, sp, #48	; 0x30
  130bf4:	e50b0010 	str	r0, [fp, #-16]
  130bf8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130bfc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130c00:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130c04:	e3003494 	movw	r3, #1172	; 0x494
  130c08:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130c0c:	e3a03000 	mov	r3, #0
  130c10:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130c14:	e30c3a18 	movw	r3, #51736	; 0xca18
  130c18:	e3403015 	movt	r3, #21
  130c1c:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130c20:	e2833001 	add	r3, r3, #1
  130c24:	e6ff2073 	uxth	r2, r3
  130c28:	e30c3a18 	movw	r3, #51736	; 0xca18
  130c2c:	e3403015 	movt	r3, #21
  130c30:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130c34:	e3a03004 	mov	r3, #4
  130c38:	e58d3010 	str	r3, [sp, #16]
  130c3c:	e24b3008 	sub	r3, fp, #8
  130c40:	e58d300c 	str	r3, [sp, #12]
  130c44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130c48:	e58d3008 	str	r3, [sp, #8]
  130c4c:	e3a03002 	mov	r3, #2
  130c50:	e58d3004 	str	r3, [sp, #4]
  130c54:	e3a03000 	mov	r3, #0
  130c58:	e58d3000 	str	r3, [sp]
  130c5c:	e3a03001 	mov	r3, #1
  130c60:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130c64:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130c68:	e51b0010 	ldr	r0, [fp, #-16]
  130c6c:	eb000371 	bl	131a38 <ip4_output_if_opt>
  130c70:	e1a03000 	mov	r3, r0
}
  130c74:	e1a00003 	mov	r0, r3
  130c78:	e24bd004 	sub	sp, fp, #4
  130c7c:	e8bd8800 	pop	{fp, pc}

00130c80 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130c80:	e92d4800 	push	{fp, lr}
  130c84:	e28db004 	add	fp, sp, #4
  130c88:	e24dd020 	sub	sp, sp, #32
  130c8c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130c90:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130c94:	e1a03002 	mov	r3, r2
  130c98:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130c9c:	e3a03000 	mov	r3, #0
  130ca0:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130ca4:	e3a03000 	mov	r3, #0
  130ca8:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130cac:	e309363c 	movw	r3, #38460	; 0x963c
  130cb0:	e3403014 	movt	r3, #20
  130cb4:	e5933000 	ldr	r3, [r3]
  130cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130cbc:	e3a03000 	mov	r3, #0
  130cc0:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130cc4:	e3a02000 	mov	r2, #0
  130cc8:	e3a01008 	mov	r1, #8
  130ccc:	e3a00000 	mov	r0, #0
  130cd0:	ebffa4a4 	bl	119f68 <pbuf_alloc>
  130cd4:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  130cd8:	e51b300c 	ldr	r3, [fp, #-12]
  130cdc:	e3530000 	cmp	r3, #0
  130ce0:	0a000049 	beq	130e0c <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  130ce4:	e51b300c 	ldr	r3, [fp, #-12]
  130ce8:	e5933004 	ldr	r3, [r3, #4]
  130cec:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  130cf0:	e51b300c 	ldr	r3, [fp, #-12]
  130cf4:	e1d330ba 	ldrh	r3, [r3, #10]
  130cf8:	e3530007 	cmp	r3, #7
  130cfc:	8a000006 	bhi	130d1c <igmp_send+0x9c>
  130d00:	e3090594 	movw	r0, #38292	; 0x9594
  130d04:	e3400014 	movt	r0, #20
  130d08:	ebff4901 	bl	103114 <rt_kprintf>
  130d0c:	e3001302 	movw	r1, #770	; 0x302
  130d10:	e30902a4 	movw	r0, #37540	; 0x92a4
  130d14:	e3400014 	movt	r0, #20
  130d18:	ebff681d 	bl	10ad94 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  130d1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130d20:	e2833004 	add	r3, r3, #4
  130d24:	e5933000 	ldr	r3, [r3]
  130d28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  130d2c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130d30:	e3530016 	cmp	r3, #22
  130d34:	1a00000a 	bne	130d64 <igmp_send+0xe4>
      dest = &(group->group_address);
  130d38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130d3c:	e2833004 	add	r3, r3, #4
  130d40:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130d44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130d48:	e5932004 	ldr	r2, [r3, #4]
  130d4c:	e51b3010 	ldr	r3, [fp, #-16]
  130d50:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  130d54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130d58:	e3a02001 	mov	r2, #1
  130d5c:	e5c32008 	strb	r2, [r3, #8]
  130d60:	ea000009 	b	130d8c <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  130d64:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130d68:	e3530017 	cmp	r3, #23
  130d6c:	1a000006 	bne	130d8c <igmp_send+0x10c>
        dest = &allrouters;
  130d70:	e30e3bc4 	movw	r3, #60356	; 0xebc4
  130d74:	e3403014 	movt	r3, #20
  130d78:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130d7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130d80:	e5932004 	ldr	r2, [r3, #4]
  130d84:	e51b3010 	ldr	r3, [fp, #-16]
  130d88:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  130d8c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130d90:	e3530016 	cmp	r3, #22
  130d94:	0a000002 	beq	130da4 <igmp_send+0x124>
  130d98:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130d9c:	e3530017 	cmp	r3, #23
  130da0:	1a000016 	bne	130e00 <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  130da4:	e51b3010 	ldr	r3, [fp, #-16]
  130da8:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  130dac:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  130db0:	e51b3010 	ldr	r3, [fp, #-16]
  130db4:	e3a02000 	mov	r2, #0
  130db8:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  130dbc:	e51b3010 	ldr	r3, [fp, #-16]
  130dc0:	e3a02000 	mov	r2, #0
  130dc4:	e5c32002 	strb	r2, [r3, #2]
  130dc8:	e3a02000 	mov	r2, #0
  130dcc:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  130dd0:	e3a01008 	mov	r1, #8
  130dd4:	e51b0010 	ldr	r0, [fp, #-16]
  130dd8:	ebff9e41 	bl	1186e4 <inet_chksum>
  130ddc:	e1a03000 	mov	r3, r0
  130de0:	e1a02003 	mov	r2, r3
  130de4:	e51b3010 	ldr	r3, [fp, #-16]
  130de8:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  130dec:	e24b1014 	sub	r1, fp, #20
  130df0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130df4:	e51b2008 	ldr	r2, [fp, #-8]
  130df8:	e51b000c 	ldr	r0, [fp, #-12]
  130dfc:	ebffff79 	bl	130be8 <igmp_ip_output_if>
    }

    pbuf_free(p);
  130e00:	e51b000c 	ldr	r0, [fp, #-12]
  130e04:	ebffa75e 	bl	11ab84 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  130e08:	ea000007 	b	130e2c <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  130e0c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130e10:	e3403015 	movt	r3, #21
  130e14:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  130e18:	e2833001 	add	r3, r3, #1
  130e1c:	e6ff2073 	uxth	r2, r3
  130e20:	e30c3a18 	movw	r3, #51736	; 0xca18
  130e24:	e3403015 	movt	r3, #21
  130e28:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  130e2c:	e320f000 	nop	{0}
  130e30:	e24bd004 	sub	sp, fp, #4
  130e34:	e8bd8800 	pop	{fp, pc}

00130e38 <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  130e38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130e3c:	e28db000 	add	fp, sp, #0
  130e40:	e24dd00c 	sub	sp, sp, #12
  130e44:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  130e48:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130e4c:	e3403014 	movt	r3, #20
  130e50:	e51b2008 	ldr	r2, [fp, #-8]
  130e54:	e5832000 	str	r2, [r3]
}
  130e58:	e320f000 	nop	{0}
  130e5c:	e28bd000 	add	sp, fp, #0
  130e60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130e64:	e12fff1e 	bx	lr

00130e68 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  130e68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130e6c:	e28db000 	add	fp, sp, #0
  130e70:	e24dd014 	sub	sp, sp, #20
  130e74:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  130e78:	e51b3010 	ldr	r3, [fp, #-16]
  130e7c:	e5933000 	ldr	r3, [r3]
  130e80:	e20330f0 	and	r3, r3, #240	; 0xf0
  130e84:	e35300e0 	cmp	r3, #224	; 0xe0
  130e88:	1a000008 	bne	130eb0 <ip4_route+0x48>
  130e8c:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130e90:	e3403014 	movt	r3, #20
  130e94:	e5933000 	ldr	r3, [r3]
  130e98:	e3530000 	cmp	r3, #0
  130e9c:	0a000003 	beq	130eb0 <ip4_route+0x48>
    return ip4_default_multicast_netif;
  130ea0:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130ea4:	e3403014 	movt	r3, #20
  130ea8:	e5933000 	ldr	r3, [r3]
  130eac:	ea000091 	b	1310f8 <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130eb0:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  130eb4:	e3403015 	movt	r3, #21
  130eb8:	e5933000 	ldr	r3, [r3]
  130ebc:	e50b3008 	str	r3, [fp, #-8]
  130ec0:	ea000030 	b	130f88 <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  130ec4:	e51b3008 	ldr	r3, [fp, #-8]
  130ec8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130ecc:	e2033001 	and	r3, r3, #1
  130ed0:	e6ef3073 	uxtb	r3, r3
  130ed4:	e3530000 	cmp	r3, #0
  130ed8:	0a000027 	beq	130f7c <ip4_route+0x114>
  130edc:	e51b3008 	ldr	r3, [fp, #-8]
  130ee0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130ee4:	e1a03123 	lsr	r3, r3, #2
  130ee8:	e2033001 	and	r3, r3, #1
  130eec:	e6ef3073 	uxtb	r3, r3
  130ef0:	e3530000 	cmp	r3, #0
  130ef4:	0a000020 	beq	130f7c <ip4_route+0x114>
  130ef8:	e51b3008 	ldr	r3, [fp, #-8]
  130efc:	e2833004 	add	r3, r3, #4
  130f00:	e5933000 	ldr	r3, [r3]
  130f04:	e3530000 	cmp	r3, #0
  130f08:	0a00001b 	beq	130f7c <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  130f0c:	e51b3010 	ldr	r3, [fp, #-16]
  130f10:	e5932000 	ldr	r2, [r3]
  130f14:	e51b3008 	ldr	r3, [fp, #-8]
  130f18:	e2833004 	add	r3, r3, #4
  130f1c:	e5933000 	ldr	r3, [r3]
  130f20:	e0222003 	eor	r2, r2, r3
  130f24:	e51b3008 	ldr	r3, [fp, #-8]
  130f28:	e2833008 	add	r3, r3, #8
  130f2c:	e5933000 	ldr	r3, [r3]
  130f30:	e0033002 	and	r3, r3, r2
  130f34:	e3530000 	cmp	r3, #0
  130f38:	1a000001 	bne	130f44 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  130f3c:	e51b3008 	ldr	r3, [fp, #-8]
  130f40:	ea00006c 	b	1310f8 <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  130f44:	e51b3008 	ldr	r3, [fp, #-8]
  130f48:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130f4c:	e2033002 	and	r3, r3, #2
  130f50:	e3530000 	cmp	r3, #0
  130f54:	1a000008 	bne	130f7c <ip4_route+0x114>
  130f58:	e51b3010 	ldr	r3, [fp, #-16]
  130f5c:	e5932000 	ldr	r2, [r3]
  130f60:	e51b3008 	ldr	r3, [fp, #-8]
  130f64:	e283300c 	add	r3, r3, #12
  130f68:	e5933000 	ldr	r3, [r3]
  130f6c:	e1520003 	cmp	r2, r3
  130f70:	1a000001 	bne	130f7c <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  130f74:	e51b3008 	ldr	r3, [fp, #-8]
  130f78:	ea00005e 	b	1310f8 <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130f7c:	e51b3008 	ldr	r3, [fp, #-8]
  130f80:	e5933000 	ldr	r3, [r3]
  130f84:	e50b3008 	str	r3, [fp, #-8]
  130f88:	e51b3008 	ldr	r3, [fp, #-8]
  130f8c:	e3530000 	cmp	r3, #0
  130f90:	1affffcb 	bne	130ec4 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  130f94:	e51b3010 	ldr	r3, [fp, #-16]
  130f98:	e5933000 	ldr	r3, [r3]
  130f9c:	e6ef3073 	uxtb	r3, r3
  130fa0:	e353007f 	cmp	r3, #127	; 0x7f
  130fa4:	1a000025 	bne	131040 <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  130fa8:	e30c3a10 	movw	r3, #51728	; 0xca10
  130fac:	e3403015 	movt	r3, #21
  130fb0:	e5933000 	ldr	r3, [r3]
  130fb4:	e3530000 	cmp	r3, #0
  130fb8:	0a00000b 	beq	130fec <ip4_route+0x184>
  130fbc:	e30c3a10 	movw	r3, #51728	; 0xca10
  130fc0:	e3403015 	movt	r3, #21
  130fc4:	e5933000 	ldr	r3, [r3]
  130fc8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130fcc:	e2033001 	and	r3, r3, #1
  130fd0:	e6ef3073 	uxtb	r3, r3
  130fd4:	e3530000 	cmp	r3, #0
  130fd8:	0a000003 	beq	130fec <ip4_route+0x184>
      return netif_default;
  130fdc:	e30c3a10 	movw	r3, #51728	; 0xca10
  130fe0:	e3403015 	movt	r3, #21
  130fe4:	e5933000 	ldr	r3, [r3]
  130fe8:	ea000042 	b	1310f8 <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  130fec:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  130ff0:	e3403015 	movt	r3, #21
  130ff4:	e5933000 	ldr	r3, [r3]
  130ff8:	e50b3008 	str	r3, [fp, #-8]
  130ffc:	ea00000a 	b	13102c <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  131000:	e51b3008 	ldr	r3, [fp, #-8]
  131004:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131008:	e2033001 	and	r3, r3, #1
  13100c:	e6ef3073 	uxtb	r3, r3
  131010:	e3530000 	cmp	r3, #0
  131014:	0a000001 	beq	131020 <ip4_route+0x1b8>
        return netif;
  131018:	e51b3008 	ldr	r3, [fp, #-8]
  13101c:	ea000035 	b	1310f8 <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  131020:	e51b3008 	ldr	r3, [fp, #-8]
  131024:	e5933000 	ldr	r3, [r3]
  131028:	e50b3008 	str	r3, [fp, #-8]
  13102c:	e51b3008 	ldr	r3, [fp, #-8]
  131030:	e3530000 	cmp	r3, #0
  131034:	1afffff1 	bne	131000 <ip4_route+0x198>
      }
    }
    return NULL;
  131038:	e3a03000 	mov	r3, #0
  13103c:	ea00002d 	b	1310f8 <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  131040:	e30c3a10 	movw	r3, #51728	; 0xca10
  131044:	e3403015 	movt	r3, #21
  131048:	e5933000 	ldr	r3, [r3]
  13104c:	e3530000 	cmp	r3, #0
  131050:	0a000014 	beq	1310a8 <ip4_route+0x240>
  131054:	e30c3a10 	movw	r3, #51728	; 0xca10
  131058:	e3403015 	movt	r3, #21
  13105c:	e5933000 	ldr	r3, [r3]
  131060:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131064:	e2033001 	and	r3, r3, #1
  131068:	e3530000 	cmp	r3, #0
  13106c:	0a00000d 	beq	1310a8 <ip4_route+0x240>
  131070:	e30c3a10 	movw	r3, #51728	; 0xca10
  131074:	e3403015 	movt	r3, #21
  131078:	e5933000 	ldr	r3, [r3]
  13107c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131080:	e2033004 	and	r3, r3, #4
  131084:	e3530000 	cmp	r3, #0
  131088:	0a000006 	beq	1310a8 <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  13108c:	e30c3a10 	movw	r3, #51728	; 0xca10
  131090:	e3403015 	movt	r3, #21
  131094:	e5933000 	ldr	r3, [r3]
  131098:	e2833004 	add	r3, r3, #4
  13109c:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  1310a0:	e3530000 	cmp	r3, #0
  1310a4:	1a000010 	bne	1310ec <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1310a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310ac:	e3403015 	movt	r3, #21
  1310b0:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1310b4:	e2833001 	add	r3, r3, #1
  1310b8:	e6ff2073 	uxth	r2, r3
  1310bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310c0:	e3403015 	movt	r3, #21
  1310c4:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  1310c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310cc:	e3403015 	movt	r3, #21
  1310d0:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  1310d4:	e2832001 	add	r2, r3, #1
  1310d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310dc:	e3403015 	movt	r3, #21
  1310e0:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  1310e4:	e3a03000 	mov	r3, #0
  1310e8:	ea000002 	b	1310f8 <ip4_route+0x290>
  }

  return netif_default;
  1310ec:	e30c3a10 	movw	r3, #51728	; 0xca10
  1310f0:	e3403015 	movt	r3, #21
  1310f4:	e5933000 	ldr	r3, [r3]
}
  1310f8:	e1a00003 	mov	r0, r3
  1310fc:	e28bd000 	add	sp, fp, #0
  131100:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131104:	e12fff1e 	bx	lr

00131108 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  131108:	e92d4800 	push	{fp, lr}
  13110c:	e28db004 	add	fp, sp, #4
  131110:	e24dd028 	sub	sp, sp, #40	; 0x28
  131114:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  131118:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  13111c:	e3a03001 	mov	r3, #1
  131120:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  131124:	e30c3a18 	movw	r3, #51736	; 0xca18
  131128:	e3403015 	movt	r3, #21
  13112c:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  131130:	e2833001 	add	r3, r3, #1
  131134:	e6ff2073 	uxth	r2, r3
  131138:	e30c3a18 	movw	r3, #51736	; 0xca18
  13113c:	e3403015 	movt	r3, #21
  131140:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  131144:	e30c3a18 	movw	r3, #51736	; 0xca18
  131148:	e3403015 	movt	r3, #21
  13114c:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  131150:	e2832001 	add	r2, r3, #1
  131154:	e30c3a18 	movw	r3, #51736	; 0xca18
  131158:	e3403015 	movt	r3, #21
  13115c:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  131160:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131164:	e5933004 	ldr	r3, [r3, #4]
  131168:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  13116c:	e51b3008 	ldr	r3, [fp, #-8]
  131170:	e5d33000 	ldrb	r3, [r3]
  131174:	e1a03223 	lsr	r3, r3, #4
  131178:	e6ef3073 	uxtb	r3, r3
  13117c:	e3530004 	cmp	r3, #4
  131180:	0a00001a 	beq	1311f0 <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  131184:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131188:	ebffa67d 	bl	11ab84 <pbuf_free>
    IP_STATS_INC(ip.err);
  13118c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131190:	e3403015 	movt	r3, #21
  131194:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131198:	e2833001 	add	r3, r3, #1
  13119c:	e6ff2073 	uxth	r2, r3
  1311a0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1311a4:	e3403015 	movt	r3, #21
  1311a8:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  1311ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1311b0:	e3403015 	movt	r3, #21
  1311b4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1311b8:	e2833001 	add	r3, r3, #1
  1311bc:	e6ff2073 	uxth	r2, r3
  1311c0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1311c4:	e3403015 	movt	r3, #21
  1311c8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  1311cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1311d0:	e3403015 	movt	r3, #21
  1311d4:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  1311d8:	e2832001 	add	r2, r3, #1
  1311dc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1311e0:	e3403015 	movt	r3, #21
  1311e4:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  1311e8:	e3a03000 	mov	r3, #0
  1311ec:	ea0001f2 	b	1319bc <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  1311f0:	e51b3008 	ldr	r3, [fp, #-8]
  1311f4:	e5d33000 	ldrb	r3, [r3]
  1311f8:	e6ff3073 	uxth	r3, r3
  1311fc:	e203300f 	and	r3, r3, #15
  131200:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  131204:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131208:	e1a03103 	lsl	r3, r3, #2
  13120c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  131210:	e51b3008 	ldr	r3, [fp, #-8]
  131214:	e1d330b2 	ldrh	r3, [r3, #2]
  131218:	e6ff3073 	uxth	r3, r3
  13121c:	e1a00003 	mov	r0, r3
  131220:	ebff9420 	bl	1162a8 <lwip_htons>
  131224:	e1a03000 	mov	r3, r0
  131228:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  13122c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131230:	e1d330b8 	ldrh	r3, [r3, #8]
  131234:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131238:	e1520003 	cmp	r2, r3
  13123c:	2a000003 	bcs	131250 <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  131240:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  131244:	e1a01003 	mov	r1, r3
  131248:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13124c:	ebffa503 	bl	11a660 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  131250:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131254:	e1d330ba 	ldrh	r3, [r3, #10]
  131258:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  13125c:	e1520003 	cmp	r2, r3
  131260:	8a000007 	bhi	131284 <ip4_input+0x17c>
  131264:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131268:	e1d330b8 	ldrh	r3, [r3, #8]
  13126c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131270:	e1520003 	cmp	r2, r3
  131274:	8a000002 	bhi	131284 <ip4_input+0x17c>
  131278:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  13127c:	e3530013 	cmp	r3, #19
  131280:	8a00001a 	bhi	1312f0 <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  131284:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131288:	ebffa63d 	bl	11ab84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  13128c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131290:	e3403015 	movt	r3, #21
  131294:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  131298:	e2833001 	add	r3, r3, #1
  13129c:	e6ff2073 	uxth	r2, r3
  1312a0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312a4:	e3403015 	movt	r3, #21
  1312a8:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  1312ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312b0:	e3403015 	movt	r3, #21
  1312b4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1312b8:	e2833001 	add	r3, r3, #1
  1312bc:	e6ff2073 	uxth	r2, r3
  1312c0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312c4:	e3403015 	movt	r3, #21
  1312c8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  1312cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312d0:	e3403015 	movt	r3, #21
  1312d4:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1312d8:	e2832001 	add	r2, r3, #1
  1312dc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312e0:	e3403015 	movt	r3, #21
  1312e4:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  1312e8:	e3a03000 	mov	r3, #0
  1312ec:	ea0001b2 	b	1319bc <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  1312f0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1312f4:	e1a01003 	mov	r1, r3
  1312f8:	e51b0008 	ldr	r0, [fp, #-8]
  1312fc:	ebff9cf8 	bl	1186e4 <inet_chksum>
  131300:	e1a03000 	mov	r3, r0
  131304:	e3530000 	cmp	r3, #0
  131308:	0a00001a 	beq	131378 <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  13130c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131310:	ebffa61b 	bl	11ab84 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131314:	e30c3a18 	movw	r3, #51736	; 0xca18
  131318:	e3403015 	movt	r3, #21
  13131c:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  131320:	e2833001 	add	r3, r3, #1
  131324:	e6ff2073 	uxth	r2, r3
  131328:	e30c3a18 	movw	r3, #51736	; 0xca18
  13132c:	e3403015 	movt	r3, #21
  131330:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  131334:	e30c3a18 	movw	r3, #51736	; 0xca18
  131338:	e3403015 	movt	r3, #21
  13133c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131340:	e2833001 	add	r3, r3, #1
  131344:	e6ff2073 	uxth	r2, r3
  131348:	e30c3a18 	movw	r3, #51736	; 0xca18
  13134c:	e3403015 	movt	r3, #21
  131350:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  131354:	e30c3a18 	movw	r3, #51736	; 0xca18
  131358:	e3403015 	movt	r3, #21
  13135c:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131360:	e2832001 	add	r2, r3, #1
  131364:	e30c3a18 	movw	r3, #51736	; 0xca18
  131368:	e3403015 	movt	r3, #21
  13136c:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  131370:	e3a03000 	mov	r3, #0
  131374:	ea000190 	b	1319bc <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  131378:	e51b3008 	ldr	r3, [fp, #-8]
  13137c:	e5932010 	ldr	r2, [r3, #16]
  131380:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131384:	e3403014 	movt	r3, #20
  131388:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  13138c:	e51b3008 	ldr	r3, [fp, #-8]
  131390:	e593200c 	ldr	r2, [r3, #12]
  131394:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131398:	e3403014 	movt	r3, #20
  13139c:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  1313a0:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1313a4:	e3403014 	movt	r3, #20
  1313a8:	e5933014 	ldr	r3, [r3, #20]
  1313ac:	e20330f0 	and	r3, r3, #240	; 0xf0
  1313b0:	e35300e0 	cmp	r3, #224	; 0xe0
  1313b4:	1a000020 	bne	13143c <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  1313b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1313bc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1313c0:	e2033020 	and	r3, r3, #32
  1313c4:	e3530000 	cmp	r3, #0
  1313c8:	0a000018 	beq	131430 <ip4_input+0x328>
  1313cc:	e59f15f4 	ldr	r1, [pc, #1524]	; 1319c8 <ip4_input+0x8c0>
  1313d0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1313d4:	ebfffa77 	bl	12fdb8 <igmp_lookfor_group>
  1313d8:	e1a03000 	mov	r3, r0
  1313dc:	e3530000 	cmp	r3, #0
  1313e0:	0a000012 	beq	131430 <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  1313e4:	e3a030e0 	mov	r3, #224	; 0xe0
  1313e8:	e3403100 	movt	r3, #256	; 0x100
  1313ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  1313f0:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1313f4:	e3403014 	movt	r3, #20
  1313f8:	e5932014 	ldr	r2, [r3, #20]
  1313fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131400:	e1520003 	cmp	r2, r3
  131404:	1a000006 	bne	131424 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  131408:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13140c:	e3403014 	movt	r3, #20
  131410:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131414:	e3530000 	cmp	r3, #0
  131418:	1a000001 	bne	131424 <ip4_input+0x31c>
        check_ip_src = 0;
  13141c:	e3a03000 	mov	r3, #0
  131420:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  131424:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131428:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  13142c:	ea000040 	b	131534 <ip4_input+0x42c>
    } else {
      netif = NULL;
  131430:	e3a03000 	mov	r3, #0
  131434:	e50b300c 	str	r3, [fp, #-12]
  131438:	ea00003d 	b	131534 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  13143c:	e3a03001 	mov	r3, #1
  131440:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  131444:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131448:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  13144c:	e51b300c 	ldr	r3, [fp, #-12]
  131450:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131454:	e2033001 	and	r3, r3, #1
  131458:	e6ef3073 	uxtb	r3, r3
  13145c:	e3530000 	cmp	r3, #0
  131460:	0a00001c 	beq	1314d8 <ip4_input+0x3d0>
  131464:	e51b300c 	ldr	r3, [fp, #-12]
  131468:	e2833004 	add	r3, r3, #4
  13146c:	e5933000 	ldr	r3, [r3]
  131470:	e3530000 	cmp	r3, #0
  131474:	0a000017 	beq	1314d8 <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  131478:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13147c:	e3403014 	movt	r3, #20
  131480:	e5932014 	ldr	r2, [r3, #20]
  131484:	e51b300c 	ldr	r3, [fp, #-12]
  131488:	e2833004 	add	r3, r3, #4
  13148c:	e5933000 	ldr	r3, [r3]
  131490:	e1520003 	cmp	r2, r3
  131494:	0a000026 	beq	131534 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  131498:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13149c:	e3403014 	movt	r3, #20
  1314a0:	e5933014 	ldr	r3, [r3, #20]
  1314a4:	e51b100c 	ldr	r1, [fp, #-12]
  1314a8:	e1a00003 	mov	r0, r3
  1314ac:	eb00034c 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  1314b0:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1314b4:	e3530000 	cmp	r3, #0
  1314b8:	1a00001d 	bne	131534 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  1314bc:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1314c0:	e3403014 	movt	r3, #20
  1314c4:	e5932014 	ldr	r2, [r3, #20]
  1314c8:	e3a0307f 	mov	r3, #127	; 0x7f
  1314cc:	e3403100 	movt	r3, #256	; 0x100
  1314d0:	e1520003 	cmp	r2, r3
  1314d4:	0a000016 	beq	131534 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  1314d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1314dc:	e3530000 	cmp	r3, #0
  1314e0:	0a000006 	beq	131500 <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  1314e4:	e3a03000 	mov	r3, #0
  1314e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  1314ec:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1314f0:	e3403015 	movt	r3, #21
  1314f4:	e5933000 	ldr	r3, [r3]
  1314f8:	e50b300c 	str	r3, [fp, #-12]
  1314fc:	ea000002 	b	13150c <ip4_input+0x404>
      } else {
        netif = netif->next;
  131500:	e51b300c 	ldr	r3, [fp, #-12]
  131504:	e5933000 	ldr	r3, [r3]
  131508:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  13150c:	e51b200c 	ldr	r2, [fp, #-12]
  131510:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131514:	e1520003 	cmp	r2, r3
  131518:	1a000002 	bne	131528 <ip4_input+0x420>
        netif = netif->next;
  13151c:	e51b300c 	ldr	r3, [fp, #-12]
  131520:	e5933000 	ldr	r3, [r3]
  131524:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  131528:	e51b300c 	ldr	r3, [fp, #-12]
  13152c:	e3530000 	cmp	r3, #0
  131530:	1affffc5 	bne	13144c <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  131534:	e51b300c 	ldr	r3, [fp, #-12]
  131538:	e3530000 	cmp	r3, #0
  13153c:	1a000010 	bne	131584 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  131540:	e51b3008 	ldr	r3, [fp, #-8]
  131544:	e5d33009 	ldrb	r3, [r3, #9]
  131548:	e3530011 	cmp	r3, #17
  13154c:	1a00000c 	bne	131584 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  131550:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131554:	e51b2008 	ldr	r2, [fp, #-8]
  131558:	e0823003 	add	r3, r2, r3
  13155c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  131560:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131564:	e1d330b2 	ldrh	r3, [r3, #2]
  131568:	e6ff3073 	uxth	r3, r3
  13156c:	e3530b11 	cmp	r3, #17408	; 0x4400
  131570:	1a000003 	bne	131584 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  131574:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131578:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  13157c:	e3a03000 	mov	r3, #0
  131580:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  131584:	e51b3010 	ldr	r3, [fp, #-16]
  131588:	e3530000 	cmp	r3, #0
  13158c:	0a00002d 	beq	131648 <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  131590:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131594:	e3403014 	movt	r3, #20
  131598:	e5933010 	ldr	r3, [r3, #16]
  13159c:	e3530000 	cmp	r3, #0
  1315a0:	0a000028 	beq	131648 <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1315a4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1315a8:	e3403014 	movt	r3, #20
  1315ac:	e5933010 	ldr	r3, [r3, #16]
  1315b0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1315b4:	e1a00003 	mov	r0, r3
  1315b8:	eb000309 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  1315bc:	e1a03000 	mov	r3, r0
  1315c0:	e3530000 	cmp	r3, #0
  1315c4:	1a000005 	bne	1315e0 <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  1315c8:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1315cc:	e3403014 	movt	r3, #20
  1315d0:	e5933010 	ldr	r3, [r3, #16]
  1315d4:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1315d8:	e35300e0 	cmp	r3, #224	; 0xe0
  1315dc:	1a000019 	bne	131648 <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  1315e0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1315e4:	ebffa566 	bl	11ab84 <pbuf_free>
      IP_STATS_INC(ip.drop);
  1315e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1315ec:	e3403015 	movt	r3, #21
  1315f0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1315f4:	e2833001 	add	r3, r3, #1
  1315f8:	e6ff2073 	uxth	r2, r3
  1315fc:	e30c3a18 	movw	r3, #51736	; 0xca18
  131600:	e3403015 	movt	r3, #21
  131604:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131608:	e30c3a18 	movw	r3, #51736	; 0xca18
  13160c:	e3403015 	movt	r3, #21
  131610:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131614:	e2832001 	add	r2, r3, #1
  131618:	e30c3a18 	movw	r3, #51736	; 0xca18
  13161c:	e3403015 	movt	r3, #21
  131620:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131624:	e30c3a18 	movw	r3, #51736	; 0xca18
  131628:	e3403015 	movt	r3, #21
  13162c:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131630:	e2832001 	add	r2, r3, #1
  131634:	e30c3a18 	movw	r3, #51736	; 0xca18
  131638:	e3403015 	movt	r3, #21
  13163c:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  131640:	e3a03000 	mov	r3, #0
  131644:	ea0000dc 	b	1319bc <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  131648:	e51b300c 	ldr	r3, [fp, #-12]
  13164c:	e3530000 	cmp	r3, #0
  131650:	1a000019 	bne	1316bc <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  131654:	e30c3a18 	movw	r3, #51736	; 0xca18
  131658:	e3403015 	movt	r3, #21
  13165c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131660:	e2833001 	add	r3, r3, #1
  131664:	e6ff2073 	uxth	r2, r3
  131668:	e30c3a18 	movw	r3, #51736	; 0xca18
  13166c:	e3403015 	movt	r3, #21
  131670:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131674:	e30c3a18 	movw	r3, #51736	; 0xca18
  131678:	e3403015 	movt	r3, #21
  13167c:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131680:	e2832001 	add	r2, r3, #1
  131684:	e30c3a18 	movw	r3, #51736	; 0xca18
  131688:	e3403015 	movt	r3, #21
  13168c:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131690:	e30c3a18 	movw	r3, #51736	; 0xca18
  131694:	e3403015 	movt	r3, #21
  131698:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  13169c:	e2832001 	add	r2, r3, #1
  1316a0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1316a4:	e3403015 	movt	r3, #21
  1316a8:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  1316ac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1316b0:	ebffa533 	bl	11ab84 <pbuf_free>
    return ERR_OK;
  1316b4:	e3a03000 	mov	r3, #0
  1316b8:	ea0000bf 	b	1319bc <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  1316bc:	e51b3008 	ldr	r3, [fp, #-8]
  1316c0:	e1d330b6 	ldrh	r3, [r3, #6]
  1316c4:	e6ff3073 	uxth	r3, r3
  1316c8:	e1a02003 	mov	r2, r3
  1316cc:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  1316d0:	e0033002 	and	r3, r3, r2
  1316d4:	e3530000 	cmp	r3, #0
  1316d8:	0a00000a 	beq	131708 <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  1316dc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1316e0:	eb000778 	bl	1334c8 <ip4_reass>
  1316e4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  1316e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1316ec:	e3530000 	cmp	r3, #0
  1316f0:	1a000001 	bne	1316fc <ip4_input+0x5f4>
      return ERR_OK;
  1316f4:	e3a03000 	mov	r3, #0
  1316f8:	ea0000af 	b	1319bc <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  1316fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131700:	e5933004 	ldr	r3, [r3, #4]
  131704:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  131708:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13170c:	e3403014 	movt	r3, #20
  131710:	e51b200c 	ldr	r2, [fp, #-12]
  131714:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  131718:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13171c:	e3403014 	movt	r3, #20
  131720:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  131724:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  131728:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13172c:	e3403014 	movt	r3, #20
  131730:	e51b2008 	ldr	r2, [fp, #-8]
  131734:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  131738:	e51b3008 	ldr	r3, [fp, #-8]
  13173c:	e5d33000 	ldrb	r3, [r3]
  131740:	e6ff3073 	uxth	r3, r3
  131744:	e203300f 	and	r3, r3, #15
  131748:	e6ff3073 	uxth	r3, r3
  13174c:	e1a03103 	lsl	r3, r3, #2
  131750:	e6ff2073 	uxth	r2, r3
  131754:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131758:	e3403014 	movt	r3, #20
  13175c:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  131760:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131764:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131768:	ebffa9cf 	bl	11beac <raw_input>
  13176c:	e1a03000 	mov	r3, r0
  131770:	e3530000 	cmp	r3, #0
  131774:	1a000076 	bne	131954 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  131778:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  13177c:	e2633000 	rsb	r3, r3, #0
  131780:	e6ff3073 	uxth	r3, r3
  131784:	e6bf3073 	sxth	r3, r3
  131788:	e1a01003 	mov	r1, r3
  13178c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131790:	ebffa4dd 	bl	11ab0c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131794:	e51b3008 	ldr	r3, [fp, #-8]
  131798:	e5d33009 	ldrb	r3, [r3, #9]
  13179c:	e2433001 	sub	r3, r3, #1
  1317a0:	e3530010 	cmp	r3, #16
  1317a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1317a8:	ea000036 	b	131888 <ip4_input+0x780>
  1317ac:	00131848 	.word	0x00131848
  1317b0:	00131874 	.word	0x00131874
  1317b4:	00131888 	.word	0x00131888
  1317b8:	00131888 	.word	0x00131888
  1317bc:	00131888 	.word	0x00131888
  1317c0:	0013181c 	.word	0x0013181c
  1317c4:	00131888 	.word	0x00131888
  1317c8:	00131888 	.word	0x00131888
  1317cc:	00131888 	.word	0x00131888
  1317d0:	00131888 	.word	0x00131888
  1317d4:	00131888 	.word	0x00131888
  1317d8:	00131888 	.word	0x00131888
  1317dc:	00131888 	.word	0x00131888
  1317e0:	00131888 	.word	0x00131888
  1317e4:	00131888 	.word	0x00131888
  1317e8:	00131888 	.word	0x00131888
  1317ec:	001317f0 	.word	0x001317f0
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  1317f0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1317f4:	e3403015 	movt	r3, #21
  1317f8:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  1317fc:	e2832001 	add	r2, r3, #1
  131800:	e30c3a18 	movw	r3, #51736	; 0xca18
  131804:	e3403015 	movt	r3, #21
  131808:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  13180c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131810:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131814:	ebffd80c 	bl	12784c <udp_input>
      break;
  131818:	ea00004e 	b	131958 <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  13181c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131820:	e3403015 	movt	r3, #21
  131824:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131828:	e2832001 	add	r2, r3, #1
  13182c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131830:	e3403015 	movt	r3, #21
  131834:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  131838:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  13183c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131840:	ebffb9c8 	bl	11ff68 <tcp_input>
      break;
  131844:	ea000043 	b	131958 <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131848:	e30c3a18 	movw	r3, #51736	; 0xca18
  13184c:	e3403015 	movt	r3, #21
  131850:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131854:	e2832001 	add	r2, r3, #1
  131858:	e30c3a18 	movw	r3, #51736	; 0xca18
  13185c:	e3403015 	movt	r3, #21
  131860:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  131864:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131868:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13186c:	ebfff665 	bl	12f208 <icmp_input>
      break;
  131870:	ea000038 	b	131958 <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  131874:	e59f214c 	ldr	r2, [pc, #332]	; 1319c8 <ip4_input+0x8c0>
  131878:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  13187c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131880:	ebfff9ed 	bl	13003c <igmp_input>
      break;
  131884:	ea000033 	b	131958 <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131888:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13188c:	e3403014 	movt	r3, #20
  131890:	e5933014 	ldr	r3, [r3, #20]
  131894:	e51b100c 	ldr	r1, [fp, #-12]
  131898:	e1a00003 	mov	r0, r3
  13189c:	eb000250 	bl	1321e4 <ip4_addr_isbroadcast_u32>
  1318a0:	e1a03000 	mov	r3, r0
  1318a4:	e3530000 	cmp	r3, #0
  1318a8:	1a00000f 	bne	1318ec <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  1318ac:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1318b0:	e3403014 	movt	r3, #20
  1318b4:	e5933014 	ldr	r3, [r3, #20]
  1318b8:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  1318bc:	e35300e0 	cmp	r3, #224	; 0xe0
  1318c0:	0a000009 	beq	1318ec <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  1318c4:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  1318c8:	e1a01003 	mov	r1, r3
  1318cc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1318d0:	ebffa49c 	bl	11ab48 <pbuf_header_force>
        p->payload = iphdr;
  1318d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1318d8:	e51b2008 	ldr	r2, [fp, #-8]
  1318dc:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  1318e0:	e3a01002 	mov	r1, #2
  1318e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1318e8:	ebfff81c 	bl	12f960 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  1318ec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1318f0:	ebffa4a3 	bl	11ab84 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  1318f4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1318f8:	e3403015 	movt	r3, #21
  1318fc:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131900:	e2833001 	add	r3, r3, #1
  131904:	e6ff2073 	uxth	r2, r3
  131908:	e30c3a18 	movw	r3, #51736	; 0xca18
  13190c:	e3403015 	movt	r3, #21
  131910:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131914:	e30c3a18 	movw	r3, #51736	; 0xca18
  131918:	e3403015 	movt	r3, #21
  13191c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131920:	e2833001 	add	r3, r3, #1
  131924:	e6ff2073 	uxth	r2, r3
  131928:	e30c3a18 	movw	r3, #51736	; 0xca18
  13192c:	e3403015 	movt	r3, #21
  131930:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  131934:	e30c3a18 	movw	r3, #51736	; 0xca18
  131938:	e3403015 	movt	r3, #21
  13193c:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  131940:	e2832001 	add	r2, r3, #1
  131944:	e30c3a18 	movw	r3, #51736	; 0xca18
  131948:	e3403015 	movt	r3, #21
  13194c:	e5832134 	str	r2, [r3, #308]	; 0x134
  131950:	ea000000 	b	131958 <ip4_input+0x850>
    }
  }
  131954:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  131958:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13195c:	e3403014 	movt	r3, #20
  131960:	e3a02000 	mov	r2, #0
  131964:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  131968:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13196c:	e3403014 	movt	r3, #20
  131970:	e3a02000 	mov	r2, #0
  131974:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  131978:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13197c:	e3403014 	movt	r3, #20
  131980:	e3a02000 	mov	r2, #0
  131984:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  131988:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13198c:	e3403014 	movt	r3, #20
  131990:	e3a02000 	mov	r2, #0
  131994:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  131998:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13199c:	e3403014 	movt	r3, #20
  1319a0:	e3a02000 	mov	r2, #0
  1319a4:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  1319a8:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1319ac:	e3403014 	movt	r3, #20
  1319b0:	e3a02000 	mov	r2, #0
  1319b4:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  1319b8:	e3a03000 	mov	r3, #0
}
  1319bc:	e1a00003 	mov	r0, r3
  1319c0:	e24bd004 	sub	sp, fp, #4
  1319c4:	e8bd8800 	pop	{fp, pc}
  1319c8:	0014f5f4 	.word	0x0014f5f4

001319cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  1319cc:	e92d4800 	push	{fp, lr}
  1319d0:	e28db004 	add	fp, sp, #4
  1319d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1319d8:	e50b0008 	str	r0, [fp, #-8]
  1319dc:	e50b100c 	str	r1, [fp, #-12]
  1319e0:	e50b2010 	str	r2, [fp, #-16]
  1319e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  1319e8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1319ec:	e3a03000 	mov	r3, #0
  1319f0:	e58d3010 	str	r3, [sp, #16]
  1319f4:	e3a03000 	mov	r3, #0
  1319f8:	e58d300c 	str	r3, [sp, #12]
  1319fc:	e59b300c 	ldr	r3, [fp, #12]
  131a00:	e58d3008 	str	r3, [sp, #8]
  131a04:	e5db3008 	ldrb	r3, [fp, #8]
  131a08:	e58d3004 	str	r3, [sp, #4]
  131a0c:	e5db3004 	ldrb	r3, [fp, #4]
  131a10:	e58d3000 	str	r3, [sp]
  131a14:	e1a03002 	mov	r3, r2
  131a18:	e51b2010 	ldr	r2, [fp, #-16]
  131a1c:	e51b100c 	ldr	r1, [fp, #-12]
  131a20:	e51b0008 	ldr	r0, [fp, #-8]
  131a24:	eb000003 	bl	131a38 <ip4_output_if_opt>
  131a28:	e1a03000 	mov	r3, r0
}
  131a2c:	e1a00003 	mov	r0, r3
  131a30:	e24bd004 	sub	sp, fp, #4
  131a34:	e8bd8800 	pop	{fp, pc}

00131a38 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131a38:	e92d4800 	push	{fp, lr}
  131a3c:	e28db004 	add	fp, sp, #4
  131a40:	e24dd030 	sub	sp, sp, #48	; 0x30
  131a44:	e50b0010 	str	r0, [fp, #-16]
  131a48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131a4c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131a50:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131a54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131a58:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131a5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131a60:	e3530000 	cmp	r3, #0
  131a64:	0a000009 	beq	131a90 <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  131a68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131a6c:	e3530000 	cmp	r3, #0
  131a70:	0a000003 	beq	131a84 <ip4_output_if_opt+0x4c>
  131a74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131a78:	e5933000 	ldr	r3, [r3]
  131a7c:	e3530000 	cmp	r3, #0
  131a80:	1a000002 	bne	131a90 <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131a84:	e59b300c 	ldr	r3, [fp, #12]
  131a88:	e2833004 	add	r3, r3, #4
  131a8c:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131a90:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131a94:	e1db31b4 	ldrh	r3, [fp, #20]
  131a98:	e58d3010 	str	r3, [sp, #16]
  131a9c:	e59b3010 	ldr	r3, [fp, #16]
  131aa0:	e58d300c 	str	r3, [sp, #12]
  131aa4:	e59b300c 	ldr	r3, [fp, #12]
  131aa8:	e58d3008 	str	r3, [sp, #8]
  131aac:	e5db3008 	ldrb	r3, [fp, #8]
  131ab0:	e58d3004 	str	r3, [sp, #4]
  131ab4:	e5db3004 	ldrb	r3, [fp, #4]
  131ab8:	e58d3000 	str	r3, [sp]
  131abc:	e1a03002 	mov	r3, r2
  131ac0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131ac4:	e51b1008 	ldr	r1, [fp, #-8]
  131ac8:	e51b0010 	ldr	r0, [fp, #-16]
  131acc:	eb00001e 	bl	131b4c <ip4_output_if_opt_src>
  131ad0:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131ad4:	e1a00003 	mov	r0, r3
  131ad8:	e24bd004 	sub	sp, fp, #4
  131adc:	e8bd8800 	pop	{fp, pc}

00131ae0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131ae0:	e92d4800 	push	{fp, lr}
  131ae4:	e28db004 	add	fp, sp, #4
  131ae8:	e24dd028 	sub	sp, sp, #40	; 0x28
  131aec:	e50b0008 	str	r0, [fp, #-8]
  131af0:	e50b100c 	str	r1, [fp, #-12]
  131af4:	e50b2010 	str	r2, [fp, #-16]
  131af8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131afc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131b00:	e3a03000 	mov	r3, #0
  131b04:	e58d3010 	str	r3, [sp, #16]
  131b08:	e3a03000 	mov	r3, #0
  131b0c:	e58d300c 	str	r3, [sp, #12]
  131b10:	e59b300c 	ldr	r3, [fp, #12]
  131b14:	e58d3008 	str	r3, [sp, #8]
  131b18:	e5db3008 	ldrb	r3, [fp, #8]
  131b1c:	e58d3004 	str	r3, [sp, #4]
  131b20:	e5db3004 	ldrb	r3, [fp, #4]
  131b24:	e58d3000 	str	r3, [sp]
  131b28:	e1a03002 	mov	r3, r2
  131b2c:	e51b2010 	ldr	r2, [fp, #-16]
  131b30:	e51b100c 	ldr	r1, [fp, #-12]
  131b34:	e51b0008 	ldr	r0, [fp, #-8]
  131b38:	eb000003 	bl	131b4c <ip4_output_if_opt_src>
  131b3c:	e1a03000 	mov	r3, r0
}
  131b40:	e1a00003 	mov	r0, r3
  131b44:	e24bd004 	sub	sp, fp, #4
  131b48:	e8bd8800 	pop	{fp, pc}

00131b4c <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131b4c:	e92d4800 	push	{fp, lr}
  131b50:	e28db004 	add	fp, sp, #4
  131b54:	e24dd028 	sub	sp, sp, #40	; 0x28
  131b58:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131b5c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131b60:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131b64:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131b68:	e3a03000 	mov	r3, #0
  131b6c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131b70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131b74:	e1d330be 	ldrh	r3, [r3, #14]
  131b78:	e3530001 	cmp	r3, #1
  131b7c:	0a000006 	beq	131b9c <ip4_output_if_opt_src+0x50>
  131b80:	e30905d0 	movw	r0, #38352	; 0x95d0
  131b84:	e3400014 	movt	r0, #20
  131b88:	ebff4561 	bl	103114 <rt_kprintf>
  131b8c:	e3001333 	movw	r1, #819	; 0x333
  131b90:	e30905dc 	movw	r0, #38364	; 0x95dc
  131b94:	e3400014 	movt	r0, #20
  131b98:	ebff647d 	bl	10ad94 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131b9c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131ba0:	e3403015 	movt	r3, #21
  131ba4:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131ba8:	e2832001 	add	r2, r3, #1
  131bac:	e30c3a18 	movw	r3, #51736	; 0xca18
  131bb0:	e3403015 	movt	r3, #21
  131bb4:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131bb8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131bbc:	e3530000 	cmp	r3, #0
  131bc0:	0a000112 	beq	132010 <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131bc4:	e3a03014 	mov	r3, #20
  131bc8:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131bcc:	e3a03000 	mov	r3, #0
  131bd0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131bd4:	e1db31b4 	ldrh	r3, [fp, #20]
  131bd8:	e3530000 	cmp	r3, #0
  131bdc:	0a00004b 	beq	131d10 <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131be0:	e1db31b4 	ldrh	r3, [fp, #20]
  131be4:	e2833003 	add	r3, r3, #3
  131be8:	e6ff3073 	uxth	r3, r3
  131bec:	e3c33003 	bic	r3, r3, #3
  131bf0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131bf4:	e15b20ba 	ldrh	r2, [fp, #-10]
  131bf8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131bfc:	e0823003 	add	r3, r2, r3
  131c00:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131c04:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131c08:	e1a01003 	mov	r1, r3
  131c0c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131c10:	ebffa3bd 	bl	11ab0c <pbuf_header>
  131c14:	e1a03000 	mov	r3, r0
  131c18:	e3530000 	cmp	r3, #0
  131c1c:	0a000010 	beq	131c64 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131c20:	e30c3a18 	movw	r3, #51736	; 0xca18
  131c24:	e3403015 	movt	r3, #21
  131c28:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131c2c:	e2833001 	add	r3, r3, #1
  131c30:	e6ff2073 	uxth	r2, r3
  131c34:	e30c3a18 	movw	r3, #51736	; 0xca18
  131c38:	e3403015 	movt	r3, #21
  131c3c:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131c40:	e30c3a18 	movw	r3, #51736	; 0xca18
  131c44:	e3403015 	movt	r3, #21
  131c48:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131c4c:	e2832001 	add	r2, r3, #1
  131c50:	e30c3a18 	movw	r3, #51736	; 0xca18
  131c54:	e3403015 	movt	r3, #21
  131c58:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131c5c:	e3e03001 	mvn	r3, #1
  131c60:	ea00012a 	b	132110 <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131c64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131c68:	e5933004 	ldr	r3, [r3, #4]
  131c6c:	e1db21b4 	ldrh	r2, [fp, #20]
  131c70:	e59b1010 	ldr	r1, [fp, #16]
  131c74:	e1a00003 	mov	r0, r3
  131c78:	eb003b81 	bl	140a84 <memcpy>
      if (optlen < optlen_aligned) {
  131c7c:	e1db21b4 	ldrh	r2, [fp, #20]
  131c80:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131c84:	e1520003 	cmp	r2, r3
  131c88:	2a000009 	bcs	131cb4 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131c8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131c90:	e5932004 	ldr	r2, [r3, #4]
  131c94:	e1db31b4 	ldrh	r3, [fp, #20]
  131c98:	e0820003 	add	r0, r2, r3
  131c9c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131ca0:	e1db31b4 	ldrh	r3, [fp, #20]
  131ca4:	e0423003 	sub	r3, r2, r3
  131ca8:	e1a02003 	mov	r2, r3
  131cac:	e3a01000 	mov	r1, #0
  131cb0:	eb003cab 	bl	140f64 <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131cb4:	e3a03000 	mov	r3, #0
  131cb8:	e50b3010 	str	r3, [fp, #-16]
  131cbc:	ea00000c 	b	131cf4 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131cc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131cc4:	e5932004 	ldr	r2, [r3, #4]
  131cc8:	e51b3010 	ldr	r3, [fp, #-16]
  131ccc:	e1a03083 	lsl	r3, r3, #1
  131cd0:	e0823003 	add	r3, r2, r3
  131cd4:	e1d330b0 	ldrh	r3, [r3]
  131cd8:	e1a02003 	mov	r2, r3
  131cdc:	e51b3008 	ldr	r3, [fp, #-8]
  131ce0:	e0833002 	add	r3, r3, r2
  131ce4:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  131ce8:	e51b3010 	ldr	r3, [fp, #-16]
  131cec:	e2833001 	add	r3, r3, #1
  131cf0:	e50b3010 	str	r3, [fp, #-16]
  131cf4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131cf8:	e1a030a3 	lsr	r3, r3, #1
  131cfc:	e6ff3073 	uxth	r3, r3
  131d00:	e1a02003 	mov	r2, r3
  131d04:	e51b3010 	ldr	r3, [fp, #-16]
  131d08:	e1530002 	cmp	r3, r2
  131d0c:	baffffeb 	blt	131cc0 <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  131d10:	e3a01014 	mov	r1, #20
  131d14:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131d18:	ebffa37b 	bl	11ab0c <pbuf_header>
  131d1c:	e1a03000 	mov	r3, r0
  131d20:	e3530000 	cmp	r3, #0
  131d24:	0a000010 	beq	131d6c <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  131d28:	e30c3a18 	movw	r3, #51736	; 0xca18
  131d2c:	e3403015 	movt	r3, #21
  131d30:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131d34:	e2833001 	add	r3, r3, #1
  131d38:	e6ff2073 	uxth	r2, r3
  131d3c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131d40:	e3403015 	movt	r3, #21
  131d44:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  131d48:	e30c3a18 	movw	r3, #51736	; 0xca18
  131d4c:	e3403015 	movt	r3, #21
  131d50:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131d54:	e2832001 	add	r2, r3, #1
  131d58:	e30c3a18 	movw	r3, #51736	; 0xca18
  131d5c:	e3403015 	movt	r3, #21
  131d60:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  131d64:	e3e03001 	mvn	r3, #1
  131d68:	ea0000e8 	b	132110 <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  131d6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131d70:	e5933004 	ldr	r3, [r3, #4]
  131d74:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  131d78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131d7c:	e1d330ba 	ldrh	r3, [r3, #10]
  131d80:	e3530013 	cmp	r3, #19
  131d84:	8a000006 	bhi	131da4 <ip4_output_if_opt_src+0x258>
  131d88:	e309060c 	movw	r0, #38412	; 0x960c
  131d8c:	e3400014 	movt	r0, #20
  131d90:	ebff44df 	bl	103114 <rt_kprintf>
  131d94:	e3001361 	movw	r1, #865	; 0x361
  131d98:	e30905dc 	movw	r0, #38364	; 0x95dc
  131d9c:	e3400014 	movt	r0, #20
  131da0:	ebff63fb 	bl	10ad94 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  131da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131da8:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  131dac:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  131db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131db4:	e5db2008 	ldrb	r2, [fp, #8]
  131db8:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  131dbc:	e5db2008 	ldrb	r2, [fp, #8]
  131dc0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131dc4:	e1a03403 	lsl	r3, r3, #8
  131dc8:	e1823003 	orr	r3, r2, r3
  131dcc:	e1a03403 	lsl	r3, r3, #8
  131dd0:	e6ff2073 	uxth	r2, r3
  131dd4:	e5db1008 	ldrb	r1, [fp, #8]
  131dd8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131ddc:	e1a03403 	lsl	r3, r3, #8
  131de0:	e1813003 	orr	r3, r1, r3
  131de4:	e1a03423 	lsr	r3, r3, #8
  131de8:	e6ef3073 	uxtb	r3, r3
  131dec:	e1823003 	orr	r3, r2, r3
  131df0:	e51b2008 	ldr	r2, [fp, #-8]
  131df4:	e0823003 	add	r3, r2, r3
  131df8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  131dfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131e00:	e5932000 	ldr	r2, [r3]
  131e04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e08:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  131e0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e10:	e5933010 	ldr	r3, [r3, #16]
  131e14:	e6ff3073 	uxth	r3, r3
  131e18:	e51b2008 	ldr	r2, [fp, #-8]
  131e1c:	e0823003 	add	r3, r2, r3
  131e20:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  131e24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e28:	e5933010 	ldr	r3, [r3, #16]
  131e2c:	e1a03823 	lsr	r3, r3, #16
  131e30:	e51b2008 	ldr	r2, [fp, #-8]
  131e34:	e0823003 	add	r3, r2, r3
  131e38:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  131e3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  131e40:	e1a03123 	lsr	r3, r3, #2
  131e44:	e6ff3073 	uxth	r3, r3
  131e48:	e6ef3073 	uxtb	r3, r3
  131e4c:	e3833040 	orr	r3, r3, #64	; 0x40
  131e50:	e6ef2073 	uxtb	r2, r3
  131e54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e58:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  131e5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e60:	e5db2004 	ldrb	r2, [fp, #4]
  131e64:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  131e68:	e5db2004 	ldrb	r2, [fp, #4]
  131e6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e70:	e5d33000 	ldrb	r3, [r3]
  131e74:	e1a03403 	lsl	r3, r3, #8
  131e78:	e1823003 	orr	r3, r2, r3
  131e7c:	e1a03403 	lsl	r3, r3, #8
  131e80:	e6ff2073 	uxth	r2, r3
  131e84:	e5db1004 	ldrb	r1, [fp, #4]
  131e88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e8c:	e5d33000 	ldrb	r3, [r3]
  131e90:	e1a03403 	lsl	r3, r3, #8
  131e94:	e1813003 	orr	r3, r1, r3
  131e98:	e1a03423 	lsr	r3, r3, #8
  131e9c:	e6ef3073 	uxtb	r3, r3
  131ea0:	e1823003 	orr	r3, r2, r3
  131ea4:	e51b2008 	ldr	r2, [fp, #-8]
  131ea8:	e0823003 	add	r3, r2, r3
  131eac:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  131eb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131eb4:	e1d330b8 	ldrh	r3, [r3, #8]
  131eb8:	e1a00003 	mov	r0, r3
  131ebc:	ebff90f9 	bl	1162a8 <lwip_htons>
  131ec0:	e1a03000 	mov	r3, r0
  131ec4:	e1a02003 	mov	r2, r3
  131ec8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ecc:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  131ed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ed4:	e1d330b2 	ldrh	r3, [r3, #2]
  131ed8:	e6ff3073 	uxth	r3, r3
  131edc:	e1a02003 	mov	r2, r3
  131ee0:	e51b3008 	ldr	r3, [fp, #-8]
  131ee4:	e0833002 	add	r3, r3, r2
  131ee8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  131eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ef0:	e3a02000 	mov	r2, #0
  131ef4:	e5c32006 	strb	r2, [r3, #6]
  131ef8:	e3a02000 	mov	r2, #0
  131efc:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  131f00:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131f04:	e3403014 	movt	r3, #20
  131f08:	e1d330b0 	ldrh	r3, [r3]
  131f0c:	e1a00003 	mov	r0, r3
  131f10:	ebff90e4 	bl	1162a8 <lwip_htons>
  131f14:	e1a03000 	mov	r3, r0
  131f18:	e1a02003 	mov	r2, r3
  131f1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f20:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  131f24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f28:	e1d330b4 	ldrh	r3, [r3, #4]
  131f2c:	e6ff3073 	uxth	r3, r3
  131f30:	e1a02003 	mov	r2, r3
  131f34:	e51b3008 	ldr	r3, [fp, #-8]
  131f38:	e0833002 	add	r3, r3, r2
  131f3c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  131f40:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131f44:	e3403014 	movt	r3, #20
  131f48:	e1d330b0 	ldrh	r3, [r3]
  131f4c:	e2833001 	add	r3, r3, #1
  131f50:	e6ff2073 	uxth	r2, r3
  131f54:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131f58:	e3403014 	movt	r3, #20
  131f5c:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  131f60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131f64:	e3530000 	cmp	r3, #0
  131f68:	1a000005 	bne	131f84 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  131f6c:	e309363c 	movw	r3, #38460	; 0x963c
  131f70:	e3403014 	movt	r3, #20
  131f74:	e5932000 	ldr	r2, [r3]
  131f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f7c:	e583200c 	str	r2, [r3, #12]
  131f80:	ea000003 	b	131f94 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  131f84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131f88:	e5932000 	ldr	r2, [r3]
  131f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f90:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  131f94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f98:	e593300c 	ldr	r3, [r3, #12]
  131f9c:	e6ff3073 	uxth	r3, r3
  131fa0:	e51b2008 	ldr	r2, [fp, #-8]
  131fa4:	e0823003 	add	r3, r2, r3
  131fa8:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  131fac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131fb0:	e593300c 	ldr	r3, [r3, #12]
  131fb4:	e1a03823 	lsr	r3, r3, #16
  131fb8:	e51b2008 	ldr	r2, [fp, #-8]
  131fbc:	e0823003 	add	r3, r2, r3
  131fc0:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  131fc4:	e51b3008 	ldr	r3, [fp, #-8]
  131fc8:	e1a02823 	lsr	r2, r3, #16
  131fcc:	e51b3008 	ldr	r3, [fp, #-8]
  131fd0:	e6ff3073 	uxth	r3, r3
  131fd4:	e0823003 	add	r3, r2, r3
  131fd8:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  131fdc:	e51b3008 	ldr	r3, [fp, #-8]
  131fe0:	e1a03823 	lsr	r3, r3, #16
  131fe4:	e51b2008 	ldr	r2, [fp, #-8]
  131fe8:	e0823003 	add	r3, r2, r3
  131fec:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  131ff0:	e51b3008 	ldr	r3, [fp, #-8]
  131ff4:	e1e03003 	mvn	r3, r3
  131ff8:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  131ffc:	e51b3008 	ldr	r3, [fp, #-8]
  132000:	e6ff2073 	uxth	r2, r3
  132004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132008:	e1c320ba 	strh	r2, [r3, #10]
  13200c:	ea000007 	b	132030 <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  132010:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132014:	e5933004 	ldr	r3, [r3, #4]
  132018:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  13201c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132020:	e5933010 	ldr	r3, [r3, #16]
  132024:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  132028:	e24b301c 	sub	r3, fp, #28
  13202c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  132030:	e30c3a18 	movw	r3, #51736	; 0xca18
  132034:	e3403015 	movt	r3, #21
  132038:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  13203c:	e2833001 	add	r3, r3, #1
  132040:	e6ff2073 	uxth	r2, r3
  132044:	e30c3a18 	movw	r3, #51736	; 0xca18
  132048:	e3403015 	movt	r3, #21
  13204c:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  132050:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132054:	e5932000 	ldr	r2, [r3]
  132058:	e59b300c 	ldr	r3, [fp, #12]
  13205c:	e2833004 	add	r3, r3, #4
  132060:	e5933000 	ldr	r3, [r3]
  132064:	e1520003 	cmp	r2, r3
  132068:	0a000004 	beq	132080 <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  13206c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132070:	e5933000 	ldr	r3, [r3]
  132074:	e6ef3073 	uxtb	r3, r3
  132078:	e353007f 	cmp	r3, #127	; 0x7f
  13207c:	1a000004 	bne	132094 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  132080:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132084:	e59b000c 	ldr	r0, [fp, #12]
  132088:	ebff9e75 	bl	119a64 <netif_loop_output>
  13208c:	e1a03000 	mov	r3, r0
  132090:	ea00001e 	b	132110 <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  132094:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132098:	e5d3300d 	ldrb	r3, [r3, #13]
  13209c:	e2033004 	and	r3, r3, #4
  1320a0:	e3530000 	cmp	r3, #0
  1320a4:	0a000002 	beq	1320b4 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  1320a8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1320ac:	e59b000c 	ldr	r0, [fp, #12]
  1320b0:	ebff9e6b 	bl	119a64 <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  1320b4:	e59b300c 	ldr	r3, [fp, #12]
  1320b8:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1320bc:	e3530000 	cmp	r3, #0
  1320c0:	0a00000b 	beq	1320f4 <ip4_output_if_opt_src+0x5a8>
  1320c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1320c8:	e1d320b8 	ldrh	r2, [r3, #8]
  1320cc:	e59b300c 	ldr	r3, [fp, #12]
  1320d0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1320d4:	e1520003 	cmp	r2, r3
  1320d8:	9a000005 	bls	1320f4 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  1320dc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1320e0:	e59b100c 	ldr	r1, [fp, #12]
  1320e4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1320e8:	eb00068e 	bl	133b28 <ip4_frag>
  1320ec:	e1a03000 	mov	r3, r0
  1320f0:	ea000006 	b	132110 <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  1320f4:	e59b300c 	ldr	r3, [fp, #12]
  1320f8:	e5933014 	ldr	r3, [r3, #20]
  1320fc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132100:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132104:	e59b000c 	ldr	r0, [fp, #12]
  132108:	e12fff33 	blx	r3
  13210c:	e1a03000 	mov	r3, r0
}
  132110:	e1a00003 	mov	r0, r3
  132114:	e24bd004 	sub	sp, fp, #4
  132118:	e8bd8800 	pop	{fp, pc}

0013211c <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  13211c:	e92d4800 	push	{fp, lr}
  132120:	e28db004 	add	fp, sp, #4
  132124:	e24dd028 	sub	sp, sp, #40	; 0x28
  132128:	e50b0010 	str	r0, [fp, #-16]
  13212c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  132130:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  132134:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  132138:	e51b3010 	ldr	r3, [fp, #-16]
  13213c:	e1d330be 	ldrh	r3, [r3, #14]
  132140:	e3530001 	cmp	r3, #1
  132144:	0a000006 	beq	132164 <ip4_output+0x48>
  132148:	e30905d0 	movw	r0, #38352	; 0x95d0
  13214c:	e3400014 	movt	r0, #20
  132150:	ebff43ef 	bl	103114 <rt_kprintf>
  132154:	e30013db 	movw	r1, #987	; 0x3db
  132158:	e30905dc 	movw	r0, #38364	; 0x95dc
  13215c:	e3400014 	movt	r0, #20
  132160:	ebff630b 	bl	10ad94 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  132164:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132168:	ebfffb3e 	bl	130e68 <ip4_route>
  13216c:	e50b0008 	str	r0, [fp, #-8]
  132170:	e51b3008 	ldr	r3, [fp, #-8]
  132174:	e3530000 	cmp	r3, #0
  132178:	1a000009 	bne	1321a4 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  13217c:	e30c3a18 	movw	r3, #51736	; 0xca18
  132180:	e3403015 	movt	r3, #21
  132184:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  132188:	e2833001 	add	r3, r3, #1
  13218c:	e6ff2073 	uxth	r2, r3
  132190:	e30c3a18 	movw	r3, #51736	; 0xca18
  132194:	e3403015 	movt	r3, #21
  132198:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  13219c:	e3e03003 	mvn	r3, #3
  1321a0:	ea00000c 	b	1321d8 <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  1321a4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  1321a8:	e51b3008 	ldr	r3, [fp, #-8]
  1321ac:	e58d3008 	str	r3, [sp, #8]
  1321b0:	e5db3008 	ldrb	r3, [fp, #8]
  1321b4:	e58d3004 	str	r3, [sp, #4]
  1321b8:	e5db3004 	ldrb	r3, [fp, #4]
  1321bc:	e58d3000 	str	r3, [sp]
  1321c0:	e1a03002 	mov	r3, r2
  1321c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1321c8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1321cc:	e51b0010 	ldr	r0, [fp, #-16]
  1321d0:	ebfffdfd 	bl	1319cc <ip4_output_if>
  1321d4:	e1a03000 	mov	r3, r0
}
  1321d8:	e1a00003 	mov	r0, r3
  1321dc:	e24bd004 	sub	sp, fp, #4
  1321e0:	e8bd8800 	pop	{fp, pc}

001321e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  1321e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1321e8:	e28db000 	add	fp, sp, #0
  1321ec:	e24dd014 	sub	sp, sp, #20
  1321f0:	e50b0010 	str	r0, [fp, #-16]
  1321f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  1321f8:	e51b3010 	ldr	r3, [fp, #-16]
  1321fc:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  132200:	e51b3010 	ldr	r3, [fp, #-16]
  132204:	e3730001 	cmn	r3, #1
  132208:	0a000002 	beq	132218 <ip4_addr_isbroadcast_u32+0x34>
  13220c:	e51b3010 	ldr	r3, [fp, #-16]
  132210:	e3530000 	cmp	r3, #0
  132214:	1a000001 	bne	132220 <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  132218:	e3a03001 	mov	r3, #1
  13221c:	ea000028 	b	1322c4 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  132220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132224:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  132228:	e2033002 	and	r3, r3, #2
  13222c:	e3530000 	cmp	r3, #0
  132230:	1a000001 	bne	13223c <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  132234:	e3a03000 	mov	r3, #0
  132238:	ea000021 	b	1322c4 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  13223c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132240:	e2833004 	add	r3, r3, #4
  132244:	e5933000 	ldr	r3, [r3]
  132248:	e51b2010 	ldr	r2, [fp, #-16]
  13224c:	e1520003 	cmp	r2, r3
  132250:	1a000001 	bne	13225c <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  132254:	e3a03000 	mov	r3, #0
  132258:	ea000019 	b	1322c4 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  13225c:	e51b2008 	ldr	r2, [fp, #-8]
  132260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132264:	e2833004 	add	r3, r3, #4
  132268:	e5933000 	ldr	r3, [r3]
  13226c:	e0222003 	eor	r2, r2, r3
  132270:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132274:	e2833008 	add	r3, r3, #8
  132278:	e5933000 	ldr	r3, [r3]
  13227c:	e0033002 	and	r3, r3, r2
  132280:	e3530000 	cmp	r3, #0
  132284:	1a00000d 	bne	1322c0 <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  132288:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13228c:	e2833008 	add	r3, r3, #8
  132290:	e5933000 	ldr	r3, [r3]
  132294:	e1e02003 	mvn	r2, r3
  132298:	e51b3010 	ldr	r3, [fp, #-16]
  13229c:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  1322a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322a4:	e2833008 	add	r3, r3, #8
  1322a8:	e5933000 	ldr	r3, [r3]
  1322ac:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1322b0:	e1520003 	cmp	r2, r3
  1322b4:	1a000001 	bne	1322c0 <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  1322b8:	e3a03001 	mov	r3, #1
  1322bc:	ea000000 	b	1322c4 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  1322c0:	e3a03000 	mov	r3, #0
  }
}
  1322c4:	e1a00003 	mov	r0, r3
  1322c8:	e28bd000 	add	sp, fp, #0
  1322cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1322d0:	e12fff1e 	bx	lr

001322d4 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  1322d4:	e92d4800 	push	{fp, lr}
  1322d8:	e28db004 	add	fp, sp, #4
  1322dc:	e24dd010 	sub	sp, sp, #16
  1322e0:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  1322e4:	e51b0010 	ldr	r0, [fp, #-16]
  1322e8:	ebff8ffa 	bl	1162d8 <lwip_htonl>
  1322ec:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  1322f0:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  1322f4:	e50b3008 	str	r3, [fp, #-8]
  1322f8:	ea000007 	b	13231c <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  1322fc:	e51b200c 	ldr	r2, [fp, #-12]
  132300:	e51b3008 	ldr	r3, [fp, #-8]
  132304:	e0033002 	and	r3, r3, r2
  132308:	e3530000 	cmp	r3, #0
  13230c:	0a000006 	beq	13232c <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132310:	e51b3008 	ldr	r3, [fp, #-8]
  132314:	e1a030a3 	lsr	r3, r3, #1
  132318:	e50b3008 	str	r3, [fp, #-8]
  13231c:	e51b3008 	ldr	r3, [fp, #-8]
  132320:	e3530000 	cmp	r3, #0
  132324:	1afffff4 	bne	1322fc <ip4_addr_netmask_valid+0x28>
  132328:	ea00000b 	b	13235c <ip4_addr_netmask_valid+0x88>
      break;
  13232c:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  132330:	ea000009 	b	13235c <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  132334:	e51b200c 	ldr	r2, [fp, #-12]
  132338:	e51b3008 	ldr	r3, [fp, #-8]
  13233c:	e0033002 	and	r3, r3, r2
  132340:	e3530000 	cmp	r3, #0
  132344:	0a000001 	beq	132350 <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  132348:	e3a03000 	mov	r3, #0
  13234c:	ea000006 	b	13236c <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  132350:	e51b3008 	ldr	r3, [fp, #-8]
  132354:	e1a030a3 	lsr	r3, r3, #1
  132358:	e50b3008 	str	r3, [fp, #-8]
  13235c:	e51b3008 	ldr	r3, [fp, #-8]
  132360:	e3530000 	cmp	r3, #0
  132364:	1afffff2 	bne	132334 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  132368:	e3a03001 	mov	r3, #1
}
  13236c:	e1a00003 	mov	r0, r3
  132370:	e24bd004 	sub	sp, fp, #4
  132374:	e8bd8800 	pop	{fp, pc}

00132378 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  132378:	e92d4800 	push	{fp, lr}
  13237c:	e28db004 	add	fp, sp, #4
  132380:	e24dd010 	sub	sp, sp, #16
  132384:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  132388:	e24b3008 	sub	r3, fp, #8
  13238c:	e1a01003 	mov	r1, r3
  132390:	e51b0010 	ldr	r0, [fp, #-16]
  132394:	eb000008 	bl	1323bc <ip4addr_aton>
  132398:	e1a03000 	mov	r3, r0
  13239c:	e3530000 	cmp	r3, #0
  1323a0:	0a000001 	beq	1323ac <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  1323a4:	e51b3008 	ldr	r3, [fp, #-8]
  1323a8:	ea000000 	b	1323b0 <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  1323ac:	e3e03000 	mvn	r3, #0
}
  1323b0:	e1a00003 	mov	r0, r3
  1323b4:	e24bd004 	sub	sp, fp, #4
  1323b8:	e8bd8800 	pop	{fp, pc}

001323bc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1323bc:	e92d4800 	push	{fp, lr}
  1323c0:	e28db004 	add	fp, sp, #4
  1323c4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1323c8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1323cc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  1323d0:	e24b3020 	sub	r3, fp, #32
  1323d4:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  1323d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1323dc:	e5d33000 	ldrb	r3, [r3]
  1323e0:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  1323e4:	e55b300a 	ldrb	r3, [fp, #-10]
  1323e8:	e353002f 	cmp	r3, #47	; 0x2f
  1323ec:	9a000002 	bls	1323fc <ip4addr_aton+0x40>
  1323f0:	e55b300a 	ldrb	r3, [fp, #-10]
  1323f4:	e3530039 	cmp	r3, #57	; 0x39
  1323f8:	9a000001 	bls	132404 <ip4addr_aton+0x48>
      return 0;
  1323fc:	e3a03000 	mov	r3, #0
  132400:	ea0000ee 	b	1327c0 <ip4addr_aton+0x404>
    }
    val = 0;
  132404:	e3a03000 	mov	r3, #0
  132408:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  13240c:	e3a0300a 	mov	r3, #10
  132410:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132414:	e55b300a 	ldrb	r3, [fp, #-10]
  132418:	e3530030 	cmp	r3, #48	; 0x30
  13241c:	1a000016 	bne	13247c <ip4addr_aton+0xc0>
      c = *++cp;
  132420:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132424:	e2833001 	add	r3, r3, #1
  132428:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13242c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132430:	e5d33000 	ldrb	r3, [r3]
  132434:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  132438:	e55b300a 	ldrb	r3, [fp, #-10]
  13243c:	e3530078 	cmp	r3, #120	; 0x78
  132440:	0a000002 	beq	132450 <ip4addr_aton+0x94>
  132444:	e55b300a 	ldrb	r3, [fp, #-10]
  132448:	e3530058 	cmp	r3, #88	; 0x58
  13244c:	1a000008 	bne	132474 <ip4addr_aton+0xb8>
        base = 16;
  132450:	e3a03010 	mov	r3, #16
  132454:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  132458:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13245c:	e2833001 	add	r3, r3, #1
  132460:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132464:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132468:	e5d33000 	ldrb	r3, [r3]
  13246c:	e54b300a 	strb	r3, [fp, #-10]
  132470:	ea000001 	b	13247c <ip4addr_aton+0xc0>
      } else {
        base = 8;
  132474:	e3a03008 	mov	r3, #8
  132478:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  13247c:	e55b300a 	ldrb	r3, [fp, #-10]
  132480:	e353002f 	cmp	r3, #47	; 0x2f
  132484:	9a000010 	bls	1324cc <ip4addr_aton+0x110>
  132488:	e55b300a 	ldrb	r3, [fp, #-10]
  13248c:	e3530039 	cmp	r3, #57	; 0x39
  132490:	8a00000d 	bhi	1324cc <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  132494:	e55b3009 	ldrb	r3, [fp, #-9]
  132498:	e51b2008 	ldr	r2, [fp, #-8]
  13249c:	e0020392 	mul	r2, r2, r3
  1324a0:	e55b300a 	ldrb	r3, [fp, #-10]
  1324a4:	e0823003 	add	r3, r2, r3
  1324a8:	e2433030 	sub	r3, r3, #48	; 0x30
  1324ac:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1324b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1324b4:	e2833001 	add	r3, r3, #1
  1324b8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1324bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1324c0:	e5d33000 	ldrb	r3, [r3]
  1324c4:	e54b300a 	strb	r3, [fp, #-10]
  1324c8:	ea00002a 	b	132578 <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  1324cc:	e55b3009 	ldrb	r3, [fp, #-9]
  1324d0:	e3530010 	cmp	r3, #16
  1324d4:	1a000028 	bne	13257c <ip4addr_aton+0x1c0>
  1324d8:	e55b300a 	ldrb	r3, [fp, #-10]
  1324dc:	e353002f 	cmp	r3, #47	; 0x2f
  1324e0:	9a000002 	bls	1324f0 <ip4addr_aton+0x134>
  1324e4:	e55b300a 	ldrb	r3, [fp, #-10]
  1324e8:	e3530039 	cmp	r3, #57	; 0x39
  1324ec:	9a00000b 	bls	132520 <ip4addr_aton+0x164>
  1324f0:	e55b300a 	ldrb	r3, [fp, #-10]
  1324f4:	e3530060 	cmp	r3, #96	; 0x60
  1324f8:	9a000002 	bls	132508 <ip4addr_aton+0x14c>
  1324fc:	e55b300a 	ldrb	r3, [fp, #-10]
  132500:	e3530066 	cmp	r3, #102	; 0x66
  132504:	9a000005 	bls	132520 <ip4addr_aton+0x164>
  132508:	e55b300a 	ldrb	r3, [fp, #-10]
  13250c:	e3530040 	cmp	r3, #64	; 0x40
  132510:	9a000019 	bls	13257c <ip4addr_aton+0x1c0>
  132514:	e55b300a 	ldrb	r3, [fp, #-10]
  132518:	e3530046 	cmp	r3, #70	; 0x46
  13251c:	8a000016 	bhi	13257c <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  132520:	e51b3008 	ldr	r3, [fp, #-8]
  132524:	e1a03203 	lsl	r3, r3, #4
  132528:	e55b200a 	ldrb	r2, [fp, #-10]
  13252c:	e282100a 	add	r1, r2, #10
  132530:	e55b200a 	ldrb	r2, [fp, #-10]
  132534:	e3520060 	cmp	r2, #96	; 0x60
  132538:	9a000004 	bls	132550 <ip4addr_aton+0x194>
  13253c:	e55b200a 	ldrb	r2, [fp, #-10]
  132540:	e352007a 	cmp	r2, #122	; 0x7a
  132544:	8a000001 	bhi	132550 <ip4addr_aton+0x194>
  132548:	e3a02061 	mov	r2, #97	; 0x61
  13254c:	ea000000 	b	132554 <ip4addr_aton+0x198>
  132550:	e3a02041 	mov	r2, #65	; 0x41
  132554:	e0412002 	sub	r2, r1, r2
  132558:	e1833002 	orr	r3, r3, r2
  13255c:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132560:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132564:	e2833001 	add	r3, r3, #1
  132568:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13256c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132570:	e5d33000 	ldrb	r3, [r3]
  132574:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  132578:	eaffffbf 	b	13247c <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  13257c:	e55b300a 	ldrb	r3, [fp, #-10]
  132580:	e353002e 	cmp	r3, #46	; 0x2e
  132584:	1a000012 	bne	1325d4 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  132588:	e24b3020 	sub	r3, fp, #32
  13258c:	e283300c 	add	r3, r3, #12
  132590:	e51b2010 	ldr	r2, [fp, #-16]
  132594:	e1520003 	cmp	r2, r3
  132598:	3a000001 	bcc	1325a4 <ip4addr_aton+0x1e8>
        return 0;
  13259c:	e3a03000 	mov	r3, #0
  1325a0:	ea000086 	b	1327c0 <ip4addr_aton+0x404>
      }
      *pp++ = val;
  1325a4:	e51b3010 	ldr	r3, [fp, #-16]
  1325a8:	e2832004 	add	r2, r3, #4
  1325ac:	e50b2010 	str	r2, [fp, #-16]
  1325b0:	e51b2008 	ldr	r2, [fp, #-8]
  1325b4:	e5832000 	str	r2, [r3]
      c = *++cp;
  1325b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1325bc:	e2833001 	add	r3, r3, #1
  1325c0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1325c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1325c8:	e5d33000 	ldrb	r3, [r3]
  1325cc:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  1325d0:	eaffff83 	b	1323e4 <ip4addr_aton+0x28>
    } else {
      break;
  1325d4:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  1325d8:	e55b300a 	ldrb	r3, [fp, #-10]
  1325dc:	e3530000 	cmp	r3, #0
  1325e0:	0a000013 	beq	132634 <ip4addr_aton+0x278>
  1325e4:	e55b300a 	ldrb	r3, [fp, #-10]
  1325e8:	e3530020 	cmp	r3, #32
  1325ec:	0a000010 	beq	132634 <ip4addr_aton+0x278>
  1325f0:	e55b300a 	ldrb	r3, [fp, #-10]
  1325f4:	e353000c 	cmp	r3, #12
  1325f8:	0a00000d 	beq	132634 <ip4addr_aton+0x278>
  1325fc:	e55b300a 	ldrb	r3, [fp, #-10]
  132600:	e353000a 	cmp	r3, #10
  132604:	0a00000a 	beq	132634 <ip4addr_aton+0x278>
  132608:	e55b300a 	ldrb	r3, [fp, #-10]
  13260c:	e353000d 	cmp	r3, #13
  132610:	0a000007 	beq	132634 <ip4addr_aton+0x278>
  132614:	e55b300a 	ldrb	r3, [fp, #-10]
  132618:	e3530009 	cmp	r3, #9
  13261c:	0a000004 	beq	132634 <ip4addr_aton+0x278>
  132620:	e55b300a 	ldrb	r3, [fp, #-10]
  132624:	e353000b 	cmp	r3, #11
  132628:	0a000001 	beq	132634 <ip4addr_aton+0x278>
    return 0;
  13262c:	e3a03000 	mov	r3, #0
  132630:	ea000062 	b	1327c0 <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  132634:	e51b2010 	ldr	r2, [fp, #-16]
  132638:	e24b3020 	sub	r3, fp, #32
  13263c:	e0423003 	sub	r3, r2, r3
  132640:	e1a03143 	asr	r3, r3, #2
  132644:	e2833001 	add	r3, r3, #1
  132648:	e3530004 	cmp	r3, #4
  13264c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  132650:	ea000048 	b	132778 <ip4addr_aton+0x3bc>
  132654:	00132668 	.word	0x00132668
  132658:	00132798 	.word	0x00132798
  13265c:	00132670 	.word	0x00132670
  132660:	001326b0 	.word	0x001326b0
  132664:	00132708 	.word	0x00132708

  case 0:
    return 0;       /* initial nondigit */
  132668:	e3a03000 	mov	r3, #0
  13266c:	ea000053 	b	1327c0 <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  132670:	e51b3008 	ldr	r3, [fp, #-8]
  132674:	e3530401 	cmp	r3, #16777216	; 0x1000000
  132678:	3a000001 	bcc	132684 <ip4addr_aton+0x2c8>
      return 0;
  13267c:	e3a03000 	mov	r3, #0
  132680:	ea00004e 	b	1327c0 <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  132684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132688:	e35300ff 	cmp	r3, #255	; 0xff
  13268c:	9a000001 	bls	132698 <ip4addr_aton+0x2dc>
      return 0;
  132690:	e3a03000 	mov	r3, #0
  132694:	ea000049 	b	1327c0 <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  132698:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13269c:	e1a03c03 	lsl	r3, r3, #24
  1326a0:	e51b2008 	ldr	r2, [fp, #-8]
  1326a4:	e1823003 	orr	r3, r2, r3
  1326a8:	e50b3008 	str	r3, [fp, #-8]
    break;
  1326ac:	ea00003a 	b	13279c <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  1326b0:	e51b3008 	ldr	r3, [fp, #-8]
  1326b4:	e3530801 	cmp	r3, #65536	; 0x10000
  1326b8:	3a000001 	bcc	1326c4 <ip4addr_aton+0x308>
      return 0;
  1326bc:	e3a03000 	mov	r3, #0
  1326c0:	ea00003e 	b	1327c0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  1326c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1326c8:	e35300ff 	cmp	r3, #255	; 0xff
  1326cc:	8a000002 	bhi	1326dc <ip4addr_aton+0x320>
  1326d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1326d4:	e35300ff 	cmp	r3, #255	; 0xff
  1326d8:	9a000001 	bls	1326e4 <ip4addr_aton+0x328>
      return 0;
  1326dc:	e3a03000 	mov	r3, #0
  1326e0:	ea000036 	b	1327c0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  1326e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1326e8:	e1a02c03 	lsl	r2, r3, #24
  1326ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1326f0:	e1a03803 	lsl	r3, r3, #16
  1326f4:	e1823003 	orr	r3, r2, r3
  1326f8:	e51b2008 	ldr	r2, [fp, #-8]
  1326fc:	e1823003 	orr	r3, r2, r3
  132700:	e50b3008 	str	r3, [fp, #-8]
    break;
  132704:	ea000024 	b	13279c <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  132708:	e51b3008 	ldr	r3, [fp, #-8]
  13270c:	e35300ff 	cmp	r3, #255	; 0xff
  132710:	9a000001 	bls	13271c <ip4addr_aton+0x360>
      return 0;
  132714:	e3a03000 	mov	r3, #0
  132718:	ea000028 	b	1327c0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  13271c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132720:	e35300ff 	cmp	r3, #255	; 0xff
  132724:	8a000005 	bhi	132740 <ip4addr_aton+0x384>
  132728:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13272c:	e35300ff 	cmp	r3, #255	; 0xff
  132730:	8a000002 	bhi	132740 <ip4addr_aton+0x384>
  132734:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132738:	e35300ff 	cmp	r3, #255	; 0xff
  13273c:	9a000001 	bls	132748 <ip4addr_aton+0x38c>
      return 0;
  132740:	e3a03000 	mov	r3, #0
  132744:	ea00001d 	b	1327c0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  132748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13274c:	e1a02c03 	lsl	r2, r3, #24
  132750:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132754:	e1a03803 	lsl	r3, r3, #16
  132758:	e1822003 	orr	r2, r2, r3
  13275c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132760:	e1a03403 	lsl	r3, r3, #8
  132764:	e1823003 	orr	r3, r2, r3
  132768:	e51b2008 	ldr	r2, [fp, #-8]
  13276c:	e1823003 	orr	r3, r2, r3
  132770:	e50b3008 	str	r3, [fp, #-8]
    break;
  132774:	ea000008 	b	13279c <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  132778:	e3090644 	movw	r0, #38468	; 0x9644
  13277c:	e3400014 	movt	r0, #20
  132780:	ebff4263 	bl	103114 <rt_kprintf>
  132784:	e3001103 	movw	r1, #259	; 0x103
  132788:	e3090650 	movw	r0, #38480	; 0x9650
  13278c:	e3400014 	movt	r0, #20
  132790:	ebff617f 	bl	10ad94 <sys_arch_assert>
    break;
  132794:	ea000000 	b	13279c <ip4addr_aton+0x3e0>
    break;
  132798:	e320f000 	nop	{0}
  }
  if (addr) {
  13279c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1327a0:	e3530000 	cmp	r3, #0
  1327a4:	0a000004 	beq	1327bc <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  1327a8:	e51b0008 	ldr	r0, [fp, #-8]
  1327ac:	ebff8ec9 	bl	1162d8 <lwip_htonl>
  1327b0:	e1a02000 	mov	r2, r0
  1327b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1327b8:	e5832000 	str	r2, [r3]
  }
  return 1;
  1327bc:	e3a03001 	mov	r3, #1
}
  1327c0:	e1a00003 	mov	r0, r3
  1327c4:	e24bd004 	sub	sp, fp, #4
  1327c8:	e8bd8800 	pop	{fp, pc}

001327cc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  1327cc:	e92d4800 	push	{fp, lr}
  1327d0:	e28db004 	add	fp, sp, #4
  1327d4:	e24dd008 	sub	sp, sp, #8
  1327d8:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  1327dc:	e3a02010 	mov	r2, #16
  1327e0:	e30e1bd0 	movw	r1, #60368	; 0xebd0
  1327e4:	e3401014 	movt	r1, #20
  1327e8:	e51b0008 	ldr	r0, [fp, #-8]
  1327ec:	eb000003 	bl	132800 <ip4addr_ntoa_r>
  1327f0:	e1a03000 	mov	r3, r0
}
  1327f4:	e1a00003 	mov	r0, r3
  1327f8:	e24bd004 	sub	sp, fp, #4
  1327fc:	e8bd8800 	pop	{fp, pc}

00132800 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132800:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132804:	e28db000 	add	fp, sp, #0
  132808:	e24dd034 	sub	sp, sp, #52	; 0x34
  13280c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132810:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132814:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  132818:	e3a03000 	mov	r3, #0
  13281c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  132820:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132824:	e5933000 	ldr	r3, [r3]
  132828:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  13282c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132830:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  132834:	e24b301c 	sub	r3, fp, #28
  132838:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  13283c:	e3a03000 	mov	r3, #0
  132840:	e54b300d 	strb	r3, [fp, #-13]
  132844:	ea00004b 	b	132978 <ip4addr_ntoa_r+0x178>
    i = 0;
  132848:	e3a03000 	mov	r3, #0
  13284c:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  132850:	e51b300c 	ldr	r3, [fp, #-12]
  132854:	e5d31000 	ldrb	r1, [r3]
  132858:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  13285c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132860:	e0832391 	umull	r2, r3, r1, r3
  132864:	e1a031a3 	lsr	r3, r3, #3
  132868:	e3a0200a 	mov	r2, #10
  13286c:	e0030392 	mul	r3, r2, r3
  132870:	e0413003 	sub	r3, r1, r3
  132874:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  132878:	e51b300c 	ldr	r3, [fp, #-12]
  13287c:	e5d32000 	ldrb	r2, [r3]
  132880:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132884:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132888:	e0832392 	umull	r2, r3, r2, r3
  13288c:	e1a031a3 	lsr	r3, r3, #3
  132890:	e6ef2073 	uxtb	r2, r3
  132894:	e51b300c 	ldr	r3, [fp, #-12]
  132898:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  13289c:	e55b300e 	ldrb	r3, [fp, #-14]
  1328a0:	e2832001 	add	r2, r3, #1
  1328a4:	e54b200e 	strb	r2, [fp, #-14]
  1328a8:	e1a01003 	mov	r1, r3
  1328ac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1328b0:	e2833030 	add	r3, r3, #48	; 0x30
  1328b4:	e6ef2073 	uxtb	r2, r3
  1328b8:	e24b3004 	sub	r3, fp, #4
  1328bc:	e0833001 	add	r3, r3, r1
  1328c0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  1328c4:	e51b300c 	ldr	r3, [fp, #-12]
  1328c8:	e5d33000 	ldrb	r3, [r3]
  1328cc:	e3530000 	cmp	r3, #0
  1328d0:	1affffde 	bne	132850 <ip4addr_ntoa_r+0x50>
    while (i--) {
  1328d4:	ea00000f 	b	132918 <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  1328d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1328dc:	e2832001 	add	r2, r3, #1
  1328e0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1328e4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1328e8:	e1520003 	cmp	r2, r3
  1328ec:	ca000001 	bgt	1328f8 <ip4addr_ntoa_r+0xf8>
        return NULL;
  1328f0:	e3a03000 	mov	r3, #0
  1328f4:	ea000029 	b	1329a0 <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  1328f8:	e55b200e 	ldrb	r2, [fp, #-14]
  1328fc:	e51b3008 	ldr	r3, [fp, #-8]
  132900:	e2831001 	add	r1, r3, #1
  132904:	e50b1008 	str	r1, [fp, #-8]
  132908:	e24b1004 	sub	r1, fp, #4
  13290c:	e0812002 	add	r2, r1, r2
  132910:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132914:	e5c32000 	strb	r2, [r3]
    while (i--) {
  132918:	e55b300e 	ldrb	r3, [fp, #-14]
  13291c:	e2432001 	sub	r2, r3, #1
  132920:	e54b200e 	strb	r2, [fp, #-14]
  132924:	e3530000 	cmp	r3, #0
  132928:	1affffea 	bne	1328d8 <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  13292c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132930:	e2832001 	add	r2, r3, #1
  132934:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132938:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  13293c:	e1520003 	cmp	r2, r3
  132940:	ca000001 	bgt	13294c <ip4addr_ntoa_r+0x14c>
      return NULL;
  132944:	e3a03000 	mov	r3, #0
  132948:	ea000014 	b	1329a0 <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  13294c:	e51b3008 	ldr	r3, [fp, #-8]
  132950:	e2832001 	add	r2, r3, #1
  132954:	e50b2008 	str	r2, [fp, #-8]
  132958:	e3a0202e 	mov	r2, #46	; 0x2e
  13295c:	e5c32000 	strb	r2, [r3]
    ap++;
  132960:	e51b300c 	ldr	r3, [fp, #-12]
  132964:	e2833001 	add	r3, r3, #1
  132968:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  13296c:	e55b300d 	ldrb	r3, [fp, #-13]
  132970:	e2833001 	add	r3, r3, #1
  132974:	e54b300d 	strb	r3, [fp, #-13]
  132978:	e55b300d 	ldrb	r3, [fp, #-13]
  13297c:	e3530003 	cmp	r3, #3
  132980:	9affffb0 	bls	132848 <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132984:	e51b3008 	ldr	r3, [fp, #-8]
  132988:	e2433001 	sub	r3, r3, #1
  13298c:	e50b3008 	str	r3, [fp, #-8]
  132990:	e51b3008 	ldr	r3, [fp, #-8]
  132994:	e3a02000 	mov	r2, #0
  132998:	e5c32000 	strb	r2, [r3]
  return buf;
  13299c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  1329a0:	e1a00003 	mov	r0, r3
  1329a4:	e28bd000 	add	sp, fp, #0
  1329a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1329ac:	e12fff1e 	bx	lr

001329b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  1329b0:	e92d4800 	push	{fp, lr}
  1329b4:	e28db004 	add	fp, sp, #4
  1329b8:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  1329bc:	e3a03000 	mov	r3, #0
  1329c0:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  1329c4:	e30e3be0 	movw	r3, #60384	; 0xebe0
  1329c8:	e3403014 	movt	r3, #20
  1329cc:	e5933000 	ldr	r3, [r3]
  1329d0:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  1329d4:	ea000017 	b	132a38 <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  1329d8:	e51b3008 	ldr	r3, [fp, #-8]
  1329dc:	e5d3301f 	ldrb	r3, [r3, #31]
  1329e0:	e3530000 	cmp	r3, #0
  1329e4:	0a00000b 	beq	132a18 <ip_reass_tmr+0x68>
      r->timer--;
  1329e8:	e51b3008 	ldr	r3, [fp, #-8]
  1329ec:	e5d3301f 	ldrb	r3, [r3, #31]
  1329f0:	e2433001 	sub	r3, r3, #1
  1329f4:	e6ef2073 	uxtb	r2, r3
  1329f8:	e51b3008 	ldr	r3, [fp, #-8]
  1329fc:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132a00:	e51b3008 	ldr	r3, [fp, #-8]
  132a04:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  132a08:	e51b3008 	ldr	r3, [fp, #-8]
  132a0c:	e5933000 	ldr	r3, [r3]
  132a10:	e50b3008 	str	r3, [fp, #-8]
  132a14:	ea000007 	b	132a38 <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  132a18:	e51b3008 	ldr	r3, [fp, #-8]
  132a1c:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  132a20:	e51b3008 	ldr	r3, [fp, #-8]
  132a24:	e5933000 	ldr	r3, [r3]
  132a28:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132a2c:	e51b100c 	ldr	r1, [fp, #-12]
  132a30:	e51b0010 	ldr	r0, [fp, #-16]
  132a34:	eb000005 	bl	132a50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
  132a38:	e51b3008 	ldr	r3, [fp, #-8]
  132a3c:	e3530000 	cmp	r3, #0
  132a40:	1affffe4 	bne	1329d8 <ip_reass_tmr+0x28>
     }
   }
}
  132a44:	e320f000 	nop	{0}
  132a48:	e24bd004 	sub	sp, fp, #4
  132a4c:	e8bd8800 	pop	{fp, pc}

00132a50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132a50:	e92d4800 	push	{fp, lr}
  132a54:	e28db004 	add	fp, sp, #4
  132a58:	e24dd020 	sub	sp, sp, #32
  132a5c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132a60:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132a64:	e3a03000 	mov	r3, #0
  132a68:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132a6c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132a70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a74:	e1520003 	cmp	r2, r3
  132a78:	1a000006 	bne	132a98 <ip_reass_free_complete_datagram+0x48>
  132a7c:	e3090688 	movw	r0, #38536	; 0x9688
  132a80:	e3400014 	movt	r0, #20
  132a84:	ebff41a2 	bl	103114 <rt_kprintf>
  132a88:	e3a010a7 	mov	r1, #167	; 0xa7
  132a8c:	e3090694 	movw	r0, #38548	; 0x9694
  132a90:	e3400014 	movt	r0, #20
  132a94:	ebff60be 	bl	10ad94 <sys_arch_assert>
  if (prev != NULL) {
  132a98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132a9c:	e3530000 	cmp	r3, #0
  132aa0:	0a00000b 	beq	132ad4 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132aa4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132aa8:	e5933000 	ldr	r3, [r3]
  132aac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132ab0:	e1520003 	cmp	r2, r3
  132ab4:	0a000006 	beq	132ad4 <ip_reass_free_complete_datagram+0x84>
  132ab8:	e30906cc 	movw	r0, #38604	; 0x96cc
  132abc:	e3400014 	movt	r0, #20
  132ac0:	ebff4193 	bl	103114 <rt_kprintf>
  132ac4:	e3a010a9 	mov	r1, #169	; 0xa9
  132ac8:	e3090694 	movw	r0, #38548	; 0x9694
  132acc:	e3400014 	movt	r0, #20
  132ad0:	ebff60af 	bl	10ad94 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132ad4:	e30c3a18 	movw	r3, #51736	; 0xca18
  132ad8:	e3403015 	movt	r3, #21
  132adc:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132ae0:	e2832001 	add	r2, r3, #1
  132ae4:	e30c3a18 	movw	r3, #51736	; 0xca18
  132ae8:	e3403015 	movt	r3, #21
  132aec:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  132af0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132af4:	e5933004 	ldr	r3, [r3, #4]
  132af8:	e5933004 	ldr	r3, [r3, #4]
  132afc:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  132b00:	e51b3010 	ldr	r3, [fp, #-16]
  132b04:	e1d330b4 	ldrh	r3, [r3, #4]
  132b08:	e6ff3073 	uxth	r3, r3
  132b0c:	e3530000 	cmp	r3, #0
  132b10:	1a000026 	bne	132bb0 <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  132b14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b18:	e5933004 	ldr	r3, [r3, #4]
  132b1c:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  132b20:	e51b3010 	ldr	r3, [fp, #-16]
  132b24:	e5932000 	ldr	r2, [r3]
  132b28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b2c:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132b30:	e51b300c 	ldr	r3, [fp, #-12]
  132b34:	e5930004 	ldr	r0, [r3, #4]
  132b38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b3c:	e2833008 	add	r3, r3, #8
  132b40:	e3a02014 	mov	r2, #20
  132b44:	e1a01003 	mov	r1, r3
  132b48:	eb0037cd 	bl	140a84 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132b4c:	e3a01001 	mov	r1, #1
  132b50:	e51b000c 	ldr	r0, [fp, #-12]
  132b54:	ebfff396 	bl	12f9b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132b58:	e51b000c 	ldr	r0, [fp, #-12]
  132b5c:	ebffa08d 	bl	11ad98 <pbuf_clen>
  132b60:	e1a03000 	mov	r3, r0
  132b64:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132b68:	e15b20b6 	ldrh	r2, [fp, #-6]
  132b6c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132b70:	e0823003 	add	r3, r2, r3
  132b74:	e3530801 	cmp	r3, #65536	; 0x10000
  132b78:	ba000006 	blt	132b98 <ip_reass_free_complete_datagram+0x148>
  132b7c:	e30906e0 	movw	r0, #38624	; 0x96e0
  132b80:	e3400014 	movt	r0, #20
  132b84:	ebff4162 	bl	103114 <rt_kprintf>
  132b88:	e3a010b8 	mov	r1, #184	; 0xb8
  132b8c:	e3090694 	movw	r0, #38548	; 0x9694
  132b90:	e3400014 	movt	r0, #20
  132b94:	ebff607e 	bl	10ad94 <sys_arch_assert>
    pbufs_freed += clen;
  132b98:	e15b20b6 	ldrh	r2, [fp, #-6]
  132b9c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132ba0:	e0823003 	add	r3, r2, r3
  132ba4:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132ba8:	e51b000c 	ldr	r0, [fp, #-12]
  132bac:	ebff9ff4 	bl	11ab84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132bb4:	e5933004 	ldr	r3, [r3, #4]
  132bb8:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132bbc:	ea00001d 	b	132c38 <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132bc0:	e51b300c 	ldr	r3, [fp, #-12]
  132bc4:	e5933004 	ldr	r3, [r3, #4]
  132bc8:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132bcc:	e51b300c 	ldr	r3, [fp, #-12]
  132bd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132bd4:	e51b3010 	ldr	r3, [fp, #-16]
  132bd8:	e5933000 	ldr	r3, [r3]
  132bdc:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132be0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132be4:	ebffa06b 	bl	11ad98 <pbuf_clen>
  132be8:	e1a03000 	mov	r3, r0
  132bec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132bf0:	e15b20b6 	ldrh	r2, [fp, #-6]
  132bf4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132bf8:	e0823003 	add	r3, r2, r3
  132bfc:	e3530801 	cmp	r3, #65536	; 0x10000
  132c00:	ba000006 	blt	132c20 <ip_reass_free_complete_datagram+0x1d0>
  132c04:	e30906e0 	movw	r0, #38624	; 0x96e0
  132c08:	e3400014 	movt	r0, #20
  132c0c:	ebff4140 	bl	103114 <rt_kprintf>
  132c10:	e3a010c8 	mov	r1, #200	; 0xc8
  132c14:	e3090694 	movw	r0, #38548	; 0x9694
  132c18:	e3400014 	movt	r0, #20
  132c1c:	ebff605c 	bl	10ad94 <sys_arch_assert>
    pbufs_freed += clen;
  132c20:	e15b20b6 	ldrh	r2, [fp, #-6]
  132c24:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132c28:	e0823003 	add	r3, r2, r3
  132c2c:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132c30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132c34:	ebff9fd2 	bl	11ab84 <pbuf_free>
  while (p != NULL) {
  132c38:	e51b300c 	ldr	r3, [fp, #-12]
  132c3c:	e3530000 	cmp	r3, #0
  132c40:	1affffde 	bne	132bc0 <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132c44:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132c48:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132c4c:	eb0000b9 	bl	132f38 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132c50:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132c54:	e3403014 	movt	r3, #20
  132c58:	e1d330b0 	ldrh	r3, [r3]
  132c5c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132c60:	e1520003 	cmp	r2, r3
  132c64:	9a000006 	bls	132c84 <ip_reass_free_complete_datagram+0x234>
  132c68:	e3090700 	movw	r0, #38656	; 0x9700
  132c6c:	e3400014 	movt	r0, #20
  132c70:	ebff4127 	bl	103114 <rt_kprintf>
  132c74:	e3a010ce 	mov	r1, #206	; 0xce
  132c78:	e3090694 	movw	r0, #38548	; 0x9694
  132c7c:	e3400014 	movt	r0, #20
  132c80:	ebff6043 	bl	10ad94 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132c84:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132c88:	e3403014 	movt	r3, #20
  132c8c:	e1d320b0 	ldrh	r2, [r3]
  132c90:	e15b30b6 	ldrh	r3, [fp, #-6]
  132c94:	e0423003 	sub	r3, r2, r3
  132c98:	e6ff2073 	uxth	r2, r3
  132c9c:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132ca0:	e3403014 	movt	r3, #20
  132ca4:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132ca8:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132cac:	e1a00003 	mov	r0, r3
  132cb0:	e24bd004 	sub	sp, fp, #4
  132cb4:	e8bd8800 	pop	{fp, pc}

00132cb8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132cb8:	e92d4800 	push	{fp, lr}
  132cbc:	e28db004 	add	fp, sp, #4
  132cc0:	e24dd028 	sub	sp, sp, #40	; 0x28
  132cc4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132cc8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132ccc:	e3a03000 	mov	r3, #0
  132cd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  132cd4:	e3a03000 	mov	r3, #0
  132cd8:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  132cdc:	e3a03000 	mov	r3, #0
  132ce0:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  132ce4:	e3a03000 	mov	r3, #0
  132ce8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  132cec:	e3a03000 	mov	r3, #0
  132cf0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  132cf4:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132cf8:	e3403014 	movt	r3, #20
  132cfc:	e5933000 	ldr	r3, [r3]
  132d00:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132d04:	ea000030 	b	132dcc <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  132d08:	e51b3008 	ldr	r3, [fp, #-8]
  132d0c:	e5932014 	ldr	r2, [r3, #20]
  132d10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132d14:	e593300c 	ldr	r3, [r3, #12]
  132d18:	e1520003 	cmp	r2, r3
  132d1c:	1a00000c 	bne	132d54 <ip_reass_remove_oldest_datagram+0x9c>
  132d20:	e51b3008 	ldr	r3, [fp, #-8]
  132d24:	e5932018 	ldr	r2, [r3, #24]
  132d28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132d2c:	e5933010 	ldr	r3, [r3, #16]
  132d30:	e1520003 	cmp	r2, r3
  132d34:	1a000006 	bne	132d54 <ip_reass_remove_oldest_datagram+0x9c>
  132d38:	e51b3008 	ldr	r3, [fp, #-8]
  132d3c:	e1d320bc 	ldrh	r2, [r3, #12]
  132d40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132d44:	e1d330b4 	ldrh	r3, [r3, #4]
  132d48:	e6ff3073 	uxth	r3, r3
  132d4c:	e1520003 	cmp	r2, r3
  132d50:	0a000014 	beq	132da8 <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  132d54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132d58:	e2833001 	add	r3, r3, #1
  132d5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  132d60:	e51b300c 	ldr	r3, [fp, #-12]
  132d64:	e3530000 	cmp	r3, #0
  132d68:	1a000004 	bne	132d80 <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  132d6c:	e51b3008 	ldr	r3, [fp, #-8]
  132d70:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132d74:	e51b3010 	ldr	r3, [fp, #-16]
  132d78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  132d7c:	ea000009 	b	132da8 <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  132d80:	e51b3008 	ldr	r3, [fp, #-8]
  132d84:	e5d3201f 	ldrb	r2, [r3, #31]
  132d88:	e51b300c 	ldr	r3, [fp, #-12]
  132d8c:	e5d3301f 	ldrb	r3, [r3, #31]
  132d90:	e1520003 	cmp	r2, r3
  132d94:	8a000003 	bhi	132da8 <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  132d98:	e51b3008 	ldr	r3, [fp, #-8]
  132d9c:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132da0:	e51b3010 	ldr	r3, [fp, #-16]
  132da4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  132da8:	e51b3008 	ldr	r3, [fp, #-8]
  132dac:	e5933000 	ldr	r3, [r3]
  132db0:	e3530000 	cmp	r3, #0
  132db4:	0a000001 	beq	132dc0 <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  132db8:	e51b3008 	ldr	r3, [fp, #-8]
  132dbc:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  132dc0:	e51b3008 	ldr	r3, [fp, #-8]
  132dc4:	e5933000 	ldr	r3, [r3]
  132dc8:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132dcc:	e51b3008 	ldr	r3, [fp, #-8]
  132dd0:	e3530000 	cmp	r3, #0
  132dd4:	1affffcb 	bne	132d08 <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  132dd8:	e51b300c 	ldr	r3, [fp, #-12]
  132ddc:	e3530000 	cmp	r3, #0
  132de0:	0a000007 	beq	132e04 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  132de4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132de8:	e51b000c 	ldr	r0, [fp, #-12]
  132dec:	ebffff17 	bl	132a50 <ip_reass_free_complete_datagram>
  132df0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  132df4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132df8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132dfc:	e0823003 	add	r3, r2, r3
  132e00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  132e04:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132e08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132e0c:	e1520003 	cmp	r2, r3
  132e10:	aa000002 	bge	132e20 <ip_reass_remove_oldest_datagram+0x168>
  132e14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132e18:	e3530001 	cmp	r3, #1
  132e1c:	caffffac 	bgt	132cd4 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  132e20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  132e24:	e1a00003 	mov	r0, r3
  132e28:	e24bd004 	sub	sp, fp, #4
  132e2c:	e8bd8800 	pop	{fp, pc}

00132e30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  132e30:	e92d4800 	push	{fp, lr}
  132e34:	e28db004 	add	fp, sp, #4
  132e38:	e24dd010 	sub	sp, sp, #16
  132e3c:	e50b0010 	str	r0, [fp, #-16]
  132e40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132e44:	e300211a 	movw	r2, #282	; 0x11a
  132e48:	e3091694 	movw	r1, #38548	; 0x9694
  132e4c:	e3401014 	movt	r1, #20
  132e50:	e3a00005 	mov	r0, #5
  132e54:	ebff97d4 	bl	118dac <memp_malloc_fn>
  132e58:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  132e5c:	e51b3008 	ldr	r3, [fp, #-8]
  132e60:	e3530000 	cmp	r3, #0
  132e64:	1a000019 	bne	132ed0 <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  132e68:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132e6c:	e51b0010 	ldr	r0, [fp, #-16]
  132e70:	ebffff90 	bl	132cb8 <ip_reass_remove_oldest_datagram>
  132e74:	e1a02000 	mov	r2, r0
  132e78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132e7c:	e1530002 	cmp	r3, r2
  132e80:	ca000005 	bgt	132e9c <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132e84:	e300211e 	movw	r2, #286	; 0x11e
  132e88:	e3091694 	movw	r1, #38548	; 0x9694
  132e8c:	e3401014 	movt	r1, #20
  132e90:	e3a00005 	mov	r0, #5
  132e94:	ebff97c4 	bl	118dac <memp_malloc_fn>
  132e98:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  132e9c:	e51b3008 	ldr	r3, [fp, #-8]
  132ea0:	e3530000 	cmp	r3, #0
  132ea4:	1a000009 	bne	132ed0 <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  132ea8:	e30c3a18 	movw	r3, #51736	; 0xca18
  132eac:	e3403015 	movt	r3, #21
  132eb0:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  132eb4:	e2833001 	add	r3, r3, #1
  132eb8:	e6ff2073 	uxth	r2, r3
  132ebc:	e30c3a18 	movw	r3, #51736	; 0xca18
  132ec0:	e3403015 	movt	r3, #21
  132ec4:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  132ec8:	e3a03000 	mov	r3, #0
  132ecc:	ea000016 	b	132f2c <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  132ed0:	e3a02020 	mov	r2, #32
  132ed4:	e3a01000 	mov	r1, #0
  132ed8:	e51b0008 	ldr	r0, [fp, #-8]
  132edc:	eb003820 	bl	140f64 <memset>
  ipr->timer = IP_REASS_MAXAGE;
  132ee0:	e51b3008 	ldr	r3, [fp, #-8]
  132ee4:	e3a02003 	mov	r2, #3
  132ee8:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  132eec:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132ef0:	e3403014 	movt	r3, #20
  132ef4:	e5932000 	ldr	r2, [r3]
  132ef8:	e51b3008 	ldr	r3, [fp, #-8]
  132efc:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  132f00:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132f04:	e3403014 	movt	r3, #20
  132f08:	e51b2008 	ldr	r2, [fp, #-8]
  132f0c:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  132f10:	e51b3008 	ldr	r3, [fp, #-8]
  132f14:	e2833008 	add	r3, r3, #8
  132f18:	e3a02014 	mov	r2, #20
  132f1c:	e51b1010 	ldr	r1, [fp, #-16]
  132f20:	e1a00003 	mov	r0, r3
  132f24:	eb0036d6 	bl	140a84 <memcpy>
  return ipr;
  132f28:	e51b3008 	ldr	r3, [fp, #-8]
}
  132f2c:	e1a00003 	mov	r0, r3
  132f30:	e24bd004 	sub	sp, fp, #4
  132f34:	e8bd8800 	pop	{fp, pc}

00132f38 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132f38:	e92d4800 	push	{fp, lr}
  132f3c:	e28db004 	add	fp, sp, #4
  132f40:	e24dd008 	sub	sp, sp, #8
  132f44:	e50b0008 	str	r0, [fp, #-8]
  132f48:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  132f4c:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132f50:	e3403014 	movt	r3, #20
  132f54:	e5933000 	ldr	r3, [r3]
  132f58:	e51b2008 	ldr	r2, [fp, #-8]
  132f5c:	e1520003 	cmp	r2, r3
  132f60:	1a000005 	bne	132f7c <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  132f64:	e51b3008 	ldr	r3, [fp, #-8]
  132f68:	e5932000 	ldr	r2, [r3]
  132f6c:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132f70:	e3403014 	movt	r3, #20
  132f74:	e5832000 	str	r2, [r3]
  132f78:	ea00000d 	b	132fb4 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  132f7c:	e51b300c 	ldr	r3, [fp, #-12]
  132f80:	e3530000 	cmp	r3, #0
  132f84:	1a000006 	bne	132fa4 <ip_reass_dequeue_datagram+0x6c>
  132f88:	e309071c 	movw	r0, #38684	; 0x971c
  132f8c:	e3400014 	movt	r0, #20
  132f90:	ebff405f 	bl	103114 <rt_kprintf>
  132f94:	e3001141 	movw	r1, #321	; 0x141
  132f98:	e3090694 	movw	r0, #38548	; 0x9694
  132f9c:	e3400014 	movt	r0, #20
  132fa0:	ebff5f7b 	bl	10ad94 <sys_arch_assert>
    prev->next = ipr->next;
  132fa4:	e51b3008 	ldr	r3, [fp, #-8]
  132fa8:	e5932000 	ldr	r2, [r3]
  132fac:	e51b300c 	ldr	r3, [fp, #-12]
  132fb0:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  132fb4:	e51b1008 	ldr	r1, [fp, #-8]
  132fb8:	e3a00005 	mov	r0, #5
  132fbc:	ebff97e2 	bl	118f4c <memp_free>
}
  132fc0:	e320f000 	nop	{0}
  132fc4:	e24bd004 	sub	sp, fp, #4
  132fc8:	e8bd8800 	pop	{fp, pc}

00132fcc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  132fcc:	e92d4800 	push	{fp, lr}
  132fd0:	e28db004 	add	fp, sp, #4
  132fd4:	e24dd028 	sub	sp, sp, #40	; 0x28
  132fd8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132fdc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  132fe0:	e3a03000 	mov	r3, #0
  132fe4:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  132fe8:	e3a03001 	mov	r3, #1
  132fec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  132ff0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132ff4:	e5933004 	ldr	r3, [r3, #4]
  132ff8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  132ffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133000:	e1d330b2 	ldrh	r3, [r3, #2]
  133004:	e6ff3073 	uxth	r3, r3
  133008:	e1a00003 	mov	r0, r3
  13300c:	ebff8ca5 	bl	1162a8 <lwip_htons>
  133010:	e1a03000 	mov	r3, r0
  133014:	e1a02003 	mov	r2, r3
  133018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13301c:	e5d33000 	ldrb	r3, [r3]
  133020:	e6ff3073 	uxth	r3, r3
  133024:	e203300f 	and	r3, r3, #15
  133028:	e6ff3073 	uxth	r3, r3
  13302c:	e1a03103 	lsl	r3, r3, #2
  133030:	e6ff3073 	uxth	r3, r3
  133034:	e0423003 	sub	r3, r2, r3
  133038:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  13303c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133040:	e1d330b6 	ldrh	r3, [r3, #6]
  133044:	e6ff3073 	uxth	r3, r3
  133048:	e1a00003 	mov	r0, r3
  13304c:	ebff8c95 	bl	1162a8 <lwip_htons>
  133050:	e1a03000 	mov	r3, r0
  133054:	e7ec3053 	ubfx	r3, r3, #0, #13
  133058:	e6ff3073 	uxth	r3, r3
  13305c:	e1a03183 	lsl	r3, r3, #3
  133060:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  133064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133068:	e5933004 	ldr	r3, [r3, #4]
  13306c:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  133070:	e51b3008 	ldr	r3, [fp, #-8]
  133074:	e3a02000 	mov	r2, #0
  133078:	e5c32000 	strb	r2, [r3]
  13307c:	e3a02000 	mov	r2, #0
  133080:	e5c32001 	strb	r2, [r3, #1]
  133084:	e3a02000 	mov	r2, #0
  133088:	e5c32002 	strb	r2, [r3, #2]
  13308c:	e3a02000 	mov	r2, #0
  133090:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  133094:	e51b3008 	ldr	r3, [fp, #-8]
  133098:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  13309c:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  1330a0:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1330a4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1330a8:	e0823003 	add	r3, r2, r3
  1330ac:	e6ff2073 	uxth	r2, r3
  1330b0:	e51b3008 	ldr	r3, [fp, #-8]
  1330b4:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  1330b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1330bc:	e5933004 	ldr	r3, [r3, #4]
  1330c0:	e50b3010 	str	r3, [fp, #-16]
  1330c4:	ea00004a 	b	1331f4 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  1330c8:	e51b3010 	ldr	r3, [fp, #-16]
  1330cc:	e5933004 	ldr	r3, [r3, #4]
  1330d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  1330d4:	e51b3008 	ldr	r3, [fp, #-8]
  1330d8:	e1d330b4 	ldrh	r3, [r3, #4]
  1330dc:	e6ff2073 	uxth	r2, r3
  1330e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1330e4:	e1d330b4 	ldrh	r3, [r3, #4]
  1330e8:	e6ff3073 	uxth	r3, r3
  1330ec:	e1520003 	cmp	r2, r3
  1330f0:	2a00001d 	bcs	13316c <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  1330f4:	e51b3008 	ldr	r3, [fp, #-8]
  1330f8:	e51b2010 	ldr	r2, [fp, #-16]
  1330fc:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  133100:	e51b300c 	ldr	r3, [fp, #-12]
  133104:	e3530000 	cmp	r3, #0
  133108:	0a000013 	beq	13315c <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  13310c:	e51b3008 	ldr	r3, [fp, #-8]
  133110:	e1d330b4 	ldrh	r3, [r3, #4]
  133114:	e6ff2073 	uxth	r2, r3
  133118:	e51b300c 	ldr	r3, [fp, #-12]
  13311c:	e1d330b6 	ldrh	r3, [r3, #6]
  133120:	e6ff3073 	uxth	r3, r3
  133124:	e1520003 	cmp	r2, r3
  133128:	3a0000cf 	bcc	13346c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  13312c:	e51b3008 	ldr	r3, [fp, #-8]
  133130:	e1d330b6 	ldrh	r3, [r3, #6]
  133134:	e6ff2073 	uxth	r2, r3
  133138:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13313c:	e1d330b4 	ldrh	r3, [r3, #4]
  133140:	e6ff3073 	uxth	r3, r3
  133144:	e1520003 	cmp	r2, r3
  133148:	8a0000c7 	bhi	13346c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  13314c:	e51b300c 	ldr	r3, [fp, #-12]
  133150:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133154:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  133158:	ea000028 	b	133200 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  13315c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133160:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133164:	e5832004 	str	r2, [r3, #4]
      break;
  133168:	ea000024 	b	133200 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  13316c:	e51b3008 	ldr	r3, [fp, #-8]
  133170:	e1d330b4 	ldrh	r3, [r3, #4]
  133174:	e6ff2073 	uxth	r2, r3
  133178:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13317c:	e1d330b4 	ldrh	r3, [r3, #4]
  133180:	e6ff3073 	uxth	r3, r3
  133184:	e1520003 	cmp	r2, r3
  133188:	0a0000b9 	beq	133474 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  13318c:	e51b3008 	ldr	r3, [fp, #-8]
  133190:	e1d330b4 	ldrh	r3, [r3, #4]
  133194:	e6ff2073 	uxth	r2, r3
  133198:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13319c:	e1d330b6 	ldrh	r3, [r3, #6]
  1331a0:	e6ff3073 	uxth	r3, r3
  1331a4:	e1520003 	cmp	r2, r3
  1331a8:	3a0000b3 	bcc	13347c <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  1331ac:	e51b300c 	ldr	r3, [fp, #-12]
  1331b0:	e3530000 	cmp	r3, #0
  1331b4:	0a000009 	beq	1331e0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  1331b8:	e51b300c 	ldr	r3, [fp, #-12]
  1331bc:	e1d330b6 	ldrh	r3, [r3, #6]
  1331c0:	e6ff2073 	uxth	r2, r3
  1331c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1331c8:	e1d330b4 	ldrh	r3, [r3, #4]
  1331cc:	e6ff3073 	uxth	r3, r3
  1331d0:	e1520003 	cmp	r2, r3
  1331d4:	0a000001 	beq	1331e0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  1331d8:	e3a03000 	mov	r3, #0
  1331dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  1331e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1331e4:	e5933000 	ldr	r3, [r3]
  1331e8:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  1331ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1331f0:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  1331f4:	e51b3010 	ldr	r3, [fp, #-16]
  1331f8:	e3530000 	cmp	r3, #0
  1331fc:	1affffb1 	bne	1330c8 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  133200:	e51b3010 	ldr	r3, [fp, #-16]
  133204:	e3530000 	cmp	r3, #0
  133208:	1a00002d 	bne	1332c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  13320c:	e51b300c 	ldr	r3, [fp, #-12]
  133210:	e3530000 	cmp	r3, #0
  133214:	0a00001c 	beq	13328c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  133218:	e51b300c 	ldr	r3, [fp, #-12]
  13321c:	e1d330b6 	ldrh	r3, [r3, #6]
  133220:	e6ff2073 	uxth	r2, r3
  133224:	e51b3008 	ldr	r3, [fp, #-8]
  133228:	e1d330b4 	ldrh	r3, [r3, #4]
  13322c:	e6ff3073 	uxth	r3, r3
  133230:	e1520003 	cmp	r2, r3
  133234:	9a000006 	bls	133254 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  133238:	e3090738 	movw	r0, #38712	; 0x9738
  13323c:	e3400014 	movt	r0, #20
  133240:	ebff3fb3 	bl	103114 <rt_kprintf>
  133244:	e300119b 	movw	r1, #411	; 0x19b
  133248:	e3090694 	movw	r0, #38548	; 0x9694
  13324c:	e3400014 	movt	r0, #20
  133250:	ebff5ecf 	bl	10ad94 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  133254:	e51b300c 	ldr	r3, [fp, #-12]
  133258:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  13325c:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  133260:	e51b300c 	ldr	r3, [fp, #-12]
  133264:	e1d330b6 	ldrh	r3, [r3, #6]
  133268:	e6ff2073 	uxth	r2, r3
  13326c:	e51b3008 	ldr	r3, [fp, #-8]
  133270:	e1d330b4 	ldrh	r3, [r3, #4]
  133274:	e6ff3073 	uxth	r3, r3
  133278:	e1520003 	cmp	r2, r3
  13327c:	0a000010 	beq	1332c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  133280:	e3a03000 	mov	r3, #0
  133284:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133288:	ea00000d 	b	1332c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  13328c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133290:	e5933004 	ldr	r3, [r3, #4]
  133294:	e3530000 	cmp	r3, #0
  133298:	0a000006 	beq	1332b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  13329c:	e3090758 	movw	r0, #38744	; 0x9758
  1332a0:	e3400014 	movt	r0, #20
  1332a4:	ebff3f9a 	bl	103114 <rt_kprintf>
  1332a8:	e3a01f69 	mov	r1, #420	; 0x1a4
  1332ac:	e3090694 	movw	r0, #38548	; 0x9694
  1332b0:	e3400014 	movt	r0, #20
  1332b4:	ebff5eb6 	bl	10ad94 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  1332b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1332bc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1332c0:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  1332c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1332c8:	e5d3301e 	ldrb	r3, [r3, #30]
  1332cc:	e2033001 	and	r3, r3, #1
  1332d0:	e3530000 	cmp	r3, #0
  1332d4:	0a000062 	beq	133464 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  1332d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1332dc:	e3530000 	cmp	r3, #0
  1332e0:	0a00005d 	beq	13345c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  1332e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1332e8:	e5933004 	ldr	r3, [r3, #4]
  1332ec:	e3530000 	cmp	r3, #0
  1332f0:	0a000006 	beq	133310 <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  1332f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1332f8:	e5933004 	ldr	r3, [r3, #4]
  1332fc:	e5933004 	ldr	r3, [r3, #4]
  133300:	e1d330b4 	ldrh	r3, [r3, #4]
  133304:	e6ff3073 	uxth	r3, r3
  133308:	e3530000 	cmp	r3, #0
  13330c:	0a000002 	beq	13331c <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  133310:	e3a03000 	mov	r3, #0
  133314:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133318:	ea00004f 	b	13345c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  13331c:	e51b3008 	ldr	r3, [fp, #-8]
  133320:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  133324:	e51b3008 	ldr	r3, [fp, #-8]
  133328:	e5933000 	ldr	r3, [r3]
  13332c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133330:	ea000012 	b	133380 <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  133334:	e51b3010 	ldr	r3, [fp, #-16]
  133338:	e5933004 	ldr	r3, [r3, #4]
  13333c:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  133340:	e51b300c 	ldr	r3, [fp, #-12]
  133344:	e1d330b6 	ldrh	r3, [r3, #6]
  133348:	e6ff2073 	uxth	r2, r3
  13334c:	e51b3008 	ldr	r3, [fp, #-8]
  133350:	e1d330b4 	ldrh	r3, [r3, #4]
  133354:	e6ff3073 	uxth	r3, r3
  133358:	e1520003 	cmp	r2, r3
  13335c:	0a000002 	beq	13336c <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  133360:	e3a03000 	mov	r3, #0
  133364:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  133368:	ea000007 	b	13338c <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  13336c:	e51b3008 	ldr	r3, [fp, #-8]
  133370:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  133374:	e51b3008 	ldr	r3, [fp, #-8]
  133378:	e5933000 	ldr	r3, [r3]
  13337c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133380:	e51b3010 	ldr	r3, [fp, #-16]
  133384:	e3530000 	cmp	r3, #0
  133388:	1affffe9 	bne	133334 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  13338c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133390:	e3530000 	cmp	r3, #0
  133394:	0a000030 	beq	13345c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  133398:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13339c:	e5933004 	ldr	r3, [r3, #4]
  1333a0:	e3530000 	cmp	r3, #0
  1333a4:	1a000006 	bne	1333c4 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  1333a8:	e3090790 	movw	r0, #38800	; 0x9790
  1333ac:	e3400014 	movt	r0, #20
  1333b0:	ebff3f57 	bl	103114 <rt_kprintf>
  1333b4:	e3a01f71 	mov	r1, #452	; 0x1c4
  1333b8:	e3090694 	movw	r0, #38548	; 0x9694
  1333bc:	e3400014 	movt	r0, #20
  1333c0:	ebff5e73 	bl	10ad94 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  1333c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1333c8:	e5933004 	ldr	r3, [r3, #4]
  1333cc:	e5933004 	ldr	r3, [r3, #4]
  1333d0:	e51b2008 	ldr	r2, [fp, #-8]
  1333d4:	e1520003 	cmp	r2, r3
  1333d8:	1a000006 	bne	1333f8 <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  1333dc:	e3090790 	movw	r0, #38800	; 0x9790
  1333e0:	e3400014 	movt	r0, #20
  1333e4:	ebff3f4a 	bl	103114 <rt_kprintf>
  1333e8:	e30011c6 	movw	r1, #454	; 0x1c6
  1333ec:	e3090694 	movw	r0, #38548	; 0x9694
  1333f0:	e3400014 	movt	r0, #20
  1333f4:	ebff5e66 	bl	10ad94 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  1333f8:	e51b3008 	ldr	r3, [fp, #-8]
  1333fc:	e5933000 	ldr	r3, [r3]
  133400:	e3530000 	cmp	r3, #0
  133404:	0a000006 	beq	133424 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  133408:	e30907a0 	movw	r0, #38816	; 0x97a0
  13340c:	e3400014 	movt	r0, #20
  133410:	ebff3f3f 	bl	103114 <rt_kprintf>
  133414:	e3a01f72 	mov	r1, #456	; 0x1c8
  133418:	e3090694 	movw	r0, #38548	; 0x9694
  13341c:	e3400014 	movt	r0, #20
  133420:	ebff5e5b 	bl	10ad94 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  133424:	e51b3008 	ldr	r3, [fp, #-8]
  133428:	e1d330b6 	ldrh	r3, [r3, #6]
  13342c:	e6ff2073 	uxth	r2, r3
  133430:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133434:	e1d331bc 	ldrh	r3, [r3, #28]
  133438:	e1520003 	cmp	r2, r3
  13343c:	0a000006 	beq	13345c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  133440:	e30907c4 	movw	r0, #38852	; 0x97c4
  133444:	e3400014 	movt	r0, #20
  133448:	ebff3f31 	bl	103114 <rt_kprintf>
  13344c:	e30011ca 	movw	r1, #458	; 0x1ca
  133450:	e3090694 	movw	r0, #38548	; 0x9694
  133454:	e3400014 	movt	r0, #20
  133458:	ebff5e4d 	bl	10ad94 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  13345c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133460:	ea000015 	b	1334bc <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  133464:	e3a03000 	mov	r3, #0
  133468:	ea000013 	b	1334bc <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  13346c:	e320f000 	nop	{0}
  133470:	ea000002 	b	133480 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133474:	e320f000 	nop	{0}
  133478:	ea000000 	b	133480 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  13347c:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  133480:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133484:	ebff9e43 	bl	11ad98 <pbuf_clen>
  133488:	e1a03000 	mov	r3, r0
  13348c:	e1a02003 	mov	r2, r3
  133490:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133494:	e3403014 	movt	r3, #20
  133498:	e1d330b0 	ldrh	r3, [r3]
  13349c:	e0433002 	sub	r3, r3, r2
  1334a0:	e6ff2073 	uxth	r2, r3
  1334a4:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1334a8:	e3403014 	movt	r3, #20
  1334ac:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  1334b0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1334b4:	ebff9db2 	bl	11ab84 <pbuf_free>
  return 0;
  1334b8:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  1334bc:	e1a00003 	mov	r0, r3
  1334c0:	e24bd004 	sub	sp, fp, #4
  1334c4:	e8bd8800 	pop	{fp, pc}

001334c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  1334c8:	e92d4800 	push	{fp, lr}
  1334cc:	e28db004 	add	fp, sp, #4
  1334d0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1334d4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  1334d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1334dc:	e3403015 	movt	r3, #21
  1334e0:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  1334e4:	e2833001 	add	r3, r3, #1
  1334e8:	e6ff2073 	uxth	r2, r3
  1334ec:	e30c3a18 	movw	r3, #51736	; 0xca18
  1334f0:	e3403015 	movt	r3, #21
  1334f4:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  1334f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1334fc:	e3403015 	movt	r3, #21
  133500:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  133504:	e2832001 	add	r2, r3, #1
  133508:	e30c3a18 	movw	r3, #51736	; 0xca18
  13350c:	e3403015 	movt	r3, #21
  133510:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133514:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133518:	e5933004 	ldr	r3, [r3, #4]
  13351c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  133520:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133524:	e5d33000 	ldrb	r3, [r3]
  133528:	e203300f 	and	r3, r3, #15
  13352c:	e1a03103 	lsl	r3, r3, #2
  133530:	e3530014 	cmp	r3, #20
  133534:	0a000008 	beq	13355c <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  133538:	e30c3a18 	movw	r3, #51736	; 0xca18
  13353c:	e3403015 	movt	r3, #21
  133540:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  133544:	e2833001 	add	r3, r3, #1
  133548:	e6ff2073 	uxth	r2, r3
  13354c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133550:	e3403015 	movt	r3, #21
  133554:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  133558:	ea00011e 	b	1339d8 <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  13355c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133560:	e1d330b6 	ldrh	r3, [r3, #6]
  133564:	e6ff3073 	uxth	r3, r3
  133568:	e1a00003 	mov	r0, r3
  13356c:	ebff8b4d 	bl	1162a8 <lwip_htons>
  133570:	e1a03000 	mov	r3, r0
  133574:	e7ec3053 	ubfx	r3, r3, #0, #13
  133578:	e6ff3073 	uxth	r3, r3
  13357c:	e1a03183 	lsl	r3, r3, #3
  133580:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  133584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133588:	e1d330b2 	ldrh	r3, [r3, #2]
  13358c:	e6ff3073 	uxth	r3, r3
  133590:	e1a00003 	mov	r0, r3
  133594:	ebff8b43 	bl	1162a8 <lwip_htons>
  133598:	e1a03000 	mov	r3, r0
  13359c:	e1a02003 	mov	r2, r3
  1335a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1335a4:	e5d33000 	ldrb	r3, [r3]
  1335a8:	e6ff3073 	uxth	r3, r3
  1335ac:	e203300f 	and	r3, r3, #15
  1335b0:	e6ff3073 	uxth	r3, r3
  1335b4:	e1a03103 	lsl	r3, r3, #2
  1335b8:	e6ff3073 	uxth	r3, r3
  1335bc:	e0423003 	sub	r3, r2, r3
  1335c0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  1335c4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1335c8:	ebff9df2 	bl	11ad98 <pbuf_clen>
  1335cc:	e1a03000 	mov	r3, r0
  1335d0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  1335d4:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1335d8:	e3403014 	movt	r3, #20
  1335dc:	e1d330b0 	ldrh	r3, [r3]
  1335e0:	e1a02003 	mov	r2, r3
  1335e4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1335e8:	e0823003 	add	r3, r2, r3
  1335ec:	e353000a 	cmp	r3, #10
  1335f0:	da000017 	ble	133654 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  1335f4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1335f8:	e1a01003 	mov	r1, r3
  1335fc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133600:	ebfffdac 	bl	132cb8 <ip_reass_remove_oldest_datagram>
  133604:	e1a03000 	mov	r3, r0
  133608:	e3530000 	cmp	r3, #0
  13360c:	0a000007 	beq	133630 <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  133610:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133614:	e3403014 	movt	r3, #20
  133618:	e1d330b0 	ldrh	r3, [r3]
  13361c:	e1a02003 	mov	r2, r3
  133620:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133624:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133628:	e353000a 	cmp	r3, #10
  13362c:	da000008 	ble	133654 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  133630:	e30c3a18 	movw	r3, #51736	; 0xca18
  133634:	e3403015 	movt	r3, #21
  133638:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  13363c:	e2833001 	add	r3, r3, #1
  133640:	e6ff2073 	uxth	r2, r3
  133644:	e30c3a18 	movw	r3, #51736	; 0xca18
  133648:	e3403015 	movt	r3, #21
  13364c:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  133650:	ea0000e0 	b	1339d8 <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133654:	e30e3be0 	movw	r3, #60384	; 0xebe0
  133658:	e3403014 	movt	r3, #20
  13365c:	e5933000 	ldr	r3, [r3]
  133660:	e50b300c 	str	r3, [fp, #-12]
  133664:	ea00001e 	b	1336e4 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  133668:	e51b300c 	ldr	r3, [fp, #-12]
  13366c:	e5932014 	ldr	r2, [r3, #20]
  133670:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133674:	e593300c 	ldr	r3, [r3, #12]
  133678:	e1520003 	cmp	r2, r3
  13367c:	1a000015 	bne	1336d8 <ip4_reass+0x210>
  133680:	e51b300c 	ldr	r3, [fp, #-12]
  133684:	e5932018 	ldr	r2, [r3, #24]
  133688:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13368c:	e5933010 	ldr	r3, [r3, #16]
  133690:	e1520003 	cmp	r2, r3
  133694:	1a00000f 	bne	1336d8 <ip4_reass+0x210>
  133698:	e51b300c 	ldr	r3, [fp, #-12]
  13369c:	e1d320bc 	ldrh	r2, [r3, #12]
  1336a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1336a4:	e1d330b4 	ldrh	r3, [r3, #4]
  1336a8:	e6ff3073 	uxth	r3, r3
  1336ac:	e1520003 	cmp	r2, r3
  1336b0:	1a000008 	bne	1336d8 <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  1336b4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1336b8:	e3403015 	movt	r3, #21
  1336bc:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  1336c0:	e2833001 	add	r3, r3, #1
  1336c4:	e6ff2073 	uxth	r2, r3
  1336c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1336cc:	e3403015 	movt	r3, #21
  1336d0:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  1336d4:	ea000005 	b	1336f0 <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  1336d8:	e51b300c 	ldr	r3, [fp, #-12]
  1336dc:	e5933000 	ldr	r3, [r3]
  1336e0:	e50b300c 	str	r3, [fp, #-12]
  1336e4:	e51b300c 	ldr	r3, [fp, #-12]
  1336e8:	e3530000 	cmp	r3, #0
  1336ec:	1affffdd 	bne	133668 <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  1336f0:	e51b300c 	ldr	r3, [fp, #-12]
  1336f4:	e3530000 	cmp	r3, #0
  1336f8:	1a000008 	bne	133720 <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  1336fc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133700:	e1a01003 	mov	r1, r3
  133704:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133708:	ebfffdc8 	bl	132e30 <ip_reass_enqueue_new_datagram>
  13370c:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133710:	e51b300c 	ldr	r3, [fp, #-12]
  133714:	e3530000 	cmp	r3, #0
  133718:	1a000017 	bne	13377c <ip4_reass+0x2b4>
      goto nullreturn;
  13371c:	ea0000ad 	b	1339d8 <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133720:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133724:	e1d330b6 	ldrh	r3, [r3, #6]
  133728:	e6ff3073 	uxth	r3, r3
  13372c:	e1a00003 	mov	r0, r3
  133730:	ebff8adc 	bl	1162a8 <lwip_htons>
  133734:	e1a03000 	mov	r3, r0
  133738:	e7ec3053 	ubfx	r3, r3, #0, #13
  13373c:	e3530000 	cmp	r3, #0
  133740:	1a00000d 	bne	13377c <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  133744:	e51b300c 	ldr	r3, [fp, #-12]
  133748:	e1d330be 	ldrh	r3, [r3, #14]
  13374c:	e1a00003 	mov	r0, r3
  133750:	ebff8ad4 	bl	1162a8 <lwip_htons>
  133754:	e1a03000 	mov	r3, r0
  133758:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  13375c:	e3530000 	cmp	r3, #0
  133760:	0a000005 	beq	13377c <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  133764:	e51b300c 	ldr	r3, [fp, #-12]
  133768:	e2833008 	add	r3, r3, #8
  13376c:	e3a02014 	mov	r2, #20
  133770:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133774:	e1a00003 	mov	r0, r3
  133778:	eb0034c1 	bl	140a84 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  13377c:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133780:	e3403014 	movt	r3, #20
  133784:	e1d320b0 	ldrh	r2, [r3]
  133788:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  13378c:	e0823003 	add	r3, r2, r3
  133790:	e6ff2073 	uxth	r2, r3
  133794:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133798:	e3403014 	movt	r3, #20
  13379c:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  1337a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1337a4:	e1d330b6 	ldrh	r3, [r3, #6]
  1337a8:	e6ff3073 	uxth	r3, r3
  1337ac:	e2033020 	and	r3, r3, #32
  1337b0:	e3530000 	cmp	r3, #0
  1337b4:	1a00000b 	bne	1337e8 <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  1337b8:	e51b300c 	ldr	r3, [fp, #-12]
  1337bc:	e5d3301e 	ldrb	r3, [r3, #30]
  1337c0:	e3833001 	orr	r3, r3, #1
  1337c4:	e6ef2073 	uxtb	r2, r3
  1337c8:	e51b300c 	ldr	r3, [fp, #-12]
  1337cc:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  1337d0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1337d4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  1337d8:	e0823003 	add	r3, r2, r3
  1337dc:	e6ff2073 	uxth	r2, r3
  1337e0:	e51b300c 	ldr	r3, [fp, #-12]
  1337e4:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  1337e8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  1337ec:	e51b000c 	ldr	r0, [fp, #-12]
  1337f0:	ebfffdf5 	bl	132fcc <ip_reass_chain_frag_into_datagram_and_validate>
  1337f4:	e1a03000 	mov	r3, r0
  1337f8:	e3530000 	cmp	r3, #0
  1337fc:	0a000073 	beq	1339d0 <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133800:	e51b300c 	ldr	r3, [fp, #-12]
  133804:	e1d331bc 	ldrh	r3, [r3, #28]
  133808:	e2833014 	add	r3, r3, #20
  13380c:	e6ff2073 	uxth	r2, r3
  133810:	e51b300c 	ldr	r3, [fp, #-12]
  133814:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  133818:	e51b300c 	ldr	r3, [fp, #-12]
  13381c:	e5933004 	ldr	r3, [r3, #4]
  133820:	e5933004 	ldr	r3, [r3, #4]
  133824:	e5933000 	ldr	r3, [r3]
  133828:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  13382c:	e51b300c 	ldr	r3, [fp, #-12]
  133830:	e5933004 	ldr	r3, [r3, #4]
  133834:	e5933004 	ldr	r3, [r3, #4]
  133838:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  13383c:	e51b300c 	ldr	r3, [fp, #-12]
  133840:	e2833008 	add	r3, r3, #8
  133844:	e3a02014 	mov	r2, #20
  133848:	e1a01003 	mov	r1, r3
  13384c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133850:	eb00348b 	bl	140a84 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  133854:	e51b300c 	ldr	r3, [fp, #-12]
  133858:	e1d331bc 	ldrh	r3, [r3, #28]
  13385c:	e1a00003 	mov	r0, r3
  133860:	ebff8a90 	bl	1162a8 <lwip_htons>
  133864:	e1a03000 	mov	r3, r0
  133868:	e1a02003 	mov	r2, r3
  13386c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133870:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  133874:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133878:	e3a02000 	mov	r2, #0
  13387c:	e5c32006 	strb	r2, [r3, #6]
  133880:	e3a02000 	mov	r2, #0
  133884:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  133888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13388c:	e3a02000 	mov	r2, #0
  133890:	e5c3200a 	strb	r2, [r3, #10]
  133894:	e3a02000 	mov	r2, #0
  133898:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  13389c:	e3a01014 	mov	r1, #20
  1338a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1338a4:	ebff938e 	bl	1186e4 <inet_chksum>
  1338a8:	e1a03000 	mov	r3, r0
  1338ac:	e1a02003 	mov	r2, r3
  1338b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338b4:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  1338b8:	e51b300c 	ldr	r3, [fp, #-12]
  1338bc:	e5933004 	ldr	r3, [r3, #4]
  1338c0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  1338c4:	ea00000b 	b	1338f8 <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  1338c8:	e51b3008 	ldr	r3, [fp, #-8]
  1338cc:	e5933004 	ldr	r3, [r3, #4]
  1338d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  1338d4:	e3e01013 	mvn	r1, #19
  1338d8:	e51b0008 	ldr	r0, [fp, #-8]
  1338dc:	ebff9c8a 	bl	11ab0c <pbuf_header>
      pbuf_cat(p, r);
  1338e0:	e51b1008 	ldr	r1, [fp, #-8]
  1338e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1338e8:	ebff9d5c 	bl	11ae60 <pbuf_cat>
      r = iprh->next_pbuf;
  1338ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1338f0:	e5933000 	ldr	r3, [r3]
  1338f4:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  1338f8:	e51b3008 	ldr	r3, [fp, #-8]
  1338fc:	e3530000 	cmp	r3, #0
  133900:	1afffff0 	bne	1338c8 <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133904:	e30e3be0 	movw	r3, #60384	; 0xebe0
  133908:	e3403014 	movt	r3, #20
  13390c:	e5933000 	ldr	r3, [r3]
  133910:	e51b200c 	ldr	r2, [fp, #-12]
  133914:	e1520003 	cmp	r2, r3
  133918:	1a000002 	bne	133928 <ip4_reass+0x460>
      ipr_prev = NULL;
  13391c:	e3a03000 	mov	r3, #0
  133920:	e50b3010 	str	r3, [fp, #-16]
  133924:	ea000011 	b	133970 <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133928:	e30e3be0 	movw	r3, #60384	; 0xebe0
  13392c:	e3403014 	movt	r3, #20
  133930:	e5933000 	ldr	r3, [r3]
  133934:	e50b3010 	str	r3, [fp, #-16]
  133938:	ea000007 	b	13395c <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  13393c:	e51b3010 	ldr	r3, [fp, #-16]
  133940:	e5933000 	ldr	r3, [r3]
  133944:	e51b200c 	ldr	r2, [fp, #-12]
  133948:	e1520003 	cmp	r2, r3
  13394c:	0a000006 	beq	13396c <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133950:	e51b3010 	ldr	r3, [fp, #-16]
  133954:	e5933000 	ldr	r3, [r3]
  133958:	e50b3010 	str	r3, [fp, #-16]
  13395c:	e51b3010 	ldr	r3, [fp, #-16]
  133960:	e3530000 	cmp	r3, #0
  133964:	1afffff4 	bne	13393c <ip4_reass+0x474>
  133968:	ea000000 	b	133970 <ip4_reass+0x4a8>
          break;
  13396c:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  133970:	e51b1010 	ldr	r1, [fp, #-16]
  133974:	e51b000c 	ldr	r0, [fp, #-12]
  133978:	ebfffd6e 	bl	132f38 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  13397c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133980:	ebff9d04 	bl	11ad98 <pbuf_clen>
  133984:	e1a03000 	mov	r3, r0
  133988:	e1a02003 	mov	r2, r3
  13398c:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133990:	e3403014 	movt	r3, #20
  133994:	e1d330b0 	ldrh	r3, [r3]
  133998:	e0433002 	sub	r3, r3, r2
  13399c:	e6ff2073 	uxth	r2, r3
  1339a0:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1339a4:	e3403014 	movt	r3, #20
  1339a8:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  1339ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1339b0:	e3403015 	movt	r3, #21
  1339b4:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  1339b8:	e2832001 	add	r2, r3, #1
  1339bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1339c0:	e3403015 	movt	r3, #21
  1339c4:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  1339c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1339cc:	ea00000c 	b	133a04 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  1339d0:	e3a03000 	mov	r3, #0
  1339d4:	ea00000a 	b	133a04 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  1339d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1339dc:	e3403015 	movt	r3, #21
  1339e0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1339e4:	e2833001 	add	r3, r3, #1
  1339e8:	e6ff2073 	uxth	r2, r3
  1339ec:	e30c3a18 	movw	r3, #51736	; 0xca18
  1339f0:	e3403015 	movt	r3, #21
  1339f4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  1339f8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1339fc:	ebff9c60 	bl	11ab84 <pbuf_free>
  return NULL;
  133a00:	e3a03000 	mov	r3, #0
}
  133a04:	e1a00003 	mov	r0, r3
  133a08:	e24bd004 	sub	sp, fp, #4
  133a0c:	e8bd8800 	pop	{fp, pc}

00133a10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133a10:	e92d4800 	push	{fp, lr}
  133a14:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  133a18:	e3002286 	movw	r2, #646	; 0x286
  133a1c:	e3091694 	movw	r1, #38548	; 0x9694
  133a20:	e3401014 	movt	r1, #20
  133a24:	e3a00006 	mov	r0, #6
  133a28:	ebff94df 	bl	118dac <memp_malloc_fn>
  133a2c:	e1a03000 	mov	r3, r0
}
  133a30:	e1a00003 	mov	r0, r3
  133a34:	e8bd8800 	pop	{fp, pc}

00133a38 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  133a38:	e92d4800 	push	{fp, lr}
  133a3c:	e28db004 	add	fp, sp, #4
  133a40:	e24dd008 	sub	sp, sp, #8
  133a44:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  133a48:	e51b3008 	ldr	r3, [fp, #-8]
  133a4c:	e3530000 	cmp	r3, #0
  133a50:	1a000006 	bne	133a70 <ip_frag_free_pbuf_custom_ref+0x38>
  133a54:	e30907f4 	movw	r0, #38900	; 0x97f4
  133a58:	e3400014 	movt	r0, #20
  133a5c:	ebff3dac 	bl	103114 <rt_kprintf>
  133a60:	e300128d 	movw	r1, #653	; 0x28d
  133a64:	e3090694 	movw	r0, #38548	; 0x9694
  133a68:	e3400014 	movt	r0, #20
  133a6c:	ebff5cc8 	bl	10ad94 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133a70:	e51b1008 	ldr	r1, [fp, #-8]
  133a74:	e3a00006 	mov	r0, #6
  133a78:	ebff9533 	bl	118f4c <memp_free>
}
  133a7c:	e320f000 	nop	{0}
  133a80:	e24bd004 	sub	sp, fp, #4
  133a84:	e8bd8800 	pop	{fp, pc}

00133a88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133a88:	e92d4800 	push	{fp, lr}
  133a8c:	e28db004 	add	fp, sp, #4
  133a90:	e24dd010 	sub	sp, sp, #16
  133a94:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133a98:	e51b3010 	ldr	r3, [fp, #-16]
  133a9c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133aa0:	e51b3008 	ldr	r3, [fp, #-8]
  133aa4:	e3530000 	cmp	r3, #0
  133aa8:	1a000006 	bne	133ac8 <ipfrag_free_pbuf_custom+0x40>
  133aac:	e3090800 	movw	r0, #38912	; 0x9800
  133ab0:	e3400014 	movt	r0, #20
  133ab4:	ebff3d96 	bl	103114 <rt_kprintf>
  133ab8:	e3001297 	movw	r1, #663	; 0x297
  133abc:	e3090694 	movw	r0, #38548	; 0x9694
  133ac0:	e3400014 	movt	r0, #20
  133ac4:	ebff5cb2 	bl	10ad94 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133ac8:	e51b2008 	ldr	r2, [fp, #-8]
  133acc:	e51b3010 	ldr	r3, [fp, #-16]
  133ad0:	e1520003 	cmp	r2, r3
  133ad4:	0a000006 	beq	133af4 <ipfrag_free_pbuf_custom+0x6c>
  133ad8:	e309080c 	movw	r0, #38924	; 0x980c
  133adc:	e3400014 	movt	r0, #20
  133ae0:	ebff3d8b 	bl	103114 <rt_kprintf>
  133ae4:	e3a01fa6 	mov	r1, #664	; 0x298
  133ae8:	e3090694 	movw	r0, #38548	; 0x9694
  133aec:	e3400014 	movt	r0, #20
  133af0:	ebff5ca7 	bl	10ad94 <sys_arch_assert>
  if (pcr->original != NULL) {
  133af4:	e51b3008 	ldr	r3, [fp, #-8]
  133af8:	e5933014 	ldr	r3, [r3, #20]
  133afc:	e3530000 	cmp	r3, #0
  133b00:	0a000003 	beq	133b14 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  133b04:	e51b3008 	ldr	r3, [fp, #-8]
  133b08:	e5933014 	ldr	r3, [r3, #20]
  133b0c:	e1a00003 	mov	r0, r3
  133b10:	ebff9c1b 	bl	11ab84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  133b14:	e51b0008 	ldr	r0, [fp, #-8]
  133b18:	ebffffc6 	bl	133a38 <ip_frag_free_pbuf_custom_ref>
}
  133b1c:	e320f000 	nop	{0}
  133b20:	e24bd004 	sub	sp, fp, #4
  133b24:	e8bd8800 	pop	{fp, pc}

00133b28 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  133b28:	e92d4800 	push	{fp, lr}
  133b2c:	e28db004 	add	fp, sp, #4
  133b30:	e24dd048 	sub	sp, sp, #72	; 0x48
  133b34:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133b38:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133b3c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133b40:	e3a03000 	mov	r3, #0
  133b44:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133b48:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133b4c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133b50:	e2433014 	sub	r3, r3, #20
  133b54:	e2832007 	add	r2, r3, #7
  133b58:	e3530000 	cmp	r3, #0
  133b5c:	b1a03002 	movlt	r3, r2
  133b60:	a1a03003 	movge	r3, r3
  133b64:	e1a031c3 	asr	r3, r3, #3
  133b68:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133b6c:	e3a03014 	mov	r3, #20
  133b70:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133b74:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133b78:	e5933004 	ldr	r3, [r3, #4]
  133b7c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133b80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133b84:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133b88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133b8c:	e5d33000 	ldrb	r3, [r3]
  133b90:	e203300f 	and	r3, r3, #15
  133b94:	e1a03103 	lsl	r3, r3, #2
  133b98:	e3530014 	cmp	r3, #20
  133b9c:	0a000008 	beq	133bc4 <ip4_frag+0x9c>
  133ba0:	e3090818 	movw	r0, #38936	; 0x9818
  133ba4:	e3400014 	movt	r0, #20
  133ba8:	ebff3d59 	bl	103114 <rt_kprintf>
  133bac:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133bb0:	e3090694 	movw	r0, #38548	; 0x9694
  133bb4:	e3400014 	movt	r0, #20
  133bb8:	ebff5c75 	bl	10ad94 <sys_arch_assert>
  133bbc:	e3e03005 	mvn	r3, #5
  133bc0:	ea0000ed 	b	133f7c <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133bc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133bc8:	e1d330b6 	ldrh	r3, [r3, #6]
  133bcc:	e6ff3073 	uxth	r3, r3
  133bd0:	e1a00003 	mov	r0, r3
  133bd4:	ebff89b3 	bl	1162a8 <lwip_htons>
  133bd8:	e1a03000 	mov	r3, r0
  133bdc:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133be0:	e15b31b0 	ldrh	r3, [fp, #-16]
  133be4:	e7ec3053 	ubfx	r3, r3, #0, #13
  133be8:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133bec:	e15b31b0 	ldrh	r3, [fp, #-16]
  133bf0:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133bf4:	e3530000 	cmp	r3, #0
  133bf8:	0a000008 	beq	133c20 <ip4_frag+0xf8>
  133bfc:	e3090840 	movw	r0, #38976	; 0x9840
  133c00:	e3400014 	movt	r0, #20
  133c04:	ebff3d42 	bl	103114 <rt_kprintf>
  133c08:	e30012c5 	movw	r1, #709	; 0x2c5
  133c0c:	e3090694 	movw	r0, #38548	; 0x9694
  133c10:	e3400014 	movt	r0, #20
  133c14:	ebff5c5e 	bl	10ad94 <sys_arch_assert>
  133c18:	e3e03005 	mvn	r3, #5
  133c1c:	ea0000d6 	b	133f7c <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133c20:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133c24:	e1d330b8 	ldrh	r3, [r3, #8]
  133c28:	e2433014 	sub	r3, r3, #20
  133c2c:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133c30:	ea0000bc 	b	133f28 <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133c34:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133c38:	e1a02183 	lsl	r2, r3, #3
  133c3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  133c40:	e1520003 	cmp	r2, r3
  133c44:	b1a03002 	movlt	r3, r2
  133c48:	a1a03003 	movge	r3, r3
  133c4c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133c50:	e3a02000 	mov	r2, #0
  133c54:	e3a01014 	mov	r1, #20
  133c58:	e3a00002 	mov	r0, #2
  133c5c:	ebff98c1 	bl	119f68 <pbuf_alloc>
  133c60:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133c64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133c68:	e3530000 	cmp	r3, #0
  133c6c:	0a0000b9 	beq	133f58 <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133c70:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133c74:	e1d330ba 	ldrh	r3, [r3, #10]
  133c78:	e3530013 	cmp	r3, #19
  133c7c:	8a000006 	bhi	133c9c <ip4_frag+0x174>
  133c80:	e309085c 	movw	r0, #39004	; 0x985c
  133c84:	e3400014 	movt	r0, #20
  133c88:	ebff3d21 	bl	103114 <rt_kprintf>
  133c8c:	e3a01fba 	mov	r1, #744	; 0x2e8
  133c90:	e3090694 	movw	r0, #38548	; 0x9694
  133c94:	e3400014 	movt	r0, #20
  133c98:	ebff5c3d 	bl	10ad94 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133c9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133ca0:	e5933004 	ldr	r3, [r3, #4]
  133ca4:	e3a02014 	mov	r2, #20
  133ca8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133cac:	e1a00003 	mov	r0, r3
  133cb0:	eb003373 	bl	140a84 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133cb4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133cb8:	e5933004 	ldr	r3, [r3, #4]
  133cbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133cc0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133cc4:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133cc8:	ea000049 	b	133df4 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133ccc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133cd0:	e1d320ba 	ldrh	r2, [r3, #10]
  133cd4:	e15b30be 	ldrh	r3, [fp, #-14]
  133cd8:	e0423003 	sub	r3, r2, r3
  133cdc:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  133ce0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  133ce4:	e15b30b8 	ldrh	r3, [fp, #-8]
  133ce8:	e1520003 	cmp	r2, r3
  133cec:	31a03002 	movcc	r3, r2
  133cf0:	21a03003 	movcs	r3, r3
  133cf4:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  133cf8:	e15b30b6 	ldrh	r3, [fp, #-6]
  133cfc:	e3530000 	cmp	r3, #0
  133d00:	1a000005 	bne	133d1c <ip4_frag+0x1f4>
        poff = 0;
  133d04:	e3a03000 	mov	r3, #0
  133d08:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133d0c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133d10:	e5933000 	ldr	r3, [r3]
  133d14:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  133d18:	ea000035 	b	133df4 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  133d1c:	ebffff3b 	bl	133a10 <ip_frag_alloc_pbuf_custom_ref>
  133d20:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  133d24:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133d28:	e3530000 	cmp	r3, #0
  133d2c:	1a000002 	bne	133d3c <ip4_frag+0x214>
        pbuf_free(rambuf);
  133d30:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133d34:	ebff9b92 	bl	11ab84 <pbuf_free>
        goto memerr;
  133d38:	ea000087 	b	133f5c <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133d3c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  133d40:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133d44:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133d48:	e15b30be 	ldrh	r3, [fp, #-14]
  133d4c:	e0823003 	add	r3, r2, r3
  133d50:	e15b10b6 	ldrh	r1, [fp, #-6]
  133d54:	e15b20b6 	ldrh	r2, [fp, #-6]
  133d58:	e58d2004 	str	r2, [sp, #4]
  133d5c:	e58d3000 	str	r3, [sp]
  133d60:	e1a03000 	mov	r3, r0
  133d64:	e3a02002 	mov	r2, #2
  133d68:	e3a00004 	mov	r0, #4
  133d6c:	ebff99e2 	bl	11a4fc <pbuf_alloced_custom>
  133d70:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  133d74:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  133d78:	e3530000 	cmp	r3, #0
  133d7c:	1a000004 	bne	133d94 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  133d80:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  133d84:	ebffff2b 	bl	133a38 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  133d88:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133d8c:	ebff9b7c 	bl	11ab84 <pbuf_free>
        goto memerr;
  133d90:	ea000071 	b	133f5c <ip4_frag+0x434>
      }
      pbuf_ref(p);
  133d94:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  133d98:	ebff9c13 	bl	11adec <pbuf_ref>
      pcr->original = p;
  133d9c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133da0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  133da4:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  133da8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  133dac:	e3033a88 	movw	r3, #14984	; 0x3a88
  133db0:	e3403013 	movt	r3, #19
  133db4:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  133db8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  133dbc:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133dc0:	ebff9c26 	bl	11ae60 <pbuf_cat>
      left_to_copy -= newpbuflen;
  133dc4:	e15b20b8 	ldrh	r2, [fp, #-8]
  133dc8:	e15b30b6 	ldrh	r3, [fp, #-6]
  133dcc:	e0423003 	sub	r3, r2, r3
  133dd0:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  133dd4:	e15b30b8 	ldrh	r3, [fp, #-8]
  133dd8:	e3530000 	cmp	r3, #0
  133ddc:	0a000004 	beq	133df4 <ip4_frag+0x2cc>
        poff = 0;
  133de0:	e3a03000 	mov	r3, #0
  133de4:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133de8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133dec:	e5933000 	ldr	r3, [r3]
  133df0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  133df4:	e15b30b8 	ldrh	r3, [fp, #-8]
  133df8:	e3530000 	cmp	r3, #0
  133dfc:	1affffb2 	bne	133ccc <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  133e00:	e15b20be 	ldrh	r2, [fp, #-14]
  133e04:	e15b30b6 	ldrh	r3, [fp, #-6]
  133e08:	e0823003 	add	r3, r2, r3
  133e0c:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  133e10:	e15b20ba 	ldrh	r2, [fp, #-10]
  133e14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133e18:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133e1c:	e2433014 	sub	r3, r3, #20
  133e20:	e1520003 	cmp	r2, r3
  133e24:	d3a03001 	movle	r3, #1
  133e28:	c3a03000 	movgt	r3, #0
  133e2c:	e6ef3073 	uxtb	r3, r3
  133e30:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  133e34:	e15b30bc 	ldrh	r3, [fp, #-12]
  133e38:	e7ec3053 	ubfx	r3, r3, #0, #13
  133e3c:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  133e40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133e44:	e3530000 	cmp	r3, #0
  133e48:	1a000002 	bne	133e58 <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  133e4c:	e15b31b0 	ldrh	r3, [fp, #-16]
  133e50:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  133e54:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  133e58:	e15b31b0 	ldrh	r3, [fp, #-16]
  133e5c:	e1a00003 	mov	r0, r3
  133e60:	ebff8910 	bl	1162a8 <lwip_htons>
  133e64:	e1a03000 	mov	r3, r0
  133e68:	e1a02003 	mov	r2, r3
  133e6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133e70:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  133e74:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133e78:	e2833014 	add	r3, r3, #20
  133e7c:	e6ff3073 	uxth	r3, r3
  133e80:	e1a00003 	mov	r0, r3
  133e84:	ebff8907 	bl	1162a8 <lwip_htons>
  133e88:	e1a03000 	mov	r3, r0
  133e8c:	e1a02003 	mov	r2, r3
  133e90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133e94:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  133e98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133e9c:	e3a02000 	mov	r2, #0
  133ea0:	e5c3200a 	strb	r2, [r3, #10]
  133ea4:	e3a02000 	mov	r2, #0
  133ea8:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  133eac:	e3a01014 	mov	r1, #20
  133eb0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  133eb4:	ebff920a 	bl	1186e4 <inet_chksum>
  133eb8:	e1a03000 	mov	r3, r0
  133ebc:	e1a02003 	mov	r2, r3
  133ec0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133ec4:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  133ec8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133ecc:	e5933014 	ldr	r3, [r3, #20]
  133ed0:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  133ed4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  133ed8:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  133edc:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  133ee0:	e30c3a18 	movw	r3, #51736	; 0xca18
  133ee4:	e3403015 	movt	r3, #21
  133ee8:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  133eec:	e2833001 	add	r3, r3, #1
  133ef0:	e6ff2073 	uxth	r2, r3
  133ef4:	e30c3a18 	movw	r3, #51736	; 0xca18
  133ef8:	e3403015 	movt	r3, #21
  133efc:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  133f00:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133f04:	ebff9b1e 	bl	11ab84 <pbuf_free>
    left -= fragsize;
  133f08:	e15b20ba 	ldrh	r2, [fp, #-10]
  133f0c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133f10:	e0423003 	sub	r3, r2, r3
  133f14:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  133f18:	e15b20bc 	ldrh	r2, [fp, #-12]
  133f1c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f20:	e0823003 	add	r3, r2, r3
  133f24:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  133f28:	e15b30ba 	ldrh	r3, [fp, #-10]
  133f2c:	e3530000 	cmp	r3, #0
  133f30:	1affff3f 	bne	133c34 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  133f34:	e30c3a18 	movw	r3, #51736	; 0xca18
  133f38:	e3403015 	movt	r3, #21
  133f3c:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  133f40:	e2832001 	add	r2, r3, #1
  133f44:	e30c3a18 	movw	r3, #51736	; 0xca18
  133f48:	e3403015 	movt	r3, #21
  133f4c:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  133f50:	e3a03000 	mov	r3, #0
  133f54:	ea000008 	b	133f7c <ip4_frag+0x454>
      goto memerr;
  133f58:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  133f5c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133f60:	e3403015 	movt	r3, #21
  133f64:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  133f68:	e2832001 	add	r2, r3, #1
  133f6c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133f70:	e3403015 	movt	r3, #21
  133f74:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  133f78:	e3e03000 	mvn	r3, #0
}
  133f7c:	e1a00003 	mov	r0, r3
  133f80:	e24bd004 	sub	sp, fp, #4
  133f84:	e8bd8800 	pop	{fp, pc}

00133f88 <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  133f88:	e92d4800 	push	{fp, lr}
  133f8c:	e28db004 	add	fp, sp, #4
  133f90:	e24dd010 	sub	sp, sp, #16
  133f94:	e50b0010 	str	r0, [fp, #-16]
  133f98:	e1a03001 	mov	r3, r1
  133f9c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  133fa0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133fa4:	e2433008 	sub	r3, r3, #8
  133fa8:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  133fac:	e51b3010 	ldr	r3, [fp, #-16]
  133fb0:	e3a02008 	mov	r2, #8
  133fb4:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  133fb8:	e51b3010 	ldr	r3, [fp, #-16]
  133fbc:	e3a02000 	mov	r2, #0
  133fc0:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  133fc4:	e51b3010 	ldr	r3, [fp, #-16]
  133fc8:	e3a02000 	mov	r2, #0
  133fcc:	e5c32002 	strb	r2, [r3, #2]
  133fd0:	e3a02000 	mov	r2, #0
  133fd4:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  133fd8:	e51b2010 	ldr	r2, [fp, #-16]
  133fdc:	e3a03000 	mov	r3, #0
  133fe0:	e1e03003 	mvn	r3, r3
  133fe4:	e2033050 	and	r3, r3, #80	; 0x50
  133fe8:	e1e03003 	mvn	r3, r3
  133fec:	e5c23004 	strb	r3, [r2, #4]
  133ff0:	e3a03000 	mov	r3, #0
  133ff4:	e1e03003 	mvn	r3, r3
  133ff8:	e2033050 	and	r3, r3, #80	; 0x50
  133ffc:	e1e03003 	mvn	r3, r3
  134000:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  134004:	e30e3be6 	movw	r3, #60390	; 0xebe6
  134008:	e3403014 	movt	r3, #20
  13400c:	e1d330b0 	ldrh	r3, [r3]
  134010:	e2833001 	add	r3, r3, #1
  134014:	e6ff2073 	uxth	r2, r3
  134018:	e30e3be6 	movw	r3, #60390	; 0xebe6
  13401c:	e3403014 	movt	r3, #20
  134020:	e1c320b0 	strh	r2, [r3]
  134024:	e30e3be6 	movw	r3, #60390	; 0xebe6
  134028:	e3403014 	movt	r3, #20
  13402c:	e1d330b0 	ldrh	r3, [r3]
  134030:	e1a00003 	mov	r0, r3
  134034:	ebff889b 	bl	1162a8 <lwip_htons>
  134038:	e1a03000 	mov	r3, r0
  13403c:	e1a02003 	mov	r2, r3
  134040:	e51b3010 	ldr	r3, [fp, #-16]
  134044:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  134048:	e3a03000 	mov	r3, #0
  13404c:	e50b3008 	str	r3, [fp, #-8]
  134050:	ea000009 	b	13407c <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  134054:	e51b3008 	ldr	r3, [fp, #-8]
  134058:	e2833008 	add	r3, r3, #8
  13405c:	e51b2010 	ldr	r2, [fp, #-16]
  134060:	e0823003 	add	r3, r2, r3
  134064:	e51b2008 	ldr	r2, [fp, #-8]
  134068:	e6ef2072 	uxtb	r2, r2
  13406c:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  134070:	e51b3008 	ldr	r3, [fp, #-8]
  134074:	e2833001 	add	r3, r3, #1
  134078:	e50b3008 	str	r3, [fp, #-8]
  13407c:	e51b2008 	ldr	r2, [fp, #-8]
  134080:	e51b300c 	ldr	r3, [fp, #-12]
  134084:	e1520003 	cmp	r2, r3
  134088:	3afffff1 	bcc	134054 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  13408c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134090:	e1a01003 	mov	r1, r3
  134094:	e51b0010 	ldr	r0, [fp, #-16]
  134098:	ebff9191 	bl	1186e4 <inet_chksum>
  13409c:	e1a03000 	mov	r3, r0
  1340a0:	e1a02003 	mov	r2, r3
  1340a4:	e51b3010 	ldr	r3, [fp, #-16]
  1340a8:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  1340ac:	e320f000 	nop	{0}
  1340b0:	e24bd004 	sub	sp, fp, #4
  1340b4:	e8bd8800 	pop	{fp, pc}

001340b8 <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  1340b8:	e92d4800 	push	{fp, lr}
  1340bc:	e28db004 	add	fp, sp, #4
  1340c0:	e24dd038 	sub	sp, sp, #56	; 0x38
  1340c4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1340c8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1340cc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  1340d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1340d4:	e2833008 	add	r3, r3, #8
  1340d8:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  1340dc:	e51b3008 	ldr	r3, [fp, #-8]
  1340e0:	e3530801 	cmp	r3, #65536	; 0x10000
  1340e4:	ba000006 	blt	134104 <lwip_ping_send+0x4c>
  1340e8:	e309087c 	movw	r0, #39036	; 0x987c
  1340ec:	e3400014 	movt	r0, #20
  1340f0:	ebff3c07 	bl	103114 <rt_kprintf>
  1340f4:	e3a01054 	mov	r1, #84	; 0x54
  1340f8:	e3090894 	movw	r0, #39060	; 0x9894
  1340fc:	e3400014 	movt	r0, #20
  134100:	ebff5b23 	bl	10ad94 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  134104:	e51b3008 	ldr	r3, [fp, #-8]
  134108:	e1a00003 	mov	r0, r3
  13410c:	ebff3ba0 	bl	102f94 <rt_malloc>
  134110:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134114:	e51b300c 	ldr	r3, [fp, #-12]
  134118:	e3530000 	cmp	r3, #0
  13411c:	1a000001 	bne	134128 <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  134120:	e3e03000 	mvn	r3, #0
  134124:	ea00001e 	b	1341a4 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  134128:	e51b3008 	ldr	r3, [fp, #-8]
  13412c:	e6ff3073 	uxth	r3, r3
  134130:	e1a01003 	mov	r1, r3
  134134:	e51b000c 	ldr	r0, [fp, #-12]
  134138:	ebffff92 	bl	133f88 <ping_prepare_echo>

    to.sin_len = sizeof(to);
  13413c:	e3a03010 	mov	r3, #16
  134140:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  134144:	e3a03002 	mov	r3, #2
  134148:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  13414c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134150:	e5933000 	ldr	r3, [r3]
  134154:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  134158:	e51b2008 	ldr	r2, [fp, #-8]
  13415c:	e3a03010 	mov	r3, #16
  134160:	e58d3004 	str	r3, [sp, #4]
  134164:	e24b3020 	sub	r3, fp, #32
  134168:	e58d3000 	str	r3, [sp]
  13416c:	e3a03000 	mov	r3, #0
  134170:	e51b100c 	ldr	r1, [fp, #-12]
  134174:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134178:	ebff797a 	bl	112768 <lwip_sendto>
  13417c:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  134180:	e51b000c 	ldr	r0, [fp, #-12]
  134184:	ebff3b8c 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  134188:	e51b2010 	ldr	r2, [fp, #-16]
  13418c:	e51b3008 	ldr	r3, [fp, #-8]
  134190:	e1520003 	cmp	r2, r3
  134194:	1a000001 	bne	1341a0 <lwip_ping_send+0xe8>
  134198:	e3a03000 	mov	r3, #0
  13419c:	ea000000 	b	1341a4 <lwip_ping_send+0xec>
  1341a0:	e3e03005 	mvn	r3, #5
}
  1341a4:	e1a00003 	mov	r0, r3
  1341a8:	e24bd004 	sub	sp, fp, #4
  1341ac:	e8bd8800 	pop	{fp, pc}

001341b0 <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  1341b0:	e92d4810 	push	{r4, fp, lr}
  1341b4:	e28db008 	add	fp, sp, #8
  1341b8:	e24dd074 	sub	sp, sp, #116	; 0x74
  1341bc:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  1341c0:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  1341c4:	e3a03010 	mov	r3, #16
  1341c8:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1341cc:	ea000024 	b	134264 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  1341d0:	e51b3010 	ldr	r3, [fp, #-16]
  1341d4:	e353001b 	cmp	r3, #27
  1341d8:	da000021 	ble	134264 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  1341dc:	e24b3058 	sub	r3, fp, #88	; 0x58
  1341e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  1341e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1341e8:	e5d33000 	ldrb	r3, [r3]
  1341ec:	e203300f 	and	r3, r3, #15
  1341f0:	e1a03103 	lsl	r3, r3, #2
  1341f4:	e1a02003 	mov	r2, r3
  1341f8:	e24b3058 	sub	r3, fp, #88	; 0x58
  1341fc:	e0833002 	add	r3, r3, r2
  134200:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  134204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134208:	e1d330b4 	ldrh	r3, [r3, #4]
  13420c:	e6ff3073 	uxth	r3, r3
  134210:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134214:	e1530002 	cmp	r3, r2
  134218:	1a000011 	bne	134264 <lwip_ping_recv+0xb4>
  13421c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134220:	e1d330b6 	ldrh	r3, [r3, #6]
  134224:	e6ff4073 	uxth	r4, r3
  134228:	e30e3be6 	movw	r3, #60390	; 0xebe6
  13422c:	e3403014 	movt	r3, #20
  134230:	e1d330b0 	ldrh	r3, [r3]
  134234:	e1a00003 	mov	r0, r3
  134238:	ebff881a 	bl	1162a8 <lwip_htons>
  13423c:	e1a03000 	mov	r3, r0
  134240:	e1540003 	cmp	r4, r3
  134244:	1a000006 	bne	134264 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  134248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13424c:	e5d33008 	ldrb	r3, [r3, #8]
  134250:	e1a02003 	mov	r2, r3
  134254:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  134258:	e5832000 	str	r2, [r3]
                return len;
  13425c:	e51b3010 	ldr	r3, [fp, #-16]
  134260:	ea00000d 	b	13429c <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134264:	e24b1058 	sub	r1, fp, #88	; 0x58
  134268:	e24b305c 	sub	r3, fp, #92	; 0x5c
  13426c:	e58d3004 	str	r3, [sp, #4]
  134270:	e24b306c 	sub	r3, fp, #108	; 0x6c
  134274:	e58d3000 	str	r3, [sp]
  134278:	e3a03000 	mov	r3, #0
  13427c:	e3a02040 	mov	r2, #64	; 0x40
  134280:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  134284:	ebff75cc 	bl	1119bc <lwip_recvfrom>
  134288:	e50b0010 	str	r0, [fp, #-16]
  13428c:	e51b3010 	ldr	r3, [fp, #-16]
  134290:	e3530000 	cmp	r3, #0
  134294:	caffffcd 	bgt	1341d0 <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  134298:	e51b3010 	ldr	r3, [fp, #-16]
}
  13429c:	e1a00003 	mov	r0, r3
  1342a0:	e24bd008 	sub	sp, fp, #8
  1342a4:	e8bd8810 	pop	{r4, fp, pc}

001342a8 <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  1342a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1342ac:	e28db000 	add	fp, sp, #0
  1342b0:	e24dd00c 	sub	sp, sp, #12
  1342b4:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1342b8:	e51b3008 	ldr	r3, [fp, #-8]
  1342bc:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1342c0:	e5832010 	str	r2, [r3, #16]
}
  1342c4:	e320f000 	nop	{0}
  1342c8:	e28bd000 	add	sp, fp, #0
  1342cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1342d0:	e12fff1e 	bx	lr

001342d4 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  1342d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1342d8:	e28db000 	add	fp, sp, #0
  1342dc:	e24dd00c 	sub	sp, sp, #12
  1342e0:	e50b0008 	str	r0, [fp, #-8]
  1342e4:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  1342e8:	e51b3008 	ldr	r3, [fp, #-8]
  1342ec:	e5932008 	ldr	r2, [r3, #8]
  1342f0:	e51b300c 	ldr	r3, [fp, #-12]
  1342f4:	e1822003 	orr	r2, r2, r3
  1342f8:	e51b3008 	ldr	r3, [fp, #-8]
  1342fc:	e5832008 	str	r2, [r3, #8]
}
  134300:	e320f000 	nop	{0}
  134304:	e28bd000 	add	sp, fp, #0
  134308:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13430c:	e12fff1e 	bx	lr

00134310 <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  134310:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134314:	e28db000 	add	fp, sp, #0
  134318:	e24dd00c 	sub	sp, sp, #12
  13431c:	e50b0008 	str	r0, [fp, #-8]
  134320:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  134324:	e51b3008 	ldr	r3, [fp, #-8]
  134328:	e5932008 	ldr	r2, [r3, #8]
  13432c:	e51b300c 	ldr	r3, [fp, #-12]
  134330:	e1e03003 	mvn	r3, r3
  134334:	e0022003 	and	r2, r2, r3
  134338:	e51b3008 	ldr	r3, [fp, #-8]
  13433c:	e5832008 	str	r2, [r3, #8]
}
  134340:	e320f000 	nop	{0}
  134344:	e28bd000 	add	sp, fp, #0
  134348:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13434c:	e12fff1e 	bx	lr

00134350 <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  134350:	e92d4800 	push	{fp, lr}
  134354:	e28db004 	add	fp, sp, #4
  134358:	e24dd008 	sub	sp, sp, #8
  13435c:	e50b0008 	str	r0, [fp, #-8]
  134360:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  134364:	e51b300c 	ldr	r3, [fp, #-12]
  134368:	e3530000 	cmp	r3, #0
  13436c:	0a000013 	beq	1343c0 <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  134370:	e30908d8 	movw	r0, #39128	; 0x98d8
  134374:	e3400014 	movt	r0, #20
  134378:	ebff3b65 	bl	103114 <rt_kprintf>
  13437c:	e51b3008 	ldr	r3, [fp, #-8]
  134380:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134384:	e1a01003 	mov	r1, r3
  134388:	e30908ec 	movw	r0, #39148	; 0x98ec
  13438c:	e3400014 	movt	r0, #20
  134390:	ebff3b5f 	bl	103114 <rt_kprintf>
  134394:	e30908fc 	movw	r0, #39164	; 0x98fc
  134398:	e3400014 	movt	r0, #20
  13439c:	ebff3b5c 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  1343a0:	e51b3008 	ldr	r3, [fp, #-8]
  1343a4:	e3a01001 	mov	r1, #1
  1343a8:	e1a00003 	mov	r0, r3
  1343ac:	ebffd532 	bl	12987c <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  1343b0:	e51b3008 	ldr	r3, [fp, #-8]
  1343b4:	e3a02001 	mov	r2, #1
  1343b8:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  1343bc:	ea000012 	b	13440c <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  1343c0:	e30908d8 	movw	r0, #39128	; 0x98d8
  1343c4:	e3400014 	movt	r0, #20
  1343c8:	ebff3b51 	bl	103114 <rt_kprintf>
  1343cc:	e51b3008 	ldr	r3, [fp, #-8]
  1343d0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1343d4:	e1a01003 	mov	r1, r3
  1343d8:	e3090904 	movw	r0, #39172	; 0x9904
  1343dc:	e3400014 	movt	r0, #20
  1343e0:	ebff3b4b 	bl	103114 <rt_kprintf>
  1343e4:	e30908fc 	movw	r0, #39164	; 0x98fc
  1343e8:	e3400014 	movt	r0, #20
  1343ec:	ebff3b48 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  1343f0:	e51b3008 	ldr	r3, [fp, #-8]
  1343f4:	e3a01000 	mov	r1, #0
  1343f8:	e1a00003 	mov	r0, r3
  1343fc:	ebffd51e 	bl	12987c <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  134400:	e51b3008 	ldr	r3, [fp, #-8]
  134404:	e3a02000 	mov	r2, #0
  134408:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  13440c:	e320f000 	nop	{0}
  134410:	e24bd004 	sub	sp, fp, #4
  134414:	e8bd8800 	pop	{fp, pc}

00134418 <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  134418:	e92d4800 	push	{fp, lr}
  13441c:	e28db004 	add	fp, sp, #4
  134420:	e24dd018 	sub	sp, sp, #24
  134424:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134428:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  13442c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134430:	e2833a02 	add	r3, r3, #8192	; 0x2000
  134434:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  134438:	e51b0008 	ldr	r0, [fp, #-8]
  13443c:	eb0022ff 	bl	13d040 <malloc>
  134440:	e1a03000 	mov	r3, r0
  134444:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  134448:	e51b2008 	ldr	r2, [fp, #-8]
  13444c:	e3a01000 	mov	r1, #0
  134450:	e51b000c 	ldr	r0, [fp, #-12]
  134454:	ebff3b9b 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  134458:	e3003fff 	movw	r3, #4095	; 0xfff
  13445c:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  134460:	e51b300c 	ldr	r3, [fp, #-12]
  134464:	e2833a01 	add	r3, r3, #4096	; 0x1000
  134468:	e1a02003 	mov	r2, r3
  13446c:	e51b3010 	ldr	r3, [fp, #-16]
  134470:	e1e03003 	mvn	r3, r3
  134474:	e0033002 	and	r3, r3, r2
  134478:	e1a02003 	mov	r2, r3
  13447c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134480:	e5832000 	str	r2, [r3]

    return;
  134484:	e320f000 	nop	{0}
}
  134488:	e24bd004 	sub	sp, fp, #4
  13448c:	e8bd8800 	pop	{fp, pc}

00134490 <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  134490:	e92d4800 	push	{fp, lr}
  134494:	e28db004 	add	fp, sp, #4
  134498:	e24dd030 	sub	sp, sp, #48	; 0x30
  13449c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  1344a0:	e3a03000 	mov	r3, #0
  1344a4:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  1344a8:	e3a03000 	mov	r3, #0
  1344ac:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  1344b0:	e3a03000 	mov	r3, #0
  1344b4:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  1344b8:	e3a03000 	mov	r3, #0
  1344bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1344c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1344c4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1344c8:	e3530701 	cmp	r3, #262144	; 0x40000
  1344cc:	8a000003 	bhi	1344e0 <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  1344d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1344d4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1344d8:	e3530701 	cmp	r3, #262144	; 0x40000
  1344dc:	9a00000a 	bls	13450c <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  1344e0:	e3090918 	movw	r0, #39192	; 0x9918
  1344e4:	e3400014 	movt	r0, #20
  1344e8:	ebff3b09 	bl	103114 <rt_kprintf>
  1344ec:	e309092c 	movw	r0, #39212	; 0x992c
  1344f0:	e3400014 	movt	r0, #20
  1344f4:	ebff3b06 	bl	103114 <rt_kprintf>
  1344f8:	e30908fc 	movw	r0, #39164	; 0x98fc
  1344fc:	e3400014 	movt	r0, #20
  134500:	ebff3b03 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134504:	e3a03001 	mov	r3, #1
  134508:	ea000095 	b	134764 <enet_buffer_init+0x2d4>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  13450c:	e3a03701 	mov	r3, #262144	; 0x40000
  134510:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134514:	e3a03701 	mov	r3, #262144	; 0x40000
  134518:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  13451c:	e3a03a01 	mov	r3, #4096	; 0x1000
  134520:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  134524:	e3a03a01 	mov	r3, #4096	; 0x1000
  134528:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  13452c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134530:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134534:	e0822003 	add	r2, r2, r3
  134538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13453c:	e0823003 	add	r3, r2, r3
  134540:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134544:	e0823003 	add	r3, r2, r3
  134548:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  13454c:	e3a03000 	mov	r3, #0
  134550:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  134554:	e24b302c 	sub	r3, fp, #44	; 0x2c
  134558:	e1a01003 	mov	r1, r3
  13455c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134560:	ebffffac 	bl	134418 <page_alloc>
    if (!mem_align)
  134564:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134568:	e3530000 	cmp	r3, #0
  13456c:	1a000001 	bne	134578 <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  134570:	e3a03001 	mov	r3, #1
  134574:	ea00007a 	b	134764 <enet_buffer_init+0x2d4>
    }
    
    rx_buff_addr = mem_align;
  134578:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13457c:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  134580:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134588:	e0823003 	add	r3, r2, r3
  13458c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  134590:	e51b300c 	ldr	r3, [fp, #-12]
  134594:	e3530000 	cmp	r3, #0
  134598:	1a00000a 	bne	1345c8 <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  13459c:	e3090918 	movw	r0, #39192	; 0x9918
  1345a0:	e3400014 	movt	r0, #20
  1345a4:	ebff3ada 	bl	103114 <rt_kprintf>
  1345a8:	e3090958 	movw	r0, #39256	; 0x9958
  1345ac:	e3400014 	movt	r0, #20
  1345b0:	ebff3ad7 	bl	103114 <rt_kprintf>
  1345b4:	e30908fc 	movw	r0, #39164	; 0x98fc
  1345b8:	e3400014 	movt	r0, #20
  1345bc:	ebff3ad4 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1345c0:	e3a03001 	mov	r3, #1
  1345c4:	ea000066 	b	134764 <enet_buffer_init+0x2d4>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  1345c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1345cc:	e51b200c 	ldr	r2, [fp, #-12]
  1345d0:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  1345d4:	e51b000c 	ldr	r0, [fp, #-12]
  1345d8:	ebff3f8f 	bl	10441c <ueth_v2p>
  1345dc:	e1a02000 	mov	r2, r0
  1345e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1345e4:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  1345e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1345ec:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  1345f0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1345f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1345f8:	e0823003 	add	r3, r2, r3
  1345fc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  134600:	e51b3008 	ldr	r3, [fp, #-8]
  134604:	e3530000 	cmp	r3, #0
  134608:	1a00000a 	bne	134638 <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  13460c:	e3090918 	movw	r0, #39192	; 0x9918
  134610:	e3400014 	movt	r0, #20
  134614:	ebff3abe 	bl	103114 <rt_kprintf>
  134618:	e309097c 	movw	r0, #39292	; 0x997c
  13461c:	e3400014 	movt	r0, #20
  134620:	ebff3abb 	bl	103114 <rt_kprintf>
  134624:	e30908fc 	movw	r0, #39164	; 0x98fc
  134628:	e3400014 	movt	r0, #20
  13462c:	ebff3ab8 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134630:	e3a03001 	mov	r3, #1
  134634:	ea00004a 	b	134764 <enet_buffer_init+0x2d4>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  134638:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13463c:	e51b2008 	ldr	r2, [fp, #-8]
  134640:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  134644:	e51b0008 	ldr	r0, [fp, #-8]
  134648:	ebff3f73 	bl	10441c <ueth_v2p>
  13464c:	e1a02000 	mov	r2, r0
  134650:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134654:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  134658:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13465c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  134660:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134664:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134668:	e0823003 	add	r3, r2, r3
  13466c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  134670:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134674:	e3530000 	cmp	r3, #0
  134678:	1a00000a 	bne	1346a8 <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  13467c:	e3090918 	movw	r0, #39192	; 0x9918
  134680:	e3400014 	movt	r0, #20
  134684:	ebff3aa2 	bl	103114 <rt_kprintf>
  134688:	e30909a0 	movw	r0, #39328	; 0x99a0
  13468c:	e3400014 	movt	r0, #20
  134690:	ebff3a9f 	bl	103114 <rt_kprintf>
  134694:	e30908fc 	movw	r0, #39164	; 0x98fc
  134698:	e3400014 	movt	r0, #20
  13469c:	ebff3a9c 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1346a0:	e3a03001 	mov	r3, #1
  1346a4:	ea00002e 	b	134764 <enet_buffer_init+0x2d4>
    }
    buffConfig->rxBdStartAddrAlign = ueth_remap(ueth_v2p(rx_bd_addr), UETH_REMAP_NOCACHE, rx_bd_memsize);
  1346a8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1346ac:	ebff3f5a 	bl	10441c <ueth_v2p>
  1346b0:	e1a03000 	mov	r3, r0
  1346b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1346b8:	e3a01003 	mov	r1, #3
  1346bc:	e1a00003 	mov	r0, r3
  1346c0:	ebff3f82 	bl	1044d0 <ueth_remap>
  1346c4:	e1a02000 	mov	r2, r0
  1346c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1346cc:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  1346d0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1346d4:	ebff3f50 	bl	10441c <ueth_v2p>
  1346d8:	e1a02000 	mov	r2, r0
  1346dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1346e0:	e583201c 	str	r2, [r3, #28]
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  1346e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1346e8:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  1346ec:	e51b3010 	ldr	r3, [fp, #-16]
  1346f0:	e3530000 	cmp	r3, #0
  1346f4:	1a00000a 	bne	134724 <enet_buffer_init+0x294>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  1346f8:	e3090918 	movw	r0, #39192	; 0x9918
  1346fc:	e3400014 	movt	r0, #20
  134700:	ebff3a83 	bl	103114 <rt_kprintf>
  134704:	e30909c0 	movw	r0, #39360	; 0x99c0
  134708:	e3400014 	movt	r0, #20
  13470c:	ebff3a80 	bl	103114 <rt_kprintf>
  134710:	e30908fc 	movw	r0, #39164	; 0x98fc
  134714:	e3400014 	movt	r0, #20
  134718:	ebff3a7d 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  13471c:	e3a03001 	mov	r3, #1
  134720:	ea00000f 	b	134764 <enet_buffer_init+0x2d4>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txBdStartAddrAlign = ueth_remap(ueth_v2p(tx_bd_addr), UETH_REMAP_NOCACHE, tx_bd_memsize);
  134724:	e51b0010 	ldr	r0, [fp, #-16]
  134728:	ebff3f3b 	bl	10441c <ueth_v2p>
  13472c:	e1a03000 	mov	r3, r0
  134730:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134734:	e3a01003 	mov	r1, #3
  134738:	e1a00003 	mov	r0, r3
  13473c:	ebff3f63 	bl	1044d0 <ueth_remap>
  134740:	e1a02000 	mov	r2, r0
  134744:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134748:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  13474c:	e51b0010 	ldr	r0, [fp, #-16]
  134750:	ebff3f31 	bl	10441c <ueth_v2p>
  134754:	e1a02000 	mov	r2, r0
  134758:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13475c:	e5832020 	str	r2, [r3, #32]
    
    return RT_EOK;
  134760:	e3a03000 	mov	r3, #0
}
  134764:	e1a00003 	mov	r0, r3
  134768:	e24bd004 	sub	sp, fp, #4
  13476c:	e8bd8800 	pop	{fp, pc}

00134770 <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  134770:	e92d4800 	push	{fp, lr}
  134774:	e28db004 	add	fp, sp, #4
  134778:	e24dd038 	sub	sp, sp, #56	; 0x38
  13477c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134780:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134784:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134788:	e3a03000 	mov	r3, #0
  13478c:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  134790:	e51b300c 	ldr	r3, [fp, #-12]
  134794:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134798:	e3a02a01 	mov	r2, #4096	; 0x1000
  13479c:	e3a01001 	mov	r1, #1
  1347a0:	e1a00003 	mov	r0, r3
  1347a4:	ebff3f49 	bl	1044d0 <ueth_remap>
  1347a8:	e1a02000 	mov	r2, r0
  1347ac:	e51b300c 	ldr	r3, [fp, #-12]
  1347b0:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  1347b4:	e51b300c 	ldr	r3, [fp, #-12]
  1347b8:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1347bc:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  1347c0:	e51b300c 	ldr	r3, [fp, #-12]
  1347c4:	e28330dc 	add	r3, r3, #220	; 0xdc
  1347c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  1347cc:	e51b300c 	ldr	r3, [fp, #-12]
  1347d0:	e2833c01 	add	r3, r3, #256	; 0x100
  1347d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  1347d8:	e51b300c 	ldr	r3, [fp, #-12]
  1347dc:	e28330a8 	add	r3, r3, #168	; 0xa8
  1347e0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  1347e4:	e3a03000 	mov	r3, #0
  1347e8:	e50b3008 	str	r3, [fp, #-8]
  1347ec:	ea00000b 	b	134820 <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  1347f0:	e51b3008 	ldr	r3, [fp, #-8]
  1347f4:	e3a0201c 	mov	r2, #28
  1347f8:	e0030392 	mul	r3, r2, r3
  1347fc:	e2833e12 	add	r3, r3, #288	; 0x120
  134800:	e51b200c 	ldr	r2, [fp, #-12]
  134804:	e0823003 	add	r3, r2, r3
  134808:	e3a0101c 	mov	r1, #28
  13480c:	e1a00003 	mov	r0, r3
  134810:	ebff3f62 	bl	1045a0 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134814:	e51b3008 	ldr	r3, [fp, #-8]
  134818:	e2833001 	add	r3, r3, #1
  13481c:	e50b3008 	str	r3, [fp, #-8]
  134820:	e51b3008 	ldr	r3, [fp, #-8]
  134824:	e3530008 	cmp	r3, #8
  134828:	9afffff0 	bls	1347f0 <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  13482c:	e3a02a01 	mov	r2, #4096	; 0x1000
  134830:	e3a01001 	mov	r1, #1
  134834:	e3a00901 	mov	r0, #16384	; 0x4000
  134838:	e340020e 	movt	r0, #526	; 0x20e
  13483c:	ebff3f23 	bl	1044d0 <ueth_remap>
  134840:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  134844:	e51b300c 	ldr	r3, [fp, #-12]
  134848:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  13484c:	e3530001 	cmp	r3, #1
  134850:	1a00000c 	bne	134888 <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  134854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134858:	e5933004 	ldr	r3, [r3, #4]
  13485c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  134860:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134864:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  134868:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  13486c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134870:	e3833802 	orr	r3, r3, #131072	; 0x20000
  134874:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134878:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13487c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134880:	e5832004 	str	r2, [r3, #4]
  134884:	ea00000f 	b	1348c8 <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134888:	e51b300c 	ldr	r3, [fp, #-12]
  13488c:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134890:	e3530002 	cmp	r3, #2
  134894:	1a00000b 	bne	1348c8 <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13489c:	e5933004 	ldr	r3, [r3, #4]
  1348a0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  1348a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1348a8:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  1348ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  1348b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1348b4:	e3833701 	orr	r3, r3, #262144	; 0x40000
  1348b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  1348bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1348c0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1348c4:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  1348c8:	ebff3f62 	bl	104658 <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  1348cc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1348d0:	eb00047c 	bl	135ac8 <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  1348d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1348d8:	e5933004 	ldr	r3, [r3, #4]
  1348dc:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  1348e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1348e4:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  1348e8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1348ec:	ebfffee7 	bl	134490 <enet_buffer_init>
  1348f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  1348f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1348f8:	e3530000 	cmp	r3, #0
  1348fc:	0a000001 	beq	134908 <rt_imx6ul_eth_init+0x198>
    {
        return state;
  134900:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134904:	ea000015 	b	134960 <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134908:	e51b300c 	ldr	r3, [fp, #-12]
  13490c:	e2832078 	add	r2, r3, #120	; 0x78
  134910:	e3a03d52 	mov	r3, #5248	; 0x1480
  134914:	e34033ef 	movt	r3, #1007	; 0x3ef
  134918:	e58d3004 	str	r3, [sp, #4]
  13491c:	e58d2000 	str	r2, [sp]
  134920:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134924:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134928:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  13492c:	e51b0010 	ldr	r0, [fp, #-16]
  134930:	eb000484 	bl	135b48 <ENET_Init>
    ENET_ActiveRead(base_addr);
  134934:	e51b0010 	ldr	r0, [fp, #-16]
  134938:	ebfffe5a 	bl	1342a8 <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  13493c:	e51b300c 	ldr	r3, [fp, #-12]
  134940:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  134944:	e1a02003 	mov	r2, r3
  134948:	e51b300c 	ldr	r3, [fp, #-12]
  13494c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134950:	e1a01003 	mov	r1, r3
  134954:	e1a00002 	mov	r0, r2
  134958:	ebff3fbc 	bl	104850 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  13495c:	e3a03000 	mov	r3, #0
}
  134960:	e1a00003 	mov	r0, r3
  134964:	e24bd004 	sub	sp, fp, #4
  134968:	e8bd8800 	pop	{fp, pc}

0013496c <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  13496c:	e92d4800 	push	{fp, lr}
  134970:	e28db004 	add	fp, sp, #4
  134974:	e24dd028 	sub	sp, sp, #40	; 0x28
  134978:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  13497c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  134980:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134984:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134988:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  13498c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134990:	e3530001 	cmp	r3, #1
  134994:	0a000000 	beq	13499c <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134998:	ea000070 	b	134b60 <rt_imx6ul_eth_control+0x1f4>
        if (args)
  13499c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1349a0:	e3530000 	cmp	r3, #0
  1349a4:	0a00006b 	beq	134b58 <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  1349a8:	e3a03000 	mov	r3, #0
  1349ac:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  1349b0:	e3a02a01 	mov	r2, #4096	; 0x1000
  1349b4:	e3a01001 	mov	r1, #1
  1349b8:	e3a00903 	mov	r0, #49152	; 0xc000
  1349bc:	e340021b 	movt	r0, #539	; 0x21b
  1349c0:	ebff3ec2 	bl	1044d0 <ueth_remap>
  1349c4:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  1349c8:	e51b3010 	ldr	r3, [fp, #-16]
  1349cc:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  1349d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  1349d4:	e51b3010 	ldr	r3, [fp, #-16]
  1349d8:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  1349dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  1349e0:	e3a02000 	mov	r2, #0
  1349e4:	e3a01002 	mov	r1, #2
  1349e8:	e51b0010 	ldr	r0, [fp, #-16]
  1349ec:	ebff3eb7 	bl	1044d0 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  1349f0:	e30908d8 	movw	r0, #39128	; 0x98d8
  1349f4:	e3400014 	movt	r0, #20
  1349f8:	ebff39c5 	bl	103114 <rt_kprintf>
  1349fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134a00:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134a04:	e1a01003 	mov	r1, r3
  134a08:	e30909e0 	movw	r0, #39392	; 0x99e0
  134a0c:	e3400014 	movt	r0, #20
  134a10:	ebff39bf 	bl	103114 <rt_kprintf>
  134a14:	e30908fc 	movw	r0, #39164	; 0x98fc
  134a18:	e3400014 	movt	r0, #20
  134a1c:	ebff39bc 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  134a20:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134a24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134a28:	e0423003 	sub	r3, r2, r3
  134a2c:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  134a30:	e30908d8 	movw	r0, #39128	; 0x98d8
  134a34:	e3400014 	movt	r0, #20
  134a38:	ebff39b5 	bl	103114 <rt_kprintf>
  134a3c:	e51b100c 	ldr	r1, [fp, #-12]
  134a40:	e30909f4 	movw	r0, #39412	; 0x99f4
  134a44:	e3400014 	movt	r0, #20
  134a48:	ebff39b1 	bl	103114 <rt_kprintf>
  134a4c:	e30908fc 	movw	r0, #39164	; 0x98fc
  134a50:	e3400014 	movt	r0, #20
  134a54:	ebff39ae 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134a58:	e51b3008 	ldr	r3, [fp, #-8]
  134a5c:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  134a60:	e3a03902 	mov	r3, #32768	; 0x8000
  134a64:	e3403218 	movt	r3, #536	; 0x218
  134a68:	e1520003 	cmp	r2, r3
  134a6c:	1a000019 	bne	134ad8 <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  134a70:	e51b3008 	ldr	r3, [fp, #-8]
  134a74:	e3e02057 	mvn	r2, #87	; 0x57
  134a78:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134a7c:	e51b3008 	ldr	r3, [fp, #-8]
  134a80:	e3a0205e 	mov	r2, #94	; 0x5e
  134a84:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134a88:	e51b3008 	ldr	r3, [fp, #-8]
  134a8c:	e3a02045 	mov	r2, #69	; 0x45
  134a90:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134a94:	e51b300c 	ldr	r3, [fp, #-12]
  134a98:	e1a03823 	lsr	r3, r3, #16
  134a9c:	e6ef3073 	uxtb	r3, r3
  134aa0:	e203307f 	and	r3, r3, #127	; 0x7f
  134aa4:	e6ef2073 	uxtb	r2, r3
  134aa8:	e51b3008 	ldr	r3, [fp, #-8]
  134aac:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134ab0:	e51b300c 	ldr	r3, [fp, #-12]
  134ab4:	e1a03423 	lsr	r3, r3, #8
  134ab8:	e6ef2073 	uxtb	r2, r3
  134abc:	e51b3008 	ldr	r3, [fp, #-8]
  134ac0:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134ac4:	e51b300c 	ldr	r3, [fp, #-12]
  134ac8:	e6ef2073 	uxtb	r2, r3
  134acc:	e51b3008 	ldr	r3, [fp, #-8]
  134ad0:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134ad4:	ea000018 	b	134b3c <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134ad8:	e51b3008 	ldr	r3, [fp, #-8]
  134adc:	e3e02057 	mvn	r2, #87	; 0x57
  134ae0:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134ae4:	e51b3008 	ldr	r3, [fp, #-8]
  134ae8:	e3a0205e 	mov	r2, #94	; 0x5e
  134aec:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134af0:	e51b3008 	ldr	r3, [fp, #-8]
  134af4:	e3a02046 	mov	r2, #70	; 0x46
  134af8:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  134afc:	e51b300c 	ldr	r3, [fp, #-12]
  134b00:	e1a03823 	lsr	r3, r3, #16
  134b04:	e6ef3073 	uxtb	r3, r3
  134b08:	e203307f 	and	r3, r3, #127	; 0x7f
  134b0c:	e6ef2073 	uxtb	r2, r3
  134b10:	e51b3008 	ldr	r3, [fp, #-8]
  134b14:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  134b18:	e51b300c 	ldr	r3, [fp, #-12]
  134b1c:	e1a03423 	lsr	r3, r3, #8
  134b20:	e6ef2073 	uxtb	r2, r3
  134b24:	e51b3008 	ldr	r3, [fp, #-8]
  134b28:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134b2c:	e51b300c 	ldr	r3, [fp, #-12]
  134b30:	e6ef2073 	uxtb	r2, r3
  134b34:	e51b3008 	ldr	r3, [fp, #-8]
  134b38:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134b3c:	e51b3008 	ldr	r3, [fp, #-8]
  134b40:	e2833078 	add	r3, r3, #120	; 0x78
  134b44:	e3a02006 	mov	r2, #6
  134b48:	e1a01003 	mov	r1, r3
  134b4c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134b50:	eb002fcb 	bl	140a84 <memcpy>
        break;
  134b54:	ea000001 	b	134b60 <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134b58:	e3e03000 	mvn	r3, #0
  134b5c:	ea000000 	b	134b64 <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134b60:	e3a03000 	mov	r3, #0
}
  134b64:	e1a00003 	mov	r0, r3
  134b68:	e24bd004 	sub	sp, fp, #4
  134b6c:	e8bd8800 	pop	{fp, pc}

00134b70 <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134b70:	e92d4800 	push	{fp, lr}
  134b74:	e28db004 	add	fp, sp, #4
  134b78:	e24dd038 	sub	sp, sp, #56	; 0x38
  134b7c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134b80:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134b84:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134b88:	e3a03000 	mov	r3, #0
  134b8c:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134b90:	e3a03000 	mov	r3, #0
  134b94:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134b98:	e3a03000 	mov	r3, #0
  134b9c:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134ba0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134ba4:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ba8:	e51b3010 	ldr	r3, [fp, #-16]
  134bac:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134bb0:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134bb4:	e51b3010 	ldr	r3, [fp, #-16]
  134bb8:	e28330dc 	add	r3, r3, #220	; 0xdc
  134bbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134bc0:	e51b3010 	ldr	r3, [fp, #-16]
  134bc4:	e2833c01 	add	r3, r3, #256	; 0x100
  134bc8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134bcc:	e51b3010 	ldr	r3, [fp, #-16]
  134bd0:	e28330a8 	add	r3, r3, #168	; 0xa8
  134bd4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134bd8:	e24b301e 	sub	r3, fp, #30
  134bdc:	e58d3000 	str	r3, [sp]
  134be0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134be4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134be8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134bec:	e51b000c 	ldr	r0, [fp, #-12]
  134bf0:	eb000892 	bl	136e40 <ENET_ReadFrame>
  134bf4:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134bf8:	e51b3008 	ldr	r3, [fp, #-8]
  134bfc:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134c00:	e1530002 	cmp	r3, r2
  134c04:	0a000002 	beq	134c14 <read_data_from_eth+0xa4>
  134c08:	e51b3008 	ldr	r3, [fp, #-8]
  134c0c:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134c10:	1a00001a 	bne	134c80 <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134c14:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134c18:	e51b000c 	ldr	r0, [fp, #-12]
  134c1c:	ebfffdac 	bl	1342d4 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134c20:	e51b3008 	ldr	r3, [fp, #-8]
  134c24:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134c28:	1a00000e 	bne	134c68 <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134c2c:	e51b3010 	ldr	r3, [fp, #-16]
  134c30:	e2832078 	add	r2, r3, #120	; 0x78
  134c34:	e3a03d52 	mov	r3, #5248	; 0x1480
  134c38:	e34033ef 	movt	r3, #1007	; 0x3ef
  134c3c:	e58d3004 	str	r3, [sp, #4]
  134c40:	e58d2000 	str	r2, [sp]
  134c44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134c48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134c4c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134c50:	e51b000c 	ldr	r0, [fp, #-12]
  134c54:	eb0003bb 	bl	135b48 <ENET_Init>
            ENET_ActiveRead(base_addr);
  134c58:	e51b000c 	ldr	r0, [fp, #-12]
  134c5c:	ebfffd91 	bl	1342a8 <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134c60:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134c64:	ea000009 	b	134c90 <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134c68:	e51b3008 	ldr	r3, [fp, #-8]
  134c6c:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134c70:	e1530002 	cmp	r3, r2
  134c74:	1a000001 	bne	134c80 <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134c78:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134c7c:	ea000003 	b	134c90 <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134c80:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134c84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134c88:	e1c320b0 	strh	r2, [r3]
    return status;
  134c8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  134c90:	e1a00003 	mov	r0, r3
  134c94:	e24bd004 	sub	sp, fp, #4
  134c98:	e8bd8800 	pop	{fp, pc}

00134c9c <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134c9c:	e92d4800 	push	{fp, lr}
  134ca0:	e28db004 	add	fp, sp, #4
  134ca4:	e24dd030 	sub	sp, sp, #48	; 0x30
  134ca8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134cac:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134cb0:	e3a03000 	mov	r3, #0
  134cb4:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134cb8:	e3a03000 	mov	r3, #0
  134cbc:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134cc0:	e3a03000 	mov	r3, #0
  134cc4:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134cc8:	e3a03000 	mov	r3, #0
  134ccc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134cd0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134cd4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134cd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134cdc:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ce0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ce4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134ce8:	e2833c01 	add	r3, r3, #256	; 0x100
  134cec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  134cf0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134cf4:	e3530000 	cmp	r3, #0
  134cf8:	1a000005 	bne	134d14 <rt_imx6ul_eth_tx+0x78>
  134cfc:	e3a02e1b 	mov	r2, #432	; 0x1b0
  134d00:	e3091bc0 	movw	r1, #39872	; 0x9bc0
  134d04:	e3401014 	movt	r1, #20
  134d08:	e3090a14 	movw	r0, #39444	; 0x9a14
  134d0c:	e3400014 	movt	r0, #20
  134d10:	ebff3a20 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  134d14:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134d18:	e50b3008 	str	r3, [fp, #-8]
  134d1c:	ea000020 	b	134da4 <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  134d20:	e51b3008 	ldr	r3, [fp, #-8]
  134d24:	e5933000 	ldr	r3, [r3]
  134d28:	e3530000 	cmp	r3, #0
  134d2c:	1a000002 	bne	134d3c <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  134d30:	e3a03001 	mov	r3, #1
  134d34:	e50b3010 	str	r3, [fp, #-16]
  134d38:	ea000001 	b	134d44 <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  134d3c:	e3a03000 	mov	r3, #0
  134d40:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  134d44:	e51b3008 	ldr	r3, [fp, #-8]
  134d48:	e5932004 	ldr	r2, [r3, #4]
  134d4c:	e51b3008 	ldr	r3, [fp, #-8]
  134d50:	e1d310ba 	ldrh	r1, [r3, #10]
  134d54:	e51b3010 	ldr	r3, [fp, #-16]
  134d58:	e58d3000 	str	r3, [sp]
  134d5c:	e1a03001 	mov	r3, r1
  134d60:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  134d64:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134d68:	eb0008ff 	bl	13716c <ENET_SendFrame>
  134d6c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  134d70:	e51b3008 	ldr	r3, [fp, #-8]
  134d74:	e1d320ba 	ldrh	r2, [r3, #10]
  134d78:	e15b30ba 	ldrh	r3, [fp, #-10]
  134d7c:	e0823003 	add	r3, r2, r3
  134d80:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  134d84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134d88:	e3530000 	cmp	r3, #0
  134d8c:	0a000001 	beq	134d98 <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  134d90:	e3a03001 	mov	r3, #1
  134d94:	ea000015 	b	134df0 <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  134d98:	e51b3008 	ldr	r3, [fp, #-8]
  134d9c:	e5933000 	ldr	r3, [r3]
  134da0:	e50b3008 	str	r3, [fp, #-8]
  134da4:	e51b3008 	ldr	r3, [fp, #-8]
  134da8:	e3530000 	cmp	r3, #0
  134dac:	1affffdb 	bne	134d20 <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  134db0:	e15b30ba 	ldrh	r3, [fp, #-10]
  134db4:	e30025ee 	movw	r2, #1518	; 0x5ee
  134db8:	e1530002 	cmp	r3, r2
  134dbc:	9a00000a 	bls	134dec <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  134dc0:	e3090918 	movw	r0, #39192	; 0x9918
  134dc4:	e3400014 	movt	r0, #20
  134dc8:	ebff38d1 	bl	103114 <rt_kprintf>
  134dcc:	e15b30ba 	ldrh	r3, [fp, #-10]
  134dd0:	e1a01003 	mov	r1, r3
  134dd4:	e3090a18 	movw	r0, #39448	; 0x9a18
  134dd8:	e3400014 	movt	r0, #20
  134ddc:	ebff38cc 	bl	103114 <rt_kprintf>
  134de0:	e30908fc 	movw	r0, #39164	; 0x98fc
  134de4:	e3400014 	movt	r0, #20
  134de8:	ebff38c9 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  134dec:	e3a03000 	mov	r3, #0
}
  134df0:	e1a00003 	mov	r0, r3
  134df4:	e24bd004 	sub	sp, fp, #4
  134df8:	e8bd8800 	pop	{fp, pc}

00134dfc <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  134dfc:	e92d4800 	push	{fp, lr}
  134e00:	e28db004 	add	fp, sp, #4
  134e04:	e24dd018 	sub	sp, sp, #24
  134e08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  134e0c:	e3a03000 	mov	r3, #0
  134e10:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  134e14:	e3a03000 	mov	r3, #0
  134e18:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  134e1c:	e30e3bec 	movw	r3, #60396	; 0xebec
  134e20:	e3403014 	movt	r3, #20
  134e24:	e5933000 	ldr	r3, [r3]
  134e28:	e3530000 	cmp	r3, #0
  134e2c:	1a00000e 	bne	134e6c <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  134e30:	e3a02003 	mov	r2, #3
  134e34:	e30015ee 	movw	r1, #1518	; 0x5ee
  134e38:	e3a00004 	mov	r0, #4
  134e3c:	ebff9449 	bl	119f68 <pbuf_alloc>
  134e40:	e1a02000 	mov	r2, r0
  134e44:	e30e3bec 	movw	r3, #60396	; 0xebec
  134e48:	e3403014 	movt	r3, #20
  134e4c:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  134e50:	e30e3bec 	movw	r3, #60396	; 0xebec
  134e54:	e3403014 	movt	r3, #20
  134e58:	e5933000 	ldr	r3, [r3]
  134e5c:	e3530000 	cmp	r3, #0
  134e60:	1a000001 	bne	134e6c <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  134e64:	e3a03000 	mov	r3, #0
  134e68:	ea00002f 	b	134f2c <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  134e6c:	e30e3bec 	movw	r3, #60396	; 0xebec
  134e70:	e3403014 	movt	r3, #20
  134e74:	e5933000 	ldr	r3, [r3]
  134e78:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  134e7c:	e51b3008 	ldr	r3, [fp, #-8]
  134e80:	e5933004 	ldr	r3, [r3, #4]
  134e84:	e24b200e 	sub	r2, fp, #14
  134e88:	e1a01003 	mov	r1, r3
  134e8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  134e90:	ebffff36 	bl	134b70 <read_data_from_eth>
  134e94:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  134e98:	e51b300c 	ldr	r3, [fp, #-12]
  134e9c:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134ea0:	e1530002 	cmp	r3, r2
  134ea4:	1a000001 	bne	134eb0 <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  134ea8:	e3a03000 	mov	r3, #0
  134eac:	ea00001e 	b	134f2c <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  134eb0:	e51b300c 	ldr	r3, [fp, #-12]
  134eb4:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134eb8:	1a000001 	bne	134ec4 <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  134ebc:	e3a03000 	mov	r3, #0
  134ec0:	ea000019 	b	134f2c <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  134ec4:	e15b30be 	ldrh	r3, [fp, #-14]
  134ec8:	e30025ee 	movw	r2, #1518	; 0x5ee
  134ecc:	e1530002 	cmp	r3, r2
  134ed0:	9a00000c 	bls	134f08 <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  134ed4:	e3090918 	movw	r0, #39192	; 0x9918
  134ed8:	e3400014 	movt	r0, #20
  134edc:	ebff388c 	bl	103114 <rt_kprintf>
  134ee0:	e15b30be 	ldrh	r3, [fp, #-14]
  134ee4:	e1a01003 	mov	r1, r3
  134ee8:	e3090a44 	movw	r0, #39492	; 0x9a44
  134eec:	e3400014 	movt	r0, #20
  134ef0:	ebff3887 	bl	103114 <rt_kprintf>
  134ef4:	e30908fc 	movw	r0, #39164	; 0x98fc
  134ef8:	e3400014 	movt	r0, #20
  134efc:	ebff3884 	bl	103114 <rt_kprintf>
        return RT_NULL;
  134f00:	e3a03000 	mov	r3, #0
  134f04:	ea000008 	b	134f2c <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  134f08:	e15b30be 	ldrh	r3, [fp, #-14]
  134f0c:	e1a01003 	mov	r1, r3
  134f10:	e51b0008 	ldr	r0, [fp, #-8]
  134f14:	ebff95d1 	bl	11a660 <pbuf_realloc>
    p_s = RT_NULL;
  134f18:	e30e3bec 	movw	r3, #60396	; 0xebec
  134f1c:	e3403014 	movt	r3, #20
  134f20:	e3a02000 	mov	r2, #0
  134f24:	e5832000 	str	r2, [r3]
    return p;
  134f28:	e51b3008 	ldr	r3, [fp, #-8]
}
  134f2c:	e1a00003 	mov	r0, r3
  134f30:	e24bd004 	sub	sp, fp, #4
  134f34:	e8bd8800 	pop	{fp, pc}

00134f38 <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  134f38:	e92d4800 	push	{fp, lr}
  134f3c:	e28db004 	add	fp, sp, #4
  134f40:	e24dd010 	sub	sp, sp, #16
  134f44:	e50b0010 	str	r0, [fp, #-16]
  134f48:	e1a03001 	mov	r3, r1
  134f4c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134f50:	e51b3010 	ldr	r3, [fp, #-16]
  134f54:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  134f58:	e51b3008 	ldr	r3, [fp, #-8]
  134f5c:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134f60:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134f64:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134f68:	e51b000c 	ldr	r0, [fp, #-12]
  134f6c:	ebfffcd8 	bl	1342d4 <ENET_EnableInterrupts>

    return RT_EOK;
  134f70:	e3a03000 	mov	r3, #0
}
  134f74:	e1a00003 	mov	r0, r3
  134f78:	e24bd004 	sub	sp, fp, #4
  134f7c:	e8bd8800 	pop	{fp, pc}

00134f80 <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  134f80:	e92d4800 	push	{fp, lr}
  134f84:	e28db004 	add	fp, sp, #4
  134f88:	e24dd010 	sub	sp, sp, #16
  134f8c:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134f90:	e51b3010 	ldr	r3, [fp, #-16]
  134f94:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  134f98:	e51b3008 	ldr	r3, [fp, #-8]
  134f9c:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134fa0:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134fa4:	e1a00003 	mov	r0, r3
  134fa8:	ebfffcd8 	bl	134310 <ENET_DisableInterrupts>
    return RT_EOK;
  134fac:	e3a03000 	mov	r3, #0
}
  134fb0:	e1a00003 	mov	r0, r3
  134fb4:	e24bd004 	sub	sp, fp, #4
  134fb8:	e8bd8800 	pop	{fp, pc}

00134fbc <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  134fbc:	e92d4800 	push	{fp, lr}
  134fc0:	e28db004 	add	fp, sp, #4
  134fc4:	e24dd018 	sub	sp, sp, #24
  134fc8:	e50b0010 	str	r0, [fp, #-16]
  134fcc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  134fd0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  134fd4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  134fd8:	e3a03000 	mov	r3, #0
  134fdc:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  134fe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134fe4:	e3530000 	cmp	r3, #0
  134fe8:	1a00000c 	bne	135020 <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  134fec:	e3090918 	movw	r0, #39192	; 0x9918
  134ff0:	e3400014 	movt	r0, #20
  134ff4:	ebff3846 	bl	103114 <rt_kprintf>
  134ff8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  134ffc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135000:	e3090a70 	movw	r0, #39536	; 0x9a70
  135004:	e3400014 	movt	r0, #20
  135008:	ebff3841 	bl	103114 <rt_kprintf>
  13500c:	e30908fc 	movw	r0, #39164	; 0x98fc
  135010:	e3400014 	movt	r0, #20
  135014:	ebff383e 	bl	103114 <rt_kprintf>
        return 0;
  135018:	e3a03000 	mov	r3, #0
  13501c:	ea00000f 	b	135060 <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  135020:	e24b300a 	sub	r3, fp, #10
  135024:	e1a02003 	mov	r2, r3
  135028:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  13502c:	e51b0010 	ldr	r0, [fp, #-16]
  135030:	ebfffece 	bl	134b70 <read_data_from_eth>
  135034:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  135038:	e51b3008 	ldr	r3, [fp, #-8]
  13503c:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135040:	e1530002 	cmp	r3, r2
  135044:	0a000002 	beq	135054 <rt_imx6ul_eth_read+0x98>
  135048:	e51b3008 	ldr	r3, [fp, #-8]
  13504c:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135050:	1a000001 	bne	13505c <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  135054:	e3a03000 	mov	r3, #0
  135058:	ea000000 	b	135060 <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  13505c:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  135060:	e1a00003 	mov	r0, r3
  135064:	e24bd004 	sub	sp, fp, #4
  135068:	e8bd8800 	pop	{fp, pc}

0013506c <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  13506c:	e92d4800 	push	{fp, lr}
  135070:	e28db004 	add	fp, sp, #4
  135074:	e24dd028 	sub	sp, sp, #40	; 0x28
  135078:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13507c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  135080:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  135084:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13508c:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  135090:	e51b3008 	ldr	r3, [fp, #-8]
  135094:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135098:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  13509c:	e51b3008 	ldr	r3, [fp, #-8]
  1350a0:	e2833c01 	add	r3, r3, #256	; 0x100
  1350a4:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  1350a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1350ac:	e3530000 	cmp	r3, #0
  1350b0:	0a000003 	beq	1350c4 <rt_imx6ul_eth_write+0x58>
  1350b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1350b8:	e30025ee 	movw	r2, #1518	; 0x5ee
  1350bc:	e1530002 	cmp	r3, r2
  1350c0:	9a00000a 	bls	1350f0 <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  1350c4:	e3090918 	movw	r0, #39192	; 0x9918
  1350c8:	e3400014 	movt	r0, #20
  1350cc:	ebff3810 	bl	103114 <rt_kprintf>
  1350d0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1350d4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1350d8:	e3090aa0 	movw	r0, #39584	; 0x9aa0
  1350dc:	e3400014 	movt	r0, #20
  1350e0:	ebff380b 	bl	103114 <rt_kprintf>
  1350e4:	e30908fc 	movw	r0, #39164	; 0x98fc
  1350e8:	e3400014 	movt	r0, #20
  1350ec:	ebff3808 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  1350f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1350f4:	e6ff2073 	uxth	r2, r3
  1350f8:	e3a03001 	mov	r3, #1
  1350fc:	e58d3000 	str	r3, [sp]
  135100:	e1a03002 	mov	r3, r2
  135104:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  135108:	e51b1010 	ldr	r1, [fp, #-16]
  13510c:	e51b000c 	ldr	r0, [fp, #-12]
  135110:	eb000815 	bl	13716c <ENET_SendFrame>
  135114:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  135118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13511c:	e3530000 	cmp	r3, #0
  135120:	0a000001 	beq	13512c <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  135124:	e3a03001 	mov	r3, #1
  135128:	ea000000 	b	135130 <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  13512c:	e3a03000 	mov	r3, #0
}
  135130:	e1a00003 	mov	r0, r3
  135134:	e24bd004 	sub	sp, fp, #4
  135138:	e8bd8800 	pop	{fp, pc}

0013513c <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  13513c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135140:	e28db000 	add	fp, sp, #0
  135144:	e24dd014 	sub	sp, sp, #20
  135148:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  13514c:	e3a03000 	mov	r3, #0
  135150:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  135154:	e3a03000 	mov	r3, #0
  135158:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  13515c:	e3a03000 	mov	r3, #0
  135160:	e50b3008 	str	r3, [fp, #-8]
  135164:	ea00000d 	b	1351a0 <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  135168:	e30d3078 	movw	r3, #53368	; 0xd078
  13516c:	e3403014 	movt	r3, #20
  135170:	e51b2008 	ldr	r2, [fp, #-8]
  135174:	e3a01f8a 	mov	r1, #552	; 0x228
  135178:	e0020291 	mul	r2, r1, r2
  13517c:	e0833002 	add	r3, r3, r2
  135180:	e28330a0 	add	r3, r3, #160	; 0xa0
  135184:	e5933000 	ldr	r3, [r3]
  135188:	e51b2010 	ldr	r2, [fp, #-16]
  13518c:	e1520003 	cmp	r2, r3
  135190:	0a000006 	beq	1351b0 <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135194:	e51b3008 	ldr	r3, [fp, #-8]
  135198:	e2833001 	add	r3, r3, #1
  13519c:	e50b3008 	str	r3, [fp, #-8]
  1351a0:	e51b3008 	ldr	r3, [fp, #-8]
  1351a4:	e3530000 	cmp	r3, #0
  1351a8:	daffffee 	ble	135168 <get_instance_by_base+0x2c>
  1351ac:	ea000000 	b	1351b4 <get_instance_by_base+0x78>
        {
            break;
  1351b0:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  1351b4:	e51b3008 	ldr	r3, [fp, #-8]
  1351b8:	e3530001 	cmp	r3, #1
  1351bc:	1a000001 	bne	1351c8 <get_instance_by_base+0x8c>
    {
        return -1;
  1351c0:	e3e03000 	mvn	r3, #0
  1351c4:	ea000000 	b	1351cc <get_instance_by_base+0x90>
    }
    return instance;
  1351c8:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  1351cc:	e1a00003 	mov	r0, r3
  1351d0:	e28bd000 	add	sp, fp, #0
  1351d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1351d8:	e12fff1e 	bx	lr

001351dc <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  1351dc:	e92d4800 	push	{fp, lr}
  1351e0:	e28db004 	add	fp, sp, #4
  1351e4:	e24dd010 	sub	sp, sp, #16
  1351e8:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  1351ec:	e3a03000 	mov	r3, #0
  1351f0:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1351f4:	e51b0010 	ldr	r0, [fp, #-16]
  1351f8:	ebffffcf 	bl	13513c <get_instance_by_base>
  1351fc:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  135200:	e51b3008 	ldr	r3, [fp, #-8]
  135204:	e3730001 	cmn	r3, #1
  135208:	1a000009 	bne	135234 <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  13520c:	e3090918 	movw	r0, #39192	; 0x9918
  135210:	e3400014 	movt	r0, #20
  135214:	ebff37be 	bl	103114 <rt_kprintf>
  135218:	e3090ad0 	movw	r0, #39632	; 0x9ad0
  13521c:	e3400014 	movt	r0, #20
  135220:	ebff37bb 	bl	103114 <rt_kprintf>
  135224:	e30908fc 	movw	r0, #39164	; 0x98fc
  135228:	e3400014 	movt	r0, #20
  13522c:	ebff37b8 	bl	103114 <rt_kprintf>
        return;
  135230:	ea00000a 	b	135260 <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  135234:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135238:	e51b0010 	ldr	r0, [fp, #-16]
  13523c:	ebfffc33 	bl	134310 <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  135240:	e51b3008 	ldr	r3, [fp, #-8]
  135244:	e3a02f8a 	mov	r2, #552	; 0x228
  135248:	e0020392 	mul	r2, r2, r3
  13524c:	e30d3078 	movw	r3, #53368	; 0xd078
  135250:	e3403014 	movt	r3, #20
  135254:	e0823003 	add	r3, r2, r3
  135258:	e1a00003 	mov	r0, r3
  13525c:	ebffd173 	bl	129830 <eth_device_ready>
}
  135260:	e24bd004 	sub	sp, fp, #4
  135264:	e8bd8800 	pop	{fp, pc}

00135268 <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  135268:	e92d4800 	push	{fp, lr}
  13526c:	e28db004 	add	fp, sp, #4
  135270:	e24dd008 	sub	sp, sp, #8
  135274:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  135278:	e3a01303 	mov	r1, #201326592	; 0xc000000
  13527c:	e51b0008 	ldr	r0, [fp, #-8]
  135280:	ebfffc22 	bl	134310 <ENET_DisableInterrupts>
}
  135284:	e320f000 	nop	{0}
  135288:	e24bd004 	sub	sp, fp, #4
  13528c:	e8bd8800 	pop	{fp, pc}

00135290 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  135290:	e92d4800 	push	{fp, lr}
  135294:	e28db004 	add	fp, sp, #4
  135298:	e24dd010 	sub	sp, sp, #16
  13529c:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  1352a0:	e51b3010 	ldr	r3, [fp, #-16]
  1352a4:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1352a8:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  1352ac:	e3a03000 	mov	r3, #0
  1352b0:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1352b4:	e51b0010 	ldr	r0, [fp, #-16]
  1352b8:	ebffff9f 	bl	13513c <get_instance_by_base>
  1352bc:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1352c0:	e51b3008 	ldr	r3, [fp, #-8]
  1352c4:	e3730001 	cmn	r3, #1
  1352c8:	1a00000a 	bne	1352f8 <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  1352cc:	e3090918 	movw	r0, #39192	; 0x9918
  1352d0:	e3400014 	movt	r0, #20
  1352d4:	ebff378e 	bl	103114 <rt_kprintf>
  1352d8:	e3090ad0 	movw	r0, #39632	; 0x9ad0
  1352dc:	e3400014 	movt	r0, #20
  1352e0:	ebff378b 	bl	103114 <rt_kprintf>
  1352e4:	e30908fc 	movw	r0, #39164	; 0x98fc
  1352e8:	e3400014 	movt	r0, #20
  1352ec:	ebff3788 	bl	103114 <rt_kprintf>
        return RT_NULL;
  1352f0:	e3a03000 	mov	r3, #0
  1352f4:	ea000005 	b	135310 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  1352f8:	e51b3008 	ldr	r3, [fp, #-8]
  1352fc:	e3a02f8a 	mov	r2, #552	; 0x228
  135300:	e0020392 	mul	r2, r2, r3
  135304:	e30d3078 	movw	r3, #53368	; 0xd078
  135308:	e3403014 	movt	r3, #20
  13530c:	e0823003 	add	r3, r2, r3
}
  135310:	e1a00003 	mov	r0, r3
  135314:	e24bd004 	sub	sp, fp, #4
  135318:	e8bd8800 	pop	{fp, pc}

0013531c <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  13531c:	e92d4800 	push	{fp, lr}
  135320:	e28db004 	add	fp, sp, #4
  135324:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  135328:	e30d3078 	movw	r3, #53368	; 0xd078
  13532c:	e3403014 	movt	r3, #20
  135330:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135334:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  135338:	ebff3c2e 	bl	1043f8 <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  13533c:	e51b0008 	ldr	r0, [fp, #-8]
  135340:	ebffffd2 	bl	135290 <ueth_rx_interrupt_handle>
  135344:	e1a03000 	mov	r3, r0
#endif
}
  135348:	e1a00003 	mov	r0, r3
  13534c:	e24bd004 	sub	sp, fp, #4
  135350:	e8bd8800 	pop	{fp, pc}

00135354 <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  135354:	e92d4800 	push	{fp, lr}
  135358:	e28db004 	add	fp, sp, #4
  13535c:	e24dd020 	sub	sp, sp, #32
  135360:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  135364:	e3a03000 	mov	r3, #0
  135368:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  13536c:	e3a03000 	mov	r3, #0
  135370:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  135374:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135378:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  13537c:	e51b300c 	ldr	r3, [fp, #-12]
  135380:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135384:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  135388:	e51b300c 	ldr	r3, [fp, #-12]
  13538c:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  135390:	e51b300c 	ldr	r3, [fp, #-12]
  135394:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  135398:	e1a01003 	mov	r1, r3
  13539c:	e1a00002 	mov	r0, r2
  1353a0:	eb000a92 	bl	137df0 <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  1353a4:	e51b300c 	ldr	r3, [fp, #-12]
  1353a8:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1353ac:	e1a01003 	mov	r1, r3
  1353b0:	e51b300c 	ldr	r3, [fp, #-12]
  1353b4:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  1353b8:	e3a02d52 	mov	r2, #5248	; 0x1480
  1353bc:	e34023ef 	movt	r2, #1007	; 0x3ef
  1353c0:	e51b0008 	ldr	r0, [fp, #-8]
  1353c4:	eb000afd 	bl	137fc0 <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1353c8:	e51b300c 	ldr	r3, [fp, #-12]
  1353cc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1353d0:	e1a01003 	mov	r1, r3
  1353d4:	e24b300d 	sub	r3, fp, #13
  1353d8:	e1a02003 	mov	r2, r3
  1353dc:	e51b0008 	ldr	r0, [fp, #-8]
  1353e0:	eb000be9 	bl	13838c <PHY_GetLinkStatus>
    if (link)
  1353e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1353e8:	e3530000 	cmp	r3, #0
  1353ec:	0a00000d 	beq	135428 <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  1353f0:	e51b300c 	ldr	r3, [fp, #-12]
  1353f4:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1353f8:	e1a01003 	mov	r1, r3
  1353fc:	e24b3018 	sub	r3, fp, #24
  135400:	e24b2014 	sub	r2, fp, #20
  135404:	e51b0008 	ldr	r0, [fp, #-8]
  135408:	eb000c08 	bl	138430 <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  13540c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135410:	e51b300c 	ldr	r3, [fp, #-12]
  135414:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  135418:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13541c:	e51b300c 	ldr	r3, [fp, #-12]
  135420:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  135424:	ea000008 	b	13544c <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  135428:	e3090af0 	movw	r0, #39664	; 0x9af0
  13542c:	e3400014 	movt	r0, #20
  135430:	ebff3737 	bl	103114 <rt_kprintf>
  135434:	e3090b04 	movw	r0, #39684	; 0x9b04
  135438:	e3400014 	movt	r0, #20
  13543c:	ebff3734 	bl	103114 <rt_kprintf>
  135440:	e30908fc 	movw	r0, #39164	; 0x98fc
  135444:	e3400014 	movt	r0, #20
  135448:	ebff3731 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  13544c:	e51b300c 	ldr	r3, [fp, #-12]
  135450:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135454:	e1a01003 	mov	r1, r3
  135458:	e24b300d 	sub	r3, fp, #13
  13545c:	e1a02003 	mov	r2, r3
  135460:	e51b0008 	ldr	r0, [fp, #-8]
  135464:	eb000bc8 	bl	13838c <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  135468:	e55b300d 	ldrb	r3, [fp, #-13]
  13546c:	e1a02003 	mov	r2, r3
  135470:	e51b300c 	ldr	r3, [fp, #-12]
  135474:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  135478:	e1520003 	cmp	r2, r3
  13547c:	0a00000b 	beq	1354b0 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  135480:	e55b300d 	ldrb	r3, [fp, #-13]
  135484:	e3530000 	cmp	r3, #0
  135488:	0a000004 	beq	1354a0 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  13548c:	e51b300c 	ldr	r3, [fp, #-12]
  135490:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135494:	e1a01003 	mov	r1, r3
  135498:	e51b0008 	ldr	r0, [fp, #-8]
  13549c:	eb000a78 	bl	137e84 <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  1354a0:	e55b300d 	ldrb	r3, [fp, #-13]
  1354a4:	e1a01003 	mov	r1, r3
  1354a8:	e51b000c 	ldr	r0, [fp, #-12]
  1354ac:	ebfffba7 	bl	134350 <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  1354b0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  1354b4:	ebff3270 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1354b8:	eaffffe3 	b	13544c <phy_detect_thread_entry+0xf8>

001354bc <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  1354bc:	e92d4800 	push	{fp, lr}
  1354c0:	e28db004 	add	fp, sp, #4
  1354c4:	e24dd030 	sub	sp, sp, #48	; 0x30
  1354c8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1354cc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  1354d0:	e3a03000 	mov	r3, #0
  1354d4:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  1354d8:	ebff3b91 	bl	104324 <ipc_service_init>
  1354dc:	e1a03000 	mov	r3, r0
  1354e0:	e3530001 	cmp	r3, #1
  1354e4:	1a000001 	bne	1354f0 <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  1354e8:	e3e03000 	mvn	r3, #0
  1354ec:	ea0000b1 	b	1357b8 <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  1354f0:	e3a0101c 	mov	r1, #28
  1354f4:	e30d0040 	movw	r0, #53312	; 0xd040
  1354f8:	e3400014 	movt	r0, #20
  1354fc:	ebff3c27 	bl	1045a0 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  135500:	e3a0101c 	mov	r1, #28
  135504:	e59f02b8 	ldr	r0, [pc, #696]	; 1357c4 <imx6ul_eth_init+0x308>
  135508:	ebff3c24 	bl	1045a0 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  13550c:	e3a03000 	mov	r3, #0
  135510:	e50b300c 	str	r3, [fp, #-12]
  135514:	ea000090 	b	13575c <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  135518:	e30d3078 	movw	r3, #53368	; 0xd078
  13551c:	e3403014 	movt	r3, #20
  135520:	e51b200c 	ldr	r2, [fp, #-12]
  135524:	e3a01f8a 	mov	r1, #552	; 0x228
  135528:	e0020291 	mul	r2, r1, r2
  13552c:	e0833002 	add	r3, r3, r2
  135530:	e283202c 	add	r2, r3, #44	; 0x2c
  135534:	e3093b50 	movw	r3, #39760	; 0x9b50
  135538:	e3403014 	movt	r3, #20
  13553c:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  135540:	e30d3078 	movw	r3, #53368	; 0xd078
  135544:	e3403014 	movt	r3, #20
  135548:	e51b200c 	ldr	r2, [fp, #-12]
  13554c:	e3a01f8a 	mov	r1, #552	; 0x228
  135550:	e0020291 	mul	r2, r1, r2
  135554:	e0833002 	add	r3, r3, r2
  135558:	e2832070 	add	r2, r3, #112	; 0x70
  13555c:	e3043dfc 	movw	r3, #19964	; 0x4dfc
  135560:	e3403013 	movt	r3, #19
  135564:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  135568:	e30d3078 	movw	r3, #53368	; 0xd078
  13556c:	e3403014 	movt	r3, #20
  135570:	e51b200c 	ldr	r2, [fp, #-12]
  135574:	e3a01f8a 	mov	r1, #552	; 0x228
  135578:	e0020291 	mul	r2, r1, r2
  13557c:	e0833002 	add	r3, r3, r2
  135580:	e2832074 	add	r2, r3, #116	; 0x74
  135584:	e3043c9c 	movw	r3, #19612	; 0x4c9c
  135588:	e3403013 	movt	r3, #19
  13558c:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  135590:	e30d3078 	movw	r3, #53368	; 0xd078
  135594:	e3403014 	movt	r3, #20
  135598:	e51b200c 	ldr	r2, [fp, #-12]
  13559c:	e3a01f8a 	mov	r1, #552	; 0x228
  1355a0:	e0020291 	mul	r2, r1, r2
  1355a4:	e0833002 	add	r3, r3, r2
  1355a8:	e2833088 	add	r3, r3, #136	; 0x88
  1355ac:	e3a02000 	mov	r2, #0
  1355b0:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  1355b4:	e51b300c 	ldr	r3, [fp, #-12]
  1355b8:	e3a02f8a 	mov	r2, #552	; 0x228
  1355bc:	e0020392 	mul	r2, r2, r3
  1355c0:	e30d3078 	movw	r3, #53368	; 0xd078
  1355c4:	e3403014 	movt	r3, #20
  1355c8:	e0823003 	add	r3, r2, r3
  1355cc:	e24b2024 	sub	r2, fp, #36	; 0x24
  1355d0:	e3a01001 	mov	r1, #1
  1355d4:	e1a00003 	mov	r0, r3
  1355d8:	ebfffce3 	bl	13496c <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  1355dc:	e51b300c 	ldr	r3, [fp, #-12]
  1355e0:	e3a02f8a 	mov	r2, #552	; 0x228
  1355e4:	e0020392 	mul	r2, r2, r3
  1355e8:	e30d3078 	movw	r3, #53368	; 0xd078
  1355ec:	e3403014 	movt	r3, #20
  1355f0:	e0823003 	add	r3, r2, r3
  1355f4:	e1a00003 	mov	r0, r3
  1355f8:	ebfffc5c 	bl	134770 <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  1355fc:	e30e3be8 	movw	r3, #60392	; 0xebe8
  135600:	e3403014 	movt	r3, #20
  135604:	e3a02001 	mov	r2, #1
  135608:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  13560c:	e51b300c 	ldr	r3, [fp, #-12]
  135610:	e3a02f8a 	mov	r2, #552	; 0x228
  135614:	e0020392 	mul	r2, r2, r3
  135618:	e30d3078 	movw	r3, #53368	; 0xd078
  13561c:	e3403014 	movt	r3, #20
  135620:	e0820003 	add	r0, r2, r3
  135624:	e30d3078 	movw	r3, #53368	; 0xd078
  135628:	e3403014 	movt	r3, #20
  13562c:	e51b200c 	ldr	r2, [fp, #-12]
  135630:	e3a01f8a 	mov	r1, #552	; 0x228
  135634:	e0020291 	mul	r2, r1, r2
  135638:	e0833002 	add	r3, r3, r2
  13563c:	e283308c 	add	r3, r3, #140	; 0x8c
  135640:	e5933000 	ldr	r3, [r3]
  135644:	e1a01003 	mov	r1, r3
  135648:	ebffd045 	bl	129764 <eth_device_init>
  13564c:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  135650:	e51b3008 	ldr	r3, [fp, #-8]
  135654:	e3530000 	cmp	r3, #0
  135658:	1a000009 	bne	135684 <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  13565c:	e3090b68 	movw	r0, #39784	; 0x9b68
  135660:	e3400014 	movt	r0, #20
  135664:	ebff36aa 	bl	103114 <rt_kprintf>
  135668:	e3090b7c 	movw	r0, #39804	; 0x9b7c
  13566c:	e3400014 	movt	r0, #20
  135670:	ebff36a7 	bl	103114 <rt_kprintf>
  135674:	e30908fc 	movw	r0, #39164	; 0x98fc
  135678:	e3400014 	movt	r0, #20
  13567c:	ebff36a4 	bl	103114 <rt_kprintf>
  135680:	ea00000b 	b	1356b4 <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  135684:	e3090918 	movw	r0, #39192	; 0x9918
  135688:	e3400014 	movt	r0, #20
  13568c:	ebff36a0 	bl	103114 <rt_kprintf>
  135690:	e51b1008 	ldr	r1, [fp, #-8]
  135694:	e3090b98 	movw	r0, #39832	; 0x9b98
  135698:	e3400014 	movt	r0, #20
  13569c:	ebff369c 	bl	103114 <rt_kprintf>
  1356a0:	e30908fc 	movw	r0, #39164	; 0x98fc
  1356a4:	e3400014 	movt	r0, #20
  1356a8:	ebff3699 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  1356ac:	e3e03000 	mvn	r3, #0
  1356b0:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  1356b4:	e30d3078 	movw	r3, #53368	; 0xd078
  1356b8:	e3403014 	movt	r3, #20
  1356bc:	e51b200c 	ldr	r2, [fp, #-12]
  1356c0:	e3a01f8a 	mov	r1, #552	; 0x228
  1356c4:	e0020291 	mul	r2, r1, r2
  1356c8:	e0833002 	add	r3, r3, r2
  1356cc:	e28330a4 	add	r3, r3, #164	; 0xa4
  1356d0:	e5932000 	ldr	r2, [r3]
  1356d4:	e24b301c 	sub	r3, fp, #28
  1356d8:	e3091bb4 	movw	r1, #39860	; 0x9bb4
  1356dc:	e3401014 	movt	r1, #20
  1356e0:	e1a00003 	mov	r0, r3
  1356e4:	ebff3668 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  1356e8:	e51b300c 	ldr	r3, [fp, #-12]
  1356ec:	e3a02f8a 	mov	r2, #552	; 0x228
  1356f0:	e0020392 	mul	r2, r2, r3
  1356f4:	e30d3078 	movw	r3, #53368	; 0xd078
  1356f8:	e3403014 	movt	r3, #20
  1356fc:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  135700:	e24b001c 	sub	r0, fp, #28
  135704:	e3a03002 	mov	r3, #2
  135708:	e58d3004 	str	r3, [sp, #4]
  13570c:	e3a03019 	mov	r3, #25
  135710:	e58d3000 	str	r3, [sp]
  135714:	e3a03a01 	mov	r3, #4096	; 0x1000
  135718:	e3051354 	movw	r1, #21332	; 0x5354
  13571c:	e3401013 	movt	r1, #19
  135720:	ebff3273 	bl	1020f4 <rt_thread_create>
  135724:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135728:	e51b3010 	ldr	r3, [fp, #-16]
  13572c:	e3530000 	cmp	r3, #0
  135730:	0a000001 	beq	13573c <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  135734:	e51b0010 	ldr	r0, [fp, #-16]
  135738:	ebff32a2 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  13573c:	e24b301c 	sub	r3, fp, #28
  135740:	e3a0200a 	mov	r2, #10
  135744:	e3a01000 	mov	r1, #0
  135748:	e1a00003 	mov	r0, r3
  13574c:	eb002e04 	bl	140f64 <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135750:	e51b300c 	ldr	r3, [fp, #-12]
  135754:	e2833001 	add	r3, r3, #1
  135758:	e50b300c 	str	r3, [fp, #-12]
  13575c:	e51b300c 	ldr	r3, [fp, #-12]
  135760:	e3530000 	cmp	r3, #0
  135764:	0affff6b 	beq	135518 <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  135768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13576c:	e3530001 	cmp	r3, #1
  135770:	9a000005 	bls	13578c <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  135774:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135778:	e3a02000 	mov	r2, #0
  13577c:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  135780:	e3e03000 	mvn	r3, #0
  135784:	e50b3008 	str	r3, [fp, #-8]
  135788:	ea000009 	b	1357b4 <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  13578c:	e30d3078 	movw	r3, #53368	; 0xd078
  135790:	e3403014 	movt	r3, #20
  135794:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135798:	e3a01f8a 	mov	r1, #552	; 0x228
  13579c:	e0020291 	mul	r2, r1, r2
  1357a0:	e0833002 	add	r3, r3, r2
  1357a4:	e283308c 	add	r3, r3, #140	; 0x8c
  1357a8:	e5932000 	ldr	r2, [r3]
  1357ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1357b0:	e5832000 	str	r2, [r3]
    }

    return state;
  1357b4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1357b8:	e1a00003 	mov	r0, r3
  1357bc:	e24bd004 	sub	sp, fp, #4
  1357c0:	e8bd8800 	pop	{fp, pc}
  1357c4:	0014d05c 	.word	0x0014d05c

001357c8 <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  1357c8:	e92d4800 	push	{fp, lr}
  1357cc:	e28db004 	add	fp, sp, #4
  1357d0:	e24dd018 	sub	sp, sp, #24
  1357d4:	e50b0008 	str	r0, [fp, #-8]
  1357d8:	e50b100c 	str	r1, [fp, #-12]
  1357dc:	e50b2010 	str	r2, [fp, #-16]
  1357e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  1357e4:	e51b3010 	ldr	r3, [fp, #-16]
  1357e8:	e58d3000 	str	r3, [sp]
  1357ec:	e51b300c 	ldr	r3, [fp, #-12]
  1357f0:	e51b2008 	ldr	r2, [fp, #-8]
  1357f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1357f8:	e3090bd4 	movw	r0, #39892	; 0x9bd4
  1357fc:	e3400014 	movt	r0, #20
  135800:	ebff3643 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135804:	e1200070 	bkpt	0x0000
  135808:	eafffffd 	b	135804 <__assert_func+0x3c>

0013580c <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  13580c:	e92d4800 	push	{fp, lr}
  135810:	e28db004 	add	fp, sp, #4
  135814:	e24dd018 	sub	sp, sp, #24
  135818:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13581c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  135820:	e3a03000 	mov	r3, #0
  135824:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  135828:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13582c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135830:	e0823003 	add	r3, r2, r3
  135834:	e2432001 	sub	r2, r3, #1
  135838:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13583c:	e2633000 	rsb	r3, r3, #0
  135840:	e0022003 	and	r2, r2, r3
  135844:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135848:	e0823003 	add	r3, r2, r3
  13584c:	e2833004 	add	r3, r3, #4
  135850:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  135854:	e51b000c 	ldr	r0, [fp, #-12]
  135858:	eb001df8 	bl	13d040 <malloc>
  13585c:	e1a03000 	mov	r3, r0
  135860:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  135864:	e51b3010 	ldr	r3, [fp, #-16]
  135868:	e3530000 	cmp	r3, #0
  13586c:	1a000001 	bne	135878 <SDK_Malloc+0x6c>
    {
        return NULL;
  135870:	e3a03000 	mov	r3, #0
  135874:	ea000014 	b	1358cc <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  135878:	e51b2010 	ldr	r2, [fp, #-16]
  13587c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135880:	e0823003 	add	r3, r2, r3
  135884:	e2832003 	add	r2, r3, #3
  135888:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13588c:	e2633000 	rsb	r3, r3, #0
  135890:	e0033002 	and	r3, r3, r2
  135894:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135898:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13589c:	e2433004 	sub	r3, r3, #4
  1358a0:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  1358a4:	e51b3008 	ldr	r3, [fp, #-8]
  1358a8:	e3032039 	movw	r2, #12345	; 0x3039
  1358ac:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  1358b0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1358b4:	e51b3010 	ldr	r3, [fp, #-16]
  1358b8:	e0423003 	sub	r3, r2, r3
  1358bc:	e6ff2073 	uxth	r2, r3
  1358c0:	e51b3008 	ldr	r3, [fp, #-8]
  1358c4:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  1358c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  1358cc:	e1a00003 	mov	r0, r3
  1358d0:	e24bd004 	sub	sp, fp, #4
  1358d4:	e8bd8800 	pop	{fp, pc}

001358d8 <SDK_Free>:

void SDK_Free(void *ptr)
{
  1358d8:	e92d4800 	push	{fp, lr}
  1358dc:	e28db004 	add	fp, sp, #4
  1358e0:	e24dd010 	sub	sp, sp, #16
  1358e4:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  1358e8:	e51b3010 	ldr	r3, [fp, #-16]
  1358ec:	e2433004 	sub	r3, r3, #4
  1358f0:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  1358f4:	e51b3008 	ldr	r3, [fp, #-8]
  1358f8:	e1d330b0 	ldrh	r3, [r3]
  1358fc:	e3032039 	movw	r2, #12345	; 0x3039
  135900:	e1530002 	cmp	r3, r2
  135904:	1a000006 	bne	135924 <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135908:	e51b3010 	ldr	r3, [fp, #-16]
  13590c:	e51b2008 	ldr	r2, [fp, #-8]
  135910:	e1d220b2 	ldrh	r2, [r2, #2]
  135914:	e0433002 	sub	r3, r3, r2
  135918:	e1a00003 	mov	r0, r3
  13591c:	eb001f83 	bl	13d730 <free>
  135920:	ea000000 	b	135928 <SDK_Free+0x50>
        return;
  135924:	e320f000 	nop	{0}
}
  135928:	e24bd004 	sub	sp, fp, #4
  13592c:	e8bd8800 	pop	{fp, pc}

00135930 <ENET_Reset>:
{
  135930:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135934:	e28db000 	add	fp, sp, #0
  135938:	e24dd00c 	sub	sp, sp, #12
  13593c:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  135940:	e51b3008 	ldr	r3, [fp, #-8]
  135944:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135948:	e3832001 	orr	r2, r3, #1
  13594c:	e51b3008 	ldr	r3, [fp, #-8]
  135950:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135954:	e320f000 	nop	{0}
  135958:	e28bd000 	add	sp, fp, #0
  13595c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135960:	e12fff1e 	bx	lr

00135964 <ENET_GetSMI>:
{
  135964:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135968:	e28db000 	add	fp, sp, #0
  13596c:	e24dd00c 	sub	sp, sp, #12
  135970:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  135974:	e51b3008 	ldr	r3, [fp, #-8]
  135978:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  13597c:	e203307e 	and	r3, r3, #126	; 0x7e
  135980:	e3530000 	cmp	r3, #0
  135984:	13a03001 	movne	r3, #1
  135988:	03a03000 	moveq	r3, #0
  13598c:	e6ef3073 	uxtb	r3, r3
}
  135990:	e1a00003 	mov	r0, r3
  135994:	e28bd000 	add	sp, fp, #0
  135998:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13599c:	e12fff1e 	bx	lr

001359a0 <ENET_EnableSleepMode>:
{
  1359a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1359a4:	e28db000 	add	fp, sp, #0
  1359a8:	e24dd00c 	sub	sp, sp, #12
  1359ac:	e50b0008 	str	r0, [fp, #-8]
  1359b0:	e1a03001 	mov	r3, r1
  1359b4:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  1359b8:	e55b3009 	ldrb	r3, [fp, #-9]
  1359bc:	e3530000 	cmp	r3, #0
  1359c0:	0a000005 	beq	1359dc <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  1359c4:	e51b3008 	ldr	r3, [fp, #-8]
  1359c8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1359cc:	e383200c 	orr	r2, r3, #12
  1359d0:	e51b3008 	ldr	r3, [fp, #-8]
  1359d4:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1359d8:	ea000004 	b	1359f0 <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  1359dc:	e51b3008 	ldr	r3, [fp, #-8]
  1359e0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1359e4:	e3c3200c 	bic	r2, r3, #12
  1359e8:	e51b3008 	ldr	r3, [fp, #-8]
  1359ec:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1359f0:	e320f000 	nop	{0}
  1359f4:	e28bd000 	add	sp, fp, #0
  1359f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1359fc:	e12fff1e 	bx	lr

00135a00 <ENET_EnableInterrupts>:
{
  135a00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135a04:	e28db000 	add	fp, sp, #0
  135a08:	e24dd00c 	sub	sp, sp, #12
  135a0c:	e50b0008 	str	r0, [fp, #-8]
  135a10:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135a14:	e51b3008 	ldr	r3, [fp, #-8]
  135a18:	e5932008 	ldr	r2, [r3, #8]
  135a1c:	e51b300c 	ldr	r3, [fp, #-12]
  135a20:	e1822003 	orr	r2, r2, r3
  135a24:	e51b3008 	ldr	r3, [fp, #-8]
  135a28:	e5832008 	str	r2, [r3, #8]
}
  135a2c:	e320f000 	nop	{0}
  135a30:	e28bd000 	add	sp, fp, #0
  135a34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135a38:	e12fff1e 	bx	lr

00135a3c <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  135a3c:	e92d4800 	push	{fp, lr}
  135a40:	e28db004 	add	fp, sp, #4
  135a44:	e24dd010 	sub	sp, sp, #16
  135a48:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135a4c:	e3a03000 	mov	r3, #0
  135a50:	e50b3008 	str	r3, [fp, #-8]
  135a54:	ea000009 	b	135a80 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  135a58:	e3093c14 	movw	r3, #39956	; 0x9c14
  135a5c:	e3403014 	movt	r3, #20
  135a60:	e51b2008 	ldr	r2, [fp, #-8]
  135a64:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  135a68:	e51b2010 	ldr	r2, [fp, #-16]
  135a6c:	e1520003 	cmp	r2, r3
  135a70:	0a000006 	beq	135a90 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135a74:	e51b3008 	ldr	r3, [fp, #-8]
  135a78:	e2833001 	add	r3, r3, #1
  135a7c:	e50b3008 	str	r3, [fp, #-8]
  135a80:	e51b3008 	ldr	r3, [fp, #-8]
  135a84:	e3530002 	cmp	r3, #2
  135a88:	9afffff2 	bls	135a58 <ENET_GetInstance+0x1c>
  135a8c:	ea000000 	b	135a94 <ENET_GetInstance+0x58>
        {
            break;
  135a90:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135a94:	e51b3008 	ldr	r3, [fp, #-8]
  135a98:	e3530002 	cmp	r3, #2
  135a9c:	9a000005 	bls	135ab8 <ENET_GetInstance+0x7c>
  135aa0:	e3a020d7 	mov	r2, #215	; 0xd7
  135aa4:	e3091fa0 	movw	r1, #40864	; 0x9fa0
  135aa8:	e3401014 	movt	r1, #20
  135aac:	e3090c20 	movw	r0, #39968	; 0x9c20
  135ab0:	e3400014 	movt	r0, #20
  135ab4:	ebff36b7 	bl	103598 <rt_assert_handler>

    return instance;
  135ab8:	e51b3008 	ldr	r3, [fp, #-8]
}
  135abc:	e1a00003 	mov	r0, r3
  135ac0:	e24bd004 	sub	sp, fp, #4
  135ac4:	e8bd8800 	pop	{fp, pc}

00135ac8 <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135ac8:	e92d4800 	push	{fp, lr}
  135acc:	e28db004 	add	fp, sp, #4
  135ad0:	e24dd008 	sub	sp, sp, #8
  135ad4:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135ad8:	e51b3008 	ldr	r3, [fp, #-8]
  135adc:	e3530000 	cmp	r3, #0
  135ae0:	1a000005 	bne	135afc <ENET_GetDefaultConfig+0x34>
  135ae4:	e3a020e9 	mov	r2, #233	; 0xe9
  135ae8:	e3091fb4 	movw	r1, #40884	; 0x9fb4
  135aec:	e3401014 	movt	r1, #20
  135af0:	e3090c44 	movw	r0, #40004	; 0x9c44
  135af4:	e3400014 	movt	r0, #20
  135af8:	ebff36a6 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135afc:	e3a02024 	mov	r2, #36	; 0x24
  135b00:	e3a01000 	mov	r1, #0
  135b04:	e51b0008 	ldr	r0, [fp, #-8]
  135b08:	eb002d15 	bl	140f64 <memset>
    // #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    // config->intCoalesceCfg = &intcoalesce_config;
    // #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135b0c:	e51b3008 	ldr	r3, [fp, #-8]
  135b10:	e3a02001 	mov	r2, #1
  135b14:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  135b18:	e51b3008 	ldr	r3, [fp, #-8]
  135b1c:	e3a02001 	mov	r2, #1
  135b20:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135b24:	e51b3008 	ldr	r3, [fp, #-8]
  135b28:	e3a02001 	mov	r2, #1
  135b2c:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  135b30:	e51b3008 	ldr	r3, [fp, #-8]
  135b34:	e30025ee 	movw	r2, #1518	; 0x5ee
  135b38:	e1c320b8 	strh	r2, [r3, #8]
}
  135b3c:	e320f000 	nop	{0}
  135b40:	e24bd004 	sub	sp, fp, #4
  135b44:	e8bd8800 	pop	{fp, pc}

00135b48 <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  135b48:	e92d4800 	push	{fp, lr}
  135b4c:	e28db004 	add	fp, sp, #4
  135b50:	e24dd018 	sub	sp, sp, #24
  135b54:	e50b0008 	str	r0, [fp, #-8]
  135b58:	e50b100c 	str	r1, [fp, #-12]
  135b5c:	e50b2010 	str	r2, [fp, #-16]
  135b60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  135b64:	e51b300c 	ldr	r3, [fp, #-12]
  135b68:	e3530000 	cmp	r3, #0
  135b6c:	1a000005 	bne	135b88 <ENET_Init+0x40>
  135b70:	e3002103 	movw	r2, #259	; 0x103
  135b74:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135b78:	e3401014 	movt	r1, #20
  135b7c:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  135b80:	e3400014 	movt	r0, #20
  135b84:	ebff3683 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  135b88:	e51b3010 	ldr	r3, [fp, #-16]
  135b8c:	e3530000 	cmp	r3, #0
  135b90:	1a000005 	bne	135bac <ENET_Init+0x64>
  135b94:	e3a02f41 	mov	r2, #260	; 0x104
  135b98:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135b9c:	e3401014 	movt	r1, #20
  135ba0:	e3090c44 	movw	r0, #40004	; 0x9c44
  135ba4:	e3400014 	movt	r0, #20
  135ba8:	ebff367a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bb0:	e3530000 	cmp	r3, #0
  135bb4:	1a000005 	bne	135bd0 <ENET_Init+0x88>
  135bb8:	e3002105 	movw	r2, #261	; 0x105
  135bbc:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135bc0:	e3401014 	movt	r1, #20
  135bc4:	e3090c54 	movw	r0, #40020	; 0x9c54
  135bc8:	e3400014 	movt	r0, #20
  135bcc:	ebff3671 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135bd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bd4:	e593300c 	ldr	r3, [r3, #12]
  135bd8:	e3530000 	cmp	r3, #0
  135bdc:	1a000005 	bne	135bf8 <ENET_Init+0xb0>
  135be0:	e3002106 	movw	r2, #262	; 0x106
  135be4:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135be8:	e3401014 	movt	r1, #20
  135bec:	e3090c64 	movw	r0, #40036	; 0x9c64
  135bf0:	e3400014 	movt	r0, #20
  135bf4:	ebff3667 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  135bf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bfc:	e5933010 	ldr	r3, [r3, #16]
  135c00:	e3530000 	cmp	r3, #0
  135c04:	1a000005 	bne	135c20 <ENET_Init+0xd8>
  135c08:	e3002107 	movw	r2, #263	; 0x107
  135c0c:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135c10:	e3401014 	movt	r1, #20
  135c14:	e3090c88 	movw	r0, #40072	; 0x9c88
  135c18:	e3400014 	movt	r0, #20
  135c1c:	ebff365d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135c20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c24:	e5933014 	ldr	r3, [r3, #20]
  135c28:	e3530000 	cmp	r3, #0
  135c2c:	1a000005 	bne	135c48 <ENET_Init+0x100>
  135c30:	e3a02f42 	mov	r2, #264	; 0x108
  135c34:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135c38:	e3401014 	movt	r1, #20
  135c3c:	e3090cac 	movw	r0, #40108	; 0x9cac
  135c40:	e3400014 	movt	r0, #20
  135c44:	ebff3653 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  135c48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c4c:	e5933018 	ldr	r3, [r3, #24]
  135c50:	e3530000 	cmp	r3, #0
  135c54:	1a000005 	bne	135c70 <ENET_Init+0x128>
  135c58:	e3002109 	movw	r2, #265	; 0x109
  135c5c:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135c60:	e3401014 	movt	r1, #20
  135c64:	e3090cc8 	movw	r0, #40136	; 0x9cc8
  135c68:	e3400014 	movt	r0, #20
  135c6c:	ebff3649 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  135c70:	e59b3004 	ldr	r3, [fp, #4]
  135c74:	e3530000 	cmp	r3, #0
  135c78:	1a000005 	bne	135c94 <ENET_Init+0x14c>
  135c7c:	e300210a 	movw	r2, #266	; 0x10a
  135c80:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135c84:	e3401014 	movt	r1, #20
  135c88:	e3090ce4 	movw	r0, #40164	; 0x9ce4
  135c8c:	e3400014 	movt	r0, #20
  135c90:	ebff3640 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135c94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c98:	e5933004 	ldr	r3, [r3, #4]
  135c9c:	e35300ff 	cmp	r3, #255	; 0xff
  135ca0:	8a000005 	bhi	135cbc <ENET_Init+0x174>
  135ca4:	e300210b 	movw	r2, #267	; 0x10b
  135ca8:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135cac:	e3401014 	movt	r1, #20
  135cb0:	e3090cec 	movw	r0, #40172	; 0x9cec
  135cb4:	e3400014 	movt	r0, #20
  135cb8:	ebff3636 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135cbc:	e51b3010 	ldr	r3, [fp, #-16]
  135cc0:	e5933000 	ldr	r3, [r3]
  135cc4:	e2033c02 	and	r3, r3, #512	; 0x200
  135cc8:	e3530000 	cmp	r3, #0
  135ccc:	0a00000e 	beq	135d0c <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  135cd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135cd4:	e5933008 	ldr	r3, [r3, #8]
  135cd8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135cdc:	e1d220b2 	ldrh	r2, [r2, #2]
  135ce0:	e0030392 	mul	r3, r2, r3
  135ce4:	e30025f2 	movw	r2, #1522	; 0x5f2
  135ce8:	e1530002 	cmp	r3, r2
  135cec:	8a000023 	bhi	135d80 <ENET_Init+0x238>
  135cf0:	e300210f 	movw	r2, #271	; 0x10f
  135cf4:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135cf8:	e3401014 	movt	r1, #20
  135cfc:	e3090d24 	movw	r0, #40228	; 0x9d24
  135d00:	e3400014 	movt	r0, #20
  135d04:	ebff3623 	bl	103598 <rt_assert_handler>
  135d08:	ea00001c 	b	135d80 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  135d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d10:	e5933008 	ldr	r3, [r3, #8]
  135d14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135d18:	e1d220b2 	ldrh	r2, [r2, #2]
  135d1c:	e0030392 	mul	r3, r2, r3
  135d20:	e30025ee 	movw	r2, #1518	; 0x5ee
  135d24:	e1530002 	cmp	r3, r2
  135d28:	8a000005 	bhi	135d44 <ENET_Init+0x1fc>
  135d2c:	e3002113 	movw	r2, #275	; 0x113
  135d30:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135d34:	e3401014 	movt	r1, #20
  135d38:	e3090d94 	movw	r0, #40340	; 0x9d94
  135d3c:	e3400014 	movt	r0, #20
  135d40:	ebff3614 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  135d44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d48:	e5933004 	ldr	r3, [r3, #4]
  135d4c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135d50:	e1d220b0 	ldrh	r2, [r2]
  135d54:	e0030392 	mul	r3, r2, r3
  135d58:	e51b2010 	ldr	r2, [fp, #-16]
  135d5c:	e1d220b8 	ldrh	r2, [r2, #8]
  135d60:	e1530002 	cmp	r3, r2
  135d64:	8a000005 	bhi	135d80 <ENET_Init+0x238>
  135d68:	e3a02f45 	mov	r2, #276	; 0x114
  135d6c:	e3091fcc 	movw	r1, #40908	; 0x9fcc
  135d70:	e3401014 	movt	r1, #20
  135d74:	e3090de8 	movw	r0, #40424	; 0x9de8
  135d78:	e3400014 	movt	r0, #20
  135d7c:	ebff3605 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  135d80:	e51b0008 	ldr	r0, [fp, #-8]
  135d84:	ebfffee9 	bl	135930 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135d88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d8c:	e5930010 	ldr	r0, [r3, #16]
  135d90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d94:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  135d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d9c:	e5932018 	ldr	r2, [r3, #24]
  135da0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135da4:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  135da8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135dac:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135db0:	e58d3000 	str	r3, [sp]
  135db4:	e1a0300c 	mov	r3, ip
  135db8:	eb000193 	bl	13640c <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135dc0:	e593000c 	ldr	r0, [r3, #12]
  135dc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135dc8:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  135dcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135dd0:	e5932014 	ldr	r2, [r3, #20]
  135dd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135dd8:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  135ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135de0:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135de4:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  135de8:	e51b3010 	ldr	r3, [fp, #-16]
  135dec:	e5933004 	ldr	r3, [r3, #4]
  135df0:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135df4:	e3530000 	cmp	r3, #0
  135df8:	13a03001 	movne	r3, #1
  135dfc:	03a03000 	moveq	r3, #0
  135e00:	e6ef3073 	uxtb	r3, r3
  135e04:	e58d3004 	str	r3, [sp, #4]
  135e08:	e58de000 	str	lr, [sp]
  135e0c:	e1a0300c 	mov	r3, ip
  135e10:	eb0001cf 	bl	136554 <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  135e14:	e59b3008 	ldr	r3, [fp, #8]
  135e18:	e58d3000 	str	r3, [sp]
  135e1c:	e59b3004 	ldr	r3, [fp, #4]
  135e20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135e24:	e51b1010 	ldr	r1, [fp, #-16]
  135e28:	e51b0008 	ldr	r0, [fp, #-8]
  135e2c:	eb00005e 	bl	135fac <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  135e30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e34:	e51b2010 	ldr	r2, [fp, #-16]
  135e38:	e51b100c 	ldr	r1, [fp, #-12]
  135e3c:	e51b0008 	ldr	r0, [fp, #-8]
  135e40:	eb00002a 	bl	135ef0 <ENET_SetHandler>
}
  135e44:	e320f000 	nop	{0}
  135e48:	e24bd004 	sub	sp, fp, #4
  135e4c:	e8bd8800 	pop	{fp, pc}

00135e50 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  135e50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135e54:	e28db000 	add	fp, sp, #0
  135e58:	e24dd00c 	sub	sp, sp, #12
  135e5c:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  135e60:	e51b3008 	ldr	r3, [fp, #-8]
  135e64:	e3a02000 	mov	r2, #0
  135e68:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  135e6c:	e51b3008 	ldr	r3, [fp, #-8]
  135e70:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135e74:	e3c32002 	bic	r2, r3, #2
  135e78:	e51b3008 	ldr	r3, [fp, #-8]
  135e7c:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  135e80:	e320f000 	nop	{0}
  135e84:	e28bd000 	add	sp, fp, #0
  135e88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135e8c:	e12fff1e 	bx	lr

00135e90 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  135e90:	e92d4800 	push	{fp, lr}
  135e94:	e28db004 	add	fp, sp, #4
  135e98:	e24dd010 	sub	sp, sp, #16
  135e9c:	e50b0008 	str	r0, [fp, #-8]
  135ea0:	e50b100c 	str	r1, [fp, #-12]
  135ea4:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  135ea8:	e51b3008 	ldr	r3, [fp, #-8]
  135eac:	e3530000 	cmp	r3, #0
  135eb0:	1a000005 	bne	135ecc <ENET_SetCallback+0x3c>
  135eb4:	e3002132 	movw	r2, #306	; 0x132
  135eb8:	e3091fd8 	movw	r1, #40920	; 0x9fd8
  135ebc:	e3401014 	movt	r1, #20
  135ec0:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  135ec4:	e3400014 	movt	r0, #20
  135ec8:	ebff35b2 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  135ecc:	e51b3008 	ldr	r3, [fp, #-8]
  135ed0:	e51b200c 	ldr	r2, [fp, #-12]
  135ed4:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  135ed8:	e51b3008 	ldr	r3, [fp, #-8]
  135edc:	e51b2010 	ldr	r2, [fp, #-16]
  135ee0:	e583201c 	str	r2, [r3, #28]
}
  135ee4:	e320f000 	nop	{0}
  135ee8:	e24bd004 	sub	sp, fp, #4
  135eec:	e8bd8800 	pop	{fp, pc}

00135ef0 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  135ef0:	e92d4800 	push	{fp, lr}
  135ef4:	e28db004 	add	fp, sp, #4
  135ef8:	e24dd018 	sub	sp, sp, #24
  135efc:	e50b0010 	str	r0, [fp, #-16]
  135f00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  135f04:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  135f08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  135f0c:	e51b0010 	ldr	r0, [fp, #-16]
  135f10:	ebfffc89 	bl	13513c <get_instance_by_base>
  135f14:	e1a03000 	mov	r3, r0
  135f18:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  135f1c:	e3a02020 	mov	r2, #32
  135f20:	e3a01000 	mov	r1, #0
  135f24:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  135f28:	eb002c0d 	bl	140f64 <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  135f2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135f30:	e593200c 	ldr	r2, [r3, #12]
  135f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f38:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  135f3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135f40:	e593200c 	ldr	r2, [r3, #12]
  135f44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f48:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  135f4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135f50:	e5932010 	ldr	r2, [r3, #16]
  135f54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f58:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  135f5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135f60:	e5932010 	ldr	r2, [r3, #16]
  135f64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f68:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  135f6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135f70:	e5932004 	ldr	r2, [r3, #4]
  135f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f78:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  135f7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135f80:	e5932008 	ldr	r2, [r3, #8]
  135f84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f88:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  135f8c:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  135f90:	e3403014 	movt	r3, #20
  135f94:	e51b2008 	ldr	r2, [fp, #-8]
  135f98:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135f9c:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  135fa0:	e320f000 	nop	{0}
  135fa4:	e24bd004 	sub	sp, fp, #4
  135fa8:	e8bd8800 	pop	{fp, pc}

00135fac <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  135fac:	e92d4800 	push	{fp, lr}
  135fb0:	e28db004 	add	fp, sp, #4
  135fb4:	e24dd030 	sub	sp, sp, #48	; 0x30
  135fb8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  135fbc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  135fc0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  135fc4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  135fc8:	e3a03000 	mov	r3, #0
  135fcc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  135fd0:	e3a03000 	mov	r3, #0
  135fd4:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  135fd8:	e3a03000 	mov	r3, #0
  135fdc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  135fe0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135fe4:	e5933000 	ldr	r3, [r3]
  135fe8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  135fec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135ff0:	e1d330b8 	ldrh	r3, [r3, #8]
  135ff4:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  135ff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135ffc:	e2033c02 	and	r3, r3, #512	; 0x200
  136000:	e3530000 	cmp	r3, #0
  136004:	0a000005 	beq	136020 <ENET_SetMacController+0x74>
  136008:	e51b300c 	ldr	r3, [fp, #-12]
  13600c:	e30025ee 	movw	r2, #1518	; 0x5ee
  136010:	e1530002 	cmp	r3, r2
  136014:	8a000001 	bhi	136020 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  136018:	e30035f2 	movw	r3, #1522	; 0x5f2
  13601c:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136020:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136024:	e1a03e83 	lsl	r3, r3, #29
  136028:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  13602c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136030:	e1a03783 	lsl	r3, r3, #15
  136034:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136038:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  13603c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136040:	e1a03283 	lsl	r3, r3, #5
  136044:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136048:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  13604c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136050:	e1a03503 	lsl	r3, r3, #10
  136054:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136058:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  13605c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136060:	e1a03083 	lsl	r3, r3, #1
  136064:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136068:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  13606c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136070:	e1a03223 	lsr	r3, r3, #4
  136074:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136078:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  13607c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136080:	e593300c 	ldr	r3, [r3, #12]
  136084:	e1a03403 	lsl	r3, r3, #8
  136088:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  13608c:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136090:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136094:	e5922010 	ldr	r2, [r2, #16]
  136098:	e3520000 	cmp	r2, #0
  13609c:	1a000001 	bne	1360a8 <ENET_SetMacController+0xfc>
  1360a0:	e3a02c02 	mov	r2, #512	; 0x200
  1360a4:	ea000000 	b	1360ac <ENET_SetMacController+0x100>
  1360a8:	e3a02000 	mov	r2, #0
  1360ac:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  1360b0:	e51b300c 	ldr	r3, [fp, #-12]
  1360b4:	e1a01803 	lsl	r1, r3, #16
  1360b8:	e3a03000 	mov	r3, #0
  1360bc:	e3433fff 	movt	r3, #16383	; 0x3fff
  1360c0:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1360c4:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  1360c8:	e3833901 	orr	r3, r3, #16384	; 0x4000
  1360cc:	e3833004 	orr	r3, r3, #4
  1360d0:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  1360d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1360d8:	e5933014 	ldr	r3, [r3, #20]
  1360dc:	e3530000 	cmp	r3, #0
  1360e0:	1a000002 	bne	1360f0 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  1360e4:	e51b3008 	ldr	r3, [fp, #-8]
  1360e8:	e3833002 	orr	r3, r3, #2
  1360ec:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  1360f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1360f4:	e5933000 	ldr	r3, [r3]
  1360f8:	e2033c01 	and	r3, r3, #256	; 0x100
  1360fc:	e3530000 	cmp	r3, #0
  136100:	0a000009 	beq	13612c <ENET_SetMacController+0x180>
  136104:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136108:	e593300c 	ldr	r3, [r3, #12]
  13610c:	e3530000 	cmp	r3, #0
  136110:	1a000005 	bne	13612c <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  136114:	e51b3008 	ldr	r3, [fp, #-8]
  136118:	e3833001 	orr	r3, r3, #1
  13611c:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  136120:	e51b3008 	ldr	r3, [fp, #-8]
  136124:	e3c33002 	bic	r3, r3, #2
  136128:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  13612c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136130:	e51b2008 	ldr	r2, [fp, #-8]
  136134:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  136138:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13613c:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136140:	e3c33f41 	bic	r3, r3, #260	; 0x104
  136144:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  136148:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13614c:	e5933014 	ldr	r3, [r3, #20]
  136150:	e1a03103 	lsl	r3, r3, #2
  136154:	e2032004 	and	r2, r3, #4
  136158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13615c:	e1a03203 	lsl	r3, r3, #4
  136160:	e2033c01 	and	r3, r3, #256	; 0x100
  136164:	e1823003 	orr	r3, r2, r3
  136168:	e51b2010 	ldr	r2, [fp, #-16]
  13616c:	e1823003 	orr	r3, r2, r3
  136170:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  136174:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136178:	e51b2010 	ldr	r2, [fp, #-16]
  13617c:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  136180:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136184:	e5d33019 	ldrb	r3, [r3, #25]
  136188:	e1a02003 	mov	r2, r3
  13618c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136190:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  136194:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136198:	e5d33018 	ldrb	r3, [r3, #24]
  13619c:	e1a02003 	mov	r2, r3
  1361a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361a4:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  1361a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1361ac:	e2033001 	and	r3, r3, #1
  1361b0:	e3530000 	cmp	r3, #0
  1361b4:	0a00000a 	beq	1361e4 <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  1361b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1361bc:	e1d331ba 	ldrh	r3, [r3, #26]
  1361c0:	e1a02003 	mov	r2, r3
  1361c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361c8:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  1361cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1361d0:	e5d3301c 	ldrb	r3, [r3, #28]
  1361d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  1361d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1361e0:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  1361e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1361e8:	e2033020 	and	r3, r3, #32
  1361ec:	e3530000 	cmp	r3, #0
  1361f0:	0a00000a 	beq	136220 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  1361f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1361f8:	e5d3301e 	ldrb	r3, [r3, #30]
  1361fc:	e203203f 	and	r2, r3, #63	; 0x3f
  136200:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136204:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  136208:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13620c:	e5d3301d 	ldrb	r3, [r3, #29]
  136210:	e1a02003 	mov	r2, r3
  136214:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136218:	e5832190 	str	r2, [r3, #400]	; 0x190
  13621c:	ea000005 	b	136238 <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136220:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136224:	e3a02c01 	mov	r2, #256	; 0x100
  136228:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  13622c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136230:	e3a02000 	mov	r2, #0
  136234:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  136238:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13623c:	e5d33019 	ldrb	r3, [r3, #25]
  136240:	e2033018 	and	r3, r3, #24
  136244:	e3530000 	cmp	r3, #0
  136248:	0a000002 	beq	136258 <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  13624c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136250:	e3a02c01 	mov	r2, #256	; 0x100
  136254:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  136258:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13625c:	e5d33018 	ldrb	r3, [r3, #24]
  136260:	e2033006 	and	r3, r3, #6
  136264:	e3530000 	cmp	r3, #0
  136268:	0a000002 	beq	136278 <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  13626c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136270:	e3a02000 	mov	r2, #0
  136274:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  136278:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13627c:	e5933020 	ldr	r3, [r3, #32]
  136280:	e1a02003 	mov	r2, r3
  136284:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136288:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  13628c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136290:	e593301c 	ldr	r3, [r3, #28]
  136294:	e1a02003 	mov	r2, r3
  136298:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13629c:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  1362a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1362a4:	e5933004 	ldr	r3, [r3, #4]
  1362a8:	e1a02203 	lsl	r2, r3, #4
  1362ac:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  1362b0:	e0033002 	and	r3, r3, r2
  1362b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1362b8:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  1362bc:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1362c0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1362c4:	eb000126 	bl	136764 <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  1362c8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1362cc:	ebfffda4 	bl	135964 <ENET_GetSMI>
  1362d0:	e1a03000 	mov	r3, r0
  1362d4:	e2233001 	eor	r3, r3, #1
  1362d8:	e6ef3073 	uxtb	r3, r3
  1362dc:	e3530000 	cmp	r3, #0
  1362e0:	0a00000a 	beq	136310 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  1362e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1362e8:	e5933000 	ldr	r3, [r3]
  1362ec:	e2033040 	and	r3, r3, #64	; 0x40
  1362f0:	e3530000 	cmp	r3, #0
  1362f4:	13a03001 	movne	r3, #1
  1362f8:	03a03000 	moveq	r3, #0
  1362fc:	e6ef3073 	uxtb	r3, r3
  136300:	e1a02003 	mov	r2, r3
  136304:	e59b1004 	ldr	r1, [fp, #4]
  136308:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13630c:	eb000179 	bl	1368f8 <ENET_SetSMI>
    }
printf("**********%d\n", __LINE__);
  136310:	e30011c3 	movw	r1, #451	; 0x1c3
  136314:	e3090e3c 	movw	r0, #40508	; 0x9e3c
  136318:	e3400014 	movt	r0, #20
  13631c:	eb001fe1 	bl	13e2a8 <printf>
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  136320:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136324:	e5933020 	ldr	r3, [r3, #32]
  136328:	e3530000 	cmp	r3, #0
  13632c:	0a000024 	beq	1363c4 <ENET_SetMacController+0x418>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  136330:	e3a03405 	mov	r3, #83886080	; 0x5000000
  136334:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  136338:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13633c:	e5932008 	ldr	r2, [r3, #8]
  136340:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136344:	e1e03003 	mvn	r3, r3
  136348:	e0022003 	and	r2, r2, r3
  13634c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136350:	e5832008 	str	r2, [r3, #8]
        printf("**********%d\n", __LINE__);
  136354:	e3a01f73 	mov	r1, #460	; 0x1cc
  136358:	e3090e3c 	movw	r0, #40508	; 0x9e3c
  13635c:	e3400014 	movt	r0, #20
  136360:	eb001fd0 	bl	13e2a8 <printf>
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136364:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136368:	e5933020 	ldr	r3, [r3, #32]
  13636c:	e5d33000 	ldrb	r3, [r3]
  136370:	e1a03a03 	lsl	r3, r3, #20
  136374:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136378:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  13637c:	e5922020 	ldr	r2, [r2, #32]
  136380:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136384:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136388:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13638c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136390:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136394:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136398:	e5933020 	ldr	r3, [r3, #32]
  13639c:	e5d33004 	ldrb	r3, [r3, #4]
  1363a0:	e1a03a03 	lsl	r3, r3, #20
  1363a4:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1363a8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1363ac:	e5922020 	ldr	r2, [r2, #32]
  1363b0:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1363b4:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1363b8:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1363bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1363c0:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  1363c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363c8:	e5933004 	ldr	r3, [r3, #4]
  1363cc:	e1a01003 	mov	r1, r3
  1363d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1363d4:	ebfffd89 	bl	135a00 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  1363d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1363dc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1363e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  1363e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1363e8:	e3833c01 	orr	r3, r3, #256	; 0x100
  1363ec:	e3833002 	orr	r3, r3, #2
  1363f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  1363f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1363f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1363fc:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  136400:	e320f000 	nop	{0}
  136404:	e24bd004 	sub	sp, fp, #4
  136408:	e8bd8800 	pop	{fp, pc}

0013640c <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  13640c:	e92d4800 	push	{fp, lr}
  136410:	e28db004 	add	fp, sp, #4
  136414:	e24dd018 	sub	sp, sp, #24
  136418:	e50b0010 	str	r0, [fp, #-16]
  13641c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136420:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136424:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  136428:	e51b3010 	ldr	r3, [fp, #-16]
  13642c:	e3530000 	cmp	r3, #0
  136430:	1a000005 	bne	13644c <ENET_SetTxBufferDescriptors+0x40>
  136434:	e3a02f79 	mov	r2, #484	; 0x1e4
  136438:	e3091fec 	movw	r1, #40940	; 0x9fec
  13643c:	e3401014 	movt	r1, #20
  136440:	e3090e4c 	movw	r0, #40524	; 0x9e4c
  136444:	e3400014 	movt	r0, #20
  136448:	ebff3452 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  13644c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136450:	e3530000 	cmp	r3, #0
  136454:	1a000005 	bne	136470 <ENET_SetTxBufferDescriptors+0x64>
  136458:	e30021e5 	movw	r2, #485	; 0x1e5
  13645c:	e3091fec 	movw	r1, #40940	; 0x9fec
  136460:	e3401014 	movt	r1, #20
  136464:	e3090e5c 	movw	r0, #40540	; 0x9e5c
  136468:	e3400014 	movt	r0, #20
  13646c:	ebff3449 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  136470:	e51b3010 	ldr	r3, [fp, #-16]
  136474:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136478:	e3a03000 	mov	r3, #0
  13647c:	e50b3008 	str	r3, [fp, #-8]
  136480:	ea00002c 	b	136538 <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  136484:	e51b3008 	ldr	r3, [fp, #-8]
  136488:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13648c:	e0030392 	mul	r3, r2, r3
  136490:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136494:	e0823003 	add	r3, r2, r3
  136498:	e1a00003 	mov	r0, r3
  13649c:	ebff37de 	bl	10441c <ueth_v2p>
  1364a0:	e1a02000 	mov	r2, r0
  1364a4:	e51b300c 	ldr	r3, [fp, #-12]
  1364a8:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  1364ac:	e51b300c 	ldr	r3, [fp, #-12]
  1364b0:	e5933004 	ldr	r3, [r3, #4]
  1364b4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1364b8:	e3a01003 	mov	r1, #3
  1364bc:	e1a00003 	mov	r0, r3
  1364c0:	ebff3802 	bl	1044d0 <ueth_remap>
  1364c4:	e1a01000 	mov	r1, r0
  1364c8:	e30c3e58 	movw	r3, #52824	; 0xce58
  1364cc:	e3403015 	movt	r3, #21
  1364d0:	e51b2008 	ldr	r2, [fp, #-8]
  1364d4:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  1364d8:	e51b300c 	ldr	r3, [fp, #-12]
  1364dc:	e3a02000 	mov	r2, #0
  1364e0:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  1364e4:	e51b300c 	ldr	r3, [fp, #-12]
  1364e8:	e3a02b01 	mov	r2, #1024	; 0x400
  1364ec:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  1364f0:	e59b3004 	ldr	r3, [fp, #4]
  1364f4:	e2433001 	sub	r3, r3, #1
  1364f8:	e51b2008 	ldr	r2, [fp, #-8]
  1364fc:	e1520003 	cmp	r2, r3
  136500:	1a000006 	bne	136520 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  136504:	e51b300c 	ldr	r3, [fp, #-12]
  136508:	e1d330b2 	ldrh	r3, [r3, #2]
  13650c:	e6ff3073 	uxth	r3, r3
  136510:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136514:	e6ff2073 	uxth	r2, r3
  136518:	e51b300c 	ldr	r3, [fp, #-12]
  13651c:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  136520:	e51b300c 	ldr	r3, [fp, #-12]
  136524:	e2833008 	add	r3, r3, #8
  136528:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  13652c:	e51b3008 	ldr	r3, [fp, #-8]
  136530:	e2833001 	add	r3, r3, #1
  136534:	e50b3008 	str	r3, [fp, #-8]
  136538:	e51b2008 	ldr	r2, [fp, #-8]
  13653c:	e59b3004 	ldr	r3, [fp, #4]
  136540:	e1520003 	cmp	r2, r3
  136544:	3affffce 	bcc	136484 <ENET_SetTxBufferDescriptors+0x78>
    }
}
  136548:	e320f000 	nop	{0}
  13654c:	e24bd004 	sub	sp, fp, #4
  136550:	e8bd8800 	pop	{fp, pc}

00136554 <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  136554:	e92d4800 	push	{fp, lr}
  136558:	e28db004 	add	fp, sp, #4
  13655c:	e24dd018 	sub	sp, sp, #24
  136560:	e50b0010 	str	r0, [fp, #-16]
  136564:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136568:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13656c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  136570:	e51b3010 	ldr	r3, [fp, #-16]
  136574:	e3530000 	cmp	r3, #0
  136578:	1a000005 	bne	136594 <ENET_SetRxBufferDescriptors+0x40>
  13657c:	e300220b 	movw	r2, #523	; 0x20b
  136580:	e30a1008 	movw	r1, #40968	; 0xa008
  136584:	e3401014 	movt	r1, #20
  136588:	e3090e70 	movw	r0, #40560	; 0x9e70
  13658c:	e3400014 	movt	r0, #20
  136590:	ebff3400 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  136594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136598:	e3530000 	cmp	r3, #0
  13659c:	1a000005 	bne	1365b8 <ENET_SetRxBufferDescriptors+0x64>
  1365a0:	e3a02f83 	mov	r2, #524	; 0x20c
  1365a4:	e30a1008 	movw	r1, #40968	; 0xa008
  1365a8:	e3401014 	movt	r1, #20
  1365ac:	e3090e80 	movw	r0, #40576	; 0x9e80
  1365b0:	e3400014 	movt	r0, #20
  1365b4:	ebff33f7 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  1365b8:	e51b3010 	ldr	r3, [fp, #-16]
  1365bc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  1365c0:	e3a03000 	mov	r3, #0
  1365c4:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  1365c8:	e3a03000 	mov	r3, #0
  1365cc:	e50b300c 	str	r3, [fp, #-12]
  1365d0:	ea00002c 	b	136688 <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  1365d4:	e51b300c 	ldr	r3, [fp, #-12]
  1365d8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1365dc:	e0030392 	mul	r3, r2, r3
  1365e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1365e4:	e0823003 	add	r3, r2, r3
  1365e8:	e1a00003 	mov	r0, r3
  1365ec:	ebff378a 	bl	10441c <ueth_v2p>
  1365f0:	e1a02000 	mov	r2, r0
  1365f4:	e51b3008 	ldr	r3, [fp, #-8]
  1365f8:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  1365fc:	e51b3008 	ldr	r3, [fp, #-8]
  136600:	e5933004 	ldr	r3, [r3, #4]
  136604:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136608:	e3a01003 	mov	r1, #3
  13660c:	e1a00003 	mov	r0, r3
  136610:	ebff37ae 	bl	1044d0 <ueth_remap>
  136614:	e1a01000 	mov	r1, r0
  136618:	e30c3c58 	movw	r3, #52312	; 0xcc58
  13661c:	e3403015 	movt	r3, #21
  136620:	e51b200c 	ldr	r2, [fp, #-12]
  136624:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  136628:	e51b3008 	ldr	r3, [fp, #-8]
  13662c:	e3a02000 	mov	r2, #0
  136630:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136634:	e51b3008 	ldr	r3, [fp, #-8]
  136638:	e3a02902 	mov	r2, #32768	; 0x8000
  13663c:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  136640:	e59b3004 	ldr	r3, [fp, #4]
  136644:	e2433001 	sub	r3, r3, #1
  136648:	e51b200c 	ldr	r2, [fp, #-12]
  13664c:	e1520003 	cmp	r2, r3
  136650:	1a000006 	bne	136670 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  136654:	e51b3008 	ldr	r3, [fp, #-8]
  136658:	e1d330b2 	ldrh	r3, [r3, #2]
  13665c:	e6ff3073 	uxth	r3, r3
  136660:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136664:	e6ff2073 	uxth	r2, r3
  136668:	e51b3008 	ldr	r3, [fp, #-8]
  13666c:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  136670:	e51b3008 	ldr	r3, [fp, #-8]
  136674:	e2833008 	add	r3, r3, #8
  136678:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  13667c:	e51b300c 	ldr	r3, [fp, #-12]
  136680:	e2833001 	add	r3, r3, #1
  136684:	e50b300c 	str	r3, [fp, #-12]
  136688:	e51b200c 	ldr	r2, [fp, #-12]
  13668c:	e59b3004 	ldr	r3, [fp, #4]
  136690:	e1520003 	cmp	r2, r3
  136694:	3affffce 	bcc	1365d4 <ENET_SetRxBufferDescriptors+0x80>

    }
}
  136698:	e320f000 	nop	{0}
  13669c:	e24bd004 	sub	sp, fp, #4
  1366a0:	e8bd8800 	pop	{fp, pc}

001366a4 <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  1366a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1366a8:	e28db000 	add	fp, sp, #0
  1366ac:	e24dd01c 	sub	sp, sp, #28
  1366b0:	e50b0010 	str	r0, [fp, #-16]
  1366b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1366b8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  1366bc:	e51b3010 	ldr	r3, [fp, #-16]
  1366c0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1366c4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  1366c8:	e51b3010 	ldr	r3, [fp, #-16]
  1366cc:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  1366d0:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  1366d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1366d8:	e3530000 	cmp	r3, #0
  1366dc:	1a000003 	bne	1366f0 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  1366e0:	e51b3008 	ldr	r3, [fp, #-8]
  1366e4:	e3833c02 	orr	r3, r3, #512	; 0x200
  1366e8:	e50b3008 	str	r3, [fp, #-8]
  1366ec:	ea000002 	b	1366fc <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  1366f0:	e51b3008 	ldr	r3, [fp, #-8]
  1366f4:	e3c33c02 	bic	r3, r3, #512	; 0x200
  1366f8:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  1366fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136700:	e3530000 	cmp	r3, #0
  136704:	1a000006 	bne	136724 <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136708:	e51b3008 	ldr	r3, [fp, #-8]
  13670c:	e3833002 	orr	r3, r3, #2
  136710:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136714:	e51b300c 	ldr	r3, [fp, #-12]
  136718:	e3c33004 	bic	r3, r3, #4
  13671c:	e50b300c 	str	r3, [fp, #-12]
  136720:	ea000005 	b	13673c <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  136724:	e51b3008 	ldr	r3, [fp, #-8]
  136728:	e3c33002 	bic	r3, r3, #2
  13672c:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  136730:	e51b300c 	ldr	r3, [fp, #-12]
  136734:	e3833004 	orr	r3, r3, #4
  136738:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  13673c:	e51b3010 	ldr	r3, [fp, #-16]
  136740:	e51b2008 	ldr	r2, [fp, #-8]
  136744:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  136748:	e51b3010 	ldr	r3, [fp, #-16]
  13674c:	e51b200c 	ldr	r2, [fp, #-12]
  136750:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  136754:	e320f000 	nop	{0}
  136758:	e28bd000 	add	sp, fp, #0
  13675c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136760:	e12fff1e 	bx	lr

00136764 <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136768:	e28db000 	add	fp, sp, #0
  13676c:	e24dd014 	sub	sp, sp, #20
  136770:	e50b0010 	str	r0, [fp, #-16]
  136774:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136778:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13677c:	e5d33000 	ldrb	r3, [r3]
  136780:	e1a02c03 	lsl	r2, r3, #24
  136784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136788:	e2833001 	add	r3, r3, #1
  13678c:	e5d33000 	ldrb	r3, [r3]
  136790:	e1a03803 	lsl	r3, r3, #16
  136794:	e1822003 	orr	r2, r2, r3
  136798:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13679c:	e2833002 	add	r3, r3, #2
  1367a0:	e5d33000 	ldrb	r3, [r3]
  1367a4:	e1a03403 	lsl	r3, r3, #8
  1367a8:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  1367ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1367b0:	e2822003 	add	r2, r2, #3
  1367b4:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  1367b8:	e1833002 	orr	r3, r3, r2
  1367bc:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  1367c0:	e51b3010 	ldr	r3, [fp, #-16]
  1367c4:	e51b2008 	ldr	r2, [fp, #-8]
  1367c8:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  1367cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1367d0:	e2833004 	add	r3, r3, #4
  1367d4:	e5d33000 	ldrb	r3, [r3]
  1367d8:	e1a03403 	lsl	r3, r3, #8
  1367dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1367e0:	e2822005 	add	r2, r2, #5
  1367e4:	e5d22000 	ldrb	r2, [r2]
  1367e8:	e1833002 	orr	r3, r3, r2
  1367ec:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  1367f0:	e51b3008 	ldr	r3, [fp, #-8]
  1367f4:	e1a02803 	lsl	r2, r3, #16
  1367f8:	e51b3010 	ldr	r3, [fp, #-16]
  1367fc:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136800:	e320f000 	nop	{0}
  136804:	e28bd000 	add	sp, fp, #0
  136808:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13680c:	e12fff1e 	bx	lr

00136810 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136810:	e92d4800 	push	{fp, lr}
  136814:	e28db004 	add	fp, sp, #4
  136818:	e24dd010 	sub	sp, sp, #16
  13681c:	e50b0010 	str	r0, [fp, #-16]
  136820:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136824:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136828:	e3530000 	cmp	r3, #0
  13682c:	1a000005 	bne	136848 <ENET_GetMacAddr+0x38>
  136830:	e300225b 	movw	r2, #603	; 0x25b
  136834:	e30a1024 	movw	r1, #40996	; 0xa024
  136838:	e3401014 	movt	r1, #20
  13683c:	e3090ce4 	movw	r0, #40164	; 0x9ce4
  136840:	e3400014 	movt	r0, #20
  136844:	ebff3353 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  136848:	e51b3010 	ldr	r3, [fp, #-16]
  13684c:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  136850:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  136854:	e51b3008 	ldr	r3, [fp, #-8]
  136858:	e1a03c23 	lsr	r3, r3, #24
  13685c:	e6ef2073 	uxtb	r2, r3
  136860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136864:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  136868:	e51b3008 	ldr	r3, [fp, #-8]
  13686c:	e1a02823 	lsr	r2, r3, #16
  136870:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136874:	e2833001 	add	r3, r3, #1
  136878:	e6ef2072 	uxtb	r2, r2
  13687c:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  136880:	e51b3008 	ldr	r3, [fp, #-8]
  136884:	e1a02423 	lsr	r2, r3, #8
  136888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13688c:	e2833002 	add	r3, r3, #2
  136890:	e6ef2072 	uxtb	r2, r2
  136894:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136898:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13689c:	e2833003 	add	r3, r3, #3
  1368a0:	e51b2008 	ldr	r2, [fp, #-8]
  1368a4:	e6ef2072 	uxtb	r2, r2
  1368a8:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  1368ac:	e51b3010 	ldr	r3, [fp, #-16]
  1368b0:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  1368b4:	e1a03823 	lsr	r3, r3, #16
  1368b8:	e6ff3073 	uxth	r3, r3
  1368bc:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  1368c0:	e51b3008 	ldr	r3, [fp, #-8]
  1368c4:	e1a02423 	lsr	r2, r3, #8
  1368c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368cc:	e2833004 	add	r3, r3, #4
  1368d0:	e6ef2072 	uxtb	r2, r2
  1368d4:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  1368d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368dc:	e2833005 	add	r3, r3, #5
  1368e0:	e51b2008 	ldr	r2, [fp, #-8]
  1368e4:	e6ef2072 	uxtb	r2, r2
  1368e8:	e5c32000 	strb	r2, [r3]
}
  1368ec:	e320f000 	nop	{0}
  1368f0:	e24bd004 	sub	sp, fp, #4
  1368f4:	e8bd8800 	pop	{fp, pc}

001368f8 <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  1368f8:	e92d4810 	push	{r4, fp, lr}
  1368fc:	e28db008 	add	fp, sp, #8
  136900:	e24dd024 	sub	sp, sp, #36	; 0x24
  136904:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136908:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  13690c:	e1a03002 	mov	r3, r2
  136910:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136914:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136918:	e3530000 	cmp	r3, #0
  13691c:	1a000005 	bne	136938 <ENET_SetSMI+0x40>
  136920:	e300226e 	movw	r2, #622	; 0x26e
  136924:	e30a1034 	movw	r1, #41012	; 0xa034
  136928:	e3401014 	movt	r1, #20
  13692c:	e3090e94 	movw	r0, #40596	; 0x9e94
  136930:	e3400014 	movt	r0, #20
  136934:	ebff3317 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  136938:	e3a03000 	mov	r3, #0
  13693c:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  136940:	e3a03000 	mov	r3, #0
  136944:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  136948:	e3a03000 	mov	r3, #0
  13694c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  136950:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  136954:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  136958:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  13695c:	e0832392 	umull	r2, r3, r2, r3
  136960:	e1a03aa3 	lsr	r3, r3, #21
  136964:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  136968:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  13696c:	e3a00cca 	mov	r0, #51712	; 0xca00
  136970:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136974:	eb0006fa 	bl	138564 <__udivsi3>
  136978:	e1a03000 	mov	r3, r0
  13697c:	e2834009 	add	r4, r3, #9
  136980:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136984:	e3a00cca 	mov	r0, #51712	; 0xca00
  136988:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  13698c:	eb0006f4 	bl	138564 <__udivsi3>
  136990:	e1a03000 	mov	r3, r0
  136994:	e1a01003 	mov	r1, r3
  136998:	e1a00004 	mov	r0, r4
  13699c:	eb0006f0 	bl	138564 <__udivsi3>
  1369a0:	e1a03000 	mov	r3, r0
  1369a4:	e2433001 	sub	r3, r3, #1
  1369a8:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  1369ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1369b0:	e1a03083 	lsl	r3, r3, #1
  1369b4:	e203207e 	and	r2, r3, #126	; 0x7e
  1369b8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1369bc:	e1a03383 	lsl	r3, r3, #7
  1369c0:	e6ef3073 	uxtb	r3, r3
  1369c4:	e1822003 	orr	r2, r2, r3
  1369c8:	e51b3010 	ldr	r3, [fp, #-16]
  1369cc:	e1a03403 	lsl	r3, r3, #8
  1369d0:	e2033c07 	and	r3, r3, #1792	; 0x700
  1369d4:	e1823003 	orr	r3, r2, r3
  1369d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  1369dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1369e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1369e4:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  1369e8:	e320f000 	nop	{0}
  1369ec:	e24bd008 	sub	sp, fp, #8
  1369f0:	e8bd8810 	pop	{r4, fp, pc}

001369f4 <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  1369f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1369f8:	e28db000 	add	fp, sp, #0
  1369fc:	e24dd01c 	sub	sp, sp, #28
  136a00:	e50b0010 	str	r0, [fp, #-16]
  136a04:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136a08:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136a0c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136a10:	e3a03000 	mov	r3, #0
  136a14:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136a18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136a1c:	e1a03e03 	lsl	r3, r3, #28
  136a20:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136a24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a28:	e1a03b83 	lsl	r3, r3, #23
  136a2c:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136a30:	e1822003 	orr	r2, r2, r3
  136a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136a38:	e1a03903 	lsl	r3, r3, #18
  136a3c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136a40:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136a44:	e59b3004 	ldr	r3, [fp, #4]
  136a48:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136a4c:	e1823003 	orr	r3, r2, r3
  136a50:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136a54:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136a58:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136a5c:	e51b3010 	ldr	r3, [fp, #-16]
  136a60:	e51b2008 	ldr	r2, [fp, #-8]
  136a64:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136a68:	e320f000 	nop	{0}
  136a6c:	e28bd000 	add	sp, fp, #0
  136a70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136a74:	e12fff1e 	bx	lr

00136a78 <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  136a78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136a7c:	e28db000 	add	fp, sp, #0
  136a80:	e24dd01c 	sub	sp, sp, #28
  136a84:	e50b0010 	str	r0, [fp, #-16]
  136a88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136a8c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136a90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136a94:	e3a03000 	mov	r3, #0
  136a98:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136a9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136aa0:	e1a03e03 	lsl	r3, r3, #28
  136aa4:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136aa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136aac:	e1a03b83 	lsl	r3, r3, #23
  136ab0:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136ab4:	e1822003 	orr	r2, r2, r3
  136ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136abc:	e1a03903 	lsl	r3, r3, #18
  136ac0:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136ac4:	e1823003 	orr	r3, r2, r3
  136ac8:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136acc:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136ad0:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136ad4:	e51b3010 	ldr	r3, [fp, #-16]
  136ad8:	e51b2008 	ldr	r2, [fp, #-8]
  136adc:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136ae0:	e320f000 	nop	{0}
  136ae4:	e28bd000 	add	sp, fp, #0
  136ae8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136aec:	e12fff1e 	bx	lr

00136af0 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136af0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136af4:	e28db000 	add	fp, sp, #0
  136af8:	e24dd01c 	sub	sp, sp, #28
  136afc:	e50b0010 	str	r0, [fp, #-16]
  136b00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136b04:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136b0c:	e3a03000 	mov	r3, #0
  136b10:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136b18:	e1a03823 	lsr	r3, r3, #16
  136b1c:	e6ff3073 	uxth	r3, r3
  136b20:	e203301f 	and	r3, r3, #31
  136b24:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136b28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136b2c:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136b30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b34:	e1a03b83 	lsl	r3, r3, #23
  136b38:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136b3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136b40:	e1a03903 	lsl	r3, r3, #18
  136b44:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136b48:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136b4c:	e15b30bc 	ldrh	r3, [fp, #-12]
  136b50:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136b54:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136b58:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136b5c:	e51b3010 	ldr	r3, [fp, #-16]
  136b60:	e51b2008 	ldr	r2, [fp, #-8]
  136b64:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136b68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b6c:	e1a03b83 	lsl	r3, r3, #23
  136b70:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136b74:	e15b30ba 	ldrh	r3, [fp, #-10]
  136b78:	e1a03903 	lsl	r3, r3, #18
  136b7c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136b80:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  136b84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136b88:	e6ff3073 	uxth	r3, r3
  136b8c:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136b90:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  136b94:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136b98:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136b9c:	e51b3010 	ldr	r3, [fp, #-16]
  136ba0:	e51b2008 	ldr	r2, [fp, #-8]
  136ba4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136ba8:	e320f000 	nop	{0}
  136bac:	e28bd000 	add	sp, fp, #0
  136bb0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136bb4:	e12fff1e 	bx	lr

00136bb8 <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  136bb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136bbc:	e28db000 	add	fp, sp, #0
  136bc0:	e24dd01c 	sub	sp, sp, #28
  136bc4:	e50b0010 	str	r0, [fp, #-16]
  136bc8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136bcc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136bd0:	e3a03000 	mov	r3, #0
  136bd4:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136bdc:	e1a03823 	lsr	r3, r3, #16
  136be0:	e6ff3073 	uxth	r3, r3
  136be4:	e203301f 	and	r3, r3, #31
  136be8:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136bec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136bf0:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bf8:	e1a03b83 	lsl	r3, r3, #23
  136bfc:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136c00:	e15b30ba 	ldrh	r3, [fp, #-10]
  136c04:	e1a03903 	lsl	r3, r3, #18
  136c08:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136c0c:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136c10:	e15b30bc 	ldrh	r3, [fp, #-12]
  136c14:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136c18:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136c1c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136c20:	e51b3010 	ldr	r3, [fp, #-16]
  136c24:	e51b2008 	ldr	r2, [fp, #-8]
  136c28:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c30:	e1a03b83 	lsl	r3, r3, #23
  136c34:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136c38:	e15b30ba 	ldrh	r3, [fp, #-10]
  136c3c:	e1a03903 	lsl	r3, r3, #18
  136c40:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136c44:	e1823003 	orr	r3, r2, r3
  136c48:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  136c4c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136c50:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  136c54:	e51b3010 	ldr	r3, [fp, #-16]
  136c58:	e51b2008 	ldr	r2, [fp, #-8]
  136c5c:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136c60:	e320f000 	nop	{0}
  136c64:	e28bd000 	add	sp, fp, #0
  136c68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136c6c:	e12fff1e 	bx	lr

00136c70 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  136c70:	e92d4800 	push	{fp, lr}
  136c74:	e28db004 	add	fp, sp, #4
  136c78:	e24dd010 	sub	sp, sp, #16
  136c7c:	e50b0010 	str	r0, [fp, #-16]
  136c80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  136c84:	e51b3010 	ldr	r3, [fp, #-16]
  136c88:	e3530000 	cmp	r3, #0
  136c8c:	1a000005 	bne	136ca8 <ENET_GetRxErrBeforeReadFrame+0x38>
  136c90:	e30022ba 	movw	r2, #698	; 0x2ba
  136c94:	e30a1040 	movw	r1, #41024	; 0xa040
  136c98:	e3401014 	movt	r1, #20
  136c9c:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  136ca0:	e3400014 	movt	r0, #20
  136ca4:	ebff323b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136ca8:	e51b3010 	ldr	r3, [fp, #-16]
  136cac:	e5933004 	ldr	r3, [r3, #4]
  136cb0:	e3530000 	cmp	r3, #0
  136cb4:	1a000005 	bne	136cd0 <ENET_GetRxErrBeforeReadFrame+0x60>
  136cb8:	e30022bb 	movw	r2, #699	; 0x2bb
  136cbc:	e30a1040 	movw	r1, #41024	; 0xa040
  136cc0:	e3401014 	movt	r1, #20
  136cc4:	e3090ea0 	movw	r0, #40608	; 0x9ea0
  136cc8:	e3400014 	movt	r0, #20
  136ccc:	ebff3231 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136cd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cd4:	e3530000 	cmp	r3, #0
  136cd8:	1a000005 	bne	136cf4 <ENET_GetRxErrBeforeReadFrame+0x84>
  136cdc:	e3a02faf 	mov	r2, #700	; 0x2bc
  136ce0:	e30a1040 	movw	r1, #41024	; 0xa040
  136ce4:	e3401014 	movt	r1, #20
  136ce8:	e3090eb4 	movw	r0, #40628	; 0x9eb4
  136cec:	e3400014 	movt	r0, #20
  136cf0:	ebff3228 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  136cf4:	e3a03000 	mov	r3, #0
  136cf8:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136cfc:	e51b3010 	ldr	r3, [fp, #-16]
  136d00:	e5933004 	ldr	r3, [r3, #4]
  136d04:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136d08:	e51b3008 	ldr	r3, [fp, #-8]
  136d0c:	e1d330b2 	ldrh	r3, [r3, #2]
  136d10:	e6ff3073 	uxth	r3, r3
  136d14:	e2033b02 	and	r3, r3, #2048	; 0x800
  136d18:	e3530000 	cmp	r3, #0
  136d1c:	0a000030 	beq	136de4 <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  136d20:	e51b3008 	ldr	r3, [fp, #-8]
  136d24:	e1d330b2 	ldrh	r3, [r3, #2]
  136d28:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  136d2c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136d30:	e2033001 	and	r3, r3, #1
  136d34:	e3530000 	cmp	r3, #0
  136d38:	0a000004 	beq	136d50 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  136d3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d40:	e5933010 	ldr	r3, [r3, #16]
  136d44:	e2832001 	add	r2, r3, #1
  136d48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d4c:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  136d50:	e15b30ba 	ldrh	r3, [fp, #-10]
  136d54:	e2033002 	and	r3, r3, #2
  136d58:	e3530000 	cmp	r3, #0
  136d5c:	0a000004 	beq	136d74 <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  136d60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d64:	e593300c 	ldr	r3, [r3, #12]
  136d68:	e2832001 	add	r2, r3, #1
  136d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d70:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  136d74:	e15b30ba 	ldrh	r3, [fp, #-10]
  136d78:	e2033020 	and	r3, r3, #32
  136d7c:	e3530000 	cmp	r3, #0
  136d80:	0a000004 	beq	136d98 <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  136d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d88:	e5933000 	ldr	r3, [r3]
  136d8c:	e2832001 	add	r2, r3, #1
  136d90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d94:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  136d98:	e15b30ba 	ldrh	r3, [fp, #-10]
  136d9c:	e2033010 	and	r3, r3, #16
  136da0:	e3530000 	cmp	r3, #0
  136da4:	0a000004 	beq	136dbc <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  136da8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dac:	e5933004 	ldr	r3, [r3, #4]
  136db0:	e2832001 	add	r2, r3, #1
  136db4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136db8:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  136dbc:	e15b30ba 	ldrh	r3, [fp, #-10]
  136dc0:	e2033004 	and	r3, r3, #4
  136dc4:	e3530000 	cmp	r3, #0
  136dc8:	0a000018 	beq	136e30 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  136dcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dd0:	e5933008 	ldr	r3, [r3, #8]
  136dd4:	e2832001 	add	r2, r3, #1
  136dd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ddc:	e5832008 	str	r2, [r3, #8]
            }
            break;
  136de0:	ea000012 	b	136e30 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  136de4:	e51b3008 	ldr	r3, [fp, #-8]
  136de8:	e1d330b2 	ldrh	r3, [r3, #2]
  136dec:	e6ff3073 	uxth	r3, r3
  136df0:	e2033a02 	and	r3, r3, #8192	; 0x2000
  136df4:	e3530000 	cmp	r3, #0
  136df8:	0a000003 	beq	136e0c <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  136dfc:	e51b3010 	ldr	r3, [fp, #-16]
  136e00:	e5933000 	ldr	r3, [r3]
  136e04:	e50b3008 	str	r3, [fp, #-8]
  136e08:	ea000002 	b	136e18 <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  136e0c:	e51b3008 	ldr	r3, [fp, #-8]
  136e10:	e2833008 	add	r3, r3, #8
  136e14:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  136e18:	e51b3010 	ldr	r3, [fp, #-16]
  136e1c:	e5933004 	ldr	r3, [r3, #4]
  136e20:	e51b2008 	ldr	r2, [fp, #-8]
  136e24:	e1520003 	cmp	r2, r3
  136e28:	1affffb6 	bne	136d08 <ENET_GetRxErrBeforeReadFrame+0x98>
}
  136e2c:	ea000000 	b	136e34 <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  136e30:	e320f000 	nop	{0}
}
  136e34:	e320f000 	nop	{0}
  136e38:	e24bd004 	sub	sp, fp, #4
  136e3c:	e8bd8800 	pop	{fp, pc}

00136e40 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  136e40:	e92d4800 	push	{fp, lr}
  136e44:	e28db004 	add	fp, sp, #4
  136e48:	e24dd018 	sub	sp, sp, #24
  136e4c:	e50b0010 	str	r0, [fp, #-16]
  136e50:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136e54:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136e58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  136e5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e60:	e3530000 	cmp	r3, #0
  136e64:	1a000005 	bne	136e80 <ENET_ReadFrame+0x40>
  136e68:	e30022f6 	movw	r2, #758	; 0x2f6
  136e6c:	e30a1060 	movw	r1, #41056	; 0xa060
  136e70:	e3401014 	movt	r1, #20
  136e74:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  136e78:	e3400014 	movt	r0, #20
  136e7c:	ebff31c5 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e84:	e5933004 	ldr	r3, [r3, #4]
  136e88:	e3530000 	cmp	r3, #0
  136e8c:	1a000005 	bne	136ea8 <ENET_ReadFrame+0x68>
  136e90:	e30022f7 	movw	r2, #759	; 0x2f7
  136e94:	e30a1060 	movw	r1, #41056	; 0xa060
  136e98:	e3401014 	movt	r1, #20
  136e9c:	e3090ea0 	movw	r0, #40608	; 0x9ea0
  136ea0:	e3400014 	movt	r0, #20
  136ea4:	ebff31bb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  136ea8:	e59b3004 	ldr	r3, [fp, #4]
  136eac:	e3530000 	cmp	r3, #0
  136eb0:	1a000005 	bne	136ecc <ENET_ReadFrame+0x8c>
  136eb4:	e3a02fbe 	mov	r2, #760	; 0x2f8
  136eb8:	e30a1060 	movw	r1, #41056	; 0xa060
  136ebc:	e3401014 	movt	r1, #20
  136ec0:	e3090ec4 	movw	r0, #40644	; 0x9ec4
  136ec4:	e3400014 	movt	r0, #20
  136ec8:	ebff31b2 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  136ecc:	e59b3004 	ldr	r3, [fp, #4]
  136ed0:	e3a02000 	mov	r2, #0
  136ed4:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136ed8:	e3a03b22 	mov	r3, #34816	; 0x8800
  136edc:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136ee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ee4:	e5933004 	ldr	r3, [r3, #4]
  136ee8:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  136eec:	e51b300c 	ldr	r3, [fp, #-12]
  136ef0:	e1d330b2 	ldrh	r3, [r3, #2]
  136ef4:	e6ff3073 	uxth	r3, r3
  136ef8:	e6bf3073 	sxth	r3, r3
  136efc:	e3530000 	cmp	r3, #0
  136f00:	aa000001 	bge	136f0c <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  136f04:	e3003fa2 	movw	r3, #4002	; 0xfa2
  136f08:	ea00005c 	b	137080 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136f0c:	e51b300c 	ldr	r3, [fp, #-12]
  136f10:	e1d330b2 	ldrh	r3, [r3, #2]
  136f14:	e6ff2073 	uxth	r2, r3
  136f18:	e15b30b6 	ldrh	r3, [fp, #-6]
  136f1c:	e0033002 	and	r3, r3, r2
  136f20:	e6ff3073 	uxth	r3, r3
  136f24:	e3530b02 	cmp	r3, #2048	; 0x800
  136f28:	1a00003a 	bne	137018 <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  136f2c:	e51b300c 	ldr	r3, [fp, #-12]
  136f30:	e1d330b0 	ldrh	r3, [r3]
  136f34:	e6ff2073 	uxth	r2, r3
  136f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136f3c:	e1d330b8 	ldrh	r3, [r3, #8]
  136f40:	e1520003 	cmp	r2, r3
  136f44:	8a000018 	bhi	136fac <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  136f48:	e51b300c 	ldr	r3, [fp, #-12]
  136f4c:	e1d330b0 	ldrh	r3, [r3]
  136f50:	e6ff2073 	uxth	r2, r3
  136f54:	e59b3004 	ldr	r3, [fp, #4]
  136f58:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  136f5c:	e51b300c 	ldr	r3, [fp, #-12]
  136f60:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136f64:	e5922000 	ldr	r2, [r2]
  136f68:	e0433002 	sub	r3, r3, r2
  136f6c:	e1a031c3 	asr	r3, r3, #3
  136f70:	e1a02003 	mov	r2, r3
  136f74:	e30c3c58 	movw	r3, #52312	; 0xcc58
  136f78:	e3403015 	movt	r3, #21
  136f7c:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  136f80:	e51b300c 	ldr	r3, [fp, #-12]
  136f84:	e1d330b0 	ldrh	r3, [r3]
  136f88:	e6ff3073 	uxth	r3, r3
  136f8c:	e1a02003 	mov	r2, r3
  136f90:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  136f94:	ebff30d9 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  136f98:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136f9c:	e51b0010 	ldr	r0, [fp, #-16]
  136fa0:	eb000039 	bl	13708c <ENET_UpdateReadBuffers>
                return kStatus_Success;
  136fa4:	e3a03000 	mov	r3, #0
  136fa8:	ea000034 	b	137080 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  136fac:	e3090ecc 	movw	r0, #40652	; 0x9ecc
  136fb0:	e3400014 	movt	r0, #20
  136fb4:	ebff3056 	bl	103114 <rt_kprintf>
  136fb8:	e51b300c 	ldr	r3, [fp, #-12]
  136fbc:	e1d330b2 	ldrh	r3, [r3, #2]
  136fc0:	e6ff3073 	uxth	r3, r3
  136fc4:	e1a01003 	mov	r1, r3
  136fc8:	e51b300c 	ldr	r3, [fp, #-12]
  136fcc:	e1d330b0 	ldrh	r3, [r3]
  136fd0:	e6ff3073 	uxth	r3, r3
  136fd4:	e1a02003 	mov	r2, r3
  136fd8:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  136fdc:	e3400014 	movt	r0, #20
  136fe0:	ebff304b 	bl	103114 <rt_kprintf>
  136fe4:	e3090f18 	movw	r0, #40728	; 0x9f18
  136fe8:	e3400014 	movt	r0, #20
  136fec:	ebff3048 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  136ff0:	e51b300c 	ldr	r3, [fp, #-12]
  136ff4:	e1d330b0 	ldrh	r3, [r3]
  136ff8:	e6ff2073 	uxth	r2, r3
  136ffc:	e59b3004 	ldr	r3, [fp, #4]
  137000:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  137004:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137008:	e51b0010 	ldr	r0, [fp, #-16]
  13700c:	eb00001e 	bl	13708c <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  137010:	e3a03efa 	mov	r3, #4000	; 0xfa0
  137014:	ea000019 	b	137080 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  137018:	e3090ecc 	movw	r0, #40652	; 0x9ecc
  13701c:	e3400014 	movt	r0, #20
  137020:	ebff303b 	bl	103114 <rt_kprintf>
  137024:	e51b300c 	ldr	r3, [fp, #-12]
  137028:	e1d330b2 	ldrh	r3, [r3, #2]
  13702c:	e6ff3073 	uxth	r3, r3
  137030:	e1a01003 	mov	r1, r3
  137034:	e51b300c 	ldr	r3, [fp, #-12]
  137038:	e1d330b0 	ldrh	r3, [r3]
  13703c:	e6ff3073 	uxth	r3, r3
  137040:	e1a02003 	mov	r2, r3
  137044:	e3090f20 	movw	r0, #40736	; 0x9f20
  137048:	e3400014 	movt	r0, #20
  13704c:	ebff3030 	bl	103114 <rt_kprintf>
  137050:	e3090f18 	movw	r0, #40728	; 0x9f18
  137054:	e3400014 	movt	r0, #20
  137058:	ebff302d 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  13705c:	e51b300c 	ldr	r3, [fp, #-12]
  137060:	e1d330b0 	ldrh	r3, [r3]
  137064:	e6ff2073 	uxth	r2, r3
  137068:	e59b3004 	ldr	r3, [fp, #4]
  13706c:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  137070:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137074:	e51b0010 	ldr	r0, [fp, #-16]
  137078:	eb000003 	bl	13708c <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  13707c:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  137080:	e1a00003 	mov	r0, r3
  137084:	e24bd004 	sub	sp, fp, #4
  137088:	e8bd8800 	pop	{fp, pc}

0013708c <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  13708c:	e92d4800 	push	{fp, lr}
  137090:	e28db004 	add	fp, sp, #4
  137094:	e24dd008 	sub	sp, sp, #8
  137098:	e50b0008 	str	r0, [fp, #-8]
  13709c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  1370a0:	e51b300c 	ldr	r3, [fp, #-12]
  1370a4:	e3530000 	cmp	r3, #0
  1370a8:	1a000005 	bne	1370c4 <ENET_UpdateReadBuffers+0x38>
  1370ac:	e300232a 	movw	r2, #810	; 0x32a
  1370b0:	e30a1070 	movw	r1, #41072	; 0xa070
  1370b4:	e3401014 	movt	r1, #20
  1370b8:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  1370bc:	e3400014 	movt	r0, #20
  1370c0:	ebff3134 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1370c4:	e51b300c 	ldr	r3, [fp, #-12]
  1370c8:	e5933004 	ldr	r3, [r3, #4]
  1370cc:	e1d330b2 	ldrh	r3, [r3, #2]
  1370d0:	e6ff2073 	uxth	r2, r3
  1370d4:	e51b300c 	ldr	r3, [fp, #-12]
  1370d8:	e5933004 	ldr	r3, [r3, #4]
  1370dc:	e2022a02 	and	r2, r2, #8192	; 0x2000
  1370e0:	e6ff2072 	uxth	r2, r2
  1370e4:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1370e8:	e51b300c 	ldr	r3, [fp, #-12]
  1370ec:	e5933004 	ldr	r3, [r3, #4]
  1370f0:	e1d330b2 	ldrh	r3, [r3, #2]
  1370f4:	e6ff3073 	uxth	r3, r3
  1370f8:	e51b200c 	ldr	r2, [fp, #-12]
  1370fc:	e5922004 	ldr	r2, [r2, #4]
  137100:	e1e03883 	mvn	r3, r3, lsl #17
  137104:	e1e038a3 	mvn	r3, r3, lsr #17
  137108:	e6ff3073 	uxth	r3, r3
  13710c:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  137110:	e51b300c 	ldr	r3, [fp, #-12]
  137114:	e5933004 	ldr	r3, [r3, #4]
  137118:	e1d330b2 	ldrh	r3, [r3, #2]
  13711c:	e6ff3073 	uxth	r3, r3
  137120:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137124:	e3530000 	cmp	r3, #0
  137128:	0a000004 	beq	137140 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  13712c:	e51b300c 	ldr	r3, [fp, #-12]
  137130:	e5932000 	ldr	r2, [r3]
  137134:	e51b300c 	ldr	r3, [fp, #-12]
  137138:	e5832004 	str	r2, [r3, #4]
  13713c:	ea000004 	b	137154 <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  137140:	e51b300c 	ldr	r3, [fp, #-12]
  137144:	e5933004 	ldr	r3, [r3, #4]
  137148:	e2832008 	add	r2, r3, #8
  13714c:	e51b300c 	ldr	r3, [fp, #-12]
  137150:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  137154:	e51b3008 	ldr	r3, [fp, #-8]
  137158:	e3a02401 	mov	r2, #16777216	; 0x1000000
  13715c:	e5832010 	str	r2, [r3, #16]
}
  137160:	e320f000 	nop	{0}
  137164:	e24bd004 	sub	sp, fp, #4
  137168:	e8bd8800 	pop	{fp, pc}

0013716c <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  13716c:	e92d4800 	push	{fp, lr}
  137170:	e28db004 	add	fp, sp, #4
  137174:	e24dd018 	sub	sp, sp, #24
  137178:	e50b0010 	str	r0, [fp, #-16]
  13717c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137180:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137184:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  137188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13718c:	e3530000 	cmp	r3, #0
  137190:	1a000005 	bne	1371ac <ENET_SendFrame+0x40>
  137194:	e300233f 	movw	r2, #831	; 0x33f
  137198:	e30a1088 	movw	r1, #41096	; 0xa088
  13719c:	e3401014 	movt	r1, #20
  1371a0:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  1371a4:	e3400014 	movt	r0, #20
  1371a8:	ebff30fa 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  1371ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1371b0:	e593300c 	ldr	r3, [r3, #12]
  1371b4:	e3530000 	cmp	r3, #0
  1371b8:	1a000005 	bne	1371d4 <ENET_SendFrame+0x68>
  1371bc:	e3a02d0d 	mov	r2, #832	; 0x340
  1371c0:	e30a1088 	movw	r1, #41096	; 0xa088
  1371c4:	e3401014 	movt	r1, #20
  1371c8:	e3090f58 	movw	r0, #40792	; 0x9f58
  1371cc:	e3400014 	movt	r0, #20
  1371d0:	ebff30f0 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  1371d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1371d8:	e3530000 	cmp	r3, #0
  1371dc:	1a000005 	bne	1371f8 <ENET_SendFrame+0x8c>
  1371e0:	e3002341 	movw	r2, #833	; 0x341
  1371e4:	e30a1088 	movw	r1, #41096	; 0xa088
  1371e8:	e3401014 	movt	r1, #20
  1371ec:	e3090f6c 	movw	r0, #40812	; 0x9f6c
  1371f0:	e3400014 	movt	r0, #20
  1371f4:	ebff30e7 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  1371f8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1371fc:	e30025ee 	movw	r2, #1518	; 0x5ee
  137200:	e1530002 	cmp	r3, r2
  137204:	9a000005 	bls	137220 <ENET_SendFrame+0xb4>
  137208:	e3002342 	movw	r2, #834	; 0x342
  13720c:	e30a1088 	movw	r1, #41096	; 0xa088
  137210:	e3401014 	movt	r1, #20
  137214:	e3090f74 	movw	r0, #40820	; 0x9f74
  137218:	e3400014 	movt	r0, #20
  13721c:	ebff30dd 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  137220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137224:	e593300c 	ldr	r3, [r3, #12]
  137228:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  13722c:	e51b3008 	ldr	r3, [fp, #-8]
  137230:	e1d330b2 	ldrh	r3, [r3, #2]
  137234:	e6ff3073 	uxth	r3, r3
  137238:	e6bf3073 	sxth	r3, r3
  13723c:	e3530000 	cmp	r3, #0
  137240:	aa000001 	bge	13724c <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  137244:	e3003fa3 	movw	r3, #4003	; 0xfa3
  137248:	ea00004b 	b	13737c <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  13724c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137250:	e5932014 	ldr	r2, [r3, #20]
  137254:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137258:	e1520003 	cmp	r2, r3
  13725c:	3a000045 	bcc	137378 <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  137260:	e51b3008 	ldr	r3, [fp, #-8]
  137264:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  137268:	e5922008 	ldr	r2, [r2, #8]
  13726c:	e0433002 	sub	r3, r3, r2
  137270:	e1a031c3 	asr	r3, r3, #3
  137274:	e1a02003 	mov	r2, r3
  137278:	e30c3e58 	movw	r3, #52824	; 0xce58
  13727c:	e3403015 	movt	r3, #21
  137280:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  137284:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  137288:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  13728c:	e1a00003 	mov	r0, r3
  137290:	ebff301a 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  137294:	e51b3008 	ldr	r3, [fp, #-8]
  137298:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  13729c:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  1372a0:	e59b3004 	ldr	r3, [fp, #4]
  1372a4:	e3530000 	cmp	r3, #0
  1372a8:	0a000009 	beq	1372d4 <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  1372ac:	e51b3008 	ldr	r3, [fp, #-8]
  1372b0:	e1d330b2 	ldrh	r3, [r3, #2]
  1372b4:	e6ff2073 	uxth	r2, r3
  1372b8:	e3a03b22 	mov	r3, #34816	; 0x8800
  1372bc:	e34f3fff 	movt	r3, #65535	; 0xffff
  1372c0:	e1823003 	orr	r3, r2, r3
  1372c4:	e6ff2073 	uxth	r2, r3
  1372c8:	e51b3008 	ldr	r3, [fp, #-8]
  1372cc:	e1c320b2 	strh	r2, [r3, #2]
  1372d0:	ea00000e 	b	137310 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  1372d4:	e51b3008 	ldr	r3, [fp, #-8]
  1372d8:	e1d330b2 	ldrh	r3, [r3, #2]
  1372dc:	e6ff3073 	uxth	r3, r3
  1372e0:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1372e4:	e6ff2073 	uxth	r2, r3
  1372e8:	e51b3008 	ldr	r3, [fp, #-8]
  1372ec:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  1372f0:	e51b3008 	ldr	r3, [fp, #-8]
  1372f4:	e1d330b2 	ldrh	r3, [r3, #2]
  1372f8:	e6ff3073 	uxth	r3, r3
  1372fc:	e1e03883 	mvn	r3, r3, lsl #17
  137300:	e1e038a3 	mvn	r3, r3, lsr #17
  137304:	e6ff2073 	uxth	r2, r3
  137308:	e51b3008 	ldr	r3, [fp, #-8]
  13730c:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  137310:	e51b3010 	ldr	r3, [fp, #-16]
  137314:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137318:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  13731c:	e320f000 	nop	{0}
  137320:	e51b3010 	ldr	r3, [fp, #-16]
  137324:	e5933014 	ldr	r3, [r3, #20]
  137328:	e3530000 	cmp	r3, #0
  13732c:	1afffffb 	bne	137320 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  137330:	e51b3008 	ldr	r3, [fp, #-8]
  137334:	e1d330b2 	ldrh	r3, [r3, #2]
  137338:	e6ff3073 	uxth	r3, r3
  13733c:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137340:	e3530000 	cmp	r3, #0
  137344:	0a000004 	beq	13735c <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  137348:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13734c:	e5932008 	ldr	r2, [r3, #8]
  137350:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137354:	e583200c 	str	r2, [r3, #12]
  137358:	ea000004 	b	137370 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  13735c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137360:	e593300c 	ldr	r3, [r3, #12]
  137364:	e2832008 	add	r2, r3, #8
  137368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13736c:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  137370:	e3a03000 	mov	r3, #0
  137374:	ea000000 	b	13737c <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  137378:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  13737c:	e1a00003 	mov	r0, r3
  137380:	e24bd004 	sub	sp, fp, #4
  137384:	e8bd8800 	pop	{fp, pc}

00137388 <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137388:	e92d4800 	push	{fp, lr}
  13738c:	e28db004 	add	fp, sp, #4
  137390:	e24dd018 	sub	sp, sp, #24
  137394:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137398:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  13739c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1373a0:	e3530000 	cmp	r3, #0
  1373a4:	1a000005 	bne	1373c0 <ENET_AddMulticastGroup+0x38>
  1373a8:	e3002376 	movw	r2, #886	; 0x376
  1373ac:	e30a1098 	movw	r1, #41112	; 0xa098
  1373b0:	e3401014 	movt	r1, #20
  1373b4:	e3090f98 	movw	r0, #40856	; 0x9f98
  1373b8:	e3400014 	movt	r0, #20
  1373bc:	ebff3075 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  1373c0:	e3e03000 	mvn	r3, #0
  1373c4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1373c8:	e3a03000 	mov	r3, #0
  1373cc:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1373d0:	e3a03000 	mov	r3, #0
  1373d4:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1373d8:	e3a03000 	mov	r3, #0
  1373dc:	e50b300c 	str	r3, [fp, #-12]
  1373e0:	ea000028 	b	137488 <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1373e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1373e8:	e51b300c 	ldr	r3, [fp, #-12]
  1373ec:	e0823003 	add	r3, r2, r3
  1373f0:	e5d33000 	ldrb	r3, [r3]
  1373f4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1373f8:	e3a03000 	mov	r3, #0
  1373fc:	e50b3010 	str	r3, [fp, #-16]
  137400:	ea00001a 	b	137470 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137404:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137408:	e51b3008 	ldr	r3, [fp, #-8]
  13740c:	e0233002 	eor	r3, r3, r2
  137410:	e2033001 	and	r3, r3, #1
  137414:	e3530000 	cmp	r3, #0
  137418:	0a00000b 	beq	13744c <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  13741c:	e51b3008 	ldr	r3, [fp, #-8]
  137420:	e1a030a3 	lsr	r3, r3, #1
  137424:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137428:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  13742c:	e1a030a3 	lsr	r3, r3, #1
  137430:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137434:	e51b2008 	ldr	r2, [fp, #-8]
  137438:	e3083320 	movw	r3, #33568	; 0x8320
  13743c:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137440:	e0233002 	eor	r3, r3, r2
  137444:	e50b3008 	str	r3, [fp, #-8]
  137448:	ea000005 	b	137464 <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  13744c:	e51b3008 	ldr	r3, [fp, #-8]
  137450:	e1a030a3 	lsr	r3, r3, #1
  137454:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137458:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  13745c:	e1a030a3 	lsr	r3, r3, #1
  137460:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137464:	e51b3010 	ldr	r3, [fp, #-16]
  137468:	e2833001 	add	r3, r3, #1
  13746c:	e50b3010 	str	r3, [fp, #-16]
  137470:	e51b3010 	ldr	r3, [fp, #-16]
  137474:	e3530007 	cmp	r3, #7
  137478:	9affffe1 	bls	137404 <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  13747c:	e51b300c 	ldr	r3, [fp, #-12]
  137480:	e2833001 	add	r3, r3, #1
  137484:	e50b300c 	str	r3, [fp, #-12]
  137488:	e51b300c 	ldr	r3, [fp, #-12]
  13748c:	e3530005 	cmp	r3, #5
  137490:	9affffd3 	bls	1373e4 <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  137494:	e51b3008 	ldr	r3, [fp, #-8]
  137498:	e3530000 	cmp	r3, #0
  13749c:	ba00000a 	blt	1374cc <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1374a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374a4:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1374a8:	e51b3008 	ldr	r3, [fp, #-8]
  1374ac:	e1a03d23 	lsr	r3, r3, #26
  1374b0:	e203301f 	and	r3, r3, #31
  1374b4:	e3a01001 	mov	r1, #1
  1374b8:	e1a03311 	lsl	r3, r1, r3
  1374bc:	e1822003 	orr	r2, r2, r3
  1374c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374c4:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  1374c8:	ea000009 	b	1374f4 <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1374cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374d0:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1374d4:	e51b3008 	ldr	r3, [fp, #-8]
  1374d8:	e1a03d23 	lsr	r3, r3, #26
  1374dc:	e203301f 	and	r3, r3, #31
  1374e0:	e3a01001 	mov	r1, #1
  1374e4:	e1a03311 	lsl	r3, r1, r3
  1374e8:	e1822003 	orr	r2, r2, r3
  1374ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374f0:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  1374f4:	e320f000 	nop	{0}
  1374f8:	e24bd004 	sub	sp, fp, #4
  1374fc:	e8bd8800 	pop	{fp, pc}

00137500 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137500:	e92d4800 	push	{fp, lr}
  137504:	e28db004 	add	fp, sp, #4
  137508:	e24dd018 	sub	sp, sp, #24
  13750c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137510:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137514:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137518:	e3530000 	cmp	r3, #0
  13751c:	1a000005 	bne	137538 <ENET_LeaveMulticastGroup+0x38>
  137520:	e300239d 	movw	r2, #925	; 0x39d
  137524:	e30a10b0 	movw	r1, #41136	; 0xa0b0
  137528:	e3401014 	movt	r1, #20
  13752c:	e3090f98 	movw	r0, #40856	; 0x9f98
  137530:	e3400014 	movt	r0, #20
  137534:	ebff3017 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  137538:	e3e03000 	mvn	r3, #0
  13753c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137540:	e3a03000 	mov	r3, #0
  137544:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  137548:	e3a03000 	mov	r3, #0
  13754c:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137550:	e3a03000 	mov	r3, #0
  137554:	e50b300c 	str	r3, [fp, #-12]
  137558:	ea000028 	b	137600 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  13755c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137560:	e51b300c 	ldr	r3, [fp, #-12]
  137564:	e0823003 	add	r3, r2, r3
  137568:	e5d33000 	ldrb	r3, [r3]
  13756c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137570:	e3a03000 	mov	r3, #0
  137574:	e50b3010 	str	r3, [fp, #-16]
  137578:	ea00001a 	b	1375e8 <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  13757c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137580:	e51b3008 	ldr	r3, [fp, #-8]
  137584:	e0233002 	eor	r3, r3, r2
  137588:	e2033001 	and	r3, r3, #1
  13758c:	e3530000 	cmp	r3, #0
  137590:	0a00000b 	beq	1375c4 <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137594:	e51b3008 	ldr	r3, [fp, #-8]
  137598:	e1a030a3 	lsr	r3, r3, #1
  13759c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1375a0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1375a4:	e1a030a3 	lsr	r3, r3, #1
  1375a8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  1375ac:	e51b2008 	ldr	r2, [fp, #-8]
  1375b0:	e3083320 	movw	r3, #33568	; 0x8320
  1375b4:	e34e3db8 	movt	r3, #60856	; 0xedb8
  1375b8:	e0233002 	eor	r3, r3, r2
  1375bc:	e50b3008 	str	r3, [fp, #-8]
  1375c0:	ea000005 	b	1375dc <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  1375c4:	e51b3008 	ldr	r3, [fp, #-8]
  1375c8:	e1a030a3 	lsr	r3, r3, #1
  1375cc:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1375d0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1375d4:	e1a030a3 	lsr	r3, r3, #1
  1375d8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1375dc:	e51b3010 	ldr	r3, [fp, #-16]
  1375e0:	e2833001 	add	r3, r3, #1
  1375e4:	e50b3010 	str	r3, [fp, #-16]
  1375e8:	e51b3010 	ldr	r3, [fp, #-16]
  1375ec:	e3530007 	cmp	r3, #7
  1375f0:	9affffe1 	bls	13757c <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1375f4:	e51b300c 	ldr	r3, [fp, #-12]
  1375f8:	e2833001 	add	r3, r3, #1
  1375fc:	e50b300c 	str	r3, [fp, #-12]
  137600:	e51b300c 	ldr	r3, [fp, #-12]
  137604:	e3530005 	cmp	r3, #5
  137608:	9affffd3 	bls	13755c <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  13760c:	e51b3008 	ldr	r3, [fp, #-8]
  137610:	e3530000 	cmp	r3, #0
  137614:	ba00000b 	blt	137648 <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137618:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13761c:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137620:	e51b3008 	ldr	r3, [fp, #-8]
  137624:	e1a03d23 	lsr	r3, r3, #26
  137628:	e203301f 	and	r3, r3, #31
  13762c:	e3a01001 	mov	r1, #1
  137630:	e1a03311 	lsl	r3, r1, r3
  137634:	e1e03003 	mvn	r3, r3
  137638:	e0022003 	and	r2, r2, r3
  13763c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137640:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  137644:	ea00000a 	b	137674 <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13764c:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137650:	e51b3008 	ldr	r3, [fp, #-8]
  137654:	e1a03d23 	lsr	r3, r3, #26
  137658:	e203301f 	and	r3, r3, #31
  13765c:	e3a01001 	mov	r1, #1
  137660:	e1a03311 	lsl	r3, r1, r3
  137664:	e1e03003 	mvn	r3, r3
  137668:	e0022003 	and	r2, r2, r3
  13766c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137670:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137674:	e320f000 	nop	{0}
  137678:	e24bd004 	sub	sp, fp, #4
  13767c:	e8bd8800 	pop	{fp, pc}

00137680 <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137680:	e92d4800 	push	{fp, lr}
  137684:	e28db004 	add	fp, sp, #4
  137688:	e24dd008 	sub	sp, sp, #8
  13768c:	e50b0008 	str	r0, [fp, #-8]
  137690:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137694:	e51b300c 	ldr	r3, [fp, #-12]
  137698:	e3530000 	cmp	r3, #0
  13769c:	1a000005 	bne	1376b8 <ENET_TransmitIRQHandler+0x38>
  1376a0:	e3a02ff1 	mov	r2, #964	; 0x3c4
  1376a4:	e30a10cc 	movw	r1, #41164	; 0xa0cc
  1376a8:	e3401014 	movt	r1, #20
  1376ac:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  1376b0:	e3400014 	movt	r0, #20
  1376b4:	ebff2fb7 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  1376b8:	e51b3008 	ldr	r3, [fp, #-8]
  1376bc:	e5933004 	ldr	r3, [r3, #4]
  1376c0:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  1376c4:	e3530000 	cmp	r3, #0
  1376c8:	0a000002 	beq	1376d8 <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  1376cc:	e51b3008 	ldr	r3, [fp, #-8]
  1376d0:	e3a02303 	mov	r2, #201326592	; 0xc000000
  1376d4:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  1376d8:	e51b0008 	ldr	r0, [fp, #-8]
  1376dc:	ebfff6e1 	bl	135268 <tx_enet_callback>
}
  1376e0:	e320f000 	nop	{0}
  1376e4:	e24bd004 	sub	sp, fp, #4
  1376e8:	e8bd8800 	pop	{fp, pc}

001376ec <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  1376ec:	e92d4800 	push	{fp, lr}
  1376f0:	e28db004 	add	fp, sp, #4
  1376f4:	e24dd008 	sub	sp, sp, #8
  1376f8:	e50b0008 	str	r0, [fp, #-8]
  1376fc:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137700:	e51b300c 	ldr	r3, [fp, #-12]
  137704:	e3530000 	cmp	r3, #0
  137708:	1a000005 	bne	137724 <ENET_ReceiveIRQHandler+0x38>
  13770c:	e3a02e3d 	mov	r2, #976	; 0x3d0
  137710:	e30a10e4 	movw	r1, #41188	; 0xa0e4
  137714:	e3401014 	movt	r1, #20
  137718:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  13771c:	e3400014 	movt	r0, #20
  137720:	ebff2f9c 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  137724:	e51b3008 	ldr	r3, [fp, #-8]
  137728:	e5933004 	ldr	r3, [r3, #4]
  13772c:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137730:	e3530000 	cmp	r3, #0
  137734:	0a000004 	beq	13774c <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  137738:	e51b3008 	ldr	r3, [fp, #-8]
  13773c:	e3a02403 	mov	r2, #50331648	; 0x3000000
  137740:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  137744:	e51b0008 	ldr	r0, [fp, #-8]
  137748:	ebfff6a3 	bl	1351dc <rx_enet_callback>
    }
}
  13774c:	e320f000 	nop	{0}
  137750:	e24bd004 	sub	sp, fp, #4
  137754:	e8bd8800 	pop	{fp, pc}

00137758 <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137758:	e92d4810 	push	{r4, fp, lr}
  13775c:	e28db008 	add	fp, sp, #8
  137760:	e24dd014 	sub	sp, sp, #20
  137764:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137768:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  13776c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137770:	e3530000 	cmp	r3, #0
  137774:	1a000005 	bne	137790 <ENET_ErrorIRQHandler+0x38>
  137778:	e3a02ff7 	mov	r2, #988	; 0x3dc
  13777c:	e30a10fc 	movw	r1, #41212	; 0xa0fc
  137780:	e3401014 	movt	r1, #20
  137784:	e3090c4c 	movw	r0, #40012	; 0x9c4c
  137788:	e3400014 	movt	r0, #20
  13778c:	ebff2f81 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  137790:	e3a03000 	mov	r3, #0
  137794:	e346307c 	movt	r3, #24700	; 0x607c
  137798:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  13779c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377a0:	e5933004 	ldr	r3, [r3, #4]
  1377a4:	e2033802 	and	r3, r3, #131072	; 0x20000
  1377a8:	e3530000 	cmp	r3, #0
  1377ac:	0a000012 	beq	1377fc <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  1377b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377b4:	e3a02802 	mov	r2, #131072	; 0x20000
  1377b8:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  1377bc:	e3a01000 	mov	r1, #0
  1377c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1377c4:	ebfff875 	bl	1359a0 <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  1377c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1377cc:	e5933018 	ldr	r3, [r3, #24]
  1377d0:	e3530000 	cmp	r3, #0
  1377d4:	0a00001c 	beq	13784c <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  1377d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1377dc:	e5934018 	ldr	r4, [r3, #24]
  1377e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1377e4:	e593301c 	ldr	r3, [r3, #28]
  1377e8:	e3a02003 	mov	r2, #3
  1377ec:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1377f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1377f4:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  1377f8:	ea000013 	b	13784c <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  1377fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137800:	e5933004 	ldr	r3, [r3, #4]
  137804:	e51b2010 	ldr	r2, [fp, #-16]
  137808:	e0033002 	and	r3, r3, r2
  13780c:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  137810:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137814:	e51b2010 	ldr	r2, [fp, #-16]
  137818:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  13781c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137820:	e5933018 	ldr	r3, [r3, #24]
  137824:	e3530000 	cmp	r3, #0
  137828:	0a000007 	beq	13784c <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  13782c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137830:	e5934018 	ldr	r4, [r3, #24]
  137834:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137838:	e593301c 	ldr	r3, [r3, #28]
  13783c:	e3a02002 	mov	r2, #2
  137840:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137844:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137848:	e12fff34 	blx	r4
}
  13784c:	e320f000 	nop	{0}
  137850:	e24bd008 	sub	sp, fp, #8
  137854:	e8bd8810 	pop	{r4, fp, pc}

00137858 <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  137858:	e92d4800 	push	{fp, lr}
  13785c:	e28db004 	add	fp, sp, #4
  137860:	e24dd010 	sub	sp, sp, #16
  137864:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  137868:	e51b3010 	ldr	r3, [fp, #-16]
  13786c:	e5933004 	ldr	r3, [r3, #4]
  137870:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  137874:	e51b0010 	ldr	r0, [fp, #-16]
  137878:	ebfff62f 	bl	13513c <get_instance_by_base>
  13787c:	e1a03000 	mov	r3, r0
  137880:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  137884:	e51b3010 	ldr	r3, [fp, #-16]
  137888:	e5933008 	ldr	r3, [r3, #8]
  13788c:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137890:	e3530000 	cmp	r3, #0
  137894:	0a000012 	beq	1378e4 <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137898:	e51b3008 	ldr	r3, [fp, #-8]
  13789c:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  1378a0:	e3530000 	cmp	r3, #0
  1378a4:	0a00000e 	beq	1378e4 <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  1378a8:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  1378ac:	e3403014 	movt	r3, #20
  1378b0:	e5933000 	ldr	r3, [r3]
  1378b4:	e3530000 	cmp	r3, #0
  1378b8:	0a000009 	beq	1378e4 <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  1378bc:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  1378c0:	e3403014 	movt	r3, #20
  1378c4:	e5932000 	ldr	r2, [r3]
  1378c8:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  1378cc:	e3403014 	movt	r3, #20
  1378d0:	e51b100c 	ldr	r1, [fp, #-12]
  1378d4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  1378d8:	e1a01003 	mov	r1, r3
  1378dc:	e51b0010 	ldr	r0, [fp, #-16]
  1378e0:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  1378e4:	e51b3010 	ldr	r3, [fp, #-16]
  1378e8:	e5933008 	ldr	r3, [r3, #8]
  1378ec:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  1378f0:	e3530000 	cmp	r3, #0
  1378f4:	0a000012 	beq	137944 <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  1378f8:	e51b3008 	ldr	r3, [fp, #-8]
  1378fc:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137900:	e3530000 	cmp	r3, #0
  137904:	0a00000e 	beq	137944 <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137908:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  13790c:	e3403014 	movt	r3, #20
  137910:	e5933000 	ldr	r3, [r3]
  137914:	e3530000 	cmp	r3, #0
  137918:	0a000009 	beq	137944 <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  13791c:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  137920:	e3403014 	movt	r3, #20
  137924:	e5932000 	ldr	r2, [r3]
  137928:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  13792c:	e3403014 	movt	r3, #20
  137930:	e51b100c 	ldr	r1, [fp, #-12]
  137934:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137938:	e1a01003 	mov	r1, r3
  13793c:	e51b0010 	ldr	r0, [fp, #-16]
  137940:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  137944:	e51b3010 	ldr	r3, [fp, #-16]
  137948:	e5933008 	ldr	r3, [r3, #8]
  13794c:	e2033906 	and	r3, r3, #98304	; 0x18000
  137950:	e3530000 	cmp	r3, #0
  137954:	0a000012 	beq	1379a4 <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  137958:	e51b3008 	ldr	r3, [fp, #-8]
  13795c:	e2033906 	and	r3, r3, #98304	; 0x18000
  137960:	e3530000 	cmp	r3, #0
  137964:	0a00000e 	beq	1379a4 <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  137968:	e30e3c04 	movw	r3, #60420	; 0xec04
  13796c:	e3403014 	movt	r3, #20
  137970:	e5933000 	ldr	r3, [r3]
  137974:	e3530000 	cmp	r3, #0
  137978:	0a000009 	beq	1379a4 <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  13797c:	e30e3c04 	movw	r3, #60420	; 0xec04
  137980:	e3403014 	movt	r3, #20
  137984:	e5932000 	ldr	r2, [r3]
  137988:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  13798c:	e3403014 	movt	r3, #20
  137990:	e51b100c 	ldr	r1, [fp, #-12]
  137994:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137998:	e1a01003 	mov	r1, r3
  13799c:	e51b0010 	ldr	r0, [fp, #-16]
  1379a0:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  1379a4:	e51b3010 	ldr	r3, [fp, #-16]
  1379a8:	e5932008 	ldr	r2, [r3, #8]
  1379ac:	e3a03000 	mov	r3, #0
  1379b0:	e346307c 	movt	r3, #24700	; 0x607c
  1379b4:	e0033002 	and	r3, r3, r2
  1379b8:	e3530000 	cmp	r3, #0
  1379bc:	0a000014 	beq	137a14 <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  1379c0:	e51b2008 	ldr	r2, [fp, #-8]
  1379c4:	e3a03000 	mov	r3, #0
  1379c8:	e346307c 	movt	r3, #24700	; 0x607c
  1379cc:	e0033002 	and	r3, r3, r2
  1379d0:	e3530000 	cmp	r3, #0
  1379d4:	0a00000e 	beq	137a14 <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  1379d8:	e30e3c00 	movw	r3, #60416	; 0xec00
  1379dc:	e3403014 	movt	r3, #20
  1379e0:	e5933000 	ldr	r3, [r3]
  1379e4:	e3530000 	cmp	r3, #0
  1379e8:	0a000009 	beq	137a14 <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  1379ec:	e30e3c00 	movw	r3, #60416	; 0xec00
  1379f0:	e3403014 	movt	r3, #20
  1379f4:	e5932000 	ldr	r2, [r3]
  1379f8:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  1379fc:	e3403014 	movt	r3, #20
  137a00:	e51b100c 	ldr	r1, [fp, #-12]
  137a04:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137a08:	e1a01003 	mov	r1, r3
  137a0c:	e51b0010 	ldr	r0, [fp, #-16]
  137a10:	e12fff32 	blx	r2
            }
        }
    }
}
  137a14:	e320f000 	nop	{0}
  137a18:	e24bd004 	sub	sp, fp, #4
  137a1c:	e8bd8800 	pop	{fp, pc}

00137a20 <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  137a20:	e92d4800 	push	{fp, lr}
  137a24:	e28db004 	add	fp, sp, #4
  137a28:	e24dd008 	sub	sp, sp, #8
  137a2c:	e50b0008 	str	r0, [fp, #-8]
  137a30:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  137a34:	e51b000c 	ldr	r0, [fp, #-12]
  137a38:	ebffff86 	bl	137858 <ENET_CommonFrame0IRQHandler>
  137a3c:	e320f000 	nop	{0}
  137a40:	e24bd004 	sub	sp, fp, #4
  137a44:	e8bd8800 	pop	{fp, pc}

00137a48 <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  137a48:	e92d4800 	push	{fp, lr}
  137a4c:	e28db004 	add	fp, sp, #4
  137a50:	e24dd010 	sub	sp, sp, #16
  137a54:	e50b0008 	str	r0, [fp, #-8]
  137a58:	e50b100c 	str	r1, [fp, #-12]
  137a5c:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  137a60:	e51b3008 	ldr	r3, [fp, #-8]
  137a64:	e5932014 	ldr	r2, [r3, #20]
  137a68:	e3a01001 	mov	r1, #1
  137a6c:	e51b300c 	ldr	r3, [fp, #-12]
  137a70:	e1a03311 	lsl	r3, r1, r3
  137a74:	e1e03003 	mvn	r3, r3
  137a78:	e0022003 	and	r2, r2, r3
  137a7c:	e51b3008 	ldr	r3, [fp, #-8]
  137a80:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137a84:	e51b3010 	ldr	r3, [fp, #-16]
  137a88:	e5933000 	ldr	r3, [r3]
  137a8c:	e3530000 	cmp	r3, #0
  137a90:	1a000009 	bne	137abc <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137a94:	e51b3008 	ldr	r3, [fp, #-8]
  137a98:	e5932004 	ldr	r2, [r3, #4]
  137a9c:	e3a01001 	mov	r1, #1
  137aa0:	e51b300c 	ldr	r3, [fp, #-12]
  137aa4:	e1a03311 	lsl	r3, r1, r3
  137aa8:	e1e03003 	mvn	r3, r3
  137aac:	e0022003 	and	r2, r2, r3
  137ab0:	e51b3008 	ldr	r3, [fp, #-8]
  137ab4:	e5832004 	str	r2, [r3, #4]
  137ab8:	ea00000d 	b	137af4 <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137abc:	e51b3010 	ldr	r3, [fp, #-16]
  137ac0:	e5d33004 	ldrb	r3, [r3, #4]
  137ac4:	e1a02003 	mov	r2, r3
  137ac8:	e51b100c 	ldr	r1, [fp, #-12]
  137acc:	e51b0008 	ldr	r0, [fp, #-8]
  137ad0:	eb000010 	bl	137b18 <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137ad4:	e51b3008 	ldr	r3, [fp, #-8]
  137ad8:	e5932004 	ldr	r2, [r3, #4]
  137adc:	e3a01001 	mov	r1, #1
  137ae0:	e51b300c 	ldr	r3, [fp, #-12]
  137ae4:	e1a03311 	lsl	r3, r1, r3
  137ae8:	e1822003 	orr	r2, r2, r3
  137aec:	e51b3008 	ldr	r3, [fp, #-8]
  137af0:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137af4:	e51b3010 	ldr	r3, [fp, #-16]
  137af8:	e5933008 	ldr	r3, [r3, #8]
  137afc:	e1a02003 	mov	r2, r3
  137b00:	e51b100c 	ldr	r1, [fp, #-12]
  137b04:	e51b0008 	ldr	r0, [fp, #-8]
  137b08:	eb00002c 	bl	137bc0 <GPIO_SetPinInterruptConfig>
}
  137b0c:	e320f000 	nop	{0}
  137b10:	e24bd004 	sub	sp, fp, #4
  137b14:	e8bd8800 	pop	{fp, pc}

00137b18 <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  137b18:	e92d4800 	push	{fp, lr}
  137b1c:	e28db004 	add	fp, sp, #4
  137b20:	e24dd010 	sub	sp, sp, #16
  137b24:	e50b0008 	str	r0, [fp, #-8]
  137b28:	e50b100c 	str	r1, [fp, #-12]
  137b2c:	e1a03002 	mov	r3, r2
  137b30:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  137b34:	e51b300c 	ldr	r3, [fp, #-12]
  137b38:	e353001f 	cmp	r3, #31
  137b3c:	9a000007 	bls	137b60 <GPIO_WritePinOutput+0x48>
  137b40:	e30a314c 	movw	r3, #41292	; 0xa14c
  137b44:	e3403014 	movt	r3, #20
  137b48:	e3a0206a 	mov	r2, #106	; 0x6a
  137b4c:	e30a1114 	movw	r1, #41236	; 0xa114
  137b50:	e3401014 	movt	r1, #20
  137b54:	e30a0140 	movw	r0, #41280	; 0xa140
  137b58:	e3400014 	movt	r0, #20
  137b5c:	eb000445 	bl	138c78 <__assert_fail>
    if (output == 0U)
  137b60:	e55b300d 	ldrb	r3, [fp, #-13]
  137b64:	e3530000 	cmp	r3, #0
  137b68:	1a000009 	bne	137b94 <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  137b6c:	e51b3008 	ldr	r3, [fp, #-8]
  137b70:	e5932000 	ldr	r2, [r3]
  137b74:	e3a01001 	mov	r1, #1
  137b78:	e51b300c 	ldr	r3, [fp, #-12]
  137b7c:	e1a03311 	lsl	r3, r1, r3
  137b80:	e1e03003 	mvn	r3, r3
  137b84:	e0022003 	and	r2, r2, r3
  137b88:	e51b3008 	ldr	r3, [fp, #-8]
  137b8c:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  137b90:	ea000007 	b	137bb4 <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137b94:	e51b3008 	ldr	r3, [fp, #-8]
  137b98:	e5932000 	ldr	r2, [r3]
  137b9c:	e3a01001 	mov	r1, #1
  137ba0:	e51b300c 	ldr	r3, [fp, #-12]
  137ba4:	e1a03311 	lsl	r3, r1, r3
  137ba8:	e1822003 	orr	r2, r2, r3
  137bac:	e51b3008 	ldr	r3, [fp, #-8]
  137bb0:	e5832000 	str	r2, [r3]
}
  137bb4:	e320f000 	nop	{0}
  137bb8:	e24bd004 	sub	sp, fp, #4
  137bbc:	e8bd8800 	pop	{fp, pc}

00137bc0 <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  137bc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137bc4:	e28db000 	add	fp, sp, #0
  137bc8:	e24dd01c 	sub	sp, sp, #28
  137bcc:	e50b0010 	str	r0, [fp, #-16]
  137bd0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137bd4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137bdc:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  137be0:	e51b3010 	ldr	r3, [fp, #-16]
  137be4:	e593201c 	ldr	r2, [r3, #28]
  137be8:	e3a01001 	mov	r1, #1
  137bec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137bf0:	e1a03311 	lsl	r3, r1, r3
  137bf4:	e1e03003 	mvn	r3, r3
  137bf8:	e0022003 	and	r2, r2, r3
  137bfc:	e51b3010 	ldr	r3, [fp, #-16]
  137c00:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137c04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137c08:	e353000f 	cmp	r3, #15
  137c0c:	8a000003 	bhi	137c20 <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  137c10:	e51b3010 	ldr	r3, [fp, #-16]
  137c14:	e283300c 	add	r3, r3, #12
  137c18:	e50b3008 	str	r3, [fp, #-8]
  137c1c:	ea000005 	b	137c38 <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  137c20:	e51b3010 	ldr	r3, [fp, #-16]
  137c24:	e2833010 	add	r3, r3, #16
  137c28:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  137c2c:	e51b300c 	ldr	r3, [fp, #-12]
  137c30:	e2433010 	sub	r3, r3, #16
  137c34:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  137c38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137c3c:	e2433001 	sub	r3, r3, #1
  137c40:	e3530004 	cmp	r3, #4
  137c44:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137c48:	ea000042 	b	137d58 <GPIO_SetPinInterruptConfig+0x198>
  137c4c:	00137c60 	.word	0x00137c60
  137c50:	00137c8c 	.word	0x00137c8c
  137c54:	00137ccc 	.word	0x00137ccc
  137c58:	00137d0c 	.word	0x00137d0c
  137c5c:	00137d34 	.word	0x00137d34
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  137c60:	e51b3008 	ldr	r3, [fp, #-8]
  137c64:	e5932000 	ldr	r2, [r3]
  137c68:	e51b300c 	ldr	r3, [fp, #-12]
  137c6c:	e1a03083 	lsl	r3, r3, #1
  137c70:	e3a01003 	mov	r1, #3
  137c74:	e1a03311 	lsl	r3, r1, r3
  137c78:	e1e03003 	mvn	r3, r3
  137c7c:	e0022003 	and	r2, r2, r3
  137c80:	e51b3008 	ldr	r3, [fp, #-8]
  137c84:	e5832000 	str	r2, [r3]
            break;
  137c88:	ea000033 	b	137d5c <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137c8c:	e51b3008 	ldr	r3, [fp, #-8]
  137c90:	e5932000 	ldr	r2, [r3]
  137c94:	e51b300c 	ldr	r3, [fp, #-12]
  137c98:	e1a03083 	lsl	r3, r3, #1
  137c9c:	e3a01003 	mov	r1, #3
  137ca0:	e1a03311 	lsl	r3, r1, r3
  137ca4:	e1e03003 	mvn	r3, r3
  137ca8:	e0022003 	and	r2, r2, r3
  137cac:	e51b300c 	ldr	r3, [fp, #-12]
  137cb0:	e1a03083 	lsl	r3, r3, #1
  137cb4:	e3a01001 	mov	r1, #1
  137cb8:	e1a03311 	lsl	r3, r1, r3
  137cbc:	e1822003 	orr	r2, r2, r3
  137cc0:	e51b3008 	ldr	r3, [fp, #-8]
  137cc4:	e5832000 	str	r2, [r3]
            break;
  137cc8:	ea000023 	b	137d5c <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137ccc:	e51b3008 	ldr	r3, [fp, #-8]
  137cd0:	e5932000 	ldr	r2, [r3]
  137cd4:	e51b300c 	ldr	r3, [fp, #-12]
  137cd8:	e1a03083 	lsl	r3, r3, #1
  137cdc:	e3a01003 	mov	r1, #3
  137ce0:	e1a03311 	lsl	r3, r1, r3
  137ce4:	e1e03003 	mvn	r3, r3
  137ce8:	e0022003 	and	r2, r2, r3
  137cec:	e51b300c 	ldr	r3, [fp, #-12]
  137cf0:	e1a03083 	lsl	r3, r3, #1
  137cf4:	e3a01002 	mov	r1, #2
  137cf8:	e1a03311 	lsl	r3, r1, r3
  137cfc:	e1822003 	orr	r2, r2, r3
  137d00:	e51b3008 	ldr	r3, [fp, #-8]
  137d04:	e5832000 	str	r2, [r3]
            break;
  137d08:	ea000013 	b	137d5c <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  137d0c:	e51b3008 	ldr	r3, [fp, #-8]
  137d10:	e5932000 	ldr	r2, [r3]
  137d14:	e51b300c 	ldr	r3, [fp, #-12]
  137d18:	e1a03083 	lsl	r3, r3, #1
  137d1c:	e3a01003 	mov	r1, #3
  137d20:	e1a03311 	lsl	r3, r1, r3
  137d24:	e1822003 	orr	r2, r2, r3
  137d28:	e51b3008 	ldr	r3, [fp, #-8]
  137d2c:	e5832000 	str	r2, [r3]
            break;
  137d30:	ea000009 	b	137d5c <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  137d34:	e51b3010 	ldr	r3, [fp, #-16]
  137d38:	e593201c 	ldr	r2, [r3, #28]
  137d3c:	e3a01001 	mov	r1, #1
  137d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137d44:	e1a03311 	lsl	r3, r1, r3
  137d48:	e1822003 	orr	r2, r2, r3
  137d4c:	e51b3010 	ldr	r3, [fp, #-16]
  137d50:	e583201c 	str	r2, [r3, #28]
            break;
  137d54:	ea000000 	b	137d5c <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  137d58:	e320f000 	nop	{0}
    }
}
  137d5c:	e320f000 	nop	{0}
  137d60:	e28bd000 	add	sp, fp, #0
  137d64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137d68:	e12fff1e 	bx	lr

00137d6c <ENET_ReadSMIData>:
{
  137d6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137d70:	e28db000 	add	fp, sp, #0
  137d74:	e24dd00c 	sub	sp, sp, #12
  137d78:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  137d7c:	e51b3008 	ldr	r3, [fp, #-8]
  137d80:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  137d84:	e6ff3073 	uxth	r3, r3
}
  137d88:	e1a00003 	mov	r0, r3
  137d8c:	e28bd000 	add	sp, fp, #0
  137d90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137d94:	e12fff1e 	bx	lr

00137d98 <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  137d98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137d9c:	e28db000 	add	fp, sp, #0
  137da0:	e24dd00c 	sub	sp, sp, #12
  137da4:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  137da8:	e51b3008 	ldr	r3, [fp, #-8]
  137dac:	e5933004 	ldr	r3, [r3, #4]
}
  137db0:	e1a00003 	mov	r0, r3
  137db4:	e28bd000 	add	sp, fp, #0
  137db8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137dbc:	e12fff1e 	bx	lr

00137dc0 <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  137dc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137dc4:	e28db000 	add	fp, sp, #0
  137dc8:	e24dd00c 	sub	sp, sp, #12
  137dcc:	e50b0008 	str	r0, [fp, #-8]
  137dd0:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  137dd4:	e51b3008 	ldr	r3, [fp, #-8]
  137dd8:	e51b200c 	ldr	r2, [fp, #-12]
  137ddc:	e5832004 	str	r2, [r3, #4]
}
  137de0:	e320f000 	nop	{0}
  137de4:	e28bd000 	add	sp, fp, #0
  137de8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137dec:	e12fff1e 	bx	lr

00137df0 <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  137df0:	e92d4800 	push	{fp, lr}
  137df4:	e28db004 	add	fp, sp, #4
  137df8:	e24dd018 	sub	sp, sp, #24
  137dfc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137e00:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  137e04:	e3a03000 	mov	r3, #0
  137e08:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  137e0c:	e3a03001 	mov	r3, #1
  137e10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  137e14:	e3a03000 	mov	r3, #0
  137e18:	e54b3010 	strb	r3, [fp, #-16]
  137e1c:	e3a03000 	mov	r3, #0
  137e20:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  137e24:	e3a02a01 	mov	r2, #4096	; 0x1000
  137e28:	e3a01001 	mov	r1, #1
  137e2c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137e30:	ebff31a6 	bl	1044d0 <ueth_remap>
  137e34:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  137e38:	e24b3014 	sub	r3, fp, #20
  137e3c:	e1a02003 	mov	r2, r3
  137e40:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e44:	e51b0008 	ldr	r0, [fp, #-8]
  137e48:	ebfffefe 	bl	137a48 <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  137e4c:	e3a02000 	mov	r2, #0
  137e50:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e54:	e51b0008 	ldr	r0, [fp, #-8]
  137e58:	ebffff2e 	bl	137b18 <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  137e5c:	e3a00001 	mov	r0, #1
  137e60:	ebff2805 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  137e64:	e3a02001 	mov	r2, #1
  137e68:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e6c:	e51b0008 	ldr	r0, [fp, #-8]
  137e70:	ebffff28 	bl	137b18 <GPIO_WritePinOutput>

    return kStatus_Success;
  137e74:	e3a03000 	mov	r3, #0

}
  137e78:	e1a00003 	mov	r0, r3
  137e7c:	e24bd004 	sub	sp, fp, #4
  137e80:	e8bd8800 	pop	{fp, pc}

00137e84 <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  137e84:	e92d4800 	push	{fp, lr}
  137e88:	e28db004 	add	fp, sp, #4
  137e8c:	e24dd018 	sub	sp, sp, #24
  137e90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137e94:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  137e98:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137e9c:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  137ea0:	e3a03000 	mov	r3, #0
  137ea4:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  137ea8:	e3a03902 	mov	r3, #32768	; 0x8000
  137eac:	e3a02000 	mov	r2, #0
  137eb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137eb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137eb8:	eb000071 	bl	138084 <PHY_Write>
  137ebc:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  137ec0:	e51b3010 	ldr	r3, [fp, #-16]
  137ec4:	e3530000 	cmp	r3, #0
  137ec8:	1a000038 	bne	137fb0 <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  137ecc:	e30031e1 	movw	r3, #481	; 0x1e1
  137ed0:	e3a02004 	mov	r2, #4
  137ed4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137ed8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137edc:	eb000068 	bl	138084 <PHY_Write>
  137ee0:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  137ee4:	e51b3010 	ldr	r3, [fp, #-16]
  137ee8:	e3530000 	cmp	r3, #0
  137eec:	1a00002f 	bne	137fb0 <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  137ef0:	e3a03c12 	mov	r3, #4608	; 0x1200
  137ef4:	e3a02000 	mov	r2, #0
  137ef8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137efc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f00:	eb00005f 	bl	138084 <PHY_Write>
  137f04:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  137f08:	e51b3010 	ldr	r3, [fp, #-16]
  137f0c:	e3530000 	cmp	r3, #0
  137f10:	1a000026 	bne	137fb0 <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  137f14:	ea000020 	b	137f9c <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  137f18:	e24b3014 	sub	r3, fp, #20
  137f1c:	e3a02001 	mov	r2, #1
  137f20:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137f24:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f28:	eb000083 	bl	13813c <PHY_Read>
  137f2c:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  137f30:	e51b3010 	ldr	r3, [fp, #-16]
  137f34:	e3530000 	cmp	r3, #0
  137f38:	1a000010 	bne	137f80 <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  137f3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137f40:	e2033020 	and	r3, r3, #32
  137f44:	e3530000 	cmp	r3, #0
  137f48:	0a00000c 	beq	137f80 <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  137f4c:	e3a03000 	mov	r3, #0
  137f50:	e50b300c 	str	r3, [fp, #-12]
  137f54:	ea000003 	b	137f68 <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  137f58:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  137f5c:	e51b300c 	ldr	r3, [fp, #-12]
  137f60:	e2833001 	add	r3, r3, #1
  137f64:	e50b300c 	str	r3, [fp, #-12]
  137f68:	e51b200c 	ldr	r2, [fp, #-12]
  137f6c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  137f70:	e34034ff 	movt	r3, #1279	; 0x4ff
  137f74:	e1520003 	cmp	r2, r3
  137f78:	9afffff6 	bls	137f58 <PHY_StartNegotiation+0xd4>
                            }
                            break;
  137f7c:	ea00000b 	b	137fb0 <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  137f80:	e3a00064 	mov	r0, #100	; 0x64
  137f84:	ebff27bc 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  137f88:	e51b3008 	ldr	r3, [fp, #-8]
  137f8c:	e3530000 	cmp	r3, #0
  137f90:	1a000001 	bne	137f9c <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  137f94:	e3013006 	movw	r3, #4102	; 0x1006
  137f98:	ea000005 	b	137fb4 <PHY_StartNegotiation+0x130>
                while (counter --)
  137f9c:	e51b3008 	ldr	r3, [fp, #-8]
  137fa0:	e2432001 	sub	r2, r3, #1
  137fa4:	e50b2008 	str	r2, [fp, #-8]
  137fa8:	e3530000 	cmp	r3, #0
  137fac:	1affffd9 	bne	137f18 <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  137fb0:	e3a03000 	mov	r3, #0
}
  137fb4:	e1a00003 	mov	r0, r3
  137fb8:	e24bd004 	sub	sp, fp, #4
  137fbc:	e8bd8800 	pop	{fp, pc}

00137fc0 <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  137fc0:	e92d4800 	push	{fp, lr}
  137fc4:	e28db004 	add	fp, sp, #4
  137fc8:	e24dd020 	sub	sp, sp, #32
  137fcc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137fd0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  137fd4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  137fd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  137fdc:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137fe0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  137fe4:	e3a03000 	mov	r3, #0
  137fe8:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  137fec:	e3a03000 	mov	r3, #0
  137ff0:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  137ff4:	e3a02000 	mov	r2, #0
  137ff8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  137ffc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138000:	ebfffa3c 	bl	1368f8 <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138004:	e24b3010 	sub	r3, fp, #16
  138008:	e3a02002 	mov	r2, #2
  13800c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138010:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138014:	eb000048 	bl	13813c <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  138018:	ea000007 	b	13803c <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  13801c:	e24b3010 	sub	r3, fp, #16
  138020:	e3a02002 	mov	r2, #2
  138024:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138028:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13802c:	eb000042 	bl	13813c <PHY_Read>
        counter --;
  138030:	e51b3008 	ldr	r3, [fp, #-8]
  138034:	e2433001 	sub	r3, r3, #1
  138038:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  13803c:	e51b3010 	ldr	r3, [fp, #-16]
  138040:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  138044:	e1520003 	cmp	r2, r3
  138048:	0a000002 	beq	138058 <PHY_Init+0x98>
  13804c:	e51b3008 	ldr	r3, [fp, #-8]
  138050:	e3530000 	cmp	r3, #0
  138054:	1afffff0 	bne	13801c <PHY_Init+0x5c>
    }
    if (!counter)
  138058:	e51b3008 	ldr	r3, [fp, #-8]
  13805c:	e3530000 	cmp	r3, #0
  138060:	1a000001 	bne	13806c <PHY_Init+0xac>
    {
        return kStatus_Fail;
  138064:	e3a03001 	mov	r3, #1
  138068:	ea000002 	b	138078 <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  13806c:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138070:	e50b3008 	str	r3, [fp, #-8]
    return result;
  138074:	e51b300c 	ldr	r3, [fp, #-12]
}
  138078:	e1a00003 	mov	r0, r3
  13807c:	e24bd004 	sub	sp, fp, #4
  138080:	e8bd8800 	pop	{fp, pc}

00138084 <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  138084:	e92d4800 	push	{fp, lr}
  138088:	e28db004 	add	fp, sp, #4
  13808c:	e24dd020 	sub	sp, sp, #32
  138090:	e50b0010 	str	r0, [fp, #-16]
  138094:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138098:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13809c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1380a0:	e3a01502 	mov	r1, #8388608	; 0x800000
  1380a4:	e51b0010 	ldr	r0, [fp, #-16]
  1380a8:	ebffff44 	bl	137dc0 <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  1380ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1380b0:	e58d3000 	str	r3, [sp]
  1380b4:	e3a03001 	mov	r3, #1
  1380b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1380bc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1380c0:	e51b0010 	ldr	r0, [fp, #-16]
  1380c4:	ebfffa4a 	bl	1369f4 <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1380c8:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1380cc:	e50b3008 	str	r3, [fp, #-8]
  1380d0:	ea000008 	b	1380f8 <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1380d4:	e51b0010 	ldr	r0, [fp, #-16]
  1380d8:	ebffff2e 	bl	137d98 <ENET_GetInterruptStatus>
  1380dc:	e1a03000 	mov	r3, r0
  1380e0:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1380e4:	e3530000 	cmp	r3, #0
  1380e8:	1a000006 	bne	138108 <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1380ec:	e51b3008 	ldr	r3, [fp, #-8]
  1380f0:	e2433001 	sub	r3, r3, #1
  1380f4:	e50b3008 	str	r3, [fp, #-8]
  1380f8:	e51b3008 	ldr	r3, [fp, #-8]
  1380fc:	e3530000 	cmp	r3, #0
  138100:	1afffff3 	bne	1380d4 <PHY_Write+0x50>
  138104:	ea000000 	b	13810c <PHY_Write+0x88>
        {
            break;
  138108:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  13810c:	e51b3008 	ldr	r3, [fp, #-8]
  138110:	e3530000 	cmp	r3, #0
  138114:	1a000001 	bne	138120 <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138118:	e3013005 	movw	r3, #4101	; 0x1005
  13811c:	ea000003 	b	138130 <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138120:	e3a01502 	mov	r1, #8388608	; 0x800000
  138124:	e51b0010 	ldr	r0, [fp, #-16]
  138128:	ebffff24 	bl	137dc0 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  13812c:	e3a03000 	mov	r3, #0
}
  138130:	e1a00003 	mov	r0, r3
  138134:	e24bd004 	sub	sp, fp, #4
  138138:	e8bd8800 	pop	{fp, pc}

0013813c <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  13813c:	e92d4800 	push	{fp, lr}
  138140:	e28db004 	add	fp, sp, #4
  138144:	e24dd018 	sub	sp, sp, #24
  138148:	e50b0010 	str	r0, [fp, #-16]
  13814c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138150:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138154:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  138158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13815c:	e3530000 	cmp	r3, #0
  138160:	1a000005 	bne	13817c <PHY_Read+0x40>
  138164:	e3a020d0 	mov	r2, #208	; 0xd0
  138168:	e30a1178 	movw	r1, #41336	; 0xa178
  13816c:	e3401014 	movt	r1, #20
  138170:	e30a0160 	movw	r0, #41312	; 0xa160
  138174:	e3400014 	movt	r0, #20
  138178:	ebff2d06 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  13817c:	e3a01502 	mov	r1, #8388608	; 0x800000
  138180:	e51b0010 	ldr	r0, [fp, #-16]
  138184:	ebffff0d 	bl	137dc0 <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  138188:	e3a03002 	mov	r3, #2
  13818c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  138190:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138194:	e51b0010 	ldr	r0, [fp, #-16]
  138198:	ebfffa36 	bl	136a78 <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  13819c:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1381a0:	e50b3008 	str	r3, [fp, #-8]
  1381a4:	ea000008 	b	1381cc <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1381a8:	e51b0010 	ldr	r0, [fp, #-16]
  1381ac:	ebfffef9 	bl	137d98 <ENET_GetInterruptStatus>
  1381b0:	e1a03000 	mov	r3, r0
  1381b4:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1381b8:	e3530000 	cmp	r3, #0
  1381bc:	1a000006 	bne	1381dc <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1381c0:	e51b3008 	ldr	r3, [fp, #-8]
  1381c4:	e2433001 	sub	r3, r3, #1
  1381c8:	e50b3008 	str	r3, [fp, #-8]
  1381cc:	e51b3008 	ldr	r3, [fp, #-8]
  1381d0:	e3530000 	cmp	r3, #0
  1381d4:	1afffff3 	bne	1381a8 <PHY_Read+0x6c>
  1381d8:	ea000000 	b	1381e0 <PHY_Read+0xa4>
        {
            break;
  1381dc:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  1381e0:	e51b3008 	ldr	r3, [fp, #-8]
  1381e4:	e3530000 	cmp	r3, #0
  1381e8:	1a000001 	bne	1381f4 <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  1381ec:	e3013005 	movw	r3, #4101	; 0x1005
  1381f0:	ea000008 	b	138218 <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  1381f4:	e51b0010 	ldr	r0, [fp, #-16]
  1381f8:	ebfffedb 	bl	137d6c <ENET_ReadSMIData>
  1381fc:	e1a02000 	mov	r2, r0
  138200:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138204:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138208:	e3a01502 	mov	r1, #8388608	; 0x800000
  13820c:	e51b0010 	ldr	r0, [fp, #-16]
  138210:	ebfffeea 	bl	137dc0 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138214:	e3a03000 	mov	r3, #0
}
  138218:	e1a00003 	mov	r0, r3
  13821c:	e24bd004 	sub	sp, fp, #4
  138220:	e8bd8800 	pop	{fp, pc}

00138224 <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  138224:	e92d4800 	push	{fp, lr}
  138228:	e28db004 	add	fp, sp, #4
  13822c:	e24dd018 	sub	sp, sp, #24
  138230:	e50b0010 	str	r0, [fp, #-16]
  138234:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138238:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13823c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  138240:	e3a03000 	mov	r3, #0
  138244:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  138248:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  13824c:	e3530000 	cmp	r3, #0
  138250:	0a000024 	beq	1382e8 <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  138254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138258:	e3530000 	cmp	r3, #0
  13825c:	1a000010 	bne	1382a4 <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138260:	e24b300c 	sub	r3, fp, #12
  138264:	e3a02000 	mov	r2, #0
  138268:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13826c:	e51b0010 	ldr	r0, [fp, #-16]
  138270:	ebffffb1 	bl	13813c <PHY_Read>
  138274:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138278:	e51b3008 	ldr	r3, [fp, #-8]
  13827c:	e3530000 	cmp	r3, #0
  138280:	1a00003d 	bne	13837c <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  138284:	e51b300c 	ldr	r3, [fp, #-12]
  138288:	e3833901 	orr	r3, r3, #16384	; 0x4000
  13828c:	e3a02000 	mov	r2, #0
  138290:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138294:	e51b0010 	ldr	r0, [fp, #-16]
  138298:	ebffff79 	bl	138084 <PHY_Write>
  13829c:	e1a03000 	mov	r3, r0
  1382a0:	ea000036 	b	138380 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  1382a4:	e24b300c 	sub	r3, fp, #12
  1382a8:	e3a0201f 	mov	r2, #31
  1382ac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1382b0:	e51b0010 	ldr	r0, [fp, #-16]
  1382b4:	ebffffa0 	bl	13813c <PHY_Read>
  1382b8:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1382bc:	e51b3008 	ldr	r3, [fp, #-8]
  1382c0:	e3530000 	cmp	r3, #0
  1382c4:	1a00002c 	bne	13837c <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  1382c8:	e51b300c 	ldr	r3, [fp, #-12]
  1382cc:	e3833004 	orr	r3, r3, #4
  1382d0:	e3a0201f 	mov	r2, #31
  1382d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1382d8:	e51b0010 	ldr	r0, [fp, #-16]
  1382dc:	ebffff68 	bl	138084 <PHY_Write>
  1382e0:	e1a03000 	mov	r3, r0
  1382e4:	ea000025 	b	138380 <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  1382e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1382ec:	e3530000 	cmp	r3, #0
  1382f0:	1a000010 	bne	138338 <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  1382f4:	e24b300c 	sub	r3, fp, #12
  1382f8:	e3a02000 	mov	r2, #0
  1382fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138300:	e51b0010 	ldr	r0, [fp, #-16]
  138304:	ebffff8c 	bl	13813c <PHY_Read>
  138308:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  13830c:	e51b3008 	ldr	r3, [fp, #-8]
  138310:	e3530000 	cmp	r3, #0
  138314:	1a000018 	bne	13837c <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  138318:	e51b300c 	ldr	r3, [fp, #-12]
  13831c:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  138320:	e3a02000 	mov	r2, #0
  138324:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138328:	e51b0010 	ldr	r0, [fp, #-16]
  13832c:	ebffff54 	bl	138084 <PHY_Write>
  138330:	e1a03000 	mov	r3, r0
  138334:	ea000011 	b	138380 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  138338:	e24b300c 	sub	r3, fp, #12
  13833c:	e3a0201f 	mov	r2, #31
  138340:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138344:	e51b0010 	ldr	r0, [fp, #-16]
  138348:	ebffff7b 	bl	13813c <PHY_Read>
  13834c:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138350:	e51b3008 	ldr	r3, [fp, #-8]
  138354:	e3530000 	cmp	r3, #0
  138358:	1a000007 	bne	13837c <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  13835c:	e51b300c 	ldr	r3, [fp, #-12]
  138360:	e3c33004 	bic	r3, r3, #4
  138364:	e3a0201f 	mov	r2, #31
  138368:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13836c:	e51b0010 	ldr	r0, [fp, #-16]
  138370:	ebffff43 	bl	138084 <PHY_Write>
  138374:	e1a03000 	mov	r3, r0
  138378:	ea000000 	b	138380 <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  13837c:	e51b3008 	ldr	r3, [fp, #-8]
}
  138380:	e1a00003 	mov	r0, r3
  138384:	e24bd004 	sub	sp, fp, #4
  138388:	e8bd8800 	pop	{fp, pc}

0013838c <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  13838c:	e92d4800 	push	{fp, lr}
  138390:	e28db004 	add	fp, sp, #4
  138394:	e24dd018 	sub	sp, sp, #24
  138398:	e50b0010 	str	r0, [fp, #-16]
  13839c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1383a0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  1383a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1383a8:	e3530000 	cmp	r3, #0
  1383ac:	1a000005 	bne	1383c8 <PHY_GetLinkStatus+0x3c>
  1383b0:	e3a02f4a 	mov	r2, #296	; 0x128
  1383b4:	e30a1184 	movw	r1, #41348	; 0xa184
  1383b8:	e3401014 	movt	r1, #20
  1383bc:	e30a0168 	movw	r0, #41320	; 0xa168
  1383c0:	e3400014 	movt	r0, #20
  1383c4:	ebff2c73 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1383c8:	e3a03000 	mov	r3, #0
  1383cc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  1383d0:	e24b300c 	sub	r3, fp, #12
  1383d4:	e3a02001 	mov	r2, #1
  1383d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1383dc:	e51b0010 	ldr	r0, [fp, #-16]
  1383e0:	ebffff55 	bl	13813c <PHY_Read>
  1383e4:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  1383e8:	e51b3008 	ldr	r3, [fp, #-8]
  1383ec:	e3530000 	cmp	r3, #0
  1383f0:	1a00000a 	bne	138420 <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  1383f4:	e51b300c 	ldr	r3, [fp, #-12]
  1383f8:	e2033004 	and	r3, r3, #4
  1383fc:	e3530000 	cmp	r3, #0
  138400:	1a000003 	bne	138414 <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  138404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138408:	e3a02000 	mov	r2, #0
  13840c:	e5c32000 	strb	r2, [r3]
  138410:	ea000002 	b	138420 <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  138414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138418:	e3a02001 	mov	r2, #1
  13841c:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  138420:	e51b3008 	ldr	r3, [fp, #-8]
}
  138424:	e1a00003 	mov	r0, r3
  138428:	e24bd004 	sub	sp, fp, #4
  13842c:	e8bd8800 	pop	{fp, pc}

00138430 <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  138430:	e92d4800 	push	{fp, lr}
  138434:	e28db004 	add	fp, sp, #4
  138438:	e24dd020 	sub	sp, sp, #32
  13843c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138440:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  138444:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  138448:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  13844c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138450:	e3530000 	cmp	r3, #0
  138454:	1a000005 	bne	138470 <PHY_GetLinkSpeedDuplex+0x40>
  138458:	e3002141 	movw	r2, #321	; 0x141
  13845c:	e30a1198 	movw	r1, #41368	; 0xa198
  138460:	e3401014 	movt	r1, #20
  138464:	e30a0170 	movw	r0, #41328	; 0xa170
  138468:	e3400014 	movt	r0, #20
  13846c:	ebff2c49 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138470:	e3a03000 	mov	r3, #0
  138474:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  138478:	e24b3010 	sub	r3, fp, #16
  13847c:	e3a0201f 	mov	r2, #31
  138480:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138484:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138488:	ebffff2b 	bl	13813c <PHY_Read>
  13848c:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  138490:	e51b3010 	ldr	r3, [fp, #-16]
  138494:	e1a03123 	lsr	r3, r3, #2
  138498:	e2033007 	and	r3, r3, #7
  13849c:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  1384a0:	e51b300c 	ldr	r3, [fp, #-12]
  1384a4:	e2433001 	sub	r3, r3, #1
  1384a8:	e3530005 	cmp	r3, #5
  1384ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1384b0:	ea000021 	b	13853c <PHY_GetLinkSpeedDuplex+0x10c>
  1384b4:	001384cc 	.word	0x001384cc
  1384b8:	00138504 	.word	0x00138504
  1384bc:	0013853c 	.word	0x0013853c
  1384c0:	0013853c 	.word	0x0013853c
  1384c4:	001384e8 	.word	0x001384e8
  1384c8:	00138520 	.word	0x00138520
    {
        case 1:
            *speed = kPHY_Speed10M;
  1384cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1384d0:	e3a02000 	mov	r2, #0
  1384d4:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  1384d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1384dc:	e3a02000 	mov	r2, #0
  1384e0:	e5832000 	str	r2, [r3]
            break;
  1384e4:	ea00001a 	b	138554 <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  1384e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1384ec:	e3a02000 	mov	r2, #0
  1384f0:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  1384f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1384f8:	e3a02001 	mov	r2, #1
  1384fc:	e5832000 	str	r2, [r3]
            break;
  138500:	ea000013 	b	138554 <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  138504:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138508:	e3a02001 	mov	r2, #1
  13850c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138510:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138514:	e3a02000 	mov	r2, #0
  138518:	e5832000 	str	r2, [r3]
            break;
  13851c:	ea00000c 	b	138554 <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  138520:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138524:	e3a02001 	mov	r2, #1
  138528:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  13852c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138530:	e3a02001 	mov	r2, #1
  138534:	e5832000 	str	r2, [r3]
            break;
  138538:	ea000005 	b	138554 <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  13853c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138540:	e3a02001 	mov	r2, #1
  138544:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138548:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13854c:	e3a02001 	mov	r2, #1
  138550:	e5832000 	str	r2, [r3]
    }

    return result;
  138554:	e51b3008 	ldr	r3, [fp, #-8]
}
  138558:	e1a00003 	mov	r0, r3
  13855c:	e24bd004 	sub	sp, fp, #4
  138560:	e8bd8800 	pop	{fp, pc}

00138564 <__udivsi3>:
  138564:	e2512001 	subs	r2, r1, #1
  138568:	012fff1e 	bxeq	lr
  13856c:	3a000074 	bcc	138744 <__udivsi3+0x1e0>
  138570:	e1500001 	cmp	r0, r1
  138574:	9a00006b 	bls	138728 <__udivsi3+0x1c4>
  138578:	e1110002 	tst	r1, r2
  13857c:	0a00006c 	beq	138734 <__udivsi3+0x1d0>
  138580:	e16f3f10 	clz	r3, r0
  138584:	e16f2f11 	clz	r2, r1
  138588:	e0423003 	sub	r3, r2, r3
  13858c:	e273301f 	rsbs	r3, r3, #31
  138590:	10833083 	addne	r3, r3, r3, lsl #1
  138594:	e3a02000 	mov	r2, #0
  138598:	108ff103 	addne	pc, pc, r3, lsl #2
  13859c:	e1a00000 	nop			; (mov r0, r0)
  1385a0:	e1500f81 	cmp	r0, r1, lsl #31
  1385a4:	e0a22002 	adc	r2, r2, r2
  1385a8:	20400f81 	subcs	r0, r0, r1, lsl #31
  1385ac:	e1500f01 	cmp	r0, r1, lsl #30
  1385b0:	e0a22002 	adc	r2, r2, r2
  1385b4:	20400f01 	subcs	r0, r0, r1, lsl #30
  1385b8:	e1500e81 	cmp	r0, r1, lsl #29
  1385bc:	e0a22002 	adc	r2, r2, r2
  1385c0:	20400e81 	subcs	r0, r0, r1, lsl #29
  1385c4:	e1500e01 	cmp	r0, r1, lsl #28
  1385c8:	e0a22002 	adc	r2, r2, r2
  1385cc:	20400e01 	subcs	r0, r0, r1, lsl #28
  1385d0:	e1500d81 	cmp	r0, r1, lsl #27
  1385d4:	e0a22002 	adc	r2, r2, r2
  1385d8:	20400d81 	subcs	r0, r0, r1, lsl #27
  1385dc:	e1500d01 	cmp	r0, r1, lsl #26
  1385e0:	e0a22002 	adc	r2, r2, r2
  1385e4:	20400d01 	subcs	r0, r0, r1, lsl #26
  1385e8:	e1500c81 	cmp	r0, r1, lsl #25
  1385ec:	e0a22002 	adc	r2, r2, r2
  1385f0:	20400c81 	subcs	r0, r0, r1, lsl #25
  1385f4:	e1500c01 	cmp	r0, r1, lsl #24
  1385f8:	e0a22002 	adc	r2, r2, r2
  1385fc:	20400c01 	subcs	r0, r0, r1, lsl #24
  138600:	e1500b81 	cmp	r0, r1, lsl #23
  138604:	e0a22002 	adc	r2, r2, r2
  138608:	20400b81 	subcs	r0, r0, r1, lsl #23
  13860c:	e1500b01 	cmp	r0, r1, lsl #22
  138610:	e0a22002 	adc	r2, r2, r2
  138614:	20400b01 	subcs	r0, r0, r1, lsl #22
  138618:	e1500a81 	cmp	r0, r1, lsl #21
  13861c:	e0a22002 	adc	r2, r2, r2
  138620:	20400a81 	subcs	r0, r0, r1, lsl #21
  138624:	e1500a01 	cmp	r0, r1, lsl #20
  138628:	e0a22002 	adc	r2, r2, r2
  13862c:	20400a01 	subcs	r0, r0, r1, lsl #20
  138630:	e1500981 	cmp	r0, r1, lsl #19
  138634:	e0a22002 	adc	r2, r2, r2
  138638:	20400981 	subcs	r0, r0, r1, lsl #19
  13863c:	e1500901 	cmp	r0, r1, lsl #18
  138640:	e0a22002 	adc	r2, r2, r2
  138644:	20400901 	subcs	r0, r0, r1, lsl #18
  138648:	e1500881 	cmp	r0, r1, lsl #17
  13864c:	e0a22002 	adc	r2, r2, r2
  138650:	20400881 	subcs	r0, r0, r1, lsl #17
  138654:	e1500801 	cmp	r0, r1, lsl #16
  138658:	e0a22002 	adc	r2, r2, r2
  13865c:	20400801 	subcs	r0, r0, r1, lsl #16
  138660:	e1500781 	cmp	r0, r1, lsl #15
  138664:	e0a22002 	adc	r2, r2, r2
  138668:	20400781 	subcs	r0, r0, r1, lsl #15
  13866c:	e1500701 	cmp	r0, r1, lsl #14
  138670:	e0a22002 	adc	r2, r2, r2
  138674:	20400701 	subcs	r0, r0, r1, lsl #14
  138678:	e1500681 	cmp	r0, r1, lsl #13
  13867c:	e0a22002 	adc	r2, r2, r2
  138680:	20400681 	subcs	r0, r0, r1, lsl #13
  138684:	e1500601 	cmp	r0, r1, lsl #12
  138688:	e0a22002 	adc	r2, r2, r2
  13868c:	20400601 	subcs	r0, r0, r1, lsl #12
  138690:	e1500581 	cmp	r0, r1, lsl #11
  138694:	e0a22002 	adc	r2, r2, r2
  138698:	20400581 	subcs	r0, r0, r1, lsl #11
  13869c:	e1500501 	cmp	r0, r1, lsl #10
  1386a0:	e0a22002 	adc	r2, r2, r2
  1386a4:	20400501 	subcs	r0, r0, r1, lsl #10
  1386a8:	e1500481 	cmp	r0, r1, lsl #9
  1386ac:	e0a22002 	adc	r2, r2, r2
  1386b0:	20400481 	subcs	r0, r0, r1, lsl #9
  1386b4:	e1500401 	cmp	r0, r1, lsl #8
  1386b8:	e0a22002 	adc	r2, r2, r2
  1386bc:	20400401 	subcs	r0, r0, r1, lsl #8
  1386c0:	e1500381 	cmp	r0, r1, lsl #7
  1386c4:	e0a22002 	adc	r2, r2, r2
  1386c8:	20400381 	subcs	r0, r0, r1, lsl #7
  1386cc:	e1500301 	cmp	r0, r1, lsl #6
  1386d0:	e0a22002 	adc	r2, r2, r2
  1386d4:	20400301 	subcs	r0, r0, r1, lsl #6
  1386d8:	e1500281 	cmp	r0, r1, lsl #5
  1386dc:	e0a22002 	adc	r2, r2, r2
  1386e0:	20400281 	subcs	r0, r0, r1, lsl #5
  1386e4:	e1500201 	cmp	r0, r1, lsl #4
  1386e8:	e0a22002 	adc	r2, r2, r2
  1386ec:	20400201 	subcs	r0, r0, r1, lsl #4
  1386f0:	e1500181 	cmp	r0, r1, lsl #3
  1386f4:	e0a22002 	adc	r2, r2, r2
  1386f8:	20400181 	subcs	r0, r0, r1, lsl #3
  1386fc:	e1500101 	cmp	r0, r1, lsl #2
  138700:	e0a22002 	adc	r2, r2, r2
  138704:	20400101 	subcs	r0, r0, r1, lsl #2
  138708:	e1500081 	cmp	r0, r1, lsl #1
  13870c:	e0a22002 	adc	r2, r2, r2
  138710:	20400081 	subcs	r0, r0, r1, lsl #1
  138714:	e1500001 	cmp	r0, r1
  138718:	e0a22002 	adc	r2, r2, r2
  13871c:	20400001 	subcs	r0, r0, r1
  138720:	e1a00002 	mov	r0, r2
  138724:	e12fff1e 	bx	lr
  138728:	03a00001 	moveq	r0, #1
  13872c:	13a00000 	movne	r0, #0
  138730:	e12fff1e 	bx	lr
  138734:	e16f2f11 	clz	r2, r1
  138738:	e262201f 	rsb	r2, r2, #31
  13873c:	e1a00230 	lsr	r0, r0, r2
  138740:	e12fff1e 	bx	lr
  138744:	e3500000 	cmp	r0, #0
  138748:	13e00000 	mvnne	r0, #0
  13874c:	ea000097 	b	1389b0 <__aeabi_idiv0>

00138750 <__aeabi_uidivmod>:
  138750:	e3510000 	cmp	r1, #0
  138754:	0afffffa 	beq	138744 <__udivsi3+0x1e0>
  138758:	e92d4003 	push	{r0, r1, lr}
  13875c:	ebffff80 	bl	138564 <__udivsi3>
  138760:	e8bd4006 	pop	{r1, r2, lr}
  138764:	e0030092 	mul	r3, r2, r0
  138768:	e0411003 	sub	r1, r1, r3
  13876c:	e12fff1e 	bx	lr

00138770 <__divsi3>:
  138770:	e3510000 	cmp	r1, #0
  138774:	0a000081 	beq	138980 <.divsi3_skip_div0_test+0x208>

00138778 <.divsi3_skip_div0_test>:
  138778:	e020c001 	eor	ip, r0, r1
  13877c:	42611000 	rsbmi	r1, r1, #0
  138780:	e2512001 	subs	r2, r1, #1
  138784:	0a000070 	beq	13894c <.divsi3_skip_div0_test+0x1d4>
  138788:	e1b03000 	movs	r3, r0
  13878c:	42603000 	rsbmi	r3, r0, #0
  138790:	e1530001 	cmp	r3, r1
  138794:	9a00006f 	bls	138958 <.divsi3_skip_div0_test+0x1e0>
  138798:	e1110002 	tst	r1, r2
  13879c:	0a000071 	beq	138968 <.divsi3_skip_div0_test+0x1f0>
  1387a0:	e16f2f13 	clz	r2, r3
  1387a4:	e16f0f11 	clz	r0, r1
  1387a8:	e0402002 	sub	r2, r0, r2
  1387ac:	e272201f 	rsbs	r2, r2, #31
  1387b0:	10822082 	addne	r2, r2, r2, lsl #1
  1387b4:	e3a00000 	mov	r0, #0
  1387b8:	108ff102 	addne	pc, pc, r2, lsl #2
  1387bc:	e1a00000 	nop			; (mov r0, r0)
  1387c0:	e1530f81 	cmp	r3, r1, lsl #31
  1387c4:	e0a00000 	adc	r0, r0, r0
  1387c8:	20433f81 	subcs	r3, r3, r1, lsl #31
  1387cc:	e1530f01 	cmp	r3, r1, lsl #30
  1387d0:	e0a00000 	adc	r0, r0, r0
  1387d4:	20433f01 	subcs	r3, r3, r1, lsl #30
  1387d8:	e1530e81 	cmp	r3, r1, lsl #29
  1387dc:	e0a00000 	adc	r0, r0, r0
  1387e0:	20433e81 	subcs	r3, r3, r1, lsl #29
  1387e4:	e1530e01 	cmp	r3, r1, lsl #28
  1387e8:	e0a00000 	adc	r0, r0, r0
  1387ec:	20433e01 	subcs	r3, r3, r1, lsl #28
  1387f0:	e1530d81 	cmp	r3, r1, lsl #27
  1387f4:	e0a00000 	adc	r0, r0, r0
  1387f8:	20433d81 	subcs	r3, r3, r1, lsl #27
  1387fc:	e1530d01 	cmp	r3, r1, lsl #26
  138800:	e0a00000 	adc	r0, r0, r0
  138804:	20433d01 	subcs	r3, r3, r1, lsl #26
  138808:	e1530c81 	cmp	r3, r1, lsl #25
  13880c:	e0a00000 	adc	r0, r0, r0
  138810:	20433c81 	subcs	r3, r3, r1, lsl #25
  138814:	e1530c01 	cmp	r3, r1, lsl #24
  138818:	e0a00000 	adc	r0, r0, r0
  13881c:	20433c01 	subcs	r3, r3, r1, lsl #24
  138820:	e1530b81 	cmp	r3, r1, lsl #23
  138824:	e0a00000 	adc	r0, r0, r0
  138828:	20433b81 	subcs	r3, r3, r1, lsl #23
  13882c:	e1530b01 	cmp	r3, r1, lsl #22
  138830:	e0a00000 	adc	r0, r0, r0
  138834:	20433b01 	subcs	r3, r3, r1, lsl #22
  138838:	e1530a81 	cmp	r3, r1, lsl #21
  13883c:	e0a00000 	adc	r0, r0, r0
  138840:	20433a81 	subcs	r3, r3, r1, lsl #21
  138844:	e1530a01 	cmp	r3, r1, lsl #20
  138848:	e0a00000 	adc	r0, r0, r0
  13884c:	20433a01 	subcs	r3, r3, r1, lsl #20
  138850:	e1530981 	cmp	r3, r1, lsl #19
  138854:	e0a00000 	adc	r0, r0, r0
  138858:	20433981 	subcs	r3, r3, r1, lsl #19
  13885c:	e1530901 	cmp	r3, r1, lsl #18
  138860:	e0a00000 	adc	r0, r0, r0
  138864:	20433901 	subcs	r3, r3, r1, lsl #18
  138868:	e1530881 	cmp	r3, r1, lsl #17
  13886c:	e0a00000 	adc	r0, r0, r0
  138870:	20433881 	subcs	r3, r3, r1, lsl #17
  138874:	e1530801 	cmp	r3, r1, lsl #16
  138878:	e0a00000 	adc	r0, r0, r0
  13887c:	20433801 	subcs	r3, r3, r1, lsl #16
  138880:	e1530781 	cmp	r3, r1, lsl #15
  138884:	e0a00000 	adc	r0, r0, r0
  138888:	20433781 	subcs	r3, r3, r1, lsl #15
  13888c:	e1530701 	cmp	r3, r1, lsl #14
  138890:	e0a00000 	adc	r0, r0, r0
  138894:	20433701 	subcs	r3, r3, r1, lsl #14
  138898:	e1530681 	cmp	r3, r1, lsl #13
  13889c:	e0a00000 	adc	r0, r0, r0
  1388a0:	20433681 	subcs	r3, r3, r1, lsl #13
  1388a4:	e1530601 	cmp	r3, r1, lsl #12
  1388a8:	e0a00000 	adc	r0, r0, r0
  1388ac:	20433601 	subcs	r3, r3, r1, lsl #12
  1388b0:	e1530581 	cmp	r3, r1, lsl #11
  1388b4:	e0a00000 	adc	r0, r0, r0
  1388b8:	20433581 	subcs	r3, r3, r1, lsl #11
  1388bc:	e1530501 	cmp	r3, r1, lsl #10
  1388c0:	e0a00000 	adc	r0, r0, r0
  1388c4:	20433501 	subcs	r3, r3, r1, lsl #10
  1388c8:	e1530481 	cmp	r3, r1, lsl #9
  1388cc:	e0a00000 	adc	r0, r0, r0
  1388d0:	20433481 	subcs	r3, r3, r1, lsl #9
  1388d4:	e1530401 	cmp	r3, r1, lsl #8
  1388d8:	e0a00000 	adc	r0, r0, r0
  1388dc:	20433401 	subcs	r3, r3, r1, lsl #8
  1388e0:	e1530381 	cmp	r3, r1, lsl #7
  1388e4:	e0a00000 	adc	r0, r0, r0
  1388e8:	20433381 	subcs	r3, r3, r1, lsl #7
  1388ec:	e1530301 	cmp	r3, r1, lsl #6
  1388f0:	e0a00000 	adc	r0, r0, r0
  1388f4:	20433301 	subcs	r3, r3, r1, lsl #6
  1388f8:	e1530281 	cmp	r3, r1, lsl #5
  1388fc:	e0a00000 	adc	r0, r0, r0
  138900:	20433281 	subcs	r3, r3, r1, lsl #5
  138904:	e1530201 	cmp	r3, r1, lsl #4
  138908:	e0a00000 	adc	r0, r0, r0
  13890c:	20433201 	subcs	r3, r3, r1, lsl #4
  138910:	e1530181 	cmp	r3, r1, lsl #3
  138914:	e0a00000 	adc	r0, r0, r0
  138918:	20433181 	subcs	r3, r3, r1, lsl #3
  13891c:	e1530101 	cmp	r3, r1, lsl #2
  138920:	e0a00000 	adc	r0, r0, r0
  138924:	20433101 	subcs	r3, r3, r1, lsl #2
  138928:	e1530081 	cmp	r3, r1, lsl #1
  13892c:	e0a00000 	adc	r0, r0, r0
  138930:	20433081 	subcs	r3, r3, r1, lsl #1
  138934:	e1530001 	cmp	r3, r1
  138938:	e0a00000 	adc	r0, r0, r0
  13893c:	20433001 	subcs	r3, r3, r1
  138940:	e35c0000 	cmp	ip, #0
  138944:	42600000 	rsbmi	r0, r0, #0
  138948:	e12fff1e 	bx	lr
  13894c:	e13c0000 	teq	ip, r0
  138950:	42600000 	rsbmi	r0, r0, #0
  138954:	e12fff1e 	bx	lr
  138958:	33a00000 	movcc	r0, #0
  13895c:	01a00fcc 	asreq	r0, ip, #31
  138960:	03800001 	orreq	r0, r0, #1
  138964:	e12fff1e 	bx	lr
  138968:	e16f2f11 	clz	r2, r1
  13896c:	e262201f 	rsb	r2, r2, #31
  138970:	e35c0000 	cmp	ip, #0
  138974:	e1a00233 	lsr	r0, r3, r2
  138978:	42600000 	rsbmi	r0, r0, #0
  13897c:	e12fff1e 	bx	lr
  138980:	e3500000 	cmp	r0, #0
  138984:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138988:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  13898c:	ea000007 	b	1389b0 <__aeabi_idiv0>

00138990 <__aeabi_idivmod>:
  138990:	e3510000 	cmp	r1, #0
  138994:	0afffff9 	beq	138980 <.divsi3_skip_div0_test+0x208>
  138998:	e92d4003 	push	{r0, r1, lr}
  13899c:	ebffff75 	bl	138778 <.divsi3_skip_div0_test>
  1389a0:	e8bd4006 	pop	{r1, r2, lr}
  1389a4:	e0030092 	mul	r3, r2, r0
  1389a8:	e0411003 	sub	r1, r1, r3
  1389ac:	e12fff1e 	bx	lr

001389b0 <__aeabi_idiv0>:
  1389b0:	e92d4002 	push	{r1, lr}
  1389b4:	e3a00008 	mov	r0, #8
  1389b8:	eb001550 	bl	13df00 <raise>
  1389bc:	e8bd8002 	pop	{r1, pc}

001389c0 <dummy>:
  1389c0:	e12fff1e 	bx	lr

001389c4 <dummy1>:
  1389c4:	e12fff1e 	bx	lr

001389c8 <__init_libc>:
  1389c8:	e92d4030 	push	{r4, r5, lr}
  1389cc:	e1a04000 	mov	r4, r0
  1389d0:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  1389d4:	e3a02098 	mov	r2, #152	; 0x98
  1389d8:	e1a05001 	mov	r5, r1
  1389dc:	e1a0000d 	mov	r0, sp
  1389e0:	e3a01000 	mov	r1, #0
  1389e4:	eb00215e 	bl	140f64 <memset>
  1389e8:	e5942000 	ldr	r2, [r4]
  1389ec:	e59f3118 	ldr	r3, [pc, #280]	; 138b0c <__init_libc+0x144>
  1389f0:	e3520000 	cmp	r2, #0
  1389f4:	e5834000 	str	r4, [r3]
  1389f8:	03a02004 	moveq	r2, #4
  1389fc:	0a000009 	beq	138a28 <__init_libc+0x60>
  138a00:	e1a03004 	mov	r3, r4
  138a04:	e3a02000 	mov	r2, #0
  138a08:	ea000000 	b	138a10 <__init_libc+0x48>
  138a0c:	e1a02000 	mov	r2, r0
  138a10:	e5b31004 	ldr	r1, [r3, #4]!
  138a14:	e2820001 	add	r0, r2, #1
  138a18:	e3510000 	cmp	r1, #0
  138a1c:	1afffffa 	bne	138a0c <__init_libc+0x44>
  138a20:	e2822002 	add	r2, r2, #2
  138a24:	e1a02102 	lsl	r2, r2, #2
  138a28:	e7943002 	ldr	r3, [r4, r2]
  138a2c:	e59f00dc 	ldr	r0, [pc, #220]	; 138b10 <__init_libc+0x148>
  138a30:	e0842002 	add	r2, r4, r2
  138a34:	e3530000 	cmp	r3, #0
  138a38:	e5802010 	str	r2, [r0, #16]
  138a3c:	0a00002d 	beq	138af8 <__init_libc+0x130>
  138a40:	e3530025 	cmp	r3, #37	; 0x25
  138a44:	95921004 	ldrls	r1, [r2, #4]
  138a48:	928dc098 	addls	ip, sp, #152	; 0x98
  138a4c:	908c3103 	addls	r3, ip, r3, lsl #2
  138a50:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  138a54:	e5b23008 	ldr	r3, [r2, #8]!
  138a58:	e3530000 	cmp	r3, #0
  138a5c:	1afffff7 	bne	138a40 <__init_libc+0x78>
  138a60:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  138a64:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  138a68:	e59d2018 	ldr	r2, [sp, #24]
  138a6c:	e59f10a0 	ldr	r1, [pc, #160]	; 138b14 <__init_libc+0x14c>
  138a70:	e5802024 	str	r2, [r0, #36]	; 0x24
  138a74:	e59f209c 	ldr	r2, [pc, #156]	; 138b18 <__init_libc+0x150>
  138a78:	e3550000 	cmp	r5, #0
  138a7c:	e5813000 	str	r3, [r1]
  138a80:	e582c000 	str	ip, [r2]
  138a84:	0a000012 	beq	138ad4 <__init_libc+0x10c>
  138a88:	e59f308c 	ldr	r3, [pc, #140]	; 138b1c <__init_libc+0x154>
  138a8c:	e59f208c 	ldr	r2, [pc, #140]	; 138b20 <__init_libc+0x158>
  138a90:	e5835000 	str	r5, [r3]
  138a94:	e5825000 	str	r5, [r2]
  138a98:	e5d53000 	ldrb	r3, [r5]
  138a9c:	e3530000 	cmp	r3, #0
  138aa0:	0a000005 	beq	138abc <__init_libc+0xf4>
  138aa4:	e2851001 	add	r1, r5, #1
  138aa8:	e353002f 	cmp	r3, #47	; 0x2f
  138aac:	05821000 	streq	r1, [r2]
  138ab0:	e4d13001 	ldrb	r3, [r1], #1
  138ab4:	e3530000 	cmp	r3, #0
  138ab8:	1afffffa 	bne	138aa8 <__init_libc+0xe0>
  138abc:	e1a0000d 	mov	r0, sp
  138ac0:	eb002849 	bl	142bec <__init_tls>
  138ac4:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138ac8:	eb0028be 	bl	142dc8 <__init_ssp>
  138acc:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138ad0:	e8bd8030 	pop	{r4, r5, pc}
  138ad4:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138ad8:	e3510000 	cmp	r1, #0
  138adc:	1a000008 	bne	138b04 <__init_libc+0x13c>
  138ae0:	e59f303c 	ldr	r3, [pc, #60]	; 138b24 <__init_libc+0x15c>
  138ae4:	e59f1030 	ldr	r1, [pc, #48]	; 138b1c <__init_libc+0x154>
  138ae8:	e59f2030 	ldr	r2, [pc, #48]	; 138b20 <__init_libc+0x158>
  138aec:	e5813000 	str	r3, [r1]
  138af0:	e5823000 	str	r3, [r2]
  138af4:	eafffff0 	b	138abc <__init_libc+0xf4>
  138af8:	e1a02003 	mov	r2, r3
  138afc:	e1a0c003 	mov	ip, r3
  138b00:	eaffffd9 	b	138a6c <__init_libc+0xa4>
  138b04:	e1a05001 	mov	r5, r1
  138b08:	eaffffde 	b	138a88 <__init_libc+0xc0>
  138b0c:	0014f478 	.word	0x0014f478
  138b10:	0015d05c 	.word	0x0015d05c
  138b14:	0015d058 	.word	0x0015d058
  138b18:	0015d09c 	.word	0x0015d09c
  138b1c:	0014ec0c 	.word	0x0014ec0c
  138b20:	0014ec08 	.word	0x0014ec08
  138b24:	0014c42c 	.word	0x0014c42c

00138b28 <__libc_start_init>:
  138b28:	e92d4070 	push	{r4, r5, r6, lr}
  138b2c:	e59f4020 	ldr	r4, [pc, #32]	; 138b54 <__libc_start_init+0x2c>
  138b30:	e59f5020 	ldr	r5, [pc, #32]	; 138b58 <__libc_start_init+0x30>
  138b34:	eb003148 	bl	14505c <_init>
  138b38:	e1540005 	cmp	r4, r5
  138b3c:	28bd8070 	popcs	{r4, r5, r6, pc}
  138b40:	e4943004 	ldr	r3, [r4], #4
  138b44:	e12fff33 	blx	r3
  138b48:	e1540005 	cmp	r4, r5
  138b4c:	3afffffb 	bcc	138b40 <__libc_start_init+0x18>
  138b50:	e8bd8070 	pop	{r4, r5, r6, pc}
  138b54:	0014d3e8 	.word	0x0014d3e8
  138b58:	0014d3ec 	.word	0x0014d3ec

00138b5c <libc_start_main_stage2>:
  138b5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  138b60:	e1a05001 	mov	r5, r1
  138b64:	e1a06002 	mov	r6, r2
  138b68:	e2814001 	add	r4, r1, #1
  138b6c:	e0824104 	add	r4, r2, r4, lsl #2
  138b70:	e1a07000 	mov	r7, r0
  138b74:	ebffffeb 	bl	138b28 <__libc_start_init>
  138b78:	e1a02004 	mov	r2, r4
  138b7c:	e1a01006 	mov	r1, r6
  138b80:	e1a00005 	mov	r0, r5
  138b84:	e12fff37 	blx	r7
  138b88:	eb000056 	bl	138ce8 <exit>

00138b8c <__libc_start_main>:
  138b8c:	e92d4070 	push	{r4, r5, r6, lr}
  138b90:	e1a05001 	mov	r5, r1
  138b94:	e1a04002 	mov	r4, r2
  138b98:	e1a06000 	mov	r6, r0
  138b9c:	e2810001 	add	r0, r1, #1
  138ba0:	e0820100 	add	r0, r2, r0, lsl #2
  138ba4:	e5921000 	ldr	r1, [r2]
  138ba8:	ebffff86 	bl	1389c8 <__init_libc>
  138bac:	e59f3010 	ldr	r3, [pc, #16]	; 138bc4 <__libc_start_main+0x38>
  138bb0:	e1a02004 	mov	r2, r4
  138bb4:	e1a01005 	mov	r1, r5
  138bb8:	e1a00006 	mov	r0, r6
  138bbc:	e8bd4070 	pop	{r4, r5, r6, lr}
  138bc0:	e12fff13 	bx	r3
  138bc4:	00138b5c 	.word	0x00138b5c

00138bc8 <__errno_location>:
  138bc8:	e59f3010 	ldr	r3, [pc, #16]	; 138be0 <__errno_location+0x18>
  138bcc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138bd0:	e5930000 	ldr	r0, [r3]
  138bd4:	e12fff30 	blx	r0
  138bd8:	e2400058 	sub	r0, r0, #88	; 0x58
  138bdc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  138be0:	0014d3dc 	.word	0x0014d3dc

00138be4 <__strerror_l>:
  138be4:	e3500054 	cmp	r0, #84	; 0x54
  138be8:	0a000013 	beq	138c3c <__strerror_l+0x58>
  138bec:	e3a0c001 	mov	ip, #1
  138bf0:	e3a03021 	mov	r3, #33	; 0x21
  138bf4:	e59f204c 	ldr	r2, [pc, #76]	; 138c48 <__strerror_l+0x64>
  138bf8:	e1530000 	cmp	r3, r0
  138bfc:	0a000003 	beq	138c10 <__strerror_l+0x2c>
  138c00:	e4d23001 	ldrb	r3, [r2], #1
  138c04:	e28cc001 	add	ip, ip, #1
  138c08:	e3530000 	cmp	r3, #0
  138c0c:	1afffff9 	bne	138bf8 <__strerror_l+0x14>
  138c10:	e3a02049 	mov	r2, #73	; 0x49
  138c14:	e59f3030 	ldr	r3, [pc, #48]	; 138c4c <__strerror_l+0x68>
  138c18:	e3520000 	cmp	r2, #0
  138c1c:	15f32001 	ldrbne	r2, [r3, #1]!
  138c20:	1afffffc 	bne	138c18 <__strerror_l+0x34>
  138c24:	e25cc001 	subs	ip, ip, #1
  138c28:	e2830001 	add	r0, r3, #1
  138c2c:	0a000003 	beq	138c40 <__strerror_l+0x5c>
  138c30:	e5d32001 	ldrb	r2, [r3, #1]
  138c34:	e1a03000 	mov	r3, r0
  138c38:	eafffff6 	b	138c18 <__strerror_l+0x34>
  138c3c:	e59f0008 	ldr	r0, [pc, #8]	; 138c4c <__strerror_l+0x68>
  138c40:	e5911014 	ldr	r1, [r1, #20]
  138c44:	ea000d54 	b	13c19c <__lctrans>
  138c48:	0014a1b2 	.word	0x0014a1b2
  138c4c:	0014a20c 	.word	0x0014a20c

00138c50 <strerror>:
  138c50:	e1a03000 	mov	r3, r0
  138c54:	e59f2018 	ldr	r2, [pc, #24]	; 138c74 <strerror+0x24>
  138c58:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138c5c:	e5920000 	ldr	r0, [r2]
  138c60:	e12fff30 	blx	r0
  138c64:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  138c68:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  138c6c:	e1a00003 	mov	r0, r3
  138c70:	eaffffdb 	b	138be4 <__strerror_l>
  138c74:	0014d3dc 	.word	0x0014d3dc

00138c78 <__assert_fail>:
  138c78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138c7c:	e24dd00c 	sub	sp, sp, #12
  138c80:	e58d2004 	str	r2, [sp, #4]
  138c84:	e58d3000 	str	r3, [sp]
  138c88:	e1a02000 	mov	r2, r0
  138c8c:	e1a03001 	mov	r3, r1
  138c90:	e59f0010 	ldr	r0, [pc, #16]	; 138ca8 <__assert_fail+0x30>
  138c94:	e59f1010 	ldr	r1, [pc, #16]	; 138cac <__assert_fail+0x34>
  138c98:	eb001523 	bl	13e12c <fprintf>
  138c9c:	e3a00000 	mov	r0, #0
  138ca0:	eb0014b0 	bl	13df68 <fflush>
  138ca4:	eb00286b 	bl	142e58 <abort>
  138ca8:	0014d2a8 	.word	0x0014d2a8
  138cac:	0014a92c 	.word	0x0014a92c

00138cb0 <__funcs_on_exit>:
  138cb0:	e12fff1e 	bx	lr

00138cb4 <__libc_exit_fini>:
  138cb4:	e92d4070 	push	{r4, r5, r6, lr}
  138cb8:	e59f4020 	ldr	r4, [pc, #32]	; 138ce0 <__libc_exit_fini+0x2c>
  138cbc:	e59f5020 	ldr	r5, [pc, #32]	; 138ce4 <__libc_exit_fini+0x30>
  138cc0:	e1540005 	cmp	r4, r5
  138cc4:	9a000003 	bls	138cd8 <__libc_exit_fini+0x24>
  138cc8:	e5343004 	ldr	r3, [r4, #-4]!
  138ccc:	e12fff33 	blx	r3
  138cd0:	e1540005 	cmp	r4, r5
  138cd4:	8afffffb 	bhi	138cc8 <__libc_exit_fini+0x14>
  138cd8:	e8bd4070 	pop	{r4, r5, r6, lr}
  138cdc:	ea0030e1 	b	145068 <_fini>
  138ce0:	0014d3f0 	.word	0x0014d3f0
  138ce4:	0014d3ec 	.word	0x0014d3ec

00138ce8 <exit>:
  138ce8:	e92d4010 	push	{r4, lr}
  138cec:	e1a04000 	mov	r4, r0
  138cf0:	ebffffee 	bl	138cb0 <__funcs_on_exit>
  138cf4:	ebffffee 	bl	138cb4 <__libc_exit_fini>
  138cf8:	eb002da3 	bl	14438c <__stdio_exit>
  138cfc:	e1a00004 	mov	r0, r4
  138d00:	eb002847 	bl	142e24 <_Exit>

00138d04 <fcntl>:
  138d04:	e92d000e 	push	{r1, r2, r3}
  138d08:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  138d0c:	e24dd020 	sub	sp, sp, #32
  138d10:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  138d14:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  138d18:	e28d3038 	add	r3, sp, #56	; 0x38
  138d1c:	e3540004 	cmp	r4, #4
  138d20:	e1a06000 	mov	r6, r0
  138d24:	e58d3014 	str	r3, [sp, #20]
  138d28:	03855802 	orreq	r5, r5, #131072	; 0x20000
  138d2c:	0a00000f 	beq	138d70 <fcntl+0x6c>
  138d30:	e354000e 	cmp	r4, #14
  138d34:	0a00001a 	beq	138da4 <fcntl+0xa0>
  138d38:	e3540009 	cmp	r4, #9
  138d3c:	0a000026 	beq	138ddc <fcntl+0xd8>
  138d40:	e59f3234 	ldr	r3, [pc, #564]	; 138f7c <fcntl+0x278>
  138d44:	e1540003 	cmp	r4, r3
  138d48:	0a000034 	beq	138e20 <fcntl+0x11c>
  138d4c:	e244300c 	sub	r3, r4, #12
  138d50:	e3530004 	cmp	r3, #4
  138d54:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  138d58:	ea000004 	b	138d70 <fcntl+0x6c>
  138d5c:	00138d70 	.word	0x00138d70
  138d60:	00138d70 	.word	0x00138d70
  138d64:	00138d70 	.word	0x00138d70
  138d68:	00138d70 	.word	0x00138d70
  138d6c:	00138d70 	.word	0x00138d70
  138d70:	e3a000dd 	mov	r0, #221	; 0xdd
  138d74:	eb000cc9 	bl	13c0a0 <get_rtt_syscall>
  138d78:	e2503000 	subs	r3, r0, #0
  138d7c:	0a000046 	beq	138e9c <fcntl+0x198>
  138d80:	e1a02005 	mov	r2, r5
  138d84:	e1a01004 	mov	r1, r4
  138d88:	e1a00006 	mov	r0, r6
  138d8c:	e12fff33 	blx	r3
  138d90:	eb000cf7 	bl	13c174 <__syscall_ret>
  138d94:	e28dd020 	add	sp, sp, #32
  138d98:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138d9c:	e28dd00c 	add	sp, sp, #12
  138da0:	e12fff1e 	bx	lr
  138da4:	e3a00000 	mov	r0, #0
  138da8:	e1a03005 	mov	r3, r5
  138dac:	e1a02004 	mov	r2, r4
  138db0:	e1a01006 	mov	r1, r6
  138db4:	e58d0008 	str	r0, [sp, #8]
  138db8:	e58d0004 	str	r0, [sp, #4]
  138dbc:	e58d0000 	str	r0, [sp]
  138dc0:	e3a000dd 	mov	r0, #221	; 0xdd
  138dc4:	eb00231d 	bl	141a40 <__syscall_cp>
  138dc8:	eb000ce9 	bl	13c174 <__syscall_ret>
  138dcc:	e28dd020 	add	sp, sp, #32
  138dd0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138dd4:	e28dd00c 	add	sp, sp, #12
  138dd8:	e12fff1e 	bx	lr
  138ddc:	e3a000dd 	mov	r0, #221	; 0xdd
  138de0:	eb000cae 	bl	13c0a0 <get_rtt_syscall>
  138de4:	e2503000 	subs	r3, r0, #0
  138de8:	0a000007 	beq	138e0c <fcntl+0x108>
  138dec:	e28d2018 	add	r2, sp, #24
  138df0:	e3a01010 	mov	r1, #16
  138df4:	e1a00006 	mov	r0, r6
  138df8:	e12fff33 	blx	r3
  138dfc:	e3700016 	cmn	r0, #22
  138e00:	0a000027 	beq	138ea4 <fcntl+0x1a0>
  138e04:	e3500000 	cmp	r0, #0
  138e08:	1affffe0 	bne	138d90 <fcntl+0x8c>
  138e0c:	e59d3018 	ldr	r3, [sp, #24]
  138e10:	e59d001c 	ldr	r0, [sp, #28]
  138e14:	e3530002 	cmp	r3, #2
  138e18:	02600000 	rsbeq	r0, r0, #0
  138e1c:	eaffffdc 	b	138d94 <fcntl+0x90>
  138e20:	e3a000dd 	mov	r0, #221	; 0xdd
  138e24:	eb000c9d 	bl	13c0a0 <get_rtt_syscall>
  138e28:	e2503000 	subs	r3, r0, #0
  138e2c:	0a00000f 	beq	138e70 <fcntl+0x16c>
  138e30:	e1a02005 	mov	r2, r5
  138e34:	e1a01004 	mov	r1, r4
  138e38:	e1a00006 	mov	r0, r6
  138e3c:	e12fff33 	blx	r3
  138e40:	e3700016 	cmn	r0, #22
  138e44:	e1a07000 	mov	r7, r0
  138e48:	0a00001e 	beq	138ec8 <fcntl+0x1c4>
  138e4c:	e3500000 	cmp	r0, #0
  138e50:	e1a04000 	mov	r4, r0
  138e54:	aa000007 	bge	138e78 <fcntl+0x174>
  138e58:	e1a00004 	mov	r0, r4
  138e5c:	eb000cc4 	bl	13c174 <__syscall_ret>
  138e60:	e28dd020 	add	sp, sp, #32
  138e64:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138e68:	e28dd00c 	add	sp, sp, #12
  138e6c:	e12fff1e 	bx	lr
  138e70:	e1a04003 	mov	r4, r3
  138e74:	e1a07003 	mov	r7, r3
  138e78:	e3a000dd 	mov	r0, #221	; 0xdd
  138e7c:	eb000c87 	bl	13c0a0 <get_rtt_syscall>
  138e80:	e2503000 	subs	r3, r0, #0
  138e84:	0afffff3 	beq	138e58 <fcntl+0x154>
  138e88:	e1a00007 	mov	r0, r7
  138e8c:	e3a02001 	mov	r2, #1
  138e90:	e3a01002 	mov	r1, #2
  138e94:	e12fff33 	blx	r3
  138e98:	eaffffee 	b	138e58 <fcntl+0x154>
  138e9c:	e1a00003 	mov	r0, r3
  138ea0:	eaffffba 	b	138d90 <fcntl+0x8c>
  138ea4:	e3a000dd 	mov	r0, #221	; 0xdd
  138ea8:	eb000c7c 	bl	13c0a0 <get_rtt_syscall>
  138eac:	e2503000 	subs	r3, r0, #0
  138eb0:	0a00002f 	beq	138f74 <fcntl+0x270>
  138eb4:	e1a02005 	mov	r2, r5
  138eb8:	e1a01004 	mov	r1, r4
  138ebc:	e1a00006 	mov	r0, r6
  138ec0:	e12fff33 	blx	r3
  138ec4:	eaffffb2 	b	138d94 <fcntl+0x90>
  138ec8:	e3a000dd 	mov	r0, #221	; 0xdd
  138ecc:	eb000c73 	bl	13c0a0 <get_rtt_syscall>
  138ed0:	e2503000 	subs	r3, r0, #0
  138ed4:	0a00000b 	beq	138f08 <fcntl+0x204>
  138ed8:	e1a01004 	mov	r1, r4
  138edc:	e3a02000 	mov	r2, #0
  138ee0:	e1a00006 	mov	r0, r6
  138ee4:	e12fff33 	blx	r3
  138ee8:	e3700016 	cmn	r0, #22
  138eec:	e1a04000 	mov	r4, r0
  138ef0:	0a00000c 	beq	138f28 <fcntl+0x224>
  138ef4:	e3500000 	cmp	r0, #0
  138ef8:	aa000003 	bge	138f0c <fcntl+0x208>
  138efc:	e3e00015 	mvn	r0, #21
  138f00:	eb000c9b 	bl	13c174 <__syscall_ret>
  138f04:	eaffffa2 	b	138d94 <fcntl+0x90>
  138f08:	e1a04003 	mov	r4, r3
  138f0c:	e3a00006 	mov	r0, #6
  138f10:	eb000c62 	bl	13c0a0 <get_rtt_syscall>
  138f14:	e2503000 	subs	r3, r0, #0
  138f18:	0afffff7 	beq	138efc <fcntl+0x1f8>
  138f1c:	e1a00004 	mov	r0, r4
  138f20:	e12fff33 	blx	r3
  138f24:	eafffff4 	b	138efc <fcntl+0x1f8>
  138f28:	e3a000dd 	mov	r0, #221	; 0xdd
  138f2c:	eb000c5b 	bl	13c0a0 <get_rtt_syscall>
  138f30:	e2504000 	subs	r4, r0, #0
  138f34:	0a000005 	beq	138f50 <fcntl+0x24c>
  138f38:	e1a02005 	mov	r2, r5
  138f3c:	e1a00006 	mov	r0, r6
  138f40:	e3a01000 	mov	r1, #0
  138f44:	e12fff34 	blx	r4
  138f48:	e2504000 	subs	r4, r0, #0
  138f4c:	baffffc1 	blt	138e58 <fcntl+0x154>
  138f50:	e3a000dd 	mov	r0, #221	; 0xdd
  138f54:	eb000c51 	bl	13c0a0 <get_rtt_syscall>
  138f58:	e2503000 	subs	r3, r0, #0
  138f5c:	0affffbd 	beq	138e58 <fcntl+0x154>
  138f60:	e3a02001 	mov	r2, #1
  138f64:	e3a01002 	mov	r1, #2
  138f68:	e1a00004 	mov	r0, r4
  138f6c:	e12fff33 	blx	r3
  138f70:	eaffffb8 	b	138e58 <fcntl+0x154>
  138f74:	e1a00003 	mov	r0, r3
  138f78:	eaffff85 	b	138d94 <fcntl+0x90>
  138f7c:	00000406 	.word	0x00000406

00138f80 <syscall_set_thread_area>:
  138f80:	e1a01000 	mov	r1, r0
  138f84:	e3a0007b 	mov	r0, #123	; 0x7b
  138f88:	ea000c6f 	b	13c14c <syscall>

00138f8c <syscall_trace>:
  138f8c:	e92d4070 	push	{r4, r5, r6, lr}
  138f90:	e1a04000 	mov	r4, r0
  138f94:	e1a05001 	mov	r5, r1
  138f98:	e3a0201d 	mov	r2, #29
  138f9c:	e59f1018 	ldr	r1, [pc, #24]	; 138fbc <syscall_trace+0x30>
  138fa0:	e3a000ff 	mov	r0, #255	; 0xff
  138fa4:	eb000c68 	bl	13c14c <syscall>
  138fa8:	e1a02005 	mov	r2, r5
  138fac:	e1a01004 	mov	r1, r4
  138fb0:	e8bd4070 	pop	{r4, r5, r6, lr}
  138fb4:	e3a000ff 	mov	r0, #255	; 0xff
  138fb8:	ea000c63 	b	13c14c <syscall>
  138fbc:	0014ca70 	.word	0x0014ca70

00138fc0 <syscall_io_pgetevents>:
  138fc0:	e92d4010 	push	{r4, lr}
  138fc4:	e3a01016 	mov	r1, #22
  138fc8:	e59f0008 	ldr	r0, [pc, #8]	; 138fd8 <syscall_io_pgetevents+0x18>
  138fcc:	ebffffee 	bl	138f8c <syscall_trace>
  138fd0:	e3a00000 	mov	r0, #0
  138fd4:	e8bd8010 	pop	{r4, pc}
  138fd8:	0014c3f8 	.word	0x0014c3f8

00138fdc <syscall_rseq>:
  138fdc:	e92d4010 	push	{r4, lr}
  138fe0:	e3a0100d 	mov	r1, #13
  138fe4:	e59f0008 	ldr	r0, [pc, #8]	; 138ff4 <syscall_rseq+0x18>
  138fe8:	ebffffe7 	bl	138f8c <syscall_trace>
  138fec:	e3a00000 	mov	r0, #0
  138ff0:	e8bd8010 	pop	{r4, pc}
  138ff4:	0014c3e8 	.word	0x0014c3e8

00138ff8 <syscall_statx>:
  138ff8:	e92d4010 	push	{r4, lr}
  138ffc:	e3a0100e 	mov	r1, #14
  139000:	e59f0008 	ldr	r0, [pc, #8]	; 139010 <syscall_statx+0x18>
  139004:	ebffffe0 	bl	138f8c <syscall_trace>
  139008:	e3a00000 	mov	r0, #0
  13900c:	e8bd8010 	pop	{r4, pc}
  139010:	0014c3d8 	.word	0x0014c3d8

00139014 <syscall_pkey_free>:
  139014:	e92d4010 	push	{r4, lr}
  139018:	e3a01012 	mov	r1, #18
  13901c:	e59f0008 	ldr	r0, [pc, #8]	; 13902c <syscall_pkey_free+0x18>
  139020:	ebffffd9 	bl	138f8c <syscall_trace>
  139024:	e3a00000 	mov	r0, #0
  139028:	e8bd8010 	pop	{r4, pc}
  13902c:	0014c3c4 	.word	0x0014c3c4

00139030 <syscall_pkey_alloc>:
  139030:	e92d4010 	push	{r4, lr}
  139034:	e3a01013 	mov	r1, #19
  139038:	e59f0008 	ldr	r0, [pc, #8]	; 139048 <syscall_pkey_alloc+0x18>
  13903c:	ebffffd2 	bl	138f8c <syscall_trace>
  139040:	e3a00000 	mov	r0, #0
  139044:	e8bd8010 	pop	{r4, pc}
  139048:	0014c3b0 	.word	0x0014c3b0

0013904c <syscall_pkey_mprotect>:
  13904c:	e92d4010 	push	{r4, lr}
  139050:	e3a01016 	mov	r1, #22
  139054:	e59f0008 	ldr	r0, [pc, #8]	; 139064 <syscall_pkey_mprotect+0x18>
  139058:	ebffffcb 	bl	138f8c <syscall_trace>
  13905c:	e3a00000 	mov	r0, #0
  139060:	e8bd8010 	pop	{r4, pc}
  139064:	0014c398 	.word	0x0014c398

00139068 <syscall_pwritev2>:
  139068:	e92d4010 	push	{r4, lr}
  13906c:	e3a01011 	mov	r1, #17
  139070:	e59f0008 	ldr	r0, [pc, #8]	; 139080 <syscall_pwritev2+0x18>
  139074:	ebffffc4 	bl	138f8c <syscall_trace>
  139078:	e3a00000 	mov	r0, #0
  13907c:	e8bd8010 	pop	{r4, pc}
  139080:	0014c384 	.word	0x0014c384

00139084 <syscall_preadv2>:
  139084:	e92d4010 	push	{r4, lr}
  139088:	e3a01010 	mov	r1, #16
  13908c:	e59f0008 	ldr	r0, [pc, #8]	; 13909c <syscall_preadv2+0x18>
  139090:	ebffffbd 	bl	138f8c <syscall_trace>
  139094:	e3a00000 	mov	r0, #0
  139098:	e8bd8010 	pop	{r4, pc}
  13909c:	0014c374 	.word	0x0014c374

001390a0 <syscall_copy_file_range>:
  1390a0:	e92d4010 	push	{r4, lr}
  1390a4:	e3a01018 	mov	r1, #24
  1390a8:	e59f0008 	ldr	r0, [pc, #8]	; 1390b8 <syscall_copy_file_range+0x18>
  1390ac:	ebffffb6 	bl	138f8c <syscall_trace>
  1390b0:	e3a00000 	mov	r0, #0
  1390b4:	e8bd8010 	pop	{r4, pc}
  1390b8:	0014c35c 	.word	0x0014c35c

001390bc <syscall_mlock2>:
  1390bc:	e92d4010 	push	{r4, lr}
  1390c0:	e3a0100f 	mov	r1, #15
  1390c4:	e59f0008 	ldr	r0, [pc, #8]	; 1390d4 <syscall_mlock2+0x18>
  1390c8:	ebffffaf 	bl	138f8c <syscall_trace>
  1390cc:	e3a00000 	mov	r0, #0
  1390d0:	e8bd8010 	pop	{r4, pc}
  1390d4:	0014c34c 	.word	0x0014c34c

001390d8 <syscall_membarrier>:
  1390d8:	e92d4010 	push	{r4, lr}
  1390dc:	e3a01013 	mov	r1, #19
  1390e0:	e59f0008 	ldr	r0, [pc, #8]	; 1390f0 <syscall_membarrier+0x18>
  1390e4:	ebffffa8 	bl	138f8c <syscall_trace>
  1390e8:	e3a00000 	mov	r0, #0
  1390ec:	e8bd8010 	pop	{r4, pc}
  1390f0:	0014c338 	.word	0x0014c338

001390f4 <syscall_userfaultfd>:
  1390f4:	e92d4010 	push	{r4, lr}
  1390f8:	e3a01014 	mov	r1, #20
  1390fc:	e59f0008 	ldr	r0, [pc, #8]	; 13910c <syscall_userfaultfd+0x18>
  139100:	ebffffa1 	bl	138f8c <syscall_trace>
  139104:	e3a00000 	mov	r0, #0
  139108:	e8bd8010 	pop	{r4, pc}
  13910c:	0014c324 	.word	0x0014c324

00139110 <syscall_execveat>:
  139110:	e92d4010 	push	{r4, lr}
  139114:	e3a01011 	mov	r1, #17
  139118:	e59f0008 	ldr	r0, [pc, #8]	; 139128 <syscall_execveat+0x18>
  13911c:	ebffff9a 	bl	138f8c <syscall_trace>
  139120:	e3a00000 	mov	r0, #0
  139124:	e8bd8010 	pop	{r4, pc}
  139128:	0014c310 	.word	0x0014c310

0013912c <syscall_bpf>:
  13912c:	e92d4010 	push	{r4, lr}
  139130:	e3a0100c 	mov	r1, #12
  139134:	e59f0008 	ldr	r0, [pc, #8]	; 139144 <syscall_bpf+0x18>
  139138:	ebffff93 	bl	138f8c <syscall_trace>
  13913c:	e3a00000 	mov	r0, #0
  139140:	e8bd8010 	pop	{r4, pc}
  139144:	0014c304 	.word	0x0014c304

00139148 <syscall_memfd_create>:
  139148:	e92d4010 	push	{r4, lr}
  13914c:	e3a01015 	mov	r1, #21
  139150:	e59f0008 	ldr	r0, [pc, #8]	; 139160 <syscall_memfd_create+0x18>
  139154:	ebffff8c 	bl	138f8c <syscall_trace>
  139158:	e3a00000 	mov	r0, #0
  13915c:	e8bd8010 	pop	{r4, pc}
  139160:	0014c2ec 	.word	0x0014c2ec

00139164 <syscall_seccomp>:
  139164:	e92d4010 	push	{r4, lr}
  139168:	e3a01010 	mov	r1, #16
  13916c:	e59f0008 	ldr	r0, [pc, #8]	; 13917c <syscall_seccomp+0x18>
  139170:	ebffff85 	bl	138f8c <syscall_trace>
  139174:	e3a00000 	mov	r0, #0
  139178:	e8bd8010 	pop	{r4, pc}
  13917c:	0014c2c8 	.word	0x0014c2c8

00139180 <syscall_renameat2>:
  139180:	e92d4010 	push	{r4, lr}
  139184:	e3a01012 	mov	r1, #18
  139188:	e59f0008 	ldr	r0, [pc, #8]	; 139198 <syscall_renameat2+0x18>
  13918c:	ebffff7e 	bl	138f8c <syscall_trace>
  139190:	e3a00000 	mov	r0, #0
  139194:	e8bd8010 	pop	{r4, pc}
  139198:	0014c2b4 	.word	0x0014c2b4

0013919c <syscall_sched_getattr>:
  13919c:	e92d4010 	push	{r4, lr}
  1391a0:	e3a01016 	mov	r1, #22
  1391a4:	e59f0008 	ldr	r0, [pc, #8]	; 1391b4 <syscall_sched_getattr+0x18>
  1391a8:	ebffff77 	bl	138f8c <syscall_trace>
  1391ac:	e3a00000 	mov	r0, #0
  1391b0:	e8bd8010 	pop	{r4, pc}
  1391b4:	0014c29c 	.word	0x0014c29c

001391b8 <syscall_sched_setattr>:
  1391b8:	e92d4010 	push	{r4, lr}
  1391bc:	e3a01016 	mov	r1, #22
  1391c0:	e59f0008 	ldr	r0, [pc, #8]	; 1391d0 <syscall_sched_setattr+0x18>
  1391c4:	ebffff70 	bl	138f8c <syscall_trace>
  1391c8:	e3a00000 	mov	r0, #0
  1391cc:	e8bd8010 	pop	{r4, pc}
  1391d0:	0014c284 	.word	0x0014c284

001391d4 <syscall_finit_module>:
  1391d4:	e92d4010 	push	{r4, lr}
  1391d8:	e3a01015 	mov	r1, #21
  1391dc:	e59f0008 	ldr	r0, [pc, #8]	; 1391ec <syscall_finit_module+0x18>
  1391e0:	ebffff69 	bl	138f8c <syscall_trace>
  1391e4:	e3a00000 	mov	r0, #0
  1391e8:	e8bd8010 	pop	{r4, pc}
  1391ec:	0014c26c 	.word	0x0014c26c

001391f0 <syscall_kcmp>:
  1391f0:	e92d4010 	push	{r4, lr}
  1391f4:	e3a0100d 	mov	r1, #13
  1391f8:	e59f0008 	ldr	r0, [pc, #8]	; 139208 <syscall_kcmp+0x18>
  1391fc:	ebffff62 	bl	138f8c <syscall_trace>
  139200:	e3a00000 	mov	r0, #0
  139204:	e8bd8010 	pop	{r4, pc}
  139208:	0014c25c 	.word	0x0014c25c

0013920c <syscall_process_vm_writev>:
  13920c:	e92d4010 	push	{r4, lr}
  139210:	e3a0101a 	mov	r1, #26
  139214:	e59f0008 	ldr	r0, [pc, #8]	; 139224 <syscall_process_vm_writev+0x18>
  139218:	ebffff5b 	bl	138f8c <syscall_trace>
  13921c:	e3a00000 	mov	r0, #0
  139220:	e8bd8010 	pop	{r4, pc}
  139224:	0014c240 	.word	0x0014c240

00139228 <syscall_process_vm_readv>:
  139228:	e92d4010 	push	{r4, lr}
  13922c:	e3a01019 	mov	r1, #25
  139230:	e59f0008 	ldr	r0, [pc, #8]	; 139240 <syscall_process_vm_readv+0x18>
  139234:	ebffff54 	bl	138f8c <syscall_trace>
  139238:	e3a00000 	mov	r0, #0
  13923c:	e8bd8010 	pop	{r4, pc}
  139240:	0014c224 	.word	0x0014c224

00139244 <syscall_setns>:
  139244:	e92d4010 	push	{r4, lr}
  139248:	e3a0100e 	mov	r1, #14
  13924c:	e59f0008 	ldr	r0, [pc, #8]	; 13925c <syscall_setns+0x18>
  139250:	ebffff4d 	bl	138f8c <syscall_trace>
  139254:	e3a00000 	mov	r0, #0
  139258:	e8bd8010 	pop	{r4, pc}
  13925c:	0014c214 	.word	0x0014c214

00139260 <syscall_sendmmsg>:
  139260:	e92d4010 	push	{r4, lr}
  139264:	e3a01011 	mov	r1, #17
  139268:	e59f0008 	ldr	r0, [pc, #8]	; 139278 <syscall_sendmmsg+0x18>
  13926c:	ebffff46 	bl	138f8c <syscall_trace>
  139270:	e3a00000 	mov	r0, #0
  139274:	e8bd8010 	pop	{r4, pc}
  139278:	0014c200 	.word	0x0014c200

0013927c <syscall_syncfs>:
  13927c:	e92d4010 	push	{r4, lr}
  139280:	e3a0100f 	mov	r1, #15
  139284:	e59f0008 	ldr	r0, [pc, #8]	; 139294 <syscall_syncfs+0x18>
  139288:	ebffff3f 	bl	138f8c <syscall_trace>
  13928c:	e3a00000 	mov	r0, #0
  139290:	e8bd8010 	pop	{r4, pc}
  139294:	0014c1f0 	.word	0x0014c1f0

00139298 <syscall_clock_adjtime>:
  139298:	e92d4010 	push	{r4, lr}
  13929c:	e3a01016 	mov	r1, #22
  1392a0:	e59f0008 	ldr	r0, [pc, #8]	; 1392b0 <syscall_clock_adjtime+0x18>
  1392a4:	ebffff38 	bl	138f8c <syscall_trace>
  1392a8:	e3a00000 	mov	r0, #0
  1392ac:	e8bd8010 	pop	{r4, pc}
  1392b0:	0014c1d8 	.word	0x0014c1d8

001392b4 <syscall_open_by_handle_at>:
  1392b4:	e92d4010 	push	{r4, lr}
  1392b8:	e3a0101a 	mov	r1, #26
  1392bc:	e59f0008 	ldr	r0, [pc, #8]	; 1392cc <syscall_open_by_handle_at+0x18>
  1392c0:	ebffff31 	bl	138f8c <syscall_trace>
  1392c4:	e3a00000 	mov	r0, #0
  1392c8:	e8bd8010 	pop	{r4, pc}
  1392cc:	0014c1bc 	.word	0x0014c1bc

001392d0 <syscall_name_to_handle_at>:
  1392d0:	e92d4010 	push	{r4, lr}
  1392d4:	e3a0101a 	mov	r1, #26
  1392d8:	e59f0008 	ldr	r0, [pc, #8]	; 1392e8 <syscall_name_to_handle_at+0x18>
  1392dc:	ebffff2a 	bl	138f8c <syscall_trace>
  1392e0:	e3a00000 	mov	r0, #0
  1392e4:	e8bd8010 	pop	{r4, pc}
  1392e8:	0014c1a0 	.word	0x0014c1a0

001392ec <syscall_fanotify_mark>:
  1392ec:	e92d4010 	push	{r4, lr}
  1392f0:	e3a01016 	mov	r1, #22
  1392f4:	e59f0008 	ldr	r0, [pc, #8]	; 139304 <syscall_fanotify_mark+0x18>
  1392f8:	ebffff23 	bl	138f8c <syscall_trace>
  1392fc:	e3a00000 	mov	r0, #0
  139300:	e8bd8010 	pop	{r4, pc}
  139304:	0014c174 	.word	0x0014c174

00139308 <syscall_fanotify_init>:
  139308:	e92d4010 	push	{r4, lr}
  13930c:	e3a01016 	mov	r1, #22
  139310:	e59f0008 	ldr	r0, [pc, #8]	; 139320 <syscall_fanotify_init+0x18>
  139314:	ebffff1c 	bl	138f8c <syscall_trace>
  139318:	e3a00000 	mov	r0, #0
  13931c:	e8bd8010 	pop	{r4, pc}
  139320:	0014c15c 	.word	0x0014c15c

00139324 <syscall_accept4>:
  139324:	e92d4010 	push	{r4, lr}
  139328:	e3a01010 	mov	r1, #16
  13932c:	e59f0008 	ldr	r0, [pc, #8]	; 13933c <syscall_accept4+0x18>
  139330:	ebffff15 	bl	138f8c <syscall_trace>
  139334:	e3a00000 	mov	r0, #0
  139338:	e8bd8010 	pop	{r4, pc}
  13933c:	0014c14c 	.word	0x0014c14c

00139340 <syscall_recvmmsg>:
  139340:	e92d4010 	push	{r4, lr}
  139344:	e3a01011 	mov	r1, #17
  139348:	e59f0008 	ldr	r0, [pc, #8]	; 139358 <syscall_recvmmsg+0x18>
  13934c:	ebffff0e 	bl	138f8c <syscall_trace>
  139350:	e3a00000 	mov	r0, #0
  139354:	e8bd8010 	pop	{r4, pc}
  139358:	0014c138 	.word	0x0014c138

0013935c <syscall_perf_event_open>:
  13935c:	e92d4010 	push	{r4, lr}
  139360:	e3a01018 	mov	r1, #24
  139364:	e59f0008 	ldr	r0, [pc, #8]	; 139374 <syscall_perf_event_open+0x18>
  139368:	ebffff07 	bl	138f8c <syscall_trace>
  13936c:	e3a00000 	mov	r0, #0
  139370:	e8bd8010 	pop	{r4, pc}
  139374:	0014c120 	.word	0x0014c120

00139378 <syscall_rt_tgsigqueueinfo>:
  139378:	e92d4010 	push	{r4, lr}
  13937c:	e3a0101a 	mov	r1, #26
  139380:	e59f0008 	ldr	r0, [pc, #8]	; 139390 <syscall_rt_tgsigqueueinfo+0x18>
  139384:	ebffff00 	bl	138f8c <syscall_trace>
  139388:	e3a00000 	mov	r0, #0
  13938c:	e8bd8010 	pop	{r4, pc}
  139390:	0014c104 	.word	0x0014c104

00139394 <syscall_pwritev>:
  139394:	e92d4010 	push	{r4, lr}
  139398:	e3a01010 	mov	r1, #16
  13939c:	e59f0008 	ldr	r0, [pc, #8]	; 1393ac <syscall_pwritev+0x18>
  1393a0:	ebfffef9 	bl	138f8c <syscall_trace>
  1393a4:	e3a00000 	mov	r0, #0
  1393a8:	e8bd8010 	pop	{r4, pc}
  1393ac:	0014c0f4 	.word	0x0014c0f4

001393b0 <syscall_preadv>:
  1393b0:	e92d4010 	push	{r4, lr}
  1393b4:	e3a0100f 	mov	r1, #15
  1393b8:	e59f0008 	ldr	r0, [pc, #8]	; 1393c8 <syscall_preadv+0x18>
  1393bc:	ebfffef2 	bl	138f8c <syscall_trace>
  1393c0:	e3a00000 	mov	r0, #0
  1393c4:	e8bd8010 	pop	{r4, pc}
  1393c8:	0014c0e4 	.word	0x0014c0e4

001393cc <syscall_inotify_init1>:
  1393cc:	e92d4010 	push	{r4, lr}
  1393d0:	e3a01016 	mov	r1, #22
  1393d4:	e59f0008 	ldr	r0, [pc, #8]	; 1393e4 <syscall_inotify_init1+0x18>
  1393d8:	ebfffeeb 	bl	138f8c <syscall_trace>
  1393dc:	e3a00000 	mov	r0, #0
  1393e0:	e8bd8010 	pop	{r4, pc}
  1393e4:	0014c0cc 	.word	0x0014c0cc

001393e8 <syscall_pipe2>:
  1393e8:	e92d4010 	push	{r4, lr}
  1393ec:	e3a0100e 	mov	r1, #14
  1393f0:	e59f0008 	ldr	r0, [pc, #8]	; 139400 <syscall_pipe2+0x18>
  1393f4:	ebfffee4 	bl	138f8c <syscall_trace>
  1393f8:	e3a00000 	mov	r0, #0
  1393fc:	e8bd8010 	pop	{r4, pc}
  139400:	0014c0bc 	.word	0x0014c0bc

00139404 <syscall_dup3>:
  139404:	e92d4010 	push	{r4, lr}
  139408:	e3a0100d 	mov	r1, #13
  13940c:	e59f0008 	ldr	r0, [pc, #8]	; 13941c <syscall_dup3+0x18>
  139410:	ebfffedd 	bl	138f8c <syscall_trace>
  139414:	e3a00000 	mov	r0, #0
  139418:	e8bd8010 	pop	{r4, pc}
  13941c:	0014c0ac 	.word	0x0014c0ac

00139420 <syscall_epoll_create1>:
  139420:	e92d4010 	push	{r4, lr}
  139424:	e3a01016 	mov	r1, #22
  139428:	e59f0008 	ldr	r0, [pc, #8]	; 139438 <syscall_epoll_create1+0x18>
  13942c:	ebfffed6 	bl	138f8c <syscall_trace>
  139430:	e3e00025 	mvn	r0, #37	; 0x25
  139434:	e8bd8010 	pop	{r4, pc}
  139438:	0014c094 	.word	0x0014c094

0013943c <syscall_eventfd2>:
  13943c:	e92d4010 	push	{r4, lr}
  139440:	e3a01011 	mov	r1, #17
  139444:	e59f0008 	ldr	r0, [pc, #8]	; 139454 <syscall_eventfd2+0x18>
  139448:	ebfffecf 	bl	138f8c <syscall_trace>
  13944c:	e3a00000 	mov	r0, #0
  139450:	e8bd8010 	pop	{r4, pc}
  139454:	0014c080 	.word	0x0014c080

00139458 <syscall_signalfd4>:
  139458:	e92d4010 	push	{r4, lr}
  13945c:	e3a01012 	mov	r1, #18
  139460:	e59f0008 	ldr	r0, [pc, #8]	; 139470 <syscall_signalfd4+0x18>
  139464:	ebfffec8 	bl	138f8c <syscall_trace>
  139468:	e3a00000 	mov	r0, #0
  13946c:	e8bd8010 	pop	{r4, pc}
  139470:	0014c06c 	.word	0x0014c06c

00139474 <syscall_timerfd_gettime>:
  139474:	e92d4010 	push	{r4, lr}
  139478:	e3a01018 	mov	r1, #24
  13947c:	e59f0008 	ldr	r0, [pc, #8]	; 13948c <syscall_timerfd_gettime+0x18>
  139480:	ebfffec1 	bl	138f8c <syscall_trace>
  139484:	e3a00000 	mov	r0, #0
  139488:	e8bd8010 	pop	{r4, pc}
  13948c:	0014c054 	.word	0x0014c054

00139490 <syscall_timerfd_settime>:
  139490:	e92d4010 	push	{r4, lr}
  139494:	e3a01018 	mov	r1, #24
  139498:	e59f0008 	ldr	r0, [pc, #8]	; 1394a8 <syscall_timerfd_settime+0x18>
  13949c:	ebfffeba 	bl	138f8c <syscall_trace>
  1394a0:	e3a00000 	mov	r0, #0
  1394a4:	e8bd8010 	pop	{r4, pc}
  1394a8:	0014c03c 	.word	0x0014c03c

001394ac <syscall_fallocate>:
  1394ac:	e92d4010 	push	{r4, lr}
  1394b0:	e3a01012 	mov	r1, #18
  1394b4:	e59f0008 	ldr	r0, [pc, #8]	; 1394c4 <syscall_fallocate+0x18>
  1394b8:	ebfffeb3 	bl	138f8c <syscall_trace>
  1394bc:	e3a00000 	mov	r0, #0
  1394c0:	e8bd8010 	pop	{r4, pc}
  1394c4:	0014c028 	.word	0x0014c028

001394c8 <syscall_eventfd>:
  1394c8:	e92d4010 	push	{r4, lr}
  1394cc:	e3a01010 	mov	r1, #16
  1394d0:	e59f0008 	ldr	r0, [pc, #8]	; 1394e0 <syscall_eventfd+0x18>
  1394d4:	ebfffeac 	bl	138f8c <syscall_trace>
  1394d8:	e3a00000 	mov	r0, #0
  1394dc:	e8bd8010 	pop	{r4, pc}
  1394e0:	0014c018 	.word	0x0014c018

001394e4 <syscall_timerfd_create>:
  1394e4:	e92d4010 	push	{r4, lr}
  1394e8:	e3a01017 	mov	r1, #23
  1394ec:	e59f0008 	ldr	r0, [pc, #8]	; 1394fc <syscall_timerfd_create+0x18>
  1394f0:	ebfffea5 	bl	138f8c <syscall_trace>
  1394f4:	e3a00000 	mov	r0, #0
  1394f8:	e8bd8010 	pop	{r4, pc}
  1394fc:	0014c000 	.word	0x0014c000

00139500 <syscall_signalfd>:
  139500:	e92d4010 	push	{r4, lr}
  139504:	e3a01011 	mov	r1, #17
  139508:	e59f0008 	ldr	r0, [pc, #8]	; 139518 <syscall_signalfd+0x18>
  13950c:	ebfffe9e 	bl	138f8c <syscall_trace>
  139510:	e3a00000 	mov	r0, #0
  139514:	e8bd8010 	pop	{r4, pc}
  139518:	0014bfec 	.word	0x0014bfec

0013951c <syscall_utimensat>:
  13951c:	e92d4010 	push	{r4, lr}
  139520:	e3a01012 	mov	r1, #18
  139524:	e59f0008 	ldr	r0, [pc, #8]	; 139534 <syscall_utimensat+0x18>
  139528:	ebfffe97 	bl	138f8c <syscall_trace>
  13952c:	e3a00000 	mov	r0, #0
  139530:	e8bd8010 	pop	{r4, pc}
  139534:	0014bfd8 	.word	0x0014bfd8

00139538 <syscall_kexec_load>:
  139538:	e92d4010 	push	{r4, lr}
  13953c:	e3a01013 	mov	r1, #19
  139540:	e59f0008 	ldr	r0, [pc, #8]	; 139550 <syscall_kexec_load+0x18>
  139544:	ebfffe90 	bl	138f8c <syscall_trace>
  139548:	e3a00000 	mov	r0, #0
  13954c:	e8bd8010 	pop	{r4, pc}
  139550:	0014bfc4 	.word	0x0014bfc4

00139554 <syscall_epoll_pwait>:
  139554:	e92d4010 	push	{r4, lr}
  139558:	e3a01014 	mov	r1, #20
  13955c:	e59f0008 	ldr	r0, [pc, #8]	; 13956c <syscall_epoll_pwait+0x18>
  139560:	ebfffe89 	bl	138f8c <syscall_trace>
  139564:	e3e00025 	mvn	r0, #37	; 0x25
  139568:	e8bd8010 	pop	{r4, pc}
  13956c:	0014bfb0 	.word	0x0014bfb0

00139570 <syscall_getcpu>:
  139570:	e92d4010 	push	{r4, lr}
  139574:	e3a0100f 	mov	r1, #15
  139578:	e59f0008 	ldr	r0, [pc, #8]	; 139588 <syscall_getcpu+0x18>
  13957c:	ebfffe82 	bl	138f8c <syscall_trace>
  139580:	e3a00000 	mov	r0, #0
  139584:	e8bd8010 	pop	{r4, pc}
  139588:	0014bfa0 	.word	0x0014bfa0

0013958c <syscall_move_pages>:
  13958c:	e92d4010 	push	{r4, lr}
  139590:	e3a01013 	mov	r1, #19
  139594:	e59f0008 	ldr	r0, [pc, #8]	; 1395a4 <syscall_move_pages+0x18>
  139598:	ebfffe7b 	bl	138f8c <syscall_trace>
  13959c:	e3a00000 	mov	r0, #0
  1395a0:	e8bd8010 	pop	{r4, pc}
  1395a4:	0014bf8c 	.word	0x0014bf8c

001395a8 <syscall_vmsplice>:
  1395a8:	e92d4010 	push	{r4, lr}
  1395ac:	e3a01011 	mov	r1, #17
  1395b0:	e59f0008 	ldr	r0, [pc, #8]	; 1395c0 <syscall_vmsplice+0x18>
  1395b4:	ebfffe74 	bl	138f8c <syscall_trace>
  1395b8:	e3a00000 	mov	r0, #0
  1395bc:	e8bd8010 	pop	{r4, pc}
  1395c0:	0014bf78 	.word	0x0014bf78

001395c4 <syscall_tee>:
  1395c4:	e92d4010 	push	{r4, lr}
  1395c8:	e3a0100c 	mov	r1, #12
  1395cc:	e59f0008 	ldr	r0, [pc, #8]	; 1395dc <syscall_tee+0x18>
  1395d0:	ebfffe6d 	bl	138f8c <syscall_trace>
  1395d4:	e3a00000 	mov	r0, #0
  1395d8:	e8bd8010 	pop	{r4, pc}
  1395dc:	0014bf6c 	.word	0x0014bf6c

001395e0 <syscall_arm_sync_file_range>:
  1395e0:	e92d4010 	push	{r4, lr}
  1395e4:	e3a0101c 	mov	r1, #28
  1395e8:	e59f0008 	ldr	r0, [pc, #8]	; 1395f8 <syscall_arm_sync_file_range+0x18>
  1395ec:	ebfffe66 	bl	138f8c <syscall_trace>
  1395f0:	e3a00000 	mov	r0, #0
  1395f4:	e8bd8010 	pop	{r4, pc}
  1395f8:	0014bf50 	.word	0x0014bf50

001395fc <syscall_splice>:
  1395fc:	e92d4010 	push	{r4, lr}
  139600:	e3a0100f 	mov	r1, #15
  139604:	e59f0008 	ldr	r0, [pc, #8]	; 139614 <syscall_splice+0x18>
  139608:	ebfffe5f 	bl	138f8c <syscall_trace>
  13960c:	e3a00000 	mov	r0, #0
  139610:	e8bd8010 	pop	{r4, pc}
  139614:	0014bf40 	.word	0x0014bf40

00139618 <syscall_get_robust_list>:
  139618:	e92d4010 	push	{r4, lr}
  13961c:	e3a01018 	mov	r1, #24
  139620:	e59f0008 	ldr	r0, [pc, #8]	; 139630 <syscall_get_robust_list+0x18>
  139624:	ebfffe58 	bl	138f8c <syscall_trace>
  139628:	e3a00000 	mov	r0, #0
  13962c:	e8bd8010 	pop	{r4, pc}
  139630:	0014bf28 	.word	0x0014bf28

00139634 <syscall_set_robust_list>:
  139634:	e92d4010 	push	{r4, lr}
  139638:	e3a01018 	mov	r1, #24
  13963c:	e59f0008 	ldr	r0, [pc, #8]	; 13964c <syscall_set_robust_list+0x18>
  139640:	ebfffe51 	bl	138f8c <syscall_trace>
  139644:	e3a00000 	mov	r0, #0
  139648:	e8bd8010 	pop	{r4, pc}
  13964c:	0014bf10 	.word	0x0014bf10

00139650 <syscall_unshare>:
  139650:	e92d4010 	push	{r4, lr}
  139654:	e3a01010 	mov	r1, #16
  139658:	e59f0008 	ldr	r0, [pc, #8]	; 139668 <syscall_unshare+0x18>
  13965c:	ebfffe4a 	bl	138f8c <syscall_trace>
  139660:	e3a00000 	mov	r0, #0
  139664:	e8bd8010 	pop	{r4, pc}
  139668:	0014bf00 	.word	0x0014bf00

0013966c <syscall_ppoll>:
  13966c:	e92d4010 	push	{r4, lr}
  139670:	e3a0100e 	mov	r1, #14
  139674:	e59f0008 	ldr	r0, [pc, #8]	; 139684 <syscall_ppoll+0x18>
  139678:	ebfffe43 	bl	138f8c <syscall_trace>
  13967c:	e3a00000 	mov	r0, #0
  139680:	e8bd8010 	pop	{r4, pc}
  139684:	0014bef0 	.word	0x0014bef0

00139688 <syscall_pselect6>:
  139688:	e92d4010 	push	{r4, lr}
  13968c:	e3a01011 	mov	r1, #17
  139690:	e59f0008 	ldr	r0, [pc, #8]	; 1396a0 <syscall_pselect6+0x18>
  139694:	ebfffe3c 	bl	138f8c <syscall_trace>
  139698:	e3a00000 	mov	r0, #0
  13969c:	e8bd8010 	pop	{r4, pc}
  1396a0:	0014bedc 	.word	0x0014bedc

001396a4 <syscall_faccessat>:
  1396a4:	e92d4010 	push	{r4, lr}
  1396a8:	e3a01012 	mov	r1, #18
  1396ac:	e59f0008 	ldr	r0, [pc, #8]	; 1396bc <syscall_faccessat+0x18>
  1396b0:	ebfffe35 	bl	138f8c <syscall_trace>
  1396b4:	e3a00000 	mov	r0, #0
  1396b8:	e8bd8010 	pop	{r4, pc}
  1396bc:	0014bec8 	.word	0x0014bec8

001396c0 <syscall_fchmodat>:
  1396c0:	e92d4010 	push	{r4, lr}
  1396c4:	e3a01011 	mov	r1, #17
  1396c8:	e59f0008 	ldr	r0, [pc, #8]	; 1396d8 <syscall_fchmodat+0x18>
  1396cc:	ebfffe2e 	bl	138f8c <syscall_trace>
  1396d0:	e3a00000 	mov	r0, #0
  1396d4:	e8bd8010 	pop	{r4, pc}
  1396d8:	0014beb4 	.word	0x0014beb4

001396dc <syscall_readlinkat>:
  1396dc:	e92d4010 	push	{r4, lr}
  1396e0:	e3a01013 	mov	r1, #19
  1396e4:	e59f0008 	ldr	r0, [pc, #8]	; 1396f4 <syscall_readlinkat+0x18>
  1396e8:	ebfffe27 	bl	138f8c <syscall_trace>
  1396ec:	e3a00000 	mov	r0, #0
  1396f0:	e8bd8010 	pop	{r4, pc}
  1396f4:	0014bea0 	.word	0x0014bea0

001396f8 <syscall_symlinkat>:
  1396f8:	e92d4010 	push	{r4, lr}
  1396fc:	e3a01012 	mov	r1, #18
  139700:	e59f0008 	ldr	r0, [pc, #8]	; 139710 <syscall_symlinkat+0x18>
  139704:	ebfffe20 	bl	138f8c <syscall_trace>
  139708:	e3a00000 	mov	r0, #0
  13970c:	e8bd8010 	pop	{r4, pc}
  139710:	0014be8c 	.word	0x0014be8c

00139714 <syscall_linkat>:
  139714:	e92d4010 	push	{r4, lr}
  139718:	e3a0100f 	mov	r1, #15
  13971c:	e59f0008 	ldr	r0, [pc, #8]	; 13972c <syscall_linkat+0x18>
  139720:	ebfffe19 	bl	138f8c <syscall_trace>
  139724:	e3a00000 	mov	r0, #0
  139728:	e8bd8010 	pop	{r4, pc}
  13972c:	0014be7c 	.word	0x0014be7c

00139730 <syscall_renameat>:
  139730:	e92d4010 	push	{r4, lr}
  139734:	e3a01011 	mov	r1, #17
  139738:	e59f0008 	ldr	r0, [pc, #8]	; 139748 <syscall_renameat+0x18>
  13973c:	ebfffe12 	bl	138f8c <syscall_trace>
  139740:	e3a00000 	mov	r0, #0
  139744:	e8bd8010 	pop	{r4, pc}
  139748:	0014be68 	.word	0x0014be68

0013974c <syscall_unlinkat>:
  13974c:	e92d4010 	push	{r4, lr}
  139750:	e3a01011 	mov	r1, #17
  139754:	e59f0008 	ldr	r0, [pc, #8]	; 139764 <syscall_unlinkat+0x18>
  139758:	ebfffe0b 	bl	138f8c <syscall_trace>
  13975c:	e3a00000 	mov	r0, #0
  139760:	e8bd8010 	pop	{r4, pc}
  139764:	0014be54 	.word	0x0014be54

00139768 <syscall_fstatat64>:
  139768:	e92d4010 	push	{r4, lr}
  13976c:	e3a01012 	mov	r1, #18
  139770:	e59f0008 	ldr	r0, [pc, #8]	; 139780 <syscall_fstatat64+0x18>
  139774:	ebfffe04 	bl	138f8c <syscall_trace>
  139778:	e3a00000 	mov	r0, #0
  13977c:	e8bd8010 	pop	{r4, pc}
  139780:	0014be40 	.word	0x0014be40

00139784 <syscall_futimesat>:
  139784:	e92d4010 	push	{r4, lr}
  139788:	e3a01012 	mov	r1, #18
  13978c:	e59f0008 	ldr	r0, [pc, #8]	; 13979c <syscall_futimesat+0x18>
  139790:	ebfffdfd 	bl	138f8c <syscall_trace>
  139794:	e3a00000 	mov	r0, #0
  139798:	e8bd8010 	pop	{r4, pc}
  13979c:	0014be2c 	.word	0x0014be2c

001397a0 <syscall_fchownat>:
  1397a0:	e92d4010 	push	{r4, lr}
  1397a4:	e3a01011 	mov	r1, #17
  1397a8:	e59f0008 	ldr	r0, [pc, #8]	; 1397b8 <syscall_fchownat+0x18>
  1397ac:	ebfffdf6 	bl	138f8c <syscall_trace>
  1397b0:	e3a00000 	mov	r0, #0
  1397b4:	e8bd8010 	pop	{r4, pc}
  1397b8:	0014be18 	.word	0x0014be18

001397bc <syscall_mknodat>:
  1397bc:	e92d4010 	push	{r4, lr}
  1397c0:	e3a01010 	mov	r1, #16
  1397c4:	e59f0008 	ldr	r0, [pc, #8]	; 1397d4 <syscall_mknodat+0x18>
  1397c8:	ebfffdef 	bl	138f8c <syscall_trace>
  1397cc:	e3a00000 	mov	r0, #0
  1397d0:	e8bd8010 	pop	{r4, pc}
  1397d4:	0014be08 	.word	0x0014be08

001397d8 <syscall_mkdirat>:
  1397d8:	e92d4010 	push	{r4, lr}
  1397dc:	e3a01010 	mov	r1, #16
  1397e0:	e59f0008 	ldr	r0, [pc, #8]	; 1397f0 <syscall_mkdirat+0x18>
  1397e4:	ebfffde8 	bl	138f8c <syscall_trace>
  1397e8:	e3a00000 	mov	r0, #0
  1397ec:	e8bd8010 	pop	{r4, pc}
  1397f0:	0014bdf8 	.word	0x0014bdf8

001397f4 <syscall_openat>:
  1397f4:	e92d4010 	push	{r4, lr}
  1397f8:	e3a0100f 	mov	r1, #15
  1397fc:	e59f0008 	ldr	r0, [pc, #8]	; 13980c <syscall_openat+0x18>
  139800:	ebfffde1 	bl	138f8c <syscall_trace>
  139804:	e3a00000 	mov	r0, #0
  139808:	e8bd8010 	pop	{r4, pc}
  13980c:	0014bde8 	.word	0x0014bde8

00139810 <syscall_set_mempolicy>:
  139810:	e92d4010 	push	{r4, lr}
  139814:	e3a01016 	mov	r1, #22
  139818:	e59f0008 	ldr	r0, [pc, #8]	; 139828 <syscall_set_mempolicy+0x18>
  13981c:	ebfffdda 	bl	138f8c <syscall_trace>
  139820:	e3a00000 	mov	r0, #0
  139824:	e8bd8010 	pop	{r4, pc}
  139828:	0014bdd0 	.word	0x0014bdd0

0013982c <syscall_get_mempolicy>:
  13982c:	e92d4010 	push	{r4, lr}
  139830:	e3a01016 	mov	r1, #22
  139834:	e59f0008 	ldr	r0, [pc, #8]	; 139844 <syscall_get_mempolicy+0x18>
  139838:	ebfffdd3 	bl	138f8c <syscall_trace>
  13983c:	e3a00000 	mov	r0, #0
  139840:	e8bd8010 	pop	{r4, pc}
  139844:	0014bdb8 	.word	0x0014bdb8

00139848 <syscall_mbind>:
  139848:	e92d4010 	push	{r4, lr}
  13984c:	e3a0100e 	mov	r1, #14
  139850:	e59f0008 	ldr	r0, [pc, #8]	; 139860 <syscall_mbind+0x18>
  139854:	ebfffdcc 	bl	138f8c <syscall_trace>
  139858:	e3a00000 	mov	r0, #0
  13985c:	e8bd8010 	pop	{r4, pc}
  139860:	0014bda8 	.word	0x0014bda8

00139864 <syscall_inotify_rm_watch>:
  139864:	e92d4010 	push	{r4, lr}
  139868:	e3a01019 	mov	r1, #25
  13986c:	e59f0008 	ldr	r0, [pc, #8]	; 13987c <syscall_inotify_rm_watch+0x18>
  139870:	ebfffdc5 	bl	138f8c <syscall_trace>
  139874:	e3a00000 	mov	r0, #0
  139878:	e8bd8010 	pop	{r4, pc}
  13987c:	0014bd8c 	.word	0x0014bd8c

00139880 <syscall_inotify_add_watch>:
  139880:	e92d4010 	push	{r4, lr}
  139884:	e3a0101a 	mov	r1, #26
  139888:	e59f0008 	ldr	r0, [pc, #8]	; 139898 <syscall_inotify_add_watch+0x18>
  13988c:	ebfffdbe 	bl	138f8c <syscall_trace>
  139890:	e3a00000 	mov	r0, #0
  139894:	e8bd8010 	pop	{r4, pc}
  139898:	0014bd70 	.word	0x0014bd70

0013989c <syscall_inotify_init>:
  13989c:	e92d4010 	push	{r4, lr}
  1398a0:	e3a01015 	mov	r1, #21
  1398a4:	e59f0008 	ldr	r0, [pc, #8]	; 1398b4 <syscall_inotify_init+0x18>
  1398a8:	ebfffdb7 	bl	138f8c <syscall_trace>
  1398ac:	e3a00000 	mov	r0, #0
  1398b0:	e8bd8010 	pop	{r4, pc}
  1398b4:	0014bd58 	.word	0x0014bd58

001398b8 <syscall_ioprio_get>:
  1398b8:	e92d4010 	push	{r4, lr}
  1398bc:	e3a01013 	mov	r1, #19
  1398c0:	e59f0008 	ldr	r0, [pc, #8]	; 1398d0 <syscall_ioprio_get+0x18>
  1398c4:	ebfffdb0 	bl	138f8c <syscall_trace>
  1398c8:	e3a00000 	mov	r0, #0
  1398cc:	e8bd8010 	pop	{r4, pc}
  1398d0:	0014bd44 	.word	0x0014bd44

001398d4 <syscall_ioprio_set>:
  1398d4:	e92d4010 	push	{r4, lr}
  1398d8:	e3a01013 	mov	r1, #19
  1398dc:	e59f0008 	ldr	r0, [pc, #8]	; 1398ec <syscall_ioprio_set+0x18>
  1398e0:	ebfffda9 	bl	138f8c <syscall_trace>
  1398e4:	e3a00000 	mov	r0, #0
  1398e8:	e8bd8010 	pop	{r4, pc}
  1398ec:	0014bd30 	.word	0x0014bd30

001398f0 <syscall_vserver>:
  1398f0:	e92d4010 	push	{r4, lr}
  1398f4:	e3a01010 	mov	r1, #16
  1398f8:	e59f0008 	ldr	r0, [pc, #8]	; 139908 <syscall_vserver+0x18>
  1398fc:	ebfffda2 	bl	138f8c <syscall_trace>
  139900:	e3a00000 	mov	r0, #0
  139904:	e8bd8010 	pop	{r4, pc}
  139908:	0014bd20 	.word	0x0014bd20

0013990c <syscall_semtimedop>:
  13990c:	e92d4010 	push	{r4, lr}
  139910:	e3a01013 	mov	r1, #19
  139914:	e59f0008 	ldr	r0, [pc, #8]	; 139924 <syscall_semtimedop+0x18>
  139918:	ebfffd9b 	bl	138f8c <syscall_trace>
  13991c:	e3a00000 	mov	r0, #0
  139920:	e8bd8010 	pop	{r4, pc}
  139924:	0014bd0c 	.word	0x0014bd0c

00139928 <syscall_keyctl>:
  139928:	e92d4010 	push	{r4, lr}
  13992c:	e3a0100f 	mov	r1, #15
  139930:	e59f0008 	ldr	r0, [pc, #8]	; 139940 <syscall_keyctl+0x18>
  139934:	ebfffd94 	bl	138f8c <syscall_trace>
  139938:	e3a00000 	mov	r0, #0
  13993c:	e8bd8010 	pop	{r4, pc}
  139940:	0014bcfc 	.word	0x0014bcfc

00139944 <syscall_request_key>:
  139944:	e92d4010 	push	{r4, lr}
  139948:	e3a01014 	mov	r1, #20
  13994c:	e59f0008 	ldr	r0, [pc, #8]	; 13995c <syscall_request_key+0x18>
  139950:	ebfffd8d 	bl	138f8c <syscall_trace>
  139954:	e3a00000 	mov	r0, #0
  139958:	e8bd8010 	pop	{r4, pc}
  13995c:	0014bce8 	.word	0x0014bce8

00139960 <syscall_add_key>:
  139960:	e92d4010 	push	{r4, lr}
  139964:	e3a01010 	mov	r1, #16
  139968:	e59f0008 	ldr	r0, [pc, #8]	; 139978 <syscall_add_key+0x18>
  13996c:	ebfffd86 	bl	138f8c <syscall_trace>
  139970:	e3a00000 	mov	r0, #0
  139974:	e8bd8010 	pop	{r4, pc}
  139978:	0014bcd8 	.word	0x0014bcd8

0013997c <syscall_msgctl>:
  13997c:	e92d4010 	push	{r4, lr}
  139980:	e3a0100f 	mov	r1, #15
  139984:	e59f0008 	ldr	r0, [pc, #8]	; 139994 <syscall_msgctl+0x18>
  139988:	ebfffd7f 	bl	138f8c <syscall_trace>
  13998c:	e3a00000 	mov	r0, #0
  139990:	e8bd8010 	pop	{r4, pc}
  139994:	0014bc88 	.word	0x0014bc88

00139998 <syscall_msgget>:
  139998:	e92d4010 	push	{r4, lr}
  13999c:	e3a0100f 	mov	r1, #15
  1399a0:	e59f0008 	ldr	r0, [pc, #8]	; 1399b0 <syscall_msgget+0x18>
  1399a4:	ebfffd78 	bl	138f8c <syscall_trace>
  1399a8:	e3a00000 	mov	r0, #0
  1399ac:	e8bd8010 	pop	{r4, pc}
  1399b0:	0014bc78 	.word	0x0014bc78

001399b4 <syscall_msgrcv>:
  1399b4:	e92d4010 	push	{r4, lr}
  1399b8:	e3a0100f 	mov	r1, #15
  1399bc:	e59f0008 	ldr	r0, [pc, #8]	; 1399cc <syscall_msgrcv+0x18>
  1399c0:	ebfffd71 	bl	138f8c <syscall_trace>
  1399c4:	e3a00000 	mov	r0, #0
  1399c8:	e8bd8010 	pop	{r4, pc}
  1399cc:	0014bc68 	.word	0x0014bc68

001399d0 <syscall_msgsnd>:
  1399d0:	e92d4010 	push	{r4, lr}
  1399d4:	e3a0100f 	mov	r1, #15
  1399d8:	e59f0008 	ldr	r0, [pc, #8]	; 1399e8 <syscall_msgsnd+0x18>
  1399dc:	ebfffd6a 	bl	138f8c <syscall_trace>
  1399e0:	e3a00000 	mov	r0, #0
  1399e4:	e8bd8010 	pop	{r4, pc}
  1399e8:	0014bc58 	.word	0x0014bc58

001399ec <syscall_semctl>:
  1399ec:	e92d4010 	push	{r4, lr}
  1399f0:	e3a0100f 	mov	r1, #15
  1399f4:	e59f0008 	ldr	r0, [pc, #8]	; 139a04 <syscall_semctl+0x18>
  1399f8:	ebfffd63 	bl	138f8c <syscall_trace>
  1399fc:	e3a00000 	mov	r0, #0
  139a00:	e8bd8010 	pop	{r4, pc}
  139a04:	0014bc48 	.word	0x0014bc48

00139a08 <syscall_semget>:
  139a08:	e92d4010 	push	{r4, lr}
  139a0c:	e3a0100f 	mov	r1, #15
  139a10:	e59f0008 	ldr	r0, [pc, #8]	; 139a20 <syscall_semget+0x18>
  139a14:	ebfffd5c 	bl	138f8c <syscall_trace>
  139a18:	e3a00000 	mov	r0, #0
  139a1c:	e8bd8010 	pop	{r4, pc}
  139a20:	0014bc38 	.word	0x0014bc38

00139a24 <syscall_semop>:
  139a24:	e92d4010 	push	{r4, lr}
  139a28:	e3a0100e 	mov	r1, #14
  139a2c:	e59f0008 	ldr	r0, [pc, #8]	; 139a3c <syscall_semop+0x18>
  139a30:	ebfffd55 	bl	138f8c <syscall_trace>
  139a34:	e3a00000 	mov	r0, #0
  139a38:	e8bd8010 	pop	{r4, pc}
  139a3c:	0014bc28 	.word	0x0014bc28

00139a40 <syscall_recvmsg>:
  139a40:	e92d4010 	push	{r4, lr}
  139a44:	e3a01010 	mov	r1, #16
  139a48:	e59f0008 	ldr	r0, [pc, #8]	; 139a58 <syscall_recvmsg+0x18>
  139a4c:	ebfffd4e 	bl	138f8c <syscall_trace>
  139a50:	e3a00000 	mov	r0, #0
  139a54:	e8bd8010 	pop	{r4, pc}
  139a58:	0014bc18 	.word	0x0014bc18

00139a5c <syscall_sendmsg>:
  139a5c:	e92d4010 	push	{r4, lr}
  139a60:	e3a01010 	mov	r1, #16
  139a64:	e59f0008 	ldr	r0, [pc, #8]	; 139a74 <syscall_sendmsg+0x18>
  139a68:	ebfffd47 	bl	138f8c <syscall_trace>
  139a6c:	e3a00000 	mov	r0, #0
  139a70:	e8bd8010 	pop	{r4, pc}
  139a74:	0014bc08 	.word	0x0014bc08

00139a78 <syscall_shutdown>:
  139a78:	e92d4010 	push	{r4, lr}
  139a7c:	e3a01011 	mov	r1, #17
  139a80:	e59f0008 	ldr	r0, [pc, #8]	; 139a90 <syscall_shutdown+0x18>
  139a84:	ebfffd40 	bl	138f8c <syscall_trace>
  139a88:	e3a00000 	mov	r0, #0
  139a8c:	e8bd8010 	pop	{r4, pc}
  139a90:	0014bbcc 	.word	0x0014bbcc

00139a94 <syscall_socketpair>:
  139a94:	e92d4010 	push	{r4, lr}
  139a98:	e3a01013 	mov	r1, #19
  139a9c:	e59f0008 	ldr	r0, [pc, #8]	; 139aac <syscall_socketpair+0x18>
  139aa0:	ebfffd39 	bl	138f8c <syscall_trace>
  139aa4:	e3a00000 	mov	r0, #0
  139aa8:	e8bd8010 	pop	{r4, pc}
  139aac:	0014bb74 	.word	0x0014bb74

00139ab0 <syscall_waitid>:
  139ab0:	e92d4010 	push	{r4, lr}
  139ab4:	e3a0100f 	mov	r1, #15
  139ab8:	e59f0008 	ldr	r0, [pc, #8]	; 139ac8 <syscall_waitid+0x18>
  139abc:	ebfffd32 	bl	138f8c <syscall_trace>
  139ac0:	e3a00000 	mov	r0, #0
  139ac4:	e8bd8010 	pop	{r4, pc}
  139ac8:	0014baec 	.word	0x0014baec

00139acc <syscall_mq_getsetattr>:
  139acc:	e92d4010 	push	{r4, lr}
  139ad0:	e3a01016 	mov	r1, #22
  139ad4:	e59f0008 	ldr	r0, [pc, #8]	; 139ae4 <syscall_mq_getsetattr+0x18>
  139ad8:	ebfffd2b 	bl	138f8c <syscall_trace>
  139adc:	e3a00000 	mov	r0, #0
  139ae0:	e8bd8010 	pop	{r4, pc}
  139ae4:	0014bad4 	.word	0x0014bad4

00139ae8 <syscall_mq_notify>:
  139ae8:	e92d4010 	push	{r4, lr}
  139aec:	e3a01012 	mov	r1, #18
  139af0:	e59f0008 	ldr	r0, [pc, #8]	; 139b00 <syscall_mq_notify+0x18>
  139af4:	ebfffd24 	bl	138f8c <syscall_trace>
  139af8:	e3a00000 	mov	r0, #0
  139afc:	e8bd8010 	pop	{r4, pc}
  139b00:	0014bac0 	.word	0x0014bac0

00139b04 <syscall_mq_timedreceive>:
  139b04:	e92d4010 	push	{r4, lr}
  139b08:	e3a01018 	mov	r1, #24
  139b0c:	e59f0008 	ldr	r0, [pc, #8]	; 139b1c <syscall_mq_timedreceive+0x18>
  139b10:	ebfffd1d 	bl	138f8c <syscall_trace>
  139b14:	e3a00000 	mov	r0, #0
  139b18:	e8bd8010 	pop	{r4, pc}
  139b1c:	0014baa8 	.word	0x0014baa8

00139b20 <syscall_mq_timedsend>:
  139b20:	e92d4010 	push	{r4, lr}
  139b24:	e3a01015 	mov	r1, #21
  139b28:	e59f0008 	ldr	r0, [pc, #8]	; 139b38 <syscall_mq_timedsend+0x18>
  139b2c:	ebfffd16 	bl	138f8c <syscall_trace>
  139b30:	e3a00000 	mov	r0, #0
  139b34:	e8bd8010 	pop	{r4, pc}
  139b38:	0014ba90 	.word	0x0014ba90

00139b3c <syscall_mq_unlink>:
  139b3c:	e92d4010 	push	{r4, lr}
  139b40:	e3a01012 	mov	r1, #18
  139b44:	e59f0008 	ldr	r0, [pc, #8]	; 139b54 <syscall_mq_unlink+0x18>
  139b48:	ebfffd0f 	bl	138f8c <syscall_trace>
  139b4c:	e3a00000 	mov	r0, #0
  139b50:	e8bd8010 	pop	{r4, pc}
  139b54:	0014ba7c 	.word	0x0014ba7c

00139b58 <syscall_mq_open>:
  139b58:	e92d4010 	push	{r4, lr}
  139b5c:	e3a01010 	mov	r1, #16
  139b60:	e59f0008 	ldr	r0, [pc, #8]	; 139b70 <syscall_mq_open+0x18>
  139b64:	ebfffd08 	bl	138f8c <syscall_trace>
  139b68:	e3a00000 	mov	r0, #0
  139b6c:	e8bd8010 	pop	{r4, pc}
  139b70:	0014ba6c 	.word	0x0014ba6c

00139b74 <syscall_pciconfig_write>:
  139b74:	e92d4010 	push	{r4, lr}
  139b78:	e3a01018 	mov	r1, #24
  139b7c:	e59f0008 	ldr	r0, [pc, #8]	; 139b8c <syscall_pciconfig_write+0x18>
  139b80:	ebfffd01 	bl	138f8c <syscall_trace>
  139b84:	e3a00000 	mov	r0, #0
  139b88:	e8bd8010 	pop	{r4, pc}
  139b8c:	0014ba54 	.word	0x0014ba54

00139b90 <syscall_pciconfig_read>:
  139b90:	e92d4010 	push	{r4, lr}
  139b94:	e3a01017 	mov	r1, #23
  139b98:	e59f0008 	ldr	r0, [pc, #8]	; 139ba8 <syscall_pciconfig_read+0x18>
  139b9c:	ebfffcfa 	bl	138f8c <syscall_trace>
  139ba0:	e3a00000 	mov	r0, #0
  139ba4:	e8bd8010 	pop	{r4, pc}
  139ba8:	0014ba3c 	.word	0x0014ba3c

00139bac <syscall_pciconfig_iobase>:
  139bac:	e92d4010 	push	{r4, lr}
  139bb0:	e3a01019 	mov	r1, #25
  139bb4:	e59f0008 	ldr	r0, [pc, #8]	; 139bc4 <syscall_pciconfig_iobase+0x18>
  139bb8:	ebfffcf3 	bl	138f8c <syscall_trace>
  139bbc:	e3a00000 	mov	r0, #0
  139bc0:	e8bd8010 	pop	{r4, pc}
  139bc4:	0014ba20 	.word	0x0014ba20

00139bc8 <syscall_arm_fadvise64_64>:
  139bc8:	e92d4010 	push	{r4, lr}
  139bcc:	e3a01019 	mov	r1, #25
  139bd0:	e59f0008 	ldr	r0, [pc, #8]	; 139be0 <syscall_arm_fadvise64_64+0x18>
  139bd4:	ebfffcec 	bl	138f8c <syscall_trace>
  139bd8:	e3a00000 	mov	r0, #0
  139bdc:	e8bd8010 	pop	{r4, pc}
  139be0:	0014ba04 	.word	0x0014ba04

00139be4 <syscall_utimes>:
  139be4:	e92d4010 	push	{r4, lr}
  139be8:	e3a0100f 	mov	r1, #15
  139bec:	e59f0008 	ldr	r0, [pc, #8]	; 139bfc <syscall_utimes+0x18>
  139bf0:	ebfffce5 	bl	138f8c <syscall_trace>
  139bf4:	e3a00000 	mov	r0, #0
  139bf8:	e8bd8010 	pop	{r4, pc}
  139bfc:	0014b9f4 	.word	0x0014b9f4

00139c00 <syscall_tgkill>:
  139c00:	e92d4010 	push	{r4, lr}
  139c04:	e3a0100f 	mov	r1, #15
  139c08:	e59f0008 	ldr	r0, [pc, #8]	; 139c18 <syscall_tgkill+0x18>
  139c0c:	ebfffcde 	bl	138f8c <syscall_trace>
  139c10:	e3a00000 	mov	r0, #0
  139c14:	e8bd8010 	pop	{r4, pc}
  139c18:	0014b9e4 	.word	0x0014b9e4

00139c1c <syscall_fstatfs64>:
  139c1c:	e92d4010 	push	{r4, lr}
  139c20:	e3a01012 	mov	r1, #18
  139c24:	e59f0008 	ldr	r0, [pc, #8]	; 139c34 <syscall_fstatfs64+0x18>
  139c28:	ebfffcd7 	bl	138f8c <syscall_trace>
  139c2c:	e3a00000 	mov	r0, #0
  139c30:	e8bd8010 	pop	{r4, pc}
  139c34:	0014b9d0 	.word	0x0014b9d0

00139c38 <syscall_statfs64>:
  139c38:	e92d4010 	push	{r4, lr}
  139c3c:	e3a01011 	mov	r1, #17
  139c40:	e59f0008 	ldr	r0, [pc, #8]	; 139c50 <syscall_statfs64+0x18>
  139c44:	ebfffcd0 	bl	138f8c <syscall_trace>
  139c48:	e3a00000 	mov	r0, #0
  139c4c:	e8bd8010 	pop	{r4, pc}
  139c50:	0014b9bc 	.word	0x0014b9bc

00139c54 <syscall_clock_nanosleep>:
  139c54:	e92d4010 	push	{r4, lr}
  139c58:	e3a01018 	mov	r1, #24
  139c5c:	e59f0008 	ldr	r0, [pc, #8]	; 139c6c <syscall_clock_nanosleep+0x18>
  139c60:	ebfffcc9 	bl	138f8c <syscall_trace>
  139c64:	e3a00000 	mov	r0, #0
  139c68:	e8bd8010 	pop	{r4, pc}
  139c6c:	0014b9a4 	.word	0x0014b9a4

00139c70 <syscall_timer_delete>:
  139c70:	e92d4010 	push	{r4, lr}
  139c74:	e3a01015 	mov	r1, #21
  139c78:	e59f0008 	ldr	r0, [pc, #8]	; 139c88 <syscall_timer_delete+0x18>
  139c7c:	ebfffcc2 	bl	138f8c <syscall_trace>
  139c80:	e3a00000 	mov	r0, #0
  139c84:	e8bd8010 	pop	{r4, pc}
  139c88:	0014b944 	.word	0x0014b944

00139c8c <syscall_timer_getoverrun>:
  139c8c:	e92d4010 	push	{r4, lr}
  139c90:	e3a01019 	mov	r1, #25
  139c94:	e59f0008 	ldr	r0, [pc, #8]	; 139ca4 <syscall_timer_getoverrun+0x18>
  139c98:	ebfffcbb 	bl	138f8c <syscall_trace>
  139c9c:	e3a00000 	mov	r0, #0
  139ca0:	e8bd8010 	pop	{r4, pc}
  139ca4:	0014b928 	.word	0x0014b928

00139ca8 <syscall_timer_gettime>:
  139ca8:	e92d4010 	push	{r4, lr}
  139cac:	e3a01016 	mov	r1, #22
  139cb0:	e59f0008 	ldr	r0, [pc, #8]	; 139cc0 <syscall_timer_gettime+0x18>
  139cb4:	ebfffcb4 	bl	138f8c <syscall_trace>
  139cb8:	e3a00000 	mov	r0, #0
  139cbc:	e8bd8010 	pop	{r4, pc}
  139cc0:	0014b910 	.word	0x0014b910

00139cc4 <syscall_timer_settime>:
  139cc4:	e92d4010 	push	{r4, lr}
  139cc8:	e3a01016 	mov	r1, #22
  139ccc:	e59f0008 	ldr	r0, [pc, #8]	; 139cdc <syscall_timer_settime+0x18>
  139cd0:	ebfffcad 	bl	138f8c <syscall_trace>
  139cd4:	e3a00000 	mov	r0, #0
  139cd8:	e8bd8010 	pop	{r4, pc}
  139cdc:	0014b8f8 	.word	0x0014b8f8

00139ce0 <syscall_timer_create>:
  139ce0:	e92d4010 	push	{r4, lr}
  139ce4:	e3a01015 	mov	r1, #21
  139ce8:	e59f0008 	ldr	r0, [pc, #8]	; 139cf8 <syscall_timer_create+0x18>
  139cec:	ebfffca6 	bl	138f8c <syscall_trace>
  139cf0:	e3a00000 	mov	r0, #0
  139cf4:	e8bd8010 	pop	{r4, pc}
  139cf8:	0014b8e0 	.word	0x0014b8e0

00139cfc <syscall_remap_file_pages>:
  139cfc:	e92d4010 	push	{r4, lr}
  139d00:	e3a01019 	mov	r1, #25
  139d04:	e59f0008 	ldr	r0, [pc, #8]	; 139d14 <syscall_remap_file_pages+0x18>
  139d08:	ebfffc9f 	bl	138f8c <syscall_trace>
  139d0c:	e3a00000 	mov	r0, #0
  139d10:	e8bd8010 	pop	{r4, pc}
  139d14:	0014b8ac 	.word	0x0014b8ac

00139d18 <syscall_epoll_wait>:
  139d18:	e92d4010 	push	{r4, lr}
  139d1c:	e3a01013 	mov	r1, #19
  139d20:	e59f0008 	ldr	r0, [pc, #8]	; 139d30 <syscall_epoll_wait+0x18>
  139d24:	ebfffc98 	bl	138f8c <syscall_trace>
  139d28:	e3e00025 	mvn	r0, #37	; 0x25
  139d2c:	e8bd8010 	pop	{r4, pc}
  139d30:	0014b898 	.word	0x0014b898

00139d34 <syscall_epoll_ctl>:
  139d34:	e92d4010 	push	{r4, lr}
  139d38:	e3a01012 	mov	r1, #18
  139d3c:	e59f0008 	ldr	r0, [pc, #8]	; 139d4c <syscall_epoll_ctl+0x18>
  139d40:	ebfffc91 	bl	138f8c <syscall_trace>
  139d44:	e3e00025 	mvn	r0, #37	; 0x25
  139d48:	e8bd8010 	pop	{r4, pc}
  139d4c:	0014b884 	.word	0x0014b884

00139d50 <syscall_epoll_create>:
  139d50:	e92d4010 	push	{r4, lr}
  139d54:	e3a01015 	mov	r1, #21
  139d58:	e59f0008 	ldr	r0, [pc, #8]	; 139d68 <syscall_epoll_create+0x18>
  139d5c:	ebfffc8a 	bl	138f8c <syscall_trace>
  139d60:	e3e00025 	mvn	r0, #37	; 0x25
  139d64:	e8bd8010 	pop	{r4, pc}
  139d68:	0014b86c 	.word	0x0014b86c

00139d6c <syscall_lookup_dcookie>:
  139d6c:	e92d4010 	push	{r4, lr}
  139d70:	e3a01017 	mov	r1, #23
  139d74:	e59f0008 	ldr	r0, [pc, #8]	; 139d84 <syscall_lookup_dcookie+0x18>
  139d78:	ebfffc83 	bl	138f8c <syscall_trace>
  139d7c:	e3a00000 	mov	r0, #0
  139d80:	e8bd8010 	pop	{r4, pc}
  139d84:	0014b854 	.word	0x0014b854

00139d88 <syscall_io_cancel>:
  139d88:	e92d4010 	push	{r4, lr}
  139d8c:	e3a01012 	mov	r1, #18
  139d90:	e59f0008 	ldr	r0, [pc, #8]	; 139da0 <syscall_io_cancel+0x18>
  139d94:	ebfffc7c 	bl	138f8c <syscall_trace>
  139d98:	e3a00000 	mov	r0, #0
  139d9c:	e8bd8010 	pop	{r4, pc}
  139da0:	0014b82c 	.word	0x0014b82c

00139da4 <syscall_io_submit>:
  139da4:	e92d4010 	push	{r4, lr}
  139da8:	e3a01012 	mov	r1, #18
  139dac:	e59f0008 	ldr	r0, [pc, #8]	; 139dbc <syscall_io_submit+0x18>
  139db0:	ebfffc75 	bl	138f8c <syscall_trace>
  139db4:	e3a00000 	mov	r0, #0
  139db8:	e8bd8010 	pop	{r4, pc}
  139dbc:	0014b818 	.word	0x0014b818

00139dc0 <syscall_io_getevents>:
  139dc0:	e92d4010 	push	{r4, lr}
  139dc4:	e3a01015 	mov	r1, #21
  139dc8:	e59f0008 	ldr	r0, [pc, #8]	; 139dd8 <syscall_io_getevents+0x18>
  139dcc:	ebfffc6e 	bl	138f8c <syscall_trace>
  139dd0:	e3a00000 	mov	r0, #0
  139dd4:	e8bd8010 	pop	{r4, pc}
  139dd8:	0014b800 	.word	0x0014b800

00139ddc <syscall_io_destroy>:
  139ddc:	e92d4010 	push	{r4, lr}
  139de0:	e3a01013 	mov	r1, #19
  139de4:	e59f0008 	ldr	r0, [pc, #8]	; 139df4 <syscall_io_destroy+0x18>
  139de8:	ebfffc67 	bl	138f8c <syscall_trace>
  139dec:	e3a00000 	mov	r0, #0
  139df0:	e8bd8010 	pop	{r4, pc}
  139df4:	0014b7ec 	.word	0x0014b7ec

00139df8 <syscall_io_setup>:
  139df8:	e92d4010 	push	{r4, lr}
  139dfc:	e3a01011 	mov	r1, #17
  139e00:	e59f0008 	ldr	r0, [pc, #8]	; 139e10 <syscall_io_setup+0x18>
  139e04:	ebfffc60 	bl	138f8c <syscall_trace>
  139e08:	e3a00000 	mov	r0, #0
  139e0c:	e8bd8010 	pop	{r4, pc}
  139e10:	0014b7d8 	.word	0x0014b7d8

00139e14 <syscall_sched_getaffinity>:
  139e14:	e92d4010 	push	{r4, lr}
  139e18:	e3a0101a 	mov	r1, #26
  139e1c:	e59f0008 	ldr	r0, [pc, #8]	; 139e2c <syscall_sched_getaffinity+0x18>
  139e20:	ebfffc59 	bl	138f8c <syscall_trace>
  139e24:	e3a00000 	mov	r0, #0
  139e28:	e8bd8010 	pop	{r4, pc}
  139e2c:	0014b7bc 	.word	0x0014b7bc

00139e30 <syscall_sendfile64>:
  139e30:	e92d4010 	push	{r4, lr}
  139e34:	e3a01013 	mov	r1, #19
  139e38:	e59f0008 	ldr	r0, [pc, #8]	; 139e48 <syscall_sendfile64+0x18>
  139e3c:	ebfffc52 	bl	138f8c <syscall_trace>
  139e40:	e3a00000 	mov	r0, #0
  139e44:	e8bd8010 	pop	{r4, pc}
  139e48:	0014b77c 	.word	0x0014b77c

00139e4c <syscall_fremovexattr>:
  139e4c:	e92d4010 	push	{r4, lr}
  139e50:	e3a01015 	mov	r1, #21
  139e54:	e59f0008 	ldr	r0, [pc, #8]	; 139e64 <syscall_fremovexattr+0x18>
  139e58:	ebfffc4b 	bl	138f8c <syscall_trace>
  139e5c:	e3a00000 	mov	r0, #0
  139e60:	e8bd8010 	pop	{r4, pc}
  139e64:	0014b754 	.word	0x0014b754

00139e68 <syscall_lremovexattr>:
  139e68:	e92d4010 	push	{r4, lr}
  139e6c:	e3a01015 	mov	r1, #21
  139e70:	e59f0008 	ldr	r0, [pc, #8]	; 139e80 <syscall_lremovexattr+0x18>
  139e74:	ebfffc44 	bl	138f8c <syscall_trace>
  139e78:	e3a00000 	mov	r0, #0
  139e7c:	e8bd8010 	pop	{r4, pc}
  139e80:	0014b73c 	.word	0x0014b73c

00139e84 <syscall_removexattr>:
  139e84:	e92d4010 	push	{r4, lr}
  139e88:	e3a01014 	mov	r1, #20
  139e8c:	e59f0008 	ldr	r0, [pc, #8]	; 139e9c <syscall_removexattr+0x18>
  139e90:	ebfffc3d 	bl	138f8c <syscall_trace>
  139e94:	e3a00000 	mov	r0, #0
  139e98:	e8bd8010 	pop	{r4, pc}
  139e9c:	0014b728 	.word	0x0014b728

00139ea0 <syscall_flistxattr>:
  139ea0:	e92d4010 	push	{r4, lr}
  139ea4:	e3a01013 	mov	r1, #19
  139ea8:	e59f0008 	ldr	r0, [pc, #8]	; 139eb8 <syscall_flistxattr+0x18>
  139eac:	ebfffc36 	bl	138f8c <syscall_trace>
  139eb0:	e3a00000 	mov	r0, #0
  139eb4:	e8bd8010 	pop	{r4, pc}
  139eb8:	0014b714 	.word	0x0014b714

00139ebc <syscall_llistxattr>:
  139ebc:	e92d4010 	push	{r4, lr}
  139ec0:	e3a01013 	mov	r1, #19
  139ec4:	e59f0008 	ldr	r0, [pc, #8]	; 139ed4 <syscall_llistxattr+0x18>
  139ec8:	ebfffc2f 	bl	138f8c <syscall_trace>
  139ecc:	e3a00000 	mov	r0, #0
  139ed0:	e8bd8010 	pop	{r4, pc}
  139ed4:	0014b700 	.word	0x0014b700

00139ed8 <syscall_listxattr>:
  139ed8:	e92d4010 	push	{r4, lr}
  139edc:	e3a01012 	mov	r1, #18
  139ee0:	e59f0008 	ldr	r0, [pc, #8]	; 139ef0 <syscall_listxattr+0x18>
  139ee4:	ebfffc28 	bl	138f8c <syscall_trace>
  139ee8:	e3a00000 	mov	r0, #0
  139eec:	e8bd8010 	pop	{r4, pc}
  139ef0:	0014b6ec 	.word	0x0014b6ec

00139ef4 <syscall_fgetxattr>:
  139ef4:	e92d4010 	push	{r4, lr}
  139ef8:	e3a01012 	mov	r1, #18
  139efc:	e59f0008 	ldr	r0, [pc, #8]	; 139f0c <syscall_fgetxattr+0x18>
  139f00:	ebfffc21 	bl	138f8c <syscall_trace>
  139f04:	e3a00000 	mov	r0, #0
  139f08:	e8bd8010 	pop	{r4, pc}
  139f0c:	0014b6d8 	.word	0x0014b6d8

00139f10 <syscall_lgetxattr>:
  139f10:	e92d4010 	push	{r4, lr}
  139f14:	e3a01012 	mov	r1, #18
  139f18:	e59f0008 	ldr	r0, [pc, #8]	; 139f28 <syscall_lgetxattr+0x18>
  139f1c:	ebfffc1a 	bl	138f8c <syscall_trace>
  139f20:	e3a00000 	mov	r0, #0
  139f24:	e8bd8010 	pop	{r4, pc}
  139f28:	0014b6c4 	.word	0x0014b6c4

00139f2c <syscall_getxattr>:
  139f2c:	e92d4010 	push	{r4, lr}
  139f30:	e3a01011 	mov	r1, #17
  139f34:	e59f0008 	ldr	r0, [pc, #8]	; 139f44 <syscall_getxattr+0x18>
  139f38:	ebfffc13 	bl	138f8c <syscall_trace>
  139f3c:	e3a00000 	mov	r0, #0
  139f40:	e8bd8010 	pop	{r4, pc}
  139f44:	0014b6b0 	.word	0x0014b6b0

00139f48 <syscall_fsetxattr>:
  139f48:	e92d4010 	push	{r4, lr}
  139f4c:	e3a01012 	mov	r1, #18
  139f50:	e59f0008 	ldr	r0, [pc, #8]	; 139f60 <syscall_fsetxattr+0x18>
  139f54:	ebfffc0c 	bl	138f8c <syscall_trace>
  139f58:	e3a00000 	mov	r0, #0
  139f5c:	e8bd8010 	pop	{r4, pc}
  139f60:	0014b69c 	.word	0x0014b69c

00139f64 <syscall_lsetxattr>:
  139f64:	e92d4010 	push	{r4, lr}
  139f68:	e3a01012 	mov	r1, #18
  139f6c:	e59f0008 	ldr	r0, [pc, #8]	; 139f7c <syscall_lsetxattr+0x18>
  139f70:	ebfffc05 	bl	138f8c <syscall_trace>
  139f74:	e3a00000 	mov	r0, #0
  139f78:	e8bd8010 	pop	{r4, pc}
  139f7c:	0014b688 	.word	0x0014b688

00139f80 <syscall_setxattr>:
  139f80:	e92d4010 	push	{r4, lr}
  139f84:	e3a01011 	mov	r1, #17
  139f88:	e59f0008 	ldr	r0, [pc, #8]	; 139f98 <syscall_setxattr+0x18>
  139f8c:	ebfffbfe 	bl	138f8c <syscall_trace>
  139f90:	e3a00000 	mov	r0, #0
  139f94:	e8bd8010 	pop	{r4, pc}
  139f98:	0014b674 	.word	0x0014b674

00139f9c <syscall_readahead>:
  139f9c:	e92d4010 	push	{r4, lr}
  139fa0:	e3a01012 	mov	r1, #18
  139fa4:	e59f0008 	ldr	r0, [pc, #8]	; 139fb4 <syscall_readahead+0x18>
  139fa8:	ebfffbf7 	bl	138f8c <syscall_trace>
  139fac:	e3a00000 	mov	r0, #0
  139fb0:	e8bd8010 	pop	{r4, pc}
  139fb4:	0014b660 	.word	0x0014b660

00139fb8 <syscall_mincore>:
  139fb8:	e92d4010 	push	{r4, lr}
  139fbc:	e3a01010 	mov	r1, #16
  139fc0:	e59f0008 	ldr	r0, [pc, #8]	; 139fd0 <syscall_mincore+0x18>
  139fc4:	ebfffbf0 	bl	138f8c <syscall_trace>
  139fc8:	e3a00000 	mov	r0, #0
  139fcc:	e8bd8010 	pop	{r4, pc}
  139fd0:	0014b620 	.word	0x0014b620

00139fd4 <syscall_pivot_root>:
  139fd4:	e92d4010 	push	{r4, lr}
  139fd8:	e3a01013 	mov	r1, #19
  139fdc:	e59f0008 	ldr	r0, [pc, #8]	; 139fec <syscall_pivot_root+0x18>
  139fe0:	ebfffbe9 	bl	138f8c <syscall_trace>
  139fe4:	e3a00000 	mov	r0, #0
  139fe8:	e8bd8010 	pop	{r4, pc}
  139fec:	0014b60c 	.word	0x0014b60c

00139ff0 <syscall_setfsgid32>:
  139ff0:	e92d4010 	push	{r4, lr}
  139ff4:	e3a01013 	mov	r1, #19
  139ff8:	e59f0008 	ldr	r0, [pc, #8]	; 13a008 <syscall_setfsgid32+0x18>
  139ffc:	ebfffbe2 	bl	138f8c <syscall_trace>
  13a000:	e3a00000 	mov	r0, #0
  13a004:	e8bd8010 	pop	{r4, pc}
  13a008:	0014b5e4 	.word	0x0014b5e4

0013a00c <syscall_setfsuid32>:
  13a00c:	e92d4010 	push	{r4, lr}
  13a010:	e3a01013 	mov	r1, #19
  13a014:	e59f0008 	ldr	r0, [pc, #8]	; 13a024 <syscall_setfsuid32+0x18>
  13a018:	ebfffbdb 	bl	138f8c <syscall_trace>
  13a01c:	e3a00000 	mov	r0, #0
  13a020:	e8bd8010 	pop	{r4, pc}
  13a024:	0014b5d0 	.word	0x0014b5d0

0013a028 <syscall_setgid32>:
  13a028:	e92d4010 	push	{r4, lr}
  13a02c:	e3a01011 	mov	r1, #17
  13a030:	e59f0008 	ldr	r0, [pc, #8]	; 13a040 <syscall_setgid32+0x18>
  13a034:	ebfffbd4 	bl	138f8c <syscall_trace>
  13a038:	e3a00000 	mov	r0, #0
  13a03c:	e8bd8010 	pop	{r4, pc}
  13a040:	0014b5bc 	.word	0x0014b5bc

0013a044 <syscall_setuid32>:
  13a044:	e92d4010 	push	{r4, lr}
  13a048:	e3a01011 	mov	r1, #17
  13a04c:	e59f0008 	ldr	r0, [pc, #8]	; 13a05c <syscall_setuid32+0x18>
  13a050:	ebfffbcd 	bl	138f8c <syscall_trace>
  13a054:	e3a00000 	mov	r0, #0
  13a058:	e8bd8010 	pop	{r4, pc}
  13a05c:	0014b5a8 	.word	0x0014b5a8

0013a060 <syscall_chown32>:
  13a060:	e92d4010 	push	{r4, lr}
  13a064:	e3a01010 	mov	r1, #16
  13a068:	e59f0008 	ldr	r0, [pc, #8]	; 13a078 <syscall_chown32+0x18>
  13a06c:	ebfffbc6 	bl	138f8c <syscall_trace>
  13a070:	e3a00000 	mov	r0, #0
  13a074:	e8bd8010 	pop	{r4, pc}
  13a078:	0014b598 	.word	0x0014b598

0013a07c <syscall_getresgid32>:
  13a07c:	e92d4010 	push	{r4, lr}
  13a080:	e3a01014 	mov	r1, #20
  13a084:	e59f0008 	ldr	r0, [pc, #8]	; 13a094 <syscall_getresgid32+0x18>
  13a088:	ebfffbbf 	bl	138f8c <syscall_trace>
  13a08c:	e3a00000 	mov	r0, #0
  13a090:	e8bd8010 	pop	{r4, pc}
  13a094:	0014b584 	.word	0x0014b584

0013a098 <syscall_setresgid32>:
  13a098:	e92d4010 	push	{r4, lr}
  13a09c:	e3a01014 	mov	r1, #20
  13a0a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a0b0 <syscall_setresgid32+0x18>
  13a0a4:	ebfffbb8 	bl	138f8c <syscall_trace>
  13a0a8:	e3a00000 	mov	r0, #0
  13a0ac:	e8bd8010 	pop	{r4, pc}
  13a0b0:	0014b570 	.word	0x0014b570

0013a0b4 <syscall_getresuid32>:
  13a0b4:	e92d4010 	push	{r4, lr}
  13a0b8:	e3a01014 	mov	r1, #20
  13a0bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a0cc <syscall_getresuid32+0x18>
  13a0c0:	ebfffbb1 	bl	138f8c <syscall_trace>
  13a0c4:	e3a00000 	mov	r0, #0
  13a0c8:	e8bd8010 	pop	{r4, pc}
  13a0cc:	0014b55c 	.word	0x0014b55c

0013a0d0 <syscall_setresuid32>:
  13a0d0:	e92d4010 	push	{r4, lr}
  13a0d4:	e3a01014 	mov	r1, #20
  13a0d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a0e8 <syscall_setresuid32+0x18>
  13a0dc:	ebfffbaa 	bl	138f8c <syscall_trace>
  13a0e0:	e3a00000 	mov	r0, #0
  13a0e4:	e8bd8010 	pop	{r4, pc}
  13a0e8:	0014b548 	.word	0x0014b548

0013a0ec <syscall_fchown32>:
  13a0ec:	e92d4010 	push	{r4, lr}
  13a0f0:	e3a01011 	mov	r1, #17
  13a0f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a104 <syscall_fchown32+0x18>
  13a0f8:	ebfffba3 	bl	138f8c <syscall_trace>
  13a0fc:	e3a00000 	mov	r0, #0
  13a100:	e8bd8010 	pop	{r4, pc}
  13a104:	0014b534 	.word	0x0014b534

0013a108 <syscall_setgroups32>:
  13a108:	e92d4010 	push	{r4, lr}
  13a10c:	e3a01014 	mov	r1, #20
  13a110:	e59f0008 	ldr	r0, [pc, #8]	; 13a120 <syscall_setgroups32+0x18>
  13a114:	ebfffb9c 	bl	138f8c <syscall_trace>
  13a118:	e3a00000 	mov	r0, #0
  13a11c:	e8bd8010 	pop	{r4, pc}
  13a120:	0014b520 	.word	0x0014b520

0013a124 <syscall_getgroups32>:
  13a124:	e92d4010 	push	{r4, lr}
  13a128:	e3a01014 	mov	r1, #20
  13a12c:	e59f0008 	ldr	r0, [pc, #8]	; 13a13c <syscall_getgroups32+0x18>
  13a130:	ebfffb95 	bl	138f8c <syscall_trace>
  13a134:	e3a00000 	mov	r0, #0
  13a138:	e8bd8010 	pop	{r4, pc}
  13a13c:	0014b50c 	.word	0x0014b50c

0013a140 <syscall_setregid32>:
  13a140:	e92d4010 	push	{r4, lr}
  13a144:	e3a01013 	mov	r1, #19
  13a148:	e59f0008 	ldr	r0, [pc, #8]	; 13a158 <syscall_setregid32+0x18>
  13a14c:	ebfffb8e 	bl	138f8c <syscall_trace>
  13a150:	e3a00000 	mov	r0, #0
  13a154:	e8bd8010 	pop	{r4, pc}
  13a158:	0014b4f8 	.word	0x0014b4f8

0013a15c <syscall_setreuid32>:
  13a15c:	e92d4010 	push	{r4, lr}
  13a160:	e3a01013 	mov	r1, #19
  13a164:	e59f0008 	ldr	r0, [pc, #8]	; 13a174 <syscall_setreuid32+0x18>
  13a168:	ebfffb87 	bl	138f8c <syscall_trace>
  13a16c:	e3a00000 	mov	r0, #0
  13a170:	e8bd8010 	pop	{r4, pc}
  13a174:	0014b4e4 	.word	0x0014b4e4

0013a178 <syscall_getegid32>:
  13a178:	e92d4010 	push	{r4, lr}
  13a17c:	e3a01012 	mov	r1, #18
  13a180:	e59f0008 	ldr	r0, [pc, #8]	; 13a190 <syscall_getegid32+0x18>
  13a184:	ebfffb80 	bl	138f8c <syscall_trace>
  13a188:	e3a00000 	mov	r0, #0
  13a18c:	e8bd8010 	pop	{r4, pc}
  13a190:	0014b4d0 	.word	0x0014b4d0

0013a194 <syscall_geteuid32>:
  13a194:	e92d4010 	push	{r4, lr}
  13a198:	e3a01012 	mov	r1, #18
  13a19c:	e59f0008 	ldr	r0, [pc, #8]	; 13a1ac <syscall_geteuid32+0x18>
  13a1a0:	ebfffb79 	bl	138f8c <syscall_trace>
  13a1a4:	e3a00000 	mov	r0, #0
  13a1a8:	e8bd8010 	pop	{r4, pc}
  13a1ac:	0014b4bc 	.word	0x0014b4bc

0013a1b0 <syscall_getgid32>:
  13a1b0:	e92d4010 	push	{r4, lr}
  13a1b4:	e3a01011 	mov	r1, #17
  13a1b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a1c8 <syscall_getgid32+0x18>
  13a1bc:	ebfffb72 	bl	138f8c <syscall_trace>
  13a1c0:	e3a00000 	mov	r0, #0
  13a1c4:	e8bd8010 	pop	{r4, pc}
  13a1c8:	0014b4a8 	.word	0x0014b4a8

0013a1cc <syscall_getuid32>:
  13a1cc:	e92d4010 	push	{r4, lr}
  13a1d0:	e3a01011 	mov	r1, #17
  13a1d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a1e4 <syscall_getuid32+0x18>
  13a1d8:	ebfffb6b 	bl	138f8c <syscall_trace>
  13a1dc:	e3a00000 	mov	r0, #0
  13a1e0:	e8bd8010 	pop	{r4, pc}
  13a1e4:	0014b494 	.word	0x0014b494

0013a1e8 <syscall_lchown32>:
  13a1e8:	e92d4010 	push	{r4, lr}
  13a1ec:	e3a01011 	mov	r1, #17
  13a1f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a200 <syscall_lchown32+0x18>
  13a1f4:	ebfffb64 	bl	138f8c <syscall_trace>
  13a1f8:	e3a00000 	mov	r0, #0
  13a1fc:	e8bd8010 	pop	{r4, pc}
  13a200:	0014b480 	.word	0x0014b480

0013a204 <syscall_ftruncate64>:
  13a204:	e92d4010 	push	{r4, lr}
  13a208:	e3a01014 	mov	r1, #20
  13a20c:	e59f0008 	ldr	r0, [pc, #8]	; 13a21c <syscall_ftruncate64+0x18>
  13a210:	ebfffb5d 	bl	138f8c <syscall_trace>
  13a214:	e3a00000 	mov	r0, #0
  13a218:	e8bd8010 	pop	{r4, pc}
  13a21c:	0014b43c 	.word	0x0014b43c

0013a220 <syscall_truncate64>:
  13a220:	e92d4010 	push	{r4, lr}
  13a224:	e3a01013 	mov	r1, #19
  13a228:	e59f0008 	ldr	r0, [pc, #8]	; 13a238 <syscall_truncate64+0x18>
  13a22c:	ebfffb56 	bl	138f8c <syscall_trace>
  13a230:	e3a00000 	mov	r0, #0
  13a234:	e8bd8010 	pop	{r4, pc}
  13a238:	0014b428 	.word	0x0014b428

0013a23c <syscall_sendfile>:
  13a23c:	e92d4010 	push	{r4, lr}
  13a240:	e3a01011 	mov	r1, #17
  13a244:	e59f0008 	ldr	r0, [pc, #8]	; 13a254 <syscall_sendfile+0x18>
  13a248:	ebfffb4f 	bl	138f8c <syscall_trace>
  13a24c:	e3a00000 	mov	r0, #0
  13a250:	e8bd8010 	pop	{r4, pc}
  13a254:	0014b3e0 	.word	0x0014b3e0

0013a258 <syscall_sigaltstack>:
  13a258:	e92d4010 	push	{r4, lr}
  13a25c:	e3a01014 	mov	r1, #20
  13a260:	e59f0008 	ldr	r0, [pc, #8]	; 13a270 <syscall_sigaltstack+0x18>
  13a264:	ebfffb48 	bl	138f8c <syscall_trace>
  13a268:	e3a00000 	mov	r0, #0
  13a26c:	e8bd8010 	pop	{r4, pc}
  13a270:	0014b3cc 	.word	0x0014b3cc

0013a274 <syscall_capset>:
  13a274:	e92d4010 	push	{r4, lr}
  13a278:	e3a0100f 	mov	r1, #15
  13a27c:	e59f0008 	ldr	r0, [pc, #8]	; 13a28c <syscall_capset+0x18>
  13a280:	ebfffb41 	bl	138f8c <syscall_trace>
  13a284:	e3a00000 	mov	r0, #0
  13a288:	e8bd8010 	pop	{r4, pc}
  13a28c:	0014b3bc 	.word	0x0014b3bc

0013a290 <syscall_capget>:
  13a290:	e92d4010 	push	{r4, lr}
  13a294:	e3a0100f 	mov	r1, #15
  13a298:	e59f0008 	ldr	r0, [pc, #8]	; 13a2a8 <syscall_capget+0x18>
  13a29c:	ebfffb3a 	bl	138f8c <syscall_trace>
  13a2a0:	e3a00000 	mov	r0, #0
  13a2a4:	e8bd8010 	pop	{r4, pc}
  13a2a8:	0014b3ac 	.word	0x0014b3ac

0013a2ac <syscall_chown>:
  13a2ac:	e92d4010 	push	{r4, lr}
  13a2b0:	e3a0100e 	mov	r1, #14
  13a2b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a2c4 <syscall_chown+0x18>
  13a2b8:	ebfffb33 	bl	138f8c <syscall_trace>
  13a2bc:	e3a00000 	mov	r0, #0
  13a2c0:	e8bd8010 	pop	{r4, pc}
  13a2c4:	0014b38c 	.word	0x0014b38c

0013a2c8 <syscall_pwrite64>:
  13a2c8:	e92d4010 	push	{r4, lr}
  13a2cc:	e3a01011 	mov	r1, #17
  13a2d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a2e0 <syscall_pwrite64+0x18>
  13a2d4:	ebfffb2c 	bl	138f8c <syscall_trace>
  13a2d8:	e3a00000 	mov	r0, #0
  13a2dc:	e8bd8010 	pop	{r4, pc}
  13a2e0:	0014b378 	.word	0x0014b378

0013a2e4 <syscall_pread64>:
  13a2e4:	e92d4010 	push	{r4, lr}
  13a2e8:	e3a01010 	mov	r1, #16
  13a2ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a2fc <syscall_pread64+0x18>
  13a2f0:	ebfffb25 	bl	138f8c <syscall_trace>
  13a2f4:	e3a00000 	mov	r0, #0
  13a2f8:	e8bd8010 	pop	{r4, pc}
  13a2fc:	0014b368 	.word	0x0014b368

0013a300 <syscall_rt_sigsuspend>:
  13a300:	e92d4010 	push	{r4, lr}
  13a304:	e3a01016 	mov	r1, #22
  13a308:	e59f0008 	ldr	r0, [pc, #8]	; 13a318 <syscall_rt_sigsuspend+0x18>
  13a30c:	ebfffb1e 	bl	138f8c <syscall_trace>
  13a310:	e3a00000 	mov	r0, #0
  13a314:	e8bd8010 	pop	{r4, pc}
  13a318:	0014b350 	.word	0x0014b350

0013a31c <syscall_rt_sigqueueinfo>:
  13a31c:	e92d4010 	push	{r4, lr}
  13a320:	e3a01018 	mov	r1, #24
  13a324:	e59f0008 	ldr	r0, [pc, #8]	; 13a334 <syscall_rt_sigqueueinfo+0x18>
  13a328:	ebfffb17 	bl	138f8c <syscall_trace>
  13a32c:	e3a00000 	mov	r0, #0
  13a330:	e8bd8010 	pop	{r4, pc}
  13a334:	0014b338 	.word	0x0014b338

0013a338 <syscall_rt_sigtimedwait>:
  13a338:	e92d4010 	push	{r4, lr}
  13a33c:	e3a01018 	mov	r1, #24
  13a340:	e59f0008 	ldr	r0, [pc, #8]	; 13a350 <syscall_rt_sigtimedwait+0x18>
  13a344:	ebfffb10 	bl	138f8c <syscall_trace>
  13a348:	e3a00000 	mov	r0, #0
  13a34c:	e8bd8010 	pop	{r4, pc}
  13a350:	0014b320 	.word	0x0014b320

0013a354 <syscall_rt_sigpending>:
  13a354:	e92d4010 	push	{r4, lr}
  13a358:	e3a01016 	mov	r1, #22
  13a35c:	e59f0008 	ldr	r0, [pc, #8]	; 13a36c <syscall_rt_sigpending+0x18>
  13a360:	ebfffb09 	bl	138f8c <syscall_trace>
  13a364:	e3a00000 	mov	r0, #0
  13a368:	e8bd8010 	pop	{r4, pc}
  13a36c:	0014b308 	.word	0x0014b308

0013a370 <syscall_rt_sigreturn>:
  13a370:	e92d4010 	push	{r4, lr}
  13a374:	e3a01015 	mov	r1, #21
  13a378:	e59f0008 	ldr	r0, [pc, #8]	; 13a388 <syscall_rt_sigreturn+0x18>
  13a37c:	ebfffb02 	bl	138f8c <syscall_trace>
  13a380:	e3a00000 	mov	r0, #0
  13a384:	e8bd8010 	pop	{r4, pc}
  13a388:	0014b2c0 	.word	0x0014b2c0

0013a38c <syscall_prctl>:
  13a38c:	e92d4010 	push	{r4, lr}
  13a390:	e3a0100e 	mov	r1, #14
  13a394:	e59f0008 	ldr	r0, [pc, #8]	; 13a3a4 <syscall_prctl+0x18>
  13a398:	ebfffafb 	bl	138f8c <syscall_trace>
  13a39c:	e3a00000 	mov	r0, #0
  13a3a0:	e8bd8010 	pop	{r4, pc}
  13a3a4:	0014b2b0 	.word	0x0014b2b0

0013a3a8 <syscall_getresgid>:
  13a3a8:	e92d4010 	push	{r4, lr}
  13a3ac:	e3a01012 	mov	r1, #18
  13a3b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a3c0 <syscall_getresgid+0x18>
  13a3b4:	ebfffaf4 	bl	138f8c <syscall_trace>
  13a3b8:	e3a00000 	mov	r0, #0
  13a3bc:	e8bd8010 	pop	{r4, pc}
  13a3c0:	0014b29c 	.word	0x0014b29c

0013a3c4 <syscall_setresgid>:
  13a3c4:	e92d4010 	push	{r4, lr}
  13a3c8:	e3a01012 	mov	r1, #18
  13a3cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a3dc <syscall_setresgid+0x18>
  13a3d0:	ebfffaed 	bl	138f8c <syscall_trace>
  13a3d4:	e3a00000 	mov	r0, #0
  13a3d8:	e8bd8010 	pop	{r4, pc}
  13a3dc:	0014b288 	.word	0x0014b288

0013a3e0 <syscall_nfsservctl>:
  13a3e0:	e92d4010 	push	{r4, lr}
  13a3e4:	e3a01013 	mov	r1, #19
  13a3e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a3f8 <syscall_nfsservctl+0x18>
  13a3ec:	ebfffae6 	bl	138f8c <syscall_trace>
  13a3f0:	e3a00000 	mov	r0, #0
  13a3f4:	e8bd8010 	pop	{r4, pc}
  13a3f8:	0014b274 	.word	0x0014b274

0013a3fc <syscall_getresuid>:
  13a3fc:	e92d4010 	push	{r4, lr}
  13a400:	e3a01012 	mov	r1, #18
  13a404:	e59f0008 	ldr	r0, [pc, #8]	; 13a414 <syscall_getresuid+0x18>
  13a408:	ebfffadf 	bl	138f8c <syscall_trace>
  13a40c:	e3a00000 	mov	r0, #0
  13a410:	e8bd8010 	pop	{r4, pc}
  13a414:	0014b250 	.word	0x0014b250

0013a418 <syscall_setresuid>:
  13a418:	e92d4010 	push	{r4, lr}
  13a41c:	e3a01012 	mov	r1, #18
  13a420:	e59f0008 	ldr	r0, [pc, #8]	; 13a430 <syscall_setresuid+0x18>
  13a424:	ebfffad8 	bl	138f8c <syscall_trace>
  13a428:	e3a00000 	mov	r0, #0
  13a42c:	e8bd8010 	pop	{r4, pc}
  13a430:	0014b23c 	.word	0x0014b23c

0013a434 <syscall_sched_rr_get_interval>:
  13a434:	e92d4010 	push	{r4, lr}
  13a438:	e3a0101e 	mov	r1, #30
  13a43c:	e59f0008 	ldr	r0, [pc, #8]	; 13a44c <syscall_sched_rr_get_interval+0x18>
  13a440:	ebfffad1 	bl	138f8c <syscall_trace>
  13a444:	e3a00000 	mov	r0, #0
  13a448:	e8bd8010 	pop	{r4, pc}
  13a44c:	0014b1f8 	.word	0x0014b1f8

0013a450 <syscall_sched_yield>:
  13a450:	e92d4010 	push	{r4, lr}
  13a454:	e3a01014 	mov	r1, #20
  13a458:	e59f0008 	ldr	r0, [pc, #8]	; 13a468 <syscall_sched_yield+0x18>
  13a45c:	ebfffaca 	bl	138f8c <syscall_trace>
  13a460:	e3a00000 	mov	r0, #0
  13a464:	e8bd8010 	pop	{r4, pc}
  13a468:	0014b1a4 	.word	0x0014b1a4

0013a46c <syscall_munlockall>:
  13a46c:	e92d4010 	push	{r4, lr}
  13a470:	e3a01013 	mov	r1, #19
  13a474:	e59f0008 	ldr	r0, [pc, #8]	; 13a484 <syscall_munlockall+0x18>
  13a478:	ebfffac3 	bl	138f8c <syscall_trace>
  13a47c:	e3a00000 	mov	r0, #0
  13a480:	e8bd8010 	pop	{r4, pc}
  13a484:	0014b128 	.word	0x0014b128

0013a488 <syscall_mlockall>:
  13a488:	e92d4010 	push	{r4, lr}
  13a48c:	e3a01011 	mov	r1, #17
  13a490:	e59f0008 	ldr	r0, [pc, #8]	; 13a4a0 <syscall_mlockall+0x18>
  13a494:	ebfffabc 	bl	138f8c <syscall_trace>
  13a498:	e3a00000 	mov	r0, #0
  13a49c:	e8bd8010 	pop	{r4, pc}
  13a4a0:	0014b114 	.word	0x0014b114

0013a4a4 <syscall_munlock>:
  13a4a4:	e92d4010 	push	{r4, lr}
  13a4a8:	e3a01010 	mov	r1, #16
  13a4ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a4bc <syscall_munlock+0x18>
  13a4b0:	ebfffab5 	bl	138f8c <syscall_trace>
  13a4b4:	e3a00000 	mov	r0, #0
  13a4b8:	e8bd8010 	pop	{r4, pc}
  13a4bc:	0014b104 	.word	0x0014b104

0013a4c0 <syscall_mlock>:
  13a4c0:	e92d4010 	push	{r4, lr}
  13a4c4:	e3a0100e 	mov	r1, #14
  13a4c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a4d8 <syscall_mlock+0x18>
  13a4cc:	ebfffaae 	bl	138f8c <syscall_trace>
  13a4d0:	e3a00000 	mov	r0, #0
  13a4d4:	e8bd8010 	pop	{r4, pc}
  13a4d8:	0014b0f4 	.word	0x0014b0f4

0013a4dc <syscall__sysctl>:
  13a4dc:	e92d4010 	push	{r4, lr}
  13a4e0:	e3a01010 	mov	r1, #16
  13a4e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a4f4 <syscall__sysctl+0x18>
  13a4e8:	ebfffaa7 	bl	138f8c <syscall_trace>
  13a4ec:	e3a00000 	mov	r0, #0
  13a4f0:	e8bd8010 	pop	{r4, pc}
  13a4f4:	0014b0e4 	.word	0x0014b0e4

0013a4f8 <syscall_fdatasync>:
  13a4f8:	e92d4010 	push	{r4, lr}
  13a4fc:	e3a01012 	mov	r1, #18
  13a500:	e59f0008 	ldr	r0, [pc, #8]	; 13a510 <syscall_fdatasync+0x18>
  13a504:	ebfffaa0 	bl	138f8c <syscall_trace>
  13a508:	e3a00000 	mov	r0, #0
  13a50c:	e8bd8010 	pop	{r4, pc}
  13a510:	0014b0d0 	.word	0x0014b0d0

0013a514 <syscall_getsid>:
  13a514:	e92d4010 	push	{r4, lr}
  13a518:	e3a0100f 	mov	r1, #15
  13a51c:	e59f0008 	ldr	r0, [pc, #8]	; 13a52c <syscall_getsid+0x18>
  13a520:	ebfffa99 	bl	138f8c <syscall_trace>
  13a524:	e3a00000 	mov	r0, #0
  13a528:	e8bd8010 	pop	{r4, pc}
  13a52c:	0014b0c0 	.word	0x0014b0c0

0013a530 <syscall_msync>:
  13a530:	e92d4010 	push	{r4, lr}
  13a534:	e3a0100e 	mov	r1, #14
  13a538:	e59f0008 	ldr	r0, [pc, #8]	; 13a548 <syscall_msync+0x18>
  13a53c:	ebfffa92 	bl	138f8c <syscall_trace>
  13a540:	e3a00000 	mov	r0, #0
  13a544:	e8bd8010 	pop	{r4, pc}
  13a548:	0014b090 	.word	0x0014b090

0013a54c <syscall_flock>:
  13a54c:	e92d4010 	push	{r4, lr}
  13a550:	e3a0100e 	mov	r1, #14
  13a554:	e59f0008 	ldr	r0, [pc, #8]	; 13a564 <syscall_flock+0x18>
  13a558:	ebfffa8b 	bl	138f8c <syscall_trace>
  13a55c:	e3a00000 	mov	r0, #0
  13a560:	e8bd8010 	pop	{r4, pc}
  13a564:	0014b080 	.word	0x0014b080

0013a568 <syscall_setfsgid>:
  13a568:	e92d4010 	push	{r4, lr}
  13a56c:	e3a01011 	mov	r1, #17
  13a570:	e59f0008 	ldr	r0, [pc, #8]	; 13a580 <syscall_setfsgid+0x18>
  13a574:	ebfffa84 	bl	138f8c <syscall_trace>
  13a578:	e3a00000 	mov	r0, #0
  13a57c:	e8bd8010 	pop	{r4, pc}
  13a580:	0014b034 	.word	0x0014b034

0013a584 <syscall_setfsuid>:
  13a584:	e92d4010 	push	{r4, lr}
  13a588:	e3a01011 	mov	r1, #17
  13a58c:	e59f0008 	ldr	r0, [pc, #8]	; 13a59c <syscall_setfsuid+0x18>
  13a590:	ebfffa7d 	bl	138f8c <syscall_trace>
  13a594:	e3a00000 	mov	r0, #0
  13a598:	e8bd8010 	pop	{r4, pc}
  13a59c:	0014b020 	.word	0x0014b020

0013a5a0 <syscall_personality>:
  13a5a0:	e92d4010 	push	{r4, lr}
  13a5a4:	e3a01014 	mov	r1, #20
  13a5a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a5b8 <syscall_personality+0x18>
  13a5ac:	ebfffa76 	bl	138f8c <syscall_trace>
  13a5b0:	e3a00000 	mov	r0, #0
  13a5b4:	e8bd8010 	pop	{r4, pc}
  13a5b8:	0014b00c 	.word	0x0014b00c

0013a5bc <syscall_sysfs>:
  13a5bc:	e92d4010 	push	{r4, lr}
  13a5c0:	e3a0100e 	mov	r1, #14
  13a5c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a5d4 <syscall_sysfs+0x18>
  13a5c8:	ebfffa6f 	bl	138f8c <syscall_trace>
  13a5cc:	e3a00000 	mov	r0, #0
  13a5d0:	e8bd8010 	pop	{r4, pc}
  13a5d4:	0014affc 	.word	0x0014affc

0013a5d8 <syscall_bdflush>:
  13a5d8:	e92d4010 	push	{r4, lr}
  13a5dc:	e3a01010 	mov	r1, #16
  13a5e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a5f0 <syscall_bdflush+0x18>
  13a5e4:	ebfffa68 	bl	138f8c <syscall_trace>
  13a5e8:	e3a00000 	mov	r0, #0
  13a5ec:	e8bd8010 	pop	{r4, pc}
  13a5f0:	0014afec 	.word	0x0014afec

0013a5f4 <syscall_fchdir>:
  13a5f4:	e92d4010 	push	{r4, lr}
  13a5f8:	e3a0100f 	mov	r1, #15
  13a5fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a60c <syscall_fchdir+0x18>
  13a600:	ebfffa61 	bl	138f8c <syscall_trace>
  13a604:	e3a00000 	mov	r0, #0
  13a608:	e8bd8010 	pop	{r4, pc}
  13a60c:	0014afdc 	.word	0x0014afdc

0013a610 <syscall_getpgid>:
  13a610:	e92d4010 	push	{r4, lr}
  13a614:	e3a01010 	mov	r1, #16
  13a618:	e59f0008 	ldr	r0, [pc, #8]	; 13a628 <syscall_getpgid+0x18>
  13a61c:	ebfffa5a 	bl	138f8c <syscall_trace>
  13a620:	e3a00000 	mov	r0, #0
  13a624:	e8bd8010 	pop	{r4, pc}
  13a628:	0014afcc 	.word	0x0014afcc

0013a62c <syscall_quotactl>:
  13a62c:	e92d4010 	push	{r4, lr}
  13a630:	e3a01011 	mov	r1, #17
  13a634:	e59f0008 	ldr	r0, [pc, #8]	; 13a644 <syscall_quotactl+0x18>
  13a638:	ebfffa53 	bl	138f8c <syscall_trace>
  13a63c:	e3a00000 	mov	r0, #0
  13a640:	e8bd8010 	pop	{r4, pc}
  13a644:	0014afb8 	.word	0x0014afb8

0013a648 <syscall_delete_module>:
  13a648:	e92d4010 	push	{r4, lr}
  13a64c:	e3a01016 	mov	r1, #22
  13a650:	e59f0008 	ldr	r0, [pc, #8]	; 13a660 <syscall_delete_module+0x18>
  13a654:	ebfffa4c 	bl	138f8c <syscall_trace>
  13a658:	e3a00000 	mov	r0, #0
  13a65c:	e8bd8010 	pop	{r4, pc}
  13a660:	0014afa0 	.word	0x0014afa0

0013a664 <syscall_init_module>:
  13a664:	e92d4010 	push	{r4, lr}
  13a668:	e3a01014 	mov	r1, #20
  13a66c:	e59f0008 	ldr	r0, [pc, #8]	; 13a67c <syscall_init_module+0x18>
  13a670:	ebfffa45 	bl	138f8c <syscall_trace>
  13a674:	e3a00000 	mov	r0, #0
  13a678:	e8bd8010 	pop	{r4, pc}
  13a67c:	0014af8c 	.word	0x0014af8c

0013a680 <syscall_mprotect>:
  13a680:	e92d4010 	push	{r4, lr}
  13a684:	e3a01011 	mov	r1, #17
  13a688:	e59f0008 	ldr	r0, [pc, #8]	; 13a698 <syscall_mprotect+0x18>
  13a68c:	ebfffa3e 	bl	138f8c <syscall_trace>
  13a690:	e3a00000 	mov	r0, #0
  13a694:	e8bd8010 	pop	{r4, pc}
  13a698:	0014af64 	.word	0x0014af64

0013a69c <syscall_adjtimex>:
  13a69c:	e92d4010 	push	{r4, lr}
  13a6a0:	e3a01011 	mov	r1, #17
  13a6a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a6b4 <syscall_adjtimex+0x18>
  13a6a8:	ebfffa37 	bl	138f8c <syscall_trace>
  13a6ac:	e3a00000 	mov	r0, #0
  13a6b0:	e8bd8010 	pop	{r4, pc}
  13a6b4:	0014af50 	.word	0x0014af50

0013a6b8 <syscall_uname>:
  13a6b8:	e92d4010 	push	{r4, lr}
  13a6bc:	e3a0100e 	mov	r1, #14
  13a6c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a6d0 <syscall_uname+0x18>
  13a6c4:	ebfffa30 	bl	138f8c <syscall_trace>
  13a6c8:	e3a00000 	mov	r0, #0
  13a6cc:	e8bd8010 	pop	{r4, pc}
  13a6d0:	0014af40 	.word	0x0014af40

0013a6d4 <syscall_setdomainname>:
  13a6d4:	e92d4010 	push	{r4, lr}
  13a6d8:	e3a01016 	mov	r1, #22
  13a6dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a6ec <syscall_setdomainname+0x18>
  13a6e0:	ebfffa29 	bl	138f8c <syscall_trace>
  13a6e4:	e3a00000 	mov	r0, #0
  13a6e8:	e8bd8010 	pop	{r4, pc}
  13a6ec:	0014af28 	.word	0x0014af28

0013a6f0 <syscall_clone>:
  13a6f0:	e92d4010 	push	{r4, lr}
  13a6f4:	e3a0100e 	mov	r1, #14
  13a6f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a708 <syscall_clone+0x18>
  13a6fc:	ebfffa22 	bl	138f8c <syscall_trace>
  13a700:	e3a00000 	mov	r0, #0
  13a704:	e8bd8010 	pop	{r4, pc}
  13a708:	0014af18 	.word	0x0014af18

0013a70c <syscall_sigreturn>:
  13a70c:	e92d4010 	push	{r4, lr}
  13a710:	e3a01012 	mov	r1, #18
  13a714:	e59f0008 	ldr	r0, [pc, #8]	; 13a724 <syscall_sigreturn+0x18>
  13a718:	ebfffa1b 	bl	138f8c <syscall_trace>
  13a71c:	e3a00000 	mov	r0, #0
  13a720:	e8bd8010 	pop	{r4, pc}
  13a724:	0014af04 	.word	0x0014af04

0013a728 <syscall_sysinfo>:
  13a728:	e92d4010 	push	{r4, lr}
  13a72c:	e3a01010 	mov	r1, #16
  13a730:	e59f0008 	ldr	r0, [pc, #8]	; 13a740 <syscall_sysinfo+0x18>
  13a734:	ebfffa14 	bl	138f8c <syscall_trace>
  13a738:	e3a00000 	mov	r0, #0
  13a73c:	e8bd8010 	pop	{r4, pc}
  13a740:	0014aee4 	.word	0x0014aee4

0013a744 <syscall_swapoff>:
  13a744:	e92d4010 	push	{r4, lr}
  13a748:	e3a01010 	mov	r1, #16
  13a74c:	e59f0008 	ldr	r0, [pc, #8]	; 13a75c <syscall_swapoff+0x18>
  13a750:	ebfffa0d 	bl	138f8c <syscall_trace>
  13a754:	e3a00000 	mov	r0, #0
  13a758:	e8bd8010 	pop	{r4, pc}
  13a75c:	0014aed4 	.word	0x0014aed4

0013a760 <syscall_wait4>:
  13a760:	e92d4010 	push	{r4, lr}
  13a764:	e3a0100e 	mov	r1, #14
  13a768:	e59f0008 	ldr	r0, [pc, #8]	; 13a778 <syscall_wait4+0x18>
  13a76c:	ebfffa06 	bl	138f8c <syscall_trace>
  13a770:	e3a00000 	mov	r0, #0
  13a774:	e8bd8010 	pop	{r4, pc}
  13a778:	0014aec4 	.word	0x0014aec4

0013a77c <syscall_vhangup>:
  13a77c:	e92d4010 	push	{r4, lr}
  13a780:	e3a01010 	mov	r1, #16
  13a784:	e59f0008 	ldr	r0, [pc, #8]	; 13a794 <syscall_vhangup+0x18>
  13a788:	ebfff9ff 	bl	138f8c <syscall_trace>
  13a78c:	e3a00000 	mov	r0, #0
  13a790:	e8bd8010 	pop	{r4, pc}
  13a794:	0014aeb4 	.word	0x0014aeb4

0013a798 <syscall_fstat>:
  13a798:	e92d4010 	push	{r4, lr}
  13a79c:	e3a0100e 	mov	r1, #14
  13a7a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a7b0 <syscall_fstat+0x18>
  13a7a4:	ebfff9f8 	bl	138f8c <syscall_trace>
  13a7a8:	e3a00000 	mov	r0, #0
  13a7ac:	e8bd8010 	pop	{r4, pc}
  13a7b0:	0014aea4 	.word	0x0014aea4

0013a7b4 <syscall_getitimer>:
  13a7b4:	e92d4010 	push	{r4, lr}
  13a7b8:	e3a01012 	mov	r1, #18
  13a7bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a7cc <syscall_getitimer+0x18>
  13a7c0:	ebfff9f1 	bl	138f8c <syscall_trace>
  13a7c4:	e3a00000 	mov	r0, #0
  13a7c8:	e8bd8010 	pop	{r4, pc}
  13a7cc:	0014ae70 	.word	0x0014ae70

0013a7d0 <syscall_setitimer>:
  13a7d0:	e92d4010 	push	{r4, lr}
  13a7d4:	e3a01012 	mov	r1, #18
  13a7d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a7e8 <syscall_setitimer+0x18>
  13a7dc:	ebfff9ea 	bl	138f8c <syscall_trace>
  13a7e0:	e3a00000 	mov	r0, #0
  13a7e4:	e8bd8010 	pop	{r4, pc}
  13a7e8:	0014ae5c 	.word	0x0014ae5c

0013a7ec <syscall_syslog>:
  13a7ec:	e92d4010 	push	{r4, lr}
  13a7f0:	e3a0100f 	mov	r1, #15
  13a7f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a804 <syscall_syslog+0x18>
  13a7f8:	ebfff9e3 	bl	138f8c <syscall_trace>
  13a7fc:	e3a00000 	mov	r0, #0
  13a800:	e8bd8010 	pop	{r4, pc}
  13a804:	0014ae4c 	.word	0x0014ae4c

0013a808 <syscall_fstatfs>:
  13a808:	e92d4010 	push	{r4, lr}
  13a80c:	e3a01010 	mov	r1, #16
  13a810:	e59f0008 	ldr	r0, [pc, #8]	; 13a820 <syscall_fstatfs+0x18>
  13a814:	ebfff9dc 	bl	138f8c <syscall_trace>
  13a818:	e3a00000 	mov	r0, #0
  13a81c:	e8bd8010 	pop	{r4, pc}
  13a820:	0014ae3c 	.word	0x0014ae3c

0013a824 <syscall_statfs>:
  13a824:	e92d4010 	push	{r4, lr}
  13a828:	e3a0100f 	mov	r1, #15
  13a82c:	e59f0008 	ldr	r0, [pc, #8]	; 13a83c <syscall_statfs+0x18>
  13a830:	ebfff9d5 	bl	138f8c <syscall_trace>
  13a834:	e3a00000 	mov	r0, #0
  13a838:	e8bd8010 	pop	{r4, pc}
  13a83c:	0014ae2c 	.word	0x0014ae2c

0013a840 <syscall_setpriority>:
  13a840:	e92d4010 	push	{r4, lr}
  13a844:	e3a01014 	mov	r1, #20
  13a848:	e59f0008 	ldr	r0, [pc, #8]	; 13a858 <syscall_setpriority+0x18>
  13a84c:	ebfff9ce 	bl	138f8c <syscall_trace>
  13a850:	e3a00000 	mov	r0, #0
  13a854:	e8bd8010 	pop	{r4, pc}
  13a858:	0014ae18 	.word	0x0014ae18

0013a85c <syscall_getpriority>:
  13a85c:	e92d4010 	push	{r4, lr}
  13a860:	e3a01014 	mov	r1, #20
  13a864:	e59f0008 	ldr	r0, [pc, #8]	; 13a874 <syscall_getpriority+0x18>
  13a868:	ebfff9c7 	bl	138f8c <syscall_trace>
  13a86c:	e3a00000 	mov	r0, #0
  13a870:	e8bd8010 	pop	{r4, pc}
  13a874:	0014ae04 	.word	0x0014ae04

0013a878 <syscall_fchown>:
  13a878:	e92d4010 	push	{r4, lr}
  13a87c:	e3a0100f 	mov	r1, #15
  13a880:	e59f0008 	ldr	r0, [pc, #8]	; 13a890 <syscall_fchown+0x18>
  13a884:	ebfff9c0 	bl	138f8c <syscall_trace>
  13a888:	e3a00000 	mov	r0, #0
  13a88c:	e8bd8010 	pop	{r4, pc}
  13a890:	0014adf4 	.word	0x0014adf4

0013a894 <syscall_fchmod>:
  13a894:	e92d4010 	push	{r4, lr}
  13a898:	e3a0100f 	mov	r1, #15
  13a89c:	e59f0008 	ldr	r0, [pc, #8]	; 13a8ac <syscall_fchmod+0x18>
  13a8a0:	ebfff9b9 	bl	138f8c <syscall_trace>
  13a8a4:	e3a00000 	mov	r0, #0
  13a8a8:	e8bd8010 	pop	{r4, pc}
  13a8ac:	0014ade4 	.word	0x0014ade4

0013a8b0 <syscall_ftruncate>:
  13a8b0:	e92d4010 	push	{r4, lr}
  13a8b4:	e3a01012 	mov	r1, #18
  13a8b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a8c8 <syscall_ftruncate+0x18>
  13a8bc:	ebfff9b2 	bl	138f8c <syscall_trace>
  13a8c0:	e3a00000 	mov	r0, #0
  13a8c4:	e8bd8010 	pop	{r4, pc}
  13a8c8:	0014add0 	.word	0x0014add0

0013a8cc <syscall_truncate>:
  13a8cc:	e92d4010 	push	{r4, lr}
  13a8d0:	e3a01011 	mov	r1, #17
  13a8d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a8e4 <syscall_truncate+0x18>
  13a8d8:	ebfff9ab 	bl	138f8c <syscall_trace>
  13a8dc:	e3a00000 	mov	r0, #0
  13a8e0:	e8bd8010 	pop	{r4, pc}
  13a8e4:	0014adbc 	.word	0x0014adbc

0013a8e8 <syscall_reboot>:
  13a8e8:	e92d4010 	push	{r4, lr}
  13a8ec:	e3a0100f 	mov	r1, #15
  13a8f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a900 <syscall_reboot+0x18>
  13a8f4:	ebfff9a4 	bl	138f8c <syscall_trace>
  13a8f8:	e3a00000 	mov	r0, #0
  13a8fc:	e8bd8010 	pop	{r4, pc}
  13a900:	0014ad9c 	.word	0x0014ad9c

0013a904 <syscall_swapon>:
  13a904:	e92d4010 	push	{r4, lr}
  13a908:	e3a0100f 	mov	r1, #15
  13a90c:	e59f0008 	ldr	r0, [pc, #8]	; 13a91c <syscall_swapon+0x18>
  13a910:	ebfff99d 	bl	138f8c <syscall_trace>
  13a914:	e3a00000 	mov	r0, #0
  13a918:	e8bd8010 	pop	{r4, pc}
  13a91c:	0014ad8c 	.word	0x0014ad8c

0013a920 <syscall_uselib>:
  13a920:	e92d4010 	push	{r4, lr}
  13a924:	e3a0100f 	mov	r1, #15
  13a928:	e59f0008 	ldr	r0, [pc, #8]	; 13a938 <syscall_uselib+0x18>
  13a92c:	ebfff996 	bl	138f8c <syscall_trace>
  13a930:	e3a00000 	mov	r0, #0
  13a934:	e8bd8010 	pop	{r4, pc}
  13a938:	0014ad7c 	.word	0x0014ad7c

0013a93c <syscall_symlink>:
  13a93c:	e92d4010 	push	{r4, lr}
  13a940:	e3a01010 	mov	r1, #16
  13a944:	e59f0008 	ldr	r0, [pc, #8]	; 13a954 <syscall_symlink+0x18>
  13a948:	ebfff98f 	bl	138f8c <syscall_trace>
  13a94c:	e3a00000 	mov	r0, #0
  13a950:	e8bd8010 	pop	{r4, pc}
  13a954:	0014ad58 	.word	0x0014ad58

0013a958 <syscall_setgroups>:
  13a958:	e92d4010 	push	{r4, lr}
  13a95c:	e3a01012 	mov	r1, #18
  13a960:	e59f0008 	ldr	r0, [pc, #8]	; 13a970 <syscall_setgroups+0x18>
  13a964:	ebfff988 	bl	138f8c <syscall_trace>
  13a968:	e3a00000 	mov	r0, #0
  13a96c:	e8bd8010 	pop	{r4, pc}
  13a970:	0014ad44 	.word	0x0014ad44

0013a974 <syscall_getgroups>:
  13a974:	e92d4010 	push	{r4, lr}
  13a978:	e3a01012 	mov	r1, #18
  13a97c:	e59f0008 	ldr	r0, [pc, #8]	; 13a98c <syscall_getgroups+0x18>
  13a980:	ebfff981 	bl	138f8c <syscall_trace>
  13a984:	e3a00000 	mov	r0, #0
  13a988:	e8bd8010 	pop	{r4, pc}
  13a98c:	0014ad30 	.word	0x0014ad30

0013a990 <syscall_settimeofday>:
  13a990:	e92d4010 	push	{r4, lr}
  13a994:	e3a01015 	mov	r1, #21
  13a998:	e59f0008 	ldr	r0, [pc, #8]	; 13a9a8 <syscall_settimeofday+0x18>
  13a99c:	ebfff97a 	bl	138f8c <syscall_trace>
  13a9a0:	e3a00000 	mov	r0, #0
  13a9a4:	e8bd8010 	pop	{r4, pc}
  13a9a8:	0014ad18 	.word	0x0014ad18

0013a9ac <syscall_gettimeofday>:
  13a9ac:	e92d4010 	push	{r4, lr}
  13a9b0:	e3a01015 	mov	r1, #21
  13a9b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a9c4 <syscall_gettimeofday+0x18>
  13a9b8:	ebfff973 	bl	138f8c <syscall_trace>
  13a9bc:	e3a00000 	mov	r0, #0
  13a9c0:	e8bd8010 	pop	{r4, pc}
  13a9c4:	0014ad00 	.word	0x0014ad00

0013a9c8 <syscall_getrusage>:
  13a9c8:	e92d4010 	push	{r4, lr}
  13a9cc:	e3a01012 	mov	r1, #18
  13a9d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a9e0 <syscall_getrusage+0x18>
  13a9d4:	ebfff96c 	bl	138f8c <syscall_trace>
  13a9d8:	e3a00000 	mov	r0, #0
  13a9dc:	e8bd8010 	pop	{r4, pc}
  13a9e0:	0014acec 	.word	0x0014acec

0013a9e4 <syscall_sethostname>:
  13a9e4:	e92d4010 	push	{r4, lr}
  13a9e8:	e3a01014 	mov	r1, #20
  13a9ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a9fc <syscall_sethostname+0x18>
  13a9f0:	ebfff965 	bl	138f8c <syscall_trace>
  13a9f4:	e3a00000 	mov	r0, #0
  13a9f8:	e8bd8010 	pop	{r4, pc}
  13a9fc:	0014acc4 	.word	0x0014acc4

0013aa00 <syscall_sigpending>:
  13aa00:	e92d4010 	push	{r4, lr}
  13aa04:	e3a01013 	mov	r1, #19
  13aa08:	e59f0008 	ldr	r0, [pc, #8]	; 13aa18 <syscall_sigpending+0x18>
  13aa0c:	ebfff95e 	bl	138f8c <syscall_trace>
  13aa10:	e3a00000 	mov	r0, #0
  13aa14:	e8bd8010 	pop	{r4, pc}
  13aa18:	0014acb0 	.word	0x0014acb0

0013aa1c <syscall_sigsuspend>:
  13aa1c:	e92d4010 	push	{r4, lr}
  13aa20:	e3a01013 	mov	r1, #19
  13aa24:	e59f0008 	ldr	r0, [pc, #8]	; 13aa34 <syscall_sigsuspend+0x18>
  13aa28:	ebfff957 	bl	138f8c <syscall_trace>
  13aa2c:	e3a00000 	mov	r0, #0
  13aa30:	e8bd8010 	pop	{r4, pc}
  13aa34:	0014ac9c 	.word	0x0014ac9c

0013aa38 <syscall_setregid>:
  13aa38:	e92d4010 	push	{r4, lr}
  13aa3c:	e3a01011 	mov	r1, #17
  13aa40:	e59f0008 	ldr	r0, [pc, #8]	; 13aa50 <syscall_setregid+0x18>
  13aa44:	ebfff950 	bl	138f8c <syscall_trace>
  13aa48:	e3a00000 	mov	r0, #0
  13aa4c:	e8bd8010 	pop	{r4, pc}
  13aa50:	0014ac88 	.word	0x0014ac88

0013aa54 <syscall_setreuid>:
  13aa54:	e92d4010 	push	{r4, lr}
  13aa58:	e3a01011 	mov	r1, #17
  13aa5c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa6c <syscall_setreuid+0x18>
  13aa60:	ebfff949 	bl	138f8c <syscall_trace>
  13aa64:	e3a00000 	mov	r0, #0
  13aa68:	e8bd8010 	pop	{r4, pc}
  13aa6c:	0014ac74 	.word	0x0014ac74

0013aa70 <syscall_getpgrp>:
  13aa70:	e92d4010 	push	{r4, lr}
  13aa74:	e3a01010 	mov	r1, #16
  13aa78:	e59f0008 	ldr	r0, [pc, #8]	; 13aa88 <syscall_getpgrp+0x18>
  13aa7c:	ebfff942 	bl	138f8c <syscall_trace>
  13aa80:	e3a00000 	mov	r0, #0
  13aa84:	e8bd8010 	pop	{r4, pc}
  13aa88:	0014ac40 	.word	0x0014ac40

0013aa8c <syscall_getppid>:
  13aa8c:	e92d4010 	push	{r4, lr}
  13aa90:	e3a01010 	mov	r1, #16
  13aa94:	e59f0008 	ldr	r0, [pc, #8]	; 13aaa4 <syscall_getppid+0x18>
  13aa98:	ebfff93b 	bl	138f8c <syscall_trace>
  13aa9c:	e3a00000 	mov	r0, #0
  13aaa0:	e8bd8010 	pop	{r4, pc}
  13aaa4:	0014ac30 	.word	0x0014ac30

0013aaa8 <syscall_ustat>:
  13aaa8:	e92d4010 	push	{r4, lr}
  13aaac:	e3a0100e 	mov	r1, #14
  13aab0:	e59f0008 	ldr	r0, [pc, #8]	; 13aac0 <syscall_ustat+0x18>
  13aab4:	ebfff934 	bl	138f8c <syscall_trace>
  13aab8:	e3a00000 	mov	r0, #0
  13aabc:	e8bd8010 	pop	{r4, pc}
  13aac0:	0014ac10 	.word	0x0014ac10

0013aac4 <syscall_chroot>:
  13aac4:	e92d4010 	push	{r4, lr}
  13aac8:	e3a0100f 	mov	r1, #15
  13aacc:	e59f0008 	ldr	r0, [pc, #8]	; 13aadc <syscall_chroot+0x18>
  13aad0:	ebfff92d 	bl	138f8c <syscall_trace>
  13aad4:	e3a00000 	mov	r0, #0
  13aad8:	e8bd8010 	pop	{r4, pc}
  13aadc:	0014ac00 	.word	0x0014ac00

0013aae0 <syscall_umask>:
  13aae0:	e92d4010 	push	{r4, lr}
  13aae4:	e3a0100e 	mov	r1, #14
  13aae8:	e59f0008 	ldr	r0, [pc, #8]	; 13aaf8 <syscall_umask+0x18>
  13aaec:	ebfff926 	bl	138f8c <syscall_trace>
  13aaf0:	e3a00000 	mov	r0, #0
  13aaf4:	e8bd8010 	pop	{r4, pc}
  13aaf8:	0014abf0 	.word	0x0014abf0

0013aafc <syscall_setpgid>:
  13aafc:	e92d4010 	push	{r4, lr}
  13ab00:	e3a01010 	mov	r1, #16
  13ab04:	e59f0008 	ldr	r0, [pc, #8]	; 13ab14 <syscall_setpgid+0x18>
  13ab08:	ebfff91f 	bl	138f8c <syscall_trace>
  13ab0c:	e3a00000 	mov	r0, #0
  13ab10:	e8bd8010 	pop	{r4, pc}
  13ab14:	0014abe0 	.word	0x0014abe0

0013ab18 <syscall_umount2>:
  13ab18:	e92d4010 	push	{r4, lr}
  13ab1c:	e3a01010 	mov	r1, #16
  13ab20:	e59f0008 	ldr	r0, [pc, #8]	; 13ab30 <syscall_umount2+0x18>
  13ab24:	ebfff918 	bl	138f8c <syscall_trace>
  13ab28:	e3a00000 	mov	r0, #0
  13ab2c:	e8bd8010 	pop	{r4, pc}
  13ab30:	0014abb0 	.word	0x0014abb0

0013ab34 <syscall_acct>:
  13ab34:	e92d4010 	push	{r4, lr}
  13ab38:	e3a0100d 	mov	r1, #13
  13ab3c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab4c <syscall_acct+0x18>
  13ab40:	ebfff911 	bl	138f8c <syscall_trace>
  13ab44:	e3a00000 	mov	r0, #0
  13ab48:	e8bd8010 	pop	{r4, pc}
  13ab4c:	0014aba0 	.word	0x0014aba0

0013ab50 <syscall_getegid>:
  13ab50:	e92d4010 	push	{r4, lr}
  13ab54:	e3a01010 	mov	r1, #16
  13ab58:	e59f0008 	ldr	r0, [pc, #8]	; 13ab68 <syscall_getegid+0x18>
  13ab5c:	ebfff90a 	bl	138f8c <syscall_trace>
  13ab60:	e3a00000 	mov	r0, #0
  13ab64:	e8bd8010 	pop	{r4, pc}
  13ab68:	0014ab90 	.word	0x0014ab90

0013ab6c <syscall_geteuid>:
  13ab6c:	e92d4010 	push	{r4, lr}
  13ab70:	e3a01010 	mov	r1, #16
  13ab74:	e59f0008 	ldr	r0, [pc, #8]	; 13ab84 <syscall_geteuid+0x18>
  13ab78:	ebfff903 	bl	138f8c <syscall_trace>
  13ab7c:	e3a00000 	mov	r0, #0
  13ab80:	e8bd8010 	pop	{r4, pc}
  13ab84:	0014ab80 	.word	0x0014ab80

0013ab88 <syscall_getgid>:
  13ab88:	e92d4010 	push	{r4, lr}
  13ab8c:	e3a0100f 	mov	r1, #15
  13ab90:	e59f0008 	ldr	r0, [pc, #8]	; 13aba0 <syscall_getgid+0x18>
  13ab94:	ebfff8fc 	bl	138f8c <syscall_trace>
  13ab98:	e3a00000 	mov	r0, #0
  13ab9c:	e8bd8010 	pop	{r4, pc}
  13aba0:	0014ab70 	.word	0x0014ab70

0013aba4 <syscall_setgid>:
  13aba4:	e92d4010 	push	{r4, lr}
  13aba8:	e3a0100f 	mov	r1, #15
  13abac:	e59f0008 	ldr	r0, [pc, #8]	; 13abbc <syscall_setgid+0x18>
  13abb0:	ebfff8f5 	bl	138f8c <syscall_trace>
  13abb4:	e3a00000 	mov	r0, #0
  13abb8:	e8bd8010 	pop	{r4, pc}
  13abbc:	0014ab60 	.word	0x0014ab60

0013abc0 <syscall_times>:
  13abc0:	e92d4010 	push	{r4, lr}
  13abc4:	e3a0100e 	mov	r1, #14
  13abc8:	e59f0008 	ldr	r0, [pc, #8]	; 13abd8 <syscall_times+0x18>
  13abcc:	ebfff8ee 	bl	138f8c <syscall_trace>
  13abd0:	e3a00000 	mov	r0, #0
  13abd4:	e8bd8010 	pop	{r4, pc}
  13abd8:	0014ab44 	.word	0x0014ab44

0013abdc <syscall_sync>:
  13abdc:	e92d4010 	push	{r4, lr}
  13abe0:	e3a0100d 	mov	r1, #13
  13abe4:	e59f0008 	ldr	r0, [pc, #8]	; 13abf4 <syscall_sync+0x18>
  13abe8:	ebfff8e7 	bl	138f8c <syscall_trace>
  13abec:	e3a00000 	mov	r0, #0
  13abf0:	e8bd8010 	pop	{r4, pc}
  13abf4:	0014aad8 	.word	0x0014aad8

0013abf8 <syscall_nice>:
  13abf8:	e92d4010 	push	{r4, lr}
  13abfc:	e3a0100d 	mov	r1, #13
  13ac00:	e59f0008 	ldr	r0, [pc, #8]	; 13ac10 <syscall_nice+0x18>
  13ac04:	ebfff8e0 	bl	138f8c <syscall_trace>
  13ac08:	e3a00000 	mov	r0, #0
  13ac0c:	e8bd8010 	pop	{r4, pc}
  13ac10:	0014aac8 	.word	0x0014aac8

0013ac14 <syscall_pause>:
  13ac14:	e92d4010 	push	{r4, lr}
  13ac18:	e3a0100e 	mov	r1, #14
  13ac1c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac2c <syscall_pause+0x18>
  13ac20:	ebfff8d9 	bl	138f8c <syscall_trace>
  13ac24:	e3a00000 	mov	r0, #0
  13ac28:	e8bd8010 	pop	{r4, pc}
  13ac2c:	0014aaa8 	.word	0x0014aaa8

0013ac30 <syscall_ptrace>:
  13ac30:	e92d4010 	push	{r4, lr}
  13ac34:	e3a0100f 	mov	r1, #15
  13ac38:	e59f0008 	ldr	r0, [pc, #8]	; 13ac48 <syscall_ptrace+0x18>
  13ac3c:	ebfff8d2 	bl	138f8c <syscall_trace>
  13ac40:	e3a00000 	mov	r0, #0
  13ac44:	e8bd8010 	pop	{r4, pc}
  13ac48:	0014aa98 	.word	0x0014aa98

0013ac4c <syscall_getuid>:
  13ac4c:	e92d4010 	push	{r4, lr}
  13ac50:	e3a0100f 	mov	r1, #15
  13ac54:	e59f0008 	ldr	r0, [pc, #8]	; 13ac64 <syscall_getuid+0x18>
  13ac58:	ebfff8cb 	bl	138f8c <syscall_trace>
  13ac5c:	e3a00000 	mov	r0, #0
  13ac60:	e8bd8010 	pop	{r4, pc}
  13ac64:	0014aa88 	.word	0x0014aa88

0013ac68 <syscall_setuid>:
  13ac68:	e92d4010 	push	{r4, lr}
  13ac6c:	e3a0100f 	mov	r1, #15
  13ac70:	e59f0008 	ldr	r0, [pc, #8]	; 13ac80 <syscall_setuid+0x18>
  13ac74:	ebfff8c4 	bl	138f8c <syscall_trace>
  13ac78:	e3a00000 	mov	r0, #0
  13ac7c:	e8bd8010 	pop	{r4, pc}
  13ac80:	0014aa78 	.word	0x0014aa78

0013ac84 <syscall_mount>:
  13ac84:	e92d4010 	push	{r4, lr}
  13ac88:	e3a0100e 	mov	r1, #14
  13ac8c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac9c <syscall_mount+0x18>
  13ac90:	ebfff8bd 	bl	138f8c <syscall_trace>
  13ac94:	e3a00000 	mov	r0, #0
  13ac98:	e8bd8010 	pop	{r4, pc}
  13ac9c:	0014aa68 	.word	0x0014aa68

0013aca0 <syscall_lchown>:
  13aca0:	e92d4010 	push	{r4, lr}
  13aca4:	e3a0100f 	mov	r1, #15
  13aca8:	e59f0008 	ldr	r0, [pc, #8]	; 13acb8 <syscall_lchown+0x18>
  13acac:	ebfff8b6 	bl	138f8c <syscall_trace>
  13acb0:	e3a00000 	mov	r0, #0
  13acb4:	e8bd8010 	pop	{r4, pc}
  13acb8:	0014aa38 	.word	0x0014aa38

0013acbc <syscall_chmod>:
  13acbc:	e92d4010 	push	{r4, lr}
  13acc0:	e3a0100e 	mov	r1, #14
  13acc4:	e59f0008 	ldr	r0, [pc, #8]	; 13acd4 <syscall_chmod+0x18>
  13acc8:	ebfff8af 	bl	138f8c <syscall_trace>
  13accc:	e3a00000 	mov	r0, #0
  13acd0:	e8bd8010 	pop	{r4, pc}
  13acd4:	0014aa28 	.word	0x0014aa28

0013acd8 <syscall_mknod>:
  13acd8:	e92d4010 	push	{r4, lr}
  13acdc:	e3a0100e 	mov	r1, #14
  13ace0:	e59f0008 	ldr	r0, [pc, #8]	; 13acf0 <syscall_mknod+0x18>
  13ace4:	ebfff8a8 	bl	138f8c <syscall_trace>
  13ace8:	e3a00000 	mov	r0, #0
  13acec:	e8bd8010 	pop	{r4, pc}
  13acf0:	0014aa18 	.word	0x0014aa18

0013acf4 <syscall_link>:
  13acf4:	e92d4010 	push	{r4, lr}
  13acf8:	e3a0100d 	mov	r1, #13
  13acfc:	e59f0008 	ldr	r0, [pc, #8]	; 13ad0c <syscall_link+0x18>
  13ad00:	ebfff8a1 	bl	138f8c <syscall_trace>
  13ad04:	e3a00000 	mov	r0, #0
  13ad08:	e8bd8010 	pop	{r4, pc}
  13ad0c:	0014a9d8 	.word	0x0014a9d8

0013ad10 <syscall_creat>:
  13ad10:	e92d4010 	push	{r4, lr}
  13ad14:	e3a0100e 	mov	r1, #14
  13ad18:	e59f0008 	ldr	r0, [pc, #8]	; 13ad28 <syscall_creat+0x18>
  13ad1c:	ebfff89a 	bl	138f8c <syscall_trace>
  13ad20:	e3a00000 	mov	r0, #0
  13ad24:	e8bd8010 	pop	{r4, pc}
  13ad28:	0014a9c8 	.word	0x0014a9c8

0013ad2c <syscall_restart_syscall>:
  13ad2c:	e92d4010 	push	{r4, lr}
  13ad30:	e3a01018 	mov	r1, #24
  13ad34:	e59f0008 	ldr	r0, [pc, #8]	; 13ad44 <syscall_restart_syscall+0x18>
  13ad38:	ebfff893 	bl	138f8c <syscall_trace>
  13ad3c:	e3a00000 	mov	r0, #0
  13ad40:	e8bd8010 	pop	{r4, pc}
  13ad44:	0014a950 	.word	0x0014a950

0013ad48 <syscall_debug>:
  13ad48:	e92d4070 	push	{r4, r5, r6, lr}
  13ad4c:	e1a04000 	mov	r4, r0
  13ad50:	e1a05001 	mov	r5, r1
  13ad54:	e3a0201d 	mov	r2, #29
  13ad58:	e59f1018 	ldr	r1, [pc, #24]	; 13ad78 <syscall_debug+0x30>
  13ad5c:	e3a000ff 	mov	r0, #255	; 0xff
  13ad60:	eb0004f9 	bl	13c14c <syscall>
  13ad64:	e1a02005 	mov	r2, r5
  13ad68:	e1a01004 	mov	r1, r4
  13ad6c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ad70:	e3a000ff 	mov	r0, #255	; 0xff
  13ad74:	ea0004f4 	b	13c14c <syscall>
  13ad78:	0014c410 	.word	0x0014c410

0013ad7c <syscall_shmdt>:
  13ad7c:	e92d4010 	push	{r4, lr}
  13ad80:	e1a04000 	mov	r4, r0
  13ad84:	e3a0100e 	mov	r1, #14
  13ad88:	e59f0010 	ldr	r0, [pc, #16]	; 13ada0 <syscall_shmdt+0x24>
  13ad8c:	ebffffed 	bl	13ad48 <syscall_debug>
  13ad90:	e1a01004 	mov	r1, r4
  13ad94:	e8bd4010 	pop	{r4, lr}
  13ad98:	e59f0004 	ldr	r0, [pc, #4]	; 13ada4 <syscall_shmdt+0x28>
  13ad9c:	ea0004ea 	b	13c14c <syscall>
  13ada0:	0014bca8 	.word	0x0014bca8
  13ada4:	00000132 	.word	0x00000132

0013ada8 <syscall_set_tid_address>:
  13ada8:	e92d4010 	push	{r4, lr}
  13adac:	e1a04000 	mov	r4, r0
  13adb0:	e3a01018 	mov	r1, #24
  13adb4:	e59f0010 	ldr	r0, [pc, #16]	; 13adcc <syscall_set_tid_address+0x24>
  13adb8:	ebffffe2 	bl	13ad48 <syscall_debug>
  13adbc:	e1a01004 	mov	r1, r4
  13adc0:	e8bd4010 	pop	{r4, lr}
  13adc4:	e3a0007c 	mov	r0, #124	; 0x7c
  13adc8:	ea0004df 	b	13c14c <syscall>
  13adcc:	0014b8c8 	.word	0x0014b8c8

0013add0 <syscall_exit_group>:
  13add0:	e92d4010 	push	{r4, lr}
  13add4:	e1a04000 	mov	r4, r0
  13add8:	e3a01013 	mov	r1, #19
  13addc:	e59f0010 	ldr	r0, [pc, #16]	; 13adf4 <syscall_exit_group+0x24>
  13ade0:	ebffffd8 	bl	13ad48 <syscall_debug>
  13ade4:	e1a01004 	mov	r1, r4
  13ade8:	e8bd4010 	pop	{r4, lr}
  13adec:	e3a00062 	mov	r0, #98	; 0x62
  13adf0:	ea0004d5 	b	13c14c <syscall>
  13adf4:	0014b840 	.word	0x0014b840

0013adf8 <syscall_sched_get_priority_min>:
  13adf8:	e92d4010 	push	{r4, lr}
  13adfc:	e1a04000 	mov	r4, r0
  13ae00:	e3a0101f 	mov	r1, #31
  13ae04:	e59f0010 	ldr	r0, [pc, #16]	; 13ae1c <syscall_sched_get_priority_min+0x24>
  13ae08:	ebffffce 	bl	13ad48 <syscall_debug>
  13ae0c:	e1a01004 	mov	r1, r4
  13ae10:	e8bd4010 	pop	{r4, lr}
  13ae14:	e3a00097 	mov	r0, #151	; 0x97
  13ae18:	ea0004cb 	b	13c14c <syscall>
  13ae1c:	0014b1d8 	.word	0x0014b1d8

0013ae20 <syscall_sched_get_priority_max>:
  13ae20:	e92d4010 	push	{r4, lr}
  13ae24:	e1a04000 	mov	r4, r0
  13ae28:	e3a0101f 	mov	r1, #31
  13ae2c:	e59f0010 	ldr	r0, [pc, #16]	; 13ae44 <syscall_sched_get_priority_max+0x24>
  13ae30:	ebffffc4 	bl	13ad48 <syscall_debug>
  13ae34:	e1a01004 	mov	r1, r4
  13ae38:	e8bd4010 	pop	{r4, lr}
  13ae3c:	e3a00096 	mov	r0, #150	; 0x96
  13ae40:	ea0004c1 	b	13c14c <syscall>
  13ae44:	0014b1b8 	.word	0x0014b1b8

0013ae48 <syscall_fsync>:
  13ae48:	e92d4010 	push	{r4, lr}
  13ae4c:	e1a04000 	mov	r4, r0
  13ae50:	e3a0100e 	mov	r1, #14
  13ae54:	e59f0010 	ldr	r0, [pc, #16]	; 13ae6c <syscall_fsync+0x24>
  13ae58:	ebffffba 	bl	13ad48 <syscall_debug>
  13ae5c:	e1a01004 	mov	r1, r4
  13ae60:	e8bd4010 	pop	{r4, lr}
  13ae64:	e3a0009b 	mov	r0, #155	; 0x9b
  13ae68:	ea0004b7 	b	13c14c <syscall>
  13ae6c:	0014aef4 	.word	0x0014aef4

0013ae70 <syscall_brk>:
  13ae70:	e92d4010 	push	{r4, lr}
  13ae74:	e1a04000 	mov	r4, r0
  13ae78:	e3a0100c 	mov	r1, #12
  13ae7c:	e59f0010 	ldr	r0, [pc, #16]	; 13ae94 <syscall_brk+0x24>
  13ae80:	ebffffb0 	bl	13ad48 <syscall_debug>
  13ae84:	e1a01004 	mov	r1, r4
  13ae88:	e8bd4010 	pop	{r4, lr}
  13ae8c:	e3a00034 	mov	r0, #52	; 0x34
  13ae90:	ea0004ad 	b	13c14c <syscall>
  13ae94:	0014ab54 	.word	0x0014ab54

0013ae98 <syscall_pipe>:
  13ae98:	e92d4010 	push	{r4, lr}
  13ae9c:	e1a04000 	mov	r4, r0
  13aea0:	e3a0100d 	mov	r1, #13
  13aea4:	e59f0010 	ldr	r0, [pc, #16]	; 13aebc <syscall_pipe+0x24>
  13aea8:	ebffffa6 	bl	13ad48 <syscall_debug>
  13aeac:	e1a01004 	mov	r1, r4
  13aeb0:	e8bd4010 	pop	{r4, lr}
  13aeb4:	e3a0007e 	mov	r0, #126	; 0x7e
  13aeb8:	ea0004a3 	b	13c14c <syscall>
  13aebc:	0014ab34 	.word	0x0014ab34

0013aec0 <syscall_dup>:
  13aec0:	e92d4010 	push	{r4, lr}
  13aec4:	e1a04000 	mov	r4, r0
  13aec8:	e3a0100c 	mov	r1, #12
  13aecc:	e59f0010 	ldr	r0, [pc, #16]	; 13aee4 <syscall_dup+0x24>
  13aed0:	ebffff9c 	bl	13ad48 <syscall_debug>
  13aed4:	e1a01004 	mov	r1, r4
  13aed8:	e8bd4010 	pop	{r4, lr}
  13aedc:	e3a00085 	mov	r0, #133	; 0x85
  13aee0:	ea000499 	b	13c14c <syscall>
  13aee4:	0014ab28 	.word	0x0014ab28

0013aee8 <syscall_rmdir>:
  13aee8:	e92d4010 	push	{r4, lr}
  13aeec:	e1a04000 	mov	r4, r0
  13aef0:	e3a0100e 	mov	r1, #14
  13aef4:	e59f0010 	ldr	r0, [pc, #16]	; 13af0c <syscall_rmdir+0x24>
  13aef8:	ebffff92 	bl	13ad48 <syscall_debug>
  13aefc:	e1a01004 	mov	r1, r4
  13af00:	e8bd4010 	pop	{r4, lr}
  13af04:	e3a00078 	mov	r0, #120	; 0x78
  13af08:	ea00048f 	b	13c14c <syscall>
  13af0c:	0014ab18 	.word	0x0014ab18

0013af10 <syscall_chdir>:
  13af10:	e92d4010 	push	{r4, lr}
  13af14:	e1a04000 	mov	r4, r0
  13af18:	e3a0100e 	mov	r1, #14
  13af1c:	e59f0010 	ldr	r0, [pc, #16]	; 13af34 <syscall_chdir+0x24>
  13af20:	ebffff88 	bl	13ad48 <syscall_debug>
  13af24:	e1a01004 	mov	r1, r4
  13af28:	e8bd4010 	pop	{r4, lr}
  13af2c:	e3a00075 	mov	r0, #117	; 0x75
  13af30:	ea000485 	b	13c14c <syscall>
  13af34:	0014aa08 	.word	0x0014aa08

0013af38 <syscall_unlink>:
  13af38:	e92d4010 	push	{r4, lr}
  13af3c:	e1a04000 	mov	r4, r0
  13af40:	e3a0100f 	mov	r1, #15
  13af44:	e59f0010 	ldr	r0, [pc, #16]	; 13af5c <syscall_unlink+0x24>
  13af48:	ebffff7e 	bl	13ad48 <syscall_debug>
  13af4c:	e1a01004 	mov	r1, r4
  13af50:	e8bd4010 	pop	{r4, lr}
  13af54:	e3a00076 	mov	r0, #118	; 0x76
  13af58:	ea00047b 	b	13c14c <syscall>
  13af5c:	0014a9e8 	.word	0x0014a9e8

0013af60 <syscall_close>:
  13af60:	e92d4010 	push	{r4, lr}
  13af64:	e1a04000 	mov	r4, r0
  13af68:	e3a0100e 	mov	r1, #14
  13af6c:	e59f0010 	ldr	r0, [pc, #16]	; 13af84 <syscall_close+0x24>
  13af70:	ebffff74 	bl	13ad48 <syscall_debug>
  13af74:	e1a01004 	mov	r1, r4
  13af78:	e8bd4010 	pop	{r4, lr}
  13af7c:	e3a00006 	mov	r0, #6
  13af80:	ea000471 	b	13c14c <syscall>
  13af84:	0014a9b8 	.word	0x0014a9b8

0013af88 <syscall_exit>:
  13af88:	e92d4010 	push	{r4, lr}
  13af8c:	e1a04000 	mov	r4, r0
  13af90:	e3a0100d 	mov	r1, #13
  13af94:	e59f0010 	ldr	r0, [pc, #16]	; 13afac <syscall_exit+0x24>
  13af98:	ebffff6a 	bl	13ad48 <syscall_debug>
  13af9c:	e1a01004 	mov	r1, r4
  13afa0:	e8bd4010 	pop	{r4, lr}
  13afa4:	e3a00001 	mov	r0, #1
  13afa8:	ea000467 	b	13c14c <syscall>
  13afac:	0014a968 	.word	0x0014a968

0013afb0 <syscall_listen>:
  13afb0:	e92d4070 	push	{r4, r5, r6, lr}
  13afb4:	e1a04000 	mov	r4, r0
  13afb8:	e1a05001 	mov	r5, r1
  13afbc:	e59f0018 	ldr	r0, [pc, #24]	; 13afdc <syscall_listen+0x2c>
  13afc0:	e3a0100f 	mov	r1, #15
  13afc4:	ebffff5f 	bl	13ad48 <syscall_debug>
  13afc8:	e1a02005 	mov	r2, r5
  13afcc:	e1a01004 	mov	r1, r4
  13afd0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13afd4:	e3a0004d 	mov	r0, #77	; 0x4d
  13afd8:	ea00045b 	b	13c14c <syscall>
  13afdc:	0014bb2c 	.word	0x0014bb2c

0013afe0 <syscall_clock_getres>:
  13afe0:	e92d4070 	push	{r4, r5, r6, lr}
  13afe4:	e1a04000 	mov	r4, r0
  13afe8:	e1a05001 	mov	r5, r1
  13afec:	e59f0018 	ldr	r0, [pc, #24]	; 13b00c <syscall_clock_getres+0x2c>
  13aff0:	e3a01015 	mov	r1, #21
  13aff4:	ebffff53 	bl	13ad48 <syscall_debug>
  13aff8:	e1a02005 	mov	r2, r5
  13affc:	e1a01004 	mov	r1, r4
  13b000:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b004:	e3a00081 	mov	r0, #129	; 0x81
  13b008:	ea00044f 	b	13c14c <syscall>
  13b00c:	0014b98c 	.word	0x0014b98c

0013b010 <syscall_clock_gettime>:
  13b010:	e92d4070 	push	{r4, r5, r6, lr}
  13b014:	e1a04000 	mov	r4, r0
  13b018:	e1a05001 	mov	r5, r1
  13b01c:	e59f0018 	ldr	r0, [pc, #24]	; 13b03c <syscall_clock_gettime+0x2c>
  13b020:	e3a01016 	mov	r1, #22
  13b024:	ebffff47 	bl	13ad48 <syscall_debug>
  13b028:	e1a02005 	mov	r2, r5
  13b02c:	e1a01004 	mov	r1, r4
  13b030:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b034:	e3a00080 	mov	r0, #128	; 0x80
  13b038:	ea000443 	b	13c14c <syscall>
  13b03c:	0014b974 	.word	0x0014b974

0013b040 <syscall_clock_settime>:
  13b040:	e92d4070 	push	{r4, r5, r6, lr}
  13b044:	e1a04000 	mov	r4, r0
  13b048:	e1a05001 	mov	r5, r1
  13b04c:	e59f0018 	ldr	r0, [pc, #24]	; 13b06c <syscall_clock_settime+0x2c>
  13b050:	e3a01016 	mov	r1, #22
  13b054:	ebffff3b 	bl	13ad48 <syscall_debug>
  13b058:	e1a02005 	mov	r2, r5
  13b05c:	e1a01004 	mov	r1, r4
  13b060:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b064:	e3a0007f 	mov	r0, #127	; 0x7f
  13b068:	ea000437 	b	13c14c <syscall>
  13b06c:	0014b95c 	.word	0x0014b95c

0013b070 <syscall_tkill>:
  13b070:	e92d4070 	push	{r4, r5, r6, lr}
  13b074:	e1a04000 	mov	r4, r0
  13b078:	e1a05001 	mov	r5, r1
  13b07c:	e59f0018 	ldr	r0, [pc, #24]	; 13b09c <syscall_tkill+0x2c>
  13b080:	e3a0100e 	mov	r1, #14
  13b084:	ebffff2f 	bl	13ad48 <syscall_debug>
  13b088:	e1a02005 	mov	r2, r5
  13b08c:	e1a01004 	mov	r1, r4
  13b090:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b094:	e3a00069 	mov	r0, #105	; 0x69
  13b098:	ea00042b 	b	13c14c <syscall>
  13b09c:	0014b76c 	.word	0x0014b76c

0013b0a0 <syscall_fstat64>:
  13b0a0:	e92d4070 	push	{r4, r5, r6, lr}
  13b0a4:	e1a04000 	mov	r4, r0
  13b0a8:	e1a05001 	mov	r5, r1
  13b0ac:	e59f0018 	ldr	r0, [pc, #24]	; 13b0cc <syscall_fstat64+0x2c>
  13b0b0:	e3a01010 	mov	r1, #16
  13b0b4:	ebffff23 	bl	13ad48 <syscall_debug>
  13b0b8:	e1a02005 	mov	r2, r5
  13b0bc:	e1a01004 	mov	r1, r4
  13b0c0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0c4:	e3a00008 	mov	r0, #8
  13b0c8:	ea00041f 	b	13c14c <syscall>
  13b0cc:	0014b470 	.word	0x0014b470

0013b0d0 <syscall_lstat64>:
  13b0d0:	e92d4070 	push	{r4, r5, r6, lr}
  13b0d4:	e1a04000 	mov	r4, r0
  13b0d8:	e1a05001 	mov	r5, r1
  13b0dc:	e59f0018 	ldr	r0, [pc, #24]	; 13b0fc <syscall_lstat64+0x2c>
  13b0e0:	e3a01010 	mov	r1, #16
  13b0e4:	ebffff17 	bl	13ad48 <syscall_debug>
  13b0e8:	e1a02005 	mov	r2, r5
  13b0ec:	e1a01004 	mov	r1, r4
  13b0f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0f4:	e3a00043 	mov	r0, #67	; 0x43
  13b0f8:	ea000413 	b	13c14c <syscall>
  13b0fc:	0014b460 	.word	0x0014b460

0013b100 <syscall_stat64>:
  13b100:	e92d4070 	push	{r4, r5, r6, lr}
  13b104:	e1a04000 	mov	r4, r0
  13b108:	e1a05001 	mov	r5, r1
  13b10c:	e59f0018 	ldr	r0, [pc, #24]	; 13b12c <syscall_stat64+0x2c>
  13b110:	e3a0100f 	mov	r1, #15
  13b114:	ebffff0b 	bl	13ad48 <syscall_debug>
  13b118:	e1a02005 	mov	r2, r5
  13b11c:	e1a01004 	mov	r1, r4
  13b120:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b124:	e3a00043 	mov	r0, #67	; 0x43
  13b128:	ea000407 	b	13c14c <syscall>
  13b12c:	0014b450 	.word	0x0014b450

0013b130 <syscall_ugetrlimit>:
  13b130:	e92d4070 	push	{r4, r5, r6, lr}
  13b134:	e1a04000 	mov	r4, r0
  13b138:	e1a05001 	mov	r5, r1
  13b13c:	e59f0018 	ldr	r0, [pc, #24]	; 13b15c <syscall_ugetrlimit+0x2c>
  13b140:	e3a01013 	mov	r1, #19
  13b144:	ebfffeff 	bl	13ad48 <syscall_debug>
  13b148:	e1a02005 	mov	r2, r5
  13b14c:	e1a01004 	mov	r1, r4
  13b150:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b154:	e3a0008d 	mov	r0, #141	; 0x8d
  13b158:	ea0003fb 	b	13c14c <syscall>
  13b15c:	0014b404 	.word	0x0014b404

0013b160 <syscall_getcwd>:
  13b160:	e92d4070 	push	{r4, r5, r6, lr}
  13b164:	e1a04000 	mov	r4, r0
  13b168:	e1a05001 	mov	r5, r1
  13b16c:	e59f0018 	ldr	r0, [pc, #24]	; 13b18c <syscall_getcwd+0x2c>
  13b170:	e3a0100f 	mov	r1, #15
  13b174:	ebfffef3 	bl	13ad48 <syscall_debug>
  13b178:	e1a02005 	mov	r2, r5
  13b17c:	e1a01004 	mov	r1, r4
  13b180:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b184:	e3a00074 	mov	r0, #116	; 0x74
  13b188:	ea0003ef 	b	13c14c <syscall>
  13b18c:	0014b39c 	.word	0x0014b39c

0013b190 <syscall_nanosleep>:
  13b190:	e92d4070 	push	{r4, r5, r6, lr}
  13b194:	e1a04000 	mov	r4, r0
  13b198:	e1a05001 	mov	r5, r1
  13b19c:	e59f0018 	ldr	r0, [pc, #24]	; 13b1bc <syscall_nanosleep+0x2c>
  13b1a0:	e3a01012 	mov	r1, #18
  13b1a4:	ebfffee7 	bl	13ad48 <syscall_debug>
  13b1a8:	e1a02005 	mov	r2, r5
  13b1ac:	e1a01004 	mov	r1, r4
  13b1b0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b1b4:	e3a0000a 	mov	r0, #10
  13b1b8:	ea0003e3 	b	13c14c <syscall>
  13b1bc:	0014b218 	.word	0x0014b218

0013b1c0 <syscall_sched_getparam>:
  13b1c0:	e92d4070 	push	{r4, r5, r6, lr}
  13b1c4:	e1a04000 	mov	r4, r0
  13b1c8:	e1a05001 	mov	r5, r1
  13b1cc:	e59f0018 	ldr	r0, [pc, #24]	; 13b1ec <syscall_sched_getparam+0x2c>
  13b1d0:	e3a01017 	mov	r1, #23
  13b1d4:	ebfffedb 	bl	13ad48 <syscall_debug>
  13b1d8:	e1a02005 	mov	r2, r5
  13b1dc:	e1a01004 	mov	r1, r4
  13b1e0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b1e4:	e3a00095 	mov	r0, #149	; 0x95
  13b1e8:	ea0003d7 	b	13c14c <syscall>
  13b1ec:	0014b154 	.word	0x0014b154

0013b1f0 <syscall_sched_setparam>:
  13b1f0:	e92d4070 	push	{r4, r5, r6, lr}
  13b1f4:	e1a04000 	mov	r4, r0
  13b1f8:	e1a05001 	mov	r5, r1
  13b1fc:	e59f0018 	ldr	r0, [pc, #24]	; 13b21c <syscall_sched_setparam+0x2c>
  13b200:	e3a01017 	mov	r1, #23
  13b204:	ebfffecf 	bl	13ad48 <syscall_debug>
  13b208:	e1a02005 	mov	r2, r5
  13b20c:	e1a01004 	mov	r1, r4
  13b210:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b214:	e3a00094 	mov	r0, #148	; 0x94
  13b218:	ea0003cb 	b	13c14c <syscall>
  13b21c:	0014b13c 	.word	0x0014b13c

0013b220 <syscall_lstat>:
  13b220:	e92d4070 	push	{r4, r5, r6, lr}
  13b224:	e1a04000 	mov	r4, r0
  13b228:	e1a05001 	mov	r5, r1
  13b22c:	e59f0018 	ldr	r0, [pc, #24]	; 13b24c <syscall_lstat+0x2c>
  13b230:	e3a0100e 	mov	r1, #14
  13b234:	ebfffec3 	bl	13ad48 <syscall_debug>
  13b238:	e1a02005 	mov	r2, r5
  13b23c:	e1a01004 	mov	r1, r4
  13b240:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b244:	e3a00043 	mov	r0, #67	; 0x43
  13b248:	ea0003bf 	b	13c14c <syscall>
  13b24c:	0014ae94 	.word	0x0014ae94

0013b250 <syscall_stat>:
  13b250:	e92d4070 	push	{r4, r5, r6, lr}
  13b254:	e1a04000 	mov	r4, r0
  13b258:	e1a05001 	mov	r5, r1
  13b25c:	e59f0018 	ldr	r0, [pc, #24]	; 13b27c <syscall_stat+0x2c>
  13b260:	e3a0100d 	mov	r1, #13
  13b264:	ebfffeb7 	bl	13ad48 <syscall_debug>
  13b268:	e1a02005 	mov	r2, r5
  13b26c:	e1a01004 	mov	r1, r4
  13b270:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b274:	e3a00043 	mov	r0, #67	; 0x43
  13b278:	ea0003b3 	b	13c14c <syscall>
  13b27c:	0014ae84 	.word	0x0014ae84

0013b280 <syscall_munmap>:
  13b280:	e92d4070 	push	{r4, r5, r6, lr}
  13b284:	e1a04000 	mov	r4, r0
  13b288:	e1a05001 	mov	r5, r1
  13b28c:	e59f0018 	ldr	r0, [pc, #24]	; 13b2ac <syscall_munmap+0x2c>
  13b290:	e3a0100f 	mov	r1, #15
  13b294:	ebfffeab 	bl	13ad48 <syscall_debug>
  13b298:	e1a02005 	mov	r2, r5
  13b29c:	e1a01004 	mov	r1, r4
  13b2a0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2a4:	e3a00036 	mov	r0, #54	; 0x36
  13b2a8:	ea0003a7 	b	13c14c <syscall>
  13b2ac:	0014adac 	.word	0x0014adac

0013b2b0 <syscall_setrlimit>:
  13b2b0:	e92d4070 	push	{r4, r5, r6, lr}
  13b2b4:	e1a04000 	mov	r4, r0
  13b2b8:	e1a05001 	mov	r5, r1
  13b2bc:	e59f0018 	ldr	r0, [pc, #24]	; 13b2dc <syscall_setrlimit+0x2c>
  13b2c0:	e3a01012 	mov	r1, #18
  13b2c4:	ebfffe9f 	bl	13ad48 <syscall_debug>
  13b2c8:	e1a02005 	mov	r2, r5
  13b2cc:	e1a01004 	mov	r1, r4
  13b2d0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2d4:	e3a0008e 	mov	r0, #142	; 0x8e
  13b2d8:	ea00039b 	b	13c14c <syscall>
  13b2dc:	0014acd8 	.word	0x0014acd8

0013b2e0 <syscall_dup2>:
  13b2e0:	e92d4070 	push	{r4, r5, r6, lr}
  13b2e4:	e1a04000 	mov	r4, r0
  13b2e8:	e1a05001 	mov	r5, r1
  13b2ec:	e59f0018 	ldr	r0, [pc, #24]	; 13b30c <syscall_dup2+0x2c>
  13b2f0:	e3a0100d 	mov	r1, #13
  13b2f4:	ebfffe93 	bl	13ad48 <syscall_debug>
  13b2f8:	e1a02005 	mov	r2, r5
  13b2fc:	e1a01004 	mov	r1, r4
  13b300:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b304:	e3a00086 	mov	r0, #134	; 0x86
  13b308:	ea00038f 	b	13c14c <syscall>
  13b30c:	0014ac20 	.word	0x0014ac20

0013b310 <syscall_mkdir>:
  13b310:	e92d4070 	push	{r4, r5, r6, lr}
  13b314:	e1a04000 	mov	r4, r0
  13b318:	e1a05001 	mov	r5, r1
  13b31c:	e59f0018 	ldr	r0, [pc, #24]	; 13b33c <syscall_mkdir+0x2c>
  13b320:	e3a0100e 	mov	r1, #14
  13b324:	ebfffe87 	bl	13ad48 <syscall_debug>
  13b328:	e1a02005 	mov	r2, r5
  13b32c:	e1a01004 	mov	r1, r4
  13b330:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b334:	e3a00077 	mov	r0, #119	; 0x77
  13b338:	ea000383 	b	13c14c <syscall>
  13b33c:	0014ab08 	.word	0x0014ab08

0013b340 <syscall_rename>:
  13b340:	e92d4070 	push	{r4, r5, r6, lr}
  13b344:	e1a04000 	mov	r4, r0
  13b348:	e1a05001 	mov	r5, r1
  13b34c:	e59f0018 	ldr	r0, [pc, #24]	; 13b36c <syscall_rename+0x2c>
  13b350:	e3a0100f 	mov	r1, #15
  13b354:	ebfffe7b 	bl	13ad48 <syscall_debug>
  13b358:	e1a02005 	mov	r2, r5
  13b35c:	e1a01004 	mov	r1, r4
  13b360:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b364:	e3a00087 	mov	r0, #135	; 0x87
  13b368:	ea000377 	b	13c14c <syscall>
  13b36c:	0014aaf8 	.word	0x0014aaf8

0013b370 <syscall_kill>:
  13b370:	e92d4070 	push	{r4, r5, r6, lr}
  13b374:	e1a04000 	mov	r4, r0
  13b378:	e1a05001 	mov	r5, r1
  13b37c:	e59f0018 	ldr	r0, [pc, #24]	; 13b39c <syscall_kill+0x2c>
  13b380:	e3a0100d 	mov	r1, #13
  13b384:	ebfffe6f 	bl	13ad48 <syscall_debug>
  13b388:	e1a02005 	mov	r2, r5
  13b38c:	e1a01004 	mov	r1, r4
  13b390:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b394:	e3a0000e 	mov	r0, #14
  13b398:	ea00036b 	b	13c14c <syscall>
  13b39c:	0014aae8 	.word	0x0014aae8

0013b3a0 <syscall_access>:
  13b3a0:	e92d4070 	push	{r4, r5, r6, lr}
  13b3a4:	e1a04000 	mov	r4, r0
  13b3a8:	e1a05001 	mov	r5, r1
  13b3ac:	e59f0018 	ldr	r0, [pc, #24]	; 13b3cc <syscall_access+0x2c>
  13b3b0:	e3a0100f 	mov	r1, #15
  13b3b4:	ebfffe63 	bl	13ad48 <syscall_debug>
  13b3b8:	e1a02005 	mov	r2, r5
  13b3bc:	e1a01004 	mov	r1, r4
  13b3c0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3c4:	e3a0007d 	mov	r0, #125	; 0x7d
  13b3c8:	ea00035f 	b	13c14c <syscall>
  13b3cc:	0014aab8 	.word	0x0014aab8

0013b3d0 <syscall_getrandom>:
  13b3d0:	e92d4070 	push	{r4, r5, r6, lr}
  13b3d4:	e1a06002 	mov	r6, r2
  13b3d8:	e1a04000 	mov	r4, r0
  13b3dc:	e1a05001 	mov	r5, r1
  13b3e0:	e59f001c 	ldr	r0, [pc, #28]	; 13b404 <syscall_getrandom+0x34>
  13b3e4:	e3a01012 	mov	r1, #18
  13b3e8:	ebfffe56 	bl	13ad48 <syscall_debug>
  13b3ec:	e1a03006 	mov	r3, r6
  13b3f0:	e1a02005 	mov	r2, r5
  13b3f4:	e1a01004 	mov	r1, r4
  13b3f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3fc:	e3a00090 	mov	r0, #144	; 0x90
  13b400:	ea000351 	b	13c14c <syscall>
  13b404:	0014c2d8 	.word	0x0014c2d8

0013b408 <syscall_shmctl>:
  13b408:	e92d4070 	push	{r4, r5, r6, lr}
  13b40c:	e1a06002 	mov	r6, r2
  13b410:	e1a04000 	mov	r4, r0
  13b414:	e1a05001 	mov	r5, r1
  13b418:	e59f001c 	ldr	r0, [pc, #28]	; 13b43c <syscall_shmctl+0x34>
  13b41c:	e3a0100f 	mov	r1, #15
  13b420:	ebfffe48 	bl	13ad48 <syscall_debug>
  13b424:	e1a03006 	mov	r3, r6
  13b428:	e1a02005 	mov	r2, r5
  13b42c:	e1a01004 	mov	r1, r4
  13b430:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b434:	e3a00f4d 	mov	r0, #308	; 0x134
  13b438:	ea000343 	b	13c14c <syscall>
  13b43c:	0014bcc8 	.word	0x0014bcc8

0013b440 <syscall_shmget>:
  13b440:	e92d4070 	push	{r4, r5, r6, lr}
  13b444:	e1a06002 	mov	r6, r2
  13b448:	e1a04000 	mov	r4, r0
  13b44c:	e1a05001 	mov	r5, r1
  13b450:	e59f001c 	ldr	r0, [pc, #28]	; 13b474 <syscall_shmget+0x34>
  13b454:	e3a0100f 	mov	r1, #15
  13b458:	ebfffe3a 	bl	13ad48 <syscall_debug>
  13b45c:	e1a03006 	mov	r3, r6
  13b460:	e1a02005 	mov	r2, r5
  13b464:	e1a01004 	mov	r1, r4
  13b468:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b46c:	e59f0004 	ldr	r0, [pc, #4]	; 13b478 <syscall_shmget+0x38>
  13b470:	ea000335 	b	13c14c <syscall>
  13b474:	0014bcb8 	.word	0x0014bcb8
  13b478:	00000133 	.word	0x00000133

0013b47c <syscall_shmat>:
  13b47c:	e92d4070 	push	{r4, r5, r6, lr}
  13b480:	e1a06002 	mov	r6, r2
  13b484:	e1a04000 	mov	r4, r0
  13b488:	e1a05001 	mov	r5, r1
  13b48c:	e59f001c 	ldr	r0, [pc, #28]	; 13b4b0 <syscall_shmat+0x34>
  13b490:	e3a0100e 	mov	r1, #14
  13b494:	ebfffe2b 	bl	13ad48 <syscall_debug>
  13b498:	e1a03006 	mov	r3, r6
  13b49c:	e1a02005 	mov	r2, r5
  13b4a0:	e1a01004 	mov	r1, r4
  13b4a4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4a8:	e59f0004 	ldr	r0, [pc, #4]	; 13b4b4 <syscall_shmat+0x38>
  13b4ac:	ea000326 	b	13c14c <syscall>
  13b4b0:	0014bc98 	.word	0x0014bc98
  13b4b4:	00000131 	.word	0x00000131

0013b4b8 <syscall_getpeername>:
  13b4b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4bc:	e1a06002 	mov	r6, r2
  13b4c0:	e1a04000 	mov	r4, r0
  13b4c4:	e1a05001 	mov	r5, r1
  13b4c8:	e59f001c 	ldr	r0, [pc, #28]	; 13b4ec <syscall_getpeername+0x34>
  13b4cc:	e3a01014 	mov	r1, #20
  13b4d0:	ebfffe1c 	bl	13ad48 <syscall_debug>
  13b4d4:	e1a03006 	mov	r3, r6
  13b4d8:	e1a02005 	mov	r2, r5
  13b4dc:	e1a01004 	mov	r1, r4
  13b4e0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4e4:	e3a00048 	mov	r0, #72	; 0x48
  13b4e8:	ea000317 	b	13c14c <syscall>
  13b4ec:	0014bb60 	.word	0x0014bb60

0013b4f0 <syscall_getsockname>:
  13b4f0:	e92d4070 	push	{r4, r5, r6, lr}
  13b4f4:	e1a06002 	mov	r6, r2
  13b4f8:	e1a04000 	mov	r4, r0
  13b4fc:	e1a05001 	mov	r5, r1
  13b500:	e59f001c 	ldr	r0, [pc, #28]	; 13b524 <syscall_getsockname+0x34>
  13b504:	e3a01014 	mov	r1, #20
  13b508:	ebfffe0e 	bl	13ad48 <syscall_debug>
  13b50c:	e1a03006 	mov	r3, r6
  13b510:	e1a02005 	mov	r2, r5
  13b514:	e1a01004 	mov	r1, r4
  13b518:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b51c:	e3a00049 	mov	r0, #73	; 0x49
  13b520:	ea000309 	b	13c14c <syscall>
  13b524:	0014bb4c 	.word	0x0014bb4c

0013b528 <syscall_accept>:
  13b528:	e92d4070 	push	{r4, r5, r6, lr}
  13b52c:	e1a06002 	mov	r6, r2
  13b530:	e1a04000 	mov	r4, r0
  13b534:	e1a05001 	mov	r5, r1
  13b538:	e59f001c 	ldr	r0, [pc, #28]	; 13b55c <syscall_accept+0x34>
  13b53c:	e3a0100f 	mov	r1, #15
  13b540:	ebfffe00 	bl	13ad48 <syscall_debug>
  13b544:	e1a03006 	mov	r3, r6
  13b548:	e1a02005 	mov	r2, r5
  13b54c:	e1a01004 	mov	r1, r4
  13b550:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b554:	e3a00045 	mov	r0, #69	; 0x45
  13b558:	ea0002fb 	b	13c14c <syscall>
  13b55c:	0014bb3c 	.word	0x0014bb3c

0013b560 <syscall_connect>:
  13b560:	e92d4070 	push	{r4, r5, r6, lr}
  13b564:	e1a06002 	mov	r6, r2
  13b568:	e1a04000 	mov	r4, r0
  13b56c:	e1a05001 	mov	r5, r1
  13b570:	e59f001c 	ldr	r0, [pc, #28]	; 13b594 <syscall_connect+0x34>
  13b574:	e3a01010 	mov	r1, #16
  13b578:	ebfffdf2 	bl	13ad48 <syscall_debug>
  13b57c:	e1a03006 	mov	r3, r6
  13b580:	e1a02005 	mov	r2, r5
  13b584:	e1a01004 	mov	r1, r4
  13b588:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b58c:	e3a0004c 	mov	r0, #76	; 0x4c
  13b590:	ea0002ed 	b	13c14c <syscall>
  13b594:	0014bb1c 	.word	0x0014bb1c

0013b598 <syscall_bind>:
  13b598:	e92d4070 	push	{r4, r5, r6, lr}
  13b59c:	e1a06002 	mov	r6, r2
  13b5a0:	e1a04000 	mov	r4, r0
  13b5a4:	e1a05001 	mov	r5, r1
  13b5a8:	e59f001c 	ldr	r0, [pc, #28]	; 13b5cc <syscall_bind+0x34>
  13b5ac:	e3a0100d 	mov	r1, #13
  13b5b0:	ebfffde4 	bl	13ad48 <syscall_debug>
  13b5b4:	e1a03006 	mov	r3, r6
  13b5b8:	e1a02005 	mov	r2, r5
  13b5bc:	e1a01004 	mov	r1, r4
  13b5c0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5c4:	e3a00046 	mov	r0, #70	; 0x46
  13b5c8:	ea0002df 	b	13c14c <syscall>
  13b5cc:	0014bb0c 	.word	0x0014bb0c

0013b5d0 <syscall_socket>:
  13b5d0:	e92d4070 	push	{r4, r5, r6, lr}
  13b5d4:	e1a06002 	mov	r6, r2
  13b5d8:	e1a04000 	mov	r4, r0
  13b5dc:	e1a05001 	mov	r5, r1
  13b5e0:	e59f001c 	ldr	r0, [pc, #28]	; 13b604 <syscall_socket+0x34>
  13b5e4:	e3a0100f 	mov	r1, #15
  13b5e8:	ebfffdd6 	bl	13ad48 <syscall_debug>
  13b5ec:	e1a03006 	mov	r3, r6
  13b5f0:	e1a02005 	mov	r2, r5
  13b5f4:	e1a01004 	mov	r1, r4
  13b5f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5fc:	e3a00052 	mov	r0, #82	; 0x52
  13b600:	ea0002d1 	b	13c14c <syscall>
  13b604:	0014bafc 	.word	0x0014bafc

0013b608 <syscall_sched_setaffinity>:
  13b608:	e92d4070 	push	{r4, r5, r6, lr}
  13b60c:	e1a06002 	mov	r6, r2
  13b610:	e1a04000 	mov	r4, r0
  13b614:	e1a05001 	mov	r5, r1
  13b618:	e59f001c 	ldr	r0, [pc, #28]	; 13b63c <syscall_sched_setaffinity+0x34>
  13b61c:	e3a0101a 	mov	r1, #26
  13b620:	ebfffdc8 	bl	13ad48 <syscall_debug>
  13b624:	e1a03006 	mov	r3, r6
  13b628:	e1a02005 	mov	r2, r5
  13b62c:	e1a01004 	mov	r1, r4
  13b630:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b634:	e3a0009a 	mov	r0, #154	; 0x9a
  13b638:	ea0002c3 	b	13c14c <syscall>
  13b63c:	0014b7a0 	.word	0x0014b7a0

0013b640 <syscall_fcntl64>:
  13b640:	e92d4070 	push	{r4, r5, r6, lr}
  13b644:	e1a06002 	mov	r6, r2
  13b648:	e1a04000 	mov	r4, r0
  13b64c:	e1a05001 	mov	r5, r1
  13b650:	e59f001c 	ldr	r0, [pc, #28]	; 13b674 <syscall_fcntl64+0x34>
  13b654:	e3a01010 	mov	r1, #16
  13b658:	ebfffdba 	bl	13ad48 <syscall_debug>
  13b65c:	e1a03006 	mov	r3, r6
  13b660:	e1a02005 	mov	r2, r5
  13b664:	e1a01004 	mov	r1, r4
  13b668:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b66c:	e3a00007 	mov	r0, #7
  13b670:	ea0002b5 	b	13c14c <syscall>
  13b674:	0014b640 	.word	0x0014b640

0013b678 <syscall_madvise>:
  13b678:	e92d4070 	push	{r4, r5, r6, lr}
  13b67c:	e1a06002 	mov	r6, r2
  13b680:	e1a04000 	mov	r4, r0
  13b684:	e1a05001 	mov	r5, r1
  13b688:	e59f001c 	ldr	r0, [pc, #28]	; 13b6ac <syscall_madvise+0x34>
  13b68c:	e3a01010 	mov	r1, #16
  13b690:	ebfffdac 	bl	13ad48 <syscall_debug>
  13b694:	e1a03006 	mov	r3, r6
  13b698:	e1a02005 	mov	r2, r5
  13b69c:	e1a01004 	mov	r1, r4
  13b6a0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6a4:	e3a00093 	mov	r0, #147	; 0x93
  13b6a8:	ea0002a7 	b	13c14c <syscall>
  13b6ac:	0014b630 	.word	0x0014b630

0013b6b0 <syscall_getdents64>:
  13b6b0:	e92d4070 	push	{r4, r5, r6, lr}
  13b6b4:	e1a06002 	mov	r6, r2
  13b6b8:	e1a04000 	mov	r4, r0
  13b6bc:	e1a05001 	mov	r5, r1
  13b6c0:	e59f001c 	ldr	r0, [pc, #28]	; 13b6e4 <syscall_getdents64+0x34>
  13b6c4:	e3a01013 	mov	r1, #19
  13b6c8:	ebfffd9e 	bl	13ad48 <syscall_debug>
  13b6cc:	e1a03006 	mov	r3, r6
  13b6d0:	e1a02005 	mov	r2, r5
  13b6d4:	e1a01004 	mov	r1, r4
  13b6d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6dc:	e3a00079 	mov	r0, #121	; 0x79
  13b6e0:	ea000299 	b	13c14c <syscall>
  13b6e4:	0014b5f8 	.word	0x0014b5f8

0013b6e8 <syscall_poll>:
  13b6e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b6ec:	e1a06002 	mov	r6, r2
  13b6f0:	e1a04000 	mov	r4, r0
  13b6f4:	e1a05001 	mov	r5, r1
  13b6f8:	e59f001c 	ldr	r0, [pc, #28]	; 13b71c <syscall_poll+0x34>
  13b6fc:	e3a0100d 	mov	r1, #13
  13b700:	ebfffd90 	bl	13ad48 <syscall_debug>
  13b704:	e1a03006 	mov	r3, r6
  13b708:	e1a02005 	mov	r2, r5
  13b70c:	e1a01004 	mov	r1, r4
  13b710:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b714:	e3a00009 	mov	r0, #9
  13b718:	ea00028b 	b	13c14c <syscall>
  13b71c:	0014b264 	.word	0x0014b264

0013b720 <syscall_sched_getscheduler>:
  13b720:	e92d4070 	push	{r4, r5, r6, lr}
  13b724:	e1a06002 	mov	r6, r2
  13b728:	e1a04000 	mov	r4, r0
  13b72c:	e1a05001 	mov	r5, r1
  13b730:	e59f001c 	ldr	r0, [pc, #28]	; 13b754 <syscall_sched_getscheduler+0x34>
  13b734:	e3a0101b 	mov	r1, #27
  13b738:	ebfffd82 	bl	13ad48 <syscall_debug>
  13b73c:	e1a03006 	mov	r3, r6
  13b740:	e1a02005 	mov	r2, r5
  13b744:	e1a01004 	mov	r1, r4
  13b748:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b74c:	e3a00099 	mov	r0, #153	; 0x99
  13b750:	ea00027d 	b	13c14c <syscall>
  13b754:	0014b188 	.word	0x0014b188

0013b758 <syscall_sched_setscheduler>:
  13b758:	e92d4070 	push	{r4, r5, r6, lr}
  13b75c:	e1a06002 	mov	r6, r2
  13b760:	e1a04000 	mov	r4, r0
  13b764:	e1a05001 	mov	r5, r1
  13b768:	e59f001c 	ldr	r0, [pc, #28]	; 13b78c <syscall_sched_setscheduler+0x34>
  13b76c:	e3a0101b 	mov	r1, #27
  13b770:	ebfffd74 	bl	13ad48 <syscall_debug>
  13b774:	e1a03006 	mov	r3, r6
  13b778:	e1a02005 	mov	r2, r5
  13b77c:	e1a01004 	mov	r1, r4
  13b780:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b784:	e3a00098 	mov	r0, #152	; 0x98
  13b788:	ea00026f 	b	13c14c <syscall>
  13b78c:	0014b16c 	.word	0x0014b16c

0013b790 <syscall_writev>:
  13b790:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b794:	e1a06002 	mov	r6, r2
  13b798:	e1a08000 	mov	r8, r0
  13b79c:	e1a04001 	mov	r4, r1
  13b7a0:	e59f0088 	ldr	r0, [pc, #136]	; 13b830 <syscall_writev+0xa0>
  13b7a4:	e3a0100f 	mov	r1, #15
  13b7a8:	ebfffd66 	bl	13ad48 <syscall_debug>
  13b7ac:	e3560000 	cmp	r6, #0
  13b7b0:	e3a07000 	mov	r7, #0
  13b7b4:	da000013 	ble	13b808 <syscall_writev+0x78>
  13b7b8:	e1a05007 	mov	r5, r7
  13b7bc:	ea000003 	b	13b7d0 <syscall_writev+0x40>
  13b7c0:	e2855001 	add	r5, r5, #1
  13b7c4:	e1560005 	cmp	r6, r5
  13b7c8:	e2844008 	add	r4, r4, #8
  13b7cc:	0a00000d 	beq	13b808 <syscall_writev+0x78>
  13b7d0:	e5943004 	ldr	r3, [r4, #4]
  13b7d4:	e3530000 	cmp	r3, #0
  13b7d8:	0afffff8 	beq	13b7c0 <syscall_writev+0x30>
  13b7dc:	e5942000 	ldr	r2, [r4]
  13b7e0:	e1a01008 	mov	r1, r8
  13b7e4:	e3a00003 	mov	r0, #3
  13b7e8:	eb000257 	bl	13c14c <syscall>
  13b7ec:	e3500000 	cmp	r0, #0
  13b7f0:	da000006 	ble	13b810 <syscall_writev+0x80>
  13b7f4:	e2855001 	add	r5, r5, #1
  13b7f8:	e1560005 	cmp	r6, r5
  13b7fc:	e0877000 	add	r7, r7, r0
  13b800:	e2844008 	add	r4, r4, #8
  13b804:	1afffff1 	bne	13b7d0 <syscall_writev+0x40>
  13b808:	e1a00007 	mov	r0, r7
  13b80c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b810:	13a03000 	movne	r3, #0
  13b814:	03a03001 	moveq	r3, #1
  13b818:	e3570000 	cmp	r7, #0
  13b81c:	13a03001 	movne	r3, #1
  13b820:	e3530000 	cmp	r3, #0
  13b824:	01a07000 	moveq	r7, r0
  13b828:	e1a00007 	mov	r0, r7
  13b82c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b830:	0014b0b0 	.word	0x0014b0b0

0013b834 <syscall_readv>:
  13b834:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b838:	e1a06002 	mov	r6, r2
  13b83c:	e1a08000 	mov	r8, r0
  13b840:	e1a04001 	mov	r4, r1
  13b844:	e59f0088 	ldr	r0, [pc, #136]	; 13b8d4 <syscall_readv+0xa0>
  13b848:	e3a0100e 	mov	r1, #14
  13b84c:	ebfffd3d 	bl	13ad48 <syscall_debug>
  13b850:	e3560000 	cmp	r6, #0
  13b854:	e3a07000 	mov	r7, #0
  13b858:	da000013 	ble	13b8ac <syscall_readv+0x78>
  13b85c:	e1a05007 	mov	r5, r7
  13b860:	ea000003 	b	13b874 <syscall_readv+0x40>
  13b864:	e2855001 	add	r5, r5, #1
  13b868:	e1560005 	cmp	r6, r5
  13b86c:	e2844008 	add	r4, r4, #8
  13b870:	0a00000d 	beq	13b8ac <syscall_readv+0x78>
  13b874:	e5943004 	ldr	r3, [r4, #4]
  13b878:	e3530000 	cmp	r3, #0
  13b87c:	0afffff8 	beq	13b864 <syscall_readv+0x30>
  13b880:	e5942000 	ldr	r2, [r4]
  13b884:	e1a01008 	mov	r1, r8
  13b888:	e3a00002 	mov	r0, #2
  13b88c:	eb00022e 	bl	13c14c <syscall>
  13b890:	e3500000 	cmp	r0, #0
  13b894:	da000006 	ble	13b8b4 <syscall_readv+0x80>
  13b898:	e2855001 	add	r5, r5, #1
  13b89c:	e1560005 	cmp	r6, r5
  13b8a0:	e0877000 	add	r7, r7, r0
  13b8a4:	e2844008 	add	r4, r4, #8
  13b8a8:	1afffff1 	bne	13b874 <syscall_readv+0x40>
  13b8ac:	e1a00007 	mov	r0, r7
  13b8b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b8b4:	13a03000 	movne	r3, #0
  13b8b8:	03a03001 	moveq	r3, #1
  13b8bc:	e3570000 	cmp	r7, #0
  13b8c0:	13a03001 	movne	r3, #1
  13b8c4:	e3530000 	cmp	r3, #0
  13b8c8:	01a07000 	moveq	r7, r0
  13b8cc:	e1a00007 	mov	r0, r7
  13b8d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b8d4:	0014b0a0 	.word	0x0014b0a0

0013b8d8 <syscall_getdents>:
  13b8d8:	e92d4070 	push	{r4, r5, r6, lr}
  13b8dc:	e1a06002 	mov	r6, r2
  13b8e0:	e1a04000 	mov	r4, r0
  13b8e4:	e1a05001 	mov	r5, r1
  13b8e8:	e59f001c 	ldr	r0, [pc, #28]	; 13b90c <syscall_getdents+0x34>
  13b8ec:	e3a01011 	mov	r1, #17
  13b8f0:	ebfffd14 	bl	13ad48 <syscall_debug>
  13b8f4:	e1a03006 	mov	r3, r6
  13b8f8:	e1a02005 	mov	r2, r5
  13b8fc:	e1a01004 	mov	r1, r4
  13b900:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b904:	e3a00079 	mov	r0, #121	; 0x79
  13b908:	ea00020f 	b	13c14c <syscall>
  13b90c:	0014b058 	.word	0x0014b058

0013b910 <syscall_readlink>:
  13b910:	e92d4070 	push	{r4, r5, r6, lr}
  13b914:	e1a06002 	mov	r6, r2
  13b918:	e1a04000 	mov	r4, r0
  13b91c:	e1a05001 	mov	r5, r1
  13b920:	e59f001c 	ldr	r0, [pc, #28]	; 13b944 <syscall_readlink+0x34>
  13b924:	e3a01011 	mov	r1, #17
  13b928:	ebfffd06 	bl	13ad48 <syscall_debug>
  13b92c:	e1a03006 	mov	r3, r6
  13b930:	e1a02005 	mov	r2, r5
  13b934:	e1a01004 	mov	r1, r4
  13b938:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b93c:	e3a00091 	mov	r0, #145	; 0x91
  13b940:	ea000201 	b	13c14c <syscall>
  13b944:	0014ad68 	.word	0x0014ad68

0013b948 <syscall_fcntl>:
  13b948:	e92d4070 	push	{r4, r5, r6, lr}
  13b94c:	e1a06002 	mov	r6, r2
  13b950:	e1a04000 	mov	r4, r0
  13b954:	e1a05001 	mov	r5, r1
  13b958:	e59f001c 	ldr	r0, [pc, #28]	; 13b97c <syscall_fcntl+0x34>
  13b95c:	e3a0100e 	mov	r1, #14
  13b960:	ebfffcf8 	bl	13ad48 <syscall_debug>
  13b964:	e1a03006 	mov	r3, r6
  13b968:	e1a02005 	mov	r2, r5
  13b96c:	e1a01004 	mov	r1, r4
  13b970:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b974:	e3a00007 	mov	r0, #7
  13b978:	ea0001f3 	b	13c14c <syscall>
  13b97c:	0014abd0 	.word	0x0014abd0

0013b980 <syscall_execve>:
  13b980:	e92d4070 	push	{r4, r5, r6, lr}
  13b984:	e1a06002 	mov	r6, r2
  13b988:	e1a04000 	mov	r4, r0
  13b98c:	e1a05001 	mov	r5, r1
  13b990:	e59f001c 	ldr	r0, [pc, #28]	; 13b9b4 <syscall_execve+0x34>
  13b994:	e3a0100f 	mov	r1, #15
  13b998:	ebfffcea 	bl	13ad48 <syscall_debug>
  13b99c:	e1a03006 	mov	r3, r6
  13b9a0:	e1a02005 	mov	r2, r5
  13b9a4:	e1a01004 	mov	r1, r4
  13b9a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9ac:	e3a00089 	mov	r0, #137	; 0x89
  13b9b0:	ea0001e5 	b	13c14c <syscall>
  13b9b4:	0014a9f8 	.word	0x0014a9f8

0013b9b8 <syscall_open>:
  13b9b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b9bc:	e1a06002 	mov	r6, r2
  13b9c0:	e1a04000 	mov	r4, r0
  13b9c4:	e1a05001 	mov	r5, r1
  13b9c8:	e59f001c 	ldr	r0, [pc, #28]	; 13b9ec <syscall_open+0x34>
  13b9cc:	e3a0100d 	mov	r1, #13
  13b9d0:	ebfffcdc 	bl	13ad48 <syscall_debug>
  13b9d4:	e1a03006 	mov	r3, r6
  13b9d8:	e1a02005 	mov	r2, r5
  13b9dc:	e1a01004 	mov	r1, r4
  13b9e0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9e4:	e3a00005 	mov	r0, #5
  13b9e8:	ea0001d7 	b	13c14c <syscall>
  13b9ec:	0014a9a8 	.word	0x0014a9a8

0013b9f0 <syscall_write>:
  13b9f0:	e92d4070 	push	{r4, r5, r6, lr}
  13b9f4:	e1a06002 	mov	r6, r2
  13b9f8:	e1a04000 	mov	r4, r0
  13b9fc:	e1a05001 	mov	r5, r1
  13ba00:	e59f001c 	ldr	r0, [pc, #28]	; 13ba24 <syscall_write+0x34>
  13ba04:	e3a0100e 	mov	r1, #14
  13ba08:	ebfffcce 	bl	13ad48 <syscall_debug>
  13ba0c:	e1a03006 	mov	r3, r6
  13ba10:	e1a02005 	mov	r2, r5
  13ba14:	e1a01004 	mov	r1, r4
  13ba18:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba1c:	e3a00003 	mov	r0, #3
  13ba20:	ea0001c9 	b	13c14c <syscall>
  13ba24:	0014a998 	.word	0x0014a998

0013ba28 <syscall_read>:
  13ba28:	e92d4070 	push	{r4, r5, r6, lr}
  13ba2c:	e1a06002 	mov	r6, r2
  13ba30:	e1a04000 	mov	r4, r0
  13ba34:	e1a05001 	mov	r5, r1
  13ba38:	e59f001c 	ldr	r0, [pc, #28]	; 13ba5c <syscall_read+0x34>
  13ba3c:	e3a0100d 	mov	r1, #13
  13ba40:	ebfffcc0 	bl	13ad48 <syscall_debug>
  13ba44:	e1a03006 	mov	r3, r6
  13ba48:	e1a02005 	mov	r2, r5
  13ba4c:	e1a01004 	mov	r1, r4
  13ba50:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba54:	e3a00002 	mov	r0, #2
  13ba58:	ea0001bb 	b	13c14c <syscall>
  13ba5c:	0014a988 	.word	0x0014a988

0013ba60 <syscall_prlimit64>:
  13ba60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13ba64:	e1a06002 	mov	r6, r2
  13ba68:	e1a07003 	mov	r7, r3
  13ba6c:	e1a04000 	mov	r4, r0
  13ba70:	e1a05001 	mov	r5, r1
  13ba74:	e24dd00c 	sub	sp, sp, #12
  13ba78:	e3a01012 	mov	r1, #18
  13ba7c:	e59f0020 	ldr	r0, [pc, #32]	; 13baa4 <syscall_prlimit64+0x44>
  13ba80:	ebfffcb0 	bl	13ad48 <syscall_debug>
  13ba84:	e58d7000 	str	r7, [sp]
  13ba88:	e1a03006 	mov	r3, r6
  13ba8c:	e1a02005 	mov	r2, r5
  13ba90:	e1a01004 	mov	r1, r4
  13ba94:	e3a0008c 	mov	r0, #140	; 0x8c
  13ba98:	eb0001ab 	bl	13c14c <syscall>
  13ba9c:	e28dd00c 	add	sp, sp, #12
  13baa0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13baa4:	0014c18c 	.word	0x0014c18c

0013baa8 <syscall_recv>:
  13baa8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13baac:	e1a06002 	mov	r6, r2
  13bab0:	e1a07003 	mov	r7, r3
  13bab4:	e1a04000 	mov	r4, r0
  13bab8:	e1a05001 	mov	r5, r1
  13babc:	e24dd00c 	sub	sp, sp, #12
  13bac0:	e3a0100d 	mov	r1, #13
  13bac4:	e59f0020 	ldr	r0, [pc, #32]	; 13baec <syscall_recv+0x44>
  13bac8:	ebfffc9e 	bl	13ad48 <syscall_debug>
  13bacc:	e58d7000 	str	r7, [sp]
  13bad0:	e1a03006 	mov	r3, r6
  13bad4:	e1a02005 	mov	r2, r5
  13bad8:	e1a01004 	mov	r1, r4
  13badc:	e3a0004e 	mov	r0, #78	; 0x4e
  13bae0:	eb000199 	bl	13c14c <syscall>
  13bae4:	e28dd00c 	add	sp, sp, #12
  13bae8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13baec:	0014bba8 	.word	0x0014bba8

0013baf0 <syscall_send>:
  13baf0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13baf4:	e1a06002 	mov	r6, r2
  13baf8:	e1a07003 	mov	r7, r3
  13bafc:	e1a04000 	mov	r4, r0
  13bb00:	e1a05001 	mov	r5, r1
  13bb04:	e24dd00c 	sub	sp, sp, #12
  13bb08:	e3a0100d 	mov	r1, #13
  13bb0c:	e59f0020 	ldr	r0, [pc, #32]	; 13bb34 <syscall_send+0x44>
  13bb10:	ebfffc8c 	bl	13ad48 <syscall_debug>
  13bb14:	e58d7000 	str	r7, [sp]
  13bb18:	e1a03006 	mov	r3, r6
  13bb1c:	e1a02005 	mov	r2, r5
  13bb20:	e1a01004 	mov	r1, r4
  13bb24:	e3a00050 	mov	r0, #80	; 0x50
  13bb28:	eb000187 	bl	13c14c <syscall>
  13bb2c:	e28dd00c 	add	sp, sp, #12
  13bb30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bb34:	0014bb88 	.word	0x0014bb88

0013bb38 <syscall_rt_sigprocmask>:
  13bb38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bb3c:	e1a06002 	mov	r6, r2
  13bb40:	e1a07003 	mov	r7, r3
  13bb44:	e1a04000 	mov	r4, r0
  13bb48:	e1a05001 	mov	r5, r1
  13bb4c:	e24dd00c 	sub	sp, sp, #12
  13bb50:	e3a01017 	mov	r1, #23
  13bb54:	e59f0020 	ldr	r0, [pc, #32]	; 13bb7c <syscall_rt_sigprocmask+0x44>
  13bb58:	ebfffc7a 	bl	13ad48 <syscall_debug>
  13bb5c:	e58d7000 	str	r7, [sp]
  13bb60:	e1a03006 	mov	r3, r6
  13bb64:	e1a02005 	mov	r2, r5
  13bb68:	e1a01004 	mov	r1, r4
  13bb6c:	e3a00068 	mov	r0, #104	; 0x68
  13bb70:	eb000175 	bl	13c14c <syscall>
  13bb74:	e28dd00c 	add	sp, sp, #12
  13bb78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bb7c:	0014b2f0 	.word	0x0014b2f0

0013bb80 <syscall_rt_sigaction>:
  13bb80:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bb84:	e1a06002 	mov	r6, r2
  13bb88:	e1a07003 	mov	r7, r3
  13bb8c:	e1a04000 	mov	r4, r0
  13bb90:	e1a05001 	mov	r5, r1
  13bb94:	e24dd00c 	sub	sp, sp, #12
  13bb98:	e3a01015 	mov	r1, #21
  13bb9c:	e59f0020 	ldr	r0, [pc, #32]	; 13bbc4 <syscall_rt_sigaction+0x44>
  13bba0:	ebfffc68 	bl	13ad48 <syscall_debug>
  13bba4:	e58d7000 	str	r7, [sp]
  13bba8:	e1a03006 	mov	r3, r6
  13bbac:	e1a02005 	mov	r2, r5
  13bbb0:	e1a01004 	mov	r1, r4
  13bbb4:	e3a00067 	mov	r0, #103	; 0x67
  13bbb8:	eb000163 	bl	13c14c <syscall>
  13bbbc:	e28dd00c 	add	sp, sp, #12
  13bbc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bbc4:	0014b2d8 	.word	0x0014b2d8

0013bbc8 <syscall_sigprocmask>:
  13bbc8:	e92d4070 	push	{r4, r5, r6, lr}
  13bbcc:	e1a04000 	mov	r4, r0
  13bbd0:	e24dd008 	sub	sp, sp, #8
  13bbd4:	e1a05001 	mov	r5, r1
  13bbd8:	e59f002c 	ldr	r0, [pc, #44]	; 13bc0c <syscall_sigprocmask+0x44>
  13bbdc:	e3a01014 	mov	r1, #20
  13bbe0:	e1a06002 	mov	r6, r2
  13bbe4:	ebfffc57 	bl	13ad48 <syscall_debug>
  13bbe8:	e3a00080 	mov	r0, #128	; 0x80
  13bbec:	e1a03006 	mov	r3, r6
  13bbf0:	e58d0000 	str	r0, [sp]
  13bbf4:	e1a02005 	mov	r2, r5
  13bbf8:	e1a01004 	mov	r1, r4
  13bbfc:	e3a00068 	mov	r0, #104	; 0x68
  13bc00:	eb000151 	bl	13c14c <syscall>
  13bc04:	e28dd008 	add	sp, sp, #8
  13bc08:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bc0c:	0014af78 	.word	0x0014af78

0013bc10 <syscall_sigaction>:
  13bc10:	e92d4070 	push	{r4, r5, r6, lr}
  13bc14:	e1a04000 	mov	r4, r0
  13bc18:	e24dd008 	sub	sp, sp, #8
  13bc1c:	e1a05001 	mov	r5, r1
  13bc20:	e59f002c 	ldr	r0, [pc, #44]	; 13bc54 <syscall_sigaction+0x44>
  13bc24:	e3a01012 	mov	r1, #18
  13bc28:	e1a06002 	mov	r6, r2
  13bc2c:	ebfffc45 	bl	13ad48 <syscall_debug>
  13bc30:	e3a00080 	mov	r0, #128	; 0x80
  13bc34:	e1a03006 	mov	r3, r6
  13bc38:	e58d0000 	str	r0, [sp]
  13bc3c:	e1a02005 	mov	r2, r5
  13bc40:	e1a01004 	mov	r1, r4
  13bc44:	e3a00067 	mov	r0, #103	; 0x67
  13bc48:	eb00013f 	bl	13c14c <syscall>
  13bc4c:	e28dd008 	add	sp, sp, #8
  13bc50:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bc54:	0014ac60 	.word	0x0014ac60

0013bc58 <syscall_getsockopt>:
  13bc58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bc5c:	e1a06002 	mov	r6, r2
  13bc60:	e1a08003 	mov	r8, r3
  13bc64:	e1a04000 	mov	r4, r0
  13bc68:	e1a05001 	mov	r5, r1
  13bc6c:	e24dd008 	sub	sp, sp, #8
  13bc70:	e59d7020 	ldr	r7, [sp, #32]
  13bc74:	e3a01013 	mov	r1, #19
  13bc78:	e59f0024 	ldr	r0, [pc, #36]	; 13bca4 <syscall_getsockopt+0x4c>
  13bc7c:	ebfffc31 	bl	13ad48 <syscall_debug>
  13bc80:	e58d8000 	str	r8, [sp]
  13bc84:	e58d7004 	str	r7, [sp, #4]
  13bc88:	e1a03006 	mov	r3, r6
  13bc8c:	e1a02005 	mov	r2, r5
  13bc90:	e1a01004 	mov	r1, r4
  13bc94:	e3a0004a 	mov	r0, #74	; 0x4a
  13bc98:	eb00012b 	bl	13c14c <syscall>
  13bc9c:	e28dd008 	add	sp, sp, #8
  13bca0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bca4:	0014bbf4 	.word	0x0014bbf4

0013bca8 <syscall_setsockopt>:
  13bca8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bcac:	e1a06002 	mov	r6, r2
  13bcb0:	e1a08003 	mov	r8, r3
  13bcb4:	e1a04000 	mov	r4, r0
  13bcb8:	e1a05001 	mov	r5, r1
  13bcbc:	e24dd008 	sub	sp, sp, #8
  13bcc0:	e59d7020 	ldr	r7, [sp, #32]
  13bcc4:	e3a01013 	mov	r1, #19
  13bcc8:	e59f0024 	ldr	r0, [pc, #36]	; 13bcf4 <syscall_setsockopt+0x4c>
  13bccc:	ebfffc1d 	bl	13ad48 <syscall_debug>
  13bcd0:	e58d8000 	str	r8, [sp]
  13bcd4:	e58d7004 	str	r7, [sp, #4]
  13bcd8:	e1a03006 	mov	r3, r6
  13bcdc:	e1a02005 	mov	r2, r5
  13bce0:	e1a01004 	mov	r1, r4
  13bce4:	e3a0004b 	mov	r0, #75	; 0x4b
  13bce8:	eb000117 	bl	13c14c <syscall>
  13bcec:	e28dd008 	add	sp, sp, #8
  13bcf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bcf4:	0014bbe0 	.word	0x0014bbe0

0013bcf8 <syscall_mremap>:
  13bcf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bcfc:	e1a06002 	mov	r6, r2
  13bd00:	e1a08003 	mov	r8, r3
  13bd04:	e1a04000 	mov	r4, r0
  13bd08:	e1a05001 	mov	r5, r1
  13bd0c:	e24dd008 	sub	sp, sp, #8
  13bd10:	e59d7020 	ldr	r7, [sp, #32]
  13bd14:	e3a0100f 	mov	r1, #15
  13bd18:	e59f0024 	ldr	r0, [pc, #36]	; 13bd44 <syscall_mremap+0x4c>
  13bd1c:	ebfffc09 	bl	13ad48 <syscall_debug>
  13bd20:	e58d8000 	str	r8, [sp]
  13bd24:	e58d7004 	str	r7, [sp, #4]
  13bd28:	e1a03006 	mov	r3, r6
  13bd2c:	e1a02005 	mov	r2, r5
  13bd30:	e1a01004 	mov	r1, r4
  13bd34:	e3a00092 	mov	r0, #146	; 0x92
  13bd38:	eb000103 	bl	13c14c <syscall>
  13bd3c:	e28dd008 	add	sp, sp, #8
  13bd40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bd44:	0014b22c 	.word	0x0014b22c

0013bd48 <syscall__newselect>:
  13bd48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bd4c:	e1a06002 	mov	r6, r2
  13bd50:	e1a08003 	mov	r8, r3
  13bd54:	e1a04000 	mov	r4, r0
  13bd58:	e1a05001 	mov	r5, r1
  13bd5c:	e24dd008 	sub	sp, sp, #8
  13bd60:	e59d7020 	ldr	r7, [sp, #32]
  13bd64:	e3a01013 	mov	r1, #19
  13bd68:	e59f0024 	ldr	r0, [pc, #36]	; 13bd94 <syscall__newselect+0x4c>
  13bd6c:	ebfffbf5 	bl	13ad48 <syscall_debug>
  13bd70:	e58d8000 	str	r8, [sp]
  13bd74:	e58d7004 	str	r7, [sp, #4]
  13bd78:	e1a03006 	mov	r3, r6
  13bd7c:	e1a02005 	mov	r2, r5
  13bd80:	e1a01004 	mov	r1, r4
  13bd84:	e3a0005e 	mov	r0, #94	; 0x5e
  13bd88:	eb0000ef 	bl	13c14c <syscall>
  13bd8c:	e28dd008 	add	sp, sp, #8
  13bd90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bd94:	0014b06c 	.word	0x0014b06c

0013bd98 <syscall__llseek>:
  13bd98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bd9c:	e1a06002 	mov	r6, r2
  13bda0:	e1a05000 	mov	r5, r0
  13bda4:	e1a08001 	mov	r8, r1
  13bda8:	e24dd008 	sub	sp, sp, #8
  13bdac:	e59d7020 	ldr	r7, [sp, #32]
  13bdb0:	e3a01010 	mov	r1, #16
  13bdb4:	e59f0034 	ldr	r0, [pc, #52]	; 13bdf0 <syscall__llseek+0x58>
  13bdb8:	e1a04003 	mov	r4, r3
  13bdbc:	ebfffbe1 	bl	13ad48 <syscall_debug>
  13bdc0:	e1a01005 	mov	r1, r5
  13bdc4:	e58d8000 	str	r8, [sp]
  13bdc8:	e58d7004 	str	r7, [sp, #4]
  13bdcc:	e1a03006 	mov	r3, r6
  13bdd0:	e3a02000 	mov	r2, #0
  13bdd4:	e3a00004 	mov	r0, #4
  13bdd8:	eb0000db 	bl	13c14c <syscall>
  13bddc:	e1a01fc0 	asr	r1, r0, #31
  13bde0:	e8840003 	stm	r4, {r0, r1}
  13bde4:	e1a00fc1 	asr	r0, r1, #31
  13bde8:	e28dd008 	add	sp, sp, #8
  13bdec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bdf0:	0014b048 	.word	0x0014b048

0013bdf4 <syscall_recvfrom>:
  13bdf4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13bdf8:	e1a06002 	mov	r6, r2
  13bdfc:	e1a09003 	mov	r9, r3
  13be00:	e1a04000 	mov	r4, r0
  13be04:	e1a05001 	mov	r5, r1
  13be08:	e24dd014 	sub	sp, sp, #20
  13be0c:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13be10:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13be14:	e3a01011 	mov	r1, #17
  13be18:	e59f0024 	ldr	r0, [pc, #36]	; 13be44 <syscall_recvfrom+0x50>
  13be1c:	ebfffbc9 	bl	13ad48 <syscall_debug>
  13be20:	e58d9000 	str	r9, [sp]
  13be24:	e98d0180 	stmib	sp, {r7, r8}
  13be28:	e1a03006 	mov	r3, r6
  13be2c:	e1a02005 	mov	r2, r5
  13be30:	e1a01004 	mov	r1, r4
  13be34:	e3a0004f 	mov	r0, #79	; 0x4f
  13be38:	eb0000c3 	bl	13c14c <syscall>
  13be3c:	e28dd014 	add	sp, sp, #20
  13be40:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13be44:	0014bbb8 	.word	0x0014bbb8

0013be48 <syscall_sendto>:
  13be48:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13be4c:	e1a06002 	mov	r6, r2
  13be50:	e1a09003 	mov	r9, r3
  13be54:	e1a04000 	mov	r4, r0
  13be58:	e1a05001 	mov	r5, r1
  13be5c:	e24dd014 	sub	sp, sp, #20
  13be60:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13be64:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13be68:	e3a0100f 	mov	r1, #15
  13be6c:	e59f0024 	ldr	r0, [pc, #36]	; 13be98 <syscall_sendto+0x50>
  13be70:	ebfffbb4 	bl	13ad48 <syscall_debug>
  13be74:	e58d9000 	str	r9, [sp]
  13be78:	e98d0180 	stmib	sp, {r7, r8}
  13be7c:	e1a03006 	mov	r3, r6
  13be80:	e1a02005 	mov	r2, r5
  13be84:	e1a01004 	mov	r1, r4
  13be88:	e3a00051 	mov	r0, #81	; 0x51
  13be8c:	eb0000ae 	bl	13c14c <syscall>
  13be90:	e28dd014 	add	sp, sp, #20
  13be94:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13be98:	0014bb98 	.word	0x0014bb98

0013be9c <syscall_futex>:
  13be9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13bea0:	e1a06002 	mov	r6, r2
  13bea4:	e1a09003 	mov	r9, r3
  13bea8:	e1a04000 	mov	r4, r0
  13beac:	e1a05001 	mov	r5, r1
  13beb0:	e24dd014 	sub	sp, sp, #20
  13beb4:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13beb8:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13bebc:	e3a0100e 	mov	r1, #14
  13bec0:	e59f0024 	ldr	r0, [pc, #36]	; 13beec <syscall_futex+0x50>
  13bec4:	ebfffb9f 	bl	13ad48 <syscall_debug>
  13bec8:	e58d9000 	str	r9, [sp]
  13becc:	e98d0180 	stmib	sp, {r7, r8}
  13bed0:	e1a03006 	mov	r3, r6
  13bed4:	e1a02005 	mov	r2, r5
  13bed8:	e1a01004 	mov	r1, r4
  13bedc:	e3a00083 	mov	r0, #131	; 0x83
  13bee0:	eb000099 	bl	13c14c <syscall>
  13bee4:	e28dd014 	add	sp, sp, #20
  13bee8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13beec:	0014b790 	.word	0x0014b790

0013bef0 <syscall_mmap2>:
  13bef0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13bef4:	e1a06002 	mov	r6, r2
  13bef8:	e1a09003 	mov	r9, r3
  13befc:	e1a04000 	mov	r4, r0
  13bf00:	e1a05001 	mov	r5, r1
  13bf04:	e59d7020 	ldr	r7, [sp, #32]
  13bf08:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13bf0c:	e3a0100e 	mov	r1, #14
  13bf10:	e59f0024 	ldr	r0, [pc, #36]	; 13bf3c <syscall_mmap2+0x4c>
  13bf14:	ebfffb8b 	bl	13ad48 <syscall_debug>
  13bf18:	e58d9020 	str	r9, [sp, #32]
  13bf1c:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13bf20:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13bf24:	e1a03006 	mov	r3, r6
  13bf28:	e1a02005 	mov	r2, r5
  13bf2c:	e1a01004 	mov	r1, r4
  13bf30:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13bf34:	e3a00035 	mov	r0, #53	; 0x35
  13bf38:	ea000083 	b	13c14c <syscall>
  13bf3c:	0014b418 	.word	0x0014b418

0013bf40 <syscall_gettid>:
  13bf40:	e92d4010 	push	{r4, lr}
  13bf44:	e59f0010 	ldr	r0, [pc, #16]	; 13bf5c <syscall_gettid+0x1c>
  13bf48:	e3a0100f 	mov	r1, #15
  13bf4c:	ebfffb7d 	bl	13ad48 <syscall_debug>
  13bf50:	e8bd4010 	pop	{r4, lr}
  13bf54:	e3a0008b 	mov	r0, #139	; 0x8b
  13bf58:	ea00007b 	b	13c14c <syscall>
  13bf5c:	0014b650 	.word	0x0014b650

0013bf60 <syscall_vfork>:
  13bf60:	e92d4010 	push	{r4, lr}
  13bf64:	e59f0010 	ldr	r0, [pc, #16]	; 13bf7c <syscall_vfork+0x1c>
  13bf68:	e3a0100e 	mov	r1, #14
  13bf6c:	ebfffb75 	bl	13ad48 <syscall_debug>
  13bf70:	e8bd4010 	pop	{r4, lr}
  13bf74:	e3a0008a 	mov	r0, #138	; 0x8a
  13bf78:	ea000073 	b	13c14c <syscall>
  13bf7c:	0014b3f4 	.word	0x0014b3f4

0013bf80 <syscall_setsid>:
  13bf80:	e92d4010 	push	{r4, lr}
  13bf84:	e59f0010 	ldr	r0, [pc, #16]	; 13bf9c <syscall_setsid+0x1c>
  13bf88:	e3a0100f 	mov	r1, #15
  13bf8c:	ebfffb6d 	bl	13ad48 <syscall_debug>
  13bf90:	e8bd4010 	pop	{r4, lr}
  13bf94:	e3a0008f 	mov	r0, #143	; 0x8f
  13bf98:	ea00006b 	b	13c14c <syscall>
  13bf9c:	0014ac50 	.word	0x0014ac50

0013bfa0 <syscall_getpid>:
  13bfa0:	e92d4010 	push	{r4, lr}
  13bfa4:	e59f0010 	ldr	r0, [pc, #16]	; 13bfbc <syscall_getpid+0x1c>
  13bfa8:	e3a0100f 	mov	r1, #15
  13bfac:	ebfffb65 	bl	13ad48 <syscall_debug>
  13bfb0:	e8bd4010 	pop	{r4, lr}
  13bfb4:	e3a0000f 	mov	r0, #15
  13bfb8:	ea000063 	b	13c14c <syscall>
  13bfbc:	0014aa58 	.word	0x0014aa58

0013bfc0 <syscall_fork>:
  13bfc0:	e92d4010 	push	{r4, lr}
  13bfc4:	e59f0010 	ldr	r0, [pc, #16]	; 13bfdc <syscall_fork+0x1c>
  13bfc8:	e3a0100d 	mov	r1, #13
  13bfcc:	ebfffb5d 	bl	13ad48 <syscall_debug>
  13bfd0:	e8bd4010 	pop	{r4, lr}
  13bfd4:	e3a00088 	mov	r0, #136	; 0x88
  13bfd8:	ea00005b 	b	13c14c <syscall>
  13bfdc:	0014a978 	.word	0x0014a978

0013bfe0 <syscall_ioctl>:
  13bfe0:	e92d4070 	push	{r4, r5, r6, lr}
  13bfe4:	e1a04000 	mov	r4, r0
  13bfe8:	e1a05001 	mov	r5, r1
  13bfec:	e59f0030 	ldr	r0, [pc, #48]	; 13c024 <syscall_ioctl+0x44>
  13bff0:	e3a0100e 	mov	r1, #14
  13bff4:	e1a06002 	mov	r6, r2
  13bff8:	ebfffb52 	bl	13ad48 <syscall_debug>
  13bffc:	e3540001 	cmp	r4, #1
  13c000:	0a000005 	beq	13c01c <syscall_ioctl+0x3c>
  13c004:	e1a03006 	mov	r3, r6
  13c008:	e1a02005 	mov	r2, r5
  13c00c:	e1a01004 	mov	r1, r4
  13c010:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c014:	e3a00007 	mov	r0, #7
  13c018:	ea00004b 	b	13c14c <syscall>
  13c01c:	e3a00000 	mov	r0, #0
  13c020:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c024:	0014abc0 	.word	0x0014abc0

0013c028 <syscall_lseek>:
  13c028:	e92d4070 	push	{r4, r5, r6, lr}
  13c02c:	e1a04001 	mov	r4, r1
  13c030:	e24dd008 	sub	sp, sp, #8
  13c034:	e1a05000 	mov	r5, r0
  13c038:	e3a0100e 	mov	r1, #14
  13c03c:	e59f0058 	ldr	r0, [pc, #88]	; 13c09c <syscall_lseek+0x74>
  13c040:	e1a06002 	mov	r6, r2
  13c044:	ebfffb3f 	bl	13ad48 <syscall_debug>
  13c048:	e3540000 	cmp	r4, #0
  13c04c:	ba000008 	blt	13c074 <syscall_lseek+0x4c>
  13c050:	e3a02000 	mov	r2, #0
  13c054:	e58d6004 	str	r6, [sp, #4]
  13c058:	e1a03004 	mov	r3, r4
  13c05c:	e1a01005 	mov	r1, r5
  13c060:	e58d2000 	str	r2, [sp]
  13c064:	e3a00004 	mov	r0, #4
  13c068:	eb000037 	bl	13c14c <syscall>
  13c06c:	e28dd008 	add	sp, sp, #8
  13c070:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c074:	e3e02000 	mvn	r2, #0
  13c078:	e58d6004 	str	r6, [sp, #4]
  13c07c:	e58d2000 	str	r2, [sp]
  13c080:	e1a03004 	mov	r3, r4
  13c084:	e1a01005 	mov	r1, r5
  13c088:	e3a02000 	mov	r2, #0
  13c08c:	e3a00004 	mov	r0, #4
  13c090:	eb00002d 	bl	13c14c <syscall>
  13c094:	e28dd008 	add	sp, sp, #8
  13c098:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c09c:	0014aa48 	.word	0x0014aa48

0013c0a0 <get_rtt_syscall>:
  13c0a0:	e3500e19 	cmp	r0, #400	; 0x190
  13c0a4:	3a000005 	bcc	13c0c0 <get_rtt_syscall+0x20>
  13c0a8:	e59f201c 	ldr	r2, [pc, #28]	; 13c0cc <get_rtt_syscall+0x2c>
  13c0ac:	e59f301c 	ldr	r3, [pc, #28]	; 13c0d0 <get_rtt_syscall+0x30>
  13c0b0:	e1500002 	cmp	r0, r2
  13c0b4:	01a00003 	moveq	r0, r3
  13c0b8:	13a00000 	movne	r0, #0
  13c0bc:	e12fff1e 	bx	lr
  13c0c0:	e59f300c 	ldr	r3, [pc, #12]	; 13c0d4 <get_rtt_syscall+0x34>
  13c0c4:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c0c8:	e12fff1e 	bx	lr
  13c0cc:	000f0005 	.word	0x000f0005
  13c0d0:	00138f80 	.word	0x00138f80
  13c0d4:	0014c430 	.word	0x0014c430

0013c0d8 <___syscall>:
  13c0d8:	e92d4070 	push	{r4, r5, r6, lr}
  13c0dc:	e1a0c001 	mov	ip, r1
  13c0e0:	e3500e19 	cmp	r0, #400	; 0x190
  13c0e4:	e1a01002 	mov	r1, r2
  13c0e8:	e1a02003 	mov	r2, r3
  13c0ec:	e28d3010 	add	r3, sp, #16
  13c0f0:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c0f4:	2a00000a 	bcs	13c124 <___syscall+0x4c>
  13c0f8:	e59fe03c 	ldr	lr, [pc, #60]	; 13c13c <___syscall+0x64>
  13c0fc:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c100:	e35e0000 	cmp	lr, #0
  13c104:	0a00000a 	beq	13c134 <___syscall+0x5c>
  13c108:	e58d6018 	str	r6, [sp, #24]
  13c10c:	e58d5014 	str	r5, [sp, #20]
  13c110:	e58d4010 	str	r4, [sp, #16]
  13c114:	e1a0000c 	mov	r0, ip
  13c118:	e1a0c00e 	mov	ip, lr
  13c11c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c120:	e12fff1c 	bx	ip
  13c124:	e59fe014 	ldr	lr, [pc, #20]	; 13c140 <___syscall+0x68>
  13c128:	e150000e 	cmp	r0, lr
  13c12c:	059fe010 	ldreq	lr, [pc, #16]	; 13c144 <___syscall+0x6c>
  13c130:	0afffff4 	beq	13c108 <___syscall+0x30>
  13c134:	e3a00000 	mov	r0, #0
  13c138:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c13c:	0014c430 	.word	0x0014c430
  13c140:	000f0005 	.word	0x000f0005
  13c144:	00138f80 	.word	0x00138f80

0013c148 <__syscall>:
  13c148:	eaffffe2 	b	13c0d8 <___syscall>

0013c14c <syscall>:
  13c14c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c150:	e1a07000 	mov	r7, r0
  13c154:	e1a00001 	mov	r0, r1
  13c158:	e1a01002 	mov	r1, r2
  13c15c:	e1a02003 	mov	r2, r3
  13c160:	e28d6014 	add	r6, sp, #20
  13c164:	e8960038 	ldm	r6, {r3, r4, r5}
  13c168:	ef000000 	svc	0x00000000
  13c16c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c170:	e12fff1e 	bx	lr

0013c174 <__syscall_ret>:
  13c174:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c178:	912fff1e 	bxls	lr
  13c17c:	e92d4010 	push	{r4, lr}
  13c180:	e1a04000 	mov	r4, r0
  13c184:	ebfff28f 	bl	138bc8 <__errno_location>
  13c188:	e2644000 	rsb	r4, r4, #0
  13c18c:	e5804000 	str	r4, [r0]
  13c190:	e3e00000 	mvn	r0, #0
  13c194:	e8bd8010 	pop	{r4, pc}

0013c198 <__lctrans_impl>:
  13c198:	e12fff1e 	bx	lr

0013c19c <__lctrans>:
  13c19c:	eafffffd 	b	13c198 <__lctrans_impl>

0013c1a0 <__lctrans_cur>:
  13c1a0:	e1a02000 	mov	r2, r0
  13c1a4:	e59f301c 	ldr	r3, [pc, #28]	; 13c1c8 <__lctrans_cur+0x28>
  13c1a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c1ac:	e5930000 	ldr	r0, [r3]
  13c1b0:	e12fff30 	blx	r0
  13c1b4:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c1b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c1bc:	e1a00002 	mov	r0, r2
  13c1c0:	e5931014 	ldr	r1, [r3, #20]
  13c1c4:	eafffff3 	b	13c198 <__lctrans_impl>
  13c1c8:	0014d3dc 	.word	0x0014d3dc

0013c1cc <__simple_malloc>:
  13c1cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c1d0:	e2505000 	subs	r5, r0, #0
  13c1d4:	e24dd008 	sub	sp, sp, #8
  13c1d8:	0a000016 	beq	13c238 <__simple_malloc+0x6c>
  13c1dc:	e3550001 	cmp	r5, #1
  13c1e0:	9a000037 	bls	13c2c4 <__simple_malloc+0xf8>
  13c1e4:	e3a03001 	mov	r3, #1
  13c1e8:	e1a03083 	lsl	r3, r3, #1
  13c1ec:	e1550003 	cmp	r5, r3
  13c1f0:	83a02001 	movhi	r2, #1
  13c1f4:	93a02000 	movls	r2, #0
  13c1f8:	e353000f 	cmp	r3, #15
  13c1fc:	83a02000 	movhi	r2, #0
  13c200:	e3520000 	cmp	r2, #0
  13c204:	1afffff7 	bne	13c1e8 <__simple_malloc+0x1c>
  13c208:	e2434001 	sub	r4, r3, #1
  13c20c:	e59f60c8 	ldr	r6, [pc, #200]	; 13c2dc <__simple_malloc+0x110>
  13c210:	e59f00c8 	ldr	r0, [pc, #200]	; 13c2e0 <__simple_malloc+0x114>
  13c214:	eb001587 	bl	141838 <__lock>
  13c218:	e5962000 	ldr	r2, [r6]
  13c21c:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c220:	e2623000 	rsb	r3, r2, #0
  13c224:	e0044003 	and	r4, r4, r3
  13c228:	8a000009 	bhi	13c254 <__simple_malloc+0x88>
  13c22c:	e0853004 	add	r3, r5, r4
  13c230:	e1a05004 	mov	r5, r4
  13c234:	ea000004 	b	13c24c <__simple_malloc+0x80>
  13c238:	e59f00a0 	ldr	r0, [pc, #160]	; 13c2e0 <__simple_malloc+0x114>
  13c23c:	eb00157d 	bl	141838 <__lock>
  13c240:	e3a03001 	mov	r3, #1
  13c244:	e59f6090 	ldr	r6, [pc, #144]	; 13c2dc <__simple_malloc+0x110>
  13c248:	e5962000 	ldr	r2, [r6]
  13c24c:	e1a04005 	mov	r4, r5
  13c250:	e1a05003 	mov	r5, r3
  13c254:	e59f8088 	ldr	r8, [pc, #136]	; 13c2e4 <__simple_malloc+0x118>
  13c258:	e5981000 	ldr	r1, [r8]
  13c25c:	e0411002 	sub	r1, r1, r2
  13c260:	e1510005 	cmp	r1, r5
  13c264:	20827004 	addcs	r7, r2, r4
  13c268:	2a00000e 	bcs	13c2a8 <__simple_malloc+0xdc>
  13c26c:	e28d0008 	add	r0, sp, #8
  13c270:	e5205004 	str	r5, [r0, #-4]!
  13c274:	eb001b2e 	bl	142f34 <__expand_heap>
  13c278:	e2503000 	subs	r3, r0, #0
  13c27c:	0a000012 	beq	13c2cc <__simple_malloc+0x100>
  13c280:	e5982000 	ldr	r2, [r8]
  13c284:	e59d1004 	ldr	r1, [sp, #4]
  13c288:	e1520003 	cmp	r2, r3
  13c28c:	05962000 	ldreq	r2, [r6]
  13c290:	11a07003 	movne	r7, r3
  13c294:	11a02003 	movne	r2, r3
  13c298:	e0833001 	add	r3, r3, r1
  13c29c:	00827004 	addeq	r7, r2, r4
  13c2a0:	10455004 	subne	r5, r5, r4
  13c2a4:	e5883000 	str	r3, [r8]
  13c2a8:	e0825005 	add	r5, r2, r5
  13c2ac:	e59f002c 	ldr	r0, [pc, #44]	; 13c2e0 <__simple_malloc+0x114>
  13c2b0:	e5865000 	str	r5, [r6]
  13c2b4:	eb0015b7 	bl	141998 <__unlock>
  13c2b8:	e1a00007 	mov	r0, r7
  13c2bc:	e28dd008 	add	sp, sp, #8
  13c2c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c2c4:	e3a04000 	mov	r4, #0
  13c2c8:	eaffffcf 	b	13c20c <__simple_malloc+0x40>
  13c2cc:	e59f000c 	ldr	r0, [pc, #12]	; 13c2e0 <__simple_malloc+0x114>
  13c2d0:	e1a07003 	mov	r7, r3
  13c2d4:	eb0015af 	bl	141998 <__unlock>
  13c2d8:	eafffff6 	b	13c2b8 <__simple_malloc+0xec>
  13c2dc:	0014ec10 	.word	0x0014ec10
  13c2e0:	0014ec18 	.word	0x0014ec18
  13c2e4:	0014ec14 	.word	0x0014ec14

0013c2e8 <__simple_calloc>:
  13c2e8:	e3510000 	cmp	r1, #0
  13c2ec:	e1a0c000 	mov	ip, r0
  13c2f0:	0a000002 	beq	13c300 <__simple_calloc+0x18>
  13c2f4:	e0832190 	umull	r2, r3, r0, r1
  13c2f8:	e3530000 	cmp	r3, #0
  13c2fc:	1a000001 	bne	13c308 <__simple_calloc+0x20>
  13c300:	e0000c91 	mul	r0, r1, ip
  13c304:	eaffffb0 	b	13c1cc <__simple_malloc>
  13c308:	e92d4010 	push	{r4, lr}
  13c30c:	ebfff22d 	bl	138bc8 <__errno_location>
  13c310:	e3a0300c 	mov	r3, #12
  13c314:	e5803000 	str	r3, [r0]
  13c318:	e3a00000 	mov	r0, #0
  13c31c:	e8bd8010 	pop	{r4, pc}

0013c320 <adjust_size>:
  13c320:	e5903000 	ldr	r3, [r0]
  13c324:	e59f2058 	ldr	r2, [pc, #88]	; 13c384 <adjust_size+0x64>
  13c328:	e2431001 	sub	r1, r3, #1
  13c32c:	e1510002 	cmp	r1, r2
  13c330:	9a000006 	bls	13c350 <adjust_size+0x30>
  13c334:	e3530000 	cmp	r3, #0
  13c338:	03a01010 	moveq	r1, #16
  13c33c:	01a02003 	moveq	r2, r3
  13c340:	05801000 	streq	r1, [r0]
  13c344:	1a000007 	bne	13c368 <adjust_size+0x48>
  13c348:	e1a00002 	mov	r0, r2
  13c34c:	e12fff1e 	bx	lr
  13c350:	e3a02000 	mov	r2, #0
  13c354:	e2833017 	add	r3, r3, #23
  13c358:	e3c3300f 	bic	r3, r3, #15
  13c35c:	e5803000 	str	r3, [r0]
  13c360:	e1a00002 	mov	r0, r2
  13c364:	e12fff1e 	bx	lr
  13c368:	e92d4010 	push	{r4, lr}
  13c36c:	ebfff215 	bl	138bc8 <__errno_location>
  13c370:	e3a0300c 	mov	r3, #12
  13c374:	e3e02000 	mvn	r2, #0
  13c378:	e5803000 	str	r3, [r0]
  13c37c:	e1a00002 	mov	r0, r2
  13c380:	e8bd8010 	pop	{r4, pc}
  13c384:	7fffefef 	.word	0x7fffefef

0013c388 <unbin>:
  13c388:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c38c:	e590200c 	ldr	r2, [r0, #12]
  13c390:	e1a07000 	mov	r7, r0
  13c394:	e5900008 	ldr	r0, [r0, #8]
  13c398:	e24dd00c 	sub	sp, sp, #12
  13c39c:	e1520000 	cmp	r2, r0
  13c3a0:	0a00000b 	beq	13c3d4 <unbin+0x4c>
  13c3a4:	e5973004 	ldr	r3, [r7, #4]
  13c3a8:	e5820008 	str	r0, [r2, #8]
  13c3ac:	e3c30001 	bic	r0, r3, #1
  13c3b0:	e7971000 	ldr	r1, [r7, r0]
  13c3b4:	e597c008 	ldr	ip, [r7, #8]
  13c3b8:	e3833001 	orr	r3, r3, #1
  13c3bc:	e3811001 	orr	r1, r1, #1
  13c3c0:	e58c200c 	str	r2, [ip, #12]
  13c3c4:	e5873004 	str	r3, [r7, #4]
  13c3c8:	e7871000 	str	r1, [r7, r0]
  13c3cc:	e28dd00c 	add	sp, sp, #12
  13c3d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c3d4:	e3a00001 	mov	r0, #1
  13c3d8:	e241c020 	sub	ip, r1, #32
  13c3dc:	e1a0a110 	lsl	sl, r0, r1
  13c3e0:	e1a0bc10 	lsl	fp, r0, ip
  13c3e4:	e261c020 	rsb	ip, r1, #32
  13c3e8:	e1e0100a 	mvn	r1, sl
  13c3ec:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c3f0:	e3710001 	cmn	r1, #1
  13c3f4:	e1e0200b 	mvn	r2, fp
  13c3f8:	0a000014 	beq	13c450 <unbin+0xc8>
  13c3fc:	e59f40a4 	ldr	r4, [pc, #164]	; 13c4a8 <unbin+0x120>
  13c400:	e1a0b007 	mov	fp, r7
  13c404:	e1a09004 	mov	r9, r4
  13c408:	e1a07001 	mov	r7, r1
  13c40c:	e88d0006 	stm	sp, {r1, r2}
  13c410:	e59f6094 	ldr	r6, [pc, #148]	; 13c4ac <unbin+0x124>
  13c414:	e5945000 	ldr	r5, [r4]
  13c418:	e0078005 	and	r8, r7, r5
  13c41c:	ea000002 	b	13c42c <unbin+0xa4>
  13c420:	e5943000 	ldr	r3, [r4]
  13c424:	e1550003 	cmp	r5, r3
  13c428:	1afffff9 	bne	13c414 <unbin+0x8c>
  13c42c:	e1a00005 	mov	r0, r5
  13c430:	e1a01008 	mov	r1, r8
  13c434:	e1a02009 	mov	r2, r9
  13c438:	e5963000 	ldr	r3, [r6]
  13c43c:	e12fff33 	blx	r3
  13c440:	e3500000 	cmp	r0, #0
  13c444:	1afffff5 	bne	13c420 <unbin+0x98>
  13c448:	e1a0700b 	mov	r7, fp
  13c44c:	e89d0006 	ldm	sp, {r1, r2}
  13c450:	e3720001 	cmn	r2, #1
  13c454:	0a000010 	beq	13c49c <unbin+0x114>
  13c458:	e1a0a002 	mov	sl, r2
  13c45c:	e59f4044 	ldr	r4, [pc, #68]	; 13c4a8 <unbin+0x120>
  13c460:	e59f6044 	ldr	r6, [pc, #68]	; 13c4ac <unbin+0x124>
  13c464:	e2849004 	add	r9, r4, #4
  13c468:	e5945004 	ldr	r5, [r4, #4]
  13c46c:	e00a8005 	and	r8, sl, r5
  13c470:	ea000002 	b	13c480 <unbin+0xf8>
  13c474:	e5943004 	ldr	r3, [r4, #4]
  13c478:	e1550003 	cmp	r5, r3
  13c47c:	1afffff9 	bne	13c468 <unbin+0xe0>
  13c480:	e1a00005 	mov	r0, r5
  13c484:	e1a01008 	mov	r1, r8
  13c488:	e1a02009 	mov	r2, r9
  13c48c:	e5963000 	ldr	r3, [r6]
  13c490:	e12fff33 	blx	r3
  13c494:	e3500000 	cmp	r0, #0
  13c498:	1afffff5 	bne	13c474 <unbin+0xec>
  13c49c:	e597200c 	ldr	r2, [r7, #12]
  13c4a0:	e5970008 	ldr	r0, [r7, #8]
  13c4a4:	eaffffbe 	b	13c3a4 <unbin+0x1c>
  13c4a8:	0014ec28 	.word	0x0014ec28
  13c4ac:	0014d3d8 	.word	0x0014d3d8

0013c4b0 <alloc_fwd>:
  13c4b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c4b4:	e59f925c 	ldr	r9, [pc, #604]	; 13c718 <alloc_fwd+0x268>
  13c4b8:	e24dd00c 	sub	sp, sp, #12
  13c4bc:	e58d0004 	str	r0, [sp, #4]
  13c4c0:	e59f6254 	ldr	r6, [pc, #596]	; 13c71c <alloc_fwd+0x26c>
  13c4c4:	e59d3004 	ldr	r3, [sp, #4]
  13c4c8:	e5938004 	ldr	r8, [r3, #4]
  13c4cc:	e3180001 	tst	r8, #1
  13c4d0:	1a000055 	bne	13c62c <alloc_fwd+0x17c>
  13c4d4:	e1a07228 	lsr	r7, r8, #4
  13c4d8:	e2477001 	sub	r7, r7, #1
  13c4dc:	e3570020 	cmp	r7, #32
  13c4e0:	9a000005 	bls	13c4fc <alloc_fwd+0x4c>
  13c4e4:	e59f3234 	ldr	r3, [pc, #564]	; 13c720 <alloc_fwd+0x270>
  13c4e8:	e1570003 	cmp	r7, r3
  13c4ec:	8a000058 	bhi	13c654 <alloc_fwd+0x1a4>
  13c4f0:	e59f322c 	ldr	r3, [pc, #556]	; 13c724 <alloc_fwd+0x274>
  13c4f4:	e08371a7 	add	r7, r3, r7, lsr #3
  13c4f8:	e5577004 	ldrb	r7, [r7, #-4]
  13c4fc:	e1a0b007 	mov	fp, r7
  13c500:	e1a04207 	lsl	r4, r7, #4
  13c504:	e2844008 	add	r4, r4, #8
  13c508:	e59f3218 	ldr	r3, [pc, #536]	; 13c728 <alloc_fwd+0x278>
  13c50c:	e0894004 	add	r4, r9, r4
  13c510:	e593300c 	ldr	r3, [r3, #12]
  13c514:	e3530000 	cmp	r3, #0
  13c518:	1284a004 	addne	sl, r4, #4
  13c51c:	1a000032 	bne	13c5ec <alloc_fwd+0x13c>
  13c520:	e28b3001 	add	r3, fp, #1
  13c524:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c528:	e3520000 	cmp	r2, #0
  13c52c:	1a000053 	bne	13c680 <alloc_fwd+0x1d0>
  13c530:	e1a02008 	mov	r2, r8
  13c534:	e0891207 	add	r1, r9, r7, lsl #4
  13c538:	e2811008 	add	r1, r1, #8
  13c53c:	e0890203 	add	r0, r9, r3, lsl #4
  13c540:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c544:	e5801004 	str	r1, [r0, #4]
  13c548:	e1580002 	cmp	r8, r2
  13c54c:	0a00004b 	beq	13c680 <alloc_fwd+0x1d0>
  13c550:	e5943000 	ldr	r3, [r4]
  13c554:	e3530000 	cmp	r3, #0
  13c558:	0a000030 	beq	13c620 <alloc_fwd+0x170>
  13c55c:	e59f31c8 	ldr	r3, [pc, #456]	; 13c72c <alloc_fwd+0x27c>
  13c560:	e593c000 	ldr	ip, [r3]
  13c564:	e12fff3c 	blx	ip
  13c568:	e3a02000 	mov	r2, #0
  13c56c:	e593c000 	ldr	ip, [r3]
  13c570:	e5842000 	str	r2, [r4]
  13c574:	e12fff3c 	blx	ip
  13c578:	e5943004 	ldr	r3, [r4, #4]
  13c57c:	e1530002 	cmp	r3, r2
  13c580:	0affffcf 	beq	13c4c4 <alloc_fwd+0x14>
  13c584:	e3a000f0 	mov	r0, #240	; 0xf0
  13c588:	ebfffec4 	bl	13c0a0 <get_rtt_syscall>
  13c58c:	e2503000 	subs	r3, r0, #0
  13c590:	0affffca 	beq	13c4c0 <alloc_fwd+0x10>
  13c594:	e3a02001 	mov	r2, #1
  13c598:	e3a01081 	mov	r1, #129	; 0x81
  13c59c:	e1a00004 	mov	r0, r4
  13c5a0:	e12fff33 	blx	r3
  13c5a4:	e3700026 	cmn	r0, #38	; 0x26
  13c5a8:	1affffc4 	bne	13c4c0 <alloc_fwd+0x10>
  13c5ac:	e3a000f0 	mov	r0, #240	; 0xf0
  13c5b0:	ebfffeba 	bl	13c0a0 <get_rtt_syscall>
  13c5b4:	e2503000 	subs	r3, r0, #0
  13c5b8:	0affffc0 	beq	13c4c0 <alloc_fwd+0x10>
  13c5bc:	e3a02001 	mov	r2, #1
  13c5c0:	e1a00004 	mov	r0, r4
  13c5c4:	e1a01002 	mov	r1, r2
  13c5c8:	e12fff33 	blx	r3
  13c5cc:	eaffffbb 	b	13c4c0 <alloc_fwd+0x10>
  13c5d0:	e3550000 	cmp	r5, #0
  13c5d4:	0a000017 	beq	13c638 <alloc_fwd+0x188>
  13c5d8:	e1a03001 	mov	r3, r1
  13c5dc:	e1a02001 	mov	r2, r1
  13c5e0:	e1a00004 	mov	r0, r4
  13c5e4:	e1a0100a 	mov	r1, sl
  13c5e8:	eb001515 	bl	141a44 <__wait>
  13c5ec:	e5945000 	ldr	r5, [r4]
  13c5f0:	ea000002 	b	13c600 <alloc_fwd+0x150>
  13c5f4:	e5943000 	ldr	r3, [r4]
  13c5f8:	e1550003 	cmp	r5, r3
  13c5fc:	1afffffa 	bne	13c5ec <alloc_fwd+0x13c>
  13c600:	e1a00005 	mov	r0, r5
  13c604:	e3a01001 	mov	r1, #1
  13c608:	e1a02004 	mov	r2, r4
  13c60c:	e5963000 	ldr	r3, [r6]
  13c610:	e12fff33 	blx	r3
  13c614:	e3500000 	cmp	r0, #0
  13c618:	1afffff5 	bne	13c5f4 <alloc_fwd+0x144>
  13c61c:	eaffffeb 	b	13c5d0 <alloc_fwd+0x120>
  13c620:	e1a08002 	mov	r8, r2
  13c624:	e3180001 	tst	r8, #1
  13c628:	0affffa9 	beq	13c4d4 <alloc_fwd+0x24>
  13c62c:	e3a00000 	mov	r0, #0
  13c630:	e28dd00c 	add	sp, sp, #12
  13c634:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c638:	e28b3001 	add	r3, fp, #1
  13c63c:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c640:	e59d2004 	ldr	r2, [sp, #4]
  13c644:	e3510000 	cmp	r1, #0
  13c648:	e5922004 	ldr	r2, [r2, #4]
  13c64c:	1affffbd 	bne	13c548 <alloc_fwd+0x98>
  13c650:	eaffffb7 	b	13c534 <alloc_fwd+0x84>
  13c654:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c658:	83a0703f 	movhi	r7, #63	; 0x3f
  13c65c:	959f30c0 	ldrls	r3, [pc, #192]	; 13c724 <alloc_fwd+0x274>
  13c660:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c664:	908373a7 	addls	r7, r3, r7, lsr #7
  13c668:	95577004 	ldrbls	r7, [r7, #-4]
  13c66c:	92877010 	addls	r7, r7, #16
  13c670:	91a04207 	lslls	r4, r7, #4
  13c674:	92844008 	addls	r4, r4, #8
  13c678:	e1a0b007 	mov	fp, r7
  13c67c:	eaffffa1 	b	13c508 <alloc_fwd+0x58>
  13c680:	e1a0100b 	mov	r1, fp
  13c684:	e59d0004 	ldr	r0, [sp, #4]
  13c688:	ebffff3e 	bl	13c388 <unbin>
  13c68c:	e5943000 	ldr	r3, [r4]
  13c690:	e3530000 	cmp	r3, #0
  13c694:	0a000009 	beq	13c6c0 <alloc_fwd+0x210>
  13c698:	e59f308c 	ldr	r3, [pc, #140]	; 13c72c <alloc_fwd+0x27c>
  13c69c:	e593c000 	ldr	ip, [r3]
  13c6a0:	e12fff3c 	blx	ip
  13c6a4:	e3a02000 	mov	r2, #0
  13c6a8:	e593c000 	ldr	ip, [r3]
  13c6ac:	e5842000 	str	r2, [r4]
  13c6b0:	e12fff3c 	blx	ip
  13c6b4:	e5943004 	ldr	r3, [r4, #4]
  13c6b8:	e1530002 	cmp	r3, r2
  13c6bc:	1a000002 	bne	13c6cc <alloc_fwd+0x21c>
  13c6c0:	e3a00001 	mov	r0, #1
  13c6c4:	e28dd00c 	add	sp, sp, #12
  13c6c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c6cc:	e3a000f0 	mov	r0, #240	; 0xf0
  13c6d0:	ebfffe72 	bl	13c0a0 <get_rtt_syscall>
  13c6d4:	e2503000 	subs	r3, r0, #0
  13c6d8:	0afffff8 	beq	13c6c0 <alloc_fwd+0x210>
  13c6dc:	e3a02001 	mov	r2, #1
  13c6e0:	e3a01081 	mov	r1, #129	; 0x81
  13c6e4:	e1a00004 	mov	r0, r4
  13c6e8:	e12fff33 	blx	r3
  13c6ec:	e3700026 	cmn	r0, #38	; 0x26
  13c6f0:	1afffff2 	bne	13c6c0 <alloc_fwd+0x210>
  13c6f4:	e3a000f0 	mov	r0, #240	; 0xf0
  13c6f8:	ebfffe68 	bl	13c0a0 <get_rtt_syscall>
  13c6fc:	e2503000 	subs	r3, r0, #0
  13c700:	0affffee 	beq	13c6c0 <alloc_fwd+0x210>
  13c704:	e3a02001 	mov	r2, #1
  13c708:	e1a00004 	mov	r0, r4
  13c70c:	e1a01002 	mov	r1, r2
  13c710:	e12fff33 	blx	r3
  13c714:	eaffffe9 	b	13c6c0 <alloc_fwd+0x210>
  13c718:	0014ec28 	.word	0x0014ec28
  13c71c:	0014d3d8 	.word	0x0014d3d8
  13c720:	000001ff 	.word	0x000001ff
  13c724:	0014ca90 	.word	0x0014ca90
  13c728:	0015d05c 	.word	0x0015d05c
  13c72c:	0014d3d4 	.word	0x0014d3d4

0013c730 <alloc_rev>:
  13c730:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c734:	e59f9264 	ldr	r9, [pc, #612]	; 13c9a0 <alloc_rev+0x270>
  13c738:	e24dd00c 	sub	sp, sp, #12
  13c73c:	e58d0004 	str	r0, [sp, #4]
  13c740:	e59f625c 	ldr	r6, [pc, #604]	; 13c9a4 <alloc_rev+0x274>
  13c744:	e59d3004 	ldr	r3, [sp, #4]
  13c748:	e5938000 	ldr	r8, [r3]
  13c74c:	e3180001 	tst	r8, #1
  13c750:	1a000055 	bne	13c8ac <alloc_rev+0x17c>
  13c754:	e1a07228 	lsr	r7, r8, #4
  13c758:	e2477001 	sub	r7, r7, #1
  13c75c:	e3570020 	cmp	r7, #32
  13c760:	9a000005 	bls	13c77c <alloc_rev+0x4c>
  13c764:	e59f323c 	ldr	r3, [pc, #572]	; 13c9a8 <alloc_rev+0x278>
  13c768:	e1570003 	cmp	r7, r3
  13c76c:	8a000058 	bhi	13c8d4 <alloc_rev+0x1a4>
  13c770:	e59f3234 	ldr	r3, [pc, #564]	; 13c9ac <alloc_rev+0x27c>
  13c774:	e08371a7 	add	r7, r3, r7, lsr #3
  13c778:	e5577004 	ldrb	r7, [r7, #-4]
  13c77c:	e1a0b007 	mov	fp, r7
  13c780:	e1a04207 	lsl	r4, r7, #4
  13c784:	e2844008 	add	r4, r4, #8
  13c788:	e59f3220 	ldr	r3, [pc, #544]	; 13c9b0 <alloc_rev+0x280>
  13c78c:	e0894004 	add	r4, r9, r4
  13c790:	e593300c 	ldr	r3, [r3, #12]
  13c794:	e3530000 	cmp	r3, #0
  13c798:	1284a004 	addne	sl, r4, #4
  13c79c:	1a000032 	bne	13c86c <alloc_rev+0x13c>
  13c7a0:	e28b3001 	add	r3, fp, #1
  13c7a4:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c7a8:	e3520000 	cmp	r2, #0
  13c7ac:	1a000053 	bne	13c900 <alloc_rev+0x1d0>
  13c7b0:	e1a02008 	mov	r2, r8
  13c7b4:	e0891207 	add	r1, r9, r7, lsl #4
  13c7b8:	e2811008 	add	r1, r1, #8
  13c7bc:	e0890203 	add	r0, r9, r3, lsl #4
  13c7c0:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c7c4:	e5801004 	str	r1, [r0, #4]
  13c7c8:	e1580002 	cmp	r8, r2
  13c7cc:	0a00004b 	beq	13c900 <alloc_rev+0x1d0>
  13c7d0:	e5943000 	ldr	r3, [r4]
  13c7d4:	e3530000 	cmp	r3, #0
  13c7d8:	0a000030 	beq	13c8a0 <alloc_rev+0x170>
  13c7dc:	e59f31d0 	ldr	r3, [pc, #464]	; 13c9b4 <alloc_rev+0x284>
  13c7e0:	e593c000 	ldr	ip, [r3]
  13c7e4:	e12fff3c 	blx	ip
  13c7e8:	e3a02000 	mov	r2, #0
  13c7ec:	e593c000 	ldr	ip, [r3]
  13c7f0:	e5842000 	str	r2, [r4]
  13c7f4:	e12fff3c 	blx	ip
  13c7f8:	e5943004 	ldr	r3, [r4, #4]
  13c7fc:	e1530002 	cmp	r3, r2
  13c800:	0affffcf 	beq	13c744 <alloc_rev+0x14>
  13c804:	e3a000f0 	mov	r0, #240	; 0xf0
  13c808:	ebfffe24 	bl	13c0a0 <get_rtt_syscall>
  13c80c:	e2503000 	subs	r3, r0, #0
  13c810:	0affffca 	beq	13c740 <alloc_rev+0x10>
  13c814:	e3a02001 	mov	r2, #1
  13c818:	e3a01081 	mov	r1, #129	; 0x81
  13c81c:	e1a00004 	mov	r0, r4
  13c820:	e12fff33 	blx	r3
  13c824:	e3700026 	cmn	r0, #38	; 0x26
  13c828:	1affffc4 	bne	13c740 <alloc_rev+0x10>
  13c82c:	e3a000f0 	mov	r0, #240	; 0xf0
  13c830:	ebfffe1a 	bl	13c0a0 <get_rtt_syscall>
  13c834:	e2503000 	subs	r3, r0, #0
  13c838:	0affffc0 	beq	13c740 <alloc_rev+0x10>
  13c83c:	e3a02001 	mov	r2, #1
  13c840:	e1a00004 	mov	r0, r4
  13c844:	e1a01002 	mov	r1, r2
  13c848:	e12fff33 	blx	r3
  13c84c:	eaffffbb 	b	13c740 <alloc_rev+0x10>
  13c850:	e3550000 	cmp	r5, #0
  13c854:	0a000017 	beq	13c8b8 <alloc_rev+0x188>
  13c858:	e1a03001 	mov	r3, r1
  13c85c:	e1a02001 	mov	r2, r1
  13c860:	e1a00004 	mov	r0, r4
  13c864:	e1a0100a 	mov	r1, sl
  13c868:	eb001475 	bl	141a44 <__wait>
  13c86c:	e5945000 	ldr	r5, [r4]
  13c870:	ea000002 	b	13c880 <alloc_rev+0x150>
  13c874:	e5943000 	ldr	r3, [r4]
  13c878:	e1550003 	cmp	r5, r3
  13c87c:	1afffffa 	bne	13c86c <alloc_rev+0x13c>
  13c880:	e1a00005 	mov	r0, r5
  13c884:	e3a01001 	mov	r1, #1
  13c888:	e1a02004 	mov	r2, r4
  13c88c:	e5963000 	ldr	r3, [r6]
  13c890:	e12fff33 	blx	r3
  13c894:	e3500000 	cmp	r0, #0
  13c898:	1afffff5 	bne	13c874 <alloc_rev+0x144>
  13c89c:	eaffffeb 	b	13c850 <alloc_rev+0x120>
  13c8a0:	e1a08002 	mov	r8, r2
  13c8a4:	e3180001 	tst	r8, #1
  13c8a8:	0affffa9 	beq	13c754 <alloc_rev+0x24>
  13c8ac:	e3a00000 	mov	r0, #0
  13c8b0:	e28dd00c 	add	sp, sp, #12
  13c8b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c8b8:	e28b3001 	add	r3, fp, #1
  13c8bc:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c8c0:	e59d2004 	ldr	r2, [sp, #4]
  13c8c4:	e3510000 	cmp	r1, #0
  13c8c8:	e5922000 	ldr	r2, [r2]
  13c8cc:	1affffbd 	bne	13c7c8 <alloc_rev+0x98>
  13c8d0:	eaffffb7 	b	13c7b4 <alloc_rev+0x84>
  13c8d4:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c8d8:	83a0703f 	movhi	r7, #63	; 0x3f
  13c8dc:	959f30c8 	ldrls	r3, [pc, #200]	; 13c9ac <alloc_rev+0x27c>
  13c8e0:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c8e4:	908373a7 	addls	r7, r3, r7, lsr #7
  13c8e8:	95577004 	ldrbls	r7, [r7, #-4]
  13c8ec:	92877010 	addls	r7, r7, #16
  13c8f0:	91a04207 	lslls	r4, r7, #4
  13c8f4:	92844008 	addls	r4, r4, #8
  13c8f8:	e1a0b007 	mov	fp, r7
  13c8fc:	eaffffa1 	b	13c788 <alloc_rev+0x58>
  13c900:	e59d3004 	ldr	r3, [sp, #4]
  13c904:	e3c80001 	bic	r0, r8, #1
  13c908:	e0430000 	sub	r0, r3, r0
  13c90c:	e1a0100b 	mov	r1, fp
  13c910:	ebfffe9c 	bl	13c388 <unbin>
  13c914:	e5943000 	ldr	r3, [r4]
  13c918:	e3530000 	cmp	r3, #0
  13c91c:	0a000009 	beq	13c948 <alloc_rev+0x218>
  13c920:	e59f308c 	ldr	r3, [pc, #140]	; 13c9b4 <alloc_rev+0x284>
  13c924:	e593c000 	ldr	ip, [r3]
  13c928:	e12fff3c 	blx	ip
  13c92c:	e3a02000 	mov	r2, #0
  13c930:	e593c000 	ldr	ip, [r3]
  13c934:	e5842000 	str	r2, [r4]
  13c938:	e12fff3c 	blx	ip
  13c93c:	e5943004 	ldr	r3, [r4, #4]
  13c940:	e1530002 	cmp	r3, r2
  13c944:	1a000002 	bne	13c954 <alloc_rev+0x224>
  13c948:	e3a00001 	mov	r0, #1
  13c94c:	e28dd00c 	add	sp, sp, #12
  13c950:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c954:	e3a000f0 	mov	r0, #240	; 0xf0
  13c958:	ebfffdd0 	bl	13c0a0 <get_rtt_syscall>
  13c95c:	e2503000 	subs	r3, r0, #0
  13c960:	0afffff8 	beq	13c948 <alloc_rev+0x218>
  13c964:	e3a02001 	mov	r2, #1
  13c968:	e3a01081 	mov	r1, #129	; 0x81
  13c96c:	e1a00004 	mov	r0, r4
  13c970:	e12fff33 	blx	r3
  13c974:	e3700026 	cmn	r0, #38	; 0x26
  13c978:	1afffff2 	bne	13c948 <alloc_rev+0x218>
  13c97c:	e3a000f0 	mov	r0, #240	; 0xf0
  13c980:	ebfffdc6 	bl	13c0a0 <get_rtt_syscall>
  13c984:	e2503000 	subs	r3, r0, #0
  13c988:	0affffee 	beq	13c948 <alloc_rev+0x218>
  13c98c:	e3a02001 	mov	r2, #1
  13c990:	e1a00004 	mov	r0, r4
  13c994:	e1a01002 	mov	r1, r2
  13c998:	e12fff33 	blx	r3
  13c99c:	eaffffe9 	b	13c948 <alloc_rev+0x218>
  13c9a0:	0014ec28 	.word	0x0014ec28
  13c9a4:	0014d3d8 	.word	0x0014d3d8
  13c9a8:	000001ff 	.word	0x000001ff
  13c9ac:	0014ca90 	.word	0x0014ca90
  13c9b0:	0015d05c 	.word	0x0015d05c
  13c9b4:	0014d3d4 	.word	0x0014d3d4

0013c9b8 <__bin_chunk>:
  13c9b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c9bc:	e5903004 	ldr	r3, [r0, #4]
  13c9c0:	e24dd01c 	sub	sp, sp, #28
  13c9c4:	e3c31001 	bic	r1, r3, #1
  13c9c8:	e7902001 	ldr	r2, [r0, r1]
  13c9cc:	e1a06000 	mov	r6, r0
  13c9d0:	e1530002 	cmp	r3, r2
  13c9d4:	e58d1010 	str	r1, [sp, #16]
  13c9d8:	e080b001 	add	fp, r0, r1
  13c9dc:	0a000000 	beq	13c9e4 <__bin_chunk+0x2c>
  13c9e0:	e7f000f0 	.word	0xe7f000f0
  13c9e4:	e59d3010 	ldr	r3, [sp, #16]
  13c9e8:	e59f55e8 	ldr	r5, [pc, #1512]	; 13cfd8 <__bin_chunk+0x620>
  13c9ec:	e58d3000 	str	r3, [sp]
  13c9f0:	e3a03000 	mov	r3, #0
  13c9f4:	e58d3014 	str	r3, [sp, #20]
  13c9f8:	e2853b01 	add	r3, r5, #1024	; 0x400
  13c9fc:	e283300c 	add	r3, r3, #12
  13ca00:	e59f95d4 	ldr	r9, [pc, #1492]	; 13cfdc <__bin_chunk+0x624>
  13ca04:	e58d300c 	str	r3, [sp, #12]
  13ca08:	e5963000 	ldr	r3, [r6]
  13ca0c:	e59b2004 	ldr	r2, [fp, #4]
  13ca10:	e0033002 	and	r3, r3, r2
  13ca14:	e3130001 	tst	r3, #1
  13ca18:	0a000038 	beq	13cb00 <__bin_chunk+0x148>
  13ca1c:	e59d1000 	ldr	r1, [sp]
  13ca20:	e1a03221 	lsr	r3, r1, #4
  13ca24:	e2432001 	sub	r2, r3, #1
  13ca28:	e3520020 	cmp	r2, #32
  13ca2c:	e3813001 	orr	r3, r1, #1
  13ca30:	e5863004 	str	r3, [r6, #4]
  13ca34:	e58d2008 	str	r2, [sp, #8]
  13ca38:	e58b3000 	str	r3, [fp]
  13ca3c:	8a00006c 	bhi	13cbf4 <__bin_chunk+0x23c>
  13ca40:	e1a04202 	lsl	r4, r2, #4
  13ca44:	e2844008 	add	r4, r4, #8
  13ca48:	e58d2004 	str	r2, [sp, #4]
  13ca4c:	e59f358c 	ldr	r3, [pc, #1420]	; 13cfe0 <__bin_chunk+0x628>
  13ca50:	e0854004 	add	r4, r5, r4
  13ca54:	e593300c 	ldr	r3, [r3, #12]
  13ca58:	e3530000 	cmp	r3, #0
  13ca5c:	12848004 	addne	r8, r4, #4
  13ca60:	1a000056 	bne	13cbc0 <__bin_chunk+0x208>
  13ca64:	e59d3004 	ldr	r3, [sp, #4]
  13ca68:	e2837001 	add	r7, r3, #1
  13ca6c:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13ca70:	e3530000 	cmp	r3, #0
  13ca74:	0a000069 	beq	13cc20 <__bin_chunk+0x268>
  13ca78:	e59f3560 	ldr	r3, [pc, #1376]	; 13cfe0 <__bin_chunk+0x628>
  13ca7c:	e593300c 	ldr	r3, [r3, #12]
  13ca80:	e3530000 	cmp	r3, #0
  13ca84:	1a00006f 	bne	13cc48 <__bin_chunk+0x290>
  13ca88:	e5963000 	ldr	r3, [r6]
  13ca8c:	e59b2004 	ldr	r2, [fp, #4]
  13ca90:	e0033002 	and	r3, r3, r2
  13ca94:	e2133001 	ands	r3, r3, #1
  13ca98:	1a0000b5 	bne	13cd74 <__bin_chunk+0x3bc>
  13ca9c:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13caa0:	e3520000 	cmp	r2, #0
  13caa4:	0a000008 	beq	13cacc <__bin_chunk+0x114>
  13caa8:	e59f2534 	ldr	r2, [pc, #1332]	; 13cfe4 <__bin_chunk+0x62c>
  13caac:	e592c000 	ldr	ip, [r2]
  13cab0:	e12fff3c 	blx	ip
  13cab4:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13cab8:	e592c000 	ldr	ip, [r2]
  13cabc:	e12fff3c 	blx	ip
  13cac0:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cac4:	e3530000 	cmp	r3, #0
  13cac8:	1a000095 	bne	13cd24 <__bin_chunk+0x36c>
  13cacc:	e5943000 	ldr	r3, [r4]
  13cad0:	e3530000 	cmp	r3, #0
  13cad4:	0a000009 	beq	13cb00 <__bin_chunk+0x148>
  13cad8:	e59f2504 	ldr	r2, [pc, #1284]	; 13cfe4 <__bin_chunk+0x62c>
  13cadc:	e592c000 	ldr	ip, [r2]
  13cae0:	e12fff3c 	blx	ip
  13cae4:	e3a03000 	mov	r3, #0
  13cae8:	e592c000 	ldr	ip, [r2]
  13caec:	e5843000 	str	r3, [r4]
  13caf0:	e12fff3c 	blx	ip
  13caf4:	e5943004 	ldr	r3, [r4, #4]
  13caf8:	e3530000 	cmp	r3, #0
  13cafc:	1a000075 	bne	13ccd8 <__bin_chunk+0x320>
  13cb00:	e1a00006 	mov	r0, r6
  13cb04:	ebffff09 	bl	13c730 <alloc_rev>
  13cb08:	e3500000 	cmp	r0, #0
  13cb0c:	0a000010 	beq	13cb54 <__bin_chunk+0x19c>
  13cb10:	e5963000 	ldr	r3, [r6]
  13cb14:	e59d2010 	ldr	r2, [sp, #16]
  13cb18:	e3c33001 	bic	r3, r3, #1
  13cb1c:	e0466003 	sub	r6, r6, r3
  13cb20:	e5963004 	ldr	r3, [r6, #4]
  13cb24:	e59d1000 	ldr	r1, [sp]
  13cb28:	e3c33001 	bic	r3, r3, #1
  13cb2c:	e0822003 	add	r2, r2, r3
  13cb30:	e0811003 	add	r1, r1, r3
  13cb34:	e352090a 	cmp	r2, #163840	; 0x28000
  13cb38:	e58d1000 	str	r1, [sp]
  13cb3c:	9a000004 	bls	13cb54 <__bin_chunk+0x19c>
  13cb40:	e0222003 	eor	r2, r2, r3
  13cb44:	e1520003 	cmp	r2, r3
  13cb48:	e59d1014 	ldr	r1, [sp, #20]
  13cb4c:	83a01001 	movhi	r1, #1
  13cb50:	e58d1014 	str	r1, [sp, #20]
  13cb54:	e1a0000b 	mov	r0, fp
  13cb58:	ebfffe54 	bl	13c4b0 <alloc_fwd>
  13cb5c:	e3500000 	cmp	r0, #0
  13cb60:	0affffa8 	beq	13ca08 <__bin_chunk+0x50>
  13cb64:	e59b3004 	ldr	r3, [fp, #4]
  13cb68:	e59d2010 	ldr	r2, [sp, #16]
  13cb6c:	e3c33001 	bic	r3, r3, #1
  13cb70:	e59d1000 	ldr	r1, [sp]
  13cb74:	e0822003 	add	r2, r2, r3
  13cb78:	e0811003 	add	r1, r1, r3
  13cb7c:	e352090a 	cmp	r2, #163840	; 0x28000
  13cb80:	e58d1000 	str	r1, [sp]
  13cb84:	9a000004 	bls	13cb9c <__bin_chunk+0x1e4>
  13cb88:	e0222003 	eor	r2, r2, r3
  13cb8c:	e1520003 	cmp	r2, r3
  13cb90:	e59d1014 	ldr	r1, [sp, #20]
  13cb94:	83a01001 	movhi	r1, #1
  13cb98:	e58d1014 	str	r1, [sp, #20]
  13cb9c:	e08bb003 	add	fp, fp, r3
  13cba0:	eaffff98 	b	13ca08 <__bin_chunk+0x50>
  13cba4:	e3570000 	cmp	r7, #0
  13cba8:	0affffad 	beq	13ca64 <__bin_chunk+0xac>
  13cbac:	e1a03001 	mov	r3, r1
  13cbb0:	e1a02001 	mov	r2, r1
  13cbb4:	e1a00004 	mov	r0, r4
  13cbb8:	e1a01008 	mov	r1, r8
  13cbbc:	eb0013a0 	bl	141a44 <__wait>
  13cbc0:	e5947000 	ldr	r7, [r4]
  13cbc4:	ea000002 	b	13cbd4 <__bin_chunk+0x21c>
  13cbc8:	e5943000 	ldr	r3, [r4]
  13cbcc:	e1570003 	cmp	r7, r3
  13cbd0:	1afffffa 	bne	13cbc0 <__bin_chunk+0x208>
  13cbd4:	e1a00007 	mov	r0, r7
  13cbd8:	e3a01001 	mov	r1, #1
  13cbdc:	e1a02004 	mov	r2, r4
  13cbe0:	e5993000 	ldr	r3, [r9]
  13cbe4:	e12fff33 	blx	r3
  13cbe8:	e3500000 	cmp	r0, #0
  13cbec:	1afffff5 	bne	13cbc8 <__bin_chunk+0x210>
  13cbf0:	eaffffeb 	b	13cba4 <__bin_chunk+0x1ec>
  13cbf4:	e59d3008 	ldr	r3, [sp, #8]
  13cbf8:	e3530c02 	cmp	r3, #512	; 0x200
  13cbfc:	2a000027 	bcs	13cca0 <__bin_chunk+0x2e8>
  13cc00:	e59f23e0 	ldr	r2, [pc, #992]	; 13cfe8 <__bin_chunk+0x630>
  13cc04:	e08231a3 	add	r3, r2, r3, lsr #3
  13cc08:	e5533004 	ldrb	r3, [r3, #-4]
  13cc0c:	e1a04203 	lsl	r4, r3, #4
  13cc10:	e58d3008 	str	r3, [sp, #8]
  13cc14:	e2844008 	add	r4, r4, #8
  13cc18:	e58d3004 	str	r3, [sp, #4]
  13cc1c:	eaffff8a 	b	13ca4c <__bin_chunk+0x94>
  13cc20:	e59d3008 	ldr	r3, [sp, #8]
  13cc24:	e0852207 	add	r2, r5, r7, lsl #4
  13cc28:	e0853203 	add	r3, r5, r3, lsl #4
  13cc2c:	e2833008 	add	r3, r3, #8
  13cc30:	e7853207 	str	r3, [r5, r7, lsl #4]
  13cc34:	e5823004 	str	r3, [r2, #4]
  13cc38:	e59f33a0 	ldr	r3, [pc, #928]	; 13cfe0 <__bin_chunk+0x628>
  13cc3c:	e593300c 	ldr	r3, [r3, #12]
  13cc40:	e3530000 	cmp	r3, #0
  13cc44:	0affff8f 	beq	13ca88 <__bin_chunk+0xd0>
  13cc48:	e59f339c 	ldr	r3, [pc, #924]	; 13cfec <__bin_chunk+0x634>
  13cc4c:	e283a008 	add	sl, r3, #8
  13cc50:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13cc54:	ea000002 	b	13cc64 <__bin_chunk+0x2ac>
  13cc58:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cc5c:	e1580003 	cmp	r8, r3
  13cc60:	1afffffa 	bne	13cc50 <__bin_chunk+0x298>
  13cc64:	e1a00008 	mov	r0, r8
  13cc68:	e3a01001 	mov	r1, #1
  13cc6c:	e1a0200a 	mov	r2, sl
  13cc70:	e5993000 	ldr	r3, [r9]
  13cc74:	e12fff33 	blx	r3
  13cc78:	e3500000 	cmp	r0, #0
  13cc7c:	1afffff5 	bne	13cc58 <__bin_chunk+0x2a0>
  13cc80:	e3580000 	cmp	r8, #0
  13cc84:	0affff7f 	beq	13ca88 <__bin_chunk+0xd0>
  13cc88:	e1a03001 	mov	r3, r1
  13cc8c:	e1a02001 	mov	r2, r1
  13cc90:	e1a0000a 	mov	r0, sl
  13cc94:	e59d100c 	ldr	r1, [sp, #12]
  13cc98:	eb001369 	bl	141a44 <__wait>
  13cc9c:	eaffffeb 	b	13cc50 <__bin_chunk+0x298>
  13cca0:	e59d3008 	ldr	r3, [sp, #8]
  13cca4:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cca8:	83a0303f 	movhi	r3, #63	; 0x3f
  13ccac:	959f2334 	ldrls	r2, [pc, #820]	; 13cfe8 <__bin_chunk+0x630>
  13ccb0:	858d3008 	strhi	r3, [sp, #8]
  13ccb4:	908233a3 	addls	r3, r2, r3, lsr #7
  13ccb8:	95533004 	ldrbls	r3, [r3, #-4]
  13ccbc:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13ccc0:	92833010 	addls	r3, r3, #16
  13ccc4:	91a04203 	lslls	r4, r3, #4
  13ccc8:	958d3008 	strls	r3, [sp, #8]
  13cccc:	92844008 	addls	r4, r4, #8
  13ccd0:	e58d3004 	str	r3, [sp, #4]
  13ccd4:	eaffff5c 	b	13ca4c <__bin_chunk+0x94>
  13ccd8:	e3a000f0 	mov	r0, #240	; 0xf0
  13ccdc:	ebfffcef 	bl	13c0a0 <get_rtt_syscall>
  13cce0:	e2503000 	subs	r3, r0, #0
  13cce4:	0affff85 	beq	13cb00 <__bin_chunk+0x148>
  13cce8:	e3a02001 	mov	r2, #1
  13ccec:	e3a01081 	mov	r1, #129	; 0x81
  13ccf0:	e1a00004 	mov	r0, r4
  13ccf4:	e12fff33 	blx	r3
  13ccf8:	e3700026 	cmn	r0, #38	; 0x26
  13ccfc:	1affff7f 	bne	13cb00 <__bin_chunk+0x148>
  13cd00:	e3a000f0 	mov	r0, #240	; 0xf0
  13cd04:	ebfffce5 	bl	13c0a0 <get_rtt_syscall>
  13cd08:	e2503000 	subs	r3, r0, #0
  13cd0c:	0affff7b 	beq	13cb00 <__bin_chunk+0x148>
  13cd10:	e3a02001 	mov	r2, #1
  13cd14:	e1a00004 	mov	r0, r4
  13cd18:	e1a01002 	mov	r1, r2
  13cd1c:	e12fff33 	blx	r3
  13cd20:	eaffff76 	b	13cb00 <__bin_chunk+0x148>
  13cd24:	e3a000f0 	mov	r0, #240	; 0xf0
  13cd28:	ebfffcdc 	bl	13c0a0 <get_rtt_syscall>
  13cd2c:	e2503000 	subs	r3, r0, #0
  13cd30:	e59f72b8 	ldr	r7, [pc, #696]	; 13cff0 <__bin_chunk+0x638>
  13cd34:	0affff64 	beq	13cacc <__bin_chunk+0x114>
  13cd38:	e3a02001 	mov	r2, #1
  13cd3c:	e3a01081 	mov	r1, #129	; 0x81
  13cd40:	e1a00007 	mov	r0, r7
  13cd44:	e12fff33 	blx	r3
  13cd48:	e3700026 	cmn	r0, #38	; 0x26
  13cd4c:	1affff5e 	bne	13cacc <__bin_chunk+0x114>
  13cd50:	e3a000f0 	mov	r0, #240	; 0xf0
  13cd54:	ebfffcd1 	bl	13c0a0 <get_rtt_syscall>
  13cd58:	e2503000 	subs	r3, r0, #0
  13cd5c:	0affff5a 	beq	13cacc <__bin_chunk+0x114>
  13cd60:	e3a02001 	mov	r2, #1
  13cd64:	e1a00007 	mov	r0, r7
  13cd68:	e1a01002 	mov	r1, r2
  13cd6c:	e12fff33 	blx	r3
  13cd70:	eaffff55 	b	13cacc <__bin_chunk+0x114>
  13cd74:	e59d3004 	ldr	r3, [sp, #4]
  13cd78:	e8950006 	ldm	r5, {r1, r2}
  13cd7c:	e263c020 	rsb	ip, r3, #32
  13cd80:	e1a08331 	lsr	r8, r1, r3
  13cd84:	e2430020 	sub	r0, r3, #32
  13cd88:	e3a03000 	mov	r3, #0
  13cd8c:	e1888c12 	orr	r8, r8, r2, lsl ip
  13cd90:	e1888032 	orr	r8, r8, r2, lsr r0
  13cd94:	e2082001 	and	r2, r8, #1
  13cd98:	e1923003 	orrs	r3, r2, r3
  13cd9c:	0a00005d 	beq	13cf18 <__bin_chunk+0x560>
  13cda0:	e59d3000 	ldr	r3, [sp]
  13cda4:	e5863004 	str	r3, [r6, #4]
  13cda8:	e58b3000 	str	r3, [fp]
  13cdac:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cdb0:	e3530000 	cmp	r3, #0
  13cdb4:	0a000009 	beq	13cde0 <__bin_chunk+0x428>
  13cdb8:	e59f3224 	ldr	r3, [pc, #548]	; 13cfe4 <__bin_chunk+0x62c>
  13cdbc:	e593c000 	ldr	ip, [r3]
  13cdc0:	e12fff3c 	blx	ip
  13cdc4:	e3a02000 	mov	r2, #0
  13cdc8:	e593c000 	ldr	ip, [r3]
  13cdcc:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13cdd0:	e12fff3c 	blx	ip
  13cdd4:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cdd8:	e1530002 	cmp	r3, r2
  13cddc:	1a000039 	bne	13cec8 <__bin_chunk+0x510>
  13cde0:	e59d3008 	ldr	r3, [sp, #8]
  13cde4:	e0857207 	add	r7, r5, r7, lsl #4
  13cde8:	e2833001 	add	r3, r3, #1
  13cdec:	e5972004 	ldr	r2, [r7, #4]
  13cdf0:	e0855203 	add	r5, r5, r3, lsl #4
  13cdf4:	e2453008 	sub	r3, r5, #8
  13cdf8:	e586200c 	str	r2, [r6, #12]
  13cdfc:	e5863008 	str	r3, [r6, #8]
  13ce00:	e59d2014 	ldr	r2, [sp, #20]
  13ce04:	e5856004 	str	r6, [r5, #4]
  13ce08:	e596300c 	ldr	r3, [r6, #12]
  13ce0c:	e3520000 	cmp	r2, #0
  13ce10:	e5836008 	str	r6, [r3, #8]
  13ce14:	0a000008 	beq	13ce3c <__bin_chunk+0x484>
  13ce18:	e59f31d4 	ldr	r3, [pc, #468]	; 13cff4 <__bin_chunk+0x63c>
  13ce1c:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13ce20:	e286600f 	add	r6, r6, #15
  13ce24:	e24b1010 	sub	r1, fp, #16
  13ce28:	e0060003 	and	r0, r6, r3
  13ce2c:	e0011003 	and	r1, r1, r3
  13ce30:	e0411000 	sub	r1, r1, r0
  13ce34:	e3a02004 	mov	r2, #4
  13ce38:	eb0002ca 	bl	13d968 <__madvise>
  13ce3c:	e5943000 	ldr	r3, [r4]
  13ce40:	e3530000 	cmp	r3, #0
  13ce44:	0a000009 	beq	13ce70 <__bin_chunk+0x4b8>
  13ce48:	e59f3194 	ldr	r3, [pc, #404]	; 13cfe4 <__bin_chunk+0x62c>
  13ce4c:	e593c000 	ldr	ip, [r3]
  13ce50:	e12fff3c 	blx	ip
  13ce54:	e3a02000 	mov	r2, #0
  13ce58:	e593c000 	ldr	ip, [r3]
  13ce5c:	e5842000 	str	r2, [r4]
  13ce60:	e12fff3c 	blx	ip
  13ce64:	e5943004 	ldr	r3, [r4, #4]
  13ce68:	e1530002 	cmp	r3, r2
  13ce6c:	1a000001 	bne	13ce78 <__bin_chunk+0x4c0>
  13ce70:	e28dd01c 	add	sp, sp, #28
  13ce74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ce78:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce7c:	ebfffc87 	bl	13c0a0 <get_rtt_syscall>
  13ce80:	e2503000 	subs	r3, r0, #0
  13ce84:	0afffff9 	beq	13ce70 <__bin_chunk+0x4b8>
  13ce88:	e3a02001 	mov	r2, #1
  13ce8c:	e3a01081 	mov	r1, #129	; 0x81
  13ce90:	e1a00004 	mov	r0, r4
  13ce94:	e12fff33 	blx	r3
  13ce98:	e3700026 	cmn	r0, #38	; 0x26
  13ce9c:	1afffff3 	bne	13ce70 <__bin_chunk+0x4b8>
  13cea0:	e3a000f0 	mov	r0, #240	; 0xf0
  13cea4:	ebfffc7d 	bl	13c0a0 <get_rtt_syscall>
  13cea8:	e2503000 	subs	r3, r0, #0
  13ceac:	0affffef 	beq	13ce70 <__bin_chunk+0x4b8>
  13ceb0:	e3a02001 	mov	r2, #1
  13ceb4:	e1a00004 	mov	r0, r4
  13ceb8:	e1a01002 	mov	r1, r2
  13cebc:	e28dd01c 	add	sp, sp, #28
  13cec0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13cec4:	e12fff13 	bx	r3
  13cec8:	e3a000f0 	mov	r0, #240	; 0xf0
  13cecc:	ebfffc73 	bl	13c0a0 <get_rtt_syscall>
  13ced0:	e2503000 	subs	r3, r0, #0
  13ced4:	e59f8114 	ldr	r8, [pc, #276]	; 13cff0 <__bin_chunk+0x638>
  13ced8:	0affffc0 	beq	13cde0 <__bin_chunk+0x428>
  13cedc:	e3a02001 	mov	r2, #1
  13cee0:	e3a01081 	mov	r1, #129	; 0x81
  13cee4:	e1a00008 	mov	r0, r8
  13cee8:	e12fff33 	blx	r3
  13ceec:	e3700026 	cmn	r0, #38	; 0x26
  13cef0:	1affffba 	bne	13cde0 <__bin_chunk+0x428>
  13cef4:	e3a000f0 	mov	r0, #240	; 0xf0
  13cef8:	ebfffc68 	bl	13c0a0 <get_rtt_syscall>
  13cefc:	e2503000 	subs	r3, r0, #0
  13cf00:	0affffb6 	beq	13cde0 <__bin_chunk+0x428>
  13cf04:	e3a02001 	mov	r2, #1
  13cf08:	e1a00008 	mov	r0, r8
  13cf0c:	e1a01002 	mov	r1, r2
  13cf10:	e12fff33 	blx	r3
  13cf14:	eaffffb1 	b	13cde0 <__bin_chunk+0x428>
  13cf18:	e3a03001 	mov	r3, #1
  13cf1c:	e59d1004 	ldr	r1, [sp, #4]
  13cf20:	e1a02013 	lsl	r2, r3, r0
  13cf24:	e1b01113 	lsls	r1, r3, r1
  13cf28:	e1823c33 	orr	r3, r2, r3, lsr ip
  13cf2c:	e58d100c 	str	r1, [sp, #12]
  13cf30:	e58d3004 	str	r3, [sp, #4]
  13cf34:	0a000011 	beq	13cf80 <__bin_chunk+0x5c8>
  13cf38:	e59f809c 	ldr	r8, [pc, #156]	; 13cfdc <__bin_chunk+0x624>
  13cf3c:	e59fa094 	ldr	sl, [pc, #148]	; 13cfd8 <__bin_chunk+0x620>
  13cf40:	e58db010 	str	fp, [sp, #16]
  13cf44:	e5959000 	ldr	r9, [r5]
  13cf48:	e59d300c 	ldr	r3, [sp, #12]
  13cf4c:	e183b009 	orr	fp, r3, r9
  13cf50:	ea000002 	b	13cf60 <__bin_chunk+0x5a8>
  13cf54:	e5953000 	ldr	r3, [r5]
  13cf58:	e1590003 	cmp	r9, r3
  13cf5c:	1afffff8 	bne	13cf44 <__bin_chunk+0x58c>
  13cf60:	e1a00009 	mov	r0, r9
  13cf64:	e1a0100b 	mov	r1, fp
  13cf68:	e1a0200a 	mov	r2, sl
  13cf6c:	e5983000 	ldr	r3, [r8]
  13cf70:	e12fff33 	blx	r3
  13cf74:	e3500000 	cmp	r0, #0
  13cf78:	1afffff5 	bne	13cf54 <__bin_chunk+0x59c>
  13cf7c:	e59db010 	ldr	fp, [sp, #16]
  13cf80:	e59d3004 	ldr	r3, [sp, #4]
  13cf84:	e3530000 	cmp	r3, #0
  13cf88:	0affff84 	beq	13cda0 <__bin_chunk+0x3e8>
  13cf8c:	e59f8048 	ldr	r8, [pc, #72]	; 13cfdc <__bin_chunk+0x624>
  13cf90:	e59fa060 	ldr	sl, [pc, #96]	; 13cff8 <__bin_chunk+0x640>
  13cf94:	e58db00c 	str	fp, [sp, #12]
  13cf98:	e5959004 	ldr	r9, [r5, #4]
  13cf9c:	e59d3004 	ldr	r3, [sp, #4]
  13cfa0:	e183b009 	orr	fp, r3, r9
  13cfa4:	ea000002 	b	13cfb4 <__bin_chunk+0x5fc>
  13cfa8:	e5953004 	ldr	r3, [r5, #4]
  13cfac:	e1590003 	cmp	r9, r3
  13cfb0:	1afffff8 	bne	13cf98 <__bin_chunk+0x5e0>
  13cfb4:	e1a00009 	mov	r0, r9
  13cfb8:	e1a0100b 	mov	r1, fp
  13cfbc:	e1a0200a 	mov	r2, sl
  13cfc0:	e5983000 	ldr	r3, [r8]
  13cfc4:	e12fff33 	blx	r3
  13cfc8:	e3500000 	cmp	r0, #0
  13cfcc:	1afffff5 	bne	13cfa8 <__bin_chunk+0x5f0>
  13cfd0:	e59db00c 	ldr	fp, [sp, #12]
  13cfd4:	eaffff71 	b	13cda0 <__bin_chunk+0x3e8>
  13cfd8:	0014ec28 	.word	0x0014ec28
  13cfdc:	0014d3d8 	.word	0x0014d3d8
  13cfe0:	0015d05c 	.word	0x0015d05c
  13cfe4:	0014d3d4 	.word	0x0014d3d4
  13cfe8:	0014ca90 	.word	0x0014ca90
  13cfec:	0014f028 	.word	0x0014f028
  13cff0:	0014f030 	.word	0x0014f030
  13cff4:	fffff000 	.word	0xfffff000
  13cff8:	0014ec2c 	.word	0x0014ec2c

0013cffc <trim>:
  13cffc:	e5903004 	ldr	r3, [r0, #4]
  13d000:	e1a02000 	mov	r2, r0
  13d004:	e3c33001 	bic	r3, r3, #1
  13d008:	e2430010 	sub	r0, r3, #16
  13d00c:	e1500001 	cmp	r0, r1
  13d010:	912fff1e 	bxls	lr
  13d014:	e043c001 	sub	ip, r3, r1
  13d018:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d01c:	e38cc001 	orr	ip, ip, #1
  13d020:	e381e001 	orr	lr, r1, #1
  13d024:	e0820001 	add	r0, r2, r1
  13d028:	e782e001 	str	lr, [r2, r1]
  13d02c:	e580c004 	str	ip, [r0, #4]
  13d030:	e782c003 	str	ip, [r2, r3]
  13d034:	e582e004 	str	lr, [r2, #4]
  13d038:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d03c:	eafffe5d 	b	13c9b8 <__bin_chunk>

0013d040 <malloc>:
  13d040:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d044:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13d048:	e28d3028 	add	r3, sp, #40	; 0x28
  13d04c:	e523000c 	str	r0, [r3, #-12]!
  13d050:	e1a00003 	mov	r0, r3
  13d054:	ebfffcb1 	bl	13c320 <adjust_size>
  13d058:	e3500000 	cmp	r0, #0
  13d05c:	ba000145 	blt	13d578 <malloc+0x538>
  13d060:	e59d301c 	ldr	r3, [sp, #28]
  13d064:	e3530907 	cmp	r3, #114688	; 0x1c000
  13d068:	8a000076 	bhi	13d248 <malloc+0x208>
  13d06c:	e1a03223 	lsr	r3, r3, #4
  13d070:	e2432001 	sub	r2, r3, #1
  13d074:	e3520020 	cmp	r2, #32
  13d078:	958d2018 	strls	r2, [sp, #24]
  13d07c:	8a000066 	bhi	13d21c <malloc+0x1dc>
  13d080:	e3a01001 	mov	r1, #1
  13d084:	e59dc018 	ldr	ip, [sp, #24]
  13d088:	e59f85a8 	ldr	r8, [pc, #1448]	; 13d638 <malloc+0x5f8>
  13d08c:	e24c0020 	sub	r0, ip, #32
  13d090:	e1a03011 	lsl	r3, r1, r0
  13d094:	e1a02c11 	lsl	r2, r1, ip
  13d098:	e26c0020 	rsb	r0, ip, #32
  13d09c:	e2722000 	rsbs	r2, r2, #0
  13d0a0:	e1833031 	orr	r3, r3, r1, lsr r0
  13d0a4:	e2e33000 	rsc	r3, r3, #0
  13d0a8:	e58d2010 	str	r2, [sp, #16]
  13d0ac:	e58d3014 	str	r3, [sp, #20]
  13d0b0:	e59fb584 	ldr	fp, [pc, #1412]	; 13d63c <malloc+0x5fc>
  13d0b4:	e59f6584 	ldr	r6, [pc, #1412]	; 13d640 <malloc+0x600>
  13d0b8:	e898000c 	ldm	r8, {r2, r3}
  13d0bc:	e28d1010 	add	r1, sp, #16
  13d0c0:	e8910003 	ldm	r1, {r0, r1}
  13d0c4:	e0011003 	and	r1, r1, r3
  13d0c8:	e0000002 	and	r0, r0, r2
  13d0cc:	e1a02000 	mov	r2, r0
  13d0d0:	e1a03001 	mov	r3, r1
  13d0d4:	e1921003 	orrs	r1, r2, r3
  13d0d8:	0a000073 	beq	13d2ac <malloc+0x26c>
  13d0dc:	e3500000 	cmp	r0, #0
  13d0e0:	1a000048 	bne	13d208 <malloc+0x1c8>
  13d0e4:	e2637000 	rsb	r7, r3, #0
  13d0e8:	e0077003 	and	r7, r7, r3
  13d0ec:	e16f7f17 	clz	r7, r7
  13d0f0:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d0f4:	e59b300c 	ldr	r3, [fp, #12]
  13d0f8:	e1a09207 	lsl	r9, r7, #4
  13d0fc:	e2899008 	add	r9, r9, #8
  13d100:	e3530000 	cmp	r3, #0
  13d104:	e0885009 	add	r5, r8, r9
  13d108:	1285a004 	addne	sl, r5, #4
  13d10c:	1a000030 	bne	13d1d4 <malloc+0x194>
  13d110:	e2873001 	add	r3, r7, #1
  13d114:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d118:	e0882009 	add	r2, r8, r9
  13d11c:	e3540000 	cmp	r4, #0
  13d120:	00881203 	addeq	r1, r8, r3, lsl #4
  13d124:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d128:	05812004 	streq	r2, [r1, #4]
  13d12c:	0a000001 	beq	13d138 <malloc+0xf8>
  13d130:	e1540002 	cmp	r4, r2
  13d134:	1a00009d 	bne	13d3b0 <malloc+0x370>
  13d138:	e7983009 	ldr	r3, [r8, r9]
  13d13c:	e3530000 	cmp	r3, #0
  13d140:	0affffdc 	beq	13d0b8 <malloc+0x78>
  13d144:	e59f24f8 	ldr	r2, [pc, #1272]	; 13d644 <malloc+0x604>
  13d148:	e592c000 	ldr	ip, [r2]
  13d14c:	e12fff3c 	blx	ip
  13d150:	e3a03000 	mov	r3, #0
  13d154:	e592c000 	ldr	ip, [r2]
  13d158:	e5853000 	str	r3, [r5]
  13d15c:	e12fff3c 	blx	ip
  13d160:	e5953004 	ldr	r3, [r5, #4]
  13d164:	e3530000 	cmp	r3, #0
  13d168:	0affffd2 	beq	13d0b8 <malloc+0x78>
  13d16c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d170:	ebfffbca 	bl	13c0a0 <get_rtt_syscall>
  13d174:	e2503000 	subs	r3, r0, #0
  13d178:	0affffce 	beq	13d0b8 <malloc+0x78>
  13d17c:	e3a02001 	mov	r2, #1
  13d180:	e3a01081 	mov	r1, #129	; 0x81
  13d184:	e1a00005 	mov	r0, r5
  13d188:	e12fff33 	blx	r3
  13d18c:	e3700026 	cmn	r0, #38	; 0x26
  13d190:	1affffc8 	bne	13d0b8 <malloc+0x78>
  13d194:	e3a000f0 	mov	r0, #240	; 0xf0
  13d198:	ebfffbc0 	bl	13c0a0 <get_rtt_syscall>
  13d19c:	e2503000 	subs	r3, r0, #0
  13d1a0:	0affffc4 	beq	13d0b8 <malloc+0x78>
  13d1a4:	e3a02001 	mov	r2, #1
  13d1a8:	e1a00005 	mov	r0, r5
  13d1ac:	e1a01002 	mov	r1, r2
  13d1b0:	e12fff33 	blx	r3
  13d1b4:	eaffffbf 	b	13d0b8 <malloc+0x78>
  13d1b8:	e3540000 	cmp	r4, #0
  13d1bc:	0affffd3 	beq	13d110 <malloc+0xd0>
  13d1c0:	e1a03001 	mov	r3, r1
  13d1c4:	e1a02001 	mov	r2, r1
  13d1c8:	e1a00005 	mov	r0, r5
  13d1cc:	e1a0100a 	mov	r1, sl
  13d1d0:	eb00121b 	bl	141a44 <__wait>
  13d1d4:	e5954000 	ldr	r4, [r5]
  13d1d8:	ea000002 	b	13d1e8 <malloc+0x1a8>
  13d1dc:	e5953000 	ldr	r3, [r5]
  13d1e0:	e1540003 	cmp	r4, r3
  13d1e4:	1afffffa 	bne	13d1d4 <malloc+0x194>
  13d1e8:	e1a00004 	mov	r0, r4
  13d1ec:	e3a01001 	mov	r1, #1
  13d1f0:	e1a02005 	mov	r2, r5
  13d1f4:	e5963000 	ldr	r3, [r6]
  13d1f8:	e12fff33 	blx	r3
  13d1fc:	e3500000 	cmp	r0, #0
  13d200:	1afffff5 	bne	13d1dc <malloc+0x19c>
  13d204:	eaffffeb 	b	13d1b8 <malloc+0x178>
  13d208:	e2607000 	rsb	r7, r0, #0
  13d20c:	e0077000 	and	r7, r7, r0
  13d210:	e16f7f17 	clz	r7, r7
  13d214:	e267701f 	rsb	r7, r7, #31
  13d218:	eaffffb5 	b	13d0f4 <malloc+0xb4>
  13d21c:	e2433002 	sub	r3, r3, #2
  13d220:	e59f2420 	ldr	r2, [pc, #1056]	; 13d648 <malloc+0x608>
  13d224:	e3530c02 	cmp	r3, #512	; 0x200
  13d228:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d22c:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d230:	35533004 	ldrbcc	r3, [r3, #-4]
  13d234:	25533004 	ldrbcs	r3, [r3, #-4]
  13d238:	32833001 	addcc	r3, r3, #1
  13d23c:	22833011 	addcs	r3, r3, #17
  13d240:	e58d3018 	str	r3, [sp, #24]
  13d244:	eaffff8d 	b	13d080 <malloc+0x40>
  13d248:	e3e02000 	mvn	r2, #0
  13d24c:	e3a06000 	mov	r6, #0
  13d250:	e3a07000 	mov	r7, #0
  13d254:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d258:	e2833007 	add	r3, r3, #7
  13d25c:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d260:	e3c4400f 	bic	r4, r4, #15
  13d264:	e58d2000 	str	r2, [sp]
  13d268:	e1a01004 	mov	r1, r4
  13d26c:	e58d6008 	str	r6, [sp, #8]
  13d270:	e58d700c 	str	r7, [sp, #12]
  13d274:	e3a03022 	mov	r3, #34	; 0x22
  13d278:	e3a02003 	mov	r2, #3
  13d27c:	e3a00000 	mov	r0, #0
  13d280:	eb0001ca 	bl	13d9b0 <__mmap>
  13d284:	e3700001 	cmn	r0, #1
  13d288:	0a0000ba 	beq	13d578 <malloc+0x538>
  13d28c:	e3a03008 	mov	r3, #8
  13d290:	e2444008 	sub	r4, r4, #8
  13d294:	e580400c 	str	r4, [r0, #12]
  13d298:	e5803008 	str	r3, [r0, #8]
  13d29c:	e2804010 	add	r4, r0, #16
  13d2a0:	e1a00004 	mov	r0, r4
  13d2a4:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d2a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d2ac:	e59b200c 	ldr	r2, [fp, #12]
  13d2b0:	e59d301c 	ldr	r3, [sp, #28]
  13d2b4:	e3520000 	cmp	r2, #0
  13d2b8:	e2833010 	add	r3, r3, #16
  13d2bc:	e59f5388 	ldr	r5, [pc, #904]	; 13d64c <malloc+0x60c>
  13d2c0:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d2c4:	1a000094 	bne	13d51c <malloc+0x4dc>
  13d2c8:	e28d0024 	add	r0, sp, #36	; 0x24
  13d2cc:	eb001718 	bl	142f34 <__expand_heap>
  13d2d0:	e2504000 	subs	r4, r0, #0
  13d2d4:	0a0000b8 	beq	13d5bc <malloc+0x57c>
  13d2d8:	e59f1370 	ldr	r1, [pc, #880]	; 13d650 <malloc+0x610>
  13d2dc:	e3a07001 	mov	r7, #1
  13d2e0:	e5916000 	ldr	r6, [r1]
  13d2e4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d2e8:	e1540006 	cmp	r4, r6
  13d2ec:	13a02001 	movne	r2, #1
  13d2f0:	e5950000 	ldr	r0, [r5]
  13d2f4:	12433010 	subne	r3, r3, #16
  13d2f8:	12846010 	addne	r6, r4, #16
  13d2fc:	15842008 	strne	r2, [r4, #8]
  13d300:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d304:	e0862003 	add	r2, r6, r3
  13d308:	e3500000 	cmp	r0, #0
  13d30c:	e1833007 	orr	r3, r3, r7
  13d310:	e9020088 	stmdb	r2, {r3, r7}
  13d314:	e5812000 	str	r2, [r1]
  13d318:	e5063004 	str	r3, [r6, #-4]
  13d31c:	e2464008 	sub	r4, r6, #8
  13d320:	0a000009 	beq	13d34c <malloc+0x30c>
  13d324:	e59f3318 	ldr	r3, [pc, #792]	; 13d644 <malloc+0x604>
  13d328:	e593c000 	ldr	ip, [r3]
  13d32c:	e12fff3c 	blx	ip
  13d330:	e3a02000 	mov	r2, #0
  13d334:	e593c000 	ldr	ip, [r3]
  13d338:	e5852000 	str	r2, [r5]
  13d33c:	e12fff3c 	blx	ip
  13d340:	e5953004 	ldr	r3, [r5, #4]
  13d344:	e1530002 	cmp	r3, r2
  13d348:	1a000060 	bne	13d4d0 <malloc+0x490>
  13d34c:	e3540000 	cmp	r4, #0
  13d350:	0a000088 	beq	13d578 <malloc+0x538>
  13d354:	e1a00004 	mov	r0, r4
  13d358:	ebfffcf4 	bl	13c730 <alloc_rev>
  13d35c:	e3500000 	cmp	r0, #0
  13d360:	0a00000b 	beq	13d394 <malloc+0x354>
  13d364:	e5163008 	ldr	r3, [r6, #-8]
  13d368:	e5161004 	ldr	r1, [r6, #-4]
  13d36c:	e3c33001 	bic	r3, r3, #1
  13d370:	e0443003 	sub	r3, r4, r3
  13d374:	e5932004 	ldr	r2, [r3, #4]
  13d378:	e3c22001 	bic	r2, r2, #1
  13d37c:	e0822001 	add	r2, r2, r1
  13d380:	e5832004 	str	r2, [r3, #4]
  13d384:	e5161004 	ldr	r1, [r6, #-4]
  13d388:	e3c11001 	bic	r1, r1, #1
  13d38c:	e7842001 	str	r2, [r4, r1]
  13d390:	e1a04003 	mov	r4, r3
  13d394:	e1a00004 	mov	r0, r4
  13d398:	e59d101c 	ldr	r1, [sp, #28]
  13d39c:	e2844008 	add	r4, r4, #8
  13d3a0:	ebffff15 	bl	13cffc <trim>
  13d3a4:	e1a00004 	mov	r0, r4
  13d3a8:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d3ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d3b0:	e3570027 	cmp	r7, #39	; 0x27
  13d3b4:	da000041 	ble	13d4c0 <malloc+0x480>
  13d3b8:	e59d3018 	ldr	r3, [sp, #24]
  13d3bc:	e59d001c 	ldr	r0, [sp, #28]
  13d3c0:	e2833002 	add	r3, r3, #2
  13d3c4:	e1570003 	cmp	r7, r3
  13d3c8:	da00003a 	ble	13d4b8 <malloc+0x478>
  13d3cc:	e5942004 	ldr	r2, [r4, #4]
  13d3d0:	e3c22001 	bic	r2, r2, #1
  13d3d4:	e0421000 	sub	r1, r2, r0
  13d3d8:	e1a03221 	lsr	r3, r1, #4
  13d3dc:	e2433001 	sub	r3, r3, #1
  13d3e0:	e3530020 	cmp	r3, #32
  13d3e4:	9a000035 	bls	13d4c0 <malloc+0x480>
  13d3e8:	e3530c02 	cmp	r3, #512	; 0x200
  13d3ec:	2a000065 	bcs	13d588 <malloc+0x548>
  13d3f0:	e59fc250 	ldr	ip, [pc, #592]	; 13d648 <malloc+0x608>
  13d3f4:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d3f8:	e5533004 	ldrb	r3, [r3, #-4]
  13d3fc:	e1570003 	cmp	r7, r3
  13d400:	1a00002e 	bne	13d4c0 <malloc+0x480>
  13d404:	e594c00c 	ldr	ip, [r4, #12]
  13d408:	e594e008 	ldr	lr, [r4, #8]
  13d40c:	e0843000 	add	r3, r4, r0
  13d410:	e583c00c 	str	ip, [r3, #12]
  13d414:	e583e008 	str	lr, [r3, #8]
  13d418:	e58c3008 	str	r3, [ip, #8]
  13d41c:	e593e008 	ldr	lr, [r3, #8]
  13d420:	e380c001 	orr	ip, r0, #1
  13d424:	e58e300c 	str	r3, [lr, #12]
  13d428:	e784c000 	str	ip, [r4, r0]
  13d42c:	e5831004 	str	r1, [r3, #4]
  13d430:	e7841002 	str	r1, [r4, r2]
  13d434:	e584c004 	str	ip, [r4, #4]
  13d438:	e5953000 	ldr	r3, [r5]
  13d43c:	e3530000 	cmp	r3, #0
  13d440:	0affffd3 	beq	13d394 <malloc+0x354>
  13d444:	e59f31f8 	ldr	r3, [pc, #504]	; 13d644 <malloc+0x604>
  13d448:	e593c000 	ldr	ip, [r3]
  13d44c:	e12fff3c 	blx	ip
  13d450:	e3a02000 	mov	r2, #0
  13d454:	e593c000 	ldr	ip, [r3]
  13d458:	e5852000 	str	r2, [r5]
  13d45c:	e12fff3c 	blx	ip
  13d460:	e5953004 	ldr	r3, [r5, #4]
  13d464:	e1530002 	cmp	r3, r2
  13d468:	0affffc9 	beq	13d394 <malloc+0x354>
  13d46c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d470:	ebfffb0a 	bl	13c0a0 <get_rtt_syscall>
  13d474:	e2503000 	subs	r3, r0, #0
  13d478:	0affffc5 	beq	13d394 <malloc+0x354>
  13d47c:	e3a02001 	mov	r2, #1
  13d480:	e3a01081 	mov	r1, #129	; 0x81
  13d484:	e1a00005 	mov	r0, r5
  13d488:	e12fff33 	blx	r3
  13d48c:	e3700026 	cmn	r0, #38	; 0x26
  13d490:	1affffbf 	bne	13d394 <malloc+0x354>
  13d494:	e3a000f0 	mov	r0, #240	; 0xf0
  13d498:	ebfffb00 	bl	13c0a0 <get_rtt_syscall>
  13d49c:	e2503000 	subs	r3, r0, #0
  13d4a0:	0affffbb 	beq	13d394 <malloc+0x354>
  13d4a4:	e3a02001 	mov	r2, #1
  13d4a8:	e1a00005 	mov	r0, r5
  13d4ac:	e1a01002 	mov	r1, r2
  13d4b0:	e12fff33 	blx	r3
  13d4b4:	eaffffb6 	b	13d394 <malloc+0x354>
  13d4b8:	e357003f 	cmp	r7, #63	; 0x3f
  13d4bc:	0a000038 	beq	13d5a4 <malloc+0x564>
  13d4c0:	e1a01007 	mov	r1, r7
  13d4c4:	e1a00004 	mov	r0, r4
  13d4c8:	ebfffbae 	bl	13c388 <unbin>
  13d4cc:	eaffffd9 	b	13d438 <malloc+0x3f8>
  13d4d0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d4d4:	ebfffaf1 	bl	13c0a0 <get_rtt_syscall>
  13d4d8:	e2503000 	subs	r3, r0, #0
  13d4dc:	0affff9a 	beq	13d34c <malloc+0x30c>
  13d4e0:	e1a02007 	mov	r2, r7
  13d4e4:	e3a01081 	mov	r1, #129	; 0x81
  13d4e8:	e59f015c 	ldr	r0, [pc, #348]	; 13d64c <malloc+0x60c>
  13d4ec:	e12fff33 	blx	r3
  13d4f0:	e3700026 	cmn	r0, #38	; 0x26
  13d4f4:	1affff94 	bne	13d34c <malloc+0x30c>
  13d4f8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d4fc:	ebfffae7 	bl	13c0a0 <get_rtt_syscall>
  13d500:	e2503000 	subs	r3, r0, #0
  13d504:	0affff90 	beq	13d34c <malloc+0x30c>
  13d508:	e1a02007 	mov	r2, r7
  13d50c:	e1a01007 	mov	r1, r7
  13d510:	e59f0134 	ldr	r0, [pc, #308]	; 13d64c <malloc+0x60c>
  13d514:	e12fff33 	blx	r3
  13d518:	eaffff8b 	b	13d34c <malloc+0x30c>
  13d51c:	e1a06005 	mov	r6, r5
  13d520:	e59f7118 	ldr	r7, [pc, #280]	; 13d640 <malloc+0x600>
  13d524:	e2858004 	add	r8, r5, #4
  13d528:	e5954000 	ldr	r4, [r5]
  13d52c:	ea000002 	b	13d53c <malloc+0x4fc>
  13d530:	e5953000 	ldr	r3, [r5]
  13d534:	e1540003 	cmp	r4, r3
  13d538:	1afffffa 	bne	13d528 <malloc+0x4e8>
  13d53c:	e1a00004 	mov	r0, r4
  13d540:	e3a01001 	mov	r1, #1
  13d544:	e1a02006 	mov	r2, r6
  13d548:	e5973000 	ldr	r3, [r7]
  13d54c:	e12fff33 	blx	r3
  13d550:	e3500000 	cmp	r0, #0
  13d554:	1afffff5 	bne	13d530 <malloc+0x4f0>
  13d558:	e3540000 	cmp	r4, #0
  13d55c:	0affff59 	beq	13d2c8 <malloc+0x288>
  13d560:	e1a03001 	mov	r3, r1
  13d564:	e1a02001 	mov	r2, r1
  13d568:	e59f00dc 	ldr	r0, [pc, #220]	; 13d64c <malloc+0x60c>
  13d56c:	e1a01008 	mov	r1, r8
  13d570:	eb001133 	bl	141a44 <__wait>
  13d574:	eaffffeb 	b	13d528 <malloc+0x4e8>
  13d578:	e3a04000 	mov	r4, #0
  13d57c:	e1a00004 	mov	r0, r4
  13d580:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d584:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d588:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d58c:	959fc0b4 	ldrls	ip, [pc, #180]	; 13d648 <malloc+0x608>
  13d590:	83a0303f 	movhi	r3, #63	; 0x3f
  13d594:	908c33a3 	addls	r3, ip, r3, lsr #7
  13d598:	95533004 	ldrbls	r3, [r3, #-4]
  13d59c:	92833010 	addls	r3, r3, #16
  13d5a0:	eaffff95 	b	13d3fc <malloc+0x3bc>
  13d5a4:	e5942004 	ldr	r2, [r4, #4]
  13d5a8:	e3c22001 	bic	r2, r2, #1
  13d5ac:	e0421000 	sub	r1, r2, r0
  13d5b0:	e3510907 	cmp	r1, #114688	; 0x1c000
  13d5b4:	8affff87 	bhi	13d3d8 <malloc+0x398>
  13d5b8:	eaffffc0 	b	13d4c0 <malloc+0x480>
  13d5bc:	e5953000 	ldr	r3, [r5]
  13d5c0:	e3530000 	cmp	r3, #0
  13d5c4:	0affffeb 	beq	13d578 <malloc+0x538>
  13d5c8:	e59f3074 	ldr	r3, [pc, #116]	; 13d644 <malloc+0x604>
  13d5cc:	e593c000 	ldr	ip, [r3]
  13d5d0:	e12fff3c 	blx	ip
  13d5d4:	e5854000 	str	r4, [r5]
  13d5d8:	e593c000 	ldr	ip, [r3]
  13d5dc:	e12fff3c 	blx	ip
  13d5e0:	e5953004 	ldr	r3, [r5, #4]
  13d5e4:	e3530000 	cmp	r3, #0
  13d5e8:	0affffe2 	beq	13d578 <malloc+0x538>
  13d5ec:	e3a000f0 	mov	r0, #240	; 0xf0
  13d5f0:	ebfffaaa 	bl	13c0a0 <get_rtt_syscall>
  13d5f4:	e2503000 	subs	r3, r0, #0
  13d5f8:	0affffde 	beq	13d578 <malloc+0x538>
  13d5fc:	e3a02001 	mov	r2, #1
  13d600:	e3a01081 	mov	r1, #129	; 0x81
  13d604:	e59f0040 	ldr	r0, [pc, #64]	; 13d64c <malloc+0x60c>
  13d608:	e12fff33 	blx	r3
  13d60c:	e3700026 	cmn	r0, #38	; 0x26
  13d610:	1affffd8 	bne	13d578 <malloc+0x538>
  13d614:	e3a000f0 	mov	r0, #240	; 0xf0
  13d618:	ebfffaa0 	bl	13c0a0 <get_rtt_syscall>
  13d61c:	e2503000 	subs	r3, r0, #0
  13d620:	0affffd4 	beq	13d578 <malloc+0x538>
  13d624:	e3a02001 	mov	r2, #1
  13d628:	e59f001c 	ldr	r0, [pc, #28]	; 13d64c <malloc+0x60c>
  13d62c:	e1a01002 	mov	r1, r2
  13d630:	e12fff33 	blx	r3
  13d634:	eaffff19 	b	13d2a0 <malloc+0x260>
  13d638:	0014ec28 	.word	0x0014ec28
  13d63c:	0015d05c 	.word	0x0015d05c
  13d640:	0014d3d8 	.word	0x0014d3d8
  13d644:	0014d3d4 	.word	0x0014d3d4
  13d648:	0014ca90 	.word	0x0014ca90
  13d64c:	0014ec20 	.word	0x0014ec20
  13d650:	0014ec1c 	.word	0x0014ec1c

0013d654 <calloc>:
  13d654:	e3510000 	cmp	r1, #0
  13d658:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d65c:	0a000002 	beq	13d66c <calloc+0x18>
  13d660:	e0832190 	umull	r2, r3, r0, r1
  13d664:	e3530000 	cmp	r3, #0
  13d668:	1a000013 	bne	13d6bc <calloc+0x68>
  13d66c:	e0040190 	mul	r4, r0, r1
  13d670:	e1a00004 	mov	r0, r4
  13d674:	ebfffe71 	bl	13d040 <malloc>
  13d678:	e2509000 	subs	r9, r0, #0
  13d67c:	0a000012 	beq	13d6cc <calloc+0x78>
  13d680:	e59f30a0 	ldr	r3, [pc, #160]	; 13d728 <calloc+0xd4>
  13d684:	e5933000 	ldr	r3, [r3]
  13d688:	e3530000 	cmp	r3, #0
  13d68c:	1a000005 	bne	13d6a8 <calloc+0x54>
  13d690:	e5193004 	ldr	r3, [r9, #-4]
  13d694:	e3130001 	tst	r3, #1
  13d698:	0a00000b 	beq	13d6cc <calloc+0x78>
  13d69c:	e59f3088 	ldr	r3, [pc, #136]	; 13d72c <calloc+0xd8>
  13d6a0:	e1540003 	cmp	r4, r3
  13d6a4:	8a00000a 	bhi	13d6d4 <calloc+0x80>
  13d6a8:	e1a02004 	mov	r2, r4
  13d6ac:	e1a00009 	mov	r0, r9
  13d6b0:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d6b4:	e3a01000 	mov	r1, #0
  13d6b8:	ea000e29 	b	140f64 <memset>
  13d6bc:	ebffed41 	bl	138bc8 <__errno_location>
  13d6c0:	e3a0300c 	mov	r3, #12
  13d6c4:	e3a09000 	mov	r9, #0
  13d6c8:	e5803000 	str	r3, [r0]
  13d6cc:	e1a00009 	mov	r0, r9
  13d6d0:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d6d4:	e1a08003 	mov	r8, r3
  13d6d8:	e0890004 	add	r0, r9, r4
  13d6dc:	e0002003 	and	r2, r0, r3
  13d6e0:	e0400002 	sub	r0, r0, r2
  13d6e4:	e3a01000 	mov	r1, #0
  13d6e8:	eb000e1d 	bl	140f64 <memset>
  13d6ec:	e0404009 	sub	r4, r0, r9
  13d6f0:	e1540008 	cmp	r4, r8
  13d6f4:	9affffeb 	bls	13d6a8 <calloc+0x54>
  13d6f8:	e3a02a01 	mov	r2, #4096	; 0x1000
  13d6fc:	e9100030 	ldmdb	r0, {r4, r5}
  13d700:	e2407010 	sub	r7, r0, #16
  13d704:	e89700c0 	ldm	r7, {r6, r7}
  13d708:	e184b006 	orr	fp, r4, r6
  13d70c:	e185c007 	orr	ip, r5, r7
  13d710:	e19b300c 	orrs	r3, fp, ip
  13d714:	1afffff1 	bne	13d6e0 <calloc+0x8c>
  13d718:	e2522010 	subs	r2, r2, #16
  13d71c:	e2400010 	sub	r0, r0, #16
  13d720:	1afffff5 	bne	13d6fc <calloc+0xa8>
  13d724:	eaffffed 	b	13d6e0 <calloc+0x8c>
  13d728:	0015d0a0 	.word	0x0015d0a0
  13d72c:	00000fff 	.word	0x00000fff

0013d730 <free>:
  13d730:	e2502000 	subs	r2, r0, #0
  13d734:	012fff1e 	bxeq	lr
  13d738:	e5123004 	ldr	r3, [r2, #-4]
  13d73c:	e2420008 	sub	r0, r2, #8
  13d740:	e3130001 	tst	r3, #1
  13d744:	0a000000 	beq	13d74c <free+0x1c>
  13d748:	eafffc9a 	b	13c9b8 <__bin_chunk>
  13d74c:	e5121008 	ldr	r1, [r2, #-8]
  13d750:	e3c33001 	bic	r3, r3, #1
  13d754:	e3110001 	tst	r1, #1
  13d758:	e0400001 	sub	r0, r0, r1
  13d75c:	e0831001 	add	r1, r3, r1
  13d760:	0a000000 	beq	13d768 <free+0x38>
  13d764:	e7f000f0 	.word	0xe7f000f0
  13d768:	ea0000f6 	b	13db48 <__munmap>

0013d76c <realloc>:
  13d76c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13d770:	e2505000 	subs	r5, r0, #0
  13d774:	e24dd008 	sub	sp, sp, #8
  13d778:	e58d1004 	str	r1, [sp, #4]
  13d77c:	0a000034 	beq	13d854 <realloc+0xe8>
  13d780:	e28d0004 	add	r0, sp, #4
  13d784:	ebfffae5 	bl	13c320 <adjust_size>
  13d788:	e3500000 	cmp	r0, #0
  13d78c:	ba00005b 	blt	13d900 <realloc+0x194>
  13d790:	e5153004 	ldr	r3, [r5, #-4]
  13d794:	e2459008 	sub	r9, r5, #8
  13d798:	e3130001 	tst	r3, #1
  13d79c:	e3c36001 	bic	r6, r3, #1
  13d7a0:	0a000010 	beq	13d7e8 <realloc+0x7c>
  13d7a4:	e7992006 	ldr	r2, [r9, r6]
  13d7a8:	e0894006 	add	r4, r9, r6
  13d7ac:	e1530002 	cmp	r3, r2
  13d7b0:	0a000000 	beq	13d7b8 <realloc+0x4c>
  13d7b4:	e7f000f0 	.word	0xe7f000f0
  13d7b8:	e59d1004 	ldr	r1, [sp, #4]
  13d7bc:	e1510006 	cmp	r1, r6
  13d7c0:	93866001 	orrls	r6, r6, #1
  13d7c4:	95056004 	strls	r6, [r5, #-4]
  13d7c8:	95846000 	strls	r6, [r4]
  13d7cc:	8a000038 	bhi	13d8b4 <realloc+0x148>
  13d7d0:	e1a00009 	mov	r0, r9
  13d7d4:	ebfffe08 	bl	13cffc <trim>
  13d7d8:	e1a07005 	mov	r7, r5
  13d7dc:	e1a00007 	mov	r0, r7
  13d7e0:	e28dd008 	add	sp, sp, #8
  13d7e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d7e8:	e5158008 	ldr	r8, [r5, #-8]
  13d7ec:	e59d4004 	ldr	r4, [sp, #4]
  13d7f0:	e3180001 	tst	r8, #1
  13d7f4:	e086a008 	add	sl, r6, r8
  13d7f8:	e0884004 	add	r4, r8, r4
  13d7fc:	1a00001a 	bne	13d86c <realloc+0x100>
  13d800:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d804:	3a00001b 	bcc	13d878 <realloc+0x10c>
  13d808:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13d80c:	e284400f 	add	r4, r4, #15
  13d810:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13d814:	e3c4400f 	bic	r4, r4, #15
  13d818:	e15a0004 	cmp	sl, r4
  13d81c:	01a07005 	moveq	r7, r5
  13d820:	0affffed 	beq	13d7dc <realloc+0x70>
  13d824:	e1a0100a 	mov	r1, sl
  13d828:	e0490008 	sub	r0, r9, r8
  13d82c:	e3a03001 	mov	r3, #1
  13d830:	e1a02004 	mov	r2, r4
  13d834:	eb00009a 	bl	13daa4 <__mremap>
  13d838:	e3700001 	cmn	r0, #1
  13d83c:	0a000031 	beq	13d908 <realloc+0x19c>
  13d840:	e0800008 	add	r0, r0, r8
  13d844:	e0444008 	sub	r4, r4, r8
  13d848:	e5804004 	str	r4, [r0, #4]
  13d84c:	e2807008 	add	r7, r0, #8
  13d850:	eaffffe1 	b	13d7dc <realloc+0x70>
  13d854:	e1a00001 	mov	r0, r1
  13d858:	ebfffdf8 	bl	13d040 <malloc>
  13d85c:	e1a07000 	mov	r7, r0
  13d860:	e1a00007 	mov	r0, r7
  13d864:	e28dd008 	add	sp, sp, #8
  13d868:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d86c:	e7f000f0 	.word	0xe7f000f0
  13d870:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d874:	2affffe3 	bcs	13d808 <realloc+0x9c>
  13d878:	e59d0004 	ldr	r0, [sp, #4]
  13d87c:	e2400008 	sub	r0, r0, #8
  13d880:	ebfffdee 	bl	13d040 <malloc>
  13d884:	e2507000 	subs	r7, r0, #0
  13d888:	0affffde 	beq	13d808 <realloc+0x9c>
  13d88c:	e59d6004 	ldr	r6, [sp, #4]
  13d890:	e2462008 	sub	r2, r6, #8
  13d894:	e1a01005 	mov	r1, r5
  13d898:	e1a00007 	mov	r0, r7
  13d89c:	eb000c78 	bl	140a84 <memcpy>
  13d8a0:	e1a00005 	mov	r0, r5
  13d8a4:	ebffffa1 	bl	13d730 <free>
  13d8a8:	e1a00007 	mov	r0, r7
  13d8ac:	e28dd008 	add	sp, sp, #8
  13d8b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d8b4:	e1a00004 	mov	r0, r4
  13d8b8:	ebfffafc 	bl	13c4b0 <alloc_fwd>
  13d8bc:	e3500000 	cmp	r0, #0
  13d8c0:	01a03006 	moveq	r3, r6
  13d8c4:	15943004 	ldrne	r3, [r4, #4]
  13d8c8:	059d1004 	ldreq	r1, [sp, #4]
  13d8cc:	13c33001 	bicne	r3, r3, #1
  13d8d0:	159d1004 	ldrne	r1, [sp, #4]
  13d8d4:	10844003 	addne	r4, r4, r3
  13d8d8:	10833006 	addne	r3, r3, r6
  13d8dc:	e1530001 	cmp	r3, r1
  13d8e0:	e3833001 	orr	r3, r3, #1
  13d8e4:	e5053004 	str	r3, [r5, #-4]
  13d8e8:	e5843000 	str	r3, [r4]
  13d8ec:	2affffb7 	bcs	13d7d0 <realloc+0x64>
  13d8f0:	e2410008 	sub	r0, r1, #8
  13d8f4:	ebfffdd1 	bl	13d040 <malloc>
  13d8f8:	e2507000 	subs	r7, r0, #0
  13d8fc:	1affffe3 	bne	13d890 <realloc+0x124>
  13d900:	e3a07000 	mov	r7, #0
  13d904:	eaffffb4 	b	13d7dc <realloc+0x70>
  13d908:	e59d1004 	ldr	r1, [sp, #4]
  13d90c:	eafffff7 	b	13d8f0 <realloc+0x184>

0013d910 <__malloc_donate>:
  13d910:	e2602008 	rsb	r2, r0, #8
  13d914:	e201300f 	and	r3, r1, #15
  13d918:	e202200f 	and	r2, r2, #15
  13d91c:	e2833008 	add	r3, r3, #8
  13d920:	e0833002 	add	r3, r3, r2
  13d924:	e041c000 	sub	ip, r1, r0
  13d928:	e15c0003 	cmp	ip, r3
  13d92c:	912fff1e 	bxls	lr
  13d930:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d934:	e3a0e001 	mov	lr, #1
  13d938:	e2823008 	add	r3, r2, #8
  13d93c:	e0803003 	add	r3, r0, r3
  13d940:	e3c1100f 	bic	r1, r1, #15
  13d944:	e041c003 	sub	ip, r1, r3
  13d948:	e18cc00e 	orr	ip, ip, lr
  13d94c:	e501e004 	str	lr, [r1, #-4]
  13d950:	e0800002 	add	r0, r0, r2
  13d954:	e503e008 	str	lr, [r3, #-8]
  13d958:	e501c008 	str	ip, [r1, #-8]
  13d95c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d960:	e503c004 	str	ip, [r3, #-4]
  13d964:	eafffc13 	b	13c9b8 <__bin_chunk>

0013d968 <__madvise>:
  13d968:	e92d4070 	push	{r4, r5, r6, lr}
  13d96c:	e1a04000 	mov	r4, r0
  13d970:	e3a000dc 	mov	r0, #220	; 0xdc
  13d974:	e1a05001 	mov	r5, r1
  13d978:	e1a06002 	mov	r6, r2
  13d97c:	ebfff9c7 	bl	13c0a0 <get_rtt_syscall>
  13d980:	e2503000 	subs	r3, r0, #0
  13d984:	0a000005 	beq	13d9a0 <__madvise+0x38>
  13d988:	e1a02006 	mov	r2, r6
  13d98c:	e1a01005 	mov	r1, r5
  13d990:	e1a00004 	mov	r0, r4
  13d994:	e12fff33 	blx	r3
  13d998:	e8bd4070 	pop	{r4, r5, r6, lr}
  13d99c:	eafff9f4 	b	13c174 <__syscall_ret>
  13d9a0:	e1a00003 	mov	r0, r3
  13d9a4:	eafffffb 	b	13d998 <__madvise+0x30>

0013d9a8 <dummy>:
  13d9a8:	e12fff1e 	bx	lr
  13d9ac:	00000000 	andeq	r0, r0, r0

0013d9b0 <__mmap>:
  13d9b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d9b4:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13d9b8:	e8950030 	ldm	r5, {r4, r5}
  13d9bc:	e24dd00c 	sub	sp, sp, #12
  13d9c0:	e28d7038 	add	r7, sp, #56	; 0x38
  13d9c4:	e89700c0 	ldm	r7, {r6, r7}
  13d9c8:	e0048006 	and	r8, r4, r6
  13d9cc:	e0059007 	and	r9, r5, r7
  13d9d0:	e198c009 	orrs	ip, r8, r9
  13d9d4:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13d9d8:	1a000024 	bne	13da70 <__mmap+0xc0>
  13d9dc:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13d9e0:	e1a08001 	mov	r8, r1
  13d9e4:	8a00001b 	bhi	13da58 <__mmap+0xa8>
  13d9e8:	e3130010 	tst	r3, #16
  13d9ec:	e1a09000 	mov	r9, r0
  13d9f0:	e1a0a002 	mov	sl, r2
  13d9f4:	e1a05003 	mov	r5, r3
  13d9f8:	1a000022 	bne	13da88 <__mmap+0xd8>
  13d9fc:	e3a000c0 	mov	r0, #192	; 0xc0
  13da00:	ebfff9a6 	bl	13c0a0 <get_rtt_syscall>
  13da04:	e1a03626 	lsr	r3, r6, #12
  13da08:	e2504000 	subs	r4, r0, #0
  13da0c:	e1833a07 	orr	r3, r3, r7, lsl #20
  13da10:	0a00001e 	beq	13da90 <__mmap+0xe0>
  13da14:	e58d3004 	str	r3, [sp, #4]
  13da18:	e58db000 	str	fp, [sp]
  13da1c:	e1a0200a 	mov	r2, sl
  13da20:	e1a01008 	mov	r1, r8
  13da24:	e1a03005 	mov	r3, r5
  13da28:	e1a00009 	mov	r0, r9
  13da2c:	e12fff34 	blx	r4
  13da30:	e3590000 	cmp	r9, #0
  13da34:	03700001 	cmneq	r0, #1
  13da38:	1a000003 	bne	13da4c <__mmap+0x9c>
  13da3c:	e2055030 	and	r5, r5, #48	; 0x30
  13da40:	e3550020 	cmp	r5, #32
  13da44:	03e0000b 	mvneq	r0, #11
  13da48:	13e00000 	mvnne	r0, #0
  13da4c:	e28dd00c 	add	sp, sp, #12
  13da50:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13da54:	eafff9c6 	b	13c174 <__syscall_ret>
  13da58:	ebffec5a 	bl	138bc8 <__errno_location>
  13da5c:	e3a0300c 	mov	r3, #12
  13da60:	e5803000 	str	r3, [r0]
  13da64:	e3e00000 	mvn	r0, #0
  13da68:	e28dd00c 	add	sp, sp, #12
  13da6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13da70:	ebffec54 	bl	138bc8 <__errno_location>
  13da74:	e3a03016 	mov	r3, #22
  13da78:	e5803000 	str	r3, [r0]
  13da7c:	e3e00000 	mvn	r0, #0
  13da80:	e28dd00c 	add	sp, sp, #12
  13da84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13da88:	eb00139d 	bl	142904 <__vm_wait>
  13da8c:	eaffffda 	b	13d9fc <__mmap+0x4c>
  13da90:	e1a00004 	mov	r0, r4
  13da94:	eaffffec 	b	13da4c <__mmap+0x9c>
  13da98:	00000fff 	.word	0x00000fff
  13da9c:	fffff000 	.word	0xfffff000

0013daa0 <dummy>:
  13daa0:	e12fff1e 	bx	lr

0013daa4 <__mremap>:
  13daa4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13daa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13daac:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13dab0:	e24dd014 	sub	sp, sp, #20
  13dab4:	8a00001b 	bhi	13db28 <__mremap+0x84>
  13dab8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13dabc:	e1a05002 	mov	r5, r2
  13dac0:	e2136002 	ands	r6, r3, #2
  13dac4:	e1a07000 	mov	r7, r0
  13dac8:	e1a08001 	mov	r8, r1
  13dacc:	1a000010 	bne	13db14 <__mremap+0x70>
  13dad0:	e3a000a3 	mov	r0, #163	; 0xa3
  13dad4:	ebfff971 	bl	13c0a0 <get_rtt_syscall>
  13dad8:	e2504000 	subs	r4, r0, #0
  13dadc:	0a000016 	beq	13db3c <__mremap+0x98>
  13dae0:	e58d6000 	str	r6, [sp]
  13dae4:	e1a02005 	mov	r2, r5
  13dae8:	e1a01008 	mov	r1, r8
  13daec:	e1a00007 	mov	r0, r7
  13daf0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13daf4:	e12fff34 	blx	r4
  13daf8:	ebfff99d 	bl	13c174 <__syscall_ret>
  13dafc:	e1a03000 	mov	r3, r0
  13db00:	e1a00003 	mov	r0, r3
  13db04:	e28dd014 	add	sp, sp, #20
  13db08:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13db0c:	e28dd004 	add	sp, sp, #4
  13db10:	e12fff1e 	bx	lr
  13db14:	eb00137a 	bl	142904 <__vm_wait>
  13db18:	e28d3030 	add	r3, sp, #48	; 0x30
  13db1c:	e58d300c 	str	r3, [sp, #12]
  13db20:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13db24:	eaffffe9 	b	13dad0 <__mremap+0x2c>
  13db28:	ebffec26 	bl	138bc8 <__errno_location>
  13db2c:	e3a0200c 	mov	r2, #12
  13db30:	e3e03000 	mvn	r3, #0
  13db34:	e5802000 	str	r2, [r0]
  13db38:	eafffff0 	b	13db00 <__mremap+0x5c>
  13db3c:	e1a00004 	mov	r0, r4
  13db40:	eaffffec 	b	13daf8 <__mremap+0x54>

0013db44 <dummy>:
  13db44:	e12fff1e 	bx	lr

0013db48 <__munmap>:
  13db48:	e92d4070 	push	{r4, r5, r6, lr}
  13db4c:	e1a04000 	mov	r4, r0
  13db50:	e1a05001 	mov	r5, r1
  13db54:	eb00136a 	bl	142904 <__vm_wait>
  13db58:	e3a0005b 	mov	r0, #91	; 0x5b
  13db5c:	ebfff94f 	bl	13c0a0 <get_rtt_syscall>
  13db60:	e2503000 	subs	r3, r0, #0
  13db64:	0a000004 	beq	13db7c <__munmap+0x34>
  13db68:	e1a01005 	mov	r1, r5
  13db6c:	e1a00004 	mov	r0, r4
  13db70:	e12fff33 	blx	r3
  13db74:	e8bd4070 	pop	{r4, r5, r6, lr}
  13db78:	eafff97d 	b	13c174 <__syscall_ret>
  13db7c:	e1a00003 	mov	r0, r3
  13db80:	eafffffb 	b	13db74 <__munmap+0x2c>

0013db84 <accept>:
  13db84:	e3a0c000 	mov	ip, #0
  13db88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13db8c:	e24dd014 	sub	sp, sp, #20
  13db90:	e1a03002 	mov	r3, r2
  13db94:	e58dc008 	str	ip, [sp, #8]
  13db98:	e1a02001 	mov	r2, r1
  13db9c:	e58dc004 	str	ip, [sp, #4]
  13dba0:	e1a01000 	mov	r1, r0
  13dba4:	e58dc000 	str	ip, [sp]
  13dba8:	e59f000c 	ldr	r0, [pc, #12]	; 13dbbc <accept+0x38>
  13dbac:	eb000fa3 	bl	141a40 <__syscall_cp>
  13dbb0:	e28dd014 	add	sp, sp, #20
  13dbb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dbb8:	eafff96d 	b	13c174 <__syscall_ret>
  13dbbc:	0000011d 	.word	0x0000011d

0013dbc0 <bind>:
  13dbc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13dbc4:	e1a05000 	mov	r5, r0
  13dbc8:	e24dd00c 	sub	sp, sp, #12
  13dbcc:	e59f0040 	ldr	r0, [pc, #64]	; 13dc14 <bind+0x54>
  13dbd0:	e1a06001 	mov	r6, r1
  13dbd4:	e1a07002 	mov	r7, r2
  13dbd8:	ebfff930 	bl	13c0a0 <get_rtt_syscall>
  13dbdc:	e2504000 	subs	r4, r0, #0
  13dbe0:	0a000009 	beq	13dc0c <bind+0x4c>
  13dbe4:	e3a03000 	mov	r3, #0
  13dbe8:	e1a02007 	mov	r2, r7
  13dbec:	e1a01006 	mov	r1, r6
  13dbf0:	e1a00005 	mov	r0, r5
  13dbf4:	e58d3004 	str	r3, [sp, #4]
  13dbf8:	e58d3000 	str	r3, [sp]
  13dbfc:	e12fff34 	blx	r4
  13dc00:	e28dd00c 	add	sp, sp, #12
  13dc04:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13dc08:	eafff959 	b	13c174 <__syscall_ret>
  13dc0c:	e1a00004 	mov	r0, r4
  13dc10:	eafffffa 	b	13dc00 <bind+0x40>
  13dc14:	0000011a 	.word	0x0000011a

0013dc18 <connect>:
  13dc18:	e3a0c000 	mov	ip, #0
  13dc1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dc20:	e24dd014 	sub	sp, sp, #20
  13dc24:	e1a03002 	mov	r3, r2
  13dc28:	e58dc008 	str	ip, [sp, #8]
  13dc2c:	e1a02001 	mov	r2, r1
  13dc30:	e58dc004 	str	ip, [sp, #4]
  13dc34:	e1a01000 	mov	r1, r0
  13dc38:	e58dc000 	str	ip, [sp]
  13dc3c:	e59f000c 	ldr	r0, [pc, #12]	; 13dc50 <connect+0x38>
  13dc40:	eb000f7e 	bl	141a40 <__syscall_cp>
  13dc44:	e28dd014 	add	sp, sp, #20
  13dc48:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dc4c:	eafff948 	b	13c174 <__syscall_ret>
  13dc50:	0000011b 	.word	0x0000011b

0013dc54 <htonl>:
  13dc54:	e0203860 	eor	r3, r0, r0, ror #16
  13dc58:	e1a03423 	lsr	r3, r3, #8
  13dc5c:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13dc60:	e0230460 	eor	r0, r3, r0, ror #8
  13dc64:	e12fff1e 	bx	lr

0013dc68 <htons>:
  13dc68:	e1a03420 	lsr	r3, r0, #8
  13dc6c:	e1830400 	orr	r0, r3, r0, lsl #8
  13dc70:	e1a00800 	lsl	r0, r0, #16
  13dc74:	e1a00820 	lsr	r0, r0, #16
  13dc78:	e12fff1e 	bx	lr

0013dc7c <listen>:
  13dc7c:	e92d4070 	push	{r4, r5, r6, lr}
  13dc80:	e1a05000 	mov	r5, r0
  13dc84:	e24dd008 	sub	sp, sp, #8
  13dc88:	e3a00f47 	mov	r0, #284	; 0x11c
  13dc8c:	e1a06001 	mov	r6, r1
  13dc90:	ebfff902 	bl	13c0a0 <get_rtt_syscall>
  13dc94:	e2504000 	subs	r4, r0, #0
  13dc98:	0a000009 	beq	13dcc4 <listen+0x48>
  13dc9c:	e3a03000 	mov	r3, #0
  13dca0:	e1a01006 	mov	r1, r6
  13dca4:	e1a00005 	mov	r0, r5
  13dca8:	e58d3004 	str	r3, [sp, #4]
  13dcac:	e58d3000 	str	r3, [sp]
  13dcb0:	e1a02003 	mov	r2, r3
  13dcb4:	e12fff34 	blx	r4
  13dcb8:	e28dd008 	add	sp, sp, #8
  13dcbc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dcc0:	eafff92b 	b	13c174 <__syscall_ret>
  13dcc4:	e1a00004 	mov	r0, r4
  13dcc8:	eafffffa 	b	13dcb8 <listen+0x3c>

0013dccc <setsockopt>:
  13dccc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13dcd0:	e1a05000 	mov	r5, r0
  13dcd4:	e24dd00c 	sub	sp, sp, #12
  13dcd8:	e59f004c 	ldr	r0, [pc, #76]	; 13dd2c <setsockopt+0x60>
  13dcdc:	e1a06001 	mov	r6, r1
  13dce0:	e1a07002 	mov	r7, r2
  13dce4:	e1a08003 	mov	r8, r3
  13dce8:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13dcec:	ebfff8eb 	bl	13c0a0 <get_rtt_syscall>
  13dcf0:	e2504000 	subs	r4, r0, #0
  13dcf4:	0a00000a 	beq	13dd24 <setsockopt+0x58>
  13dcf8:	e3a0c000 	mov	ip, #0
  13dcfc:	e58d9000 	str	r9, [sp]
  13dd00:	e1a03008 	mov	r3, r8
  13dd04:	e1a02007 	mov	r2, r7
  13dd08:	e1a01006 	mov	r1, r6
  13dd0c:	e1a00005 	mov	r0, r5
  13dd10:	e58dc004 	str	ip, [sp, #4]
  13dd14:	e12fff34 	blx	r4
  13dd18:	e28dd00c 	add	sp, sp, #12
  13dd1c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13dd20:	eafff913 	b	13c174 <__syscall_ret>
  13dd24:	e1a00004 	mov	r0, r4
  13dd28:	eafffffa 	b	13dd18 <setsockopt+0x4c>
  13dd2c:	00000126 	.word	0x00000126

0013dd30 <socket>:
  13dd30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13dd34:	e1a06000 	mov	r6, r0
  13dd38:	e24dd00c 	sub	sp, sp, #12
  13dd3c:	e59f0118 	ldr	r0, [pc, #280]	; 13de5c <socket+0x12c>
  13dd40:	e1a05001 	mov	r5, r1
  13dd44:	e1a07002 	mov	r7, r2
  13dd48:	ebfff8d4 	bl	13c0a0 <get_rtt_syscall>
  13dd4c:	e2504000 	subs	r4, r0, #0
  13dd50:	0a000034 	beq	13de28 <socket+0xf8>
  13dd54:	e3a03000 	mov	r3, #0
  13dd58:	e1a02007 	mov	r2, r7
  13dd5c:	e58d3004 	str	r3, [sp, #4]
  13dd60:	e58d3000 	str	r3, [sp]
  13dd64:	e1a01005 	mov	r1, r5
  13dd68:	e1a00006 	mov	r0, r6
  13dd6c:	e12fff34 	blx	r4
  13dd70:	ebfff8ff 	bl	13c174 <__syscall_ret>
  13dd74:	e2504000 	subs	r4, r0, #0
  13dd78:	ba000002 	blt	13dd88 <socket+0x58>
  13dd7c:	e1a00004 	mov	r0, r4
  13dd80:	e28dd00c 	add	sp, sp, #12
  13dd84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13dd88:	ebffeb8e 	bl	138bc8 <__errno_location>
  13dd8c:	e5903000 	ldr	r3, [r0]
  13dd90:	e3530016 	cmp	r3, #22
  13dd94:	1a00001e 	bne	13de14 <socket+0xe4>
  13dd98:	e59f30c0 	ldr	r3, [pc, #192]	; 13de60 <socket+0x130>
  13dd9c:	e1150003 	tst	r5, r3
  13dda0:	0afffff5 	beq	13dd7c <socket+0x4c>
  13dda4:	e59f00b0 	ldr	r0, [pc, #176]	; 13de5c <socket+0x12c>
  13dda8:	ebfff8bc 	bl	13c0a0 <get_rtt_syscall>
  13ddac:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13ddb0:	e2504000 	subs	r4, r0, #0
  13ddb4:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13ddb8:	0a000025 	beq	13de54 <socket+0x124>
  13ddbc:	e3a03000 	mov	r3, #0
  13ddc0:	e1a02007 	mov	r2, r7
  13ddc4:	e1a00006 	mov	r0, r6
  13ddc8:	e58d3004 	str	r3, [sp, #4]
  13ddcc:	e58d3000 	str	r3, [sp]
  13ddd0:	e12fff34 	blx	r4
  13ddd4:	ebfff8e6 	bl	13c174 <__syscall_ret>
  13ddd8:	e2504000 	subs	r4, r0, #0
  13dddc:	baffffe6 	blt	13dd7c <socket+0x4c>
  13dde0:	e3150702 	tst	r5, #524288	; 0x80000
  13dde4:	1a000011 	bne	13de30 <socket+0x100>
  13dde8:	e3150b02 	tst	r5, #2048	; 0x800
  13ddec:	0affffe2 	beq	13dd7c <socket+0x4c>
  13ddf0:	e3a000dd 	mov	r0, #221	; 0xdd
  13ddf4:	ebfff8a9 	bl	13c0a0 <get_rtt_syscall>
  13ddf8:	e2503000 	subs	r3, r0, #0
  13ddfc:	0affffde 	beq	13dd7c <socket+0x4c>
  13de00:	e3a02b02 	mov	r2, #2048	; 0x800
  13de04:	e3a01004 	mov	r1, #4
  13de08:	e1a00004 	mov	r0, r4
  13de0c:	e12fff33 	blx	r3
  13de10:	eaffffd9 	b	13dd7c <socket+0x4c>
  13de14:	ebffeb6b 	bl	138bc8 <__errno_location>
  13de18:	e5903000 	ldr	r3, [r0]
  13de1c:	e353005d 	cmp	r3, #93	; 0x5d
  13de20:	1affffd5 	bne	13dd7c <socket+0x4c>
  13de24:	eaffffdb 	b	13dd98 <socket+0x68>
  13de28:	e1a00004 	mov	r0, r4
  13de2c:	eaffffcf 	b	13dd70 <socket+0x40>
  13de30:	e3a000dd 	mov	r0, #221	; 0xdd
  13de34:	ebfff899 	bl	13c0a0 <get_rtt_syscall>
  13de38:	e2503000 	subs	r3, r0, #0
  13de3c:	0affffe9 	beq	13dde8 <socket+0xb8>
  13de40:	e3a02001 	mov	r2, #1
  13de44:	e3a01002 	mov	r1, #2
  13de48:	e1a00004 	mov	r0, r4
  13de4c:	e12fff33 	blx	r3
  13de50:	eaffffe4 	b	13dde8 <socket+0xb8>
  13de54:	e1a00004 	mov	r0, r4
  13de58:	eaffffdd 	b	13ddd4 <socket+0xa4>
  13de5c:	00000119 	.word	0x00000119
  13de60:	00080800 	.word	0x00080800

0013de64 <srand>:
  13de64:	e3a02000 	mov	r2, #0
  13de68:	e59f3008 	ldr	r3, [pc, #8]	; 13de78 <srand+0x14>
  13de6c:	e2400001 	sub	r0, r0, #1
  13de70:	e8830005 	stm	r3, {r0, r2}
  13de74:	e12fff1e 	bx	lr
  13de78:	0014f038 	.word	0x0014f038

0013de7c <rand>:
  13de7c:	e59f1034 	ldr	r1, [pc, #52]	; 13deb8 <rand+0x3c>
  13de80:	e92d4800 	push	{fp, lr}
  13de84:	e59f3030 	ldr	r3, [pc, #48]	; 13debc <rand+0x40>
  13de88:	e591e000 	ldr	lr, [r1]
  13de8c:	e5912004 	ldr	r2, [r1, #4]
  13de90:	e00b039e 	mul	fp, lr, r3
  13de94:	e59fc024 	ldr	ip, [pc, #36]	; 13dec0 <rand+0x44>
  13de98:	e020b29c 	mla	r0, ip, r2, fp
  13de9c:	e0832c9e 	umull	r2, r3, lr, ip
  13dea0:	e0803003 	add	r3, r0, r3
  13dea4:	e292b001 	adds	fp, r2, #1
  13dea8:	e2a3c000 	adc	ip, r3, #0
  13deac:	e8811800 	stm	r1, {fp, ip}
  13deb0:	e1a000ac 	lsr	r0, ip, #1
  13deb4:	e8bd8800 	pop	{fp, pc}
  13deb8:	0014f038 	.word	0x0014f038
  13debc:	5851f42d 	.word	0x5851f42d
  13dec0:	4c957f2d 	.word	0x4c957f2d

0013dec4 <select>:
  13dec4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dec8:	e3a0e000 	mov	lr, #0
  13decc:	e24dd014 	sub	sp, sp, #20
  13ded0:	e59dc018 	ldr	ip, [sp, #24]
  13ded4:	e58d3000 	str	r3, [sp]
  13ded8:	e58de008 	str	lr, [sp, #8]
  13dedc:	e1a03002 	mov	r3, r2
  13dee0:	e58dc004 	str	ip, [sp, #4]
  13dee4:	e1a02001 	mov	r2, r1
  13dee8:	e1a01000 	mov	r1, r0
  13deec:	e3a0008e 	mov	r0, #142	; 0x8e
  13def0:	eb000ed2 	bl	141a40 <__syscall_cp>
  13def4:	e28dd014 	add	sp, sp, #20
  13def8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13defc:	eafff89c 	b	13c174 <__syscall_ret>

0013df00 <raise>:
  13df00:	e92d4030 	push	{r4, r5, lr}
  13df04:	e24dd084 	sub	sp, sp, #132	; 0x84
  13df08:	e1a05000 	mov	r5, r0
  13df0c:	e1a0000d 	mov	r0, sp
  13df10:	eb001496 	bl	143170 <__block_app_sigs>
  13df14:	e59f3048 	ldr	r3, [pc, #72]	; 13df64 <raise+0x64>
  13df18:	e5930000 	ldr	r0, [r3]
  13df1c:	e12fff30 	blx	r0
  13df20:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13df24:	e3a000ee 	mov	r0, #238	; 0xee
  13df28:	ebfff85c 	bl	13c0a0 <get_rtt_syscall>
  13df2c:	e2503000 	subs	r3, r0, #0
  13df30:	0a000009 	beq	13df5c <raise+0x5c>
  13df34:	e1a01005 	mov	r1, r5
  13df38:	e1a00004 	mov	r0, r4
  13df3c:	e12fff33 	blx	r3
  13df40:	ebfff88b 	bl	13c174 <__syscall_ret>
  13df44:	e1a04000 	mov	r4, r0
  13df48:	e1a0000d 	mov	r0, sp
  13df4c:	eb001495 	bl	1431a8 <__restore_sigs>
  13df50:	e1a00004 	mov	r0, r4
  13df54:	e28dd084 	add	sp, sp, #132	; 0x84
  13df58:	e8bd8030 	pop	{r4, r5, pc}
  13df5c:	e1a00003 	mov	r0, r3
  13df60:	eafffff6 	b	13df40 <raise+0x40>
  13df64:	0014d3dc 	.word	0x0014d3dc

0013df68 <fflush>:
  13df68:	e92d4070 	push	{r4, r5, r6, lr}
  13df6c:	e2504000 	subs	r4, r0, #0
  13df70:	e24dd008 	sub	sp, sp, #8
  13df74:	0a000027 	beq	13e018 <fflush+0xb0>
  13df78:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13df7c:	e3530000 	cmp	r3, #0
  13df80:	b3a05000 	movlt	r5, #0
  13df84:	aa000020 	bge	13e00c <fflush+0xa4>
  13df88:	e5942014 	ldr	r2, [r4, #20]
  13df8c:	e594301c 	ldr	r3, [r4, #28]
  13df90:	e1520003 	cmp	r2, r3
  13df94:	0a000007 	beq	13dfb8 <fflush+0x50>
  13df98:	e3a02000 	mov	r2, #0
  13df9c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13dfa0:	e1a01002 	mov	r1, r2
  13dfa4:	e1a00004 	mov	r0, r4
  13dfa8:	e12fff33 	blx	r3
  13dfac:	e5943014 	ldr	r3, [r4, #20]
  13dfb0:	e3530000 	cmp	r3, #0
  13dfb4:	0a00003d 	beq	13e0b0 <fflush+0x148>
  13dfb8:	e994000c 	ldmib	r4, {r2, r3}
  13dfbc:	e1520003 	cmp	r2, r3
  13dfc0:	0a000006 	beq	13dfe0 <fflush+0x78>
  13dfc4:	e3a01001 	mov	r1, #1
  13dfc8:	e0422003 	sub	r2, r2, r3
  13dfcc:	e58d1000 	str	r1, [sp]
  13dfd0:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13dfd4:	e1a03fc2 	asr	r3, r2, #31
  13dfd8:	e1a00004 	mov	r0, r4
  13dfdc:	e12fff31 	blx	r1
  13dfe0:	e3a06000 	mov	r6, #0
  13dfe4:	e1550006 	cmp	r5, r6
  13dfe8:	e5846010 	str	r6, [r4, #16]
  13dfec:	e584601c 	str	r6, [r4, #28]
  13dff0:	e5846014 	str	r6, [r4, #20]
  13dff4:	e5846008 	str	r6, [r4, #8]
  13dff8:	e5846004 	str	r6, [r4, #4]
  13dffc:	1a000032 	bne	13e0cc <fflush+0x164>
  13e000:	e1a00005 	mov	r0, r5
  13e004:	e28dd008 	add	sp, sp, #8
  13e008:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e00c:	eb001472 	bl	1431dc <__lockfile>
  13e010:	e1a05000 	mov	r5, r0
  13e014:	eaffffdb 	b	13df88 <fflush+0x20>
  13e018:	e59f3104 	ldr	r3, [pc, #260]	; 13e124 <fflush+0x1bc>
  13e01c:	e5935000 	ldr	r5, [r3]
  13e020:	e3550000 	cmp	r5, #0
  13e024:	1a00003a 	bne	13e114 <fflush+0x1ac>
  13e028:	e59f30f8 	ldr	r3, [pc, #248]	; 13e128 <fflush+0x1c0>
  13e02c:	e5932000 	ldr	r2, [r3]
  13e030:	e3520000 	cmp	r2, #0
  13e034:	1a000032 	bne	13e104 <fflush+0x19c>
  13e038:	eb000047 	bl	13e15c <__ofl_lock>
  13e03c:	e5904000 	ldr	r4, [r0]
  13e040:	e3540000 	cmp	r4, #0
  13e044:	0a000009 	beq	13e070 <fflush+0x108>
  13e048:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e04c:	e3530000 	cmp	r3, #0
  13e050:	aa00000a 	bge	13e080 <fflush+0x118>
  13e054:	e5942014 	ldr	r2, [r4, #20]
  13e058:	e594301c 	ldr	r3, [r4, #28]
  13e05c:	e1520003 	cmp	r2, r3
  13e060:	1a00001f 	bne	13e0e4 <fflush+0x17c>
  13e064:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13e068:	e3540000 	cmp	r4, #0
  13e06c:	1afffff5 	bne	13e048 <fflush+0xe0>
  13e070:	eb000040 	bl	13e178 <__ofl_unlock>
  13e074:	e1a00005 	mov	r0, r5
  13e078:	e28dd008 	add	sp, sp, #8
  13e07c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e080:	e1a00004 	mov	r0, r4
  13e084:	eb001454 	bl	1431dc <__lockfile>
  13e088:	e5942014 	ldr	r2, [r4, #20]
  13e08c:	e594301c 	ldr	r3, [r4, #28]
  13e090:	e1a06000 	mov	r6, r0
  13e094:	e1520003 	cmp	r2, r3
  13e098:	1a000015 	bne	13e0f4 <fflush+0x18c>
  13e09c:	e3560000 	cmp	r6, #0
  13e0a0:	0affffef 	beq	13e064 <fflush+0xfc>
  13e0a4:	e1a00004 	mov	r0, r4
  13e0a8:	eb001498 	bl	143310 <__unlockfile>
  13e0ac:	eaffffec 	b	13e064 <fflush+0xfc>
  13e0b0:	e3550000 	cmp	r5, #0
  13e0b4:	03e05000 	mvneq	r5, #0
  13e0b8:	0affffd0 	beq	13e000 <fflush+0x98>
  13e0bc:	e1a00004 	mov	r0, r4
  13e0c0:	eb001492 	bl	143310 <__unlockfile>
  13e0c4:	e3e05000 	mvn	r5, #0
  13e0c8:	eaffffcc 	b	13e000 <fflush+0x98>
  13e0cc:	e1a05006 	mov	r5, r6
  13e0d0:	e1a00004 	mov	r0, r4
  13e0d4:	eb00148d 	bl	143310 <__unlockfile>
  13e0d8:	e1a00005 	mov	r0, r5
  13e0dc:	e28dd008 	add	sp, sp, #8
  13e0e0:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e0e4:	e1a00004 	mov	r0, r4
  13e0e8:	ebffff9e 	bl	13df68 <fflush>
  13e0ec:	e1855000 	orr	r5, r5, r0
  13e0f0:	eaffffdb 	b	13e064 <fflush+0xfc>
  13e0f4:	e1a00004 	mov	r0, r4
  13e0f8:	ebffff9a 	bl	13df68 <fflush>
  13e0fc:	e1855000 	orr	r5, r5, r0
  13e100:	eaffffe5 	b	13e09c <fflush+0x134>
  13e104:	e5930000 	ldr	r0, [r3]
  13e108:	ebffff96 	bl	13df68 <fflush>
  13e10c:	e1855000 	orr	r5, r5, r0
  13e110:	eaffffc8 	b	13e038 <fflush+0xd0>
  13e114:	e5930000 	ldr	r0, [r3]
  13e118:	ebffff92 	bl	13df68 <fflush>
  13e11c:	e1a05000 	mov	r5, r0
  13e120:	eaffffc0 	b	13e028 <fflush+0xc0>
  13e124:	0014d3d0 	.word	0x0014d3d0
  13e128:	0014d338 	.word	0x0014d338

0013e12c <fprintf>:
  13e12c:	e92d000e 	push	{r1, r2, r3}
  13e130:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e134:	e24dd008 	sub	sp, sp, #8
  13e138:	e28d3010 	add	r3, sp, #16
  13e13c:	e1a02003 	mov	r2, r3
  13e140:	e59d100c 	ldr	r1, [sp, #12]
  13e144:	e58d3004 	str	r3, [sp, #4]
  13e148:	eb000959 	bl	1406b4 <vfprintf>
  13e14c:	e28dd008 	add	sp, sp, #8
  13e150:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e154:	e28dd00c 	add	sp, sp, #12
  13e158:	e12fff1e 	bx	lr

0013e15c <__ofl_lock>:
  13e15c:	e92d4010 	push	{r4, lr}
  13e160:	e59f0008 	ldr	r0, [pc, #8]	; 13e170 <__ofl_lock+0x14>
  13e164:	eb000db3 	bl	141838 <__lock>
  13e168:	e59f0004 	ldr	r0, [pc, #4]	; 13e174 <__ofl_lock+0x18>
  13e16c:	e8bd8010 	pop	{r4, pc}
  13e170:	0014f048 	.word	0x0014f048
  13e174:	0014f044 	.word	0x0014f044

0013e178 <__ofl_unlock>:
  13e178:	e59f0000 	ldr	r0, [pc]	; 13e180 <__ofl_unlock+0x8>
  13e17c:	ea000e05 	b	141998 <__unlock>
  13e180:	0014f048 	.word	0x0014f048

0013e184 <perror>:
  13e184:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e188:	e1a05000 	mov	r5, r0
  13e18c:	ebffea8d 	bl	138bc8 <__errno_location>
  13e190:	e5900000 	ldr	r0, [r0]
  13e194:	ebffeaad 	bl	138c50 <strerror>
  13e198:	e59f4104 	ldr	r4, [pc, #260]	; 13e2a4 <perror+0x120>
  13e19c:	e1a06000 	mov	r6, r0
  13e1a0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e1a4:	e3530000 	cmp	r3, #0
  13e1a8:	aa000026 	bge	13e248 <perror+0xc4>
  13e1ac:	e3550000 	cmp	r5, #0
  13e1b0:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e1b4:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e1b8:	13a09000 	movne	r9, #0
  13e1bc:	0a00002c 	beq	13e274 <perror+0xf0>
  13e1c0:	e5d53000 	ldrb	r3, [r5]
  13e1c4:	e3530000 	cmp	r3, #0
  13e1c8:	1a000010 	bne	13e210 <perror+0x8c>
  13e1cc:	e1a00006 	mov	r0, r6
  13e1d0:	eb000bf4 	bl	1411a8 <strlen>
  13e1d4:	e59f30c8 	ldr	r3, [pc, #200]	; 13e2a4 <perror+0x120>
  13e1d8:	e1a01000 	mov	r1, r0
  13e1dc:	e3a02001 	mov	r2, #1
  13e1e0:	e1a00006 	mov	r0, r6
  13e1e4:	eb0015fa 	bl	1439d4 <fwrite>
  13e1e8:	e59f10b4 	ldr	r1, [pc, #180]	; 13e2a4 <perror+0x120>
  13e1ec:	e3a0000a 	mov	r0, #10
  13e1f0:	eb001578 	bl	1437d8 <fputc>
  13e1f4:	e3590000 	cmp	r9, #0
  13e1f8:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e1fc:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e200:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e204:	e59f0098 	ldr	r0, [pc, #152]	; 13e2a4 <perror+0x120>
  13e208:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e20c:	ea00143f 	b	143310 <__unlockfile>
  13e210:	e1a00005 	mov	r0, r5
  13e214:	eb000be3 	bl	1411a8 <strlen>
  13e218:	e59f3084 	ldr	r3, [pc, #132]	; 13e2a4 <perror+0x120>
  13e21c:	e1a01000 	mov	r1, r0
  13e220:	e3a02001 	mov	r2, #1
  13e224:	e1a00005 	mov	r0, r5
  13e228:	eb0015e9 	bl	1439d4 <fwrite>
  13e22c:	e59f1070 	ldr	r1, [pc, #112]	; 13e2a4 <perror+0x120>
  13e230:	e3a0003a 	mov	r0, #58	; 0x3a
  13e234:	eb001567 	bl	1437d8 <fputc>
  13e238:	e59f1064 	ldr	r1, [pc, #100]	; 13e2a4 <perror+0x120>
  13e23c:	e3a00020 	mov	r0, #32
  13e240:	eb001564 	bl	1437d8 <fputc>
  13e244:	eaffffe0 	b	13e1cc <perror+0x48>
  13e248:	e1a00004 	mov	r0, r4
  13e24c:	eb0013e2 	bl	1431dc <__lockfile>
  13e250:	e3550000 	cmp	r5, #0
  13e254:	e1a09000 	mov	r9, r0
  13e258:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e25c:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e260:	0affffd9 	beq	13e1cc <perror+0x48>
  13e264:	e5d53000 	ldrb	r3, [r5]
  13e268:	e3530000 	cmp	r3, #0
  13e26c:	0affffd6 	beq	13e1cc <perror+0x48>
  13e270:	eaffffe6 	b	13e210 <perror+0x8c>
  13e274:	eb000bcb 	bl	1411a8 <strlen>
  13e278:	e1a03004 	mov	r3, r4
  13e27c:	e1a01000 	mov	r1, r0
  13e280:	e3a02001 	mov	r2, #1
  13e284:	e1a00006 	mov	r0, r6
  13e288:	eb0015d1 	bl	1439d4 <fwrite>
  13e28c:	e1a01004 	mov	r1, r4
  13e290:	e3a0000a 	mov	r0, #10
  13e294:	eb00154f 	bl	1437d8 <fputc>
  13e298:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e29c:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e2a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e2a4:	0014d2a8 	.word	0x0014d2a8

0013e2a8 <printf>:
  13e2a8:	e92d000f 	push	{r0, r1, r2, r3}
  13e2ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e2b0:	e24dd00c 	sub	sp, sp, #12
  13e2b4:	e28d3014 	add	r3, sp, #20
  13e2b8:	e1a02003 	mov	r2, r3
  13e2bc:	e59d1010 	ldr	r1, [sp, #16]
  13e2c0:	e59f0014 	ldr	r0, [pc, #20]	; 13e2dc <printf+0x34>
  13e2c4:	e58d3004 	str	r3, [sp, #4]
  13e2c8:	eb0008f9 	bl	1406b4 <vfprintf>
  13e2cc:	e28dd00c 	add	sp, sp, #12
  13e2d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e2d4:	e28dd010 	add	sp, sp, #16
  13e2d8:	e12fff1e 	bx	lr
  13e2dc:	0014d340 	.word	0x0014d340

0013e2e0 <puts>:
  13e2e0:	e92d4070 	push	{r4, r5, r6, lr}
  13e2e4:	e59f40b0 	ldr	r4, [pc, #176]	; 13e39c <puts+0xbc>
  13e2e8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e2ec:	e3530000 	cmp	r3, #0
  13e2f0:	aa00001b 	bge	13e364 <puts+0x84>
  13e2f4:	e1a01004 	mov	r1, r4
  13e2f8:	eb001569 	bl	1438a4 <fputs>
  13e2fc:	e3500000 	cmp	r0, #0
  13e300:	a3a05000 	movge	r5, #0
  13e304:	ba000021 	blt	13e390 <puts+0xb0>
  13e308:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e30c:	e353000a 	cmp	r3, #10
  13e310:	0a00000e 	beq	13e350 <puts+0x70>
  13e314:	e5943014 	ldr	r3, [r4, #20]
  13e318:	e5942010 	ldr	r2, [r4, #16]
  13e31c:	e1530002 	cmp	r3, r2
  13e320:	0a00000a 	beq	13e350 <puts+0x70>
  13e324:	e3a0200a 	mov	r2, #10
  13e328:	e2831001 	add	r1, r3, #1
  13e32c:	e5841014 	str	r1, [r4, #20]
  13e330:	e3a04000 	mov	r4, #0
  13e334:	e5c32000 	strb	r2, [r3]
  13e338:	e3550000 	cmp	r5, #0
  13e33c:	0a000001 	beq	13e348 <puts+0x68>
  13e340:	e59f0054 	ldr	r0, [pc, #84]	; 13e39c <puts+0xbc>
  13e344:	eb0013f1 	bl	143310 <__unlockfile>
  13e348:	e1a00004 	mov	r0, r4
  13e34c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e350:	e3a0100a 	mov	r1, #10
  13e354:	e59f0040 	ldr	r0, [pc, #64]	; 13e39c <puts+0xbc>
  13e358:	eb001412 	bl	1433a8 <__overflow>
  13e35c:	e1a04fc0 	asr	r4, r0, #31
  13e360:	eafffff4 	b	13e338 <puts+0x58>
  13e364:	e1a06000 	mov	r6, r0
  13e368:	e1a00004 	mov	r0, r4
  13e36c:	eb00139a 	bl	1431dc <__lockfile>
  13e370:	e1a01004 	mov	r1, r4
  13e374:	e1a05000 	mov	r5, r0
  13e378:	e1a00006 	mov	r0, r6
  13e37c:	eb001548 	bl	1438a4 <fputs>
  13e380:	e3500000 	cmp	r0, #0
  13e384:	b3e04000 	mvnlt	r4, #0
  13e388:	aaffffde 	bge	13e308 <puts+0x28>
  13e38c:	eaffffe9 	b	13e338 <puts+0x58>
  13e390:	e3e04000 	mvn	r4, #0
  13e394:	e1a00004 	mov	r0, r4
  13e398:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e39c:	0014d340 	.word	0x0014d340

0013e3a0 <pop_arg>:
  13e3a0:	e2411009 	sub	r1, r1, #9
  13e3a4:	e92d0030 	push	{r4, r5}
  13e3a8:	e3510011 	cmp	r1, #17
  13e3ac:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e3b0:	ea000018 	b	13e418 <pop_arg+0x78>
  13e3b4:	0013e4e0 	.word	0x0013e4e0
  13e3b8:	0013e444 	.word	0x0013e444
  13e3bc:	0013e464 	.word	0x0013e464
  13e3c0:	0013e420 	.word	0x0013e420
  13e3c4:	0013e444 	.word	0x0013e444
  13e3c8:	0013e464 	.word	0x0013e464
  13e3cc:	0013e518 	.word	0x0013e518
  13e3d0:	0013e488 	.word	0x0013e488
  13e3d4:	0013e4a8 	.word	0x0013e4a8
  13e3d8:	0013e4c4 	.word	0x0013e4c4
  13e3dc:	0013e420 	.word	0x0013e420
  13e3e0:	0013e464 	.word	0x0013e464
  13e3e4:	0013e420 	.word	0x0013e420
  13e3e8:	0013e420 	.word	0x0013e420
  13e3ec:	0013e444 	.word	0x0013e444
  13e3f0:	0013e4f8 	.word	0x0013e4f8
  13e3f4:	0013e3fc 	.word	0x0013e3fc
  13e3f8:	0013e3fc 	.word	0x0013e3fc
  13e3fc:	e5923000 	ldr	r3, [r2]
  13e400:	e2833007 	add	r3, r3, #7
  13e404:	e3c33007 	bic	r3, r3, #7
  13e408:	e2831008 	add	r1, r3, #8
  13e40c:	e5821000 	str	r1, [r2]
  13e410:	e893000c 	ldm	r3, {r2, r3}
  13e414:	e880000c 	stm	r0, {r2, r3}
  13e418:	e8bd0030 	pop	{r4, r5}
  13e41c:	e12fff1e 	bx	lr
  13e420:	e5923000 	ldr	r3, [r2]
  13e424:	e8bd0030 	pop	{r4, r5}
  13e428:	e2833007 	add	r3, r3, #7
  13e42c:	e3c33007 	bic	r3, r3, #7
  13e430:	e2831008 	add	r1, r3, #8
  13e434:	e5821000 	str	r1, [r2]
  13e438:	e893000c 	ldm	r3, {r2, r3}
  13e43c:	e880000c 	stm	r0, {r2, r3}
  13e440:	e12fff1e 	bx	lr
  13e444:	e5923000 	ldr	r3, [r2]
  13e448:	e5934000 	ldr	r4, [r3]
  13e44c:	e2833004 	add	r3, r3, #4
  13e450:	e1a05fc4 	asr	r5, r4, #31
  13e454:	e5823000 	str	r3, [r2]
  13e458:	e8800030 	stm	r0, {r4, r5}
  13e45c:	e8bd0030 	pop	{r4, r5}
  13e460:	e12fff1e 	bx	lr
  13e464:	e3a01000 	mov	r1, #0
  13e468:	e8bd0030 	pop	{r4, r5}
  13e46c:	e5923000 	ldr	r3, [r2]
  13e470:	e593c000 	ldr	ip, [r3]
  13e474:	e2833004 	add	r3, r3, #4
  13e478:	e5823000 	str	r3, [r2]
  13e47c:	e580c000 	str	ip, [r0]
  13e480:	e5801004 	str	r1, [r0, #4]
  13e484:	e12fff1e 	bx	lr
  13e488:	e3a01000 	mov	r1, #0
  13e48c:	e5923000 	ldr	r3, [r2]
  13e490:	e1d3c0b0 	ldrh	ip, [r3]
  13e494:	e2833004 	add	r3, r3, #4
  13e498:	e5823000 	str	r3, [r2]
  13e49c:	e580c000 	str	ip, [r0]
  13e4a0:	e5801004 	str	r1, [r0, #4]
  13e4a4:	eaffffdb 	b	13e418 <pop_arg+0x78>
  13e4a8:	e5923000 	ldr	r3, [r2]
  13e4ac:	e1d340d0 	ldrsb	r4, [r3]
  13e4b0:	e2833004 	add	r3, r3, #4
  13e4b4:	e1a05fc4 	asr	r5, r4, #31
  13e4b8:	e5823000 	str	r3, [r2]
  13e4bc:	e8800030 	stm	r0, {r4, r5}
  13e4c0:	eaffffd4 	b	13e418 <pop_arg+0x78>
  13e4c4:	e3a05000 	mov	r5, #0
  13e4c8:	e5923000 	ldr	r3, [r2]
  13e4cc:	e5d34000 	ldrb	r4, [r3]
  13e4d0:	e2833004 	add	r3, r3, #4
  13e4d4:	e5823000 	str	r3, [r2]
  13e4d8:	e8800030 	stm	r0, {r4, r5}
  13e4dc:	eaffffcd 	b	13e418 <pop_arg+0x78>
  13e4e0:	e5923000 	ldr	r3, [r2]
  13e4e4:	e2831004 	add	r1, r3, #4
  13e4e8:	e5821000 	str	r1, [r2]
  13e4ec:	e5933000 	ldr	r3, [r3]
  13e4f0:	e5803000 	str	r3, [r0]
  13e4f4:	eaffffc7 	b	13e418 <pop_arg+0x78>
  13e4f8:	e3a01000 	mov	r1, #0
  13e4fc:	e5923000 	ldr	r3, [r2]
  13e500:	e283c004 	add	ip, r3, #4
  13e504:	e582c000 	str	ip, [r2]
  13e508:	e5933000 	ldr	r3, [r3]
  13e50c:	e5801004 	str	r1, [r0, #4]
  13e510:	e5803000 	str	r3, [r0]
  13e514:	eaffffbf 	b	13e418 <pop_arg+0x78>
  13e518:	e5923000 	ldr	r3, [r2]
  13e51c:	e1d340f0 	ldrsh	r4, [r3]
  13e520:	e2833004 	add	r3, r3, #4
  13e524:	e1a05fc4 	asr	r5, r4, #31
  13e528:	e5823000 	str	r3, [r2]
  13e52c:	e8800030 	stm	r0, {r4, r5}
  13e530:	eaffffb8 	b	13e418 <pop_arg+0x78>

0013e534 <pad.part.0>:
  13e534:	e92d4070 	push	{r4, r5, r6, lr}
  13e538:	e0425003 	sub	r5, r2, r3
  13e53c:	e3550c01 	cmp	r5, #256	; 0x100
  13e540:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13e544:	31a02005 	movcc	r2, r5
  13e548:	23a02c01 	movcs	r2, #256	; 0x100
  13e54c:	e1a06000 	mov	r6, r0
  13e550:	e1a0000d 	mov	r0, sp
  13e554:	eb000a82 	bl	140f64 <memset>
  13e558:	e35500ff 	cmp	r5, #255	; 0xff
  13e55c:	9a00001b 	bls	13e5d0 <pad.part.0+0x9c>
  13e560:	e5962000 	ldr	r2, [r6]
  13e564:	e1a04005 	mov	r4, r5
  13e568:	e2022020 	and	r2, r2, #32
  13e56c:	ea000001 	b	13e578 <pad.part.0+0x44>
  13e570:	e35400ff 	cmp	r4, #255	; 0xff
  13e574:	9a00000c 	bls	13e5ac <pad.part.0+0x78>
  13e578:	e3520000 	cmp	r2, #0
  13e57c:	e2444c01 	sub	r4, r4, #256	; 0x100
  13e580:	e1a01002 	mov	r1, r2
  13e584:	1afffff9 	bne	13e570 <pad.part.0+0x3c>
  13e588:	e1a02006 	mov	r2, r6
  13e58c:	e3a01c01 	mov	r1, #256	; 0x100
  13e590:	e1a0000d 	mov	r0, sp
  13e594:	eb0014cf 	bl	1438d8 <__fwritex>
  13e598:	e5962000 	ldr	r2, [r6]
  13e59c:	e35400ff 	cmp	r4, #255	; 0xff
  13e5a0:	e2022020 	and	r2, r2, #32
  13e5a4:	e1a01002 	mov	r1, r2
  13e5a8:	8afffff2 	bhi	13e578 <pad.part.0+0x44>
  13e5ac:	e20550ff 	and	r5, r5, #255	; 0xff
  13e5b0:	e3510000 	cmp	r1, #0
  13e5b4:	1a000003 	bne	13e5c8 <pad.part.0+0x94>
  13e5b8:	e1a02006 	mov	r2, r6
  13e5bc:	e1a01005 	mov	r1, r5
  13e5c0:	e1a0000d 	mov	r0, sp
  13e5c4:	eb0014c3 	bl	1438d8 <__fwritex>
  13e5c8:	e28ddc01 	add	sp, sp, #256	; 0x100
  13e5cc:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e5d0:	e5961000 	ldr	r1, [r6]
  13e5d4:	e2011020 	and	r1, r1, #32
  13e5d8:	eafffff4 	b	13e5b0 <pad.part.0+0x7c>
  13e5dc:	00000000 	andeq	r0, r0, r0

0013e5e0 <printf_core>:
  13e5e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13e5e4:	e3a0a000 	mov	sl, #0
  13e5e8:	e1a0b001 	mov	fp, r1
  13e5ec:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13e5f0:	e58d0004 	str	r0, [sp, #4]
  13e5f4:	e58d2018 	str	r2, [sp, #24]
  13e5f8:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13e5fc:	e58da000 	str	sl, [sp]
  13e600:	e58da00c 	str	sl, [sp, #12]
  13e604:	e59d2000 	ldr	r2, [sp]
  13e608:	e5db3000 	ldrb	r3, [fp]
  13e60c:	e082200a 	add	r2, r2, sl
  13e610:	e3530000 	cmp	r3, #0
  13e614:	e58d2000 	str	r2, [sp]
  13e618:	0a0001c8 	beq	13ed40 <printf_core+0x760>
  13e61c:	e3530025 	cmp	r3, #37	; 0x25
  13e620:	e1a0300b 	mov	r3, fp
  13e624:	0a000005 	beq	13e640 <printf_core+0x60>
  13e628:	e5f32001 	ldrb	r2, [r3, #1]!
  13e62c:	e3520000 	cmp	r2, #0
  13e630:	13520025 	cmpne	r2, #37	; 0x25
  13e634:	1afffffb 	bne	13e628 <printf_core+0x48>
  13e638:	e3520025 	cmp	r2, #37	; 0x25
  13e63c:	1a00019c 	bne	13ecb4 <printf_core+0x6d4>
  13e640:	e5d32001 	ldrb	r2, [r3, #1]
  13e644:	e1a04003 	mov	r4, r3
  13e648:	e3520025 	cmp	r2, #37	; 0x25
  13e64c:	0a000003 	beq	13e660 <printf_core+0x80>
  13e650:	ea000006 	b	13e670 <printf_core+0x90>
  13e654:	e5d42001 	ldrb	r2, [r4, #1]
  13e658:	e3520025 	cmp	r2, #37	; 0x25
  13e65c:	1a000003 	bne	13e670 <printf_core+0x90>
  13e660:	e5f42002 	ldrb	r2, [r4, #2]!
  13e664:	e2833001 	add	r3, r3, #1
  13e668:	e3520025 	cmp	r2, #37	; 0x25
  13e66c:	0afffff8 	beq	13e654 <printf_core+0x74>
  13e670:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e674:	e043a00b 	sub	sl, r3, fp
  13e678:	e59d3000 	ldr	r3, [sp]
  13e67c:	e0423003 	sub	r3, r2, r3
  13e680:	e15a0003 	cmp	sl, r3
  13e684:	e58d3008 	str	r3, [sp, #8]
  13e688:	ca000181 	bgt	13ec94 <printf_core+0x6b4>
  13e68c:	e59d3004 	ldr	r3, [sp, #4]
  13e690:	e3530000 	cmp	r3, #0
  13e694:	0a000002 	beq	13e6a4 <printf_core+0xc4>
  13e698:	e5933000 	ldr	r3, [r3]
  13e69c:	e3130020 	tst	r3, #32
  13e6a0:	0a000146 	beq	13ebc0 <printf_core+0x5e0>
  13e6a4:	e35a0000 	cmp	sl, #0
  13e6a8:	1a0000b7 	bne	13e98c <printf_core+0x3ac>
  13e6ac:	e5d42001 	ldrb	r2, [r4, #1]
  13e6b0:	e242c030 	sub	ip, r2, #48	; 0x30
  13e6b4:	e35c0009 	cmp	ip, #9
  13e6b8:	8a000002 	bhi	13e6c8 <printf_core+0xe8>
  13e6bc:	e5d43002 	ldrb	r3, [r4, #2]
  13e6c0:	e3530024 	cmp	r3, #36	; 0x24
  13e6c4:	0a000194 	beq	13ed1c <printf_core+0x73c>
  13e6c8:	e2423020 	sub	r3, r2, #32
  13e6cc:	e353001f 	cmp	r3, #31
  13e6d0:	e3e0c000 	mvn	ip, #0
  13e6d4:	e2846001 	add	r6, r4, #1
  13e6d8:	8a000196 	bhi	13ed38 <printf_core+0x758>
  13e6dc:	e59f0f44 	ldr	r0, [pc, #3908]	; 13f628 <printf_core+0x1048>
  13e6e0:	e1a01330 	lsr	r1, r0, r3
  13e6e4:	e2118001 	ands	r8, r1, #1
  13e6e8:	0a00000a 	beq	13e718 <printf_core+0x138>
  13e6ec:	e3a08000 	mov	r8, #0
  13e6f0:	e3a0e001 	mov	lr, #1
  13e6f4:	ea000002 	b	13e704 <printf_core+0x124>
  13e6f8:	e1a01330 	lsr	r1, r0, r3
  13e6fc:	e3110001 	tst	r1, #1
  13e700:	0a000004 	beq	13e718 <printf_core+0x138>
  13e704:	e5f62001 	ldrb	r2, [r6, #1]!
  13e708:	e188831e 	orr	r8, r8, lr, lsl r3
  13e70c:	e2423020 	sub	r3, r2, #32
  13e710:	e353001f 	cmp	r3, #31
  13e714:	9afffff7 	bls	13e6f8 <printf_core+0x118>
  13e718:	e352002a 	cmp	r2, #42	; 0x2a
  13e71c:	0a00009c 	beq	13e994 <printf_core+0x3b4>
  13e720:	e5d61000 	ldrb	r1, [r6]
  13e724:	e2413030 	sub	r3, r1, #48	; 0x30
  13e728:	e3530009 	cmp	r3, #9
  13e72c:	81a02001 	movhi	r2, r1
  13e730:	83a09000 	movhi	r9, #0
  13e734:	8a000012 	bhi	13e784 <printf_core+0x1a4>
  13e738:	e3a09000 	mov	r9, #0
  13e73c:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13f62c <printf_core+0x104c>
  13e740:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13e744:	e0693103 	rsb	r3, r9, r3, lsl #2
  13e748:	e5f62001 	ldrb	r2, [r6, #1]!
  13e74c:	e1a03083 	lsl	r3, r3, #1
  13e750:	e1590000 	cmp	r9, r0
  13e754:	e2411030 	sub	r1, r1, #48	; 0x30
  13e758:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13e75c:	e242e030 	sub	lr, r2, #48	; 0x30
  13e760:	8a000025 	bhi	13e7fc <printf_core+0x21c>
  13e764:	e1510003 	cmp	r1, r3
  13e768:	e0899109 	add	r9, r9, r9, lsl #2
  13e76c:	ca000022 	bgt	13e7fc <printf_core+0x21c>
  13e770:	e35e0009 	cmp	lr, #9
  13e774:	e0819089 	add	r9, r1, r9, lsl #1
  13e778:	9a000022 	bls	13e808 <printf_core+0x228>
  13e77c:	e3590000 	cmp	r9, #0
  13e780:	ba000143 	blt	13ec94 <printf_core+0x6b4>
  13e784:	e352002e 	cmp	r2, #46	; 0x2e
  13e788:	1a000097 	bne	13e9ec <printf_core+0x40c>
  13e78c:	e5d62001 	ldrb	r2, [r6, #1]
  13e790:	e352002a 	cmp	r2, #42	; 0x2a
  13e794:	1a00011e 	bne	13ec14 <printf_core+0x634>
  13e798:	e5d62002 	ldrb	r2, [r6, #2]
  13e79c:	e2423030 	sub	r3, r2, #48	; 0x30
  13e7a0:	e3530009 	cmp	r3, #9
  13e7a4:	8a000002 	bhi	13e7b4 <printf_core+0x1d4>
  13e7a8:	e5d63003 	ldrb	r3, [r6, #3]
  13e7ac:	e3530024 	cmp	r3, #36	; 0x24
  13e7b0:	0a000143 	beq	13ecc4 <printf_core+0x6e4>
  13e7b4:	e59d300c 	ldr	r3, [sp, #12]
  13e7b8:	e3530000 	cmp	r3, #0
  13e7bc:	1a00009f 	bne	13ea40 <printf_core+0x460>
  13e7c0:	e59d3004 	ldr	r3, [sp, #4]
  13e7c4:	e2866002 	add	r6, r6, #2
  13e7c8:	e3530000 	cmp	r3, #0
  13e7cc:	159d1018 	ldrne	r1, [sp, #24]
  13e7d0:	03a03001 	moveq	r3, #1
  13e7d4:	15913000 	ldrne	r3, [r1]
  13e7d8:	059d5004 	ldreq	r5, [sp, #4]
  13e7dc:	15935000 	ldrne	r5, [r3]
  13e7e0:	12832004 	addne	r2, r3, #4
  13e7e4:	11e03005 	mvnne	r3, r5
  13e7e8:	15812000 	strne	r2, [r1]
  13e7ec:	11a03fa3 	lsrne	r3, r3, #31
  13e7f0:	15d62000 	ldrbne	r2, [r6]
  13e7f4:	e58d301c 	str	r3, [sp, #28]
  13e7f8:	ea00007e 	b	13e9f8 <printf_core+0x418>
  13e7fc:	e35e0009 	cmp	lr, #9
  13e800:	8a000123 	bhi	13ec94 <printf_core+0x6b4>
  13e804:	e3e09000 	mvn	r9, #0
  13e808:	e1a01002 	mov	r1, r2
  13e80c:	eaffffcb 	b	13e740 <printf_core+0x160>
  13e810:	e28d3070 	add	r3, sp, #112	; 0x70
  13e814:	e893000c 	ldm	r3, {r2, r3}
  13e818:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13e81c:	e1921003 	orrs	r1, r2, r3
  13e820:	e1a0b00a 	mov	fp, sl
  13e824:	0a000009 	beq	13e850 <printf_core+0x270>
  13e828:	e1a001a2 	lsr	r0, r2, #3
  13e82c:	e1800e83 	orr	r0, r0, r3, lsl #29
  13e830:	e1a0c1a3 	lsr	ip, r3, #3
  13e834:	e2021007 	and	r1, r2, #7
  13e838:	e1a0300c 	mov	r3, ip
  13e83c:	e1a02000 	mov	r2, r0
  13e840:	e2811030 	add	r1, r1, #48	; 0x30
  13e844:	e1920003 	orrs	r0, r2, r3
  13e848:	e56b1001 	strb	r1, [fp, #-1]!
  13e84c:	1afffff5 	bne	13e828 <printf_core+0x248>
  13e850:	e2183008 	ands	r3, r8, #8
  13e854:	0a00026f 	beq	13f218 <printf_core+0xc38>
  13e858:	e04a300b 	sub	r3, sl, fp
  13e85c:	e1530005 	cmp	r3, r5
  13e860:	ba00026b 	blt	13f214 <printf_core+0xc34>
  13e864:	e2835001 	add	r5, r3, #1
  13e868:	e3a03000 	mov	r3, #0
  13e86c:	e58d3020 	str	r3, [sp, #32]
  13e870:	e59f3db8 	ldr	r3, [pc, #3512]	; 13f630 <printf_core+0x1050>
  13e874:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13e878:	e59d301c 	ldr	r3, [sp, #28]
  13e87c:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13e880:	1a000103 	bne	13ec94 <printf_core+0x6b4>
  13e884:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13e888:	e3530000 	cmp	r3, #0
  13e88c:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13e890:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13e894:	e1923003 	orrs	r3, r2, r3
  13e898:	03a03001 	moveq	r3, #1
  13e89c:	13a03000 	movne	r3, #0
  13e8a0:	e3550000 	cmp	r5, #0
  13e8a4:	01a02003 	moveq	r2, r3
  13e8a8:	13a02000 	movne	r2, #0
  13e8ac:	e3520000 	cmp	r2, #0
  13e8b0:	1a0002a8 	bne	13f358 <printf_core+0xd78>
  13e8b4:	e04a600b 	sub	r6, sl, fp
  13e8b8:	e1560005 	cmp	r6, r5
  13e8bc:	a1a05006 	movge	r5, r6
  13e8c0:	e0833006 	add	r3, r3, r6
  13e8c4:	e1530005 	cmp	r3, r5
  13e8c8:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e8cc:	a1a05003 	movge	r5, r3
  13e8d0:	e59d3020 	ldr	r3, [sp, #32]
  13e8d4:	e0423003 	sub	r3, r2, r3
  13e8d8:	e1530005 	cmp	r3, r5
  13e8dc:	ba0000ec 	blt	13ec94 <printf_core+0x6b4>
  13e8e0:	e59d3020 	ldr	r3, [sp, #32]
  13e8e4:	e0857003 	add	r7, r5, r3
  13e8e8:	e1570009 	cmp	r7, r9
  13e8ec:	a1a0a007 	movge	sl, r7
  13e8f0:	b1a0a009 	movlt	sl, r9
  13e8f4:	e59d3008 	ldr	r3, [sp, #8]
  13e8f8:	e153000a 	cmp	r3, sl
  13e8fc:	ba0000e4 	blt	13ec94 <printf_core+0x6b4>
  13e900:	e157000a 	cmp	r7, sl
  13e904:	b3a09000 	movlt	r9, #0
  13e908:	a3a09001 	movge	r9, #1
  13e90c:	e3180a12 	tst	r8, #73728	; 0x12000
  13e910:	01a03009 	moveq	r3, r9
  13e914:	13a03001 	movne	r3, #1
  13e918:	e3530000 	cmp	r3, #0
  13e91c:	0a000281 	beq	13f328 <printf_core+0xd48>
  13e920:	e59d3004 	ldr	r3, [sp, #4]
  13e924:	e5933000 	ldr	r3, [r3]
  13e928:	e3130020 	tst	r3, #32
  13e92c:	0a000233 	beq	13f200 <printf_core+0xc20>
  13e930:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13e934:	e3130a12 	tst	r3, #73728	; 0x12000
  13e938:	01a03009 	moveq	r3, r9
  13e93c:	13a03001 	movne	r3, #1
  13e940:	e3530000 	cmp	r3, #0
  13e944:	0a00027d 	beq	13f340 <printf_core+0xd60>
  13e948:	e1550006 	cmp	r5, r6
  13e94c:	ca000225 	bgt	13f1e8 <printf_core+0xc08>
  13e950:	e59d3004 	ldr	r3, [sp, #4]
  13e954:	e5933000 	ldr	r3, [r3]
  13e958:	e3130020 	tst	r3, #32
  13e95c:	0a00021c 	beq	13f1d4 <printf_core+0xbf4>
  13e960:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13e964:	e3130a12 	tst	r3, #73728	; 0x12000
  13e968:	01a03009 	moveq	r3, r9
  13e96c:	13a03001 	movne	r3, #1
  13e970:	e3530000 	cmp	r3, #0
  13e974:	1a000004 	bne	13e98c <printf_core+0x3ac>
  13e978:	e1a03007 	mov	r3, r7
  13e97c:	e1a0200a 	mov	r2, sl
  13e980:	e3a01020 	mov	r1, #32
  13e984:	e59d0004 	ldr	r0, [sp, #4]
  13e988:	ebfffee9 	bl	13e534 <pad.part.0>
  13e98c:	e1a0b004 	mov	fp, r4
  13e990:	eaffff1b 	b	13e604 <printf_core+0x24>
  13e994:	e5d62001 	ldrb	r2, [r6, #1]
  13e998:	e2423030 	sub	r3, r2, #48	; 0x30
  13e99c:	e3530009 	cmp	r3, #9
  13e9a0:	9a00008b 	bls	13ebd4 <printf_core+0x5f4>
  13e9a4:	e59d300c 	ldr	r3, [sp, #12]
  13e9a8:	e3530000 	cmp	r3, #0
  13e9ac:	1a000023 	bne	13ea40 <printf_core+0x460>
  13e9b0:	e59d3004 	ldr	r3, [sp, #4]
  13e9b4:	e2866001 	add	r6, r6, #1
  13e9b8:	e3530000 	cmp	r3, #0
  13e9bc:	0a0000be 	beq	13ecbc <printf_core+0x6dc>
  13e9c0:	e59d1018 	ldr	r1, [sp, #24]
  13e9c4:	e5913000 	ldr	r3, [r1]
  13e9c8:	e2832004 	add	r2, r3, #4
  13e9cc:	e5939000 	ldr	r9, [r3]
  13e9d0:	e5812000 	str	r2, [r1]
  13e9d4:	e5d62000 	ldrb	r2, [r6]
  13e9d8:	e3590000 	cmp	r9, #0
  13e9dc:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13e9e0:	b2699000 	rsblt	r9, r9, #0
  13e9e4:	e352002e 	cmp	r2, #46	; 0x2e
  13e9e8:	0affff67 	beq	13e78c <printf_core+0x1ac>
  13e9ec:	e3a03000 	mov	r3, #0
  13e9f0:	e3e05000 	mvn	r5, #0
  13e9f4:	e58d301c 	str	r3, [sp, #28]
  13e9f8:	e3a07000 	mov	r7, #0
  13e9fc:	e59f0c30 	ldr	r0, [pc, #3120]	; 13f634 <printf_core+0x1054>
  13ea00:	ea000007 	b	13ea24 <printf_core+0x444>
  13ea04:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13ea08:	e2864001 	add	r4, r6, #1
  13ea0c:	e2413001 	sub	r3, r1, #1
  13ea10:	e3530007 	cmp	r3, #7
  13ea14:	8a000011 	bhi	13ea60 <printf_core+0x480>
  13ea18:	e5d62001 	ldrb	r2, [r6, #1]
  13ea1c:	e1a07001 	mov	r7, r1
  13ea20:	e1a06004 	mov	r6, r4
  13ea24:	e0673187 	rsb	r3, r7, r7, lsl #3
  13ea28:	e0873103 	add	r3, r7, r3, lsl #2
  13ea2c:	e0803083 	add	r3, r0, r3, lsl #1
  13ea30:	e0833002 	add	r3, r3, r2
  13ea34:	e2422041 	sub	r2, r2, #65	; 0x41
  13ea38:	e3520039 	cmp	r2, #57	; 0x39
  13ea3c:	9afffff0 	bls	13ea04 <printf_core+0x424>
  13ea40:	ebffe860 	bl	138bc8 <__errno_location>
  13ea44:	e3a03016 	mov	r3, #22
  13ea48:	e3e02000 	mvn	r2, #0
  13ea4c:	e58d2000 	str	r2, [sp]
  13ea50:	e5803000 	str	r3, [r0]
  13ea54:	e59d0000 	ldr	r0, [sp]
  13ea58:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ea5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ea60:	e3510000 	cmp	r1, #0
  13ea64:	0afffff5 	beq	13ea40 <printf_core+0x460>
  13ea68:	e351001b 	cmp	r1, #27
  13ea6c:	0a000080 	beq	13ec74 <printf_core+0x694>
  13ea70:	e35c0000 	cmp	ip, #0
  13ea74:	ba0000a1 	blt	13ed00 <printf_core+0x720>
  13ea78:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ea7c:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13ea80:	e083318c 	add	r3, r3, ip, lsl #3
  13ea84:	e782110c 	str	r1, [r2, ip, lsl #2]
  13ea88:	e893000c 	ldm	r3, {r2, r3}
  13ea8c:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13ea90:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13ea94:	e59d3004 	ldr	r3, [sp, #4]
  13ea98:	e3530000 	cmp	r3, #0
  13ea9c:	0a000079 	beq	13ec88 <printf_core+0x6a8>
  13eaa0:	e5d63000 	ldrb	r3, [r6]
  13eaa4:	e3570000 	cmp	r7, #0
  13eaa8:	e58d3010 	str	r3, [sp, #16]
  13eaac:	0a000004 	beq	13eac4 <printf_core+0x4e4>
  13eab0:	e203300f 	and	r3, r3, #15
  13eab4:	e3530003 	cmp	r3, #3
  13eab8:	059d3010 	ldreq	r3, [sp, #16]
  13eabc:	03c33020 	biceq	r3, r3, #32
  13eac0:	058d3010 	streq	r3, [sp, #16]
  13eac4:	e59d3010 	ldr	r3, [sp, #16]
  13eac8:	e3180a02 	tst	r8, #8192	; 0x2000
  13eacc:	e2433041 	sub	r3, r3, #65	; 0x41
  13ead0:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13ead4:	e3530037 	cmp	r3, #55	; 0x37
  13ead8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13eadc:	ea0001a2 	b	13f16c <printf_core+0xb8c>
  13eae0:	0013efc0 	.word	0x0013efc0
  13eae4:	0013f16c 	.word	0x0013f16c
  13eae8:	0013ee5c 	.word	0x0013ee5c
  13eaec:	0013f16c 	.word	0x0013f16c
  13eaf0:	0013efc0 	.word	0x0013efc0
  13eaf4:	0013efc0 	.word	0x0013efc0
  13eaf8:	0013efc0 	.word	0x0013efc0
  13eafc:	0013f16c 	.word	0x0013f16c
  13eb00:	0013f16c 	.word	0x0013f16c
  13eb04:	0013f16c 	.word	0x0013f16c
  13eb08:	0013f16c 	.word	0x0013f16c
  13eb0c:	0013f16c 	.word	0x0013f16c
  13eb10:	0013f16c 	.word	0x0013f16c
  13eb14:	0013f16c 	.word	0x0013f16c
  13eb18:	0013f16c 	.word	0x0013f16c
  13eb1c:	0013f16c 	.word	0x0013f16c
  13eb20:	0013f16c 	.word	0x0013f16c
  13eb24:	0013f16c 	.word	0x0013f16c
  13eb28:	0013eecc 	.word	0x0013eecc
  13eb2c:	0013f16c 	.word	0x0013f16c
  13eb30:	0013f16c 	.word	0x0013f16c
  13eb34:	0013f16c 	.word	0x0013f16c
  13eb38:	0013f16c 	.word	0x0013f16c
  13eb3c:	0013f160 	.word	0x0013f160
  13eb40:	0013f16c 	.word	0x0013f16c
  13eb44:	0013f16c 	.word	0x0013f16c
  13eb48:	0013f16c 	.word	0x0013f16c
  13eb4c:	0013f16c 	.word	0x0013f16c
  13eb50:	0013f16c 	.word	0x0013f16c
  13eb54:	0013f16c 	.word	0x0013f16c
  13eb58:	0013f16c 	.word	0x0013f16c
  13eb5c:	0013f16c 	.word	0x0013f16c
  13eb60:	0013efc0 	.word	0x0013efc0
  13eb64:	0013f16c 	.word	0x0013f16c
  13eb68:	0013eee0 	.word	0x0013eee0
  13eb6c:	0013ef1c 	.word	0x0013ef1c
  13eb70:	0013efc0 	.word	0x0013efc0
  13eb74:	0013efc0 	.word	0x0013efc0
  13eb78:	0013efc0 	.word	0x0013efc0
  13eb7c:	0013f16c 	.word	0x0013f16c
  13eb80:	0013ef1c 	.word	0x0013ef1c
  13eb84:	0013f16c 	.word	0x0013f16c
  13eb88:	0013f16c 	.word	0x0013f16c
  13eb8c:	0013f16c 	.word	0x0013f16c
  13eb90:	0013ef64 	.word	0x0013ef64
  13eb94:	0013ef94 	.word	0x0013ef94
  13eb98:	0013e810 	.word	0x0013e810
  13eb9c:	0013f0b4 	.word	0x0013f0b4
  13eba0:	0013f16c 	.word	0x0013f16c
  13eba4:	0013f16c 	.word	0x0013f16c
  13eba8:	0013f14c 	.word	0x0013f14c
  13ebac:	0013f16c 	.word	0x0013f16c
  13ebb0:	0013eda0 	.word	0x0013eda0
  13ebb4:	0013f16c 	.word	0x0013f16c
  13ebb8:	0013f16c 	.word	0x0013f16c
  13ebbc:	0013f160 	.word	0x0013f160
  13ebc0:	e59d2004 	ldr	r2, [sp, #4]
  13ebc4:	e1a0100a 	mov	r1, sl
  13ebc8:	e1a0000b 	mov	r0, fp
  13ebcc:	eb001341 	bl	1438d8 <__fwritex>
  13ebd0:	eafffeb3 	b	13e6a4 <printf_core+0xc4>
  13ebd4:	e5d63002 	ldrb	r3, [r6, #2]
  13ebd8:	e3530024 	cmp	r3, #36	; 0x24
  13ebdc:	1affff70 	bne	13e9a4 <printf_core+0x3c4>
  13ebe0:	e3a0300a 	mov	r3, #10
  13ebe4:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13ebe8:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13ebec:	e7813102 	str	r3, [r1, r2, lsl #2]
  13ebf0:	e3a02001 	mov	r2, #1
  13ebf4:	e5d63001 	ldrb	r3, [r6, #1]
  13ebf8:	e58d200c 	str	r2, [sp, #12]
  13ebfc:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13ec00:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13ec04:	e2433030 	sub	r3, r3, #48	; 0x30
  13ec08:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13ec0c:	e2866003 	add	r6, r6, #3
  13ec10:	eaffff6f 	b	13e9d4 <printf_core+0x3f4>
  13ec14:	e2421030 	sub	r1, r2, #48	; 0x30
  13ec18:	e3510009 	cmp	r1, #9
  13ec1c:	e3a05000 	mov	r5, #0
  13ec20:	e2866001 	add	r6, r6, #1
  13ec24:	8a00000f 	bhi	13ec68 <printf_core+0x688>
  13ec28:	e59f09fc 	ldr	r0, [pc, #2556]	; 13f62c <printf_core+0x104c>
  13ec2c:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13ec30:	e0653103 	rsb	r3, r5, r3, lsl #2
  13ec34:	e1a03083 	lsl	r3, r3, #1
  13ec38:	e1550000 	cmp	r5, r0
  13ec3c:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ec40:	8a000003 	bhi	13ec54 <printf_core+0x674>
  13ec44:	e1510003 	cmp	r1, r3
  13ec48:	e0855105 	add	r5, r5, r5, lsl #2
  13ec4c:	d0815085 	addle	r5, r1, r5, lsl #1
  13ec50:	da000000 	ble	13ec58 <printf_core+0x678>
  13ec54:	e3e05000 	mvn	r5, #0
  13ec58:	e5f62001 	ldrb	r2, [r6, #1]!
  13ec5c:	e2421030 	sub	r1, r2, #48	; 0x30
  13ec60:	e3510009 	cmp	r1, #9
  13ec64:	9afffff0 	bls	13ec2c <printf_core+0x64c>
  13ec68:	e3a03001 	mov	r3, #1
  13ec6c:	e58d301c 	str	r3, [sp, #28]
  13ec70:	eaffff60 	b	13e9f8 <printf_core+0x418>
  13ec74:	e35c0000 	cmp	ip, #0
  13ec78:	aaffff70 	bge	13ea40 <printf_core+0x460>
  13ec7c:	e59d3004 	ldr	r3, [sp, #4]
  13ec80:	e3530000 	cmp	r3, #0
  13ec84:	1affff85 	bne	13eaa0 <printf_core+0x4c0>
  13ec88:	e59d3008 	ldr	r3, [sp, #8]
  13ec8c:	e153000a 	cmp	r3, sl
  13ec90:	aaffff3d 	bge	13e98c <printf_core+0x3ac>
  13ec94:	ebffe7cb 	bl	138bc8 <__errno_location>
  13ec98:	e3e02000 	mvn	r2, #0
  13ec9c:	e3a0304b 	mov	r3, #75	; 0x4b
  13eca0:	e58d2000 	str	r2, [sp]
  13eca4:	e5803000 	str	r3, [r0]
  13eca8:	e59d0000 	ldr	r0, [sp]
  13ecac:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ecb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ecb4:	e1a04003 	mov	r4, r3
  13ecb8:	eafffe6c 	b	13e670 <printf_core+0x90>
  13ecbc:	e59d9004 	ldr	r9, [sp, #4]
  13ecc0:	eafffeaf 	b	13e784 <printf_core+0x1a4>
  13ecc4:	e3a0300a 	mov	r3, #10
  13ecc8:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13eccc:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13ecd0:	e7813102 	str	r3, [r1, r2, lsl #2]
  13ecd4:	e5d63002 	ldrb	r3, [r6, #2]
  13ecd8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13ecdc:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13ece0:	e2433030 	sub	r3, r3, #48	; 0x30
  13ece4:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13ece8:	e5d62004 	ldrb	r2, [r6, #4]
  13ecec:	e1e03005 	mvn	r3, r5
  13ecf0:	e1a03fa3 	lsr	r3, r3, #31
  13ecf4:	e2866004 	add	r6, r6, #4
  13ecf8:	e58d301c 	str	r3, [sp, #28]
  13ecfc:	eaffff3d 	b	13e9f8 <printf_core+0x418>
  13ed00:	e59d3004 	ldr	r3, [sp, #4]
  13ed04:	e3530000 	cmp	r3, #0
  13ed08:	0a000409 	beq	13fd34 <printf_core+0x1754>
  13ed0c:	e59d2018 	ldr	r2, [sp, #24]
  13ed10:	e28d0070 	add	r0, sp, #112	; 0x70
  13ed14:	ebfffda1 	bl	13e3a0 <pop_arg>
  13ed18:	eaffff60 	b	13eaa0 <printf_core+0x4c0>
  13ed1c:	e3a03001 	mov	r3, #1
  13ed20:	e5d42003 	ldrb	r2, [r4, #3]
  13ed24:	e58d300c 	str	r3, [sp, #12]
  13ed28:	e2423020 	sub	r3, r2, #32
  13ed2c:	e353001f 	cmp	r3, #31
  13ed30:	e2846003 	add	r6, r4, #3
  13ed34:	9afffe68 	bls	13e6dc <printf_core+0xfc>
  13ed38:	e3a08000 	mov	r8, #0
  13ed3c:	eafffe75 	b	13e718 <printf_core+0x138>
  13ed40:	e59d3004 	ldr	r3, [sp, #4]
  13ed44:	e3530000 	cmp	r3, #0
  13ed48:	1affff41 	bne	13ea54 <printf_core+0x474>
  13ed4c:	e59d300c 	ldr	r3, [sp, #12]
  13ed50:	e3530000 	cmp	r3, #0
  13ed54:	0a0003f6 	beq	13fd34 <printf_core+0x1754>
  13ed58:	e3a05001 	mov	r5, #1
  13ed5c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ed60:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13ed64:	e59d7018 	ldr	r7, [sp, #24]
  13ed68:	e2834008 	add	r4, r3, #8
  13ed6c:	e5b61004 	ldr	r1, [r6, #4]!
  13ed70:	e3510000 	cmp	r1, #0
  13ed74:	0a0004f8 	beq	14015c <printf_core+0x1b7c>
  13ed78:	e1a00004 	mov	r0, r4
  13ed7c:	e2855001 	add	r5, r5, #1
  13ed80:	e1a02007 	mov	r2, r7
  13ed84:	ebfffd85 	bl	13e3a0 <pop_arg>
  13ed88:	e355000a 	cmp	r5, #10
  13ed8c:	e2844008 	add	r4, r4, #8
  13ed90:	1afffff5 	bne	13ed6c <printf_core+0x78c>
  13ed94:	e3a03001 	mov	r3, #1
  13ed98:	e58d3000 	str	r3, [sp]
  13ed9c:	eaffff2c 	b	13ea54 <printf_core+0x474>
  13eda0:	e3a03000 	mov	r3, #0
  13eda4:	e28d7070 	add	r7, sp, #112	; 0x70
  13eda8:	e89700c0 	ldm	r7, {r6, r7}
  13edac:	e58d3020 	str	r3, [sp, #32]
  13edb0:	e59f3878 	ldr	r3, [pc, #2168]	; 13f630 <printf_core+0x1050>
  13edb4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13edb8:	e3a03000 	mov	r3, #0
  13edbc:	e3e02000 	mvn	r2, #0
  13edc0:	e1570003 	cmp	r7, r3
  13edc4:	01560002 	cmpeq	r6, r2
  13edc8:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13edcc:	91a0b00a 	movls	fp, sl
  13edd0:	9a000015 	bls	13ee2c <printf_core+0x84c>
  13edd4:	e1a0b00a 	mov	fp, sl
  13edd8:	e58d2010 	str	r2, [sp, #16]
  13eddc:	e58d3014 	str	r3, [sp, #20]
  13ede0:	e1a00006 	mov	r0, r6
  13ede4:	e1a01007 	mov	r1, r7
  13ede8:	e3a0200a 	mov	r2, #10
  13edec:	e3a03000 	mov	r3, #0
  13edf0:	eb001834 	bl	144ec8 <__aeabi_uldivmod>
  13edf4:	e2822030 	add	r2, r2, #48	; 0x30
  13edf8:	e56b2001 	strb	r2, [fp, #-1]!
  13edfc:	e1a00006 	mov	r0, r6
  13ee00:	e1a01007 	mov	r1, r7
  13ee04:	e3a0200a 	mov	r2, #10
  13ee08:	e3a03000 	mov	r3, #0
  13ee0c:	eb00182d 	bl	144ec8 <__aeabi_uldivmod>
  13ee10:	e28d3010 	add	r3, sp, #16
  13ee14:	e893000c 	ldm	r3, {r2, r3}
  13ee18:	e1510003 	cmp	r1, r3
  13ee1c:	01500002 	cmpeq	r0, r2
  13ee20:	e1a06000 	mov	r6, r0
  13ee24:	e1a07001 	mov	r7, r1
  13ee28:	8affffec 	bhi	13ede0 <printf_core+0x800>
  13ee2c:	e3560000 	cmp	r6, #0
  13ee30:	0afffe90 	beq	13e878 <printf_core+0x298>
  13ee34:	e59f1838 	ldr	r1, [pc, #2104]	; 13f674 <printf_core+0x1094>
  13ee38:	e0832196 	umull	r2, r3, r6, r1
  13ee3c:	e1a031a3 	lsr	r3, r3, #3
  13ee40:	e0832103 	add	r2, r3, r3, lsl #2
  13ee44:	e0466082 	sub	r6, r6, r2, lsl #1
  13ee48:	e2862030 	add	r2, r6, #48	; 0x30
  13ee4c:	e2536000 	subs	r6, r3, #0
  13ee50:	e56b2001 	strb	r2, [fp, #-1]!
  13ee54:	1afffff6 	bne	13ee34 <printf_core+0x854>
  13ee58:	eafffe86 	b	13e878 <printf_core+0x298>
  13ee5c:	e3a03000 	mov	r3, #0
  13ee60:	e3e0a000 	mvn	sl, #0
  13ee64:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13ee68:	e28d707c 	add	r7, sp, #124	; 0x7c
  13ee6c:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13ee70:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13ee74:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13ee78:	e3510000 	cmp	r1, #0
  13ee7c:	0a000112 	beq	13f2cc <printf_core+0xcec>
  13ee80:	e3a05000 	mov	r5, #0
  13ee84:	e28d6068 	add	r6, sp, #104	; 0x68
  13ee88:	ea000007 	b	13eeac <printf_core+0x8cc>
  13ee8c:	e1530000 	cmp	r3, r0
  13ee90:	3a0000e4 	bcc	13f228 <printf_core+0xc48>
  13ee94:	e0855000 	add	r5, r5, r0
  13ee98:	e155000a 	cmp	r5, sl
  13ee9c:	2a0000e1 	bcs	13f228 <printf_core+0xc48>
  13eea0:	e5b71004 	ldr	r1, [r7, #4]!
  13eea4:	e3510000 	cmp	r1, #0
  13eea8:	0a0000de 	beq	13f228 <printf_core+0xc48>
  13eeac:	e1a00006 	mov	r0, r6
  13eeb0:	eb00109c 	bl	143128 <wctomb>
  13eeb4:	e3500000 	cmp	r0, #0
  13eeb8:	e04a3005 	sub	r3, sl, r5
  13eebc:	aafffff2 	bge	13ee8c <printf_core+0x8ac>
  13eec0:	e3e03000 	mvn	r3, #0
  13eec4:	e58d3000 	str	r3, [sp]
  13eec8:	eafffee1 	b	13ea54 <printf_core+0x474>
  13eecc:	e255a000 	subs	sl, r5, #0
  13eed0:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13eed4:	0a0000fc 	beq	13f2cc <printf_core+0xcec>
  13eed8:	e5971000 	ldr	r1, [r7]
  13eedc:	eaffffe5 	b	13ee78 <printf_core+0x898>
  13eee0:	e3a00001 	mov	r0, #1
  13eee4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13eee8:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13eeec:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13eef0:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13eef4:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13eef8:	e3a03000 	mov	r3, #0
  13eefc:	e046600b 	sub	r6, r6, fp
  13ef00:	e58d3020 	str	r3, [sp, #32]
  13ef04:	e59f3724 	ldr	r3, [pc, #1828]	; 13f630 <printf_core+0x1050>
  13ef08:	e1560000 	cmp	r6, r0
  13ef0c:	a1a05006 	movge	r5, r6
  13ef10:	b1a05000 	movlt	r5, r0
  13ef14:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ef18:	eafffe70 	b	13e8e0 <printf_core+0x300>
  13ef1c:	e28d7070 	add	r7, sp, #112	; 0x70
  13ef20:	e89700c0 	ldm	r7, {r6, r7}
  13ef24:	e3560000 	cmp	r6, #0
  13ef28:	e2d73000 	sbcs	r3, r7, #0
  13ef2c:	ba000122 	blt	13f3bc <printf_core+0xddc>
  13ef30:	e3180b02 	tst	r8, #2048	; 0x800
  13ef34:	1a000379 	bne	13fd20 <printf_core+0x1740>
  13ef38:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13f630 <printf_core+0x1050>
  13ef3c:	e2083001 	and	r3, r8, #1
  13ef40:	e3530000 	cmp	r3, #0
  13ef44:	e28a2002 	add	r2, sl, #2
  13ef48:	01a0300a 	moveq	r3, sl
  13ef4c:	11a03002 	movne	r3, r2
  13ef50:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ef54:	13a03001 	movne	r3, #1
  13ef58:	03a03000 	moveq	r3, #0
  13ef5c:	e58d3020 	str	r3, [sp, #32]
  13ef60:	eaffff94 	b	13edb8 <printf_core+0x7d8>
  13ef64:	ebffe717 	bl	138bc8 <__errno_location>
  13ef68:	e5900000 	ldr	r0, [r0]
  13ef6c:	ebffe737 	bl	138c50 <strerror>
  13ef70:	e1a0b000 	mov	fp, r0
  13ef74:	e3550000 	cmp	r5, #0
  13ef78:	ba0000fa 	blt	13f368 <printf_core+0xd88>
  13ef7c:	e1a01005 	mov	r1, r5
  13ef80:	e1a0000b 	mov	r0, fp
  13ef84:	eb0008dd 	bl	141300 <strnlen>
  13ef88:	e08b6000 	add	r6, fp, r0
  13ef8c:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13ef90:	eaffffd8 	b	13eef8 <printf_core+0x918>
  13ef94:	e3570007 	cmp	r7, #7
  13ef98:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13ef9c:	eaffff39 	b	13ec88 <printf_core+0x6a8>
  13efa0:	0013f190 	.word	0x0013f190
  13efa4:	0013f190 	.word	0x0013f190
  13efa8:	0013f1a0 	.word	0x0013f1a0
  13efac:	0013f1b4 	.word	0x0013f1b4
  13efb0:	0013f1c4 	.word	0x0013f1c4
  13efb4:	0013ec88 	.word	0x0013ec88
  13efb8:	0013f190 	.word	0x0013f190
  13efbc:	0013f1a0 	.word	0x0013f1a0
  13efc0:	e59d301c 	ldr	r3, [sp, #28]
  13efc4:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13efc8:	1affff31 	bne	13ec94 <printf_core+0x6b4>
  13efcc:	e28d7070 	add	r7, sp, #112	; 0x70
  13efd0:	e89700c0 	ldm	r7, {r6, r7}
  13efd4:	e1b02fa7 	lsrs	r2, r7, #31
  13efd8:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13efdc:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13efe0:	0a0000e8 	beq	13f388 <printf_core+0xda8>
  13efe4:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13efe8:	e1a07003 	mov	r7, r3
  13efec:	e59f3644 	ldr	r3, [pc, #1604]	; 13f638 <printf_core+0x1058>
  13eff0:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13eff4:	e3e02000 	mvn	r2, #0
  13eff8:	e59f363c 	ldr	r3, [pc, #1596]	; 13f63c <printf_core+0x105c>
  13effc:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13f000:	e1510003 	cmp	r1, r3
  13f004:	01560002 	cmpeq	r6, r2
  13f008:	e1a00006 	mov	r0, r6
  13f00c:	9a0000fb 	bls	13f400 <printf_core+0xe20>
  13f010:	e59d3010 	ldr	r3, [sp, #16]
  13f014:	e59fe624 	ldr	lr, [pc, #1572]	; 13f640 <printf_core+0x1060>
  13f018:	e59fc624 	ldr	ip, [pc, #1572]	; 13f644 <printf_core+0x1064>
  13f01c:	e213a020 	ands	sl, r3, #32
  13f020:	e1a02006 	mov	r2, r6
  13f024:	e1a03007 	mov	r3, r7
  13f028:	e1a01007 	mov	r1, r7
  13f02c:	01a0600e 	moveq	r6, lr
  13f030:	11a0600c 	movne	r6, ip
  13f034:	eb001729 	bl	144ce0 <__aeabi_dcmpeq>
  13f038:	e3500000 	cmp	r0, #0
  13f03c:	1a000004 	bne	13f054 <printf_core+0xa74>
  13f040:	e59fe600 	ldr	lr, [pc, #1536]	; 13f648 <printf_core+0x1068>
  13f044:	e59fc600 	ldr	ip, [pc, #1536]	; 13f64c <printf_core+0x106c>
  13f048:	e35a0000 	cmp	sl, #0
  13f04c:	01a0600e 	moveq	r6, lr
  13f050:	11a0600c 	movne	r6, ip
  13f054:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f058:	e283a003 	add	sl, r3, #3
  13f05c:	e159000a 	cmp	r9, sl
  13f060:	c3a07000 	movgt	r7, #0
  13f064:	d3a07001 	movle	r7, #1
  13f068:	e3180a02 	tst	r8, #8192	; 0x2000
  13f06c:	01a03007 	moveq	r3, r7
  13f070:	13a03001 	movne	r3, #1
  13f074:	e3530000 	cmp	r3, #0
  13f078:	0a00042e 	beq	140138 <printf_core+0x1b58>
  13f07c:	e59d3004 	ldr	r3, [sp, #4]
  13f080:	e5933000 	ldr	r3, [r3]
  13f084:	e3130020 	tst	r3, #32
  13f088:	0a00032c 	beq	13fd40 <printf_core+0x1760>
  13f08c:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f090:	e3130a12 	tst	r3, #73728	; 0x12000
  13f094:	13a07001 	movne	r7, #1
  13f098:	e3570000 	cmp	r7, #0
  13f09c:	0a00034f 	beq	13fde0 <printf_core+0x1800>
  13f0a0:	e159000a 	cmp	r9, sl
  13f0a4:	a1a0a009 	movge	sl, r9
  13f0a8:	e35a0000 	cmp	sl, #0
  13f0ac:	aafffef5 	bge	13ec88 <printf_core+0x6a8>
  13f0b0:	eafffef7 	b	13ec94 <printf_core+0x6b4>
  13f0b4:	e3550008 	cmp	r5, #8
  13f0b8:	e3a03078 	mov	r3, #120	; 0x78
  13f0bc:	33a05008 	movcc	r5, #8
  13f0c0:	e3a0c020 	mov	ip, #32
  13f0c4:	e58d3010 	str	r3, [sp, #16]
  13f0c8:	e3888008 	orr	r8, r8, #8
  13f0cc:	e28d3070 	add	r3, sp, #112	; 0x70
  13f0d0:	e893000c 	ldm	r3, {r2, r3}
  13f0d4:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f0d8:	e1921003 	orrs	r1, r2, r3
  13f0dc:	e1a0b00a 	mov	fp, sl
  13f0e0:	0a00004b 	beq	13f214 <printf_core+0xc34>
  13f0e4:	e59f6584 	ldr	r6, [pc, #1412]	; 13f670 <printf_core+0x1090>
  13f0e8:	e3a01000 	mov	r1, #0
  13f0ec:	e202000f 	and	r0, r2, #15
  13f0f0:	e1a0e222 	lsr	lr, r2, #4
  13f0f4:	e58d0020 	str	r0, [sp, #32]
  13f0f8:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f0fc:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f100:	e1a01223 	lsr	r1, r3, #4
  13f104:	e1a03001 	mov	r3, r1
  13f108:	e1a0200e 	mov	r2, lr
  13f10c:	e59d1020 	ldr	r1, [sp, #32]
  13f110:	e0860001 	add	r0, r6, r1
  13f114:	e5d01000 	ldrb	r1, [r0]
  13f118:	e1920003 	orrs	r0, r2, r3
  13f11c:	e18c1001 	orr	r1, ip, r1
  13f120:	e56b1001 	strb	r1, [fp, #-1]!
  13f124:	1affffef 	bne	13f0e8 <printf_core+0xb08>
  13f128:	e2183008 	ands	r3, r8, #8
  13f12c:	0a000039 	beq	13f218 <printf_core+0xc38>
  13f130:	e3a02002 	mov	r2, #2
  13f134:	e59f34f4 	ldr	r3, [pc, #1268]	; 13f630 <printf_core+0x1050>
  13f138:	e58d2020 	str	r2, [sp, #32]
  13f13c:	e59d2010 	ldr	r2, [sp, #16]
  13f140:	e0833242 	add	r3, r3, r2, asr #4
  13f144:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f148:	eafffdca 	b	13e878 <printf_core+0x298>
  13f14c:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f150:	e59f34f8 	ldr	r3, [pc, #1272]	; 13f650 <printf_core+0x1070>
  13f154:	e35b0000 	cmp	fp, #0
  13f158:	01a0b003 	moveq	fp, r3
  13f15c:	eaffff84 	b	13ef74 <printf_core+0x994>
  13f160:	e59d3010 	ldr	r3, [sp, #16]
  13f164:	e203c020 	and	ip, r3, #32
  13f168:	eaffffd7 	b	13f0cc <printf_core+0xaec>
  13f16c:	e3a03000 	mov	r3, #0
  13f170:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f174:	e046600b 	sub	r6, r6, fp
  13f178:	e58d3020 	str	r3, [sp, #32]
  13f17c:	e59f34ac 	ldr	r3, [pc, #1196]	; 13f630 <printf_core+0x1050>
  13f180:	e1560005 	cmp	r6, r5
  13f184:	a1a05006 	movge	r5, r6
  13f188:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f18c:	eafffdd3 	b	13e8e0 <printf_core+0x300>
  13f190:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f194:	e59d2000 	ldr	r2, [sp]
  13f198:	e5832000 	str	r2, [r3]
  13f19c:	eafffeb9 	b	13ec88 <printf_core+0x6a8>
  13f1a0:	e59d2000 	ldr	r2, [sp]
  13f1a4:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f1a8:	e1a03fc2 	asr	r3, r2, #31
  13f1ac:	e881000c 	stm	r1, {r2, r3}
  13f1b0:	eafffeb4 	b	13ec88 <printf_core+0x6a8>
  13f1b4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f1b8:	e59d2000 	ldr	r2, [sp]
  13f1bc:	e1c320b0 	strh	r2, [r3]
  13f1c0:	eafffeb0 	b	13ec88 <printf_core+0x6a8>
  13f1c4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f1c8:	e59d2000 	ldr	r2, [sp]
  13f1cc:	e5c32000 	strb	r2, [r3]
  13f1d0:	eafffeac 	b	13ec88 <printf_core+0x6a8>
  13f1d4:	e1a01006 	mov	r1, r6
  13f1d8:	e1a0000b 	mov	r0, fp
  13f1dc:	e59d2004 	ldr	r2, [sp, #4]
  13f1e0:	eb0011bc 	bl	1438d8 <__fwritex>
  13f1e4:	eafffddd 	b	13e960 <printf_core+0x380>
  13f1e8:	e1a02005 	mov	r2, r5
  13f1ec:	e1a03006 	mov	r3, r6
  13f1f0:	e3a01030 	mov	r1, #48	; 0x30
  13f1f4:	e59d0004 	ldr	r0, [sp, #4]
  13f1f8:	ebfffccd 	bl	13e534 <pad.part.0>
  13f1fc:	eafffdd3 	b	13e950 <printf_core+0x370>
  13f200:	e59d1020 	ldr	r1, [sp, #32]
  13f204:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f208:	e59d2004 	ldr	r2, [sp, #4]
  13f20c:	eb0011b1 	bl	1438d8 <__fwritex>
  13f210:	eafffdc6 	b	13e930 <printf_core+0x350>
  13f214:	e3a03000 	mov	r3, #0
  13f218:	e58d3020 	str	r3, [sp, #32]
  13f21c:	e59f340c 	ldr	r3, [pc, #1036]	; 13f630 <printf_core+0x1050>
  13f220:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f224:	eafffd93 	b	13e878 <printf_core+0x298>
  13f228:	e3550000 	cmp	r5, #0
  13f22c:	e1a0b005 	mov	fp, r5
  13f230:	bafffe97 	blt	13ec94 <printf_core+0x6b4>
  13f234:	e1550009 	cmp	r5, r9
  13f238:	b3a03000 	movlt	r3, #0
  13f23c:	a3a03001 	movge	r3, #1
  13f240:	e3180a12 	tst	r8, #73728	; 0x12000
  13f244:	e58d3010 	str	r3, [sp, #16]
  13f248:	13a03001 	movne	r3, #1
  13f24c:	e3530000 	cmp	r3, #0
  13f250:	0a000062 	beq	13f3e0 <printf_core+0xe00>
  13f254:	e3550000 	cmp	r5, #0
  13f258:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f25c:	0a000025 	beq	13f2f8 <printf_core+0xd18>
  13f260:	e5971000 	ldr	r1, [r7]
  13f264:	e3510000 	cmp	r1, #0
  13f268:	0a000022 	beq	13f2f8 <printf_core+0xd18>
  13f26c:	e3a0a000 	mov	sl, #0
  13f270:	e58d401c 	str	r4, [sp, #28]
  13f274:	e28d6068 	add	r6, sp, #104	; 0x68
  13f278:	e1a0400a 	mov	r4, sl
  13f27c:	e59da004 	ldr	sl, [sp, #4]
  13f280:	ea000004 	b	13f298 <printf_core+0xcb8>
  13f284:	e1540005 	cmp	r4, r5
  13f288:	2a000024 	bcs	13f320 <printf_core+0xd40>
  13f28c:	e5b71004 	ldr	r1, [r7, #4]!
  13f290:	e3510000 	cmp	r1, #0
  13f294:	0a000021 	beq	13f320 <printf_core+0xd40>
  13f298:	e1a00006 	mov	r0, r6
  13f29c:	eb000fa1 	bl	143128 <wctomb>
  13f2a0:	e0844000 	add	r4, r4, r0
  13f2a4:	e1540005 	cmp	r4, r5
  13f2a8:	8a00001c 	bhi	13f320 <printf_core+0xd40>
  13f2ac:	e59a2000 	ldr	r2, [sl]
  13f2b0:	e3120020 	tst	r2, #32
  13f2b4:	1afffff2 	bne	13f284 <printf_core+0xca4>
  13f2b8:	e1a01000 	mov	r1, r0
  13f2bc:	e1a0200a 	mov	r2, sl
  13f2c0:	e1a00006 	mov	r0, r6
  13f2c4:	eb001183 	bl	1438d8 <__fwritex>
  13f2c8:	eaffffed 	b	13f284 <printf_core+0xca4>
  13f2cc:	e3590000 	cmp	r9, #0
  13f2d0:	c3a03000 	movgt	r3, #0
  13f2d4:	d3a03001 	movle	r3, #1
  13f2d8:	e3180a12 	tst	r8, #73728	; 0x12000
  13f2dc:	e58d3010 	str	r3, [sp, #16]
  13f2e0:	13a03001 	movne	r3, #1
  13f2e4:	e3530000 	cmp	r3, #0
  13f2e8:	01a0b003 	moveq	fp, r3
  13f2ec:	01a0500b 	moveq	r5, fp
  13f2f0:	0a00003a 	beq	13f3e0 <printf_core+0xe00>
  13f2f4:	e3a0b000 	mov	fp, #0
  13f2f8:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f2fc:	e3130a12 	tst	r3, #73728	; 0x12000
  13f300:	e59d3010 	ldr	r3, [sp, #16]
  13f304:	13a03001 	movne	r3, #1
  13f308:	e3530000 	cmp	r3, #0
  13f30c:	0a00027d 	beq	13fd08 <printf_core+0x1728>
  13f310:	e159000b 	cmp	r9, fp
  13f314:	a1a0a009 	movge	sl, r9
  13f318:	b1a0a00b 	movlt	sl, fp
  13f31c:	eafffe59 	b	13ec88 <printf_core+0x6a8>
  13f320:	e59d401c 	ldr	r4, [sp, #28]
  13f324:	eafffff3 	b	13f2f8 <printf_core+0xd18>
  13f328:	e1a03007 	mov	r3, r7
  13f32c:	e1a0200a 	mov	r2, sl
  13f330:	e3a01020 	mov	r1, #32
  13f334:	e59d0004 	ldr	r0, [sp, #4]
  13f338:	ebfffc7d 	bl	13e534 <pad.part.0>
  13f33c:	eafffd77 	b	13e920 <printf_core+0x340>
  13f340:	e1a03007 	mov	r3, r7
  13f344:	e1a0200a 	mov	r2, sl
  13f348:	e3a01030 	mov	r1, #48	; 0x30
  13f34c:	e59d0004 	ldr	r0, [sp, #4]
  13f350:	ebfffc77 	bl	13e534 <pad.part.0>
  13f354:	eafffd7b 	b	13e948 <printf_core+0x368>
  13f358:	e3a05000 	mov	r5, #0
  13f35c:	e1a0b00a 	mov	fp, sl
  13f360:	e1a06005 	mov	r6, r5
  13f364:	eafffd5d 	b	13e8e0 <printf_core+0x300>
  13f368:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f36c:	e1a0000b 	mov	r0, fp
  13f370:	eb0007e2 	bl	141300 <strnlen>
  13f374:	e7db3000 	ldrb	r3, [fp, r0]
  13f378:	e08b6000 	add	r6, fp, r0
  13f37c:	e3530000 	cmp	r3, #0
  13f380:	0affff01 	beq	13ef8c <printf_core+0x9ac>
  13f384:	eafffe42 	b	13ec94 <printf_core+0x6b4>
  13f388:	e3180b02 	tst	r8, #2048	; 0x800
  13f38c:	1a000278 	bne	13fd74 <printf_core+0x1794>
  13f390:	e59f22bc 	ldr	r2, [pc, #700]	; 13f654 <printf_core+0x1074>
  13f394:	e2083001 	and	r3, r8, #1
  13f398:	e3530000 	cmp	r3, #0
  13f39c:	e2821005 	add	r1, r2, #5
  13f3a0:	01a03002 	moveq	r3, r2
  13f3a4:	11a03001 	movne	r3, r1
  13f3a8:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f3ac:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f3b0:	13a03001 	movne	r3, #1
  13f3b4:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f3b8:	eaffff0d 	b	13eff4 <printf_core+0xa14>
  13f3bc:	e3a03001 	mov	r3, #1
  13f3c0:	e2766000 	rsbs	r6, r6, #0
  13f3c4:	e58d3020 	str	r3, [sp, #32]
  13f3c8:	e59f3260 	ldr	r3, [pc, #608]	; 13f630 <printf_core+0x1050>
  13f3cc:	e2e77000 	rsc	r7, r7, #0
  13f3d0:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f3d4:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f3d8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f3dc:	eafffe75 	b	13edb8 <printf_core+0x7d8>
  13f3e0:	e1a0300b 	mov	r3, fp
  13f3e4:	e1a02009 	mov	r2, r9
  13f3e8:	e3a01020 	mov	r1, #32
  13f3ec:	e59d0004 	ldr	r0, [sp, #4]
  13f3f0:	ebfffc4f 	bl	13e534 <pad.part.0>
  13f3f4:	e3a03000 	mov	r3, #0
  13f3f8:	e58d3010 	str	r3, [sp, #16]
  13f3fc:	eaffff94 	b	13f254 <printf_core+0xc74>
  13f400:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f404:	e1a01007 	mov	r1, r7
  13f408:	eb000f2f 	bl	1430cc <frexpl>
  13f40c:	e1a02000 	mov	r2, r0
  13f410:	e1a03001 	mov	r3, r1
  13f414:	eb0013f6 	bl	1443f4 <__adddf3>
  13f418:	e3a03000 	mov	r3, #0
  13f41c:	e3a02000 	mov	r2, #0
  13f420:	e58d001c 	str	r0, [sp, #28]
  13f424:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f428:	eb00162c 	bl	144ce0 <__aeabi_dcmpeq>
  13f42c:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f430:	e3500000 	cmp	r0, #0
  13f434:	02433001 	subeq	r3, r3, #1
  13f438:	158d3020 	strne	r3, [sp, #32]
  13f43c:	058d3020 	streq	r3, [sp, #32]
  13f440:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f444:	e59d3010 	ldr	r3, [sp, #16]
  13f448:	e3833020 	orr	r3, r3, #32
  13f44c:	e3530061 	cmp	r3, #97	; 0x61
  13f450:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f454:	0a000267 	beq	13fdf8 <printf_core+0x1818>
  13f458:	e3550000 	cmp	r5, #0
  13f45c:	ba000460 	blt	1405e4 <printf_core+0x2004>
  13f460:	13a03001 	movne	r3, #1
  13f464:	03a03000 	moveq	r3, #0
  13f468:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f46c:	e59d701c 	ldr	r7, [sp, #28]
  13f470:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f474:	e1a00007 	mov	r0, r7
  13f478:	e1a01006 	mov	r1, r6
  13f47c:	e3a02000 	mov	r2, #0
  13f480:	e3a03000 	mov	r3, #0
  13f484:	eb001615 	bl	144ce0 <__aeabi_dcmpeq>
  13f488:	e3500000 	cmp	r0, #0
  13f48c:	1a00000a 	bne	13f4bc <printf_core+0xedc>
  13f490:	e59f31c0 	ldr	r3, [pc, #448]	; 13f658 <printf_core+0x1078>
  13f494:	e1a00007 	mov	r0, r7
  13f498:	e1a01006 	mov	r1, r6
  13f49c:	e3a02000 	mov	r2, #0
  13f4a0:	eb0014c0 	bl	1447a8 <__aeabi_dmul>
  13f4a4:	e59d3020 	ldr	r3, [sp, #32]
  13f4a8:	e58d001c 	str	r0, [sp, #28]
  13f4ac:	e243301c 	sub	r3, r3, #28
  13f4b0:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f4b4:	e58d3020 	str	r3, [sp, #32]
  13f4b8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f4bc:	e59d3020 	ldr	r3, [sp, #32]
  13f4c0:	e59d601c 	ldr	r6, [sp, #28]
  13f4c4:	e3530000 	cmp	r3, #0
  13f4c8:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f4cc:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f4d0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f4d4:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f4d8:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f4dc:	e1a01007 	mov	r1, r7
  13f4e0:	e1a00006 	mov	r0, r6
  13f4e4:	eb00162d 	bl	144da0 <__aeabi_d2uiz>
  13f4e8:	e48b0004 	str	r0, [fp], #4
  13f4ec:	eb00146b 	bl	1446a0 <__aeabi_ui2d>
  13f4f0:	e1a02000 	mov	r2, r0
  13f4f4:	e1a03001 	mov	r3, r1
  13f4f8:	e1a00006 	mov	r0, r6
  13f4fc:	e1a01007 	mov	r1, r7
  13f500:	eb0013ba 	bl	1443f0 <__aeabi_dsub>
  13f504:	e3a02000 	mov	r2, #0
  13f508:	e59f314c 	ldr	r3, [pc, #332]	; 13f65c <printf_core+0x107c>
  13f50c:	eb0014a5 	bl	1447a8 <__aeabi_dmul>
  13f510:	e3a02000 	mov	r2, #0
  13f514:	e3a03000 	mov	r3, #0
  13f518:	e1a07001 	mov	r7, r1
  13f51c:	e1a06000 	mov	r6, r0
  13f520:	eb0015ee 	bl	144ce0 <__aeabi_dcmpeq>
  13f524:	e3500000 	cmp	r0, #0
  13f528:	0affffeb 	beq	13f4dc <printf_core+0xefc>
  13f52c:	e59d2020 	ldr	r2, [sp, #32]
  13f530:	e1a0300b 	mov	r3, fp
  13f534:	e3520000 	cmp	r2, #0
  13f538:	e58db01c 	str	fp, [sp, #28]
  13f53c:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f540:	da000067 	ble	13f6e4 <printf_core+0x1104>
  13f544:	e58da048 	str	sl, [sp, #72]	; 0x48
  13f548:	e1a0a003 	mov	sl, r3
  13f54c:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13f550:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13f554:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13f558:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13f55c:	e28d9050 	add	r9, sp, #80	; 0x50
  13f560:	e8990300 	ldm	r9, {r8, r9}
  13f564:	e59d2020 	ldr	r2, [sp, #32]
  13f568:	e24a3004 	sub	r3, sl, #4
  13f56c:	e352001d 	cmp	r2, #29
  13f570:	b1a05002 	movlt	r5, r2
  13f574:	a3a0501d 	movge	r5, #29
  13f578:	e153000b 	cmp	r3, fp
  13f57c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13f580:	3a00001e 	bcc	13f600 <printf_core+0x1020>
  13f584:	e1a04003 	mov	r4, r3
  13f588:	e2453020 	sub	r3, r5, #32
  13f58c:	e58da040 	str	sl, [sp, #64]	; 0x40
  13f590:	e3a00000 	mov	r0, #0
  13f594:	e1a0a003 	mov	sl, r3
  13f598:	e2652020 	rsb	r2, r5, #32
  13f59c:	e58d201c 	str	r2, [sp, #28]
  13f5a0:	e5941000 	ldr	r1, [r4]
  13f5a4:	e59dc01c 	ldr	ip, [sp, #28]
  13f5a8:	e1a09a11 	lsl	r9, r1, sl
  13f5ac:	e1a08511 	lsl	r8, r1, r5
  13f5b0:	e0986000 	adds	r6, r8, r0
  13f5b4:	e1899c31 	orr	r9, r9, r1, lsr ip
  13f5b8:	e2a97000 	adc	r7, r9, #0
  13f5bc:	e28f305c 	add	r3, pc, #92	; 0x5c
  13f5c0:	e893000c 	ldm	r3, {r2, r3}
  13f5c4:	e1a00006 	mov	r0, r6
  13f5c8:	e1a01007 	mov	r1, r7
  13f5cc:	eb00163d 	bl	144ec8 <__aeabi_uldivmod>
  13f5d0:	e1a00006 	mov	r0, r6
  13f5d4:	e4042004 	str	r2, [r4], #-4
  13f5d8:	e1a01007 	mov	r1, r7
  13f5dc:	e28f303c 	add	r3, pc, #60	; 0x3c
  13f5e0:	e893000c 	ldm	r3, {r2, r3}
  13f5e4:	eb001637 	bl	144ec8 <__aeabi_uldivmod>
  13f5e8:	e154000b 	cmp	r4, fp
  13f5ec:	2affffeb 	bcs	13f5a0 <printf_core+0xfc0>
  13f5f0:	e3500000 	cmp	r0, #0
  13f5f4:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13f5f8:	150b0004 	strne	r0, [fp, #-4]
  13f5fc:	124bb004 	subne	fp, fp, #4
  13f600:	e15b000a 	cmp	fp, sl
  13f604:	2a000028 	bcs	13f6ac <printf_core+0x10cc>
  13f608:	e51a3004 	ldr	r3, [sl, #-4]
  13f60c:	e3530000 	cmp	r3, #0
  13f610:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13f614:	0a000021 	beq	13f6a0 <printf_core+0x10c0>
  13f618:	ea000023 	b	13f6ac <printf_core+0x10cc>
  13f61c:	e1a00000 	nop			; (mov r0, r0)
  13f620:	3b9aca00 	.word	0x3b9aca00
  13f624:	00000000 	.word	0x00000000
  13f628:	00012889 	.word	0x00012889
  13f62c:	0ccccccc 	.word	0x0ccccccc
  13f630:	0014cad4 	.word	0x0014cad4
  13f634:	0014cb10 	.word	0x0014cb10
  13f638:	0014cae8 	.word	0x0014cae8
  13f63c:	7fefffff 	.word	0x7fefffff
  13f640:	0014cb00 	.word	0x0014cb00
  13f644:	0014cafc 	.word	0x0014cafc
  13f648:	0014cb08 	.word	0x0014cb08
  13f64c:	0014cb04 	.word	0x0014cb04
  13f650:	0014cae0 	.word	0x0014cae0
  13f654:	0014cae9 	.word	0x0014cae9
  13f658:	41b00000 	.word	0x41b00000
  13f65c:	41cdcd65 	.word	0x41cdcd65
  13f660:	38e38e39 	.word	0x38e38e39
  13f664:	3b9aca00 	.word	0x3b9aca00
  13f668:	0014cad5 	.word	0x0014cad5
  13f66c:	0014caeb 	.word	0x0014caeb
  13f670:	0014cce0 	.word	0x0014cce0
  13f674:	cccccccd 	.word	0xcccccccd
  13f678:	0014cb0c 	.word	0x0014cb0c
  13f67c:	3b9ac9ff 	.word	0x3b9ac9ff
  13f680:	40300000 	.word	0x40300000
  13f684:	3fe00000 	.word	0x3fe00000
  13f688:	43400000 	.word	0x43400000
  13f68c:	3ff00000 	.word	0x3ff00000
  13f690:	3ff80000 	.word	0x3ff80000
  13f694:	e5332004 	ldr	r2, [r3, #-4]!
  13f698:	e3520000 	cmp	r2, #0
  13f69c:	1a000002 	bne	13f6ac <printf_core+0x10cc>
  13f6a0:	e153000b 	cmp	r3, fp
  13f6a4:	e1a0a003 	mov	sl, r3
  13f6a8:	8afffff9 	bhi	13f694 <printf_core+0x10b4>
  13f6ac:	e59d3020 	ldr	r3, [sp, #32]
  13f6b0:	e0433005 	sub	r3, r3, r5
  13f6b4:	e3530000 	cmp	r3, #0
  13f6b8:	e58d3020 	str	r3, [sp, #32]
  13f6bc:	caffffa8 	bgt	13f564 <printf_core+0xf84>
  13f6c0:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f6c4:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f6c8:	e58da01c 	str	sl, [sp, #28]
  13f6cc:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f6d0:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f6d4:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f6d8:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f6dc:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f6e0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f6e4:	e59dc020 	ldr	ip, [sp, #32]
  13f6e8:	e35c0000 	cmp	ip, #0
  13f6ec:	0a000037 	beq	13f7d0 <printf_core+0x11f0>
  13f6f0:	e58da038 	str	sl, [sp, #56]	; 0x38
  13f6f4:	e1a0a00c 	mov	sl, ip
  13f6f8:	e51f10a0 	ldr	r1, [pc, #-160]	; 13f660 <printf_core+0x1080>
  13f6fc:	e2850019 	add	r0, r5, #25
  13f700:	e0832190 	umull	r2, r3, r0, r1
  13f704:	e1a030a3 	lsr	r3, r3, #1
  13f708:	e2836001 	add	r6, r3, #1
  13f70c:	e1a03106 	lsl	r3, r6, #2
  13f710:	e51f70b4 	ldr	r7, [pc, #-180]	; 13f664 <printf_core+0x1084>
  13f714:	e59d001c 	ldr	r0, [sp, #28]
  13f718:	e58d3020 	str	r3, [sp, #32]
  13f71c:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13f720:	e37a0009 	cmn	sl, #9
  13f724:	a26ac000 	rsbge	ip, sl, #0
  13f728:	b28aa009 	addlt	sl, sl, #9
  13f72c:	b3a0c009 	movlt	ip, #9
  13f730:	a3a0a000 	movge	sl, #0
  13f734:	e150000b 	cmp	r0, fp
  13f738:	e59b1000 	ldr	r1, [fp]
  13f73c:	9a000191 	bls	13fd88 <printf_core+0x17a8>
  13f740:	e3a0e001 	mov	lr, #1
  13f744:	e1a0ec1e 	lsl	lr, lr, ip
  13f748:	e1a0200b 	mov	r2, fp
  13f74c:	e3a03000 	mov	r3, #0
  13f750:	e24ee001 	sub	lr, lr, #1
  13f754:	e1a09c57 	asr	r9, r7, ip
  13f758:	ea000000 	b	13f760 <printf_core+0x1180>
  13f75c:	e5921000 	ldr	r1, [r2]
  13f760:	e0833c31 	add	r3, r3, r1, lsr ip
  13f764:	e4823004 	str	r3, [r2], #4
  13f768:	e00e3001 	and	r3, lr, r1
  13f76c:	e0010399 	mul	r1, r9, r3
  13f770:	e1520000 	cmp	r2, r0
  13f774:	e1a03001 	mov	r3, r1
  13f778:	3afffff7 	bcc	13f75c <printf_core+0x117c>
  13f77c:	e59b2000 	ldr	r2, [fp]
  13f780:	e3520000 	cmp	r2, #0
  13f784:	028bb004 	addeq	fp, fp, #4
  13f788:	e3510000 	cmp	r1, #0
  13f78c:	15801000 	strne	r1, [r0]
  13f790:	12800004 	addne	r0, r0, #4
  13f794:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f798:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f79c:	e3520066 	cmp	r2, #102	; 0x66
  13f7a0:	11a0300b 	movne	r3, fp
  13f7a4:	e0402003 	sub	r2, r0, r3
  13f7a8:	e1560142 	cmp	r6, r2, asr #2
  13f7ac:	b59d2020 	ldrlt	r2, [sp, #32]
  13f7b0:	b0830002 	addlt	r0, r3, r2
  13f7b4:	e35a0000 	cmp	sl, #0
  13f7b8:	1affffd8 	bne	13f720 <printf_core+0x1140>
  13f7bc:	e1a0300a 	mov	r3, sl
  13f7c0:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13f7c4:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13f7c8:	e58d001c 	str	r0, [sp, #28]
  13f7cc:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f7d0:	e59d301c 	ldr	r3, [sp, #28]
  13f7d4:	e153000b 	cmp	r3, fp
  13f7d8:	91a03005 	movls	r3, r5
  13f7dc:	93a06000 	movls	r6, #0
  13f7e0:	9a000013 	bls	13f834 <printf_core+0x1254>
  13f7e4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f7e8:	e59b1000 	ldr	r1, [fp]
  13f7ec:	e043600b 	sub	r6, r3, fp
  13f7f0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13f7f4:	e1a06146 	asr	r6, r6, #2
  13f7f8:	e2530066 	subs	r0, r3, #102	; 0x66
  13f7fc:	13a00001 	movne	r0, #1
  13f800:	e3510009 	cmp	r1, #9
  13f804:	e0866186 	add	r6, r6, r6, lsl #3
  13f808:	83a0200a 	movhi	r2, #10
  13f80c:	81a03000 	movhi	r3, r0
  13f810:	9a000005 	bls	13f82c <printf_core+0x124c>
  13f814:	e0822102 	add	r2, r2, r2, lsl #2
  13f818:	e1a02082 	lsl	r2, r2, #1
  13f81c:	e1510002 	cmp	r1, r2
  13f820:	e2866001 	add	r6, r6, #1
  13f824:	2afffffa 	bcs	13f814 <printf_core+0x1234>
  13f828:	e1a00003 	mov	r0, r3
  13f82c:	e0030096 	mul	r3, r6, r0
  13f830:	e0453003 	sub	r3, r5, r3
  13f834:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f838:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13f83c:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13f840:	e3520067 	cmp	r2, #103	; 0x67
  13f844:	13a01000 	movne	r1, #0
  13f848:	02011001 	andeq	r1, r1, #1
  13f84c:	e59d201c 	ldr	r2, [sp, #28]
  13f850:	e0433001 	sub	r3, r3, r1
  13f854:	e042200c 	sub	r2, r2, ip
  13f858:	e1a02142 	asr	r2, r2, #2
  13f85c:	e2422001 	sub	r2, r2, #1
  13f860:	e0822182 	add	r2, r2, r2, lsl #3
  13f864:	e1530002 	cmp	r3, r2
  13f868:	aa000057 	bge	13f9cc <printf_core+0x13ec>
  13f86c:	e51f2214 	ldr	r2, [pc, #-532]	; 13f660 <printf_core+0x1080>
  13f870:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13f874:	e0c10293 	smull	r0, r1, r3, r2
  13f878:	e1a07fc3 	asr	r7, r3, #31
  13f87c:	e06770c1 	rsb	r7, r7, r1, asr #1
  13f880:	e0872187 	add	r2, r7, r7, lsl #3
  13f884:	e0433002 	sub	r3, r3, r2
  13f888:	e2833001 	add	r3, r3, #1
  13f88c:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13f890:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13f894:	e3530009 	cmp	r3, #9
  13f898:	e08c7107 	add	r7, ip, r7, lsl #2
  13f89c:	0a00036b 	beq	140650 <printf_core+0x2070>
  13f8a0:	e3a0200a 	mov	r2, #10
  13f8a4:	e2833001 	add	r3, r3, #1
  13f8a8:	e0822102 	add	r2, r2, r2, lsl #2
  13f8ac:	e3530009 	cmp	r3, #9
  13f8b0:	e1a02082 	lsl	r2, r2, #1
  13f8b4:	1afffffa 	bne	13f8a4 <printf_core+0x12c4>
  13f8b8:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13f8bc:	e5973000 	ldr	r3, [r7]
  13f8c0:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13f8c4:	e1a00003 	mov	r0, r3
  13f8c8:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13f8cc:	ebffe39f 	bl	138750 <__aeabi_uidivmod>
  13f8d0:	e2513000 	subs	r3, r1, #0
  13f8d4:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f8d8:	1a000003 	bne	13f8ec <printf_core+0x130c>
  13f8dc:	e59d301c 	ldr	r3, [sp, #28]
  13f8e0:	e287c004 	add	ip, r7, #4
  13f8e4:	e153000c 	cmp	r3, ip
  13f8e8:	0a000033 	beq	13f9bc <printf_core+0x13dc>
  13f8ec:	e3100001 	tst	r0, #1
  13f8f0:	1a000336 	bne	1405d0 <printf_core+0x1ff0>
  13f8f4:	e51f3298 	ldr	r3, [pc, #-664]	; 13f664 <printf_core+0x1084>
  13f8f8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13f8fc:	e157000b 	cmp	r7, fp
  13f900:	e0422003 	sub	r2, r2, r3
  13f904:	e16f2f12 	clz	r2, r2
  13f908:	e1a022a2 	lsr	r2, r2, #5
  13f90c:	93a02000 	movls	r2, #0
  13f910:	e3520000 	cmp	r2, #0
  13f914:	0a000329 	beq	1405c0 <printf_core+0x1fe0>
  13f918:	e5173004 	ldr	r3, [r7, #-4]
  13f91c:	e51f229c 	ldr	r2, [pc, #-668]	; 13f688 <printf_core+0x10a8>
  13f920:	e2033001 	and	r3, r3, #1
  13f924:	e58d2020 	str	r2, [sp, #32]
  13f928:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13f92c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13f930:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13f934:	e15300c2 	cmp	r3, r2, asr #1
  13f938:	3a00031d 	bcc	1405b4 <printf_core+0x1fd4>
  13f93c:	13a0e000 	movne	lr, #0
  13f940:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f690 <printf_core+0x10b0>
  13f944:	0a00032a 	beq	1405f4 <printf_core+0x2014>
  13f948:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f94c:	e3530000 	cmp	r3, #0
  13f950:	0a000006 	beq	13f970 <printf_core+0x1390>
  13f954:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13f958:	e5d33000 	ldrb	r3, [r3]
  13f95c:	e353002d 	cmp	r3, #45	; 0x2d
  13f960:	059d3020 	ldreq	r3, [sp, #32]
  13f964:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13f968:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13f96c:	058d3020 	streq	r3, [sp, #32]
  13f970:	e1a0200e 	mov	r2, lr
  13f974:	e1a0300c 	mov	r3, ip
  13f978:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13f97c:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13f980:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13f984:	e04cc00e 	sub	ip, ip, lr
  13f988:	e59d1020 	ldr	r1, [sp, #32]
  13f98c:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13f990:	eb001297 	bl	1443f4 <__adddf3>
  13f994:	e1a02000 	mov	r2, r0
  13f998:	e1a03001 	mov	r3, r1
  13f99c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13f9a0:	e59d1020 	ldr	r1, [sp, #32]
  13f9a4:	eb0014cd 	bl	144ce0 <__aeabi_dcmpeq>
  13f9a8:	e2502000 	subs	r2, r0, #0
  13f9ac:	0a0002ab 	beq	140460 <printf_core+0x1e80>
  13f9b0:	e1a0c007 	mov	ip, r7
  13f9b4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13f9b8:	e48c3004 	str	r3, [ip], #4
  13f9bc:	e59d301c 	ldr	r3, [sp, #28]
  13f9c0:	e153000c 	cmp	r3, ip
  13f9c4:	21a0300c 	movcs	r3, ip
  13f9c8:	e58d301c 	str	r3, [sp, #28]
  13f9cc:	e59d301c 	ldr	r3, [sp, #28]
  13f9d0:	e15b0003 	cmp	fp, r3
  13f9d4:	2a00000c 	bcs	13fa0c <printf_core+0x142c>
  13f9d8:	e5133004 	ldr	r3, [r3, #-4]
  13f9dc:	e3530000 	cmp	r3, #0
  13f9e0:	059d301c 	ldreq	r3, [sp, #28]
  13f9e4:	02433004 	subeq	r3, r3, #4
  13f9e8:	0a000003 	beq	13f9fc <printf_core+0x141c>
  13f9ec:	ea000006 	b	13fa0c <printf_core+0x142c>
  13f9f0:	e5332004 	ldr	r2, [r3, #-4]!
  13f9f4:	e3520000 	cmp	r2, #0
  13f9f8:	1a000002 	bne	13fa08 <printf_core+0x1428>
  13f9fc:	e153000b 	cmp	r3, fp
  13fa00:	e1a01003 	mov	r1, r3
  13fa04:	8afffff9 	bhi	13f9f0 <printf_core+0x1410>
  13fa08:	e58d101c 	str	r1, [sp, #28]
  13fa0c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fa10:	e3530067 	cmp	r3, #103	; 0x67
  13fa14:	0a000192 	beq	140064 <printf_core+0x1a84>
  13fa18:	e3550000 	cmp	r5, #0
  13fa1c:	1a00018b 	bne	140050 <printf_core+0x1a70>
  13fa20:	e3a02001 	mov	r2, #1
  13fa24:	e1a031a8 	lsr	r3, r8, #3
  13fa28:	e0033002 	and	r3, r3, r2
  13fa2c:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13fa30:	e59d1010 	ldr	r1, [sp, #16]
  13fa34:	e0833002 	add	r3, r3, r2
  13fa38:	e381a020 	orr	sl, r1, #32
  13fa3c:	e35a0066 	cmp	sl, #102	; 0x66
  13fa40:	e04ee003 	sub	lr, lr, r3
  13fa44:	0a000280 	beq	14044c <printf_core+0x1e6c>
  13fa48:	e026cfc6 	eor	ip, r6, r6, asr #31
  13fa4c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fa50:	e3560000 	cmp	r6, #0
  13fa54:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13fa58:	e1a02007 	mov	r2, r7
  13fa5c:	0a00000a 	beq	13fa8c <printf_core+0x14ac>
  13fa60:	e58d3020 	str	r3, [sp, #32]
  13fa64:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13f674 <printf_core+0x1094>
  13fa68:	e081039c 	umull	r0, r1, ip, r3
  13fa6c:	e1a001a1 	lsr	r0, r1, #3
  13fa70:	e0801100 	add	r1, r0, r0, lsl #2
  13fa74:	e04c1081 	sub	r1, ip, r1, lsl #1
  13fa78:	e2811030 	add	r1, r1, #48	; 0x30
  13fa7c:	e250c000 	subs	ip, r0, #0
  13fa80:	e5621001 	strb	r1, [r2, #-1]!
  13fa84:	1afffff6 	bne	13fa64 <printf_core+0x1484>
  13fa88:	e59d3020 	ldr	r3, [sp, #32]
  13fa8c:	e0471002 	sub	r1, r7, r2
  13fa90:	e3510001 	cmp	r1, #1
  13fa94:	ca000004 	bgt	13faac <printf_core+0x14cc>
  13fa98:	e3a01030 	mov	r1, #48	; 0x30
  13fa9c:	e5621001 	strb	r1, [r2, #-1]!
  13faa0:	e0470002 	sub	r0, r7, r2
  13faa4:	e3500001 	cmp	r0, #1
  13faa8:	dafffffb 	ble	13fa9c <printf_core+0x14bc>
  13faac:	e3560000 	cmp	r6, #0
  13fab0:	a3a0102b 	movge	r1, #43	; 0x2b
  13fab4:	b3a0102d 	movlt	r1, #45	; 0x2d
  13fab8:	e2420002 	sub	r0, r2, #2
  13fabc:	e0477000 	sub	r7, r7, r0
  13fac0:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13fac4:	e59d0010 	ldr	r0, [sp, #16]
  13fac8:	e157000e 	cmp	r7, lr
  13facc:	e5420002 	strb	r0, [r2, #-2]
  13fad0:	e5421001 	strb	r1, [r2, #-1]
  13fad4:	cafffc6e 	bgt	13ec94 <printf_core+0x6b4>
  13fad8:	e0833007 	add	r3, r3, r7
  13fadc:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13fae0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fae4:	e0422001 	sub	r2, r2, r1
  13fae8:	e1520003 	cmp	r2, r3
  13faec:	bafffc68 	blt	13ec94 <printf_core+0x6b4>
  13faf0:	e0813003 	add	r3, r1, r3
  13faf4:	e1590003 	cmp	r9, r3
  13faf8:	e58d3010 	str	r3, [sp, #16]
  13fafc:	c3a03000 	movgt	r3, #0
  13fb00:	d3a03001 	movle	r3, #1
  13fb04:	e3180a12 	tst	r8, #73728	; 0x12000
  13fb08:	e58d3020 	str	r3, [sp, #32]
  13fb0c:	13a03001 	movne	r3, #1
  13fb10:	e3530000 	cmp	r3, #0
  13fb14:	0a000246 	beq	140434 <printf_core+0x1e54>
  13fb18:	e59d3004 	ldr	r3, [sp, #4]
  13fb1c:	e5933000 	ldr	r3, [r3]
  13fb20:	e3130020 	tst	r3, #32
  13fb24:	0a00023d 	beq	140420 <printf_core+0x1e40>
  13fb28:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fb2c:	e3130a12 	tst	r3, #73728	; 0x12000
  13fb30:	e59d3020 	ldr	r3, [sp, #32]
  13fb34:	13a03001 	movne	r3, #1
  13fb38:	e3530000 	cmp	r3, #0
  13fb3c:	0a000231 	beq	140408 <printf_core+0x1e28>
  13fb40:	e35a0066 	cmp	sl, #102	; 0x66
  13fb44:	0a00018f 	beq	140188 <printf_core+0x1ba8>
  13fb48:	e59d301c 	ldr	r3, [sp, #28]
  13fb4c:	e15b0003 	cmp	fp, r3
  13fb50:	228b3004 	addcs	r3, fp, #4
  13fb54:	258d301c 	strcs	r3, [sp, #28]
  13fb58:	e59d301c 	ldr	r3, [sp, #28]
  13fb5c:	e15b0003 	cmp	fp, r3
  13fb60:	23a03000 	movcs	r3, #0
  13fb64:	33a03001 	movcc	r3, #1
  13fb68:	e3550000 	cmp	r5, #0
  13fb6c:	b3a03000 	movlt	r3, #0
  13fb70:	e3530000 	cmp	r3, #0
  13fb74:	0a000036 	beq	13fc54 <printf_core+0x1674>
  13fb78:	e1a0600b 	mov	r6, fp
  13fb7c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fb80:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13fb84:	e59d9004 	ldr	r9, [sp, #4]
  13fb88:	e287a009 	add	sl, r7, #9
  13fb8c:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13fb90:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13fb94:	e5962000 	ldr	r2, [r6]
  13fb98:	e599e000 	ldr	lr, [r9]
  13fb9c:	e3520000 	cmp	r2, #0
  13fba0:	1287c009 	addne	ip, r7, #9
  13fba4:	0a000046 	beq	13fcc4 <printf_core+0x16e4>
  13fba8:	e51f353c 	ldr	r3, [pc, #-1340]	; 13f674 <printf_core+0x1094>
  13fbac:	e0810392 	umull	r0, r1, r2, r3
  13fbb0:	e1a031a1 	lsr	r3, r1, #3
  13fbb4:	e0831103 	add	r1, r3, r3, lsl #2
  13fbb8:	e0422081 	sub	r2, r2, r1, lsl #1
  13fbbc:	e2821030 	add	r1, r2, #48	; 0x30
  13fbc0:	e2532000 	subs	r2, r3, #0
  13fbc4:	e56c1001 	strb	r1, [ip, #-1]!
  13fbc8:	1afffff6 	bne	13fba8 <printf_core+0x15c8>
  13fbcc:	e2872009 	add	r2, r7, #9
  13fbd0:	e15c0002 	cmp	ip, r2
  13fbd4:	0a00003a 	beq	13fcc4 <printf_core+0x16e4>
  13fbd8:	e15b0006 	cmp	fp, r6
  13fbdc:	e20ee020 	and	lr, lr, #32
  13fbe0:	0a00003d 	beq	13fcdc <printf_core+0x16fc>
  13fbe4:	e15c0007 	cmp	ip, r7
  13fbe8:	9a000003 	bls	13fbfc <printf_core+0x161c>
  13fbec:	e3a02030 	mov	r2, #48	; 0x30
  13fbf0:	e56c2001 	strb	r2, [ip, #-1]!
  13fbf4:	e15c0007 	cmp	ip, r7
  13fbf8:	8afffffc 	bhi	13fbf0 <printf_core+0x1610>
  13fbfc:	e04a400c 	sub	r4, sl, ip
  13fc00:	e35e0000 	cmp	lr, #0
  13fc04:	1a000005 	bne	13fc20 <printf_core+0x1640>
  13fc08:	e1550004 	cmp	r5, r4
  13fc0c:	e1a0000c 	mov	r0, ip
  13fc10:	b1a01005 	movlt	r1, r5
  13fc14:	a1a01004 	movge	r1, r4
  13fc18:	e1a02009 	mov	r2, r9
  13fc1c:	eb000f2d 	bl	1438d8 <__fwritex>
  13fc20:	e59d201c 	ldr	r2, [sp, #28]
  13fc24:	e2866004 	add	r6, r6, #4
  13fc28:	e1560002 	cmp	r6, r2
  13fc2c:	e0455004 	sub	r5, r5, r4
  13fc30:	23a02000 	movcs	r2, #0
  13fc34:	33a02001 	movcc	r2, #1
  13fc38:	e3550000 	cmp	r5, #0
  13fc3c:	b3a02000 	movlt	r2, #0
  13fc40:	e3520000 	cmp	r2, #0
  13fc44:	1affffd2 	bne	13fb94 <printf_core+0x15b4>
  13fc48:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13fc4c:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13fc50:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13fc54:	e2852012 	add	r2, r5, #18
  13fc58:	e3520012 	cmp	r2, #18
  13fc5c:	da000003 	ble	13fc70 <printf_core+0x1690>
  13fc60:	e3a03012 	mov	r3, #18
  13fc64:	e3a01030 	mov	r1, #48	; 0x30
  13fc68:	e59d0004 	ldr	r0, [sp, #4]
  13fc6c:	ebfffa30 	bl	13e534 <pad.part.0>
  13fc70:	e59d3004 	ldr	r3, [sp, #4]
  13fc74:	e5933000 	ldr	r3, [r3]
  13fc78:	e3130020 	tst	r3, #32
  13fc7c:	1a000005 	bne	13fc98 <printf_core+0x16b8>
  13fc80:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13fc84:	e28d7090 	add	r7, sp, #144	; 0x90
  13fc88:	e0471003 	sub	r1, r7, r3
  13fc8c:	e59d2004 	ldr	r2, [sp, #4]
  13fc90:	e1a00003 	mov	r0, r3
  13fc94:	eb000f0f 	bl	1438d8 <__fwritex>
  13fc98:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13fc9c:	e3130a12 	tst	r3, #73728	; 0x12000
  13fca0:	e59d3020 	ldr	r3, [sp, #32]
  13fca4:	13a03001 	movne	r3, #1
  13fca8:	e3530000 	cmp	r3, #0
  13fcac:	0a00023a 	beq	14059c <printf_core+0x1fbc>
  13fcb0:	e59d3010 	ldr	r3, [sp, #16]
  13fcb4:	e1590003 	cmp	r9, r3
  13fcb8:	a1a0a009 	movge	sl, r9
  13fcbc:	b1a0a003 	movlt	sl, r3
  13fcc0:	eafffbf0 	b	13ec88 <printf_core+0x6a8>
  13fcc4:	e3a02030 	mov	r2, #48	; 0x30
  13fcc8:	e15b0006 	cmp	fp, r6
  13fccc:	e28dc098 	add	ip, sp, #152	; 0x98
  13fcd0:	e20ee020 	and	lr, lr, #32
  13fcd4:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13fcd8:	1affffc3 	bne	13fbec <printf_core+0x160c>
  13fcdc:	e35e0000 	cmp	lr, #0
  13fce0:	e28c8001 	add	r8, ip, #1
  13fce4:	0a00002a 	beq	13fd94 <printf_core+0x17b4>
  13fce8:	e3550000 	cmp	r5, #0
  13fcec:	e04a4008 	sub	r4, sl, r8
  13fcf0:	1affffca 	bne	13fc20 <printf_core+0x1640>
  13fcf4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fcf8:	e3130008 	tst	r3, #8
  13fcfc:	1a00002d 	bne	13fdb8 <printf_core+0x17d8>
  13fd00:	e1a0c008 	mov	ip, r8
  13fd04:	eaffffbd 	b	13fc00 <printf_core+0x1620>
  13fd08:	e1a0300b 	mov	r3, fp
  13fd0c:	e1a02009 	mov	r2, r9
  13fd10:	e3a01020 	mov	r1, #32
  13fd14:	e59d0004 	ldr	r0, [sp, #4]
  13fd18:	ebfffa05 	bl	13e534 <pad.part.0>
  13fd1c:	eafffd7b 	b	13f310 <printf_core+0xd30>
  13fd20:	e3a03001 	mov	r3, #1
  13fd24:	e58d3020 	str	r3, [sp, #32]
  13fd28:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13f668 <printf_core+0x1088>
  13fd2c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13fd30:	eafffc20 	b	13edb8 <printf_core+0x7d8>
  13fd34:	e3a03000 	mov	r3, #0
  13fd38:	e58d3000 	str	r3, [sp]
  13fd3c:	eafffb44 	b	13ea54 <printf_core+0x474>
  13fd40:	e59d5004 	ldr	r5, [sp, #4]
  13fd44:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fd48:	e1a02005 	mov	r2, r5
  13fd4c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  13fd50:	eb000ee0 	bl	1438d8 <__fwritex>
  13fd54:	e5953000 	ldr	r3, [r5]
  13fd58:	e1a02005 	mov	r2, r5
  13fd5c:	e3130020 	tst	r3, #32
  13fd60:	1afffcc9 	bne	13f08c <printf_core+0xaac>
  13fd64:	e1a00006 	mov	r0, r6
  13fd68:	e3a01003 	mov	r1, #3
  13fd6c:	eb000ed9 	bl	1438d8 <__fwritex>
  13fd70:	eafffcc5 	b	13f08c <printf_core+0xaac>
  13fd74:	e3a03001 	mov	r3, #1
  13fd78:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13fd7c:	e51f3718 	ldr	r3, [pc, #-1816]	; 13f66c <printf_core+0x108c>
  13fd80:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13fd84:	eafffc9a 	b	13eff4 <printf_core+0xa14>
  13fd88:	e3510000 	cmp	r1, #0
  13fd8c:	028bb004 	addeq	fp, fp, #4
  13fd90:	eafffe7f 	b	13f794 <printf_core+0x11b4>
  13fd94:	e1a0000c 	mov	r0, ip
  13fd98:	e1a02009 	mov	r2, r9
  13fd9c:	e3a01001 	mov	r1, #1
  13fda0:	eb000ecc 	bl	1438d8 <__fwritex>
  13fda4:	e599e000 	ldr	lr, [r9]
  13fda8:	e3550000 	cmp	r5, #0
  13fdac:	e20ee020 	and	lr, lr, #32
  13fdb0:	e04a4008 	sub	r4, sl, r8
  13fdb4:	0affffce 	beq	13fcf4 <printf_core+0x1714>
  13fdb8:	e35e0000 	cmp	lr, #0
  13fdbc:	1affff97 	bne	13fc20 <printf_core+0x1640>
  13fdc0:	e1a02009 	mov	r2, r9
  13fdc4:	e3a01001 	mov	r1, #1
  13fdc8:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f678 <printf_core+0x1098>
  13fdcc:	eb000ec1 	bl	1438d8 <__fwritex>
  13fdd0:	e599e000 	ldr	lr, [r9]
  13fdd4:	e1a0c008 	mov	ip, r8
  13fdd8:	e20ee020 	and	lr, lr, #32
  13fddc:	eaffff87 	b	13fc00 <printf_core+0x1620>
  13fde0:	e1a0300a 	mov	r3, sl
  13fde4:	e1a02009 	mov	r2, r9
  13fde8:	e3a01020 	mov	r1, #32
  13fdec:	e59d0004 	ldr	r0, [sp, #4]
  13fdf0:	ebfff9cf 	bl	13e534 <pad.part.0>
  13fdf4:	eafffca9 	b	13f0a0 <printf_core+0xac0>
  13fdf8:	e59d3010 	ldr	r3, [sp, #16]
  13fdfc:	e213b020 	ands	fp, r3, #32
  13fe00:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  13fe04:	12833009 	addne	r3, r3, #9
  13fe08:	158d3034 	strne	r3, [sp, #52]	; 0x34
  13fe0c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fe10:	e355000b 	cmp	r5, #11
  13fe14:	e2833002 	add	r3, r3, #2
  13fe18:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13fe1c:	9a0001b8 	bls	140504 <printf_core+0x1f24>
  13fe20:	e59d2020 	ldr	r2, [sp, #32]
  13fe24:	e28d7090 	add	r7, sp, #144	; 0x90
  13fe28:	e3520000 	cmp	r2, #0
  13fe2c:	e1a03002 	mov	r3, r2
  13fe30:	b2623000 	rsblt	r3, r2, #0
  13fe34:	e3520000 	cmp	r2, #0
  13fe38:	11a0c007 	movne	ip, r7
  13fe3c:	0a0001ac 	beq	1404f4 <printf_core+0x1f14>
  13fe40:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13f674 <printf_core+0x1094>
  13fe44:	e0810293 	umull	r0, r1, r3, r2
  13fe48:	e1a021a1 	lsr	r2, r1, #3
  13fe4c:	e0821102 	add	r1, r2, r2, lsl #2
  13fe50:	e0433081 	sub	r3, r3, r1, lsl #1
  13fe54:	e2831030 	add	r1, r3, #48	; 0x30
  13fe58:	e2523000 	subs	r3, r2, #0
  13fe5c:	e56c1001 	strb	r1, [ip, #-1]!
  13fe60:	1afffff6 	bne	13fe40 <printf_core+0x1860>
  13fe64:	e15c0007 	cmp	ip, r7
  13fe68:	0a0001a1 	beq	1404f4 <printf_core+0x1f14>
  13fe6c:	e59d3020 	ldr	r3, [sp, #32]
  13fe70:	e59d2010 	ldr	r2, [sp, #16]
  13fe74:	e3530000 	cmp	r3, #0
  13fe78:	a3a0302b 	movge	r3, #43	; 0x2b
  13fe7c:	b3a0302d 	movlt	r3, #45	; 0x2d
  13fe80:	e54c3001 	strb	r3, [ip, #-1]
  13fe84:	e24c3002 	sub	r3, ip, #2
  13fe88:	e282200f 	add	r2, r2, #15
  13fe8c:	e58d3010 	str	r3, [sp, #16]
  13fe90:	e2083008 	and	r3, r8, #8
  13fe94:	e58db020 	str	fp, [sp, #32]
  13fe98:	e58d8040 	str	r8, [sp, #64]	; 0x40
  13fe9c:	e58d4044 	str	r4, [sp, #68]	; 0x44
  13fea0:	e1a0b007 	mov	fp, r7
  13fea4:	e51f683c 	ldr	r6, [pc, #-2108]	; 13f670 <printf_core+0x1090>
  13fea8:	e54c2002 	strb	r2, [ip, #-2]
  13feac:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13feb0:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  13feb4:	e59d401c 	ldr	r4, [sp, #28]
  13feb8:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  13febc:	ea000007 	b	13fee0 <printf_core+0x1900>
  13fec0:	e1a0b00a 	mov	fp, sl
  13fec4:	e1a00004 	mov	r0, r4
  13fec8:	e1a01008 	mov	r1, r8
  13fecc:	e3a02000 	mov	r2, #0
  13fed0:	e3a03000 	mov	r3, #0
  13fed4:	eb001381 	bl	144ce0 <__aeabi_dcmpeq>
  13fed8:	e3500000 	cmp	r0, #0
  13fedc:	1a000026 	bne	13ff7c <printf_core+0x199c>
  13fee0:	e1a01008 	mov	r1, r8
  13fee4:	e1a00004 	mov	r0, r4
  13fee8:	eb001395 	bl	144d44 <__aeabi_d2iz>
  13feec:	e59d2020 	ldr	r2, [sp, #32]
  13fef0:	e7d63000 	ldrb	r3, [r6, r0]
  13fef4:	e28ba001 	add	sl, fp, #1
  13fef8:	e1823003 	orr	r3, r2, r3
  13fefc:	e5cb3000 	strb	r3, [fp]
  13ff00:	eb0011ef 	bl	1446c4 <__aeabi_i2d>
  13ff04:	e1a02000 	mov	r2, r0
  13ff08:	e1a03001 	mov	r3, r1
  13ff0c:	e1a00004 	mov	r0, r4
  13ff10:	e1a01008 	mov	r1, r8
  13ff14:	eb001135 	bl	1443f0 <__aeabi_dsub>
  13ff18:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f680 <printf_core+0x10a0>
  13ff1c:	e3a02000 	mov	r2, #0
  13ff20:	eb001220 	bl	1447a8 <__aeabi_dmul>
  13ff24:	e04a3007 	sub	r3, sl, r7
  13ff28:	e3530001 	cmp	r3, #1
  13ff2c:	e1a04000 	mov	r4, r0
  13ff30:	e1a08001 	mov	r8, r1
  13ff34:	1affffe1 	bne	13fec0 <printf_core+0x18e0>
  13ff38:	e3a03000 	mov	r3, #0
  13ff3c:	e3a02000 	mov	r2, #0
  13ff40:	eb001366 	bl	144ce0 <__aeabi_dcmpeq>
  13ff44:	e3500000 	cmp	r0, #0
  13ff48:	e3a03001 	mov	r3, #1
  13ff4c:	13a03000 	movne	r3, #0
  13ff50:	e3550000 	cmp	r5, #0
  13ff54:	c3833001 	orrgt	r3, r3, #1
  13ff58:	e3130001 	tst	r3, #1
  13ff5c:	1a000002 	bne	13ff6c <printf_core+0x198c>
  13ff60:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13ff64:	e3530000 	cmp	r3, #0
  13ff68:	0affffd4 	beq	13fec0 <printf_core+0x18e0>
  13ff6c:	e3a0302e 	mov	r3, #46	; 0x2e
  13ff70:	e28bb002 	add	fp, fp, #2
  13ff74:	e54b3001 	strb	r3, [fp, #-1]
  13ff78:	eaffffd1 	b	13fec4 <printf_core+0x18e4>
  13ff7c:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  13ff80:	e59d2010 	ldr	r2, [sp, #16]
  13ff84:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  13ff88:	e0476002 	sub	r6, r7, r2
  13ff8c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  13ff90:	e0433006 	sub	r3, r3, r6
  13ff94:	e0433002 	sub	r3, r3, r2
  13ff98:	e1550003 	cmp	r5, r3
  13ff9c:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  13ffa0:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  13ffa4:	cafffb3a 	bgt	13ec94 <printf_core+0x6b4>
  13ffa8:	e04b2007 	sub	r2, fp, r7
  13ffac:	e3550000 	cmp	r5, #0
  13ffb0:	e58d201c 	str	r2, [sp, #28]
  13ffb4:	0a000065 	beq	140150 <printf_core+0x1b70>
  13ffb8:	e2423001 	sub	r3, r2, #1
  13ffbc:	e1550003 	cmp	r5, r3
  13ffc0:	ba000062 	blt	140150 <printf_core+0x1b70>
  13ffc4:	e2853002 	add	r3, r5, #2
  13ffc8:	e0865003 	add	r5, r6, r3
  13ffcc:	e043a002 	sub	sl, r3, r2
  13ffd0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13ffd4:	e0835005 	add	r5, r3, r5
  13ffd8:	e1590005 	cmp	r9, r5
  13ffdc:	c3a0b000 	movgt	fp, #0
  13ffe0:	d3a0b001 	movle	fp, #1
  13ffe4:	e3180a12 	tst	r8, #73728	; 0x12000
  13ffe8:	01a0300b 	moveq	r3, fp
  13ffec:	13a03001 	movne	r3, #1
  13fff0:	e3530000 	cmp	r3, #0
  13fff4:	0a0001a8 	beq	14069c <printf_core+0x20bc>
  13fff8:	e59d3004 	ldr	r3, [sp, #4]
  13fffc:	e5933000 	ldr	r3, [r3]
  140000:	e3130020 	tst	r3, #32
  140004:	0a0000e4 	beq	14039c <printf_core+0x1dbc>
  140008:	e2283801 	eor	r3, r8, #65536	; 0x10000
  14000c:	e3130a12 	tst	r3, #73728	; 0x12000
  140010:	01a0300b 	moveq	r3, fp
  140014:	13a03001 	movne	r3, #1
  140018:	e3530000 	cmp	r3, #0
  14001c:	0a000198 	beq	140684 <printf_core+0x20a4>
  140020:	e35a0000 	cmp	sl, #0
  140024:	ca00012c 	bgt	1404dc <printf_core+0x1efc>
  140028:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  14002c:	e3130a12 	tst	r3, #73728	; 0x12000
  140030:	01a0300b 	moveq	r3, fp
  140034:	13a03001 	movne	r3, #1
  140038:	e3530000 	cmp	r3, #0
  14003c:	0a000186 	beq	14065c <printf_core+0x207c>
  140040:	e1590005 	cmp	r9, r5
  140044:	a1a0a009 	movge	sl, r9
  140048:	b1a0a005 	movlt	sl, r5
  14004c:	eafffb0d 	b	13ec88 <printf_core+0x6a8>
  140050:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  140054:	cafffb0e 	bgt	13ec94 <printf_core+0x6b4>
  140058:	e2852001 	add	r2, r5, #1
  14005c:	e3a03001 	mov	r3, #1
  140060:	eafffe71 	b	13fa2c <printf_core+0x144c>
  140064:	e3550000 	cmp	r5, #0
  140068:	03a05001 	moveq	r5, #1
  14006c:	e3760004 	cmn	r6, #4
  140070:	a1550006 	cmpge	r5, r6
  140074:	c59d2010 	ldrgt	r2, [sp, #16]
  140078:	d59d3010 	ldrle	r3, [sp, #16]
  14007c:	c2863001 	addgt	r3, r6, #1
  140080:	c2422001 	subgt	r2, r2, #1
  140084:	d2433002 	suble	r3, r3, #2
  140088:	c58d2010 	strgt	r2, [sp, #16]
  14008c:	c0455003 	subgt	r5, r5, r3
  140090:	d58d3010 	strle	r3, [sp, #16]
  140094:	d2455001 	suble	r5, r5, #1
  140098:	e3180008 	tst	r8, #8
  14009c:	1afffe5d 	bne	13fa18 <printf_core+0x1438>
  1400a0:	e59d301c 	ldr	r3, [sp, #28]
  1400a4:	e15b0003 	cmp	fp, r3
  1400a8:	2a000034 	bcs	140180 <printf_core+0x1ba0>
  1400ac:	e5137004 	ldr	r7, [r3, #-4]
  1400b0:	e3570000 	cmp	r7, #0
  1400b4:	0a000031 	beq	140180 <printf_core+0x1ba0>
  1400b8:	e3a0100a 	mov	r1, #10
  1400bc:	e1a00007 	mov	r0, r7
  1400c0:	ebffe1a2 	bl	138750 <__aeabi_uidivmod>
  1400c4:	e3510000 	cmp	r1, #0
  1400c8:	1a00000b 	bne	1400fc <printf_core+0x1b1c>
  1400cc:	e3a0300a 	mov	r3, #10
  1400d0:	e58d4020 	str	r4, [sp, #32]
  1400d4:	e1a04003 	mov	r4, r3
  1400d8:	e0844104 	add	r4, r4, r4, lsl #2
  1400dc:	e1a04084 	lsl	r4, r4, #1
  1400e0:	e1a01004 	mov	r1, r4
  1400e4:	e1a00007 	mov	r0, r7
  1400e8:	ebffe198 	bl	138750 <__aeabi_uidivmod>
  1400ec:	e3510000 	cmp	r1, #0
  1400f0:	e28aa001 	add	sl, sl, #1
  1400f4:	0afffff7 	beq	1400d8 <printf_core+0x1af8>
  1400f8:	e59d4020 	ldr	r4, [sp, #32]
  1400fc:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  140100:	e59d301c 	ldr	r3, [sp, #28]
  140104:	e0433002 	sub	r3, r3, r2
  140108:	e59d2010 	ldr	r2, [sp, #16]
  14010c:	e1a03143 	asr	r3, r3, #2
  140110:	e3822020 	orr	r2, r2, #32
  140114:	e2433001 	sub	r3, r3, #1
  140118:	e3520066 	cmp	r2, #102	; 0x66
  14011c:	e0833183 	add	r3, r3, r3, lsl #3
  140120:	10863003 	addne	r3, r6, r3
  140124:	e043300a 	sub	r3, r3, sl
  140128:	e1c33fc3 	bic	r3, r3, r3, asr #31
  14012c:	e1550003 	cmp	r5, r3
  140130:	a1a05003 	movge	r5, r3
  140134:	eafffe37 	b	13fa18 <printf_core+0x1438>
  140138:	e1a0300a 	mov	r3, sl
  14013c:	e1a02009 	mov	r2, r9
  140140:	e3a01020 	mov	r1, #32
  140144:	e59d0004 	ldr	r0, [sp, #4]
  140148:	ebfff8f9 	bl	13e534 <pad.part.0>
  14014c:	eafffbca 	b	13f07c <printf_core+0xa9c>
  140150:	e59d301c 	ldr	r3, [sp, #28]
  140154:	e0865003 	add	r5, r6, r3
  140158:	eaffff9c 	b	13ffd0 <printf_core+0x19f0>
  14015c:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  140160:	e0832105 	add	r2, r3, r5, lsl #2
  140164:	e2833024 	add	r3, r3, #36	; 0x24
  140168:	e1530002 	cmp	r3, r2
  14016c:	0afffb08 	beq	13ed94 <printf_core+0x7b4>
  140170:	e5b21004 	ldr	r1, [r2, #4]!
  140174:	e3510000 	cmp	r1, #0
  140178:	0afffffa 	beq	140168 <printf_core+0x1b88>
  14017c:	eafffa2f 	b	13ea40 <printf_core+0x460>
  140180:	e3a0a009 	mov	sl, #9
  140184:	eaffffdc 	b	1400fc <printf_core+0x1b1c>
  140188:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14018c:	e15b0003 	cmp	fp, r3
  140190:	31a0a00b 	movcc	sl, fp
  140194:	21a0a003 	movcs	sl, r3
  140198:	e15a0003 	cmp	sl, r3
  14019c:	8a00002f 	bhi	140260 <printf_core+0x1c80>
  1401a0:	e28d7090 	add	r7, sp, #144	; 0x90
  1401a4:	e043b00a 	sub	fp, r3, sl
  1401a8:	e2872009 	add	r2, r7, #9
  1401ac:	e58d2030 	str	r2, [sp, #48]	; 0x30
  1401b0:	e58d2034 	str	r2, [sp, #52]	; 0x34
  1401b4:	e3cb2003 	bic	r2, fp, #3
  1401b8:	e08a3002 	add	r3, sl, r2
  1401bc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1401c0:	e24a3004 	sub	r3, sl, #4
  1401c4:	e58db038 	str	fp, [sp, #56]	; 0x38
  1401c8:	e3a06030 	mov	r6, #48	; 0x30
  1401cc:	e1a0b004 	mov	fp, r4
  1401d0:	e1a04003 	mov	r4, r3
  1401d4:	e5b4c004 	ldr	ip, [r4, #4]!
  1401d8:	e35c0000 	cmp	ip, #0
  1401dc:	0a000068 	beq	140384 <printf_core+0x1da4>
  1401e0:	e2870009 	add	r0, r7, #9
  1401e4:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13f674 <printf_core+0x1094>
  1401e8:	e083219c 	umull	r2, r3, ip, r1
  1401ec:	e1a021a3 	lsr	r2, r3, #3
  1401f0:	e0823102 	add	r3, r2, r2, lsl #2
  1401f4:	e04c3083 	sub	r3, ip, r3, lsl #1
  1401f8:	e2833030 	add	r3, r3, #48	; 0x30
  1401fc:	e252c000 	subs	ip, r2, #0
  140200:	e5603001 	strb	r3, [r0, #-1]!
  140204:	1afffff6 	bne	1401e4 <printf_core+0x1c04>
  140208:	e15a0004 	cmp	sl, r4
  14020c:	1a000001 	bne	140218 <printf_core+0x1c38>
  140210:	ea000117 	b	140674 <printf_core+0x2094>
  140214:	e5606001 	strb	r6, [r0, #-1]!
  140218:	e1500007 	cmp	r0, r7
  14021c:	8afffffc 	bhi	140214 <printf_core+0x1c34>
  140220:	e59d3004 	ldr	r3, [sp, #4]
  140224:	e5932000 	ldr	r2, [r3]
  140228:	e3120020 	tst	r2, #32
  14022c:	1a000003 	bne	140240 <printf_core+0x1c60>
  140230:	e1a02003 	mov	r2, r3
  140234:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140238:	e0431000 	sub	r1, r3, r0
  14023c:	eb000da5 	bl	1438d8 <__fwritex>
  140240:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140244:	e1530004 	cmp	r3, r4
  140248:	1affffe1 	bne	1401d4 <printf_core+0x1bf4>
  14024c:	e1a0400b 	mov	r4, fp
  140250:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  140254:	e3cb3003 	bic	r3, fp, #3
  140258:	e2833004 	add	r3, r3, #4
  14025c:	e08aa003 	add	sl, sl, r3
  140260:	e3550000 	cmp	r5, #0
  140264:	0a00003b 	beq	140358 <printf_core+0x1d78>
  140268:	e59d3004 	ldr	r3, [sp, #4]
  14026c:	e5933000 	ldr	r3, [r3]
  140270:	e3130020 	tst	r3, #32
  140274:	0a00003d 	beq	140370 <printf_core+0x1d90>
  140278:	e59d201c 	ldr	r2, [sp, #28]
  14027c:	e3550000 	cmp	r5, #0
  140280:	d3a03000 	movle	r3, #0
  140284:	c3a03001 	movgt	r3, #1
  140288:	e15a0002 	cmp	sl, r2
  14028c:	23a03000 	movcs	r3, #0
  140290:	e3530000 	cmp	r3, #0
  140294:	0a000027 	beq	140338 <printf_core+0x1d58>
  140298:	e1a0600a 	mov	r6, sl
  14029c:	e3a0a030 	mov	sl, #48	; 0x30
  1402a0:	e59db004 	ldr	fp, [sp, #4]
  1402a4:	e28d7090 	add	r7, sp, #144	; 0x90
  1402a8:	e4963004 	ldr	r3, [r6], #4
  1402ac:	e287c009 	add	ip, r7, #9
  1402b0:	e3530000 	cmp	r3, #0
  1402b4:	0a00000a 	beq	1402e4 <printf_core+0x1d04>
  1402b8:	e1a01003 	mov	r1, r3
  1402bc:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13f674 <printf_core+0x1094>
  1402c0:	e0832091 	umull	r2, r3, r1, r0
  1402c4:	e1a031a3 	lsr	r3, r3, #3
  1402c8:	e0832103 	add	r2, r3, r3, lsl #2
  1402cc:	e0412082 	sub	r2, r1, r2, lsl #1
  1402d0:	e2822030 	add	r2, r2, #48	; 0x30
  1402d4:	e2531000 	subs	r1, r3, #0
  1402d8:	e56c2001 	strb	r2, [ip, #-1]!
  1402dc:	1afffff6 	bne	1402bc <printf_core+0x1cdc>
  1402e0:	ea000000 	b	1402e8 <printf_core+0x1d08>
  1402e4:	e56ca001 	strb	sl, [ip, #-1]!
  1402e8:	e15c0007 	cmp	ip, r7
  1402ec:	8afffffc 	bhi	1402e4 <printf_core+0x1d04>
  1402f0:	e59b3000 	ldr	r3, [fp]
  1402f4:	e3130020 	tst	r3, #32
  1402f8:	1a000005 	bne	140314 <printf_core+0x1d34>
  1402fc:	e3550009 	cmp	r5, #9
  140300:	e1a0000c 	mov	r0, ip
  140304:	b1a01005 	movlt	r1, r5
  140308:	a3a01009 	movge	r1, #9
  14030c:	e1a0200b 	mov	r2, fp
  140310:	eb000d70 	bl	1438d8 <__fwritex>
  140314:	e59d301c 	ldr	r3, [sp, #28]
  140318:	e2455009 	sub	r5, r5, #9
  14031c:	e1530006 	cmp	r3, r6
  140320:	93a03000 	movls	r3, #0
  140324:	83a03001 	movhi	r3, #1
  140328:	e3550000 	cmp	r5, #0
  14032c:	d3a03000 	movle	r3, #0
  140330:	e3530000 	cmp	r3, #0
  140334:	1affffdb 	bne	1402a8 <printf_core+0x1cc8>
  140338:	e2852009 	add	r2, r5, #9
  14033c:	e3520009 	cmp	r2, #9
  140340:	dafffe54 	ble	13fc98 <printf_core+0x16b8>
  140344:	e3a03009 	mov	r3, #9
  140348:	e3a01030 	mov	r1, #48	; 0x30
  14034c:	e59d0004 	ldr	r0, [sp, #4]
  140350:	ebfff877 	bl	13e534 <pad.part.0>
  140354:	eafffe4f 	b	13fc98 <printf_core+0x16b8>
  140358:	e3180008 	tst	r8, #8
  14035c:	0afffe4d 	beq	13fc98 <printf_core+0x16b8>
  140360:	e59d3004 	ldr	r3, [sp, #4]
  140364:	e5933000 	ldr	r3, [r3]
  140368:	e3130020 	tst	r3, #32
  14036c:	1afffe49 	bne	13fc98 <printf_core+0x16b8>
  140370:	e59d2004 	ldr	r2, [sp, #4]
  140374:	e3a01001 	mov	r1, #1
  140378:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f678 <printf_core+0x1098>
  14037c:	eb000d55 	bl	1438d8 <__fwritex>
  140380:	eaffffbc 	b	140278 <printf_core+0x1c98>
  140384:	e15a0004 	cmp	sl, r4
  140388:	12870009 	addne	r0, r7, #9
  14038c:	1affffa0 	bne	140214 <printf_core+0x1c34>
  140390:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  140394:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  140398:	eaffffa0 	b	140220 <printf_core+0x1c40>
  14039c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1403a0:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  1403a4:	e59d2004 	ldr	r2, [sp, #4]
  1403a8:	eb000d4a 	bl	1438d8 <__fwritex>
  1403ac:	e2283801 	eor	r3, r8, #65536	; 0x10000
  1403b0:	e3130a12 	tst	r3, #73728	; 0x12000
  1403b4:	01a0300b 	moveq	r3, fp
  1403b8:	13a03001 	movne	r3, #1
  1403bc:	e3530000 	cmp	r3, #0
  1403c0:	0a0000af 	beq	140684 <printf_core+0x20a4>
  1403c4:	e59d2004 	ldr	r2, [sp, #4]
  1403c8:	e5923000 	ldr	r3, [r2]
  1403cc:	e3130020 	tst	r3, #32
  1403d0:	1affff12 	bne	140020 <printf_core+0x1a40>
  1403d4:	e59d101c 	ldr	r1, [sp, #28]
  1403d8:	e1a00007 	mov	r0, r7
  1403dc:	eb000d3d 	bl	1438d8 <__fwritex>
  1403e0:	e35a0000 	cmp	sl, #0
  1403e4:	ca00003c 	bgt	1404dc <printf_core+0x1efc>
  1403e8:	e59d2004 	ldr	r2, [sp, #4]
  1403ec:	e5923000 	ldr	r3, [r2]
  1403f0:	e3130020 	tst	r3, #32
  1403f4:	1affff0b 	bne	140028 <printf_core+0x1a48>
  1403f8:	e1a01006 	mov	r1, r6
  1403fc:	e59d0010 	ldr	r0, [sp, #16]
  140400:	eb000d34 	bl	1438d8 <__fwritex>
  140404:	eaffff07 	b	140028 <printf_core+0x1a48>
  140408:	e59d3010 	ldr	r3, [sp, #16]
  14040c:	e1a02009 	mov	r2, r9
  140410:	e3a01030 	mov	r1, #48	; 0x30
  140414:	e59d0004 	ldr	r0, [sp, #4]
  140418:	ebfff845 	bl	13e534 <pad.part.0>
  14041c:	eafffdc7 	b	13fb40 <printf_core+0x1560>
  140420:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140424:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140428:	e59d2004 	ldr	r2, [sp, #4]
  14042c:	eb000d29 	bl	1438d8 <__fwritex>
  140430:	eafffdbc 	b	13fb28 <printf_core+0x1548>
  140434:	e59d3010 	ldr	r3, [sp, #16]
  140438:	e1a02009 	mov	r2, r9
  14043c:	e3a01020 	mov	r1, #32
  140440:	e59d0004 	ldr	r0, [sp, #4]
  140444:	ebfff83a 	bl	13e534 <pad.part.0>
  140448:	eafffdb2 	b	13fb18 <printf_core+0x1538>
  14044c:	e156000e 	cmp	r6, lr
  140450:	cafffa0f 	bgt	13ec94 <printf_core+0x6b4>
  140454:	e3560000 	cmp	r6, #0
  140458:	c0833006 	addgt	r3, r3, r6
  14045c:	eafffd9e 	b	13fadc <printf_core+0x14fc>
  140460:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140464:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  140468:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f67c <printf_core+0x109c>
  14046c:	e0811000 	add	r1, r1, r0
  140470:	e1510003 	cmp	r1, r3
  140474:	e5871000 	str	r1, [r7]
  140478:	9a000008 	bls	1404a0 <printf_core+0x1ec0>
  14047c:	e4072004 	str	r2, [r7], #-4
  140480:	e157000b 	cmp	r7, fp
  140484:	350b2004 	strcc	r2, [fp, #-4]
  140488:	e5971000 	ldr	r1, [r7]
  14048c:	324bb004 	subcc	fp, fp, #4
  140490:	e2811001 	add	r1, r1, #1
  140494:	e1510003 	cmp	r1, r3
  140498:	e5871000 	str	r1, [r7]
  14049c:	8afffff6 	bhi	14047c <printf_core+0x1e9c>
  1404a0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1404a4:	e59b2000 	ldr	r2, [fp]
  1404a8:	e043600b 	sub	r6, r3, fp
  1404ac:	e1a06146 	asr	r6, r6, #2
  1404b0:	e3520009 	cmp	r2, #9
  1404b4:	e0866186 	add	r6, r6, r6, lsl #3
  1404b8:	83a0300a 	movhi	r3, #10
  1404bc:	9a000004 	bls	1404d4 <printf_core+0x1ef4>
  1404c0:	e0833103 	add	r3, r3, r3, lsl #2
  1404c4:	e1a03083 	lsl	r3, r3, #1
  1404c8:	e1520003 	cmp	r2, r3
  1404cc:	e2866001 	add	r6, r6, #1
  1404d0:	2afffffa 	bcs	1404c0 <printf_core+0x1ee0>
  1404d4:	e287c004 	add	ip, r7, #4
  1404d8:	eafffd37 	b	13f9bc <printf_core+0x13dc>
  1404dc:	e1a0200a 	mov	r2, sl
  1404e0:	e3a03000 	mov	r3, #0
  1404e4:	e3a01030 	mov	r1, #48	; 0x30
  1404e8:	e59d0004 	ldr	r0, [sp, #4]
  1404ec:	ebfff810 	bl	13e534 <pad.part.0>
  1404f0:	eaffffbc 	b	1403e8 <printf_core+0x1e08>
  1404f4:	e3a03030 	mov	r3, #48	; 0x30
  1404f8:	e28dc08f 	add	ip, sp, #143	; 0x8f
  1404fc:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  140500:	eafffe59 	b	13fe6c <printf_core+0x188c>
  140504:	e265300b 	rsb	r3, r5, #11
  140508:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  14050c:	e1a0300b 	mov	r3, fp
  140510:	e3a06000 	mov	r6, #0
  140514:	e1a0b004 	mov	fp, r4
  140518:	e1a04003 	mov	r4, r3
  14051c:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f680 <printf_core+0x10a0>
  140520:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140524:	e1a00006 	mov	r0, r6
  140528:	e2433001 	sub	r3, r3, #1
  14052c:	e1a01007 	mov	r1, r7
  140530:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140534:	e3a02000 	mov	r2, #0
  140538:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f680 <printf_core+0x10a0>
  14053c:	eb001099 	bl	1447a8 <__aeabi_dmul>
  140540:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140544:	e1a06000 	mov	r6, r0
  140548:	e3730001 	cmn	r3, #1
  14054c:	e1a07001 	mov	r7, r1
  140550:	1afffff2 	bne	140520 <printf_core+0x1f40>
  140554:	e1a03004 	mov	r3, r4
  140558:	e1a0400b 	mov	r4, fp
  14055c:	e1a0b003 	mov	fp, r3
  140560:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140564:	e59d001c 	ldr	r0, [sp, #28]
  140568:	e5d33000 	ldrb	r3, [r3]
  14056c:	e353002d 	cmp	r3, #45	; 0x2d
  140570:	0a000028 	beq	140618 <printf_core+0x2038>
  140574:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140578:	e1a02006 	mov	r2, r6
  14057c:	e1a03007 	mov	r3, r7
  140580:	eb000f9b 	bl	1443f4 <__adddf3>
  140584:	e1a02006 	mov	r2, r6
  140588:	e1a03007 	mov	r3, r7
  14058c:	eb000f97 	bl	1443f0 <__aeabi_dsub>
  140590:	e58d001c 	str	r0, [sp, #28]
  140594:	e58d1038 	str	r1, [sp, #56]	; 0x38
  140598:	eafffe20 	b	13fe20 <printf_core+0x1840>
  14059c:	e59d3010 	ldr	r3, [sp, #16]
  1405a0:	e1a02009 	mov	r2, r9
  1405a4:	e3a01020 	mov	r1, #32
  1405a8:	e59d0004 	ldr	r0, [sp, #4]
  1405ac:	ebfff7e0 	bl	13e534 <pad.part.0>
  1405b0:	eafffdbe 	b	13fcb0 <printf_core+0x16d0>
  1405b4:	e3a0e000 	mov	lr, #0
  1405b8:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f684 <printf_core+0x10a4>
  1405bc:	eafffce1 	b	13f948 <printf_core+0x1368>
  1405c0:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f688 <printf_core+0x10a8>
  1405c4:	e58d2040 	str	r2, [sp, #64]	; 0x40
  1405c8:	e58d3020 	str	r3, [sp, #32]
  1405cc:	eafffcd6 	b	13f92c <printf_core+0x134c>
  1405d0:	e3a03001 	mov	r3, #1
  1405d4:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1405d8:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f688 <printf_core+0x10a8>
  1405dc:	e58d3020 	str	r3, [sp, #32]
  1405e0:	eafffcd1 	b	13f92c <printf_core+0x134c>
  1405e4:	e3a03001 	mov	r3, #1
  1405e8:	e3a05006 	mov	r5, #6
  1405ec:	e58d3044 	str	r3, [sp, #68]	; 0x44
  1405f0:	eafffb9d 	b	13f46c <printf_core+0xe8c>
  1405f4:	e59d101c 	ldr	r1, [sp, #28]
  1405f8:	e287c004 	add	ip, r7, #4
  1405fc:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f68c <printf_core+0x10ac>
  140600:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f690 <printf_core+0x10b0>
  140604:	e151000c 	cmp	r1, ip
  140608:	01a0c002 	moveq	ip, r2
  14060c:	11a0c003 	movne	ip, r3
  140610:	e3a0e000 	mov	lr, #0
  140614:	eafffccb 	b	13f948 <printf_core+0x1368>
  140618:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  14061c:	e1a02006 	mov	r2, r6
  140620:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  140624:	e1a03007 	mov	r3, r7
  140628:	eb000f70 	bl	1443f0 <__aeabi_dsub>
  14062c:	e1a03001 	mov	r3, r1
  140630:	e1a02000 	mov	r2, r0
  140634:	e1a01007 	mov	r1, r7
  140638:	e1a00006 	mov	r0, r6
  14063c:	eb000f6c 	bl	1443f4 <__adddf3>
  140640:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  140644:	e58d001c 	str	r0, [sp, #28]
  140648:	e58d3038 	str	r3, [sp, #56]	; 0x38
  14064c:	eafffdf3 	b	13fe20 <printf_core+0x1840>
  140650:	e3a0300a 	mov	r3, #10
  140654:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140658:	eafffc97 	b	13f8bc <printf_core+0x12dc>
  14065c:	e1a03005 	mov	r3, r5
  140660:	e1a02009 	mov	r2, r9
  140664:	e3a01020 	mov	r1, #32
  140668:	e59d0004 	ldr	r0, [sp, #4]
  14066c:	ebfff7b0 	bl	13e534 <pad.part.0>
  140670:	eafffe72 	b	140040 <printf_core+0x1a60>
  140674:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140678:	e1500003 	cmp	r0, r3
  14067c:	1afffee7 	bne	140220 <printf_core+0x1c40>
  140680:	eaffff42 	b	140390 <printf_core+0x1db0>
  140684:	e1a03005 	mov	r3, r5
  140688:	e1a02009 	mov	r2, r9
  14068c:	e3a01030 	mov	r1, #48	; 0x30
  140690:	e59d0004 	ldr	r0, [sp, #4]
  140694:	ebfff7a6 	bl	13e534 <pad.part.0>
  140698:	eaffff49 	b	1403c4 <printf_core+0x1de4>
  14069c:	e1a03005 	mov	r3, r5
  1406a0:	e1a02009 	mov	r2, r9
  1406a4:	e3a01020 	mov	r1, #32
  1406a8:	e59d0004 	ldr	r0, [sp, #4]
  1406ac:	ebfff7a0 	bl	13e534 <pad.part.0>
  1406b0:	eafffe50 	b	13fff8 <printf_core+0x1a18>

001406b4 <vfprintf>:
  1406b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1406b8:	e1a09001 	mov	r9, r1
  1406bc:	e1a06002 	mov	r6, r2
  1406c0:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  1406c4:	e28d5010 	add	r5, sp, #16
  1406c8:	e3a02028 	mov	r2, #40	; 0x28
  1406cc:	e3a01000 	mov	r1, #0
  1406d0:	e1a04000 	mov	r4, r0
  1406d4:	e1a00005 	mov	r0, r5
  1406d8:	eb000221 	bl	140f64 <memset>
  1406dc:	e58d5000 	str	r5, [sp]
  1406e0:	e1a01009 	mov	r1, r9
  1406e4:	e28d3038 	add	r3, sp, #56	; 0x38
  1406e8:	e28d200c 	add	r2, sp, #12
  1406ec:	e3a00000 	mov	r0, #0
  1406f0:	e58d600c 	str	r6, [sp, #12]
  1406f4:	ebfff7b9 	bl	13e5e0 <printf_core>
  1406f8:	e3500000 	cmp	r0, #0
  1406fc:	ba000047 	blt	140820 <vfprintf+0x16c>
  140700:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  140704:	e3530000 	cmp	r3, #0
  140708:	b3a08000 	movlt	r8, #0
  14070c:	ba000002 	blt	14071c <vfprintf+0x68>
  140710:	e1a00004 	mov	r0, r4
  140714:	eb000ab0 	bl	1431dc <__lockfile>
  140718:	e1a08000 	mov	r8, r0
  14071c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  140720:	e5943000 	ldr	r3, [r4]
  140724:	e3520000 	cmp	r2, #0
  140728:	e2036020 	and	r6, r3, #32
  14072c:	d3c33020 	bicle	r3, r3, #32
  140730:	d5843000 	strle	r3, [r4]
  140734:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  140738:	e3530000 	cmp	r3, #0
  14073c:	0a000024 	beq	1407d4 <vfprintf+0x120>
  140740:	e5947010 	ldr	r7, [r4, #16]
  140744:	e3570000 	cmp	r7, #0
  140748:	13a07000 	movne	r7, #0
  14074c:	0a000035 	beq	140828 <vfprintf+0x174>
  140750:	e58d5000 	str	r5, [sp]
  140754:	e28d3038 	add	r3, sp, #56	; 0x38
  140758:	e28d200c 	add	r2, sp, #12
  14075c:	e1a01009 	mov	r1, r9
  140760:	e1a00004 	mov	r0, r4
  140764:	ebfff79d 	bl	13e5e0 <printf_core>
  140768:	e1a05000 	mov	r5, r0
  14076c:	e3570000 	cmp	r7, #0
  140770:	0a00000d 	beq	1407ac <vfprintf+0xf8>
  140774:	e3a02000 	mov	r2, #0
  140778:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  14077c:	e1a01002 	mov	r1, r2
  140780:	e1a00004 	mov	r0, r4
  140784:	e12fff33 	blx	r3
  140788:	e3a03000 	mov	r3, #0
  14078c:	e5942014 	ldr	r2, [r4, #20]
  140790:	e584702c 	str	r7, [r4, #44]	; 0x2c
  140794:	e1520003 	cmp	r2, r3
  140798:	03e05000 	mvneq	r5, #0
  14079c:	e5843030 	str	r3, [r4, #48]	; 0x30
  1407a0:	e5843010 	str	r3, [r4, #16]
  1407a4:	e584301c 	str	r3, [r4, #28]
  1407a8:	e5843014 	str	r3, [r4, #20]
  1407ac:	e5943000 	ldr	r3, [r4]
  1407b0:	e3130020 	tst	r3, #32
  1407b4:	13e05000 	mvnne	r5, #0
  1407b8:	e1866003 	orr	r6, r6, r3
  1407bc:	e3580000 	cmp	r8, #0
  1407c0:	e5846000 	str	r6, [r4]
  1407c4:	1a000010 	bne	14080c <vfprintf+0x158>
  1407c8:	e1a00005 	mov	r0, r5
  1407cc:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1407d0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1407d4:	e3a01050 	mov	r1, #80	; 0x50
  1407d8:	e28d2088 	add	r2, sp, #136	; 0x88
  1407dc:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  1407e0:	e5843010 	str	r3, [r4, #16]
  1407e4:	e584301c 	str	r3, [r4, #28]
  1407e8:	e5843014 	str	r3, [r4, #20]
  1407ec:	e5841030 	str	r1, [r4, #48]	; 0x30
  1407f0:	e584202c 	str	r2, [r4, #44]	; 0x2c
  1407f4:	e1a00004 	mov	r0, r4
  1407f8:	eb000b95 	bl	143654 <__towrite>
  1407fc:	e3500000 	cmp	r0, #0
  140800:	13e05000 	mvnne	r5, #0
  140804:	1affffd8 	bne	14076c <vfprintf+0xb8>
  140808:	eaffffd0 	b	140750 <vfprintf+0x9c>
  14080c:	e1a00004 	mov	r0, r4
  140810:	eb000abe 	bl	143310 <__unlockfile>
  140814:	e1a00005 	mov	r0, r5
  140818:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  14081c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140820:	e3e05000 	mvn	r5, #0
  140824:	eaffffe7 	b	1407c8 <vfprintf+0x114>
  140828:	e1a00004 	mov	r0, r4
  14082c:	eb000b88 	bl	143654 <__towrite>
  140830:	e3500000 	cmp	r0, #0
  140834:	13e05000 	mvnne	r5, #0
  140838:	1affffdb 	bne	1407ac <vfprintf+0xf8>
  14083c:	eaffffc3 	b	140750 <vfprintf+0x9c>

00140840 <sn_write>:
  140840:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  140844:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  140848:	e590c01c 	ldr	ip, [r0, #28]
  14084c:	e1a05000 	mov	r5, r0
  140850:	e5900014 	ldr	r0, [r0, #20]
  140854:	e5963004 	ldr	r3, [r6, #4]
  140858:	e040000c 	sub	r0, r0, ip
  14085c:	e1500003 	cmp	r0, r3
  140860:	31a04000 	movcc	r4, r0
  140864:	21a04003 	movcs	r4, r3
  140868:	e3540000 	cmp	r4, #0
  14086c:	e1a08001 	mov	r8, r1
  140870:	e1a07002 	mov	r7, r2
  140874:	e5960000 	ldr	r0, [r6]
  140878:	1a000012 	bne	1408c8 <sn_write+0x88>
  14087c:	e1570003 	cmp	r7, r3
  140880:	31a04007 	movcc	r4, r7
  140884:	21a04003 	movcs	r4, r3
  140888:	e3540000 	cmp	r4, #0
  14088c:	0a000006 	beq	1408ac <sn_write+0x6c>
  140890:	e1a01008 	mov	r1, r8
  140894:	e1a02004 	mov	r2, r4
  140898:	eb000079 	bl	140a84 <memcpy>
  14089c:	e8960009 	ldm	r6, {r0, r3}
  1408a0:	e0800004 	add	r0, r0, r4
  1408a4:	e0433004 	sub	r3, r3, r4
  1408a8:	e8860009 	stm	r6, {r0, r3}
  1408ac:	e3a03000 	mov	r3, #0
  1408b0:	e5c03000 	strb	r3, [r0]
  1408b4:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  1408b8:	e1a00007 	mov	r0, r7
  1408bc:	e585301c 	str	r3, [r5, #28]
  1408c0:	e5853014 	str	r3, [r5, #20]
  1408c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1408c8:	e1a0100c 	mov	r1, ip
  1408cc:	e1a02004 	mov	r2, r4
  1408d0:	eb00006b 	bl	140a84 <memcpy>
  1408d4:	e8960009 	ldm	r6, {r0, r3}
  1408d8:	e0800004 	add	r0, r0, r4
  1408dc:	e0433004 	sub	r3, r3, r4
  1408e0:	e8860009 	stm	r6, {r0, r3}
  1408e4:	eaffffe4 	b	14087c <sn_write+0x3c>

001408e8 <vsnprintf>:
  1408e8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1408ec:	e2516000 	subs	r6, r1, #0
  1408f0:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  1408f4:	e1a08002 	mov	r8, r2
  1408f8:	e1a09003 	mov	r9, r3
  1408fc:	1a000018 	bne	140964 <vsnprintf+0x7c>
  140900:	e28d7010 	add	r7, sp, #16
  140904:	e3a02090 	mov	r2, #144	; 0x90
  140908:	e1a00007 	mov	r0, r7
  14090c:	e28d4004 	add	r4, sp, #4
  140910:	e58d600c 	str	r6, [sp, #12]
  140914:	e58d4008 	str	r4, [sp, #8]
  140918:	eb000191 	bl	140f64 <memset>
  14091c:	e3e02000 	mvn	r2, #0
  140920:	e59f1098 	ldr	r1, [pc, #152]	; 1409c0 <vsnprintf+0xd8>
  140924:	e28d3008 	add	r3, sp, #8
  140928:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  14092c:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140930:	e58d1034 	str	r1, [sp, #52]	; 0x34
  140934:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140938:	e58d3064 	str	r3, [sp, #100]	; 0x64
  14093c:	e3a0c000 	mov	ip, #0
  140940:	e1a02009 	mov	r2, r9
  140944:	e1a01008 	mov	r1, r8
  140948:	e1a00007 	mov	r0, r7
  14094c:	e5c4c000 	strb	ip, [r4]
  140950:	ebffff57 	bl	1406b4 <vfprintf>
  140954:	e1a05000 	mov	r5, r0
  140958:	e1a00005 	mov	r0, r5
  14095c:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  140960:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140964:	e3e05000 	mvn	r5, #0
  140968:	e1a04000 	mov	r4, r0
  14096c:	e28d7010 	add	r7, sp, #16
  140970:	e0863005 	add	r3, r6, r5
  140974:	e3a02090 	mov	r2, #144	; 0x90
  140978:	e1a00007 	mov	r0, r7
  14097c:	e3a01000 	mov	r1, #0
  140980:	e58d300c 	str	r3, [sp, #12]
  140984:	e58d4008 	str	r4, [sp, #8]
  140988:	eb000175 	bl	140f64 <memset>
  14098c:	e59f202c 	ldr	r2, [pc, #44]	; 1409c0 <vsnprintf+0xd8>
  140990:	e28d3008 	add	r3, sp, #8
  140994:	e3560000 	cmp	r6, #0
  140998:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  14099c:	e58d5060 	str	r5, [sp, #96]	; 0x60
  1409a0:	e58d2034 	str	r2, [sp, #52]	; 0x34
  1409a4:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  1409a8:	e58d3064 	str	r3, [sp, #100]	; 0x64
  1409ac:	aaffffe2 	bge	14093c <vsnprintf+0x54>
  1409b0:	ebffe084 	bl	138bc8 <__errno_location>
  1409b4:	e3a0204b 	mov	r2, #75	; 0x4b
  1409b8:	e5802000 	str	r2, [r0]
  1409bc:	eaffffe5 	b	140958 <vsnprintf+0x70>
  1409c0:	00140840 	.word	0x00140840

001409c4 <vsprintf>:
  1409c4:	e1a03002 	mov	r3, r2
  1409c8:	e1a02001 	mov	r2, r1
  1409cc:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  1409d0:	eaffffc4 	b	1408e8 <vsnprintf>

001409d4 <atoi>:
  1409d4:	e5d03000 	ldrb	r3, [r0]
  1409d8:	e2432009 	sub	r2, r3, #9
  1409dc:	e3530020 	cmp	r3, #32
  1409e0:	13520004 	cmpne	r2, #4
  1409e4:	8a000004 	bhi	1409fc <atoi+0x28>
  1409e8:	e5f03001 	ldrb	r3, [r0, #1]!
  1409ec:	e2432009 	sub	r2, r3, #9
  1409f0:	e3530020 	cmp	r3, #32
  1409f4:	13520004 	cmpne	r2, #4
  1409f8:	9afffffa 	bls	1409e8 <atoi+0x14>
  1409fc:	e353002b 	cmp	r3, #43	; 0x2b
  140a00:	0a000019 	beq	140a6c <atoi+0x98>
  140a04:	e353002d 	cmp	r3, #45	; 0x2d
  140a08:	0a00000f 	beq	140a4c <atoi+0x78>
  140a0c:	e5d01000 	ldrb	r1, [r0]
  140a10:	e2412030 	sub	r2, r1, #48	; 0x30
  140a14:	e3520009 	cmp	r2, #9
  140a18:	91a03000 	movls	r3, r0
  140a1c:	8a000010 	bhi	140a64 <atoi+0x90>
  140a20:	e3a0c000 	mov	ip, #0
  140a24:	e3a00000 	mov	r0, #0
  140a28:	e5f31001 	ldrb	r1, [r3, #1]!
  140a2c:	e0800100 	add	r0, r0, r0, lsl #2
  140a30:	e0620080 	rsb	r0, r2, r0, lsl #1
  140a34:	e2412030 	sub	r2, r1, #48	; 0x30
  140a38:	e3520009 	cmp	r2, #9
  140a3c:	9afffff9 	bls	140a28 <atoi+0x54>
  140a40:	e35c0000 	cmp	ip, #0
  140a44:	02600000 	rsbeq	r0, r0, #0
  140a48:	e12fff1e 	bx	lr
  140a4c:	e5d01001 	ldrb	r1, [r0, #1]
  140a50:	e2803001 	add	r3, r0, #1
  140a54:	e2412030 	sub	r2, r1, #48	; 0x30
  140a58:	e3520009 	cmp	r2, #9
  140a5c:	93a0c001 	movls	ip, #1
  140a60:	9affffef 	bls	140a24 <atoi+0x50>
  140a64:	e3a00000 	mov	r0, #0
  140a68:	e12fff1e 	bx	lr
  140a6c:	e5d01001 	ldrb	r1, [r0, #1]
  140a70:	e2803001 	add	r3, r0, #1
  140a74:	e2412030 	sub	r2, r1, #48	; 0x30
  140a78:	e3520009 	cmp	r2, #9
  140a7c:	9affffe7 	bls	140a20 <atoi+0x4c>
  140a80:	eafffff7 	b	140a64 <atoi+0x90>

00140a84 <memcpy>:
  140a84:	e92d4011 	push	{r0, r4, lr}
  140a88:	e24dd01c 	sub	sp, sp, #28
  140a8c:	e3520004 	cmp	r2, #4
  140a90:	3a0000b0 	bcc	140d58 <copy_last_3_and_return>
  140a94:	e2613000 	rsb	r3, r1, #0
  140a98:	e2133003 	ands	r3, r3, #3
  140a9c:	0a000007 	beq	140ac0 <src_aligned>
  140aa0:	e1b0cf83 	lsls	ip, r3, #31
  140aa4:	e0422003 	sub	r2, r2, r3
  140aa8:	44d13001 	ldrbmi	r3, [r1], #1
  140aac:	24d14001 	ldrbcs	r4, [r1], #1
  140ab0:	24d1c001 	ldrbcs	ip, [r1], #1
  140ab4:	44c03001 	strbmi	r3, [r0], #1
  140ab8:	24c04001 	strbcs	r4, [r0], #1
  140abc:	24c0c001 	strbcs	ip, [r0], #1

00140ac0 <src_aligned>:
  140ac0:	e020c001 	eor	ip, r0, r1
  140ac4:	e31c0003 	tst	ip, #3
  140ac8:	1a000027 	bne	140b6c <non_congruent>
  140acc:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140ad0:	e2603000 	rsb	r3, r0, #0
  140ad4:	e213301c 	ands	r3, r3, #28
  140ad8:	0a00000a 	beq	140b08 <cached_aligned32>
  140adc:	e1530002 	cmp	r3, r2
  140ae0:	8202301c 	andhi	r3, r2, #28
  140ae4:	e1b0ce03 	lsls	ip, r3, #28
  140ae8:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140aec:	48b10300 	ldmmi	r1!, {r8, r9}
  140af0:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140af4:	48a00300 	stmiami	r0!, {r8, r9}
  140af8:	e3130004 	tst	r3, #4
  140afc:	1491a004 	ldrne	sl, [r1], #4
  140b00:	1480a004 	strne	sl, [r0], #4
  140b04:	e0422003 	sub	r2, r2, r3

00140b08 <cached_aligned32>:
  140b08:	e2522020 	subs	r2, r2, #32
  140b0c:	3a000004 	bcc	140b24 <less_than_32_left>
  140b10:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140b14:	e2522020 	subs	r2, r2, #32
  140b18:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140b1c:	2afffffb 	bcs	140b10 <cached_aligned32+0x8>
  140b20:	e2822020 	add	r2, r2, #32

00140b24 <less_than_32_left>:
  140b24:	e312001f 	tst	r2, #31
  140b28:	0a00000c 	beq	140b60 <less_than_32_left+0x3c>
  140b2c:	e1b0ce02 	lsls	ip, r2, #28
  140b30:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140b34:	48b10300 	ldmmi	r1!, {r8, r9}
  140b38:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140b3c:	48a00300 	stmiami	r0!, {r8, r9}
  140b40:	e1b0cf02 	lsls	ip, r2, #30
  140b44:	24913004 	ldrcs	r3, [r1], #4
  140b48:	40d140b2 	ldrhmi	r4, [r1], #2
  140b4c:	24803004 	strcs	r3, [r0], #4
  140b50:	40c040b2 	strhmi	r4, [r0], #2
  140b54:	e3120001 	tst	r2, #1
  140b58:	15d13000 	ldrbne	r3, [r1]
  140b5c:	15c03000 	strbne	r3, [r0]
  140b60:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  140b64:	e8bd4011 	pop	{r0, r4, lr}
  140b68:	e12fff1e 	bx	lr

00140b6c <non_congruent>:
  140b6c:	e3520004 	cmp	r2, #4
  140b70:	3a000078 	bcc	140d58 <copy_last_3_and_return>
  140b74:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140b78:	e2605000 	rsb	r5, r0, #0
  140b7c:	e2055003 	and	r5, r5, #3
  140b80:	e1a0c185 	lsl	ip, r5, #3
  140b84:	e26ce020 	rsb	lr, ip, #32
  140b88:	e4913004 	ldr	r3, [r1], #4
  140b8c:	e2422004 	sub	r2, r2, #4
  140b90:	e1b05f85 	lsls	r5, r5, #31
  140b94:	44c03001 	strbmi	r3, [r0], #1
  140b98:	41a03423 	lsrmi	r3, r3, #8
  140b9c:	24c03001 	strbcs	r3, [r0], #1
  140ba0:	21a03423 	lsrcs	r3, r3, #8
  140ba4:	24c03001 	strbcs	r3, [r0], #1
  140ba8:	21a03423 	lsrcs	r3, r3, #8
  140bac:	e3520004 	cmp	r2, #4
  140bb0:	3a000061 	bcc	140d3c <partial_word_tail>
  140bb4:	e310001c 	tst	r0, #28
  140bb8:	0a000007 	beq	140bdc <non_congruent+0x70>
  140bbc:	e4915004 	ldr	r5, [r1], #4
  140bc0:	e2422004 	sub	r2, r2, #4
  140bc4:	e1834e15 	orr	r4, r3, r5, lsl lr
  140bc8:	e1a03c35 	lsr	r3, r5, ip
  140bcc:	e4804004 	str	r4, [r0], #4
  140bd0:	e3520004 	cmp	r2, #4
  140bd4:	2afffff6 	bcs	140bb4 <non_congruent+0x48>
  140bd8:	3a000057 	bcc	140d3c <partial_word_tail>
  140bdc:	e2522020 	subs	r2, r2, #32
  140be0:	3a00004a 	bcc	140d10 <less_than_thirtytwo>
  140be4:	e35c0018 	cmp	ip, #24
  140be8:	0a000031 	beq	140cb4 <loop24>
  140bec:	e35c0008 	cmp	ip, #8
  140bf0:	0a000017 	beq	140c54 <loop8>

00140bf4 <loop16>:
  140bf4:	e491c004 	ldr	ip, [r1], #4
  140bf8:	e1a0400c 	mov	r4, ip
  140bfc:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140c00:	e2522020 	subs	r2, r2, #32
  140c04:	2491c004 	ldrcs	ip, [r1], #4
  140c08:	e1833804 	orr	r3, r3, r4, lsl #16
  140c0c:	e1a04824 	lsr	r4, r4, #16
  140c10:	e1844805 	orr	r4, r4, r5, lsl #16
  140c14:	e1a05825 	lsr	r5, r5, #16
  140c18:	e1855806 	orr	r5, r5, r6, lsl #16
  140c1c:	e1a06826 	lsr	r6, r6, #16
  140c20:	e1866807 	orr	r6, r6, r7, lsl #16
  140c24:	e1a07827 	lsr	r7, r7, #16
  140c28:	e1877808 	orr	r7, r7, r8, lsl #16
  140c2c:	e1a08828 	lsr	r8, r8, #16
  140c30:	e1888809 	orr	r8, r8, r9, lsl #16
  140c34:	e1a09829 	lsr	r9, r9, #16
  140c38:	e189980a 	orr	r9, r9, sl, lsl #16
  140c3c:	e1a0a82a 	lsr	sl, sl, #16
  140c40:	e18aa80b 	orr	sl, sl, fp, lsl #16
  140c44:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140c48:	e1a0382b 	lsr	r3, fp, #16
  140c4c:	2affffe9 	bcs	140bf8 <loop16+0x4>
  140c50:	ea00002e 	b	140d10 <less_than_thirtytwo>

00140c54 <loop8>:
  140c54:	e491c004 	ldr	ip, [r1], #4
  140c58:	e1a0400c 	mov	r4, ip
  140c5c:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140c60:	e2522020 	subs	r2, r2, #32
  140c64:	2491c004 	ldrcs	ip, [r1], #4
  140c68:	e1833c04 	orr	r3, r3, r4, lsl #24
  140c6c:	e1a04424 	lsr	r4, r4, #8
  140c70:	e1844c05 	orr	r4, r4, r5, lsl #24
  140c74:	e1a05425 	lsr	r5, r5, #8
  140c78:	e1855c06 	orr	r5, r5, r6, lsl #24
  140c7c:	e1a06426 	lsr	r6, r6, #8
  140c80:	e1866c07 	orr	r6, r6, r7, lsl #24
  140c84:	e1a07427 	lsr	r7, r7, #8
  140c88:	e1877c08 	orr	r7, r7, r8, lsl #24
  140c8c:	e1a08428 	lsr	r8, r8, #8
  140c90:	e1888c09 	orr	r8, r8, r9, lsl #24
  140c94:	e1a09429 	lsr	r9, r9, #8
  140c98:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140c9c:	e1a0a42a 	lsr	sl, sl, #8
  140ca0:	e18aac0b 	orr	sl, sl, fp, lsl #24
  140ca4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140ca8:	e1a0342b 	lsr	r3, fp, #8
  140cac:	2affffe9 	bcs	140c58 <loop8+0x4>
  140cb0:	ea000016 	b	140d10 <less_than_thirtytwo>

00140cb4 <loop24>:
  140cb4:	e491c004 	ldr	ip, [r1], #4
  140cb8:	e1a0400c 	mov	r4, ip
  140cbc:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140cc0:	e2522020 	subs	r2, r2, #32
  140cc4:	2491c004 	ldrcs	ip, [r1], #4
  140cc8:	e1833404 	orr	r3, r3, r4, lsl #8
  140ccc:	e1a04c24 	lsr	r4, r4, #24
  140cd0:	e1844405 	orr	r4, r4, r5, lsl #8
  140cd4:	e1a05c25 	lsr	r5, r5, #24
  140cd8:	e1855406 	orr	r5, r5, r6, lsl #8
  140cdc:	e1a06c26 	lsr	r6, r6, #24
  140ce0:	e1866407 	orr	r6, r6, r7, lsl #8
  140ce4:	e1a07c27 	lsr	r7, r7, #24
  140ce8:	e1877408 	orr	r7, r7, r8, lsl #8
  140cec:	e1a08c28 	lsr	r8, r8, #24
  140cf0:	e1888409 	orr	r8, r8, r9, lsl #8
  140cf4:	e1a09c29 	lsr	r9, r9, #24
  140cf8:	e189940a 	orr	r9, r9, sl, lsl #8
  140cfc:	e1a0ac2a 	lsr	sl, sl, #24
  140d00:	e18aa40b 	orr	sl, sl, fp, lsl #8
  140d04:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140d08:	e1a03c2b 	lsr	r3, fp, #24
  140d0c:	2affffe9 	bcs	140cb8 <loop24+0x4>

00140d10 <less_than_thirtytwo>:
  140d10:	e26ec020 	rsb	ip, lr, #32
  140d14:	e2822020 	add	r2, r2, #32
  140d18:	e3520004 	cmp	r2, #4
  140d1c:	3a000006 	bcc	140d3c <partial_word_tail>
  140d20:	e4915004 	ldr	r5, [r1], #4
  140d24:	e2422004 	sub	r2, r2, #4
  140d28:	e1834e15 	orr	r4, r3, r5, lsl lr
  140d2c:	e1a03c35 	lsr	r3, r5, ip
  140d30:	e4804004 	str	r4, [r0], #4
  140d34:	e3520004 	cmp	r2, #4
  140d38:	2afffff8 	bcs	140d20 <less_than_thirtytwo+0x10>

00140d3c <partial_word_tail>:
  140d3c:	e1b05e0e 	lsls	r5, lr, #28
  140d40:	44c03001 	strbmi	r3, [r0], #1
  140d44:	41a03423 	lsrmi	r3, r3, #8
  140d48:	24c03001 	strbcs	r3, [r0], #1
  140d4c:	21a03423 	lsrcs	r3, r3, #8
  140d50:	24c03001 	strbcs	r3, [r0], #1
  140d54:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00140d58 <copy_last_3_and_return>:
  140d58:	e1b02f82 	lsls	r2, r2, #31
  140d5c:	44d12001 	ldrbmi	r2, [r1], #1
  140d60:	24d13001 	ldrbcs	r3, [r1], #1
  140d64:	25d1c000 	ldrbcs	ip, [r1]
  140d68:	44c02001 	strbmi	r2, [r0], #1
  140d6c:	24c03001 	strbcs	r3, [r0], #1
  140d70:	25c0c000 	strbcs	ip, [r0]
  140d74:	e28dd01c 	add	sp, sp, #28
  140d78:	e8bd4011 	pop	{r0, r4, lr}
  140d7c:	e12fff1e 	bx	lr

00140d80 <memcmp>:
  140d80:	e3520000 	cmp	r2, #0
  140d84:	0a00000c 	beq	140dbc <memcmp+0x3c>
  140d88:	e5d0c000 	ldrb	ip, [r0]
  140d8c:	e5d13000 	ldrb	r3, [r1]
  140d90:	e153000c 	cmp	r3, ip
  140d94:	1a00000a 	bne	140dc4 <memcmp+0x44>
  140d98:	e2422001 	sub	r2, r2, #1
  140d9c:	e0812002 	add	r2, r1, r2
  140da0:	ea000003 	b	140db4 <memcmp+0x34>
  140da4:	e5f0c001 	ldrb	ip, [r0, #1]!
  140da8:	e5f13001 	ldrb	r3, [r1, #1]!
  140dac:	e15c0003 	cmp	ip, r3
  140db0:	1a000003 	bne	140dc4 <memcmp+0x44>
  140db4:	e1510002 	cmp	r1, r2
  140db8:	1afffff9 	bne	140da4 <memcmp+0x24>
  140dbc:	e3a00000 	mov	r0, #0
  140dc0:	e12fff1e 	bx	lr
  140dc4:	e04c0003 	sub	r0, ip, r3
  140dc8:	e12fff1e 	bx	lr

00140dcc <memmove>:
  140dcc:	e1500001 	cmp	r0, r1
  140dd0:	e92d4030 	push	{r4, r5, lr}
  140dd4:	e1a0e000 	mov	lr, r0
  140dd8:	0a000030 	beq	140ea0 <memmove+0xd4>
  140ddc:	e0414000 	sub	r4, r1, r0
  140de0:	e0444002 	sub	r4, r4, r2
  140de4:	e0625f82 	rsb	r5, r2, r2, lsl #31
  140de8:	e1540085 	cmp	r4, r5, lsl #1
  140dec:	e1a0c001 	mov	ip, r1
  140df0:	e1a03002 	mov	r3, r2
  140df4:	9a000054 	bls	140f4c <memmove+0x180>
  140df8:	e0212000 	eor	r2, r1, r0
  140dfc:	e1500001 	cmp	r0, r1
  140e00:	e2022003 	and	r2, r2, #3
  140e04:	2a000027 	bcs	140ea8 <memmove+0xdc>
  140e08:	e3520000 	cmp	r2, #0
  140e0c:	1a00001a 	bne	140e7c <memmove+0xb0>
  140e10:	e3100003 	tst	r0, #3
  140e14:	0a000050 	beq	140f5c <memmove+0x190>
  140e18:	e3530000 	cmp	r3, #0
  140e1c:	11a02000 	movne	r2, r0
  140e20:	e2433001 	sub	r3, r3, #1
  140e24:	1a000002 	bne	140e34 <memmove+0x68>
  140e28:	ea00001c 	b	140ea0 <memmove+0xd4>
  140e2c:	e2533001 	subs	r3, r3, #1
  140e30:	3a00001a 	bcc	140ea0 <memmove+0xd4>
  140e34:	e4dc1001 	ldrb	r1, [ip], #1
  140e38:	e4c21001 	strb	r1, [r2], #1
  140e3c:	e3120003 	tst	r2, #3
  140e40:	1afffff9 	bne	140e2c <memmove+0x60>
  140e44:	e3530003 	cmp	r3, #3
  140e48:	9a00000c 	bls	140e80 <memmove+0xb4>
  140e4c:	e2435004 	sub	r5, r3, #4
  140e50:	e3c55003 	bic	r5, r5, #3
  140e54:	e2855004 	add	r5, r5, #4
  140e58:	e0824005 	add	r4, r2, r5
  140e5c:	e24c1004 	sub	r1, ip, #4
  140e60:	e5b10004 	ldr	r0, [r1, #4]!
  140e64:	e4820004 	str	r0, [r2], #4
  140e68:	e1540002 	cmp	r4, r2
  140e6c:	1afffffb 	bne	140e60 <memmove+0x94>
  140e70:	e2033003 	and	r3, r3, #3
  140e74:	e08cc005 	add	ip, ip, r5
  140e78:	ea000000 	b	140e80 <memmove+0xb4>
  140e7c:	e1a02000 	mov	r2, r0
  140e80:	e3530000 	cmp	r3, #0
  140e84:	12422001 	subne	r2, r2, #1
  140e88:	108c3003 	addne	r3, ip, r3
  140e8c:	0a000003 	beq	140ea0 <memmove+0xd4>
  140e90:	e4dc1001 	ldrb	r1, [ip], #1
  140e94:	e153000c 	cmp	r3, ip
  140e98:	e5e21001 	strb	r1, [r2, #1]!
  140e9c:	1afffffb 	bne	140e90 <memmove+0xc4>
  140ea0:	e1a0000e 	mov	r0, lr
  140ea4:	e8bd8030 	pop	{r4, r5, pc}
  140ea8:	e3520000 	cmp	r2, #0
  140eac:	1a00001c 	bne	140f24 <memmove+0x158>
  140eb0:	e0801003 	add	r1, r0, r3
  140eb4:	e3110003 	tst	r1, #3
  140eb8:	0a000025 	beq	140f54 <memmove+0x188>
  140ebc:	e3530000 	cmp	r3, #0
  140ec0:	e2432001 	sub	r2, r3, #1
  140ec4:	0afffff5 	beq	140ea0 <memmove+0xd4>
  140ec8:	e08c3003 	add	r3, ip, r3
  140ecc:	ea000001 	b	140ed8 <memmove+0x10c>
  140ed0:	e2522001 	subs	r2, r2, #1
  140ed4:	3afffff1 	bcc	140ea0 <memmove+0xd4>
  140ed8:	e5730001 	ldrb	r0, [r3, #-1]!
  140edc:	e5610001 	strb	r0, [r1, #-1]!
  140ee0:	e3110003 	tst	r1, #3
  140ee4:	1afffff9 	bne	140ed0 <memmove+0x104>
  140ee8:	e3520003 	cmp	r2, #3
  140eec:	91a03002 	movls	r3, r2
  140ef0:	9a00000b 	bls	140f24 <memmove+0x158>
  140ef4:	e24c0004 	sub	r0, ip, #4
  140ef8:	e2423004 	sub	r3, r2, #4
  140efc:	e3c33003 	bic	r3, r3, #3
  140f00:	e0800002 	add	r0, r0, r2
  140f04:	e0400003 	sub	r0, r0, r3
  140f08:	e08e1002 	add	r1, lr, r2
  140f0c:	e08c3002 	add	r3, ip, r2
  140f10:	e5334004 	ldr	r4, [r3, #-4]!
  140f14:	e1530000 	cmp	r3, r0
  140f18:	e5214004 	str	r4, [r1, #-4]!
  140f1c:	1afffffb 	bne	140f10 <memmove+0x144>
  140f20:	e2023003 	and	r3, r2, #3
  140f24:	e3530000 	cmp	r3, #0
  140f28:	108c2003 	addne	r2, ip, r3
  140f2c:	108e3003 	addne	r3, lr, r3
  140f30:	0affffda 	beq	140ea0 <memmove+0xd4>
  140f34:	e5721001 	ldrb	r1, [r2, #-1]!
  140f38:	e15c0002 	cmp	ip, r2
  140f3c:	e5631001 	strb	r1, [r3, #-1]!
  140f40:	1afffffb 	bne	140f34 <memmove+0x168>
  140f44:	e1a0000e 	mov	r0, lr
  140f48:	e8bd8030 	pop	{r4, r5, pc}
  140f4c:	e8bd4030 	pop	{r4, r5, lr}
  140f50:	eafffecb 	b	140a84 <memcpy>
  140f54:	e1a02003 	mov	r2, r3
  140f58:	eaffffe2 	b	140ee8 <memmove+0x11c>
  140f5c:	e1a02000 	mov	r2, r0
  140f60:	eaffffb7 	b	140e44 <memmove+0x78>

00140f64 <memset>:
  140f64:	e3520000 	cmp	r2, #0
  140f68:	012fff1e 	bxeq	lr
  140f6c:	e1a03000 	mov	r3, r0
  140f70:	e20110ff 	and	r1, r1, #255	; 0xff
  140f74:	e6c31002 	strb	r1, [r3], r2
  140f78:	e3520002 	cmp	r2, #2
  140f7c:	e5431001 	strb	r1, [r3, #-1]
  140f80:	912fff1e 	bxls	lr
  140f84:	e3520006 	cmp	r2, #6
  140f88:	e5c01001 	strb	r1, [r0, #1]
  140f8c:	e5c01002 	strb	r1, [r0, #2]
  140f90:	e5431002 	strb	r1, [r3, #-2]
  140f94:	e5431003 	strb	r1, [r3, #-3]
  140f98:	912fff1e 	bxls	lr
  140f9c:	e3520008 	cmp	r2, #8
  140fa0:	e5c01003 	strb	r1, [r0, #3]
  140fa4:	e5431004 	strb	r1, [r3, #-4]
  140fa8:	912fff1e 	bxls	lr
  140fac:	e260c000 	rsb	ip, r0, #0
  140fb0:	e20cc003 	and	ip, ip, #3
  140fb4:	e042200c 	sub	r2, r2, ip
  140fb8:	e3c22003 	bic	r2, r2, #3
  140fbc:	e0811401 	add	r1, r1, r1, lsl #8
  140fc0:	e080300c 	add	r3, r0, ip
  140fc4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  140fc8:	e0811801 	add	r1, r1, r1, lsl #16
  140fcc:	e3520008 	cmp	r2, #8
  140fd0:	e083e002 	add	lr, r3, r2
  140fd4:	e780100c 	str	r1, [r0, ip]
  140fd8:	e50e1004 	str	r1, [lr, #-4]
  140fdc:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  140fe0:	e3520018 	cmp	r2, #24
  140fe4:	e5831004 	str	r1, [r3, #4]
  140fe8:	e5831008 	str	r1, [r3, #8]
  140fec:	e50e100c 	str	r1, [lr, #-12]
  140ff0:	e50e1008 	str	r1, [lr, #-8]
  140ff4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  140ff8:	e3a04000 	mov	r4, #0
  140ffc:	e203c004 	and	ip, r3, #4
  141000:	e28cc018 	add	ip, ip, #24
  141004:	e042200c 	sub	r2, r2, ip
  141008:	e352001f 	cmp	r2, #31
  14100c:	e583100c 	str	r1, [r3, #12]
  141010:	e5831010 	str	r1, [r3, #16]
  141014:	e5831014 	str	r1, [r3, #20]
  141018:	e5831018 	str	r1, [r3, #24]
  14101c:	e1a05001 	mov	r5, r1
  141020:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  141024:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  141028:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  14102c:	e50e1010 	str	r1, [lr, #-16]
  141030:	e1846001 	orr	r6, r4, r1
  141034:	e1a07001 	mov	r7, r1
  141038:	e083100c 	add	r1, r3, ip
  14103c:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141040:	e2422020 	sub	r2, r2, #32
  141044:	e3c2301f 	bic	r3, r2, #31
  141048:	e2812040 	add	r2, r1, #64	; 0x40
  14104c:	e0833002 	add	r3, r3, r2
  141050:	e2812020 	add	r2, r1, #32
  141054:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  141058:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  14105c:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  141060:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  141064:	e5026010 	str	r6, [r2, #-16]
  141068:	e502700c 	str	r7, [r2, #-12]
  14106c:	e90200c0 	stmdb	r2, {r6, r7}
  141070:	e2822020 	add	r2, r2, #32
  141074:	e1520003 	cmp	r2, r3
  141078:	1afffff5 	bne	141054 <memset+0xf0>
  14107c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00141080 <strcasecmp>:
  141080:	e92d4070 	push	{r4, r5, r6, lr}
  141084:	e1a05000 	mov	r5, r0
  141088:	e5d00000 	ldrb	r0, [r0]
  14108c:	e1a04001 	mov	r4, r1
  141090:	e3500000 	cmp	r0, #0
  141094:	1a00000c 	bne	1410cc <strcasecmp+0x4c>
  141098:	ea00000e 	b	1410d8 <strcasecmp+0x58>
  14109c:	e1500003 	cmp	r0, r3
  1410a0:	0a000005 	beq	1410bc <strcasecmp+0x3c>
  1410a4:	eb00067f 	bl	142aa8 <tolower>
  1410a8:	e1a06000 	mov	r6, r0
  1410ac:	e5d40000 	ldrb	r0, [r4]
  1410b0:	eb00067c 	bl	142aa8 <tolower>
  1410b4:	e1560000 	cmp	r6, r0
  1410b8:	1a00000c 	bne	1410f0 <strcasecmp+0x70>
  1410bc:	e5f50001 	ldrb	r0, [r5, #1]!
  1410c0:	e2844001 	add	r4, r4, #1
  1410c4:	e3500000 	cmp	r0, #0
  1410c8:	0a000002 	beq	1410d8 <strcasecmp+0x58>
  1410cc:	e5d43000 	ldrb	r3, [r4]
  1410d0:	e3530000 	cmp	r3, #0
  1410d4:	1afffff0 	bne	14109c <strcasecmp+0x1c>
  1410d8:	eb000672 	bl	142aa8 <tolower>
  1410dc:	e1a05000 	mov	r5, r0
  1410e0:	e5d40000 	ldrb	r0, [r4]
  1410e4:	eb00066f 	bl	142aa8 <tolower>
  1410e8:	e0450000 	sub	r0, r5, r0
  1410ec:	e8bd8070 	pop	{r4, r5, r6, pc}
  1410f0:	e5d50000 	ldrb	r0, [r5]
  1410f4:	eafffff7 	b	1410d8 <strcasecmp+0x58>

001410f8 <__strcasecmp_l>:
  1410f8:	eaffffe0 	b	141080 <strcasecmp>

001410fc <strcat>:
  1410fc:	e92d4070 	push	{r4, r5, r6, lr}
  141100:	e1a04000 	mov	r4, r0
  141104:	e1a05001 	mov	r5, r1
  141108:	eb000026 	bl	1411a8 <strlen>
  14110c:	e1a01005 	mov	r1, r5
  141110:	e0840000 	add	r0, r4, r0
  141114:	eb000012 	bl	141164 <strcpy>
  141118:	e1a00004 	mov	r0, r4
  14111c:	e8bd8070 	pop	{r4, r5, r6, pc}

00141120 <strcmp>:
  141120:	e5d02000 	ldrb	r2, [r0]
  141124:	e5d13000 	ldrb	r3, [r1]
  141128:	e1530002 	cmp	r3, r2
  14112c:	0a000004 	beq	141144 <strcmp+0x24>
  141130:	ea000009 	b	14115c <strcmp+0x3c>
  141134:	e5f03001 	ldrb	r3, [r0, #1]!
  141138:	e5f12001 	ldrb	r2, [r1, #1]!
  14113c:	e1530002 	cmp	r3, r2
  141140:	1a000003 	bne	141154 <strcmp+0x34>
  141144:	e3530000 	cmp	r3, #0
  141148:	1afffff9 	bne	141134 <strcmp+0x14>
  14114c:	e1a00003 	mov	r0, r3
  141150:	e12fff1e 	bx	lr
  141154:	e0430002 	sub	r0, r3, r2
  141158:	e12fff1e 	bx	lr
  14115c:	e0420003 	sub	r0, r2, r3
  141160:	e12fff1e 	bx	lr

00141164 <strcpy>:
  141164:	e92d4010 	push	{r4, lr}
  141168:	e1a04000 	mov	r4, r0
  14116c:	eb000a94 	bl	143bc4 <__stpcpy>
  141170:	e1a00004 	mov	r0, r4
  141174:	e8bd8010 	pop	{r4, pc}

00141178 <strdup>:
  141178:	e92d4070 	push	{r4, r5, r6, lr}
  14117c:	e1a05000 	mov	r5, r0
  141180:	eb000008 	bl	1411a8 <strlen>
  141184:	e2804001 	add	r4, r0, #1
  141188:	e1a00004 	mov	r0, r4
  14118c:	ebffefab 	bl	13d040 <malloc>
  141190:	e3500000 	cmp	r0, #0
  141194:	08bd8070 	popeq	{r4, r5, r6, pc}
  141198:	e1a02004 	mov	r2, r4
  14119c:	e1a01005 	mov	r1, r5
  1411a0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1411a4:	eafffe36 	b	140a84 <memcpy>

001411a8 <strlen>:
  1411a8:	e3100003 	tst	r0, #3
  1411ac:	0a000023 	beq	141240 <strlen+0x98>
  1411b0:	e5d03000 	ldrb	r3, [r0]
  1411b4:	e3530000 	cmp	r3, #0
  1411b8:	12803001 	addne	r3, r0, #1
  1411bc:	1a000005 	bne	1411d8 <strlen+0x30>
  1411c0:	ea000020 	b	141248 <strlen+0xa0>
  1411c4:	e5d31000 	ldrb	r1, [r3]
  1411c8:	e283c001 	add	ip, r3, #1
  1411cc:	e3510000 	cmp	r1, #0
  1411d0:	0a000018 	beq	141238 <strlen+0x90>
  1411d4:	e1a0300c 	mov	r3, ip
  1411d8:	e3130003 	tst	r3, #3
  1411dc:	e1a02003 	mov	r2, r3
  1411e0:	1afffff7 	bne	1411c4 <strlen+0x1c>
  1411e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1411e8:	e59fe060 	ldr	lr, [pc, #96]	; 141250 <strlen+0xa8>
  1411ec:	e592c000 	ldr	ip, [r2]
  1411f0:	e59f305c 	ldr	r3, [pc, #92]	; 141254 <strlen+0xac>
  1411f4:	e08c100e 	add	r1, ip, lr
  1411f8:	e1c1100c 	bic	r1, r1, ip
  1411fc:	e1110003 	tst	r1, r3
  141200:	1a000004 	bne	141218 <strlen+0x70>
  141204:	e5b2c004 	ldr	ip, [r2, #4]!
  141208:	e08c100e 	add	r1, ip, lr
  14120c:	e1c1100c 	bic	r1, r1, ip
  141210:	e1110003 	tst	r1, r3
  141214:	0afffffa 	beq	141204 <strlen+0x5c>
  141218:	e5d23000 	ldrb	r3, [r2]
  14121c:	e3530000 	cmp	r3, #0
  141220:	0a000002 	beq	141230 <strlen+0x88>
  141224:	e5f23001 	ldrb	r3, [r2, #1]!
  141228:	e3530000 	cmp	r3, #0
  14122c:	1afffffc 	bne	141224 <strlen+0x7c>
  141230:	e0420000 	sub	r0, r2, r0
  141234:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141238:	e0430000 	sub	r0, r3, r0
  14123c:	e12fff1e 	bx	lr
  141240:	e1a02000 	mov	r2, r0
  141244:	eaffffe6 	b	1411e4 <strlen+0x3c>
  141248:	e1a00003 	mov	r0, r3
  14124c:	e12fff1e 	bx	lr
  141250:	fefefeff 	.word	0xfefefeff
  141254:	80808080 	.word	0x80808080

00141258 <strncmp>:
  141258:	e3520000 	cmp	r2, #0
  14125c:	0a00001e 	beq	1412dc <strncmp+0x84>
  141260:	e92d4010 	push	{r4, lr}
  141264:	e5d04000 	ldrb	r4, [r0]
  141268:	e5d1c000 	ldrb	ip, [r1]
  14126c:	e3540000 	cmp	r4, #0
  141270:	0a00001b 	beq	1412e4 <strncmp+0x8c>
  141274:	e3520001 	cmp	r2, #1
  141278:	135c0000 	cmpne	ip, #0
  14127c:	13a03001 	movne	r3, #1
  141280:	03a03000 	moveq	r3, #0
  141284:	e154000c 	cmp	r4, ip
  141288:	13a03000 	movne	r3, #0
  14128c:	02033001 	andeq	r3, r3, #1
  141290:	e3530000 	cmp	r3, #0
  141294:	e242e001 	sub	lr, r2, #1
  141298:	0a000011 	beq	1412e4 <strncmp+0x8c>
  14129c:	e5f02001 	ldrb	r2, [r0, #1]!
  1412a0:	e24ee001 	sub	lr, lr, #1
  1412a4:	e3520000 	cmp	r2, #0
  1412a8:	e5f1c001 	ldrb	ip, [r1, #1]!
  1412ac:	0a000008 	beq	1412d4 <strncmp+0x7c>
  1412b0:	e042300c 	sub	r3, r2, ip
  1412b4:	e16f3f13 	clz	r3, r3
  1412b8:	e35c0000 	cmp	ip, #0
  1412bc:	e1a032a3 	lsr	r3, r3, #5
  1412c0:	03a03000 	moveq	r3, #0
  1412c4:	e35e0000 	cmp	lr, #0
  1412c8:	03a03000 	moveq	r3, #0
  1412cc:	e3530000 	cmp	r3, #0
  1412d0:	1afffff1 	bne	14129c <strncmp+0x44>
  1412d4:	e042000c 	sub	r0, r2, ip
  1412d8:	e8bd8010 	pop	{r4, pc}
  1412dc:	e1a00002 	mov	r0, r2
  1412e0:	e12fff1e 	bx	lr
  1412e4:	e1a02004 	mov	r2, r4
  1412e8:	eafffff9 	b	1412d4 <strncmp+0x7c>

001412ec <strncpy>:
  1412ec:	e92d4010 	push	{r4, lr}
  1412f0:	e1a04000 	mov	r4, r0
  1412f4:	eb000a63 	bl	143c88 <__stpncpy>
  1412f8:	e1a00004 	mov	r0, r4
  1412fc:	e8bd8010 	pop	{r4, pc}

00141300 <strnlen>:
  141300:	e92d4070 	push	{r4, r5, r6, lr}
  141304:	e1a04001 	mov	r4, r1
  141308:	e3a01000 	mov	r1, #0
  14130c:	e1a02004 	mov	r2, r4
  141310:	e1a05000 	mov	r5, r0
  141314:	eb0009d4 	bl	143a6c <memchr>
  141318:	e3500000 	cmp	r0, #0
  14131c:	10400005 	subne	r0, r0, r5
  141320:	01a00004 	moveq	r0, r4
  141324:	e8bd8070 	pop	{r4, r5, r6, pc}

00141328 <twoway_strstr>:
  141328:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  14132c:	e1a08001 	mov	r8, r1
  141330:	e24dde43 	sub	sp, sp, #1072	; 0x430
  141334:	e24dd004 	sub	sp, sp, #4
  141338:	e1a09000 	mov	r9, r0
  14133c:	e3a02020 	mov	r2, #32
  141340:	e3a01000 	mov	r1, #0
  141344:	e28d0010 	add	r0, sp, #16
  141348:	ebffff05 	bl	140f64 <memset>
  14134c:	e5d83000 	ldrb	r3, [r8]
  141350:	e3530000 	cmp	r3, #0
  141354:	0a0000c8 	beq	14167c <twoway_strstr+0x354>
  141358:	e5d92000 	ldrb	r2, [r9]
  14135c:	e3520000 	cmp	r2, #0
  141360:	11a0c008 	movne	ip, r8
  141364:	11a0e009 	movne	lr, r9
  141368:	13a05000 	movne	r5, #0
  14136c:	13a06001 	movne	r6, #1
  141370:	1a000003 	bne	141384 <twoway_strstr+0x5c>
  141374:	ea000075 	b	141550 <twoway_strstr+0x228>
  141378:	e5fe2001 	ldrb	r2, [lr, #1]!
  14137c:	e3520000 	cmp	r2, #0
  141380:	0a000072 	beq	141550 <twoway_strstr+0x228>
  141384:	e28d1e43 	add	r1, sp, #1072	; 0x430
  141388:	e1a022a3 	lsr	r2, r3, #5
  14138c:	e0812102 	add	r2, r1, r2, lsl #2
  141390:	e0810103 	add	r0, r1, r3, lsl #2
  141394:	e203401f 	and	r4, r3, #31
  141398:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  14139c:	e5fc3001 	ldrb	r3, [ip, #1]!
  1413a0:	e2855001 	add	r5, r5, #1
  1413a4:	e1811416 	orr	r1, r1, r6, lsl r4
  1413a8:	e3530000 	cmp	r3, #0
  1413ac:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  1413b0:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  1413b4:	1affffef 	bne	141378 <twoway_strstr+0x50>
  1413b8:	e3a00001 	mov	r0, #1
  1413bc:	e3e0c000 	mvn	ip, #0
  1413c0:	e1a01000 	mov	r1, r0
  1413c4:	e0832001 	add	r2, r3, r1
  1413c8:	e1550002 	cmp	r5, r2
  1413cc:	e088e00c 	add	lr, r8, ip
  1413d0:	9a00000b 	bls	141404 <twoway_strstr+0xdc>
  1413d4:	e7de4001 	ldrb	r4, [lr, r1]
  1413d8:	e7d8e002 	ldrb	lr, [r8, r2]
  1413dc:	e154000e 	cmp	r4, lr
  1413e0:	0a00008f 	beq	141624 <twoway_strstr+0x2fc>
  1413e4:	9a000096 	bls	141644 <twoway_strstr+0x31c>
  1413e8:	e042000c 	sub	r0, r2, ip
  1413ec:	e1a03002 	mov	r3, r2
  1413f0:	e3a01001 	mov	r1, #1
  1413f4:	e0832001 	add	r2, r3, r1
  1413f8:	e1550002 	cmp	r5, r2
  1413fc:	e088e00c 	add	lr, r8, ip
  141400:	8afffff3 	bhi	1413d4 <twoway_strstr+0xac>
  141404:	e3a06001 	mov	r6, #1
  141408:	e3a01000 	mov	r1, #0
  14140c:	e1a02006 	mov	r2, r6
  141410:	e3e0a000 	mvn	sl, #0
  141414:	e0813002 	add	r3, r1, r2
  141418:	e1550003 	cmp	r5, r3
  14141c:	e088e002 	add	lr, r8, r2
  141420:	9a00000b 	bls	141454 <twoway_strstr+0x12c>
  141424:	e7de400a 	ldrb	r4, [lr, sl]
  141428:	e7d8e003 	ldrb	lr, [r8, r3]
  14142c:	e154000e 	cmp	r4, lr
  141430:	0a00007f 	beq	141634 <twoway_strstr+0x30c>
  141434:	2a000087 	bcs	141658 <twoway_strstr+0x330>
  141438:	e043600a 	sub	r6, r3, sl
  14143c:	e3a02001 	mov	r2, #1
  141440:	e1a01003 	mov	r1, r3
  141444:	e0813002 	add	r3, r1, r2
  141448:	e1550003 	cmp	r5, r3
  14144c:	e088e002 	add	lr, r8, r2
  141450:	8afffff3 	bhi	141424 <twoway_strstr+0xfc>
  141454:	e58d6008 	str	r6, [sp, #8]
  141458:	e28a2001 	add	r2, sl, #1
  14145c:	e28c3001 	add	r3, ip, #1
  141460:	e1520003 	cmp	r2, r3
  141464:	91a0b003 	movls	fp, r3
  141468:	81a0b002 	movhi	fp, r2
  14146c:	e59d3008 	ldr	r3, [sp, #8]
  141470:	91a03000 	movls	r3, r0
  141474:	e1a0200b 	mov	r2, fp
  141478:	e0881003 	add	r1, r8, r3
  14147c:	e1a00008 	mov	r0, r8
  141480:	91a0a00c 	movls	sl, ip
  141484:	e58d3008 	str	r3, [sp, #8]
  141488:	ebfffe3c 	bl	140d80 <memcmp>
  14148c:	e3500000 	cmp	r0, #0
  141490:	0a000075 	beq	14166c <twoway_strstr+0x344>
  141494:	e2452001 	sub	r2, r5, #1
  141498:	e042200a 	sub	r2, r2, sl
  14149c:	e152000a 	cmp	r2, sl
  1414a0:	e3a03000 	mov	r3, #0
  1414a4:	31a0200a 	movcc	r2, sl
  1414a8:	e58d300c 	str	r3, [sp, #12]
  1414ac:	e2823001 	add	r3, r2, #1
  1414b0:	e58d3008 	str	r3, [sp, #8]
  1414b4:	e1a04009 	mov	r4, r9
  1414b8:	e3a06000 	mov	r6, #0
  1414bc:	e3a07001 	mov	r7, #1
  1414c0:	e385303f 	orr	r3, r5, #63	; 0x3f
  1414c4:	e58d3004 	str	r3, [sp, #4]
  1414c8:	e0493004 	sub	r3, r9, r4
  1414cc:	e1530005 	cmp	r3, r5
  1414d0:	3a000014 	bcc	141528 <twoway_strstr+0x200>
  1414d4:	e0841005 	add	r1, r4, r5
  1414d8:	e5513001 	ldrb	r3, [r1, #-1]
  1414dc:	e28d0e43 	add	r0, sp, #1072	; 0x430
  1414e0:	e1a022a3 	lsr	r2, r3, #5
  1414e4:	e0802102 	add	r2, r0, r2, lsl #2
  1414e8:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  1414ec:	e203001f 	and	r0, r3, #31
  1414f0:	e0122017 	ands	r2, r2, r7, lsl r0
  1414f4:	0a000040 	beq	1415fc <twoway_strstr+0x2d4>
  1414f8:	e28d2e43 	add	r2, sp, #1072	; 0x430
  1414fc:	e0823103 	add	r3, r2, r3, lsl #2
  141500:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  141504:	e0553003 	subs	r3, r5, r3
  141508:	0a000015 	beq	141564 <twoway_strstr+0x23c>
  14150c:	e1560003 	cmp	r6, r3
  141510:	20844006 	addcs	r4, r4, r6
  141514:	30844003 	addcc	r4, r4, r3
  141518:	e0493004 	sub	r3, r9, r4
  14151c:	e1530005 	cmp	r3, r5
  141520:	e3a06000 	mov	r6, #0
  141524:	2affffea 	bcs	1414d4 <twoway_strstr+0x1ac>
  141528:	e59d2004 	ldr	r2, [sp, #4]
  14152c:	e3a01000 	mov	r1, #0
  141530:	e1a00009 	mov	r0, r9
  141534:	eb00094c 	bl	143a6c <memchr>
  141538:	e3500000 	cmp	r0, #0
  14153c:	0a000035 	beq	141618 <twoway_strstr+0x2f0>
  141540:	e0403004 	sub	r3, r0, r4
  141544:	e1530005 	cmp	r3, r5
  141548:	21a09000 	movcs	r9, r0
  14154c:	2affffe0 	bcs	1414d4 <twoway_strstr+0x1ac>
  141550:	e3a04000 	mov	r4, #0
  141554:	e1a00004 	mov	r0, r4
  141558:	e28dde43 	add	sp, sp, #1072	; 0x430
  14155c:	e28dd004 	add	sp, sp, #4
  141560:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  141564:	e156000b 	cmp	r6, fp
  141568:	21a03006 	movcs	r3, r6
  14156c:	31a0300b 	movcc	r3, fp
  141570:	e7d82003 	ldrb	r2, [r8, r3]
  141574:	e0881003 	add	r1, r8, r3
  141578:	e3520000 	cmp	r2, #0
  14157c:	0a00000b 	beq	1415b0 <twoway_strstr+0x288>
  141580:	e7d4c003 	ldrb	ip, [r4, r3]
  141584:	e0840003 	add	r0, r4, r3
  141588:	e15c0002 	cmp	ip, r2
  14158c:	0a000003 	beq	1415a0 <twoway_strstr+0x278>
  141590:	ea00001c 	b	141608 <twoway_strstr+0x2e0>
  141594:	e5f0c001 	ldrb	ip, [r0, #1]!
  141598:	e15c0002 	cmp	ip, r2
  14159c:	1a000019 	bne	141608 <twoway_strstr+0x2e0>
  1415a0:	e5f12001 	ldrb	r2, [r1, #1]!
  1415a4:	e2833001 	add	r3, r3, #1
  1415a8:	e3520000 	cmp	r2, #0
  1415ac:	1afffff8 	bne	141594 <twoway_strstr+0x26c>
  1415b0:	e156000b 	cmp	r6, fp
  1415b4:	2affffe6 	bcs	141554 <twoway_strstr+0x22c>
  1415b8:	e7d8300a 	ldrb	r3, [r8, sl]
  1415bc:	e7d4100a 	ldrb	r1, [r4, sl]
  1415c0:	e088200a 	add	r2, r8, sl
  1415c4:	e1510003 	cmp	r1, r3
  1415c8:	e084300a 	add	r3, r4, sl
  1415cc:	1a000006 	bne	1415ec <twoway_strstr+0x2c4>
  1415d0:	e0431004 	sub	r1, r3, r4
  1415d4:	e1560001 	cmp	r6, r1
  1415d8:	2affffdd 	bcs	141554 <twoway_strstr+0x22c>
  1415dc:	e5720001 	ldrb	r0, [r2, #-1]!
  1415e0:	e5731001 	ldrb	r1, [r3, #-1]!
  1415e4:	e1500001 	cmp	r0, r1
  1415e8:	0afffff8 	beq	1415d0 <twoway_strstr+0x2a8>
  1415ec:	e59d3008 	ldr	r3, [sp, #8]
  1415f0:	e59d600c 	ldr	r6, [sp, #12]
  1415f4:	e0844003 	add	r4, r4, r3
  1415f8:	eaffffb2 	b	1414c8 <twoway_strstr+0x1a0>
  1415fc:	e1a04001 	mov	r4, r1
  141600:	e1a06002 	mov	r6, r2
  141604:	eaffffaf 	b	1414c8 <twoway_strstr+0x1a0>
  141608:	e043300a 	sub	r3, r3, sl
  14160c:	e0844003 	add	r4, r4, r3
  141610:	e3a06000 	mov	r6, #0
  141614:	eaffffab 	b	1414c8 <twoway_strstr+0x1a0>
  141618:	e59d3004 	ldr	r3, [sp, #4]
  14161c:	e0899003 	add	r9, r9, r3
  141620:	eaffffab 	b	1414d4 <twoway_strstr+0x1ac>
  141624:	e1510000 	cmp	r1, r0
  141628:	12811001 	addne	r1, r1, #1
  14162c:	1affff64 	bne	1413c4 <twoway_strstr+0x9c>
  141630:	eaffff6d 	b	1413ec <twoway_strstr+0xc4>
  141634:	e1520006 	cmp	r2, r6
  141638:	12822001 	addne	r2, r2, #1
  14163c:	1affff74 	bne	141414 <twoway_strstr+0xec>
  141640:	eaffff7d 	b	14143c <twoway_strstr+0x114>
  141644:	e3a00001 	mov	r0, #1
  141648:	e1a0c003 	mov	ip, r3
  14164c:	e1a01000 	mov	r1, r0
  141650:	e0833000 	add	r3, r3, r0
  141654:	eaffff5a 	b	1413c4 <twoway_strstr+0x9c>
  141658:	e3a06001 	mov	r6, #1
  14165c:	e1a0a001 	mov	sl, r1
  141660:	e1a02006 	mov	r2, r6
  141664:	e0811006 	add	r1, r1, r6
  141668:	eaffff69 	b	141414 <twoway_strstr+0xec>
  14166c:	e59d3008 	ldr	r3, [sp, #8]
  141670:	e0453003 	sub	r3, r5, r3
  141674:	e58d300c 	str	r3, [sp, #12]
  141678:	eaffff8d 	b	1414b4 <twoway_strstr+0x18c>
  14167c:	e3e0c000 	mvn	ip, #0
  141680:	e3a00001 	mov	r0, #1
  141684:	e1a05003 	mov	r5, r3
  141688:	e1a0a00c 	mov	sl, ip
  14168c:	e58d0008 	str	r0, [sp, #8]
  141690:	eaffff70 	b	141458 <twoway_strstr+0x130>

00141694 <strstr>:
  141694:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141698:	e1a04001 	mov	r4, r1
  14169c:	e5d11000 	ldrb	r1, [r1]
  1416a0:	e1a03000 	mov	r3, r0
  1416a4:	e3510000 	cmp	r1, #0
  1416a8:	1a000001 	bne	1416b4 <strstr+0x20>
  1416ac:	e1a00003 	mov	r0, r3
  1416b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1416b4:	eb0009c5 	bl	143dd0 <strchr>
  1416b8:	e2503000 	subs	r3, r0, #0
  1416bc:	0afffffa 	beq	1416ac <strstr+0x18>
  1416c0:	e5d41001 	ldrb	r1, [r4, #1]
  1416c4:	e3510000 	cmp	r1, #0
  1416c8:	0afffff7 	beq	1416ac <strstr+0x18>
  1416cc:	e5d3c001 	ldrb	ip, [r3, #1]
  1416d0:	e35c0000 	cmp	ip, #0
  1416d4:	0a000051 	beq	141820 <strstr+0x18c>
  1416d8:	e5d4e002 	ldrb	lr, [r4, #2]
  1416dc:	e35e0000 	cmp	lr, #0
  1416e0:	0a000029 	beq	14178c <strstr+0xf8>
  1416e4:	e5d35002 	ldrb	r5, [r3, #2]
  1416e8:	e3550000 	cmp	r5, #0
  1416ec:	0a00004d 	beq	141828 <strstr+0x194>
  1416f0:	e5d47003 	ldrb	r7, [r4, #3]
  1416f4:	e3570000 	cmp	r7, #0
  1416f8:	0a000032 	beq	1417c8 <strstr+0x134>
  1416fc:	e5d36003 	ldrb	r6, [r3, #3]
  141700:	e3560000 	cmp	r6, #0
  141704:	0a000049 	beq	141830 <strstr+0x19c>
  141708:	e5d42004 	ldrb	r2, [r4, #4]
  14170c:	e3520000 	cmp	r2, #0
  141710:	0a000002 	beq	141720 <strstr+0x8c>
  141714:	e1a01004 	mov	r1, r4
  141718:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  14171c:	eaffff01 	b	141328 <twoway_strstr>
  141720:	e5d40000 	ldrb	r0, [r4]
  141724:	e4d32003 	ldrb	r2, [r3], #3
  141728:	e1800401 	orr	r0, r0, r1, lsl #8
  14172c:	e182240c 	orr	r2, r2, ip, lsl #8
  141730:	e180080e 	orr	r0, r0, lr, lsl #16
  141734:	e1822805 	orr	r2, r2, r5, lsl #16
  141738:	e180ec07 	orr	lr, r0, r7, lsl #24
  14173c:	e1825c06 	orr	r5, r2, r6, lsl #24
  141740:	e0252865 	eor	r2, r5, r5, ror #16
  141744:	e02e086e 	eor	r0, lr, lr, ror #16
  141748:	e1a02422 	lsr	r2, r2, #8
  14174c:	e1a00420 	lsr	r0, r0, #8
  141750:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  141754:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  141758:	e0222465 	eor	r2, r2, r5, ror #8
  14175c:	e020046e 	eor	r0, r0, lr, ror #8
  141760:	e1520000 	cmp	r2, r0
  141764:	1a000002 	bne	141774 <strstr+0xe0>
  141768:	ea000028 	b	141810 <strstr+0x17c>
  14176c:	e1500002 	cmp	r0, r2
  141770:	0a000026 	beq	141810 <strstr+0x17c>
  141774:	e5f31001 	ldrb	r1, [r3, #1]!
  141778:	e3510000 	cmp	r1, #0
  14177c:	e1812402 	orr	r2, r1, r2, lsl #8
  141780:	1afffff9 	bne	14176c <strstr+0xd8>
  141784:	e1a03001 	mov	r3, r1
  141788:	eaffffc7 	b	1416ac <strstr+0x18>
  14178c:	e5d40000 	ldrb	r0, [r4]
  141790:	e4d32001 	ldrb	r2, [r3], #1
  141794:	e1811400 	orr	r1, r1, r0, lsl #8
  141798:	e18c2402 	orr	r2, ip, r2, lsl #8
  14179c:	ea000005 	b	1417b8 <strstr+0x124>
  1417a0:	e5f30001 	ldrb	r0, [r3, #1]!
  1417a4:	e1802402 	orr	r2, r0, r2, lsl #8
  1417a8:	e1a02802 	lsl	r2, r2, #16
  1417ac:	e3500000 	cmp	r0, #0
  1417b0:	e1a02822 	lsr	r2, r2, #16
  1417b4:	0a000017 	beq	141818 <strstr+0x184>
  1417b8:	e1510002 	cmp	r1, r2
  1417bc:	1afffff7 	bne	1417a0 <strstr+0x10c>
  1417c0:	e2433001 	sub	r3, r3, #1
  1417c4:	eaffffb8 	b	1416ac <strstr+0x18>
  1417c8:	e5d46000 	ldrb	r6, [r4]
  1417cc:	e4d34002 	ldrb	r4, [r3], #2
  1417d0:	e1a00801 	lsl	r0, r1, #16
  1417d4:	e1a0280c 	lsl	r2, ip, #16
  1417d8:	e1800c06 	orr	r0, r0, r6, lsl #24
  1417dc:	e1822c04 	orr	r2, r2, r4, lsl #24
  1417e0:	e180040e 	orr	r0, r0, lr, lsl #8
  1417e4:	e1822405 	orr	r2, r2, r5, lsl #8
  1417e8:	ea000004 	b	141800 <strstr+0x16c>
  1417ec:	e5f31001 	ldrb	r1, [r3, #1]!
  1417f0:	e1812002 	orr	r2, r1, r2
  1417f4:	e3510000 	cmp	r1, #0
  1417f8:	e1a02402 	lsl	r2, r2, #8
  1417fc:	0affffe0 	beq	141784 <strstr+0xf0>
  141800:	e1500002 	cmp	r0, r2
  141804:	1afffff8 	bne	1417ec <strstr+0x158>
  141808:	e2433002 	sub	r3, r3, #2
  14180c:	eaffffa6 	b	1416ac <strstr+0x18>
  141810:	e2433003 	sub	r3, r3, #3
  141814:	eaffffa4 	b	1416ac <strstr+0x18>
  141818:	e1a03000 	mov	r3, r0
  14181c:	eaffffa2 	b	1416ac <strstr+0x18>
  141820:	e1a0300c 	mov	r3, ip
  141824:	eaffffa0 	b	1416ac <strstr+0x18>
  141828:	e1a03005 	mov	r3, r5
  14182c:	eaffff9e 	b	1416ac <strstr+0x18>
  141830:	e1a03006 	mov	r3, r6
  141834:	eaffff9c 	b	1416ac <strstr+0x18>

00141838 <__lock>:
  141838:	e59f3150 	ldr	r3, [pc, #336]	; 141990 <__lock+0x158>
  14183c:	e593300c 	ldr	r3, [r3, #12]
  141840:	e3530000 	cmp	r3, #0
  141844:	012fff1e 	bxeq	lr
  141848:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14184c:	e1a04000 	mov	r4, r0
  141850:	e59f613c 	ldr	r6, [pc, #316]	; 141994 <__lock+0x15c>
  141854:	e3a00000 	mov	r0, #0
  141858:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  14185c:	e1a02004 	mov	r2, r4
  141860:	e5963000 	ldr	r3, [r6]
  141864:	e12fff33 	blx	r3
  141868:	e3500000 	cmp	r0, #0
  14186c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141870:	e5945000 	ldr	r5, [r4]
  141874:	e3550000 	cmp	r5, #0
  141878:	0afffff5 	beq	141854 <__lock+0x1c>
  14187c:	e3a0800a 	mov	r8, #10
  141880:	e3550000 	cmp	r5, #0
  141884:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141888:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  14188c:	e1a00005 	mov	r0, r5
  141890:	e1a01007 	mov	r1, r7
  141894:	e1a02004 	mov	r2, r4
  141898:	e5963000 	ldr	r3, [r6]
  14189c:	e12fff33 	blx	r3
  1418a0:	e3500000 	cmp	r0, #0
  1418a4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1418a8:	e5943000 	ldr	r3, [r4]
  1418ac:	e1550003 	cmp	r5, r3
  1418b0:	0afffff5 	beq	14188c <__lock+0x54>
  1418b4:	e2588001 	subs	r8, r8, #1
  1418b8:	e1a05003 	mov	r5, r3
  1418bc:	1affffef 	bne	141880 <__lock+0x48>
  1418c0:	e5947000 	ldr	r7, [r4]
  1418c4:	e2875001 	add	r5, r7, #1
  1418c8:	ea000002 	b	1418d8 <__lock+0xa0>
  1418cc:	e5943000 	ldr	r3, [r4]
  1418d0:	e1570003 	cmp	r7, r3
  1418d4:	1afffff9 	bne	1418c0 <__lock+0x88>
  1418d8:	e1a00007 	mov	r0, r7
  1418dc:	e1a01005 	mov	r1, r5
  1418e0:	e1a02004 	mov	r2, r4
  1418e4:	e5963000 	ldr	r3, [r6]
  1418e8:	e12fff33 	blx	r3
  1418ec:	e3500000 	cmp	r0, #0
  1418f0:	1afffff5 	bne	1418cc <__lock+0x94>
  1418f4:	e3550000 	cmp	r5, #0
  1418f8:	ba00000d 	blt	141934 <__lock+0xfc>
  1418fc:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141900:	e1a00005 	mov	r0, r5
  141904:	e1a01007 	mov	r1, r7
  141908:	e1a02004 	mov	r2, r4
  14190c:	e5963000 	ldr	r3, [r6]
  141910:	e12fff33 	blx	r3
  141914:	e3500000 	cmp	r0, #0
  141918:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  14191c:	e5943000 	ldr	r3, [r4]
  141920:	e1550003 	cmp	r5, r3
  141924:	0afffff5 	beq	141900 <__lock+0xc8>
  141928:	e1a05003 	mov	r5, r3
  14192c:	e3550000 	cmp	r5, #0
  141930:	aafffff1 	bge	1418fc <__lock+0xc4>
  141934:	e3a000f0 	mov	r0, #240	; 0xf0
  141938:	ebffe9d8 	bl	13c0a0 <get_rtt_syscall>
  14193c:	e2507000 	subs	r7, r0, #0
  141940:	0a000006 	beq	141960 <__lock+0x128>
  141944:	e3a03000 	mov	r3, #0
  141948:	e1a02005 	mov	r2, r5
  14194c:	e3a01080 	mov	r1, #128	; 0x80
  141950:	e1a00004 	mov	r0, r4
  141954:	e12fff37 	blx	r7
  141958:	e3700026 	cmn	r0, #38	; 0x26
  14195c:	0a000001 	beq	141968 <__lock+0x130>
  141960:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  141964:	eaffffe4 	b	1418fc <__lock+0xc4>
  141968:	e3a000f0 	mov	r0, #240	; 0xf0
  14196c:	ebffe9cb 	bl	13c0a0 <get_rtt_syscall>
  141970:	e2507000 	subs	r7, r0, #0
  141974:	0afffff9 	beq	141960 <__lock+0x128>
  141978:	e3a03000 	mov	r3, #0
  14197c:	e1a02005 	mov	r2, r5
  141980:	e1a01003 	mov	r1, r3
  141984:	e1a00004 	mov	r0, r4
  141988:	e12fff37 	blx	r7
  14198c:	eafffff3 	b	141960 <__lock+0x128>
  141990:	0015d05c 	.word	0x0015d05c
  141994:	0014d3d8 	.word	0x0014d3d8

00141998 <__unlock>:
  141998:	e5903000 	ldr	r3, [r0]
  14199c:	e3530000 	cmp	r3, #0
  1419a0:	a12fff1e 	bxge	lr
  1419a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1419a8:	e1a05000 	mov	r5, r0
  1419ac:	e59f7084 	ldr	r7, [pc, #132]	; 141a38 <__unlock+0xa0>
  1419b0:	e5954000 	ldr	r4, [r5]
  1419b4:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  1419b8:	ea000002 	b	1419c8 <__unlock+0x30>
  1419bc:	e5953000 	ldr	r3, [r5]
  1419c0:	e1540003 	cmp	r4, r3
  1419c4:	1afffff9 	bne	1419b0 <__unlock+0x18>
  1419c8:	e1a00004 	mov	r0, r4
  1419cc:	e1a01006 	mov	r1, r6
  1419d0:	e1a02005 	mov	r2, r5
  1419d4:	e5973000 	ldr	r3, [r7]
  1419d8:	e12fff33 	blx	r3
  1419dc:	e3500000 	cmp	r0, #0
  1419e0:	1afffff5 	bne	1419bc <__unlock+0x24>
  1419e4:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  1419e8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1419ec:	e3a000f0 	mov	r0, #240	; 0xf0
  1419f0:	ebffe9aa 	bl	13c0a0 <get_rtt_syscall>
  1419f4:	e2503000 	subs	r3, r0, #0
  1419f8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1419fc:	e3a02001 	mov	r2, #1
  141a00:	e3a01081 	mov	r1, #129	; 0x81
  141a04:	e1a00005 	mov	r0, r5
  141a08:	e12fff33 	blx	r3
  141a0c:	e3700026 	cmn	r0, #38	; 0x26
  141a10:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  141a14:	e3a000f0 	mov	r0, #240	; 0xf0
  141a18:	ebffe9a0 	bl	13c0a0 <get_rtt_syscall>
  141a1c:	e2503000 	subs	r3, r0, #0
  141a20:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141a24:	e3a02001 	mov	r2, #1
  141a28:	e1a00005 	mov	r0, r5
  141a2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141a30:	e1a01002 	mov	r1, r2
  141a34:	e12fff13 	bx	r3
  141a38:	0014d3d8 	.word	0x0014d3d8

00141a3c <__syscall_cp_c>:
  141a3c:	eaffe9c1 	b	13c148 <__syscall>

00141a40 <__syscall_cp>:
  141a40:	eaffe9c0 	b	13c148 <__syscall>

00141a44 <__wait>:
  141a44:	e3530000 	cmp	r3, #0
  141a48:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141a4c:	e3a03064 	mov	r3, #100	; 0x64
  141a50:	e1a04001 	mov	r4, r1
  141a54:	e1a07000 	mov	r7, r0
  141a58:	e1a08002 	mov	r8, r2
  141a5c:	13a09080 	movne	r9, #128	; 0x80
  141a60:	03a09000 	moveq	r9, #0
  141a64:	e59f1120 	ldr	r1, [pc, #288]	; 141b8c <__wait+0x148>
  141a68:	ea000006 	b	141a88 <__wait+0x44>
  141a6c:	e5972000 	ldr	r2, [r7]
  141a70:	e1520008 	cmp	r2, r8
  141a74:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141a78:	e591c000 	ldr	ip, [r1]
  141a7c:	e12fff3c 	blx	ip
  141a80:	e2533001 	subs	r3, r3, #1
  141a84:	0a00003d 	beq	141b80 <__wait+0x13c>
  141a88:	e3540000 	cmp	r4, #0
  141a8c:	0afffff6 	beq	141a6c <__wait+0x28>
  141a90:	e5942000 	ldr	r2, [r4]
  141a94:	e3520000 	cmp	r2, #0
  141a98:	0afffff3 	beq	141a6c <__wait+0x28>
  141a9c:	e59f60ec 	ldr	r6, [pc, #236]	; 141b90 <__wait+0x14c>
  141aa0:	e5945000 	ldr	r5, [r4]
  141aa4:	e285a001 	add	sl, r5, #1
  141aa8:	ea000002 	b	141ab8 <__wait+0x74>
  141aac:	e5943000 	ldr	r3, [r4]
  141ab0:	e1550003 	cmp	r5, r3
  141ab4:	1afffff9 	bne	141aa0 <__wait+0x5c>
  141ab8:	e1a00005 	mov	r0, r5
  141abc:	e1a0100a 	mov	r1, sl
  141ac0:	e1a02004 	mov	r2, r4
  141ac4:	e5963000 	ldr	r3, [r6]
  141ac8:	e12fff33 	blx	r3
  141acc:	e3500000 	cmp	r0, #0
  141ad0:	1afffff5 	bne	141aac <__wait+0x68>
  141ad4:	e5973000 	ldr	r3, [r7]
  141ad8:	e1530008 	cmp	r3, r8
  141adc:	1a000006 	bne	141afc <__wait+0xb8>
  141ae0:	e3a000f0 	mov	r0, #240	; 0xf0
  141ae4:	ebffe96d 	bl	13c0a0 <get_rtt_syscall>
  141ae8:	e2505000 	subs	r5, r0, #0
  141aec:	1a000012 	bne	141b3c <__wait+0xf8>
  141af0:	e5973000 	ldr	r3, [r7]
  141af4:	e1530008 	cmp	r3, r8
  141af8:	0afffff8 	beq	141ae0 <__wait+0x9c>
  141afc:	e3540000 	cmp	r4, #0
  141b00:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141b04:	e59f6084 	ldr	r6, [pc, #132]	; 141b90 <__wait+0x14c>
  141b08:	e5945000 	ldr	r5, [r4]
  141b0c:	e2457001 	sub	r7, r5, #1
  141b10:	e1a00005 	mov	r0, r5
  141b14:	e1a01007 	mov	r1, r7
  141b18:	e1a02004 	mov	r2, r4
  141b1c:	e5963000 	ldr	r3, [r6]
  141b20:	e12fff33 	blx	r3
  141b24:	e3500000 	cmp	r0, #0
  141b28:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141b2c:	e5943000 	ldr	r3, [r4]
  141b30:	e1550003 	cmp	r5, r3
  141b34:	0afffff5 	beq	141b10 <__wait+0xcc>
  141b38:	eafffff2 	b	141b08 <__wait+0xc4>
  141b3c:	e3a03000 	mov	r3, #0
  141b40:	e1a02008 	mov	r2, r8
  141b44:	e1a01009 	mov	r1, r9
  141b48:	e1a00007 	mov	r0, r7
  141b4c:	e12fff35 	blx	r5
  141b50:	e3700026 	cmn	r0, #38	; 0x26
  141b54:	1affffe5 	bne	141af0 <__wait+0xac>
  141b58:	e3a000f0 	mov	r0, #240	; 0xf0
  141b5c:	ebffe94f 	bl	13c0a0 <get_rtt_syscall>
  141b60:	e2505000 	subs	r5, r0, #0
  141b64:	0affffe1 	beq	141af0 <__wait+0xac>
  141b68:	e3a03000 	mov	r3, #0
  141b6c:	e1a02008 	mov	r2, r8
  141b70:	e1a01003 	mov	r1, r3
  141b74:	e1a00007 	mov	r0, r7
  141b78:	e12fff35 	blx	r5
  141b7c:	eaffffdb 	b	141af0 <__wait+0xac>
  141b80:	e3540000 	cmp	r4, #0
  141b84:	0affffd9 	beq	141af0 <__wait+0xac>
  141b88:	eaffffc3 	b	141a9c <__wait+0x58>
  141b8c:	0014d3d4 	.word	0x0014d3d4
  141b90:	0014d3d8 	.word	0x0014d3d8

00141b94 <__a_barrier_dummy>:
  141b94:	e12fff1e 	bx	lr

00141b98 <__a_barrier_oldkuser>:
  141b98:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141b9c:	e1a01000 	mov	r1, r0
  141ba0:	e1a0200d 	mov	r2, sp
  141ba4:	e59fc080 	ldr	ip, [pc, #128]	; 141c2c <__a_gettp_cp15+0x8>
  141ba8:	e1a0e00f 	mov	lr, pc
  141bac:	e1a0f00c 	mov	pc, ip
  141bb0:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  141bb4:	e12fff1e 	bx	lr

00141bb8 <__a_barrier_v6>:
  141bb8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141bbc:	e12fff1e 	bx	lr

00141bc0 <__a_barrier_v7>:
  141bc0:	f57ff05b 	dmb	ish
  141bc4:	e12fff1e 	bx	lr

00141bc8 <__a_cas_dummy>:
  141bc8:	e1a03000 	mov	r3, r0
  141bcc:	e5920000 	ldr	r0, [r2]
  141bd0:	e0530000 	subs	r0, r3, r0
  141bd4:	05821000 	streq	r1, [r2]
  141bd8:	e12fff1e 	bx	lr

00141bdc <__a_cas_v6>:
  141bdc:	e1a03000 	mov	r3, r0
  141be0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141be4:	e1920f9f 	ldrex	r0, [r2]
  141be8:	e0530000 	subs	r0, r3, r0
  141bec:	01820f91 	strexeq	r0, r1, [r2]
  141bf0:	03300001 	teqeq	r0, #1
  141bf4:	0afffffa 	beq	141be4 <__a_cas_v6+0x8>
  141bf8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141bfc:	e12fff1e 	bx	lr

00141c00 <__a_cas_v7>:
  141c00:	e1a03000 	mov	r3, r0
  141c04:	f57ff05b 	dmb	ish
  141c08:	e1920f9f 	ldrex	r0, [r2]
  141c0c:	e0530000 	subs	r0, r3, r0
  141c10:	01820f91 	strexeq	r0, r1, [r2]
  141c14:	03300001 	teqeq	r0, #1
  141c18:	0afffffa 	beq	141c08 <__a_cas_v7+0x8>
  141c1c:	f57ff05b 	dmb	ish
  141c20:	e12fff1e 	bx	lr

00141c24 <__a_gettp_cp15>:
  141c24:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  141c28:	e12fff1e 	bx	lr
  141c2c:	ffff0fc0 	.word	0xffff0fc0

00141c30 <__wake.constprop.2>:
  141c30:	e92d4070 	push	{r4, r5, r6, lr}
  141c34:	e3510000 	cmp	r1, #0
  141c38:	e1a04000 	mov	r4, r0
  141c3c:	e3a000f0 	mov	r0, #240	; 0xf0
  141c40:	03a05001 	moveq	r5, #1
  141c44:	13a05081 	movne	r5, #129	; 0x81
  141c48:	ebffe914 	bl	13c0a0 <get_rtt_syscall>
  141c4c:	e2503000 	subs	r3, r0, #0
  141c50:	08bd8070 	popeq	{r4, r5, r6, pc}
  141c54:	e1a01005 	mov	r1, r5
  141c58:	e3a02001 	mov	r2, #1
  141c5c:	e1a00004 	mov	r0, r4
  141c60:	e12fff33 	blx	r3
  141c64:	e3700026 	cmn	r0, #38	; 0x26
  141c68:	18bd8070 	popne	{r4, r5, r6, pc}
  141c6c:	e3a000f0 	mov	r0, #240	; 0xf0
  141c70:	ebffe90a 	bl	13c0a0 <get_rtt_syscall>
  141c74:	e2503000 	subs	r3, r0, #0
  141c78:	08bd8070 	popeq	{r4, r5, r6, pc}
  141c7c:	e3a02001 	mov	r2, #1
  141c80:	e1a00004 	mov	r0, r4
  141c84:	e8bd4070 	pop	{r4, r5, r6, lr}
  141c88:	e1a01002 	mov	r1, r2
  141c8c:	e12fff13 	bx	r3

00141c90 <__acquire_ptc>:
  141c90:	e12fff1e 	bx	lr

00141c94 <__tl_lock>:
  141c94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141c98:	e59f3070 	ldr	r3, [pc, #112]	; 141d10 <__tl_lock+0x7c>
  141c9c:	e59f4070 	ldr	r4, [pc, #112]	; 141d14 <__tl_lock+0x80>
  141ca0:	e5930000 	ldr	r0, [r3]
  141ca4:	e5943000 	ldr	r3, [r4]
  141ca8:	e12fff30 	blx	r0
  141cac:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141cb0:	e1550003 	cmp	r5, r3
  141cb4:	0a000010 	beq	141cfc <__tl_lock+0x68>
  141cb8:	e59f6058 	ldr	r6, [pc, #88]	; 141d18 <__tl_lock+0x84>
  141cbc:	e59f7058 	ldr	r7, [pc, #88]	; 141d1c <__tl_lock+0x88>
  141cc0:	e3a00000 	mov	r0, #0
  141cc4:	e1a01005 	mov	r1, r5
  141cc8:	e1a02004 	mov	r2, r4
  141ccc:	e5963000 	ldr	r3, [r6]
  141cd0:	e12fff33 	blx	r3
  141cd4:	e3500000 	cmp	r0, #0
  141cd8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141cdc:	e5942000 	ldr	r2, [r4]
  141ce0:	e3520000 	cmp	r2, #0
  141ce4:	0afffff5 	beq	141cc0 <__tl_lock+0x2c>
  141ce8:	e3a03000 	mov	r3, #0
  141cec:	e1a01007 	mov	r1, r7
  141cf0:	e1a00004 	mov	r0, r4
  141cf4:	ebffff52 	bl	141a44 <__wait>
  141cf8:	eafffff0 	b	141cc0 <__tl_lock+0x2c>
  141cfc:	e59f201c 	ldr	r2, [pc, #28]	; 141d20 <__tl_lock+0x8c>
  141d00:	e5923000 	ldr	r3, [r2]
  141d04:	e2833001 	add	r3, r3, #1
  141d08:	e5823000 	str	r3, [r2]
  141d0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  141d10:	0014d3dc 	.word	0x0014d3dc
  141d14:	0015d0a4 	.word	0x0015d0a4
  141d18:	0014d3d8 	.word	0x0014d3d8
  141d1c:	0014f46c 	.word	0x0014f46c
  141d20:	0014f468 	.word	0x0014f468

00141d24 <__tl_unlock>:
  141d24:	e59f2090 	ldr	r2, [pc, #144]	; 141dbc <__tl_unlock+0x98>
  141d28:	e5923000 	ldr	r3, [r2]
  141d2c:	e3530000 	cmp	r3, #0
  141d30:	1a00001e 	bne	141db0 <__tl_unlock+0x8c>
  141d34:	e59f2084 	ldr	r2, [pc, #132]	; 141dc0 <__tl_unlock+0x9c>
  141d38:	e92d4010 	push	{r4, lr}
  141d3c:	e592c000 	ldr	ip, [r2]
  141d40:	e12fff3c 	blx	ip
  141d44:	e59f4078 	ldr	r4, [pc, #120]	; 141dc4 <__tl_unlock+0xa0>
  141d48:	e592c000 	ldr	ip, [r2]
  141d4c:	e5843000 	str	r3, [r4]
  141d50:	e12fff3c 	blx	ip
  141d54:	e59f306c 	ldr	r3, [pc, #108]	; 141dc8 <__tl_unlock+0xa4>
  141d58:	e5933000 	ldr	r3, [r3]
  141d5c:	e3530000 	cmp	r3, #0
  141d60:	08bd8010 	popeq	{r4, pc}
  141d64:	e3a000f0 	mov	r0, #240	; 0xf0
  141d68:	ebffe8cc 	bl	13c0a0 <get_rtt_syscall>
  141d6c:	e2503000 	subs	r3, r0, #0
  141d70:	08bd8010 	popeq	{r4, pc}
  141d74:	e3a02001 	mov	r2, #1
  141d78:	e1a00004 	mov	r0, r4
  141d7c:	e1a01002 	mov	r1, r2
  141d80:	e12fff33 	blx	r3
  141d84:	e3700026 	cmn	r0, #38	; 0x26
  141d88:	18bd8010 	popne	{r4, pc}
  141d8c:	e3a000f0 	mov	r0, #240	; 0xf0
  141d90:	ebffe8c2 	bl	13c0a0 <get_rtt_syscall>
  141d94:	e2503000 	subs	r3, r0, #0
  141d98:	08bd8010 	popeq	{r4, pc}
  141d9c:	e3a02001 	mov	r2, #1
  141da0:	e1a00004 	mov	r0, r4
  141da4:	e8bd4010 	pop	{r4, lr}
  141da8:	e1a01002 	mov	r1, r2
  141dac:	e12fff13 	bx	r3
  141db0:	e2433001 	sub	r3, r3, #1
  141db4:	e5823000 	str	r3, [r2]
  141db8:	e12fff1e 	bx	lr
  141dbc:	0014f468 	.word	0x0014f468
  141dc0:	0014d3d4 	.word	0x0014d3d4
  141dc4:	0015d0a4 	.word	0x0015d0a4
  141dc8:	0014f46c 	.word	0x0014f46c

00141dcc <__tl_sync>:
  141dcc:	e59f3084 	ldr	r3, [pc, #132]	; 141e58 <__tl_sync+0x8c>
  141dd0:	e92d4070 	push	{r4, r5, r6, lr}
  141dd4:	e593c000 	ldr	ip, [r3]
  141dd8:	e12fff3c 	blx	ip
  141ddc:	e59f4078 	ldr	r4, [pc, #120]	; 141e5c <__tl_sync+0x90>
  141de0:	e5942000 	ldr	r2, [r4]
  141de4:	e3520000 	cmp	r2, #0
  141de8:	08bd8070 	popeq	{r4, r5, r6, pc}
  141dec:	e59f506c 	ldr	r5, [pc, #108]	; 141e60 <__tl_sync+0x94>
  141df0:	e3a03000 	mov	r3, #0
  141df4:	e1a01005 	mov	r1, r5
  141df8:	e1a00004 	mov	r0, r4
  141dfc:	ebffff10 	bl	141a44 <__wait>
  141e00:	e5953000 	ldr	r3, [r5]
  141e04:	e3530000 	cmp	r3, #0
  141e08:	08bd8070 	popeq	{r4, r5, r6, pc}
  141e0c:	e3a000f0 	mov	r0, #240	; 0xf0
  141e10:	ebffe8a2 	bl	13c0a0 <get_rtt_syscall>
  141e14:	e2503000 	subs	r3, r0, #0
  141e18:	08bd8070 	popeq	{r4, r5, r6, pc}
  141e1c:	e3a02001 	mov	r2, #1
  141e20:	e1a00004 	mov	r0, r4
  141e24:	e1a01002 	mov	r1, r2
  141e28:	e12fff33 	blx	r3
  141e2c:	e3700026 	cmn	r0, #38	; 0x26
  141e30:	18bd8070 	popne	{r4, r5, r6, pc}
  141e34:	e3a000f0 	mov	r0, #240	; 0xf0
  141e38:	ebffe898 	bl	13c0a0 <get_rtt_syscall>
  141e3c:	e2503000 	subs	r3, r0, #0
  141e40:	08bd8070 	popeq	{r4, r5, r6, pc}
  141e44:	e3a02001 	mov	r2, #1
  141e48:	e1a00004 	mov	r0, r4
  141e4c:	e8bd4070 	pop	{r4, r5, r6, lr}
  141e50:	e1a01002 	mov	r1, r2
  141e54:	e12fff13 	bx	r3
  141e58:	0014d3d4 	.word	0x0014d3d4
  141e5c:	0015d0a4 	.word	0x0015d0a4
  141e60:	0014f46c 	.word	0x0014f46c

00141e64 <__pthread_exit>:
  141e64:	e3a02000 	mov	r2, #0
  141e68:	e1a0c000 	mov	ip, r0
  141e6c:	e3a01001 	mov	r1, #1
  141e70:	e59f3224 	ldr	r3, [pc, #548]	; 14209c <__pthread_exit+0x238>
  141e74:	e92d4880 	push	{r7, fp, lr}
  141e78:	e5930000 	ldr	r0, [r3]
  141e7c:	e12fff30 	blx	r0
  141e80:	e2404078 	sub	r4, r0, #120	; 0x78
  141e84:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  141e88:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  141e8c:	e1530002 	cmp	r3, r2
  141e90:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  141e94:	e584c044 	str	ip, [r4, #68]	; 0x44
  141e98:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  141e9c:	0a000006 	beq	141ebc <__pthread_exit+0x58>
  141ea0:	e9930005 	ldmib	r3, {r0, r2}
  141ea4:	e5933000 	ldr	r3, [r3]
  141ea8:	e5842048 	str	r2, [r4, #72]	; 0x48
  141eac:	e12fff33 	blx	r3
  141eb0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  141eb4:	e3530000 	cmp	r3, #0
  141eb8:	1afffff8 	bne	141ea0 <__pthread_exit+0x3c>
  141ebc:	e2849064 	add	r9, r4, #100	; 0x64
  141ec0:	ebffff72 	bl	141c90 <__acquire_ptc>
  141ec4:	e1a00009 	mov	r0, r9
  141ec8:	ebfffe5a 	bl	141838 <__lock>
  141ecc:	e28d0008 	add	r0, sp, #8
  141ed0:	eb0004a6 	bl	143170 <__block_app_sigs>
  141ed4:	ebffff6e 	bl	141c94 <__tl_lock>
  141ed8:	e594300c 	ldr	r3, [r4, #12]
  141edc:	e1530004 	cmp	r3, r4
  141ee0:	0a000041 	beq	141fec <__pthread_exit+0x188>
  141ee4:	e59f11b4 	ldr	r1, [pc, #436]	; 1420a0 <__pthread_exit+0x23c>
  141ee8:	e5940008 	ldr	r0, [r4, #8]
  141eec:	e591200c 	ldr	r2, [r1, #12]
  141ef0:	e59f81ac 	ldr	r8, [pc, #428]	; 1420a4 <__pthread_exit+0x240>
  141ef4:	e2422001 	sub	r2, r2, #1
  141ef8:	e581200c 	str	r2, [r1, #12]
  141efc:	e5830008 	str	r0, [r3, #8]
  141f00:	e5942008 	ldr	r2, [r4, #8]
  141f04:	e582300c 	str	r3, [r2, #12]
  141f08:	e584400c 	str	r4, [r4, #12]
  141f0c:	e5844008 	str	r4, [r4, #8]
  141f10:	eb00028a 	bl	142940 <__vm_lock>
  141f14:	e2843050 	add	r3, r4, #80	; 0x50
  141f18:	e58d3004 	str	r3, [sp, #4]
  141f1c:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  141f20:	e3560000 	cmp	r6, #0
  141f24:	0a000020 	beq	141fac <__pthread_exit+0x148>
  141f28:	e59d3004 	ldr	r3, [sp, #4]
  141f2c:	e1560003 	cmp	r6, r3
  141f30:	0a00001d 	beq	141fac <__pthread_exit+0x148>
  141f34:	e1a07006 	mov	r7, r6
  141f38:	e516b008 	ldr	fp, [r6, #-8]
  141f3c:	e516a010 	ldr	sl, [r6, #-16]
  141f40:	e5846058 	str	r6, [r4, #88]	; 0x58
  141f44:	e417300c 	ldr	r3, [r7], #-12
  141f48:	e5843050 	str	r3, [r4, #80]	; 0x50
  141f4c:	e516500c 	ldr	r5, [r6, #-12]
  141f50:	ea000002 	b	141f60 <__pthread_exit+0xfc>
  141f54:	e516300c 	ldr	r3, [r6, #-12]
  141f58:	e1550003 	cmp	r5, r3
  141f5c:	1afffffa 	bne	141f4c <__pthread_exit+0xe8>
  141f60:	e1a00005 	mov	r0, r5
  141f64:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  141f68:	e1a02007 	mov	r2, r7
  141f6c:	e5983000 	ldr	r3, [r8]
  141f70:	e12fff33 	blx	r3
  141f74:	e3500000 	cmp	r0, #0
  141f78:	1afffff5 	bne	141f54 <__pthread_exit+0xf0>
  141f7c:	e29bb000 	adds	fp, fp, #0
  141f80:	13a0b001 	movne	fp, #1
  141f84:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  141f88:	e5840058 	str	r0, [r4, #88]	; 0x58
  141f8c:	0affffe2 	beq	141f1c <__pthread_exit+0xb8>
  141f90:	e1e0100a 	mvn	r1, sl
  141f94:	e1a00007 	mov	r0, r7
  141f98:	e2011080 	and	r1, r1, #128	; 0x80
  141f9c:	ebffff23 	bl	141c30 <__wake.constprop.2>
  141fa0:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  141fa4:	e3560000 	cmp	r6, #0
  141fa8:	1affffde 	bne	141f28 <__pthread_exit+0xc4>
  141fac:	eb000276 	bl	14298c <__vm_unlock>
  141fb0:	e2845024 	add	r5, r4, #36	; 0x24
  141fb4:	ebffff35 	bl	141c90 <__acquire_ptc>
  141fb8:	ebffff34 	bl	141c90 <__acquire_ptc>
  141fbc:	ea000002 	b	141fcc <__pthread_exit+0x168>
  141fc0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  141fc4:	e3530001 	cmp	r3, #1
  141fc8:	1a00000e 	bne	142008 <__pthread_exit+0x1a4>
  141fcc:	e3a00001 	mov	r0, #1
  141fd0:	e3a01000 	mov	r1, #0
  141fd4:	e1a02005 	mov	r2, r5
  141fd8:	e5983000 	ldr	r3, [r8]
  141fdc:	e12fff33 	blx	r3
  141fe0:	e1500001 	cmp	r0, r1
  141fe4:	1afffff5 	bne	141fc0 <__pthread_exit+0x15c>
  141fe8:	ea000008 	b	142010 <__pthread_exit+0x1ac>
  141fec:	ebffff4c 	bl	141d24 <__tl_unlock>
  141ff0:	e28d0008 	add	r0, sp, #8
  141ff4:	eb00046b 	bl	1431a8 <__restore_sigs>
  141ff8:	e1a00009 	mov	r0, r9
  141ffc:	ebfffe65 	bl	141998 <__unlock>
  142000:	e3a00000 	mov	r0, #0
  142004:	ebffdb37 	bl	138ce8 <exit>
  142008:	e3530002 	cmp	r3, #2
  14200c:	0a00000d 	beq	142048 <__pthread_exit+0x1e4>
  142010:	e1a00005 	mov	r0, r5
  142014:	e3a01001 	mov	r1, #1
  142018:	ebffff04 	bl	141c30 <__wake.constprop.2>
  14201c:	e3a03000 	mov	r3, #0
  142020:	e1a00009 	mov	r0, r9
  142024:	e584301c 	str	r3, [r4, #28]
  142028:	ebfffe5a 	bl	141998 <__unlock>
  14202c:	e3a00001 	mov	r0, #1
  142030:	ebffe81a 	bl	13c0a0 <get_rtt_syscall>
  142034:	e2503000 	subs	r3, r0, #0
  142038:	0afffffb 	beq	14202c <__pthread_exit+0x1c8>
  14203c:	e3a00000 	mov	r0, #0
  142040:	e12fff33 	blx	r3
  142044:	eafffff8 	b	14202c <__pthread_exit+0x1c8>
  142048:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  14204c:	e1530001 	cmp	r3, r1
  142050:	0affffee 	beq	142010 <__pthread_exit+0x1ac>
  142054:	e28d0008 	add	r0, sp, #8
  142058:	eb000436 	bl	143138 <__block_all_sigs>
  14205c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  142060:	e3530000 	cmp	r3, #0
  142064:	1a000004 	bne	14207c <__pthread_exit+0x218>
  142068:	eb000225 	bl	142904 <__vm_wait>
  14206c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  142070:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  142074:	eb0007ec 	bl	14402c <__unmapself>
  142078:	eaffffe4 	b	142010 <__pthread_exit+0x1ac>
  14207c:	e59f0024 	ldr	r0, [pc, #36]	; 1420a8 <__pthread_exit+0x244>
  142080:	ebffe806 	bl	13c0a0 <get_rtt_syscall>
  142084:	e2503000 	subs	r3, r0, #0
  142088:	0afffff6 	beq	142068 <__pthread_exit+0x204>
  14208c:	e3a0100c 	mov	r1, #12
  142090:	e3a00000 	mov	r0, #0
  142094:	e12fff33 	blx	r3
  142098:	eafffff2 	b	142068 <__pthread_exit+0x204>
  14209c:	0014d3dc 	.word	0x0014d3dc
  1420a0:	0015d05c 	.word	0x0015d05c
  1420a4:	0014d3d8 	.word	0x0014d3d8
  1420a8:	00000152 	.word	0x00000152

001420ac <start>:
  1420ac:	e5902008 	ldr	r2, [r0, #8]
  1420b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1420b4:	e3520000 	cmp	r2, #0
  1420b8:	e1a08000 	mov	r8, r0
  1420bc:	0a000022 	beq	14214c <start+0xa0>
  1420c0:	e59f30d8 	ldr	r3, [pc, #216]	; 1421a0 <start+0xf4>
  1420c4:	e5926014 	ldr	r6, [r2, #20]
  1420c8:	e5930000 	ldr	r0, [r3]
  1420cc:	e12fff30 	blx	r0
  1420d0:	e2409078 	sub	r9, r0, #120	; 0x78
  1420d4:	e3a0009c 	mov	r0, #156	; 0x9c
  1420d8:	e599501c 	ldr	r5, [r9, #28]
  1420dc:	e2824018 	add	r4, r2, #24
  1420e0:	ebffe7ee 	bl	13c0a0 <get_rtt_syscall>
  1420e4:	e250a000 	subs	sl, r0, #0
  1420e8:	0a000004 	beq	142100 <start+0x54>
  1420ec:	e1a02004 	mov	r2, r4
  1420f0:	e1a01006 	mov	r1, r6
  1420f4:	e1a00005 	mov	r0, r5
  1420f8:	e12fff3a 	blx	sl
  1420fc:	e1a0a000 	mov	sl, r0
  142100:	e598500c 	ldr	r5, [r8, #12]
  142104:	e59f7098 	ldr	r7, [pc, #152]	; 1421a4 <start+0xf8>
  142108:	e26a6000 	rsb	r6, sl, #0
  14210c:	e5954000 	ldr	r4, [r5]
  142110:	ea000002 	b	142120 <start+0x74>
  142114:	e5953000 	ldr	r3, [r5]
  142118:	e1540003 	cmp	r4, r3
  14211c:	1afffffa 	bne	14210c <start+0x60>
  142120:	e1a00004 	mov	r0, r4
  142124:	e1a01006 	mov	r1, r6
  142128:	e1a02005 	mov	r2, r5
  14212c:	e5973000 	ldr	r3, [r7]
  142130:	e12fff33 	blx	r3
  142134:	e3500000 	cmp	r0, #0
  142138:	1afffff5 	bne	142114 <start+0x68>
  14213c:	e3740002 	cmn	r4, #2
  142140:	0a000012 	beq	142190 <start+0xe4>
  142144:	e35a0000 	cmp	sl, #0
  142148:	1a00000c 	bne	142180 <start+0xd4>
  14214c:	e3a000af 	mov	r0, #175	; 0xaf
  142150:	ebffe7d2 	bl	13c0a0 <get_rtt_syscall>
  142154:	e2504000 	subs	r4, r0, #0
  142158:	e2881010 	add	r1, r8, #16
  14215c:	0a000003 	beq	142170 <start+0xc4>
  142160:	e3a03008 	mov	r3, #8
  142164:	e3a02000 	mov	r2, #0
  142168:	e3a00002 	mov	r0, #2
  14216c:	e12fff34 	blx	r4
  142170:	e5983000 	ldr	r3, [r8]
  142174:	e5980004 	ldr	r0, [r8, #4]
  142178:	e12fff33 	blx	r3
  14217c:	ebffff38 	bl	141e64 <__pthread_exit>
  142180:	e3a03002 	mov	r3, #2
  142184:	e3a00000 	mov	r0, #0
  142188:	e5893024 	str	r3, [r9, #36]	; 0x24
  14218c:	ebffff34 	bl	141e64 <__pthread_exit>
  142190:	e3a01001 	mov	r1, #1
  142194:	e598000c 	ldr	r0, [r8, #12]
  142198:	ebfffea4 	bl	141c30 <__wake.constprop.2>
  14219c:	eaffffe8 	b	142144 <start+0x98>
  1421a0:	0014d3dc 	.word	0x0014d3dc
  1421a4:	0014d3d8 	.word	0x0014d3d8

001421a8 <start_c11>:
  1421a8:	e5903000 	ldr	r3, [r0]
  1421ac:	e92d4010 	push	{r4, lr}
  1421b0:	e5900004 	ldr	r0, [r0, #4]
  1421b4:	e12fff33 	blx	r3
  1421b8:	ebffff29 	bl	141e64 <__pthread_exit>

001421bc <__do_cleanup_push>:
  1421bc:	e1a03000 	mov	r3, r0
  1421c0:	e59f2018 	ldr	r2, [pc, #24]	; 1421e0 <__do_cleanup_push+0x24>
  1421c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1421c8:	e5920000 	ldr	r0, [r2]
  1421cc:	e12fff30 	blx	r0
  1421d0:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  1421d4:	e5832008 	str	r2, [r3, #8]
  1421d8:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1421dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1421e0:	0014d3dc 	.word	0x0014d3dc

001421e4 <__do_cleanup_pop>:
  1421e4:	e5903008 	ldr	r3, [r0, #8]
  1421e8:	e59f2010 	ldr	r2, [pc, #16]	; 142200 <__do_cleanup_pop+0x1c>
  1421ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1421f0:	e5920000 	ldr	r0, [r2]
  1421f4:	e12fff30 	blx	r0
  1421f8:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1421fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  142200:	0014d3dc 	.word	0x0014d3dc

00142204 <__pthread_create>:
  142204:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142208:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  14220c:	e58d001c 	str	r0, [sp, #28]
  142210:	e58d2014 	str	r2, [sp, #20]
  142214:	e1a09001 	mov	r9, r1
  142218:	e28d0034 	add	r0, sp, #52	; 0x34
  14221c:	e3a02024 	mov	r2, #36	; 0x24
  142220:	e3a01000 	mov	r1, #0
  142224:	e58d3018 	str	r3, [sp, #24]
  142228:	ebfffb4d 	bl	140f64 <memset>
  14222c:	e3e03000 	mvn	r3, #0
  142230:	e59f656c 	ldr	r6, [pc, #1388]	; 1427a4 <__pthread_create+0x5a0>
  142234:	e58d3028 	str	r3, [sp, #40]	; 0x28
  142238:	e5963000 	ldr	r3, [r6]
  14223c:	e3530000 	cmp	r3, #0
  142240:	03a00026 	moveq	r0, #38	; 0x26
  142244:	0a0000a3 	beq	1424d8 <__pthread_create+0x2d4>
  142248:	e59f3558 	ldr	r3, [pc, #1368]	; 1427a8 <__pthread_create+0x5a4>
  14224c:	e5964004 	ldr	r4, [r6, #4]
  142250:	e5930000 	ldr	r0, [r3]
  142254:	e12fff30 	blx	r0
  142258:	e3540000 	cmp	r4, #0
  14225c:	e240a078 	sub	sl, r0, #120	; 0x78
  142260:	0a0000da 	beq	1425d0 <__pthread_create+0x3cc>
  142264:	e2493001 	sub	r3, r9, #1
  142268:	e3730003 	cmn	r3, #3
  14226c:	9a00009b 	bls	1424e0 <__pthread_create+0x2dc>
  142270:	ebfffe86 	bl	141c90 <__acquire_ptc>
  142274:	e59f2530 	ldr	r2, [pc, #1328]	; 1427ac <__pthread_create+0x5a8>
  142278:	e59f3530 	ldr	r3, [pc, #1328]	; 1427b0 <__pthread_create+0x5ac>
  14227c:	e5927000 	ldr	r7, [r2]
  142280:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142284:	e5933000 	ldr	r3, [r3]
  142288:	e3520000 	cmp	r2, #0
  14228c:	e58d7034 	str	r7, [sp, #52]	; 0x34
  142290:	e58d3038 	str	r3, [sp, #56]	; 0x38
  142294:	e5960018 	ldr	r0, [r6, #24]
  142298:	0a00009e 	beq	142518 <__pthread_create+0x314>
  14229c:	e59f4510 	ldr	r4, [pc, #1296]	; 1427b4 <__pthread_create+0x5b0>
  1422a0:	e1a031a7 	lsr	r3, r7, #3
  1422a4:	e5941000 	ldr	r1, [r4]
  1422a8:	e3c2500f 	bic	r5, r2, #15
  1422ac:	e0811000 	add	r1, r1, r0
  1422b0:	e3510b02 	cmp	r1, #2048	; 0x800
  1422b4:	23a0c000 	movcs	ip, #0
  1422b8:	33a0c001 	movcc	ip, #1
  1422bc:	e1530001 	cmp	r3, r1
  1422c0:	93a0c000 	movls	ip, #0
  1422c4:	e0423007 	sub	r3, r2, r7
  1422c8:	e35c0000 	cmp	ip, #0
  1422cc:	e58d3020 	str	r3, [sp, #32]
  1422d0:	1a000111 	bne	14271c <__pthread_create+0x518>
  1422d4:	e2817eff 	add	r7, r1, #4080	; 0xff0
  1422d8:	e287700f 	add	r7, r7, #15
  1422dc:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  1422e0:	e3c7700f 	bic	r7, r7, #15
  1422e4:	e3a00000 	mov	r0, #0
  1422e8:	e3a01000 	mov	r1, #0
  1422ec:	e3e03000 	mvn	r3, #0
  1422f0:	e58d0008 	str	r0, [sp, #8]
  1422f4:	e58d100c 	str	r1, [sp, #12]
  1422f8:	e58d3000 	str	r3, [sp]
  1422fc:	e3a02003 	mov	r2, #3
  142300:	e3a03022 	mov	r3, #34	; 0x22
  142304:	e1a01007 	mov	r1, r7
  142308:	ebffeda8 	bl	13d9b0 <__mmap>
  14230c:	e3700001 	cmn	r0, #1
  142310:	e1a0b000 	mov	fp, r0
  142314:	0a0000ed 	beq	1426d0 <__pthread_create+0x4cc>
  142318:	e5943000 	ldr	r3, [r4]
  14231c:	e5960018 	ldr	r0, [r6, #24]
  142320:	e0473003 	sub	r3, r7, r3
  142324:	e08b3003 	add	r3, fp, r3
  142328:	e3550000 	cmp	r5, #0
  14232c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142330:	e2600000 	rsb	r0, r0, #0
  142334:	0a000108 	beq	14275c <__pthread_create+0x558>
  142338:	e3a08000 	mov	r8, #0
  14233c:	e0830000 	add	r0, r3, r0
  142340:	eb000202 	bl	142b50 <__copy_tls>
  142344:	e1a04000 	mov	r4, r0
  142348:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  14234c:	e5805038 	str	r5, [r0, #56]	; 0x38
  142350:	e3530000 	cmp	r3, #0
  142354:	e59f345c 	ldr	r3, [pc, #1116]	; 1427b8 <__pthread_create+0x5b4>
  142358:	e5808040 	str	r8, [r0, #64]	; 0x40
  14235c:	e580b030 	str	fp, [r0, #48]	; 0x30
  142360:	e5807034 	str	r7, [r0, #52]	; 0x34
  142364:	e5840000 	str	r0, [r4]
  142368:	e5803060 	str	r3, [r0, #96]	; 0x60
  14236c:	13a03002 	movne	r3, #2
  142370:	03a03001 	moveq	r3, #1
  142374:	e59d2020 	ldr	r2, [sp, #32]
  142378:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  14237c:	e0452002 	sub	r2, r5, r2
  142380:	e5803024 	str	r3, [r0, #36]	; 0x24
  142384:	e580203c 	str	r2, [r0, #60]	; 0x3c
  142388:	e59a2014 	ldr	r2, [sl, #20]
  14238c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142390:	e5802014 	str	r2, [r0, #20]
  142394:	e2802050 	add	r2, r0, #80	; 0x50
  142398:	e5802050 	str	r2, [r0, #80]	; 0x50
  14239c:	e59d2014 	ldr	r2, [sp, #20]
  1423a0:	e3c55003 	bic	r5, r5, #3
  1423a4:	e580104c 	str	r1, [r0, #76]	; 0x4c
  1423a8:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  1423ac:	e59d2018 	ldr	r2, [sp, #24]
  1423b0:	e3530000 	cmp	r3, #0
  1423b4:	128d3028 	addne	r3, sp, #40	; 0x28
  1423b8:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  1423bc:	128d2034 	addne	r2, sp, #52	; 0x34
  1423c0:	15052010 	strne	r2, [r5, #-16]
  1423c4:	05053010 	streq	r3, [r5, #-16]
  1423c8:	e505300c 	str	r3, [r5, #-12]
  1423cc:	e28d0058 	add	r0, sp, #88	; 0x58
  1423d0:	eb000366 	bl	143170 <__block_app_sigs>
  1423d4:	e28d1058 	add	r1, sp, #88	; 0x58
  1423d8:	e3a02008 	mov	r2, #8
  1423dc:	e2450008 	sub	r0, r5, #8
  1423e0:	ebfff9a7 	bl	140a84 <memcpy>
  1423e4:	e5153004 	ldr	r3, [r5, #-4]
  1423e8:	e2458018 	sub	r8, r5, #24
  1423ec:	e3c33001 	bic	r3, r3, #1
  1423f0:	e5053004 	str	r3, [r5, #-4]
  1423f4:	ebfffe26 	bl	141c94 <__tl_lock>
  1423f8:	e59f33bc 	ldr	r3, [pc, #956]	; 1427bc <__pthread_create+0x5b8>
  1423fc:	e596c00c 	ldr	ip, [r6, #12]
  142400:	e3790001 	cmn	r9, #1
  142404:	e59f13b4 	ldr	r1, [pc, #948]	; 1427c0 <__pthread_create+0x5bc>
  142408:	e59f03b4 	ldr	r0, [pc, #948]	; 1427c4 <__pthread_create+0x5c0>
  14240c:	e2842078 	add	r2, r4, #120	; 0x78
  142410:	01a00003 	moveq	r0, r3
  142414:	e284301c 	add	r3, r4, #28
  142418:	e28cc001 	add	ip, ip, #1
  14241c:	e58d1008 	str	r1, [sp, #8]
  142420:	e58d2004 	str	r2, [sp, #4]
  142424:	e58d3000 	str	r3, [sp]
  142428:	e1a01008 	mov	r1, r8
  14242c:	e1a03008 	mov	r3, r8
  142430:	e59f2390 	ldr	r2, [pc, #912]	; 1427c8 <__pthread_create+0x5c4>
  142434:	e586c00c 	str	ip, [r6, #12]
  142438:	eb0006ff 	bl	14403c <__clone>
  14243c:	e3500000 	cmp	r0, #0
  142440:	ba0000a5 	blt	1426dc <__pthread_create+0x4d8>
  142444:	e59a300c 	ldr	r3, [sl, #12]
  142448:	e584a008 	str	sl, [r4, #8]
  14244c:	e584300c 	str	r3, [r4, #12]
  142450:	e5834008 	str	r4, [r3, #8]
  142454:	e5943008 	ldr	r3, [r4, #8]
  142458:	e583400c 	str	r4, [r3, #12]
  14245c:	ebfffe30 	bl	141d24 <__tl_unlock>
  142460:	e28d0058 	add	r0, sp, #88	; 0x58
  142464:	eb00034f 	bl	1431a8 <__restore_sigs>
  142468:	ebfffe08 	bl	141c90 <__acquire_ptc>
  14246c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142470:	e3530000 	cmp	r3, #0
  142474:	0a000014 	beq	1424cc <__pthread_create+0x2c8>
  142478:	e59f534c 	ldr	r5, [pc, #844]	; 1427cc <__pthread_create+0x5c8>
  14247c:	ea000002 	b	14248c <__pthread_create+0x288>
  142480:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  142484:	e3730001 	cmn	r3, #1
  142488:	1a00000c 	bne	1424c0 <__pthread_create+0x2bc>
  14248c:	e3e00000 	mvn	r0, #0
  142490:	e3e01001 	mvn	r1, #1
  142494:	e28d2028 	add	r2, sp, #40	; 0x28
  142498:	e5953000 	ldr	r3, [r5]
  14249c:	e12fff33 	blx	r3
  1424a0:	e3500000 	cmp	r0, #0
  1424a4:	1afffff5 	bne	142480 <__pthread_create+0x27c>
  1424a8:	e1a03000 	mov	r3, r0
  1424ac:	e1a02001 	mov	r2, r1
  1424b0:	e28d0028 	add	r0, sp, #40	; 0x28
  1424b4:	e1a01003 	mov	r1, r3
  1424b8:	e3a03001 	mov	r3, #1
  1424bc:	ebfffd60 	bl	141a44 <__wait>
  1424c0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  1424c4:	e3500000 	cmp	r0, #0
  1424c8:	1a000002 	bne	1424d8 <__pthread_create+0x2d4>
  1424cc:	e3a00000 	mov	r0, #0
  1424d0:	e59d301c 	ldr	r3, [sp, #28]
  1424d4:	e5834000 	str	r4, [r3]
  1424d8:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1424dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1424e0:	e1a0e009 	mov	lr, r9
  1424e4:	e28dc034 	add	ip, sp, #52	; 0x34
  1424e8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1424ec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1424f0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1424f4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1424f8:	e59e3000 	ldr	r3, [lr]
  1424fc:	e58c3000 	str	r3, [ip]
  142500:	ebfffde2 	bl	141c90 <__acquire_ptc>
  142504:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142508:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  14250c:	e3520000 	cmp	r2, #0
  142510:	e5960018 	ldr	r0, [r6, #24]
  142514:	1affff60 	bne	14229c <__pthread_create+0x98>
  142518:	e59f5294 	ldr	r5, [pc, #660]	; 1427b4 <__pthread_create+0x5b0>
  14251c:	e3a01000 	mov	r1, #0
  142520:	e5953000 	ldr	r3, [r5]
  142524:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142528:	e0833000 	add	r3, r3, r0
  14252c:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142530:	e283300f 	add	r3, r3, #15
  142534:	e0837007 	add	r7, r3, r7
  142538:	e3a00000 	mov	r0, #0
  14253c:	e3e03000 	mvn	r3, #0
  142540:	e59f4288 	ldr	r4, [pc, #648]	; 1427d0 <__pthread_create+0x5cc>
  142544:	e2888eff 	add	r8, r8, #4080	; 0xff0
  142548:	e288800f 	add	r8, r8, #15
  14254c:	e0088004 	and	r8, r8, r4
  142550:	e3580000 	cmp	r8, #0
  142554:	e0044007 	and	r4, r4, r7
  142558:	e58d3000 	str	r3, [sp]
  14255c:	e58d0008 	str	r0, [sp, #8]
  142560:	e58d100c 	str	r1, [sp, #12]
  142564:	e3a03022 	mov	r3, #34	; 0x22
  142568:	e0847008 	add	r7, r4, r8
  14256c:	0a00007d 	beq	142768 <__pthread_create+0x564>
  142570:	e1a00002 	mov	r0, r2
  142574:	e1a01007 	mov	r1, r7
  142578:	ebffed0c 	bl	13d9b0 <__mmap>
  14257c:	e3700001 	cmn	r0, #1
  142580:	e1a0b000 	mov	fp, r0
  142584:	0a000051 	beq	1426d0 <__pthread_create+0x4cc>
  142588:	e0803008 	add	r3, r0, r8
  14258c:	e1a01004 	mov	r1, r4
  142590:	e1a00003 	mov	r0, r3
  142594:	e3a02003 	mov	r2, #3
  142598:	e58d3020 	str	r3, [sp, #32]
  14259c:	eb0002cb 	bl	1430d0 <__mprotect>
  1425a0:	e3500000 	cmp	r0, #0
  1425a4:	1a000042 	bne	1426b4 <__pthread_create+0x4b0>
  1425a8:	e5953000 	ldr	r3, [r5]
  1425ac:	e5960018 	ldr	r0, [r6, #24]
  1425b0:	e0473003 	sub	r3, r7, r3
  1425b4:	e08b3003 	add	r3, fp, r3
  1425b8:	e58d3024 	str	r3, [sp, #36]	; 0x24
  1425bc:	e2600000 	rsb	r0, r0, #0
  1425c0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  1425c4:	e0835000 	add	r5, r3, r0
  1425c8:	e1a00005 	mov	r0, r5
  1425cc:	eaffff5b 	b	142340 <__pthread_create+0x13c>
  1425d0:	ebffeee1 	bl	13e15c <__ofl_lock>
  1425d4:	e5903000 	ldr	r3, [r0]
  1425d8:	e3530000 	cmp	r3, #0
  1425dc:	0a000005 	beq	1425f8 <__pthread_create+0x3f4>
  1425e0:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1425e4:	e3520000 	cmp	r2, #0
  1425e8:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  1425ec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1425f0:	e3530000 	cmp	r3, #0
  1425f4:	1afffff9 	bne	1425e0 <__pthread_create+0x3dc>
  1425f8:	ebffeede 	bl	13e178 <__ofl_unlock>
  1425fc:	e59f31d0 	ldr	r3, [pc, #464]	; 1427d4 <__pthread_create+0x5d0>
  142600:	e5933000 	ldr	r3, [r3]
  142604:	e3530000 	cmp	r3, #0
  142608:	0a000003 	beq	14261c <__pthread_create+0x418>
  14260c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142610:	e3520000 	cmp	r2, #0
  142614:	b3a02000 	movlt	r2, #0
  142618:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14261c:	e59f31b4 	ldr	r3, [pc, #436]	; 1427d8 <__pthread_create+0x5d4>
  142620:	e5933000 	ldr	r3, [r3]
  142624:	e3530000 	cmp	r3, #0
  142628:	0a000003 	beq	14263c <__pthread_create+0x438>
  14262c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142630:	e3520000 	cmp	r2, #0
  142634:	b3a02000 	movlt	r2, #0
  142638:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14263c:	e59f3198 	ldr	r3, [pc, #408]	; 1427dc <__pthread_create+0x5d8>
  142640:	e5933000 	ldr	r3, [r3]
  142644:	e3530000 	cmp	r3, #0
  142648:	0a000003 	beq	14265c <__pthread_create+0x458>
  14264c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142650:	e3520000 	cmp	r2, #0
  142654:	b3a02000 	movlt	r2, #0
  142658:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14265c:	e3a03003 	mov	r3, #3
  142660:	e3a04000 	mov	r4, #0
  142664:	e3a000af 	mov	r0, #175	; 0xaf
  142668:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  14266c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  142670:	ebffe68a 	bl	13c0a0 <get_rtt_syscall>
  142674:	e2505000 	subs	r5, r0, #0
  142678:	0a000004 	beq	142690 <__pthread_create+0x48c>
  14267c:	e1a02004 	mov	r2, r4
  142680:	e28d102c 	add	r1, sp, #44	; 0x2c
  142684:	e3a03008 	mov	r3, #8
  142688:	e3a00001 	mov	r0, #1
  14268c:	e12fff35 	blx	r5
  142690:	e59f3148 	ldr	r3, [pc, #328]	; 1427e0 <__pthread_create+0x5dc>
  142694:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  142698:	ebfffd7c 	bl	141c90 <__acquire_ptc>
  14269c:	e3a03001 	mov	r3, #1
  1426a0:	e5863004 	str	r3, [r6, #4]
  1426a4:	e2493001 	sub	r3, r9, #1
  1426a8:	e3730003 	cmn	r3, #3
  1426ac:	8afffeef 	bhi	142270 <__pthread_create+0x6c>
  1426b0:	eaffff8a 	b	1424e0 <__pthread_create+0x2dc>
  1426b4:	ebffd943 	bl	138bc8 <__errno_location>
  1426b8:	e5903000 	ldr	r3, [r0]
  1426bc:	e3530026 	cmp	r3, #38	; 0x26
  1426c0:	0affffb8 	beq	1425a8 <__pthread_create+0x3a4>
  1426c4:	e1a01007 	mov	r1, r7
  1426c8:	e1a0000b 	mov	r0, fp
  1426cc:	ebffed1d 	bl	13db48 <__munmap>
  1426d0:	ebfffd6e 	bl	141c90 <__acquire_ptc>
  1426d4:	e3a0000b 	mov	r0, #11
  1426d8:	eaffff7e 	b	1424d8 <__pthread_create+0x2d4>
  1426dc:	ebfffd90 	bl	141d24 <__tl_unlock>
  1426e0:	e28d0058 	add	r0, sp, #88	; 0x58
  1426e4:	eb0002af 	bl	1431a8 <__restore_sigs>
  1426e8:	ebfffd68 	bl	141c90 <__acquire_ptc>
  1426ec:	e596300c 	ldr	r3, [r6, #12]
  1426f0:	e35b0000 	cmp	fp, #0
  1426f4:	e2433001 	sub	r3, r3, #1
  1426f8:	e586300c 	str	r3, [r6, #12]
  1426fc:	03a0000b 	moveq	r0, #11
  142700:	0affff74 	beq	1424d8 <__pthread_create+0x2d4>
  142704:	e1a01007 	mov	r1, r7
  142708:	e1a0000b 	mov	r0, fp
  14270c:	ebffed0d 	bl	13db48 <__munmap>
  142710:	e3a0000b 	mov	r0, #11
  142714:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142718:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  14271c:	e5943000 	ldr	r3, [r4]
  142720:	e1a02001 	mov	r2, r1
  142724:	e0458003 	sub	r8, r5, r3
  142728:	e0485000 	sub	r5, r8, r0
  14272c:	e1a00005 	mov	r0, r5
  142730:	e3a01000 	mov	r1, #0
  142734:	e58d8024 	str	r8, [sp, #36]	; 0x24
  142738:	ebfffa09 	bl	140f64 <memset>
  14273c:	e3580000 	cmp	r8, #0
  142740:	e1a03008 	mov	r3, r8
  142744:	0afffee6 	beq	1422e4 <__pthread_create+0xe0>
  142748:	e3a08000 	mov	r8, #0
  14274c:	e5960018 	ldr	r0, [r6, #24]
  142750:	e1a0b008 	mov	fp, r8
  142754:	e0430000 	sub	r0, r3, r0
  142758:	eafffef8 	b	142340 <__pthread_create+0x13c>
  14275c:	e1a08005 	mov	r8, r5
  142760:	e58db020 	str	fp, [sp, #32]
  142764:	eaffff95 	b	1425c0 <__pthread_create+0x3bc>
  142768:	e3a02003 	mov	r2, #3
  14276c:	e1a01007 	mov	r1, r7
  142770:	e1a00008 	mov	r0, r8
  142774:	ebffec8d 	bl	13d9b0 <__mmap>
  142778:	e3700001 	cmn	r0, #1
  14277c:	e1a0b000 	mov	fp, r0
  142780:	0affffd2 	beq	1426d0 <__pthread_create+0x4cc>
  142784:	e5953000 	ldr	r3, [r5]
  142788:	e5960018 	ldr	r0, [r6, #24]
  14278c:	e0473003 	sub	r3, r7, r3
  142790:	e08b3003 	add	r3, fp, r3
  142794:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142798:	e2600000 	rsb	r0, r0, #0
  14279c:	e58db020 	str	fp, [sp, #32]
  1427a0:	eaffff86 	b	1425c0 <__pthread_create+0x3bc>
  1427a4:	0015d05c 	.word	0x0015d05c
  1427a8:	0014d3dc 	.word	0x0014d3dc
  1427ac:	0014d3e4 	.word	0x0014d3e4
  1427b0:	0014d3e0 	.word	0x0014d3e0
  1427b4:	0014f45c 	.word	0x0014f45c
  1427b8:	0015d084 	.word	0x0015d084
  1427bc:	001421a8 	.word	0x001421a8
  1427c0:	0015d0a4 	.word	0x0015d0a4
  1427c4:	001420ac 	.word	0x001420ac
  1427c8:	007d0f00 	.word	0x007d0f00
  1427cc:	0014d3d8 	.word	0x0014d3d8
  1427d0:	fffff000 	.word	0xfffff000
  1427d4:	0014f460 	.word	0x0014f460
  1427d8:	0014d3d0 	.word	0x0014d3d0
  1427dc:	0014d338 	.word	0x0014d338
  1427e0:	0014f464 	.word	0x0014f464

001427e4 <__get_thread_map>:
  1427e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1427e8:	e2504000 	subs	r4, r0, #0
  1427ec:	e24dd014 	sub	sp, sp, #20
  1427f0:	0a000002 	beq	142800 <__get_thread_map+0x1c>
  1427f4:	e2840078 	add	r0, r4, #120	; 0x78
  1427f8:	e28dd014 	add	sp, sp, #20
  1427fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142800:	e3a06000 	mov	r6, #0
  142804:	e3a07000 	mov	r7, #0
  142808:	e3e03000 	mvn	r3, #0
  14280c:	e58d6008 	str	r6, [sp, #8]
  142810:	e58d700c 	str	r7, [sp, #12]
  142814:	e59f5074 	ldr	r5, [pc, #116]	; 142890 <__get_thread_map+0xac>
  142818:	e3a02003 	mov	r2, #3
  14281c:	e5951018 	ldr	r1, [r5, #24]
  142820:	e58d3000 	str	r3, [sp]
  142824:	e3510000 	cmp	r1, #0
  142828:	03a01078 	moveq	r1, #120	; 0x78
  14282c:	e3a03022 	mov	r3, #34	; 0x22
  142830:	ebffec5e 	bl	13d9b0 <__mmap>
  142834:	e2504000 	subs	r4, r0, #0
  142838:	0a000012 	beq	142888 <__get_thread_map+0xa4>
  14283c:	e59f3050 	ldr	r3, [pc, #80]	; 142894 <__get_thread_map+0xb0>
  142840:	e2855028 	add	r5, r5, #40	; 0x28
  142844:	e5932000 	ldr	r2, [r3]
  142848:	e2843050 	add	r3, r4, #80	; 0x50
  14284c:	e5845060 	str	r5, [r4, #96]	; 0x60
  142850:	e5844000 	str	r4, [r4]
  142854:	e5844008 	str	r4, [r4, #8]
  142858:	e584400c 	str	r4, [r4, #12]
  14285c:	e5842014 	str	r2, [r4, #20]
  142860:	e5843050 	str	r3, [r4, #80]	; 0x50
  142864:	e3a000e0 	mov	r0, #224	; 0xe0
  142868:	ebffe60c 	bl	13c0a0 <get_rtt_syscall>
  14286c:	e3500000 	cmp	r0, #0
  142870:	0a000000 	beq	142878 <__get_thread_map+0x94>
  142874:	e12fff30 	blx	r0
  142878:	e3a03000 	mov	r3, #0
  14287c:	e584001c 	str	r0, [r4, #28]
  142880:	e5843020 	str	r3, [r4, #32]
  142884:	eaffffda 	b	1427f4 <__get_thread_map+0x10>
  142888:	e1a00004 	mov	r0, r4
  14288c:	eaffffd9 	b	1427f8 <__get_thread_map+0x14>
  142890:	0015d05c 	.word	0x0015d05c
  142894:	0015d0a8 	.word	0x0015d0a8

00142898 <__put_thread_map>:
  142898:	e3500000 	cmp	r0, #0
  14289c:	012fff1e 	bxeq	lr
  1428a0:	e59f3010 	ldr	r3, [pc, #16]	; 1428b8 <__put_thread_map+0x20>
  1428a4:	e2400078 	sub	r0, r0, #120	; 0x78
  1428a8:	e5931018 	ldr	r1, [r3, #24]
  1428ac:	e3510000 	cmp	r1, #0
  1428b0:	03a01078 	moveq	r1, #120	; 0x78
  1428b4:	eaffeca3 	b	13db48 <__munmap>
  1428b8:	0015d05c 	.word	0x0015d05c

001428bc <__pthread_init_run>:
  1428bc:	e92d4070 	push	{r4, r5, r6, lr}
  1428c0:	e1a05000 	mov	r5, r0
  1428c4:	e3a00000 	mov	r0, #0
  1428c8:	e1a06001 	mov	r6, r1
  1428cc:	ebffffc4 	bl	1427e4 <__get_thread_map>
  1428d0:	e2504000 	subs	r4, r0, #0
  1428d4:	08bd8070 	popeq	{r4, r5, r6, pc}
  1428d8:	eb000582 	bl	143ee8 <__set_thread_area>
  1428dc:	e1a00006 	mov	r0, r6
  1428e0:	e12fff35 	blx	r5
  1428e4:	e59f3014 	ldr	r3, [pc, #20]	; 142900 <__pthread_init_run+0x44>
  1428e8:	e2440078 	sub	r0, r4, #120	; 0x78
  1428ec:	e5931018 	ldr	r1, [r3, #24]
  1428f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1428f4:	e3510000 	cmp	r1, #0
  1428f8:	03a01078 	moveq	r1, #120	; 0x78
  1428fc:	eaffec91 	b	13db48 <__munmap>
  142900:	0015d05c 	.word	0x0015d05c

00142904 <__vm_wait>:
  142904:	e92d4070 	push	{r4, r5, r6, lr}
  142908:	e59f402c 	ldr	r4, [pc, #44]	; 14293c <__vm_wait+0x38>
  14290c:	e5942000 	ldr	r2, [r4]
  142910:	e3520000 	cmp	r2, #0
  142914:	08bd8070 	popeq	{r4, r5, r6, pc}
  142918:	e2845004 	add	r5, r4, #4
  14291c:	e3a03001 	mov	r3, #1
  142920:	e1a01005 	mov	r1, r5
  142924:	e59f0010 	ldr	r0, [pc, #16]	; 14293c <__vm_wait+0x38>
  142928:	ebfffc45 	bl	141a44 <__wait>
  14292c:	e5942000 	ldr	r2, [r4]
  142930:	e3520000 	cmp	r2, #0
  142934:	1afffff8 	bne	14291c <__vm_wait+0x18>
  142938:	e8bd8070 	pop	{r4, r5, r6, pc}
  14293c:	0014f470 	.word	0x0014f470

00142940 <__vm_lock>:
  142940:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142944:	e59f6038 	ldr	r6, [pc, #56]	; 142984 <__vm_lock+0x44>
  142948:	e59f8038 	ldr	r8, [pc, #56]	; 142988 <__vm_lock+0x48>
  14294c:	e1a07006 	mov	r7, r6
  142950:	e5964000 	ldr	r4, [r6]
  142954:	e2845001 	add	r5, r4, #1
  142958:	e1a00004 	mov	r0, r4
  14295c:	e1a01005 	mov	r1, r5
  142960:	e1a02007 	mov	r2, r7
  142964:	e5983000 	ldr	r3, [r8]
  142968:	e12fff33 	blx	r3
  14296c:	e3500000 	cmp	r0, #0
  142970:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142974:	e5963000 	ldr	r3, [r6]
  142978:	e1540003 	cmp	r4, r3
  14297c:	0afffff5 	beq	142958 <__vm_lock+0x18>
  142980:	eafffff2 	b	142950 <__vm_lock+0x10>
  142984:	0014f470 	.word	0x0014f470
  142988:	0014d3d8 	.word	0x0014d3d8

0014298c <__vm_unlock>:
  14298c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142990:	e59f6098 	ldr	r6, [pc, #152]	; 142a30 <__vm_unlock+0xa4>
  142994:	e59f8098 	ldr	r8, [pc, #152]	; 142a34 <__vm_unlock+0xa8>
  142998:	e1a07006 	mov	r7, r6
  14299c:	e5964000 	ldr	r4, [r6]
  1429a0:	e2445001 	sub	r5, r4, #1
  1429a4:	ea000002 	b	1429b4 <__vm_unlock+0x28>
  1429a8:	e5963000 	ldr	r3, [r6]
  1429ac:	e1540003 	cmp	r4, r3
  1429b0:	1afffff9 	bne	14299c <__vm_unlock+0x10>
  1429b4:	e1a00004 	mov	r0, r4
  1429b8:	e1a01005 	mov	r1, r5
  1429bc:	e1a02007 	mov	r2, r7
  1429c0:	e5983000 	ldr	r3, [r8]
  1429c4:	e12fff33 	blx	r3
  1429c8:	e3500000 	cmp	r0, #0
  1429cc:	1afffff5 	bne	1429a8 <__vm_unlock+0x1c>
  1429d0:	e3540001 	cmp	r4, #1
  1429d4:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  1429d8:	e5963004 	ldr	r3, [r6, #4]
  1429dc:	e3530000 	cmp	r3, #0
  1429e0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1429e4:	e3a000f0 	mov	r0, #240	; 0xf0
  1429e8:	ebffe5ac 	bl	13c0a0 <get_rtt_syscall>
  1429ec:	e2503000 	subs	r3, r0, #0
  1429f0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1429f4:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  1429f8:	e3a01081 	mov	r1, #129	; 0x81
  1429fc:	e59f002c 	ldr	r0, [pc, #44]	; 142a30 <__vm_unlock+0xa4>
  142a00:	e12fff33 	blx	r3
  142a04:	e3700026 	cmn	r0, #38	; 0x26
  142a08:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142a0c:	e3a000f0 	mov	r0, #240	; 0xf0
  142a10:	ebffe5a2 	bl	13c0a0 <get_rtt_syscall>
  142a14:	e2503000 	subs	r3, r0, #0
  142a18:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142a1c:	e1a01004 	mov	r1, r4
  142a20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142a24:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142a28:	e59f0000 	ldr	r0, [pc]	; 142a30 <__vm_unlock+0xa4>
  142a2c:	e12fff13 	bx	r3
  142a30:	0014f470 	.word	0x0014f470
  142a34:	0014d3d8 	.word	0x0014d3d8

00142a38 <time>:
  142a38:	e92d4010 	push	{r4, lr}
  142a3c:	e1a04000 	mov	r4, r0
  142a40:	e24dd010 	sub	sp, sp, #16
  142a44:	e1a0100d 	mov	r1, sp
  142a48:	e3a00000 	mov	r0, #0
  142a4c:	eb000595 	bl	1440a8 <__clock_gettime>
  142a50:	e89d0003 	ldm	sp, {r0, r1}
  142a54:	e3540000 	cmp	r4, #0
  142a58:	18840003 	stmne	r4, {r0, r1}
  142a5c:	e28dd010 	add	sp, sp, #16
  142a60:	e8bd8010 	pop	{r4, pc}

00142a64 <__aio_close>:
  142a64:	e12fff1e 	bx	lr

00142a68 <close>:
  142a68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142a6c:	e24dd014 	sub	sp, sp, #20
  142a70:	ebfffffb 	bl	142a64 <__aio_close>
  142a74:	e3a03000 	mov	r3, #0
  142a78:	e1a01000 	mov	r1, r0
  142a7c:	e58d3008 	str	r3, [sp, #8]
  142a80:	e58d3004 	str	r3, [sp, #4]
  142a84:	e58d3000 	str	r3, [sp]
  142a88:	e1a02003 	mov	r2, r3
  142a8c:	e3a00006 	mov	r0, #6
  142a90:	ebfffbea 	bl	141a40 <__syscall_cp>
  142a94:	e3700004 	cmn	r0, #4
  142a98:	03a00000 	moveq	r0, #0
  142a9c:	e28dd014 	add	sp, sp, #20
  142aa0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142aa4:	eaffe5b2 	b	13c174 <__syscall_ret>

00142aa8 <tolower>:
  142aa8:	e2403041 	sub	r3, r0, #65	; 0x41
  142aac:	e3530019 	cmp	r3, #25
  142ab0:	93800020 	orrls	r0, r0, #32
  142ab4:	e12fff1e 	bx	lr

00142ab8 <__tolower_l>:
  142ab8:	e2403041 	sub	r3, r0, #65	; 0x41
  142abc:	e3530019 	cmp	r3, #25
  142ac0:	93800020 	orrls	r0, r0, #32
  142ac4:	e12fff1e 	bx	lr

00142ac8 <__init_tp>:
  142ac8:	e92d4010 	push	{r4, lr}
  142acc:	e5800000 	str	r0, [r0]
  142ad0:	e1a04000 	mov	r4, r0
  142ad4:	e2800078 	add	r0, r0, #120	; 0x78
  142ad8:	eb000502 	bl	143ee8 <__set_thread_area>
  142adc:	e3500000 	cmp	r0, #0
  142ae0:	ba000015 	blt	142b3c <__init_tp+0x74>
  142ae4:	03a02001 	moveq	r2, #1
  142ae8:	059f3054 	ldreq	r3, [pc, #84]	; 142b44 <__init_tp+0x7c>
  142aec:	e3a00c01 	mov	r0, #256	; 0x100
  142af0:	05832000 	streq	r2, [r3]
  142af4:	e3a03001 	mov	r3, #1
  142af8:	e5843024 	str	r3, [r4, #36]	; 0x24
  142afc:	ebffe567 	bl	13c0a0 <get_rtt_syscall>
  142b00:	e2503000 	subs	r3, r0, #0
  142b04:	0a00000a 	beq	142b34 <__init_tp+0x6c>
  142b08:	e59f0038 	ldr	r0, [pc, #56]	; 142b48 <__init_tp+0x80>
  142b0c:	e12fff33 	blx	r3
  142b10:	e59f2034 	ldr	r2, [pc, #52]	; 142b4c <__init_tp+0x84>
  142b14:	e2843050 	add	r3, r4, #80	; 0x50
  142b18:	e584001c 	str	r0, [r4, #28]
  142b1c:	e5844008 	str	r4, [r4, #8]
  142b20:	e584400c 	str	r4, [r4, #12]
  142b24:	e5842060 	str	r2, [r4, #96]	; 0x60
  142b28:	e5843050 	str	r3, [r4, #80]	; 0x50
  142b2c:	e3a00000 	mov	r0, #0
  142b30:	e8bd8010 	pop	{r4, pc}
  142b34:	e1a00003 	mov	r0, r3
  142b38:	eafffff4 	b	142b10 <__init_tp+0x48>
  142b3c:	e3e00000 	mvn	r0, #0
  142b40:	e8bd8010 	pop	{r4, pc}
  142b44:	0015d05c 	.word	0x0015d05c
  142b48:	0015d0a4 	.word	0x0015d0a4
  142b4c:	0015d084 	.word	0x0015d084

00142b50 <__copy_tls>:
  142b50:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142b54:	e59f808c 	ldr	r8, [pc, #140]	; 142be8 <__copy_tls+0x98>
  142b58:	e3e03077 	mvn	r3, #119	; 0x77
  142b5c:	e5982020 	ldr	r2, [r8, #32]
  142b60:	e598601c 	ldr	r6, [r8, #28]
  142b64:	e1a07102 	lsl	r7, r2, #2
  142b68:	e2277003 	eor	r7, r7, #3
  142b6c:	e1e07007 	mvn	r7, r7
  142b70:	e5981018 	ldr	r1, [r8, #24]
  142b74:	e5984014 	ldr	r4, [r8, #20]
  142b78:	e2466001 	sub	r6, r6, #1
  142b7c:	e0433000 	sub	r3, r3, r0
  142b80:	e0066003 	and	r6, r6, r3
  142b84:	e0877001 	add	r7, r7, r1
  142b88:	e3540000 	cmp	r4, #0
  142b8c:	e1a09000 	mov	r9, r0
  142b90:	e0806006 	add	r6, r0, r6
  142b94:	e080a007 	add	sl, r0, r7
  142b98:	0a00000d 	beq	142bd4 <__copy_tls+0x84>
  142b9c:	e1a0b00a 	mov	fp, sl
  142ba0:	e2865078 	add	r5, r6, #120	; 0x78
  142ba4:	e5943014 	ldr	r3, [r4, #20]
  142ba8:	e5941004 	ldr	r1, [r4, #4]
  142bac:	e0853003 	add	r3, r5, r3
  142bb0:	e5ab3004 	str	r3, [fp, #4]!
  142bb4:	e5940014 	ldr	r0, [r4, #20]
  142bb8:	e5942008 	ldr	r2, [r4, #8]
  142bbc:	e0850000 	add	r0, r5, r0
  142bc0:	ebfff7af 	bl	140a84 <memcpy>
  142bc4:	e5944000 	ldr	r4, [r4]
  142bc8:	e3540000 	cmp	r4, #0
  142bcc:	1afffff4 	bne	142ba4 <__copy_tls+0x54>
  142bd0:	e5982020 	ldr	r2, [r8, #32]
  142bd4:	e7892007 	str	r2, [r9, r7]
  142bd8:	e1a00006 	mov	r0, r6
  142bdc:	e586a074 	str	sl, [r6, #116]	; 0x74
  142be0:	e586a004 	str	sl, [r6, #4]
  142be4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142be8:	0015d05c 	.word	0x0015d05c

00142bec <__init_tls>:
  142bec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142bf0:	e5901014 	ldr	r1, [r0, #20]
  142bf4:	e24dd00c 	sub	sp, sp, #12
  142bf8:	e3510000 	cmp	r1, #0
  142bfc:	e590600c 	ldr	r6, [r0, #12]
  142c00:	0a000062 	beq	142d90 <__init_tls+0x1a4>
  142c04:	e3a04000 	mov	r4, #0
  142c08:	e59f81a0 	ldr	r8, [pc, #416]	; 142db0 <__init_tls+0x1c4>
  142c0c:	e1a02006 	mov	r2, r6
  142c10:	e1a03004 	mov	r3, r4
  142c14:	e1a0e004 	mov	lr, r4
  142c18:	e590c010 	ldr	ip, [r0, #16]
  142c1c:	e5987000 	ldr	r7, [r8]
  142c20:	e59f918c 	ldr	r9, [pc, #396]	; 142db4 <__init_tls+0x1c8>
  142c24:	e59f518c 	ldr	r5, [pc, #396]	; 142db8 <__init_tls+0x1cc>
  142c28:	ea000007 	b	142c4c <__init_tls+0x60>
  142c2c:	e3500002 	cmp	r0, #2
  142c30:	1a00003c 	bne	142d28 <__init_tls+0x13c>
  142c34:	e3550000 	cmp	r5, #0
  142c38:	15923008 	ldrne	r3, [r2, #8]
  142c3c:	10453003 	subne	r3, r5, r3
  142c40:	e2511001 	subs	r1, r1, #1
  142c44:	e082200c 	add	r2, r2, ip
  142c48:	0a000007 	beq	142c6c <__init_tls+0x80>
  142c4c:	e5920000 	ldr	r0, [r2]
  142c50:	e3500006 	cmp	r0, #6
  142c54:	1afffff4 	bne	142c2c <__init_tls+0x40>
  142c58:	e5923008 	ldr	r3, [r2, #8]
  142c5c:	e2511001 	subs	r1, r1, #1
  142c60:	e0463003 	sub	r3, r6, r3
  142c64:	e082200c 	add	r2, r2, ip
  142c68:	1afffff7 	bne	142c4c <__init_tls+0x60>
  142c6c:	e3540000 	cmp	r4, #0
  142c70:	15887000 	strne	r7, [r8]
  142c74:	e35e0000 	cmp	lr, #0
  142c78:	0a000044 	beq	142d90 <__init_tls+0x1a4>
  142c7c:	e3a04001 	mov	r4, #1
  142c80:	e59ec008 	ldr	ip, [lr, #8]
  142c84:	e59e1010 	ldr	r1, [lr, #16]
  142c88:	e59f212c 	ldr	r2, [pc, #300]	; 142dbc <__init_tls+0x1d0>
  142c8c:	e59e001c 	ldr	r0, [lr, #28]
  142c90:	e083300c 	add	r3, r3, ip
  142c94:	e59fc124 	ldr	ip, [pc, #292]	; 142dc0 <__init_tls+0x1d4>
  142c98:	e5821008 	str	r1, [r2, #8]
  142c9c:	e5823004 	str	r3, [r2, #4]
  142ca0:	e59e1014 	ldr	r1, [lr, #20]
  142ca4:	e5820010 	str	r0, [r2, #16]
  142ca8:	e58c2014 	str	r2, [ip, #20]
  142cac:	e58c4020 	str	r4, [ip, #32]
  142cb0:	e3500003 	cmp	r0, #3
  142cb4:	93a0e004 	movls	lr, #4
  142cb8:	e0833001 	add	r3, r3, r1
  142cbc:	e2404001 	sub	r4, r0, #1
  142cc0:	e2633000 	rsb	r3, r3, #0
  142cc4:	e0033004 	and	r3, r3, r4
  142cc8:	e0833001 	add	r3, r3, r1
  142ccc:	93a01087 	movls	r1, #135	; 0x87
  142cd0:	91a0000e 	movls	r0, lr
  142cd4:	e3c44007 	bic	r4, r4, #7
  142cd8:	e2844008 	add	r4, r4, #8
  142cdc:	82801083 	addhi	r1, r0, #131	; 0x83
  142ce0:	e5824014 	str	r4, [r2, #20]
  142ce4:	e0834004 	add	r4, r3, r4
  142ce8:	e0844001 	add	r4, r4, r1
  142cec:	e3c44003 	bic	r4, r4, #3
  142cf0:	9582e010 	strls	lr, [r2, #16]
  142cf4:	e35400bc 	cmp	r4, #188	; 0xbc
  142cf8:	e58c001c 	str	r0, [ip, #28]
  142cfc:	e582300c 	str	r3, [r2, #12]
  142d00:	e58c4018 	str	r4, [ip, #24]
  142d04:	959f00b8 	ldrls	r0, [pc, #184]	; 142dc4 <__init_tls+0x1d8>
  142d08:	8a000013 	bhi	142d5c <__init_tls+0x170>
  142d0c:	ebffff8f 	bl	142b50 <__copy_tls>
  142d10:	ebffff6c 	bl	142ac8 <__init_tp>
  142d14:	e3500000 	cmp	r0, #0
  142d18:	aa000000 	bge	142d20 <__init_tls+0x134>
  142d1c:	e7f000f0 	.word	0xe7f000f0
  142d20:	e28dd00c 	add	sp, sp, #12
  142d24:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  142d28:	e3500007 	cmp	r0, #7
  142d2c:	01a0e002 	moveq	lr, r2
  142d30:	0affffc2 	beq	142c40 <__init_tls+0x54>
  142d34:	e1500009 	cmp	r0, r9
  142d38:	1affffc0 	bne	142c40 <__init_tls+0x54>
  142d3c:	e5920014 	ldr	r0, [r2, #20]
  142d40:	e1500007 	cmp	r0, r7
  142d44:	9affffbd 	bls	142c40 <__init_tls+0x54>
  142d48:	e3500502 	cmp	r0, #8388608	; 0x800000
  142d4c:	31a07000 	movcc	r7, r0
  142d50:	23a07502 	movcs	r7, #8388608	; 0x800000
  142d54:	e3a04001 	mov	r4, #1
  142d58:	eaffffb8 	b	142c40 <__init_tls+0x54>
  142d5c:	e3a000c0 	mov	r0, #192	; 0xc0
  142d60:	ebffe4ce 	bl	13c0a0 <get_rtt_syscall>
  142d64:	e2505000 	subs	r5, r0, #0
  142d68:	0a00000e 	beq	142da8 <__init_tls+0x1bc>
  142d6c:	e3e03000 	mvn	r3, #0
  142d70:	e3a00000 	mov	r0, #0
  142d74:	e58d3000 	str	r3, [sp]
  142d78:	e1a01004 	mov	r1, r4
  142d7c:	e58d0004 	str	r0, [sp, #4]
  142d80:	e3a03022 	mov	r3, #34	; 0x22
  142d84:	e3a02003 	mov	r2, #3
  142d88:	e12fff35 	blx	r5
  142d8c:	eaffffde 	b	142d0c <__init_tls+0x120>
  142d90:	e59f2024 	ldr	r2, [pc, #36]	; 142dbc <__init_tls+0x1d0>
  142d94:	e59fc024 	ldr	ip, [pc, #36]	; 142dc0 <__init_tls+0x1d4>
  142d98:	e592100c 	ldr	r1, [r2, #12]
  142d9c:	e5923004 	ldr	r3, [r2, #4]
  142da0:	e5920010 	ldr	r0, [r2, #16]
  142da4:	eaffffc1 	b	142cb0 <__init_tls+0xc4>
  142da8:	e1a00005 	mov	r0, r5
  142dac:	eaffffd6 	b	142d0c <__init_tls+0x120>
  142db0:	0014d3e4 	.word	0x0014d3e4
  142db4:	6474e551 	.word	0x6474e551
  142db8:	00000000 	.word	0x00000000
  142dbc:	0014f538 	.word	0x0014f538
  142dc0:	0015d05c 	.word	0x0015d05c
  142dc4:	0014f47c 	.word	0x0014f47c

00142dc8 <__init_ssp>:
  142dc8:	e2501000 	subs	r1, r0, #0
  142dcc:	e92d4010 	push	{r4, lr}
  142dd0:	1a000009 	bne	142dfc <__init_ssp+0x34>
  142dd4:	e59f3034 	ldr	r3, [pc, #52]	; 142e10 <__init_ssp+0x48>
  142dd8:	e59f2034 	ldr	r2, [pc, #52]	; 142e14 <__init_ssp+0x4c>
  142ddc:	e0010293 	mul	r1, r3, r2
  142de0:	e5831000 	str	r1, [r3]
  142de4:	e5933000 	ldr	r3, [r3]
  142de8:	e59f2028 	ldr	r2, [pc, #40]	; 142e18 <__init_ssp+0x50>
  142dec:	e5920000 	ldr	r0, [r2]
  142df0:	e12fff30 	blx	r0
  142df4:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  142df8:	e8bd8010 	pop	{r4, pc}
  142dfc:	e3a02004 	mov	r2, #4
  142e00:	e59f0008 	ldr	r0, [pc, #8]	; 142e10 <__init_ssp+0x48>
  142e04:	ebfff71e 	bl	140a84 <memcpy>
  142e08:	e59f3000 	ldr	r3, [pc]	; 142e10 <__init_ssp+0x48>
  142e0c:	eafffff4 	b	142de4 <__init_ssp+0x1c>
  142e10:	0015d0a8 	.word	0x0015d0a8
  142e14:	41c64e6d 	.word	0x41c64e6d
  142e18:	0014d3dc 	.word	0x0014d3dc

00142e1c <__stack_chk_fail>:
  142e1c:	e7f000f0 	.word	0xe7f000f0
  142e20:	e12fff1e 	bx	lr

00142e24 <_Exit>:
  142e24:	e92d4010 	push	{r4, lr}
  142e28:	e1a04000 	mov	r4, r0
  142e2c:	e3a000f8 	mov	r0, #248	; 0xf8
  142e30:	ebffe49a 	bl	13c0a0 <get_rtt_syscall>
  142e34:	e2503000 	subs	r3, r0, #0
  142e38:	0a000001 	beq	142e44 <_Exit+0x20>
  142e3c:	e1a00004 	mov	r0, r4
  142e40:	e12fff33 	blx	r3
  142e44:	e3a00001 	mov	r0, #1
  142e48:	ebffe494 	bl	13c0a0 <get_rtt_syscall>
  142e4c:	e2503000 	subs	r3, r0, #0
  142e50:	0afffffb 	beq	142e44 <_Exit+0x20>
  142e54:	eafffff8 	b	142e3c <_Exit+0x18>

00142e58 <abort>:
  142e58:	e3a04000 	mov	r4, #0
  142e5c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142e60:	e3a00006 	mov	r0, #6
  142e64:	e24dd024 	sub	sp, sp, #36	; 0x24
  142e68:	ebffec24 	bl	13df00 <raise>
  142e6c:	e1a00004 	mov	r0, r4
  142e70:	eb0000b0 	bl	143138 <__block_all_sigs>
  142e74:	e59f00b0 	ldr	r0, [pc, #176]	; 142f2c <abort+0xd4>
  142e78:	ebfffa6e 	bl	141838 <__lock>
  142e7c:	e3a000ae 	mov	r0, #174	; 0xae
  142e80:	e58d400c 	str	r4, [sp, #12]
  142e84:	e58d4010 	str	r4, [sp, #16]
  142e88:	e58d4014 	str	r4, [sp, #20]
  142e8c:	e58d4018 	str	r4, [sp, #24]
  142e90:	e58d401c 	str	r4, [sp, #28]
  142e94:	ebffe481 	bl	13c0a0 <get_rtt_syscall>
  142e98:	e2505000 	subs	r5, r0, #0
  142e9c:	0a000004 	beq	142eb4 <abort+0x5c>
  142ea0:	e1a02004 	mov	r2, r4
  142ea4:	e28d100c 	add	r1, sp, #12
  142ea8:	e3a03008 	mov	r3, #8
  142eac:	e3a00006 	mov	r0, #6
  142eb0:	e12fff35 	blx	r5
  142eb4:	e59f3074 	ldr	r3, [pc, #116]	; 142f30 <abort+0xd8>
  142eb8:	e5930000 	ldr	r0, [r3]
  142ebc:	e12fff30 	blx	r0
  142ec0:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  142ec4:	e3a000ee 	mov	r0, #238	; 0xee
  142ec8:	ebffe474 	bl	13c0a0 <get_rtt_syscall>
  142ecc:	e2503000 	subs	r3, r0, #0
  142ed0:	0a000002 	beq	142ee0 <abort+0x88>
  142ed4:	e1a00004 	mov	r0, r4
  142ed8:	e3a01006 	mov	r1, #6
  142edc:	e12fff33 	blx	r3
  142ee0:	e3a03020 	mov	r3, #32
  142ee4:	e3a05000 	mov	r5, #0
  142ee8:	e08d4003 	add	r4, sp, r3
  142eec:	e3a000af 	mov	r0, #175	; 0xaf
  142ef0:	e58d5008 	str	r5, [sp, #8]
  142ef4:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  142ef8:	ebffe468 	bl	13c0a0 <get_rtt_syscall>
  142efc:	e2506000 	subs	r6, r0, #0
  142f00:	0a000004 	beq	142f18 <abort+0xc0>
  142f04:	e1a02005 	mov	r2, r5
  142f08:	e1a01004 	mov	r1, r4
  142f0c:	e3a03008 	mov	r3, #8
  142f10:	e3a00001 	mov	r0, #1
  142f14:	e12fff36 	blx	r6
  142f18:	e7f000f0 	.word	0xe7f000f0
  142f1c:	e3a00009 	mov	r0, #9
  142f20:	ebffebf6 	bl	13df00 <raise>
  142f24:	e3a0007f 	mov	r0, #127	; 0x7f
  142f28:	ebffffbd 	bl	142e24 <_Exit>
  142f2c:	0015d0ac 	.word	0x0015d0ac
  142f30:	0014d3dc 	.word	0x0014d3dc

00142f34 <__expand_heap>:
  142f34:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142f38:	e59f2178 	ldr	r2, [pc, #376]	; 1430b8 <__expand_heap+0x184>
  142f3c:	e5903000 	ldr	r3, [r0]
  142f40:	e24dd01c 	sub	sp, sp, #28
  142f44:	e1530002 	cmp	r3, r2
  142f48:	8a000051 	bhi	143094 <__expand_heap+0x160>
  142f4c:	e59f7168 	ldr	r7, [pc, #360]	; 1430bc <__expand_heap+0x188>
  142f50:	e59f8168 	ldr	r8, [pc, #360]	; 1430c0 <__expand_heap+0x18c>
  142f54:	e5975000 	ldr	r5, [r7]
  142f58:	e2634000 	rsb	r4, r3, #0
  142f5c:	e3550000 	cmp	r5, #0
  142f60:	e0044008 	and	r4, r4, r8
  142f64:	e0844003 	add	r4, r4, r3
  142f68:	e1a06000 	mov	r6, r0
  142f6c:	11e03005 	mvnne	r3, r5
  142f70:	0a00003b 	beq	143064 <__expand_heap+0x130>
  142f74:	e1540003 	cmp	r4, r3
  142f78:	2a00001d 	bcs	142ff4 <__expand_heap+0xc0>
  142f7c:	e59f3140 	ldr	r3, [pc, #320]	; 1430c4 <__expand_heap+0x190>
  142f80:	e0848005 	add	r8, r4, r5
  142f84:	e5933010 	ldr	r3, [r3, #16]
  142f88:	e3530502 	cmp	r3, #8388608	; 0x800000
  142f8c:	21a02003 	movcs	r2, r3
  142f90:	33a02502 	movcc	r2, #8388608	; 0x800000
  142f94:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  142f98:	e1580002 	cmp	r8, r2
  142f9c:	81530005 	cmphi	r3, r5
  142fa0:	8a000013 	bhi	142ff4 <__expand_heap+0xc0>
  142fa4:	e28d3014 	add	r3, sp, #20
  142fa8:	e3530502 	cmp	r3, #8388608	; 0x800000
  142fac:	21a02003 	movcs	r2, r3
  142fb0:	33a02502 	movcc	r2, #8388608	; 0x800000
  142fb4:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  142fb8:	e1580002 	cmp	r8, r2
  142fbc:	81530005 	cmphi	r3, r5
  142fc0:	8a00000b 	bhi	142ff4 <__expand_heap+0xc0>
  142fc4:	e3a0002d 	mov	r0, #45	; 0x2d
  142fc8:	ebffe434 	bl	13c0a0 <get_rtt_syscall>
  142fcc:	e2503000 	subs	r3, r0, #0
  142fd0:	0a000036 	beq	1430b0 <__expand_heap+0x17c>
  142fd4:	e1a00008 	mov	r0, r8
  142fd8:	e12fff33 	blx	r3
  142fdc:	e5972000 	ldr	r2, [r7]
  142fe0:	e0823004 	add	r3, r2, r4
  142fe4:	e1530000 	cmp	r3, r0
  142fe8:	05864000 	streq	r4, [r6]
  142fec:	05870000 	streq	r0, [r7]
  142ff0:	0a000018 	beq	143058 <__expand_heap+0x124>
  142ff4:	e3a01a01 	mov	r1, #4096	; 0x1000
  142ff8:	e59f50c8 	ldr	r5, [pc, #200]	; 1430c8 <__expand_heap+0x194>
  142ffc:	e3a08000 	mov	r8, #0
  143000:	e5953000 	ldr	r3, [r5]
  143004:	e3a09000 	mov	r9, #0
  143008:	e1a030a3 	lsr	r3, r3, #1
  14300c:	e1a01311 	lsl	r1, r1, r3
  143010:	e1510004 	cmp	r1, r4
  143014:	21a04001 	movcs	r4, r1
  143018:	e3e03000 	mvn	r3, #0
  14301c:	e3a02003 	mov	r2, #3
  143020:	e58d3000 	str	r3, [sp]
  143024:	e58d8008 	str	r8, [sp, #8]
  143028:	e58d900c 	str	r9, [sp, #12]
  14302c:	e3a03022 	mov	r3, #34	; 0x22
  143030:	e1a01004 	mov	r1, r4
  143034:	e3a00000 	mov	r0, #0
  143038:	ebffea5c 	bl	13d9b0 <__mmap>
  14303c:	e3700001 	cmn	r0, #1
  143040:	e1a02000 	mov	r2, r0
  143044:	03a02000 	moveq	r2, #0
  143048:	15953000 	ldrne	r3, [r5]
  14304c:	15864000 	strne	r4, [r6]
  143050:	12833001 	addne	r3, r3, #1
  143054:	15853000 	strne	r3, [r5]
  143058:	e1a00002 	mov	r0, r2
  14305c:	e28dd01c 	add	sp, sp, #28
  143060:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143064:	e3a0002d 	mov	r0, #45	; 0x2d
  143068:	ebffe40c 	bl	13c0a0 <get_rtt_syscall>
  14306c:	e2503000 	subs	r3, r0, #0
  143070:	0a00000c 	beq	1430a8 <__expand_heap+0x174>
  143074:	e1a00005 	mov	r0, r5
  143078:	e12fff33 	blx	r3
  14307c:	e2605000 	rsb	r5, r0, #0
  143080:	e0055008 	and	r5, r5, r8
  143084:	e0855000 	add	r5, r5, r0
  143088:	e1e03005 	mvn	r3, r5
  14308c:	e5875000 	str	r5, [r7]
  143090:	eaffffb7 	b	142f74 <__expand_heap+0x40>
  143094:	ebffd6cb 	bl	138bc8 <__errno_location>
  143098:	e3a0300c 	mov	r3, #12
  14309c:	e3a02000 	mov	r2, #0
  1430a0:	e5803000 	str	r3, [r0]
  1430a4:	eaffffeb 	b	143058 <__expand_heap+0x124>
  1430a8:	e3e03000 	mvn	r3, #0
  1430ac:	eafffff6 	b	14308c <__expand_heap+0x158>
  1430b0:	e1a00003 	mov	r0, r3
  1430b4:	eaffffc8 	b	142fdc <__expand_heap+0xa8>
  1430b8:	7fffefff 	.word	0x7fffefff
  1430bc:	0014f550 	.word	0x0014f550
  1430c0:	00000fff 	.word	0x00000fff
  1430c4:	0015d05c 	.word	0x0015d05c
  1430c8:	0014f554 	.word	0x0014f554

001430cc <frexpl>:
  1430cc:	ea000417 	b	144130 <frexp>

001430d0 <__mprotect>:
  1430d0:	e2811eff 	add	r1, r1, #4080	; 0xff0
  1430d4:	e92d4070 	push	{r4, r5, r6, lr}
  1430d8:	e281100f 	add	r1, r1, #15
  1430dc:	e59f5040 	ldr	r5, [pc, #64]	; 143124 <__mprotect+0x54>
  1430e0:	e0801001 	add	r1, r0, r1
  1430e4:	e0011005 	and	r1, r1, r5
  1430e8:	e0055000 	and	r5, r5, r0
  1430ec:	e3a0007d 	mov	r0, #125	; 0x7d
  1430f0:	e1a06002 	mov	r6, r2
  1430f4:	e0414005 	sub	r4, r1, r5
  1430f8:	ebffe3e8 	bl	13c0a0 <get_rtt_syscall>
  1430fc:	e2503000 	subs	r3, r0, #0
  143100:	0a000005 	beq	14311c <__mprotect+0x4c>
  143104:	e1a02006 	mov	r2, r6
  143108:	e1a01004 	mov	r1, r4
  14310c:	e1a00005 	mov	r0, r5
  143110:	e12fff33 	blx	r3
  143114:	e8bd4070 	pop	{r4, r5, r6, lr}
  143118:	eaffe415 	b	13c174 <__syscall_ret>
  14311c:	e1a00003 	mov	r0, r3
  143120:	eafffffb 	b	143114 <__mprotect+0x44>
  143124:	fffff000 	.word	0xfffff000

00143128 <wctomb>:
  143128:	e3500000 	cmp	r0, #0
  14312c:	012fff1e 	bxeq	lr
  143130:	e3a02000 	mov	r2, #0
  143134:	ea00042a 	b	1441e4 <wcrtomb>

00143138 <__block_all_sigs>:
  143138:	e92d4010 	push	{r4, lr}
  14313c:	e1a04000 	mov	r4, r0
  143140:	e3a000af 	mov	r0, #175	; 0xaf
  143144:	ebffe3d5 	bl	13c0a0 <get_rtt_syscall>
  143148:	e250e000 	subs	lr, r0, #0
  14314c:	08bd8010 	popeq	{r4, pc}
  143150:	e1a02004 	mov	r2, r4
  143154:	e1a0c00e 	mov	ip, lr
  143158:	e8bd4010 	pop	{r4, lr}
  14315c:	e3a03008 	mov	r3, #8
  143160:	e59f1004 	ldr	r1, [pc, #4]	; 14316c <__block_all_sigs+0x34>
  143164:	e3a00000 	mov	r0, #0
  143168:	e12fff1c 	bx	ip
  14316c:	0014ccf0 	.word	0x0014ccf0

00143170 <__block_app_sigs>:
  143170:	e92d4010 	push	{r4, lr}
  143174:	e1a04000 	mov	r4, r0
  143178:	e3a000af 	mov	r0, #175	; 0xaf
  14317c:	ebffe3c7 	bl	13c0a0 <get_rtt_syscall>
  143180:	e250e000 	subs	lr, r0, #0
  143184:	08bd8010 	popeq	{r4, pc}
  143188:	e1a02004 	mov	r2, r4
  14318c:	e1a0c00e 	mov	ip, lr
  143190:	e8bd4010 	pop	{r4, lr}
  143194:	e3a03008 	mov	r3, #8
  143198:	e59f1004 	ldr	r1, [pc, #4]	; 1431a4 <__block_app_sigs+0x34>
  14319c:	e3a00000 	mov	r0, #0
  1431a0:	e12fff1c 	bx	ip
  1431a4:	0014ccf8 	.word	0x0014ccf8

001431a8 <__restore_sigs>:
  1431a8:	e92d4010 	push	{r4, lr}
  1431ac:	e1a04000 	mov	r4, r0
  1431b0:	e3a000af 	mov	r0, #175	; 0xaf
  1431b4:	ebffe3b9 	bl	13c0a0 <get_rtt_syscall>
  1431b8:	e250e000 	subs	lr, r0, #0
  1431bc:	08bd8010 	popeq	{r4, pc}
  1431c0:	e1a01004 	mov	r1, r4
  1431c4:	e1a0c00e 	mov	ip, lr
  1431c8:	e8bd4010 	pop	{r4, lr}
  1431cc:	e3a03008 	mov	r3, #8
  1431d0:	e3a02000 	mov	r2, #0
  1431d4:	e3a00002 	mov	r0, #2
  1431d8:	e12fff1c 	bx	ip

001431dc <__lockfile>:
  1431dc:	e59f2124 	ldr	r2, [pc, #292]	; 143308 <__lockfile+0x12c>
  1431e0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  1431e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1431e8:	e1a06000 	mov	r6, r0
  1431ec:	e5920000 	ldr	r0, [r2]
  1431f0:	e12fff30 	blx	r0
  1431f4:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  1431f8:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  1431fc:	e1530008 	cmp	r3, r8
  143200:	0a00003e 	beq	143300 <__lockfile+0x124>
  143204:	e59f7100 	ldr	r7, [pc, #256]	; 14330c <__lockfile+0x130>
  143208:	e286504c 	add	r5, r6, #76	; 0x4c
  14320c:	ea000002 	b	14321c <__lockfile+0x40>
  143210:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  143214:	e3530000 	cmp	r3, #0
  143218:	1a000008 	bne	143240 <__lockfile+0x64>
  14321c:	e3a00000 	mov	r0, #0
  143220:	e1a01008 	mov	r1, r8
  143224:	e1a02005 	mov	r2, r5
  143228:	e5973000 	ldr	r3, [r7]
  14322c:	e12fff33 	blx	r3
  143230:	e3500000 	cmp	r0, #0
  143234:	1afffff5 	bne	143210 <__lockfile+0x34>
  143238:	e3a00001 	mov	r0, #1
  14323c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143240:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  143244:	ea000002 	b	143254 <__lockfile+0x78>
  143248:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  14324c:	e3540000 	cmp	r4, #0
  143250:	1a000007 	bne	143274 <__lockfile+0x98>
  143254:	e3a00000 	mov	r0, #0
  143258:	e1a01008 	mov	r1, r8
  14325c:	e1a02005 	mov	r2, r5
  143260:	e5973000 	ldr	r3, [r7]
  143264:	e12fff33 	blx	r3
  143268:	e3500000 	cmp	r0, #0
  14326c:	1afffff5 	bne	143248 <__lockfile+0x6c>
  143270:	eafffff0 	b	143238 <__lockfile+0x5c>
  143274:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143278:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  14327c:	0a000017 	beq	1432e0 <__lockfile+0x104>
  143280:	e3a000f0 	mov	r0, #240	; 0xf0
  143284:	ebffe385 	bl	13c0a0 <get_rtt_syscall>
  143288:	e2504000 	subs	r4, r0, #0
  14328c:	0afffff0 	beq	143254 <__lockfile+0x78>
  143290:	e3a03000 	mov	r3, #0
  143294:	e1a02009 	mov	r2, r9
  143298:	e3a01080 	mov	r1, #128	; 0x80
  14329c:	e1a00005 	mov	r0, r5
  1432a0:	e12fff34 	blx	r4
  1432a4:	e3700026 	cmn	r0, #38	; 0x26
  1432a8:	1affffe9 	bne	143254 <__lockfile+0x78>
  1432ac:	e3a000f0 	mov	r0, #240	; 0xf0
  1432b0:	ebffe37a 	bl	13c0a0 <get_rtt_syscall>
  1432b4:	e2504000 	subs	r4, r0, #0
  1432b8:	0affffe5 	beq	143254 <__lockfile+0x78>
  1432bc:	e3a03000 	mov	r3, #0
  1432c0:	e1a02009 	mov	r2, r9
  1432c4:	e1a01003 	mov	r1, r3
  1432c8:	e1a00005 	mov	r0, r5
  1432cc:	e12fff34 	blx	r4
  1432d0:	eaffffdf 	b	143254 <__lockfile+0x78>
  1432d4:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1432d8:	e1530004 	cmp	r3, r4
  1432dc:	1affffdc 	bne	143254 <__lockfile+0x78>
  1432e0:	e1a00004 	mov	r0, r4
  1432e4:	e1a01009 	mov	r1, r9
  1432e8:	e1a02005 	mov	r2, r5
  1432ec:	e5973000 	ldr	r3, [r7]
  1432f0:	e12fff33 	blx	r3
  1432f4:	e3500000 	cmp	r0, #0
  1432f8:	1afffff5 	bne	1432d4 <__lockfile+0xf8>
  1432fc:	eaffffdf 	b	143280 <__lockfile+0xa4>
  143300:	e3a00000 	mov	r0, #0
  143304:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143308:	0014d3dc 	.word	0x0014d3dc
  14330c:	0014d3d8 	.word	0x0014d3d8

00143310 <__unlockfile>:
  143310:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143314:	e1a05000 	mov	r5, r0
  143318:	e59f7084 	ldr	r7, [pc, #132]	; 1433a4 <__unlockfile+0x94>
  14331c:	e280604c 	add	r6, r0, #76	; 0x4c
  143320:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143324:	ea000002 	b	143334 <__unlockfile+0x24>
  143328:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  14332c:	e1540003 	cmp	r4, r3
  143330:	1afffffa 	bne	143320 <__unlockfile+0x10>
  143334:	e1a00004 	mov	r0, r4
  143338:	e3a01000 	mov	r1, #0
  14333c:	e1a02006 	mov	r2, r6
  143340:	e5973000 	ldr	r3, [r7]
  143344:	e12fff33 	blx	r3
  143348:	e1500001 	cmp	r0, r1
  14334c:	1afffff5 	bne	143328 <__unlockfile+0x18>
  143350:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143354:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143358:	e3a000f0 	mov	r0, #240	; 0xf0
  14335c:	ebffe34f 	bl	13c0a0 <get_rtt_syscall>
  143360:	e2503000 	subs	r3, r0, #0
  143364:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143368:	e3a02001 	mov	r2, #1
  14336c:	e3a01081 	mov	r1, #129	; 0x81
  143370:	e1a00006 	mov	r0, r6
  143374:	e12fff33 	blx	r3
  143378:	e3700026 	cmn	r0, #38	; 0x26
  14337c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  143380:	e3a000f0 	mov	r0, #240	; 0xf0
  143384:	ebffe345 	bl	13c0a0 <get_rtt_syscall>
  143388:	e2503000 	subs	r3, r0, #0
  14338c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143390:	e3a02001 	mov	r2, #1
  143394:	e1a00006 	mov	r0, r6
  143398:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  14339c:	e1a01002 	mov	r1, r2
  1433a0:	e12fff13 	bx	r3
  1433a4:	0014d3d8 	.word	0x0014d3d8

001433a8 <__overflow>:
  1433a8:	e92d4010 	push	{r4, lr}
  1433ac:	e5903010 	ldr	r3, [r0, #16]
  1433b0:	e24dd008 	sub	sp, sp, #8
  1433b4:	e3530000 	cmp	r3, #0
  1433b8:	e1a04000 	mov	r4, r0
  1433bc:	e5cd1007 	strb	r1, [sp, #7]
  1433c0:	0a000015 	beq	14341c <__overflow+0x74>
  1433c4:	e5942014 	ldr	r2, [r4, #20]
  1433c8:	e1520003 	cmp	r2, r3
  1433cc:	1a000009 	bne	1433f8 <__overflow+0x50>
  1433d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1433d4:	e1a00004 	mov	r0, r4
  1433d8:	e3a02001 	mov	r2, #1
  1433dc:	e28d1007 	add	r1, sp, #7
  1433e0:	e12fff33 	blx	r3
  1433e4:	e3500001 	cmp	r0, #1
  1433e8:	1a00000f 	bne	14342c <__overflow+0x84>
  1433ec:	e5dd0007 	ldrb	r0, [sp, #7]
  1433f0:	e28dd008 	add	sp, sp, #8
  1433f4:	e8bd8010 	pop	{r4, pc}
  1433f8:	e5dd0007 	ldrb	r0, [sp, #7]
  1433fc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  143400:	e1500003 	cmp	r0, r3
  143404:	0afffff1 	beq	1433d0 <__overflow+0x28>
  143408:	e2823001 	add	r3, r2, #1
  14340c:	e5843014 	str	r3, [r4, #20]
  143410:	e5c20000 	strb	r0, [r2]
  143414:	e28dd008 	add	sp, sp, #8
  143418:	e8bd8010 	pop	{r4, pc}
  14341c:	eb00008c 	bl	143654 <__towrite>
  143420:	e3500000 	cmp	r0, #0
  143424:	05943010 	ldreq	r3, [r4, #16]
  143428:	0affffe5 	beq	1433c4 <__overflow+0x1c>
  14342c:	e3e00000 	mvn	r0, #0
  143430:	eaffffee 	b	1433f0 <__overflow+0x48>

00143434 <dummy>:
  143434:	e12fff1e 	bx	lr

00143438 <__stdio_close>:
  143438:	e92d4010 	push	{r4, lr}
  14343c:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  143440:	ebfffd87 	bl	142a64 <__aio_close>
  143444:	e1a04000 	mov	r4, r0
  143448:	e3a00006 	mov	r0, #6
  14344c:	ebffe313 	bl	13c0a0 <get_rtt_syscall>
  143450:	e2503000 	subs	r3, r0, #0
  143454:	0a000003 	beq	143468 <__stdio_close+0x30>
  143458:	e1a00004 	mov	r0, r4
  14345c:	e12fff33 	blx	r3
  143460:	e8bd4010 	pop	{r4, lr}
  143464:	eaffe342 	b	13c174 <__syscall_ret>
  143468:	e1a00003 	mov	r0, r3
  14346c:	eafffffb 	b	143460 <__stdio_close+0x28>

00143470 <__stdio_seek>:
  143470:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  143474:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  143478:	e24dd014 	sub	sp, sp, #20
  14347c:	e3a0008c 	mov	r0, #140	; 0x8c
  143480:	e1a07002 	mov	r7, r2
  143484:	e1a06003 	mov	r6, r3
  143488:	ebffe304 	bl	13c0a0 <get_rtt_syscall>
  14348c:	e2504000 	subs	r4, r0, #0
  143490:	0a00000e 	beq	1434d0 <__stdio_seek+0x60>
  143494:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  143498:	e1a02007 	mov	r2, r7
  14349c:	e58d3000 	str	r3, [sp]
  1434a0:	e1a01006 	mov	r1, r6
  1434a4:	e28d3008 	add	r3, sp, #8
  1434a8:	e1a00005 	mov	r0, r5
  1434ac:	e12fff34 	blx	r4
  1434b0:	ebffe32f 	bl	13c174 <__syscall_ret>
  1434b4:	e3500000 	cmp	r0, #0
  1434b8:	b3e00000 	mvnlt	r0, #0
  1434bc:	b3e01000 	mvnlt	r1, #0
  1434c0:	a28d1008 	addge	r1, sp, #8
  1434c4:	a8910003 	ldmge	r1, {r0, r1}
  1434c8:	e28dd014 	add	sp, sp, #20
  1434cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1434d0:	e1a00004 	mov	r0, r4
  1434d4:	eafffff5 	b	1434b0 <__stdio_seek+0x40>

001434d8 <__stdio_write>:
  1434d8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1434dc:	e590301c 	ldr	r3, [r0, #28]
  1434e0:	e5905014 	ldr	r5, [r0, #20]
  1434e4:	e24dd014 	sub	sp, sp, #20
  1434e8:	e0455003 	sub	r5, r5, r3
  1434ec:	e88d0028 	stm	sp, {r3, r5}
  1434f0:	e1a06000 	mov	r6, r0
  1434f4:	e1a08002 	mov	r8, r2
  1434f8:	e3a07002 	mov	r7, #2
  1434fc:	e58d200c 	str	r2, [sp, #12]
  143500:	e58d1008 	str	r1, [sp, #8]
  143504:	e0855002 	add	r5, r5, r2
  143508:	e1a0400d 	mov	r4, sp
  14350c:	ea00000d 	b	143548 <__stdio_write+0x70>
  143510:	e3500000 	cmp	r0, #0
  143514:	ba000020 	blt	14359c <__stdio_write+0xc4>
  143518:	e5943004 	ldr	r3, [r4, #4]
  14351c:	e0455000 	sub	r5, r5, r0
  143520:	e1500003 	cmp	r0, r3
  143524:	80400003 	subhi	r0, r0, r3
  143528:	8594300c 	ldrhi	r3, [r4, #12]
  14352c:	82844008 	addhi	r4, r4, #8
  143530:	e5942000 	ldr	r2, [r4]
  143534:	e0433000 	sub	r3, r3, r0
  143538:	e0820000 	add	r0, r2, r0
  14353c:	82477001 	subhi	r7, r7, #1
  143540:	e5843004 	str	r3, [r4, #4]
  143544:	e5840000 	str	r0, [r4]
  143548:	e3a00092 	mov	r0, #146	; 0x92
  14354c:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  143550:	ebffe2d2 	bl	13c0a0 <get_rtt_syscall>
  143554:	e2503000 	subs	r3, r0, #0
  143558:	0a00001c 	beq	1435d0 <__stdio_write+0xf8>
  14355c:	e1a00009 	mov	r0, r9
  143560:	e1a02007 	mov	r2, r7
  143564:	e1a01004 	mov	r1, r4
  143568:	e12fff33 	blx	r3
  14356c:	ebffe300 	bl	13c174 <__syscall_ret>
  143570:	e1500005 	cmp	r0, r5
  143574:	1affffe5 	bne	143510 <__stdio_write+0x38>
  143578:	e1a00008 	mov	r0, r8
  14357c:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  143580:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  143584:	e586201c 	str	r2, [r6, #28]
  143588:	e0823003 	add	r3, r2, r3
  14358c:	e5862014 	str	r2, [r6, #20]
  143590:	e5863010 	str	r3, [r6, #16]
  143594:	e28dd014 	add	sp, sp, #20
  143598:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14359c:	e3a00000 	mov	r0, #0
  1435a0:	e5963000 	ldr	r3, [r6]
  1435a4:	e3570002 	cmp	r7, #2
  1435a8:	e3833020 	orr	r3, r3, #32
  1435ac:	e5863000 	str	r3, [r6]
  1435b0:	e5860010 	str	r0, [r6, #16]
  1435b4:	e586001c 	str	r0, [r6, #28]
  1435b8:	e5860014 	str	r0, [r6, #20]
  1435bc:	0afffff4 	beq	143594 <__stdio_write+0xbc>
  1435c0:	e5940004 	ldr	r0, [r4, #4]
  1435c4:	e0480000 	sub	r0, r8, r0
  1435c8:	e28dd014 	add	sp, sp, #20
  1435cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1435d0:	e1a00003 	mov	r0, r3
  1435d4:	eaffffe4 	b	14356c <__stdio_write+0x94>

001435d8 <__stdout_write>:
  1435d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1435dc:	e1a04000 	mov	r4, r0
  1435e0:	e5900000 	ldr	r0, [r0]
  1435e4:	e59f3060 	ldr	r3, [pc, #96]	; 14364c <__stdout_write+0x74>
  1435e8:	e3100040 	tst	r0, #64	; 0x40
  1435ec:	e24dd00c 	sub	sp, sp, #12
  1435f0:	e1a05001 	mov	r5, r1
  1435f4:	e1a06002 	mov	r6, r2
  1435f8:	e5843024 	str	r3, [r4, #36]	; 0x24
  1435fc:	0a000005 	beq	143618 <__stdout_write+0x40>
  143600:	e1a02006 	mov	r2, r6
  143604:	e1a01005 	mov	r1, r5
  143608:	e1a00004 	mov	r0, r4
  14360c:	ebffffb1 	bl	1434d8 <__stdio_write>
  143610:	e28dd00c 	add	sp, sp, #12
  143614:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143618:	e3a00036 	mov	r0, #54	; 0x36
  14361c:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  143620:	ebffe29e 	bl	13c0a0 <get_rtt_syscall>
  143624:	e2503000 	subs	r3, r0, #0
  143628:	0afffff4 	beq	143600 <__stdout_write+0x28>
  14362c:	e1a0200d 	mov	r2, sp
  143630:	e1a00007 	mov	r0, r7
  143634:	e59f1014 	ldr	r1, [pc, #20]	; 143650 <__stdout_write+0x78>
  143638:	e12fff33 	blx	r3
  14363c:	e3500000 	cmp	r0, #0
  143640:	13e03000 	mvnne	r3, #0
  143644:	15843050 	strne	r3, [r4, #80]	; 0x50
  143648:	eaffffec 	b	143600 <__stdout_write+0x28>
  14364c:	001434d8 	.word	0x001434d8
  143650:	00005413 	.word	0x00005413

00143654 <__towrite>:
  143654:	e1a03000 	mov	r3, r0
  143658:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  14365c:	e5900000 	ldr	r0, [r0]
  143660:	e2412001 	sub	r2, r1, #1
  143664:	e1822001 	orr	r2, r2, r1
  143668:	e2101008 	ands	r1, r0, #8
  14366c:	e5832048 	str	r2, [r3, #72]	; 0x48
  143670:	1a000009 	bne	14369c <__towrite+0x48>
  143674:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143678:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  14367c:	e1a00001 	mov	r0, r1
  143680:	e08c2002 	add	r2, ip, r2
  143684:	e5831008 	str	r1, [r3, #8]
  143688:	e5831004 	str	r1, [r3, #4]
  14368c:	e583c01c 	str	ip, [r3, #28]
  143690:	e583c014 	str	ip, [r3, #20]
  143694:	e5832010 	str	r2, [r3, #16]
  143698:	e12fff1e 	bx	lr
  14369c:	e3800020 	orr	r0, r0, #32
  1436a0:	e5830000 	str	r0, [r3]
  1436a4:	e3e00000 	mvn	r0, #0
  1436a8:	e12fff1e 	bx	lr

001436ac <__towrite_needs_stdio_exit>:
  1436ac:	ea000336 	b	14438c <__stdio_exit>

001436b0 <locking_putc>:
  1436b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1436b4:	e1a05001 	mov	r5, r1
  1436b8:	e1a04000 	mov	r4, r0
  1436bc:	e59f7110 	ldr	r7, [pc, #272]	; 1437d4 <locking_putc+0x124>
  1436c0:	e281604c 	add	r6, r1, #76	; 0x4c
  1436c4:	ea000002 	b	1436d4 <locking_putc+0x24>
  1436c8:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  1436cc:	e3530000 	cmp	r3, #0
  1436d0:	1a000021 	bne	14375c <locking_putc+0xac>
  1436d4:	e3a00000 	mov	r0, #0
  1436d8:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  1436dc:	e1a02006 	mov	r2, r6
  1436e0:	e5973000 	ldr	r3, [r7]
  1436e4:	e12fff33 	blx	r3
  1436e8:	e3500000 	cmp	r0, #0
  1436ec:	1afffff5 	bne	1436c8 <locking_putc+0x18>
  1436f0:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1436f4:	e20480ff 	and	r8, r4, #255	; 0xff
  1436f8:	e1530008 	cmp	r3, r8
  1436fc:	0a00001c 	beq	143774 <locking_putc+0xc4>
  143700:	e5953014 	ldr	r3, [r5, #20]
  143704:	e5952010 	ldr	r2, [r5, #16]
  143708:	e1530002 	cmp	r3, r2
  14370c:	0a000018 	beq	143774 <locking_putc+0xc4>
  143710:	e2832001 	add	r2, r3, #1
  143714:	e5852014 	str	r2, [r5, #20]
  143718:	e5c34000 	strb	r4, [r3]
  14371c:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143720:	ea000002 	b	143730 <locking_putc+0x80>
  143724:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143728:	e1540003 	cmp	r4, r3
  14372c:	1afffffa 	bne	14371c <locking_putc+0x6c>
  143730:	e1a00004 	mov	r0, r4
  143734:	e3a01000 	mov	r1, #0
  143738:	e1a02006 	mov	r2, r6
  14373c:	e5973000 	ldr	r3, [r7]
  143740:	e12fff33 	blx	r3
  143744:	e1500001 	cmp	r0, r1
  143748:	1afffff5 	bne	143724 <locking_putc+0x74>
  14374c:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143750:	1a00000c 	bne	143788 <locking_putc+0xd8>
  143754:	e1a00008 	mov	r0, r8
  143758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  14375c:	e1a00005 	mov	r0, r5
  143760:	ebfffe9d 	bl	1431dc <__lockfile>
  143764:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143768:	e20480ff 	and	r8, r4, #255	; 0xff
  14376c:	e1530008 	cmp	r3, r8
  143770:	1affffe2 	bne	143700 <locking_putc+0x50>
  143774:	e1a01008 	mov	r1, r8
  143778:	e1a00005 	mov	r0, r5
  14377c:	ebffff09 	bl	1433a8 <__overflow>
  143780:	e1a08000 	mov	r8, r0
  143784:	eaffffe4 	b	14371c <locking_putc+0x6c>
  143788:	e3a000f0 	mov	r0, #240	; 0xf0
  14378c:	ebffe243 	bl	13c0a0 <get_rtt_syscall>
  143790:	e2503000 	subs	r3, r0, #0
  143794:	0affffee 	beq	143754 <locking_putc+0xa4>
  143798:	e3a02001 	mov	r2, #1
  14379c:	e3a01081 	mov	r1, #129	; 0x81
  1437a0:	e1a00006 	mov	r0, r6
  1437a4:	e12fff33 	blx	r3
  1437a8:	e3700026 	cmn	r0, #38	; 0x26
  1437ac:	1affffe8 	bne	143754 <locking_putc+0xa4>
  1437b0:	e3a000f0 	mov	r0, #240	; 0xf0
  1437b4:	ebffe239 	bl	13c0a0 <get_rtt_syscall>
  1437b8:	e2503000 	subs	r3, r0, #0
  1437bc:	0affffe4 	beq	143754 <locking_putc+0xa4>
  1437c0:	e3a02001 	mov	r2, #1
  1437c4:	e1a00006 	mov	r0, r6
  1437c8:	e1a01002 	mov	r1, r2
  1437cc:	e12fff33 	blx	r3
  1437d0:	eaffffdf 	b	143754 <locking_putc+0xa4>
  1437d4:	0014d3d8 	.word	0x0014d3d8

001437d8 <fputc>:
  1437d8:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  1437dc:	e1a03001 	mov	r3, r1
  1437e0:	e3520000 	cmp	r2, #0
  1437e4:	e1a0c000 	mov	ip, r0
  1437e8:	ba00001d 	blt	143864 <fputc+0x8c>
  1437ec:	0a000017 	beq	143850 <fputc+0x78>
  1437f0:	e59f10a8 	ldr	r1, [pc, #168]	; 1438a0 <fputc+0xc8>
  1437f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1437f8:	e5910000 	ldr	r0, [r1]
  1437fc:	e12fff30 	blx	r0
  143800:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  143804:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143808:	e1520001 	cmp	r2, r1
  14380c:	0a000003 	beq	143820 <fputc+0x48>
  143810:	e1a01003 	mov	r1, r3
  143814:	e1a0000c 	mov	r0, ip
  143818:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  14381c:	eaffffa3 	b	1436b0 <locking_putc>
  143820:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  143824:	e20c00ff 	and	r0, ip, #255	; 0xff
  143828:	e1500002 	cmp	r0, r2
  14382c:	0a000008 	beq	143854 <fputc+0x7c>
  143830:	e5932014 	ldr	r2, [r3, #20]
  143834:	e5931010 	ldr	r1, [r3, #16]
  143838:	e1520001 	cmp	r2, r1
  14383c:	0a000004 	beq	143854 <fputc+0x7c>
  143840:	e2821001 	add	r1, r2, #1
  143844:	e5831014 	str	r1, [r3, #20]
  143848:	e5c2c000 	strb	ip, [r2]
  14384c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  143850:	eaffff96 	b	1436b0 <locking_putc>
  143854:	e1a01000 	mov	r1, r0
  143858:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  14385c:	e1a00003 	mov	r0, r3
  143860:	eafffed0 	b	1433a8 <__overflow>
  143864:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  143868:	e20000ff 	and	r0, r0, #255	; 0xff
  14386c:	e1500002 	cmp	r0, r2
  143870:	0a000007 	beq	143894 <fputc+0xbc>
  143874:	e5912014 	ldr	r2, [r1, #20]
  143878:	e5911010 	ldr	r1, [r1, #16]
  14387c:	e1520001 	cmp	r2, r1
  143880:	0a000003 	beq	143894 <fputc+0xbc>
  143884:	e2821001 	add	r1, r2, #1
  143888:	e5831014 	str	r1, [r3, #20]
  14388c:	e5c2c000 	strb	ip, [r2]
  143890:	e12fff1e 	bx	lr
  143894:	e1a01000 	mov	r1, r0
  143898:	e1a00003 	mov	r0, r3
  14389c:	eafffec1 	b	1433a8 <__overflow>
  1438a0:	0014d3dc 	.word	0x0014d3dc

001438a4 <fputs>:
  1438a4:	e92d4070 	push	{r4, r5, r6, lr}
  1438a8:	e1a06001 	mov	r6, r1
  1438ac:	e1a05000 	mov	r5, r0
  1438b0:	ebfff63c 	bl	1411a8 <strlen>
  1438b4:	e1a03006 	mov	r3, r6
  1438b8:	e1a04000 	mov	r4, r0
  1438bc:	e1a02000 	mov	r2, r0
  1438c0:	e3a01001 	mov	r1, #1
  1438c4:	e1a00005 	mov	r0, r5
  1438c8:	eb000041 	bl	1439d4 <fwrite>
  1438cc:	e0500004 	subs	r0, r0, r4
  1438d0:	13e00000 	mvnne	r0, #0
  1438d4:	e8bd8070 	pop	{r4, r5, r6, pc}

001438d8 <__fwritex>:
  1438d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1438dc:	e5924010 	ldr	r4, [r2, #16]
  1438e0:	e1a05002 	mov	r5, r2
  1438e4:	e3540000 	cmp	r4, #0
  1438e8:	e1a06000 	mov	r6, r0
  1438ec:	e1a07001 	mov	r7, r1
  1438f0:	0a000009 	beq	14391c <__fwritex+0x44>
  1438f4:	e5950014 	ldr	r0, [r5, #20]
  1438f8:	e0444000 	sub	r4, r4, r0
  1438fc:	e1540007 	cmp	r4, r7
  143900:	2a00000b 	bcs	143934 <__fwritex+0x5c>
  143904:	e1a02007 	mov	r2, r7
  143908:	e1a01006 	mov	r1, r6
  14390c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143910:	e1a00005 	mov	r0, r5
  143914:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143918:	e12fff13 	bx	r3
  14391c:	e1a00002 	mov	r0, r2
  143920:	ebffff4b 	bl	143654 <__towrite>
  143924:	e3500000 	cmp	r0, #0
  143928:	1a000027 	bne	1439cc <__fwritex+0xf4>
  14392c:	e5954010 	ldr	r4, [r5, #16]
  143930:	eaffffef 	b	1438f4 <__fwritex+0x1c>
  143934:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143938:	e3530000 	cmp	r3, #0
  14393c:	ba00000d 	blt	143978 <__fwritex+0xa0>
  143940:	e3570000 	cmp	r7, #0
  143944:	0a00000b 	beq	143978 <__fwritex+0xa0>
  143948:	e2473001 	sub	r3, r7, #1
  14394c:	e7d62003 	ldrb	r2, [r6, r3]
  143950:	e0863003 	add	r3, r6, r3
  143954:	e352000a 	cmp	r2, #10
  143958:	1a000003 	bne	14396c <__fwritex+0x94>
  14395c:	ea00000e 	b	14399c <__fwritex+0xc4>
  143960:	e5732001 	ldrb	r2, [r3, #-1]!
  143964:	e352000a 	cmp	r2, #10
  143968:	0a00000c 	beq	1439a0 <__fwritex+0xc8>
  14396c:	e1530006 	cmp	r3, r6
  143970:	e0434006 	sub	r4, r3, r6
  143974:	1afffff9 	bne	143960 <__fwritex+0x88>
  143978:	e1a04007 	mov	r4, r7
  14397c:	e1a02004 	mov	r2, r4
  143980:	e1a01006 	mov	r1, r6
  143984:	ebfff43e 	bl	140a84 <memcpy>
  143988:	e5953014 	ldr	r3, [r5, #20]
  14398c:	e1a00007 	mov	r0, r7
  143990:	e0834004 	add	r4, r3, r4
  143994:	e5854014 	str	r4, [r5, #20]
  143998:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  14399c:	e1a04007 	mov	r4, r7
  1439a0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  1439a4:	e1a02004 	mov	r2, r4
  1439a8:	e1a01006 	mov	r1, r6
  1439ac:	e1a00005 	mov	r0, r5
  1439b0:	e12fff33 	blx	r3
  1439b4:	e1500004 	cmp	r0, r4
  1439b8:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  1439bc:	e0866004 	add	r6, r6, r4
  1439c0:	e5950014 	ldr	r0, [r5, #20]
  1439c4:	e0474004 	sub	r4, r7, r4
  1439c8:	eaffffeb 	b	14397c <__fwritex+0xa4>
  1439cc:	e1a00004 	mov	r0, r4
  1439d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

001439d4 <fwrite>:
  1439d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1439d8:	e1a05003 	mov	r5, r3
  1439dc:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  1439e0:	e3510000 	cmp	r1, #0
  1439e4:	e1a04002 	mov	r4, r2
  1439e8:	11a04002 	movne	r4, r2
  1439ec:	03a04000 	moveq	r4, #0
  1439f0:	e3530000 	cmp	r3, #0
  1439f4:	e1a06001 	mov	r6, r1
  1439f8:	e0070192 	mul	r7, r2, r1
  1439fc:	aa000009 	bge	143a28 <fwrite+0x54>
  143a00:	e1a02005 	mov	r2, r5
  143a04:	e1a01007 	mov	r1, r7
  143a08:	ebffffb2 	bl	1438d8 <__fwritex>
  143a0c:	e1a08000 	mov	r8, r0
  143a10:	e1570008 	cmp	r7, r8
  143a14:	0a000012 	beq	143a64 <fwrite+0x90>
  143a18:	e1a01006 	mov	r1, r6
  143a1c:	e1a00008 	mov	r0, r8
  143a20:	ebffd2cf 	bl	138564 <__udivsi3>
  143a24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143a28:	e1a08000 	mov	r8, r0
  143a2c:	e1a00005 	mov	r0, r5
  143a30:	ebfffde9 	bl	1431dc <__lockfile>
  143a34:	e1a02005 	mov	r2, r5
  143a38:	e1a09000 	mov	r9, r0
  143a3c:	e1a01007 	mov	r1, r7
  143a40:	e1a00008 	mov	r0, r8
  143a44:	ebffffa3 	bl	1438d8 <__fwritex>
  143a48:	e3590000 	cmp	r9, #0
  143a4c:	e1a08000 	mov	r8, r0
  143a50:	0affffee 	beq	143a10 <fwrite+0x3c>
  143a54:	e1a00005 	mov	r0, r5
  143a58:	ebfffe2c 	bl	143310 <__unlockfile>
  143a5c:	e1570008 	cmp	r7, r8
  143a60:	1affffec 	bne	143a18 <fwrite+0x44>
  143a64:	e1a00004 	mov	r0, r4
  143a68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00143a6c <memchr>:
  143a6c:	e3100003 	tst	r0, #3
  143a70:	e20110ff 	and	r1, r1, #255	; 0xff
  143a74:	0a000010 	beq	143abc <memchr+0x50>
  143a78:	e3520000 	cmp	r2, #0
  143a7c:	0a000031 	beq	143b48 <memchr+0xdc>
  143a80:	e5d03000 	ldrb	r3, [r0]
  143a84:	e1530001 	cmp	r3, r1
  143a88:	0a00003e 	beq	143b88 <memchr+0x11c>
  143a8c:	e2803001 	add	r3, r0, #1
  143a90:	ea000005 	b	143aac <memchr+0x40>
  143a94:	e3520000 	cmp	r2, #0
  143a98:	0a00002a 	beq	143b48 <memchr+0xdc>
  143a9c:	e5d3c000 	ldrb	ip, [r3]
  143aa0:	e2833001 	add	r3, r3, #1
  143aa4:	e15c0001 	cmp	ip, r1
  143aa8:	0a000036 	beq	143b88 <memchr+0x11c>
  143aac:	e3130003 	tst	r3, #3
  143ab0:	e2422001 	sub	r2, r2, #1
  143ab4:	e1a00003 	mov	r0, r3
  143ab8:	1afffff5 	bne	143a94 <memchr+0x28>
  143abc:	e3520000 	cmp	r2, #0
  143ac0:	0a000020 	beq	143b48 <memchr+0xdc>
  143ac4:	e5d03000 	ldrb	r3, [r0]
  143ac8:	e1530001 	cmp	r3, r1
  143acc:	0a00002d 	beq	143b88 <memchr+0x11c>
  143ad0:	e92d4070 	push	{r4, r5, r6, lr}
  143ad4:	e3520003 	cmp	r2, #3
  143ad8:	e0814401 	add	r4, r1, r1, lsl #8
  143adc:	e0844804 	add	r4, r4, r4, lsl #16
  143ae0:	9a00001d 	bls	143b5c <memchr+0xf0>
  143ae4:	e5903000 	ldr	r3, [r0]
  143ae8:	e59f60cc 	ldr	r6, [pc, #204]	; 143bbc <memchr+0x150>
  143aec:	e0233004 	eor	r3, r3, r4
  143af0:	e083c006 	add	ip, r3, r6
  143af4:	e59f50c4 	ldr	r5, [pc, #196]	; 143bc0 <memchr+0x154>
  143af8:	e1cc3003 	bic	r3, ip, r3
  143afc:	e1130005 	tst	r3, r5
  143b00:	1a000015 	bne	143b5c <memchr+0xf0>
  143b04:	e280e004 	add	lr, r0, #4
  143b08:	ea000006 	b	143b28 <memchr+0xbc>
  143b0c:	e59e3000 	ldr	r3, [lr]
  143b10:	e28ee004 	add	lr, lr, #4
  143b14:	e0233004 	eor	r3, r3, r4
  143b18:	e083c006 	add	ip, r3, r6
  143b1c:	e1cc3003 	bic	r3, ip, r3
  143b20:	e1130005 	tst	r3, r5
  143b24:	1a000009 	bne	143b50 <memchr+0xe4>
  143b28:	e2422004 	sub	r2, r2, #4
  143b2c:	e3520003 	cmp	r2, #3
  143b30:	e1a0000e 	mov	r0, lr
  143b34:	8afffff4 	bhi	143b0c <memchr+0xa0>
  143b38:	e3520000 	cmp	r2, #0
  143b3c:	1a000003 	bne	143b50 <memchr+0xe4>
  143b40:	e3a00000 	mov	r0, #0
  143b44:	e8bd8070 	pop	{r4, r5, r6, pc}
  143b48:	e3a00000 	mov	r0, #0
  143b4c:	e12fff1e 	bx	lr
  143b50:	e5d03000 	ldrb	r3, [r0]
  143b54:	e1510003 	cmp	r1, r3
  143b58:	08bd8070 	popeq	{r4, r5, r6, pc}
  143b5c:	e0802002 	add	r2, r0, r2
  143b60:	e2803001 	add	r3, r0, #1
  143b64:	ea000003 	b	143b78 <memchr+0x10c>
  143b68:	e5d3c000 	ldrb	ip, [r3]
  143b6c:	e2833001 	add	r3, r3, #1
  143b70:	e15c0001 	cmp	ip, r1
  143b74:	08bd8070 	popeq	{r4, r5, r6, pc}
  143b78:	e1520003 	cmp	r2, r3
  143b7c:	e1a00003 	mov	r0, r3
  143b80:	1afffff8 	bne	143b68 <memchr+0xfc>
  143b84:	eaffffed 	b	143b40 <memchr+0xd4>
  143b88:	e5d03000 	ldrb	r3, [r0]
  143b8c:	e1510003 	cmp	r1, r3
  143b90:	012fff1e 	bxeq	lr
  143b94:	e0802002 	add	r2, r0, r2
  143b98:	e2803001 	add	r3, r0, #1
  143b9c:	e1520003 	cmp	r2, r3
  143ba0:	e1a00003 	mov	r0, r3
  143ba4:	0affffe7 	beq	143b48 <memchr+0xdc>
  143ba8:	e5d3c000 	ldrb	ip, [r3]
  143bac:	e2833001 	add	r3, r3, #1
  143bb0:	e15c0001 	cmp	ip, r1
  143bb4:	1afffff8 	bne	143b9c <memchr+0x130>
  143bb8:	e12fff1e 	bx	lr
  143bbc:	fefefeff 	.word	0xfefefeff
  143bc0:	80808080 	.word	0x80808080

00143bc4 <__stpcpy>:
  143bc4:	e0203001 	eor	r3, r0, r1
  143bc8:	e3130003 	tst	r3, #3
  143bcc:	e92d4010 	push	{r4, lr}
  143bd0:	1a00001f 	bne	143c54 <__stpcpy+0x90>
  143bd4:	e3110003 	tst	r1, #3
  143bd8:	0a00000e 	beq	143c18 <__stpcpy+0x54>
  143bdc:	e5d13000 	ldrb	r3, [r1]
  143be0:	e3530000 	cmp	r3, #0
  143be4:	e5c03000 	strb	r3, [r0]
  143be8:	08bd8010 	popeq	{r4, pc}
  143bec:	e2813001 	add	r3, r1, #1
  143bf0:	e2802001 	add	r2, r0, #1
  143bf4:	ea000003 	b	143c08 <__stpcpy+0x44>
  143bf8:	e4d31001 	ldrb	r1, [r3], #1
  143bfc:	e3510000 	cmp	r1, #0
  143c00:	e4c21001 	strb	r1, [r2], #1
  143c04:	08bd8010 	popeq	{r4, pc}
  143c08:	e3130003 	tst	r3, #3
  143c0c:	e1a01003 	mov	r1, r3
  143c10:	e1a00002 	mov	r0, r2
  143c14:	1afffff7 	bne	143bf8 <__stpcpy+0x34>
  143c18:	e5913000 	ldr	r3, [r1]
  143c1c:	e59f405c 	ldr	r4, [pc, #92]	; 143c80 <__stpcpy+0xbc>
  143c20:	e59fe05c 	ldr	lr, [pc, #92]	; 143c84 <__stpcpy+0xc0>
  143c24:	e0832004 	add	r2, r3, r4
  143c28:	e1c22003 	bic	r2, r2, r3
  143c2c:	e112000e 	tst	r2, lr
  143c30:	1a000007 	bne	143c54 <__stpcpy+0x90>
  143c34:	e281c004 	add	ip, r1, #4
  143c38:	e4803004 	str	r3, [r0], #4
  143c3c:	e1a0100c 	mov	r1, ip
  143c40:	e49c3004 	ldr	r3, [ip], #4
  143c44:	e0832004 	add	r2, r3, r4
  143c48:	e1c22003 	bic	r2, r2, r3
  143c4c:	e112000e 	tst	r2, lr
  143c50:	0afffff8 	beq	143c38 <__stpcpy+0x74>
  143c54:	e5d13000 	ldrb	r3, [r1]
  143c58:	e3530000 	cmp	r3, #0
  143c5c:	e5c03000 	strb	r3, [r0]
  143c60:	08bd8010 	popeq	{r4, pc}
  143c64:	e2803001 	add	r3, r0, #1
  143c68:	e5f12001 	ldrb	r2, [r1, #1]!
  143c6c:	e1a00003 	mov	r0, r3
  143c70:	e3520000 	cmp	r2, #0
  143c74:	e4c32001 	strb	r2, [r3], #1
  143c78:	1afffffa 	bne	143c68 <__stpcpy+0xa4>
  143c7c:	e8bd8010 	pop	{r4, pc}
  143c80:	fefefeff 	.word	0xfefefeff
  143c84:	80808080 	.word	0x80808080

00143c88 <__stpncpy>:
  143c88:	e0203001 	eor	r3, r0, r1
  143c8c:	e3130003 	tst	r3, #3
  143c90:	e92d4070 	push	{r4, r5, r6, lr}
  143c94:	1a000030 	bne	143d5c <__stpncpy+0xd4>
  143c98:	e3110003 	tst	r1, #3
  143c9c:	0a000044 	beq	143db4 <__stpncpy+0x12c>
  143ca0:	e3520000 	cmp	r2, #0
  143ca4:	0a000040 	beq	143dac <__stpncpy+0x124>
  143ca8:	e5d13000 	ldrb	r3, [r1]
  143cac:	e3530000 	cmp	r3, #0
  143cb0:	e5c03000 	strb	r3, [r0]
  143cb4:	0a00003c 	beq	143dac <__stpncpy+0x124>
  143cb8:	e2813001 	add	r3, r1, #1
  143cbc:	e2800001 	add	r0, r0, #1
  143cc0:	ea000005 	b	143cdc <__stpncpy+0x54>
  143cc4:	e3520000 	cmp	r2, #0
  143cc8:	0a000032 	beq	143d98 <__stpncpy+0x110>
  143ccc:	e4d31001 	ldrb	r1, [r3], #1
  143cd0:	e3510000 	cmp	r1, #0
  143cd4:	e4c01001 	strb	r1, [r0], #1
  143cd8:	0a00002e 	beq	143d98 <__stpncpy+0x110>
  143cdc:	e3130003 	tst	r3, #3
  143ce0:	e2422001 	sub	r2, r2, #1
  143ce4:	e1a01003 	mov	r1, r3
  143ce8:	e1a04000 	mov	r4, r0
  143cec:	1afffff4 	bne	143cc4 <__stpncpy+0x3c>
  143cf0:	e3520000 	cmp	r2, #0
  143cf4:	0a000027 	beq	143d98 <__stpncpy+0x110>
  143cf8:	e5d1c000 	ldrb	ip, [r1]
  143cfc:	e35c0000 	cmp	ip, #0
  143d00:	0a000024 	beq	143d98 <__stpncpy+0x110>
  143d04:	e3520003 	cmp	r2, #3
  143d08:	9a00002b 	bls	143dbc <__stpncpy+0x134>
  143d0c:	e5913000 	ldr	r3, [r1]
  143d10:	e59f60b0 	ldr	r6, [pc, #176]	; 143dc8 <__stpncpy+0x140>
  143d14:	e59f50b0 	ldr	r5, [pc, #176]	; 143dcc <__stpncpy+0x144>
  143d18:	e0830006 	add	r0, r3, r6
  143d1c:	e1c00003 	bic	r0, r0, r3
  143d20:	e1100005 	tst	r0, r5
  143d24:	1a000024 	bne	143dbc <__stpncpy+0x134>
  143d28:	e281e004 	add	lr, r1, #4
  143d2c:	ea000004 	b	143d44 <__stpncpy+0xbc>
  143d30:	e49e3004 	ldr	r3, [lr], #4
  143d34:	e083c006 	add	ip, r3, r6
  143d38:	e1ccc003 	bic	ip, ip, r3
  143d3c:	e11c0005 	tst	ip, r5
  143d40:	1a000007 	bne	143d64 <__stpncpy+0xdc>
  143d44:	e2422004 	sub	r2, r2, #4
  143d48:	e4843004 	str	r3, [r4], #4
  143d4c:	e3520003 	cmp	r2, #3
  143d50:	e1a00004 	mov	r0, r4
  143d54:	e1a0100e 	mov	r1, lr
  143d58:	8afffff4 	bhi	143d30 <__stpncpy+0xa8>
  143d5c:	e3520000 	cmp	r2, #0
  143d60:	0a000011 	beq	143dac <__stpncpy+0x124>
  143d64:	e5d13000 	ldrb	r3, [r1]
  143d68:	e3530000 	cmp	r3, #0
  143d6c:	e5c03000 	strb	r3, [r0]
  143d70:	0a00000d 	beq	143dac <__stpncpy+0x124>
  143d74:	e2800001 	add	r0, r0, #1
  143d78:	ea000003 	b	143d8c <__stpncpy+0x104>
  143d7c:	e5f13001 	ldrb	r3, [r1, #1]!
  143d80:	e3530000 	cmp	r3, #0
  143d84:	e4c03001 	strb	r3, [r0], #1
  143d88:	0a000002 	beq	143d98 <__stpncpy+0x110>
  143d8c:	e2522001 	subs	r2, r2, #1
  143d90:	e1a04000 	mov	r4, r0
  143d94:	1afffff8 	bne	143d7c <__stpncpy+0xf4>
  143d98:	e3a01000 	mov	r1, #0
  143d9c:	e1a00004 	mov	r0, r4
  143da0:	ebfff46f 	bl	140f64 <memset>
  143da4:	e1a00004 	mov	r0, r4
  143da8:	e8bd8070 	pop	{r4, r5, r6, pc}
  143dac:	e1a04000 	mov	r4, r0
  143db0:	eafffff8 	b	143d98 <__stpncpy+0x110>
  143db4:	e1a04000 	mov	r4, r0
  143db8:	eaffffcc 	b	143cf0 <__stpncpy+0x68>
  143dbc:	e5c4c000 	strb	ip, [r4]
  143dc0:	e1a00004 	mov	r0, r4
  143dc4:	eaffffea 	b	143d74 <__stpncpy+0xec>
  143dc8:	fefefeff 	.word	0xfefefeff
  143dcc:	80808080 	.word	0x80808080

00143dd0 <strchr>:
  143dd0:	e92d4010 	push	{r4, lr}
  143dd4:	e1a04001 	mov	r4, r1
  143dd8:	eb000004 	bl	143df0 <__strchrnul>
  143ddc:	e5d03000 	ldrb	r3, [r0]
  143de0:	e20440ff 	and	r4, r4, #255	; 0xff
  143de4:	e1540003 	cmp	r4, r3
  143de8:	13a00000 	movne	r0, #0
  143dec:	e8bd8010 	pop	{r4, pc}

00143df0 <__strchrnul>:
  143df0:	e20110ff 	and	r1, r1, #255	; 0xff
  143df4:	e3510000 	cmp	r1, #0
  143df8:	e92d4070 	push	{r4, r5, r6, lr}
  143dfc:	e1a04000 	mov	r4, r0
  143e00:	0a000031 	beq	143ecc <__strchrnul+0xdc>
  143e04:	e3100003 	tst	r0, #3
  143e08:	0a00000e 	beq	143e48 <__strchrnul+0x58>
  143e0c:	e5d02000 	ldrb	r2, [r0]
  143e10:	e3520000 	cmp	r2, #0
  143e14:	0a00002f 	beq	143ed8 <__strchrnul+0xe8>
  143e18:	e1510002 	cmp	r1, r2
  143e1c:	0a00002d 	beq	143ed8 <__strchrnul+0xe8>
  143e20:	e2803001 	add	r3, r0, #1
  143e24:	ea000004 	b	143e3c <__strchrnul+0x4c>
  143e28:	e4d32001 	ldrb	r2, [r3], #1
  143e2c:	e3520000 	cmp	r2, #0
  143e30:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e34:	e1520001 	cmp	r2, r1
  143e38:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e3c:	e3130003 	tst	r3, #3
  143e40:	e1a00003 	mov	r0, r3
  143e44:	1afffff7 	bne	143e28 <__strchrnul+0x38>
  143e48:	e590c000 	ldr	ip, [r0]
  143e4c:	e0815401 	add	r5, r1, r1, lsl #8
  143e50:	e59f4088 	ldr	r4, [pc, #136]	; 143ee0 <__strchrnul+0xf0>
  143e54:	e0855805 	add	r5, r5, r5, lsl #16
  143e58:	e025e00c 	eor	lr, r5, ip
  143e5c:	e08e2004 	add	r2, lr, r4
  143e60:	e08c3004 	add	r3, ip, r4
  143e64:	e1c2200e 	bic	r2, r2, lr
  143e68:	e1c3300c 	bic	r3, r3, ip
  143e6c:	e59f6070 	ldr	r6, [pc, #112]	; 143ee4 <__strchrnul+0xf4>
  143e70:	e1833002 	orr	r3, r3, r2
  143e74:	e1130006 	tst	r3, r6
  143e78:	1a000008 	bne	143ea0 <__strchrnul+0xb0>
  143e7c:	e5b0c004 	ldr	ip, [r0, #4]!
  143e80:	e02ce005 	eor	lr, ip, r5
  143e84:	e08e2004 	add	r2, lr, r4
  143e88:	e08c3004 	add	r3, ip, r4
  143e8c:	e1c2200e 	bic	r2, r2, lr
  143e90:	e1c3300c 	bic	r3, r3, ip
  143e94:	e1833002 	orr	r3, r3, r2
  143e98:	e1130006 	tst	r3, r6
  143e9c:	0afffff6 	beq	143e7c <__strchrnul+0x8c>
  143ea0:	e5d03000 	ldrb	r3, [r0]
  143ea4:	e3530000 	cmp	r3, #0
  143ea8:	08bd8070 	popeq	{r4, r5, r6, pc}
  143eac:	e1510003 	cmp	r1, r3
  143eb0:	08bd8070 	popeq	{r4, r5, r6, pc}
  143eb4:	e5f03001 	ldrb	r3, [r0, #1]!
  143eb8:	e3530000 	cmp	r3, #0
  143ebc:	08bd8070 	popeq	{r4, r5, r6, pc}
  143ec0:	e1530001 	cmp	r3, r1
  143ec4:	1afffffa 	bne	143eb4 <__strchrnul+0xc4>
  143ec8:	e8bd8070 	pop	{r4, r5, r6, pc}
  143ecc:	ebfff4b5 	bl	1411a8 <strlen>
  143ed0:	e0840000 	add	r0, r4, r0
  143ed4:	e8bd8070 	pop	{r4, r5, r6, pc}
  143ed8:	e1a00004 	mov	r0, r4
  143edc:	e8bd8070 	pop	{r4, r5, r6, pc}
  143ee0:	fefefeff 	.word	0xfefefeff
  143ee4:	80808080 	.word	0x80808080

00143ee8 <__set_thread_area>:
  143ee8:	e59f3108 	ldr	r3, [pc, #264]	; 143ff8 <__set_thread_area+0x110>
  143eec:	e92d4010 	push	{r4, lr}
  143ef0:	e5933000 	ldr	r3, [r3]
  143ef4:	e1a04000 	mov	r4, r0
  143ef8:	e3130902 	tst	r3, #32768	; 0x8000
  143efc:	0a000017 	beq	143f60 <__set_thread_area+0x78>
  143f00:	e59f20f4 	ldr	r2, [pc, #244]	; 143ffc <__set_thread_area+0x114>
  143f04:	e59f10f4 	ldr	r1, [pc, #244]	; 144000 <__set_thread_area+0x118>
  143f08:	e59f00f4 	ldr	r0, [pc, #244]	; 144004 <__set_thread_area+0x11c>
  143f0c:	e59fc0f4 	ldr	ip, [pc, #244]	; 144008 <__set_thread_area+0x120>
  143f10:	e59f30f4 	ldr	r3, [pc, #244]	; 14400c <__set_thread_area+0x124>
  143f14:	e5922010 	ldr	r2, [r2, #16]
  143f18:	e580c000 	str	ip, [r0]
  143f1c:	e5831000 	str	r1, [r3]
  143f20:	e5921000 	ldr	r1, [r2]
  143f24:	e3510000 	cmp	r1, #0
  143f28:	0a000005 	beq	143f44 <__set_thread_area+0x5c>
  143f2c:	e351000f 	cmp	r1, #15
  143f30:	1a00001b 	bne	143fa4 <__set_thread_area+0xbc>
  143f34:	e5922004 	ldr	r2, [r2, #4]
  143f38:	e5d21000 	ldrb	r1, [r2]
  143f3c:	e3510076 	cmp	r1, #118	; 0x76
  143f40:	0a000021 	beq	143fcc <__set_thread_area+0xe4>
  143f44:	e59f00c4 	ldr	r0, [pc, #196]	; 144010 <__set_thread_area+0x128>
  143f48:	ebffe054 	bl	13c0a0 <get_rtt_syscall>
  143f4c:	e2503000 	subs	r3, r0, #0
  143f50:	08bd8010 	popeq	{r4, pc}
  143f54:	e1a00004 	mov	r0, r4
  143f58:	e8bd4010 	pop	{r4, lr}
  143f5c:	e12fff13 	bx	r3
  143f60:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  143f64:	e59f10a8 	ldr	r1, [pc, #168]	; 144014 <__set_thread_area+0x12c>
  143f68:	e5132003 	ldr	r2, [r3, #-3]
  143f6c:	e59f30a4 	ldr	r3, [pc, #164]	; 144018 <__set_thread_area+0x130>
  143f70:	e59f008c 	ldr	r0, [pc, #140]	; 144004 <__set_thread_area+0x11c>
  143f74:	e5831000 	str	r1, [r3]
  143f78:	e59fc09c 	ldr	ip, [pc, #156]	; 14401c <__set_thread_area+0x134>
  143f7c:	e59f3088 	ldr	r3, [pc, #136]	; 14400c <__set_thread_area+0x124>
  143f80:	e2411040 	sub	r1, r1, #64	; 0x40
  143f84:	e3520001 	cmp	r2, #1
  143f88:	e580c000 	str	ip, [r0]
  143f8c:	e5831000 	str	r1, [r3]
  143f90:	da000009 	ble	143fbc <__set_thread_area+0xd4>
  143f94:	e3520002 	cmp	r2, #2
  143f98:	059f2080 	ldreq	r2, [pc, #128]	; 144020 <__set_thread_area+0x138>
  143f9c:	05832000 	streq	r2, [r3]
  143fa0:	eaffffe7 	b	143f44 <__set_thread_area+0x5c>
  143fa4:	e5b21008 	ldr	r1, [r2, #8]!
  143fa8:	e3510000 	cmp	r1, #0
  143fac:	0affffe4 	beq	143f44 <__set_thread_area+0x5c>
  143fb0:	e351000f 	cmp	r1, #15
  143fb4:	0affffde 	beq	143f34 <__set_thread_area+0x4c>
  143fb8:	eafffff9 	b	143fa4 <__set_thread_area+0xbc>
  143fbc:	e7f000f0 	.word	0xe7f000f0
  143fc0:	e59f2058 	ldr	r2, [pc, #88]	; 144020 <__set_thread_area+0x138>
  143fc4:	e5832000 	str	r2, [r3]
  143fc8:	eaffffdd 	b	143f44 <__set_thread_area+0x5c>
  143fcc:	e5d21001 	ldrb	r1, [r2, #1]
  143fd0:	e3510036 	cmp	r1, #54	; 0x36
  143fd4:	1affffda 	bne	143f44 <__set_thread_area+0x5c>
  143fd8:	e5d22002 	ldrb	r2, [r2, #2]
  143fdc:	e2422030 	sub	r2, r2, #48	; 0x30
  143fe0:	e3520009 	cmp	r2, #9
  143fe4:	859f1038 	ldrhi	r1, [pc, #56]	; 144024 <__set_thread_area+0x13c>
  143fe8:	859f2038 	ldrhi	r2, [pc, #56]	; 144028 <__set_thread_area+0x140>
  143fec:	85801000 	strhi	r1, [r0]
  143ff0:	85832000 	strhi	r2, [r3]
  143ff4:	eaffffd2 	b	143f44 <__set_thread_area+0x5c>
  143ff8:	0015d058 	.word	0x0015d058
  143ffc:	0015d05c 	.word	0x0015d05c
  144000:	00141bc0 	.word	0x00141bc0
  144004:	0014d3d8 	.word	0x0014d3d8
  144008:	00141c00 	.word	0x00141c00
  14400c:	0014d3d4 	.word	0x0014d3d4
  144010:	000f0005 	.word	0x000f0005
  144014:	ffff0fe0 	.word	0xffff0fe0
  144018:	0014d3dc 	.word	0x0014d3dc
  14401c:	ffff0fc0 	.word	0xffff0fc0
  144020:	00141b98 	.word	0x00141b98
  144024:	00141bdc 	.word	0x00141bdc
  144028:	00141bb8 	.word	0x00141bb8

0014402c <__unmapself>:
  14402c:	e3a07036 	mov	r7, #54	; 0x36
  144030:	ef000000 	svc	0x00000000
  144034:	e3a07001 	mov	r7, #1
  144038:	ef000000 	svc	0x00000000

0014403c <__clone>:
  14403c:	e92d00f0 	push	{r4, r5, r6, r7}
  144040:	e3a07082 	mov	r7, #130	; 0x82
  144044:	e1a06003 	mov	r6, r3
  144048:	e1a05000 	mov	r5, r0
  14404c:	e1a00002 	mov	r0, r2
  144050:	e3c1100f 	bic	r1, r1, #15
  144054:	e59d2010 	ldr	r2, [sp, #16]
  144058:	e59d3014 	ldr	r3, [sp, #20]
  14405c:	e59d4018 	ldr	r4, [sp, #24]
  144060:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  144064:	e1a0000d 	mov	r0, sp
  144068:	ef000000 	svc	0x00000000
  14406c:	e1100000 	tst	r0, r0
  144070:	0a000002 	beq	144080 <__clone+0x44>
  144074:	e28dd01c 	add	sp, sp, #28
  144078:	e8bd00f0 	pop	{r4, r5, r6, r7}
  14407c:	e12fff1e 	bx	lr
  144080:	e1a00006 	mov	r0, r6
  144084:	e3150001 	tst	r5, #1
  144088:	1a000003 	bne	14409c <__clone+0x60>
  14408c:	e1a0e00f 	mov	lr, pc
  144090:	e1a0f005 	mov	pc, r5
  144094:	e3a07001 	mov	r7, #1
  144098:	ef000000 	svc	0x00000000
  14409c:	e1a0e00f 	mov	lr, pc
  1440a0:	e12fff15 	bx	r5
  1440a4:	eafffffa 	b	144094 <__clone+0x58>

001440a8 <__clock_gettime>:
  1440a8:	e92d4070 	push	{r4, r5, r6, lr}
  1440ac:	e1a04000 	mov	r4, r0
  1440b0:	e59f0074 	ldr	r0, [pc, #116]	; 14412c <__clock_gettime+0x84>
  1440b4:	e1a05001 	mov	r5, r1
  1440b8:	ebffdff8 	bl	13c0a0 <get_rtt_syscall>
  1440bc:	e2503000 	subs	r3, r0, #0
  1440c0:	0a000017 	beq	144124 <__clock_gettime+0x7c>
  1440c4:	e1a01005 	mov	r1, r5
  1440c8:	e1a00004 	mov	r0, r4
  1440cc:	e12fff33 	blx	r3
  1440d0:	e3700026 	cmn	r0, #38	; 0x26
  1440d4:	0a000001 	beq	1440e0 <__clock_gettime+0x38>
  1440d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1440dc:	eaffe024 	b	13c174 <__syscall_ret>
  1440e0:	e3540000 	cmp	r4, #0
  1440e4:	13e00015 	mvnne	r0, #21
  1440e8:	1afffffa 	bne	1440d8 <__clock_gettime+0x30>
  1440ec:	e3a0004e 	mov	r0, #78	; 0x4e
  1440f0:	ebffdfea 	bl	13c0a0 <get_rtt_syscall>
  1440f4:	e2503000 	subs	r3, r0, #0
  1440f8:	0a000002 	beq	144108 <__clock_gettime+0x60>
  1440fc:	e1a01004 	mov	r1, r4
  144100:	e1a00005 	mov	r0, r5
  144104:	e12fff33 	blx	r3
  144108:	e5953008 	ldr	r3, [r5, #8]
  14410c:	e3a00000 	mov	r0, #0
  144110:	e0632283 	rsb	r2, r3, r3, lsl #5
  144114:	e0833102 	add	r3, r3, r2, lsl #2
  144118:	e1a03183 	lsl	r3, r3, #3
  14411c:	e5853008 	str	r3, [r5, #8]
  144120:	e8bd8070 	pop	{r4, r5, r6, pc}
  144124:	e1a00003 	mov	r0, r3
  144128:	eaffffea 	b	1440d8 <__clock_gettime+0x30>
  14412c:	00000107 	.word	0x00000107

00144130 <frexp>:
  144130:	e59fc09c 	ldr	ip, [pc, #156]	; 1441d4 <frexp+0xa4>
  144134:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  144138:	e01c6a21 	ands	r6, ip, r1, lsr #20
  14413c:	e1a04000 	mov	r4, r0
  144140:	e1a05001 	mov	r5, r1
  144144:	1a000009 	bne	144170 <frexp+0x40>
  144148:	e1a07002 	mov	r7, r2
  14414c:	e3a03000 	mov	r3, #0
  144150:	e3a02000 	mov	r2, #0
  144154:	eb0002e1 	bl	144ce0 <__aeabi_dcmpeq>
  144158:	e3500000 	cmp	r0, #0
  14415c:	0a000011 	beq	1441a8 <frexp+0x78>
  144160:	e5876000 	str	r6, [r7]
  144164:	e1a00004 	mov	r0, r4
  144168:	e1a01005 	mov	r1, r5
  14416c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144170:	e156000c 	cmp	r6, ip
  144174:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  144178:	e3e00000 	mvn	r0, #0
  14417c:	e0007004 	and	r7, r0, r4
  144180:	e3a04000 	mov	r4, #0
  144184:	e59f104c 	ldr	r1, [pc, #76]	; 1441d8 <frexp+0xa8>
  144188:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  14418c:	e0018005 	and	r8, r1, r5
  144190:	e59f5044 	ldr	r5, [pc, #68]	; 1441dc <frexp+0xac>
  144194:	e2433002 	sub	r3, r3, #2
  144198:	e5823000 	str	r3, [r2]
  14419c:	e1870004 	orr	r0, r7, r4
  1441a0:	e1881005 	orr	r1, r8, r5
  1441a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1441a8:	e59f3030 	ldr	r3, [pc, #48]	; 1441e0 <frexp+0xb0>
  1441ac:	e1a00004 	mov	r0, r4
  1441b0:	e1a01005 	mov	r1, r5
  1441b4:	e3a02000 	mov	r2, #0
  1441b8:	eb00017a 	bl	1447a8 <__aeabi_dmul>
  1441bc:	e1a02007 	mov	r2, r7
  1441c0:	ebffffda 	bl	144130 <frexp>
  1441c4:	e5973000 	ldr	r3, [r7]
  1441c8:	e2433040 	sub	r3, r3, #64	; 0x40
  1441cc:	e5873000 	str	r3, [r7]
  1441d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1441d4:	000007ff 	.word	0x000007ff
  1441d8:	800fffff 	.word	0x800fffff
  1441dc:	3fe00000 	.word	0x3fe00000
  1441e0:	43f00000 	.word	0x43f00000

001441e4 <wcrtomb>:
  1441e4:	e2502000 	subs	r2, r0, #0
  1441e8:	0a000025 	beq	144284 <wcrtomb+0xa0>
  1441ec:	e351007f 	cmp	r1, #127	; 0x7f
  1441f0:	9a000022 	bls	144280 <wcrtomb+0x9c>
  1441f4:	e59f0114 	ldr	r0, [pc, #276]	; 144310 <wcrtomb+0x12c>
  1441f8:	e92d4010 	push	{r4, lr}
  1441fc:	e5900000 	ldr	r0, [r0]
  144200:	e12fff30 	blx	r0
  144204:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  144208:	e1a03001 	mov	r3, r1
  14420c:	e5900000 	ldr	r0, [r0]
  144210:	e1a0c002 	mov	ip, r2
  144214:	e3500000 	cmp	r0, #0
  144218:	0a000025 	beq	1442b4 <wcrtomb+0xd0>
  14421c:	e3510b02 	cmp	r1, #2048	; 0x800
  144220:	3a00001a 	bcc	144290 <wcrtomb+0xac>
  144224:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144228:	e3510b36 	cmp	r1, #55296	; 0xd800
  14422c:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144230:	3a00002a 	bcc	1442e0 <wcrtomb+0xfc>
  144234:	e2412801 	sub	r2, r1, #65536	; 0x10000
  144238:	e3520601 	cmp	r2, #1048576	; 0x100000
  14423c:	2a000022 	bcs	1442cc <wcrtomb+0xe8>
  144240:	e3e0e00f 	mvn	lr, #15
  144244:	e3e0207f 	mvn	r2, #127	; 0x7f
  144248:	e18ee923 	orr	lr, lr, r3, lsr #18
  14424c:	e203303f 	and	r3, r3, #63	; 0x3f
  144250:	e1823003 	orr	r3, r2, r3
  144254:	e5cc3003 	strb	r3, [ip, #3]
  144258:	e3a03004 	mov	r3, #4
  14425c:	e1a00701 	lsl	r0, r1, #14
  144260:	e1a01a01 	lsl	r1, r1, #20
  144264:	e1820d20 	orr	r0, r2, r0, lsr #26
  144268:	e1821d21 	orr	r1, r2, r1, lsr #26
  14426c:	e5cce000 	strb	lr, [ip]
  144270:	e5cc0001 	strb	r0, [ip, #1]
  144274:	e5cc1002 	strb	r1, [ip, #2]
  144278:	e1a00003 	mov	r0, r3
  14427c:	e8bd8010 	pop	{r4, pc}
  144280:	e5c21000 	strb	r1, [r2]
  144284:	e3a03001 	mov	r3, #1
  144288:	e1a00003 	mov	r0, r3
  14428c:	e12fff1e 	bx	lr
  144290:	e201203f 	and	r2, r1, #63	; 0x3f
  144294:	e1e02c82 	mvn	r2, r2, lsl #25
  144298:	e3e0103f 	mvn	r1, #63	; 0x3f
  14429c:	e1e02ca2 	mvn	r2, r2, lsr #25
  1442a0:	e1813323 	orr	r3, r1, r3, lsr #6
  1442a4:	e5cc3000 	strb	r3, [ip]
  1442a8:	e5cc2001 	strb	r2, [ip, #1]
  1442ac:	e3a03002 	mov	r3, #2
  1442b0:	eafffff0 	b	144278 <wcrtomb+0x94>
  1442b4:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  1442b8:	e2433080 	sub	r3, r3, #128	; 0x80
  1442bc:	e353007f 	cmp	r3, #127	; 0x7f
  1442c0:	95c21000 	strbls	r1, [r2]
  1442c4:	93a03001 	movls	r3, #1
  1442c8:	9affffea 	bls	144278 <wcrtomb+0x94>
  1442cc:	ebffd23d 	bl	138bc8 <__errno_location>
  1442d0:	e3a02054 	mov	r2, #84	; 0x54
  1442d4:	e3e03000 	mvn	r3, #0
  1442d8:	e5802000 	str	r2, [r0]
  1442dc:	eaffffe5 	b	144278 <wcrtomb+0x94>
  1442e0:	e3e0207f 	mvn	r2, #127	; 0x7f
  1442e4:	e3e0001f 	mvn	r0, #31
  1442e8:	e203e03f 	and	lr, r3, #63	; 0x3f
  1442ec:	e1a01a01 	lsl	r1, r1, #20
  1442f0:	e1803623 	orr	r3, r0, r3, lsr #12
  1442f4:	e1821d21 	orr	r1, r2, r1, lsr #26
  1442f8:	e182200e 	orr	r2, r2, lr
  1442fc:	e5cc3000 	strb	r3, [ip]
  144300:	e5cc1001 	strb	r1, [ip, #1]
  144304:	e5cc2002 	strb	r2, [ip, #2]
  144308:	e3a03003 	mov	r3, #3
  14430c:	eaffffd9 	b	144278 <wcrtomb+0x94>
  144310:	0014d3dc 	.word	0x0014d3dc

00144314 <close_file>:
  144314:	e92d4010 	push	{r4, lr}
  144318:	e2504000 	subs	r4, r0, #0
  14431c:	e24dd008 	sub	sp, sp, #8
  144320:	0a000015 	beq	14437c <close_file+0x68>
  144324:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144328:	e3530000 	cmp	r3, #0
  14432c:	aa000014 	bge	144384 <close_file+0x70>
  144330:	e5942014 	ldr	r2, [r4, #20]
  144334:	e594301c 	ldr	r3, [r4, #28]
  144338:	e1520003 	cmp	r2, r3
  14433c:	0a000004 	beq	144354 <close_file+0x40>
  144340:	e3a02000 	mov	r2, #0
  144344:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  144348:	e1a01002 	mov	r1, r2
  14434c:	e1a00004 	mov	r0, r4
  144350:	e12fff33 	blx	r3
  144354:	e994000c 	ldmib	r4, {r2, r3}
  144358:	e1520003 	cmp	r2, r3
  14435c:	0a000006 	beq	14437c <close_file+0x68>
  144360:	e3a01001 	mov	r1, #1
  144364:	e0422003 	sub	r2, r2, r3
  144368:	e58d1000 	str	r1, [sp]
  14436c:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  144370:	e1a00004 	mov	r0, r4
  144374:	e1a03fc2 	asr	r3, r2, #31
  144378:	e12fff31 	blx	r1
  14437c:	e28dd008 	add	sp, sp, #8
  144380:	e8bd8010 	pop	{r4, pc}
  144384:	ebfffb94 	bl	1431dc <__lockfile>
  144388:	eaffffe8 	b	144330 <close_file+0x1c>

0014438c <__stdio_exit>:
  14438c:	e92d4010 	push	{r4, lr}
  144390:	ebffe771 	bl	13e15c <__ofl_lock>
  144394:	e5904000 	ldr	r4, [r0]
  144398:	e3540000 	cmp	r4, #0
  14439c:	0a000004 	beq	1443b4 <__stdio_exit+0x28>
  1443a0:	e1a00004 	mov	r0, r4
  1443a4:	ebffffda 	bl	144314 <close_file>
  1443a8:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  1443ac:	e3540000 	cmp	r4, #0
  1443b0:	1afffffa 	bne	1443a0 <__stdio_exit+0x14>
  1443b4:	e59f3020 	ldr	r3, [pc, #32]	; 1443dc <__stdio_exit+0x50>
  1443b8:	e5930000 	ldr	r0, [r3]
  1443bc:	ebffffd4 	bl	144314 <close_file>
  1443c0:	e59f3018 	ldr	r3, [pc, #24]	; 1443e0 <__stdio_exit+0x54>
  1443c4:	e5930000 	ldr	r0, [r3]
  1443c8:	ebffffd1 	bl	144314 <close_file>
  1443cc:	e8bd4010 	pop	{r4, lr}
  1443d0:	e59f300c 	ldr	r3, [pc, #12]	; 1443e4 <__stdio_exit+0x58>
  1443d4:	e5930000 	ldr	r0, [r3]
  1443d8:	eaffffcd 	b	144314 <close_file>
  1443dc:	0014f460 	.word	0x0014f460
  1443e0:	0014d3d0 	.word	0x0014d3d0
  1443e4:	0014d338 	.word	0x0014d338

001443e8 <__aeabi_drsub>:
  1443e8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  1443ec:	ea000000 	b	1443f4 <__adddf3>

001443f0 <__aeabi_dsub>:
  1443f0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

001443f4 <__adddf3>:
  1443f4:	e92d4030 	push	{r4, r5, lr}
  1443f8:	e1a04081 	lsl	r4, r1, #1
  1443fc:	e1a05083 	lsl	r5, r3, #1
  144400:	e1340005 	teq	r4, r5
  144404:	01300002 	teqeq	r0, r2
  144408:	1194c000 	orrsne	ip, r4, r0
  14440c:	1195c002 	orrsne	ip, r5, r2
  144410:	11f0cac4 	mvnsne	ip, r4, asr #21
  144414:	11f0cac5 	mvnsne	ip, r5, asr #21
  144418:	0a000079 	beq	144604 <__adddf3+0x210>
  14441c:	e1a04aa4 	lsr	r4, r4, #21
  144420:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  144424:	b2655000 	rsblt	r5, r5, #0
  144428:	da000006 	ble	144448 <__adddf3+0x54>
  14442c:	e0844005 	add	r4, r4, r5
  144430:	e0202002 	eor	r2, r0, r2
  144434:	e0213003 	eor	r3, r1, r3
  144438:	e0220000 	eor	r0, r2, r0
  14443c:	e0231001 	eor	r1, r3, r1
  144440:	e0202002 	eor	r2, r0, r2
  144444:	e0213003 	eor	r3, r1, r3
  144448:	e3550036 	cmp	r5, #54	; 0x36
  14444c:	88bd8030 	pophi	{r4, r5, pc}
  144450:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  144454:	e1a01601 	lsl	r1, r1, #12
  144458:	e3a0c601 	mov	ip, #1048576	; 0x100000
  14445c:	e18c1621 	orr	r1, ip, r1, lsr #12
  144460:	0a000001 	beq	14446c <__adddf3+0x78>
  144464:	e2700000 	rsbs	r0, r0, #0
  144468:	e2e11000 	rsc	r1, r1, #0
  14446c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  144470:	e1a03603 	lsl	r3, r3, #12
  144474:	e18c3623 	orr	r3, ip, r3, lsr #12
  144478:	0a000001 	beq	144484 <__adddf3+0x90>
  14447c:	e2722000 	rsbs	r2, r2, #0
  144480:	e2e33000 	rsc	r3, r3, #0
  144484:	e1340005 	teq	r4, r5
  144488:	0a000057 	beq	1445ec <__adddf3+0x1f8>
  14448c:	e2444001 	sub	r4, r4, #1
  144490:	e275e020 	rsbs	lr, r5, #32
  144494:	ba000005 	blt	1444b0 <__adddf3+0xbc>
  144498:	e1a0ce12 	lsl	ip, r2, lr
  14449c:	e0900532 	adds	r0, r0, r2, lsr r5
  1444a0:	e2a11000 	adc	r1, r1, #0
  1444a4:	e0900e13 	adds	r0, r0, r3, lsl lr
  1444a8:	e0b11553 	adcs	r1, r1, r3, asr r5
  1444ac:	ea000006 	b	1444cc <__adddf3+0xd8>
  1444b0:	e2455020 	sub	r5, r5, #32
  1444b4:	e28ee020 	add	lr, lr, #32
  1444b8:	e3520001 	cmp	r2, #1
  1444bc:	e1a0ce13 	lsl	ip, r3, lr
  1444c0:	238cc002 	orrcs	ip, ip, #2
  1444c4:	e0900553 	adds	r0, r0, r3, asr r5
  1444c8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  1444cc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1444d0:	5a000002 	bpl	1444e0 <__adddf3+0xec>
  1444d4:	e27cc000 	rsbs	ip, ip, #0
  1444d8:	e2f00000 	rscs	r0, r0, #0
  1444dc:	e2e11000 	rsc	r1, r1, #0
  1444e0:	e3510601 	cmp	r1, #1048576	; 0x100000
  1444e4:	3a00000e 	bcc	144524 <__adddf3+0x130>
  1444e8:	e3510602 	cmp	r1, #2097152	; 0x200000
  1444ec:	3a000006 	bcc	14450c <__adddf3+0x118>
  1444f0:	e1b010a1 	lsrs	r1, r1, #1
  1444f4:	e1b00060 	rrxs	r0, r0
  1444f8:	e1a0c06c 	rrx	ip, ip
  1444fc:	e2844001 	add	r4, r4, #1
  144500:	e1a02a84 	lsl	r2, r4, #21
  144504:	e3720501 	cmn	r2, #4194304	; 0x400000
  144508:	2a000055 	bcs	144664 <__adddf3+0x270>
  14450c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  144510:	01b0c0a0 	lsrseq	ip, r0, #1
  144514:	e2b00000 	adcs	r0, r0, #0
  144518:	e0a11a04 	adc	r1, r1, r4, lsl #20
  14451c:	e1811005 	orr	r1, r1, r5
  144520:	e8bd8030 	pop	{r4, r5, pc}
  144524:	e1b0c08c 	lsls	ip, ip, #1
  144528:	e0b00000 	adcs	r0, r0, r0
  14452c:	e0a11001 	adc	r1, r1, r1
  144530:	e3110601 	tst	r1, #1048576	; 0x100000
  144534:	e2444001 	sub	r4, r4, #1
  144538:	1afffff3 	bne	14450c <__adddf3+0x118>
  14453c:	e3310000 	teq	r1, #0
  144540:	01a01000 	moveq	r1, r0
  144544:	03a00000 	moveq	r0, #0
  144548:	e16f3f11 	clz	r3, r1
  14454c:	02833020 	addeq	r3, r3, #32
  144550:	e243300b 	sub	r3, r3, #11
  144554:	e2532020 	subs	r2, r3, #32
  144558:	aa000007 	bge	14457c <__adddf3+0x188>
  14455c:	e292200c 	adds	r2, r2, #12
  144560:	da000004 	ble	144578 <__adddf3+0x184>
  144564:	e282c014 	add	ip, r2, #20
  144568:	e262200c 	rsb	r2, r2, #12
  14456c:	e1a00c11 	lsl	r0, r1, ip
  144570:	e1a01231 	lsr	r1, r1, r2
  144574:	ea000004 	b	14458c <__adddf3+0x198>
  144578:	e2822014 	add	r2, r2, #20
  14457c:	d262c020 	rsble	ip, r2, #32
  144580:	e1a01211 	lsl	r1, r1, r2
  144584:	d1811c30 	orrle	r1, r1, r0, lsr ip
  144588:	d1a00210 	lslle	r0, r0, r2
  14458c:	e0544003 	subs	r4, r4, r3
  144590:	a0811a04 	addge	r1, r1, r4, lsl #20
  144594:	a1811005 	orrge	r1, r1, r5
  144598:	a8bd8030 	popge	{r4, r5, pc}
  14459c:	e1e04004 	mvn	r4, r4
  1445a0:	e254401f 	subs	r4, r4, #31
  1445a4:	aa00000d 	bge	1445e0 <__adddf3+0x1ec>
  1445a8:	e294400c 	adds	r4, r4, #12
  1445ac:	ca000005 	bgt	1445c8 <__adddf3+0x1d4>
  1445b0:	e2844014 	add	r4, r4, #20
  1445b4:	e2642020 	rsb	r2, r4, #32
  1445b8:	e1a00430 	lsr	r0, r0, r4
  1445bc:	e1800211 	orr	r0, r0, r1, lsl r2
  1445c0:	e1851431 	orr	r1, r5, r1, lsr r4
  1445c4:	e8bd8030 	pop	{r4, r5, pc}
  1445c8:	e264400c 	rsb	r4, r4, #12
  1445cc:	e2642020 	rsb	r2, r4, #32
  1445d0:	e1a00230 	lsr	r0, r0, r2
  1445d4:	e1800411 	orr	r0, r0, r1, lsl r4
  1445d8:	e1a01005 	mov	r1, r5
  1445dc:	e8bd8030 	pop	{r4, r5, pc}
  1445e0:	e1a00431 	lsr	r0, r1, r4
  1445e4:	e1a01005 	mov	r1, r5
  1445e8:	e8bd8030 	pop	{r4, r5, pc}
  1445ec:	e3340000 	teq	r4, #0
  1445f0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  1445f4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  1445f8:	02844001 	addeq	r4, r4, #1
  1445fc:	12455001 	subne	r5, r5, #1
  144600:	eaffffa1 	b	14448c <__adddf3+0x98>
  144604:	e1f0cac4 	mvns	ip, r4, asr #21
  144608:	11f0cac5 	mvnsne	ip, r5, asr #21
  14460c:	0a000018 	beq	144674 <__adddf3+0x280>
  144610:	e1340005 	teq	r4, r5
  144614:	01300002 	teqeq	r0, r2
  144618:	0a000003 	beq	14462c <__adddf3+0x238>
  14461c:	e194c000 	orrs	ip, r4, r0
  144620:	01a01003 	moveq	r1, r3
  144624:	01a00002 	moveq	r0, r2
  144628:	e8bd8030 	pop	{r4, r5, pc}
  14462c:	e1310003 	teq	r1, r3
  144630:	13a01000 	movne	r1, #0
  144634:	13a00000 	movne	r0, #0
  144638:	18bd8030 	popne	{r4, r5, pc}
  14463c:	e1b0caa4 	lsrs	ip, r4, #21
  144640:	1a000003 	bne	144654 <__adddf3+0x260>
  144644:	e1b00080 	lsls	r0, r0, #1
  144648:	e0b11001 	adcs	r1, r1, r1
  14464c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  144650:	e8bd8030 	pop	{r4, r5, pc}
  144654:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  144658:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  14465c:	38bd8030 	popcc	{r4, r5, pc}
  144660:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144664:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  144668:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  14466c:	e3a00000 	mov	r0, #0
  144670:	e8bd8030 	pop	{r4, r5, pc}
  144674:	e1f0cac4 	mvns	ip, r4, asr #21
  144678:	11a01003 	movne	r1, r3
  14467c:	11a00002 	movne	r0, r2
  144680:	01f0cac5 	mvnseq	ip, r5, asr #21
  144684:	11a03001 	movne	r3, r1
  144688:	11a02000 	movne	r2, r0
  14468c:	e1904601 	orrs	r4, r0, r1, lsl #12
  144690:	01925603 	orrseq	r5, r2, r3, lsl #12
  144694:	01310003 	teqeq	r1, r3
  144698:	13811702 	orrne	r1, r1, #524288	; 0x80000
  14469c:	e8bd8030 	pop	{r4, r5, pc}

001446a0 <__aeabi_ui2d>:
  1446a0:	e3300000 	teq	r0, #0
  1446a4:	03a01000 	moveq	r1, #0
  1446a8:	012fff1e 	bxeq	lr
  1446ac:	e92d4030 	push	{r4, r5, lr}
  1446b0:	e3a04b01 	mov	r4, #1024	; 0x400
  1446b4:	e2844032 	add	r4, r4, #50	; 0x32
  1446b8:	e3a05000 	mov	r5, #0
  1446bc:	e3a01000 	mov	r1, #0
  1446c0:	eaffff9d 	b	14453c <__adddf3+0x148>

001446c4 <__aeabi_i2d>:
  1446c4:	e3300000 	teq	r0, #0
  1446c8:	03a01000 	moveq	r1, #0
  1446cc:	012fff1e 	bxeq	lr
  1446d0:	e92d4030 	push	{r4, r5, lr}
  1446d4:	e3a04b01 	mov	r4, #1024	; 0x400
  1446d8:	e2844032 	add	r4, r4, #50	; 0x32
  1446dc:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  1446e0:	42600000 	rsbmi	r0, r0, #0
  1446e4:	e3a01000 	mov	r1, #0
  1446e8:	eaffff93 	b	14453c <__adddf3+0x148>

001446ec <__aeabi_f2d>:
  1446ec:	e1b02080 	lsls	r2, r0, #1
  1446f0:	e1a011c2 	asr	r1, r2, #3
  1446f4:	e1a01061 	rrx	r1, r1
  1446f8:	e1a00e02 	lsl	r0, r2, #28
  1446fc:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  144700:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  144704:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144708:	112fff1e 	bxne	lr
  14470c:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144710:	012fff1e 	bxeq	lr
  144714:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  144718:	03811702 	orreq	r1, r1, #524288	; 0x80000
  14471c:	012fff1e 	bxeq	lr
  144720:	e92d4030 	push	{r4, r5, lr}
  144724:	e3a04d0e 	mov	r4, #896	; 0x380
  144728:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  14472c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144730:	eaffff81 	b	14453c <__adddf3+0x148>

00144734 <__aeabi_ul2d>:
  144734:	e1902001 	orrs	r2, r0, r1
  144738:	012fff1e 	bxeq	lr
  14473c:	e92d4030 	push	{r4, r5, lr}
  144740:	e3a05000 	mov	r5, #0
  144744:	ea000006 	b	144764 <__aeabi_l2d+0x1c>

00144748 <__aeabi_l2d>:
  144748:	e1902001 	orrs	r2, r0, r1
  14474c:	012fff1e 	bxeq	lr
  144750:	e92d4030 	push	{r4, r5, lr}
  144754:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  144758:	5a000001 	bpl	144764 <__aeabi_l2d+0x1c>
  14475c:	e2700000 	rsbs	r0, r0, #0
  144760:	e2e11000 	rsc	r1, r1, #0
  144764:	e3a04b01 	mov	r4, #1024	; 0x400
  144768:	e2844032 	add	r4, r4, #50	; 0x32
  14476c:	e1b0cb21 	lsrs	ip, r1, #22
  144770:	0affff5a 	beq	1444e0 <__adddf3+0xec>
  144774:	e3a02003 	mov	r2, #3
  144778:	e1b0c1ac 	lsrs	ip, ip, #3
  14477c:	12822003 	addne	r2, r2, #3
  144780:	e1b0c1ac 	lsrs	ip, ip, #3
  144784:	12822003 	addne	r2, r2, #3
  144788:	e08221ac 	add	r2, r2, ip, lsr #3
  14478c:	e2623020 	rsb	r3, r2, #32
  144790:	e1a0c310 	lsl	ip, r0, r3
  144794:	e1a00230 	lsr	r0, r0, r2
  144798:	e1800311 	orr	r0, r0, r1, lsl r3
  14479c:	e1a01231 	lsr	r1, r1, r2
  1447a0:	e0844002 	add	r4, r4, r2
  1447a4:	eaffff4d 	b	1444e0 <__adddf3+0xec>

001447a8 <__aeabi_dmul>:
  1447a8:	e92d4070 	push	{r4, r5, r6, lr}
  1447ac:	e3a0c0ff 	mov	ip, #255	; 0xff
  1447b0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  1447b4:	e01c4a21 	ands	r4, ip, r1, lsr #20
  1447b8:	101c5a23 	andsne	r5, ip, r3, lsr #20
  1447bc:	1134000c 	teqne	r4, ip
  1447c0:	1135000c 	teqne	r5, ip
  1447c4:	0b00006f 	bleq	144988 <__aeabi_dmul+0x1e0>
  1447c8:	e0844005 	add	r4, r4, r5
  1447cc:	e0216003 	eor	r6, r1, r3
  1447d0:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  1447d4:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  1447d8:	e1905601 	orrs	r5, r0, r1, lsl #12
  1447dc:	11925603 	orrsne	r5, r2, r3, lsl #12
  1447e0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  1447e4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  1447e8:	0a00001c 	beq	144860 <__aeabi_dmul+0xb8>
  1447ec:	e08ec290 	umull	ip, lr, r0, r2
  1447f0:	e3a05000 	mov	r5, #0
  1447f4:	e0a5e291 	umlal	lr, r5, r1, r2
  1447f8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  1447fc:	e0a5e390 	umlal	lr, r5, r0, r3
  144800:	e3a06000 	mov	r6, #0
  144804:	e0a65391 	umlal	r5, r6, r1, r3
  144808:	e33c0000 	teq	ip, #0
  14480c:	138ee001 	orrne	lr, lr, #1
  144810:	e24440ff 	sub	r4, r4, #255	; 0xff
  144814:	e3560c02 	cmp	r6, #512	; 0x200
  144818:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  14481c:	2a000002 	bcs	14482c <__aeabi_dmul+0x84>
  144820:	e1b0e08e 	lsls	lr, lr, #1
  144824:	e0b55005 	adcs	r5, r5, r5
  144828:	e0a66006 	adc	r6, r6, r6
  14482c:	e1821586 	orr	r1, r2, r6, lsl #11
  144830:	e1811aa5 	orr	r1, r1, r5, lsr #21
  144834:	e1a00585 	lsl	r0, r5, #11
  144838:	e1800aae 	orr	r0, r0, lr, lsr #21
  14483c:	e1a0e58e 	lsl	lr, lr, #11
  144840:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144844:	835c0c07 	cmphi	ip, #1792	; 0x700
  144848:	8a00000f 	bhi	14488c <__aeabi_dmul+0xe4>
  14484c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  144850:	01b0e0a0 	lsrseq	lr, r0, #1
  144854:	e2b00000 	adcs	r0, r0, #0
  144858:	e0a11a04 	adc	r1, r1, r4, lsl #20
  14485c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144860:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  144864:	e1861001 	orr	r1, r6, r1
  144868:	e1800002 	orr	r0, r0, r2
  14486c:	e0211003 	eor	r1, r1, r3
  144870:	e05440ac 	subs	r4, r4, ip, lsr #1
  144874:	c074500c 	rsbsgt	r5, r4, ip
  144878:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  14487c:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144880:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144884:	e3a0e000 	mov	lr, #0
  144888:	e2544001 	subs	r4, r4, #1
  14488c:	ca000058 	bgt	1449f4 <__aeabi_dmul+0x24c>
  144890:	e3740036 	cmn	r4, #54	; 0x36
  144894:	d3a00000 	movle	r0, #0
  144898:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  14489c:	d8bd8070 	pople	{r4, r5, r6, pc}
  1448a0:	e2644000 	rsb	r4, r4, #0
  1448a4:	e2544020 	subs	r4, r4, #32
  1448a8:	aa000018 	bge	144910 <__aeabi_dmul+0x168>
  1448ac:	e294400c 	adds	r4, r4, #12
  1448b0:	ca00000b 	bgt	1448e4 <__aeabi_dmul+0x13c>
  1448b4:	e2844014 	add	r4, r4, #20
  1448b8:	e2645020 	rsb	r5, r4, #32
  1448bc:	e1a03510 	lsl	r3, r0, r5
  1448c0:	e1a00430 	lsr	r0, r0, r4
  1448c4:	e1800511 	orr	r0, r0, r1, lsl r5
  1448c8:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  1448cc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  1448d0:	e0900fa3 	adds	r0, r0, r3, lsr #31
  1448d4:	e0a21431 	adc	r1, r2, r1, lsr r4
  1448d8:	e19ee083 	orrs	lr, lr, r3, lsl #1
  1448dc:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  1448e0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1448e4:	e264400c 	rsb	r4, r4, #12
  1448e8:	e2645020 	rsb	r5, r4, #32
  1448ec:	e1a03410 	lsl	r3, r0, r4
  1448f0:	e1a00530 	lsr	r0, r0, r5
  1448f4:	e1800411 	orr	r0, r0, r1, lsl r4
  1448f8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  1448fc:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144900:	e2a11000 	adc	r1, r1, #0
  144904:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144908:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  14490c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144910:	e2645020 	rsb	r5, r4, #32
  144914:	e18ee510 	orr	lr, lr, r0, lsl r5
  144918:	e1a03430 	lsr	r3, r0, r4
  14491c:	e1833511 	orr	r3, r3, r1, lsl r5
  144920:	e1a00431 	lsr	r0, r1, r4
  144924:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144928:	e1c00431 	bic	r0, r0, r1, lsr r4
  14492c:	e0800fa3 	add	r0, r0, r3, lsr #31
  144930:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144934:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144938:	e8bd8070 	pop	{r4, r5, r6, pc}
  14493c:	e3340000 	teq	r4, #0
  144940:	1a000008 	bne	144968 <__aeabi_dmul+0x1c0>
  144944:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  144948:	e1b00080 	lsls	r0, r0, #1
  14494c:	e0a11001 	adc	r1, r1, r1
  144950:	e3110601 	tst	r1, #1048576	; 0x100000
  144954:	02444001 	subeq	r4, r4, #1
  144958:	0afffffa 	beq	144948 <__aeabi_dmul+0x1a0>
  14495c:	e1811006 	orr	r1, r1, r6
  144960:	e3350000 	teq	r5, #0
  144964:	112fff1e 	bxne	lr
  144968:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  14496c:	e1b02082 	lsls	r2, r2, #1
  144970:	e0a33003 	adc	r3, r3, r3
  144974:	e3130601 	tst	r3, #1048576	; 0x100000
  144978:	02455001 	subeq	r5, r5, #1
  14497c:	0afffffa 	beq	14496c <__aeabi_dmul+0x1c4>
  144980:	e1833006 	orr	r3, r3, r6
  144984:	e12fff1e 	bx	lr
  144988:	e134000c 	teq	r4, ip
  14498c:	e00c5a23 	and	r5, ip, r3, lsr #20
  144990:	1135000c 	teqne	r5, ip
  144994:	0a000006 	beq	1449b4 <__aeabi_dmul+0x20c>
  144998:	e1906081 	orrs	r6, r0, r1, lsl #1
  14499c:	11926083 	orrsne	r6, r2, r3, lsl #1
  1449a0:	1affffe5 	bne	14493c <__aeabi_dmul+0x194>
  1449a4:	e0211003 	eor	r1, r1, r3
  1449a8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  1449ac:	e3a00000 	mov	r0, #0
  1449b0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1449b4:	e1906081 	orrs	r6, r0, r1, lsl #1
  1449b8:	01a00002 	moveq	r0, r2
  1449bc:	01a01003 	moveq	r1, r3
  1449c0:	11926083 	orrsne	r6, r2, r3, lsl #1
  1449c4:	0a00000f 	beq	144a08 <__aeabi_dmul+0x260>
  1449c8:	e134000c 	teq	r4, ip
  1449cc:	1a000001 	bne	1449d8 <__aeabi_dmul+0x230>
  1449d0:	e1906601 	orrs	r6, r0, r1, lsl #12
  1449d4:	1a00000b 	bne	144a08 <__aeabi_dmul+0x260>
  1449d8:	e135000c 	teq	r5, ip
  1449dc:	1a000003 	bne	1449f0 <__aeabi_dmul+0x248>
  1449e0:	e1926603 	orrs	r6, r2, r3, lsl #12
  1449e4:	11a00002 	movne	r0, r2
  1449e8:	11a01003 	movne	r1, r3
  1449ec:	1a000005 	bne	144a08 <__aeabi_dmul+0x260>
  1449f0:	e0211003 	eor	r1, r1, r3
  1449f4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  1449f8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  1449fc:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144a00:	e3a00000 	mov	r0, #0
  144a04:	e8bd8070 	pop	{r4, r5, r6, pc}
  144a08:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144a0c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144a10:	e8bd8070 	pop	{r4, r5, r6, pc}

00144a14 <__aeabi_ddiv>:
  144a14:	e92d4070 	push	{r4, r5, r6, lr}
  144a18:	e3a0c0ff 	mov	ip, #255	; 0xff
  144a1c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144a20:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144a24:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144a28:	1134000c 	teqne	r4, ip
  144a2c:	1135000c 	teqne	r5, ip
  144a30:	0b00005c 	bleq	144ba8 <__aeabi_ddiv+0x194>
  144a34:	e0444005 	sub	r4, r4, r5
  144a38:	e021e003 	eor	lr, r1, r3
  144a3c:	e1925603 	orrs	r5, r2, r3, lsl #12
  144a40:	e1a01601 	lsl	r1, r1, #12
  144a44:	0a00004b 	beq	144b78 <__aeabi_ddiv+0x164>
  144a48:	e1a03603 	lsl	r3, r3, #12
  144a4c:	e3a05201 	mov	r5, #268435456	; 0x10000000
  144a50:	e1853223 	orr	r3, r5, r3, lsr #4
  144a54:	e1833c22 	orr	r3, r3, r2, lsr #24
  144a58:	e1a02402 	lsl	r2, r2, #8
  144a5c:	e1855221 	orr	r5, r5, r1, lsr #4
  144a60:	e1855c20 	orr	r5, r5, r0, lsr #24
  144a64:	e1a06400 	lsl	r6, r0, #8
  144a68:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  144a6c:	e1550003 	cmp	r5, r3
  144a70:	01560002 	cmpeq	r6, r2
  144a74:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144a78:	e2844c03 	add	r4, r4, #768	; 0x300
  144a7c:	2a000001 	bcs	144a88 <__aeabi_ddiv+0x74>
  144a80:	e1b030a3 	lsrs	r3, r3, #1
  144a84:	e1a02062 	rrx	r2, r2
  144a88:	e0566002 	subs	r6, r6, r2
  144a8c:	e0c55003 	sbc	r5, r5, r3
  144a90:	e1b030a3 	lsrs	r3, r3, #1
  144a94:	e1a02062 	rrx	r2, r2
  144a98:	e3a00601 	mov	r0, #1048576	; 0x100000
  144a9c:	e3a0c702 	mov	ip, #524288	; 0x80000
  144aa0:	e056e002 	subs	lr, r6, r2
  144aa4:	e0d5e003 	sbcs	lr, r5, r3
  144aa8:	20466002 	subcs	r6, r6, r2
  144aac:	21a0500e 	movcs	r5, lr
  144ab0:	2180000c 	orrcs	r0, r0, ip
  144ab4:	e1b030a3 	lsrs	r3, r3, #1
  144ab8:	e1a02062 	rrx	r2, r2
  144abc:	e056e002 	subs	lr, r6, r2
  144ac0:	e0d5e003 	sbcs	lr, r5, r3
  144ac4:	20466002 	subcs	r6, r6, r2
  144ac8:	21a0500e 	movcs	r5, lr
  144acc:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144ad0:	e1b030a3 	lsrs	r3, r3, #1
  144ad4:	e1a02062 	rrx	r2, r2
  144ad8:	e056e002 	subs	lr, r6, r2
  144adc:	e0d5e003 	sbcs	lr, r5, r3
  144ae0:	20466002 	subcs	r6, r6, r2
  144ae4:	21a0500e 	movcs	r5, lr
  144ae8:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144aec:	e1b030a3 	lsrs	r3, r3, #1
  144af0:	e1a02062 	rrx	r2, r2
  144af4:	e056e002 	subs	lr, r6, r2
  144af8:	e0d5e003 	sbcs	lr, r5, r3
  144afc:	20466002 	subcs	r6, r6, r2
  144b00:	21a0500e 	movcs	r5, lr
  144b04:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144b08:	e195e006 	orrs	lr, r5, r6
  144b0c:	0a00000d 	beq	144b48 <__aeabi_ddiv+0x134>
  144b10:	e1a05205 	lsl	r5, r5, #4
  144b14:	e1855e26 	orr	r5, r5, r6, lsr #28
  144b18:	e1a06206 	lsl	r6, r6, #4
  144b1c:	e1a03183 	lsl	r3, r3, #3
  144b20:	e1833ea2 	orr	r3, r3, r2, lsr #29
  144b24:	e1a02182 	lsl	r2, r2, #3
  144b28:	e1b0c22c 	lsrs	ip, ip, #4
  144b2c:	1affffdb 	bne	144aa0 <__aeabi_ddiv+0x8c>
  144b30:	e3110601 	tst	r1, #1048576	; 0x100000
  144b34:	1a000006 	bne	144b54 <__aeabi_ddiv+0x140>
  144b38:	e1811000 	orr	r1, r1, r0
  144b3c:	e3a00000 	mov	r0, #0
  144b40:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  144b44:	eaffffd5 	b	144aa0 <__aeabi_ddiv+0x8c>
  144b48:	e3110601 	tst	r1, #1048576	; 0x100000
  144b4c:	01811000 	orreq	r1, r1, r0
  144b50:	03a00000 	moveq	r0, #0
  144b54:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144b58:	835c0c07 	cmphi	ip, #1792	; 0x700
  144b5c:	8affff4a 	bhi	14488c <__aeabi_dmul+0xe4>
  144b60:	e055c003 	subs	ip, r5, r3
  144b64:	0056c002 	subseq	ip, r6, r2
  144b68:	01b0c0a0 	lsrseq	ip, r0, #1
  144b6c:	e2b00000 	adcs	r0, r0, #0
  144b70:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144b74:	e8bd8070 	pop	{r4, r5, r6, pc}
  144b78:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144b7c:	e18e1621 	orr	r1, lr, r1, lsr #12
  144b80:	e09440ac 	adds	r4, r4, ip, lsr #1
  144b84:	c074500c 	rsbsgt	r5, r4, ip
  144b88:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144b8c:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144b90:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144b94:	e3a0e000 	mov	lr, #0
  144b98:	e2544001 	subs	r4, r4, #1
  144b9c:	eaffff3a 	b	14488c <__aeabi_dmul+0xe4>
  144ba0:	e185e006 	orr	lr, r5, r6
  144ba4:	eaffff38 	b	14488c <__aeabi_dmul+0xe4>
  144ba8:	e00c5a23 	and	r5, ip, r3, lsr #20
  144bac:	e134000c 	teq	r4, ip
  144bb0:	0135000c 	teqeq	r5, ip
  144bb4:	0affff93 	beq	144a08 <__aeabi_dmul+0x260>
  144bb8:	e134000c 	teq	r4, ip
  144bbc:	1a000006 	bne	144bdc <__aeabi_ddiv+0x1c8>
  144bc0:	e1904601 	orrs	r4, r0, r1, lsl #12
  144bc4:	1affff8f 	bne	144a08 <__aeabi_dmul+0x260>
  144bc8:	e135000c 	teq	r5, ip
  144bcc:	1affff87 	bne	1449f0 <__aeabi_dmul+0x248>
  144bd0:	e1a00002 	mov	r0, r2
  144bd4:	e1a01003 	mov	r1, r3
  144bd8:	eaffff8a 	b	144a08 <__aeabi_dmul+0x260>
  144bdc:	e135000c 	teq	r5, ip
  144be0:	1a000004 	bne	144bf8 <__aeabi_ddiv+0x1e4>
  144be4:	e1925603 	orrs	r5, r2, r3, lsl #12
  144be8:	0affff6d 	beq	1449a4 <__aeabi_dmul+0x1fc>
  144bec:	e1a00002 	mov	r0, r2
  144bf0:	e1a01003 	mov	r1, r3
  144bf4:	eaffff83 	b	144a08 <__aeabi_dmul+0x260>
  144bf8:	e1906081 	orrs	r6, r0, r1, lsl #1
  144bfc:	11926083 	orrsne	r6, r2, r3, lsl #1
  144c00:	1affff4d 	bne	14493c <__aeabi_dmul+0x194>
  144c04:	e1904081 	orrs	r4, r0, r1, lsl #1
  144c08:	1affff78 	bne	1449f0 <__aeabi_dmul+0x248>
  144c0c:	e1925083 	orrs	r5, r2, r3, lsl #1
  144c10:	1affff63 	bne	1449a4 <__aeabi_dmul+0x1fc>
  144c14:	eaffff7b 	b	144a08 <__aeabi_dmul+0x260>

00144c18 <__gedf2>:
  144c18:	e3e0c000 	mvn	ip, #0
  144c1c:	ea000002 	b	144c2c <__cmpdf2+0x4>

00144c20 <__ledf2>:
  144c20:	e3a0c001 	mov	ip, #1
  144c24:	ea000000 	b	144c2c <__cmpdf2+0x4>

00144c28 <__cmpdf2>:
  144c28:	e3a0c001 	mov	ip, #1
  144c2c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  144c30:	e1a0c081 	lsl	ip, r1, #1
  144c34:	e1f0cacc 	mvns	ip, ip, asr #21
  144c38:	e1a0c083 	lsl	ip, r3, #1
  144c3c:	11f0cacc 	mvnsne	ip, ip, asr #21
  144c40:	0a00000e 	beq	144c80 <__cmpdf2+0x58>
  144c44:	e28dd004 	add	sp, sp, #4
  144c48:	e190c081 	orrs	ip, r0, r1, lsl #1
  144c4c:	0192c083 	orrseq	ip, r2, r3, lsl #1
  144c50:	11310003 	teqne	r1, r3
  144c54:	01300002 	teqeq	r0, r2
  144c58:	03a00000 	moveq	r0, #0
  144c5c:	012fff1e 	bxeq	lr
  144c60:	e3700000 	cmn	r0, #0
  144c64:	e1310003 	teq	r1, r3
  144c68:	51510003 	cmppl	r1, r3
  144c6c:	01500002 	cmpeq	r0, r2
  144c70:	21a00fc3 	asrcs	r0, r3, #31
  144c74:	31e00fc3 	mvncc	r0, r3, asr #31
  144c78:	e3800001 	orr	r0, r0, #1
  144c7c:	e12fff1e 	bx	lr
  144c80:	e1a0c081 	lsl	ip, r1, #1
  144c84:	e1f0cacc 	mvns	ip, ip, asr #21
  144c88:	1a000001 	bne	144c94 <__cmpdf2+0x6c>
  144c8c:	e190c601 	orrs	ip, r0, r1, lsl #12
  144c90:	1a000004 	bne	144ca8 <__cmpdf2+0x80>
  144c94:	e1a0c083 	lsl	ip, r3, #1
  144c98:	e1f0cacc 	mvns	ip, ip, asr #21
  144c9c:	1affffe8 	bne	144c44 <__cmpdf2+0x1c>
  144ca0:	e192c603 	orrs	ip, r2, r3, lsl #12
  144ca4:	0affffe6 	beq	144c44 <__cmpdf2+0x1c>
  144ca8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144cac:	e12fff1e 	bx	lr

00144cb0 <__aeabi_cdrcmple>:
  144cb0:	e1a0c000 	mov	ip, r0
  144cb4:	e1a00002 	mov	r0, r2
  144cb8:	e1a0200c 	mov	r2, ip
  144cbc:	e1a0c001 	mov	ip, r1
  144cc0:	e1a01003 	mov	r1, r3
  144cc4:	e1a0300c 	mov	r3, ip
  144cc8:	eaffffff 	b	144ccc <__aeabi_cdcmpeq>

00144ccc <__aeabi_cdcmpeq>:
  144ccc:	e92d4001 	push	{r0, lr}
  144cd0:	ebffffd4 	bl	144c28 <__cmpdf2>
  144cd4:	e3500000 	cmp	r0, #0
  144cd8:	43700000 	cmnmi	r0, #0
  144cdc:	e8bd8001 	pop	{r0, pc}

00144ce0 <__aeabi_dcmpeq>:
  144ce0:	e52de008 	str	lr, [sp, #-8]!
  144ce4:	ebfffff8 	bl	144ccc <__aeabi_cdcmpeq>
  144ce8:	03a00001 	moveq	r0, #1
  144cec:	13a00000 	movne	r0, #0
  144cf0:	e49df008 	ldr	pc, [sp], #8

00144cf4 <__aeabi_dcmplt>:
  144cf4:	e52de008 	str	lr, [sp, #-8]!
  144cf8:	ebfffff3 	bl	144ccc <__aeabi_cdcmpeq>
  144cfc:	33a00001 	movcc	r0, #1
  144d00:	23a00000 	movcs	r0, #0
  144d04:	e49df008 	ldr	pc, [sp], #8

00144d08 <__aeabi_dcmple>:
  144d08:	e52de008 	str	lr, [sp, #-8]!
  144d0c:	ebffffee 	bl	144ccc <__aeabi_cdcmpeq>
  144d10:	93a00001 	movls	r0, #1
  144d14:	83a00000 	movhi	r0, #0
  144d18:	e49df008 	ldr	pc, [sp], #8

00144d1c <__aeabi_dcmpge>:
  144d1c:	e52de008 	str	lr, [sp, #-8]!
  144d20:	ebffffe2 	bl	144cb0 <__aeabi_cdrcmple>
  144d24:	93a00001 	movls	r0, #1
  144d28:	83a00000 	movhi	r0, #0
  144d2c:	e49df008 	ldr	pc, [sp], #8

00144d30 <__aeabi_dcmpgt>:
  144d30:	e52de008 	str	lr, [sp, #-8]!
  144d34:	ebffffdd 	bl	144cb0 <__aeabi_cdrcmple>
  144d38:	33a00001 	movcc	r0, #1
  144d3c:	23a00000 	movcs	r0, #0
  144d40:	e49df008 	ldr	pc, [sp], #8

00144d44 <__aeabi_d2iz>:
  144d44:	e1a02081 	lsl	r2, r1, #1
  144d48:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  144d4c:	2a00000c 	bcs	144d84 <__aeabi_d2iz+0x40>
  144d50:	5a000009 	bpl	144d7c <__aeabi_d2iz+0x38>
  144d54:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  144d58:	e0532ac2 	subs	r2, r3, r2, asr #21
  144d5c:	9a00000a 	bls	144d8c <__aeabi_d2iz+0x48>
  144d60:	e1a03581 	lsl	r3, r1, #11
  144d64:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  144d68:	e1833aa0 	orr	r3, r3, r0, lsr #21
  144d6c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  144d70:	e1a00233 	lsr	r0, r3, r2
  144d74:	12600000 	rsbne	r0, r0, #0
  144d78:	e12fff1e 	bx	lr
  144d7c:	e3a00000 	mov	r0, #0
  144d80:	e12fff1e 	bx	lr
  144d84:	e1900601 	orrs	r0, r0, r1, lsl #12
  144d88:	1a000002 	bne	144d98 <__aeabi_d2iz+0x54>
  144d8c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  144d90:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  144d94:	e12fff1e 	bx	lr
  144d98:	e3a00000 	mov	r0, #0
  144d9c:	e12fff1e 	bx	lr

00144da0 <__aeabi_d2uiz>:
  144da0:	e1b02081 	lsls	r2, r1, #1
  144da4:	2a00000a 	bcs	144dd4 <__aeabi_d2uiz+0x34>
  144da8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  144dac:	2a00000a 	bcs	144ddc <__aeabi_d2uiz+0x3c>
  144db0:	5a000007 	bpl	144dd4 <__aeabi_d2uiz+0x34>
  144db4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  144db8:	e0532ac2 	subs	r2, r3, r2, asr #21
  144dbc:	4a000008 	bmi	144de4 <__aeabi_d2uiz+0x44>
  144dc0:	e1a03581 	lsl	r3, r1, #11
  144dc4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  144dc8:	e1833aa0 	orr	r3, r3, r0, lsr #21
  144dcc:	e1a00233 	lsr	r0, r3, r2
  144dd0:	e12fff1e 	bx	lr
  144dd4:	e3a00000 	mov	r0, #0
  144dd8:	e12fff1e 	bx	lr
  144ddc:	e1900601 	orrs	r0, r0, r1, lsl #12
  144de0:	1a000001 	bne	144dec <__aeabi_d2uiz+0x4c>
  144de4:	e3e00000 	mvn	r0, #0
  144de8:	e12fff1e 	bx	lr
  144dec:	e3a00000 	mov	r0, #0
  144df0:	e12fff1e 	bx	lr

00144df4 <__aeabi_ldivmod>:
  144df4:	e3530000 	cmp	r3, #0
  144df8:	03520000 	cmpeq	r2, #0
  144dfc:	1a000007 	bne	144e20 <__aeabi_ldivmod+0x2c>
  144e00:	e3510000 	cmp	r1, #0
  144e04:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  144e08:	b3a00000 	movlt	r0, #0
  144e0c:	ba000002 	blt	144e1c <__aeabi_ldivmod+0x28>
  144e10:	03500000 	cmpeq	r0, #0
  144e14:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  144e18:	13e00000 	mvnne	r0, #0
  144e1c:	eaffcee3 	b	1389b0 <__aeabi_idiv0>
  144e20:	e24dd008 	sub	sp, sp, #8
  144e24:	e92d6000 	push	{sp, lr}
  144e28:	e3510000 	cmp	r1, #0
  144e2c:	ba000006 	blt	144e4c <__aeabi_ldivmod+0x58>
  144e30:	e3530000 	cmp	r3, #0
  144e34:	ba000011 	blt	144e80 <__aeabi_ldivmod+0x8c>
  144e38:	eb000031 	bl	144f04 <__udivmoddi4>
  144e3c:	e59de004 	ldr	lr, [sp, #4]
  144e40:	e28dd008 	add	sp, sp, #8
  144e44:	e8bd000c 	pop	{r2, r3}
  144e48:	e12fff1e 	bx	lr
  144e4c:	e2700000 	rsbs	r0, r0, #0
  144e50:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144e54:	e3530000 	cmp	r3, #0
  144e58:	ba000011 	blt	144ea4 <__aeabi_ldivmod+0xb0>
  144e5c:	eb000028 	bl	144f04 <__udivmoddi4>
  144e60:	e59de004 	ldr	lr, [sp, #4]
  144e64:	e28dd008 	add	sp, sp, #8
  144e68:	e8bd000c 	pop	{r2, r3}
  144e6c:	e2700000 	rsbs	r0, r0, #0
  144e70:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144e74:	e2722000 	rsbs	r2, r2, #0
  144e78:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144e7c:	e12fff1e 	bx	lr
  144e80:	e2722000 	rsbs	r2, r2, #0
  144e84:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144e88:	eb00001d 	bl	144f04 <__udivmoddi4>
  144e8c:	e59de004 	ldr	lr, [sp, #4]
  144e90:	e28dd008 	add	sp, sp, #8
  144e94:	e8bd000c 	pop	{r2, r3}
  144e98:	e2700000 	rsbs	r0, r0, #0
  144e9c:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144ea0:	e12fff1e 	bx	lr
  144ea4:	e2722000 	rsbs	r2, r2, #0
  144ea8:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144eac:	eb000014 	bl	144f04 <__udivmoddi4>
  144eb0:	e59de004 	ldr	lr, [sp, #4]
  144eb4:	e28dd008 	add	sp, sp, #8
  144eb8:	e8bd000c 	pop	{r2, r3}
  144ebc:	e2722000 	rsbs	r2, r2, #0
  144ec0:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144ec4:	e12fff1e 	bx	lr

00144ec8 <__aeabi_uldivmod>:
  144ec8:	e3530000 	cmp	r3, #0
  144ecc:	03520000 	cmpeq	r2, #0
  144ed0:	1a000004 	bne	144ee8 <__aeabi_uldivmod+0x20>
  144ed4:	e3510000 	cmp	r1, #0
  144ed8:	03500000 	cmpeq	r0, #0
  144edc:	13e01000 	mvnne	r1, #0
  144ee0:	13e00000 	mvnne	r0, #0
  144ee4:	eaffceb1 	b	1389b0 <__aeabi_idiv0>
  144ee8:	e24dd008 	sub	sp, sp, #8
  144eec:	e92d6000 	push	{sp, lr}
  144ef0:	eb000003 	bl	144f04 <__udivmoddi4>
  144ef4:	e59de004 	ldr	lr, [sp, #4]
  144ef8:	e28dd008 	add	sp, sp, #8
  144efc:	e8bd000c 	pop	{r2, r3}
  144f00:	e12fff1e 	bx	lr

00144f04 <__udivmoddi4>:
  144f04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  144f08:	e1510003 	cmp	r1, r3
  144f0c:	e24dd008 	sub	sp, sp, #8
  144f10:	01500002 	cmpeq	r0, r2
  144f14:	e1a09000 	mov	r9, r0
  144f18:	e1a0a001 	mov	sl, r1
  144f1c:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  144f20:	3a00003c 	bcc	145018 <__udivmoddi4+0x114>
  144f24:	e1a00002 	mov	r0, r2
  144f28:	e3530000 	cmp	r3, #0
  144f2c:	e1a01003 	mov	r1, r3
  144f30:	016f3f10 	clzeq	r3, r0
  144f34:	116f2f13 	clzne	r2, r3
  144f38:	02832020 	addeq	r2, r3, #32
  144f3c:	e35a0000 	cmp	sl, #0
  144f40:	016f3f19 	clzeq	r3, r9
  144f44:	116f3f1a 	clzne	r3, sl
  144f48:	02833020 	addeq	r3, r3, #32
  144f4c:	e0423003 	sub	r3, r2, r3
  144f50:	e243c020 	sub	ip, r3, #32
  144f54:	e1a07311 	lsl	r7, r1, r3
  144f58:	e1877c10 	orr	r7, r7, r0, lsl ip
  144f5c:	e263e020 	rsb	lr, r3, #32
  144f60:	e1877e30 	orr	r7, r7, r0, lsr lr
  144f64:	e1a06310 	lsl	r6, r0, r3
  144f68:	e15a0007 	cmp	sl, r7
  144f6c:	01590006 	cmpeq	r9, r6
  144f70:	2a000030 	bcs	145038 <__udivmoddi4+0x134>
  144f74:	e3a01000 	mov	r1, #0
  144f78:	e3a02000 	mov	r2, #0
  144f7c:	e88d0006 	stm	sp, {r1, r2}
  144f80:	e3530000 	cmp	r3, #0
  144f84:	0a000026 	beq	145024 <__udivmoddi4+0x120>
  144f88:	e1b070a7 	lsrs	r7, r7, #1
  144f8c:	e1a06066 	rrx	r6, r6
  144f90:	e1a02003 	mov	r2, r3
  144f94:	ea000007 	b	144fb8 <__udivmoddi4+0xb4>
  144f98:	e0590006 	subs	r0, r9, r6
  144f9c:	e0ca1007 	sbc	r1, sl, r7
  144fa0:	e0904000 	adds	r4, r0, r0
  144fa4:	e0a15001 	adc	r5, r1, r1
  144fa8:	e2949001 	adds	r9, r4, #1
  144fac:	e2a5a000 	adc	sl, r5, #0
  144fb0:	e2522001 	subs	r2, r2, #1
  144fb4:	0a000006 	beq	144fd4 <__udivmoddi4+0xd0>
  144fb8:	e15a0007 	cmp	sl, r7
  144fbc:	01590006 	cmpeq	r9, r6
  144fc0:	2afffff4 	bcs	144f98 <__udivmoddi4+0x94>
  144fc4:	e0999009 	adds	r9, r9, r9
  144fc8:	e0aaa00a 	adc	sl, sl, sl
  144fcc:	e2522001 	subs	r2, r2, #1
  144fd0:	1afffff8 	bne	144fb8 <__udivmoddi4+0xb4>
  144fd4:	e89d00c0 	ldm	sp, {r6, r7}
  144fd8:	e1a02339 	lsr	r2, r9, r3
  144fdc:	e0966009 	adds	r6, r6, r9
  144fe0:	e1822e1a 	orr	r2, r2, sl, lsl lr
  144fe4:	e1a0133a 	lsr	r1, sl, r3
  144fe8:	e1822c3a 	orr	r2, r2, sl, lsr ip
  144fec:	e0a7700a 	adc	r7, r7, sl
  144ff0:	e1a0a001 	mov	sl, r1
  144ff4:	e1a0131a 	lsl	r1, sl, r3
  144ff8:	e1811c12 	orr	r1, r1, r2, lsl ip
  144ffc:	e1a00312 	lsl	r0, r2, r3
  145000:	e0566000 	subs	r6, r6, r0
  145004:	e1811e32 	orr	r1, r1, r2, lsr lr
  145008:	e0c77001 	sbc	r7, r7, r1
  14500c:	e1a09002 	mov	r9, r2
  145010:	e88d00c0 	stm	sp, {r6, r7}
  145014:	ea000002 	b	145024 <__udivmoddi4+0x120>
  145018:	e3a03000 	mov	r3, #0
  14501c:	e3a04000 	mov	r4, #0
  145020:	e88d0018 	stm	sp, {r3, r4}
  145024:	e3580000 	cmp	r8, #0
  145028:	18880600 	stmne	r8, {r9, sl}
  14502c:	e89d0003 	ldm	sp, {r0, r1}
  145030:	e28dd008 	add	sp, sp, #8
  145034:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  145038:	e3a02001 	mov	r2, #1
  14503c:	e1a01c12 	lsl	r1, r2, ip
  145040:	e1811e32 	orr	r1, r1, r2, lsr lr
  145044:	e0599006 	subs	r9, r9, r6
  145048:	e1a02312 	lsl	r2, r2, r3
  14504c:	e58d1004 	str	r1, [sp, #4]
  145050:	e0caa007 	sbc	sl, sl, r7
  145054:	e58d2000 	str	r2, [sp]
  145058:	eaffffc8 	b	144f80 <__udivmoddi4+0x7c>

0014505c <_init>:
  14505c:	e92d4001 	push	{r0, lr}
  145060:	e8bd4001 	pop	{r0, lr}
  145064:	e12fff1e 	bx	lr

00145068 <_fini>:
  145068:	e92d4001 	push	{r0, lr}
  14506c:	e8bd4001 	pop	{r0, lr}
  145070:	e12fff1e 	bx	lr
  145074:	706d6f63 	.word	0x706d6f63
  145078:	6974656c 	.word	0x6974656c
  14507c:	00006e6f 	.word	0x00006e6f
  145080:	20746553 	.word	0x20746553
  145084:	6c626f6e 	.word	0x6c626f6e
  145088:	696b636f 	.word	0x696b636f
  14508c:	6520676e 	.word	0x6520676e
  145090:	726f7272 	.word	0x726f7272
  145094:	00000021 	.word	0x00000021
  145098:	61657243 	.word	0x61657243
  14509c:	6c206574 	.word	0x6c206574
  1450a0:	65747369 	.word	0x65747369
  1450a4:	2064666e 	.word	0x2064666e
  1450a8:	6b636f73 	.word	0x6b636f73
  1450ac:	65207465 	.word	0x65207465
  1450b0:	726f7272 	.word	0x726f7272
  1450b4:	7325203a 	.word	0x7325203a
  1450b8:	72726528 	.word	0x72726528
  1450bc:	203a6f6e 	.word	0x203a6f6e
  1450c0:	0a296425 	.word	0x0a296425
  1450c4:	00000000 	.word	0x00000000
  1450c8:	73746553 	.word	0x73746553
  1450cc:	6f6b636f 	.word	0x6f6b636f
  1450d0:	72207470 	.word	0x72207470
  1450d4:	65737565 	.word	0x65737565
  1450d8:	20646461 	.word	0x20646461
  1450dc:	6c696166 	.word	0x6c696166
  1450e0:	00006465 	.word	0x00006465
  1450e4:	646e6942 	.word	0x646e6942
  1450e8:	636f7320 	.word	0x636f7320
  1450ec:	2074656b 	.word	0x2074656b
  1450f0:	6f727265 	.word	0x6f727265
  1450f4:	25203a72 	.word	0x25203a72
  1450f8:	72652873 	.word	0x72652873
  1450fc:	3a6f6e72 	.word	0x3a6f6e72
  145100:	29642520 	.word	0x29642520
  145104:	6466202c 	.word	0x6466202c
  145108:	0a64253d 	.word	0x0a64253d
  14510c:	00000000 	.word	0x00000000
  145110:	7473694c 	.word	0x7473694c
  145114:	73206e65 	.word	0x73206e65
  145118:	656b636f 	.word	0x656b636f
  14511c:	72652074 	.word	0x72652074
  145120:	3a726f72 	.word	0x3a726f72
  145124:	28732520 	.word	0x28732520
  145128:	6e727265 	.word	0x6e727265
  14512c:	25203a6f 	.word	0x25203a6f
  145130:	000a2964 	.word	0x000a2964
  145134:	61657243 	.word	0x61657243
  145138:	63206574 	.word	0x63206574
  14513c:	6e65696c 	.word	0x6e65696c
  145140:	20646674 	.word	0x20646674
  145144:	6b636f73 	.word	0x6b636f73
  145148:	65207465 	.word	0x65207465
  14514c:	726f7272 	.word	0x726f7272
  145150:	7325203a 	.word	0x7325203a
  145154:	72726528 	.word	0x72726528
  145158:	203a6f6e 	.word	0x203a6f6e
  14515c:	0a296425 	.word	0x0a296425
  145160:	00000000 	.word	0x00000000
  145164:	656c6573 	.word	0x656c6573
  145168:	65207463 	.word	0x65207463
  14516c:	726f7272 	.word	0x726f7272
  145170:	00000000 	.word	0x00000000
  145174:	746e6f63 	.word	0x746e6f63
  145178:	65756e69 	.word	0x65756e69
  14517c:	00000000 	.word	0x00000000
  145180:	69745f75 	.word	0x69745f75
  145184:	0072656d 	.word	0x0072656d
  145188:	5f6d7475 	.word	0x5f6d7475
  14518c:	6574756d 	.word	0x6574756d
  145190:	00000078 	.word	0x00000078
  145194:	00007325 	.word	0x00007325
  145198:	72657355 	.word	0x72657355
  14519c:	3a505041 	.word	0x3a505041
  1451a0:	73252820 	.word	0x73252820
  1451a4:	73612029 	.word	0x73612029
  1451a8:	74726573 	.word	0x74726573
  1451ac:	206e6f69 	.word	0x206e6f69
  1451b0:	6c696166 	.word	0x6c696166
  1451b4:	61206465 	.word	0x61206465
  1451b8:	75662074 	.word	0x75662074
  1451bc:	6974636e 	.word	0x6974636e
  1451c0:	253a6e6f 	.word	0x253a6e6f
  1451c4:	6c202c73 	.word	0x6c202c73
  1451c8:	20656e69 	.word	0x20656e69
  1451cc:	626d756e 	.word	0x626d756e
  1451d0:	253a7265 	.word	0x253a7265
  1451d4:	000a2064 	.word	0x000a2064
  1451d8:	6e616863 	.word	0x6e616863
  1451dc:	206c656e 	.word	0x206c656e
  1451e0:	30203d3e 	.word	0x30203d3e
  1451e4:	00000000 	.word	0x00000000
  1451e8:	5049776c 	.word	0x5049776c
  1451ec:	0074694b 	.word	0x0074694b
  1451f0:	61746164 	.word	0x61746164
  1451f4:	00646e49 	.word	0x00646e49
  1451f8:	76726573 	.word	0x76726573
  1451fc:	73656369 	.word	0x73656369
  145200:	49776c2f 	.word	0x49776c2f
  145204:	74694b50 	.word	0x74694b50
  145208:	6372732f 	.word	0x6372732f
  14520c:	69616d2f 	.word	0x69616d2f
  145210:	00632e6e 	.word	0x00632e6e
  145214:	2a2a2a2a 	.word	0x2a2a2a2a
  145218:	25207325 	.word	0x25207325
  14521c:	64252064 	.word	0x64252064
  145220:	0000000a 	.word	0x0000000a
  145224:	6c207325 	.word	0x6c207325
  145228:	20656e69 	.word	0x20656e69
  14522c:	73206425 	.word	0x73206425
  145230:	74646e65 	.word	0x74646e65
  145234:	7265206f 	.word	0x7265206f
  145238:	0a726f72 	.word	0x0a726f72
  14523c:	00000000 	.word	0x00000000
  145240:	5049776c 	.word	0x5049776c
  145244:	2074694b 	.word	0x2074694b
  145248:	67617355 	.word	0x67617355
  14524c:	090a3a65 	.word	0x090a3a65
  145250:	5049776c 	.word	0x5049776c
  145254:	2074694b 	.word	0x2074694b
  145258:	20202020 	.word	0x20202020
  14525c:	20202020 	.word	0x20202020
  145260:	20202020 	.word	0x20202020
  145264:	203a2020 	.word	0x203a2020
  145268:	6e757220 	.word	0x6e757220
  14526c:	49776c20 	.word	0x49776c20
  145270:	74694b50 	.word	0x74694b50
  145274:	6177202c 	.word	0x6177202c
  145278:	66207469 	.word	0x66207469
  14527c:	6520726f 	.word	0x6520726f
  145280:	65646874 	.word	0x65646874
  145284:	6f742076 	.word	0x6f742076
  145288:	74746120 	.word	0x74746120
  14528c:	0a686361 	.word	0x0a686361
  145290:	49776c09 	.word	0x49776c09
  145294:	74694b50 	.word	0x74694b50
  145298:	74746120 	.word	0x74746120
  14529c:	20686361 	.word	0x20686361
  1452a0:	653c2020 	.word	0x653c2020
  1452a4:	3a3e6874 	.word	0x3a3e6874
  1452a8:	74612020 	.word	0x74612020
  1452ac:	68636174 	.word	0x68636174
  1452b0:	65687420 	.word	0x65687420
  1452b4:	76656420 	.word	0x76656420
  1452b8:	20656369 	.word	0x20656369
  1452bc:	6874653c 	.word	0x6874653c
  1452c0:	6f74203e 	.word	0x6f74203e
  1452c4:	49776c20 	.word	0x49776c20
  1452c8:	74694b50 	.word	0x74694b50
  1452cc:	776c090a 	.word	0x776c090a
  1452d0:	694b5049 	.word	0x694b5049
  1452d4:	65642074 	.word	0x65642074
  1452d8:	61747461 	.word	0x61747461
  1452dc:	3c206863 	.word	0x3c206863
  1452e0:	3e687465 	.word	0x3e687465
  1452e4:	6420203a 	.word	0x6420203a
  1452e8:	74612d65 	.word	0x74612d65
  1452ec:	68636174 	.word	0x68636174
  1452f0:	65687420 	.word	0x65687420
  1452f4:	76656420 	.word	0x76656420
  1452f8:	20656369 	.word	0x20656369
  1452fc:	6874653c 	.word	0x6874653c
  145300:	7266203e 	.word	0x7266203e
  145304:	6c206d6f 	.word	0x6c206d6f
  145308:	4b504977 	.word	0x4b504977
  14530c:	090a7469 	.word	0x090a7469
  145310:	5049776c 	.word	0x5049776c
  145314:	2074694b 	.word	0x2074694b
  145318:	61666564 	.word	0x61666564
  14531c:	20746c75 	.word	0x20746c75
  145320:	74653c20 	.word	0x74653c20
  145324:	203a3e68 	.word	0x203a3e68
  145328:	74657320 	.word	0x74657320
  14532c:	74653c20 	.word	0x74653c20
  145330:	61203e68 	.word	0x61203e68
  145334:	68742073 	.word	0x68742073
  145338:	65642065 	.word	0x65642065
  14533c:	6c756166 	.word	0x6c756166
  145340:	65642074 	.word	0x65642074
  145344:	65636976 	.word	0x65636976
  145348:	776c090a 	.word	0x776c090a
  14534c:	694b5049 	.word	0x694b5049
  145350:	74732074 	.word	0x74732074
  145354:	73757461 	.word	0x73757461
  145358:	20202020 	.word	0x20202020
  14535c:	20202020 	.word	0x20202020
  145360:	7320203a 	.word	0x7320203a
  145364:	20776f68 	.word	0x20776f68
  145368:	20656874 	.word	0x20656874
  14536c:	74617473 	.word	0x74617473
  145370:	6f207375 	.word	0x6f207375
  145374:	75722066 	.word	0x75722066
  145378:	6e696e6e 	.word	0x6e696e6e
  14537c:	776c2067 	.word	0x776c2067
  145380:	494b5049 	.word	0x494b5049
  145384:	00000074 	.word	0x00000074
  145388:	5049776c 	.word	0x5049776c
  14538c:	3a74694b 	.word	0x3a74694b
  145390:	61747320 	.word	0x61747320
  145394:	20737472 	.word	0x20737472
  145398:	72206f74 	.word	0x72206f74
  14539c:	61206e75 	.word	0x61206e75
  1453a0:	68742073 	.word	0x68742073
  1453a4:	65732065 	.word	0x65732065
  1453a8:	72657672 	.word	0x72657672
  1453ac:	00000000 	.word	0x00000000
  1453b0:	2e2e2e20 	.word	0x2e2e2e20
  1453b4:	6c696166 	.word	0x6c696166
  1453b8:	00216465 	.word	0x00216465
  1453bc:	2e2e2e20 	.word	0x2e2e2e20
  1453c0:	70696b73 	.word	0x70696b73
  1453c4:	21646570 	.word	0x21646570
  1453c8:	726c4120 	.word	0x726c4120
  1453cc:	79646165 	.word	0x79646165
  1453d0:	696e6920 	.word	0x696e6920
  1453d4:	6c616974 	.word	0x6c616974
  1453d8:	64657a69 	.word	0x64657a69
  1453dc:	00000000 	.word	0x00000000
  1453e0:	2e2e2e20 	.word	0x2e2e2e20
  1453e4:	63637573 	.word	0x63637573
  1453e8:	65646565 	.word	0x65646565
  1453ec:	00002164 	.word	0x00002164
  1453f0:	5049776c 	.word	0x5049776c
  1453f4:	3a74694b 	.word	0x3a74694b
  1453f8:	696e6920 	.word	0x696e6920
  1453fc:	74652074 	.word	0x74652074
  145400:	65642068 	.word	0x65642068
  145404:	2e2e2e76 	.word	0x2e2e2e76
  145408:	00000000 	.word	0x00000000
  14540c:	63637573 	.word	0x63637573
  145410:	65646565 	.word	0x65646565
  145414:	00000064 	.word	0x00000064
  145418:	61747461 	.word	0x61747461
  14541c:	00006863 	.word	0x00006863
  145420:	5049776c 	.word	0x5049776c
  145424:	3a74694b 	.word	0x3a74694b
  145428:	74746120 	.word	0x74746120
  14542c:	20686361 	.word	0x20686361
  145430:	69766564 	.word	0x69766564
  145434:	25206563 	.word	0x25206563
  145438:	00000a73 	.word	0x00000a73
  14543c:	6e6e6163 	.word	0x6e6e6163
  145440:	6f20746f 	.word	0x6f20746f
  145444:	206e6570 	.word	0x206e6570
  145448:	61746164 	.word	0x61746164
  14544c:	6168635f 	.word	0x6168635f
  145450:	6c656e6e 	.word	0x6c656e6e
  145454:	6c70202c 	.word	0x6c70202c
  145458:	65736165 	.word	0x65736165
  14545c:	6b616d20 	.word	0x6b616d20
  145460:	75732065 	.word	0x75732065
  145464:	6c206572 	.word	0x6c206572
  145468:	4b504977 	.word	0x4b504977
  14546c:	73207469 	.word	0x73207469
  145470:	65767265 	.word	0x65767265
  145474:	73692072 	.word	0x73692072
  145478:	6e757220 	.word	0x6e757220
  14547c:	676e696e 	.word	0x676e696e
  145480:	00000021 	.word	0x00000021
  145484:	74616564 	.word	0x74616564
  145488:	68636174 	.word	0x68636174
  14548c:	00000000 	.word	0x00000000
  145490:	5049776c 	.word	0x5049776c
  145494:	3a74694b 	.word	0x3a74694b
  145498:	2d656420 	.word	0x2d656420
  14549c:	61747461 	.word	0x61747461
  1454a0:	64206863 	.word	0x64206863
  1454a4:	63697665 	.word	0x63697665
  1454a8:	73252065 	.word	0x73252065
  1454ac:	0000000a 	.word	0x0000000a
  1454b0:	61666564 	.word	0x61666564
  1454b4:	00746c75 	.word	0x00746c75
  1454b8:	5049776c 	.word	0x5049776c
  1454bc:	3a74694b 	.word	0x3a74694b
  1454c0:	74657320 	.word	0x74657320
  1454c4:	65687420 	.word	0x65687420
  1454c8:	66656420 	.word	0x66656420
  1454cc:	746c7561 	.word	0x746c7561
  1454d0:	76656420 	.word	0x76656420
  1454d4:	20656369 	.word	0x20656369
  1454d8:	00007325 	.word	0x00007325
  1454dc:	74617473 	.word	0x74617473
  1454e0:	00007375 	.word	0x00007375
  1454e4:	5049776c 	.word	0x5049776c
  1454e8:	3a74694b 	.word	0x3a74694b
  1454ec:	65687420 	.word	0x65687420
  1454f0:	61747320 	.word	0x61747320
  1454f4:	20737574 	.word	0x20737574
  1454f8:	7420666f 	.word	0x7420666f
  1454fc:	61206568 	.word	0x61206568
  145500:	63617474 	.word	0x63617474
  145504:	20646568 	.word	0x20646568
  145508:	69766564 	.word	0x69766564
  14550c:	20736563 	.word	0x20736563
  145510:	66207361 	.word	0x66207361
  145514:	6f6c6c6f 	.word	0x6f6c6c6f
  145518:	00007377 	.word	0x00007377

0014551c <__func__.9579>:
  14551c:	63617473 75725f6b 0000006e              stack_run...

00145528 <__FUNCTION__.6247>:
  145528:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145538:	00000000                                ....

0014553c <__FUNCTION__.6580>:
  14553c:	74656e75 646d635f 7065725f 0000796c     unet_cmd_reply..

0014554c <__FUNCTION__.6242>:
  14554c:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  14555c:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  14556c:	6f6c6c61 65746163 73206120 65726168     allocate a share
  14557c:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  14558c:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  14559c:	65746163 68732064 64657261 6d656d20     cated shared mem
  1455ac:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  1455bc:	76206120 64696c61 64646120 73736572      a valid address
  1455cc:	00000021                                !...

001455d0 <__func__.6282>:
  1455d0:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  1455e0:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  1455f0:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  145600:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  145610:	20732520 6c696166 000a6465               %s failed..

0014561c <__FUNCTION__.5856>:
  14561c:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  14562c:	00000000                                ....

00145630 <__FUNCTION__.5845>:
  145630:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145640:	6365725f 00000076                       _recv...

00145648 <unet_socket_ops>:
  145648:	00108e5c 00108ed8 00108f04 00108f3c     \...........<...
  145658:	00108f6c 00108fa4 00108fe0 00109090     l...............
  145668:	00109124 0010916c 001091b4 001091e4     $...l...........
  145678:	0010921c 001048f0 00000000              .....H......

00145684 <unet_netdb_ops>:
  145684:	001092c4 00109404 00109434 00109474     ........4...t...

00145694 <unet_inet_family>:
  145694:	00000002 00000002 00145648 00145684     ........HV...V..
  1456a4:	6474656e 00007665                       netdev..

001456ac <__FUNCTION__.7159>:
  1456ac:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  1456bc:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  1456cc:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  1456dc:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  1456ec:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  1456fc:	69766544 00006563 69206f54 6974696e     Device..To initi
  14570c:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  14571c:	6c696166 202e6465 20656854 6f727265     failed. The erro
  14572c:	6f632072 69206564 6c252073 00000a64     r code is %ld...

0014573c <__FUNCTION__.6035>:
  14573c:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  14574c:	74736967 00007265                       gister..

00145754 <__FUNCTION__.6044>:
  145754:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  145764:	00000000                                ....

00145768 <__FUNCTION__.6049>:
  145768:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  145778:	00000065                                e...

0014577c <__FUNCTION__.6055>:
  14577c:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  14578c:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  14579c:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  1457ac:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  1457bc:	206b726f 65746e69 63616672 65642065     ork interface de
  1457cc:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  1457dc:	74726f70 206f7420 20746573 74617473     port to set stat
  1457ec:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  1457fc:	7774656e 206b726f 65746e69 63616672     network interfac
  14580c:	65642065 65636976 29732528 746f6e20     e device(%s) not
  14581c:	70757320 74726f70 206f7420 20746573      support to set 
  14582c:	50434844 61747320 2e737574 00000000     DHCP status.....
  14583c:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  14584c:	206b726f 65746e69 63616672 65642065     ork interface de
  14585c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  14586c:	74726f70 206f7420 20746573 61205049     port to set IP a
  14587c:	65726464 002e7373 20656854 7774656e     ddress..The netw
  14588c:	206b726f 65746e69 63616672 65642065     ork interface de
  14589c:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  1458ac:	69626170 7974696c 20736920 62616e65     pability is enab
  1458bc:	202c656c 20746f6e 70707573 2074726f     le, not support 
  1458cc:	20746573 61205049 65726464 002e7373     set IP address..
  1458dc:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  1458ec:	206b726f 65746e69 63616672 65642065     ork interface de
  1458fc:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  14590c:	74726f70 206f7420 20746573 6d74656e     port to set netm
  14591c:	206b7361 72646461 2e737365 00000000     ask address.....
  14592c:	20656854 7774656e 206b726f 65746e69     The network inte
  14593c:	63616672 65642065 65636976 29732528     rface device(%s)
  14594c:	43484420 61632050 69626170 7974696c      DHCP capability
  14595c:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  14596c:	70707573 2074726f 20746573 6d74656e     support set netm
  14597c:	206b7361 72646461 2e737365 00000000     ask address.....
  14598c:	00007767 20656854 7774656e 206b726f     gw..The network 
  14599c:	65746e69 63616672 65642065 65636976     interface device
  1459ac:	29732528 746f6e20 70757320 74726f70     (%s) not support
  1459bc:	206f7420 20746573 65746167 20796177      to set gateway 
  1459cc:	72646461 2e737365 00000000 20656854     address.....The 
  1459dc:	7774656e 206b726f 65746e69 63616672     network interfac
  1459ec:	65642065 65636976 29732528 43484420     e device(%s) DHC
  1459fc:	61632050 69626170 7974696c 20736920     P capability is 
  145a0c:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  145a1c:	2074726f 20746573 65746167 20796177     ort set gateway 
  145a2c:	72646461 2e737365 00000000 5f736e64     address.....dns_
  145a3c:	76726573 00007265 20656854 626d756e     server..The numb
  145a4c:	6f207265 4e442066 65732053 72657672     er of DNS server
  145a5c:	64252873 65732029 78652074 64656563     s(%d) set exceed
  145a6c:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  145a7c:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  145a8c:	7774656e 206b726f 65746e69 63616672     network interfac
  145a9c:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145aac:	70757320 74726f70 206f7420 20746573      support to set 
  145abc:	20534e44 76726573 61207265 65726464     DNS server addre
  145acc:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145adc:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145aec:	0000006b                                k...

00145af0 <__FUNCTION__.6920>:
  145af0:	6474656e 725f7665 73696765 00726574     netdev_register.

00145b00 <__FUNCTION__.6929>:
  145b00:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145b10:	00000072                                r...

00145b14 <__FUNCTION__.6975>:
  145b14:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145b24:	00000074                                t...

00145b28 <__FUNCTION__.6982>:
  145b28:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145b38 <__FUNCTION__.6986>:
  145b38:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145b48 <__FUNCTION__.6991>:
  145b48:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145b58:	0064656c                                led.

00145b5c <__FUNCTION__.6996>:
  145b5c:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  145b6c:	00000072                                r...

00145b70 <__FUNCTION__.7001>:
  145b70:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  145b80:	00006b73                                sk..

00145b84 <__FUNCTION__.7006>:
  145b84:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00145b94 <__FUNCTION__.7012>:
  145b94:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  145ba4:	65767265 00000072                       erver...

00145bac <__FUNCTION__.7017>:
  145bac:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  145bbc:	61635f73 61626c6c 00006b63              s_callback..

00145bc8 <__FUNCTION__.7022>:
  145bc8:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145bd8:	6c6c6163 6b636162 00000000              callback....

00145be4 <__FUNCTION__.7027>:
  145be4:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145bf4:	7465735f 6170695f 00726464              _set_ipaddr.

00145c00 <__FUNCTION__.7032>:
  145c00:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145c10:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145c20 <__FUNCTION__.7037>:
  145c20:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145c30:	7465735f 0077675f                       _set_gw.

00145c38 <__FUNCTION__.7044>:
  145c38:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145c48:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145c58:	00000030                                0...

00145c5c <__FUNCTION__.5841>:
  145c5c:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  145c6c:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  145c7c:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  145c8c:	6f662079 6f732072 74656b63 62617420     y for socket tab
  145c9c:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  145cac:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  145cbc:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  145ccc:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  145cdc:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  145cec:	20657a69 63637573 2e737365 00000000     ize success.....
  145cfc:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  145d0c:	00006772 20677541 32203232 00323230     rg..Aug 22 2022.
  145d1c:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  145d2c:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  145d3c:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  145d4c:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  145d5c:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  145d6c:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  145d7c:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  145d8c:	74656e20 6b726f77 746e6920 61667265      network interfa
  145d9c:	64206563 63697665 79622065 6f727020     ce device by pro
  145dac:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  145dbc:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  145dcc:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  145ddc:	73696765 65726574 61662064 64656c69     egistered failed
  145dec:	6572202c 6e727574 72726520 2520726f     , return error %
  145dfc:	00002e64 656d616e 00000000 76726573     d...name....serv
  145e0c:	73656369 49776c2f 74694b50 74656e2f     ices/lwIPKit/net
  145e1c:	2f766564 5f6c6173 6b636f73 632e7465     dev/sal_socket.c
  145e2c:	00000000 2a2a2a2a 25207325 00000a64     ....****%s %d...
  145e3c:	204c4153 6b636f73 70207465 6f746f72     SAL socket proto
  145e4c:	206c6f63 696d6166 6920796c 7475706e     col family input
  145e5c:	69616620 2c64656c 74657220 206e7275      failed, return 
  145e6c:	6f727265 64252072 0000002e              error %d....

00145e78 <__FUNCTION__.6969>:
  145e78:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

00145e88 <__FUNCTION__.6974>:
  145e88:	5f6c6173 6b636f6c 00000000              sal_lock....

00145e94 <__FUNCTION__.7032>:
  145e94:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00145ea4 <__FUNCTION__.7057>:
  145ea4:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  145eb4:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  145ec4:	0a726f72 00000000                       ror.....

00145ecc <__func__.6506>:
  145ecc:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  145edc:	65726c61 20796461 74696e69 00000a2e     already init....
  145eec:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  145efc:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  145f0c:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  145f1c:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  145f2c:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  145f3c:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  145f4c:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  145f5c:	44465f53 47414d5f 00004349              S_FD_MAGIC..

00145f68 <__FUNCTION__.6409>:
  145f68:	5f736664 6b636f6c 00000000              dfs_lock....

00145f74 <__FUNCTION__.6417>:
  145f74:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

00145f80 <__FUNCTION__.6470>:
  145f80:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  145f90:	5f736664 0072676d                       dfs_mgr.

00145f98 <_net_fops>:
  145f98:	0010a43c 0010a2b8 0010a32c 0010a3b4     <.......,.......
  145fa8:	0010a494 7069776c 73797320 206d6574     ....lwip system 
  145fb8:	65726c61 20796461 74696e69 00000a2e     already init....
  145fc8:	656e6f64 00000000 6c696146 74206465     done....Failed t
  145fd8:	7263206f 65746165 6d657320 6f687061     o create semapho
  145fe8:	00006572 76726573 73656369 49776c2f     re..services/lwI
  145ff8:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146008:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  146018:	00632e68 006d6573 64257325 00000000     h.c.sem.%s%d....
  146028:	0000756d 786f626d 00000000 6d5f7472     mu..mbox....rt_m
  146038:	65725f62 72207663 72757465 2064656e     b_recv returned 
  146048:	68746977 72726520 0021726f 3d212074     with error!.t !=
  146058:	5f545220 4c4c554e 00000000 7373410a      RT_NULL.....Ass
  146068:	69747265 203a6e6f 69206425 7325206e     ertion: %d in %s
  146078:	0000000a 00000030                       ....0...

00146080 <__FUNCTION__.7466>:
  146080:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

00146090 <__FUNCTION__.7478>:
  146090:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  1460a0:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  1460b0:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  1460c0:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1460d0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1460e0:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  1460f0:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  146100:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  146110:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  146120:	6e646c75 65207427 74736978 00000000     uldn't exist....
  146130:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  146140:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  146150:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146160:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  146170:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146180:	64696c61 64646120 00000072 6374656e     alid addr...netc
  146190:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  1461a0:	64696c61 726f7020 00000074 6374656e     alid port...netc
  1461b0:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  1461c0:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1461d0:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  1461e0:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  1461f0:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  146200:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146210:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  146220:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146230:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146240:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  146250:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146260:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146270:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146280:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  146290:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  1462a0:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1462b0:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  1462c0:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  1462d0:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  1462e0:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  1462f0:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  146300:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  146310:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146320:	74697277 69203a65 6c61766e 63206469     write: invalid c
  146330:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  146340:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  146350:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146360:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  146370:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  146380:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  146390:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  1463a0:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  1463b0:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  1463c0:	61206469 00726464 76726573 73656369     id addr.services
  1463d0:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1463e0:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  1463f0:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  146400:	73756d20 61682074 61206576 62637020      must have a pcb
  146410:	67726120 6e656d75 00000074 76636572      argument...recv
  146420:	7064755f 73756d20 61682074 61206576     _udp must have a
  146430:	7261206e 656d7567 0000746e 76636572     n argument..recv
  146440:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  146450:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  146460:	7063745f 73756d20 61682074 61206576     _tcp must have a
  146470:	62637020 67726120 6e656d75 00000074      pcb argument...
  146480:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  146490:	61206576 7261206e 656d7567 0000746e     ve an argument..
  1464a0:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  1464b0:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  1464c0:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  1464d0:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  1464e0:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  1464f0:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  146500:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  146510:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  146520:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  146530:	726c6120 79646165 6c6c6120 7461636f      already allocat
  146540:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  146550:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  146560:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  146570:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  146580:	20646574 7374756f 20656469 73696874     ted outside this
  146590:	6e756620 6f697463 0000006e 76636572      function...recv
  1465a0:	786f626d 73756d20 65622074 61656420     mbox must be dea
  1465b0:	636f6c6c 64657461 66656220 2065726f     llocated before 
  1465c0:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  1465d0:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  1465e0:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  1465f0:	7461636f 62206465 726f6665 61632065     ocated before ca
  146600:	6e696c6c 68742067 66207369 74636e75     lling this funct
  146610:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  146620:	00000000 73696874 20736920 20726f66     ....this is for 
  146630:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  146640:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  146650:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  146660:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  146670:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  146680:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  146690:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  1466a0:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  1466b0:	6374656e 206e6e6f 74617473 72652065     netconn state er
  1466c0:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  1466d0:	7463656e 206e6920 676f7270 73736572     nect in progress
  1466e0:	00000000 65726c61 20796461 74697277     ....already writ
  1466f0:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  146700:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  146710:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  146720:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  146730:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  146740:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  146750:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  146760:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  146770:	6e6f6320 7463656e 61747320 65206574      connect state e
  146780:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  146790:	6374656e 206e6e6f 65707974 00000000     netconn type....
  1467a0:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  1467b0:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  1467c0:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  1467d0:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  1467e0:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  1467f0:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  146800:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  146810:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  146820:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  146830:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  146840:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  146850:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  146860:	00000000                                ....

00146864 <err_to_errno_table>:
  146864:	00000000 0000000c 00000069 0000000b     ........i.......
  146874:	00000071 00000073 00000016 0000000b     q...s...........
  146884:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  146894:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  1468a4:	00000005 76726573 73656369 49776c2f     ....services/lwI
  1468b4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1468c4:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  1468d4:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  1468e4:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  1468f4:	63656863 6874206b 66207461 74737269     check that first
  146904:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146914:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146924:	766e6920 64696c61 66756220 00000000      invalid buf....
  146934:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146944:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146954:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146964:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146974:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146984:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  146994:	64696c61 66756220 00000000 6274656e     alid buf....netb
  1469a4:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  1469b4:	74616420 72747061 00000000 6274656e      dataptr....netb
  1469c4:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  1469d4:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  1469e4:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  1469f4:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146a04:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146a14:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146a24:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146a34:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146a44:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146a54:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146a64:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146a74:	7361656c 65722065 74726f70 69687420     lease report thi
  146a84:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  146a94:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  146aa4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146ab4:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  146ac4:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  146ad4:	69207465 7865646e 00000000 72646461     et index....addr
  146ae4:	6c617620 62206469 61207475 6c726464      valid but addrl
  146af4:	4e206e65 004c4c55 2a2a2a2a 25207325     en NULL.****%s %
  146b04:	00000a64 7069776c 6e69625f 69203a64     d...lwip_bind: i
  146b14:	6c61766e 61206469 65726464 00007373     nvalid address..
  146b24:	6b636f73 616c3e2d 61647473 3d206174     sock->lastdata =
  146b34:	554e203d 00004c4c 7069776c 6e6f635f     = NULL..lwip_con
  146b44:	7463656e 6e69203a 696c6176 64612064     nect: invalid ad
  146b54:	73657264 00000073 20667562 4e203d21     dress...buf != N
  146b64:	004c4c55 61766e69 2064696c 79706f63     ULL.invalid copy
  146b74:	2c6e656c 6e656c20 756f7720 7520646c     len, len would u
  146b84:	7265646e 776f6c66 00000000 7069776c     nderflow....lwip
  146b94:	6e65735f 67736d64 6e69203a 696c6176     _sendmsg: invali
  146ba4:	736d2064 72646867 00000000 7069776c     d msghdr....lwip
  146bb4:	6e65735f 67736d64 6e69203a 696c6176     _sendmsg: invali
  146bc4:	736d2064 72646867 766f6920 00000000     d msghdr iov....
  146bd4:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146be4:	696c6176 736d2064 72646867 6d616e20     valid msghdr nam
  146bf4:	00000065 5f766f69 206e656c 3175203c     e...iov_len < u1
  146c04:	00745f36 7069776c 6e65735f 3a6f7464     6_t.lwip_sendto:
  146c14:	7a697320 756d2065 66207473 69207469      size must fit i
  146c24:	3175206e 00745f36 7069776c 6e65735f     n u16_t.lwip_sen
  146c34:	3a6f7464 766e6920 64696c61 64646120     dto: invalid add
  146c44:	73736572 00000000 6165726e 3e207964     ress....nready >
  146c54:	0030203d 6b636f73 65733e2d 7463656c     = 0.sock->select
  146c64:	6961775f 676e6974 30203e20 00000000     _waiting > 0....
  146c74:	656c6573 635f7463 72702e62 3d207665     select_cb.prev =
  146c84:	554e203d 00004c4c 656c6573 635f7463     = NULL..select_c
  146c94:	72702e62 21207665 554e203d 00004c4c     b.prev != NULL..
  146ca4:	6e6b6e75 206e776f 6e657665 00000074     unknown event...
  146cb4:	69706374 68745f70 64616572 6e69203a     tcpip_thread: in
  146cc4:	696c6176 656d2064 67617373 00000065     valid message...
  146cd4:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  146ce4:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  146cf4:	2f697061 69706374 00632e70 61766e49     api/tcpip.c.Inva
  146d04:	2064696c 786f626d 00000000 6c696166     lid mbox....fail
  146d14:	74206465 7263206f 65746165 70637420     ed to create tcp
  146d24:	745f7069 61657268 626d2064 0000786f     ip_thread mbox..
  146d34:	6c696166 74206465 7263206f 65746165     failed to create
  146d44:	636f6c20 63745f6b 5f706970 65726f63      lock_tcpip_core
  146d54:	00000000 69706374 00000070 7778797a     ....tcpip...zyxw
  146d64:	73747576 6f707172 6b6c6d6e 6768696a     vutsrqponmlkjihg
  146d74:	63646566 38396162 34353637 30313233     fedcba9876543210
  146d84:	34333231 38373635 63626139 67666564     123456789abcdefg
  146d94:	6b6a6968 6f6e6d6c 73727170 77767574     hijklmnopqrstuvw
  146da4:	007a7978                                xyz.

00146da8 <dns_mquery_v4group>:
  146da8:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  146db8:	6f207475 72612066 00796172 76726573     ut of array.serv
  146dc8:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  146dd8:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  146de8:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  146df8:	20786564 2074756f 6220666f 646e756f     dex out of bound
  146e08:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  146e18:	6c626174 6e652065 20797274 74617473     table entry stat
  146e28:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  146e38:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  146e48:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  146e58:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  146e68:	0000632e 5f574152 00424350              .c..RAW_PCB.

00146e74 <memp_RAW_PCB>:
  146e74:	00146e6c 0014e0b8 0004001c 00151b80     ln..............
  146e84:	0014e0c8 5f504455 00424350              ....UDP_PCB.

00146e90 <memp_UDP_PCB>:
  146e90:	00146e88 0014e0cc 00080028 0015b9f4     .n......(.......
  146ea0:	0014e0dc 5f504354 00424350              ....TCP_PCB.

00146eac <memp_TCP_PCB>:
  146eac:	00146ea4 0014e0e0 000800a4 0015c1e0     .n..............
  146ebc:	0014e0f0 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  146ecc:	00004e45                                EN..

00146ed0 <memp_TCP_PCB_LISTEN>:
  146ed0:	00146ec0 0014e0f4 00080020 0015b494     .n...... .......
  146ee0:	0014e104 5f504354 00474553              ....TCP_SEG.

00146eec <memp_TCP_SEG>:
  146eec:	00146ee4 0014e108 00280010 00151ca4     .n........(.....
  146efc:	0014e118 53414552 54414453 00000041     ....REASSDATA...

00146f0c <memp_REASSDATA>:
  146f0c:	00146f00 0014e11c 000a0020 0015b6f8     .o...... .......
  146f1c:	0014e12c 47415246 5542505f 00000046     ,...FRAG_PBUF...

00146f2c <memp_FRAG_PBUF>:
  146f2c:	00146f20 0014e130 000f0018 00158a8c      o..0...........
  146f3c:	0014e140 4254454e 00004655              @...NETBUF..

00146f48 <memp_NETBUF>:
  146f48:	00146f40 0014e144 00400010 0014f75c     @o..D.....@.\...
  146f58:	0014e154 4354454e 004e4e4f              T...NETCONN.

00146f64 <memp_NETCONN>:
  146f64:	00146f5c 0014e158 00080040 0015bc98     \o..X...@.......
  146f74:	0014e168 49504354 534d5f50 50415f47     h...TCPIP_MSG_AP
  146f84:	00000049                                I...

00146f88 <memp_TCPIP_MSG_API>:
  146f88:	00146f78 0014e16c 00400010 00158e8c     xo..l.....@.....
  146f98:	0014e17c 49504354 534d5f50 4e495f47     |...TCPIP_MSG_IN
  146fa8:	00544b50                                PKT.

00146fac <memp_TCPIP_MSG_INPKT>:
  146fac:	00146f9c 0014e180 00400010 00150660     .o........@.`...
  146fbc:	0014e190 5f505241 55455551 00000045     ....ARP_QUEUE...

00146fcc <memp_ARP_QUEUE>:
  146fcc:	00146fc0 0014e194 001e0008 00151564     .o..........d...
  146fdc:	0014e1a4 504d4749 4f52475f 00005055     ....IGMP_GROUP..

00146fec <memp_IGMP_GROUP>:
  146fec:	00146fe0 0014e1a8 00080010 0015bffc     .o..............
  146ffc:	0014e1b8 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

0014700c <memp_SYS_TIMEOUT>:
  14700c:	00147000 0014e1bc 00070010 0015c864     .p..........d...
  14701c:	0014e1cc 4454454e 00000042              ....NETDB...

00147028 <memp_NETDB>:
  147028:	00147020 0014e1d0 00010134 0014f5f8      p......4.......
  147038:	0014e1e0 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  147048:	00000000                                ....

0014704c <memp_PBUF>:
  14704c:	0014703c 0014e1e4 00400030 00159d90     <p......0.@.....
  14705c:	0014e1f4 46554250 4f4f505f 0000004c     ....PBUF_POOL...

0014706c <memp_PBUF_POOL>:
  14706c:	00147060 0014e1f8 0010061c 00152608     `p...........&..
  14707c:	0014e208                                ....

00147080 <memp_pools>:
  147080:	00146e74 00146e90 00146eac 00146ed0     tn...n...n...n..
  147090:	00146eec 00146f0c 00146f2c 00146f48     .n...o..,o..Ho..
  1470a0:	00146f64 00146f88 00146fac 00146fcc     do...o...o...o..
  1470b0:	00146fec 0014700c 00147028 0014704c     .o...p..(p..Lp..
  1470c0:	0014706c 76726573 73656369 49776c2f     lp..services/lwI
  1470d0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1470e0:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  1470f0:	65746564 64657463 6d656d20 766f2070     detected memp ov
  147100:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  147170:	65746564 64657463 6d656d20 6e752070     detected memp un
  147180:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  1471f0:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  147200:	72702070 7265706f 6120796c 6e67696c     p properly align
  147210:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  147220:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  147230:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  147240:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  147250:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  147260:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  147270:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  147280:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  147290:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  1472a0:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1472b0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1472c0:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  1472d0:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  1472e0:	6d207473 20747375 6f736c61 20656220     st must also be 
  1472f0:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  147300:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  147310:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  147320:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  147330:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  147340:	72696620 21207473 616c203d 00217473      first != last!.
  147350:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  147360:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  147370:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147380:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147390:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  1473a0:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  1473b0:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  1473c0:	64656e67 00000000 63656863 2d70206b     gned....check p-
  1473d0:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  1473e0:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  1473f0:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  147400:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  147410:	62207473 69622065 72656767 61687420     st be bigger tha
  147420:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  147430:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  147440:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  147450:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  147460:	706f7270 796c7265 696c6120 64656e67     properly aligned
  147470:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  147480:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  147490:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  1474a0:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  1474b0:	756f656e 79742073 00006570 66756270     neous type..pbuf
  1474c0:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  1474d0:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  1474e0:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  1474f0:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  147500:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  147510:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  147520:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  147530:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  147540:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  147550:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  147560:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  147570:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  147580:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  147590:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  1475a0:	73203a65 20656e61 65707974 00000000     e: sane type....
  1475b0:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  1475c0:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  1475d0:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  1475e0:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  1475f0:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  147600:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  147610:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  147620:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  147630:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  147640:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  147650:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  147660:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  147670:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  147680:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  147690:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  1476a0:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  1476b0:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  1476c0:	65677261 6f6e2074 69622074 6e652067     arget not big en
  1476d0:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  1476e0:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  1476f0:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  147700:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  147710:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  147720:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  147730:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  147740:	7020776f 656b6361 75712074 73657565     ow packet queues
  147750:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  147760:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147770:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147780:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  147790:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  1477a0:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  1477b0:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  1477c0:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  1477d0:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  1477e0:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  1477f0:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147800:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147810:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147820:	706f635f 61662079 64656c69 00000000     _copy failed....
  147830:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147840:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147850:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147860:	77207265 6f687469 65207475 6e697461     er without eatin
  147870:	61702067 74656b63 00000000 76726573     g packet....serv
  147880:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147890:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1478a0:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  1478b0:	726f7473 65682065 72656461 20657720     store header we 
  1478c0:	7473756a 6d657220 6465766f 00000021     just removed!...
  1478d0:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  1478e0:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  1478f0:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147900:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147910:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147920:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147930:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147940:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147950:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147960:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147970:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147980:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147990:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  1479a0:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  1479b0:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  1479c0:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  1479d0:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  1479e0:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  1479f0:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147a00:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147a10:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147a20:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147a30:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147a40:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147a50:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147a60:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147a70:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147a80:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147a90:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  147aa0:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  147ab0:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  147ac0:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  147ad0:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  147ae0:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147af0:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147b00:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147b10:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147b20:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147b30:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147b40:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147b50:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147b60:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147b70:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147b80:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  147b90:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  147ba0:	454d4954 4941575f 00000054              TIME_WAIT...

00147bac <tcp_state_str>:
  147bac:	00147b34 00147b3c 00147b44 00147b50     4{..<{..D{..P{..
  147bbc:	00147b5c 00147b68 00147b74 00147b80     \{..h{..t{...{..
  147bcc:	00147b8c 00147b94 00147ba0              .{...{...{..

00147bd8 <tcp_backoff>:
  147bd8:	04030201 07070605 07070707 00000007     ................

00147be8 <tcp_persist_backoff>:
  147be8:	180c0603 00786030                       ....0`x.

00147bf0 <tcp_pcb_lists>:
  147bf0:	0015cc10 0015cc14 0015cc08 0015cc18     ................
  147c00:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147c10:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147c20:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147c30:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147c40:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147c50:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147c60:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147c70:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147c80:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  147c90:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  147ca0:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  147cb0:	6220796c 20646e69 73206e69 65746174     ly bind in state
  147cc0:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  147cd0:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  147ce0:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147cf0:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147d00:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147d10:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147d20:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  147d30:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  147d40:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  147d50:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  147d60:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  147d70:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  147d80:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  147d90:	74636120 20657669 2d626370 6174733e      active pcb->sta
  147da0:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  147db0:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  147dc0:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  147dd0:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  147de0:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  147df0:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  147e00:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  147e10:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  147e20:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  147e30:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  147e40:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  147e50:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  147e60:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  147e70:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  147e80:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  147e90:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  147ea0:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  147eb0:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  147ec0:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  147ed0:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  147ee0:	00000073 61766e69 2064696c 74617473     s...invalid stat
  147ef0:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  147f00:	73207465 65746174 726f6620 63657220     et state for rec
  147f10:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  147f20:	2064696c 6b636f73 73207465 65746174     lid socket state
  147f30:	726f6620 6e657320 61632074 61626c6c      for sent callba
  147f40:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  147f50:	73207465 65746174 726f6620 72726520     et state for err
  147f60:	6c616320 6361626c 0000006b 61766e69      callback...inva
  147f70:	2064696c 6b636f73 73207465 65746174     lid socket state
  147f80:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  147f90:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  147fa0:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  147fb0:	73746e65 61656c20 676e696b 00000000     ents leaking....
  147fc0:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  147fd0:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  147fe0:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  147ff0:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148000:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  148010:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  148020:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  148030:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  148040:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  148050:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  148060:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  148070:	75706e69 61203a74 76697463 63702065     input: active pc
  148080:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  148090:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  1480a0:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  1480b0:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  1480c0:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  1480d0:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  1480e0:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  1480f0:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  148100:	203d2120 20626370 74666128 63207265      != pcb (after c
  148110:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  148120:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  148130:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  148140:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  148150:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  148160:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  148170:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  148180:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  148190:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  1481a0:	656d6765 7420746e 7266206f 00006565     egment to free..
  1481b0:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  1481c0:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  1481d0:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  1481e0:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  1481f0:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  148200:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  148210:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  148220:	6c617620 71206469 65756575 6e656c20      valid queue len
  148230:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  148240:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  148250:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  148260:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  148270:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  148280:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  148290:	69727420 64656d6d 726f6320 74636572      trimmed correct
  1482a0:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  1482b0:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  1482c0:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  1482d0:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  1482e0:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  1482f0:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  148300:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  148310:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  148320:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  148330:	00000000 63656863 6874206b 66207461     ....check that f
  148340:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  148350:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  148360:	00000072 76726573 73656369 49776c2f     r...services/lwI
  148370:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148380:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  148390:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  1483a0:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  1483b0:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  1483c0:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  1483d0:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  1483e0:	7361656c 6e6f2074 75712065 20657565     least one queue 
  1483f0:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  148400:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  148410:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  148420:	65757120 20736575 74706d65 00000079      queues empty...
  148430:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  148440:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  148450:	76207265 616c6f69 20736574 29495041     er violates API)
  148460:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  148470:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  148480:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148490:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  1484a0:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  1484b0:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  1484c0:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  1484d0:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  1484e0:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  1484f0:	73726576 20657a69 6d73696d 68637461     versize mismatch
  148500:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  148510:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  148520:	63203a65 6b636568 61687420 69662074     e: check that fi
  148530:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  148540:	68742064 6f632065 656c706d 73206574     d the complete s
  148550:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  148560:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  148570:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  148580:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  148590:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  1485a0:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  1485b0:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  1485c0:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  1485d0:	636e6572 65722065 72697571 72207365     rence requires r
  1485e0:	72656665 65636e65 00000000 5f706374     eference....tcp_
  1485f0:	74697277 76203a65 64696c61 65757120     write: valid que
  148600:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  148610:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  148620:	20646565 68746965 54207265 535f5043     eed either TCP_S
  148630:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  148640:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  148650:	76207265 616c6f69 20736574 29495041     er violates API)
  148660:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  148670:	67616c66 63203a73 6b636568 61687420     flags: check tha
  148680:	69662074 20747372 66756270 6e616320     t first pbuf can
  148690:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  1486a0:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  1486b0:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  1486c0:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  1486d0:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  1486e0:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  1486f0:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  148700:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  148710:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  148720:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  148730:	00000073 20545352 20746f6e 65707865     s...RST not expe
  148740:	64657463 72656820 00002165              cted here!..

0014874c <lwip_cyclic_timers>:
  14874c:	000000fa 0011cca4 000003e8 001329b0     .............)..
  14875c:	000003e8 0012d600 0000ea60 0012a240     ........`...@...
  14876c:	000001f4 0012a374 00000064 001309ac     ....t...d.......
  14877c:	000003e8 001167c0 76726573 73656369     .....g..services
  14878c:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  14879c:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  1487ac:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  1487bc:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  1487cc:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  1487dc:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  1487ec:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  1487fc:	20726564 6c696166 000a6465 76726573     der failed..serv
  14880c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14881c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14882c:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  14883c:	66207461 74737269 75627020 61632066     at first pbuf ca
  14884c:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  14885c:	64685f70 00000072                       p_hdr...

00148864 <ethbroadcast>:
  148864:	ffffffff 0000ffff                       ........

0014886c <ethzero>:
	...
  148874:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148884:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  148894:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  1488a4:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1488b4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1488c4:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  1488d4:	632e7465 00000000 6974656e 00000066     et.c....netif...
  1488e4:	74736f68 00000000 676e6970 7365725f     host....ping_res
  1488f4:	00000070                                p...

001488f8 <lwip_netdev_ops>:
  1488f8:	00128cd8 00128d08 00128d38 00128e04     ........8.......
  148908:	00128e40 00128ea0 00000000 00129160     @...........`...
  148918:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148928:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148938:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148948:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148958:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148968:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148978:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148988:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148998:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  1489a8:	206b726f 65746e69 63616672 616e2065     ork interface na
  1489b8:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  1489c8:	7774656e 206b726f 65746e69 63616672     network interfac
  1489d8:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  1489e8:	00000a0d                                ....

001489ec <__FUNCTION__.7782>:
  1489ec:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  1489fc:	00000000                                ....

00148a00 <__FUNCTION__.7794>:
  148a00:	6474656e 615f7665 00006464              netdev_add..

00148a0c <__FUNCTION__.7803>:
  148a0c:	6474656e 645f7665 00006c65              netdev_del..

00148a18 <__FUNCTION__.7808>:
  148a18:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148a28:	00000063                                c...

00148a2c <__FUNCTION__.7814>:
  148a2c:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  148a3c:	75707475 00000074                       utput...

00148a44 <__FUNCTION__.7846>:
  148a44:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148a54:	676e6168 00000065                       hange...

00148a5c <__FUNCTION__.7870>:
  148a5c:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  148a6c:	6e695f65 705f7469 61766972 00006574     e_init_private..
  148a7c:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  148a8c:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  148a9c:	6b61656c 00000000 76726573 73656369     leak....services
  148aac:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148abc:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148acc:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  148adc:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  148aec:	66657220 6e756f63 72652074 00726f72      refcount error.
  148afc:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148b0c:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148b1c:	6974656e 6c612066 64616572 61682079     netif already ha
  148b2c:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148b3c:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148b4c:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148b5c:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  148b6c:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  148b7c:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  148b8c:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  148b9c:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  148bac:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  148bbc:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  148bcc:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  148bdc:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  148bec:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  148bfc:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  148c0c:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  148c1c:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  148c2c:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  148c3c:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148c4c:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  148c5c:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  148c6c:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  148c7c:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  148c8c:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  148c9c:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  148cac:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  148cbc:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148ccc:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  148cdc:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  148cec:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  148cfc:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  148d0c:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  148d1c:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  148d2c:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  148d3c:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  148d4c:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  148d5c:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  148d6c:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  148d7c:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  148d8c:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  148d9c:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  148dac:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148dbc:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  148dcc:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148ddc:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  148dec:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148dfc:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  148e0c:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  148e1c:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  148e2c:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  148e3c:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148e4c:	65686320 74206b63 20746168 73726966      check that firs
  148e5c:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  148e6c:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  148e7c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  148e8c:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  148e9c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  148eac:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  148ebc:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  148ecc:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  148edc:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  148eec:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  148efc:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  148f0c:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  148f1c:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  148f2c:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  148f3c:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  148f4c:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  148f5c:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  148f6c:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  148f7c:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  148f8c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148f9c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148fac:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  148fbc:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  148fcc:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  148fdc:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  148fec:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  148ffc:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  14900c:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  14901c:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  14902c:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  14903c:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  14904c:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  14905c:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  14906c:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  14907c:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  14908c:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  14909c:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  1490ac:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  1490bc:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  1490cc:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  1490dc:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  1490ec:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  1490fc:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  14910c:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  14911c:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  14912c:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  14913c:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  14914c:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  14915c:	00000021 63656863 6874206b 66207461     !...check that f
  14916c:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  14917c:	7320646c 63757274 74652074 70726168     ld struct etharp
  14918c:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  14919c:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  1491ac:	68742065 61732065 6120656d 54452073     e the same as ET
  1491bc:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  1491cc:	68746520 21707261 00000000 706d6369      etharp!....icmp
  1491dc:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  1491ec:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  1491fc:	65682070 72656461 69616620 0a64656c     p header failed.
  14920c:	00000000 76726573 73656369 49776c2f     ....services/lwI
  14921c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14922c:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  14923c:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  14924c:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  14925c:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  14926c:	61662064 64656c69 0000000a 63656863     d failed....chec
  14927c:	6874206b 66207461 74737269 75627020     k that first pbu
  14928c:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  14929c:	7373656d 00656761 76726573 73656369     message.services
  1492ac:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1492bc:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  1492cc:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  1492dc:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  1492ec:	74737269 6f726720 6d207075 20747375     irst group must 
  1492fc:	61206562 79736c6c 6d657473 00000073     be allsystems...
  14930c:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  14931c:	61203a70 65206c6c 70656378 69662074     p: all except fi
  14932c:	20747372 756f7267 756d2070 6e207473     rst group must n
  14933c:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  14934c:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  14935c:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  14936c:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  14937c:	64612074 73657264 00000073 706d6769     t address...igmp
  14938c:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  14939c:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  1493ac:	65747379 6120736d 65726464 00007373     ystems address..
  1493bc:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  1493cc:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  1493dc:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  1493ec:	20747361 72646461 00737365 706d6769     ast address.igmp
  1493fc:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  14940c:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  14941c:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  14942c:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  14943c:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  14944c:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  14945c:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  14946c:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  14947c:	74746120 74706d65 206f7420 7661656c      attempt to leav
  14948c:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  14949c:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  1494ac:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  1494bc:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  1494cc:	736d6574 64646120 73736572 00000000     tems address....
  1494dc:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1494ec:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1494fc:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  14950c:	73616369 64612074 73657264 00000073     icast address...
  14951c:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  14952c:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  14953c:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  14954c:	6120736d 65726464 00007373 706d6769     ms address..igmp
  14955c:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  14956c:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  14957c:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  14958c:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  14959c:	63203a64 6b636568 61687420 69662074     d: check that fi
  1495ac:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  1495bc:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  1495cc:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  1495dc:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1495ec:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  1495fc:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  14960c:	63656863 6874206b 66207461 74737269     check that first
  14961c:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  14962c:	63757274 70692074 7264685f 00000000     truct ip_hdr....

0014963c <ip_addr_any>:
  14963c:	00000000                                ....

00149640 <ip_addr_broadcast>:
  149640:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  149650:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149660:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149670:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  149680:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  149690:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  1496a0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1496b0:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  1496c0:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  1496d0:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  1496e0:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  1496f0:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  149700:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  149710:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  149720:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  149730:	7473696c 00000000 63656863 7266206b     list....check fr
  149740:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  149750:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  149760:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149770:	6d207369 20747375 74206562 66206568     is must be the f
  149780:	74737269 61726620 6e656d67 00002174     irst fragment!..
  149790:	696e6173 63207974 6b636568 00000000     sanity check....
  1497a0:	696c6176 65746164 7461645f 61726761     validate_datagra
  1497b0:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  1497c0:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  1497d0:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  1497e0:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  1497f0:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149800:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149810:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149820:	64202928 2073656f 20746f6e 70707573     () does not supp
  149830:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149840:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149850:	64616572 65732079 00000074 73696874     ready set...this
  149860:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149870:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149880:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149890:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1498a0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1498b0:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  1498c0:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  1498d0:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  1498e0:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  1498f0:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149900:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149910:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149920:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149930:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149940:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149950:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149960:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149970:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149980:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149990:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  1499a0:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  1499b0:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  1499c0:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  1499d0:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  1499e0:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  1499f0:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149a00:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149a10:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149a20:	65732072 6c20646e 74676e65 64252068     r send length %d
  149a30:	63786520 20646565 2078616d 676e656c      exceed max leng
  149a40:	00006874 2074656e 6f727265 65722072     th..net error re
  149a50:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149a60:	20646565 2078616d 676e656c 00006874     eed max length..
  149a70:	20687465 64616572 766e6920 64696c61     eth read invalid
  149a80:	72617020 74656d61 62207265 65666675      parameter buffe
  149a90:	70252072 7a697320 64252065 00000000     r %p size %d....
  149aa0:	20687465 74697277 6e692065 696c6176     eth write invali
  149ab0:	61702064 656d6172 20726574 66667562     d parameter buff
  149ac0:	25207265 69732070 2520657a 00000064     er %p size %d...
  149ad0:	65746e69 75707272 616d2074 20686374     interrput match 
  149ae0:	65736162 64646120 72652072 00726f72     base addr error.
  149af0:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149b00:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149b10:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149b20:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149b30:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149b40:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149b50 <_k_enet_ops>:
  149b50:	00000000 00134f38 00134f80 00134fbc     ....8O...O...O..
  149b60:	0013506c 0013496c 32335b1b 2f495b6d     lP..lI...[32m[I/
  149b70:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149b80:	76656420 20656369 74696e69 63757320      device init suc
  149b90:	73736563 00000000 63616d65 76656420     cess....emac dev
  149ba0:	20656369 74696e69 69616620 203a646c     ice init faild: 
  149bb0:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

00149bc0 <__FUNCTION__.9268>:
  149bc0:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  149bd0:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  149be0:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  149bf0:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149c00:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149c10:	0000000a                                ....

00149c14 <s_enetBases>:
  149c14:	00000000 02188000 020b4000 74736e69     .........@..inst
  149c24:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149c34:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149c44:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149c54:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149c64:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149c74:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149c84:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149c94:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  149ca4:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  149cb4:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  149cc4:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  149cd4:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  149ce4:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  149cf4:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149d04:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149d14:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149d24:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149d34:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149d44:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149d54:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  149d64:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  149d74:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  149d84:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  149d94:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149da4:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149db4:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149dc4:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  149dd4:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  149de4:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  149df4:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  149e04:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  149e14:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  149e24:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  149e34:	6e654c65 00000000 2a2a2a2a 2a2a2a2a     eLen....********
  149e44:	64252a2a 0000000a 64427874 72617453     **%d....txBdStar
  149e54:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  149e64:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  149e74:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  149e84:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  149e94:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  149ea4:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  149eb4:	72724565 7453726f 63697461 00000000     eErrorStatic....
  149ec4:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  149ed4:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  149ee4:	72652065 30726f72 72756320 66667542     e error0 curBuff
  149ef4:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  149f04:	25783020 20783430 676e656c 25206874      0x%04x length %
  149f14:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  149f24:	72652065 31726f72 72756320 66667542     e error1 curBuff
  149f34:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  149f44:	25783020 20783430 676e656c 25206874      0x%04x length %
  149f54:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  149f64:	72727543 00746e65 61746164 00000000     Current.data....
  149f74:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  149f84:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  149f94:	0000004e 72646461 00737365              N...address.

00149fa0 <__FUNCTION__.9236>:
  149fa0:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  149fb0:	00000000                                ....

00149fb4 <__FUNCTION__.9241>:
  149fb4:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  149fc4:	69666e6f 00000067                       onfig...

00149fcc <__FUNCTION__.9250>:
  149fcc:	54454e45 696e495f 00000074              ENET_Init...

00149fd8 <__FUNCTION__.9259>:
  149fd8:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  149fe8:	00000000                                ....

00149fec <__FUNCTION__.9288>:
  149fec:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  149ffc:	63736544 74706972 0073726f              Descriptors.

0014a008 <__FUNCTION__.9302>:
  14a008:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  14a018:	63736544 74706972 0073726f              Descriptors.

0014a024 <__FUNCTION__.9324>:
  14a024:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

0014a034 <__FUNCTION__.9331>:
  14a034:	54454e45 7465535f 00494d53              ENET_SetSMI.

0014a040 <__FUNCTION__.9371>:
  14a040:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  14a050:	5265726f 46646165 656d6172 00000000     oreReadFrame....

0014a060 <__FUNCTION__.9383>:
  14a060:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

0014a070 <__FUNCTION__.9390>:
  14a070:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  14a080:	65666675 00007372                       uffers..

0014a088 <__FUNCTION__.9398>:
  14a088:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

0014a098 <__FUNCTION__.9407>:
  14a098:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  14a0a8:	6f724774 00007075                       tGroup..

0014a0b0 <__FUNCTION__.9422>:
  14a0b0:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  14a0c0:	47747361 70756f72 00000000              astGroup....

0014a0cc <__FUNCTION__.9439>:
  14a0cc:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  14a0dc:	646e6148 0072656c                       Handler.

0014a0e4 <__FUNCTION__.9446>:
  14a0e4:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  14a0f4:	6c646e61 00007265                       andler..

0014a0fc <__FUNCTION__.9451>:
  14a0fc:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  14a10c:	72656c64 00000000 76726573 73656369     dler....services
  14a11c:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a12c:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a13c:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a14c <__func__.6332>:
  14a14c:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a15c:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a16c:	00007375 6c707564 00007865              us..duplex..

0014a178 <__FUNCTION__.8416>:
  14a178:	5f594850 64616552 00000000              PHY_Read....

0014a184 <__FUNCTION__.8434>:
  14a184:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a194:	00000073                                s...

0014a198 <__FUNCTION__.8443>:
  14a198:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a1a8:	6c707544 00007865                       Duplex..

0014a1b0 <errid>:
  14a1b0:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a1c0:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a1d0:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a1e0:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a1f0:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a200:	79747372 487c7b7a 00000000              rstyz{|H....

0014a20c <errmsg>:
  14a20c:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a21c:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a22c:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a23c:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a24c:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a25c:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a26c:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a27c:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a28c:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a29c:	72702068 7365636f 69460073 6520656c     h process.File e
  14a2ac:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a2bc:	6772616c 6f662065 61642072 74206174     large for data t
  14a2cc:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a2dc:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a2ec:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a2fc:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a30c:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a31c:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a32c:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a33c:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a34c:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a35c:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a36c:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a37c:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a38c:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a39c:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a3ac:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a3bc:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a3cc:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a3dc:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a3ec:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a3fc:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a40c:	73206f4e 20686375 69766564 6f206563     No such device o
  14a41c:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a42c:	69766564 72206563 69757165 00646572     device required.
  14a43c:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a44c:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a45c:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a46c:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a47c:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a48c:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a49c:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a4ac:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a4bc:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a4cc:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a4dc:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a4ec:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a4fc:	65642065 69726373 726f7470 76612073     e descriptors av
  14a50c:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a51c:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a52c:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a53c:	64646120 73736572 6c694600 6f742065      address.File to
  14a54c:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a55c:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a56c:	69617661 6c62616c 65520065 72756f73     available.Resour
  14a57c:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14a58c:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14a59c:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14a5ac:	6f697665 6f207375 72656e77 65696420     evious owner die
  14a5bc:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14a5cc:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14a5dc:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14a5ec:	73656d20 65676173 20666f20 69736564      message of desi
  14a5fc:	20646572 65707974 65644900 6669746e     red type.Identif
  14a60c:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14a61c:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14a62c:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14a63c:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14a64c:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14a65c:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14a66c:	62207361 206e6565 65766573 00646572     as been severed.
  14a67c:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14a68c:	6d206461 61737365 46006567 20656c69     ad message.File 
  14a69c:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14a6ac:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14a6bc:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14a6cc:	64646120 73736572 71657220 65726975      address require
  14a6dc:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14a6ec:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14a6fc:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14a70c:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14a71c:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14a72c:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14a73c:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14a74c:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14a75c:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14a76c:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14a77c:	74726f70 41006465 65726464 66207373     ported.Address f
  14a78c:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14a79c:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14a7ac:	72646441 20737365 20746f6e 69617661     Address not avai
  14a7bc:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14a7cc:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14a7dc:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14a7ec:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14a7fc:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14a80c:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14a81c:	73207265 65636170 61766120 62616c69     er space availab
  14a82c:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14a83c:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14a84c:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14a85c:	7320746f 20646e65 65746661 6f732072     ot send after so
  14a86c:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14a87c:	74617265 206e6f69 65726c61 20796461     eration already 
  14a88c:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14a89c:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14a8ac:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14a8bc:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14a8cc:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14a8dc:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14a8ec:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14a8fc:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14a90c:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14a91c:	6e692072 6d726f66 6f697461 0000006e     r information...
  14a92c:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14a93c:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14a94c:	00000a29                                )...

0014a950 <__FUNCTION__.6013>:
  14a950:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14a960:	63737973 006c6c61                       syscall.

0014a968 <__FUNCTION__.6017>:
  14a968:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014a978 <__FUNCTION__.6020>:
  14a978:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014a988 <__FUNCTION__.6026>:
  14a988:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014a998 <__FUNCTION__.6032>:
  14a998:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014a9a8 <__FUNCTION__.6038>:
  14a9a8:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014a9b8 <__FUNCTION__.6042>:
  14a9b8:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014a9c8 <__FUNCTION__.6045>:
  14a9c8:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014a9d8 <__FUNCTION__.6048>:
  14a9d8:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014a9e8 <__FUNCTION__.6052>:
  14a9e8:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014a9f8 <__FUNCTION__.6058>:
  14a9f8:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014aa08 <__FUNCTION__.6062>:
  14aa08:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014aa18 <__FUNCTION__.6065>:
  14aa18:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014aa28 <__FUNCTION__.6068>:
  14aa28:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014aa38 <__FUNCTION__.6071>:
  14aa38:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014aa48 <__FUNCTION__.6077>:
  14aa48:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014aa58 <__FUNCTION__.6080>:
  14aa58:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014aa68 <__FUNCTION__.6083>:
  14aa68:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014aa78 <__FUNCTION__.6086>:
  14aa78:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014aa88 <__FUNCTION__.6089>:
  14aa88:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014aa98 <__FUNCTION__.6092>:
  14aa98:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014aaa8 <__FUNCTION__.6095>:
  14aaa8:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014aab8 <__FUNCTION__.6100>:
  14aab8:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014aac8 <__FUNCTION__.6103>:
  14aac8:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014aad8 <__FUNCTION__.6106>:
  14aad8:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014aae8 <__FUNCTION__.6111>:
  14aae8:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014aaf8 <__FUNCTION__.6116>:
  14aaf8:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014ab08 <__FUNCTION__.6121>:
  14ab08:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014ab18 <__FUNCTION__.6125>:
  14ab18:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014ab28 <__FUNCTION__.6129>:
  14ab28:	63737973 5f6c6c61 00707564              syscall_dup.

0014ab34 <__FUNCTION__.6133>:
  14ab34:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014ab44 <__FUNCTION__.6136>:
  14ab44:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014ab54 <__FUNCTION__.6140>:
  14ab54:	63737973 5f6c6c61 006b7262              syscall_brk.

0014ab60 <__FUNCTION__.6143>:
  14ab60:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014ab70 <__FUNCTION__.6146>:
  14ab70:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014ab80 <__FUNCTION__.6149>:
  14ab80:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014ab90 <__FUNCTION__.6152>:
  14ab90:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014aba0 <__FUNCTION__.6155>:
  14aba0:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014abb0 <__FUNCTION__.6158>:
  14abb0:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014abc0 <__FUNCTION__.6164>:
  14abc0:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014abd0 <__FUNCTION__.6170>:
  14abd0:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014abe0 <__FUNCTION__.6173>:
  14abe0:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014abf0 <__FUNCTION__.6176>:
  14abf0:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014ac00 <__FUNCTION__.6179>:
  14ac00:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014ac10 <__FUNCTION__.6182>:
  14ac10:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014ac20 <__FUNCTION__.6187>:
  14ac20:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014ac30 <__FUNCTION__.6190>:
  14ac30:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014ac40 <__FUNCTION__.6193>:
  14ac40:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014ac50 <__FUNCTION__.6196>:
  14ac50:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014ac60 <__FUNCTION__.6203>:
  14ac60:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14ac70:	0000006e                                n...

0014ac74 <__FUNCTION__.6206>:
  14ac74:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14ac84:	00000000                                ....

0014ac88 <__FUNCTION__.6209>:
  14ac88:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14ac98:	00000000                                ....

0014ac9c <__FUNCTION__.6212>:
  14ac9c:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14acac:	0000646e                                nd..

0014acb0 <__FUNCTION__.6215>:
  14acb0:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14acc0:	0000676e                                ng..

0014acc4 <__FUNCTION__.6218>:
  14acc4:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14acd4:	00656d61                                ame.

0014acd8 <__FUNCTION__.6223>:
  14acd8:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14ace8:	00000074                                t...

0014acec <__FUNCTION__.6226>:
  14acec:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14acfc:	00000065                                e...

0014ad00 <__FUNCTION__.6229>:
  14ad00:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14ad10:	79616466 00000000                       fday....

0014ad18 <__FUNCTION__.6232>:
  14ad18:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14ad28:	79616466 00000000                       fday....

0014ad30 <__FUNCTION__.6235>:
  14ad30:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14ad40:	00000073                                s...

0014ad44 <__FUNCTION__.6238>:
  14ad44:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14ad54:	00000073                                s...

0014ad58 <__FUNCTION__.6241>:
  14ad58:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014ad68 <__FUNCTION__.6247>:
  14ad68:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14ad78:	00000000                                ....

0014ad7c <__FUNCTION__.6250>:
  14ad7c:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014ad8c <__FUNCTION__.6253>:
  14ad8c:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014ad9c <__FUNCTION__.6256>:
  14ad9c:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014adac <__FUNCTION__.6261>:
  14adac:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014adbc <__FUNCTION__.6264>:
  14adbc:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14adcc:	00000000                                ....

0014add0 <__FUNCTION__.6267>:
  14add0:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14ade0:	00000065                                e...

0014ade4 <__FUNCTION__.6270>:
  14ade4:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014adf4 <__FUNCTION__.6273>:
  14adf4:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014ae04 <__FUNCTION__.6276>:
  14ae04:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14ae14:	00797469                                ity.

0014ae18 <__FUNCTION__.6279>:
  14ae18:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14ae28:	00797469                                ity.

0014ae2c <__FUNCTION__.6285>:
  14ae2c:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014ae3c <__FUNCTION__.6291>:
  14ae3c:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014ae4c <__FUNCTION__.6294>:
  14ae4c:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014ae5c <__FUNCTION__.6297>:
  14ae5c:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14ae6c:	00000072                                r...

0014ae70 <__FUNCTION__.6300>:
  14ae70:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14ae80:	00000072                                r...

0014ae84 <__FUNCTION__.6305>:
  14ae84:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014ae94 <__FUNCTION__.6310>:
  14ae94:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014aea4 <__FUNCTION__.6315>:
  14aea4:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014aeb4 <__FUNCTION__.6318>:
  14aeb4:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014aec4 <__FUNCTION__.6321>:
  14aec4:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014aed4 <__FUNCTION__.6324>:
  14aed4:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014aee4 <__FUNCTION__.6327>:
  14aee4:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014aef4 <__FUNCTION__.6331>:
  14aef4:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014af04 <__FUNCTION__.6334>:
  14af04:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14af14:	0000006e                                n...

0014af18 <__FUNCTION__.6337>:
  14af18:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014af28 <__FUNCTION__.6340>:
  14af28:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14af38:	6d616e6e 00000065                       nname...

0014af40 <__FUNCTION__.6343>:
  14af40:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014af50 <__FUNCTION__.6346>:
  14af50:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14af60:	00000000                                ....

0014af64 <__FUNCTION__.6349>:
  14af64:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14af74:	00000000                                ....

0014af78 <__FUNCTION__.6356>:
  14af78:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14af88:	006b7361                                ask.

0014af8c <__FUNCTION__.6359>:
  14af8c:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14af9c:	00656c75                                ule.

0014afa0 <__FUNCTION__.6362>:
  14afa0:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14afb0:	6c75646f 00000065                       odule...

0014afb8 <__FUNCTION__.6365>:
  14afb8:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14afc8:	00000000                                ....

0014afcc <__FUNCTION__.6368>:
  14afcc:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014afdc <__FUNCTION__.6371>:
  14afdc:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014afec <__FUNCTION__.6374>:
  14afec:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014affc <__FUNCTION__.6377>:
  14affc:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014b00c <__FUNCTION__.6380>:
  14b00c:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14b01c:	00797469                                ity.

0014b020 <__FUNCTION__.6383>:
  14b020:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b030:	00000000                                ....

0014b034 <__FUNCTION__.6386>:
  14b034:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b044:	00000000                                ....

0014b048 <__FUNCTION__.6394>:
  14b048:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014b058 <__FUNCTION__.6400>:
  14b058:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b068:	00000000                                ....

0014b06c <__FUNCTION__.6408>:
  14b06c:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14b07c:	00007463                                ct..

0014b080 <__FUNCTION__.6411>:
  14b080:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014b090 <__FUNCTION__.6414>:
  14b090:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014b0a0 <__FUNCTION__.6422>:
  14b0a0:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014b0b0 <__FUNCTION__.6434>:
  14b0b0:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014b0c0 <__FUNCTION__.6441>:
  14b0c0:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014b0d0 <__FUNCTION__.6444>:
  14b0d0:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14b0e0:	00000063                                c...

0014b0e4 <__FUNCTION__.6447>:
  14b0e4:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014b0f4 <__FUNCTION__.6450>:
  14b0f4:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014b104 <__FUNCTION__.6453>:
  14b104:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b114 <__FUNCTION__.6456>:
  14b114:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b124:	00000000                                ....

0014b128 <__FUNCTION__.6459>:
  14b128:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b138:	00006c6c                                ll..

0014b13c <__FUNCTION__.6464>:
  14b13c:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b14c:	72617074 00006d61                       tparam..

0014b154 <__FUNCTION__.6469>:
  14b154:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b164:	72617074 00006d61                       tparam..

0014b16c <__FUNCTION__.6475>:
  14b16c:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b17c:	68637374 6c756465 00007265              tscheduler..

0014b188 <__FUNCTION__.6481>:
  14b188:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b198:	68637374 6c756465 00007265              tscheduler..

0014b1a4 <__FUNCTION__.6484>:
  14b1a4:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b1b4:	00646c65                                eld.

0014b1b8 <__FUNCTION__.6488>:
  14b1b8:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b1c8:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b1d8 <__FUNCTION__.6492>:
  14b1d8:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b1e8:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b1f8 <__FUNCTION__.6495>:
  14b1f8:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b208:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b218 <__FUNCTION__.6500>:
  14b218:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b228:	00000070                                p...

0014b22c <__FUNCTION__.6508>:
  14b22c:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b23c <__FUNCTION__.6511>:
  14b23c:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b24c:	00000064                                d...

0014b250 <__FUNCTION__.6514>:
  14b250:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b260:	00000064                                d...

0014b264 <__FUNCTION__.6520>:
  14b264:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b274 <__FUNCTION__.6523>:
  14b274:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b284:	00006c74                                tl..

0014b288 <__FUNCTION__.6526>:
  14b288:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b298:	00000064                                d...

0014b29c <__FUNCTION__.6529>:
  14b29c:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b2ac:	00000064                                d...

0014b2b0 <__FUNCTION__.6532>:
  14b2b0:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b2c0 <__FUNCTION__.6535>:
  14b2c0:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b2d0:	6e727574 00000000                       turn....

0014b2d8 <__FUNCTION__.6543>:
  14b2d8:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b2e8:	6e6f6974 00000000                       tion....

0014b2f0 <__FUNCTION__.6551>:
  14b2f0:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b300:	616d636f 00006b73                       ocmask..

0014b308 <__FUNCTION__.6554>:
  14b308:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b318:	6e69646e 00000067                       nding...

0014b320 <__FUNCTION__.6557>:
  14b320:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b330:	7764656d 00746961                       medwait.

0014b338 <__FUNCTION__.6560>:
  14b338:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b348:	69657565 006f666e                       eueinfo.

0014b350 <__FUNCTION__.6563>:
  14b350:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b360:	6e657073 00000064                       spend...

0014b368 <__FUNCTION__.6566>:
  14b368:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b378 <__FUNCTION__.6569>:
  14b378:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b388:	00000000                                ....

0014b38c <__FUNCTION__.6572>:
  14b38c:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b39c <__FUNCTION__.6577>:
  14b39c:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b3ac <__FUNCTION__.6580>:
  14b3ac:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b3bc <__FUNCTION__.6583>:
  14b3bc:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b3cc <__FUNCTION__.6586>:
  14b3cc:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b3dc:	006b6361                                ack.

0014b3e0 <__FUNCTION__.6589>:
  14b3e0:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b3f0:	00000000                                ....

0014b3f4 <__FUNCTION__.6592>:
  14b3f4:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b404 <__FUNCTION__.6597>:
  14b404:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b414:	00007469                                it..

0014b418 <__FUNCTION__.6606>:
  14b418:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b428 <__FUNCTION__.6609>:
  14b428:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b438:	00003436                                64..

0014b43c <__FUNCTION__.6612>:
  14b43c:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b44c:	00343665                                e64.

0014b450 <__FUNCTION__.6617>:
  14b450:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b460 <__FUNCTION__.6622>:
  14b460:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b470 <__FUNCTION__.6627>:
  14b470:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b480 <__FUNCTION__.6630>:
  14b480:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b490:	00000000                                ....

0014b494 <__FUNCTION__.6633>:
  14b494:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b4a4:	00000000                                ....

0014b4a8 <__FUNCTION__.6636>:
  14b4a8:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b4b8:	00000000                                ....

0014b4bc <__FUNCTION__.6639>:
  14b4bc:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b4cc:	00000032                                2...

0014b4d0 <__FUNCTION__.6642>:
  14b4d0:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b4e0:	00000032                                2...

0014b4e4 <__FUNCTION__.6645>:
  14b4e4:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b4f4:	00003233                                32..

0014b4f8 <__FUNCTION__.6648>:
  14b4f8:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b508:	00003233                                32..

0014b50c <__FUNCTION__.6651>:
  14b50c:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b51c:	00323373                                s32.

0014b520 <__FUNCTION__.6654>:
  14b520:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b530:	00323373                                s32.

0014b534 <__FUNCTION__.6657>:
  14b534:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b544:	00000000                                ....

0014b548 <__FUNCTION__.6660>:
  14b548:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b558:	00323364                                d32.

0014b55c <__FUNCTION__.6663>:
  14b55c:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b56c:	00323364                                d32.

0014b570 <__FUNCTION__.6666>:
  14b570:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b580:	00323364                                d32.

0014b584 <__FUNCTION__.6669>:
  14b584:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b594:	00323364                                d32.

0014b598 <__FUNCTION__.6672>:
  14b598:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014b5a8 <__FUNCTION__.6675>:
  14b5a8:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14b5b8:	00000000                                ....

0014b5bc <__FUNCTION__.6678>:
  14b5bc:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14b5cc:	00000000                                ....

0014b5d0 <__FUNCTION__.6681>:
  14b5d0:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b5e0:	00003233                                32..

0014b5e4 <__FUNCTION__.6684>:
  14b5e4:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b5f4:	00003233                                32..

0014b5f8 <__FUNCTION__.6690>:
  14b5f8:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b608:	00003436                                64..

0014b60c <__FUNCTION__.6693>:
  14b60c:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14b61c:	0000746f                                ot..

0014b620 <__FUNCTION__.6696>:
  14b620:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014b630 <__FUNCTION__.6702>:
  14b630:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014b640 <__FUNCTION__.6708>:
  14b640:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014b650 <__FUNCTION__.6711>:
  14b650:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014b660 <__FUNCTION__.6714>:
  14b660:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14b670:	00000064                                d...

0014b674 <__FUNCTION__.6717>:
  14b674:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14b684:	00000000                                ....

0014b688 <__FUNCTION__.6720>:
  14b688:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14b698:	00000072                                r...

0014b69c <__FUNCTION__.6723>:
  14b69c:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14b6ac:	00000072                                r...

0014b6b0 <__FUNCTION__.6726>:
  14b6b0:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14b6c0:	00000000                                ....

0014b6c4 <__FUNCTION__.6729>:
  14b6c4:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14b6d4:	00000072                                r...

0014b6d8 <__FUNCTION__.6732>:
  14b6d8:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14b6e8:	00000072                                r...

0014b6ec <__FUNCTION__.6735>:
  14b6ec:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14b6fc:	00000072                                r...

0014b700 <__FUNCTION__.6738>:
  14b700:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14b710:	00007274                                tr..

0014b714 <__FUNCTION__.6741>:
  14b714:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14b724:	00007274                                tr..

0014b728 <__FUNCTION__.6744>:
  14b728:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14b738:	00727474                                ttr.

0014b73c <__FUNCTION__.6747>:
  14b73c:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14b74c:	72747461 00000000                       attr....

0014b754 <__FUNCTION__.6750>:
  14b754:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14b764:	72747461 00000000                       attr....

0014b76c <__FUNCTION__.6755>:
  14b76c:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014b77c <__FUNCTION__.6758>:
  14b77c:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b78c:	00003436                                64..

0014b790 <__FUNCTION__.6767>:
  14b790:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014b7a0 <__FUNCTION__.6773>:
  14b7a0:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b7b0:	66666174 74696e69 00000079              taffinity...

0014b7bc <__FUNCTION__.6776>:
  14b7bc:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b7cc:	66666174 74696e69 00000079              taffinity...

0014b7d8 <__FUNCTION__.6779>:
  14b7d8:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14b7e8:	00000000                                ....

0014b7ec <__FUNCTION__.6782>:
  14b7ec:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14b7fc:	0000796f                                oy..

0014b800 <__FUNCTION__.6785>:
  14b800:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14b810:	73746e65 00000000                       ents....

0014b818 <__FUNCTION__.6788>:
  14b818:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14b828:	00000074                                t...

0014b82c <__FUNCTION__.6791>:
  14b82c:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14b83c:	0000006c                                l...

0014b840 <__FUNCTION__.6795>:
  14b840:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14b850:	00007075                                up..

0014b854 <__FUNCTION__.6798>:
  14b854:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14b864:	6b6f6f63 00006569                       cookie..

0014b86c <__FUNCTION__.6801>:
  14b86c:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14b87c:	65746165 00000000                       eate....

0014b884 <__FUNCTION__.6804>:
  14b884:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14b894:	0000006c                                l...

0014b898 <__FUNCTION__.6807>:
  14b898:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14b8a8:	00007469                                it..

0014b8ac <__FUNCTION__.6810>:
  14b8ac:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14b8bc:	705f656c 73656761 00000000              le_pages....

0014b8c8 <__FUNCTION__.6814>:
  14b8c8:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14b8d8:	72646461 00737365                       address.

0014b8e0 <__FUNCTION__.6817>:
  14b8e0:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14b8f0:	65746165 00000000                       eate....

0014b8f8 <__FUNCTION__.6820>:
  14b8f8:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14b908:	6d697474 00000065                       ttime...

0014b910 <__FUNCTION__.6823>:
  14b910:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14b920:	6d697474 00000065                       ttime...

0014b928 <__FUNCTION__.6826>:
  14b928:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14b938:	65766f74 6e757272 00000000              toverrun....

0014b944 <__FUNCTION__.6829>:
  14b944:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14b954:	6574656c 00000000                       lete....

0014b95c <__FUNCTION__.6834>:
  14b95c:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14b96c:	6d697474 00000065                       ttime...

0014b974 <__FUNCTION__.6839>:
  14b974:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14b984:	6d697474 00000065                       ttime...

0014b98c <__FUNCTION__.6844>:
  14b98c:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14b99c:	73657274 00000000                       tres....

0014b9a4 <__FUNCTION__.6847>:
  14b9a4:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14b9b4:	6c736f6e 00706565                       nosleep.

0014b9bc <__FUNCTION__.6853>:
  14b9bc:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14b9cc:	00000000                                ....

0014b9d0 <__FUNCTION__.6859>:
  14b9d0:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14b9e0:	00000034                                4...

0014b9e4 <__FUNCTION__.6862>:
  14b9e4:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014b9f4 <__FUNCTION__.6865>:
  14b9f4:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014ba04 <__FUNCTION__.6868>:
  14ba04:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14ba14:	36657369 34365f34 00000000              ise64_64....

0014ba20 <__FUNCTION__.6871>:
  14ba20:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14ba30:	6f695f67 65736162 00000000              g_iobase....

0014ba3c <__FUNCTION__.6874>:
  14ba3c:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14ba4c:	65725f67 00006461                       g_read..

0014ba54 <__FUNCTION__.6877>:
  14ba54:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14ba64:	72775f67 00657469                       g_write.

0014ba6c <__FUNCTION__.6880>:
  14ba6c:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014ba7c <__FUNCTION__.6883>:
  14ba7c:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14ba8c:	0000006b                                k...

0014ba90 <__FUNCTION__.6886>:
  14ba90:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14baa0:	646e6573 00000000                       send....

0014baa8 <__FUNCTION__.6889>:
  14baa8:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bab8:	65636572 00657669                       receive.

0014bac0 <__FUNCTION__.6892>:
  14bac0:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14bad0:	00000079                                y...

0014bad4 <__FUNCTION__.6895>:
  14bad4:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14bae4:	74746174 00000072                       tattr...

0014baec <__FUNCTION__.6898>:
  14baec:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014bafc <__FUNCTION__.6904>:
  14bafc:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014bb0c <__FUNCTION__.6910>:
  14bb0c:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014bb1c <__FUNCTION__.6916>:
  14bb1c:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014bb2c <__FUNCTION__.6921>:
  14bb2c:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014bb3c <__FUNCTION__.6927>:
  14bb3c:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014bb4c <__FUNCTION__.6933>:
  14bb4c:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14bb5c:	00656d61                                ame.

0014bb60 <__FUNCTION__.6939>:
  14bb60:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14bb70:	00656d61                                ame.

0014bb74 <__FUNCTION__.6942>:
  14bb74:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14bb84:	00007269                                ir..

0014bb88 <__FUNCTION__.6949>:
  14bb88:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014bb98 <__FUNCTION__.6958>:
  14bb98:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014bba8 <__FUNCTION__.6965>:
  14bba8:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014bbb8 <__FUNCTION__.6974>:
  14bbb8:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14bbc8:	00000000                                ....

0014bbcc <__FUNCTION__.6977>:
  14bbcc:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14bbdc:	00000000                                ....

0014bbe0 <__FUNCTION__.6985>:
  14bbe0:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14bbf0:	00007470                                pt..

0014bbf4 <__FUNCTION__.6993>:
  14bbf4:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14bc04:	00007470                                pt..

0014bc08 <__FUNCTION__.6996>:
  14bc08:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014bc18 <__FUNCTION__.6999>:
  14bc18:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014bc28 <__FUNCTION__.7002>:
  14bc28:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014bc38 <__FUNCTION__.7005>:
  14bc38:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014bc48 <__FUNCTION__.7008>:
  14bc48:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014bc58 <__FUNCTION__.7011>:
  14bc58:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014bc68 <__FUNCTION__.7014>:
  14bc68:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014bc78 <__FUNCTION__.7017>:
  14bc78:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014bc88 <__FUNCTION__.7020>:
  14bc88:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014bc98 <__FUNCTION__.7026>:
  14bc98:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014bca8 <__FUNCTION__.7030>:
  14bca8:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014bcb8 <__FUNCTION__.7036>:
  14bcb8:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014bcc8 <__FUNCTION__.7042>:
  14bcc8:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014bcd8 <__FUNCTION__.7045>:
  14bcd8:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014bce8 <__FUNCTION__.7048>:
  14bce8:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14bcf8:	0079656b                                key.

0014bcfc <__FUNCTION__.7051>:
  14bcfc:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014bd0c <__FUNCTION__.7054>:
  14bd0c:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14bd1c:	0000706f                                op..

0014bd20 <__FUNCTION__.7057>:
  14bd20:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014bd30 <__FUNCTION__.7060>:
  14bd30:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14bd40:	00007465                                et..

0014bd44 <__FUNCTION__.7063>:
  14bd44:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14bd54:	00007465                                et..

0014bd58 <__FUNCTION__.7066>:
  14bd58:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bd68:	74696e69 00000000                       init....

0014bd70 <__FUNCTION__.7069>:
  14bd70:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bd80:	5f646461 63746177 00000068              add_watch...

0014bd8c <__FUNCTION__.7072>:
  14bd8c:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bd9c:	775f6d72 68637461 00000000              rm_watch....

0014bda8 <__FUNCTION__.7075>:
  14bda8:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014bdb8 <__FUNCTION__.7078>:
  14bdb8:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14bdc8:	63696c6f 00000079                       olicy...

0014bdd0 <__FUNCTION__.7081>:
  14bdd0:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14bde0:	63696c6f 00000079                       olicy...

0014bde8 <__FUNCTION__.7084>:
  14bde8:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014bdf8 <__FUNCTION__.7087>:
  14bdf8:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014be08 <__FUNCTION__.7090>:
  14be08:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014be18 <__FUNCTION__.7093>:
  14be18:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14be28:	00000000                                ....

0014be2c <__FUNCTION__.7096>:
  14be2c:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14be3c:	00000074                                t...

0014be40 <__FUNCTION__.7099>:
  14be40:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14be50:	00000034                                4...

0014be54 <__FUNCTION__.7102>:
  14be54:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14be64:	00000000                                ....

0014be68 <__FUNCTION__.7105>:
  14be68:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14be78:	00000000                                ....

0014be7c <__FUNCTION__.7108>:
  14be7c:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014be8c <__FUNCTION__.7111>:
  14be8c:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14be9c:	00000074                                t...

0014bea0 <__FUNCTION__.7114>:
  14bea0:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14beb0:	00007461                                at..

0014beb4 <__FUNCTION__.7117>:
  14beb4:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14bec4:	00000000                                ....

0014bec8 <__FUNCTION__.7120>:
  14bec8:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14bed8:	00000074                                t...

0014bedc <__FUNCTION__.7123>:
  14bedc:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14beec:	00000000                                ....

0014bef0 <__FUNCTION__.7126>:
  14bef0:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014bf00 <__FUNCTION__.7129>:
  14bf00:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014bf10 <__FUNCTION__.7132>:
  14bf10:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14bf20:	6c5f7473 00747369                       st_list.

0014bf28 <__FUNCTION__.7135>:
  14bf28:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14bf38:	6c5f7473 00747369                       st_list.

0014bf40 <__FUNCTION__.7138>:
  14bf40:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014bf50 <__FUNCTION__.7141>:
  14bf50:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14bf60:	6c69665f 61725f65 0065676e              _file_range.

0014bf6c <__FUNCTION__.7144>:
  14bf6c:	63737973 5f6c6c61 00656574              syscall_tee.

0014bf78 <__FUNCTION__.7147>:
  14bf78:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14bf88:	00000000                                ....

0014bf8c <__FUNCTION__.7150>:
  14bf8c:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14bf9c:	00007365                                es..

0014bfa0 <__FUNCTION__.7153>:
  14bfa0:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014bfb0 <__FUNCTION__.7156>:
  14bfb0:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14bfc0:	00746961                                ait.

0014bfc4 <__FUNCTION__.7159>:
  14bfc4:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14bfd4:	00006461                                ad..

0014bfd8 <__FUNCTION__.7162>:
  14bfd8:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14bfe8:	00000074                                t...

0014bfec <__FUNCTION__.7165>:
  14bfec:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14bffc:	00000000                                ....

0014c000 <__FUNCTION__.7168>:
  14c000:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c010:	61657263 00006574                       create..

0014c018 <__FUNCTION__.7171>:
  14c018:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014c028 <__FUNCTION__.7174>:
  14c028:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14c038:	00000065                                e...

0014c03c <__FUNCTION__.7177>:
  14c03c:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c04c:	74746573 00656d69                       settime.

0014c054 <__FUNCTION__.7180>:
  14c054:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c064:	74746567 00656d69                       gettime.

0014c06c <__FUNCTION__.7183>:
  14c06c:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c07c:	00000034                                4...

0014c080 <__FUNCTION__.7186>:
  14c080:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14c090:	00000000                                ....

0014c094 <__FUNCTION__.7189>:
  14c094:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14c0a4:	65746165 00000031                       eate1...

0014c0ac <__FUNCTION__.7192>:
  14c0ac:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014c0bc <__FUNCTION__.7195>:
  14c0bc:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014c0cc <__FUNCTION__.7198>:
  14c0cc:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c0dc:	74696e69 00000031                       init1...

0014c0e4 <__FUNCTION__.7201>:
  14c0e4:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014c0f4 <__FUNCTION__.7204>:
  14c0f4:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014c104 <__FUNCTION__.7207>:
  14c104:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c114:	75657571 666e6965 0000006f              queueinfo...

0014c120 <__FUNCTION__.7210>:
  14c120:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c130:	6f5f746e 006e6570                       nt_open.

0014c138 <__FUNCTION__.7213>:
  14c138:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c148:	00000000                                ....

0014c14c <__FUNCTION__.7216>:
  14c14c:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c15c <__FUNCTION__.7219>:
  14c15c:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c16c:	696e695f 00000074                       _init...

0014c174 <__FUNCTION__.7222>:
  14c174:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c184:	72616d5f 0000006b                       _mark...

0014c18c <__FUNCTION__.7230>:
  14c18c:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c19c:	00000034                                4...

0014c1a0 <__FUNCTION__.7233>:
  14c1a0:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c1b0:	646e6168 615f656c 00000074              handle_at...

0014c1bc <__FUNCTION__.7236>:
  14c1bc:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c1cc:	646e6168 615f656c 00000074              handle_at...

0014c1d8 <__FUNCTION__.7239>:
  14c1d8:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c1e8:	6d69746a 00000065                       jtime...

0014c1f0 <__FUNCTION__.7242>:
  14c1f0:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c200 <__FUNCTION__.7245>:
  14c200:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c210:	00000000                                ....

0014c214 <__FUNCTION__.7248>:
  14c214:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c224 <__FUNCTION__.7251>:
  14c224:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c234:	725f6d76 76646165 00000000              vm_readv....

0014c240 <__FUNCTION__.7254>:
  14c240:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c250:	775f6d76 65746972 00000076              vm_writev...

0014c25c <__FUNCTION__.7257>:
  14c25c:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c26c <__FUNCTION__.7260>:
  14c26c:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c27c:	656c7564 00000000                       dule....

0014c284 <__FUNCTION__.7263>:
  14c284:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c294:	74746174 00000072                       tattr...

0014c29c <__FUNCTION__.7266>:
  14c29c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c2ac:	74746174 00000072                       tattr...

0014c2b4 <__FUNCTION__.7269>:
  14c2b4:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c2c4:	00000032                                2...

0014c2c8 <__FUNCTION__.7272>:
  14c2c8:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c2d8 <__FUNCTION__.7278>:
  14c2d8:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c2e8:	0000006d                                m...

0014c2ec <__FUNCTION__.7281>:
  14c2ec:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c2fc:	65746165 00000000                       eate....

0014c304 <__FUNCTION__.7284>:
  14c304:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c310 <__FUNCTION__.7287>:
  14c310:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c320:	00000000                                ....

0014c324 <__FUNCTION__.7290>:
  14c324:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c334:	00646674                                tfd.

0014c338 <__FUNCTION__.7293>:
  14c338:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c348:	00007265                                er..

0014c34c <__FUNCTION__.7296>:
  14c34c:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c35c <__FUNCTION__.7299>:
  14c35c:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c36c:	61725f65 0065676e                       e_range.

0014c374 <__FUNCTION__.7302>:
  14c374:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c384 <__FUNCTION__.7305>:
  14c384:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c394:	00000000                                ....

0014c398 <__FUNCTION__.7308>:
  14c398:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c3a8:	6365746f 00000074                       otect...

0014c3b0 <__FUNCTION__.7311>:
  14c3b0:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c3c0:	0000636f                                oc..

0014c3c4 <__FUNCTION__.7314>:
  14c3c4:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c3d4:	00000065                                e...

0014c3d8 <__FUNCTION__.7317>:
  14c3d8:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c3e8 <__FUNCTION__.7320>:
  14c3e8:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c3f8 <__FUNCTION__.7323>:
  14c3f8:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c408:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c418:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c428:	6d305b1b 00000000                       .[0m....

0014c430 <syscall_table>:
  14c430:	0013ad2c 0013af88 0013bfc0 0013ba28     ,...........(...
  14c440:	0013b9f0 0013b9b8 0013af60 00000000     ........`.......
  14c450:	0013ad10 0013acf4 0013af38 0013b980     ........8.......
  14c460:	0013af10 00000000 0013acd8 0013acbc     ................
  14c470:	0013aca0 00000000 00000000 0013c028     ............(...
  14c480:	0013bfa0 0013ac84 00000000 0013ac68     ............h...
  14c490:	0013ac4c 00000000 0013ac30 00000000     L.......0.......
  14c4a0:	00000000 0013ac14 00000000 00000000     ................
  14c4b0:	00000000 0013b3a0 0013abf8 00000000     ................
  14c4c0:	0013abdc 0013b370 0013b340 0013b310     ....p...@.......
  14c4d0:	0013aee8 0013aec0 0013ae98 0013abc0     ................
  14c4e0:	00000000 0013ae70 0013aba4 0013ab88     ....p...........
  14c4f0:	00000000 0013ab6c 0013ab50 0013ab34     ....l...P...4...
  14c500:	0013ab18 00000000 0013bfe0 0013b948     ............H...
  14c510:	00000000 0013aafc 00000000 00000000     ................
  14c520:	0013aae0 0013aac4 0013aaa8 0013b2e0     ................
  14c530:	0013aa8c 0013aa70 0013bf80 0013bc10     ....p...........
	...
  14c548:	0013aa54 0013aa38 0013aa1c 0013aa00     T...8...........
  14c558:	0013a9e4 0013b2b0 00000000 0013a9c8     ................
  14c568:	0013a9ac 0013a990 0013a974 0013a958     ........t...X...
  14c578:	00000000 0013a93c 00000000 0013b910     ....<...........
  14c588:	0013a920 0013a904 0013a8e8 00000000      ...............
  14c598:	00000000 0013b280 0013a8cc 0013a8b0     ................
  14c5a8:	0013a894 0013a878 0013a85c 0013a840     ....x...\...@...
  14c5b8:	00000000 0013a824 0013a808 00000000     ....$...........
  14c5c8:	00000000 0013a7ec 0013a7d0 0013a7b4     ................
  14c5d8:	0013b250 0013b220 0013a798 00000000     P... ...........
  14c5e8:	00000000 0013a77c 00000000 00000000     ....|...........
  14c5f8:	0013a760 0013a744 0013a728 00000000     `...D...(.......
  14c608:	0013ae48 0013a70c 0013a6f0 0013a6d4     H...............
  14c618:	0013a6b8 00000000 0013a69c 0013a680     ................
  14c628:	0013bbc8 00000000 0013a664 0013a648     ........d...H...
  14c638:	00000000 0013a62c 0013a610 0013a5f4     ....,...........
  14c648:	0013a5d8 0013a5bc 0013a5a0 00000000     ................
  14c658:	0013a584 0013a568 0013bd98 0013b8d8     ....h...........
  14c668:	0013bd48 0013a54c 0013a530 0013b834     H...L...0...4...
  14c678:	0013b790 0013a514 0013a4f8 0013a4dc     ................
  14c688:	0013a4c0 0013a4a4 0013a488 0013a46c     ............l...
  14c698:	0013b1f0 0013b1c0 0013b758 0013b720     ........X... ...
  14c6a8:	0013a450 0013ae20 0013adf8 0013a434     P... .......4...
  14c6b8:	0013b190 0013bcf8 0013a418 0013a3fc     ................
	...
  14c6d0:	0013b6e8 0013a3e0 0013a3c4 0013a3a8     ................
  14c6e0:	0013a38c 0013a370 0013bb80 0013bb38     ....p.......8...
  14c6f0:	0013a354 0013a338 0013a31c 0013a300     T...8...........
  14c700:	0013a2e4 0013a2c8 0013a2ac 0013b160     ............`...
  14c710:	0013a290 0013a274 0013a258 0013a23c     ....t...X...<...
	...
  14c728:	0013bf60 0013b130 0013bef0 0013a220     `...0....... ...
  14c738:	0013a204 0013b100 0013b0d0 0013b0a0     ................
  14c748:	0013a1e8 0013a1cc 0013a1b0 0013a194     ................
  14c758:	0013a178 0013a15c 0013a140 0013a124     x...\...@...$...
  14c768:	0013a108 0013a0ec 0013a0d0 0013a0b4     ................
  14c778:	0013a098 0013a07c 0013a060 0013a044     ....|...`...D...
  14c788:	0013a028 0013a00c 00139ff0 0013b6b0     (...............
  14c798:	00139fd4 00139fb8 0013b678 0013b640     ........x...@...
	...
  14c7b0:	0013bf40 00139f9c 00139f80 00139f64     @...........d...
  14c7c0:	00139f48 00139f2c 00139f10 00139ef4     H...,...........
  14c7d0:	00139ed8 00139ebc 00139ea0 00139e84     ................
  14c7e0:	00139e68 00139e4c 0013b070 00139e30     h...L...p...0...
  14c7f0:	0013be9c 0013b608 00139e14 00139df8     ................
  14c800:	00139ddc 00139dc0 00139da4 00139d88     ................
  14c810:	0013add0 00139d6c 00139d50 00139d34     ....l...P...4...
  14c820:	00139d18 00139cfc 00000000 00000000     ................
  14c830:	0013ada8 00139ce0 00139cc4 00139ca8     ................
  14c840:	00139c8c 00139c70 0013b040 0013b010     ....p...@.......
  14c850:	0013afe0 00139c54 00139c38 00139c1c     ....T...8.......
  14c860:	00139c00 00139be4 00139bc8 00139bac     ................
  14c870:	00139b90 00139b74 00139b58 00139b3c     ....t...X...<...
  14c880:	00139b20 00139b04 00139ae8 00139acc      ...............
  14c890:	00139ab0 0013b5d0 0013b598 0013b560     ............`...
  14c8a0:	0013afb0 0013b528 0013b4f0 0013b4b8     ....(...........
  14c8b0:	00139a94 0013baf0 0013be48 0013baa8     ........H.......
  14c8c0:	0013bdf4 00139a78 0013bca8 0013bc58     ....x.......X...
  14c8d0:	00139a5c 00139a40 00139a24 00139a08     \...@...$.......
  14c8e0:	001399ec 001399d0 001399b4 00139998     ................
  14c8f0:	0013997c 0013b47c 0013ad7c 0013b440     |...|...|...@...
  14c900:	0013b408 00139960 00139944 00139928     ....`...D...(...
  14c910:	0013990c 001398f0 001398d4 001398b8     ................
  14c920:	0013989c 00139880 00139864 00139848     ........d...H...
  14c930:	0013982c 00139810 001397f4 001397d8     ,...............
  14c940:	001397bc 001397a0 00139784 00139768     ............h...
  14c950:	0013974c 00139730 00139714 001396f8     L...0...........
  14c960:	001396dc 001396c0 001396a4 00139688     ................
  14c970:	0013966c 00139650 00139634 00139618     l...P...4.......
  14c980:	001395fc 001395e0 001395c4 001395a8     ................
  14c990:	0013958c 00139570 00139554 00139538     ....p...T...8...
  14c9a0:	0013951c 00139500 001394e4 001394c8     ................
  14c9b0:	001394ac 00139490 00139474 00139458     ........t...X...
  14c9c0:	0013943c 00139420 00139404 001393e8     <... ...........
  14c9d0:	001393cc 001393b0 00139394 00139378     ............x...
  14c9e0:	0013935c 00139340 00139324 00139308     \...@...$.......
  14c9f0:	001392ec 0013ba60 001392d0 001392b4     ....`...........
  14ca00:	00139298 0013927c 00139260 00139244     ....|...`...D...
  14ca10:	00139228 0013920c 001391f0 001391d4     (...............
  14ca20:	001391b8 0013919c 00139180 00139164     ............d...
  14ca30:	0013b3d0 00139148 0013912c 00139110     ....H...,.......
  14ca40:	001390f4 001390d8 001390bc 001390a0     ................
  14ca50:	00139084 00139068 0013904c 00139030     ....h...L...0...
  14ca60:	00139014 00138ff8 00138fdc 00138fc0     ................
  14ca70:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14ca80:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014ca90 <bin_tab>:
  14ca90:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14caa0:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14cab0:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14cac0:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014cacc <stderr>:
  14cacc:	0014d2a8                                ....

0014cad0 <stdout>:
  14cad0:	0014d340 20202b2d 30583020 00000078     @...-+   0X0x...
  14cae0:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14caf0:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14cb00:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014cb10 <states>:
  14cb10:	000a0019 00191919 05000000 00000000     ................
  14cb20:	00090000 0b000000 00000000 00000000     ................
  14cb30:	0a110019 03191919 0100070a 180b091b     ................
  14cb40:	06090000 0b00000b 00190600 19190000     ................
  14cb50:	00000019 00000000 00000000 00000000     ................
  14cb60:	00000e00 00000000 00190000 19190d0a     ................
  14cb70:	000d0019 09000200 0000000e 000e0009     ................
  14cb80:	00000e00 00000000 00000000 00000000     ................
	...
  14cb98:	0c000000 00000000 00000000 13000000     ................
  14cba8:	00000000 00000013 000c0900 00000000     ................
  14cbb8:	0c00000c 00000000 00000000 00000000     ................
	...
  14cbd4:	00001000 00000000 00000000 00000f00     ................
  14cbe4:	000f0400 09000000 00000010 00100000     ................
  14cbf4:	00001000 00000000 00000000 00000000     ................
	...
  14cc0c:	12000000 00000000 00000000 11000000     ................
  14cc1c:	00000000 00000011 00120900 00000000     ................
  14cc2c:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14cc50:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14cc80:	14000000 00000000 00000000 17000000     ................
  14cc90:	00000000 00000017 00140900 00000000     ................
  14cca0:	14000014 00000000 00000000 00000000     ................
	...
  14ccbc:	00001600 00000000 00000000 00001500     ................
  14cccc:	00150000 09000000 00000016 00160000     ................
  14ccdc:	00001600                                ....

0014cce0 <xdigits>:
  14cce0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014ccf0 <all_mask>:
  14ccf0:	ffffffff ffffffff                       ........

0014ccf8 <app_mask>:
  14ccf8:	7fffffff fffffffc                       ........

0014cd00 <__EH_FRAME_BEGIN__>:
  14cd00:	00000000                                ....
